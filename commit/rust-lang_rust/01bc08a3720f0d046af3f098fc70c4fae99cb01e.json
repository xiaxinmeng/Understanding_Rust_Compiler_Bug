{"sha": "01bc08a3720f0d046af3f098fc70c4fae99cb01e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYmMwOGEzNzIwZjBkMDQ2YWYzZjA5OGZjNzBjNGZhZTk5Y2IwMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-27T19:38:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-27T19:38:41Z"}, "message": "Auto merge of #1225 - JOE1994:rw_widestr, r=RalfJung\n\nAdd shims for env var emulation in Windows\n\nThis PR attempts to implement the final step of the instructions laid out in https://github.com/rust-lang/miri/issues/707#issuecomment-561564057 , and is yet a work in progress.\n\n### STATUS\n- [x] Add general **_target_** methods for **read_str/alloc_str** that dispatch to either **c_str** or **wide_str** variants\n(**helpers.rs**)\n- [x] Implement shims `fn getenvironmentvariablew`/`fn setenvironmentvariablew`\n(`std::env::var()`, `std::env::set_var()`)\n- [x] Implement shim `GetEnvironmentStringsW` (`std::env::vars()`)\n- [x] Implement shim `FreeEnvironmentStringsW`\n\n### ISSUES (updated on 03/21/2020)\n- MIRI errors while running `std::env::remove_var()` in Windows.\n    MIRI complaining about raw pointer usage in\nRust standard library [*src/libstd/sys/windows/os.rs*](https://github.com/rust-lang/miri/pull/1225#issuecomment-602100146).\n\n### TODO (probably on a separate PR)\n  - Move string helpers into a new file to avoid bloating **src/helpers.rs** too much. (**shims/os_str.rs**)", "tree": {"sha": "096eb1a2fda24d3c8652eb0c62c817bc609b3bc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/096eb1a2fda24d3c8652eb0c62c817bc609b3bc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01bc08a3720f0d046af3f098fc70c4fae99cb01e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01bc08a3720f0d046af3f098fc70c4fae99cb01e", "html_url": "https://github.com/rust-lang/rust/commit/01bc08a3720f0d046af3f098fc70c4fae99cb01e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01bc08a3720f0d046af3f098fc70c4fae99cb01e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2a9c7baed31d29c02d62acfcf49e61af1c37f12", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2a9c7baed31d29c02d62acfcf49e61af1c37f12", "html_url": "https://github.com/rust-lang/rust/commit/e2a9c7baed31d29c02d62acfcf49e61af1c37f12"}, {"sha": "579b3c49dac9def1495f7d97d4f5b2771bbeefd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/579b3c49dac9def1495f7d97d4f5b2771bbeefd8", "html_url": "https://github.com/rust-lang/rust/commit/579b3c49dac9def1495f7d97d4f5b2771bbeefd8"}], "stats": {"total": 162, "additions": 141, "deletions": 21}, "files": [{"sha": "03b995aa56d3fd76e9561099ccb6096b9d9b48ea", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01bc08a3720f0d046af3f098fc70c4fae99cb01e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/01bc08a3720f0d046af3f098fc70c4fae99cb01e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=01bc08a3720f0d046af3f098fc70c4fae99cb01e", "patch": "@@ -166,7 +166,7 @@ Several `-Z` flags are relevant for Miri:\n * `-Zmiri-disable-stacked-borrows` disables checking the experimental\n   [Stacked Borrows] aliasing rules.  This can make Miri run faster, but it also\n   means no aliasing violations will be detected.\n-* `-Zmiri-disable-isolation` disables host host isolation.  As a consequence,\n+* `-Zmiri-disable-isolation` disables host isolation.  As a consequence,\n   the program has access to host resources such as environment variables, file\n   systems, and randomness.\n * `-Zmiri-ignore-leaks` disables the memory leak checker."}, {"sha": "ed689b1f4272bbad5568d9623e6b5e755595c9f6", "filename": "src/shims/env.rs", "status": "modified", "additions": 125, "deletions": 2, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/01bc08a3720f0d046af3f098fc70c4fae99cb01e/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bc08a3720f0d046af3f098fc70c4fae99cb01e/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=01bc08a3720f0d046af3f098fc70c4fae99cb01e", "patch": "@@ -23,10 +23,16 @@ pub struct EnvVars<'tcx> {\n impl<'tcx> EnvVars<'tcx> {\n     pub(crate) fn init<'mir>(\n         ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n-        excluded_env_vars: Vec<String>,\n+        mut excluded_env_vars: Vec<String>,\n     ) -> InterpResult<'tcx> {\n+        let target_os = ecx.tcx.sess.target.target.target_os.as_str();\n+        if target_os == \"windows\" {\n+            // Temporary hack: Exclude `TERM` var to avoid terminfo trying to open the termcap file.\n+            // Can be removed once https://github.com/rust-lang/miri/issues/1013 is resolved.\n+            excluded_env_vars.push(\"TERM\".to_owned());\n+        }\n+\n         if ecx.machine.communicate {\n-            let target_os = ecx.tcx.sess.target.target.target_os.as_str();\n             for (name, value) in env::vars() {\n                 if !excluded_env_vars.contains(&name) {\n                     let var_ptr = match target_os {\n@@ -82,6 +88,82 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         })\n     }\n \n+    #[allow(non_snake_case)]\n+    fn GetEnvironmentVariableW(\n+        &mut self,\n+        name_op: OpTy<'tcx, Tag>, // LPCWSTR\n+        buf_op: OpTy<'tcx, Tag>,  // LPWSTR\n+        size_op: OpTy<'tcx, Tag>, // DWORD\n+    ) -> InterpResult<'tcx, u64> {\n+        let this = self.eval_context_mut();\n+        this.assert_target_os(\"windows\", \"GetEnvironmentVariableW\");\n+\n+        let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n+        let name = this.read_os_str_from_wide_str(name_ptr)?;\n+        Ok(match this.machine.env_vars.map.get(&name) {\n+            Some(var_ptr) => {\n+                // The offset is used to strip the \"{name}=\" part of the string.\n+                let name_offset_bytes =\n+                    u64::try_from(name.len()).unwrap().checked_add(1).unwrap().checked_mul(2).unwrap();\n+                let var_ptr = Scalar::from(var_ptr.offset(Size::from_bytes(name_offset_bytes), this)?);\n+                let var = this.read_os_str_from_wide_str(var_ptr)?;\n+\n+                let buf_ptr = this.read_scalar(buf_op)?.not_undef()?;\n+                // `buf_size` represents the size in characters.\n+                let buf_size = u64::try_from(this.read_scalar(size_op)?.to_u32()?).unwrap();\n+                let (success, len) = this.write_os_str_to_wide_str(&var, buf_ptr, buf_size)?;\n+\n+                if success {\n+                    // If the function succeeds, the return value is the number of characters stored in the buffer pointed to by lpBuffer,\n+                    // not including the terminating null character.\n+                    len\n+                } else {\n+                    // If lpBuffer is not large enough to hold the data, the return value is the buffer size, in characters,\n+                    // required to hold the string and its terminating null character and the contents of lpBuffer are undefined.\n+                    len + 1\n+                }\n+            }\n+            None => {\n+                let envvar_not_found = this.eval_path_scalar(&[\"std\", \"sys\", \"windows\", \"c\", \"ERROR_ENVVAR_NOT_FOUND\"])?;\n+                this.set_last_error(envvar_not_found.not_undef()?)?;\n+                0 // return zero upon failure\n+            }\n+        })\n+    }\n+\n+    #[allow(non_snake_case)]\n+    fn GetEnvironmentStringsW(&mut self) -> InterpResult<'tcx, Scalar<Tag>> {\n+        let this = self.eval_context_mut();\n+        this.assert_target_os(\"windows\", \"GetEnvironmentStringsW\");\n+\n+        // Info on layout of environment blocks in Windows: \n+        // https://docs.microsoft.com/en-us/windows/win32/procthread/environment-variables\n+        let mut env_vars = std::ffi::OsString::new();\n+        for &item in this.machine.env_vars.map.values() {\n+            let env_var = this.read_os_str_from_wide_str(Scalar::from(item))?;\n+            env_vars.push(env_var);\n+            env_vars.push(\"\\0\");\n+        }\n+        // Allocate environment block & Store environment variables to environment block.\n+        // Final null terminator(block terminator) is added by `alloc_os_str_to_wide_str`.\n+        // FIXME: MemoryKind should be `Machine`, blocked on https://github.com/rust-lang/rust/pull/70479.\n+        let envblock_ptr = this.alloc_os_str_as_wide_str(&env_vars, MiriMemoryKind::WinHeap.into());\n+        // If the function succeeds, the return value is a pointer to the environment block of the current process.\n+        Ok(envblock_ptr.into())\n+    }\n+\n+    #[allow(non_snake_case)]\n+    fn FreeEnvironmentStringsW(&mut self, env_block_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+        this.assert_target_os(\"windows\", \"FreeEnvironmentStringsW\");\n+\n+        let env_block_ptr = this.read_scalar(env_block_op)?.not_undef()?;\n+        // FIXME: MemoryKind should be `Machine`, blocked on https://github.com/rust-lang/rust/pull/70479.\n+        let result = this.memory.deallocate(this.force_ptr(env_block_ptr)?, None, MiriMemoryKind::WinHeap.into());\n+        // If the function succeeds, the return value is nonzero.\n+        Ok(result.is_ok() as i32)\n+    }\n+\n     fn setenv(\n         &mut self,\n         name_op: OpTy<'tcx, Tag>,\n@@ -118,6 +200,47 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n+    #[allow(non_snake_case)]\n+    fn SetEnvironmentVariableW(\n+        &mut self,\n+        name_op: OpTy<'tcx, Tag>,  // LPCWSTR\n+        value_op: OpTy<'tcx, Tag>, // LPCWSTR\n+    ) -> InterpResult<'tcx, i32> {\n+        let mut this = self.eval_context_mut();\n+        this.assert_target_os(\"windows\", \"SetEnvironmentVariableW\");\n+\n+        let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n+        let value_ptr = this.read_scalar(value_op)?.not_undef()?;\n+\n+        if this.is_null(name_ptr)? {\n+            // ERROR CODE is not clearly explained in docs.. For now, throw UB instead.\n+            throw_ub_format!(\"pointer to environment variable name is NULL\");\n+        }\n+        \n+        let name = this.read_os_str_from_wide_str(name_ptr)?;\n+        if name.is_empty() {\n+            throw_unsup_format!(\"environment variable name is an empty string\");\n+        } else if name.to_string_lossy().contains('=') {\n+            throw_unsup_format!(\"environment variable name contains '='\");\n+        } else if this.is_null(value_ptr)? {\n+            // Delete environment variable `{name}`\n+            if let Some(var) = this.machine.env_vars.map.remove(&name) {\n+                this.memory.deallocate(var, None, MiriMemoryKind::Machine.into())?;\n+                this.update_environ()?;\n+            }\n+            Ok(1) // return non-zero on success\n+        } else {\n+            let value = this.read_os_str_from_wide_str(value_ptr)?;\n+            let var_ptr = alloc_env_var_as_wide_str(&name, &value, &mut this)?;\n+            if let Some(var) = this.machine.env_vars.map.insert(name, var_ptr) {\n+                this.memory\n+                    .deallocate(var, None, MiriMemoryKind::Machine.into())?;\n+            }\n+            this.update_environ()?;\n+            Ok(1) // return non-zero on success\n+        }\n+    }\n+\n     fn unsetenv(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         let target_os = &this.tcx.sess.target.target.target_os;"}, {"sha": "a64ef0f1293522f201afcad964b891c9fba99c48", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/01bc08a3720f0d046af3f098fc70c4fae99cb01e/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bc08a3720f0d046af3f098fc70c4fae99cb01e/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=01bc08a3720f0d046af3f098fc70c4fae99cb01e", "patch": "@@ -23,22 +23,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Environment related shims\n             \"GetEnvironmentVariableW\" => {\n-                // args[0] : LPCWSTR lpName (32-bit ptr to a const string of 16-bit Unicode chars)\n-                // args[1] : LPWSTR lpBuffer (32-bit pointer to a string of 16-bit Unicode chars)\n-                // lpBuffer : ptr to buffer that receives contents of the env_var as a null-terminated string.\n-                // Return `# of chars` stored in the buffer pointed to by lpBuffer, excluding null-terminator.\n-                // Return 0 upon failure.\n-\n-                // This is not the env var you are looking for.\n-                this.set_last_error(Scalar::from_u32(203))?; // ERROR_ENVVAR_NOT_FOUND\n-                this.write_null(dest)?;\n+                let result = this.GetEnvironmentVariableW(args[0], args[1], args[2])?;\n+                this.write_scalar(Scalar::from_uint(result, dest.layout.size), dest)?;\n             }\n \n             \"SetEnvironmentVariableW\" => {\n-                // args[0] : LPCWSTR lpName (32-bit ptr to a const string of 16-bit Unicode chars)\n-                // args[1] : LPCWSTR lpValue (32-bit ptr to a const string of 16-bit Unicode chars)\n-                // Return nonzero if success, else return 0.\n-                throw_unsup_format!(\"can't set environment variable on Windows\");\n+                let result = this.SetEnvironmentVariableW(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"GetEnvironmentStringsW\" => {\n+                let result = this.GetEnvironmentStringsW()?;\n+                this.write_scalar(result, dest)?;\n+            }\n+\n+            \"FreeEnvironmentStringsW\" => {\n+                let result = this.FreeEnvironmentStringsW(args[0])?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // File related shims"}, {"sha": "0f374a2e3f80cfaebb58256bc6587bc6c3f95a2c", "filename": "tests/compile-fail/environ-gets-deallocated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01bc08a3720f0d046af3f098fc70c4fae99cb01e/tests%2Fcompile-fail%2Fenviron-gets-deallocated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bc08a3720f0d046af3f098fc70c4fae99cb01e/tests%2Fcompile-fail%2Fenviron-gets-deallocated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fenviron-gets-deallocated.rs?ref=01bc08a3720f0d046af3f098fc70c4fae99cb01e", "patch": "@@ -1,4 +1,4 @@\n-//ignore-windows: TODO env var emulation stubbed out on Windows\n+//ignore-windows: Windows does not have a global environ list that the program can access directly\n \n #[cfg(target_os=\"linux\")]\n fn get_environ() -> *const *const u8 {"}, {"sha": "1e251084f02272a076026b670103918bda79cfa8", "filename": "tests/run-pass/env-exclude.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01bc08a3720f0d046af3f098fc70c4fae99cb01e/tests%2Frun-pass%2Fenv-exclude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bc08a3720f0d046af3f098fc70c4fae99cb01e/tests%2Frun-pass%2Fenv-exclude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenv-exclude.rs?ref=01bc08a3720f0d046af3f098fc70c4fae99cb01e", "patch": "@@ -1,4 +1,3 @@\n-// ignore-windows: TODO env var emulation stubbed out on Windows\n // compile-flags: -Zmiri-disable-isolation -Zmiri-env-exclude=MIRI_ENV_VAR_TEST\n \n fn main() {"}, {"sha": "638476209888abd488e21db70e67467fb7f8ee96", "filename": "tests/run-pass/env-without-isolation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01bc08a3720f0d046af3f098fc70c4fae99cb01e/tests%2Frun-pass%2Fenv-without-isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bc08a3720f0d046af3f098fc70c4fae99cb01e/tests%2Frun-pass%2Fenv-without-isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenv-without-isolation.rs?ref=01bc08a3720f0d046af3f098fc70c4fae99cb01e", "patch": "@@ -1,4 +1,3 @@\n-// ignore-windows: TODO env var emulation stubbed out on Windows\n // compile-flags: -Zmiri-disable-isolation\n \n fn main() {"}, {"sha": "23a3724ff7fd3117c7a9865b2dfaab52f828e978", "filename": "tests/run-pass/env.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01bc08a3720f0d046af3f098fc70c4fae99cb01e/tests%2Frun-pass%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bc08a3720f0d046af3f098fc70c4fae99cb01e/tests%2Frun-pass%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenv.rs?ref=01bc08a3720f0d046af3f098fc70c4fae99cb01e", "patch": "@@ -1,5 +1,3 @@\n-//ignore-windows: TODO env var emulation stubbed out on Windows\n-\n use std::env;\n \n fn main() {"}]}