{"sha": "e4124750c33631042d5f078b78ce16286b8027c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MTI0NzUwYzMzNjMxMDQyZDVmMDc4Yjc4Y2UxNjI4NmI4MDI3YzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-05T15:21:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-05T15:21:01Z"}, "message": "Auto merge of #73025 - Dylan-DPC:rollup-a1uzj5u, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #72260 (Spell out `Self` in async function return)\n - #72996 (Remove unsused `NodeId` related APIs in hir map)\n - #73010 (Update RELEASES.md)\n - #73017 (Use assert_eq for liballoc test)\n - #73019 (add test for #72960)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "31c1c1a82520fccfab62f52e75c0d7f1ffb549b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31c1c1a82520fccfab62f52e75c0d7f1ffb549b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4124750c33631042d5f078b78ce16286b8027c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4124750c33631042d5f078b78ce16286b8027c0", "html_url": "https://github.com/rust-lang/rust/commit/e4124750c33631042d5f078b78ce16286b8027c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4124750c33631042d5f078b78ce16286b8027c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84ec8238b14b4cf89e82eae11907b59629baff2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/84ec8238b14b4cf89e82eae11907b59629baff2c", "html_url": "https://github.com/rust-lang/rust/commit/84ec8238b14b4cf89e82eae11907b59629baff2c"}, {"sha": "14fd5950a54d47ed38494e2f2c4aec076752b5c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/14fd5950a54d47ed38494e2f2c4aec076752b5c7", "html_url": "https://github.com/rust-lang/rust/commit/14fd5950a54d47ed38494e2f2c4aec076752b5c7"}], "stats": {"total": 192, "additions": 111, "deletions": 81}, "files": [{"sha": "a37379330db88b555c5b4ecf8214a8b183721d6f", "filename": "RELEASES.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4124750c33631042d5f078b78ce16286b8027c0/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/e4124750c33631042d5f078b78ce16286b8027c0/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=e4124750c33631042d5f078b78ce16286b8027c0", "patch": "@@ -107,8 +107,8 @@ Compatibility Notes\n   previously a warning.\n - [In 1.45.0 (the next release) converting a `f64` to `u32` using the `as`\n   operator has been defined as a saturating operation.][71269] This was previously\n-  undefined behaviour, you can use the `{f64, f32}::to_int_unchecked` methods to\n-  continue using the current behaviour which may desirable in rare performance\n+  undefined behaviour, but you can use the `{f64, f32}::to_int_unchecked` methods to\n+  continue using the current behaviour, which may be desirable in rare performance\n   sensitive situations.\n \n Internal Only"}, {"sha": "b73fd95ab6a86d8ac6aff8383364210ed3d3ed97", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4124750c33631042d5f078b78ce16286b8027c0/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4124750c33631042d5f078b78ce16286b8027c0/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=e4124750c33631042d5f078b78ce16286b8027c0", "patch": "@@ -16,7 +16,7 @@ impl Drop for DropCounter<'_> {\n \n #[test]\n fn test_small_vec_struct() {\n-    assert!(size_of::<Vec<u8>>() == size_of::<usize>() * 3);\n+    assert_eq!(size_of::<Vec<u8>>(), size_of::<usize>() * 3);\n }\n \n #[test]"}, {"sha": "7abe75a375a0bf819c85ce589ac1e3821664793d", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4124750c33631042d5f078b78ce16286b8027c0/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4124750c33631042d5f078b78ce16286b8027c0/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=e4124750c33631042d5f078b78ce16286b8027c0", "patch": "@@ -437,6 +437,7 @@ E0751: include_str!(\"./error_codes/E0751.md\"),\n E0752: include_str!(\"./error_codes/E0752.md\"),\n E0753: include_str!(\"./error_codes/E0753.md\"),\n E0754: include_str!(\"./error_codes/E0754.md\"),\n+E0760: include_str!(\"./error_codes/E0760.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "e1dcfefebcd762187aba9a1d49a0b44154696787", "filename": "src/librustc_error_codes/error_codes/E0760.md", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e4124750c33631042d5f078b78ce16286b8027c0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0760.md", "raw_url": "https://github.com/rust-lang/rust/raw/e4124750c33631042d5f078b78ce16286b8027c0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0760.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0760.md?ref=e4124750c33631042d5f078b78ce16286b8027c0", "patch": "@@ -0,0 +1,32 @@\n+`async fn`/`impl trait` return type cannot contain a projection\n+or `Self` that references lifetimes from a parent scope.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0760,edition2018\n+struct S<'a>(&'a i32);\n+\n+impl<'a> S<'a> {\n+    async fn new(i: &'a i32) -> Self {\n+        S(&22)\n+    }\n+}\n+```\n+\n+To fix this error we need to spell out `Self` to `S<'a>`:\n+\n+```edition2018\n+struct S<'a>(&'a i32);\n+\n+impl<'a> S<'a> {\n+    async fn new(i: &'a i32) -> S<'a> {\n+        S(&22)\n+    }\n+}\n+```\n+\n+This will be allowed at some point in the future,\n+but the implementation is not yet complete.\n+See the [issue-61949] for this limitation.\n+\n+[issue-61949]: https://github.com/rust-lang/rust/issues/61949"}, {"sha": "2dd5e27ead2658b79dd7c11aeb41a8bd3add30e6", "filename": "src/librustc_hir/definitions.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4124750c33631042d5f078b78ce16286b8027c0/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4124750c33631042d5f078b78ce16286b8027c0/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=e4124750c33631042d5f078b78ce16286b8027c0", "patch": "@@ -364,6 +364,12 @@ impl Definitions {\n         self.node_id_to_hir_id[node_id]\n     }\n \n+    #[inline]\n+    pub fn opt_hir_id_to_local_def_id(&self, hir_id: hir::HirId) -> Option<LocalDefId> {\n+        let node_id = self.hir_id_to_node_id(hir_id);\n+        self.opt_local_def_id(node_id)\n+    }\n+\n     /// Retrieves the span of the given `DefId` if `DefId` is in the local crate.\n     #[inline]\n     pub fn opt_span(&self, def_id: DefId) -> Option<Span> {"}, {"sha": "53e88787323f4c9e16f472f9928f70132ad7b49b", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e4124750c33631042d5f078b78ce16286b8027c0/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4124750c33631042d5f078b78ce16286b8027c0/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=e4124750c33631042d5f078b78ce16286b8027c0", "patch": "@@ -3,7 +3,7 @@ use self::collector::NodeCollector;\n use crate::hir::{Owner, OwnerNodes};\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n-use rustc_ast::ast::{self, NodeId};\n+use rustc_ast::ast::{self};\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -157,18 +157,6 @@ impl<'hir> Map<'hir> {\n         self.tcx.definitions.def_path(def_id)\n     }\n \n-    #[inline]\n-    pub fn local_def_id_from_node_id(&self, node: NodeId) -> LocalDefId {\n-        self.opt_local_def_id_from_node_id(node).unwrap_or_else(|| {\n-            let hir_id = self.node_id_to_hir_id(node);\n-            bug!(\n-                \"local_def_id_from_node_id: no entry for `{}`, which has a map of `{:?}`\",\n-                node,\n-                self.find_entry(hir_id)\n-            )\n-        })\n-    }\n-\n     #[inline]\n     pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {\n         self.opt_local_def_id(hir_id).unwrap_or_else(|| {\n@@ -182,35 +170,14 @@ impl<'hir> Map<'hir> {\n \n     #[inline]\n     pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {\n-        let node_id = self.hir_id_to_node_id(hir_id);\n-        self.opt_local_def_id_from_node_id(node_id)\n-    }\n-\n-    #[inline]\n-    pub fn opt_local_def_id_from_node_id(&self, node: NodeId) -> Option<LocalDefId> {\n-        self.tcx.definitions.opt_local_def_id(node)\n+        self.tcx.definitions.opt_hir_id_to_local_def_id(hir_id)\n     }\n \n     #[inline]\n     pub fn as_local_hir_id(&self, def_id: LocalDefId) -> HirId {\n         self.tcx.definitions.as_local_hir_id(def_id)\n     }\n \n-    #[inline]\n-    pub fn hir_id_to_node_id(&self, hir_id: HirId) -> NodeId {\n-        self.tcx.definitions.hir_id_to_node_id(hir_id)\n-    }\n-\n-    #[inline]\n-    pub fn node_id_to_hir_id(&self, node_id: NodeId) -> HirId {\n-        self.tcx.definitions.node_id_to_hir_id(node_id)\n-    }\n-\n-    #[inline]\n-    pub fn opt_node_id_to_hir_id(&self, node_id: NodeId) -> Option<HirId> {\n-        self.tcx.definitions.opt_node_id_to_hir_id(node_id)\n-    }\n-\n     #[inline]\n     pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {\n         self.tcx.definitions.local_def_id_to_hir_id(def_id)"}, {"sha": "634f2f78c70005f9735f9dd732aa77351cbb40a3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 58, "deletions": 38, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/e4124750c33631042d5f078b78ce16286b8027c0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4124750c33631042d5f078b78ce16286b8027c0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e4124750c33631042d5f078b78ce16286b8027c0", "patch": "@@ -1623,12 +1623,17 @@ fn check_opaque_for_inheriting_lifetimes(tcx: TyCtxt<'tcx>, def_id: LocalDefId,\n     struct ProhibitOpaqueVisitor<'tcx> {\n         opaque_identity_ty: Ty<'tcx>,\n         generics: &'tcx ty::Generics,\n+        ty: Option<Ty<'tcx>>,\n     };\n \n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_ty) t={:?}\", t);\n-            if t == self.opaque_identity_ty { false } else { t.super_visit_with(self) }\n+            if t != self.opaque_identity_ty && t.super_visit_with(self) {\n+                self.ty = Some(t);\n+                return true;\n+            }\n+            false\n         }\n \n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n@@ -1651,46 +1656,61 @@ fn check_opaque_for_inheriting_lifetimes(tcx: TyCtxt<'tcx>, def_id: LocalDefId,\n         }\n     }\n \n-    let prohibit_opaque = match item.kind {\n-        ItemKind::OpaqueTy(hir::OpaqueTy {\n-            origin: hir::OpaqueTyOrigin::AsyncFn | hir::OpaqueTyOrigin::FnReturn,\n-            ..\n-        }) => {\n-            let mut visitor = ProhibitOpaqueVisitor {\n-                opaque_identity_ty: tcx.mk_opaque(\n-                    def_id.to_def_id(),\n-                    InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n-                ),\n-                generics: tcx.generics_of(def_id),\n-            };\n-            debug!(\"check_opaque_for_inheriting_lifetimes: visitor={:?}\", visitor);\n-\n-            tcx.predicates_of(def_id)\n-                .predicates\n-                .iter()\n-                .any(|(predicate, _)| predicate.visit_with(&mut visitor))\n-        }\n-        _ => false,\n-    };\n-\n-    debug!(\"check_opaque_for_inheriting_lifetimes: prohibit_opaque={:?}\", prohibit_opaque);\n-    if prohibit_opaque {\n-        let is_async = match item.kind {\n-            ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => match origin {\n-                hir::OpaqueTyOrigin::AsyncFn => true,\n-                _ => false,\n-            },\n-            _ => unreachable!(),\n+    if let ItemKind::OpaqueTy(hir::OpaqueTy {\n+        origin: hir::OpaqueTyOrigin::AsyncFn | hir::OpaqueTyOrigin::FnReturn,\n+        ..\n+    }) = item.kind\n+    {\n+        let mut visitor = ProhibitOpaqueVisitor {\n+            opaque_identity_ty: tcx.mk_opaque(\n+                def_id.to_def_id(),\n+                InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n+            ),\n+            generics: tcx.generics_of(def_id),\n+            ty: None,\n         };\n+        let prohibit_opaque = tcx\n+            .predicates_of(def_id)\n+            .predicates\n+            .iter()\n+            .any(|(predicate, _)| predicate.visit_with(&mut visitor));\n+        debug!(\n+            \"check_opaque_for_inheriting_lifetimes: prohibit_opaque={:?}, visitor={:?}\",\n+            prohibit_opaque, visitor\n+        );\n \n-        tcx.sess.span_err(\n-            span,\n-            &format!(\n-            \"`{}` return type cannot contain a projection or `Self` that references lifetimes from \\\n+        if prohibit_opaque {\n+            let is_async = match item.kind {\n+                ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => match origin {\n+                    hir::OpaqueTyOrigin::AsyncFn => true,\n+                    _ => false,\n+                },\n+                _ => unreachable!(),\n+            };\n+\n+            let mut err = struct_span_err!(\n+                tcx.sess,\n+                span,\n+                E0760,\n+                \"`{}` return type cannot contain a projection or `Self` that references lifetimes from \\\n              a parent scope\",\n-            if is_async { \"async fn\" } else { \"impl Trait\" },\n-        ),\n-        );\n+                if is_async { \"async fn\" } else { \"impl Trait\" },\n+            );\n+\n+            if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(span) {\n+                if snippet == \"Self\" {\n+                    if let Some(ty) = visitor.ty {\n+                        err.span_suggestion(\n+                            span,\n+                            \"consider spelling out the type instead\",\n+                            format!(\"{:?}\", ty),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+            }\n+            err.emit();\n+        }\n     }\n }\n "}, {"sha": "678534657cb31982643303eab649f2ad853a8647", "filename": "src/test/ui/asm/issue-72570.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4124750c33631042d5f078b78ce16286b8027c0/src%2Ftest%2Fui%2Fasm%2Fissue-72570.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4124750c33631042d5f078b78ce16286b8027c0/src%2Ftest%2Fui%2Fasm%2Fissue-72570.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-72570.rs?ref=e4124750c33631042d5f078b78ce16286b8027c0", "patch": "@@ -1,4 +1,6 @@\n+// compile-flags: -Zsave-analysis\n // only-x86_64\n+// Also test for #72960\n \n #![feature(asm)]\n "}, {"sha": "fa5792688b252cab310a515db0cf35a5a20e33d0", "filename": "src/test/ui/asm/issue-72570.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4124750c33631042d5f078b78ce16286b8027c0/src%2Ftest%2Fui%2Fasm%2Fissue-72570.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4124750c33631042d5f078b78ce16286b8027c0/src%2Ftest%2Fui%2Fasm%2Fissue-72570.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-72570.stderr?ref=e4124750c33631042d5f078b78ce16286b8027c0", "patch": "@@ -1,5 +1,5 @@\n error: invalid register `invalid`: unknown register\n-  --> $DIR/issue-72570.rs:7:18\n+  --> $DIR/issue-72570.rs:9:18\n    |\n LL |         asm!(\"\", in(\"invalid\") \"\".len());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "4eeef871c5bfc6ea8fa2811ed7a6353496402880", "filename": "src/test/ui/async-await/issue-61949-self-return-type.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4124750c33631042d5f078b78ce16286b8027c0/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4124750c33631042d5f078b78ce16286b8027c0/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr?ref=e4124750c33631042d5f078b78ce16286b8027c0", "patch": "@@ -1,8 +1,9 @@\n-error: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+error[E0760]: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n   --> $DIR/issue-61949-self-return-type.rs:11:40\n    |\n LL |     pub async fn new(_bar: &'a i32) -> Self {\n-   |                                        ^^^^\n+   |                                        ^^^^ help: consider spelling out the type instead: `Foo<'a>`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0760`."}, {"sha": "03aba10cc79b4a28468fb2fede535ac2102a3953", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4124750c33631042d5f078b78ce16286b8027c0/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4124750c33631042d5f078b78ce16286b8027c0/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=e4124750c33631042d5f078b78ce16286b8027c0", "patch": "@@ -21,7 +21,7 @@ help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc\n LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output=T::Assoc> {\n    |                         ^^^^^^^^^^^^\n \n-error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+error[E0760]: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n   --> $DIR/bound-normalization-fail.rs:43:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n@@ -43,4 +43,5 @@ LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output=T::\n \n error: aborting due to 3 previous errors; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0271`.\n+Some errors have detailed explanations: E0271, E0760.\n+For more information about an error, try `rustc --explain E0271`."}]}