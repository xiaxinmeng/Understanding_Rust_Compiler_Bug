{"sha": "60cad20b41d93c94c247cd32873e5c176effc7d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwY2FkMjBiNDFkOTNjOTRjMjQ3Y2QzMjg3M2U1YzE3NmVmZmM3ZDI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-04T00:17:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-04T00:17:03Z"}, "message": "Rollup merge of #73949 - wesleywiser:simplify_try_fixes, r=oli-obk\n\n[mir-opt] Fix mis-optimization and other issues with the SimplifyArmIdentity pass\n\nThis does not yet attempt re-enabling the pass, but it does resolve a number of issues with the pass.\n\nr? @oli-obk\n\nI believe this closes #73223.", "tree": {"sha": "a10b066b8971f53c8c7e7a04ef94faad2cb81c67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a10b066b8971f53c8c7e7a04ef94faad2cb81c67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60cad20b41d93c94c247cd32873e5c176effc7d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/8qACRBK7hj4Ov3rIwAAdHIIAFH2HpJEqU5vRR3ABfLmtX7W\nqswbhQmRPpy7wak4x8LnjEzabQPn5UnoNFL5od3WMkyWirzxqIv9kyfvptfBIOY8\nei32DUkL++1f49sYib1GEq0SYlMAUbykS/HvNQmmQyjIwZL1VOevaK1ENT1E97Z0\ncs3bvvNZacxXw1T9MjiYm2gJ2HGzQuYsJ+s7chMTT9P3x2fkjkAcRshb3aNQP3nC\n5gVq8kv64wLEr9lAT0RmxNqfl8wekZIFZqEo7SHmi9bJs/ukdiogc/vohVSXx5UN\n3P9ntANrha/WvYhhF8kitrME3SfOlNSYFC92etlqFCIAO6/iHyHb11Ulr0ee/j0=\n=U9/m\n-----END PGP SIGNATURE-----\n", "payload": "tree a10b066b8971f53c8c7e7a04ef94faad2cb81c67\nparent 9d0ca3806ff5a3faee2299b6a1a2248d180aae4e\nparent e16d6a6c6465d19c6d7091e5b59eb4b4528aa9f8\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593821823 -0700\ncommitter GitHub <noreply@github.com> 1593821823 -0700\n\nRollup merge of #73949 - wesleywiser:simplify_try_fixes, r=oli-obk\n\n[mir-opt] Fix mis-optimization and other issues with the SimplifyArmIdentity pass\n\nThis does not yet attempt re-enabling the pass, but it does resolve a number of issues with the pass.\n\nr? @oli-obk\n\nI believe this closes #73223.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60cad20b41d93c94c247cd32873e5c176effc7d2", "html_url": "https://github.com/rust-lang/rust/commit/60cad20b41d93c94c247cd32873e5c176effc7d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60cad20b41d93c94c247cd32873e5c176effc7d2/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d0ca3806ff5a3faee2299b6a1a2248d180aae4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d0ca3806ff5a3faee2299b6a1a2248d180aae4e", "html_url": "https://github.com/rust-lang/rust/commit/9d0ca3806ff5a3faee2299b6a1a2248d180aae4e"}, {"sha": "e16d6a6c6465d19c6d7091e5b59eb4b4528aa9f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e16d6a6c6465d19c6d7091e5b59eb4b4528aa9f8", "html_url": "https://github.com/rust-lang/rust/commit/e16d6a6c6465d19c6d7091e5b59eb4b4528aa9f8"}], "stats": {"total": 1446, "additions": 1411, "deletions": 35}, "files": [{"sha": "31b8de500e0304c2a086c5057ba262c29390b73c", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=60cad20b41d93c94c247cd32873e5c176effc7d2", "patch": "@@ -257,6 +257,18 @@ impl<'tcx> Body<'tcx> {\n         (&mut self.basic_blocks, &mut self.local_decls)\n     }\n \n+    #[inline]\n+    pub fn basic_blocks_local_decls_mut_and_var_debug_info(\n+        &mut self,\n+    ) -> (\n+        &mut IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n+        &mut LocalDecls<'tcx>,\n+        &mut Vec<VarDebugInfo<'tcx>>,\n+    ) {\n+        self.predecessor_cache.invalidate();\n+        (&mut self.basic_blocks, &mut self.local_decls, &mut self.var_debug_info)\n+    }\n+\n     /// Returns `true` if a cycle exists in the control-flow graph that is reachable from the\n     /// `START_BLOCK`.\n     pub fn is_cfg_cyclic(&self) -> bool {"}, {"sha": "97a01de867e1d4abcbe5895c9e7c21f0e6b66a2e", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 106, "deletions": 9, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=60cad20b41d93c94c247cd32873e5c176effc7d2", "patch": "@@ -11,9 +11,10 @@\n \n use crate::transform::{simplify, MirPass, MirSource};\n use itertools::Itertools as _;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::{bit_set::BitSet, vec::IndexVec};\n+use rustc_middle::mir::visit::{NonUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_middle::ty::{List, Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n use std::iter::{Enumerate, Peekable};\n use std::slice::Iter;\n@@ -73,9 +74,20 @@ struct ArmIdentityInfo<'tcx> {\n \n     /// The statements that should be removed (turned into nops)\n     stmts_to_remove: Vec<usize>,\n+\n+    /// Indices of debug variables that need to be adjusted to point to\n+    // `{local_0}.{dbg_projection}`.\n+    dbg_info_to_adjust: Vec<usize>,\n+\n+    /// The projection used to rewrite debug info.\n+    dbg_projection: &'tcx List<PlaceElem<'tcx>>,\n }\n \n-fn get_arm_identity_info<'a, 'tcx>(stmts: &'a [Statement<'tcx>]) -> Option<ArmIdentityInfo<'tcx>> {\n+fn get_arm_identity_info<'a, 'tcx>(\n+    stmts: &'a [Statement<'tcx>],\n+    locals_count: usize,\n+    debug_info: &'a [VarDebugInfo<'tcx>],\n+) -> Option<ArmIdentityInfo<'tcx>> {\n     // This can't possibly match unless there are at least 3 statements in the block\n     // so fail fast on tiny blocks.\n     if stmts.len() < 3 {\n@@ -187,7 +199,7 @@ fn get_arm_identity_info<'a, 'tcx>(stmts: &'a [Statement<'tcx>]) -> Option<ArmId\n     try_eat_storage_stmts(&mut stmt_iter, &mut storage_live_stmts, &mut storage_dead_stmts);\n \n     let (get_variant_field_stmt, stmt) = stmt_iter.next()?;\n-    let (local_tmp_s0, local_1, vf_s0) = match_get_variant_field(stmt)?;\n+    let (local_tmp_s0, local_1, vf_s0, dbg_projection) = match_get_variant_field(stmt)?;\n \n     try_eat_storage_stmts(&mut stmt_iter, &mut storage_live_stmts, &mut storage_dead_stmts);\n \n@@ -228,6 +240,19 @@ fn get_arm_identity_info<'a, 'tcx>(stmts: &'a [Statement<'tcx>]) -> Option<ArmId\n     let stmt_to_overwrite =\n         nop_stmts.iter().find(|stmt_idx| live_idx < **stmt_idx && **stmt_idx < dead_idx);\n \n+    let mut tmp_assigned_vars = BitSet::new_empty(locals_count);\n+    for (l, r) in &tmp_assigns {\n+        tmp_assigned_vars.insert(*l);\n+        tmp_assigned_vars.insert(*r);\n+    }\n+\n+    let mut dbg_info_to_adjust = Vec::new();\n+    for (i, var_info) in debug_info.iter().enumerate() {\n+        if tmp_assigned_vars.contains(var_info.place.local) {\n+            dbg_info_to_adjust.push(i);\n+        }\n+    }\n+\n     Some(ArmIdentityInfo {\n         local_temp_0: local_tmp_s0,\n         local_1,\n@@ -243,12 +268,16 @@ fn get_arm_identity_info<'a, 'tcx>(stmts: &'a [Statement<'tcx>]) -> Option<ArmId\n         source_info: discr_stmt_source_info,\n         storage_stmts,\n         stmts_to_remove: nop_stmts,\n+        dbg_info_to_adjust,\n+        dbg_projection,\n     })\n }\n \n fn optimization_applies<'tcx>(\n     opt_info: &ArmIdentityInfo<'tcx>,\n     local_decls: &IndexVec<Local, LocalDecl<'tcx>>,\n+    local_uses: &IndexVec<Local, usize>,\n+    var_debug_info: &[VarDebugInfo<'tcx>],\n ) -> bool {\n     trace!(\"testing if optimization applies...\");\n \n@@ -273,6 +302,7 @@ fn optimization_applies<'tcx>(\n     // Verify the assigment chain consists of the form b = a; c = b; d = c; etc...\n     if opt_info.field_tmp_assignments.is_empty() {\n         trace!(\"NO: no assignments found\");\n+        return false;\n     }\n     let mut last_assigned_to = opt_info.field_tmp_assignments[0].1;\n     let source_local = last_assigned_to;\n@@ -285,6 +315,35 @@ fn optimization_applies<'tcx>(\n         last_assigned_to = *l;\n     }\n \n+    // Check that the first and last used locals are only used twice\n+    // since they are of the form:\n+    //\n+    // ```\n+    // _first = ((_x as Variant).n: ty);\n+    // _n = _first;\n+    // ...\n+    // ((_y as Variant).n: ty) = _n;\n+    // discriminant(_y) = z;\n+    // ```\n+    for (l, r) in &opt_info.field_tmp_assignments {\n+        if local_uses[*l] != 2 {\n+            warn!(\"NO: FAILED assignment chain local {:?} was used more than twice\", l);\n+            return false;\n+        } else if local_uses[*r] != 2 {\n+            warn!(\"NO: FAILED assignment chain local {:?} was used more than twice\", r);\n+            return false;\n+        }\n+    }\n+\n+    // Check that debug info only points to full Locals and not projections.\n+    for dbg_idx in &opt_info.dbg_info_to_adjust {\n+        let dbg_info = &var_debug_info[*dbg_idx];\n+        if !dbg_info.place.projection.is_empty() {\n+            trace!(\"NO: debug info for {:?} had a projection {:?}\", dbg_info.name, dbg_info.place);\n+            return false;\n+        }\n+    }\n+\n     if source_local != opt_info.local_temp_0 {\n         trace!(\n             \"NO: start of assignment chain does not match enum variant temp: {:?} != {:?}\",\n@@ -312,11 +371,15 @@ impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n         }\n \n         trace!(\"running SimplifyArmIdentity on {:?}\", source);\n-        let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n+        let local_uses = LocalUseCounter::get_local_uses(body);\n+        let (basic_blocks, local_decls, debug_info) =\n+            body.basic_blocks_local_decls_mut_and_var_debug_info();\n         for bb in basic_blocks {\n-            if let Some(opt_info) = get_arm_identity_info(&bb.statements) {\n+            if let Some(opt_info) =\n+                get_arm_identity_info(&bb.statements, local_decls.len(), debug_info)\n+            {\n                 trace!(\"got opt_info = {:#?}\", opt_info);\n-                if !optimization_applies(&opt_info, local_decls) {\n+                if !optimization_applies(&opt_info, local_decls, &local_uses, &debug_info) {\n                     debug!(\"optimization skipped for {:?}\", source);\n                     continue;\n                 }\n@@ -352,23 +415,57 @@ impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n \n                 bb.statements.retain(|stmt| stmt.kind != StatementKind::Nop);\n \n+                // Fix the debug info to point to the right local\n+                for dbg_index in opt_info.dbg_info_to_adjust {\n+                    let dbg_info = &mut debug_info[dbg_index];\n+                    assert!(dbg_info.place.projection.is_empty());\n+                    dbg_info.place.local = opt_info.local_0;\n+                    dbg_info.place.projection = opt_info.dbg_projection;\n+                }\n+\n                 trace!(\"block is now {:?}\", bb.statements);\n             }\n         }\n     }\n }\n \n+struct LocalUseCounter {\n+    local_uses: IndexVec<Local, usize>,\n+}\n+\n+impl LocalUseCounter {\n+    fn get_local_uses<'tcx>(body: &Body<'tcx>) -> IndexVec<Local, usize> {\n+        let mut counter = LocalUseCounter { local_uses: IndexVec::from_elem(0, &body.local_decls) };\n+        counter.visit_body(body);\n+        counter.local_uses\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for LocalUseCounter {\n+    fn visit_local(&mut self, local: &Local, context: PlaceContext, _location: Location) {\n+        if context.is_storage_marker()\n+            || context == PlaceContext::NonUse(NonUseContext::VarDebugInfo)\n+        {\n+            return;\n+        }\n+\n+        self.local_uses[*local] += 1;\n+    }\n+}\n+\n /// Match on:\n /// ```rust\n /// _LOCAL_INTO = ((_LOCAL_FROM as Variant).FIELD: TY);\n /// ```\n-fn match_get_variant_field<'tcx>(stmt: &Statement<'tcx>) -> Option<(Local, Local, VarField<'tcx>)> {\n+fn match_get_variant_field<'tcx>(\n+    stmt: &Statement<'tcx>,\n+) -> Option<(Local, Local, VarField<'tcx>, &'tcx List<PlaceElem<'tcx>>)> {\n     match &stmt.kind {\n         StatementKind::Assign(box (place_into, rvalue_from)) => match rvalue_from {\n             Rvalue::Use(Operand::Copy(pf) | Operand::Move(pf)) => {\n                 let local_into = place_into.as_local()?;\n                 let (local_from, vf) = match_variant_field_place(*pf)?;\n-                Some((local_into, local_from, vf))\n+                Some((local_into, local_from, vf, pf.projection))\n             }\n             _ => None,\n         },"}, {"sha": "d93805e6cd176ebb7f13166476dd7dc8022d3402", "filename": "src/test/mir-opt/issue-73223.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fissue-73223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fissue-73223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223.rs?ref=60cad20b41d93c94c247cd32873e5c176effc7d2", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    let split = match Some(1) {\n+        Some(v) => v,\n+        None => return,\n+    };\n+\n+    let _prev = Some(split);\n+    assert_eq!(split, 1);\n+}\n+\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+// EMIT_MIR rustc.main.SimplifyArmIdentity.diff\n+// EMIT_MIR rustc.main.PreCodegen.diff"}, {"sha": "59c00e1b96f9669368f6f9e7df9c099834570ca8", "filename": "src/test/mir-opt/issue-73223/32bit/rustc.main.PreCodegen.diff", "status": "added", "additions": 252, "deletions": 0, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.PreCodegen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.PreCodegen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.PreCodegen.diff?ref=60cad20b41d93c94c247cd32873e5c176effc7d2", "patch": "@@ -0,0 +1,252 @@\n+- // MIR for `main` before PreCodegen\n++ // MIR for `main` after PreCodegen\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:1:11: 1:11\n+      let mut _1: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+      let _2: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+      let mut _4: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n+      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _9: bool;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _10: bool;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _11: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _12: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _13: &std::fmt::Arguments;       // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _14: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _15: &[&str];                // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _16: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _17: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _18: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _19: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _20: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _21: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _22: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _23: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _26: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _27: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _28: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _29: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      scope 1 {\n+          debug split => _2;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n+          let _3: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          scope 3 {\n+              debug _prev => _3;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _7: &i32;                // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              let _8: &i32;                // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              scope 4 {\n+                  debug left_val => _7;    // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  debug right_val => _8;   // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _24: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _25: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  scope 5 {\n+                      debug arg0 => _24;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      debug arg1 => _25;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      scope 6 {\n+                          debug x => _24;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _27;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _30: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _31: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                      scope 8 {\n+                          debug x => _25;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _29;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _32: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _33: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                  }\n+                  scope 10 {\n+                      debug pieces => _15; // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      debug args => _16;   // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      let mut _34: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                  }\n+              }\n+          }\n+      }\n+      scope 2 {\n+          debug v => _2;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n+      }\n+      scope 7 {\n+      }\n+      scope 9 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          ((_1 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:2:28: 2:29\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          discriminant(_1) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          _2 = ((_1 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          StorageLive(_3);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          _4 = _2;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          ((_3 as Some).0: i32) = move _4; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          discriminant(_3) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_5);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_6);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _6 = &_2;                        // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_5.0: &i32) = move _6;          // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_5.1: &i32) = const main::promoted[1]; // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &i32\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1])) }\n+          StorageDead(_6);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_7);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _7 = (_5.0: &i32);               // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _8 = (_5.1: &i32);               // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_9);                 // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _11 = (*_7);                     // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_12);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _12 = (*_8);                     // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _10 = Eq(move _11, move _12);    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_12);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _9 = Not(move _10);              // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          switchInt(_9) -> [false: bb1, otherwise: bb2]; // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb1: {\n+          StorageDead(_9);                 // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_5);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:1:11: 9:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_3);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n+      bb2: {\n+          StorageLive(_14);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _15 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &[&str; 3]\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0])) }\n+          StorageLive(_18);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_19);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_20);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_21);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _21 = _7;                        // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _20 = &_21;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_22);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_23);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _23 = _8;                        // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _22 = &_23;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_19.0: &&i32) = move _20;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          (_19.1: &&i32) = move _22;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_22);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_20);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _24 = (_19.0: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _25 = (_19.1: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_26);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _27 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_30);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _30 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb3; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb3: {\n+          StorageLive(_31);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _31 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb4; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb4: {\n+          (_26.0: &core::fmt::Opaque) = move _31; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_26.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _30; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_31);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_30);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_28);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _29 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_32);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _32 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _29) -> bb5; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb5: {\n+          StorageLive(_33);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _33 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _25) -> bb6; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb6: {\n+          (_28.0: &core::fmt::Opaque) = move _33; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_28.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _32; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_33);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_32);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _18 = [move _26, move _28];      // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_28);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_26);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _17 = &_18;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _16 = move _17 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_34);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          discriminant(_34) = 0;           // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_14.0: &[&str]) = move _15;     // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_14.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _34; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_14.2: &[std::fmt::ArgumentV1]) = move _16; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_34);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _13 = &_14;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          const std::rt::begin_panic_fmt(move _13); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }\n+      }\n+  }\n+  "}, {"sha": "e5b4a0328808f45fbc6247a1e28825c75367d404", "filename": "src/test/mir-opt/issue-73223/32bit/rustc.main.SimplifyArmIdentity.diff", "status": "added", "additions": 376, "deletions": 0, "changes": 376, "blob_url": "https://github.com/rust-lang/rust/blob/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.SimplifyArmIdentity.diff?ref=60cad20b41d93c94c247cd32873e5c176effc7d2", "patch": "@@ -0,0 +1,376 @@\n+- // MIR for `main` before SimplifyArmIdentity\n++ // MIR for `main` after SimplifyArmIdentity\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:1:11: 1:11\n+      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n+      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+      let mut _3: isize;                   // in scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n+      let _4: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+      let mut _5: !;                       // in scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+      let mut _7: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n+      let _8: ();                          // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _9: (&i32, &i32);            // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _10: &i32;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _11: &i32;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _12: i32;                        // in scope 0 at $DIR/issue-73223.rs:8:23: 8:24\n+      let mut _15: bool;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _16: bool;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _17: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _18: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _19: !;                      // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _20: &std::fmt::Arguments;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _21: &std::fmt::Arguments;       // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _22: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _23: &[&str];                // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _24: &[&str; 3];             // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _25: &[&str; 3];                 // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _26: [&str; 3];                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _27: &str;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _28: &str;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _29: &str;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _30: &str;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _31: &str;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _32: &str;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _33: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _34: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _35: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _36: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _37: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _38: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _39: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _40: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _41: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _44: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _45: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _46: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _47: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _48: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _49: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      scope 1 {\n+          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n+          let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          scope 3 {\n+              debug _prev => _6;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _13: &i32;               // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              let _14: &i32;               // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              let mut _51: &i32;           // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              scope 4 {\n+                  debug left_val => _13;   // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  debug right_val => _14;  // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _42: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _43: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let mut _50: &[&str; 3]; // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  scope 5 {\n+                      debug arg0 => _42;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      debug arg1 => _43;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      scope 6 {\n+                          debug x => _45;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _46;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _52: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _53: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _54: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _55: &&i32; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                      scope 8 {\n+                          debug x => _48;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _49;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _56: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _57: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _58: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _59: &&i32; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                  }\n+                  scope 10 {\n+                      debug pieces => _23; // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      debug args => _33;   // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      let mut _60: &[&str]; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      let mut _61: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      let mut _62: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                  }\n+              }\n+          }\n+      }\n+      scope 2 {\n+          debug v => _4;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n+      }\n+      scope 7 {\n+      }\n+      scope 9 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:2:28: 2:29\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n+                                           // ty::Const\n+                                           // + ty: isize\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:3:9: 3:16\n+                                           // + literal: Const { ty: isize, val: Value(Scalar(0x00000001)) }\n+          goto -> bb2;                     // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n+      }\n+  \n+      bb1: {\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:4:17: 4:23\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n+          goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+      }\n+  \n+      bb2: {\n+          StorageLive(_4);                 // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _4 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _1 = _4;                         // scope 2 at $DIR/issue-73223.rs:3:20: 3:21\n+          StorageDead(_4);                 // scope 0 at $DIR/issue-73223.rs:3:21: 3:22\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          StorageLive(_6);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_9);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _10 = &_1;                       // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _51 = const main::promoted[1];   // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &i32\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1])) }\n+          _11 = _51;                       // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _13 = (_9.0: &i32);              // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_14);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _14 = (_9.1: &i32);              // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_15);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_16);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_17);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _17 = (*_13);                    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_18);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _18 = (*_14);                    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _16 = Eq(move _17, move _18);    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_18);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_17);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _15 = Not(move _16);             // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_16);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          switchInt(_15) -> [false: bb4, otherwise: bb5]; // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb3: {\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n+      bb4: {\n+          _8 = const ();                   // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_15);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_14);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_13);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:1:11: 9:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_6);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n+          goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n+      bb5: {\n+          StorageLive(_19);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_20);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_21);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_22);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_23);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_24);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_25);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _50 = const main::promoted[0];   // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &[&str; 3]\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0])) }\n+          _25 = _50;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _24 = _25;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _23 = move _24 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_24);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_33);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_34);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_35);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_36);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_37);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_38);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_39);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _39 = _13;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _38 = &_39;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_40);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_41);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _41 = _14;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _40 = &_41;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_37.0: &&i32) = move _38;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          (_37.1: &&i32) = move _40;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_40);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_38);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_42);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _42 = (_37.0: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_43);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _43 = (_37.1: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_44);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_45);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _45 = _42;                       // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_46);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _46 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_52);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_53);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _53 = _46;                       // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _52 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _53) -> bb6; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb6: {\n+          StorageDead(_53);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_54);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_55);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _55 = _45;                       // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _54 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _55) -> bb7; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb7: {\n+          StorageDead(_55);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_44.0: &core::fmt::Opaque) = move _54; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_44.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _52; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_54);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_52);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_46);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_45);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_47);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_48);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _48 = _43;                       // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_49);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _49 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_56);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_57);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _57 = _49;                       // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _56 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _57) -> bb8; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb8: {\n+          StorageDead(_57);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_58);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_59);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _59 = _48;                       // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _58 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _59) -> bb9; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb9: {\n+          StorageDead(_59);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_47.0: &core::fmt::Opaque) = move _58; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_47.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _56; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_58);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_56);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_49);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_48);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _36 = [move _44, move _47];      // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_47);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_44);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_43);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_42);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _35 = &_36;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _34 = _35;                       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _33 = move _34 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_34);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_60);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _60 = _23;                       // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_61);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          discriminant(_61) = 0;           // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_62);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _62 = _33;                       // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_22.0: &[&str]) = move _60;     // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_22.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _61; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_22.2: &[std::fmt::ArgumentV1]) = move _62; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_62);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_61);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_60);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_33);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_23);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _21 = &_22;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _20 = _21;                       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          const std::rt::begin_panic_fmt(move _20); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }\n+      }\n+  }\n+  "}, {"sha": "59c00e1b96f9669368f6f9e7df9c099834570ca8", "filename": "src/test/mir-opt/issue-73223/64bit/rustc.main.PreCodegen.diff", "status": "added", "additions": 252, "deletions": 0, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.PreCodegen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.PreCodegen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.PreCodegen.diff?ref=60cad20b41d93c94c247cd32873e5c176effc7d2", "patch": "@@ -0,0 +1,252 @@\n+- // MIR for `main` before PreCodegen\n++ // MIR for `main` after PreCodegen\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:1:11: 1:11\n+      let mut _1: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+      let _2: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+      let mut _4: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n+      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _9: bool;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _10: bool;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _11: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _12: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _13: &std::fmt::Arguments;       // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _14: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _15: &[&str];                // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _16: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _17: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _18: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _19: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _20: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _21: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _22: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _23: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _26: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _27: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _28: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _29: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      scope 1 {\n+          debug split => _2;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n+          let _3: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          scope 3 {\n+              debug _prev => _3;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _7: &i32;                // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              let _8: &i32;                // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              scope 4 {\n+                  debug left_val => _7;    // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  debug right_val => _8;   // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _24: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _25: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  scope 5 {\n+                      debug arg0 => _24;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      debug arg1 => _25;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      scope 6 {\n+                          debug x => _24;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _27;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _30: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _31: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                      scope 8 {\n+                          debug x => _25;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _29;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _32: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _33: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                  }\n+                  scope 10 {\n+                      debug pieces => _15; // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      debug args => _16;   // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      let mut _34: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                  }\n+              }\n+          }\n+      }\n+      scope 2 {\n+          debug v => _2;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n+      }\n+      scope 7 {\n+      }\n+      scope 9 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          ((_1 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:2:28: 2:29\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          discriminant(_1) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          _2 = ((_1 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          StorageLive(_3);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          _4 = _2;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          ((_3 as Some).0: i32) = move _4; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          discriminant(_3) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_5);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_6);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _6 = &_2;                        // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_5.0: &i32) = move _6;          // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_5.1: &i32) = const main::promoted[1]; // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &i32\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1])) }\n+          StorageDead(_6);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_7);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _7 = (_5.0: &i32);               // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _8 = (_5.1: &i32);               // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_9);                 // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _11 = (*_7);                     // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_12);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _12 = (*_8);                     // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _10 = Eq(move _11, move _12);    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_12);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _9 = Not(move _10);              // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          switchInt(_9) -> [false: bb1, otherwise: bb2]; // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb1: {\n+          StorageDead(_9);                 // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_5);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:1:11: 9:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_3);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n+      bb2: {\n+          StorageLive(_14);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _15 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &[&str; 3]\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0])) }\n+          StorageLive(_18);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_19);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_20);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_21);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _21 = _7;                        // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _20 = &_21;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_22);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_23);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _23 = _8;                        // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _22 = &_23;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_19.0: &&i32) = move _20;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          (_19.1: &&i32) = move _22;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_22);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_20);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _24 = (_19.0: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _25 = (_19.1: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_26);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _27 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_30);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _30 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb3; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb3: {\n+          StorageLive(_31);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _31 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb4; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb4: {\n+          (_26.0: &core::fmt::Opaque) = move _31; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_26.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _30; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_31);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_30);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_28);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _29 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_32);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _32 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _29) -> bb5; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb5: {\n+          StorageLive(_33);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _33 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _25) -> bb6; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb6: {\n+          (_28.0: &core::fmt::Opaque) = move _33; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_28.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _32; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_33);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_32);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _18 = [move _26, move _28];      // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_28);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_26);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _17 = &_18;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _16 = move _17 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_34);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          discriminant(_34) = 0;           // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_14.0: &[&str]) = move _15;     // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_14.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _34; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_14.2: &[std::fmt::ArgumentV1]) = move _16; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_34);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _13 = &_14;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          const std::rt::begin_panic_fmt(move _13); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }\n+      }\n+  }\n+  "}, {"sha": "0c2651dc3c68d21e4b5881bf7f6b29ba228cddce", "filename": "src/test/mir-opt/issue-73223/64bit/rustc.main.SimplifyArmIdentity.diff", "status": "added", "additions": 376, "deletions": 0, "changes": 376, "blob_url": "https://github.com/rust-lang/rust/blob/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.SimplifyArmIdentity.diff?ref=60cad20b41d93c94c247cd32873e5c176effc7d2", "patch": "@@ -0,0 +1,376 @@\n+- // MIR for `main` before SimplifyArmIdentity\n++ // MIR for `main` after SimplifyArmIdentity\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:1:11: 1:11\n+      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n+      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+      let mut _3: isize;                   // in scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n+      let _4: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+      let mut _5: !;                       // in scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+      let mut _7: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n+      let _8: ();                          // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _9: (&i32, &i32);            // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _10: &i32;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _11: &i32;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _12: i32;                        // in scope 0 at $DIR/issue-73223.rs:8:23: 8:24\n+      let mut _15: bool;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _16: bool;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _17: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _18: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _19: !;                      // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _20: &std::fmt::Arguments;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _21: &std::fmt::Arguments;       // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _22: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _23: &[&str];                // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _24: &[&str; 3];             // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _25: &[&str; 3];                 // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _26: [&str; 3];                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _27: &str;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _28: &str;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _29: &str;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _30: &str;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _31: &str;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _32: &str;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _33: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _34: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _35: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _36: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _37: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _38: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _39: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _40: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _41: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _44: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _45: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _46: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _47: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _48: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _49: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      scope 1 {\n+          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n+          let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          scope 3 {\n+              debug _prev => _6;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _13: &i32;               // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              let _14: &i32;               // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              let mut _51: &i32;           // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              scope 4 {\n+                  debug left_val => _13;   // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  debug right_val => _14;  // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _42: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _43: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let mut _50: &[&str; 3]; // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  scope 5 {\n+                      debug arg0 => _42;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      debug arg1 => _43;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      scope 6 {\n+                          debug x => _45;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _46;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _52: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _53: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _54: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _55: &&i32; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                      scope 8 {\n+                          debug x => _48;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _49;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _56: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _57: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _58: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _59: &&i32; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                  }\n+                  scope 10 {\n+                      debug pieces => _23; // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      debug args => _33;   // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      let mut _60: &[&str]; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      let mut _61: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      let mut _62: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                  }\n+              }\n+          }\n+      }\n+      scope 2 {\n+          debug v => _4;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n+      }\n+      scope 7 {\n+      }\n+      scope 9 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:2:28: 2:29\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n+                                           // ty::Const\n+                                           // + ty: isize\n+                                           // + val: Value(Scalar(0x0000000000000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:3:9: 3:16\n+                                           // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }\n+          goto -> bb2;                     // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n+      }\n+  \n+      bb1: {\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:4:17: 4:23\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n+          goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+      }\n+  \n+      bb2: {\n+          StorageLive(_4);                 // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _4 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _1 = _4;                         // scope 2 at $DIR/issue-73223.rs:3:20: 3:21\n+          StorageDead(_4);                 // scope 0 at $DIR/issue-73223.rs:3:21: 3:22\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          StorageLive(_6);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_9);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _10 = &_1;                       // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _51 = const main::promoted[1];   // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &i32\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1])) }\n+          _11 = _51;                       // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _13 = (_9.0: &i32);              // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_14);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _14 = (_9.1: &i32);              // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_15);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_16);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_17);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _17 = (*_13);                    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_18);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _18 = (*_14);                    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _16 = Eq(move _17, move _18);    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_18);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_17);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _15 = Not(move _16);             // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_16);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          switchInt(_15) -> [false: bb4, otherwise: bb5]; // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb3: {\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n+      bb4: {\n+          _8 = const ();                   // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_15);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_14);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_13);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:1:11: 9:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_6);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n+          goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n+      bb5: {\n+          StorageLive(_19);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_20);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_21);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_22);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_23);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_24);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_25);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _50 = const main::promoted[0];   // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &[&str; 3]\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0])) }\n+          _25 = _50;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _24 = _25;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _23 = move _24 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_24);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_33);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_34);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_35);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_36);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_37);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_38);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_39);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _39 = _13;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _38 = &_39;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_40);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_41);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _41 = _14;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _40 = &_41;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_37.0: &&i32) = move _38;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          (_37.1: &&i32) = move _40;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_40);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_38);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_42);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _42 = (_37.0: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_43);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _43 = (_37.1: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_44);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_45);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _45 = _42;                       // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_46);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _46 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_52);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_53);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _53 = _46;                       // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _52 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _53) -> bb6; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb6: {\n+          StorageDead(_53);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_54);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_55);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _55 = _45;                       // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _54 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _55) -> bb7; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb7: {\n+          StorageDead(_55);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_44.0: &core::fmt::Opaque) = move _54; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_44.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _52; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_54);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_52);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_46);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_45);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_47);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_48);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _48 = _43;                       // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_49);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _49 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_56);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_57);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _57 = _49;                       // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _56 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _57) -> bb8; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb8: {\n+          StorageDead(_57);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_58);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_59);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _59 = _48;                       // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _58 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _59) -> bb9; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb9: {\n+          StorageDead(_59);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_47.0: &core::fmt::Opaque) = move _58; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_47.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _56; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_58);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_56);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_49);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_48);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _36 = [move _44, move _47];      // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_47);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_44);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_43);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_42);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _35 = &_36;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _34 = _35;                       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _33 = move _34 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_34);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_60);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _60 = _23;                       // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_61);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          discriminant(_61) = 0;           // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_62);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _62 = _33;                       // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_22.0: &[&str]) = move _60;     // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_22.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _61; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_22.2: &[std::fmt::ArgumentV1]) = move _62; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_62);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_61);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_60);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_33);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_23);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _21 = &_22;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _20 = _21;                       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          const std::rt::begin_panic_fmt(move _20); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }\n+      }\n+  }\n+  "}, {"sha": "551f6db08a599e9aaecf2c3d70878f4c8565de29", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/32bit/rustc.map.SimplifyLocals.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff?ref=60cad20b41d93c94c247cd32873e5c176effc7d2", "patch": "@@ -5,12 +5,12 @@\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n       let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-      let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+-     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n -     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n -     let mut _5: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n -     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n       scope 1 {\n-          debug x => _3;                   // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n       }\n   \n       bb0: {"}, {"sha": "388b382b86daff5bac7263af4bee223c40eff845", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/64bit/rustc.map.SimplifyLocals.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff?ref=60cad20b41d93c94c247cd32873e5c176effc7d2", "patch": "@@ -5,12 +5,12 @@\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n       let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-      let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+-     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n -     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n -     let mut _5: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n -     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n       scope 1 {\n-          debug x => _3;                   // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n       }\n   \n       bb0: {"}, {"sha": "e6d794a71508c32ca08925edaab113826b395224", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff?ref=60cad20b41d93c94c247cd32873e5c176effc7d2", "patch": "@@ -15,22 +15,27 @@\n       let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n       let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:7:8: 7:9\n       scope 1 {\n-          debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+-         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n++         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n       }\n       scope 2 {\n-          debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n+-         debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n++         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n           scope 3 {\n               scope 7 {\n-                  debug t => _9;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+-                 debug t => _9;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n++                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n               }\n               scope 8 {\n-                  debug v => _8;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+-                 debug v => _8;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n++                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n                   let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:6:14: 6:15\n               }\n           }\n       }\n       scope 4 {\n-          debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n+-         debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n++         debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n           scope 5 {\n           }\n       }"}, {"sha": "24bde51c7d3bbb31fc6609333f74a65737192063", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir?ref=60cad20b41d93c94c247cd32873e5c176effc7d2", "patch": "@@ -14,22 +14,22 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n     let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:7:8: 7:9\n     scope 1 {\n-        debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n     }\n     scope 2 {\n-        debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n+        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n         scope 3 {\n             scope 7 {\n-                debug t => _9;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+                debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n             }\n             scope 8 {\n-                debug v => _8;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+                debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n                 let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:6:14: 6:15\n             }\n         }\n     }\n     scope 4 {\n-        debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n+        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n         scope 5 {\n         }\n     }"}, {"sha": "929f04d4654adbeff804a4364a9014d8c952ce98", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/60cad20b41d93c94c247cd32873e5c176effc7d2/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir?ref=60cad20b41d93c94c247cd32873e5c176effc7d2", "patch": "@@ -3,27 +3,22 @@\n fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n     debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:5:17: 5:18\n     let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:5:41: 5:57\n-    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:6:9: 6:10\n-    let _3: i32;                         // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-    let mut _4: i32;                     // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-    let mut _5: i32;                     // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-    let _6: u32;                         // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n     scope 1 {\n-        debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n     }\n     scope 2 {\n-        debug err => _3;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n+        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n         scope 3 {\n             scope 7 {\n-                debug t => _5;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+                debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n             }\n             scope 8 {\n-                debug v => _4;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+                debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n             }\n         }\n     }\n     scope 4 {\n-        debug val => _6;                 // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n+        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n         scope 5 {\n         }\n     }\n@@ -32,9 +27,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:6:9: 6:10\n         _0 = move _1;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n         return;                          // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n     }\n }"}]}