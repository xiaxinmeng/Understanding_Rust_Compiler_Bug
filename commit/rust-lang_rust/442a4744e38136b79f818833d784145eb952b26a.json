{"sha": "442a4744e38136b79f818833d784145eb952b26a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MmE0NzQ0ZTM4MTM2Yjc5ZjgxODgzM2Q3ODQxNDVlYjk1MmIyNmE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-26T17:29:45Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-08-04T12:54:12Z"}, "message": "Normalize EntryFnType variants to standard style", "tree": {"sha": "6e84aa5bae38f7a87e528dc8197a237c91e372c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e84aa5bae38f7a87e528dc8197a237c91e372c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/442a4744e38136b79f818833d784145eb952b26a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/442a4744e38136b79f818833d784145eb952b26a", "html_url": "https://github.com/rust-lang/rust/commit/442a4744e38136b79f818833d784145eb952b26a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/442a4744e38136b79f818833d784145eb952b26a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3267dcb3171f3a6b20eaceea254ab696609b922", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3267dcb3171f3a6b20eaceea254ab696609b922", "html_url": "https://github.com/rust-lang/rust/commit/b3267dcb3171f3a6b20eaceea254ab696609b922"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "b0acc6f20e691f56a0c13070ef9203d9fa87776a", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/442a4744e38136b79f818833d784145eb952b26a/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442a4744e38136b79f818833d784145eb952b26a/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=442a4744e38136b79f818833d784145eb952b26a", "patch": "@@ -12,6 +12,7 @@\n use hir::map as hir_map;\n use hir::def_id::{CRATE_DEF_INDEX};\n use session::{config, Session};\n+use session::config::EntryFnType;\n use syntax::ast::NodeId;\n use syntax::attr;\n use syntax::entry::EntryPointType;\n@@ -155,11 +156,11 @@ fn find_item(item: &Item, ctxt: &mut EntryContext, at_root: bool) {\n \n fn configure_main(this: &mut EntryContext, crate_name: &str) {\n     if let Some((node_id, span)) = this.start_fn {\n-        this.session.entry_fn.set(Some((node_id, span, config::EntryStart)));\n+        this.session.entry_fn.set(Some((node_id, span, EntryFnType::Start)));\n     } else if let Some((node_id, span)) = this.attr_main_fn {\n-        this.session.entry_fn.set(Some((node_id, span, config::EntryMain)));\n+        this.session.entry_fn.set(Some((node_id, span, EntryFnType::Main)));\n     } else if let Some((node_id, span)) = this.main_fn {\n-        this.session.entry_fn.set(Some((node_id, span, config::EntryMain)));\n+        this.session.entry_fn.set(Some((node_id, span, EntryFnType::Main)));\n     } else {\n         // No main function\n         this.session.entry_fn.set(None);"}, {"sha": "e69e6215ba14bd223ff963f2c5c355fb3901911f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/442a4744e38136b79f818833d784145eb952b26a/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442a4744e38136b79f818833d784145eb952b26a/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=442a4744e38136b79f818833d784145eb952b26a", "patch": "@@ -11,7 +11,6 @@\n //! Contains infrastructure for configuring the compiler, including parsing\n //! command line options.\n \n-pub use self::EntryFnType::*;\n pub use self::DebugInfoLevel::*;\n \n use std::str::FromStr;\n@@ -662,8 +661,8 @@ impl Options {\n // functions\n #[derive(Copy, Clone, PartialEq)]\n pub enum EntryFnType {\n-    EntryMain,\n-    EntryStart,\n+    Main,\n+    Start,\n }\n \n #[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug)]"}, {"sha": "d98a8981da724dd1c2a3128f67c5866caa956bd2", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/442a4744e38136b79f818833d784145eb952b26a/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442a4744e38136b79f818833d784145eb952b26a/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=442a4744e38136b79f818833d784145eb952b26a", "patch": "@@ -46,7 +46,7 @@ use rustc::middle::cstore::{self, LinkMeta, LinkagePreference};\n use rustc::middle::exported_symbols;\n use rustc::util::common::{time, print_time_passes_entry};\n use rustc::util::profiling::ProfileCategory;\n-use rustc::session::config::{self, NoDebugInfo};\n+use rustc::session::config::{self, NoDebugInfo, EntryFnType};\n use rustc::session::Session;\n use rustc_incremental;\n use allocator;\n@@ -560,8 +560,8 @@ fn maybe_create_entry_wrapper(cx: &CodegenCx) {\n \n     let et = cx.sess().entry_fn.get().map(|e| e.2);\n     match et {\n-        Some(config::EntryMain) => create_entry_fn(cx, span, main_llfn, main_def_id, true),\n-        Some(config::EntryStart) => create_entry_fn(cx, span, main_llfn, main_def_id, false),\n+        Some(EntryFnType::Main) => create_entry_fn(cx, span, main_llfn, main_def_id, true),\n+        Some(EntryFnType::Start) => create_entry_fn(cx, span, main_llfn, main_def_id, false),\n         None => {}    // Do nothing.\n     }\n "}, {"sha": "7f5851734fe858ea1d2e2d4d5b1ec89219b83810", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/442a4744e38136b79f818833d784145eb952b26a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442a4744e38136b79f818833d784145eb952b26a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=442a4744e38136b79f818833d784145eb952b26a", "patch": "@@ -1047,7 +1047,7 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n     /// the return type of `main`. This is not needed when\n     /// the user writes their own `start` manually.\n     fn push_extra_entry_roots(&mut self) {\n-        if self.tcx.sess.entry_fn.get().map(|e| e.2) != Some(config::EntryMain) {\n+        if self.tcx.sess.entry_fn.get().map(|e| e.2) != Some(config::EntryFnType::Main) {\n             return\n         }\n "}, {"sha": "8c47df8b04221318e4ca7ddf1db159d303c57349", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/442a4744e38136b79f818833d784145eb952b26a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442a4744e38136b79f818833d784145eb952b26a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=442a4744e38136b79f818833d784145eb952b26a", "patch": "@@ -1111,7 +1111,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         if let Some((id, _, entry_type)) = *fcx.tcx.sess.entry_fn.borrow() {\n             if id == fn_id {\n                 match entry_type {\n-                    config::EntryMain => {\n+                    config::EntryFnType::Main => {\n                         let substs = fcx.tcx.mk_substs_trait(declared_ret_ty, &[]);\n                         let trait_ref = ty::TraitRef::new(term_id, substs);\n                         let return_ty_span = decl.output.span();\n@@ -1122,7 +1122,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n                             traits::Obligation::new(\n                                 cause, param_env, trait_ref.to_predicate()));\n                     },\n-                    config::EntryStart => {},\n+                    config::EntryFnType::Start => {},\n                 }\n             }\n         }"}, {"sha": "9fd5db16fb1089081bc6c552bd4a4ad8704b7f06", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/442a4744e38136b79f818833d784145eb952b26a/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442a4744e38136b79f818833d784145eb952b26a/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=442a4744e38136b79f818833d784145eb952b26a", "patch": "@@ -318,8 +318,8 @@ fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn check_for_entry_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     if let Some((id, sp, entry_type)) = *tcx.sess.entry_fn.borrow() {\n         match entry_type {\n-            config::EntryMain => check_main_fn_ty(tcx, id, sp),\n-            config::EntryStart => check_start_fn_ty(tcx, id, sp),\n+            config::EntryFnType::Main => check_main_fn_ty(tcx, id, sp),\n+            config::EntryFnType::Start => check_start_fn_ty(tcx, id, sp),\n         }\n     }\n }"}]}