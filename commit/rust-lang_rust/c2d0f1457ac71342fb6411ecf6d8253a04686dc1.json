{"sha": "c2d0f1457ac71342fb6411ecf6d8253a04686dc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZDBmMTQ1N2FjNzEzNDJmYjY0MTFlY2Y2ZDgyNTNhMDQ2ODZkYzE=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-03-16T20:47:06Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-04-08T13:36:27Z"}, "message": "Update BARE_TRAIT_OBJECT and ELLIPSIS_INCLUSIVE_RANGE_PATTERNS to errors in Rust 2021", "tree": {"sha": "d8f65dd10ae5709701aa2ac89c4dbba2e745959f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8f65dd10ae5709701aa2ac89c4dbba2e745959f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2d0f1457ac71342fb6411ecf6d8253a04686dc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d0f1457ac71342fb6411ecf6d8253a04686dc1", "html_url": "https://github.com/rust-lang/rust/commit/c2d0f1457ac71342fb6411ecf6d8253a04686dc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69e1d22ddbc67b25141a735a22a8895a678b32ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/69e1d22ddbc67b25141a735a22a8895a678b32ca", "html_url": "https://github.com/rust-lang/rust/commit/69e1d22ddbc67b25141a735a22a8895a678b32ca"}], "stats": {"total": 209, "additions": 177, "deletions": 32}, "files": [{"sha": "fa32645289c58bf17ac04f506d6e31a5cd6672dd", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=c2d0f1457ac71342fb6411ecf6d8253a04686dc1", "patch": "@@ -58,6 +58,7 @@ use rustc_session::lint::builtin::{BARE_TRAIT_OBJECTS, MISSING_ABI};\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::parse::ParseSess;\n use rustc_session::Session;\n+use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -2774,13 +2775,21 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .map(|snippet| snippet.starts_with(\"#[\"))\n             .unwrap_or(true);\n         if !is_macro_callsite {\n-            self.resolver.lint_buffer().buffer_lint_with_diagnostic(\n-                BARE_TRAIT_OBJECTS,\n-                id,\n-                span,\n-                \"trait objects without an explicit `dyn` are deprecated\",\n-                BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n-            )\n+            if self.sess.edition() < Edition::Edition2021 {\n+                self.resolver.lint_buffer().buffer_lint_with_diagnostic(\n+                    BARE_TRAIT_OBJECTS,\n+                    id,\n+                    span,\n+                    \"trait objects without an explicit `dyn` are deprecated\",\n+                    BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n+                )\n+            } else {\n+                let msg = \"trait objects must include the `dyn` keyword\";\n+                let label = \"`dyn` keyword should be added before this trait\";\n+                let mut err = struct_span_err!(self.sess, span, E0782, \"{}\", msg,);\n+                err.span_label(span, label);\n+                err.emit();\n+            }\n         }\n     }\n "}, {"sha": "ab7a13dee693b0fd8d4c011f0745dbc5c498c625", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=c2d0f1457ac71342fb6411ecf6d8253a04686dc1", "patch": "@@ -471,6 +471,8 @@ E0778: include_str!(\"./error_codes/E0778.md\"),\n E0779: include_str!(\"./error_codes/E0779.md\"),\n E0780: include_str!(\"./error_codes/E0780.md\"),\n E0781: include_str!(\"./error_codes/E0781.md\"),\n+E0782: include_str!(\"./error_codes/E0782.md\"),\n+E0783: include_str!(\"./error_codes/E0783.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "e001aa8bc9bc3aae6b976384ca6d2a1999ef08ae", "filename": "compiler/rustc_error_codes/src/error_codes/E0782.md", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0782.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0782.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0782.md?ref=c2d0f1457ac71342fb6411ecf6d8253a04686dc1", "patch": "@@ -0,0 +1,17 @@\n+Trait objects must include the `dyn` keyword.\n+\n+Trait objects are a way to call methods on types that are not known until\n+runtime but conform to some trait.\n+\n+In the following code the trait object should be formed with\n+`Box<dyn Foo>`, but `dyn` is left off.\n+\n+```compile_fail,E0782\n+trait Foo {}\n+fn test(arg: Box<Foo>) {}\n+```\n+\n+This makes it harder to see that `arg` is a trait object and not a\n+simply a heap allocated type called `Foo`.\n+\n+This used to be allowed before edition 2021, but is now an error."}, {"sha": "cc904543b0d26699b9d8ecf5d41beb0a094c3744", "filename": "compiler/rustc_error_codes/src/error_codes/E0783.md", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0783.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0783.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0783.md?ref=c2d0f1457ac71342fb6411ecf6d8253a04686dc1", "patch": "@@ -0,0 +1,18 @@\n+The range pattern `...` is no longer allowed.\n+\n+Older Rust code using previous editions allowed `...` to stand for exclusive\n+ranges which are now signified using `..=`.\n+\n+The following code use to compile, but now it now longer does.\n+\n+```compile_fail,E0783\n+fn main() {\n+    let n = 2u8;\n+    match n {\n+        ...9 => println!(\"Got a number less than 10),\n+        _ => println!(\"Got a number 10 or more\")\n+    }\n+}\n+```\n+\n+To make this code compile replace the `...` with `..=`."}, {"sha": "9f1efe980f67fd84ff8b60be1ec9e4483077bd42", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=c2d0f1457ac71342fb6411ecf6d8253a04686dc1", "patch": "@@ -1699,32 +1699,57 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n             let suggestion = \"use `..=` for an inclusive range\";\n             if parenthesise {\n                 self.node_id = Some(pat.id);\n-                cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, pat.span, |lint| {\n-                    let end = expr_to_string(&end);\n-                    let replace = match start {\n-                        Some(start) => format!(\"&({}..={})\", expr_to_string(&start), end),\n-                        None => format!(\"&(..={})\", end),\n-                    };\n-                    lint.build(msg)\n-                        .span_suggestion(\n-                            pat.span,\n-                            suggestion,\n-                            replace,\n-                            Applicability::MachineApplicable,\n-                        )\n-                        .emit();\n-                });\n+                let end = expr_to_string(&end);\n+                let replace = match start {\n+                    Some(start) => format!(\"&({}..={})\", expr_to_string(&start), end),\n+                    None => format!(\"&(..={})\", end),\n+                };\n+                if cx.sess().edition() >= Edition::Edition2021 {\n+                    let mut err =\n+                        rustc_errors::struct_span_err!(cx.sess, pat.span, E0783, \"{}\", msg,);\n+                    err.span_suggestion(\n+                        pat.span,\n+                        suggestion,\n+                        replace,\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+                } else {\n+                    cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, pat.span, |lint| {\n+                        lint.build(msg)\n+                            .span_suggestion(\n+                                pat.span,\n+                                suggestion,\n+                                replace,\n+                                Applicability::MachineApplicable,\n+                            )\n+                            .emit();\n+                    });\n+                }\n             } else {\n-                cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, join, |lint| {\n-                    lint.build(msg)\n-                        .span_suggestion_short(\n-                            join,\n-                            suggestion,\n-                            \"..=\".to_owned(),\n-                            Applicability::MachineApplicable,\n-                        )\n-                        .emit();\n-                });\n+                let replace = \"..=\".to_owned();\n+                if cx.sess().edition() >= Edition::Edition2021 {\n+                    let mut err =\n+                        rustc_errors::struct_span_err!(cx.sess, pat.span, E0783, \"{}\", msg,);\n+                    err.span_suggestion_short(\n+                        join,\n+                        suggestion,\n+                        replace,\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+                } else {\n+                    cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, join, |lint| {\n+                        lint.build(msg)\n+                            .span_suggestion_short(\n+                                join,\n+                                suggestion,\n+                                replace,\n+                                Applicability::MachineApplicable,\n+                            )\n+                            .emit();\n+                    });\n+                }\n             };\n         }\n     }"}, {"sha": "bc1bed8a9a4c6dd432d3ac383df1bce8ee12feba", "filename": "src/test/ui/dyn-keyword/dyn-2021-edition-error.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.rs?ref=c2d0f1457ac71342fb6411ecf6d8253a04686dc1", "patch": "@@ -0,0 +1,12 @@\n+// edition:2021\n+\n+fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+    //~^ ERROR trait objects must include the `dyn` keyword\n+    //~| ERROR trait objects must include the `dyn` keyword\n+    let _x: &SomeTrait = todo!();\n+    //~^ ERROR trait objects must include the `dyn` keyword\n+}\n+\n+trait SomeTrait {}\n+\n+fn main() {}"}, {"sha": "791ff6979cb0b3e3d2a4cfc457f621e56ddd214a", "filename": "src/test/ui/dyn-keyword/dyn-2021-edition-error.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr?ref=c2d0f1457ac71342fb6411ecf6d8253a04686dc1", "patch": "@@ -0,0 +1,21 @@\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/dyn-2021-edition-error.rs:6:14\n+   |\n+LL |     let _x: &SomeTrait = todo!();\n+   |              ^^^^^^^^^ `dyn` keyword should be added before this trait\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/dyn-2021-edition-error.rs:3:17\n+   |\n+LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+   |                 ^^^^^^^^^ `dyn` keyword should be added before this trait\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/dyn-2021-edition-error.rs:3:35\n+   |\n+LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+   |                                   ^^^^^^^^^ `dyn` keyword should be added before this trait\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0782`."}, {"sha": "de69c9bf2f384f8d0977d350318fc96cca2f72a4", "filename": "src/test/ui/range/exclusive-range-patterns-2021.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/src%2Ftest%2Fui%2Frange%2Fexclusive-range-patterns-2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/src%2Ftest%2Fui%2Frange%2Fexclusive-range-patterns-2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fexclusive-range-patterns-2021.rs?ref=c2d0f1457ac71342fb6411ecf6d8253a04686dc1", "patch": "@@ -0,0 +1,14 @@\n+// edition:2021\n+\n+fn main() {\n+    let n = 2;\n+    match n {\n+        0...3 => {}\n+        //~^ ERROR `...` range patterns are deprecated\n+        4...10 => {}\n+        //~^ ERROR `...` range patterns are deprecated\n+        (11...100) => {}\n+        //~^ ERROR `...` range patterns are deprecated\n+        _ => {}\n+    }\n+}"}, {"sha": "a967437041a547a68152f452739203367879f865", "filename": "src/test/ui/range/exclusive-range-patterns-2021.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/src%2Ftest%2Fui%2Frange%2Fexclusive-range-patterns-2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2d0f1457ac71342fb6411ecf6d8253a04686dc1/src%2Ftest%2Fui%2Frange%2Fexclusive-range-patterns-2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fexclusive-range-patterns-2021.stderr?ref=c2d0f1457ac71342fb6411ecf6d8253a04686dc1", "patch": "@@ -0,0 +1,27 @@\n+error[E0783]: `...` range patterns are deprecated\n+  --> $DIR/exclusive-range-patterns-2021.rs:6:9\n+   |\n+LL |         0...3 => {}\n+   |         ^---^\n+   |          |\n+   |          help: use `..=` for an inclusive range\n+\n+error[E0783]: `...` range patterns are deprecated\n+  --> $DIR/exclusive-range-patterns-2021.rs:8:9\n+   |\n+LL |         4...10 => {}\n+   |         ^---^^\n+   |          |\n+   |          help: use `..=` for an inclusive range\n+\n+error[E0783]: `...` range patterns are deprecated\n+  --> $DIR/exclusive-range-patterns-2021.rs:10:10\n+   |\n+LL |         (11...100) => {}\n+   |          ^^---^^^\n+   |            |\n+   |            help: use `..=` for an inclusive range\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0783`."}]}