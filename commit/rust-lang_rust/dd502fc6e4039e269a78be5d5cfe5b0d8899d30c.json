{"sha": "dd502fc6e4039e269a78be5d5cfe5b0d8899d30c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNTAyZmM2ZTQwMzllMjY5YTc4YmU1ZDVjZmU1YjBkODg5OWQzMGM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-09-19T16:41:06Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-26T23:20:24Z"}, "message": "Allow hashmaps to infer their types", "tree": {"sha": "c1cdd3c783193ae47d942b02087c42e2f6ac8d3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1cdd3c783193ae47d942b02087c42e2f6ac8d3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c", "html_url": "https://github.com/rust-lang/rust/commit/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24153eb30f7f4384f6aebf6fef9e4aea35fdf416", "url": "https://api.github.com/repos/rust-lang/rust/commits/24153eb30f7f4384f6aebf6fef9e4aea35fdf416", "html_url": "https://github.com/rust-lang/rust/commit/24153eb30f7f4384f6aebf6fef9e4aea35fdf416"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "acc8cf4f5d38f73c57f43e124d455c25960a2ad2", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=dd502fc6e4039e269a78be5d5cfe5b0d8899d30c", "patch": "@@ -73,7 +73,7 @@ fn syntax_expander_table() -> HashMap<~str, syntax_extension> {\n     fn builtin_item_tt(f: syntax_expander_tt_item_) -> syntax_extension {\n         item_tt({expander: f, span: None})\n     }\n-    let syntax_expanders = HashMap::<~str,syntax_extension>();\n+    let syntax_expanders = HashMap();\n     syntax_expanders.insert(~\"macro\",\n                             macro_defining(ext::simplext::add_new_extension));\n     syntax_expanders.insert(~\"macro_rules\","}, {"sha": "4729e7da39cc1cad20a46d7f7c2c15d2b646a407", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=dd502fc6e4039e269a78be5d5cfe5b0d8899d30c", "patch": "@@ -237,7 +237,7 @@ fn follow_for_trans(cx: ext_ctxt, mmaybe: Option<arb_depth<matchable>>,\n \n /* helper for transcribe_exprs: what vars from `b` occur in `e`? */\n fn free_vars(b: bindings, e: @expr, it: fn(ident)) {\n-    let idents: HashMap<ident, ()> = HashMap();\n+    let idents = HashMap();\n     fn mark_ident(&&i: ident, _fld: ast_fold, b: bindings,\n                   idents: HashMap<ident, ()>) -> ident {\n         if b.contains_key(i) { idents.insert(i, ()); }"}, {"sha": "a7a459428222b96cb536d3a302ed1f932dbf1d39", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=dd502fc6e4039e269a78be5d5cfe5b0d8899d30c", "patch": "@@ -185,7 +185,7 @@ fn nameize(p_s: parse_sess, ms: ~[matcher], res: ~[@named_match])\n           }\n         }\n     }\n-    let ret_val = HashMap::<uint,@named_match>();\n+    let ret_val = HashMap();\n     for ms.each() |m| { n_rec(p_s, *m, res, ret_val) }\n     return ret_val;\n }"}, {"sha": "c42811762e461dd02497cc07ab77c154f58395ba", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=dd502fc6e4039e269a78be5d5cfe5b0d8899d30c", "patch": "@@ -47,7 +47,7 @@ fn new_tt_reader(sp_diag: span_handler, itr: ident_interner,\n               mut cur: @{readme: src, mut idx: 0u, dotdotdoted: false,\n                          sep: None, up: tt_frame_up(option::None)},\n               interpolations: match interp { /* just a convienience */\n-                None => std::map::HashMap::<uint,@named_match>(),\n+                None => std::map::HashMap(),\n                 Some(x) => x\n               },\n               mut repeat_idx: ~[],"}, {"sha": "021c25e3dd710bb255949485972d87749d083e58", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=dd502fc6e4039e269a78be5d5cfe5b0d8899d30c", "patch": "@@ -59,4 +59,4 @@ impl <T:Eq IterBytes Hash Const Copy> hash_interner<T>: interner<T> {\n     pure fn get(idx: uint) -> T { self.vect.get_elt(idx) }\n \n     fn len() -> uint { return self.vect.len(); }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "0cd0b64a061ad3b7c1627447808267926db4645c", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=dd502fc6e4039e269a78be5d5cfe5b0d8899d30c", "patch": "@@ -248,7 +248,7 @@ fn resolve_crate_deps(e: env, cdata: @~[u8]) -> cstore::cnum_map {\n     debug!(\"resolving deps of external crate\");\n     // The map from crate numbers in the crate we're resolving to local crate\n     // numbers\n-    let cnum_map = HashMap::<int,ast::crate_num>();\n+    let cnum_map = HashMap();\n     for decoder::get_crate_deps(e.intr, cdata).each |dep| {\n         let extrn_cnum = dep.cnum;\n         let cname = dep.name;"}, {"sha": "7151702f25e3293626b1bf69b495644195cf853c", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=dd502fc6e4039e269a78be5d5cfe5b0d8899d30c", "patch": "@@ -69,8 +69,8 @@ pure fn p(cstore: cstore) -> cstore_private {\n }\n \n fn mk_cstore(intr: ident_interner) -> cstore {\n-    let meta_cache = map::HashMap::<int,crate_metadata>();\n-    let crate_map = map::HashMap::<int,ast::crate_num>();\n+    let meta_cache = map::HashMap();\n+    let crate_map = map::HashMap();\n     let mod_path_map = HashMap();\n     return private(@{metas: meta_cache,\n                      use_crate_map: crate_map,"}, {"sha": "928bba5205a6d0696663c53bc553237da55e5b34", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=dd502fc6e4039e269a78be5d5cfe5b0d8899d30c", "patch": "@@ -967,7 +967,7 @@ fn get_crate_module_paths(intr: ident_interner, cdata: cmd)\n     // find all module (path, def_ids), which are not\n     // fowarded path due to renamed import or reexport\n     let mut res = ~[];\n-    let mods = map::HashMap::<~str,bool>();\n+    let mods = map::HashMap();\n     do iter_crate_items(intr, cdata) |path, did| {\n         let m = mod_of_path(path);\n         if str::is_not_empty(m) {"}, {"sha": "07b5d3b4ce86d4c69c493ddaa195149c3b754eac", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=dd502fc6e4039e269a78be5d5cfe5b0d8899d30c", "patch": "@@ -314,7 +314,7 @@ fn Atom(n: uint) -> Atom {\n \n /// Creates a hash table of atoms.\n fn atom_hashmap<V:Copy>() -> HashMap<Atom,V> {\n-  HashMap::<Atom,V>()\n+  HashMap()\n }\n \n /// One local scope."}, {"sha": "b29fac0fa2f13a33cc39cd27d86daf860188eaee", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd502fc6e4039e269a78be5d5cfe5b0d8899d30c/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=dd502fc6e4039e269a78be5d5cfe5b0d8899d30c", "patch": "@@ -1406,9 +1406,9 @@ fn new_fn_ctxt_w_id(ccx: @crate_ctxt, path: path,\n           mut llself: None,\n           mut personality: None,\n           mut loop_ret: None,\n-          llargs: HashMap::<int,local_val>(),\n-          lllocals: HashMap::<int,local_val>(),\n-          llupvars: HashMap::<int,ValueRef>(),\n+          llargs: HashMap(),\n+          lllocals: HashMap(),\n+          llupvars: HashMap(),\n           id: id,\n           param_substs: param_substs,\n           span: sp,\n@@ -2315,7 +2315,7 @@ fn declare_intrinsics(llmod: ModuleRef) -> HashMap<~str, ValueRef> {\n     let frameaddress = decl_cdecl_fn(llmod, ~\"llvm.frameaddress\",\n                                      T_fn(T_frameaddress_args,\n                                           T_ptr(T_i8())));\n-    let intrinsics = HashMap::<~str,ValueRef>();\n+    let intrinsics = HashMap();\n     intrinsics.insert(~\"llvm.gcroot\", gcroot);\n     intrinsics.insert(~\"llvm.gcread\", gcread);\n     intrinsics.insert(~\"llvm.memmove.p0i8.p0i8.i32\", memmove32);\n@@ -2627,17 +2627,17 @@ fn trans_crate(sess: session::session,\n           llmod: llmod,\n           td: td,\n           tn: tn,\n-          externs: HashMap::<~str,ValueRef>(),\n+          externs: HashMap(),\n           intrinsics: intrinsics,\n-          item_vals: HashMap::<int,ValueRef>(),\n+          item_vals: HashMap(),\n           exp_map2: emap2,\n           reachable: reachable,\n-          item_symbols: HashMap::<int,~str>(),\n+          item_symbols: HashMap(),\n           mut main_fn: None::<ValueRef>,\n           link_meta: link_meta,\n           enum_sizes: ty::new_ty_hash(),\n           discrims: HashMap(),\n-          discrim_symbols: HashMap::<int,~str>(),\n+          discrim_symbols: HashMap(),\n           tydescs: ty::new_ty_hash(),\n           mut finished_tydescs: false,\n           external: HashMap(),\n@@ -2646,15 +2646,15 @@ fn trans_crate(sess: session::session,\n           type_use_cache: HashMap(),\n           vtables: map::HashMap(),\n           const_cstr_cache: HashMap(),\n-          const_globals: HashMap::<int,ValueRef>(),\n-          module_data: HashMap::<~str,ValueRef>(),\n+          const_globals: HashMap(),\n+          module_data: HashMap(),\n           lltypes: ty::new_ty_hash(),\n           names: new_namegen(sess.parse_sess.interner),\n           next_addrspace: new_addrspace_gen(),\n           symbol_hasher: symbol_hasher,\n           type_hashcodes: ty::new_ty_hash(),\n           type_short_names: ty::new_ty_hash(),\n-          all_llvm_symbols: HashMap::<~str,()>(),\n+          all_llvm_symbols: HashMap(),\n           tcx: tcx,\n           maps: maps,\n           stats:\n@@ -2672,7 +2672,7 @@ fn trans_crate(sess: session::session,\n           upcalls:\n               upcall::declare_upcalls(targ_cfg, tn, tydesc_type,\n                                       llmod),\n-          rtcalls: HashMap::<~str,ast::def_id>(),\n+          rtcalls: HashMap(),\n           tydesc_type: tydesc_type,\n           int_type: int_type,\n           float_type: float_type,\n@@ -2683,7 +2683,7 @@ fn trans_crate(sess: session::session,\n           crate_map: crate_map,\n           mut uses_gc: false,\n           dbg_cx: dbg_cx,\n-          class_ctors: HashMap::<int,ast::def_id>(),\n+          class_ctors: HashMap(),\n           mut do_not_commit_warning_issued: false};\n \n "}]}