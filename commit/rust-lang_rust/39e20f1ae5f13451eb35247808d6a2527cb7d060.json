{"sha": "39e20f1ae5f13451eb35247808d6a2527cb7d060", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZTIwZjFhZTVmMTM0NTFlYjM1MjQ3ODA4ZDZhMjUyN2NiN2QwNjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-04T09:15:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-04T09:15:36Z"}, "message": "Auto merge of #86255 - Smittyvb:mir-alloc-oom, r=RalfJung,oli-obk\n\nSupport allocation failures when interpreting MIR\n\nThis closes #79601 by handling the case where memory allocation fails during MIR interpretation, and translates that failure into an `InterpError`. The error message is \"tried to allocate more memory than available to compiler\" to make it clear that the memory shortage is happening at compile-time by the compiler itself, and that it is not a runtime issue.\n\nNow that memory allocation can fail, it would be neat if Miri could simulate low-memory devices to make it easy to see how much memory a Rust program needs.\n\nNote that this breaks Miri because it assumes that allocation can never fail.", "tree": {"sha": "f2b3344bf588d88fc7ffadd6c310b430bf6d15d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2b3344bf588d88fc7ffadd6c310b430bf6d15d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39e20f1ae5f13451eb35247808d6a2527cb7d060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39e20f1ae5f13451eb35247808d6a2527cb7d060", "html_url": "https://github.com/rust-lang/rust/commit/39e20f1ae5f13451eb35247808d6a2527cb7d060", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39e20f1ae5f13451eb35247808d6a2527cb7d060/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64ae15ddd3f3cca7036ab2b2f3a6b130b62af4da", "url": "https://api.github.com/repos/rust-lang/rust/commits/64ae15ddd3f3cca7036ab2b2f3a6b130b62af4da", "html_url": "https://github.com/rust-lang/rust/commit/64ae15ddd3f3cca7036ab2b2f3a6b130b62af4da"}, {"sha": "d83c46ffcc57eab48249476344982b8f5ae1f263", "url": "https://api.github.com/repos/rust-lang/rust/commits/d83c46ffcc57eab48249476344982b8f5ae1f263", "html_url": "https://github.com/rust-lang/rust/commit/d83c46ffcc57eab48249476344982b8f5ae1f263"}], "stats": {"total": 117, "additions": 96, "deletions": 21}, "files": [{"sha": "57f507290e8945723738309478171b8ec422a9a6", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=39e20f1ae5f13451eb35247808d6a2527cb7d060", "patch": "@@ -48,6 +48,7 @@\n #![feature(associated_type_defaults)]\n #![feature(iter_zip)]\n #![feature(thread_local_const_init)]\n+#![feature(try_reserve)]\n #![recursion_limit = \"512\"]\n \n #[macro_use]"}, {"sha": "f1b1bb9ab88ab4b9dbd42a0e9a6549e76341decd", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=39e20f1ae5f13451eb35247808d6a2527cb7d060", "patch": "@@ -8,12 +8,15 @@ use std::ptr;\n \n use rustc_ast::Mutability;\n use rustc_data_structures::sorted_map::SortedMap;\n+use rustc_span::DUMMY_SP;\n use rustc_target::abi::{Align, HasDataLayout, Size};\n \n use super::{\n-    read_target_uint, write_target_uint, AllocId, InterpError, Pointer, Scalar, ScalarMaybeUninit,\n-    UndefinedBehaviorInfo, UninitBytesAccess, UnsupportedOpInfo,\n+    read_target_uint, write_target_uint, AllocId, InterpError, InterpResult, Pointer,\n+    ResourceExhaustionInfo, Scalar, ScalarMaybeUninit, UndefinedBehaviorInfo, UninitBytesAccess,\n+    UnsupportedOpInfo,\n };\n+use crate::ty;\n \n /// This type represents an Allocation in the Miri/CTFE core engine.\n ///\n@@ -121,15 +124,33 @@ impl<Tag> Allocation<Tag> {\n         Allocation::from_bytes(slice, Align::ONE, Mutability::Not)\n     }\n \n-    pub fn uninit(size: Size, align: Align) -> Self {\n-        Allocation {\n-            bytes: vec![0; size.bytes_usize()],\n+    /// Try to create an Allocation of `size` bytes, failing if there is not enough memory\n+    /// available to the compiler to do so.\n+    pub fn uninit(size: Size, align: Align, panic_on_fail: bool) -> InterpResult<'static, Self> {\n+        let mut bytes = Vec::new();\n+        bytes.try_reserve(size.bytes_usize()).map_err(|_| {\n+            // This results in an error that can happen non-deterministically, since the memory\n+            // available to the compiler can change between runs. Normally queries are always\n+            // deterministic. However, we can be non-determinstic here because all uses of const\n+            // evaluation (including ConstProp!) will make compilation fail (via hard error\n+            // or ICE) upon encountering a `MemoryExhausted` error.\n+            if panic_on_fail {\n+                panic!(\"Allocation::uninit called with panic_on_fail had allocation failure\")\n+            }\n+            ty::tls::with(|tcx| {\n+                tcx.sess.delay_span_bug(DUMMY_SP, \"exhausted memory during interpreation\")\n+            });\n+            InterpError::ResourceExhaustion(ResourceExhaustionInfo::MemoryExhausted)\n+        })?;\n+        bytes.resize(size.bytes_usize(), 0);\n+        Ok(Allocation {\n+            bytes,\n             relocations: Relocations::new(),\n             init_mask: InitMask::new(size, false),\n             align,\n             mutability: Mutability::Mut,\n             extra: (),\n-        }\n+        })\n     }\n }\n "}, {"sha": "ab9239585c4aa0c2dd2324b97e28a64864e129ea", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=39e20f1ae5f13451eb35247808d6a2527cb7d060", "patch": "@@ -423,6 +423,8 @@ pub enum ResourceExhaustionInfo {\n     ///\n     /// The exact limit is set by the `const_eval_limit` attribute.\n     StepLimitReached,\n+    /// There is not enough memory to perform an allocation.\n+    MemoryExhausted,\n }\n \n impl fmt::Display for ResourceExhaustionInfo {\n@@ -435,6 +437,9 @@ impl fmt::Display for ResourceExhaustionInfo {\n             StepLimitReached => {\n                 write!(f, \"exceeded interpreter step limit (see `#[const_eval_limit]`)\")\n             }\n+            MemoryExhausted => {\n+                write!(f, \"tried to allocate more memory than available to compiler\")\n+            }\n         }\n     }\n }\n@@ -525,7 +530,8 @@ impl InterpError<'_> {\n         use InterpError::*;\n         match *self {\n             MachineStop(ref err) => err.is_hard_err(),\n-            InterpError::UndefinedBehavior(_) => true,\n+            UndefinedBehavior(_) => true,\n+            ResourceExhaustion(ResourceExhaustionInfo::MemoryExhausted) => true,\n             _ => false,\n         }\n     }"}, {"sha": "0940137a7c33facf95989c8603001027b719d481", "filename": "compiler/rustc_middle/src/ty/vtable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs?ref=39e20f1ae5f13451eb35247808d6a2527cb7d060", "patch": "@@ -60,7 +60,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         let ptr_align = tcx.data_layout.pointer_align.abi;\n \n         let vtable_size = ptr_size * u64::try_from(vtable_entries.len()).unwrap();\n-        let mut vtable = Allocation::uninit(vtable_size, ptr_align);\n+        let mut vtable =\n+            Allocation::uninit(vtable_size, ptr_align, /* panic_on_fail */ true).unwrap();\n \n         // No need to do any alignment checks on the memory accesses below, because we know the\n         // allocation is correctly aligned as we created it above. Also we're only offsetting by"}, {"sha": "7a7dbe50e72f9447f808b10bce25a734863e427c", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=39e20f1ae5f13451eb35247808d6a2527cb7d060", "patch": "@@ -48,7 +48,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     );\n     let layout = ecx.layout_of(body.return_ty().subst(tcx, cid.instance.substs))?;\n     assert!(!layout.is_unsized());\n-    let ret = ecx.allocate(layout, MemoryKind::Stack);\n+    let ret = ecx.allocate(layout, MemoryKind::Stack)?;\n \n     let name =\n         with_no_trimmed_paths(|| ty::tls::with(|tcx| tcx.def_path_str(cid.instance.def_id())));"}, {"sha": "992e32e298f8e60f5c50d64e033d4b436b7ac70f", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=39e20f1ae5f13451eb35247808d6a2527cb7d060", "patch": "@@ -201,6 +201,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     type MemoryExtra = MemoryExtra;\n \n+    const PANIC_ON_ALLOC_FAIL: bool = false; // will be raised as a proper error\n+\n     fn load_mir(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         instance: ty::InstanceDef<'tcx>,\n@@ -306,7 +308,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                     Size::from_bytes(size as u64),\n                     align,\n                     interpret::MemoryKind::Machine(MemoryKind::Heap),\n-                );\n+                )?;\n                 ecx.write_scalar(Scalar::Ptr(ptr), dest)?;\n             }\n             _ => {"}, {"sha": "2862670dc7c46d0c1c48b5e09343c1e13c7070c8", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=39e20f1ae5f13451eb35247808d6a2527cb7d060", "patch": "@@ -428,7 +428,7 @@ impl<'mir, 'tcx: 'mir, M: super::intern::CompileTimeMachine<'mir, 'tcx, !>>\n             &MPlaceTy<'tcx, M::PointerTag>,\n         ) -> InterpResult<'tcx, ()>,\n     ) -> InterpResult<'tcx, &'tcx Allocation> {\n-        let dest = self.allocate(layout, MemoryKind::Stack);\n+        let dest = self.allocate(layout, MemoryKind::Stack)?;\n         f(self, &dest)?;\n         let ptr = dest.ptr.assert_ptr();\n         assert_eq!(ptr.offset, Size::ZERO);"}, {"sha": "4a3278030b5d91a0e7a4586c4fca6305060a36d7", "filename": "compiler/rustc_mir/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=39e20f1ae5f13451eb35247808d6a2527cb7d060", "patch": "@@ -91,7 +91,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             .type_of(self.tcx.require_lang_item(LangItem::PanicLocation, None))\n             .subst(*self.tcx, self.tcx.mk_substs([self.tcx.lifetimes.re_erased.into()].iter()));\n         let loc_layout = self.layout_of(loc_ty).unwrap();\n-        let location = self.allocate(loc_layout, MemoryKind::CallerLocation);\n+        // This can fail if rustc runs out of memory right here. Trying to emit an error would be\n+        // pointless, since that would require allocating more memory than a Location.\n+        let location = self.allocate(loc_layout, MemoryKind::CallerLocation).unwrap();\n \n         // Initialize fields.\n         self.write_immediate(file.to_ref(), &self.mplace_field(&location, 0).unwrap().into())"}, {"sha": "5b8c0788cbc8472296ad171e395afdc1987f7ca2", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=39e20f1ae5f13451eb35247808d6a2527cb7d060", "patch": "@@ -122,6 +122,9 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// that is added to the memory so that the work is not done twice.\n     const GLOBAL_KIND: Option<Self::MemoryKind>;\n \n+    /// Should the machine panic on allocation failures?\n+    const PANIC_ON_ALLOC_FAIL: bool;\n+\n     /// Whether memory accesses should be alignment-checked.\n     fn enforce_alignment(memory_extra: &Self::MemoryExtra) -> bool;\n "}, {"sha": "cb929c21850cb62d2ed7da56260659776edd40fb", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=39e20f1ae5f13451eb35247808d6a2527cb7d060", "patch": "@@ -207,9 +207,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         size: Size,\n         align: Align,\n         kind: MemoryKind<M::MemoryKind>,\n-    ) -> Pointer<M::PointerTag> {\n-        let alloc = Allocation::uninit(size, align);\n-        self.allocate_with(alloc, kind)\n+    ) -> InterpResult<'static, Pointer<M::PointerTag>> {\n+        let alloc = Allocation::uninit(size, align, M::PANIC_ON_ALLOC_FAIL)?;\n+        Ok(self.allocate_with(alloc, kind))\n     }\n \n     pub fn allocate_bytes(\n@@ -257,7 +257,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n         // For simplicities' sake, we implement reallocate as \"alloc, copy, dealloc\".\n         // This happens so rarely, the perf advantage is outweighed by the maintenance cost.\n-        let new_ptr = self.allocate(new_size, new_align, kind);\n+        let new_ptr = self.allocate(new_size, new_align, kind)?;\n         let old_size = match old_size_and_align {\n             Some((size, _align)) => size,\n             None => self.get_raw(ptr.alloc_id)?.size(),"}, {"sha": "42a304ce41213337d7614c1063c74e4c9ab8604d", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=39e20f1ae5f13451eb35247808d6a2527cb7d060", "patch": "@@ -982,7 +982,7 @@ where\n                         let (size, align) = self\n                             .size_and_align_of(&meta, &local_layout)?\n                             .expect(\"Cannot allocate for non-dyn-sized type\");\n-                        let ptr = self.memory.allocate(size, align, MemoryKind::Stack);\n+                        let ptr = self.memory.allocate(size, align, MemoryKind::Stack)?;\n                         let mplace = MemPlace { ptr: ptr.into(), align, meta };\n                         if let LocalValue::Live(Operand::Immediate(value)) = local_val {\n                             // Preserve old value.\n@@ -1018,9 +1018,9 @@ where\n         &mut self,\n         layout: TyAndLayout<'tcx>,\n         kind: MemoryKind<M::MemoryKind>,\n-    ) -> MPlaceTy<'tcx, M::PointerTag> {\n-        let ptr = self.memory.allocate(layout.size, layout.align.abi, kind);\n-        MPlaceTy::from_aligned_ptr(ptr, layout)\n+    ) -> InterpResult<'static, MPlaceTy<'tcx, M::PointerTag>> {\n+        let ptr = self.memory.allocate(layout.size, layout.align.abi, kind)?;\n+        Ok(MPlaceTy::from_aligned_ptr(ptr, layout))\n     }\n \n     /// Returns a wide MPlace of type `&'static [mut] str` to a new 1-aligned allocation."}, {"sha": "a58ded9cfd3a4b77f682fe61775aa5fdabf88cdb", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=39e20f1ae5f13451eb35247808d6a2527cb7d060", "patch": "@@ -29,6 +29,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(option_get_or_insert_default)]\n #![feature(once_cell)]\n #![feature(control_flow_enum)]\n+#![feature(try_reserve)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "e9b68754bdf80c02694934627c334f8b846a9690", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e20f1ae5f13451eb35247808d6a2527cb7d060/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=39e20f1ae5f13451eb35247808d6a2527cb7d060", "patch": "@@ -181,6 +181,7 @@ impl<'mir, 'tcx> ConstPropMachine<'mir, 'tcx> {\n \n impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx> {\n     compile_time_machine!(<'mir, 'tcx>);\n+    const PANIC_ON_ALLOC_FAIL: bool = true; // all allocations are small (see `MAX_ALLOC_LIMIT`)\n \n     type MemoryKind = !;\n \n@@ -393,7 +394,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             .filter(|ret_layout| {\n                 !ret_layout.is_zst() && ret_layout.size < Size::from_bytes(MAX_ALLOC_LIMIT)\n             })\n-            .map(|ret_layout| ecx.allocate(ret_layout, MemoryKind::Stack).into());\n+            .map(|ret_layout| {\n+                ecx.allocate(ret_layout, MemoryKind::Stack)\n+                    .expect(\"couldn't perform small allocation\")\n+                    .into()\n+            });\n \n         ecx.push_stack_frame(\n             Instance::new(def_id, substs),"}, {"sha": "54abaab2247307d47bbd82a7512d5b0b2b9d1f9d", "filename": "src/test/ui/consts/large_const_alloc.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39e20f1ae5f13451eb35247808d6a2527cb7d060/src%2Ftest%2Fui%2Fconsts%2Flarge_const_alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e20f1ae5f13451eb35247808d6a2527cb7d060/src%2Ftest%2Fui%2Fconsts%2Flarge_const_alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Flarge_const_alloc.rs?ref=39e20f1ae5f13451eb35247808d6a2527cb7d060", "patch": "@@ -0,0 +1,18 @@\n+// only-64bit\n+// on 32bit and 16bit platforms it is plausible that the maximum allocation size will succeed\n+\n+const FOO: () = {\n+    // 128 TiB, unlikely anyone has that much RAM\n+    let x = [0_u8; (1 << 47) - 1];\n+    //~^ ERROR evaluation of constant value failed\n+};\n+\n+static FOO2: () = {\n+    let x = [0_u8; (1 << 47) - 1];\n+    //~^ ERROR could not evaluate static initializer\n+};\n+\n+fn main() {\n+    let _ = FOO;\n+    let _ = FOO2;\n+}"}, {"sha": "25d660f1217f4b3e2171745a99dbee8c976752fe", "filename": "src/test/ui/consts/large_const_alloc.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/39e20f1ae5f13451eb35247808d6a2527cb7d060/src%2Ftest%2Fui%2Fconsts%2Flarge_const_alloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39e20f1ae5f13451eb35247808d6a2527cb7d060/src%2Ftest%2Fui%2Fconsts%2Flarge_const_alloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Flarge_const_alloc.stderr?ref=39e20f1ae5f13451eb35247808d6a2527cb7d060", "patch": "@@ -0,0 +1,15 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/large_const_alloc.rs:6:13\n+   |\n+LL |     let x = [0_u8; (1 << 47) - 1];\n+   |             ^^^^^^^^^^^^^^^^^^^^^ tried to allocate more memory than available to compiler\n+\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/large_const_alloc.rs:11:13\n+   |\n+LL |     let x = [0_u8; (1 << 47) - 1];\n+   |             ^^^^^^^^^^^^^^^^^^^^^ tried to allocate more memory than available to compiler\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}]}