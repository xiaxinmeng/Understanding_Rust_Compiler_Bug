{"sha": "2935a89f3f4434bcff11f4c738e5a5f7666ebb9a", "node_id": "C_kwDOAAsO6NoAKDI5MzVhODlmM2Y0NDM0YmNmZjExZjRjNzM4ZTVhNWY3NjY2ZWJiOWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-27T11:35:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-27T11:35:33Z"}, "message": "Auto merge of #14037 - Veykril:if-let-match, r=Veykril\n\nHandle boolean scrutinees in match <-> if let replacement assists better", "tree": {"sha": "e02892606ee7e3f4482317337d07afc9cd6fc16c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e02892606ee7e3f4482317337d07afc9cd6fc16c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2935a89f3f4434bcff11f4c738e5a5f7666ebb9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2935a89f3f4434bcff11f4c738e5a5f7666ebb9a", "html_url": "https://github.com/rust-lang/rust/commit/2935a89f3f4434bcff11f4c738e5a5f7666ebb9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2935a89f3f4434bcff11f4c738e5a5f7666ebb9a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9814d798411a4b1b258c710f86626bd1997e406f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9814d798411a4b1b258c710f86626bd1997e406f", "html_url": "https://github.com/rust-lang/rust/commit/9814d798411a4b1b258c710f86626bd1997e406f"}, {"sha": "68291906116feef3e74d9f4c8c5641eebd8dd9da", "url": "https://api.github.com/repos/rust-lang/rust/commits/68291906116feef3e74d9f4c8c5641eebd8dd9da", "html_url": "https://github.com/rust-lang/rust/commit/68291906116feef3e74d9f4c8c5641eebd8dd9da"}], "stats": {"total": 183, "additions": 159, "deletions": 24}, "files": [{"sha": "457559656a42b29bc10306f7d7975556ec6a93c8", "filename": "crates/ide-assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 159, "deletions": 24, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/2935a89f3f4434bcff11f4c738e5a5f7666ebb9a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2935a89f3f4434bcff11f4c738e5a5f7666ebb9a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=2935a89f3f4434bcff11f4c738e5a5f7666ebb9a", "patch": "@@ -13,7 +13,7 @@ use syntax::{\n         edit::{AstNodeEdit, IndentLevel},\n         make, HasName,\n     },\n-    AstNode, TextRange,\n+    AstNode, TextRange, T,\n };\n \n use crate::{\n@@ -96,8 +96,9 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext<'\n         cond_bodies.push((cond, body));\n     }\n \n-    if !pat_seen {\n-        // Don't offer turning an if (chain) without patterns into a match\n+    if !pat_seen && cond_bodies.len() != 1 {\n+        // Don't offer turning an if (chain) without patterns into a match,\n+        // unless its a simple `if cond { .. } (else { .. })`\n         return None;\n     }\n \n@@ -114,6 +115,11 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext<'\n                         Either::Left(pat) => {\n                             make::match_arm(iter::once(pat), None, unwrap_trivial_block(body))\n                         }\n+                        Either::Right(_) if !pat_seen => make::match_arm(\n+                            iter::once(make::literal_pat(\"true\").into()),\n+                            None,\n+                            unwrap_trivial_block(body),\n+                        ),\n                         Either::Right(expr) => make::match_arm(\n                             iter::once(make::wildcard_pat().into()),\n                             Some(expr),\n@@ -144,31 +150,36 @@ fn make_else_arm(\n     else_block: Option<ast::BlockExpr>,\n     conditionals: &[(Either<ast::Pat, ast::Expr>, ast::BlockExpr)],\n ) -> ast::MatchArm {\n-    if let Some(else_block) = else_block {\n-        let pattern = if let [(Either::Left(pat), _)] = conditionals {\n-            ctx.sema\n+    let (pattern, expr) = if let Some(else_block) = else_block {\n+        let pattern = match conditionals {\n+            [(Either::Right(_), _)] => make::literal_pat(\"false\").into(),\n+            [(Either::Left(pat), _)] => match ctx\n+                .sema\n                 .type_of_pat(pat)\n                 .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty.adjusted()))\n-                .zip(Some(pat))\n-        } else {\n-            None\n-        };\n-        let pattern = match pattern {\n-            Some((it, pat)) => {\n-                if does_pat_match_variant(pat, &it.sad_pattern()) {\n-                    it.happy_pattern_wildcard()\n-                } else if does_nested_pattern(pat) {\n-                    make::wildcard_pat().into()\n-                } else {\n-                    it.sad_pattern()\n+            {\n+                Some(it) => {\n+                    if does_pat_match_variant(pat, &it.sad_pattern()) {\n+                        it.happy_pattern_wildcard()\n+                    } else if does_nested_pattern(pat) {\n+                        make::wildcard_pat().into()\n+                    } else {\n+                        it.sad_pattern()\n+                    }\n                 }\n-            }\n-            None => make::wildcard_pat().into(),\n+                None => make::wildcard_pat().into(),\n+            },\n+            _ => make::wildcard_pat().into(),\n         };\n-        make::match_arm(iter::once(pattern), None, unwrap_trivial_block(else_block))\n+        (pattern, unwrap_trivial_block(else_block))\n     } else {\n-        make::match_arm(iter::once(make::wildcard_pat().into()), None, make::expr_unit())\n-    }\n+        let pattern = match conditionals {\n+            [(Either::Right(_), _)] => make::literal_pat(\"false\").into(),\n+            _ => make::wildcard_pat().into(),\n+        };\n+        (pattern, make::expr_unit())\n+    };\n+    make::match_arm(iter::once(pattern), None, expr)\n }\n \n // Assist: replace_match_with_if_let\n@@ -231,7 +242,19 @@ pub(crate) fn replace_match_with_if_let(acc: &mut Assists, ctx: &AssistContext<'\n                 }\n             }\n \n-            let condition = make::expr_let(if_let_pat, scrutinee);\n+            let condition = match if_let_pat {\n+                ast::Pat::LiteralPat(p)\n+                    if p.literal().map_or(false, |it| it.token().kind() == T![true]) =>\n+                {\n+                    scrutinee\n+                }\n+                ast::Pat::LiteralPat(p)\n+                    if p.literal().map_or(false, |it| it.token().kind() == T![false]) =>\n+                {\n+                    make::expr_prefix(T![!], scrutinee)\n+                }\n+                _ => make::expr_let(if_let_pat, scrutinee).into(),\n+            };\n             let then_block = make_block_expr(then_expr.reset_indent());\n             let else_expr = if is_empty_expr(&else_expr) { None } else { Some(else_expr) };\n             let if_let_expr = make::expr_if(\n@@ -327,6 +350,58 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn test_if_with_match_no_else() {\n+        check_assist(\n+            replace_if_let_with_match,\n+            r#\"\n+pub fn foo(foo: bool) {\n+    if foo$0 {\n+        self.foo();\n+    }\n+}\n+\"#,\n+            r#\"\n+pub fn foo(foo: bool) {\n+    match foo {\n+        true => {\n+            self.foo();\n+        }\n+        false => (),\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_if_with_match_with_else() {\n+        check_assist(\n+            replace_if_let_with_match,\n+            r#\"\n+pub fn foo(foo: bool) {\n+    if foo$0 {\n+        self.foo();\n+    } else {\n+        self.bar();\n+    }\n+}\n+\"#,\n+            r#\"\n+pub fn foo(foo: bool) {\n+    match foo {\n+        true => {\n+            self.foo();\n+        }\n+        false => {\n+            self.bar();\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn test_if_let_with_match_no_else() {\n         check_assist(\n@@ -993,6 +1068,66 @@ fn main() {\n         code()\n     }\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_replace_match_with_if_bool() {\n+        check_assist(\n+            replace_match_with_if_let,\n+            r#\"\n+fn main() {\n+    match$0 b {\n+        true => (),\n+        _ => code(),\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    if b {\n+        ()\n+    } else {\n+        code()\n+    }\n+}\n+\"#,\n+        );\n+        check_assist(\n+            replace_match_with_if_let,\n+            r#\"\n+fn main() {\n+    match$0 b {\n+        false => code(),\n+        true => (),\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    if !b {\n+        code()\n+    }\n+}\n+\"#,\n+        );\n+        check_assist(\n+            replace_match_with_if_let,\n+            r#\"\n+fn main() {\n+    match$0 b {\n+        false => (),\n+        true => code(),\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    if b {\n+        code()\n+    }\n+}\n \"#,\n         )\n     }"}]}