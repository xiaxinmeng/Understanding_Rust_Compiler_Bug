{"sha": "1f532bfed5e0a80bf145f5db504601dc037367a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNTMyYmZlZDVlMGE4MGJmMTQ1ZjVkYjUwNDYwMWRjMDM3MzY3YTE=", "commit": {"author": {"name": "achernyak", "email": "artemchernyak@gmail.com", "date": "2017-05-08T02:05:31Z"}, "committer": {"name": "achernyak", "email": "artemchernyak@gmail.com", "date": "2017-05-08T02:05:31Z"}, "message": "is_exported_symbol", "tree": {"sha": "0218e9c35933158631bc3aa93073669e32f6cc06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0218e9c35933158631bc3aa93073669e32f6cc06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f532bfed5e0a80bf145f5db504601dc037367a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f532bfed5e0a80bf145f5db504601dc037367a1", "html_url": "https://github.com/rust-lang/rust/commit/1f532bfed5e0a80bf145f5db504601dc037367a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f532bfed5e0a80bf145f5db504601dc037367a1/comments", "author": {"login": "hackeryarn", "id": 827709, "node_id": "MDQ6VXNlcjgyNzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/827709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackeryarn", "html_url": "https://github.com/hackeryarn", "followers_url": "https://api.github.com/users/hackeryarn/followers", "following_url": "https://api.github.com/users/hackeryarn/following{/other_user}", "gists_url": "https://api.github.com/users/hackeryarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackeryarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackeryarn/subscriptions", "organizations_url": "https://api.github.com/users/hackeryarn/orgs", "repos_url": "https://api.github.com/users/hackeryarn/repos", "events_url": "https://api.github.com/users/hackeryarn/events{/privacy}", "received_events_url": "https://api.github.com/users/hackeryarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hackeryarn", "id": 827709, "node_id": "MDQ6VXNlcjgyNzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/827709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackeryarn", "html_url": "https://github.com/hackeryarn", "followers_url": "https://api.github.com/users/hackeryarn/followers", "following_url": "https://api.github.com/users/hackeryarn/following{/other_user}", "gists_url": "https://api.github.com/users/hackeryarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackeryarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackeryarn/subscriptions", "organizations_url": "https://api.github.com/users/hackeryarn/orgs", "repos_url": "https://api.github.com/users/hackeryarn/repos", "events_url": "https://api.github.com/users/hackeryarn/events{/privacy}", "received_events_url": "https://api.github.com/users/hackeryarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d561d4c9eb808cbca28fd641934825fdf96fb762", "url": "https://api.github.com/repos/rust-lang/rust/commits/d561d4c9eb808cbca28fd641934825fdf96fb762", "html_url": "https://github.com/rust-lang/rust/commit/d561d4c9eb808cbca28fd641934825fdf96fb762"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "712ada4ec65bb3582b8e9c521590b83546fef058", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f532bfed5e0a80bf145f5db504601dc037367a1/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f532bfed5e0a80bf145f5db504601dc037367a1/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=1f532bfed5e0a80bf145f5db504601dc037367a1", "patch": "@@ -158,6 +158,7 @@ pub enum DepNode<D: Clone + Debug> {\n     ConstIsRvaluePromotableToStatic(D),\n     ImplParent(D),\n     TraitOfItem(D),\n+    IsExportedSymbol(D),\n     IsMirAvailable(D),\n     ItemAttrs(D),\n     FnArgNames(D),\n@@ -275,6 +276,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             FnArgNames(ref d) => op(d).map(FnArgNames),\n             ImplParent(ref d) => op(d).map(ImplParent),\n             TraitOfItem(ref d) => op(d).map(TraitOfItem),\n+            IsExportedSymbol(ref d) => op(d).map(IsExportedSymbol),\n             ItemBodyNestedBodies(ref d) => op(d).map(ItemBodyNestedBodies),\n             ConstIsRvaluePromotableToStatic(ref d) => op(d).map(ConstIsRvaluePromotableToStatic),\n             IsMirAvailable(ref d) => op(d).map(IsMirAvailable),"}, {"sha": "6f0a990ca41268cc8594f0f6f62095ae42eec001", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f532bfed5e0a80bf145f5db504601dc037367a1/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f532bfed5e0a80bf145f5db504601dc037367a1/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=1f532bfed5e0a80bf145f5db504601dc037367a1", "patch": "@@ -197,7 +197,6 @@ pub trait CrateStore {\n     fn is_default_impl(&self, impl_did: DefId) -> bool;\n     fn is_dllimport_foreign_item(&self, def: DefId) -> bool;\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool;\n-    fn is_exported_symbol(&self, def_id: DefId) -> bool;\n \n     // crate metadata\n     fn dylib_dependency_formats(&self, cnum: CrateNum)\n@@ -320,7 +319,6 @@ impl CrateStore for DummyCrateStore {\n     fn is_default_impl(&self, impl_did: DefId) -> bool { bug!(\"is_default_impl\") }\n     fn is_dllimport_foreign_item(&self, id: DefId) -> bool { false }\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool { false }\n-    fn is_exported_symbol(&self, def_id: DefId) -> bool { false }\n \n     // crate metadata\n     fn dylib_dependency_formats(&self, cnum: CrateNum)"}, {"sha": "80783a547bf42c36c85f34b8b479a9512e4e7b8d", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f532bfed5e0a80bf145f5db504601dc037367a1/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f532bfed5e0a80bf145f5db504601dc037367a1/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=1f532bfed5e0a80bf145f5db504601dc037367a1", "patch": "@@ -341,6 +341,12 @@ impl<'tcx> QueryDescription for queries::item_attrs<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::is_exported_symbol<'tcx> {\n+    fn describe(_: TyCtxt, _: DefId) -> String {\n+        bug!(\"is_exported_symbol\")\n+    }\n+}\n+\n impl<'tcx> QueryDescription for queries::fn_arg_names<'tcx> {\n     fn describe(_: TyCtxt, _: DefId) -> String {\n         bug!(\"fn_arg_names\")\n@@ -812,6 +818,7 @@ define_maps! { <'tcx>\n     [] fn_arg_names: FnArgNames(DefId) -> Vec<ast::Name>,\n     [] impl_parent: ImplParent(DefId) -> Option<DefId>,\n     [] trait_of_item: TraitOfItem(DefId) -> Option<DefId>,\n+    [] is_exported_symbol: IsExportedSymbol(DefId) -> bool,\n     [] item_body_nested_bodies: ItemBodyNestedBodies(DefId) -> Rc<BTreeMap<hir::BodyId, hir::Body>>,\n     [] const_is_rvalue_promotable_to_static: ConstIsRvaluePromotableToStatic(DefId) -> bool,\n     [] is_mir_available: IsMirAvailable(DefId) -> bool,"}, {"sha": "d29fa8f0814970b6cb52ff581b8c662c209bb796", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f532bfed5e0a80bf145f5db504601dc037367a1/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f532bfed5e0a80bf145f5db504601dc037367a1/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=1f532bfed5e0a80bf145f5db504601dc037367a1", "patch": "@@ -119,6 +119,7 @@ provide! { <'tcx> tcx, def_id, cdata\n     fn_arg_names => { cdata.get_fn_arg_names(def_id.index) }\n     impl_parent => { cdata.get_parent_impl(def_id.index) }\n     trait_of_item => { cdata.get_trait_of_item(def_id.index) }\n+    is_exported_symbol => { cdata.exported_symbols.contains(&def_id.index) }\n     item_body_nested_bodies => { Rc::new(cdata.item_body_nested_bodies(def_id.index)) }\n     const_is_rvalue_promotable_to_static => {\n         cdata.const_is_rvalue_promotable_to_static(def_id.index)\n@@ -181,10 +182,6 @@ impl CrateStore for cstore::CStore {\n         self.do_is_statically_included_foreign_item(def_id)\n     }\n \n-    fn is_exported_symbol(&self, def_id: DefId) -> bool {\n-        self.get_crate_data(def_id.krate).exported_symbols.contains(&def_id.index)\n-    }\n-\n     fn is_dllimport_foreign_item(&self, def_id: DefId) -> bool {\n         if def_id.krate == LOCAL_CRATE {\n             self.dllimport_foreign_items.borrow().contains(&def_id.index)"}, {"sha": "5f8b79a994a554755bbd0b93cb336c0a5f8985a7", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f532bfed5e0a80bf145f5db504601dc037367a1/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f532bfed5e0a80bf145f5db504601dc037367a1/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=1f532bfed5e0a80bf145f5db504601dc037367a1", "patch": "@@ -652,7 +652,7 @@ fn should_trans_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: &Instan\n         }\n         Some(_) => true,\n         None => {\n-            if tcx.sess.cstore.is_exported_symbol(def_id) ||\n+            if tcx.is_exported_symbol(def_id) ||\n                 tcx.is_foreign_item(def_id)\n             {\n                 // We can link to the item in question, no instance needed"}]}