{"sha": "56250ccbf20babae5b110ddae60598defdd1e328", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MjUwY2NiZjIwYmFiYWU1YjExMGRkYWU2MDU5OGRlZmRkMWUzMjg=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-02-14T16:52:18Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-02-15T12:43:27Z"}, "message": "Extract `--extern` filenames patching code to `forward_patched_extern_arg()`\n\nCo-authored-by: Tristan Dannenberg <dtristan@hotmail.de>", "tree": {"sha": "610f4cb6c432e058cdcce195f2b723e28735b699", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/610f4cb6c432e058cdcce195f2b723e28735b699"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56250ccbf20babae5b110ddae60598defdd1e328", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYCpsbxUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLiY6QD/cmDTz1/FEHKipmAK7/xWZTUVTa3c\nD7W6TCMhsaqT3FoA/2H7/ykgHTQQTKAX1ED7d4768xRYAAW2vqOt2FCTOIkM\n=XDgD\n-----END PGP SIGNATURE-----", "payload": "tree 610f4cb6c432e058cdcce195f2b723e28735b699\nparent c3f7069a0f755b154cf9c62b94154570695e7813\nauthor hyd-dev <yd-huang@outlook.com> 1613321538 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1613393007 +0800\n\nExtract `--extern` filenames patching code to `forward_patched_extern_arg()`\n\nCo-authored-by: Tristan Dannenberg <dtristan@hotmail.de>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56250ccbf20babae5b110ddae60598defdd1e328", "html_url": "https://github.com/rust-lang/rust/commit/56250ccbf20babae5b110ddae60598defdd1e328", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56250ccbf20babae5b110ddae60598defdd1e328/comments", "author": null, "committer": null, "parents": [{"sha": "c3f7069a0f755b154cf9c62b94154570695e7813", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f7069a0f755b154cf9c62b94154570695e7813", "html_url": "https://github.com/rust-lang/rust/commit/c3f7069a0f755b154cf9c62b94154570695e7813"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "7edd46c24ba4d6798dcdf2bb465c5ec78c2f99b8", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/56250ccbf20babae5b110ddae60598defdd1e328/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56250ccbf20babae5b110ddae60598defdd1e328/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=56250ccbf20babae5b110ddae60598defdd1e328", "patch": "@@ -143,6 +143,18 @@ fn get_arg_flag_value(name: &str) -> Option<String> {\n     ArgFlagValueIter::new(name).next()\n }\n \n+fn forward_patched_extern_arg(args: &mut impl Iterator<Item = String>, cmd: &mut Command) {\n+    cmd.arg(\"--extern\"); // always forward flag, but adjust filename:\n+    let path = args.next().expect(\"`--extern` should be followed by a filename\");\n+    if let Some(lib) = path.strip_suffix(\".rlib\") {\n+        // If this is an rlib, make it an rmeta.\n+        cmd.arg(format!(\"{}.rmeta\", lib));\n+    } else {\n+        // Some other extern file (e.g. a `.so`). Forward unchanged.\n+        cmd.arg(path);\n+    }\n+}\n+\n /// Returns the path to the `miri` binary\n fn find_miri() -> PathBuf {\n     if let Some(path) = env::var_os(\"MIRI\") {\n@@ -734,21 +746,11 @@ fn phase_cargo_runner(binary: &Path, binary_args: env::Args) {\n     // but when we run here, cargo does not interpret the JSON any more. `--json`\n     // then also nees to be dropped.\n     let mut args = info.args.into_iter();\n-    let extern_flag = \"--extern\";\n     let error_format_flag = \"--error-format\";\n     let json_flag = \"--json\";\n     while let Some(arg) = args.next() {\n-        if arg == extern_flag {\n-            cmd.arg(extern_flag); // always forward flag, but adjust filename\n-            // `--extern` is always passed as a separate argument by cargo.\n-            let next_arg = args.next().expect(\"`--extern` should be followed by a filename\");\n-            if let Some(next_lib) = next_arg.strip_suffix(\".rlib\") {\n-                // If this is an rlib, make it an rmeta.\n-                cmd.arg(format!(\"{}.rmeta\", next_lib));\n-            } else {\n-                // Some other extern file (e.g., a `.so`). Forward unchanged.\n-                cmd.arg(next_arg);\n-            }\n+        if arg == \"--extern\" {\n+            forward_patched_extern_arg(&mut args, &mut cmd);\n         } else if arg.starts_with(error_format_flag) {\n             let suffix = &arg[error_format_flag.len()..];\n             assert!(suffix.starts_with('='));"}]}