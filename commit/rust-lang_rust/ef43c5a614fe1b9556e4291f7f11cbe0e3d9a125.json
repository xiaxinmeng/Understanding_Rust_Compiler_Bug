{"sha": "ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNDNjNWE2MTRmZTFiOTU1NmU0MjkxZjdmMTFjYmUwZTNkOWExMjU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-24T18:18:47Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-28T17:44:45Z"}, "message": "Use a 'flags' parameter instead of 'version'", "tree": {"sha": "d261a835793d180d56acb51f6723227ea7b80d78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d261a835793d180d56acb51f6723227ea7b80d78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl9yIQ0ACgkQtAh+UQ6Y\nsWSPuA//dNPyAl/XdpHbfPxLnhDXe+Dvz24mHVwIwUyitdfyBtPaKIfTNC6jyrZp\na8STo9WfdEulbBeYvMrIM0kTMTFyTng0CibLeKmQ6Ri5HUrrC8DJVAgNpHyGNFTZ\nTOysVLKWCR76eHvcnvQeMpSORbYc1JE+iZSGiRQDUpSid8Iv80sOaP82KLLlEdGt\n1xqL0+i9R66ClCQ1kkKn4Vx96dJi8XTr7c1GTVCxO/3WCsJ77PRzDsbeEiHJt41/\nfUTLHKbuUjJrUaC3DG+h13amUUqVKCzjfkkLVPdh+AlzSF+sPhH4A07M43BzP4Yr\nJNeHu+KN+07k27DAJA+2yT0MmVUKzxWieXDXP4vcJgI2trn1wLnKPH+8DhH8rF91\n6ptI9dGrTvGLN+Kq2wlaPZnm1sixUB+sPHQfZ0YCwNP9DCZF22n6r9iEmg/c5IZd\nUzAwANoxKCqx3OI1aWV4Gy+chN5/qUeYA2wnRP/GolaV9BdSSJ81fL9O+ny86fdG\n97mTXENpu0qf8XXjNdwTeY+j9y7G7FEIfeh/vhyQJwinZPsHsyle8In/3wjHWziW\nsZ4Rr/d4U4MQ8lX5eBjoLKiAH54ogSTBut1awG2lnxMCcn4XzjeBfYFQ4ACj7f8b\nmnYCGViQeDlgfXtuT8BHUWJk1skFghjpxWWti894/Tg/WsXNcWA=\n=YxFx\n-----END PGP SIGNATURE-----", "payload": "tree d261a835793d180d56acb51f6723227ea7b80d78\nparent ae18659d52821d95bf028f424b57f87a3465bf57\nauthor Aaron Hill <aa1ronham@gmail.com> 1600971527 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1601315085 -0400\n\nUse a 'flags' parameter instead of 'version'\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125", "html_url": "https://github.com/rust-lang/rust/commit/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae18659d52821d95bf028f424b57f87a3465bf57", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae18659d52821d95bf028f424b57f87a3465bf57", "html_url": "https://github.com/rust-lang/rust/commit/ae18659d52821d95bf028f424b57f87a3465bf57"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "55d3bef727f326b79c727cad622aadb22f5cb0c8", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125", "patch": "@@ -290,7 +290,7 @@ extern \"Rust\" {\n     ///\n     /// The fields must be declared in exactly the same order as they appear in `MiriFrame` above.\n     /// This function can be called on any thread (not just the one which obtained `frame`)\n-    fn miri_resolve_frame(version: u8, frame: *mut ()) -> MiriFrame;\n+    fn miri_resolve_frame(frame: *mut (), flags: u64) -> MiriFrame;\n \n     /// Miri-provided extern function to begin unwinding with the given payload.\n     ///"}, {"sha": "b1a02a8eb65b84513b7335441e60aed45e4dfdde", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125", "patch": "@@ -251,11 +251,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Resolves a Miri backtrace frame. See the README for details.\n             \"miri_resolve_frame\" => {\n                 let tcx = this.tcx;\n-                let &[version, ptr] = check_arg_count(args)?;\n+                let &[ptr, flags] = check_arg_count(args)?;\n \n-                let version = this.read_scalar(version)?.to_u8()?;\n-                if version != 0 {\n-                    throw_ub_format!(\"Unknown `miri_resolve_frame` version {}\", version);\n+                let flags = this.read_scalar(flags)?.to_u64()?;\n+                if flags != 0 {\n+                    throw_ub_format!(\"Unknown `miri_resolve_frame` flags {}\", flags);\n                 }\n \n                 let ptr = match this.read_scalar(ptr)?.check_init()? {"}, {"sha": "c55a1c6d38085fe73720f6f222e889711caa8279", "filename": "tests/compile-fail/backtrace/bad-backtrace-decl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-decl.rs?ref=ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125", "patch": "@@ -1,13 +1,13 @@\n extern \"Rust\" {\n     fn miri_get_backtrace() -> Box<[*mut ()]>;\n-    fn miri_resolve_frame(version: u8, ptr: *mut ());\n+    fn miri_resolve_frame(ptr: *mut (), flags: u64);\n }\n \n fn main() {\n     let frames = unsafe { miri_get_backtrace() };\n     for frame in frames.into_iter() {\n         unsafe {\n-            miri_resolve_frame(0, *frame); //~ ERROR Undefined Behavior: Bad declaration of miri_resolve_frame - should return a struct with 4 fields\n+            miri_resolve_frame(*frame, 0); //~ ERROR Undefined Behavior: Bad declaration of miri_resolve_frame - should return a struct with 4 fields\n         }\n     }\n }"}, {"sha": "3f672eb2dcadcd32c284b80b3fddc34bd4b98c29", "filename": "tests/compile-fail/backtrace/bad-backtrace-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-ptr.rs?ref=ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125", "patch": "@@ -1,9 +1,9 @@\n extern \"Rust\" {\n-    fn miri_resolve_frame(version: u8, ptr: *mut ());\n+    fn miri_resolve_frame(ptr: *mut (), flags: u64);\n }\n \n fn main() {\n     unsafe {\n-        miri_resolve_frame(0, 0 as *mut _); //~ ERROR Undefined Behavior: Expected a pointer\n+        miri_resolve_frame(0 as *mut _, 0); //~ ERROR Undefined Behavior: Expected a pointer\n     }\n }"}, {"sha": "d6743ae8fff9327fee278641126ecea939980861", "filename": "tests/compile-fail/backtrace/bad-backtrace-version.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-version.rs?ref=ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125", "patch": "@@ -1,9 +1,9 @@\n extern \"Rust\" {\n-    fn miri_resolve_frame(version: u8, ptr: *mut ());\n+    fn miri_resolve_frame(ptr: *mut (), flags: u64);\n }\n \n fn main() {\n     unsafe {\n-        miri_resolve_frame(1, 0 as *mut _); //~ ERROR  Undefined Behavior: Unknown `miri_resolve_frame` version 1\n+        miri_resolve_frame(0 as *mut _, 1); //~ ERROR  Undefined Behavior: Unknown `miri_resolve_frame` flags 1\n     }\n }"}, {"sha": "231b718cd3eb949460f11a77f21c1b22723e0b6b", "filename": "tests/run-pass/backtrace-api.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125/tests%2Frun-pass%2Fbacktrace-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125/tests%2Frun-pass%2Fbacktrace-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-api.rs?ref=ef43c5a614fe1b9556e4291f7f11cbe0e3d9a125", "patch": "@@ -3,7 +3,7 @@\n \n extern \"Rust\" {\n     fn miri_get_backtrace() -> Box<[*mut ()]>;\n-    fn miri_resolve_frame(version: u8, ptr: *mut ()) -> MiriFrame;\n+    fn miri_resolve_frame(ptr: *mut (), flags: u64) -> MiriFrame;\n }\n \n #[derive(Debug)]\n@@ -17,7 +17,7 @@ struct MiriFrame {\n fn main() {\n     let frames = unsafe { miri_get_backtrace() };\n     for frame in frames.into_iter() {\n-        let miri_frame = unsafe { miri_resolve_frame(0, *frame) };\n+        let miri_frame = unsafe { miri_resolve_frame(*frame, 0) };\n         let name = String::from_utf8(miri_frame.name.into()).unwrap();\n         let filename = String::from_utf8(miri_frame.filename.into()).unwrap();\n         eprintln!(\"{}:{}:{} ({})\", filename, miri_frame.lineno, miri_frame.colno, name);"}]}