{"sha": "9e6320f1017a5af43b8f1726ff68c8c494d3e8bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNjMyMGYxMDE3YTVhZjQzYjhmMTcyNmZmNjhjOGM0OTRkM2U4YmM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-04T16:34:13Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-04T16:34:13Z"}, "message": "Move `convert_path_separator` to trait and use it in `readlink`", "tree": {"sha": "cd0c8a81cb4442c7abfb27f0f5b5aa84cea8479d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd0c8a81cb4442c7abfb27f0f5b5aa84cea8479d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e6320f1017a5af43b8f1726ff68c8c494d3e8bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl95+ZUACgkQtAh+UQ6Y\nsWQGvw//a/Wf1efYuNxqadONNHZzu/BNRxKb72ov7sGrpAw92JWO8/4NuBwwx0DM\nQIFH97p/bFBGB4vA6+MGP91d6u6o1dwUKmpsdw2WsDHAoHRx9/HahGORoe1xS5vG\nq2Nq8Kwuxvk2cGjA34hIdDk5l5gFUjdCX836uJ4sIkiFVRmzZvUO7QaWOXS3FB3k\ntA/CJz9EKN5XsD93Q98//F1G2QjEUUmK8AoF+s1D35XN2vLrigdSBnZNCYjm/Cp1\nDjDxbgtxz9iSqV4cOFC8sLkxi3Ul9fLg7HQxnTxpB+YohrHFVczXCIEgl16Qs7L0\n/xx/QLAg8isqdVea55n1SDni2gFmhOrrIJLDw0s4orSfTKoKO226WFvNCDNLi+4j\nUjMSV6TloQUhRJrb8LR+KED9jYKEKvYkZJd3kdhDdQJkxXoeXhXkJ0yR3MB2SmzV\njcb86qo3zg5jlzZRmqFfW/NTNcI7A/D7aglvrPj3ptg1XUHOaVY/hTn43+jc1soY\nn+lZGDyH0adYnsssOUyT57IU8McA5ibpdP4x6XHBm1Hy6V8oDaDr/e93V5K0Elrn\nSPSvQyQt3aBVN+96Fam/rWUZChv9Iqde9wrfLnz+ZfRbeoLMQSDM8iAhoGSrXa+K\nCFQEhBBUSsgMyk8l4Qw1Q/wkD4EMEbRltLGOOoI+ExaT9Ggrfh0=\n=KWS3\n-----END PGP SIGNATURE-----", "payload": "tree cd0c8a81cb4442c7abfb27f0f5b5aa84cea8479d\nparent bbba87ce5450eb0145e4aec0d50b546effc054ff\nauthor Aaron Hill <aa1ronham@gmail.com> 1601829253 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1601829253 -0400\n\nMove `convert_path_separator` to trait and use it in `readlink`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6320f1017a5af43b8f1726ff68c8c494d3e8bc", "html_url": "https://github.com/rust-lang/rust/commit/9e6320f1017a5af43b8f1726ff68c8c494d3e8bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e6320f1017a5af43b8f1726ff68c8c494d3e8bc/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbba87ce5450eb0145e4aec0d50b546effc054ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbba87ce5450eb0145e4aec0d50b546effc054ff", "html_url": "https://github.com/rust-lang/rust/commit/bbba87ce5450eb0145e4aec0d50b546effc054ff"}], "stats": {"total": 95, "additions": 49, "deletions": 46}, "files": [{"sha": "df3c7a5ad99c430090c152a935d31facd59a3212", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 47, "deletions": 46, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/9e6320f1017a5af43b8f1726ff68c8c494d3e8bc/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6320f1017a5af43b8f1726ff68c8c494d3e8bc/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=9e6320f1017a5af43b8f1726ff68c8c494d3e8bc", "patch": "@@ -14,52 +14,11 @@ use rustc_target::abi::LayoutOf;\n use crate::*;\n \n /// Represent how path separator conversion should be done.\n-enum Pathconversion {\n+pub enum Pathconversion {\n     HostToTarget,\n     TargetToHost,\n }\n \n-/// Perform path separator conversion if needed.\n-fn convert_path_separator<'a>(\n-    os_str: Cow<'a, OsStr>,\n-    target_os: &str,\n-    direction: Pathconversion,\n-) -> Cow<'a, OsStr> {\n-    #[cfg(windows)]\n-    return if target_os == \"windows\" {\n-        // Windows-on-Windows, all fine.\n-        os_str\n-    } else {\n-        // Unix target, Windows host.\n-        let (from, to) = match direction {\n-            Pathconversion::HostToTarget => ('\\\\', '/'),\n-            Pathconversion::TargetToHost => ('/', '\\\\'),\n-        };\n-        let converted = os_str\n-            .encode_wide()\n-            .map(|wchar| if wchar == from as u16 { to as u16 } else { wchar })\n-            .collect::<Vec<_>>();\n-        Cow::Owned(OsString::from_wide(&converted))\n-    };\n-    #[cfg(unix)]\n-    return if target_os == \"windows\" {\n-        // Windows target, Unix host.\n-        let (from, to) = match direction {\n-            Pathconversion::HostToTarget => ('/', '\\\\'),\n-            Pathconversion::TargetToHost => ('\\\\', '/'),\n-        };\n-        let converted = os_str\n-            .as_bytes()\n-            .iter()\n-            .map(|&wchar| if wchar == from as u8 { to as u8 } else { wchar })\n-            .collect::<Vec<_>>();\n-        Cow::Owned(OsString::from_vec(converted))\n-    } else {\n-        // Unix-on-Unix, all is fine.\n-        os_str\n-    };\n-}\n-\n #[cfg(unix)]\n pub fn os_str_to_bytes<'a, 'tcx>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n     Ok(os_str.as_bytes())\n@@ -229,7 +188,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let os_str = this.read_os_str_from_c_str(scalar)?;\n \n-        Ok(match convert_path_separator(Cow::Borrowed(os_str), &this.tcx.sess.target.target.target_os, Pathconversion::TargetToHost) {\n+        Ok(match this.convert_path_separator(Cow::Borrowed(os_str), Pathconversion::TargetToHost) {\n             Cow::Borrowed(x) => Cow::Borrowed(Path::new(x)),\n             Cow::Owned(y) => Cow::Owned(PathBuf::from(y)),\n         })\n@@ -240,7 +199,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let os_str = this.read_os_str_from_wide_str(scalar)?;\n \n-        Ok(convert_path_separator(Cow::Owned(os_str), &this.tcx.sess.target.target.target_os, Pathconversion::TargetToHost).into_owned().into())\n+        Ok(this.convert_path_separator(Cow::Owned(os_str), Pathconversion::TargetToHost).into_owned().into())\n     }\n \n     /// Write a Path to the machine memory (as a null-terminated sequence of bytes),\n@@ -252,7 +211,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = convert_path_separator(Cow::Borrowed(path.as_os_str()), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n+        let os_str = this.convert_path_separator(Cow::Borrowed(path.as_os_str()), Pathconversion::HostToTarget);\n         this.write_os_str_to_c_str(&os_str, scalar, size)\n     }\n \n@@ -265,8 +224,50 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = convert_path_separator(Cow::Borrowed(path.as_os_str()), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n+        let os_str = this.convert_path_separator(Cow::Borrowed(path.as_os_str()), Pathconversion::HostToTarget);\n         this.write_os_str_to_wide_str(&os_str, scalar, size)\n     }\n+\n+    fn convert_path_separator<'a>(\n+        &self,\n+        os_str: Cow<'a, OsStr>,\n+        direction: Pathconversion,\n+    ) -> Cow<'a, OsStr> {\n+        let this = self.eval_context_ref();\n+        let target_os = &this.tcx.sess.target.target.target_os;\n+        #[cfg(windows)]\n+        return if target_os == \"windows\" {\n+            // Windows-on-Windows, all fine.\n+            os_str\n+        } else {\n+            // Unix target, Windows host.\n+            let (from, to) = match direction {\n+                Pathconversion::HostToTarget => ('\\\\', '/'),\n+                Pathconversion::TargetToHost => ('/', '\\\\'),\n+            };\n+            let converted = os_str\n+                .encode_wide()\n+                .map(|wchar| if wchar == from as u16 { to as u16 } else { wchar })\n+                .collect::<Vec<_>>();\n+            Cow::Owned(OsString::from_wide(&converted))\n+        };\n+        #[cfg(unix)]\n+        return if target_os == \"windows\" {\n+            // Windows target, Unix host.\n+            let (from, to) = match direction {\n+                Pathconversion::HostToTarget => ('/', '\\\\'),\n+                Pathconversion::TargetToHost => ('\\\\', '/'),\n+            };\n+            let converted = os_str\n+                .as_bytes()\n+                .iter()\n+                .map(|&wchar| if wchar == from as u8 { to as u8 } else { wchar })\n+                .collect::<Vec<_>>();\n+            Cow::Owned(OsString::from_vec(converted))\n+        } else {\n+            // Unix-on-Unix, all is fine.\n+            os_str\n+        };\n+    }\n }\n "}, {"sha": "e84731a5ef735a3cf0ad644e5209f59d2c791940", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e6320f1017a5af43b8f1726ff68c8c494d3e8bc/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6320f1017a5af43b8f1726ff68c8c494d3e8bc/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=9e6320f1017a5af43b8f1726ff68c8c494d3e8bc", "patch": "@@ -4,6 +4,7 @@ use std::fs::{read_dir, remove_dir, remove_file, rename, DirBuilder, File, FileT\n use std::io::{self, Read, Seek, SeekFrom, Write};\n use std::path::Path;\n use std::time::SystemTime;\n+use std::borrow::Cow;\n \n use log::trace;\n \n@@ -1371,6 +1372,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let result = std::fs::read_link(pathname);\n         match result {\n             Ok(resolved) => {\n+                let resolved = this.convert_path_separator(Cow::Borrowed(resolved.as_ref()), crate::shims::os_str::Pathconversion::HostToTarget);\n                 let mut path_bytes = crate::shims::os_str::os_str_to_bytes(resolved.as_ref())?;\n                 let bufsize: usize = bufsize.try_into().unwrap();\n                 if path_bytes.len() > bufsize {"}]}