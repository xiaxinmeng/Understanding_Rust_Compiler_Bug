{"sha": "a2820257fc9f8e39d138dde7782e1094df0b3536", "node_id": "C_kwDOAAsO6NoAKGEyODIwMjU3ZmM5ZjhlMzlkMTM4ZGRlNzc4MmUxMDk0ZGYwYjM1MzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-21T14:54:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-21T14:54:02Z"}, "message": "Rollup merge of #100697 - eholk:doc-comment-update, r=compiler-errors\n\n Minor syntax and formatting update to doc comment on `find_vtable_types_for_unsizing`\n\nI noticed the code examples on this function weren't formatted as code, and also the that the syntax for trait objects was out of date (or just incorrect). This should bring it up to date.", "tree": {"sha": "896ab374c763425e2abc57afaa6a30045ad8fbaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/896ab374c763425e2abc57afaa6a30045ad8fbaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2820257fc9f8e39d138dde7782e1094df0b3536", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjAkcKCRBK7hj4Ov3rIwAAZbAIAJls5RhvQDXRhzS2wNBgEA7H\nRdSRXjhkQQYM2pmxorq+pvah6lprPUjr4tAwIqGpA07WJ94S6Zdo/i5PAxsQevle\nIoa7dpHpJFuVY/MzCp0QJ51S1hX8jVsskIpFNDqmtViBKGvW9zaGRIrLNHpPNpO6\nqQ4osDJVNp5iGEkr5dpOW2nCjLIJrqA1zjlL+lQGwSr8RePBInH130BOaHtPB51s\nIxwpXWM1Ts0Bhb6MbP+ETi9c+S6c/Ws3/pqfkldF58xoNinrgZ4k/geZlEqnOmUm\nwS7C8X4I71MrZhvg2OaI5Qf/Hg74Go6GSmhpvxLDP2Van4HeKKgRfVFcNw7wzfc=\n=gGXR\n-----END PGP SIGNATURE-----\n", "payload": "tree 896ab374c763425e2abc57afaa6a30045ad8fbaf\nparent 1cdcf508bba11c91f48a3f7ca7870a6c1e575c6f\nparent 8b7b1f773a4d97b9567eb5998b5e59a718ece9d7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661093642 +0200\ncommitter GitHub <noreply@github.com> 1661093642 +0200\n\nRollup merge of #100697 - eholk:doc-comment-update, r=compiler-errors\n\n Minor syntax and formatting update to doc comment on `find_vtable_types_for_unsizing`\n\nI noticed the code examples on this function weren't formatted as code, and also the that the syntax for trait objects was out of date (or just incorrect). This should bring it up to date.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2820257fc9f8e39d138dde7782e1094df0b3536", "html_url": "https://github.com/rust-lang/rust/commit/a2820257fc9f8e39d138dde7782e1094df0b3536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2820257fc9f8e39d138dde7782e1094df0b3536/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cdcf508bba11c91f48a3f7ca7870a6c1e575c6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cdcf508bba11c91f48a3f7ca7870a6c1e575c6f", "html_url": "https://github.com/rust-lang/rust/commit/1cdcf508bba11c91f48a3f7ca7870a6c1e575c6f"}, {"sha": "8b7b1f773a4d97b9567eb5998b5e59a718ece9d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7b1f773a4d97b9567eb5998b5e59a718ece9d7", "html_url": "https://github.com/rust-lang/rust/commit/8b7b1f773a4d97b9567eb5998b5e59a718ece9d7"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "82ef16a7f72fc526f5c9bbf3319e8cdd3fdb7ccc", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a2820257fc9f8e39d138dde7782e1094df0b3536/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2820257fc9f8e39d138dde7782e1094df0b3536/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=a2820257fc9f8e39d138dde7782e1094df0b3536", "patch": "@@ -128,7 +128,7 @@\n //! #### Unsizing Casts\n //! A subtle way of introducing neighbor edges is by casting to a trait object.\n //! Since the resulting fat-pointer contains a reference to a vtable, we need to\n-//! instantiate all object-save methods of the trait, as we need to store\n+//! instantiate all object-safe methods of the trait, as we need to store\n //! pointers to these functions even if they never get called anywhere. This can\n //! be seen as a special case of taking a function reference.\n //!\n@@ -1044,10 +1044,12 @@ fn should_codegen_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx>) ->\n /// them.\n ///\n /// For example, the source type might be `&SomeStruct` and the target type\n-/// might be `&SomeTrait` in a cast like:\n+/// might be `&dyn SomeTrait` in a cast like:\n ///\n+/// ```rust,ignore (not real code)\n /// let src: &SomeStruct = ...;\n-/// let target = src as &SomeTrait;\n+/// let target = src as &dyn SomeTrait;\n+/// ```\n ///\n /// Then the output of this function would be (SomeStruct, SomeTrait) since for\n /// constructing the `target` fat-pointer we need the vtable for that pair.\n@@ -1068,8 +1070,10 @@ fn should_codegen_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx>) ->\n /// for the pair of `T` (which is a trait) and the concrete type that `T` was\n /// originally coerced from:\n ///\n+/// ```rust,ignore (not real code)\n /// let src: &ComplexStruct<SomeStruct> = ...;\n-/// let target = src as &ComplexStruct<SomeTrait>;\n+/// let target = src as &ComplexStruct<dyn SomeTrait>;\n+/// ```\n ///\n /// Again, we want this `find_vtable_types_for_unsizing()` to provide the pair\n /// `(SomeStruct, SomeTrait)`."}]}