{"sha": "567557f630693d47fd21151ff1fdbc430e330a13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NzU1N2Y2MzA2OTNkNDdmZDIxMTUxZmYxZmRiYzQzMGUzMzBhMTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-12T02:14:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-12T02:14:47Z"}, "message": "Auto merge of #54924 - RalfJung:use-maybe-uninit2, r=cramertj\n\nUse MaybeUninit in liballoc\n\nAll code by @japaric. This is a re-submission of a part of https://github.com/rust-lang/rust/pull/53508 that hopefully does not regress performance.", "tree": {"sha": "4b9bd3b1eb69b3c10dec3f329fc9bdb3b2778cb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b9bd3b1eb69b3c10dec3f329fc9bdb3b2778cb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/567557f630693d47fd21151ff1fdbc430e330a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/567557f630693d47fd21151ff1fdbc430e330a13", "html_url": "https://github.com/rust-lang/rust/commit/567557f630693d47fd21151ff1fdbc430e330a13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/567557f630693d47fd21151ff1fdbc430e330a13/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77af314083e5acabf9ba5335e47271f35eef2e99", "url": "https://api.github.com/repos/rust-lang/rust/commits/77af314083e5acabf9ba5335e47271f35eef2e99", "html_url": "https://github.com/rust-lang/rust/commit/77af314083e5acabf9ba5335e47271f35eef2e99"}, {"sha": "e4434be6b7caa1261fa1500d321c20a59f9953b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4434be6b7caa1261fa1500d321c20a59f9953b1", "html_url": "https://github.com/rust-lang/rust/commit/e4434be6b7caa1261fa1500d321c20a59f9953b1"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "b1252f386df364dcd18708dc5bc6139fe465e0dd", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/567557f630693d47fd21151ff1fdbc430e330a13/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/567557f630693d47fd21151ff1fdbc430e330a13/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=567557f630693d47fd21151ff1fdbc430e330a13", "patch": "@@ -322,8 +322,11 @@ def to_string(self):\n     def children(self):\n         (length, data_ptr) = \\\n             rustpp.extract_length_and_ptr_from_std_btreeset(self.__val)\n-        val = GdbValue(data_ptr.get_wrapped_value().dereference()).get_child_at_index(3)\n-        gdb_ptr = val.get_wrapped_value()\n+        leaf_node = GdbValue(data_ptr.get_wrapped_value().dereference())\n+        maybe_uninit_keys = leaf_node.get_child_at_index(3)\n+        manually_drop_keys = maybe_uninit_keys.get_child_at_index(1)\n+        keys = manually_drop_keys.get_child_at_index(0)\n+        gdb_ptr = keys.get_wrapped_value()\n         for index in xrange(length):\n             yield (str(index), gdb_ptr[index])\n \n@@ -345,9 +348,14 @@ def to_string(self):\n     def children(self):\n         (length, data_ptr) = \\\n             rustpp.extract_length_and_ptr_from_std_btreemap(self.__val)\n-        keys = GdbValue(data_ptr.get_wrapped_value().dereference()).get_child_at_index(3)\n+        leaf_node = GdbValue(data_ptr.get_wrapped_value().dereference())\n+        maybe_uninit_keys = leaf_node.get_child_at_index(3)\n+        manually_drop_keys = maybe_uninit_keys.get_child_at_index(1)\n+        keys = manually_drop_keys.get_child_at_index(0)\n         keys_ptr = keys.get_wrapped_value()\n-        vals = GdbValue(data_ptr.get_wrapped_value().dereference()).get_child_at_index(4)\n+        maybe_uninit_vals = leaf_node.get_child_at_index(4)\n+        manually_drop_vals = maybe_uninit_vals.get_child_at_index(1)\n+        vals = manually_drop_vals.get_child_at_index(0)\n         vals_ptr = vals.get_wrapped_value()\n         for index in xrange(length):\n             yield (str(index), keys_ptr[index])"}, {"sha": "deca9591fbd5c499210a17f6ed67990eda11fae3", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/567557f630693d47fd21151ff1fdbc430e330a13/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567557f630693d47fd21151ff1fdbc430e330a13/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=567557f630693d47fd21151ff1fdbc430e330a13", "patch": "@@ -42,7 +42,7 @@\n //   This implies that even an empty internal node has at least one edge.\n \n use core::marker::PhantomData;\n-use core::mem;\n+use core::mem::{self, MaybeUninit};\n use core::ptr::{self, Unique, NonNull};\n use core::slice;\n \n@@ -58,9 +58,6 @@ pub const CAPACITY: usize = 2 * B - 1;\n /// these should always be put behind pointers, and specifically behind `BoxedNode` in the owned\n /// case.\n ///\n-/// See also rust-lang/rfcs#197, which would make this structure significantly more safe by\n-/// avoiding accidentally dropping unused and uninitialized keys and values.\n-///\n /// We put the metadata first so that its position is the same for every `K` and `V`, in order\n /// to statically allocate a single dummy node to avoid allocations. This struct is `repr(C)` to\n /// prevent them from being reordered.\n@@ -73,7 +70,7 @@ struct LeafNode<K, V> {\n     /// This node's index into the parent node's `edges` array.\n     /// `*node.parent.edges[node.parent_idx]` should be the same thing as `node`.\n     /// This is only guaranteed to be initialized when `parent` is nonnull.\n-    parent_idx: u16,\n+    parent_idx: MaybeUninit<u16>,\n \n     /// The number of keys and values this node stores.\n     ///\n@@ -83,8 +80,8 @@ struct LeafNode<K, V> {\n \n     /// The arrays storing the actual data of the node. Only the first `len` elements of each\n     /// array are initialized and valid.\n-    keys: [K; CAPACITY],\n-    vals: [V; CAPACITY],\n+    keys: MaybeUninit<[K; CAPACITY]>,\n+    vals: MaybeUninit<[V; CAPACITY]>,\n }\n \n impl<K, V> LeafNode<K, V> {\n@@ -94,10 +91,10 @@ impl<K, V> LeafNode<K, V> {\n         LeafNode {\n             // As a general policy, we leave fields uninitialized if they can be, as this should\n             // be both slightly faster and easier to track in Valgrind.\n-            keys: mem::uninitialized(),\n-            vals: mem::uninitialized(),\n+            keys: MaybeUninit::uninitialized(),\n+            vals: MaybeUninit::uninitialized(),\n             parent: ptr::null(),\n-            parent_idx: mem::uninitialized(),\n+            parent_idx: MaybeUninit::uninitialized(),\n             len: 0\n         }\n     }\n@@ -115,10 +112,10 @@ unsafe impl Sync for LeafNode<(), ()> {}\n // ever take a pointer past the first key.\n static EMPTY_ROOT_NODE: LeafNode<(), ()> = LeafNode {\n     parent: ptr::null(),\n-    parent_idx: 0,\n+    parent_idx: MaybeUninit::uninitialized(),\n     len: 0,\n-    keys: [(); CAPACITY],\n-    vals: [(); CAPACITY],\n+    keys: MaybeUninit::uninitialized(),\n+    vals: MaybeUninit::uninitialized(),\n };\n \n /// The underlying representation of internal nodes. As with `LeafNode`s, these should be hidden\n@@ -430,7 +427,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n                     root: self.root,\n                     _marker: PhantomData\n                 },\n-                idx: self.as_leaf().parent_idx as usize,\n+                idx: unsafe { usize::from(*self.as_leaf().parent_idx.get_ref()) },\n                 _marker: PhantomData\n             })\n         } else {\n@@ -567,7 +564,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n             // the node, which is allowed by LLVM.\n             unsafe {\n                 slice::from_raw_parts(\n-                    self.as_leaf().keys.as_ptr(),\n+                    self.as_leaf().keys.as_ptr() as *const K,\n                     self.len()\n                 )\n             }\n@@ -578,7 +575,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n         debug_assert!(!self.is_shared_root());\n         unsafe {\n             slice::from_raw_parts(\n-                self.as_leaf().vals.as_ptr(),\n+                self.as_leaf().vals.as_ptr() as *const V,\n                 self.len()\n             )\n         }\n@@ -605,7 +602,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         } else {\n             unsafe {\n                 slice::from_raw_parts_mut(\n-                    &mut self.as_leaf_mut().keys as *mut [K] as *mut K,\n+                    self.as_leaf_mut().keys.get_mut() as *mut [K] as *mut K,\n                     self.len()\n                 )\n             }\n@@ -616,7 +613,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         debug_assert!(!self.is_shared_root());\n         unsafe {\n             slice::from_raw_parts_mut(\n-                &mut self.as_leaf_mut().vals as *mut [V] as *mut V,\n+                self.as_leaf_mut().vals.get_mut() as *mut [V] as *mut V,\n                 self.len()\n             )\n         }\n@@ -1013,7 +1010,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n         let ptr = self.node.as_internal_mut() as *mut _;\n         let mut child = self.descend();\n         child.as_leaf_mut().parent = ptr;\n-        child.as_leaf_mut().parent_idx = idx;\n+        child.as_leaf_mut().parent_idx.set(idx);\n     }\n \n     /// Unsafely asserts to the compiler some static information about whether the underlying\n@@ -1152,12 +1149,12 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV>\n \n             ptr::copy_nonoverlapping(\n                 self.node.keys().as_ptr().add(self.idx + 1),\n-                new_node.keys.as_mut_ptr(),\n+                new_node.keys.as_mut_ptr() as *mut K,\n                 new_len\n             );\n             ptr::copy_nonoverlapping(\n                 self.node.vals().as_ptr().add(self.idx + 1),\n-                new_node.vals.as_mut_ptr(),\n+                new_node.vals.as_mut_ptr() as *mut V,\n                 new_len\n             );\n \n@@ -1210,12 +1207,12 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n \n             ptr::copy_nonoverlapping(\n                 self.node.keys().as_ptr().add(self.idx + 1),\n-                new_node.data.keys.as_mut_ptr(),\n+                new_node.data.keys.as_mut_ptr() as *mut K,\n                 new_len\n             );\n             ptr::copy_nonoverlapping(\n                 self.node.vals().as_ptr().add(self.idx + 1),\n-                new_node.data.vals.as_mut_ptr(),\n+                new_node.data.vals.as_mut_ptr() as *mut V,\n                 new_len\n             );\n             ptr::copy_nonoverlapping("}, {"sha": "987572e6b74a9c2dbb803b60aafb2e7f503798bd", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/567557f630693d47fd21151ff1fdbc430e330a13/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567557f630693d47fd21151ff1fdbc430e330a13/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=567557f630693d47fd21151ff1fdbc430e330a13", "patch": "@@ -119,6 +119,7 @@\n #![feature(rustc_const_unstable)]\n #![feature(const_vec_new)]\n #![feature(slice_partition_dedup)]\n+#![feature(maybe_uninit)]\n \n // Allow testing this library\n "}]}