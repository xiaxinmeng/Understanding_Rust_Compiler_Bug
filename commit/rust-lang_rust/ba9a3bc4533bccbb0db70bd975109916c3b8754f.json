{"sha": "ba9a3bc4533bccbb0db70bd975109916c3b8754f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhOWEzYmM0NTMzYmNjYmIwZGI3MGJkOTc1MTA5OTE2YzNiODc1NGY=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-01-20T16:18:54Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-01-21T14:25:49Z"}, "message": "core: Use raw pointers to avoid aliasing in str::split_at_mut\n\nIntroduce private function from_raw_parts_mut for str to factor out the logic.\n\nWe want to use raw pointers here instead of duplicating a &mut str, to\nbe on safer ground w.r.t rust aliasing rules.", "tree": {"sha": "88143310dfa20bb5b5e7d82926d8bf3180745ddb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88143310dfa20bb5b5e7d82926d8bf3180745ddb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba9a3bc4533bccbb0db70bd975109916c3b8754f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9a3bc4533bccbb0db70bd975109916c3b8754f", "html_url": "https://github.com/rust-lang/rust/commit/ba9a3bc4533bccbb0db70bd975109916c3b8754f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba9a3bc4533bccbb0db70bd975109916c3b8754f/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d21acaf9b41ea2529b15d5efd06266e924c0496", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d21acaf9b41ea2529b15d5efd06266e924c0496", "html_url": "https://github.com/rust-lang/rust/commit/9d21acaf9b41ea2529b15d5efd06266e924c0496"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "3892455395f76eeb9d78532049d9929daa006688", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ba9a3bc4533bccbb0db70bd975109916c3b8754f/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9a3bc4533bccbb0db70bd975109916c3b8754f/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=ba9a3bc4533bccbb0db70bd975109916c3b8754f", "patch": "@@ -244,6 +244,34 @@ pub fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n     Ok(unsafe { from_utf8_unchecked(v) })\n }\n \n+/// Forms a str from a pointer and a length.\n+///\n+/// The `len` argument is the number of bytes in the string.\n+///\n+/// # Safety\n+///\n+/// This function is unsafe as there is no guarantee that the given pointer is\n+/// valid for `len` bytes, nor whether the lifetime inferred is a suitable\n+/// lifetime for the returned str.\n+///\n+/// The data must be valid UTF-8\n+///\n+/// `p` must be non-null, even for zero-length str.\n+///\n+/// # Caveat\n+///\n+/// The lifetime for the returned str is inferred from its usage. To\n+/// prevent accidental misuse, it's suggested to tie the lifetime to whichever\n+/// source lifetime is safe in the context, such as by providing a helper\n+/// function taking the lifetime of a host value for the str, or by explicit\n+/// annotation.\n+/// Performs the same functionality as `from_raw_parts`, except that a mutable\n+/// str is returned.\n+///\n+unsafe fn from_raw_parts_mut<'a>(p: *mut u8, len: usize) -> &'a mut str {\n+    mem::transmute::<&mut [u8], &mut str>(slice::from_raw_parts_mut(p, len))\n+}\n+\n /// Converts a slice of bytes to a string slice without checking\n /// that the string contains valid UTF-8.\n ///\n@@ -1843,10 +1871,10 @@ impl StrExt for str {\n         // is_char_boundary checks that the index is in [0, .len()]\n         if self.is_char_boundary(mid) {\n             let len = self.len();\n+            let ptr = self.as_ptr() as *mut u8;\n             unsafe {\n-                let self2: &mut str = mem::transmute_copy(&self);\n-                (self.slice_mut_unchecked(0, mid),\n-                 self2.slice_mut_unchecked(mid, len))\n+                (from_raw_parts_mut(ptr, mid),\n+                 from_raw_parts_mut(ptr.offset(mid as isize), len - mid))\n             }\n         } else {\n             slice_error_fail(self, 0, mid)"}]}