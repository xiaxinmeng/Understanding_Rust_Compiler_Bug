{"sha": "9e9881bcd803390bfbc1e3b1c64ad66330b01103", "node_id": "C_kwDOAAsO6NoAKDllOTg4MWJjZDgwMzM5MGJmYmMxZTNiMWM2NGFkNjYzMzBiMDExMDM", "commit": {"author": {"name": "SparkyPotato", "email": "noob.sparkypotato@gmail.com", "date": "2022-04-05T20:06:24Z"}, "committer": {"name": "SparkyPotato", "email": "noob.sparkypotato@gmail.com", "date": "2022-04-05T20:06:24Z"}, "message": "cleanup", "tree": {"sha": "c26235f22a3ae21b55cdbb6949d41ac35b9156be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c26235f22a3ae21b55cdbb6949d41ac35b9156be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e9881bcd803390bfbc1e3b1c64ad66330b01103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e9881bcd803390bfbc1e3b1c64ad66330b01103", "html_url": "https://github.com/rust-lang/rust/commit/9e9881bcd803390bfbc1e3b1c64ad66330b01103", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e9881bcd803390bfbc1e3b1c64ad66330b01103/comments", "author": {"login": "SparkyPotato", "id": 64652557, "node_id": "MDQ6VXNlcjY0NjUyNTU3", "avatar_url": "https://avatars.githubusercontent.com/u/64652557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparkyPotato", "html_url": "https://github.com/SparkyPotato", "followers_url": "https://api.github.com/users/SparkyPotato/followers", "following_url": "https://api.github.com/users/SparkyPotato/following{/other_user}", "gists_url": "https://api.github.com/users/SparkyPotato/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparkyPotato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparkyPotato/subscriptions", "organizations_url": "https://api.github.com/users/SparkyPotato/orgs", "repos_url": "https://api.github.com/users/SparkyPotato/repos", "events_url": "https://api.github.com/users/SparkyPotato/events{/privacy}", "received_events_url": "https://api.github.com/users/SparkyPotato/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparkyPotato", "id": 64652557, "node_id": "MDQ6VXNlcjY0NjUyNTU3", "avatar_url": "https://avatars.githubusercontent.com/u/64652557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparkyPotato", "html_url": "https://github.com/SparkyPotato", "followers_url": "https://api.github.com/users/SparkyPotato/followers", "following_url": "https://api.github.com/users/SparkyPotato/following{/other_user}", "gists_url": "https://api.github.com/users/SparkyPotato/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparkyPotato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparkyPotato/subscriptions", "organizations_url": "https://api.github.com/users/SparkyPotato/orgs", "repos_url": "https://api.github.com/users/SparkyPotato/repos", "events_url": "https://api.github.com/users/SparkyPotato/events{/privacy}", "received_events_url": "https://api.github.com/users/SparkyPotato/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31e79901454264b4e3ad22a207bf5df9d6aef9a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/31e79901454264b4e3ad22a207bf5df9d6aef9a5", "html_url": "https://github.com/rust-lang/rust/commit/31e79901454264b4e3ad22a207bf5df9d6aef9a5"}], "stats": {"total": 10, "additions": 2, "deletions": 8}, "files": [{"sha": "f73b3866c9cb50184a2753ac39692a5a835c6b87", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e9881bcd803390bfbc1e3b1c64ad66330b01103/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9881bcd803390bfbc1e3b1c64ad66330b01103/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=9e9881bcd803390bfbc1e3b1c64ad66330b01103", "patch": "@@ -168,15 +168,9 @@ impl<T, A: Allocator> RawVec<T, A> {\n \n     #[cfg(not(no_global_oom_handling))]\n     fn allocate_in(capacity: usize, init: AllocInit, alloc: A) -> Self {\n-        if mem::size_of::<T>() == 0 {\n+\t\t// Don't allocate here because `Drop` will not deallocate when `capacity` is 0.\n+        if mem::size_of::<T>() == 0 || capacity == 0 {\n             Self::new_in(alloc)\n-        } else if capacity == 0 {\n-            // Don't allocate here because `Drop` will not deallocate when `capacity` is 0.\n-            Self {\n-                ptr: unsafe { Unique::new_unchecked(NonNull::dangling().as_ptr()) },\n-                cap: capacity,\n-                alloc,\n-            }\n         } else {\n             // We avoid `unwrap_or_else` here because it bloats the amount of\n             // LLVM IR generated."}]}