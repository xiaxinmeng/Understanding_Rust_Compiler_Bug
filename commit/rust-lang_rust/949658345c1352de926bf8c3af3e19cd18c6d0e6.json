{"sha": "949658345c1352de926bf8c3af3e19cd18c6d0e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0OTY1ODM0NWMxMzUyZGU5MjZiZjhjM2FmM2UxOWNkMThjNmQwZTY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-22T14:28:48Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-25T20:38:47Z"}, "message": "Add a tidy test for line count", "tree": {"sha": "b0e6f948cd5c4eb83209a56a329252b980978fe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0e6f948cd5c4eb83209a56a329252b980978fe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/949658345c1352de926bf8c3af3e19cd18c6d0e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/949658345c1352de926bf8c3af3e19cd18c6d0e6", "html_url": "https://github.com/rust-lang/rust/commit/949658345c1352de926bf8c3af3e19cd18c6d0e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/949658345c1352de926bf8c3af3e19cd18c6d0e6/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd31c392f286d61caac0babee68c900cdaa8b504", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd31c392f286d61caac0babee68c900cdaa8b504", "html_url": "https://github.com/rust-lang/rust/commit/bd31c392f286d61caac0babee68c900cdaa8b504"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "4de7e580b0000316a8cb671250860ead325719ee", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/949658345c1352de926bf8c3af3e19cd18c6d0e6/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949658345c1352de926bf8c3af3e19cd18c6d0e6/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=949658345c1352de926bf8c3af3e19cd18c6d0e6", "patch": "@@ -3,6 +3,7 @@\n //! Example checks are:\n //!\n //! * No lines over 100 characters.\n+//! * No files with over 3000 lines.\n //! * No tabs.\n //! * No trailing whitespace.\n //! * No CR characters.\n@@ -18,6 +19,8 @@ use std::path::Path;\n \n const COLS: usize = 100;\n \n+const LINES: usize = 3000;\n+\n const UNEXPLAINED_IGNORE_DOCTEST_INFO: &str = r#\"unexplained \"```ignore\" doctest; try one:\n \n * make the test actually pass, by adding necessary imports and declarations, or\n@@ -139,19 +142,21 @@ pub fn check(path: &Path, bad: &mut bool) {\n \n         let mut skip_cr = contains_ignore_directive(&contents, \"cr\");\n         let mut skip_tab = contains_ignore_directive(&contents, \"tab\");\n-        let mut skip_length = contains_ignore_directive(&contents, \"linelength\");\n+        let mut skip_line_length = contains_ignore_directive(&contents, \"linelength\");\n+        let mut skip_file_length = contains_ignore_directive(&contents, \"filelength\");\n         let mut skip_end_whitespace = contains_ignore_directive(&contents, \"end-whitespace\");\n         let mut skip_copyright = contains_ignore_directive(&contents, \"copyright\");\n         let mut leading_new_lines = false;\n         let mut trailing_new_lines = 0;\n+        let mut lines = 0;\n         for (i, line) in contents.split('\\n').enumerate() {\n             let mut err = |msg: &str| {\n                 tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n             };\n             if line.chars().count() > COLS && !long_line_is_ok(line) {\n                 suppressible_tidy_err!(\n                     err,\n-                    skip_length,\n+                    skip_line_length,\n                     &format!(\"line longer than {} chars\", COLS)\n                 );\n             }\n@@ -197,6 +202,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n             } else {\n                 trailing_new_lines = 0;\n             }\n+            lines = i;\n         }\n         if leading_new_lines {\n             tidy_error!(bad, \"{}: leading newline\", file.display());\n@@ -206,16 +212,22 @@ pub fn check(path: &Path, bad: &mut bool) {\n             1 => {}\n             n => tidy_error!(bad, \"{}: too many trailing newlines ({})\", file.display(), n),\n         };\n+        if !skip_file_length && lines > LINES {\n+            tidy_error!(bad, \"{}: too many lines ({})\", file.display(), lines);\n+        }\n \n         if let Directive::Ignore(false) = skip_cr {\n             tidy_error!(bad, \"{}: ignoring CR characters unnecessarily\", file.display());\n         }\n         if let Directive::Ignore(false) = skip_tab {\n             tidy_error!(bad, \"{}: ignoring tab characters unnecessarily\", file.display());\n         }\n-        if let Directive::Ignore(false) = skip_length {\n+        if let Directive::Ignore(false) = skip_line_length {\n             tidy_error!(bad, \"{}: ignoring line length unnecessarily\", file.display());\n         }\n+        if let Directive::Ignore(false) = skip_file_length {\n+            tidy_error!(bad, \"{}: ignoring file length unnecessarily\", file.display());\n+        }\n         if let Directive::Ignore(false) = skip_end_whitespace {\n             tidy_error!(bad, \"{}: ignoring trailing whitespace unnecessarily\", file.display());\n         }"}]}