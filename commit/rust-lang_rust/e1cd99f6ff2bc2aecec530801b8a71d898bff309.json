{"sha": "e1cd99f6ff2bc2aecec530801b8a71d898bff309", "node_id": "C_kwDOAAsO6NoAKGUxY2Q5OWY2ZmYyYmMyYWVjZWM1MzA4MDFiOGE3MWQ4OThiZmYzMDk", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-17T13:14:03Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-17T14:23:46Z"}, "message": "Make `IndexVec::ensure_contains_elem` return a reference to the element", "tree": {"sha": "ab542ec50f5d319ee91efccbe69dff94e31dba90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab542ec50f5d319ee91efccbe69dff94e31dba90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1cd99f6ff2bc2aecec530801b8a71d898bff309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1cd99f6ff2bc2aecec530801b8a71d898bff309", "html_url": "https://github.com/rust-lang/rust/commit/e1cd99f6ff2bc2aecec530801b8a71d898bff309", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1cd99f6ff2bc2aecec530801b8a71d898bff309/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e49122fb1ca87a6c3e3c22abb315fc75cfe8daed", "url": "https://api.github.com/repos/rust-lang/rust/commits/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed", "html_url": "https://github.com/rust-lang/rust/commit/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "c061a244cf50a510e13932faef2c2cac546239ee", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1cd99f6ff2bc2aecec530801b8a71d898bff309/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cd99f6ff2bc2aecec530801b8a71d898bff309/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=e1cd99f6ff2bc2aecec530801b8a71d898bff309", "patch": "@@ -89,18 +89,18 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n         lctx.with_hir_id_owner(owner, |lctx| f(lctx));\n \n         for (def_id, info) in lctx.children {\n-            self.owners.ensure_contains_elem(def_id, || hir::MaybeOwner::Phantom);\n-            debug_assert!(matches!(self.owners[def_id], hir::MaybeOwner::Phantom));\n-            self.owners[def_id] = info;\n+            let owner = self.owners.ensure_contains_elem(def_id, || hir::MaybeOwner::Phantom);\n+            debug_assert!(matches!(owner, hir::MaybeOwner::Phantom));\n+            *owner = info;\n         }\n     }\n \n     pub(super) fn lower_node(\n         &mut self,\n         def_id: LocalDefId,\n     ) -> hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>> {\n-        self.owners.ensure_contains_elem(def_id, || hir::MaybeOwner::Phantom);\n-        if let hir::MaybeOwner::Phantom = self.owners[def_id] {\n+        let owner = self.owners.ensure_contains_elem(def_id, || hir::MaybeOwner::Phantom);\n+        if let hir::MaybeOwner::Phantom = owner {\n             let node = self.ast_index[def_id];\n             match node {\n                 AstOwner::NonOwner => {}"}, {"sha": "537c2a0618348a694efca024bf4666f82a4f3433", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e1cd99f6ff2bc2aecec530801b8a71d898bff309/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cd99f6ff2bc2aecec530801b8a71d898bff309/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=e1cd99f6ff2bc2aecec530801b8a71d898bff309", "patch": "@@ -368,8 +368,8 @@ fn index_crate<'a>(\n     krate: &'a Crate,\n ) -> IndexVec<LocalDefId, AstOwner<'a>> {\n     let mut indexer = Indexer { node_id_to_def_id, index: IndexVec::new() };\n-    indexer.index.ensure_contains_elem(CRATE_DEF_ID, || AstOwner::NonOwner);\n-    indexer.index[CRATE_DEF_ID] = AstOwner::Crate(krate);\n+    *indexer.index.ensure_contains_elem(CRATE_DEF_ID, || AstOwner::NonOwner) =\n+        AstOwner::Crate(krate);\n     visit::walk_crate(&mut indexer, krate);\n     return indexer.index;\n \n@@ -386,22 +386,21 @@ fn index_crate<'a>(\n \n         fn visit_item(&mut self, item: &'a ast::Item) {\n             let def_id = self.node_id_to_def_id[&item.id];\n-            self.index.ensure_contains_elem(def_id, || AstOwner::NonOwner);\n-            self.index[def_id] = AstOwner::Item(item);\n+            *self.index.ensure_contains_elem(def_id, || AstOwner::NonOwner) = AstOwner::Item(item);\n             visit::walk_item(self, item)\n         }\n \n         fn visit_assoc_item(&mut self, item: &'a ast::AssocItem, ctxt: visit::AssocCtxt) {\n             let def_id = self.node_id_to_def_id[&item.id];\n-            self.index.ensure_contains_elem(def_id, || AstOwner::NonOwner);\n-            self.index[def_id] = AstOwner::AssocItem(item, ctxt);\n+            *self.index.ensure_contains_elem(def_id, || AstOwner::NonOwner) =\n+                AstOwner::AssocItem(item, ctxt);\n             visit::walk_assoc_item(self, item, ctxt);\n         }\n \n         fn visit_foreign_item(&mut self, item: &'a ast::ForeignItem) {\n             let def_id = self.node_id_to_def_id[&item.id];\n-            self.index.ensure_contains_elem(def_id, || AstOwner::NonOwner);\n-            self.index[def_id] = AstOwner::ForeignItem(item);\n+            *self.index.ensure_contains_elem(def_id, || AstOwner::NonOwner) =\n+                AstOwner::ForeignItem(item);\n             visit::walk_foreign_item(self, item);\n         }\n     }"}, {"sha": "d3685d21f2521396e134c7bc77b001d9aeca48c8", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1cd99f6ff2bc2aecec530801b8a71d898bff309/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cd99f6ff2bc2aecec530801b8a71d898bff309/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs?ref=e1cd99f6ff2bc2aecec530801b8a71d898bff309", "patch": "@@ -268,8 +268,7 @@ impl DropRangesBuilder {\n \n     fn node_mut(&mut self, id: PostOrderId) -> &mut NodeInfo {\n         let size = self.num_values();\n-        self.nodes.ensure_contains_elem(id, || NodeInfo::new(size));\n-        &mut self.nodes[id]\n+        self.nodes.ensure_contains_elem(id, || NodeInfo::new(size))\n     }\n \n     fn add_control_edge(&mut self, from: PostOrderId, to: PostOrderId) {"}, {"sha": "4605d42a15b7d16c409d51570245a69334f4b5c7", "filename": "compiler/rustc_index/src/interval.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1cd99f6ff2bc2aecec530801b8a71d898bff309/compiler%2Frustc_index%2Fsrc%2Finterval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cd99f6ff2bc2aecec530801b8a71d898bff309/compiler%2Frustc_index%2Fsrc%2Finterval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Finterval.rs?ref=e1cd99f6ff2bc2aecec530801b8a71d898bff309", "patch": "@@ -261,8 +261,7 @@ impl<R: Idx, C: Step + Idx> SparseIntervalMatrix<R, C> {\n     }\n \n     fn ensure_row(&mut self, row: R) -> &mut IntervalSet<C> {\n-        self.rows.ensure_contains_elem(row, || IntervalSet::new(self.column_size));\n-        &mut self.rows[row]\n+        self.rows.ensure_contains_elem(row, || IntervalSet::new(self.column_size))\n     }\n \n     pub fn union_row(&mut self, row: R, from: &IntervalSet<C>) -> bool"}, {"sha": "95600f7bcf16f46241dcb09849e123fffadc2420", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e1cd99f6ff2bc2aecec530801b8a71d898bff309/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cd99f6ff2bc2aecec530801b8a71d898bff309/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=e1cd99f6ff2bc2aecec530801b8a71d898bff309", "patch": "@@ -236,12 +236,16 @@ impl<I: Idx, T> IndexVec<I, T> {\n     /// `elem`; if that is already true, then has no\n     /// effect. Otherwise, inserts new values as needed by invoking\n     /// `fill_value`.\n+    ///\n+    /// Returns a reference to the `elem` entry.\n     #[inline]\n-    pub fn ensure_contains_elem(&mut self, elem: I, fill_value: impl FnMut() -> T) {\n+    pub fn ensure_contains_elem(&mut self, elem: I, fill_value: impl FnMut() -> T) -> &mut T {\n         let min_new_len = elem.index() + 1;\n         if self.len() < min_new_len {\n             self.raw.resize_with(min_new_len, fill_value);\n         }\n+\n+        &mut self[elem]\n     }\n \n     #[inline]\n@@ -446,20 +450,17 @@ impl<I: Idx, J: Idx> IndexSlice<I, J> {\n impl<I: Idx, T> IndexVec<I, Option<T>> {\n     #[inline]\n     pub fn insert(&mut self, index: I, value: T) -> Option<T> {\n-        self.ensure_contains_elem(index, || None);\n-        self[index].replace(value)\n+        self.ensure_contains_elem(index, || None).replace(value)\n     }\n \n     #[inline]\n     pub fn get_or_insert_with(&mut self, index: I, value: impl FnOnce() -> T) -> &mut T {\n-        self.ensure_contains_elem(index, || None);\n-        self[index].get_or_insert_with(value)\n+        self.ensure_contains_elem(index, || None).get_or_insert_with(value)\n     }\n \n     #[inline]\n     pub fn remove(&mut self, index: I) -> Option<T> {\n-        self.ensure_contains_elem(index, || None);\n-        self[index].take()\n+        self.ensure_contains_elem(index, || None).take()\n     }\n }\n "}, {"sha": "66e2518fa56e530f05ece3d629ecab6d34f2d684", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1cd99f6ff2bc2aecec530801b8a71d898bff309/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cd99f6ff2bc2aecec530801b8a71d898bff309/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=e1cd99f6ff2bc2aecec530801b8a71d898bff309", "patch": "@@ -413,8 +413,8 @@ impl<I: Idx, const N: usize, T: FixedSizeEncoding<ByteArray = [u8; N]>> TableBui\n             // > Space requirements could perhaps be optimized by using the HAMT `popcnt`\n             // > trick (i.e. divide things into buckets of 32 or 64 items and then\n             // > store bit-masks of which item in each bucket is actually serialized).\n-            self.blocks.ensure_contains_elem(i, || [0; N]);\n-            value.write_to_bytes(&mut self.blocks[i]);\n+            let block = self.blocks.ensure_contains_elem(i, || [0; N]);\n+            value.write_to_bytes(block);\n         }\n     }\n "}]}