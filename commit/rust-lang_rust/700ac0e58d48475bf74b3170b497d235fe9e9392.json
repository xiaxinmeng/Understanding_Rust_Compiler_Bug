{"sha": "700ac0e58d48475bf74b3170b497d235fe9e9392", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMGFjMGU1OGQ0ODQ3NWJmNzRiMzE3MGI0OTdkMjM1ZmU5ZTkzOTI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-02-01T00:54:56Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-02-01T13:18:49Z"}, "message": "Add AsciiExt::into_ascii_{upper,lower}case\n\nThe default implementations (with where Self: Sized) are so that methods\nthat take `self` by value can exist in a trait that\u2019s implemented for\ndynamically-sized types (`str` and `[u8]`).\n\nCC https://github.com/rust-lang/rust/issues/27809#issuecomment-177564950", "tree": {"sha": "caedbabf9e993a12f7197d0be4ba6268a4061d26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caedbabf9e993a12f7197d0be4ba6268a4061d26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/700ac0e58d48475bf74b3170b497d235fe9e9392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/700ac0e58d48475bf74b3170b497d235fe9e9392", "html_url": "https://github.com/rust-lang/rust/commit/700ac0e58d48475bf74b3170b497d235fe9e9392", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/700ac0e58d48475bf74b3170b497d235fe9e9392/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9041b930585806b948b4cc68933047ffdc96f6f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9041b930585806b948b4cc68933047ffdc96f6f9", "html_url": "https://github.com/rust-lang/rust/commit/9041b930585806b948b4cc68933047ffdc96f6f9"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "7422c8113226d06f7cc9fc70ed9f818202f955ec", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/700ac0e58d48475bf74b3170b497d235fe9e9392/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700ac0e58d48475bf74b3170b497d235fe9e9392/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=700ac0e58d48475bf74b3170b497d235fe9e9392", "patch": "@@ -139,6 +139,112 @@ pub trait AsciiExt {\n     /// ```\n     #[unstable(feature = \"ascii\", issue = \"27809\")]\n     fn make_ascii_lowercase(&mut self);\n+\n+    /// Converts this type to its ASCII upper case,\n+    /// consuming the value to avoid allocating memory where `to_ascii_uppercase` would.\n+    ///\n+    /// See `to_ascii_uppercase` for more information.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ascii)]\n+    ///\n+    /// use std::ascii::AsciiExt;\n+    ///\n+    /// let ascii: String = \"a\".to_owned();\n+    ///\n+    /// let upper = ascii.into_ascii_uppercase();\n+    ///\n+    /// assert_eq!(upper, \"A\");\n+    /// ```\n+    #[unstable(feature = \"ascii\", issue = \"27809\")]\n+    fn into_ascii_uppercase(self) -> Self::Owned where Self: Sized {\n+        self.to_ascii_uppercase()\n+    }\n+\n+    /// Converts this type to its ASCII lower case,\n+    /// consuming the value to avoid allocating memory where `to_ascii_lowercase` would.\n+    ///\n+    /// See `to_ascii_lowercase` for more information.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ascii)]\n+    ///\n+    /// use std::ascii::AsciiExt;\n+    ///\n+    /// let ascii: String = \"A\".to_owned();\n+    ///\n+    /// let lower = ascii.into_ascii_lowercase();\n+    ///\n+    /// assert_eq!(lower, \"a\");\n+    /// ```\n+    #[unstable(feature = \"ascii\", issue = \"27809\")]\n+    fn into_ascii_lowercase(self) -> Self::Owned where Self: Sized {\n+        self.to_ascii_lowercase()\n+    }\n+}\n+\n+/// Implement `into_ascii_lowercase` and `into_ascii_uppercase` without memory allocation,\n+/// defer other methods to `str`.\n+#[unstable(feature = \"ascii\", issue = \"27809\")]\n+impl AsciiExt for String {\n+    type Owned = Self;\n+\n+    #[inline] fn is_ascii(&self) -> bool { (**self).is_ascii() }\n+    #[inline] fn to_ascii_uppercase(&self) -> Self { (**self).to_ascii_uppercase() }\n+    #[inline] fn to_ascii_lowercase(&self) -> Self { (**self).to_ascii_lowercase() }\n+    #[inline] fn eq_ignore_ascii_case(&self, o: &Self) -> bool { (**self).eq_ignore_ascii_case(o) }\n+    #[inline] fn make_ascii_uppercase(&mut self) { (**self).make_ascii_uppercase() }\n+    #[inline] fn make_ascii_lowercase(&mut self) { (**self).make_ascii_lowercase() }\n+\n+    fn into_ascii_lowercase(mut self) -> Self {\n+        unsafe {\n+            for byte in self.as_mut_vec() {\n+                *byte = byte.to_ascii_lowercase()\n+            }\n+        }\n+        self\n+    }\n+\n+    fn into_ascii_uppercase(mut self) -> Self {\n+        unsafe {\n+            for byte in self.as_mut_vec() {\n+                *byte = byte.to_ascii_uppercase()\n+            }\n+        }\n+        self\n+    }\n+}\n+\n+/// Implement `into_ascii_lowercase` and `into_ascii_uppercase` without memory allocation,\n+/// defer other methods to `[u8]`.\n+#[unstable(feature = \"ascii\", issue = \"27809\")]\n+impl AsciiExt for Vec<u8> {\n+    type Owned = Self;\n+\n+    #[inline] fn is_ascii(&self) -> bool { (**self).is_ascii() }\n+    #[inline] fn to_ascii_uppercase(&self) -> Self { (**self).to_ascii_uppercase() }\n+    #[inline] fn to_ascii_lowercase(&self) -> Self { (**self).to_ascii_lowercase() }\n+    #[inline] fn eq_ignore_ascii_case(&self, o: &Self) -> bool { (**self).eq_ignore_ascii_case(o) }\n+    #[inline] fn make_ascii_uppercase(&mut self) { (**self).make_ascii_uppercase() }\n+    #[inline] fn make_ascii_lowercase(&mut self) { (**self).make_ascii_lowercase() }\n+\n+    fn into_ascii_lowercase(mut self) -> Self {\n+        for byte in &mut self {\n+            *byte = byte.to_ascii_lowercase()\n+        }\n+        self\n+    }\n+\n+    fn into_ascii_uppercase(mut self) -> Self {\n+        for byte in &mut self {\n+            *byte = byte.to_ascii_uppercase()\n+        }\n+        self\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}