{"sha": "a076961fd0e3d8a68f8b047460b8f5191d203b08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNzY5NjFmZDBlM2Q4YTY4ZjhiMDQ3NDYwYjhmNTE5MWQyMDNiMDg=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-02-07T23:13:57Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-02-13T18:41:01Z"}, "message": "Re-implement rustbook in terms of mdbook\n\nmdbook has a lot of optional dependencies that we don't want, so instead\nof using it directly, we re-build rustbook to use mdbook as a library.\nFor convenience' sake, we keep the same CLI interface as mdbook; the\nonly difference is that it only accepts build and test subcommands,\nrather than the full range.", "tree": {"sha": "cb00bd5f4b6df0d1b669e90b286b3bfc0e8f6292", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb00bd5f4b6df0d1b669e90b286b3bfc0e8f6292"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a076961fd0e3d8a68f8b047460b8f5191d203b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a076961fd0e3d8a68f8b047460b8f5191d203b08", "html_url": "https://github.com/rust-lang/rust/commit/a076961fd0e3d8a68f8b047460b8f5191d203b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a076961fd0e3d8a68f8b047460b8f5191d203b08/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "html_url": "https://github.com/rust-lang/rust/commit/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee"}], "stats": {"total": 1283, "additions": 311, "deletions": 972}, "files": [{"sha": "51d45c06fcb49f0cc0a97f69efd87110e972a15f", "filename": "src/Cargo.lock", "status": "modified", "additions": 215, "deletions": 1, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=a076961fd0e3d8a68f8b047460b8f5191d203b08", "patch": "@@ -6,6 +6,14 @@ dependencies = [\n  \"libc 0.0.0\",\n ]\n \n+[[package]]\n+name = \"aho-corasick\"\n+version = \"0.5.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"alloc\"\n version = \"0.0.0\"\n@@ -31,10 +39,25 @@ dependencies = [\n  \"libc 0.0.0\",\n ]\n \n+[[package]]\n+name = \"ansi_term\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"arena\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"bitflags\"\n+version = \"0.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"bitflags\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"bootstrap\"\n version = \"0.0.0\"\n@@ -69,6 +92,21 @@ dependencies = [\n name = \"cargotest\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"clap\"\n+version = \"2.19.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"strsim 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term_size 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"vec_map 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"cmake\"\n version = \"0.1.18\"\n@@ -114,6 +152,7 @@ version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -158,6 +197,33 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"graphviz\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"handlebars\"\n+version = \"0.20.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"lazy_static 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"kernel32-sys\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"lazy_static\"\n+version = \"0.1.16\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"libc\"\n version = \"0.0.0\"\n@@ -183,6 +249,27 @@ name = \"log\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"mdbook\"\n+version = \"0.0.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"handlebars 0.20.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pulldown-cmark 0.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"0.1.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"num_cpus\"\n version = \"0.2.13\"\n@@ -209,6 +296,11 @@ dependencies = [\n  \"unwind 0.0.0\",\n ]\n \n+[[package]]\n+name = \"pest\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"proc_macro\"\n version = \"0.0.0\"\n@@ -225,6 +317,15 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"pulldown-cmark\"\n+version = \"0.0.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"qemu-test-client\"\n version = \"0.1.0\"\n@@ -233,16 +334,42 @@ version = \"0.1.0\"\n name = \"qemu-test-server\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"quick-error\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"rand\"\n version = \"0.0.0\"\n dependencies = [\n  \"core 0.0.0\",\n ]\n \n+[[package]]\n+name = \"regex\"\n+version = \"0.1.80\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"regex-syntax\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"rustbook\"\n-version = \"0.0.0\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mdbook 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"rustc\"\n@@ -650,6 +777,11 @@ dependencies = [\n  \"core 0.0.0\",\n ]\n \n+[[package]]\n+name = \"strsim\"\n+version = \"0.5.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"syntax\"\n version = \"0.0.0\"\n@@ -685,6 +817,16 @@ dependencies = [\n name = \"term\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"term_size\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"test\"\n version = \"0.0.0\"\n@@ -700,6 +842,23 @@ dependencies = [\n  \"test 0.0.0\",\n ]\n \n+[[package]]\n+name = \"thread-id\"\n+version = \"2.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"thread_local\"\n+version = \"0.2.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"tidy\"\n version = \"0.1.0\"\n@@ -712,14 +871,69 @@ dependencies = [\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"unicode-segmentation\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"unicode-width\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"utf8-ranges\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"vec_map\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"winapi\"\n+version = \"0.2.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"winapi-build\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [metadata]\n+\"checksum aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca972c2ea5f742bfce5687b9aef75506a764f61d37f8f649047846a9686ddb66\"\n+\"checksum ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23ac7c30002a5accbf7e8987d0632fa6de155b7c3d39d0067317a391e00a2ef6\"\n+\"checksum bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f67931368edf3a9a51d29886d245f1c3db2f1ef0dcc9e35ff70341b78c10d23\"\n+\"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n+\"checksum clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"95b78f3fe0fc94c13c731714363260e04b557a637166f33a4570d3189d642374\"\n \"checksum cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e5bcf27e097a184c1df4437654ed98df3d7a516e8508a6ba45d8b092bbdf283\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5363ab8e4139b8568a6237db5248646e5a8a2f89bd5ccb02092182b11fd3e922\"\n \"checksum gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c07c758b972368e703a562686adb39125707cc1ef3399da8c019fc6c2498a75d\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n+\"checksum handlebars 0.20.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07f9c1d28bcfb97143c95ed0667141677b2b5675c7ba3d5b81459ad43b1073bd\"\n+\"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n+\"checksum lazy_static 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf186d1a8aa5f5bee5fd662bc9c1b949e0259e1bcc379d1f006847b0080c7417\"\n \"checksum libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"044d1360593a78f5c8e5e710beccdc24ab71d1f01bc19a29bcacdba22e8475d8\"\n \"checksum log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab83497bf8bf4ed2a74259c1c802351fcd67a65baa86394b6ba73c36f4838054\"\n+\"checksum mdbook 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a629cd0194bbd0340a70db83a94b27cf9881fac8c55e6a2db983addcb7114ee4\"\n+\"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n \"checksum num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cee7e88156f3f9e19bdd598f8d6c9db7bf4078f99f8381f43a55b09648d1a6e3\"\n+\"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n+\"checksum pulldown-cmark 0.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1058d7bb927ca067656537eec4e02c2b4b70eaaa129664c5b90c111e20326f41\"\n+\"checksum quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0aad603e8d7fb67da22dbdf1f4b826ce8829e406124109e73cf1b2454b93a71c\"\n+\"checksum regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4fd4ace6a8cf7860714a2c2280d6c1f7e6a413486c13298bbc86fd3da019402f\"\n+\"checksum regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9ec002c35e86791825ed294b50008eea9ddfc8def4420124fbc6b08db834957\"\n \"checksum rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6159e4e6e559c81bd706afe9c8fd68f547d3e851ce12e76b1de7914bab61691b\"\n+\"checksum strsim 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"67f84c44fbb2f91db7fef94554e6b2ac05909c9c0b0bc23bb98d3a1aebfe7f7c\"\n+\"checksum term_size 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3f7f5f3f71b0040cecc71af239414c23fd3c73570f5ff54cf50e03cef637f2a0\"\n+\"checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03\"\n+\"checksum thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5\"\n \"checksum toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0590d72182e50e879c4da3b11c6488dae18fccb1ae0c7a3eda18e16795844796\"\n+\"checksum unicode-segmentation 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c3bc443ded17b11305ffffe6b37e2076f328a5a8cb6aa877b1b98f77699e98b5\"\n+\"checksum unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf3a113775714a22dcb774d8ea3655c53a32debae63a063acc00a91cc586245f\"\n+\"checksum utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1ca13c08c41c9c3e04224ed9ff80461d97e121589ff27c753a16cb10830ae0f\"\n+\"checksum vec_map 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cac5efe5cb0fa14ec2f84f83c701c562ee63f6dcc680861b21d65c682adfb05f\"\n+\"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n+\"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\""}, {"sha": "74b13144f2ff0e0984c9e42a9ca6e56010a25968", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=a076961fd0e3d8a68f8b047460b8f5191d203b08", "patch": "@@ -47,6 +47,7 @@ pub fn rustbook(build: &Build, target: &str, name: &str) {\n     build.run(build.tool_cmd(&compiler, \"rustbook\")\n                    .arg(\"build\")\n                    .arg(&src)\n+                   .arg(\"-d\")\n                    .arg(out));\n }\n "}, {"sha": "7390c82896e56364c0237efd22d6abf04ebba615", "filename": "src/doc/book/src/SUMMARY.md", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md?ref=a076961fd0e3d8a68f8b047460b8f5191d203b08", "patch": "@@ -0,0 +1,3 @@\n+# Summary\n+\n+- [Chapter 1](./chapter_1.md)"}, {"sha": "b743fda354692a44400c2c21ae0fb71c2d5a30d5", "filename": "src/doc/book/src/chapter_1.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2Fdoc%2Fbook%2Fsrc%2Fchapter_1.md", "raw_url": "https://github.com/rust-lang/rust/raw/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2Fdoc%2Fbook%2Fsrc%2Fchapter_1.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fchapter_1.md?ref=a076961fd0e3d8a68f8b047460b8f5191d203b08", "patch": "@@ -0,0 +1 @@\n+# Chapter 1"}, {"sha": "7390c82896e56364c0237efd22d6abf04ebba615", "filename": "src/doc/nomicon/src/SUMMARY.md", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2Fdoc%2Fnomicon%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2Fdoc%2Fnomicon%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2FSUMMARY.md?ref=a076961fd0e3d8a68f8b047460b8f5191d203b08", "patch": "@@ -0,0 +1,3 @@\n+# Summary\n+\n+- [Chapter 1](./chapter_1.md)"}, {"sha": "b743fda354692a44400c2c21ae0fb71c2d5a30d5", "filename": "src/doc/nomicon/src/chapter_1.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2Fdoc%2Fnomicon%2Fsrc%2Fchapter_1.md", "raw_url": "https://github.com/rust-lang/rust/raw/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2Fdoc%2Fnomicon%2Fsrc%2Fchapter_1.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fchapter_1.md?ref=a076961fd0e3d8a68f8b047460b8f5191d203b08", "patch": "@@ -0,0 +1 @@\n+# Chapter 1"}, {"sha": "25c310aa8774ae175e55fe1ad16dc387c0587519", "filename": "src/tools/rustbook/Cargo.toml", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2Ftools%2Frustbook%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2Ftools%2Frustbook%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2FCargo.toml?ref=a076961fd0e3d8a68f8b047460b8f5191d203b08", "patch": "@@ -1,9 +1,12 @@\n [package]\n authors = [\"The Rust Project Developers\"]\n name = \"rustbook\"\n-version = \"0.0.0\"\n-build = false\n+version = \"0.1.0\"\n+license = \"MIT/Apache-2.0\"\n \n-[[bin]]\n-name = \"rustbook\"\n-path = \"main.rs\"\n+[dependencies]\n+clap = \"2.19.3\"\n+\n+[dependencies.mdbook]\n+version = \"0.0.14\"\n+default-features = false"}, {"sha": "c5f72127a9c805230704ed088eee5d2d61b0f9e8", "filename": "src/tools/rustbook/book.rs", "status": "removed", "additions": 0, "deletions": 171, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fbook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fbook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fbook.rs?ref=717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "patch": "@@ -1,171 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Basic data structures for representing a book.\n-\n-use std::io::prelude::*;\n-use std::io::BufReader;\n-use std::iter;\n-use std::path::{Path, PathBuf};\n-\n-pub struct BookItem {\n-    pub title: String,\n-    pub path: PathBuf,\n-    pub path_to_root: PathBuf,\n-    pub children: Vec<BookItem>,\n-}\n-\n-pub struct Book {\n-    pub chapters: Vec<BookItem>,\n-}\n-\n-/// A depth-first iterator over a book.\n-pub struct BookItems<'a> {\n-    cur_items: &'a [BookItem],\n-    cur_idx: usize,\n-    stack: Vec<(&'a [BookItem], usize)>,\n-}\n-\n-impl<'a> Iterator for BookItems<'a> {\n-    type Item = (String, &'a BookItem);\n-\n-    fn next(&mut self) -> Option<(String, &'a BookItem)> {\n-        loop {\n-            if self.cur_idx >= self.cur_items.len() {\n-                match self.stack.pop() {\n-                    None => return None,\n-                    Some((parent_items, parent_idx)) => {\n-                        self.cur_items = parent_items;\n-                        self.cur_idx = parent_idx + 1;\n-                    }\n-                }\n-            } else {\n-                let cur = self.cur_items.get(self.cur_idx).unwrap();\n-\n-                let mut section = \"\".to_string();\n-                for &(_, idx) in &self.stack {\n-                    section.push_str(&(idx + 1).to_string()[..]);\n-                    section.push('.');\n-                }\n-                section.push_str(&(self.cur_idx + 1).to_string()[..]);\n-                section.push('.');\n-\n-                self.stack.push((self.cur_items, self.cur_idx));\n-                self.cur_items = &cur.children[..];\n-                self.cur_idx = 0;\n-                return Some((section, cur))\n-            }\n-        }\n-    }\n-}\n-\n-impl Book {\n-    pub fn iter(&self) -> BookItems {\n-        BookItems {\n-            cur_items: &self.chapters[..],\n-            cur_idx: 0,\n-            stack: Vec::new(),\n-        }\n-    }\n-}\n-\n-/// Construct a book by parsing a summary (markdown table of contents).\n-pub fn parse_summary(input: &mut Read, src: &Path) -> Result<Book, Vec<String>> {\n-    fn collapse(stack: &mut Vec<BookItem>,\n-                top_items: &mut Vec<BookItem>,\n-                to_level: usize) {\n-        loop {\n-            if stack.len() < to_level { return }\n-            if stack.len() == 1 {\n-                top_items.push(stack.pop().unwrap());\n-                return;\n-            }\n-\n-            let tip = stack.pop().unwrap();\n-            let last = stack.len() - 1;\n-            stack[last].children.push(tip);\n-        }\n-    }\n-\n-    let mut top_items = vec![];\n-    let mut stack = vec![];\n-    let mut errors = vec![];\n-\n-    // always include the introduction\n-    top_items.push(BookItem {\n-        title: \"Introduction\".to_string(),\n-        path: PathBuf::from(\"README.md\"),\n-        path_to_root: PathBuf::from(\"\"),\n-        children: vec![],\n-    });\n-\n-    for line_result in BufReader::new(input).lines() {\n-        let line = match line_result {\n-            Ok(line) => line,\n-            Err(err) => {\n-                errors.push(err.to_string());\n-                return Err(errors);\n-            }\n-        };\n-\n-        let star_idx = match line.find(\"*\") { Some(i) => i, None => continue };\n-\n-        let start_bracket = star_idx + line[star_idx..].find(\"[\").unwrap();\n-        let end_bracket = start_bracket + line[start_bracket..].find(\"](\").unwrap();\n-        let start_paren = end_bracket + 1;\n-        let end_paren = start_paren + line[start_paren..].find(\")\").unwrap();\n-\n-        let given_path = &line[start_paren + 1 .. end_paren];\n-        let title = line[start_bracket + 1..end_bracket].to_string();\n-        let indent = &line[..star_idx];\n-\n-        let path_from_root = match src.join(given_path).strip_prefix(src) {\n-            Ok(p) => p.to_path_buf(),\n-            Err(..) => {\n-                errors.push(format!(\"paths in SUMMARY.md must be relative, \\\n-                                     but path '{}' for section '{}' is not.\",\n-                                     given_path, title));\n-                PathBuf::new()\n-            }\n-        };\n-        let path_to_root = PathBuf::from(&iter::repeat(\"../\")\n-                                         .take(path_from_root.components().count() - 1)\n-                                         .collect::<String>());\n-        let item = BookItem {\n-            title: title,\n-            path: path_from_root,\n-            path_to_root: path_to_root,\n-            children: vec![],\n-        };\n-        let level = indent.chars().map(|c| -> usize {\n-            match c {\n-                ' ' => 1,\n-                '\\t' => 4,\n-                _ => unreachable!()\n-            }\n-        }).sum::<usize>() / 4 + 1;\n-\n-        if level > stack.len() + 1 {\n-            errors.push(format!(\"section '{}' is indented too deeply; \\\n-                                 found {}, expected {} or less\",\n-                                item.title, level, stack.len() + 1));\n-        } else if level <= stack.len() {\n-            collapse(&mut stack, &mut top_items, level);\n-        }\n-        stack.push(item)\n-    }\n-\n-    if errors.is_empty() {\n-        collapse(&mut stack, &mut top_items, 1);\n-        Ok(Book { chapters: top_items })\n-    } else {\n-        Err(errors)\n-    }\n-}"}, {"sha": "d88ff48843a403526f6135ca4c7973702f4031e4", "filename": "src/tools/rustbook/build.rs", "status": "removed", "additions": 0, "deletions": 220, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fbuild.rs?ref=717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "patch": "@@ -1,220 +0,0 @@\n-// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Implementation of the `build` subcommand, used to compile a book.\n-\n-use std::env;\n-use std::fs::{self, File};\n-use std::io::prelude::*;\n-use std::io::{self, BufWriter};\n-use std::path::{Path, PathBuf};\n-use rustc_back::tempdir::TempDir;\n-\n-use subcommand::Subcommand;\n-use term::Term;\n-use error::{err, CliResult, CommandResult};\n-use book;\n-use book::{Book, BookItem};\n-\n-use rustdoc;\n-\n-struct Build;\n-\n-pub fn parse_cmd(name: &str) -> Option<Box<Subcommand>> {\n-    if name == \"build\" {\n-        Some(Box::new(Build))\n-    } else {\n-        None\n-    }\n-}\n-\n-fn write_toc(book: &Book, current_page: &BookItem, out: &mut Write) -> io::Result<()> {\n-    fn walk_items(items: &[BookItem],\n-                  section: &str,\n-                  current_page: &BookItem,\n-                  out: &mut Write) -> io::Result<()> {\n-        for (i, item) in items.iter().enumerate() {\n-            walk_item(item, &format!(\"{}{}.\", section, i + 1)[..], current_page, out)?;\n-        }\n-        Ok(())\n-    }\n-    fn walk_item(item: &BookItem,\n-                 section: &str,\n-                 current_page: &BookItem,\n-                 out: &mut Write) -> io::Result<()> {\n-        let class_string = if item.path == current_page.path {\n-            \"class='active'\"\n-        } else {\n-            \"\"\n-        };\n-\n-        writeln!(out, \"<li><a {} href='{}'><b>{}</b> {}</a>\",\n-                 class_string,\n-                 current_page.path_to_root.join(&item.path).with_extension(\"html\").display(),\n-                 section,\n-                 item.title)?;\n-        if !item.children.is_empty() {\n-            writeln!(out, \"<ol class='section'>\")?;\n-            let _ = walk_items(&item.children[..], section, current_page, out);\n-            writeln!(out, \"</ol>\")?;\n-        }\n-        writeln!(out, \"</li>\")?;\n-\n-        Ok(())\n-    }\n-\n-    writeln!(out, \"<div id='toc' class='mobile-hidden'>\")?;\n-    writeln!(out, \"<ol class='chapter'>\")?;\n-    walk_items(&book.chapters[..], \"\", &current_page, out)?;\n-    writeln!(out, \"</ol>\")?;\n-    writeln!(out, \"</div>\")?;\n-\n-    Ok(())\n-}\n-\n-fn render(book: &Book, tgt: &Path) -> CliResult<()> {\n-    let tmp = TempDir::new(\"rustbook\")?;\n-\n-    for (_section, item) in book.iter() {\n-        let out_path = match item.path.parent() {\n-            Some(p) => tgt.join(p),\n-            None => tgt.to_path_buf(),\n-        };\n-\n-        let src;\n-        if env::args().len() < 3 {\n-            src = env::current_dir().unwrap().clone();\n-        } else {\n-            src = PathBuf::from(&env::args().nth(2).unwrap());\n-        }\n-        // preprocess the markdown, rerouting markdown references to html\n-        // references\n-        let mut markdown_data = String::new();\n-        File::open(&src.join(&item.path)).and_then(|mut f| {\n-            f.read_to_string(&mut markdown_data)\n-        })?;\n-        let preprocessed_path = tmp.path().join(item.path.file_name().unwrap());\n-        {\n-            let urls = markdown_data.replace(\".md)\", \".html)\");\n-            File::create(&preprocessed_path).and_then(|mut f| {\n-                f.write_all(urls.as_bytes())\n-            })?;\n-        }\n-\n-        // write the prelude to a temporary HTML file for rustdoc inclusion\n-        let prelude = tmp.path().join(\"prelude.html\");\n-        {\n-            let mut buffer = BufWriter::new(File::create(&prelude)?);\n-            writeln!(&mut buffer, r#\"\n-                <div id=\"nav\">\n-                    <button id=\"toggle-nav\">\n-                        <span class=\"sr-only\">Toggle navigation</span>\n-                        <span class=\"bar\"></span>\n-                        <span class=\"bar\"></span>\n-                        <span class=\"bar\"></span>\n-                    </button>\n-                </div>\"#)?;\n-            let _ = write_toc(book, &item, &mut buffer);\n-            writeln!(&mut buffer, \"<div id='page-wrapper'>\")?;\n-            writeln!(&mut buffer, \"<div id='page'>\")?;\n-        }\n-\n-        // write the postlude to a temporary HTML file for rustdoc inclusion\n-        let postlude = tmp.path().join(\"postlude.html\");\n-        {\n-            let mut buffer = BufWriter::new(File::create(&postlude)?);\n-            writeln!(&mut buffer, \"<script src='rustbook.js'></script>\")?;\n-            writeln!(&mut buffer, \"</div></div>\")?;\n-        }\n-\n-        fs::create_dir_all(&out_path)?;\n-\n-        let rustdoc_args: &[String] = &[\n-            \"\".to_string(),\n-            preprocessed_path.display().to_string(),\n-            format!(\"-o{}\", out_path.display()),\n-            format!(\"--html-before-content={}\", prelude.display()),\n-            format!(\"--html-after-content={}\", postlude.display()),\n-            format!(\"--markdown-playground-url=https://play.rust-lang.org/\"),\n-            format!(\"--markdown-css={}\", item.path_to_root.join(\"rustbook.css\").display()),\n-            \"--markdown-no-toc\".to_string(),\n-        ];\n-        let output_result = rustdoc::main_args(rustdoc_args);\n-        if output_result != 0 {\n-            let message = format!(\"Could not execute `rustdoc` with {:?}: {}\",\n-                                  rustdoc_args, output_result);\n-            return Err(err(&message));\n-        }\n-    }\n-\n-    // create index.html from the root README\n-    fs::copy(&tgt.join(\"README.html\"), &tgt.join(\"index.html\"))?;\n-\n-    Ok(())\n-}\n-\n-impl Subcommand for Build {\n-    fn parse_args(&mut self, _: &[String]) -> CliResult<()> {\n-        Ok(())\n-    }\n-    fn usage(&self) {}\n-    fn execute(&mut self, term: &mut Term) -> CommandResult<()> {\n-        let cwd = env::current_dir().unwrap();\n-        let src;\n-        let tgt;\n-\n-        if env::args().len() < 3 {\n-            src = cwd.clone();\n-        } else {\n-            src = PathBuf::from(&env::args().nth(2).unwrap());\n-        }\n-\n-        if env::args().len() < 4 {\n-            tgt = cwd.join(\"_book\");\n-        } else {\n-            tgt = PathBuf::from(&env::args().nth(3).unwrap());\n-        }\n-\n-        // `_book` directory may already exist from previous runs. Check and\n-        // delete it if it exists.\n-        for entry in fs::read_dir(&cwd)? {\n-            let path = entry?.path();\n-            if path == tgt { fs::remove_dir_all(&tgt)? }\n-        }\n-        fs::create_dir(&tgt)?;\n-\n-        // Copy static files\n-        let css = include_bytes!(\"static/rustbook.css\");\n-        let js = include_bytes!(\"static/rustbook.js\");\n-\n-        let mut css_file = File::create(tgt.join(\"rustbook.css\"))?;\n-        css_file.write_all(css)?;\n-\n-        let mut js_file = File::create(tgt.join(\"rustbook.js\"))?;\n-        js_file.write_all(js)?;\n-\n-\n-        let mut summary = File::open(&src.join(\"SUMMARY.md\"))?;\n-        match book::parse_summary(&mut summary, &src) {\n-            Ok(book) => {\n-                // execute rustdoc on the whole book\n-                render(&book, &tgt)\n-            }\n-            Err(errors) => {\n-                let n = errors.len();\n-                for err in errors {\n-                    term.err(&format!(\"error: {}\", err)[..]);\n-                }\n-\n-                Err(err(&format!(\"{} errors occurred\", n)))\n-            }\n-        }\n-    }\n-}"}, {"sha": "e896dee27919e1c4121e2be47b7c5c334e8ffa1f", "filename": "src/tools/rustbook/error.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Ferror.rs?ref=717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Error handling utilities. WIP.\n-\n-use std::error::Error;\n-use std::fmt;\n-\n-pub type CliError = Box<Error + 'static>;\n-pub type CliResult<T> = Result<T, CliError>;\n-\n-pub type CommandError = Box<Error + 'static>;\n-pub type CommandResult<T> = Result<T, CommandError>;\n-\n-pub fn err(s: &str) -> CliError {\n-    #[derive(Debug)]\n-    struct E(String);\n-\n-    impl Error for E {\n-        fn description(&self) -> &str { &self.0 }\n-    }\n-    impl fmt::Display for E {\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-            self.0.fmt(f)\n-        }\n-    }\n-\n-    Box::new(E(s.to_string()))\n-}"}, {"sha": "c90c2b936092a4b643483d20b26d37851139d929", "filename": "src/tools/rustbook/help.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fhelp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fhelp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fhelp.rs?ref=717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "patch": "@@ -1,46 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Implementation of the `help` subcommand. Currently just prints basic usage info.\n-\n-use subcommand::Subcommand;\n-use error::CliResult;\n-use error::CommandResult;\n-use term::Term;\n-\n-struct Help;\n-\n-pub fn parse_cmd(name: &str) -> Option<Box<Subcommand>> {\n-    match name {\n-        \"help\" | \"--help\" | \"-h\" | \"-?\" => Some(Box::new(Help)),\n-        _ => None\n-    }\n-}\n-\n-impl Subcommand for Help {\n-    fn parse_args(&mut self, _: &[String]) -> CliResult<()> {\n-        Ok(())\n-    }\n-    fn usage(&self) {}\n-    fn execute(&mut self, _: &mut Term) -> CommandResult<()> {\n-        usage();\n-        Ok(())\n-    }\n-}\n-\n-pub fn usage() {\n-    println!(\"Usage: rustbook <command> [<args>]\");\n-    println!(\"\");\n-    println!(\"The <command> must be one of:\");\n-    println!(\"  help    Print this message.\");\n-    println!(\"  build   Build the book in subdirectory _book\");\n-    println!(\"  serve   --NOT YET IMPLEMENTED--\");\n-    println!(\"  test    --NOT YET IMPLEMENTED--\");\n-}"}, {"sha": "906251db1c2f216a4643a5cbd6f15c3b746f2a0d", "filename": "src/tools/rustbook/main.rs", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fmain.rs?ref=717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "patch": "@@ -1,69 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![deny(warnings)]\n-\n-#![feature(rustc_private)]\n-#![feature(rustdoc)]\n-\n-extern crate rustdoc;\n-extern crate rustc_back;\n-\n-use std::env;\n-use std::process;\n-use std::sync::atomic::{AtomicIsize, ATOMIC_ISIZE_INIT, Ordering};\n-use term::Term;\n-\n-mod term;\n-mod error;\n-mod book;\n-\n-mod subcommand;\n-mod help;\n-mod build;\n-mod serve;\n-mod test;\n-\n-static EXIT_STATUS: AtomicIsize = ATOMIC_ISIZE_INIT;\n-\n-pub fn main() {\n-    let mut term = Term::new();\n-    let cmd: Vec<_> = env::args().collect();\n-\n-    if cmd.len() <= 1 {\n-        help::usage()\n-    } else {\n-        match subcommand::parse_name(&cmd[1][..]) {\n-            Some(mut subcmd) => {\n-                match subcmd.parse_args(&cmd[..cmd.len()-1]) {\n-                    Ok(_) => {\n-                        match subcmd.execute(&mut term) {\n-                            Ok(_) => (),\n-                            Err(err) => {\n-                                term.err(&format!(\"error: {}\", err));\n-                            }\n-                        }\n-                    }\n-                    Err(err) => {\n-                        println!(\"{}\", err.description());\n-                        println!(\"\");\n-                        subcmd.usage();\n-                    }\n-                }\n-            }\n-            None => {\n-                println!(\"Unrecognized command '{}'.\", cmd[1]);\n-                println!(\"\");\n-                help::usage();\n-            }\n-        }\n-    }\n-    process::exit(EXIT_STATUS.load(Ordering::SeqCst) as i32);\n-}"}, {"sha": "2fa7b7eed7b05d77a8bd6f58ea0b29c7a4f7bc48", "filename": "src/tools/rustbook/serve.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fserve.rs?ref=717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Implementation of the `serve` subcommand. Just a stub for now.\n-\n-use subcommand::Subcommand;\n-use error::CliResult;\n-use error::CommandResult;\n-use term::Term;\n-\n-struct Serve;\n-\n-pub fn parse_cmd(name: &str) -> Option<Box<Subcommand>> {\n-    if name == \"serve\" {\n-        Some(Box::new(Serve))\n-    } else {\n-        None\n-    }\n-}\n-\n-impl Subcommand for Serve {\n-    fn parse_args(&mut self, _: &[String]) -> CliResult<()> {\n-        Ok(())\n-    }\n-    fn usage(&self) {}\n-    fn execute(&mut self, _: &mut Term) -> CommandResult<()> {\n-        Ok(())\n-    }\n-}"}, {"sha": "837c934934ab9101af75ee9b7b388e33e0beffd9", "filename": "src/tools/rustbook/src/main.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a076961fd0e3d8a68f8b047460b8f5191d203b08/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=a076961fd0e3d8a68f8b047460b8f5191d203b08", "patch": "@@ -0,0 +1,79 @@\n+extern crate mdbook;\n+#[macro_use]\n+extern crate clap;\n+\n+use std::env;\n+use std::error::Error;\n+use std::io::{self, Write};\n+use std::path::{Path, PathBuf};\n+\n+use clap::{App, ArgMatches, SubCommand, AppSettings};\n+\n+use mdbook::MDBook;\n+\n+const NAME: &'static str = \"rustbook\";\n+\n+fn main() {\n+    // Create a list of valid arguments and sub-commands\n+    let matches = App::new(NAME)\n+                    .about(\"Build a book with mdBook\")\n+                    .author(\"Steve Klabnik <steve@steveklabnik.com>\")\n+                    .version(&*format!(\"v{}\", crate_version!()))\n+                    .setting(AppSettings::SubcommandRequired)\n+                    .subcommand(SubCommand::with_name(\"build\")\n+                        .about(\"Build the book from the markdown files\")\n+                        .arg_from_usage(\"-d, --dest-dir=[dest-dir] 'The output directory for your book{n}(Defaults to ./book when omitted)'\")\n+                        .arg_from_usage(\"[dir] 'A directory for your book{n}(Defaults to Current Directory when omitted)'\"))\n+                    .get_matches();\n+\n+    // Check which subcomamnd the user ran...\n+    let res = match matches.subcommand() {\n+        (\"build\", Some(sub_matches)) => build(sub_matches),\n+        (\"test\", Some(sub_matches)) => test(sub_matches),\n+        (_, _) => unreachable!(),\n+    };\n+\n+    if let Err(e) = res {\n+        writeln!(&mut io::stderr(), \"An error occured:\\n{}\", e).ok();\n+        ::std::process::exit(101);\n+    }\n+}\n+\n+// Build command implementation\n+fn build(args: &ArgMatches) -> Result<(), Box<Error>> {\n+    let book_dir = get_book_dir(args);\n+    let book = MDBook::new(&book_dir).read_config();\n+\n+    let mut book = match args.value_of(\"dest-dir\") {\n+        Some(dest_dir) => book.set_dest(Path::new(dest_dir)),\n+        None => book\n+    };\n+\n+    try!(book.build());\n+\n+    Ok(())\n+}\n+\n+fn test(args: &ArgMatches) -> Result<(), Box<Error>> {\n+    let book_dir = get_book_dir(args);\n+    let mut book = MDBook::new(&book_dir).read_config();\n+\n+    try!(book.test());\n+\n+    Ok(())\n+}\n+\n+fn get_book_dir(args: &ArgMatches) -> PathBuf {\n+    if let Some(dir) = args.value_of(\"dir\") {\n+        // Check if path is relative from current dir, or absolute...\n+        let p = Path::new(dir);\n+        if p.is_relative() {\n+            env::current_dir().unwrap().join(dir)\n+        } else {\n+            p.to_path_buf()\n+        }\n+    } else {\n+        env::current_dir().unwrap()\n+    }\n+}\n+"}, {"sha": "ba0151fa2ed4773116c06a94773cdb844806331b", "filename": "src/tools/rustbook/static/rustbook.css", "status": "removed", "additions": 0, "deletions": 157, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fstatic%2Frustbook.css", "raw_url": "https://github.com/rust-lang/rust/raw/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fstatic%2Frustbook.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fstatic%2Frustbook.css?ref=717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "patch": "@@ -1,157 +0,0 @@\n-/**\n- * Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n- * file at the top-level directory of this distribution and at\n- * http://rust-lang.org/COPYRIGHT.\n- *\n- * Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n- * http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n- * <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n- * option. This file may not be copied, modified, or distributed\n- * except according to those terms.\n- */\n-\n-@import url('../rust.css');\n-\n-body {\n-    max-width: none;\n-    font: 16px/1.6 'Source Serif Pro', Georgia, Times, 'Times New Roman', serif;\n-    color: #333;\n-}\n-\n-h1, h2, h3, h4, h5, h6 {\n-    font-family: 'Open Sans', 'Fira Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n-    font-weight: bold;\n-    color: #333;\n-}\n-\n-@media only screen {\n-    #toc {\n-        position: fixed;\n-        top: 0;\n-        left: 0;\n-        bottom: 0;\n-        width: 300px;\n-        overflow-y: auto;\n-        border-right: 1px solid #e8e8e8;\n-        padding: 0 15px;\n-        font-size: 14px;\n-        background-color: #fafafa;\n-        -webkit-overflow-scrolling: touch;\n-    }\n-\n-    #page-wrapper {\n-        position: absolute;\n-        top: 0;\n-        left: 300px;\n-        right: 0;\n-        padding: 0 15px;\n-        -webkit-overflow-scrolling: touch;\n-    }\n-}\n-\n-@media only print {\n-    #toc, #nav {\n-        display: none;\n-    }\n-}\n-\n-@media only screen and (max-width: 1023px) {\n-    #toc {\n-        width: 100%;\n-        top: 40px;\n-    }\n-\n-    #page-wrapper {\n-        top: 40px;\n-        left: 0;\n-    }\n-\n-    .mobile-hidden {\n-        display: none;\n-    }\n-}\n-\n-#page {\n-    margin: 0 auto;\n-    max-width: 750px;\n-    padding-bottom: 50px;\n-}\n-\n-.chapter {\n-    list-style: none;\n-    padding-left: 0;\n-    line-height: 30px;\n-}\n-\n-.section {\n-    list-style: none;\n-    padding-left: 20px;\n-    line-height: 40px;\n-}\n-\n-.section li {\n-    text-overflow: ellipsis;\n-    overflow: hidden;\n-    white-space: nowrap;\n-}\n-\n-.chapter li a {\n-    color: #333;\n-    padding: 5px 0;\n-}\n-\n-.chapter li a.active,\n-.chapter li a:hover {\n-    color: #008cff;\n-    text-decoration: none;\n-}\n-\n-#toggle-nav {\n-    cursor: pointer;\n-    margin-top: 5px;\n-    width: 30px;\n-    height: 30px;\n-    background-color: #fff;\n-    border: 1px solid #666;\n-    border-radius: 3px;\n-    padding: 3px 3px 0 3px;\n-}\n-\n-.sr-only {\n-    position: absolute;\n-    width: 1px;\n-    height: 1px;\n-    margin: -1px;\n-    padding: 0;\n-    overflow: hidden;\n-    clip: rect(0, 0, 0, 0);\n-    border: 0;\n-}\n-\n-.bar {\n-    display: block;\n-    background-color: #000;\n-    border-radius: 2px;\n-    width: 100%;\n-    height: 2px;\n-    margin: 2px 0 3px;\n-    padding: 0;\n-}\n-\n-pre {\n-    padding: 11px;\n-    overflow: auto;\n-    font-size: 85%;\n-    line-height: 1.45;\n-    background-color: #f7f7f7;\n-    border: 0;\n-    border-radius: 3px;\n-}\n-\n-.left {\n-    float: left;\n-}\n-\n-.right {\n-    float: right;\n-}"}, {"sha": "d8ab15260edb47448d08f0290f1695979201ec29", "filename": "src/tools/rustbook/static/rustbook.js", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fstatic%2Frustbook.js", "raw_url": "https://github.com/rust-lang/rust/raw/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fstatic%2Frustbook.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fstatic%2Frustbook.js?ref=717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "patch": "@@ -1,78 +0,0 @@\n-// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*jslint browser: true, es5: true */\n-/*globals $: true, rootPath: true */\n-\n-document.addEventListener('DOMContentLoaded', function() {\n-    'use strict';\n-\n-    document.getElementById('toggle-nav').onclick = function(e) {\n-        var toc = document.getElementById('toc');\n-        var pagewrapper = document.getElementById('page-wrapper');\n-        toggleClass(toc, 'mobile-hidden');\n-        toggleClass(pagewrapper, 'mobile-hidden');\n-    };\n-\n-    function toggleClass(el, className) {\n-        // from http://youmightnotneedjquery.com/\n-        if (el.classList) {\n-            el.classList.toggle(className);\n-        } else {\n-            var classes = el.className.split(' ');\n-            var existingIndex = classes.indexOf(className);\n-\n-            if (existingIndex >= 0) {\n-                classes.splice(existingIndex, 1);\n-            } else {\n-                classes.push(className);\n-            }\n-\n-            el.className = classes.join(' ');\n-        }\n-    }\n-\n-    // The below code is used to add prev and next navigation links to the\n-    // bottom of each of the sections.\n-    // It works by extracting the current page based on the url and iterates\n-    // over the menu links until it finds the menu item for the current page. We\n-    // then create a copy of the preceding and following menu links and add the\n-    // correct css class and insert them into the bottom of the page.\n-    var toc = document.getElementById('toc').getElementsByTagName('a');\n-    var href = document.location.pathname.split('/').pop();\n-\n-    if (href === 'index.html' || href === '') {\n-        href = 'README.html';\n-    }\n-\n-    for (var i = 0; i < toc.length; i++) {\n-        if (toc[i].attributes.href.value.split('/').pop() === href) {\n-            var nav = document.createElement('p');\n-\n-            if (i > 0) {\n-                var prevNode = toc[i-1].cloneNode(true);\n-                prevNode.className = 'left';\n-                prevNode.setAttribute('rel', 'prev');\n-                nav.appendChild(prevNode);\n-            }\n-\n-            if (i < toc.length - 1) {\n-                var nextNode = toc[i+1].cloneNode(true);\n-                nextNode.className = 'right';\n-                nextNode.setAttribute('rel', 'next');\n-                nav.appendChild(nextNode);\n-            }\n-\n-            document.getElementById('page').appendChild(nav);\n-\n-            break;\n-        }\n-    }\n-});"}, {"sha": "a66c2b4f3024dda9bc90bd6c194b876df9555d53", "filename": "src/tools/rustbook/subcommand.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fsubcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fsubcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsubcommand.rs?ref=717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "patch": "@@ -1,44 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Common API for all rustbook subcommands.\n-\n-use error::CliResult;\n-use error::CommandResult;\n-use term::Term;\n-\n-use help;\n-use build;\n-use serve;\n-use test;\n-\n-pub trait Subcommand {\n-    /// Mutate the subcommand by parsing its arguments.\n-    ///\n-    /// Returns `Err` on a parsing error.\n-    fn parse_args(&mut self, args: &[String]) -> CliResult<()>;\n-    /// Print the CLI usage information.\n-    fn usage(&self);\n-    /// Actually execute the subcommand.\n-    fn execute(&mut self, term: &mut Term) -> CommandResult<()>;\n-}\n-\n-/// Create a Subcommand object based on its name.\n-pub fn parse_name(name: &str) -> Option<Box<Subcommand>> {\n-    let cmds: [fn(&str) -> Option<Box<Subcommand>>; 4] = [help::parse_cmd,\n-                                                          build::parse_cmd,\n-                                                          serve::parse_cmd,\n-                                                          test::parse_cmd];\n-    for parser in &cmds {\n-        let parsed = (*parser)(name);\n-        if parsed.is_some() { return parsed }\n-    }\n-    None\n-}"}, {"sha": "cdd25e67c8ff13274da1928c75296862c8c958af", "filename": "src/tools/rustbook/term.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fterm.rs?ref=717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! An abstraction of the terminal. Eventually, provide color and\n-//! verbosity support. For now, just a wrapper around stdout/stderr.\n-\n-use std::io;\n-use std::io::prelude::*;\n-use std::sync::atomic::Ordering;\n-\n-pub struct Term {\n-    err: Box<Write + 'static>\n-}\n-\n-impl Term {\n-    pub fn new() -> Term {\n-        Term {\n-            err: Box::new(io::stderr())\n-        }\n-    }\n-\n-    pub fn err(&mut self, msg: &str) {\n-        // swallow any errors\n-        let _ = writeln!(&mut self.err, \"{}\", msg);\n-        ::EXIT_STATUS.store(101, Ordering::SeqCst);\n-    }\n-}"}, {"sha": "002c46a7af48db021a0ad5776467bcb23a93c31d", "filename": "src/tools/rustbook/test.rs", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee/src%2Ftools%2Frustbook%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Ftest.rs?ref=717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "patch": "@@ -1,75 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Implementation of the `test` subcommand. Just a stub for now.\n-\n-use subcommand::Subcommand;\n-use error::{err, CliResult, CommandResult};\n-use term::Term;\n-use book;\n-\n-use std::fs::File;\n-use std::env;\n-use std::process::Command;\n-\n-struct Test;\n-\n-pub fn parse_cmd(name: &str) -> Option<Box<Subcommand>> {\n-    if name == \"test\" {\n-        Some(Box::new(Test))\n-    } else {\n-        None\n-    }\n-}\n-\n-impl Subcommand for Test {\n-    fn parse_args(&mut self, _: &[String]) -> CliResult<()> {\n-        Ok(())\n-    }\n-    fn usage(&self) {}\n-    fn execute(&mut self, term: &mut Term) -> CommandResult<()> {\n-        let cwd = env::current_dir().unwrap();\n-        let src = cwd.clone();\n-\n-        let mut summary = File::open(&src.join(\"SUMMARY.md\"))?;\n-        match book::parse_summary(&mut summary, &src) {\n-            Ok(book) => {\n-                for (_, item) in book.iter() {\n-                    let output_result = Command::new(\"rustdoc\")\n-                        .arg(&item.path)\n-                        .arg(\"--test\")\n-                        .output();\n-                    match output_result {\n-                        Ok(output) => {\n-                            if !output.status.success() {\n-                                term.err(&format!(\"{}\\n{}\",\n-                                         String::from_utf8_lossy(&output.stdout),\n-                                         String::from_utf8_lossy(&output.stderr)));\n-                                return Err(err(\"some tests failed\"));\n-                            }\n-\n-                        }\n-                        Err(e) => {\n-                            let message = format!(\"could not execute `rustdoc`: {}\", e);\n-                            return Err(err(&message))\n-                        }\n-                    }\n-                }\n-            }\n-            Err(errors) => {\n-                for err in errors {\n-                    term.err(&err[..]);\n-                }\n-                return Err(err(\"there was an error\"))\n-            }\n-        }\n-        Ok(()) // lol\n-    }\n-}"}]}