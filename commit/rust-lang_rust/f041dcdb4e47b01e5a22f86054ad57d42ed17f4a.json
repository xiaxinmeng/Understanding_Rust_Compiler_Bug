{"sha": "f041dcdb4e47b01e5a22f86054ad57d42ed17f4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNDFkY2RiNGU0N2IwMWU1YTIyZjg2MDU0YWQ1N2Q0MmVkMTdmNGE=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-03-18T14:27:25Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-03-18T14:27:25Z"}, "message": "Fix limit-stderr-files test", "tree": {"sha": "ba827a788603092ae1308633ea713c33278f3c51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba827a788603092ae1308633ea713c33278f3c51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f041dcdb4e47b01e5a22f86054ad57d42ed17f4a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl5yL80ACgkQLO/Nsn7Q\nvnmQXQ//UD7ToBlnK0u5lYWnT6a2JJVioNfsVIyXIMds6A/DeBe9cJkU6M8016wh\nxI4RRcFIAEY34Q+7WLxq9WPxF0MXd0SWaYNuaHh1RBUjJaxPeYwYS88rpvgrdd4R\nE8DLCkxQHOdu317z/2/extq0DhqUlD9tHPEJz4pRKMIR/HPh9RsB4obs0YywKIaG\n+FwZE7vHaeKI/vma4uxdPkCR3Y55Ho32UMXwSTpLPFlFGNl8hQ/cfZJ/5bOI42zK\nNnrDXvY7da67uf08oTKLGQ1dhIbcb8XYggxmleHQXVa+Y6GDxgmKtFxJYYwCxvyI\n/bADEA/bQdpZLtEB3ujI2mh7M4YqWgBZrXfXmF8Z6y75YgsAkJV7dVt+T3vA/CVh\n3r2iFhrAaQR/NzKsM6tCSwHXIKwNW1ZeyCOO/VhFUk8/yewdzcDozBFT59QnY/Ke\n81RffzomZLPWynF/DI+dIcNo+ph+C8/5j/2kPvFJulot1VZBQ1w+JFP/snsnejSv\nzUrAUfYz0oDL4eQSDHK6ksr8r2g3rYeDVa4OFUWot9k+dvyiPq4411nRLr4Eax5+\naC9DBX8loC3DZ4BPO8Vwdow6K9KXGk46lTBVKbyuXtYcLc1yJDczkH1TdFqm4qmX\nXf/f6I2+wvsGkHaNeIaCfX/CCjl2lxCeFpVSfR3xSvIEePVmwxU=\n=DXo3\n-----END PGP SIGNATURE-----", "payload": "tree ba827a788603092ae1308633ea713c33278f3c51\nparent a808779441bc6fdd6ea4c78366229d5c660d6abf\nauthor flip1995 <hello@philkrones.com> 1584541645 +0100\ncommitter flip1995 <hello@philkrones.com> 1584541645 +0100\n\nFix limit-stderr-files test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f041dcdb4e47b01e5a22f86054ad57d42ed17f4a", "html_url": "https://github.com/rust-lang/rust/commit/f041dcdb4e47b01e5a22f86054ad57d42ed17f4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f041dcdb4e47b01e5a22f86054ad57d42ed17f4a/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a808779441bc6fdd6ea4c78366229d5c660d6abf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a808779441bc6fdd6ea4c78366229d5c660d6abf", "html_url": "https://github.com/rust-lang/rust/commit/a808779441bc6fdd6ea4c78366229d5c660d6abf"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "c511733f7bf47b194572fdaaa5aadb7aed9bae99", "filename": "clippy_dev/src/stderr_length_check.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f041dcdb4e47b01e5a22f86054ad57d42ed17f4a/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f041dcdb4e47b01e5a22f86054ad57d42ed17f4a/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fstderr_length_check.rs?ref=f041dcdb4e47b01e5a22f86054ad57d42ed17f4a", "patch": "@@ -4,6 +4,8 @@ use std::path::{Path, PathBuf};\n \n use walkdir::WalkDir;\n \n+use clippy_dev::clippy_project_root;\n+\n // The maximum length allowed for stderr files.\n //\n // We limit this because small files are easier to deal with than bigger files.\n@@ -14,22 +16,24 @@ pub fn check() {\n \n     if !exceeding_files.is_empty() {\n         eprintln!(\"Error: stderr files exceeding limit of {} lines:\", LENGTH_LIMIT);\n-        for path in exceeding_files {\n-            println!(\"{}\", path.display());\n+        for (path, count) in exceeding_files {\n+            println!(\"{}: {}\", path.display(), count);\n         }\n         std::process::exit(1);\n     }\n }\n \n-fn exceeding_stderr_files() -> Vec<PathBuf> {\n+fn exceeding_stderr_files() -> Vec<(PathBuf, usize)> {\n     // We use `WalkDir` instead of `fs::read_dir` here in order to recurse into subdirectories.\n-    WalkDir::new(\"../tests/ui\")\n+    WalkDir::new(clippy_project_root().join(\"tests/ui\"))\n         .into_iter()\n         .filter_map(Result::ok)\n+        .filter(|f| !f.file_type().is_dir())\n         .filter_map(|e| {\n             let p = e.into_path();\n-            if p.extension() == Some(OsStr::new(\"stderr\")) && count_linenumbers(&p) > LENGTH_LIMIT {\n-                Some(p)\n+            let count = count_linenumbers(&p);\n+            if p.extension() == Some(OsStr::new(\"stderr\")) && count > LENGTH_LIMIT {\n+                Some((p, count))\n             } else {\n                 None\n             }"}]}