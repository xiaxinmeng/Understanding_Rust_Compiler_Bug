{"sha": "df04fd6fba2e1b2b85a108e3ec7e56c731456ba9", "node_id": "C_kwDOAAsO6NoAKGRmMDRmZDZmYmEyZTFiMmI4NWExMDhlM2VjN2U1NmM3MzE0NTZiYTk", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-01T13:55:28Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-01T13:55:28Z"}, "message": "Don't force many scalar pair values to the stack in write_cvalue_maybe_transmute\n\nSometimes it is necessary for handling vector to scalar pair transmutes,\nbut if the types are the same there is no need for this.\n\nThis improves runtime performance on simple-raytracer by 12%.", "tree": {"sha": "28af2041f265868ec36fa0ae513fbb09f02bf83a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28af2041f265868ec36fa0ae513fbb09f02bf83a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df04fd6fba2e1b2b85a108e3ec7e56c731456ba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df04fd6fba2e1b2b85a108e3ec7e56c731456ba9", "html_url": "https://github.com/rust-lang/rust/commit/df04fd6fba2e1b2b85a108e3ec7e56c731456ba9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df04fd6fba2e1b2b85a108e3ec7e56c731456ba9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79f4cc0822578199fa9ffee6f0abf909b8976ab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/79f4cc0822578199fa9ffee6f0abf909b8976ab9", "html_url": "https://github.com/rust-lang/rust/commit/79f4cc0822578199fa9ffee6f0abf909b8976ab9"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "abf63e33c35370ce39bbccb9d0c999217a0ce330", "filename": "src/abi/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df04fd6fba2e1b2b85a108e3ec7e56c731456ba9/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04fd6fba2e1b2b85a108e3ec7e56c731456ba9/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=df04fd6fba2e1b2b85a108e3ec7e56c731456ba9", "patch": "@@ -98,12 +98,12 @@ pub(super) fn add_local_place_comments<'tcx>(\n         }\n         CPlaceInner::VarPair(place_local, var1, var2) => {\n             assert_eq!(local, place_local);\n-            (\"ssa\", Cow::Owned(format!(\",var=({}, {})\", var1.index(), var2.index())))\n+            (\"ssa\", Cow::Owned(format!(\"var=({}, {})\", var1.index(), var2.index())))\n         }\n         CPlaceInner::VarLane(_local, _var, _lane) => unreachable!(),\n         CPlaceInner::Addr(ptr, meta) => {\n             let meta = if let Some(meta) = meta {\n-                Cow::Owned(format!(\",meta={}\", meta))\n+                Cow::Owned(format!(\"meta={}\", meta))\n             } else {\n                 Cow::Borrowed(\"\")\n             };"}, {"sha": "cc4493d442f7ddfc1e46f502d070ef74822ba1f9", "filename": "src/value_and_place.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df04fd6fba2e1b2b85a108e3ec7e56c731456ba9/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04fd6fba2e1b2b85a108e3ec7e56c731456ba9/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=df04fd6fba2e1b2b85a108e3ec7e56c731456ba9", "patch": "@@ -588,10 +588,13 @@ impl<'tcx> CPlace<'tcx> {\n                 return;\n             }\n             CPlaceInner::VarPair(_local, var1, var2) => {\n-                let (ptr, meta) = from.force_stack(fx);\n-                assert!(meta.is_none());\n-                let (data1, data2) =\n-                    CValue(CValueInner::ByRef(ptr, None), dst_layout).load_scalar_pair(fx);\n+                let (data1, data2) = if self.layout().ty == dst_layout.ty {\n+                    CValue(from.0, dst_layout).load_scalar_pair(fx)\n+                } else {\n+                    let (ptr, meta) = from.force_stack(fx);\n+                    assert!(meta.is_none());\n+                    CValue(CValueInner::ByRef(ptr, None), dst_layout).load_scalar_pair(fx)\n+                };\n                 let (dst_ty1, dst_ty2) = fx.clif_pair_type(self.layout().ty).unwrap();\n                 transmute_value(fx, var1, data1, dst_ty1);\n                 transmute_value(fx, var2, data2, dst_ty2);"}]}