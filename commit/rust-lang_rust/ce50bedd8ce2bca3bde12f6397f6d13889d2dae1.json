{"sha": "ce50bedd8ce2bca3bde12f6397f6d13889d2dae1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNTBiZWRkOGNlMmJjYTNiZGUxMmY2Mzk3ZjZkMTM4ODlkMmRhZTE=", "commit": {"author": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2016-07-24T09:49:10Z"}, "committer": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2016-07-24T09:49:10Z"}, "message": "Pass -DLLVM_RUSTLLVM to compile against rust llvm fork.\n\nIf using system llvm don't try use modifications made in the fork.", "tree": {"sha": "e3b8496be3f3915c730b7b6d8a6a093ce59d0c16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3b8496be3f3915c730b7b6d8a6a093ce59d0c16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce50bedd8ce2bca3bde12f6397f6d13889d2dae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce50bedd8ce2bca3bde12f6397f6d13889d2dae1", "html_url": "https://github.com/rust-lang/rust/commit/ce50bedd8ce2bca3bde12f6397f6d13889d2dae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce50bedd8ce2bca3bde12f6397f6d13889d2dae1/comments", "author": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6aee1e2a67d0608257a1087477e11e5b37e48d87", "url": "https://api.github.com/repos/rust-lang/rust/commits/6aee1e2a67d0608257a1087477e11e5b37e48d87", "html_url": "https://github.com/rust-lang/rust/commit/6aee1e2a67d0608257a1087477e11e5b37e48d87"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "26b593c8c47b68cbaf8e9afc56c5fb93345152ab", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce50bedd8ce2bca3bde12f6397f6d13889d2dae1/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ce50bedd8ce2bca3bde12f6397f6d13889d2dae1/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=ce50bedd8ce2bca3bde12f6397f6d13889d2dae1", "patch": "@@ -32,6 +32,11 @@ RUSTLLVM_INCS_$(1) = $$(LLVM_EXTRA_INCDIRS_$(1)) \\\n                      $$(call CFG_CC_INCLUDE_$(1),$$(S)src/rustllvm/include)\n RUSTLLVM_OBJS_OBJS_$(1) := $$(RUSTLLVM_OBJS_CS_$(1):rustllvm/%.cpp=$(1)/rustllvm/%.o)\n \n+# Flag that we are building with Rust's llvm fork\n+ifeq ($(CFG_LLVM_ROOT),)\n+RUSTLLVM_CXXFLAGS_$(1) := -DLLVM_RUSTLLVM\n+endif\n+\n # Note that we appease `cl.exe` and its need for some sort of exception\n # handling flag with the `EHsc` argument here as well.\n ifeq ($$(findstring msvc,$(1)),msvc)\n@@ -55,6 +60,7 @@ $(1)/rustllvm/%.o: $(S)src/rustllvm/%.cpp $$(MKFILE_DEPS) $$(LLVM_CONFIG_$(1))\n \t$$(Q)$$(call CFG_COMPILE_CXX_$(1), $$@,) \\\n \t\t$$(subst  /,//,$$(LLVM_CXXFLAGS_$(1))) \\\n \t\t$$(RUSTLLVM_COMPONENTS_$(1)) \\\n+\t\t$$(RUSTLLVM_CXXFLAGS_$(1)) \\\n \t\t$$(EXTRA_RUSTLLVM_CXXFLAGS_$(1)) \\\n \t\t$$(RUSTLLVM_INCS_$(1)) \\\n \t\t$$<"}, {"sha": "b94e667701c826d825a5cfd36ddee780f817e561", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ce50bedd8ce2bca3bde12f6397f6d13889d2dae1/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ce50bedd8ce2bca3bde12f6397f6d13889d2dae1/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=ce50bedd8ce2bca3bde12f6397f6d13889d2dae1", "patch": "@@ -162,6 +162,7 @@ LLVMRustHasFeature(LLVMTargetMachineRef TM,\n     return (Bits & FeatureEntry->Value) == FeatureEntry->Value;\n }\n \n+#if LLVM_RUSTLLVM\n /// getLongestEntryLength - Return the length of the longest entry in the table.\n ///\n static size_t getLongestEntryLength(ArrayRef<SubtargetFeatureKV> Table) {\n@@ -178,7 +179,7 @@ LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM) {\n     const ArrayRef<SubtargetFeatureKV> CPUTable = MCInfo->getCPUTable();\n     unsigned MaxCPULen = getLongestEntryLength(CPUTable);\n \n-    printf(\"Available CPUs for this target:\\n\\n\");\n+    printf(\"Available CPUs for this target:\\n\");\n     for (auto &CPU : CPUTable)\n         printf(\"    %-*s - %s.\\n\", MaxCPULen, CPU.Key, CPU.Desc);\n     printf(\"\\n\");\n@@ -191,15 +192,28 @@ LLVMRustPrintTargetFeatures(LLVMTargetMachineRef TM) {\n     const ArrayRef<SubtargetFeatureKV> FeatTable = MCInfo->getFeatureTable();\n     unsigned MaxFeatLen = getLongestEntryLength(FeatTable);\n \n-    printf(\"Available features for this target:\\n\\n\");\n+    printf(\"Available features for this target:\\n\");\n     for (auto &Feature : FeatTable)\n         printf(\"    %-*s - %s.\\n\", MaxFeatLen, Feature.Key, Feature.Desc);\n     printf(\"\\n\");\n \n     printf(\"Use +feature to enable a feature, or -feature to disable it.\\n\"\n-            \"For example, rustc -C -target-cpu=mycpu -C target-feature=+feature1,-feature2\\n\");\n+            \"For example, rustc -C -target-cpu=mycpu -C target-feature=+feature1,-feature2\\n\\n\");\n }\n \n+#else\n+\n+extern \"C\" void\n+LLVMRustPrintTargetCPUs(LLVMTargetMachineRef) {\n+    printf(\"Target CPU help is not supported by this LLVM version.\\n\\n\");\n+}\n+\n+extern \"C\" void\n+LLVMRustPrintTargetFeatures(LLVMTargetMachineRef) {\n+    printf(\"Target features help is not supported by this LLVM version.\\n\\n\");\n+}\n+#endif\n+\n extern \"C\" LLVMTargetMachineRef\n LLVMRustCreateTargetMachine(const char *triple,\n                             const char *cpu,"}]}