{"sha": "997f34504685085da149221c5fda4e4cd941ae53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5N2YzNDUwNDY4NTA4NWRhMTQ5MjIxYzVmZGE0ZTRjZDk0MWFlNTM=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-16T06:33:10Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-16T06:38:47Z"}, "message": "all: remove unneeded as_str() calls for ast::Name\n\nName has PartialEq and Display impls that do what we want.", "tree": {"sha": "f8edb12df0b4732faf7c206d77c2f307e14353e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8edb12df0b4732faf7c206d77c2f307e14353e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/997f34504685085da149221c5fda4e4cd941ae53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/997f34504685085da149221c5fda4e4cd941ae53", "html_url": "https://github.com/rust-lang/rust/commit/997f34504685085da149221c5fda4e4cd941ae53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/997f34504685085da149221c5fda4e4cd941ae53/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f494f14aa6aedf2abbe9e4876cf57fc55a42490e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f494f14aa6aedf2abbe9e4876cf57fc55a42490e", "html_url": "https://github.com/rust-lang/rust/commit/f494f14aa6aedf2abbe9e4876cf57fc55a42490e"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "850155b28b663631fbb8bcd0d0eb4fa18cdecbac", "filename": "src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997f34504685085da149221c5fda4e4cd941ae53/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997f34504685085da149221c5fda4e4cd941ae53/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=997f34504685085da149221c5fda4e4cd941ae53", "patch": "@@ -103,7 +103,7 @@ fn check_attrs(cx: &Context, info: Option<&ExpnInfo>, ident: &Ident,\n                 span_lint(cx, INLINE_ALWAYS, attr.span, &format!(\n                     \"you have declared `#[inline(always)]` on `{}`. This \\\n                      is usually a bad idea. Are you sure?\",\n-                    ident.name.as_str()));\n+                    ident.name));\n             }\n         }\n     }"}, {"sha": "94f8d5873ec6d8fcec25a8f98ac1c68f84f10f9c", "filename": "src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/997f34504685085da149221c5fda4e4cd941ae53/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997f34504685085da149221c5fda4e4cd941ae53/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=997f34504685085da149221c5fda4e4cd941ae53", "patch": "@@ -55,7 +55,7 @@ fn check_trait_items(cx: &Context, item: &Item, trait_items: &[P<TraitItem>]) {\n     }\n \n     if !trait_items.iter().any(|i| is_named_self(i, \"is_empty\")) {\n-        //span_lint(cx, LEN_WITHOUT_IS_EMPTY, item.span, &format!(\"trait {}\", item.ident.as_str()));\n+        //span_lint(cx, LEN_WITHOUT_IS_EMPTY, item.span, &format!(\"trait {}\", item.ident));\n         for i in trait_items {\n             if is_named_self(i, \"len\") {\n                 span_lint(cx, LEN_WITHOUT_IS_EMPTY, i.span,\n@@ -122,7 +122,7 @@ fn has_is_empty(cx: &Context, expr: &Expr) -> bool {\n         if let &MethodTraitItemId(def_id) = id {\n             if let ty::MethodTraitItem(ref method) =\n                 cx.tcx.impl_or_trait_item(def_id) {\n-                    method.name.as_str() == \"is_empty\"\n+                    method.name == \"is_empty\"\n                         && method.fty.sig.skip_binder().inputs.len() == 1\n                 } else { false }\n         } else { false }"}, {"sha": "37204f036039a39aaf0f97e4e2eed3c9019181e1", "filename": "src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997f34504685085da149221c5fda4e4cd941ae53/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997f34504685085da149221c5fda4e4cd941ae53/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=997f34504685085da149221c5fda4e4cd941ae53", "patch": "@@ -153,7 +153,7 @@ struct RefVisitor(Vec<RefLt>);\n impl RefVisitor {\n     fn record(&mut self, lifetime: &Option<Lifetime>) {\n         if let &Some(ref lt) = lifetime {\n-            if lt.name.as_str() == \"'static\" {\n+            if lt.name == \"'static\" {\n                 self.0.push(Static);\n             } else {\n                 self.0.push(Named(lt.name));"}, {"sha": "092b5ce1196c42a1e1ea4390e4bb16853edfccbb", "filename": "src/loops.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/997f34504685085da149221c5fda4e4cd941ae53/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997f34504685085da149221c5fda4e4cd941ae53/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=997f34504685085da149221c5fda4e4cd941ae53", "patch": "@@ -36,13 +36,12 @@ impl LintPass for LoopsPass {\n                             span_lint(cx, NEEDLESS_RANGE_LOOP, expr.span, &format!(\n                                 \"the loop variable `{}` is used to index `{}`. Consider using \\\n                                  `for ({}, item) in {}.iter().enumerate()` or similar iterators.\",\n-                                ident.node.name.as_str(), indexed.as_str(),\n-                                ident.node.name.as_str(), indexed.as_str()));\n+                                ident.node.name, indexed, ident.node.name, indexed));\n                         } else {\n                             span_lint(cx, NEEDLESS_RANGE_LOOP, expr.span, &format!(\n                                 \"the loop variable `{}` is only used to index `{}`. \\\n                                  Consider using `for item in &{}` or similar iterators.\",\n-                                ident.node.name.as_str(), indexed.as_str(), indexed.as_str()));\n+                                ident.node.name, indexed, indexed));\n                         }\n                     }\n                 }\n@@ -52,7 +51,7 @@ impl LintPass for LoopsPass {\n             if let ExprMethodCall(ref method, _, ref args) = arg.node {\n                 // just the receiver, no arguments to iter() or iter_mut()\n                 if args.len() == 1 {\n-                    let method_name = method.node.name.as_str();\n+                    let method_name = method.node.name;\n                     if method_name == \"iter\" {\n                         let object = snippet(cx, args[0].span, \"_\");\n                         span_lint(cx, EXPLICIT_ITER_LOOP, expr.span, &format!("}, {"sha": "a9378da415a2fe5bd518d8503c7c2f1091bd72f4", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/997f34504685085da149221c5fda4e4cd941ae53/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997f34504685085da149221c5fda4e4cd941ae53/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=997f34504685085da149221c5fda4e4cd941ae53", "patch": "@@ -35,14 +35,14 @@ pub fn in_external_macro(cx: &Context, span: Span) -> bool {\n /// `match_def_path(cx, id, &[\"core\", \"option\", \"Option\"])`\n pub fn match_def_path(cx: &Context, def_id: DefId, path: &[&str]) -> bool {\n     cx.tcx.with_path(def_id, |iter| iter.map(|elem| elem.name())\n-        .zip(path.iter()).all(|(nm, p)| &nm.as_str() == p))\n+        .zip(path.iter()).all(|(nm, p)| nm == p))\n }\n \n /// match a Path against a slice of segment string literals, e.g.\n /// `match_path(path, &[\"std\", \"rt\", \"begin_unwind\"])`\n pub fn match_path(path: &Path, segments: &[&str]) -> bool {\n     path.segments.iter().rev().zip(segments.iter().rev()).all(\n-        |(a,b)| &a.identifier.name.as_str() == b)\n+        |(a, b)| &a.identifier.name == b)\n }\n \n /// convert a span to a code snippet if available, otherwise use default, e.g."}]}