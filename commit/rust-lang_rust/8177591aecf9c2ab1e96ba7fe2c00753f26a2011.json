{"sha": "8177591aecf9c2ab1e96ba7fe2c00753f26a2011", "node_id": "C_kwDOAAsO6NoAKDgxNzc1OTFhZWNmOWMyYWIxZTk2YmE3ZmUyYzAwNzUzZjI2YTIwMTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-03T07:25:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-03T07:25:40Z"}, "message": "Auto merge of #111516 - compiler-errors:issue-111500, r=jackh726\n\nDon't use `can_eq` in `derive(..)` suggestion for missing method\n\nUnsatisfied predicates returned from method probe may reference inference vars from that probe, so drop this extra check I added in #110877 for more accurate derive suggestions...\n\nFixes #111500", "tree": {"sha": "18369d32f59c65f5fb69fb66762340aeeb5e8fe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18369d32f59c65f5fb69fb66762340aeeb5e8fe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8177591aecf9c2ab1e96ba7fe2c00753f26a2011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8177591aecf9c2ab1e96ba7fe2c00753f26a2011", "html_url": "https://github.com/rust-lang/rust/commit/8177591aecf9c2ab1e96ba7fe2c00753f26a2011", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8177591aecf9c2ab1e96ba7fe2c00753f26a2011/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d5b746e1c83f23bc015e73582e102528f05db24", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d5b746e1c83f23bc015e73582e102528f05db24", "html_url": "https://github.com/rust-lang/rust/commit/7d5b746e1c83f23bc015e73582e102528f05db24"}, {"sha": "c5604cd0b58f1f2c527ae76dac75a94c7dd23824", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5604cd0b58f1f2c527ae76dac75a94c7dd23824", "html_url": "https://github.com/rust-lang/rust/commit/c5604cd0b58f1f2c527ae76dac75a94c7dd23824"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "7a484e7ddc51ea34694e9abb4b6686c3478cffe9", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8177591aecf9c2ab1e96ba7fe2c00753f26a2011/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8177591aecf9c2ab1e96ba7fe2c00753f26a2011/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=8177591aecf9c2ab1e96ba7fe2c00753f26a2011", "patch": "@@ -2110,20 +2110,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     | sym::Hash\n                     | sym::Debug => true,\n                     _ => false,\n-                } && match trait_pred.trait_ref.substs.as_slice() {\n-                    // Only suggest deriving if lhs == rhs...\n-                    [lhs, rhs] => {\n-                        if let Some(lhs) = lhs.as_type()\n-                            && let Some(rhs) = rhs.as_type()\n-                        {\n-                            self.can_eq(self.param_env, lhs, rhs)\n-                        } else {\n-                            false\n-                        }\n-                    },\n-                    // Unary ops can always be derived\n-                    [_] => true,\n-                    _ => false,\n                 };\n                 if can_derive {\n                     let self_name = trait_pred.self_ty().to_string();"}, {"sha": "f6d7968c0c40513f891fe9c92bca2da9839f2538", "filename": "tests/ui/issues/issue-62375.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8177591aecf9c2ab1e96ba7fe2c00753f26a2011/tests%2Fui%2Fissues%2Fissue-62375.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8177591aecf9c2ab1e96ba7fe2c00753f26a2011/tests%2Fui%2Fissues%2Fissue-62375.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-62375.stderr?ref=8177591aecf9c2ab1e96ba7fe2c00753f26a2011", "patch": "@@ -11,8 +11,11 @@ note: an implementation of `PartialEq<fn(()) -> A {A::Value}>` might be missing\n    |\n LL | enum A {\n    | ^^^^^^ must implement `PartialEq<fn(()) -> A {A::Value}>`\n-note: the trait `PartialEq` must be implemented\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+help: consider annotating `A` with `#[derive(PartialEq)]`\n+   |\n+LL + #[derive(PartialEq)]\n+LL | enum A {\n+   |\n help: use parentheses to construct this tuple variant\n    |\n LL |     a == A::Value(/* () */);"}, {"sha": "094c93a8535d852ad952d31e1d902bae890ebdae", "filename": "tests/ui/typeck/derive-sugg-arg-arity.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8177591aecf9c2ab1e96ba7fe2c00753f26a2011/tests%2Fui%2Ftypeck%2Fderive-sugg-arg-arity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8177591aecf9c2ab1e96ba7fe2c00753f26a2011/tests%2Fui%2Ftypeck%2Fderive-sugg-arg-arity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fderive-sugg-arg-arity.rs?ref=8177591aecf9c2ab1e96ba7fe2c00753f26a2011", "patch": "@@ -0,0 +1,8 @@\n+pub struct A;\n+\n+fn main() {\n+    match () {\n+        _ => match A::partial_cmp() {},\n+        //~^ ERROR the function or associated item `partial_cmp` exists for struct `A`, but its trait bounds were not satisfied\n+    }\n+}"}, {"sha": "5b4c481719830f39864eb976641ab830965db27d", "filename": "tests/ui/typeck/derive-sugg-arg-arity.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8177591aecf9c2ab1e96ba7fe2c00753f26a2011/tests%2Fui%2Ftypeck%2Fderive-sugg-arg-arity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8177591aecf9c2ab1e96ba7fe2c00753f26a2011/tests%2Fui%2Ftypeck%2Fderive-sugg-arg-arity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fderive-sugg-arg-arity.stderr?ref=8177591aecf9c2ab1e96ba7fe2c00753f26a2011", "patch": "@@ -0,0 +1,31 @@\n+error[E0599]: the function or associated item `partial_cmp` exists for struct `A`, but its trait bounds were not satisfied\n+  --> $DIR/derive-sugg-arg-arity.rs:5:23\n+   |\n+LL | pub struct A;\n+   | ------------\n+   | |\n+   | function or associated item `partial_cmp` not found for this struct\n+   | doesn't satisfy `A: Iterator`\n+   | doesn't satisfy `A: PartialOrd<_>`\n+...\n+LL |         _ => match A::partial_cmp() {},\n+   |                       ^^^^^^^^^^^ function or associated item cannot be called on `A` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `A: PartialOrd<_>`\n+           which is required by `&A: PartialOrd<&_>`\n+           `A: PartialOrd<_>`\n+           which is required by `&mut A: PartialOrd<&mut _>`\n+           `A: Iterator`\n+           which is required by `&mut A: Iterator`\n+note: the trait `Iterator` must be implemented\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n+   |\n+LL + #[derive(PartialEq, PartialOrd)]\n+LL | pub struct A;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}