{"sha": "3afa1d6f32725a933205b30bc99f65a6109df6a1", "node_id": "C_kwDOAAsO6NoAKDNhZmExZDZmMzI3MjVhOTMzMjA1YjMwYmM5OWY2NWE2MTA5ZGY2YTE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-12T09:47:11Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-12T09:47:11Z"}, "message": "Sync from rust 56e7678ca97e9740f7d09206f767d5bb676917f7", "tree": {"sha": "f34bf17d91ab65875f088c44d582292693aa276b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f34bf17d91ab65875f088c44d582292693aa276b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3afa1d6f32725a933205b30bc99f65a6109df6a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3afa1d6f32725a933205b30bc99f65a6109df6a1", "html_url": "https://github.com/rust-lang/rust/commit/3afa1d6f32725a933205b30bc99f65a6109df6a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3afa1d6f32725a933205b30bc99f65a6109df6a1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa7660440b2581c4c57d896d50e76da1515de6df", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa7660440b2581c4c57d896d50e76da1515de6df", "html_url": "https://github.com/rust-lang/rust/commit/fa7660440b2581c4c57d896d50e76da1515de6df"}, {"sha": "16ed1913622e5c10ce7630a2dc23ab6010a02197", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ed1913622e5c10ce7630a2dc23ab6010a02197", "html_url": "https://github.com/rust-lang/rust/commit/16ed1913622e5c10ce7630a2dc23ab6010a02197"}], "stats": {"total": 70, "additions": 37, "deletions": 33}, "files": [{"sha": "2aa11ac2eeaa653d1c0b2243afbf31e62effc467", "filename": "src/base.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3afa1d6f32725a933205b30bc99f65a6109df6a1/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afa1d6f32725a933205b30bc99f65a6109df6a1/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=3afa1d6f32725a933205b30bc99f65a6109df6a1", "patch": "@@ -794,20 +794,31 @@ fn codegen_stmt<'tcx>(\n         | StatementKind::AscribeUserType(..) => {}\n \n         StatementKind::Coverage { .. } => fx.tcx.sess.fatal(\"-Zcoverage is unimplemented\"),\n-        StatementKind::CopyNonOverlapping(inner) => {\n-            let dst = codegen_operand(fx, &inner.dst);\n-            let pointee = dst\n-                .layout()\n-                .pointee_info_at(fx, rustc_target::abi::Size::ZERO)\n-                .expect(\"Expected pointer\");\n-            let dst = dst.load_scalar(fx);\n-            let src = codegen_operand(fx, &inner.src).load_scalar(fx);\n-            let count = codegen_operand(fx, &inner.count).load_scalar(fx);\n-            let elem_size: u64 = pointee.size.bytes();\n-            let bytes =\n-                if elem_size != 1 { fx.bcx.ins().imul_imm(count, elem_size as i64) } else { count };\n-            fx.bcx.call_memcpy(fx.target_config, dst, src, bytes);\n-        }\n+        StatementKind::Intrinsic(ref intrinsic) => match &**intrinsic {\n+            // We ignore `assume` intrinsics, they are only useful for optimizations\n+            NonDivergingIntrinsic::Assume(_) => {}\n+            NonDivergingIntrinsic::CopyNonOverlapping(mir::CopyNonOverlapping {\n+                src,\n+                dst,\n+                count,\n+            }) => {\n+                let dst = codegen_operand(fx, dst);\n+                let pointee = dst\n+                    .layout()\n+                    .pointee_info_at(fx, rustc_target::abi::Size::ZERO)\n+                    .expect(\"Expected pointer\");\n+                let dst = dst.load_scalar(fx);\n+                let src = codegen_operand(fx, src).load_scalar(fx);\n+                let count = codegen_operand(fx, count).load_scalar(fx);\n+                let elem_size: u64 = pointee.size.bytes();\n+                let bytes = if elem_size != 1 {\n+                    fx.bcx.ins().imul_imm(count, elem_size as i64)\n+                } else {\n+                    count\n+                };\n+                fx.bcx.call_memcpy(fx.target_config, dst, src, bytes);\n+            }\n+        },\n     }\n }\n "}, {"sha": "30385bf873544003b2bf81896ae8a322f5fd2573", "filename": "src/constant.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3afa1d6f32725a933205b30bc99f65a6109df6a1/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afa1d6f32725a933205b30bc99f65a6109df6a1/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=3afa1d6f32725a933205b30bc99f65a6109df6a1", "patch": "@@ -536,9 +536,11 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                         {\n                             return None;\n                         }\n-                        StatementKind::CopyNonOverlapping(_) => {\n-                            return None;\n-                        } // conservative handling\n+                        StatementKind::Intrinsic(ref intrinsic) => match **intrinsic {\n+                            NonDivergingIntrinsic::CopyNonOverlapping(..) => return None,\n+                            NonDivergingIntrinsic::Assume(..) => {}\n+                        },\n+                        // conservative handling\n                         StatementKind::Assign(_)\n                         | StatementKind::FakeRead(_)\n                         | StatementKind::SetDiscriminant { .. }"}, {"sha": "97b395bcd05186b199e59026ddec9fda4472dc77", "filename": "src/discriminant.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3afa1d6f32725a933205b30bc99f65a6109df6a1/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afa1d6f32725a933205b30bc99f65a6109df6a1/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=3afa1d6f32725a933205b30bc99f65a6109df6a1", "patch": "@@ -42,10 +42,10 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n         Variants::Multiple {\n             tag: _,\n             tag_field,\n-            tag_encoding: TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start },\n+            tag_encoding: TagEncoding::Niche { untagged_variant, ref niche_variants, niche_start },\n             variants: _,\n         } => {\n-            if variant_index != dataful_variant {\n+            if variant_index != untagged_variant {\n                 let niche = place.place_field(fx, mir::Field::new(tag_field));\n                 let niche_value = variant_index.as_u32() - niche_variants.start().as_u32();\n                 let niche_value = ty::ScalarInt::try_from_uint(\n@@ -113,7 +113,7 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n             let res = CValue::by_val(val, dest_layout);\n             dest.write_cvalue(fx, res);\n         }\n-        TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start } => {\n+        TagEncoding::Niche { untagged_variant, ref niche_variants, niche_start } => {\n             // Rebase from niche values to discriminants, and check\n             // whether the result is in range for the niche variants.\n \n@@ -169,8 +169,9 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n                 fx.bcx.ins().iadd_imm(relative_discr, i64::from(niche_variants.start().as_u32()))\n             };\n \n-            let dataful_variant = fx.bcx.ins().iconst(cast_to, i64::from(dataful_variant.as_u32()));\n-            let discr = fx.bcx.ins().select(is_niche, niche_discr, dataful_variant);\n+            let untagged_variant =\n+                fx.bcx.ins().iconst(cast_to, i64::from(untagged_variant.as_u32()));\n+            let discr = fx.bcx.ins().select(is_niche, niche_discr, untagged_variant);\n             let res = CValue::by_val(discr, dest_layout);\n             dest.write_cvalue(fx, res);\n         }"}, {"sha": "971cd9f63a4aa01825946f0fd6947b402980dcb7", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3afa1d6f32725a933205b30bc99f65a6109df6a1/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afa1d6f32725a933205b30bc99f65a6109df6a1/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=3afa1d6f32725a933205b30bc99f65a6109df6a1", "patch": "@@ -381,9 +381,6 @@ fn codegen_regular_intrinsic_call<'tcx>(\n     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n \n     match intrinsic {\n-        sym::assume => {\n-            intrinsic_args!(fx, args => (_a); intrinsic);\n-        }\n         sym::likely | sym::unlikely => {\n             intrinsic_args!(fx, args => (a); intrinsic);\n \n@@ -813,20 +810,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             ret.write_cvalue(fx, val);\n         }\n \n-        sym::ptr_guaranteed_eq => {\n+        sym::ptr_guaranteed_cmp => {\n             intrinsic_args!(fx, args => (a, b); intrinsic);\n \n             let val = crate::num::codegen_ptr_binop(fx, BinOp::Eq, a, b);\n             ret.write_cvalue(fx, val);\n         }\n \n-        sym::ptr_guaranteed_ne => {\n-            intrinsic_args!(fx, args => (a, b); intrinsic);\n-\n-            let val = crate::num::codegen_ptr_binop(fx, BinOp::Ne, a, b);\n-            ret.write_cvalue(fx, val);\n-        }\n-\n         sym::caller_location => {\n             intrinsic_args!(fx, args => (); intrinsic);\n "}]}