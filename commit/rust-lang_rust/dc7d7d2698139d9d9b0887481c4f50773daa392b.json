{"sha": "dc7d7d2698139d9d9b0887481c4f50773daa392b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjN2Q3ZDI2OTgxMzlkOWQ5YjA4ODc0ODFjNGY1MDc3M2RhYTM5MmI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-04-08T22:08:08Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-04-23T00:47:28Z"}, "message": "add support for quadruple precision floating point\n\nThis currently requires linking against a library like libquadmath (or\nlibgcc), because compiler-rt barely has any support for this and most\nhardware does not yet have 128-bit precision floating point. For this\nreason, it's currently hidden behind a feature gate.\n\nWhen compiler-rt is updated to trunk, some tests can be added for\nconstant evaluation since there will be support for the comparison\noperators.\n\nCloses #13381", "tree": {"sha": "cd48dd32d932cb90c80c536783c4955f5883b068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd48dd32d932cb90c80c536783c4955f5883b068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc7d7d2698139d9d9b0887481c4f50773daa392b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc7d7d2698139d9d9b0887481c4f50773daa392b", "html_url": "https://github.com/rust-lang/rust/commit/dc7d7d2698139d9d9b0887481c4f50773daa392b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc7d7d2698139d9d9b0887481c4f50773daa392b/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09bfb92fdc3ccff42dfcf91b0af368f88dc3e446", "url": "https://api.github.com/repos/rust-lang/rust/commits/09bfb92fdc3ccff42dfcf91b0af368f88dc3e446", "html_url": "https://github.com/rust-lang/rust/commit/09bfb92fdc3ccff42dfcf91b0af368f88dc3e446"}], "stats": {"total": 91, "additions": 81, "deletions": 10}, "files": [{"sha": "72528e969170f6f2799caf605c3ae547d45e1bc1", "filename": "src/libhexfloat/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibhexfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibhexfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibhexfloat%2Flib.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -105,6 +105,7 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree]) ->\n         Some(Ident{ident, span}) => match token::get_ident(ident).get() {\n             \"f32\" => Some(ast::TyF32),\n             \"f64\" => Some(ast::TyF64),\n+            \"f128\" => Some(ast::TyF128),\n             _ => {\n                 cx.span_err(span, \"invalid floating point type in hexfloat!\");\n                 None"}, {"sha": "50018feff2d3bf6cc2ce7b29f85400888b2bb823", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -57,6 +57,8 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"linkage\", Active),\n     (\"struct_inherit\", Active),\n \n+    (\"quad_precision_float\", Active),\n+\n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n     (\"test_accepted_feature\", Accepted),\n@@ -77,13 +79,15 @@ enum Status {\n \n /// A set of features to be used by later passes.\n pub struct Features {\n-    pub default_type_params: Cell<bool>\n+    pub default_type_params: Cell<bool>,\n+    pub quad_precision_float: Cell<bool>\n }\n \n impl Features {\n     pub fn new() -> Features {\n         Features {\n-            default_type_params: Cell::new(false)\n+            default_type_params: Cell::new(false),\n+            quad_precision_float: Cell::new(false)\n         }\n     }\n }\n@@ -364,4 +368,5 @@ pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n     sess.abort_if_errors();\n \n     sess.features.default_type_params.set(cx.has_feature(\"default_type_params\"));\n+    sess.features.quad_precision_float.set(cx.has_feature(\"quad_precision_float\"));\n }"}, {"sha": "3fdf30534517b8a67d5c27183d6d94c94fc6e0e0", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -317,6 +317,7 @@ fn parse_ty(st: &mut PState, conv: conv_did) -> ty::t {\n           'D' => return ty::mk_mach_int(ast::TyI64),\n           'f' => return ty::mk_mach_float(ast::TyF32),\n           'F' => return ty::mk_mach_float(ast::TyF64),\n+          'Q' => return ty::mk_mach_float(ast::TyF128),\n           _ => fail!(\"parse_ty: bad numeric type\")\n         }\n       }"}, {"sha": "192a959165850520615f3dac70e52e38c944f3fc", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -236,6 +236,7 @@ fn enc_sty(w: &mut MemWriter, cx: &ctxt, st: &ty::sty) {\n             match t {\n                 TyF32 => mywrite!(w, \"Mf\"),\n                 TyF64 => mywrite!(w, \"MF\"),\n+                TyF128 => mywrite!(w, \"MQ\")\n             }\n         }\n         ty::ty_enum(def, ref substs) => {"}, {"sha": "b20c434729a9d06b8edf27f48369ce6e48b344f2", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -772,6 +772,7 @@ fn PrimitiveTypeTable() -> PrimitiveTypeTable {\n     table.intern(\"char\",    TyChar);\n     table.intern(\"f32\",     TyFloat(TyF32));\n     table.intern(\"f64\",     TyFloat(TyF64));\n+    table.intern(\"f128\",    TyFloat(TyF128));\n     table.intern(\"int\",     TyInt(TyI));\n     table.intern(\"i8\",      TyInt(TyI8));\n     table.intern(\"i16\",     TyInt(TyI16));"}, {"sha": "27a97af610899e16be30e49895c29a9a15a6518f", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -1170,7 +1170,8 @@ fn basic_type_metadata(cx: &CrateContext, t: ty::t) -> DIType {\n         },\n         ty::ty_float(float_ty) => match float_ty {\n             ast::TyF32 => (\"f32\".to_owned(), DW_ATE_float),\n-            ast::TyF64 => (\"f64\".to_owned(), DW_ATE_float)\n+            ast::TyF64 => (\"f64\".to_owned(), DW_ATE_float),\n+            ast::TyF128 => (\"f128\".to_owned(), DW_ATE_float)\n         },\n         _ => cx.sess().bug(\"debuginfo::basic_type_metadata - t is invalid type\")\n     };"}, {"sha": "fffc13fe36b84b7e9389e645abf1c2a62c0ba4b2", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -163,6 +163,7 @@ impl<'a, 'b> Reflector<'a, 'b> {\n           ty::ty_uint(ast::TyU64) => self.leaf(\"u64\"),\n           ty::ty_float(ast::TyF32) => self.leaf(\"f32\"),\n           ty::ty_float(ast::TyF64) => self.leaf(\"f64\"),\n+          ty::ty_float(ast::TyF128) => self.leaf(\"f128\"),\n \n           // Should rename to str_*/vec_*.\n           ty::ty_str(vst) => {"}, {"sha": "e49e9539980f48ddb80e62ff7ca04c50ed6d1e96", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -88,6 +88,10 @@ impl Type {\n         ty!(llvm::LLVMDoubleTypeInContext(ccx.llcx))\n     }\n \n+    pub fn f128(ccx: &CrateContext) -> Type {\n+        ty!(llvm::LLVMFP128TypeInContext(ccx.llcx))\n+    }\n+\n     pub fn bool(ccx: &CrateContext) -> Type {\n         Type::i8(ccx)\n     }\n@@ -130,7 +134,8 @@ impl Type {\n     pub fn float_from_ty(ccx: &CrateContext, t: ast::FloatTy) -> Type {\n         match t {\n             ast::TyF32 => Type::f32(ccx),\n-            ast::TyF64 => Type::f64(ccx)\n+            ast::TyF64 => Type::f64(ccx),\n+            ast::TyF128 => Type::f128(ccx)\n         }\n     }\n "}, {"sha": "cc4f3d9dd938e021d2c225c52c6e8e759fd7c1f0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -706,6 +706,7 @@ mod primitives {\n     def_prim_ty!(TY_U64,    super::ty_uint(ast::TyU64),     12)\n     def_prim_ty!(TY_F32,    super::ty_float(ast::TyF32),    14)\n     def_prim_ty!(TY_F64,    super::ty_float(ast::TyF64),    15)\n+    def_prim_ty!(TY_F128,   super::ty_float(ast::TyF128),   16)\n \n     pub static TY_BOT: t_box_ = t_box_ {\n         sty: super::ty_bot,\n@@ -1305,6 +1306,9 @@ pub fn mk_f32() -> t { mk_prim_t(&primitives::TY_F32) }\n #[inline]\n pub fn mk_f64() -> t { mk_prim_t(&primitives::TY_F64) }\n \n+#[inline]\n+pub fn mk_f128() -> t { mk_prim_t(&primitives::TY_F128) }\n+\n #[inline]\n pub fn mk_uint() -> t { mk_prim_t(&primitives::TY_UINT) }\n \n@@ -1344,6 +1348,7 @@ pub fn mk_mach_float(tm: ast::FloatTy) -> t {\n     match tm {\n         ast::TyF32  => mk_f32(),\n         ast::TyF64  => mk_f64(),\n+        ast::TyF128 => mk_f128()\n     }\n }\n "}, {"sha": "33f833a25944edeabad0f2ecfa3fcf32ee7fddfd", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -341,6 +341,13 @@ pub fn ast_ty_to_prim_ty(tcx: &ty::ctxt, ast_ty: &ast::Ty) -> Option<ty::t> {\n                             Some(ty::mk_mach_uint(uit))\n                         }\n                         ast::TyFloat(ft) => {\n+                            if ft == ast::TyF128 && !tcx.sess.features.quad_precision_float.get() {\n+                                tcx.sess.span_err(path.span, \"quadruple precision floats are \\\n+                                                              missing complete runtime support\");\n+                                tcx.sess.span_note(path.span, \"add \\\n+                                                               #[feature(quad_precision_float)] \\\n+                                                               to the crate attributes to enable\");\n+                            }\n                             check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n                             Some(ty::mk_mach_float(ft))\n                         }"}, {"sha": "1e2f89659cd7dbcee3ab874906f101c518f09535", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -332,6 +332,7 @@ impl fmt::Show for clean::Type {\n                     ast::TyUint(ast::TyU64) => \"u64\",\n                     ast::TyFloat(ast::TyF32) => \"f32\",\n                     ast::TyFloat(ast::TyF64) => \"f64\",\n+                    ast::TyFloat(ast::TyF128) => \"f128\",\n                     ast::TyStr => \"str\",\n                     ast::TyBool => \"bool\",\n                     ast::TyChar => \"char\","}, {"sha": "43b5f42163edd1c6214d23c38ff63487f36469b6", "filename": "src/libstd/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibstd%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibstd%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fintrinsics.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -95,6 +95,8 @@ pub trait TyVisitor {\n \n     fn visit_f32(&mut self) -> bool;\n     fn visit_f64(&mut self) -> bool;\n+    #[cfg(not(stage0))]\n+    fn visit_f128(&mut self) -> bool;\n \n     fn visit_char(&mut self) -> bool;\n "}, {"sha": "7cb07e8e551e7a4ba2c44d2e0b206fba0347daf4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -52,11 +52,13 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://static.rust-lang.org/doc/master\")]\n #![feature(macro_rules, globs, asm, managed_boxes, thread_local, link_args,\n-           simd, linkage, default_type_params, phase, concat_idents)]\n+           simd, linkage, default_type_params, phase, concat_idents, quad_precision_float)]\n \n // Don't link to std. We are std.\n #![no_std]\n \n+// NOTE: remove after snapshot\n+#![allow(unknown_features)]\n #![deny(missing_doc)]\n \n // When testing libstd, bring in libuv as the I/O backend so tests can print"}, {"sha": "45f214e26fb2ef8089e1f882f3ab774a6727647f", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -176,6 +176,14 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_f128(&mut self) -> bool {\n+        self.align_to::<f128>();\n+        if ! self.inner.visit_f128() { return false; }\n+        self.bump_past::<f128>();\n+        true\n+    }\n+\n     fn visit_char(&mut self) -> bool {\n         self.align_to::<char>();\n         if ! self.inner.visit_char() { return false; }"}, {"sha": "611545024451573f562e03ca32cc4a98e0ef31de", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -280,6 +280,8 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n \n     fn visit_f32(&mut self) -> bool { self.write::<f32>() }\n     fn visit_f64(&mut self) -> bool { self.write::<f64>() }\n+    #[cfg(not(stage0))]\n+    fn visit_f128(&mut self) -> bool { fail!(\"not implemented\") }\n \n     fn visit_char(&mut self) -> bool {\n         self.get::<char>(|this, &ch| {"}, {"sha": "a6146e0eaea9905c7075a88dd2378e22c012217a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -730,6 +730,7 @@ impl fmt::Show for UintTy {\n pub enum FloatTy {\n     TyF32,\n     TyF64,\n+    TyF128\n }\n \n impl fmt::Show for FloatTy {"}, {"sha": "adb97af7490433bcd4f185d0721442d5a0611139", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -187,7 +187,7 @@ pub fn uint_ty_max(t: UintTy) -> u64 {\n }\n \n pub fn float_ty_to_str(t: FloatTy) -> ~str {\n-    match t { TyF32 => \"f32\".to_owned(), TyF64 => \"f64\".to_owned() }\n+    match t { TyF32 => \"f32\".to_owned(), TyF64 => \"f64\".to_owned(), TyF128 => \"f128\".to_owned() }\n }\n \n pub fn is_call_expr(e: @Expr) -> bool {"}, {"sha": "68b0ef40b16bb4949da56fa6a0559a16beb7dcaf", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -436,7 +436,8 @@ fn mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> @ast::Expr {\n         LIT_FLOAT(fident, fty) => {\n             let s_fty = match fty {\n                 ast::TyF32 => \"TyF32\".to_owned(),\n-                ast::TyF64 => \"TyF64\".to_owned()\n+                ast::TyF64 => \"TyF64\".to_owned(),\n+                ast::TyF128 => \"TyF128\".to_owned()\n             };\n             let e_fty = cx.expr_ident(sp, id_ext(s_fty));\n "}, {"sha": "992d289b4e9753110d2d4da8317c0bb6f604a150", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -593,10 +593,15 @@ fn scan_number(c: char, rdr: &mut StringReader) -> token::Token {\n             /* FIXME (#2252): if this is out of range for either a\n             32-bit or 64-bit float, it won't be noticed till the\n             back-end.  */\n-        } else {\n-            fatal_span(rdr, start_bpos, rdr.last_pos,\n-                       \"expected `f32` or `f64` suffix\".to_owned());\n+        } else if c == '1' && n == '2' && nextnextch(rdr).unwrap_or('\\x00') == '8' {\n+            bump(rdr);\n+            bump(rdr);\n+            bump(rdr);\n+            check_float_base(rdr, start_bpos, rdr.last_pos, base);\n+            return token::LIT_FLOAT(str_to_ident(num_str.as_slice()), ast::TyF128);\n         }\n+        fatal_span(rdr, start_bpos, rdr.last_pos,\n+                   \"expected `f32`, `f64` or `f128` suffix\".to_owned());\n     }\n     if is_float {\n         check_float_base(rdr, start_bpos, rdr.last_pos, base);"}, {"sha": "d6827666eebb26ae3a5674279e210dec5fa22668", "filename": "src/test/run-pass/quad-precision-float.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Ftest%2Frun-pass%2Fquad-precision-float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Ftest%2Frun-pass%2Fquad-precision-float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fquad-precision-float.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(quad_precision_float)]\n+\n+static x: f128 = 1.0 + 2.0;\n+\n+fn foo(a: f128) -> f128 { a }\n+\n+pub fn main() {\n+    let y = x;\n+    foo(y);\n+}"}, {"sha": "e3ad5f1e40fac6a2c8ee133a8be7ea45158a09b7", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7d7d2698139d9d9b0887481c4f50773daa392b/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=dc7d7d2698139d9d9b0887481c4f50773daa392b", "patch": "@@ -58,6 +58,7 @@ impl TyVisitor for MyVisitor {\n \n     fn visit_f32(&mut self) -> bool { true }\n     fn visit_f64(&mut self) -> bool { true }\n+    fn visit_f128(&mut self) -> bool { true }\n \n     fn visit_char(&mut self) -> bool { true }\n "}]}