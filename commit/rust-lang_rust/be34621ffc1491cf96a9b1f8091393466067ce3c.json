{"sha": "be34621ffc1491cf96a9b1f8091393466067ce3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMzQ2MjFmZmMxNDkxY2Y5NmE5YjFmODA5MTM5MzQ2NjA2N2NlM2M=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2019-03-28T01:15:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-28T01:15:35Z"}, "message": "Rollup merge of #59421 - estebank:tuple-index-suffix, r=petrochenkov\n\nReject integer suffix when tuple indexing\n\nFix #59418.\n\nr? @varkor", "tree": {"sha": "ae542fef7e7d95804409eeb7fdd5db22736ee59f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae542fef7e7d95804409eeb7fdd5db22736ee59f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be34621ffc1491cf96a9b1f8091393466067ce3c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnCA3CRBK7hj4Ov3rIwAAdHIIAGhaayFZDsW2fi9VHFqPoUjZ\neleSfN16EhwDUFGODVJumOmde2bd2dF9FhXKFnNmbpor6AAN/EMjFU0CXTwVoKng\nwPx8koe84q2BPofNpK9gdLEK6FekcRIGwXaKOwyFf6UNcEPWI0sadd8rtJcPb2aH\ndAOWUT54g4F8UWcW/tyiGAjL6IAraQN0U+bNvhg3MkfXuWM/7RffnYQfESCVjrGc\nry+zK9NjOplCbFgkJcDdb+uBRaMMwCF4PeNwnHh6CoxWTvkIZc2b8HvJJGWcO0lV\nep6msICrgw3CdT+mI+EEE39vfh3T9YlTzkqR3xH+/joLwWqDxqyKossP0+COVwE=\n=M9d1\n-----END PGP SIGNATURE-----\n", "payload": "tree ae542fef7e7d95804409eeb7fdd5db22736ee59f\nparent 468c02f5c8e150e319d512347f590c4659b7497b\nparent 8d1cc72cf9fca507f4e14fad88f7269594305846\nauthor Josh Stone <cuviper@gmail.com> 1553735735 -0700\ncommitter GitHub <noreply@github.com> 1553735735 -0700\n\nRollup merge of #59421 - estebank:tuple-index-suffix, r=petrochenkov\n\nReject integer suffix when tuple indexing\n\nFix #59418.\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be34621ffc1491cf96a9b1f8091393466067ce3c", "html_url": "https://github.com/rust-lang/rust/commit/be34621ffc1491cf96a9b1f8091393466067ce3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be34621ffc1491cf96a9b1f8091393466067ce3c/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "468c02f5c8e150e319d512347f590c4659b7497b", "url": "https://api.github.com/repos/rust-lang/rust/commits/468c02f5c8e150e319d512347f590c4659b7497b", "html_url": "https://github.com/rust-lang/rust/commit/468c02f5c8e150e319d512347f590c4659b7497b"}, {"sha": "8d1cc72cf9fca507f4e14fad88f7269594305846", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1cc72cf9fca507f4e14fad88f7269594305846", "html_url": "https://github.com/rust-lang/rust/commit/8d1cc72cf9fca507f4e14fad88f7269594305846"}], "stats": {"total": 194, "additions": 120, "deletions": 74}, "files": [{"sha": "d3eadfeceb289df76c61c1fe46cc7b3d825a761e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 52, "deletions": 50, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/be34621ffc1491cf96a9b1f8091393466067ce3c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be34621ffc1491cf96a9b1f8091393466067ce3c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=be34621ffc1491cf96a9b1f8091393466067ce3c", "patch": "@@ -1119,9 +1119,8 @@ impl<'a> Parser<'a> {\n                 if text.is_empty() {\n                     self.span_bug(sp, \"found empty literal suffix in Some\")\n                 }\n-                let msg = format!(\"{} with a suffix is invalid\", kind);\n-                self.struct_span_err(sp, &msg)\n-                    .span_label(sp, msg)\n+                self.struct_span_err(sp, &format!(\"suffixes on {} are invalid\", kind))\n+                    .span_label(sp, format!(\"invalid suffix `{}`\", text))\n                     .emit();\n             }\n         }\n@@ -2150,7 +2149,7 @@ impl<'a> Parser<'a> {\n \n                 if suffix_illegal {\n                     let sp = self.span;\n-                    self.expect_no_suffix(sp, lit.literal_name(), suf)\n+                    self.expect_no_suffix(sp, &format!(\"a {}\", lit.literal_name()), suf)\n                 }\n \n                 result.unwrap()\n@@ -2481,7 +2480,8 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_field_name(&mut self) -> PResult<'a, Ident> {\n-        if let token::Literal(token::Integer(name), None) = self.token {\n+        if let token::Literal(token::Integer(name), suffix) = self.token {\n+            self.expect_no_suffix(self.span, \"a tuple index\", suffix);\n             self.bump();\n             Ok(Ident::new(name, self.prev_span))\n         } else {\n@@ -3185,51 +3185,53 @@ impl<'a> Parser<'a> {\n             // expr.f\n             if self.eat(&token::Dot) {\n                 match self.token {\n-                  token::Ident(..) => {\n-                    e = self.parse_dot_suffix(e, lo)?;\n-                  }\n-                  token::Literal(token::Integer(name), _) => {\n-                    let span = self.span;\n-                    self.bump();\n-                    let field = ExprKind::Field(e, Ident::new(name, span));\n-                    e = self.mk_expr(lo.to(span), field, ThinVec::new());\n-                  }\n-                  token::Literal(token::Float(n), _suf) => {\n-                    self.bump();\n-                    let fstr = n.as_str();\n-                    let mut err = self.diagnostic()\n-                        .struct_span_err(self.prev_span, &format!(\"unexpected token: `{}`\", n));\n-                    err.span_label(self.prev_span, \"unexpected token\");\n-                    if fstr.chars().all(|x| \"0123456789.\".contains(x)) {\n-                        let float = match fstr.parse::<f64>().ok() {\n-                            Some(f) => f,\n-                            None => continue,\n-                        };\n-                        let sugg = pprust::to_string(|s| {\n-                            use crate::print::pprust::PrintState;\n-                            s.popen()?;\n-                            s.print_expr(&e)?;\n-                            s.s.word( \".\")?;\n-                            s.print_usize(float.trunc() as usize)?;\n-                            s.pclose()?;\n-                            s.s.word(\".\")?;\n-                            s.s.word(fstr.splitn(2, \".\").last().unwrap().to_string())\n-                        });\n-                        err.span_suggestion(\n-                            lo.to(self.prev_span),\n-                            \"try parenthesizing the first index\",\n-                            sugg,\n-                            Applicability::MachineApplicable\n-                        );\n+                    token::Ident(..) => {\n+                        e = self.parse_dot_suffix(e, lo)?;\n                     }\n-                    return Err(err);\n+                    token::Literal(token::Integer(name), suffix) => {\n+                        let span = self.span;\n+                        self.bump();\n+                        let field = ExprKind::Field(e, Ident::new(name, span));\n+                        e = self.mk_expr(lo.to(span), field, ThinVec::new());\n+\n+                        self.expect_no_suffix(span, \"a tuple index\", suffix);\n+                    }\n+                    token::Literal(token::Float(n), _suf) => {\n+                      self.bump();\n+                      let fstr = n.as_str();\n+                      let mut err = self.diagnostic()\n+                          .struct_span_err(self.prev_span, &format!(\"unexpected token: `{}`\", n));\n+                      err.span_label(self.prev_span, \"unexpected token\");\n+                      if fstr.chars().all(|x| \"0123456789.\".contains(x)) {\n+                          let float = match fstr.parse::<f64>().ok() {\n+                              Some(f) => f,\n+                              None => continue,\n+                          };\n+                          let sugg = pprust::to_string(|s| {\n+                              use crate::print::pprust::PrintState;\n+                              s.popen()?;\n+                              s.print_expr(&e)?;\n+                              s.s.word( \".\")?;\n+                              s.print_usize(float.trunc() as usize)?;\n+                              s.pclose()?;\n+                              s.s.word(\".\")?;\n+                              s.s.word(fstr.splitn(2, \".\").last().unwrap().to_string())\n+                          });\n+                          err.span_suggestion(\n+                              lo.to(self.prev_span),\n+                              \"try parenthesizing the first index\",\n+                              sugg,\n+                              Applicability::MachineApplicable\n+                          );\n+                      }\n+                      return Err(err);\n \n-                  }\n-                  _ => {\n-                    // FIXME Could factor this out into non_fatal_unexpected or something.\n-                    let actual = self.this_token_to_string();\n-                    self.span_err(self.span, &format!(\"unexpected token: `{}`\", actual));\n-                  }\n+                    }\n+                    _ => {\n+                        // FIXME Could factor this out into non_fatal_unexpected or something.\n+                        let actual = self.this_token_to_string();\n+                        self.span_err(self.span, &format!(\"unexpected token: `{}`\", actual));\n+                    }\n                 }\n                 continue;\n             }\n@@ -7827,7 +7829,7 @@ impl<'a> Parser<'a> {\n         match self.token {\n             token::Literal(token::Str_(s), suf) | token::Literal(token::StrRaw(s, _), suf) => {\n                 let sp = self.span;\n-                self.expect_no_suffix(sp, \"ABI spec\", suf);\n+                self.expect_no_suffix(sp, \"an ABI spec\", suf);\n                 self.bump();\n                 match abi::lookup(&s.as_str()) {\n                     Some(abi) => Ok(Some(abi)),\n@@ -8648,7 +8650,7 @@ impl<'a> Parser<'a> {\n         match self.parse_optional_str() {\n             Some((s, style, suf)) => {\n                 let sp = self.prev_span;\n-                self.expect_no_suffix(sp, \"string literal\", suf);\n+                self.expect_no_suffix(sp, \"a string literal\", suf);\n                 Ok((s, style))\n             }\n             _ => {"}, {"sha": "75bed3088587ca3b4a577498d9d4fefc187c5275", "filename": "src/test/ui/parser/bad-lit-suffixes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be34621ffc1491cf96a9b1f8091393466067ce3c/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be34621ffc1491cf96a9b1f8091393466067ce3c/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.rs?ref=be34621ffc1491cf96a9b1f8091393466067ce3c", "patch": "@@ -2,20 +2,20 @@\n \n \n extern\n-    \"C\"suffix //~ ERROR ABI spec with a suffix is invalid\n+    \"C\"suffix //~ ERROR suffixes on an ABI spec are invalid\n     fn foo() {}\n \n extern\n-    \"C\"suffix //~ ERROR ABI spec with a suffix is invalid\n+    \"C\"suffix //~ ERROR suffixes on an ABI spec are invalid\n {}\n \n fn main() {\n-    \"\"suffix; //~ ERROR string literal with a suffix is invalid\n-    b\"\"suffix; //~ ERROR byte string literal with a suffix is invalid\n-    r#\"\"#suffix; //~ ERROR string literal with a suffix is invalid\n-    br#\"\"#suffix; //~ ERROR byte string literal with a suffix is invalid\n-    'a'suffix; //~ ERROR char literal with a suffix is invalid\n-    b'a'suffix; //~ ERROR byte literal with a suffix is invalid\n+    \"\"suffix; //~ ERROR suffixes on a string literal are invalid\n+    b\"\"suffix; //~ ERROR suffixes on a byte string literal are invalid\n+    r#\"\"#suffix; //~ ERROR suffixes on a string literal are invalid\n+    br#\"\"#suffix; //~ ERROR suffixes on a byte string literal are invalid\n+    'a'suffix; //~ ERROR suffixes on a char literal are invalid\n+    b'a'suffix; //~ ERROR suffixes on a byte literal are invalid\n \n     1234u1024; //~ ERROR invalid width `1024` for integer literal\n     1234i1024; //~ ERROR invalid width `1024` for integer literal"}, {"sha": "de194f4820de0e0ec47459d30a1cdda4aa72651e", "filename": "src/test/ui/parser/bad-lit-suffixes.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/be34621ffc1491cf96a9b1f8091393466067ce3c/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be34621ffc1491cf96a9b1f8091393466067ce3c/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr?ref=be34621ffc1491cf96a9b1f8091393466067ce3c", "patch": "@@ -1,50 +1,50 @@\n-error: ABI spec with a suffix is invalid\n+error: suffixes on an ABI spec are invalid\n   --> $DIR/bad-lit-suffixes.rs:5:5\n    |\n LL |     \"C\"suffix\n-   |     ^^^^^^^^^ ABI spec with a suffix is invalid\n+   |     ^^^^^^^^^ invalid suffix `suffix`\n \n-error: ABI spec with a suffix is invalid\n+error: suffixes on an ABI spec are invalid\n   --> $DIR/bad-lit-suffixes.rs:9:5\n    |\n LL |     \"C\"suffix\n-   |     ^^^^^^^^^ ABI spec with a suffix is invalid\n+   |     ^^^^^^^^^ invalid suffix `suffix`\n \n-error: string literal with a suffix is invalid\n+error: suffixes on a string literal are invalid\n   --> $DIR/bad-lit-suffixes.rs:13:5\n    |\n LL |     \"\"suffix;\n-   |     ^^^^^^^^ string literal with a suffix is invalid\n+   |     ^^^^^^^^ invalid suffix `suffix`\n \n-error: byte string literal with a suffix is invalid\n+error: suffixes on a byte string literal are invalid\n   --> $DIR/bad-lit-suffixes.rs:14:5\n    |\n LL |     b\"\"suffix;\n-   |     ^^^^^^^^^ byte string literal with a suffix is invalid\n+   |     ^^^^^^^^^ invalid suffix `suffix`\n \n-error: string literal with a suffix is invalid\n+error: suffixes on a string literal are invalid\n   --> $DIR/bad-lit-suffixes.rs:15:5\n    |\n LL |     r#\"\"#suffix;\n-   |     ^^^^^^^^^^^ string literal with a suffix is invalid\n+   |     ^^^^^^^^^^^ invalid suffix `suffix`\n \n-error: byte string literal with a suffix is invalid\n+error: suffixes on a byte string literal are invalid\n   --> $DIR/bad-lit-suffixes.rs:16:5\n    |\n LL |     br#\"\"#suffix;\n-   |     ^^^^^^^^^^^^ byte string literal with a suffix is invalid\n+   |     ^^^^^^^^^^^^ invalid suffix `suffix`\n \n-error: char literal with a suffix is invalid\n+error: suffixes on a char literal are invalid\n   --> $DIR/bad-lit-suffixes.rs:17:5\n    |\n LL |     'a'suffix;\n-   |     ^^^^^^^^^ char literal with a suffix is invalid\n+   |     ^^^^^^^^^ invalid suffix `suffix`\n \n-error: byte literal with a suffix is invalid\n+error: suffixes on a byte literal are invalid\n   --> $DIR/bad-lit-suffixes.rs:18:5\n    |\n LL |     b'a'suffix;\n-   |     ^^^^^^^^^^ byte literal with a suffix is invalid\n+   |     ^^^^^^^^^^ invalid suffix `suffix`\n \n error: invalid width `1024` for integer literal\n   --> $DIR/bad-lit-suffixes.rs:20:5"}, {"sha": "0fa191d4a7ef430385ac7eb1b36383671a257255", "filename": "src/test/ui/parser/issue-59418.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/be34621ffc1491cf96a9b1f8091393466067ce3c/src%2Ftest%2Fui%2Fparser%2Fissue-59418.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be34621ffc1491cf96a9b1f8091393466067ce3c/src%2Ftest%2Fui%2Fparser%2Fissue-59418.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-59418.rs?ref=be34621ffc1491cf96a9b1f8091393466067ce3c", "patch": "@@ -0,0 +1,18 @@\n+struct X(i32,i32,i32);\n+\n+fn main() {\n+    let a = X(1, 2, 3);\n+    let b = a.1suffix;\n+    //~^ ERROR suffixes on a tuple index are invalid\n+    println!(\"{}\", b);\n+    let c = (1, 2, 3);\n+    let d = c.1suffix;\n+    //~^ ERROR suffixes on a tuple index are invalid\n+    println!(\"{}\", d);\n+    let s = X { 0suffix: 0, 1: 1, 2: 2 };\n+    //~^ ERROR suffixes on a tuple index are invalid\n+    match s {\n+        X { 0suffix: _, .. } => {}\n+        //~^ ERROR suffixes on a tuple index are invalid\n+    }\n+}"}, {"sha": "347051e9f921c5b24700367b194fccc403db47c5", "filename": "src/test/ui/parser/issue-59418.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/be34621ffc1491cf96a9b1f8091393466067ce3c/src%2Ftest%2Fui%2Fparser%2Fissue-59418.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be34621ffc1491cf96a9b1f8091393466067ce3c/src%2Ftest%2Fui%2Fparser%2Fissue-59418.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-59418.stderr?ref=be34621ffc1491cf96a9b1f8091393466067ce3c", "patch": "@@ -0,0 +1,26 @@\n+error: suffixes on a tuple index are invalid\n+  --> $DIR/issue-59418.rs:5:15\n+   |\n+LL |     let b = a.1suffix;\n+   |               ^^^^^^^ invalid suffix `suffix`\n+\n+error: suffixes on a tuple index are invalid\n+  --> $DIR/issue-59418.rs:9:15\n+   |\n+LL |     let d = c.1suffix;\n+   |               ^^^^^^^ invalid suffix `suffix`\n+\n+error: suffixes on a tuple index are invalid\n+  --> $DIR/issue-59418.rs:12:17\n+   |\n+LL |     let s = X { 0suffix: 0, 1: 1, 2: 2 };\n+   |                 ^^^^^^^ invalid suffix `suffix`\n+\n+error: suffixes on a tuple index are invalid\n+  --> $DIR/issue-59418.rs:15:13\n+   |\n+LL |         X { 0suffix: _, .. } => {}\n+   |             ^^^^^^^ invalid suffix `suffix`\n+\n+error: aborting due to 4 previous errors\n+"}]}