{"sha": "642efabfbbba6577a3698a305bac8ce0c693e67f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MmVmYWJmYmJiYTY1NzdhMzY5OGEzMDViYWM4Y2UwYzY5M2U2N2Y=", "commit": {"author": {"name": "boolean_coercion", "email": "booleancoercion@gmail.com", "date": "2021-02-12T09:53:52Z"}, "committer": {"name": "boolean_coercion", "email": "booleancoercion@gmail.com", "date": "2021-02-12T09:54:22Z"}, "message": "Fixed typos and updated to matches! where applicable", "tree": {"sha": "898acc16f53055e7c0af4bce49710b3e3d1c0b2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/898acc16f53055e7c0af4bce49710b3e3d1c0b2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/642efabfbbba6577a3698a305bac8ce0c693e67f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/642efabfbbba6577a3698a305bac8ce0c693e67f", "html_url": "https://github.com/rust-lang/rust/commit/642efabfbbba6577a3698a305bac8ce0c693e67f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/642efabfbbba6577a3698a305bac8ce0c693e67f/comments", "author": {"login": "booleancoercion", "id": 33005025, "node_id": "MDQ6VXNlcjMzMDA1MDI1", "avatar_url": "https://avatars.githubusercontent.com/u/33005025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/booleancoercion", "html_url": "https://github.com/booleancoercion", "followers_url": "https://api.github.com/users/booleancoercion/followers", "following_url": "https://api.github.com/users/booleancoercion/following{/other_user}", "gists_url": "https://api.github.com/users/booleancoercion/gists{/gist_id}", "starred_url": "https://api.github.com/users/booleancoercion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/booleancoercion/subscriptions", "organizations_url": "https://api.github.com/users/booleancoercion/orgs", "repos_url": "https://api.github.com/users/booleancoercion/repos", "events_url": "https://api.github.com/users/booleancoercion/events{/privacy}", "received_events_url": "https://api.github.com/users/booleancoercion/received_events", "type": "User", "site_admin": false}, "committer": {"login": "booleancoercion", "id": 33005025, "node_id": "MDQ6VXNlcjMzMDA1MDI1", "avatar_url": "https://avatars.githubusercontent.com/u/33005025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/booleancoercion", "html_url": "https://github.com/booleancoercion", "followers_url": "https://api.github.com/users/booleancoercion/followers", "following_url": "https://api.github.com/users/booleancoercion/following{/other_user}", "gists_url": "https://api.github.com/users/booleancoercion/gists{/gist_id}", "starred_url": "https://api.github.com/users/booleancoercion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/booleancoercion/subscriptions", "organizations_url": "https://api.github.com/users/booleancoercion/orgs", "repos_url": "https://api.github.com/users/booleancoercion/repos", "events_url": "https://api.github.com/users/booleancoercion/events{/privacy}", "received_events_url": "https://api.github.com/users/booleancoercion/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9194c11d69aa98c9d85fd0979bf9b93d3d7de809", "url": "https://api.github.com/repos/rust-lang/rust/commits/9194c11d69aa98c9d85fd0979bf9b93d3d7de809", "html_url": "https://github.com/rust-lang/rust/commit/9194c11d69aa98c9d85fd0979bf9b93d3d7de809"}], "stats": {"total": 22, "additions": 7, "deletions": 15}, "files": [{"sha": "de9add4b6b6b73a581ca5f94b743c4641fe7eef7", "filename": "clippy_lints/src/from_str_radix_10.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/642efabfbbba6577a3698a305bac8ce0c693e67f/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642efabfbbba6577a3698a305bac8ce0c693e67f/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=642efabfbbba6577a3698a305bac8ce0c693e67f", "patch": "@@ -46,7 +46,7 @@ impl LateLintPass<'tcx> for FromStrRadix10 {\n             if let TyKind::Path(ty_qpath) = &ty.kind;\n             let ty_res = cx.qpath_res(ty_qpath, ty.hir_id);\n             if let def::Res::PrimTy(prim_ty) = ty_res;\n-            if is_primitive_integer_ty(prim_ty);\n+            if matches!(prim_ty, PrimTy::Int(_) | PrimTy::Uint(_));\n \n             // check if the second part of the path indeed calls the associated\n             // function `from_str_radix`\n@@ -63,7 +63,7 @@ impl LateLintPass<'tcx> for FromStrRadix10 {\n                     cx,\n                     FROM_STR_RADIX_10,\n                     exp.span,\n-                    \"This call to `from_str_radix` can be shortened to a call to str::parse\",\n+                    \"this call to `from_str_radix` can be replaced with a call to `str::parse`\",\n                     \"try\",\n                     format!(\"({}).parse()\", orig_string),\n                     Applicability::MaybeIncorrect\n@@ -72,11 +72,3 @@ impl LateLintPass<'tcx> for FromStrRadix10 {\n         }\n     }\n }\n-\n-fn is_primitive_integer_ty(ty: PrimTy) -> bool {\n-    match ty {\n-        PrimTy::Int(_) => true,\n-        PrimTy::Uint(_) => true,\n-        _ => false,\n-    }\n-}"}, {"sha": "5557cd3b9effb73c7bc985756a25d19651c3c8bb", "filename": "tests/ui/from_str_radix_10.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/642efabfbbba6577a3698a305bac8ce0c693e67f/tests%2Fui%2Ffrom_str_radix_10.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/642efabfbbba6577a3698a305bac8ce0c693e67f/tests%2Fui%2Ffrom_str_radix_10.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_str_radix_10.stderr?ref=642efabfbbba6577a3698a305bac8ce0c693e67f", "patch": "@@ -1,30 +1,30 @@\n-error: This call to `from_str_radix` can be shortened to a call to str::parse\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n   --> $DIR/from_str_radix_10.rs:17:5\n    |\n LL |     u32::from_str_radix(\"30\", 10)?;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(\"30\").parse()`\n    |\n    = note: `-D clippy::from-str-radix-10` implied by `-D warnings`\n \n-error: This call to `from_str_radix` can be shortened to a call to str::parse\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n   --> $DIR/from_str_radix_10.rs:18:5\n    |\n LL |     i64::from_str_radix(\"24\", 10)?;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(\"24\").parse()`\n \n-error: This call to `from_str_radix` can be shortened to a call to str::parse\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n   --> $DIR/from_str_radix_10.rs:19:5\n    |\n LL |     isize::from_str_radix(\"100\", 10)?;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(\"100\").parse()`\n \n-error: This call to `from_str_radix` can be shortened to a call to str::parse\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n   --> $DIR/from_str_radix_10.rs:20:5\n    |\n LL |     u8::from_str_radix(\"7\", 10)?;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(\"7\").parse()`\n \n-error: This call to `from_str_radix` can be shortened to a call to str::parse\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n   --> $DIR/from_str_radix_10.rs:23:5\n    |\n LL |     i32::from_str_radix(string, 10)?;"}]}