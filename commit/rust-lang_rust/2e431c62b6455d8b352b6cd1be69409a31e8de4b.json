{"sha": "2e431c62b6455d8b352b6cd1be69409a31e8de4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNDMxYzYyYjY0NTVkOGIzNTJiNmNkMWJlNjk0MDlhMzFlOGRlNGI=", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2020-07-05T18:29:30Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2020-07-17T14:52:57Z"}, "message": "compare tagged/niche-filling layout and pick the best one", "tree": {"sha": "33c10ff1bfc772866243d51bcf8347cd8fa0301c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33c10ff1bfc772866243d51bcf8347cd8fa0301c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e431c62b6455d8b352b6cd1be69409a31e8de4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e431c62b6455d8b352b6cd1be69409a31e8de4b", "html_url": "https://github.com/rust-lang/rust/commit/2e431c62b6455d8b352b6cd1be69409a31e8de4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e431c62b6455d8b352b6cd1be69409a31e8de4b/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0a7fbd91f387c7f4421bbd253a7a2f3536a7ae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0a7fbd91f387c7f4421bbd253a7a2f3536a7ae6", "html_url": "https://github.com/rust-lang/rust/commit/b0a7fbd91f387c7f4421bbd253a7a2f3536a7ae6"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "a68301385b7a5b5a983609f57ce7d4057a438ebf", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e431c62b6455d8b352b6cd1be69409a31e8de4b/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e431c62b6455d8b352b6cd1be69409a31e8de4b/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=2e431c62b6455d8b352b6cd1be69409a31e8de4b", "patch": "@@ -27,6 +27,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(cmp_min_max_by)]\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(const_fn_transmute)]"}, {"sha": "8ae9269a6bf684e566ee2fa0ef27c98f4758ac4a", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e431c62b6455d8b352b6cd1be69409a31e8de4b/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e431c62b6455d8b352b6cd1be69409a31e8de4b/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=2e431c62b6455d8b352b6cd1be69409a31e8de4b", "patch": "@@ -1233,7 +1233,21 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     size,\n                 };\n \n-                tcx.intern_layout(niche_filling_layout.unwrap_or(tagged_layout))\n+                let best_layout = match (tagged_layout, niche_filling_layout) {\n+                    (tagged_layout, Some(niche_filling_layout)) => {\n+                        // Pick the smaller layout; otherwise,\n+                        // pick the layout with the larger niche; otherwise,\n+                        // pick tagged as it has simpler codegen.\n+                        cmp::min_by_key(tagged_layout, niche_filling_layout, |layout| {\n+                            let niche_size =\n+                                layout.largest_niche.as_ref().map_or(0, |n| n.available(dl));\n+                            (layout.size, cmp::Reverse(niche_size))\n+                        })\n+                    }\n+                    (tagged_layout, None) => tagged_layout,\n+                };\n+\n+                tcx.intern_layout(best_layout)\n             }\n \n             // Types with no meaningful known layout."}, {"sha": "1894cd218ee347f94546d2b7fa32a878f5937ad1", "filename": "src/test/ui/print_type_sizes/niche-filling.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e431c62b6455d8b352b6cd1be69409a31e8de4b/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2e431c62b6455d8b352b6cd1be69409a31e8de4b/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout?ref=2e431c62b6455d8b352b6cd1be69409a31e8de4b", "patch": "@@ -8,12 +8,12 @@ print-type-size     variant `Some`: 12 bytes\n print-type-size         field `.0`: 12 bytes\n print-type-size     variant `None`: 0 bytes\n print-type-size type: `EmbeddedDiscr`: 8 bytes, alignment: 4 bytes\n+print-type-size     discriminant: 1 bytes\n print-type-size     variant `Record`: 7 bytes\n-print-type-size         field `.val`: 4 bytes\n-print-type-size         field `.post`: 2 bytes\n print-type-size         field `.pre`: 1 bytes\n+print-type-size         field `.post`: 2 bytes\n+print-type-size         field `.val`: 4 bytes\n print-type-size     variant `None`: 0 bytes\n-print-type-size     end padding: 1 bytes\n print-type-size type: `MyOption<Union1<std::num::NonZeroU32>>`: 8 bytes, alignment: 4 bytes\n print-type-size     discriminant: 4 bytes\n print-type-size     variant `Some`: 4 bytes"}, {"sha": "0ae9bfcf0bd5a86a2d6c03a1ec8bfe85ee38f08d", "filename": "src/test/ui/type-sizes.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2e431c62b6455d8b352b6cd1be69409a31e8de4b/src%2Ftest%2Fui%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e431c62b6455d8b352b6cd1be69409a31e8de4b/src%2Ftest%2Fui%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-sizes.rs?ref=2e431c62b6455d8b352b6cd1be69409a31e8de4b", "patch": "@@ -5,6 +5,7 @@\n #![feature(never_type)]\n \n use std::mem::size_of;\n+use std::num::NonZeroU8;\n \n struct t {a: u8, b: i8}\n struct u {a: u8, b: i8, c: u8}\n@@ -102,6 +103,15 @@ enum Option2<A, B> {\n     None\n }\n \n+pub enum CanBeNicheFilledButShouldnt {\n+    A(NonZeroU8, u32),\n+    B\n+}\n+pub enum AlwaysTagged {\n+    A(u8, u32),\n+    B\n+}\n+\n pub fn main() {\n     assert_eq!(size_of::<u8>(), 1 as usize);\n     assert_eq!(size_of::<u32>(), 4 as usize);\n@@ -145,4 +155,11 @@ pub fn main() {\n     assert_eq!(size_of::<Option<Option<(&(), bool)>>>(), size_of::<(bool, &())>());\n     assert_eq!(size_of::<Option<Option2<bool, &()>>>(), size_of::<(bool, &())>());\n     assert_eq!(size_of::<Option<Option2<&(), bool>>>(), size_of::<(bool, &())>());\n+\n+    assert_eq!(size_of::<CanBeNicheFilledButShouldnt>(), 8);\n+    assert_eq!(size_of::<Option<CanBeNicheFilledButShouldnt>>(), 8);\n+    assert_eq!(size_of::<Option<Option<CanBeNicheFilledButShouldnt>>>(), 8);\n+    assert_eq!(size_of::<AlwaysTagged>(), 8);\n+    assert_eq!(size_of::<Option<AlwaysTagged>>(), 8);\n+    assert_eq!(size_of::<Option<Option<AlwaysTagged>>>(), 8);\n }"}]}