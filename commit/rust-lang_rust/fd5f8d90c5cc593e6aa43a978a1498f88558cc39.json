{"sha": "fd5f8d90c5cc593e6aa43a978a1498f88558cc39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNWY4ZDkwYzVjYzU5M2U2YWE0M2E5NzhhMTQ5OGY4ODU1OGNjMzk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-11T04:23:59Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-11T05:31:01Z"}, "message": "iterator: add DoubleEndedIterator concept\n\nThis implements the trait for vector iterators, replacing the reverse\niterator types. The methods will stay, for implementing the future\nreverse Iterable traits and convenience.\n\nThis can also be trivially implemented for circular buffers and other\nvariants of arrays like strings and `SmallIntMap`/`SmallIntSet`.\n\nThe `DoubleEndedIterator` trait will allow for implementing algorithms\nlike in-place reverse on generic mutable iterators.\n\nThe naming (`Range` vs. `Iterator`, `Bidirectional` vs. `DoubleEnded`)\ncan be bikeshedded in the future.", "tree": {"sha": "919f89db73b4b4436bd55827e43a759dae1ae6b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/919f89db73b4b4436bd55827e43a759dae1ae6b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd5f8d90c5cc593e6aa43a978a1498f88558cc39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5f8d90c5cc593e6aa43a978a1498f88558cc39", "html_url": "https://github.com/rust-lang/rust/commit/fd5f8d90c5cc593e6aa43a978a1498f88558cc39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd5f8d90c5cc593e6aa43a978a1498f88558cc39/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90db8628c548537f453f33e6d253f1392d044e60", "url": "https://api.github.com/repos/rust-lang/rust/commits/90db8628c548537f453f33e6d253f1392d044e60", "html_url": "https://github.com/rust-lang/rust/commit/90db8628c548537f453f33e6d253f1392d044e60"}], "stats": {"total": 126, "additions": 85, "deletions": 41}, "files": [{"sha": "a17fea24b2c23beefe42618bc3e6f868a479aee6", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fd5f8d90c5cc593e6aa43a978a1498f88558cc39/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5f8d90c5cc593e6aa43a978a1498f88558cc39/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=fd5f8d90c5cc593e6aa43a978a1498f88558cc39", "patch": "@@ -47,6 +47,49 @@ pub trait Iterator<A> {\n     fn size_hint(&self) -> (uint, Option<uint>) { (0, None) }\n }\n \n+/// A range iterator able to yield elements from both ends\n+pub trait DoubleEndedIterator<A>: Iterator<A> {\n+    /// Yield an element from the end of the range, returning `None` if the range is empty.\n+    fn next_back(&mut self) -> Option<A>;\n+}\n+\n+/// Iterator adaptors provided for every `DoubleEndedIterator` implementation.\n+///\n+/// In the future these will be default methods instead of a utility trait.\n+pub trait DoubleEndedIteratorUtil<A> {\n+    /// Flip the direction of the iterator\n+    fn invert(self) -> InvertIterator<A, Self>;\n+}\n+\n+/// Iterator adaptors provided for every `DoubleEndedIterator` implementation.\n+///\n+/// In the future these will be default methods instead of a utility trait.\n+impl<A, T: DoubleEndedIterator<A>> DoubleEndedIteratorUtil<A> for T {\n+    /// Flip the direction of the iterator\n+    #[inline]\n+    fn invert(self) -> InvertIterator<A, T> {\n+        InvertIterator{iter: self}\n+    }\n+}\n+\n+/// An double-ended iterator with the direction inverted\n+// FIXME #6967: Dummy A parameter to get around type inference bug\n+pub struct InvertIterator<A, T> {\n+    priv iter: T\n+}\n+\n+impl<A, T: DoubleEndedIterator<A>> Iterator<A> for InvertIterator<A, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> { self.iter.next_back() }\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n+}\n+\n+impl<A, T: Iterator<A>> DoubleEndedIterator<A> for InvertIterator<A, T> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<A> { self.iter.next() }\n+}\n+\n /// Iterator adaptors provided for every `Iterator` implementation. The adaptor objects are also\n /// implementations of the `Iterator` trait.\n ///\n@@ -1474,4 +1517,13 @@ mod tests {\n         let xs = [-3, 0, 1, 5, -10];\n         assert_eq!(*xs.iter().min_by(|x| x.abs()).unwrap(), 0);\n     }\n+\n+    #[test]\n+    fn test_invert() {\n+        let xs = [2, 4, 6, 8, 10, 12, 14, 16];\n+        let mut it = xs.iter();\n+        it.next();\n+        it.next();\n+        assert_eq!(it.invert().transform(|&x| x).collect::<~[int]>(), ~[16, 14, 12, 10, 8, 6]);\n+    }\n }"}, {"sha": "5576b4ad7043e4d11c2e72ad86612e7c34c07f7f", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 33, "deletions": 41, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/fd5f8d90c5cc593e6aa43a978a1498f88558cc39/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5f8d90c5cc593e6aa43a978a1498f88558cc39/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=fd5f8d90c5cc593e6aa43a978a1498f88558cc39", "patch": "@@ -18,7 +18,7 @@ use container::{Container, Mutable};\n use cmp;\n use cmp::{Eq, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use clone::Clone;\n-use iterator::{FromIterator, Iterator, IteratorUtil};\n+use iterator::*;\n use kinds::Copy;\n use libc::c_void;\n use num::Zero;\n@@ -760,12 +760,7 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n     }\n     #[inline]\n     fn rev_iter(self) -> VecRevIterator<'self, T> {\n-        unsafe {\n-            let p = vec::raw::to_ptr(self);\n-            VecRevIterator{ptr: p.offset(self.len() - 1),\n-                           end: p.offset(-1),\n-                           lifetime: cast::transmute(p)}\n-        }\n+        self.iter().invert()\n     }\n \n     /// Returns an iterator over the subslices of the vector which are\n@@ -1717,13 +1712,9 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n         }\n     }\n \n+    #[inline]\n     fn mut_rev_iter(self) -> VecMutRevIterator<'self, T> {\n-        unsafe {\n-            let p = vec::raw::to_mut_ptr(self);\n-            VecMutRevIterator{ptr: p.offset(self.len() - 1),\n-                              end: p.offset(-1),\n-                              lifetime: cast::transmute(p)}\n-        }\n+        self.mut_iter().invert()\n     }\n \n     /**\n@@ -2083,53 +2074,61 @@ macro_rules! iterator {\n             priv lifetime: $elem // FIXME: #5922\n         }\n     };*/\n-    (impl $name:ident -> $elem:ty, $step:expr) => {\n-        // could be implemented with &[T] with .slice(), but this avoids bounds checks\n+    (impl $name:ident -> $elem:ty) => {\n         impl<'self, T> Iterator<$elem> for $name<'self, T> {\n             #[inline]\n             fn next(&mut self) -> Option<$elem> {\n+                // could be implemented with slices, but this avoids bounds checks\n                 unsafe {\n                     if self.ptr == self.end {\n                         None\n                     } else {\n                         let old = self.ptr;\n-                        self.ptr = self.ptr.offset($step);\n+                        self.ptr = self.ptr.offset(1);\n                         Some(cast::transmute(old))\n                     }\n                 }\n             }\n \n             #[inline]\n             fn size_hint(&self) -> (uint, Option<uint>) {\n-                let diff = if $step > 0 {\n-                    (self.end as uint) - (self.ptr as uint)\n-                } else {\n-                    (self.ptr as uint) - (self.end as uint)\n-                };\n+                let diff = (self.end as uint) - (self.ptr as uint);\n                 let exact = diff / size_of::<$elem>();\n                 (exact, Some(exact))\n             }\n         }\n     }\n }\n \n+macro_rules! double_ended_iterator {\n+    (impl $name:ident -> $elem:ty) => {\n+        impl<'self, T> DoubleEndedIterator<$elem> for $name<'self, T> {\n+            #[inline]\n+            fn next_back(&mut self) -> Option<$elem> {\n+                // could be implemented with slices, but this avoids bounds checks\n+                unsafe {\n+                    if self.end == self.ptr {\n+                        None\n+                    } else {\n+                        self.end = self.end.offset(-1);\n+                        Some(cast::transmute(self.end))\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n //iterator!{struct VecIterator -> *T, &'self T}\n /// An iterator for iterating over a vector.\n pub struct VecIterator<'self, T> {\n     priv ptr: *T,\n     priv end: *T,\n     priv lifetime: &'self T // FIXME: #5922\n }\n-iterator!{impl VecIterator -> &'self T, 1}\n-\n-//iterator!{struct VecRevIterator -> *T, &'self T}\n-/// An iterator for iterating over a vector in reverse.\n-pub struct VecRevIterator<'self, T> {\n-    priv ptr: *T,\n-    priv end: *T,\n-    priv lifetime: &'self T // FIXME: #5922\n-}\n-iterator!{impl VecRevIterator -> &'self T, -1}\n+iterator!{impl VecIterator -> &'self T}\n+double_ended_iterator!{impl VecIterator -> &'self T}\n+pub type VecRevIterator<'self, T> = InvertIterator<&'self T, VecIterator<'self, T>>;\n \n //iterator!{struct VecMutIterator -> *mut T, &'self mut T}\n /// An iterator for mutating the elements of a vector.\n@@ -2138,16 +2137,9 @@ pub struct VecMutIterator<'self, T> {\n     priv end: *mut T,\n     priv lifetime: &'self mut T // FIXME: #5922\n }\n-iterator!{impl VecMutIterator -> &'self mut T, 1}\n-\n-//iterator!{struct VecMutRevIterator -> *mut T, &'self mut T}\n-/// An iterator for mutating the elements of a vector in reverse.\n-pub struct VecMutRevIterator<'self, T> {\n-    priv ptr: *mut T,\n-    priv end: *mut T,\n-    priv lifetime: &'self mut T // FIXME: #5922\n-}\n-iterator!{impl VecMutRevIterator -> &'self mut T, -1}\n+iterator!{impl VecMutIterator -> &'self mut T}\n+double_ended_iterator!{impl VecMutIterator -> &'self mut T}\n+pub type VecMutRevIterator<'self, T> = InvertIterator<&'self mut T, VecMutIterator<'self, T>>;\n \n /// An iterator that moves out of a vector.\n pub struct VecConsumeIterator<T> {"}]}