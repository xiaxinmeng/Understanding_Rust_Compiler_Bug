{"sha": "0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZTc0YmVmMTg4ZmU0ZjFmZmY2OWMwZmE4NWQzMDhjNDBiY2U3Zjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-14T01:11:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-14T01:11:08Z"}, "message": "auto merge of #4905 : brson/rust/issue4524, r=brson\n\nRebase of #4895", "tree": {"sha": "f5258cb43faeb5f36f816e4a2d04442c987423b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5258cb43faeb5f36f816e4a2d04442c987423b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "html_url": "https://github.com/rust-lang/rust/commit/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c51ecc3223ed64b7948f40097c5083da0c201811", "url": "https://api.github.com/repos/rust-lang/rust/commits/c51ecc3223ed64b7948f40097c5083da0c201811", "html_url": "https://github.com/rust-lang/rust/commit/c51ecc3223ed64b7948f40097c5083da0c201811"}, {"sha": "4445b38df27777b043cad9ecc2452daad3469949", "url": "https://api.github.com/repos/rust-lang/rust/commits/4445b38df27777b043cad9ecc2452daad3469949", "html_url": "https://github.com/rust-lang/rust/commit/4445b38df27777b043cad9ecc2452daad3469949"}], "stats": {"total": 1816, "additions": 910, "deletions": 906}, "files": [{"sha": "5557b1131766bc45b9597df6bde9a85d6f90518c", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -70,7 +70,7 @@ pub fn parse_config(args: ~[~str]) -> config {\n     let matches =\n         &match getopts::getopts(args_, opts) {\n           Ok(m) => m,\n-          Err(f) => die!(getopts::fail_str(f))\n+          Err(f) => fail!(getopts::fail_str(f))\n         };\n \n     fn opt_path(m: &getopts::Matches, nm: ~str) -> Path {\n@@ -133,7 +133,7 @@ pub fn str_mode(s: ~str) -> mode {\n       ~\"run-pass\" => mode_run_pass,\n       ~\"pretty\" => mode_pretty,\n       ~\"debug-info\" => mode_debug_info,\n-      _ => die!(~\"invalid mode\")\n+      _ => fail!(~\"invalid mode\")\n     }\n }\n \n@@ -151,7 +151,7 @@ pub fn run_tests(config: config) {\n     let opts = test_opts(config);\n     let tests = make_tests(config);\n     let res = test::run_tests_console(&opts, tests);\n-    if !res { die!(~\"Some tests failed\"); }\n+    if !res { fail!(~\"Some tests failed\"); }\n }\n \n pub fn test_opts(config: config) -> test::TestOpts {"}, {"sha": "6db55853f9cedcf2366a41ec9e5d981a9c9ca19c", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -145,7 +145,7 @@ fn parse_exec_env(line: ~str) -> Option<(~str, ~str)> {\n         match strs.len() {\n           1u => (strs[0], ~\"\"),\n           2u => (strs[0], strs[1]),\n-          n => die!(fmt!(\"Expected 1 or 2 strings, not %u\", n))\n+          n => fail!(fmt!(\"Expected 1 or 2 strings, not %u\", n))\n         }\n     }\n }"}, {"sha": "304266f0f7966786702c642b4a98ba582567062d", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -71,7 +71,7 @@ pub fn run(lib_path: ~str,\n         os::close(pipe_in.out);\n         os::close(pipe_out.in);\n         os::close(pipe_err.in);\n-        die!();\n+        fail!();\n     }\n \n \n@@ -99,7 +99,7 @@ pub fn run(lib_path: ~str,\n           (2, s) => {\n             errs = s;\n           }\n-          _ => { die!() }\n+          _ => { fail!() }\n         };\n         count -= 1;\n     };"}, {"sha": "fe03ccbb3f8e8cc532a60bbdbaa1a14faa0dbbf2", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -202,7 +202,7 @@ actual:\\n\\\n \\n\",\n                      expected, actual);\n             io::stdout().write_str(msg);\n-            die!();\n+            fail!();\n         }\n     }\n \n@@ -518,7 +518,7 @@ fn compose_and_run_compiler(\n fn ensure_dir(path: &Path) {\n     if os::path_is_dir(path) { return; }\n     if !os::make_dir(path, 0x1c0i32) {\n-        die!(fmt!(\"can't make dir %s\", path.to_str()));\n+        fail!(fmt!(\"can't make dir %s\", path.to_str()));\n     }\n }\n \n@@ -668,7 +668,7 @@ fn maybe_dump_to_stdout(config: config, out: ~str, err: ~str) {\n \n fn error(err: ~str) { io::stdout().write_line(fmt!(\"\\nerror: %s\", err)); }\n \n-fn fatal(err: ~str) -> ! { error(err); die!(); }\n+fn fatal(err: ~str) -> ! { error(err); fail!(); }\n \n fn fatal_ProcRes(err: ~str, ProcRes: ProcRes) -> ! {\n     let msg =\n@@ -686,5 +686,5 @@ stderr:\\n\\\n \\n\",\n              err, ProcRes.cmdline, ProcRes.stdout, ProcRes.stderr);\n     io::stdout().write_str(msg);\n-    die!();\n+    fail!();\n }"}, {"sha": "782878e05c70ff0a1f0e89ade4e4a958bfdd6807", "filename": "src/libcargo/cargo.rc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rc?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -295,7 +295,7 @@ pub fn load_link(mis: ~[@ast::meta_item]) -> (Option<~str>,\n                     _ => { }\n                 }\n             }\n-            _ => die!(~\"load_link: meta items must be name-values\")\n+            _ => fail!(~\"load_link: meta items must be name-values\")\n         }\n     }\n     (name, vers, uuid)\n@@ -332,7 +332,7 @@ pub fn load_crate(filename: &Path) -> Option<Crate> {\n                 }\n             }\n             _ => {\n-                die!(~\"crate attributes may not contain \" +\n+                fail!(~\"crate attributes may not contain \" +\n                      ~\"meta_words\");\n             }\n         }\n@@ -435,7 +435,7 @@ pub fn rest(s: ~str, start: uint) -> ~str {\n pub fn need_dir(s: &Path) {\n     if os::path_is_dir(s) { return; }\n     if !os::make_dir(s, 493_i32 /* oct: 755 */) {\n-        die!(fmt!(\"can't make_dir %s\", s.to_str()));\n+        fail!(fmt!(\"can't make_dir %s\", s.to_str()));\n     }\n }\n \n@@ -453,14 +453,14 @@ pub fn valid_pkg_name(s: &str) -> bool {\n \n pub fn parse_source(name: ~str, j: &json::Json) -> @Source {\n     if !valid_pkg_name(name) {\n-        die!(fmt!(\"'%s' is an invalid source name\", name));\n+        fail!(fmt!(\"'%s' is an invalid source name\", name));\n     }\n \n     match *j {\n         json::Object(ref j) => {\n             let mut url = match j.find(&~\"url\") {\n                 Some(&json::String(u)) => copy u,\n-                _ => die!(~\"needed 'url' field in source\")\n+                _ => fail!(~\"needed 'url' field in source\")\n             };\n             let method = match j.find(&~\"method\") {\n                 Some(&json::String(u)) => copy u,\n@@ -485,7 +485,7 @@ pub fn parse_source(name: ~str, j: &json::Json) -> @Source {\n                 mut keyfp: keyfp,\n                 packages: DVec() };\n         }\n-        _ => die!(~\"needed dict value in source\")\n+        _ => fail!(~\"needed dict value in source\")\n     };\n }\n \n@@ -500,8 +500,8 @@ pub fn try_parse_sources(filename: &Path,\n                 debug!(\"source: %s\", *k);\n             }\n         }\n-        Ok(_) => die!(~\"malformed sources.json\"),\n-        Err(e) => die!(fmt!(\"%s:%s\", filename.to_str(), e.to_str()))\n+        Ok(_) => fail!(~\"malformed sources.json\"),\n+        Err(e) => fail!(fmt!(\"%s:%s\", filename.to_str(), e.to_str()))\n     }\n }\n \n@@ -662,7 +662,7 @@ pub fn build_cargo_options(argv: ~[~str]) -> Options {\n     let matches = &match getopts::getopts(argv, opts()) {\n         result::Ok(m) => m,\n         result::Err(f) => {\n-            die!(fmt!(\"%s\", getopts::fail_str(f)));\n+            fail!(fmt!(\"%s\", getopts::fail_str(f)));\n         }\n     };\n \n@@ -675,10 +675,10 @@ pub fn build_cargo_options(argv: ~[~str]) -> Options {\n     let is_install = len > 1u && matches.free[1] == ~\"install\";\n     let is_uninstall = len > 1u && matches.free[1] == ~\"uninstall\";\n \n-    if G && g { die!(~\"-G and -g both provided\"); }\n+    if G && g { fail!(~\"-G and -g both provided\"); }\n \n     if !is_install && !is_uninstall && (g || G) {\n-        die!(~\"-g and -G are only valid for `install` and `uninstall|rm`\");\n+        fail!(~\"-g and -G are only valid for `install` and `uninstall|rm`\");\n     }\n \n     let mode =\n@@ -845,7 +845,7 @@ pub fn install_source(c: &mut Cargo, path: &Path) {\n     }\n \n     if vec::is_empty(cratefiles) {\n-        die!(~\"this doesn't look like a rust package (no .rc files)\");\n+        fail!(~\"this doesn't look like a rust package (no .rc files)\");\n     }\n \n     for cratefiles.each |cf| {\n@@ -889,7 +889,7 @@ pub fn install_curl(c: &mut Cargo, wd: &Path, url: ~str) {\n     let p = run::program_output(~\"curl\", ~[~\"-f\", ~\"-s\", ~\"-o\",\n                                          tarpath.to_str(), url]);\n     if p.status != 0 {\n-        die!(fmt!(\"fetch of %s failed: %s\", url, p.err));\n+        fail!(fmt!(\"fetch of %s failed: %s\", url, p.err));\n     }\n     run::run_program(~\"tar\", ~[~\"-x\", ~\"--strip-components=1\",\n                                ~\"-C\", wd.to_str(),\n@@ -1123,7 +1123,7 @@ pub fn install_query(c: &mut Cargo, wd: &Path, target: ~str) {\n pub fn get_temp_workdir(c: &Cargo) -> Path {\n     match tempfile::mkdtemp(&c.workdir, \"cargo\") {\n       Some(wd) => wd,\n-      None => die!(fmt!(\"needed temp dir: %s\",\n+      None => fail!(fmt!(\"needed temp dir: %s\",\n                         c.workdir.to_str()))\n     }\n }\n@@ -1138,7 +1138,7 @@ pub fn cmd_install(c: &mut Cargo) {\n                                                    wd.to_str()]);\n \n             if status != 0 {\n-                die!(fmt!(\"could not copy directory: %s\", cwd.to_str()));\n+                fail!(fmt!(\"could not copy directory: %s\", cwd.to_str()));\n             }\n \n             install_source(c, &wd);"}, {"sha": "364effcd32f48d3795e87a6d89c38281a6fd02e8", "filename": "src/libcargo/pgp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcargo%2Fpgp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcargo%2Fpgp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fpgp.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -87,7 +87,7 @@ pub fn init(root: &Path) {\n         p.input().write_str(signing_key());\n         let s = p.finish();\n         if s != 0 {\n-            die!(~\"pgp init failed\");\n+            fail!(~\"pgp init failed\");\n         }\n     }\n }\n@@ -98,7 +98,7 @@ pub fn add(root: &Path, key: &Path) {\n         run::program_output(~\"gpg\", ~[~\"--homedir\", path.to_str(),\n                                       ~\"--import\", key.to_str()]);\n     if p.status != 0 {\n-        die!(~\"pgp add failed: \" + p.out);\n+        fail!(~\"pgp add failed: \" + p.out);\n     }\n }\n "}, {"sha": "13e4595a77a802ee528eb88d48103818931e89cc", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -150,7 +150,7 @@ pub pure fn is_digit_radix(c: char, radix: uint) -> bool {\n #[inline]\n pub pure fn to_digit(c: char, radix: uint) -> Option<uint> {\n     if radix > 36 {\n-        die!(fmt!(\"to_digit: radix %? is to high (maximum 36)\", radix));\n+        fail!(fmt!(\"to_digit: radix %? is to high (maximum 36)\", radix));\n     }\n     let val = match c {\n       '0' .. '9' => c as uint - ('0' as uint),\n@@ -173,7 +173,7 @@ pub pure fn to_digit(c: char, radix: uint) -> Option<uint> {\n #[inline]\n pub pure fn from_digit(num: uint, radix: uint) -> Option<char> {\n     if radix > 36 {\n-        die!(fmt!(\"from_digit: radix %? is to high (maximum 36)\", num));\n+        fail!(fmt!(\"from_digit: radix %? is to high (maximum 36)\", num));\n     }\n     if num < radix {\n         if num < 10 {"}, {"sha": "fb44ff4514d8cd7baca67f1e88a24780d6487ede", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -37,7 +37,7 @@ impl<T, U> Condition<T, U> {\n \n     fn raise(t: T) -> U {\n         let msg = fmt!(\"Unhandled condition: %s: %?\", self.name, t);\n-        self.raise_default(t, || die!(copy msg))\n+        self.raise_default(t, || fail!(copy msg))\n     }\n \n     fn raise_default(t: T, default: &fn() -> U) -> U {"}, {"sha": "0af0ecb16aa1043e47c7c3eaf5a36cefbc28b366", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -44,18 +44,18 @@ priv impl<T> DListNode<T> {\n         match self.next {\n             Some(neighbour) => match neighbour.prev {\n               Some(me) => if !managed::mut_ptr_eq(self, me) {\n-                  die!(~\"Asymmetric next-link in dlist node.\")\n+                  fail!(~\"Asymmetric next-link in dlist node.\")\n               },\n-              None => die!(~\"One-way next-link in dlist node.\")\n+              None => fail!(~\"One-way next-link in dlist node.\")\n             },\n             None => ()\n         }\n         match self.prev {\n             Some(neighbour) => match neighbour.next {\n               Some(me) => if !managed::mut_ptr_eq(me, self) {\n-                  die!(~\"Asymmetric prev-link in dlist node.\")\n+                  fail!(~\"Asymmetric prev-link in dlist node.\")\n               },\n-              None => die!(~\"One-way prev-link in dlist node.\")\n+              None => fail!(~\"One-way prev-link in dlist node.\")\n             },\n             None => ()\n         }\n@@ -72,7 +72,7 @@ impl<T> DListNode<T> {\n     pure fn next_node(@mut self) -> @mut DListNode<T> {\n         match self.next_link() {\n             Some(nobe) => nobe,\n-            None       => die!(~\"This dlist node has no next neighbour.\")\n+            None       => fail!(~\"This dlist node has no next neighbour.\")\n         }\n     }\n     /// Get the previous node in the list, if there is one.\n@@ -84,7 +84,7 @@ impl<T> DListNode<T> {\n     pure fn prev_node(@mut self) -> @mut DListNode<T> {\n         match self.prev_link() {\n             Some(nobe) => nobe,\n-            None       => die!(~\"This dlist node has no previous neighbour.\")\n+            None       => fail!(~\"This dlist node has no previous neighbour.\")\n         }\n     }\n }\n@@ -136,21 +136,21 @@ priv impl<T> DList<T> {\n         // These asserts could be stronger if we had node-root back-pointers,\n         // but those wouldn't allow for O(1) append.\n         if self.size == 0 {\n-            die!(~\"This dlist is empty; that node can't be on it.\")\n+            fail!(~\"This dlist is empty; that node can't be on it.\")\n         }\n-        if !nobe.linked { die!(~\"That node isn't linked to any dlist.\") }\n+        if !nobe.linked { fail!(~\"That node isn't linked to any dlist.\") }\n         if !((nobe.prev.is_some()\n               || managed::mut_ptr_eq(self.hd.expect(~\"headless dlist?\"),\n                                  nobe)) &&\n              (nobe.next.is_some()\n               || managed::mut_ptr_eq(self.tl.expect(~\"tailless dlist?\"),\n                                  nobe))) {\n-            die!(~\"That node isn't on this dlist.\")\n+            fail!(~\"That node isn't on this dlist.\")\n         }\n     }\n     fn make_mine(nobe: @mut DListNode<T>) {\n         if nobe.prev.is_some() || nobe.next.is_some() || nobe.linked {\n-            die!(~\"Cannot insert node that's already on a dlist!\")\n+            fail!(~\"Cannot insert node that's already on a dlist!\")\n         }\n         nobe.linked = true;\n     }\n@@ -322,15 +322,15 @@ impl<T> DList<T> {\n     pure fn head_n(@mut self) -> @mut DListNode<T> {\n         match self.hd {\n             Some(nobe) => nobe,\n-            None       => die!(\n+            None       => fail!(\n                 ~\"Attempted to get the head of an empty dlist.\")\n         }\n     }\n     /// Get the node at the list's tail, failing if empty. O(1).\n     pure fn tail_n(@mut self) -> @mut DListNode<T> {\n         match self.tl {\n             Some(nobe) => nobe,\n-            None       => die!(\n+            None       => fail!(\n                 ~\"Attempted to get the tail of an empty dlist.\")\n         }\n     }\n@@ -344,7 +344,7 @@ impl<T> DList<T> {\n      */\n     fn append(@mut self, them: @mut DList<T>) {\n         if managed::mut_ptr_eq(self, them) {\n-            die!(~\"Cannot append a dlist to itself!\")\n+            fail!(~\"Cannot append a dlist to itself!\")\n         }\n         if them.len() > 0 {\n             self.link(self.tl, them.hd);\n@@ -361,7 +361,7 @@ impl<T> DList<T> {\n      */\n     fn prepend(@mut self, them: @mut DList<T>) {\n         if managed::mut_ptr_eq(self, them) {\n-            die!(~\"Cannot prepend a dlist to itself!\")\n+            fail!(~\"Cannot prepend a dlist to itself!\")\n         }\n         if them.len() > 0 {\n             self.link(them.tl, self.hd);"}, {"sha": "b0c33dc6f2601a351264a192119ef96feaf545a3", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -87,7 +87,7 @@ priv impl<A> DVec<A> {\n         unsafe {\n             let data: *() = cast::reinterpret_cast(&self.data);\n             if data.is_null() {\n-                die!(~\"Recursive use of dvec\");\n+                fail!(~\"Recursive use of dvec\");\n             }\n         }\n     }\n@@ -98,7 +98,7 @@ priv impl<A> DVec<A> {\n             let mut data = cast::reinterpret_cast(&null::<()>());\n             data <-> self.data;\n             let data_ptr: *() = cast::reinterpret_cast(&data);\n-            if data_ptr.is_null() { die!(~\"Recursive use of dvec\"); }\n+            if data_ptr.is_null() { fail!(~\"Recursive use of dvec\"); }\n             return f(move data);\n         }\n     }\n@@ -175,7 +175,7 @@ impl<A> DVec<A> {\n             let mut data = cast::reinterpret_cast(&null::<()>());\n             data <-> self.data;\n             let data_ptr: *() = cast::reinterpret_cast(&data);\n-            if data_ptr.is_null() { die!(~\"Recursive use of dvec\"); }\n+            if data_ptr.is_null() { fail!(~\"Recursive use of dvec\"); }\n             self.data = move ~[move t];\n             self.data.push_all_move(move data);\n         }\n@@ -325,7 +325,7 @@ impl<A: Copy> DVec<A> {\n \n         let length = self.len();\n         if length == 0 {\n-            die!(~\"attempt to retrieve the last element of an empty vector\");\n+            fail!(~\"attempt to retrieve the last element of an empty vector\");\n         }\n \n         return self.data[length - 1];"}, {"sha": "54c9f7b98793bc94d5e05ebc7a017c1b3cad8dae", "filename": "src/libcore/either.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -132,7 +132,8 @@ pub pure fn unwrap_left<T,U>(eith: Either<T,U>) -> T {\n     //! Retrieves the value in the left branch. Fails if the either is Right.\n \n     match move eith {\n-        Left(move x) => move x, Right(_) => die!(~\"either::unwrap_left Right\")\n+        Left(move x) => move x,\n+        Right(_) => fail!(~\"either::unwrap_left Right\")\n     }\n }\n \n@@ -141,7 +142,8 @@ pub pure fn unwrap_right<T,U>(eith: Either<T,U>) -> U {\n     //! Retrieves the value in the right branch. Fails if the either is Left.\n \n     match move eith {\n-        Right(move x) => move x, Left(_) => die!(~\"either::unwrap_right Left\")\n+        Right(move x) => move x,\n+        Left(_) => fail!(~\"either::unwrap_right Left\")\n     }\n }\n "}, {"sha": "3dbc3bef01733c1b1c4acdb13456aae06eef6d83", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -335,7 +335,7 @@ pub mod ct {\n     }\n \n     #[cfg(test)]\n-    fn die(s: &str) -> ! { die!(s.to_owned()) }\n+    fn die(s: &str) -> ! { fail!(s.to_owned()) }\n \n     #[test]\n     fn test_parse_count() {"}, {"sha": "4e391d6ee0052965d66ba990c6d93fc81fb4bd20", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -282,7 +282,7 @@ impl SipState : io::Writer {\n     }\n \n     fn seek(&self, _x: int, _s: io::SeekStyle) {\n-        die!();\n+        fail!();\n     }\n     fn tell(&self) -> uint {\n         self.length"}, {"sha": "fc117f99e9087389598d7e16b66825c8c3439a03", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -168,7 +168,7 @@ pub mod linear {\n         /// True if there was no previous entry with that key\n         fn insert_internal(&mut self, hash: uint, k: K, v: V) -> bool {\n             match self.bucket_for_key_with_hash(hash, &k) {\n-                TableFull => { die!(~\"Internal logic error\"); }\n+                TableFull => { fail!(~\"Internal logic error\"); }\n                 FoundHole(idx) => {\n                     debug!(\"insert fresh (%?->%?) at idx %?, hash %?\",\n                            k, v, idx, hash);\n@@ -438,7 +438,7 @@ pub mod linear {\n         pure fn get(&self, k: &K) -> &self/V {\n             match self.find(k) {\n                 Some(v) => v,\n-                None => die!(fmt!(\"No entry found for key: %?\", k)),\n+                None => fail!(fmt!(\"No entry found for key: %?\", k)),\n             }\n         }\n     }\n@@ -689,7 +689,7 @@ mod test_map {\n         assert m.find(&1).is_none();\n         m.insert(1, 2);\n         match m.find(&1) {\n-            None => die!(),\n+            None => fail!(),\n             Some(v) => assert *v == 2\n         }\n     }"}, {"sha": "571d9344243a4e6069f5016ca57a568ec1ec4d5d", "filename": "src/libcore/io.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -608,7 +608,7 @@ impl *libc::FILE: Writer {\n                 if nout != len as size_t {\n                     error!(\"error writing buffer\");\n                     log(error, os::last_os_error());\n-                    die!();\n+                    fail!();\n                 }\n             }\n         }\n@@ -658,7 +658,7 @@ impl fd_t: Writer {\n                     if nout < 0 as ssize_t {\n                         error!(\"error writing buffer\");\n                         log(error, os::last_os_error());\n-                        die!();\n+                        fail!();\n                     }\n                     count += nout as uint;\n                 }\n@@ -667,11 +667,11 @@ impl fd_t: Writer {\n     }\n     fn seek(&self, _offset: int, _whence: SeekStyle) {\n         error!(\"need 64-bit foreign calls for seek, sorry\");\n-        die!();\n+        fail!();\n     }\n     fn tell(&self) -> uint {\n         error!(\"need 64-bit foreign calls for tell, sorry\");\n-        die!();\n+        fail!();\n     }\n     fn flush(&self) -> int { 0 }\n     fn get_type(&self) -> WriterType {\n@@ -1276,7 +1276,7 @@ mod tests {\n           result::Err(copy e) => {\n             assert e == ~\"error opening not a file\";\n           }\n-          result::Ok(_) => die!()\n+          result::Ok(_) => fail!()\n         }\n     }\n \n@@ -1317,7 +1317,7 @@ mod tests {\n           result::Err(copy e) => {\n             assert str::starts_with(e, \"error opening\");\n           }\n-          result::Ok(_) => die!()\n+          result::Ok(_) => fail!()\n         }\n     }\n \n@@ -1327,7 +1327,7 @@ mod tests {\n           result::Err(copy e) => {\n             assert str::starts_with(e, \"error opening\");\n           }\n-          result::Ok(_) => die!()\n+          result::Ok(_) => fail!()\n         }\n     }\n "}, {"sha": "5f95c00f336b319c438ff8b6d2cecc41d0f21532", "filename": "src/libcore/iter-trait/dlist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdlist.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -39,7 +39,7 @@ mod inst {\n \n             // Check (weakly) that the user didn't do a remove.\n             if self.size == 0 {\n-                die!(~\"The dlist became empty during iteration??\")\n+                fail!(~\"The dlist became empty during iteration??\")\n             }\n             if !nobe.linked ||\n                 (!((nobe.prev.is_some()\n@@ -48,7 +48,7 @@ mod inst {\n                    && (nobe.next.is_some()\n                     || managed::mut_ptr_eq(self.tl.expect(~\"tailless dlist?\"),\n                                            nobe)))) {\n-                die!(~\"Removing a dlist node during iteration is forbidden!\")\n+                fail!(~\"Removing a dlist node during iteration is forbidden!\")\n             }\n             link = nobe.next_link();\n         }"}, {"sha": "a36fa56fc79ba0c69f3b5fe2337f778fd83812e0", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -221,7 +221,7 @@ pub pure fn min<A:Copy Ord,IA:BaseIter<A>>(self: &IA) -> A {\n         }\n     } {\n         Some(move val) => val,\n-        None => die!(~\"min called on empty iterator\")\n+        None => fail!(~\"min called on empty iterator\")\n     }\n }\n \n@@ -236,7 +236,7 @@ pub pure fn max<A:Copy Ord,IA:BaseIter<A>>(self: &IA) -> A {\n         }\n     } {\n         Some(move val) => val,\n-        None => die!(~\"max called on empty iterator\")\n+        None => fail!(~\"max called on empty iterator\")\n     }\n }\n "}, {"sha": "49e0d0bdd8a6584db0a2373b0ba8448dd76c3d05", "filename": "src/libcore/mutable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fmutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fmutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmutable.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -46,7 +46,7 @@ pub fn unwrap<T>(m: Mut<T>) -> T {\n impl<T> Data<T> {\n     fn borrow_mut<R>(op: &fn(t: &mut T) -> R) -> R {\n         match self.mode {\n-            Immutable => die!(fmt!(\"%? currently immutable\",\n+            Immutable => fail!(fmt!(\"%? currently immutable\",\n                                    self.value)),\n             ReadOnly | Mutable => {}\n         }\n@@ -62,7 +62,7 @@ impl<T> Data<T> {\n \n     fn borrow_imm<R>(op: &fn(t: &T) -> R) -> R {\n         match self.mode {\n-          Mutable => die!(fmt!(\"%? currently mutable\",\n+          Mutable => fail!(fmt!(\"%? currently mutable\",\n                                self.value)),\n           ReadOnly | Immutable => {}\n         }"}, {"sha": "eaed597dff780c5277e5182fc46f081f2dfbaee5", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -402,7 +402,7 @@ pub pure fn to_str_hex(num: f32) -> ~str {\n pub pure fn to_str_radix(num: f32, rdx: uint) -> ~str {\n     let (r, special) = num::to_str_common(\n         &num, rdx, true, true, num::SignNeg, num::DigAll);\n-    if special { die!(~\"number has a special value, \\\n+    if special { fail!(~\"number has a special value, \\\n                       try to_str_radix_special() if those are expected\") }\n     r\n }"}, {"sha": "8aaa48524e2febdff0363946b04b32cb5805f0a5", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -427,7 +427,7 @@ pub pure fn to_str_hex(num: f64) -> ~str {\n pub pure fn to_str_radix(num: f64, rdx: uint) -> ~str {\n     let (r, special) = num::to_str_common(\n         &num, rdx, true, true, num::SignNeg, num::DigAll);\n-    if special { die!(~\"number has a special value, \\\n+    if special { fail!(~\"number has a special value, \\\n                       try to_str_radix_special() if those are expected\") }\n     r\n }"}, {"sha": "c7d391bab08d58a67f2a7db83f1d9cdc158ecbe3", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -143,7 +143,7 @@ pub pure fn to_str_hex(num: float) -> ~str {\n pub pure fn to_str_radix(num: float, radix: uint) -> ~str {\n     let (r, special) = num::to_str_common(\n         &num, radix, true, true, num::SignNeg, num::DigAll);\n-    if special { die!(~\"number has a special value, \\\n+    if special { fail!(~\"number has a special value, \\\n                       try to_str_radix_special() if those are expected\") }\n     r\n }\n@@ -509,16 +509,16 @@ pub fn test_from_str() {\n    // note: NaN != NaN, hence this slightly complex test\n    match from_str(~\"NaN\") {\n        Some(f) => assert is_NaN(f),\n-       None => die!()\n+       None => fail!()\n    }\n    // note: -0 == 0, hence these slightly more complex tests\n    match from_str(~\"-0\") {\n        Some(v) if is_zero(v) => assert is_negative(v),\n-       _ => die!()\n+       _ => fail!()\n    }\n    match from_str(~\"0\") {\n        Some(v) if is_zero(v) => assert is_positive(v),\n-       _ => die!()\n+       _ => fail!()\n    }\n \n    assert from_str(~\"\").is_none();\n@@ -556,16 +556,16 @@ pub fn test_from_str_hex() {\n    // note: NaN != NaN, hence this slightly complex test\n    match from_str_hex(~\"NaN\") {\n        Some(f) => assert is_NaN(f),\n-       None => die!()\n+       None => fail!()\n    }\n    // note: -0 == 0, hence these slightly more complex tests\n    match from_str_hex(~\"-0\") {\n        Some(v) if is_zero(v) => assert is_negative(v),\n-       _ => die!()\n+       _ => fail!()\n    }\n    match from_str_hex(~\"0\") {\n        Some(v) if is_zero(v) => assert is_positive(v),\n-       _ => die!()\n+       _ => fail!()\n    }\n    assert from_str_hex(~\"e\") == Some(14.);\n    assert from_str_hex(~\"E\") == Some(14.);"}, {"sha": "71c06bc9d24d7186a0b59a52ace8b56f6dcb2c9c", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -108,7 +108,7 @@ pub pure fn is_nonnegative(x: T) -> bool { x >= 0 as T }\n pub pure fn range_step(start: T, stop: T, step: T, it: fn(T) -> bool) {\n     let mut i = start;\n     if step == 0 {\n-        die!(~\"range_step called with step == 0\");\n+        fail!(~\"range_step called with step == 0\");\n     } else if step > 0 { // ascending\n         while i < stop {\n             if !it(i) { break }\n@@ -435,16 +435,16 @@ pub fn test_ranges() {\n \n     // None of the `fail`s should execute.\n     for range(10,0) |_i| {\n-        die!(~\"unreachable\");\n+        fail!(~\"unreachable\");\n     }\n     for range_rev(0,10) |_i| {\n-        die!(~\"unreachable\");\n+        fail!(~\"unreachable\");\n     }\n     for range_step(10,0,1) |_i| {\n-        die!(~\"unreachable\");\n+        fail!(~\"unreachable\");\n     }\n     for range_step(0,10,-1) |_i| {\n-        die!(~\"unreachable\");\n+        fail!(~\"unreachable\");\n     }\n }\n "}, {"sha": "8435a7b8ea29fa85963bb3f01d86cfa48951f9b5", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -260,10 +260,10 @@ pub pure fn to_str_bytes_common<T: Num NumCast Zero One Eq Ord Round Copy>(\n         num: &T, radix: uint, special: bool, negative_zero: bool,\n         sign: SignFormat, digits: SignificantDigits) -> (~[u8], bool) {\n     if radix as int <  2 {\n-        die!(fmt!(\"to_str_bytes_common: radix %? to low, \\\n+        fail!(fmt!(\"to_str_bytes_common: radix %? to low, \\\n                    must lie in the range [2, 36]\", radix));\n     } else if radix as int > 36 {\n-        die!(fmt!(\"to_str_bytes_common: radix %? to high, \\\n+        fail!(fmt!(\"to_str_bytes_common: radix %? to high, \\\n                    must lie in the range [2, 36]\", radix));\n     }\n \n@@ -539,19 +539,19 @@ pub pure fn from_str_bytes_common<T: Num NumCast Zero One Ord Copy>(\n         ) -> Option<T> {\n     match exponent {\n         ExpDec if radix >= DIGIT_E_RADIX       // decimal exponent 'e'\n-          => die!(fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n+          => fail!(fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n                         use of 'e' as decimal exponent\", radix)),\n         ExpBin if radix >= DIGIT_P_RADIX       // binary exponent 'p'\n-          => die!(fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n+          => fail!(fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n                         use of 'p' as binary exponent\", radix)),\n         _ if special && radix >= DIGIT_I_RADIX // first digit of 'inf'\n-          => die!(fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n+          => fail!(fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n                         special values 'inf' and 'NaN'\", radix)),\n         _ if radix as int < 2\n-          => die!(fmt!(\"from_str_bytes_common: radix %? to low, \\\n+          => fail!(fmt!(\"from_str_bytes_common: radix %? to low, \\\n                         must lie in the range [2, 36]\", radix)),\n         _ if radix as int > 36\n-          => die!(fmt!(\"from_str_bytes_common: radix %? to high, \\\n+          => fail!(fmt!(\"from_str_bytes_common: radix %? to high, \\\n                         must lie in the range [2, 36]\", radix)),\n         _ => ()\n     }"}, {"sha": "0f74b73e1c502ff044a40c748550e83a322e203d", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -76,7 +76,7 @@ pub pure fn is_nonnegative(x: T) -> bool { x >= 0 as T }\n pub pure fn range_step(start: T, stop: T, step: T_SIGNED, it: fn(T) -> bool) {\n     let mut i = start;\n     if step == 0 {\n-        die!(~\"range_step called with step == 0\");\n+        fail!(~\"range_step called with step == 0\");\n     }\n     if step >= 0 {\n         while i < stop {\n@@ -388,16 +388,16 @@ pub fn test_ranges() {\n \n     // None of the `fail`s should execute.\n     for range(0,0) |_i| {\n-        die!(~\"unreachable\");\n+        fail!(~\"unreachable\");\n     }\n     for range_rev(0,0) |_i| {\n-        die!(~\"unreachable\");\n+        fail!(~\"unreachable\");\n     }\n     for range_step(10,0,1) |_i| {\n-        die!(~\"unreachable\");\n+        fail!(~\"unreachable\");\n     }\n     for range_step(0,1,-10) |_i| {\n-        die!(~\"unreachable\");\n+        fail!(~\"unreachable\");\n     }\n }\n "}, {"sha": "e57d664c2aaee26113f026e1a7e8226dd8f95472", "filename": "src/libcore/option.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -75,7 +75,7 @@ pub pure fn get<T: Copy>(opt: Option<T>) -> T {\n \n     match opt {\n       Some(copy x) => return x,\n-      None => die!(~\"option::get none\")\n+      None => fail!(~\"option::get none\")\n     }\n }\n \n@@ -97,7 +97,7 @@ pub pure fn get_ref<T>(opt: &r/Option<T>) -> &r/T {\n      */\n     match *opt {\n         Some(ref x) => x,\n-        None => die!(~\"option::get_ref none\")\n+        None => fail!(~\"option::get_ref none\")\n     }\n }\n \n@@ -226,7 +226,7 @@ pub pure fn unwrap<T>(opt: Option<T>) -> T {\n      */\n     match move opt {\n         Some(move x) => move x,\n-        None => die!(~\"option::unwrap none\")\n+        None => fail!(~\"option::unwrap none\")\n     }\n }\n \n@@ -240,7 +240,7 @@ pub fn swap_unwrap<T>(opt: &mut Option<T>) -> T {\n \n     Fails if the value equals `None`.\n      */\n-    if opt.is_none() { die!(~\"option::swap_unwrap none\") }\n+    if opt.is_none() { fail!(~\"option::swap_unwrap none\") }\n     unwrap(util::replace(opt, None))\n }\n \n@@ -249,7 +249,7 @@ pub pure fn expect<T>(opt: Option<T>, reason: &str) -> T {\n     //! As unwrap, but with a specified failure message.\n     match move opt {\n         Some(move val) => val,\n-        None => die!(reason.to_owned()),\n+        None => fail!(reason.to_owned()),\n     }\n }\n "}, {"sha": "6ed8d70642cce4001150181c5d18575cf1821407", "filename": "src/libcore/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -1333,7 +1333,7 @@ mod tests {\n           assert (libc::fclose(ostream) == (0u as c_int));\n           let rs = os::copy_file(&in, &out);\n           if (!os::path_exists(&in)) {\n-            die!(fmt!(\"%s doesn't exist\", in.to_str()));\n+            fail!(fmt!(\"%s doesn't exist\", in.to_str()));\n           }\n           assert(rs);\n           let rslt = run::run_program(~\"diff\", ~[in.to_str(), out.to_str()]);"}, {"sha": "7964b081e4902d51c4ade91b5e51606da047d0f9", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -326,7 +326,7 @@ fn wait_event(this: *rust_task) -> *libc::c_void {\n \n         let killed = rustrt::task_wait_event(this, &mut event);\n         if killed && !task::failing() {\n-            die!(~\"killed\")\n+            fail!(~\"killed\")\n         }\n         event\n     }\n@@ -402,7 +402,7 @@ pub fn send<T,Tbuffer>(p: SendPacketBuffered<T,Tbuffer>, payload: T) -> bool {\n             //unsafe { forget(p); }\n             return true;\n         }\n-        Full => die!(~\"duplicate send\"),\n+        Full => fail!(~\"duplicate send\"),\n         Blocked => {\n             debug!(\"waking up task for %?\", p_);\n             let old_task = swap_task(&mut p.header.blocked_task, ptr::null());\n@@ -520,7 +520,7 @@ pub fn try_recv<T: Owned, Tbuffer: Owned>(p: RecvPacketBuffered<T, Tbuffer>)\n             debug!(\"woke up, p.state = %?\", copy p.header.state);\n           }\n           Blocked => if first {\n-            die!(~\"blocking on already blocked packet\")\n+            fail!(~\"blocking on already blocked packet\")\n           },\n           Full => {\n             let mut payload = None;\n@@ -556,7 +556,7 @@ pub fn try_recv<T: Owned, Tbuffer: Owned>(p: RecvPacketBuffered<T, Tbuffer>)\n pub pure fn peek<T: Owned, Tb: Owned>(p: &RecvPacketBuffered<T, Tb>) -> bool {\n     match unsafe {(*p.header()).state} {\n       Empty | Terminated => false,\n-      Blocked => die!(~\"peeking on blocked packet\"),\n+      Blocked => fail!(~\"peeking on blocked packet\"),\n       Full => true\n     }\n }\n@@ -589,7 +589,7 @@ fn sender_terminate<T: Owned>(p: *Packet<T>) {\n       }\n       Full => {\n         // This is impossible\n-        die!(~\"you dun goofed\")\n+        fail!(~\"you dun goofed\")\n       }\n       Terminated => {\n         assert p.header.blocked_task.is_null();\n@@ -652,7 +652,7 @@ fn wait_many<T: Selectable>(pkts: &[T]) -> uint {\n                 (*p).state = old;\n                 break;\n               }\n-              Blocked => die!(~\"blocking on blocked packet\"),\n+              Blocked => fail!(~\"blocking on blocked packet\"),\n               Empty => ()\n             }\n         }\n@@ -725,7 +725,7 @@ pub fn select2<A: Owned, Ab: Owned, B: Owned, Bb: Owned>(\n     match i {\n       0 => Left((try_recv(move a), move b)),\n       1 => Right((move a, try_recv(move b))),\n-      _ => die!(~\"select2 return an invalid packet\")\n+      _ => fail!(~\"select2 return an invalid packet\")\n     }\n }\n \n@@ -749,7 +749,7 @@ pub fn select2i<A: Selectable, B: Selectable>(a: &A, b: &B) ->\n     match wait_many([a.header(), b.header()]) {\n       0 => Left(()),\n       1 => Right(()),\n-      _ => die!(~\"wait returned unexpected index\")\n+      _ => fail!(~\"wait returned unexpected index\")\n     }\n }\n \n@@ -827,7 +827,7 @@ impl<T,Tbuffer> SendPacketBuffered<T,Tbuffer> {\n             //forget(packet);\n             header\n           },\n-          None => die!(~\"packet already consumed\")\n+          None => fail!(~\"packet already consumed\")\n         }\n     }\n \n@@ -893,7 +893,7 @@ impl<T: Owned, Tbuffer: Owned> RecvPacketBuffered<T, Tbuffer> : Selectable {\n             //forget(packet);\n             header\n           },\n-          None => die!(~\"packet already consumed\")\n+          None => fail!(~\"packet already consumed\")\n         }\n     }\n }\n@@ -1089,7 +1089,7 @@ impl<T: Owned> Port<T>: Peekable<T> {\n             endp <-> self.endp;\n             let peek = match &endp {\n               &Some(ref endp) => pipes::peek(endp),\n-              &None => die!(~\"peeking empty stream\")\n+              &None => fail!(~\"peeking empty stream\")\n             };\n             self.endp <-> endp;\n             peek\n@@ -1102,7 +1102,7 @@ impl<T: Owned> Port<T>: Selectable {\n         unsafe {\n             match self.endp {\n               Some(ref endp) => endp.header(),\n-              None => die!(~\"peeking empty stream\")\n+              None => fail!(~\"peeking empty stream\")\n             }\n         }\n     }\n@@ -1319,7 +1319,7 @@ pub mod test {\n         c1.send(~\"abc\");\n \n         match (move p1, move p2).select() {\n-          Right(_) => die!(),\n+          Right(_) => fail!(),\n           _ => ()\n         }\n "}, {"sha": "e6ced90c0d3d9a9b3f00a5684fe4fa1fbcfd9326", "filename": "src/libcore/private.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -233,7 +233,7 @@ pub unsafe fn unwrap_shared_mutable_state<T: Owned>(rc: SharedMutableState<T>)\n             cast::forget(move ptr);\n             // Also we have to free the (rejected) server endpoints.\n             let _server: UnwrapProto = cast::transmute(move serverp);\n-            die!(~\"Another task is already unwrapping this ARC!\");\n+            fail!(~\"Another task is already unwrapping this ARC!\");\n         }\n     }\n }\n@@ -380,7 +380,8 @@ impl<T: Owned> Exclusive<T> {\n             let rec = get_shared_mutable_state(&self.x);\n             do (*rec).lock.lock {\n                 if (*rec).failed {\n-                    die!(~\"Poisoned exclusive - another task failed inside!\");\n+                    fail!(\n+                        ~\"Poisoned exclusive - another task failed inside!\");\n                 }\n                 (*rec).failed = true;\n                 let result = f(&mut (*rec).data);\n@@ -523,7 +524,7 @@ pub mod tests {\n             let x2 = x.clone();\n             do task::spawn {\n                 for 10.times { task::yield(); } // try to let the unwrapper go\n-                die!(); // punt it awake from its deadlock\n+                fail!(); // punt it awake from its deadlock\n             }\n             let _z = unwrap_exclusive(move x);\n             do x2.with |_hello| { }"}, {"sha": "30a309e80b0496dc3ae94051705333ceb71c99dc", "filename": "src/libcore/private/finally.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fprivate%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fprivate%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Ffinally.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -93,7 +93,7 @@ fn test_fail() {\n     let mut i = 0;\n     do (|| {\n         i = 10;\n-        die!();\n+        fail!();\n     }).finally {\n         assert failing();\n         assert i == 10;"}, {"sha": "e1ab28ce7ecbb45ebac71b6d4d8a544d6f64bad9", "filename": "src/libcore/private/global.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fprivate%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fprivate%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Fglobal.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -269,7 +269,7 @@ fn test_modify() {\n                         Some(~shared_mutable_state(10))\n                     }\n                 }\n-                _ => die!()\n+                _ => fail!()\n             }\n         }\n \n@@ -280,7 +280,7 @@ fn test_modify() {\n                     assert *v == 10;\n                     None\n                 },\n-                _ => die!()\n+                _ => fail!()\n             }\n         }\n \n@@ -291,7 +291,7 @@ fn test_modify() {\n                         Some(~shared_mutable_state(10))\n                     }\n                 }\n-                _ => die!()\n+                _ => fail!()\n             }\n         }\n     }"}, {"sha": "f285f811f15d077c948943c487bdc511211b6756", "filename": "src/libcore/private/weak_task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fprivate%2Fweak_task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fprivate%2Fweak_task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Fweak_task.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -113,7 +113,7 @@ fn run_weak_task_service(port: Port<ServiceMsg>) {\n                         // nobody will receive this\n                         shutdown_chan.send(());\n                     }\n-                    None => die!()\n+                    None => fail!()\n                 }\n             }\n             Shutdown => break\n@@ -196,7 +196,7 @@ fn test_select_stream_and_oneshot() {\n             do weaken_task |signal| {\n                 match select2i(&port, &signal) {\n                     Left(*) => (),\n-                    Right(*) => die!()\n+                    Right(*) => fail!()\n                 }\n             }\n         }"}, {"sha": "5848a868f44782a1c2957411832e2c74baf6266a", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -294,7 +294,7 @@ impl ReprVisitor : TyVisitor {\n     }\n \n     // Type no longer exists, vestigial function.\n-    fn visit_str(&self) -> bool { die!(); }\n+    fn visit_str(&self) -> bool { fail!(); }\n \n     fn visit_estr_box(&self) -> bool {\n         do self.get::<@str> |s| {\n@@ -316,7 +316,7 @@ impl ReprVisitor : TyVisitor {\n \n     // Type no longer exists, vestigial function.\n     fn visit_estr_fixed(&self, _n: uint, _sz: uint,\n-                        _align: uint) -> bool { die!(); }\n+                        _align: uint) -> bool { fail!(); }\n \n     fn visit_box(&self, mtbl: uint, inner: *TyDesc) -> bool {\n         self.writer.write_char('@');\n@@ -352,7 +352,7 @@ impl ReprVisitor : TyVisitor {\n     }\n \n     // Type no longer exists, vestigial function.\n-    fn visit_vec(&self, _mtbl: uint, _inner: *TyDesc) -> bool { die!(); }\n+    fn visit_vec(&self, _mtbl: uint, _inner: *TyDesc) -> bool { fail!(); }\n \n \n     fn visit_unboxed_vec(&self, mtbl: uint, inner: *TyDesc) -> bool {\n@@ -559,7 +559,7 @@ impl ReprVisitor : TyVisitor {\n     }\n \n     // Type no longer exists, vestigial function.\n-    fn visit_constr(&self, _inner: *TyDesc) -> bool { die!(); }\n+    fn visit_constr(&self, _inner: *TyDesc) -> bool { fail!(); }\n \n     fn visit_closure_ptr(&self, _ck: uint) -> bool { true }\n }"}, {"sha": "fb824087f2199c73a9952dde9b14109c06a80427", "filename": "src/libcore/result.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -41,7 +41,7 @@ pub pure fn get<T: Copy, U>(res: &Result<T, U>) -> T {\n     match *res {\n       Ok(copy t) => t,\n       Err(ref the_err) => unsafe {\n-        die!(fmt!(\"get called on error result: %?\", *the_err))\n+        fail!(fmt!(\"get called on error result: %?\", *the_err))\n       }\n     }\n }\n@@ -58,7 +58,7 @@ pub pure fn get_ref<T, U>(res: &a/Result<T, U>) -> &a/T {\n     match *res {\n         Ok(ref t) => t,\n         Err(ref the_err) => unsafe {\n-            die!(fmt!(\"get_ref called on error result: %?\", *the_err))\n+            fail!(fmt!(\"get_ref called on error result: %?\", *the_err))\n         }\n     }\n }\n@@ -74,7 +74,7 @@ pub pure fn get_ref<T, U>(res: &a/Result<T, U>) -> &a/T {\n pub pure fn get_err<T, U: Copy>(res: &Result<T, U>) -> U {\n     match *res {\n       Err(copy u) => u,\n-      Ok(_) => die!(~\"get_err called on ok result\")\n+      Ok(_) => fail!(~\"get_err called on ok result\")\n     }\n }\n \n@@ -379,7 +379,7 @@ pub fn iter_vec2<S,T,U:Copy>(ss: &[S], ts: &[T],\n pub pure fn unwrap<T, U>(res: Result<T, U>) -> T {\n     match move res {\n       Ok(move t) => move t,\n-      Err(_) => die!(~\"unwrap called on an err result\")\n+      Err(_) => fail!(~\"unwrap called on an err result\")\n     }\n }\n \n@@ -388,7 +388,7 @@ pub pure fn unwrap<T, U>(res: Result<T, U>) -> T {\n pub pure fn unwrap_err<T, U>(res: Result<T, U>) -> U {\n     match move res {\n       Err(move u) => move u,\n-      Ok(_) => die!(~\"unwrap called on an ok result\")\n+      Ok(_) => fail!(~\"unwrap called on an ok result\")\n     }\n }\n "}, {"sha": "690486010ca4b4f006a042b799088ad82d4e71eb", "filename": "src/libcore/run.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -180,7 +180,7 @@ fn with_dirp<T>(d: &Option<~str>,\n pub fn run_program(prog: &str, args: &[~str]) -> int {\n     let pid = spawn_process(prog, args, &None, &None,\n                             0i32, 0i32, 0i32);\n-    if pid == -1 as pid_t { die!(); }\n+    if pid == -1 as pid_t { fail!(); }\n     return waitpid(pid);\n }\n \n@@ -210,7 +210,7 @@ pub fn start_program(prog: &str, args: &[~str]) -> Program {\n                       pipe_err.out);\n \n     unsafe {\n-        if pid == -1 as pid_t { die!(); }\n+        if pid == -1 as pid_t { fail!(); }\n         libc::close(pipe_input.in);\n         libc::close(pipe_output.out);\n         libc::close(pipe_err.out);\n@@ -330,7 +330,7 @@ pub fn program_output(prog: &str, args: &[~str]) -> ProgramOutput {\n             os::close(pipe_in.out);\n             os::close(pipe_out.in);\n             os::close(pipe_err.in);\n-            die!();\n+            fail!();\n         }\n \n         os::close(pipe_in.out);\n@@ -364,7 +364,7 @@ pub fn program_output(prog: &str, args: &[~str]) -> ProgramOutput {\n                     errs = move s;\n                 }\n                 (n, _) => {\n-                    die!(fmt!(\"program_output received an unexpected file \\\n+                    fail!(fmt!(\"program_output received an unexpected file \\\n                                number: %u\", n));\n                 }\n             };\n@@ -478,7 +478,7 @@ mod tests {\n         os::close(pipe_out.out);\n         os::close(pipe_err.out);\n \n-        if pid == -1i32 { die!(); }\n+        if pid == -1i32 { fail!(); }\n         let expected = ~\"test\";\n         writeclose(pipe_in.out, copy expected);\n         let actual = readclose(pipe_out.in);"}, {"sha": "b01f422c84a25c5c4162011735fbfa8234414f51", "filename": "src/libcore/str.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -3025,7 +3025,7 @@ mod tests {\n     #[should_fail]\n     fn test_as_bytes_fail() {\n         // Don't double free\n-        as_bytes::<()>(&~\"\", |_bytes| die!() );\n+        as_bytes::<()>(&~\"\", |_bytes| fail!() );\n     }\n \n     #[test]\n@@ -3125,12 +3125,12 @@ mod tests {\n               0 => assert ch == 'x',\n               1 => assert ch == '\\u03c0',\n               2 => assert ch == 'y',\n-              _ => die!(~\"test_chars_each failed\")\n+              _ => fail!(~\"test_chars_each failed\")\n             }\n             i += 1;\n         }\n \n-        chars_each(~\"\", |_ch| die!() ); // should not fail\n+        chars_each(~\"\", |_ch| fail!() ); // should not fail\n     }\n \n     #[test]\n@@ -3142,7 +3142,7 @@ mod tests {\n               0 => assert bb == 'x' as u8,\n               1 => assert bb == 'y' as u8,\n               2 => assert bb == 'z' as u8,\n-              _ => die!(~\"test_bytes_each failed\")\n+              _ => fail!(~\"test_bytes_each failed\")\n             }\n             i += 1;\n         }\n@@ -3204,7 +3204,7 @@ mod tests {\n             ii += 1;\n         }\n \n-        words_each(~\"\", |_x| die!()); // should not fail\n+        words_each(~\"\", |_x| fail!()); // should not fail\n     }\n \n     #[test]"}, {"sha": "fe37a2e155f0bb693075d1ae8601fe257892c097", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -133,15 +133,15 @@ fn test_tls_modify() {\n         fn my_key(_x: @~str) { }\n         local_data_modify(my_key, |data| {\n             match data {\n-                Some(@ref val) => die!(~\"unwelcome value: \" + *val),\n+                Some(@ref val) => fail!(~\"unwelcome value: \" + *val),\n                 None       => Some(@~\"first data\")\n             }\n         });\n         local_data_modify(my_key, |data| {\n             match data {\n                 Some(@~\"first data\") => Some(@~\"next data\"),\n-                Some(@ref val)           => die!(~\"wrong value: \" + *val),\n-                None                 => die!(~\"missing value\")\n+                Some(@ref val)           => fail!(~\"wrong value: \" + *val),\n+                None                 => fail!(~\"missing value\")\n             }\n         });\n         assert *(local_data_pop(my_key).get()) == ~\"next data\";\n@@ -212,11 +212,11 @@ fn test_tls_cleanup_on_failure() {\n                 local_data_set(str_key, @~\"string data\");\n                 local_data_set(box_key, @@());\n                 local_data_set(int_key, @42);\n-                die!();\n+                fail!();\n             }\n         }\n         // Not quite nondeterministic.\n         local_data_set(int_key, @31337);\n-        die!();\n+        fail!();\n     }\n }"}, {"sha": "698463b2147768196d7e3d7da627e54c0c1a87ac", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -213,7 +213,7 @@ pub fn task() -> TaskBuilder {\n priv impl TaskBuilder {\n     fn consume() -> TaskBuilder {\n         if self.consumed {\n-            die!(~\"Cannot copy a task_builder\"); // Fake move mode on self\n+            fail!(~\"Cannot copy a task_builder\"); // Fake move mode on self\n         }\n         self.consumed = true;\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n@@ -309,7 +309,7 @@ impl TaskBuilder {\n         // sending out messages.\n \n         if self.opts.notify_chan.is_some() {\n-            die!(~\"Can't set multiple future_results for one task!\");\n+            fail!(~\"Can't set multiple future_results for one task!\");\n         }\n \n         // Construct the future and give it to the caller.\n@@ -543,7 +543,7 @@ pub fn yield() {\n         let task_ = rt::rust_get_task();\n         let killed = rt::rust_task_yield(task_);\n         if killed && !failing() {\n-            die!(~\"killed\");\n+            fail!(~\"killed\");\n         }\n     }\n }\n@@ -689,24 +689,24 @@ fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n             for iter::repeat(16) { task::yield(); }\n             ch.send(()); // If killed first, grandparent hangs.\n         }\n-        die!(); // Shouldn't kill either (grand)parent or (grand)child.\n+        fail!(); // Shouldn't kill either (grand)parent or (grand)child.\n     }\n     po.recv();\n }\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_unsup_no_fail_up() { // child unlinked fails\n-    do spawn_unlinked { die!(); }\n+    do spawn_unlinked { fail!(); }\n }\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_sup_no_fail_up() { // child unlinked fails\n-    do spawn_supervised { die!(); }\n+    do spawn_supervised { fail!(); }\n     // Give child a chance to fail-but-not-kill-us.\n     for iter::repeat(16) { task::yield(); }\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_sup_fail_down() {\n     do spawn_supervised { loop { task::yield(); } }\n-    die!(); // Shouldn't leave a child hanging around.\n+    fail!(); // Shouldn't leave a child hanging around.\n }\n \n #[test] #[should_fail] #[ignore(cfg(windows))]\n@@ -728,7 +728,7 @@ fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n         can_not_copy: None,\n         .. b0\n     };\n-    do b1.spawn { die!(); }\n+    do b1.spawn { fail!(); }\n     po.recv(); // We should get punted awake\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n@@ -749,26 +749,26 @@ fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n         .. b0\n     };\n     do b1.spawn { loop { task::yield(); } }\n-    die!(); // *both* mechanisms would be wrong if this didn't kill the child\n+    fail!(); // *both* mechanisms would be wrong if this didn't kill the child\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_linked_unsup_fail_up() { // child fails; parent fails\n     let (po, _ch) = stream::<()>();\n     // Default options are to spawn linked & unsupervised.\n-    do spawn { die!(); }\n+    do spawn { fail!(); }\n     po.recv(); // We should get punted awake\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_linked_unsup_fail_down() { // parent fails; child fails\n     // Default options are to spawn linked & unsupervised.\n     do spawn { loop { task::yield(); } }\n-    die!();\n+    fail!();\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_linked_unsup_default_opts() { // parent fails; child fails\n     // Make sure the above test is the same as this one.\n     do task().linked().spawn { loop { task::yield(); } }\n-    die!();\n+    fail!();\n }\n \n // A couple bonus linked failure tests - testing for failure propagation even\n@@ -783,7 +783,7 @@ fn test_spawn_failure_propagate_grandchild() {\n         }\n     }\n     for iter::repeat(16) { task::yield(); }\n-    die!();\n+    fail!();\n }\n \n #[test] #[should_fail] #[ignore(cfg(windows))]\n@@ -795,7 +795,7 @@ fn test_spawn_failure_propagate_secondborn() {\n         }\n     }\n     for iter::repeat(16) { task::yield(); }\n-    die!();\n+    fail!();\n }\n \n #[test] #[should_fail] #[ignore(cfg(windows))]\n@@ -807,7 +807,7 @@ fn test_spawn_failure_propagate_nephew_or_niece() {\n         }\n     }\n     for iter::repeat(16) { task::yield(); }\n-    die!();\n+    fail!();\n }\n \n #[test] #[should_fail] #[ignore(cfg(windows))]\n@@ -819,7 +819,7 @@ fn test_spawn_linked_sup_propagate_sibling() {\n         }\n     }\n     for iter::repeat(16) { task::yield(); }\n-    die!();\n+    fail!();\n }\n \n #[test]\n@@ -863,7 +863,7 @@ fn test_future_result() {\n     result = None;\n     do task().future_result(|+r|\n         { result = Some(move r); }).unlinked().spawn {\n-        die!();\n+        fail!();\n     }\n     assert option::unwrap(move result).recv() == Failure;\n }\n@@ -879,18 +879,18 @@ fn test_try_success() {\n         ~\"Success!\"\n     } {\n         result::Ok(~\"Success!\") => (),\n-        _ => die!()\n+        _ => fail!()\n     }\n }\n \n #[test]\n #[ignore(cfg(windows))]\n fn test_try_fail() {\n     match do try {\n-        die!()\n+        fail!()\n     } {\n         result::Err(()) => (),\n-        result::Ok(()) => die!()\n+        result::Ok(()) => fail!()\n     }\n }\n \n@@ -1090,7 +1090,7 @@ fn test_unkillable() {\n         yield();\n         // We want to fail after the unkillable task\n         // blocks on recv\n-        die!();\n+        fail!();\n     }\n \n     unsafe {\n@@ -1125,7 +1125,7 @@ fn test_unkillable_nested() {\n         yield();\n         // We want to fail after the unkillable task\n         // blocks on recv\n-        die!();\n+        fail!();\n     }\n \n     unsafe {"}, {"sha": "a57e8a8ee44b747870ca23e58fea45d493cafe6c", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -644,7 +644,7 @@ pub fn spawn_raw(opts: TaskOpts, f: fn~()) {\n \n     fn new_task_in_sched(opts: SchedOpts) -> *rust_task {\n         if opts.foreign_stack_size != None {\n-            die!(~\"foreign_stack_size scheduler option unimplemented\");\n+            fail!(~\"foreign_stack_size scheduler option unimplemented\");\n         }\n \n         let num_threads = match opts.mode {\n@@ -655,11 +655,11 @@ pub fn spawn_raw(opts: TaskOpts, f: fn~()) {\n             SingleThreaded => 1u,\n             ThreadPerCore => unsafe { rt::rust_num_threads() },\n             ThreadPerTask => {\n-                die!(~\"ThreadPerTask scheduling mode unimplemented\")\n+                fail!(~\"ThreadPerTask scheduling mode unimplemented\")\n             }\n             ManualThreads(threads) => {\n                 if threads == 0u {\n-                    die!(~\"can not create a scheduler with no threads\");\n+                    fail!(~\"can not create a scheduler with no threads\");\n                 }\n                 threads\n             }\n@@ -695,7 +695,7 @@ fn test_spawn_raw_unsupervise() {\n         .. default_task_opts()\n     };\n     do spawn_raw(move opts) {\n-        die!();\n+        fail!();\n     }\n }\n \n@@ -725,7 +725,7 @@ fn test_spawn_raw_notify_failure() {\n         .. default_task_opts()\n     };\n     do spawn_raw(move opts) {\n-        die!();\n+        fail!();\n     }\n     assert notify_po.recv() == Failure;\n }"}, {"sha": "87cbcdfe30b9a79b78d68ab83cfe3264176150b7", "filename": "src/libcore/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -96,7 +96,7 @@ fn choose_weighted_item(v: &[Item]) -> Item {\n \n */\n pub fn unreachable() -> ! {\n-    die!(~\"internal error: entered unreachable code\");\n+    fail!(~\"internal error: entered unreachable code\");\n }\n \n mod tests {"}, {"sha": "966928125a98a09c6032da770d1f877d80f929af", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -239,7 +239,7 @@ pub pure fn init<T: Copy>(v: &[const T]) -> ~[T] {\n \n /// Returns the last element of the slice `v`, failing if the slice is empty.\n pub pure fn last<T: Copy>(v: &[const T]) -> T {\n-    if len(v) == 0u { die!(~\"last_unsafe: empty vector\") }\n+    if len(v) == 0u { fail!(~\"last_unsafe: empty vector\") }\n     v[len(v) - 1u]\n }\n \n@@ -562,7 +562,7 @@ pub fn consume<T>(mut v: ~[T], f: fn(uint, v: T)) {\n pub fn pop<T>(v: &mut ~[T]) -> T {\n     let ln = v.len();\n     if ln == 0 {\n-        die!(~\"sorry, cannot vec::pop an empty vector\")\n+        fail!(~\"sorry, cannot vec::pop an empty vector\")\n     }\n     let valptr = ptr::to_mut_unsafe_ptr(&mut v[ln - 1u]);\n     unsafe {\n@@ -583,7 +583,7 @@ pub fn pop<T>(v: &mut ~[T]) -> T {\n pub fn swap_remove<T>(v: &mut ~[T], index: uint) -> T {\n     let ln = v.len();\n     if index >= ln {\n-        die!(fmt!(\"vec::swap_remove - index %u >= length %u\", index, ln));\n+        fail!(fmt!(\"vec::swap_remove - index %u >= length %u\", index, ln));\n     }\n     if index < ln - 1 {\n         v[index] <-> v[ln - 1];\n@@ -825,7 +825,7 @@ pub pure fn flat_map<T, U>(v: &[T], f: fn(t: &T) -> ~[U]) -> ~[U] {\n pub pure fn map2<T: Copy, U: Copy, V>(v0: &[T], v1: &[U],\n                                   f: fn(t: &T, v: &U) -> V) -> ~[V] {\n     let v0_len = len(v0);\n-    if v0_len != len(v1) { die!(); }\n+    if v0_len != len(v1) { fail!(); }\n     let mut u: ~[V] = ~[];\n     let mut i = 0u;\n     while i < v0_len {\n@@ -2912,7 +2912,7 @@ mod tests {\n     #[test]\n     fn test_each_empty() {\n         for each::<int>(~[]) |_v| {\n-            die!(); // should never be executed\n+            fail!(); // should never be executed\n         }\n     }\n \n@@ -2939,7 +2939,7 @@ mod tests {\n     #[test]\n     fn test_reach_empty() {\n         for rev_each::<int>(~[]) |_v| {\n-            die!(); // should never execute\n+            fail!(); // should never execute\n         }\n     }\n \n@@ -3441,7 +3441,7 @@ mod tests {\n     #[should_fail]\n     fn test_from_fn_fail() {\n         do from_fn(100) |v| {\n-            if v == 50 { die!() }\n+            if v == 50 { fail!() }\n             (~0, @0)\n         };\n     }\n@@ -3455,7 +3455,7 @@ mod tests {\n             push((~0, @0));\n             push((~0, @0));\n             push((~0, @0));\n-            die!();\n+            fail!();\n         };\n     }\n \n@@ -3468,7 +3468,7 @@ mod tests {\n         let mut i = 0;\n         do split(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 1;\n \n@@ -3485,7 +3485,7 @@ mod tests {\n         let mut i = 0;\n         do split(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 1;\n \n@@ -3502,7 +3502,7 @@ mod tests {\n         let mut i = 0;\n         do splitn(v, 100) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 1;\n \n@@ -3519,7 +3519,7 @@ mod tests {\n         let mut i = 0;\n         do split(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 1;\n \n@@ -3536,7 +3536,7 @@ mod tests {\n         let mut i = 0;\n         do rsplit(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 1;\n \n@@ -3553,7 +3553,7 @@ mod tests {\n         let mut i = 0;\n         do rsplit(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 1;\n \n@@ -3570,7 +3570,7 @@ mod tests {\n         let mut i = 0;\n         do rsplitn(v, 100) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 1;\n \n@@ -3587,7 +3587,7 @@ mod tests {\n         let mut i = 0;\n         do rsplitn(v, 100) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 1;\n \n@@ -3603,7 +3603,7 @@ mod tests {\n         let mut i = 0;\n         do consume(v) |_i, _elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 1;\n         };\n@@ -3617,7 +3617,7 @@ mod tests {\n         let mut v = ~[];\n         do v.grow_fn(100) |i| {\n             if i == 50 {\n-                die!()\n+                fail!()\n             }\n             (~0, @0)\n         }\n@@ -3631,7 +3631,7 @@ mod tests {\n         let mut i = 0;\n         do map(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             ~[(~0, @0)]\n@@ -3646,7 +3646,7 @@ mod tests {\n         let mut i = 0;\n         do map_consume(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             ~[(~0, @0)]\n@@ -3661,7 +3661,7 @@ mod tests {\n         let mut i = 0;\n         do mapi(v) |_i, _elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             ~[(~0, @0)]\n@@ -3676,7 +3676,7 @@ mod tests {\n         let mut i = 0;\n         do map(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             ~[(~0, @0)]\n@@ -3692,7 +3692,7 @@ mod tests {\n         let mut i = 0;\n         do map2(v, v) |_elt1, _elt2| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             ~[(~0, @0)]\n@@ -3708,7 +3708,7 @@ mod tests {\n         let mut i = 0;\n         do filter_mapped(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             Some((~0, @0))\n@@ -3724,7 +3724,7 @@ mod tests {\n         let mut i = 0;\n         do v.filtered |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             true\n@@ -3740,7 +3740,7 @@ mod tests {\n         let mut i = 0;\n         do foldl((~0, @0), v) |_a, _b| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             (~0, @0)\n@@ -3756,7 +3756,7 @@ mod tests {\n         let mut i = 0;\n         do foldr(v, (~0, @0)) |_a, _b| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             (~0, @0)\n@@ -3771,7 +3771,7 @@ mod tests {\n         let mut i = 0;\n         do any(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             false\n@@ -3786,7 +3786,7 @@ mod tests {\n         let mut i = 0;\n         do any(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             false\n@@ -3801,7 +3801,7 @@ mod tests {\n         let mut i = 0;\n         do all(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             true\n@@ -3816,7 +3816,7 @@ mod tests {\n         let mut i = 0;\n         do alli(v) |_i, _elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             true\n@@ -3831,7 +3831,7 @@ mod tests {\n         let mut i = 0;\n         do all2(v, v) |_elt1, _elt2| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             true\n@@ -3847,7 +3847,7 @@ mod tests {\n         let mut i = 0;\n         do find(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             false\n@@ -3862,7 +3862,7 @@ mod tests {\n         let mut i = 0;\n         do position(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             false\n@@ -3877,7 +3877,7 @@ mod tests {\n         let mut i = 0;\n         do rposition(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             false\n@@ -3892,7 +3892,7 @@ mod tests {\n         let mut i = 0;\n         do each(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             false\n@@ -3907,7 +3907,7 @@ mod tests {\n         let mut i = 0;\n         do eachi(v) |_i, _elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n             false\n@@ -3923,7 +3923,7 @@ mod tests {\n         let mut i = 0;\n         for each_permutation(v) |_elt| {\n             if i == 2 {\n-                die!()\n+                fail!()\n             }\n             i += 0;\n         }\n@@ -3935,7 +3935,7 @@ mod tests {\n     fn test_as_imm_buf_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n         do as_imm_buf(v) |_buf, _i| {\n-            die!()\n+            fail!()\n         }\n     }\n \n@@ -3945,7 +3945,7 @@ mod tests {\n     fn test_as_const_buf_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n         do as_const_buf(v) |_buf, _i| {\n-            die!()\n+            fail!()\n         }\n     }\n \n@@ -3955,7 +3955,7 @@ mod tests {\n     fn test_as_mut_buf_fail() {\n         let mut v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n         do as_mut_buf(v) |_buf, _i| {\n-            die!()\n+            fail!()\n         }\n     }\n "}, {"sha": "6d0b2f8a76205fb8f6ff87849c2c846ae7b4de73", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -569,7 +569,7 @@ pub fn check_roundtrip_convergence(code: @~str, maxIters: uint) {\n         run::run_program(~\"diff\",\n                          ~[~\"-w\", ~\"-u\", ~\"round-trip-a.rs\",\n                           ~\"round-trip-b.rs\"]);\n-        die!(~\"Mismatch\");\n+        fail!(~\"Mismatch\");\n     }\n }\n "}, {"sha": "cb074eecd6db4ba0687cd0fa3df1321e60c11716", "filename": "src/libfuzzer/rand_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibfuzzer%2Frand_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibfuzzer%2Frand_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Frand_util.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -42,7 +42,7 @@ fn shuffled<T: copy>(r : rand::rng, v : ~[T]) -> ~[T] {\n }\n \n // sample from a population without replacement\n-//fn sample<T>(r : rand::rng, pop : ~[T], k : uint) -> ~[T] { die!() }\n+//fn sample<T>(r : rand::rng, pop : ~[T], k : uint) -> ~[T] { fail!() }\n \n // Two ways to make a weighted choice.\n // * weighted_choice is O(number of choices) time"}, {"sha": "df362b779840807d319e4eea32ef641e9dc9967a", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -509,7 +509,7 @@ pub fn build_link_meta(sess: Session, c: &ast::crate, output: &Path,\n               }\n               ast::meta_list(_, _) => {\n                 // FIXME (#607): Implement this\n-                die!(~\"unimplemented meta_item variant\");\n+                fail!(~\"unimplemented meta_item variant\");\n               }\n             }\n         }"}, {"sha": "18e89635ab298dd42decb83a2f9cd66af464046b", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -178,7 +178,7 @@ pub fn get_install_prefix_rpath(target_triple: &str) -> Path {\n     let install_prefix = env!(\"CFG_PREFIX\");\n \n     if install_prefix == ~\"\" {\n-        die!(~\"rustc compiled without CFG_PREFIX environment variable\");\n+        fail!(~\"rustc compiled without CFG_PREFIX environment variable\");\n     }\n \n     let tlib = filesearch::relative_target_lib_path(target_triple);"}, {"sha": "b0024bace37e029cde907939e7b5f08e7cad998a", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -506,7 +506,7 @@ pub fn host_triple() -> ~str {\n     return if ht != ~\"\" {\n             ht\n         } else {\n-            die!(~\"rustc built without CFG_HOST_TRIPLE\")\n+            fail!(~\"rustc built without CFG_HOST_TRIPLE\")\n         };\n }\n \n@@ -841,7 +841,7 @@ pub fn build_output_filenames(input: input,\n \n pub fn early_error(emitter: diagnostic::Emitter, msg: ~str) -> ! {\n     emitter(None, msg, diagnostic::fatal);\n-    die!();\n+    fail!();\n }\n \n pub fn list_metadata(sess: Session, path: &Path, out: io::Writer) {\n@@ -869,7 +869,7 @@ pub mod test {\n         let matches =\n             &match getopts(~[~\"--test\"], optgroups()) {\n               Ok(copy m) => m,\n-              Err(copy f) => die!(~\"test_switch_implies_cfg_test: \" +\n+              Err(copy f) => fail!(~\"test_switch_implies_cfg_test: \" +\n                              getopts::fail_str(f))\n             };\n         let sessopts = build_session_options(\n@@ -887,7 +887,7 @@ pub mod test {\n             &match getopts(~[~\"--test\", ~\"--cfg=test\"], optgroups()) {\n               Ok(copy m) => m,\n               Err(copy f) => {\n-                die!(~\"test_switch_implies_cfg_test_unless_cfg_test: \" +\n+                fail!(~\"test_switch_implies_cfg_test_unless_cfg_test: \" +\n                     getopts::fail_str(f));\n               }\n             };"}, {"sha": "4b63bb372153837dd2d567ac69e2449bea1244f2", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -1457,7 +1457,7 @@ pub fn float_width(llt: TypeRef) -> uint {\n               2 => 64u,\n               3 => 80u,\n               4 | 5 => 128u,\n-              _ => die!(~\"llvm_float_width called on a non-float type\")\n+              _ => fail!(~\"llvm_float_width called on a non-float type\")\n             };\n     }\n }"}, {"sha": "cb56136f1c466b9460470aee726cb34c5651d43e", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -92,7 +92,7 @@ fn find_item(item_id: int, items: ebml::Doc) -> ebml::Doc {\n fn lookup_item(item_id: int, data: @~[u8]) -> ebml::Doc {\n     let items = reader::get_doc(reader::Doc(data), tag_items);\n     match maybe_find_item(item_id, items) {\n-       None => die!(fmt!(\"lookup_item: id not found: %d\", item_id)),\n+       None => fail!(fmt!(\"lookup_item: id not found: %d\", item_id)),\n        Some(d) => d\n     }\n }\n@@ -150,7 +150,7 @@ fn item_family(item: ebml::Doc) -> Family {\n       'g' => PublicField,\n       'j' => PrivateField,\n       'N' => InheritedField,\n-       c => die!(fmt!(\"unexpected family char: %c\", c))\n+       c => fail!(fmt!(\"unexpected family char: %c\", c))\n     }\n }\n \n@@ -399,7 +399,7 @@ pub fn struct_dtor(cdata: cmd, id: ast::node_id) -> Option<ast::def_id> {\n     let mut found = None;\n     let cls_items = match maybe_find_item(id, items) {\n             Some(it) => it,\n-            None     => die!(fmt!(\"struct_dtor: class id not found \\\n+            None     => fail!(fmt!(\"struct_dtor: class id not found \\\n               when looking up dtor for %d\", id))\n     };\n     for reader::tagged_docs(cls_items, tag_item_dtor) |doc| {\n@@ -424,8 +424,8 @@ pub enum def_like {\n fn def_like_to_def(def_like: def_like) -> ast::def {\n     match def_like {\n         dl_def(def) => return def,\n-        dl_impl(*) => die!(~\"found impl in def_like_to_def\"),\n-        dl_field => die!(~\"found field in def_like_to_def\")\n+        dl_impl(*) => fail!(~\"found impl in def_like_to_def\"),\n+        dl_field => fail!(~\"found field in def_like_to_def\")\n     }\n }\n \n@@ -626,7 +626,7 @@ fn get_self_ty(item: ebml::Doc) -> ast::self_ty_ {\n             'm' => { ast::m_mutbl }\n             'c' => { ast::m_const }\n             _ => {\n-                die!(fmt!(\"unknown mutability character: `%c`\", ch as char))\n+                fail!(fmt!(\"unknown mutability character: `%c`\", ch as char))\n             }\n         }\n     }\n@@ -643,7 +643,7 @@ fn get_self_ty(item: ebml::Doc) -> ast::self_ty_ {\n         '~' => { return ast::sty_uniq(get_mutability(string[1])); }\n         '&' => { return ast::sty_region(get_mutability(string[1])); }\n         _ => {\n-            die!(fmt!(\"unknown self type code: `%c`\", self_ty_kind as char));\n+            fail!(fmt!(\"unknown self type code: `%c`\", self_ty_kind as char));\n         }\n     }\n }\n@@ -834,7 +834,7 @@ pub fn get_static_methods_if_impl(intr: @ident_interner,\n                     StaticMethod => purity = ast::impure_fn,\n                     UnsafeStaticMethod => purity = ast::unsafe_fn,\n                     PureStaticMethod => purity = ast::pure_fn,\n-                    _ => die!()\n+                    _ => fail!()\n                 }\n \n                 static_impl_methods.push(StaticMethodInfo {\n@@ -867,7 +867,7 @@ pure fn family_to_visibility(family: Family) -> ast::visibility {\n       PublicField => ast::public,\n       PrivateField => ast::private,\n       InheritedField => ast::inherited,\n-      _ => die!()\n+      _ => fail!()\n     }\n }\n \n@@ -926,7 +926,7 @@ fn describe_def(items: ebml::Doc, id: ast::def_id) -> ~str {\n     if id.crate != ast::local_crate { return ~\"external\"; }\n     let it = match maybe_find_item(id.node, items) {\n         Some(it) => it,\n-        None => die!(fmt!(\"describe_def: item not found %?\", id))\n+        None => fail!(fmt!(\"describe_def: item not found %?\", id))\n     };\n     return item_family_to_str(item_family(it));\n }\n@@ -1111,7 +1111,7 @@ pub fn translate_def_id(cdata: cmd, did: ast::def_id) -> ast::def_id {\n \n     match cdata.cnum_map.find(&did.crate) {\n       option::Some(n) => ast::def_id { crate: n, node: did.node },\n-      option::None => die!(~\"didn't find a crate in the cnum_map\")\n+      option::None => fail!(~\"didn't find a crate in the cnum_map\")\n     }\n }\n "}, {"sha": "12c5e3388dbe71d78d98db5a5f0748b1ddaab884", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -553,7 +553,7 @@ fn purity_static_method_family(p: purity) -> char {\n       unsafe_fn => 'U',\n       pure_fn => 'P',\n       impure_fn => 'F',\n-      _ => die!(~\"extern fn can't be static\")\n+      _ => fail!(~\"extern fn can't be static\")\n     }\n }\n \n@@ -879,7 +879,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n                                    true, item.id, *m, /*bad*/copy m.tps);\n         }\n       }\n-      item_mac(*) => die!(~\"item macros unimplemented\")\n+      item_mac(*) => fail!(~\"item macros unimplemented\")\n     }\n }\n \n@@ -936,7 +936,7 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n                         encode_info_for_item(ecx, ebml_w, i,\n                                              index, *pt);\n                     }\n-                    _ => die!(~\"bad item\")\n+                    _ => fail!(~\"bad item\")\n                 }\n             }\n         },\n@@ -951,7 +951,7 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n                                                      abi);\n                     }\n                     // case for separate item and foreign-item tables\n-                    _ => die!(~\"bad foreign item\")\n+                    _ => fail!(~\"bad foreign item\")\n                 }\n             }\n         },"}, {"sha": "eac459ec703d0e52fef483aace0dbe49fa31a8d0", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -108,7 +108,7 @@ fn make_target_lib_path(sysroot: &Path,\n fn get_or_default_sysroot() -> Path {\n     match os::self_exe_path() {\n       option::Some(ref p) => (*p).pop(),\n-      option::None => die!(~\"can't determine value for sysroot\")\n+      option::None => fail!(~\"can't determine value for sysroot\")\n     }\n }\n \n@@ -176,7 +176,7 @@ fn get_cargo_lib_path_nearest() -> Result<Path, ~str> {\n pub fn libdir() -> ~str {\n    let libdir = env!(\"CFG_LIBDIR\");\n    if str::is_empty(libdir) {\n-      die!(~\"rustc compiled without CFG_LIBDIR environment variable\");\n+      fail!(~\"rustc compiled without CFG_LIBDIR environment variable\");\n    }\n    libdir\n }"}, {"sha": "9e5b1db879f0c4cda0bb17bb0698dee390de606a", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -150,10 +150,10 @@ pub fn crate_name_from_metas(+metas: ~[@ast::meta_item]) -> ~str {\n           Some(ref n) => (/*bad*/copy *n),\n           // FIXME (#2406): Probably want a warning here since the user\n           // is using the wrong type of meta item.\n-          _ => die!()\n+          _ => fail!()\n         }\n       }\n-      None => die!(~\"expected to find the crate name\")\n+      None => fail!(~\"expected to find the crate name\")\n     }\n }\n "}, {"sha": "2599ceb2ef16e8c4ddef56211aa5790b3040dc17", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -190,7 +190,7 @@ fn parse_bound_region(st: @mut PState) -> ty::bound_region {\n         assert next(st) == '|';\n         ty::br_cap_avoid(id, @parse_bound_region(st))\n       },\n-      _ => die!(~\"parse_bound_region: bad input\")\n+      _ => fail!(~\"parse_bound_region: bad input\")\n     }\n }\n \n@@ -215,15 +215,15 @@ fn parse_region(st: @mut PState) -> ty::Region {\n       't' => {\n         ty::re_static\n       }\n-      _ => die!(~\"parse_region: bad input\")\n+      _ => fail!(~\"parse_region: bad input\")\n     }\n }\n \n fn parse_opt<T>(st: @mut PState, f: fn() -> T) -> Option<T> {\n     match next(st) {\n       'n' => None,\n       's' => Some(f()),\n-      _ => die!(~\"parse_opt: bad input\")\n+      _ => fail!(~\"parse_opt: bad input\")\n     }\n }\n \n@@ -256,7 +256,7 @@ fn parse_ty(st: @mut PState, conv: conv_did) -> ty::t {\n           'D' => return ty::mk_mach_int(st.tcx, ast::ty_i64),\n           'f' => return ty::mk_mach_float(st.tcx, ast::ty_f32),\n           'F' => return ty::mk_mach_float(st.tcx, ast::ty_f64),\n-          _ => die!(~\"parse_ty: bad numeric type\")\n+          _ => fail!(~\"parse_ty: bad numeric type\")\n         }\n       }\n       'c' => return ty::mk_char(st.tcx),\n@@ -360,7 +360,7 @@ fn parse_ty(st: @mut PState, conv: conv_did) -> ty::t {\n           assert (next(st) == ']');\n           return ty::mk_struct(st.tcx, did, substs);\n       }\n-      c => { error!(\"unexpected char in type string: %c\", c); die!();}\n+      c => { error!(\"unexpected char in type string: %c\", c); fail!();}\n     }\n }\n \n@@ -412,22 +412,22 @@ fn parse_purity(c: char) -> purity {\n       'p' => pure_fn,\n       'i' => impure_fn,\n       'c' => extern_fn,\n-      _ => die!(~\"parse_purity: bad purity\")\n+      _ => fail!(~\"parse_purity: bad purity\")\n     }\n }\n \n fn parse_abi(c: char) -> Abi {\n     match c {\n       'r' => ast::RustAbi,\n-      _ => die!(fmt!(\"parse_abi: bad ABI '%c'\", c))\n+      _ => fail!(fmt!(\"parse_abi: bad ABI '%c'\", c))\n     }\n }\n \n fn parse_onceness(c: char) -> ast::Onceness {\n     match c {\n         'o' => ast::Once,\n         'm' => ast::Many,\n-        _ => die!(~\"parse_onceness: bad onceness\")\n+        _ => fail!(~\"parse_onceness: bad onceness\")\n     }\n }\n \n@@ -440,7 +440,7 @@ fn parse_mode(st: @mut PState) -> ast::mode {\n         '+' => ast::by_copy,\n         '=' => ast::by_ref,\n         '#' => ast::by_val,\n-        _ => die!(~\"bad mode\")\n+        _ => fail!(~\"bad mode\")\n     });\n     return m;\n }\n@@ -490,20 +490,20 @@ pub fn parse_def_id(buf: &[u8]) -> ast::def_id {\n     while colon_idx < len && buf[colon_idx] != ':' as u8 { colon_idx += 1u; }\n     if colon_idx == len {\n         error!(\"didn't find ':' when parsing def id\");\n-        die!();\n+        fail!();\n     }\n \n     let crate_part = vec::view(buf, 0u, colon_idx);\n     let def_part = vec::view(buf, colon_idx + 1u, len);\n \n     let crate_num = match uint::parse_bytes(crate_part, 10u) {\n        Some(cn) => cn as int,\n-       None => die!(fmt!(\"internal error: parse_def_id: crate number \\\n+       None => fail!(fmt!(\"internal error: parse_def_id: crate number \\\n                                expected, but found %?\", crate_part))\n     };\n     let def_num = match uint::parse_bytes(def_part, 10u) {\n        Some(dn) => dn as int,\n-       None => die!(fmt!(\"internal error: parse_def_id: id expected, but \\\n+       None => fail!(fmt!(\"internal error: parse_def_id: id expected, but \\\n                                found %?\", def_part))\n     };\n     ast::def_id { crate: crate_num, node: def_num }\n@@ -526,7 +526,7 @@ fn parse_bounds(st: @mut PState, conv: conv_did) -> @~[ty::param_bound] {\n           'O' => ty::bound_durable,\n           'I' => ty::bound_trait(parse_ty(st, conv)),\n           '.' => break,\n-          _ => die!(~\"parse_bounds: bad bounds\")\n+          _ => fail!(~\"parse_bounds: bad bounds\")\n         });\n     }\n     @bounds"}, {"sha": "252de54cb9bbd6d5740ac516cef376d7c6166663", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -326,7 +326,7 @@ fn enc_sty(w: io::Writer, cx: @ctxt, +st: ty::sty) {\n           debug!(\"~~~~ %s\", ~\"]\");\n           w.write_char(']');\n       }\n-      ty::ty_err => die!(~\"Shouldn't encode error type\")\n+      ty::ty_err => fail!(~\"Shouldn't encode error type\")\n     }\n }\n "}, {"sha": "af2465fe4d14d5df5c812ebd6fa20a44c6b5d1a4", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -304,7 +304,7 @@ fn simplify_ast(ii: ast::inlined_item) -> ast::inlined_item {\n                                              span: _}, _) => true,\n               ast::stmt_decl(@codemap::spanned { node: ast::decl_item(_),\n                                              span: _}, _) => false,\n-              ast::stmt_mac(*) => die!(~\"unexpanded macro in astencode\")\n+              ast::stmt_mac(*) => fail!(~\"unexpanded macro in astencode\")\n             }\n         };\n         let blk_sans_items = ast::blk_ {\n@@ -717,7 +717,7 @@ impl reader::Decoder: vtable_decoder_helpers {\n                     )\n                   }\n                   // hard to avoid - user input\n-                  _ => die!(~\"bad enum variant\")\n+                  _ => fail!(~\"bad enum variant\")\n                 }\n             }\n         }\n@@ -1288,6 +1288,6 @@ fn test_simplification() {\n         assert pprust::item_to_str(item_out, ext_cx.parse_sess().interner)\n             == pprust::item_to_str(item_exp, ext_cx.parse_sess().interner);\n       }\n-      _ => die!()\n+      _ => fail!()\n     }\n }"}, {"sha": "6d4de6aeb9351079ccb7becd6a22d88c8067b95a", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -253,7 +253,7 @@ pub fn check_item_recursion(sess: Session,\n                   ast_map::node_item(it, _) => {\n                     (v.visit_item)(it, env, v);\n                   }\n-                  _ => die!(~\"const not bound to an item\")\n+                  _ => fail!(~\"const not bound to an item\")\n                 }\n               }\n               _ => ()"}, {"sha": "bd07ca84c9aad8ce6c0b93c39b791cdb119c0a2e", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -147,11 +147,11 @@ pub fn check_exhaustive(cx: @MatchCheckCtxt, sp: span, pats: ~[@pat]) {\n           }\n           ty::ty_enum(id, _) => {\n               let vid = match (*ctor) { variant(id) => id,\n-              _ => die!(~\"check_exhaustive: non-variant ctor\") };\n+              _ => fail!(~\"check_exhaustive: non-variant ctor\") };\n             match vec::find(*ty::enum_variants(cx.tcx, id),\n                                 |v| v.id == vid) {\n                 Some(v) => Some(cx.tcx.sess.str_of(v.name)),\n-              None => die!(~\"check_exhaustive: bad variant in ctor\")\n+              None => fail!(~\"check_exhaustive: bad variant in ctor\")\n             }\n           }\n           ty::ty_unboxed_vec(*) | ty::ty_evec(*) => {\n@@ -366,7 +366,7 @@ pub fn missing_ctor(cx: @MatchCheckCtxt,\n                     return Some(variant(v.id));\n                 }\n             }\n-            die!();\n+            fail!();\n         } else { None }\n       }\n       ty::ty_nil => None,\n@@ -377,7 +377,7 @@ pub fn missing_ctor(cx: @MatchCheckCtxt,\n               None => (),\n               Some(val(const_bool(true))) => true_found = true,\n               Some(val(const_bool(false))) => false_found = true,\n-              _ => die!(~\"impossible case\")\n+              _ => fail!(~\"impossible case\")\n             }\n         }\n         if true_found && false_found { None }\n@@ -445,10 +445,10 @@ pub fn ctor_arity(cx: @MatchCheckCtxt, ctor: ctor, ty: ty::t) -> uint {\n       ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_rptr(*) => 1u,\n       ty::ty_enum(eid, _) => {\n           let id = match ctor { variant(id) => id,\n-          _ => die!(~\"impossible case\") };\n+          _ => fail!(~\"impossible case\") };\n         match vec::find(*ty::enum_variants(cx.tcx, eid), |v| v.id == id ) {\n             Some(v) => v.args.len(),\n-            None => die!(~\"impossible case\")\n+            None => fail!(~\"impossible case\")\n         }\n       }\n       ty::ty_struct(cid, _) => ty::lookup_struct_fields(cx.tcx, cid).len(),\n@@ -496,7 +496,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                                     compare_const_vals((*c_hi), e_v) <= 0\n                             }\n                             single => true,\n-                            _ => die!(~\"type error\")\n+                            _ => fail!(~\"type error\")\n                         };\n                         if match_ { Some(vec::tail(r)) } else { None }\n                     }\n@@ -529,7 +529,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n             pat_rec(ref flds, _) => {\n                 let ty_flds = match /*bad*/copy ty::get(left_ty).sty {\n                     ty::ty_rec(flds) => flds,\n-                    _ => die!(~\"bad type for pat_rec\")\n+                    _ => fail!(~\"bad type for pat_rec\")\n                 };\n                 let args = vec::map(ty_flds, |ty_fld| {\n                     match flds.find(|f| f.ident == ty_fld.ident) {\n@@ -595,7 +595,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             compare_const_vals((*c_hi), e_v) <= 0\n                     }\n                     single => true,\n-                    _ => die!(~\"type error\")\n+                    _ => fail!(~\"type error\")\n                 };\n                 if match_ { Some(vec::tail(r)) } else { None }\n             }\n@@ -605,7 +605,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                     range(ref lo, ref hi) =>\n                         ((/*bad*/copy *lo), (/*bad*/copy *hi)),\n                     single => return Some(vec::tail(r)),\n-                    _ => die!(~\"type error\")\n+                    _ => fail!(~\"type error\")\n                 };\n                 let v_lo = eval_const_expr(cx.tcx, lo),\n                 v_hi = eval_const_expr(cx.tcx, hi);"}, {"sha": "ae83e996aba72c35ce704bd08fe32d930ad5a679", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -233,7 +233,7 @@ pub enum const_val {\n pub fn eval_const_expr(tcx: middle::ty::ctxt, e: @expr) -> const_val {\n     match eval_const_expr_partial(tcx, e) {\n         Ok(ref r) => (/*bad*/copy *r),\n-        Err(ref s) => die!(/*bad*/copy *s)\n+        Err(ref s) => fail!(/*bad*/copy *s)\n     }\n }\n \n@@ -459,7 +459,7 @@ pub fn compare_const_vals(a: const_val, b: const_val) -> int {\n             1\n         }\n     }\n-    _ => die!(~\"compare_const_vals: ill-typed comparison\")\n+    _ => fail!(~\"compare_const_vals: ill-typed comparison\")\n   }\n }\n "}, {"sha": "2c39e41c57bc4c5ebc7776c1c07434272da2b1f3", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -57,7 +57,7 @@ fn collect_freevars(def_map: resolve::DefMap, blk: ast::blk)\n               ast::expr_path(*) => {\n                   let mut i = 0;\n                   match def_map.find(&expr.id) {\n-                    None => die!(~\"path not found\"),\n+                    None => fail!(~\"path not found\"),\n                     Some(df) => {\n                       let mut def = df;\n                       while i < depth {\n@@ -117,7 +117,7 @@ pub fn annotate_freevars(def_map: resolve::DefMap, crate: @ast::crate) ->\n \n pub fn get_freevars(tcx: ty::ctxt, fid: ast::node_id) -> freevar_info {\n     match tcx.freevars.find(&fid) {\n-      None => die!(~\"get_freevars: \" + int::str(fid) + ~\" has no freevars\"),\n+      None => fail!(~\"get_freevars: \" + int::str(fid) + ~\" has no freevars\"),\n       Some(d) => return d\n     }\n }"}, {"sha": "29a3a8336429081d6bd0b4bacc563b1250648560", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -204,7 +204,7 @@ pub fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n         };\n         if vec::len(*ts) != vec::len(*bounds) {\n             // Fail earlier to make debugging easier\n-            die!(fmt!(\"internal error: in kind::check_expr, length \\\n+            fail!(fmt!(\"internal error: in kind::check_expr, length \\\n                        mismatch between actual and declared bounds: actual = \\\n                         %s (%u tys), declared = %? (%u tys)\",\n                       tys_to_str(cx.tcx, *ts), ts.len(),"}, {"sha": "da153778b9abbee732e82ff59d4115e43f19a48c", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -485,7 +485,7 @@ fn check_item_type_limits(cx: ty::ctxt, it: @ast::item) {\n             ast::gt => v >= min,\n             ast::ge => v > min,\n             ast::eq | ast::ne => v >= min && v <= max,\n-            _ => die!()\n+            _ => fail!()\n         }\n     }\n \n@@ -544,7 +544,7 @@ fn check_item_type_limits(cx: ty::ctxt, it: @ast::item) {\n                         ast::lit_int_unsuffixed(v) => v,\n                         _ => return true\n                     },\n-                    _ => die!()\n+                    _ => fail!()\n                 };\n                 is_valid(norm_binop, lit_val, min, max)\n             }\n@@ -557,7 +557,7 @@ fn check_item_type_limits(cx: ty::ctxt, it: @ast::item) {\n                         ast::lit_int_unsuffixed(v) => v as u64,\n                         _ => return true\n                     },\n-                    _ => die!()\n+                    _ => fail!()\n                 };\n                 is_valid(norm_binop, lit_val, min, max)\n             }\n@@ -960,7 +960,7 @@ fn check_fn_deprecated_modes(tcx: ty::ctxt, fn_ty: ty::t, decl: ast::fn_decl,\n                                        ty_to_str(tcx, arg_ty.ty),\n                                        mode_to_str(arg_ast.mode));\n                                 error!(\"%?\",arg_ast.ty.node);\n-                                die!()\n+                                fail!()\n                             }\n                         };\n                     }"}, {"sha": "acb73e90c5d58a4626df6c1318a0b2781fab9785", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -323,7 +323,7 @@ pub fn namespace_for_duplicate_checking_mode(mode: DuplicateCheckingMode)\n         ForbidDuplicateModules | ForbidDuplicateTypes |\n         ForbidDuplicateTypesAndValues => TypeNS,\n         ForbidDuplicateValues => ValueNS,\n-        OverwriteDuplicates => die!(~\"OverwriteDuplicates has no namespace\")\n+        OverwriteDuplicates => fail!(~\"OverwriteDuplicates has no namespace\")\n     }\n }\n \n@@ -618,7 +618,7 @@ pub impl NameBindings {\n     fn get_module(@mut self) -> @Module {\n         match self.get_module_if_available() {\n             None => {\n-                die!(~\"get_module called on a node with no module \\\n+                fail!(~\"get_module called on a node with no module \\\n                        definition!\")\n             }\n             Some(module_def) => module_def\n@@ -1337,7 +1337,7 @@ pub impl Resolver {\n             }\n \n             item_mac(*) => {\n-                die!(~\"item macros unimplemented\")\n+                fail!(~\"item macros unimplemented\")\n             }\n         }\n     }\n@@ -1599,7 +1599,7 @@ pub impl Resolver {\n                     match existing_module.parent_link {\n                       NoParentLink |\n                       BlockParentLink(*) => {\n-                        die!(~\"can't happen\");\n+                        fail!(~\"can't happen\");\n                       }\n                       ModuleParentLink(parent_module, ident) => {\n                         let name_bindings = parent_module.children.get(\n@@ -1666,7 +1666,7 @@ pub impl Resolver {\n           def_prim_ty(*) | def_ty_param(*) | def_binding(*) |\n           def_use(*) | def_upvar(*) | def_region(*) |\n           def_typaram_binder(*) | def_label(*) | def_self_ty(*) => {\n-            die!(fmt!(\"didn't expect `%?`\", def));\n+            fail!(fmt!(\"didn't expect `%?`\", def));\n           }\n         }\n     }\n@@ -2254,7 +2254,7 @@ pub impl Resolver {\n             }\n             UnboundResult => { /* Continue. */ }\n             UnknownResult => {\n-                die!(~\"value result should be known at this point\");\n+                fail!(~\"value result should be known at this point\");\n             }\n         }\n         match type_result {\n@@ -2264,7 +2264,7 @@ pub impl Resolver {\n             }\n             UnboundResult => { /* Continue. */ }\n             UnknownResult => {\n-                die!(~\"type result should be known at this point\");\n+                fail!(~\"type result should be known at this point\");\n             }\n         }\n \n@@ -2417,7 +2417,7 @@ pub impl Resolver {\n                         binding\");\n             }\n             UnknownResult => {\n-                die!(~\"module result should be known at this point\");\n+                fail!(~\"module result should be known at this point\");\n             }\n         }\n \n@@ -3033,7 +3033,7 @@ pub impl Resolver {\n                 allowable_namespaces = namespaces;\n             }\n             GlobImport => {\n-                die!(~\"found `import *`, which is invalid\");\n+                fail!(~\"found `import *`, which is invalid\");\n             }\n         }\n \n@@ -3153,7 +3153,7 @@ pub impl Resolver {\n         // Otherwise, proceed and write in the bindings.\n         match module_.import_resolutions.find(&target_name) {\n             None => {\n-                die!(~\"(resolving one-level renaming import) reduced graph \\\n+                fail!(~\"(resolving one-level renaming import) reduced graph \\\n                       construction or glob importing should have created the \\\n                       import resolution name by now\");\n             }\n@@ -3769,7 +3769,7 @@ pub impl Resolver {\n             }\n \n           item_mac(*) => {\n-            die!(~\"item macros unimplemented\")\n+            fail!(~\"item macros unimplemented\")\n           }\n         }\n \n@@ -4471,8 +4471,8 @@ pub impl Resolver {\n             Success(target) => {\n                 match target.bindings.value_def {\n                     None => {\n-                        die!(~\"resolved name in the value namespace to a set \\\n-                              of name bindings with no def?!\");\n+                        fail!(~\"resolved name in the value namespace to a \\\n+                              set of name bindings with no def?!\");\n                     }\n                     Some(def) => {\n                         match def.def {\n@@ -4491,7 +4491,7 @@ pub impl Resolver {\n             }\n \n             Indeterminate => {\n-                die!(~\"unexpected indeterminate result\");\n+                fail!(~\"unexpected indeterminate result\");\n             }\n \n             Failed => {\n@@ -4652,7 +4652,7 @@ pub impl Resolver {\n             }\n \n             Indeterminate => {\n-                die!(~\"indeterminate unexpected\");\n+                fail!(~\"indeterminate unexpected\");\n             }\n \n             Success(resulting_module) => {\n@@ -4699,7 +4699,7 @@ pub impl Resolver {\n             }\n \n             Indeterminate => {\n-                die!(~\"indeterminate unexpected\");\n+                fail!(~\"indeterminate unexpected\");\n             }\n \n             Success(resulting_module) => {\n@@ -4777,7 +4777,7 @@ pub impl Resolver {\n                 }\n             }\n             Indeterminate => {\n-                die!(~\"unexpected indeterminate result\");\n+                fail!(~\"unexpected indeterminate result\");\n             }\n             Failed => {\n                 return None;"}, {"sha": "492adc8631dc9fa4ee46dce5acf44890416ca32f", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -209,7 +209,7 @@ pub fn opt_eq(tcx: ty::ctxt, a: &Opt, b: &Opt) -> bool {\n                         a_expr = e.get();\n                     }\n                     UnitLikeStructLit(_) => {\n-                        die!(~\"UnitLikeStructLit should have been handled \\\n+                        fail!(~\"UnitLikeStructLit should have been handled \\\n                                above\")\n                     }\n                 }\n@@ -222,7 +222,7 @@ pub fn opt_eq(tcx: ty::ctxt, a: &Opt, b: &Opt) -> bool {\n                         b_expr = e.get();\n                     }\n                     UnitLikeStructLit(_) => {\n-                        die!(~\"UnitLikeStructLit should have been handled \\\n+                        fail!(~\"UnitLikeStructLit should have been handled \\\n                                above\")\n                     }\n                 }"}, {"sha": "9a82bb53e0105db265fcc54ec8793b23393494ef", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -1874,7 +1874,7 @@ pub fn trans_enum_variant(ccx: @crate_ctxt,\n         // works. So we have to cast to the destination's view of the type.\n         let llarg = match fcx.llargs.find(&va.id) {\n             Some(local_mem(x)) => x,\n-            _ => die!(~\"trans_enum_variant: how do we know this works?\"),\n+            _ => fail!(~\"trans_enum_variant: how do we know this works?\"),\n         };\n         let arg_ty = arg_tys[i].ty;\n         memcpy_ty(bcx, lldestptr, llarg, arg_ty);\n@@ -2016,7 +2016,7 @@ pub fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n     let path = match ccx.tcx.items.get(&item.id) {\n         ast_map::node_item(_, p) => p,\n         // tjc: ?\n-        _ => die!(~\"trans_item\"),\n+        _ => fail!(~\"trans_item\"),\n     };\n     match /*bad*/copy item.node {\n       ast::item_fn(ref decl, purity, ref tps, ref body) => {\n@@ -2277,7 +2277,7 @@ pub fn item_path(ccx: @crate_ctxt, i: @ast::item) -> path {\n         /*bad*/copy *match ccx.tcx.items.get(&i.id) {\n             ast_map::node_item(_, p) => p,\n                 // separate map for paths?\n-            _ => die!(~\"item_path\")\n+            _ => fail!(~\"item_path\")\n         },\n         ~[path_name(i.ident)])\n }\n@@ -2364,7 +2364,7 @@ pub fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n                 set_inline_hint_if_appr(/*bad*/copy i.attrs, llfn);\n                 llfn\n               }\n-              _ => die!(~\"get_item_val: weird result in table\")\n+              _ => fail!(~\"get_item_val: weird result in table\")\n             }\n           }\n           ast_map::node_trait_method(trait_method, _, pth) => {\n@@ -2445,14 +2445,14 @@ pub fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n                       ast::item_enum(_, _) => {\n                         register_fn(ccx, (*v).span, pth, id, enm.attrs)\n                       }\n-                      _ => die!(~\"node_variant, shouldn't happen\")\n+                      _ => fail!(~\"node_variant, shouldn't happen\")\n                     };\n                 }\n                 ast::struct_variant_kind(_) => {\n-                    die!(~\"struct variant kind unexpected in get_item_val\")\n+                    fail!(~\"struct variant kind unexpected in get_item_val\")\n                 }\n                 ast::enum_variant_kind(_) => {\n-                    die!(~\"enum variant kind unexpected in get_item_val\")\n+                    fail!(~\"enum variant kind unexpected in get_item_val\")\n                 }\n             }\n             set_inline_hint(llfn);"}, {"sha": "43953b68f599b85c63686d34aaf4b28aeb92ae92", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -33,7 +33,7 @@ pub fn terminate(cx: block, _: &str) {\n \n pub fn check_not_terminated(cx: block) {\n     if cx.terminated {\n-        die!(~\"already terminated!\");\n+        fail!(~\"already terminated!\");\n     }\n }\n "}, {"sha": "bac91e17e03098d82d12d744957ca27620065680", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -96,7 +96,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n                     let elt = llvm::LLVMGetElementType(ty);\n                     ty_align(elt)\n                 }\n-                _ => die!(~\"ty_size: unhandled type\")\n+                _ => fail!(~\"ty_size: unhandled type\")\n             };\n         }\n     }\n@@ -122,7 +122,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n                   let eltsz = ty_size(elt);\n                   len * eltsz\n                 }\n-                _ => die!(~\"ty_size: unhandled type\")\n+                _ => fail!(~\"ty_size: unhandled type\")\n             };\n         }\n     }\n@@ -215,7 +215,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n                         i += 1u;\n                     }\n                 }\n-                _ => die!(~\"classify: unhandled type\")\n+                _ => fail!(~\"classify: unhandled type\")\n             }\n         }\n     }\n@@ -316,7 +316,7 @@ fn llreg_ty(cls: &[x86_64_reg_class]) -> TypeRef {\n                 sse_ds_class => {\n                     tys.push(T_f64());\n                 }\n-                _ => die!(~\"llregtype: unhandled class\")\n+                _ => fail!(~\"llregtype: unhandled class\")\n             }\n             i += 1u;\n         }"}, {"sha": "709ab9365ed99982896bbddb198c4035bce0672f", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -383,7 +383,7 @@ pub fn trans_rtcall_or_lang_call_with_type_params(bcx: block,\n                     llfnty = T_ptr(struct_elt(llfnty, 0));\n                     new_llval = PointerCast(callee.bcx, fn_data.llfn, llfnty);\n                 }\n-                _ => die!()\n+                _ => fail!()\n             }\n             Callee { bcx: callee.bcx, data: Fn(FnData { llfn: new_llval }) }\n         },"}, {"sha": "7c6f03cb364bcb23a23941b807c20174dd4cc512", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -268,7 +268,7 @@ fn create_block(cx: block) -> @metadata<block_md> {\n     while cx.node_info.is_none() {\n         match cx.parent {\n           Some(b) => cx = b,\n-          None => die!()\n+          None => fail!()\n         }\n     }\n     let sp = cx.node_info.get().span;\n@@ -553,7 +553,7 @@ fn create_ty(_cx: @crate_ctxt, _t: ty::t, _ty: @ast::Ty)\n      * elsewhere, not be self-contained.\n      */\n \n-    die!();\n+    fail!();\n     /*\n     fn t_to_ty(cx: crate_ctxt, t: ty::t, span: span) -> @ast::ty {\n         let ty = match ty::get(t).struct {\n@@ -669,7 +669,7 @@ pub fn create_local_var(bcx: block, local: @ast::local)\n         let name = match local.node.pat.node {\n           ast::pat_ident(_, pth, _) => ast_util::path_to_ident(pth),\n           // FIXME this should be handled (#2533)\n-          _ => die!(~\"no single variable name for local\")\n+          _ => fail!(~\"no single variable name for local\")\n         };\n         let loc = cx.sess.codemap.lookup_char_pos(local.span.lo);\n         let ty = node_id_type(bcx, local.node.id);"}, {"sha": "718f41de00adaeaa3b8bb7eee7b43a9f70d664f1", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -498,7 +498,7 @@ pub fn trans_intrinsic(ccx: @crate_ctxt,\n           if tp_sz != out_sz {\n               let sp = match ccx.tcx.items.get(&ref_id.get()) {\n                   ast_map::node_expr(e) => e.span,\n-                  _ => die!(~\"reinterpret_cast or forget has non-expr arg\")\n+                  _ => fail!(~\"reinterpret_cast or forget has non-expr arg\")\n               };\n               ccx.sess.span_fatal(\n                   sp, fmt!(\"reinterpret_cast called on types \\\n@@ -956,7 +956,7 @@ fn abi_of_foreign_fn(ccx: @crate_ctxt, i: @ast::foreign_item)\n       None => match ccx.tcx.items.get(&i.id) {\n         ast_map::node_foreign_item(_, abi, _) => abi,\n         // ??\n-        _ => die!(~\"abi_of_foreign_fn: not foreign\")\n+        _ => fail!(~\"abi_of_foreign_fn: not foreign\")\n       },\n       Some(_) => match attr::foreign_abi(i.attrs) {\n         either::Right(abi) => abi,"}, {"sha": "a79a24ba4606f348c9d88d380347745d4b494f02", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -253,7 +253,7 @@ pub fn trans_method_callee(bcx: block,\n                                                trait_id, off, vtbl)\n                 }\n                 // how to get rid of this?\n-                None => die!(~\"trans_method_callee: missing param_substs\")\n+                None => fail!(~\"trans_method_callee: missing param_substs\")\n             }\n         }\n         typeck::method_trait(_, off, vstore) => {\n@@ -265,7 +265,7 @@ pub fn trans_method_callee(bcx: block,\n                                mentry.explicit_self)\n         }\n         typeck::method_self(*) | typeck::method_super(*) => {\n-            die!(~\"method_self or method_super should have been handled \\\n+            fail!(~\"method_self or method_super should have been handled \\\n                 above\")\n         }\n     }\n@@ -312,13 +312,13 @@ pub fn trans_static_method_callee(bcx: block,\n             ast_map::node_trait_method(trait_method, _, _) => {\n                 ast_util::trait_method_to_ty_method(*trait_method).ident\n             }\n-            _ => die!(~\"callee is not a trait method\")\n+            _ => fail!(~\"callee is not a trait method\")\n         }\n     } else {\n         let path = csearch::get_item_path(bcx.tcx(), method_id);\n         match path[path.len()-1] {\n             path_name(s) => { s }\n-            path_mod(_) => { die!(~\"path doesn't have a name?\") }\n+            path_mod(_) => { fail!(~\"path doesn't have a name?\") }\n         }\n     };\n     debug!(\"trans_static_method_callee: method_id=%?, callee_id=%?, \\\n@@ -348,7 +348,7 @@ pub fn trans_static_method_callee(bcx: block,\n             FnData {llfn: PointerCast(bcx, lval, llty)}\n         }\n         _ => {\n-            die!(~\"vtable_param left in monomorphized \\\n+            fail!(~\"vtable_param left in monomorphized \\\n                    function's vtable substs\");\n         }\n     }\n@@ -369,7 +369,7 @@ pub fn method_with_name(ccx: @crate_ctxt, impl_id: ast::def_id,\n             }, _) => {\n             method_from_methods(/*bad*/copy *ms, name).get()\n           }\n-          _ => die!(~\"method_with_name\")\n+          _ => fail!(~\"method_with_name\")\n         }\n     } else {\n         csearch::get_impl_method(ccx.sess.cstore, impl_id, name)\n@@ -397,13 +397,13 @@ pub fn method_with_name_or_default(ccx: @crate_ctxt, impl_id: ast::def_id,\n                                   return pmi.method_info.did;\n                               }\n                           }\n-                          die!()\n+                          fail!()\n                       }\n-                      None => die!()\n+                      None => fail!()\n                   }\n               }\n           }\n-          _ => die!(~\"method_with_name\")\n+          _ => fail!(~\"method_with_name\")\n         }\n     } else {\n         csearch::get_impl_method(ccx.sess.cstore, impl_id, name)\n@@ -422,14 +422,14 @@ pub fn method_ty_param_count(ccx: @crate_ctxt, m_id: ast::def_id,\n                         method_ty_param_count(\n                             ccx, source.method_id, source.impl_id)\n                     }\n-                    None => die!()\n+                    None => fail!()\n                 }\n             }\n             Some(ast_map::node_trait_method(@ast::provided(@ref m), _, _))\n                 => {\n                 m.tps.len()\n             }\n-            copy e => die!(fmt!(\"method_ty_param_count %?\", e))\n+            copy e => fail!(fmt!(\"method_ty_param_count %?\", e))\n         }\n     } else {\n         csearch::get_type_param_count(ccx.sess.cstore, m_id) -\n@@ -494,7 +494,7 @@ pub fn trans_monomorphized_callee(bcx: block,\n                              mentry.explicit_self)\n       }\n       typeck::vtable_param(*) => {\n-          die!(~\"vtable_param left in monomorphized function's \" +\n+          fail!(~\"vtable_param left in monomorphized function's \" +\n               \"vtable substs\");\n       }\n     };\n@@ -770,7 +770,7 @@ pub fn vtable_id(ccx: @crate_ctxt,\n             }\n         }\n         // can't this be checked at the callee?\n-        _ => die!(~\"vtable_id\")\n+        _ => fail!(~\"vtable_id\")\n     }\n }\n \n@@ -785,7 +785,7 @@ pub fn get_vtable(ccx: @crate_ctxt,\n         typeck::vtable_static(id, substs, sub_vtables) => {\n             make_impl_vtable(ccx, id, substs, sub_vtables)\n         }\n-        _ => die!(~\"get_vtable: expected a static origin\")\n+        _ => fail!(~\"get_vtable: expected a static origin\")\n       }\n     }\n }"}, {"sha": "d56d28c982d7d2eb850b64a9583663491c73abf7", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -138,7 +138,7 @@ fn traverse_public_item(cx: ctx, item: @item) {\n       }\n       item_const(*) |\n       item_enum(*) | item_trait(*) => (),\n-      item_mac(*) => die!(~\"item macros unimplemented\")\n+      item_mac(*) => fail!(~\"item macros unimplemented\")\n     }\n }\n "}, {"sha": "af570e1f259093d28bcc464b562bd9e6d5a9b580", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -148,7 +148,7 @@ pub fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n                 ~\"bswap16\" | ~\"bswap32\" | ~\"bswap64\" => 0,\n \n                 // would be cool to make these an enum instead of strings!\n-                _ => die!(~\"unknown intrinsic in type_use\")\n+                _ => fail!(~\"unknown intrinsic in type_use\")\n             };\n             for uint::range(0u, n_tps) |n| { cx.uses[n] |= flags;}\n         }"}, {"sha": "08885127761fc6726fbf3a9aa0e099f4d2b6bcf5", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -1505,7 +1505,7 @@ pub fn get_element_type(ty: t, i: uint) -> t {\n     match /*bad*/copy get(ty).sty {\n       ty_rec(flds) => return flds[i].mt.ty,\n       ty_tup(ts) => return ts[i],\n-      _ => die!(~\"get_element_type called on invalid type\")\n+      _ => fail!(~\"get_element_type called on invalid type\")\n     }\n }\n \n@@ -2788,7 +2788,7 @@ pub fn ty_fn_args(fty: t) -> ~[arg] {\n         ty_bare_fn(ref f) => copy f.sig.inputs,\n         ty_closure(ref f) => copy f.sig.inputs,\n         ref s => {\n-            die!(fmt!(\"ty_fn_args() called on non-fn type: %?\", s))\n+            fail!(fmt!(\"ty_fn_args() called on non-fn type: %?\", s))\n         }\n     }\n }\n@@ -2797,7 +2797,8 @@ pub fn ty_closure_sigil(fty: t) -> Sigil {\n     match get(fty).sty {\n         ty_closure(ref f) => f.sigil,\n         ref s => {\n-            die!(fmt!(\"ty_closure_sigil() called on non-closure type: %?\", s))\n+            fail!(fmt!(\"ty_closure_sigil() called on non-closure type: %?\",\n+                       s))\n         }\n     }\n }\n@@ -2807,7 +2808,7 @@ pub fn ty_fn_purity(fty: t) -> ast::purity {\n         ty_bare_fn(ref f) => f.purity,\n         ty_closure(ref f) => f.purity,\n         ref s => {\n-            die!(fmt!(\"ty_fn_purity() called on non-fn type: %?\", s))\n+            fail!(fmt!(\"ty_fn_purity() called on non-fn type: %?\", s))\n         }\n     }\n }\n@@ -2817,7 +2818,7 @@ pub pure fn ty_fn_ret(fty: t) -> t {\n         ty_bare_fn(ref f) => f.sig.output,\n         ty_closure(ref f) => f.sig.output,\n         ref s => {\n-            die!(fmt!(\"ty_fn_ret() called on non-fn type: %?\", s))\n+            fail!(fmt!(\"ty_fn_ret() called on non-fn type: %?\", s))\n         }\n     }\n }\n@@ -2834,7 +2835,7 @@ pub pure fn ty_vstore(ty: t) -> vstore {\n     match get(ty).sty {\n         ty_evec(_, vstore) => vstore,\n         ty_estr(vstore) => vstore,\n-        ref s => die!(fmt!(\"ty_vstore() called on invalid sty: %?\", s))\n+        ref s => fail!(fmt!(\"ty_vstore() called on invalid sty: %?\", s))\n     }\n }\n \n@@ -2843,7 +2844,7 @@ pub fn ty_region(ty: t) -> Region {\n       ty_rptr(r, _) => r,\n       ty_evec(_, vstore_slice(r)) => r,\n       ty_estr(vstore_slice(r)) => r,\n-      ref s => die!(fmt!(\"ty_region() invoked on in appropriate ty: %?\",\n+      ref s => fail!(fmt!(\"ty_region() invoked on in appropriate ty: %?\",\n           (*s)))\n     }\n }\n@@ -3209,7 +3210,7 @@ pub fn stmt_node_id(s: @ast::stmt) -> ast::node_id {\n       ast::stmt_decl(_, id) | stmt_expr(_, id) | stmt_semi(_, id) => {\n         return id;\n       }\n-      ast::stmt_mac(*) => die!(~\"unexpanded macro in trans\")\n+      ast::stmt_mac(*) => fail!(~\"unexpanded macro in trans\")\n     }\n }\n \n@@ -3233,7 +3234,7 @@ pub fn get_field(tcx: ctxt, rec_ty: t, id: ast::ident) -> field {\n     match vec::find(get_fields(rec_ty), |f| f.ident == id) {\n       Some(f) => f,\n       // Do we only call this when we know the field is legit?\n-      None => die!(fmt!(\"get_field: ty doesn't have a field %s\",\n+      None => fail!(fmt!(\"get_field: ty doesn't have a field %s\",\n                          tcx.sess.str_of(id)))\n     }\n }\n@@ -3242,7 +3243,7 @@ pub fn get_fields(rec_ty:t) -> ~[field] {\n     match /*bad*/copy get(rec_ty).sty {\n       ty_rec(fields) => fields,\n       // Can we check at the caller?\n-      _ => die!(~\"get_fields: not a record type\")\n+      _ => fail!(~\"get_fields: not a record type\")\n     }\n }\n \n@@ -3904,10 +3905,10 @@ pub fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[VariantInfo] {\n                          }\n                     }\n                     ast::struct_variant_kind(_) => {\n-                        die!(~\"struct variant kinds unimpl in enum_variants\")\n+                        fail!(~\"struct variant kinds unimpl in enum_variants\")\n                     }\n                     ast::enum_variant_kind(_) => {\n-                        die!(~\"enum variant kinds unimpl in enum_variants\")\n+                        fail!(~\"enum variant kinds unimpl in enum_variants\")\n                     }\n                 }\n             })"}, {"sha": "eca368e5d76739f7b50e42cb5a86fb22456db7d0", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -1234,7 +1234,7 @@ pub impl LookupContext {\n         let span = if did.crate == ast::local_crate {\n             match self.tcx().items.find(&did.node) {\n               Some(ast_map::node_method(m, _, _)) => m.span,\n-              _ => die!(fmt!(\"report_static_candidate: bad item %?\", did))\n+              _ => fail!(fmt!(\"report_static_candidate: bad item %?\", did))\n             }\n         } else {\n             self.expr.span"}, {"sha": "a8439c3c45964aaf3383ea15bffba1387a17dac0", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -2097,7 +2097,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                                 inner_ty, fcx.expr_ty(loop_body));\n             }\n             ref n => {\n-                die!(fmt!(\n+                fail!(fmt!(\n                     \"check_loop_body expected expr_fn_block, not %?\", n))\n             }\n         }\n@@ -2394,7 +2394,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             demand::suptype(fcx, b.span, inner_ty, fcx.expr_ty(b));\n           }\n           // argh\n-          _ => die!(~\"expected fn ty\")\n+          _ => fail!(~\"expected fn ty\")\n         }\n         fcx.write_ty(expr.id, fcx.node_ty(b.id));\n       }"}, {"sha": "c2a7292c48dc62dfadac34ae3d4d3f3bb30354d6", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -148,7 +148,7 @@ pub fn fixup_substs(vcx: &VtableContext, location_info: &LocationInfo,\n     do fixup_ty(vcx, location_info, t, is_early).map |t_f| {\n         match ty::get(*t_f).sty {\n           ty::ty_trait(_, ref substs_f, _) => (/*bad*/copy *substs_f),\n-          _ => die!(~\"t_f should be a trait\")\n+          _ => fail!(~\"t_f should be a trait\")\n         }\n     }\n }"}, {"sha": "64ac5a9ae820e644ad307938d1db38739d735e9b", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -135,7 +135,7 @@ pub fn get_base_type_def_id(inference_context: @mut InferCtxt,\n                     return Some(def_id);\n                 }\n                 _ => {\n-                    die!(~\"get_base_type() returned a type that wasn't an \\\n+                    fail!(~\"get_base_type() returned a type that wasn't an \\\n                            enum, class, or trait\");\n                 }\n             }"}, {"sha": "2a42e75f53d476a7cec2aa79dc7e9b18e1ff0a34", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -870,8 +870,8 @@ pub fn ty_of_item(ccx: @mut CrateCtxt, it: @ast::item)\n           return tpt;\n       }\n       ast::item_impl(*) | ast::item_mod(_) |\n-      ast::item_foreign_mod(_) => die!(),\n-      ast::item_mac(*) => die!(~\"item macros unimplemented\")\n+      ast::item_foreign_mod(_) => fail!(),\n+      ast::item_mac(*) => fail!(~\"item macros unimplemented\")\n     }\n }\n "}, {"sha": "d79343e64a69d1a46d3037a77494e89554e006df", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -102,7 +102,7 @@ impl Env {\n         return match search_mod(self, &self.crate.node.module, 0, names) {\n             Some(id) => id,\n             None => {\n-                die!(fmt!(\"No item found: `%s`\", str::connect(names, \"::\")));\n+                fail!(fmt!(\"No item found: `%s`\", str::connect(names, \"::\")));\n             }\n         };\n \n@@ -155,15 +155,15 @@ impl Env {\n \n     fn assert_subtype(&self, a: ty::t, b: ty::t) {\n         if !self.is_subtype(a, b) {\n-            die!(fmt!(\"%s is not a subtype of %s, but it should be\",\n+            fail!(fmt!(\"%s is not a subtype of %s, but it should be\",\n                       self.ty_to_str(a),\n                       self.ty_to_str(b)));\n         }\n     }\n \n     fn assert_not_subtype(&self, a: ty::t, b: ty::t) {\n         if self.is_subtype(a, b) {\n-            die!(fmt!(\"%s is a subtype of %s, but it shouldn't be\",\n+            fail!(fmt!(\"%s is a subtype of %s, but it shouldn't be\",\n                       self.ty_to_str(a),\n                       self.ty_to_str(b)));\n         }\n@@ -240,7 +240,7 @@ impl Env {\n     fn check_lub(&self, t1: ty::t, t2: ty::t, t_lub: ty::t) {\n         match self.lub().tys(t1, t2) {\n             Err(e) => {\n-                die!(fmt!(\"Unexpected error computing LUB: %?\", e))\n+                fail!(fmt!(\"Unexpected error computing LUB: %?\", e))\n             }\n             Ok(t) => {\n                 self.assert_eq(t, t_lub);\n@@ -262,7 +262,7 @@ impl Env {\n                self.ty_to_str(t_glb));\n         match self.glb().tys(t1, t2) {\n             Err(e) => {\n-                die!(fmt!(\"Unexpected error computing LUB: %?\", e))\n+                fail!(fmt!(\"Unexpected error computing LUB: %?\", e))\n             }\n             Ok(t) => {\n                 self.assert_eq(t, t_glb);\n@@ -281,7 +281,7 @@ impl Env {\n         match self.lub().tys(t1, t2) {\n             Err(_) => {}\n             Ok(t) => {\n-                die!(fmt!(\"Unexpected success computing LUB: %?\",\n+                fail!(fmt!(\"Unexpected success computing LUB: %?\",\n                           self.ty_to_str(t)))\n             }\n         }\n@@ -292,7 +292,7 @@ impl Env {\n         match self.glb().tys(t1, t2) {\n             Err(_) => {}\n             Ok(t) => {\n-                die!(fmt!(\"Unexpected success computing GLB: %?\",\n+                fail!(fmt!(\"Unexpected success computing GLB: %?\",\n                           self.ty_to_str(t)))\n             }\n         }"}, {"sha": "62067a4bd7aae9a48687b2b5b71e4c6ac98d7efc", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -368,7 +368,7 @@ pub fn monitor(+f: fn~(diagnostic::Emitter)) {\n                 }\n             }\n             // Fail so the process returns a failure code\n-            die!();\n+            fail!();\n         }\n     }\n }"}, {"sha": "9669beae575897a1e36bd250e20b78ac9c2b86f3", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -119,7 +119,7 @@ fn parse_item_attrs<T:Owned>(\n         let attrs = match ctxt.ast_map.get(&id) {\n           ast_map::node_item(item, _) => copy item.attrs,\n           ast_map::node_foreign_item(item, _, _) => copy item.attrs,\n-          _ => die!(~\"parse_item_attrs: not an item\")\n+          _ => fail!(~\"parse_item_attrs: not an item\")\n         };\n         parse_attrs(attrs)\n     }\n@@ -183,7 +183,7 @@ fn fold_enum(\n                                 copy ast_variant.node.attrs)\n                         }\n                         _ => {\n-                            die!(fmt!(\"Enum variant %s has id that's \\\n+                            fail!(fmt!(\"Enum variant %s has id that's \\\n                                        not bound to an enum item\",\n                                       variant.name))\n                         }\n@@ -258,7 +258,7 @@ fn merge_method_attrs(\n                  attr_parser::parse_desc(copy method.attrs))\n             })\n           }\n-          _ => die!(~\"unexpected item\")\n+          _ => fail!(~\"unexpected item\")\n         }\n     };\n "}, {"sha": "ffc0d668aed77d03fcb1e0fc70cba38301546432", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -71,7 +71,7 @@ fn take_my_order_please(\n      * This function is full of fail\n      */\n \n-    die!();\n+    fail!();\n }\n \n mod fortress_of_solitude {\n@@ -192,6 +192,6 @@ impl OmNomNomy: TheShunnedHouse {\n     }\n \n     fn construct(&self) -> bool {\n-        die!();\n+        fail!();\n     }\n }"}, {"sha": "0184945d6f8fd7d3747c938bf17bb513aa7749da", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -322,7 +322,7 @@ fn structdoc_from_struct(\n         fields: do struct_def.fields.map |field| {\n             match field.node.kind {\n                 ast::named_field(ident, _, _) => to_str(ident),\n-                ast::unnamed_field => die!(\n+                ast::unnamed_field => fail!(\n                     ~\"what is an unnamed struct field?\")\n             }\n         },"}, {"sha": "bf499e2c5d0ecc91fac650562e46a5954b758803", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -539,7 +539,7 @@ fn write_sig(ctxt: &Ctxt, sig: Option<~str>) {\n         ctxt.w.write_line(code_block_indent(sig));\n         ctxt.w.write_line(~\"\");\n       }\n-      None => die!(~\"unimplemented\")\n+      None => fail!(~\"unimplemented\")\n     }\n }\n "}, {"sha": "7577785d95422c7d294d5538d157282172ae3679", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -145,7 +145,7 @@ fn pandoc_writer(\n         if status != 0 {\n             error!(\"pandoc-out: %s\", stdout);\n             error!(\"pandoc-err: %s\", stderr);\n-            die!(~\"pandoc failed\");\n+            fail!(~\"pandoc failed\");\n         }\n     }\n }\n@@ -287,7 +287,7 @@ fn write_file(path: &Path, s: ~str) {\n       result::Ok(writer) => {\n         writer.write_str(s);\n       }\n-      result::Err(e) => die!(e)\n+      result::Err(e) => fail!(e)\n     }\n }\n "}, {"sha": "c14eb32022fb11c71752fbb6c735058628199074", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -80,7 +80,7 @@ fn get_fn_sig(srv: astsrv::Srv, fn_id: doc::AstId) -> Option<~str> {\n             Some(pprust::fun_to_str(*decl, ident, copy *tys,\n                                     extract::interner()))\n           }\n-          _ => die!(~\"get_fn_sig: fn_id not bound to a fn item\")\n+          _ => fail!(~\"get_fn_sig: fn_id not bound to a fn item\")\n         }\n     }\n }\n@@ -113,7 +113,7 @@ fn fold_const(\n                     }, _) => {\n                         pprust::ty_to_str(ty, extract::interner())\n                     }\n-                    _ => die!(~\"fold_const: id not bound to a const item\")\n+                    _ => fail!(~\"fold_const: id not bound to a const item\")\n                 }\n             }}),\n         .. doc\n@@ -150,7 +150,7 @@ fn fold_enum(\n                             pprust::variant_to_str(\n                                 ast_variant, extract::interner())\n                         }\n-                        _ => die!(~\"enum variant not bound to an enum item\")\n+                        _ => fail!(~\"enum variant not bound to an enum item\")\n                     }\n                 }\n             };\n@@ -229,7 +229,7 @@ fn get_method_sig(\n                     }\n                   }\n                 }\n-                _ => die!(~\"method not found\")\n+                _ => fail!(~\"method not found\")\n             }\n           }\n           ast_map::node_item(@ast::item {\n@@ -246,10 +246,10 @@ fn get_method_sig(\n                         extract::interner()\n                     ))\n                 }\n-                None => die!(~\"method not found\")\n+                None => fail!(~\"method not found\")\n             }\n           }\n-          _ => die!(~\"get_method_sig: item ID not bound to trait or impl\")\n+          _ => fail!(~\"get_method_sig: item ID not bound to trait or impl\")\n         }\n     }\n }\n@@ -282,7 +282,7 @@ fn fold_impl(\n                      Some(pprust::ty_to_str(\n                          self_ty, extract::interner())))\n                 }\n-                _ => die!(~\"expected impl\")\n+                _ => fail!(~\"expected impl\")\n             }\n         }\n     };\n@@ -315,7 +315,7 @@ fn should_add_impl_self_ty() {\n \n #[test]\n fn should_add_impl_method_sigs() {\n-    let doc = test::mk_doc(~\"impl int { fn a<T>() -> int { die!() } }\");\n+    let doc = test::mk_doc(~\"impl int { fn a<T>() -> int { fail!() } }\");\n     assert doc.cratemod().impls()[0].methods[0].sig\n         == Some(~\"fn a<T>() -> int\");\n }\n@@ -345,7 +345,7 @@ fn fold_type(\n                                               extract::interner())\n                         ))\n                     }\n-                    _ => die!(~\"expected type\")\n+                    _ => fail!(~\"expected type\")\n                 }\n             }\n         },\n@@ -375,7 +375,7 @@ fn fold_struct(\n                         Some(pprust::item_to_str(item,\n                                                  extract::interner()))\n                     }\n-                    _ => die!(~\"not an item\")\n+                    _ => fail!(~\"not an item\")\n                 }\n             }\n         },\n@@ -396,7 +396,7 @@ fn strip_struct_extra_stuff(item: @ast::item) -> @ast::item {\n             };\n             ast::item_struct(def, tys)\n         }\n-        _ => die!(~\"not a struct\")\n+        _ => fail!(~\"not a struct\")\n     };\n \n     @ast::item {"}, {"sha": "87beeaf4ec21047e99e42c78cf7be6506f02a39b", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -178,10 +178,10 @@ fn run(repl: Repl, input: ~str) -> Repl {\n         ast::expr_call(_, exprs, _) => {\n             match exprs[0].node {\n                 ast::expr_block(blk) => @blk,\n-                _ => die!()\n+                _ => fail!()\n             }\n         }\n-        _ => die!()\n+        _ => fail!()\n     };\n     debug!(\"recording input into repl history\");\n     record(repl, blk, sess.parse_sess.interner)\n@@ -320,7 +320,7 @@ fn run_cmd(repl: &mut Repl, _in: io::Reader, _out: io::Writer,\n             let mut end_multiline = false;\n             while (!end_multiline) {\n                 match get_line(~\"rusti| \") {\n-                    None => die!(~\"unterminated multiline command :{ .. :}\"),\n+                    None => fail!(~\"unterminated multiline command :{ .. :}\"),\n                     Some(line) => {\n                         if str::trim(line) == ~\":}\" {\n                             end_multiline = true;"}, {"sha": "0a51a7ef191451eb6b93d681bb88d11316047810", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -224,7 +224,7 @@ pub fn unwrap_mutex_arc<T: Owned>(arc: MutexARC<T>) -> T {\n     let inner = unsafe { unwrap_shared_mutable_state(move x) };\n     let MutexARCInner { failed: failed, data: data, _ } = move inner;\n     if failed {\n-        die!(~\"Can't unwrap poisoned MutexARC - another task failed inside!\")\n+        fail!(~\"Can't unwrap poisoned MutexARC - another task failed inside!\")\n     }\n     move data\n }\n@@ -235,9 +235,9 @@ pub fn unwrap_mutex_arc<T: Owned>(arc: MutexARC<T>) -> T {\n fn check_poison(is_mutex: bool, failed: bool) {\n     if failed {\n         if is_mutex {\n-            die!(~\"Poisoned MutexARC - another task failed inside!\");\n+            fail!(~\"Poisoned MutexARC - another task failed inside!\");\n         } else {\n-            die!(~\"Poisoned rw_arc - another task failed inside!\");\n+            fail!(~\"Poisoned rw_arc - another task failed inside!\");\n         }\n     }\n }\n@@ -423,7 +423,7 @@ pub fn unwrap_rw_arc<T: Const Owned>(arc: RWARC<T>) -> T {\n     let inner = unsafe { unwrap_shared_mutable_state(move x) };\n     let RWARCInner { failed: failed, data: data, _ } = move inner;\n     if failed {\n-        die!(~\"Can't unwrap poisoned RWARC - another task failed inside!\")\n+        fail!(~\"Can't unwrap poisoned RWARC - another task failed inside!\")\n     }\n     move data\n }"}, {"sha": "9beb8e276ef989d7c09a551a51be207e0163cacb", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -303,6 +303,6 @@ fn test_arena_destructors_fail() {\n         // get freed too.\n         do arena.alloc { @20 };\n         // Now fail.\n-        die!();\n+        fail!();\n     };\n }"}, {"sha": "10ea113f74e524b3bfbce1cb44847dfbf13584c9", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -63,7 +63,7 @@ impl &[u8]: ToBase64 {\n                 str::push_char(&mut s, chars[(n >> 6u) & 63u]);\n                 str::push_char(&mut s, '=');\n               }\n-              _ => die!(~\"Algebra is broken, please alert the math police\")\n+              _ => fail!(~\"Algebra is broken, please alert the math police\")\n             }\n         }\n         s\n@@ -82,7 +82,7 @@ pub trait FromBase64 {\n \n impl ~[u8]: FromBase64 {\n     pure fn from_base64() -> ~[u8] {\n-        if self.len() % 4u != 0u { die!(~\"invalid base64 length\"); }\n+        if self.len() % 4u != 0u { fail!(~\"invalid base64 length\"); }\n \n         let len = self.len();\n         let mut padding = 0u;\n@@ -124,10 +124,10 @@ impl ~[u8]: FromBase64 {\n                             r.push(((n >> 10u) & 0xFFu) as u8);\n                             return copy r;\n                           }\n-                          _ => die!(~\"invalid base64 padding\")\n+                          _ => fail!(~\"invalid base64 padding\")\n                         }\n                     } else {\n-                        die!(~\"invalid base64 character\");\n+                        fail!(~\"invalid base64 character\");\n                     }\n \n                     i += 1u;"}, {"sha": "2c713e58e9a86da8dc79fb7240e491b6687c8195", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -245,7 +245,7 @@ impl BigUint : Modulo<BigUint, BigUint> {\n }\n \n impl BigUint : Neg<BigUint> {\n-    pure fn neg(&self) -> BigUint { die!() }\n+    pure fn neg(&self) -> BigUint { fail!() }\n }\n \n impl BigUint : IntConvertible {\n@@ -332,7 +332,7 @@ pub impl BigUint {\n     }\n \n     pure fn divmod(&self, other: &BigUint) -> (BigUint, BigUint) {\n-        if other.is_zero() { die!() }\n+        if other.is_zero() { fail!() }\n         if self.is_zero() { return (Zero::zero(), Zero::zero()); }\n         if *other == One::one() { return (copy *self, Zero::zero()); }\n \n@@ -523,7 +523,7 @@ priv pure fn get_radix_base(radix: uint) -> (uint, uint) {\n         14 => (1475789056, 8),\n         15 => (2562890625, 8),\n         16 => (4294967296, 8),\n-        _  => die!()\n+        _  => fail!()\n     }\n }\n \n@@ -547,7 +547,7 @@ priv pure fn get_radix_base(radix: uint) -> (uint, uint) {\n         14 => (38416, 4),\n         15 => (50625, 4),\n         16 => (65536, 4),\n-        _  => die!()\n+        _  => fail!()\n     }\n }\n \n@@ -797,7 +797,7 @@ pub impl BigInt {\n         let d = BigInt::from_biguint(Plus, d_ui),\n             m = BigInt::from_biguint(Plus, m_ui);\n         match (self.sign, other.sign) {\n-            (_,    Zero)   => die!(),\n+            (_,    Zero)   => fail!(),\n             (Plus, Plus)  | (Zero, Plus)  => (d, m),\n             (Plus, Minus) | (Zero, Minus) => if m.is_zero() {\n                 (-d, Zero::zero())\n@@ -828,7 +828,7 @@ pub impl BigInt {\n         let q = BigInt::from_biguint(Plus, q_ui);\n         let r = BigInt::from_biguint(Plus, r_ui);\n         match (self.sign, other.sign) {\n-            (_,    Zero)   => die!(),\n+            (_,    Zero)   => fail!(),\n             (Plus, Plus)  | (Zero, Plus)  => ( q,  r),\n             (Plus, Minus) | (Zero, Minus) => (-q,  r),\n             (Minus, Plus)                 => (-q, -r),\n@@ -1193,7 +1193,7 @@ mod biguint_tests {\n              ~\"2\" +\n              str::from_chars(vec::from_elem(bits / 2 - 1, '0')) + \"1\"),\n             (10, match bits {\n-                32 => ~\"8589934593\", 16 => ~\"131073\", _ => die!()\n+                32 => ~\"8589934593\", 16 => ~\"131073\", _ => fail!()\n             }),\n             (16,\n              ~\"2\" +\n@@ -1210,7 +1210,7 @@ mod biguint_tests {\n             (10, match bits {\n                 32 => ~\"55340232229718589441\",\n                 16 => ~\"12885032961\",\n-                _ => die!()\n+                _ => fail!()\n             }),\n             (16, ~\"3\" +\n              str::from_chars(vec::from_elem(bits / 4 - 1, '0')) + \"2\" +\n@@ -1257,7 +1257,7 @@ mod biguint_tests {\n         fn check(n: uint, s: &str) {\n             let n = factor(n);\n             let ans = match BigUint::from_str_radix(s, 10) {\n-                Some(x) => x, None => die!()\n+                Some(x) => x, None => fail!()\n             };\n             assert n == ans;\n         }"}, {"sha": "d62fb2e8f6ec31ee27728bb61bec6c4679a1d4d3", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -240,7 +240,7 @@ pub fn Bitv (nbits: uint, init: bool) -> Bitv {\n priv impl Bitv {\n \n     fn die() -> ! {\n-        die!(~\"Tried to do operation on bit vectors with different sizes\");\n+        fail!(~\"Tried to do operation on bit vectors with different sizes\");\n     }\n \n     #[inline(always)]\n@@ -985,7 +985,7 @@ mod tests {\n       let b = Bitv(14, true);\n       b.clear();\n       for b.ones |i| {\n-          die!(fmt!(\"found 1 at %?\", i));\n+          fail!(fmt!(\"found 1 at %?\", i));\n       }\n     }\n \n@@ -994,7 +994,7 @@ mod tests {\n       let b = Bitv(140, true);\n       b.clear();\n       for b.ones |i| {\n-          die!(fmt!(\"found 1 at %?\", i));\n+          fail!(fmt!(\"found 1 at %?\", i));\n       }\n     }\n }"}, {"sha": "f0ec3c1b9d767fd9d7b652cbbcf93f7f5283bdc8", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -32,7 +32,7 @@ impl<T> Cell<T> {\n     /// Yields the value, failing if the cell is empty.\n     fn take() -> T {\n         if self.is_empty() {\n-            die!(~\"attempt to take an empty cell\");\n+            fail!(~\"attempt to take an empty cell\");\n         }\n \n         let mut value = None;\n@@ -43,7 +43,7 @@ impl<T> Cell<T> {\n     /// Returns the value, failing if the cell is full.\n     fn put_back(value: T) {\n         if !self.is_empty() {\n-            die!(~\"attempt to put a value back into a full cell\");\n+            fail!(~\"attempt to put a value back into a full cell\");\n         }\n         self.value = Some(move value);\n     }"}, {"sha": "7d819ba0b3f227f63282394f5aa7cabae207cfc6", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -57,7 +57,7 @@ pub fn create<T: Copy>() -> Deque<T> {\n         move rv\n     }\n     fn get<T: Copy>(elts: &DVec<Cell<T>>, i: uint) -> T {\n-        match (*elts).get_elt(i) { Some(move t) => t, _ => die!() }\n+        match (*elts).get_elt(i) { Some(move t) => t, _ => fail!() }\n     }\n \n     struct Repr<T> {"}, {"sha": "c332c7656b4c466064931501d307cf6cee836c16", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -107,7 +107,7 @@ pub mod reader {\n                         (data[start + 2u] as uint) << 8u |\n                         (data[start + 3u] as uint),\n                     next: start + 4u};\n-        } else { error!(\"vint too big\"); die!(); }\n+        } else { error!(\"vint too big\"); fail!(); }\n     }\n \n     pub fn Doc(data: @~[u8]) -> Doc {\n@@ -143,7 +143,7 @@ pub mod reader {\n             Some(d) => d,\n             None => {\n                 error!(\"failed to find block with tag %u\", tg);\n-                die!();\n+                fail!();\n             }\n         }\n     }\n@@ -230,7 +230,7 @@ pub mod reader {\n                     self.pos = r_doc.end;\n                     let str = doc_as_str(r_doc);\n                     if lbl != str {\n-                        die!(fmt!(\"Expected label %s but found %s\", lbl,\n+                        fail!(fmt!(\"Expected label %s but found %s\", lbl,\n                             str));\n                     }\n                 }\n@@ -240,19 +240,19 @@ pub mod reader {\n         fn next_doc(exp_tag: EbmlEncoderTag) -> Doc {\n             debug!(\". next_doc(exp_tag=%?)\", exp_tag);\n             if self.pos >= self.parent.end {\n-                die!(~\"no more documents in current node!\");\n+                fail!(~\"no more documents in current node!\");\n             }\n             let TaggedDoc { tag: r_tag, doc: r_doc } =\n                 doc_at(self.parent.data, self.pos);\n             debug!(\"self.parent=%?-%? self.pos=%? r_tag=%? r_doc=%?-%?\",\n                    copy self.parent.start, copy self.parent.end,\n                    copy self.pos, r_tag, r_doc.start, r_doc.end);\n             if r_tag != (exp_tag as uint) {\n-                die!(fmt!(\"expected EBML doc with tag %? but found tag %?\",\n+                fail!(fmt!(\"expected EBML doc with tag %? but found tag %?\",\n                           exp_tag, r_tag));\n             }\n             if r_doc.end > self.parent.end {\n-                die!(fmt!(\"invalid EBML, child extends to 0x%x, \\\n+                fail!(fmt!(\"invalid EBML, child extends to 0x%x, \\\n                            parent to 0x%x\", r_doc.end, self.parent.end));\n             }\n             self.pos = r_doc.end;\n@@ -295,7 +295,7 @@ pub mod reader {\n         fn read_uint(&self) -> uint {\n             let v = doc_as_u64(self.next_doc(EsUint));\n             if v > (::core::uint::max_value as u64) {\n-                die!(fmt!(\"uint %? too large for this architecture\", v));\n+                fail!(fmt!(\"uint %? too large for this architecture\", v));\n             }\n             v as uint\n         }\n@@ -307,22 +307,22 @@ pub mod reader {\n         fn read_int(&self) -> int {\n             let v = doc_as_u64(self.next_doc(EsInt)) as i64;\n             if v > (int::max_value as i64) || v < (int::min_value as i64) {\n-                die!(fmt!(\"int %? out of range for this architecture\", v));\n+                fail!(fmt!(\"int %? out of range for this architecture\", v));\n             }\n             v as int\n         }\n \n         fn read_bool(&self) -> bool { doc_as_u8(self.next_doc(EsBool))\n                                          as bool }\n \n-        fn read_f64(&self) -> f64 { die!(~\"read_f64()\"); }\n-        fn read_f32(&self) -> f32 { die!(~\"read_f32()\"); }\n-        fn read_float(&self) -> float { die!(~\"read_float()\"); }\n+        fn read_f64(&self) -> f64 { fail!(~\"read_f64()\"); }\n+        fn read_f32(&self) -> f32 { fail!(~\"read_f32()\"); }\n+        fn read_float(&self) -> float { fail!(~\"read_float()\"); }\n \n-        fn read_char(&self) -> char { die!(~\"read_char()\"); }\n+        fn read_char(&self) -> char { fail!(~\"read_char()\"); }\n \n         fn read_owned_str(&self) -> ~str { doc_as_str(self.next_doc(EsStr)) }\n-        fn read_managed_str(&self) -> @str { die!(~\"read_managed_str()\"); }\n+        fn read_managed_str(&self) -> @str { fail!(~\"read_managed_str()\"); }\n \n         // Compound types:\n         fn read_owned<T>(&self, f: fn() -> T) -> T {\n@@ -431,7 +431,7 @@ pub mod writer {\n                             n as u8]),\n             4u => w.write(&[0x10u8 | ((n >> 24_u) as u8), (n >> 16_u) as u8,\n                             (n >> 8_u) as u8, n as u8]),\n-            _ => die!(fmt!(\"vint to write too big: %?\", n))\n+            _ => fail!(fmt!(\"vint to write too big: %?\", n))\n         };\n     }\n \n@@ -440,7 +440,7 @@ pub mod writer {\n         if n < 0x4000_u { write_sized_vuint(w, n, 2u); return; }\n         if n < 0x200000_u { write_sized_vuint(w, n, 3u); return; }\n         if n < 0x10000000_u { write_sized_vuint(w, n, 4u); return; }\n-        die!(fmt!(\"vint to write too big: %?\", n));\n+        fail!(fmt!(\"vint to write too big: %?\", n));\n     }\n \n     pub fn Encoder(w: io::Writer) -> Encoder {\n@@ -602,17 +602,17 @@ pub mod writer {\n \n         // FIXME (#2742): implement these\n         fn emit_f64(&self, _v: f64) {\n-            die!(~\"Unimplemented: serializing an f64\");\n+            fail!(~\"Unimplemented: serializing an f64\");\n         }\n         fn emit_f32(&self, _v: f32) {\n-            die!(~\"Unimplemented: serializing an f32\");\n+            fail!(~\"Unimplemented: serializing an f32\");\n         }\n         fn emit_float(&self, _v: float) {\n-            die!(~\"Unimplemented: serializing a float\");\n+            fail!(~\"Unimplemented: serializing a float\");\n         }\n \n         fn emit_char(&self, _v: char) {\n-            die!(~\"Unimplemented: serializing a char\");\n+            fail!(~\"Unimplemented: serializing a char\");\n         }\n \n         fn emit_borrowed_str(&self, v: &str) {"}, {"sha": "a7507a971c85fb53e8ac419ee013d1595e7013c6", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -262,7 +262,7 @@ pub impl<T,U:Unflattener<T>,P:BytePort> FlatPort<T, U, P>: GenericPort<T> {\n     fn recv() -> T {\n         match self.try_recv() {\n             Some(move val) => move val,\n-            None => die!(~\"port is closed\")\n+            None => fail!(~\"port is closed\")\n         }\n     }\n     fn try_recv() -> Option<T> {\n@@ -298,7 +298,7 @@ pub impl<T,U:Unflattener<T>,P:BytePort> FlatPort<T, U, P>: GenericPort<T> {\n             }\n         }\n         else {\n-            die!(~\"flatpipe: unrecognized command\");\n+            fail!(~\"flatpipe: unrecognized command\");\n         }\n     }\n }\n@@ -480,7 +480,7 @@ pub mod flatteners {\n                 Ok(move json) => {\n                     json::Decoder(move json)\n                 }\n-                Err(e) => die!(fmt!(\"flatpipe: can't parse json: %?\", e))\n+                Err(e) => fail!(fmt!(\"flatpipe: can't parse json: %?\", e))\n             }\n         }\n     }"}, {"sha": "ec71c30242cf273f1ae0e1cdbc7843b8cd2f0fc2", "filename": "src/libstd/future.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -65,14 +65,14 @@ impl<A> Future<A> {\n         unsafe {\n             match self.state {\n                 Forced(ref mut v) => { return cast::transmute(v); }\n-                Evaluating => die!(~\"Recursive forcing of future!\"),\n+                Evaluating => fail!(~\"Recursive forcing of future!\"),\n                 Pending(_) => {}\n             }\n \n             let mut state = Evaluating;\n             self.state <-> state;\n             match move state {\n-                Forced(_) | Evaluating => die!(~\"Logic error.\"),\n+                Forced(_) | Evaluating => fail!(~\"Logic error.\"),\n                 Pending(move f) => {\n                     self.state = Forced(move f());\n                     self.get_ref()\n@@ -195,7 +195,7 @@ pub mod test {\n     #[should_fail]\n     #[ignore(cfg(target_os = \"win32\"))]\n     pub fn test_futurefail() {\n-        let f = spawn(|| die!());\n+        let f = spawn(|| fail!());\n         let _x: ~str = f.get();\n     }\n "}, {"sha": "3d6d0b1bb7d6bde6801269eaf930253d571163cc", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -349,7 +349,7 @@ fn opt_vals(mm: &Matches, nm: &str) -> ~[Optval] {\n       Some(id) => mm.vals[id],\n       None => {\n         error!(\"No option '%s' defined\", nm);\n-        die!()\n+        fail!()\n       }\n     };\n }\n@@ -385,7 +385,7 @@ pub fn opts_present(mm: &Matches, names: &[~str]) -> bool {\n  * argument\n  */\n pub fn opt_str(mm: &Matches, nm: &str) -> ~str {\n-    return match opt_val(mm, nm) { Val(copy s) => s, _ => die!() };\n+    return match opt_val(mm, nm) { Val(copy s) => s, _ => fail!() };\n }\n \n /**\n@@ -401,7 +401,7 @@ pub fn opts_str(mm: &Matches, names: &[~str]) -> ~str {\n           _ => ()\n         }\n     }\n-    die!();\n+    fail!();\n }\n \n \n@@ -551,7 +551,7 @@ pub mod groups {\n         match ((*lopt).short_name.len(),\n                (*lopt).long_name.len()) {\n \n-           (0,0) => die!(~\"this long-format option was given no name\"),\n+           (0,0) => fail!(~\"this long-format option was given no name\"),\n \n            (0,_) => ~[Opt {name:   Long(((*lopt).long_name)),\n                            hasarg: (*lopt).hasarg,\n@@ -568,7 +568,7 @@ pub mod groups {\n                            hasarg: (*lopt).hasarg,\n                            occur:  (*lopt).occur}],\n \n-           (_,_) => die!(~\"something is wrong with the long-form opt\")\n+           (_,_) => fail!(~\"something is wrong with the long-form opt\")\n         }\n     }\n \n@@ -599,7 +599,7 @@ pub mod groups {\n             row += match short_name.len() {\n                 0 => ~\"\",\n                 1 => ~\"-\" + short_name + \" \",\n-                _ => die!(~\"the short name should only be 1 char long\"),\n+                _ => fail!(~\"the short name should only be 1 char long\"),\n             };\n \n             // long option\n@@ -669,7 +669,7 @@ mod tests {\n             assert (opt_present(m, ~\"test\"));\n             assert (opt_str(m, ~\"test\") == ~\"20\");\n           }\n-          _ => { die!(~\"test_reqopt_long failed\"); }\n+          _ => { fail!(~\"test_reqopt_long failed\"); }\n         }\n     }\n \n@@ -680,7 +680,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionMissing_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -691,7 +691,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, ArgumentMissing_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -702,7 +702,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionDuplicated_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -716,7 +716,7 @@ mod tests {\n             assert (opt_present(m, ~\"t\"));\n             assert (opt_str(m, ~\"t\") == ~\"20\");\n           }\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -727,7 +727,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionMissing_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -738,7 +738,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, ArgumentMissing_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -749,7 +749,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionDuplicated_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -765,7 +765,7 @@ mod tests {\n             assert (opt_present(m, ~\"test\"));\n             assert (opt_str(m, ~\"test\") == ~\"20\");\n           }\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -776,7 +776,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (!opt_present(m, ~\"test\")),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -787,7 +787,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, ArgumentMissing_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -798,7 +798,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionDuplicated_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -812,7 +812,7 @@ mod tests {\n             assert (opt_present(m, ~\"t\"));\n             assert (opt_str(m, ~\"t\") == ~\"20\");\n           }\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -823,7 +823,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (!opt_present(m, ~\"t\")),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -834,7 +834,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, ArgumentMissing_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -845,7 +845,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionDuplicated_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -858,7 +858,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (opt_present(m, ~\"test\")),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -869,7 +869,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (!opt_present(m, ~\"test\")),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -883,7 +883,7 @@ mod tests {\n             log(error, fail_str(f));\n             check_fail_type(f, UnexpectedArgument_);\n           }\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -894,7 +894,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionDuplicated_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -905,7 +905,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (opt_present(m, ~\"t\")),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -916,7 +916,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (!opt_present(m, ~\"t\")),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -931,7 +931,7 @@ mod tests {\n \n             assert (m.free[0] == ~\"20\");\n           }\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -942,7 +942,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionDuplicated_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -956,7 +956,7 @@ mod tests {\n           Ok(ref m) => {\n             assert (opt_count(m, ~\"v\") == 1);\n           }\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -969,7 +969,7 @@ mod tests {\n           Ok(ref m) => {\n             assert (opt_count(m, ~\"v\") == 2);\n           }\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -982,7 +982,7 @@ mod tests {\n           Ok(ref m) => {\n             assert (opt_count(m, ~\"v\") == 2);\n           }\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -995,7 +995,7 @@ mod tests {\n           Ok(ref m) => {\n             assert (opt_count(m, ~\"verbose\") == 1);\n           }\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -1008,7 +1008,7 @@ mod tests {\n           Ok(ref m) => {\n             assert (opt_count(m, ~\"verbose\") == 2);\n           }\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -1023,7 +1023,7 @@ mod tests {\n             assert (opt_present(m, ~\"test\"));\n             assert (opt_str(m, ~\"test\") == ~\"20\");\n           }\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -1034,7 +1034,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (!opt_present(m, ~\"test\")),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -1045,7 +1045,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, ArgumentMissing_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -1062,7 +1062,7 @@ mod tests {\n               assert (pair[0] == ~\"20\");\n               assert (pair[1] == ~\"30\");\n           }\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -1076,7 +1076,7 @@ mod tests {\n             assert (opt_present(m, ~\"t\"));\n             assert (opt_str(m, ~\"t\") == ~\"20\");\n           }\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -1087,7 +1087,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (!opt_present(m, ~\"t\")),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -1098,7 +1098,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, ArgumentMissing_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -1115,7 +1115,7 @@ mod tests {\n             assert (pair[0] == ~\"20\");\n             assert (pair[1] == ~\"30\");\n           }\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -1126,7 +1126,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, UnrecognizedOption_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -1137,7 +1137,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, UnrecognizedOption_),\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -1169,7 +1169,7 @@ mod tests {\n             assert (pair[1] == ~\"-60 70\");\n             assert (!opt_present(m, ~\"notpresent\"));\n           }\n-          _ => die!()\n+          _ => fail!()\n         }\n     }\n \n@@ -1179,7 +1179,7 @@ mod tests {\n         let opts = ~[optopt(~\"e\"), optopt(~\"encrypt\")];\n         let matches = &match getopts(args, opts) {\n           result::Ok(move m) => m,\n-          result::Err(_) => die!()\n+          result::Err(_) => fail!()\n         };\n         assert opts_present(matches, ~[~\"e\"]);\n         assert opts_present(matches, ~[~\"encrypt\"]);\n@@ -1200,7 +1200,7 @@ mod tests {\n         let opts = ~[optmulti(~\"L\"), optmulti(~\"M\")];\n         let matches = &match getopts(args, opts) {\n           result::Ok(move m) => m,\n-          result::Err(_) => die!()\n+          result::Err(_) => fail!()\n         };\n         assert opts_present(matches, ~[~\"L\"]);\n         assert opts_str(matches, ~[~\"L\"]) == ~\"foo\";"}, {"sha": "95f9130fa372f427295a865a0185a0cc1f9a5da0", "filename": "src/libstd/json.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -257,7 +257,7 @@ pub impl PrettyEncoder: serialize::Encoder {\n     fn emit_managed(&self, f: fn()) { f() }\n \n     fn emit_enum(&self, name: &str, f: fn()) {\n-        if name != \"option\" { die!(~\"only supports option enum\") }\n+        if name != \"option\" { fail!(~\"only supports option enum\") }\n         f()\n     }\n     fn emit_enum_variant(&self, _name: &str, id: uint, _cnt: uint, f: fn()) {\n@@ -773,7 +773,7 @@ pub impl Decoder: serialize::Decoder {\n         debug!(\"read_nil\");\n         match *self.pop() {\n             Null => (),\n-            _ => die!(~\"not a null\")\n+            _ => fail!(~\"not a null\")\n         }\n     }\n \n@@ -793,7 +793,7 @@ pub impl Decoder: serialize::Decoder {\n         debug!(\"read_bool\");\n         match *self.pop() {\n             Boolean(b) => b,\n-            _ => die!(~\"not a boolean\")\n+            _ => fail!(~\"not a boolean\")\n         }\n     }\n \n@@ -803,29 +803,29 @@ pub impl Decoder: serialize::Decoder {\n         debug!(\"read_float\");\n         match *self.pop() {\n             Number(f) => f,\n-            _ => die!(~\"not a number\")\n+            _ => fail!(~\"not a number\")\n         }\n     }\n \n     fn read_char(&self) -> char {\n         let v = str::chars(self.read_owned_str());\n-        if v.len() != 1 { die!(~\"string must have one character\") }\n+        if v.len() != 1 { fail!(~\"string must have one character\") }\n         v[0]\n     }\n \n     fn read_owned_str(&self) -> ~str {\n         debug!(\"read_owned_str\");\n         match *self.pop() {\n             String(ref s) => copy *s,\n-            _ => die!(~\"not a string\")\n+            _ => fail!(~\"not a string\")\n         }\n     }\n \n     fn read_managed_str(&self) -> @str {\n         debug!(\"read_managed_str\");\n         match *self.pop() {\n             String(ref s) => s.to_managed(),\n-            _ => die!(~\"not a string\")\n+            _ => fail!(~\"not a string\")\n         }\n     }\n \n@@ -841,7 +841,7 @@ pub impl Decoder: serialize::Decoder {\n \n     fn read_enum<T>(&self, name: &str, f: fn() -> T) -> T {\n         debug!(\"read_enum(%s)\", name);\n-        if name != ~\"option\" { die!(~\"only supports the option enum\") }\n+        if name != ~\"option\" { fail!(~\"only supports the option enum\") }\n         f()\n     }\n \n@@ -856,15 +856,15 @@ pub impl Decoder: serialize::Decoder {\n \n     fn read_enum_variant_arg<T>(&self, idx: uint, f: fn() -> T) -> T {\n         debug!(\"read_enum_variant_arg(idx=%u)\", idx);\n-        if idx != 0 { die!(~\"unknown index\") }\n+        if idx != 0 { fail!(~\"unknown index\") }\n         f()\n     }\n \n     fn read_owned_vec<T>(&self, f: fn(uint) -> T) -> T {\n         debug!(\"read_owned_vec()\");\n         let len = match *self.peek() {\n             List(ref list) => list.len(),\n-            _ => die!(~\"not a list\"),\n+            _ => fail!(~\"not a list\"),\n         };\n         let res = f(len);\n         self.pop();\n@@ -875,7 +875,7 @@ pub impl Decoder: serialize::Decoder {\n         debug!(\"read_owned_vec()\");\n         let len = match *self.peek() {\n             List(ref list) => list.len(),\n-            _ => die!(~\"not a list\"),\n+            _ => fail!(~\"not a list\"),\n         };\n         let res = f(len);\n         self.pop();\n@@ -889,7 +889,7 @@ pub impl Decoder: serialize::Decoder {\n                 self.stack.push(&list[idx]);\n                 f()\n             }\n-            _ => die!(~\"not a list\"),\n+            _ => fail!(~\"not a list\"),\n         }\n     }\n \n@@ -913,20 +913,20 @@ pub impl Decoder: serialize::Decoder {\n         match *top {\n             Object(ref obj) => {\n                 match obj.find(&name.to_owned()) {\n-                    None => die!(fmt!(\"no such field: %s\", name)),\n+                    None => fail!(fmt!(\"no such field: %s\", name)),\n                     Some(json) => {\n                         self.stack.push(json);\n                         f()\n                     }\n                 }\n             }\n-            Number(_) => die!(~\"num\"),\n-            String(_) => die!(~\"str\"),\n-            Boolean(_) => die!(~\"bool\"),\n-            List(_) => die!(fmt!(\"list: %?\", top)),\n-            Null => die!(~\"null\"),\n+            Number(_) => fail!(~\"num\"),\n+            String(_) => fail!(~\"str\"),\n+            Boolean(_) => fail!(~\"bool\"),\n+            List(_) => fail!(fmt!(\"list: %?\", top)),\n+            Null => fail!(~\"null\"),\n \n-            //_ => die!(fmt!(\"not an object: %?\", *top))\n+            //_ => fail!(fmt!(\"not an object: %?\", *top))\n         }\n     }\n \n@@ -944,7 +944,7 @@ pub impl Decoder: serialize::Decoder {\n                 self.stack.push(&list[idx]);\n                 f()\n             }\n-            _ => die!(~\"not a list\")\n+            _ => fail!(~\"not a list\")\n         }\n     }\n }"}, {"sha": "5feac4ad454cdb62c1992f057453c24b13b80866", "filename": "src/libstd/list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -93,7 +93,7 @@ pub pure fn len<T>(ls: @List<T>) -> uint {\n pub pure fn tail<T: Copy>(ls: @List<T>) -> @List<T> {\n     match *ls {\n         Cons(_, tl) => return tl,\n-        Nil => die!(~\"list empty\")\n+        Nil => fail!(~\"list empty\")\n     }\n }\n \n@@ -102,7 +102,7 @@ pub pure fn head<T: Copy>(ls: @List<T>) -> T {\n     match *ls {\n       Cons(copy hd, _) => hd,\n       // makes me sad\n-      _ => die!(~\"head invoked on empty list\")\n+      _ => fail!(~\"head invoked on empty list\")\n     }\n }\n "}, {"sha": "2f423f4c8d4265321b9a7af6c107b89c0c87b165", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -63,14 +63,14 @@ pub fn format_addr(ip: &IpAddr) -> ~str {\n       Ipv4(ref addr) =>  unsafe {\n         let result = uv_ip4_name(addr);\n         if result == ~\"\" {\n-            die!(~\"failed to convert inner sockaddr_in address to str\")\n+            fail!(~\"failed to convert inner sockaddr_in address to str\")\n         }\n         result\n       },\n       Ipv6(ref addr) => unsafe {\n         let result = uv_ip6_name(addr);\n         if result == ~\"\" {\n-            die!(~\"failed to convert inner sockaddr_in address to str\")\n+            fail!(~\"failed to convert inner sockaddr_in address to str\")\n         }\n         result\n       }\n@@ -182,7 +182,7 @@ pub mod v4 {\n     pub fn parse_addr(ip: &str) -> IpAddr {\n         match try_parse_addr(ip) {\n           result::Ok(move addr) => move addr,\n-          result::Err(ref err_data) => die!(err_data.err_msg)\n+          result::Err(ref err_data) => fail!(err_data.err_msg)\n         }\n     }\n     // the simple, old style numberic representation of\n@@ -277,7 +277,7 @@ pub mod v6 {\n     pub fn parse_addr(ip: &str) -> IpAddr {\n         match try_parse_addr(ip) {\n           result::Ok(move addr) => move addr,\n-          result::Err(copy err_data) => die!(err_data.err_msg)\n+          result::Err(copy err_data) => fail!(err_data.err_msg)\n         }\n     }\n     pub fn try_parse_addr(ip: &str) -> result::Result<IpAddr,ParseAddrErr> {\n@@ -399,7 +399,7 @@ mod test {\n             assert true;\n           }\n           result::Ok(ref addr) => {\n-            die!(fmt!(\"Expected failure, but got addr %?\", addr));\n+            fail!(fmt!(\"Expected failure, but got addr %?\", addr));\n           }\n         }\n     }\n@@ -412,7 +412,7 @@ mod test {\n             assert true;\n           }\n           result::Ok(ref addr) => {\n-            die!(fmt!(\"Expected failure, but got addr %?\", addr));\n+            fail!(fmt!(\"Expected failure, but got addr %?\", addr));\n           }\n         }\n     }\n@@ -423,7 +423,7 @@ mod test {\n         let iotask = &uv::global_loop::get();\n         let ga_result = get_addr(localhost_name, iotask);\n         if result::is_err(&ga_result) {\n-            die!(~\"got err result from net::ip::get_addr();\")\n+            fail!(~\"got err result from net::ip::get_addr();\")\n         }\n         // note really sure how to realiably test/assert\n         // this.. mostly just wanting to see it work, atm."}, {"sha": "8addea9c30bb17f03014f367f7d45a5886810097", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -941,7 +941,7 @@ impl TcpSocketBuf: io::Reader {\n               } else {\n                   debug!(\"ERROR sock_buf as io::reader.read err %? %?\",\n                          err_data.err_name, err_data.err_msg);\n-                  die!()\n+                  fail!()\n               }\n           }\n           else {\n@@ -1645,7 +1645,7 @@ pub mod test {\n             hl_loop);\n         match actual_resp_result.get_err() {\n           ConnectionRefused => (),\n-          _ => die!(~\"unknown error.. expected connection_refused\")\n+          _ => fail!(~\"unknown error.. expected connection_refused\")\n         }\n     }\n     pub fn impl_gl_tcp_ipv4_server_address_in_use() {\n@@ -1686,7 +1686,7 @@ pub mod test {\n             assert true;\n           }\n           _ => {\n-            die!(~\"expected address_in_use listen error,\"+\n+            fail!(~\"expected address_in_use listen error,\"+\n                 ~\"but got a different error varient. check logs.\");\n           }\n         }\n@@ -1705,7 +1705,7 @@ pub mod test {\n             assert true;\n           }\n           _ => {\n-            die!(~\"expected address_in_use listen error,\"+\n+            fail!(~\"expected address_in_use listen error,\"+\n                       ~\"but got a different error varient. check logs.\");\n           }\n         }\n@@ -1885,14 +1885,14 @@ pub mod test {\n         if result::is_err(&listen_result) {\n             match result::get_err(&listen_result) {\n               GenericListenErr(ref name, ref msg) => {\n-                die!(fmt!(\"SERVER: exited abnormally name %s msg %s\",\n+                fail!(fmt!(\"SERVER: exited abnormally name %s msg %s\",\n                                 *name, *msg));\n               }\n               AccessDenied => {\n-                die!(~\"SERVER: exited abnormally, got access denied..\");\n+                fail!(~\"SERVER: exited abnormally, got access denied..\");\n               }\n               AddressInUse => {\n-                die!(~\"SERVER: exited abnormally, got address in use...\");\n+                fail!(~\"SERVER: exited abnormally, got address in use...\");\n               }\n             }\n         }\n@@ -1911,15 +1911,15 @@ pub mod test {\n                 debug!(\"establish_cb %?\", kill_ch);\n             },\n             |new_conn, kill_ch| {\n-                die!(fmt!(\"SERVER: shouldn't be called.. %? %?\",\n+                fail!(fmt!(\"SERVER: shouldn't be called.. %? %?\",\n                            new_conn, kill_ch));\n         });\n         // err check on listen_result\n         if result::is_err(&listen_result) {\n             result::get_err(&listen_result)\n         }\n         else {\n-            die!(~\"SERVER: did not fail as expected\")\n+            fail!(~\"SERVER: did not fail as expected\")\n         }\n     }\n \n@@ -1963,7 +1963,7 @@ pub mod test {\n             debug!(\"tcp_write_single err name: %s msg: %s\",\n                 err_data.err_name, err_data.err_msg);\n             // meh. torn on what to do here.\n-            die!(~\"tcp_write_single failed\");\n+            fail!(~\"tcp_write_single failed\");\n         }\n     }\n }"}, {"sha": "900b7068ce3d36e6abf7af6f04020608da52fc7d", "filename": "src/libstd/oldmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Foldmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Foldmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldmap.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -319,7 +319,7 @@ pub mod chained {\n         pure fn get(&self, k: &K) -> V {\n             let opt_v = self.find(k);\n             if opt_v.is_none() {\n-                die!(fmt!(\"Key not found in table: %?\", k));\n+                fail!(fmt!(\"Key not found in table: %?\", k));\n             }\n             option::unwrap(move opt_v)\n         }"}, {"sha": "c9e739e3c8b839aab59ddd2853098c81a821cc72", "filename": "src/libstd/oldsmallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Foldsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Foldsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldsmallintmap.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -67,7 +67,7 @@ pub pure fn get<T: Copy>(self: SmallIntMap<T>, key: uint) -> T {\n     match find(self, key) {\n       None => {\n         error!(\"smallintmap::get(): key not present\");\n-        die!();\n+        fail!();\n       }\n       Some(move v) => return v\n     }"}, {"sha": "8ff90b940fb56e1ee742d8beb87a4f6de3d52402", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -98,7 +98,7 @@ pub fn of_str(str: @~str) -> Rope {\n  */\n pub fn of_substr(str: @~str, byte_offset: uint, byte_len: uint) -> Rope {\n     if byte_len == 0u { return node::Empty; }\n-    if byte_offset + byte_len  > str::len(*str) { die!(); }\n+    if byte_offset + byte_len  > str::len(*str) { fail!(); }\n     return node::Content(node::of_substr(str, byte_offset, byte_len));\n }\n \n@@ -244,9 +244,9 @@ Section: Transforming ropes\n pub fn sub_chars(rope: Rope, char_offset: uint, char_len: uint) -> Rope {\n     if char_len == 0u { return node::Empty; }\n     match (rope) {\n-      node::Empty => die!(),\n+      node::Empty => fail!(),\n       node::Content(node) => if char_len > node::char_len(node) {\n-        die!()\n+        fail!()\n       } else {\n         return node::Content(node::sub_chars(node, char_offset, char_len))\n       }\n@@ -269,9 +269,9 @@ pub fn sub_chars(rope: Rope, char_offset: uint, char_len: uint) -> Rope {\n pub fn sub_bytes(rope: Rope, byte_offset: uint, byte_len: uint) -> Rope {\n     if byte_len == 0u { return node::Empty; }\n     match (rope) {\n-      node::Empty => die!(),\n+      node::Empty => fail!(),\n       node::Content(node) =>if byte_len > node::byte_len(node) {\n-        die!()\n+        fail!()\n       } else {\n         return node::Content(node::sub_bytes(node, byte_offset, byte_len))\n       }\n@@ -548,7 +548,7 @@ pub pure fn byte_len(rope: Rope) -> uint {\n  */\n pub fn char_at(rope: Rope, pos: uint) -> char {\n    match (rope) {\n-      node::Empty => die!(),\n+      node::Empty => fail!(),\n       node::Content(x) => return node::char_at(x, pos)\n    }\n }"}, {"sha": "d4afdbf6f3094683393acbe53c9857d39ba04794", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -389,7 +389,7 @@ pub impl<D: Decoder, T: Decodable<D>> Option<T>: Decodable<D> {\n                   0 => None,\n                   1 => Some(d.read_enum_variant_arg(\n                       0u, || Decodable::decode(d))),\n-                  _ => die!(fmt!(\"Bad variant for option: %u\", i))\n+                  _ => fail!(fmt!(\"Bad variant for option: %u\", i))\n                 }\n             }\n         }"}, {"sha": "e89f37878300c0d226a2aa5274504cecf213e1bd", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -83,7 +83,7 @@ pub fn sha1() -> Sha1 {\n                 st.len_high += 1u32;\n                 if st.len_high == 0u32 {\n                     // FIXME: Need better failure mode (#2346)\n-                    die!();\n+                    fail!();\n                 }\n             }\n             if st.msg_block_idx == msg_block_len { process_msg_block(st); }"}, {"sha": "f8acbe8418086055600f2c036a8de644cbb1b650", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -546,7 +546,7 @@ impl<T: Copy Ord> MergeState<T> {\n             copy_vec(array, dest, array, c2, len2);\n             array[dest+len2] <-> tmp[c1];\n         } else if len1 == 0 {\n-            die!(~\"Comparison violates its contract!\");\n+            fail!(~\"Comparison violates its contract!\");\n         } else {\n             assert len2 == 0;\n             assert len1 > 1;\n@@ -664,7 +664,7 @@ impl<T: Copy Ord> MergeState<T> {\n             copy_vec(array, dest+1, array, c1+1, len1);\n             array[dest] <-> tmp[c2];\n         } else if len2 == 0 {\n-            die!(~\"Comparison violates its contract!\");\n+            fail!(~\"Comparison violates its contract!\");\n         } else {\n             assert len1 == 0;\n             assert len2 != 0;\n@@ -912,7 +912,7 @@ mod test_tim_sort {\n         pure fn lt(&self, other: &CVal) -> bool {\n             unsafe {\n                 let rng = rand::Rng();\n-                if rng.gen_float() > 0.995 { die!(~\"It's happening!!!\"); }\n+                if rng.gen_float() > 0.995 { fail!(~\"It's happening!!!\"); }\n             }\n             (*self).val < other.val\n         }\n@@ -968,7 +968,7 @@ mod test_tim_sort {\n         };\n \n         tim_sort(arr);\n-        die!(~\"Guarantee the fail\");\n+        fail!(~\"Guarantee the fail\");\n     }\n \n     struct DVal { val: uint }\n@@ -1036,7 +1036,7 @@ mod big_tests {\n         fn isSorted<T: Ord>(arr: &[const T]) {\n             for uint::range(0, arr.len()-1) |i| {\n                 if arr[i] > arr[i+1] {\n-                    die!(~\"Array not sorted\");\n+                    fail!(~\"Array not sorted\");\n                 }\n             }\n         }\n@@ -1108,7 +1108,7 @@ mod big_tests {\n         fn isSorted<T: Ord>(arr: &[const @T]) {\n             for uint::range(0, arr.len()-1) |i| {\n                 if arr[i] > arr[i+1] {\n-                    die!(~\"Array not sorted\");\n+                    fail!(~\"Array not sorted\");\n                 }\n             }\n         }\n@@ -1191,7 +1191,7 @@ mod big_tests {\n                         task::local_data::local_data_set(self.key, @(y+1));\n                     }\n                 }\n-                _ => die!(~\"Expected key to work\"),\n+                _ => fail!(~\"Expected key to work\"),\n             }\n         }\n     }"}, {"sha": "8a5741201c009e4ac10c814403858b122d967e76", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -333,10 +333,10 @@ fn check_cvar_bounds<U>(out_of_bounds: Option<uint>, id: uint, act: &str,\n                         blk: fn() -> U) -> U {\n     match out_of_bounds {\n         Some(0) =>\n-            die!(fmt!(\"%s with illegal ID %u - this lock has no condvars!\",\n+            fail!(fmt!(\"%s with illegal ID %u - this lock has no condvars!\",\n                       act, id)),\n         Some(length) =>\n-            die!(fmt!(\"%s with illegal ID %u - ID must be less than %u\",\n+            fail!(fmt!(\"%s with illegal ID %u - ID must be less than %u\",\n                       act, id, length)),\n         None => blk()\n     }\n@@ -580,7 +580,7 @@ impl &RWlock {\n     /// To be called inside of the write_downgrade block.\n     fn downgrade(token: RWlockWriteMode/&a) -> RWlockReadMode/&a {\n         if !ptr::ref_eq(self, token.lock) {\n-            die!(~\"Can't downgrade() with a different rwlock's write_mode!\");\n+            fail!(~\"Can't downgrade() with a different rwlock's write_mode!\");\n         }\n         unsafe {\n             do task::unkillable {\n@@ -933,7 +933,7 @@ mod tests {\n \n         let result: result::Result<(),()> = do task::try |move m2| {\n             do m2.lock {\n-                die!();\n+                fail!();\n             }\n         };\n         assert result.is_err();\n@@ -952,7 +952,7 @@ mod tests {\n             do task::spawn |move p| { // linked\n                 let _ = p.recv(); // wait for sibling to get in the mutex\n                 task::yield();\n-                die!();\n+                fail!();\n             }\n             do m2.lock_cond |cond| {\n                 c.send(()); // tell sibling go ahead\n@@ -994,7 +994,7 @@ mod tests {\n             }\n             do m2.lock { }\n             c.send(move sibling_convos); // let parent wait on all children\n-            die!();\n+            fail!();\n         };\n         assert result.is_err();\n         // child task must have finished by the time try returns\n@@ -1048,7 +1048,7 @@ mod tests {\n             let _ = p.recv();\n             do m.lock_cond |cond| {\n                 if !cond.signal_on(0) {\n-                    die!(); // success; punt sibling awake.\n+                    fail!(); // success; punt sibling awake.\n                 }\n             }\n         };\n@@ -1288,7 +1288,7 @@ mod tests {\n \n         let result: result::Result<(),()> = do task::try |move x2| {\n             do lock_rwlock_in_mode(x2, mode1) {\n-                die!();\n+                fail!();\n             }\n         };\n         assert result.is_err();"}, {"sha": "530761e48a201510dee0bf59fea01b41fcc1809d", "filename": "src/libstd/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -121,9 +121,9 @@ pub fn test_main(args: &[~str], tests: ~[TestDescAndFn]) {\n     let opts =\n         match parse_opts(args) {\n           either::Left(move o) => o,\n-          either::Right(move m) => die!(m)\n+          either::Right(move m) => fail!(m)\n         };\n-    if !run_tests_console(&opts, tests) { die!(~\"Some tests failed\"); }\n+    if !run_tests_console(&opts, tests) { fail!(~\"Some tests failed\"); }\n }\n \n // A variant optimized for invocation with a static test vector.\n@@ -284,7 +284,7 @@ pub fn run_tests_console(opts: &TestOpts,\n                                                   io::Truncate]) {\n           result::Ok(w) => Some(w),\n           result::Err(ref s) => {\n-              die!(fmt!(\"can't open output file: %s\", *s))\n+              fail!(fmt!(\"can't open output file: %s\", *s))\n           }\n         },\n         None => None\n@@ -800,7 +800,7 @@ mod tests {\n \n     #[test]\n     pub fn do_not_run_ignored_tests() {\n-        fn f() { die!(); }\n+        fn f() { fail!(); }\n         let desc = TestDescAndFn {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n@@ -837,7 +837,7 @@ mod tests {\n     #[test]\n     #[ignore(cfg(windows))]\n     pub fn test_should_fail() {\n-        fn f() { die!(); }\n+        fn f() { fail!(); }\n         let desc = TestDescAndFn {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n@@ -876,7 +876,7 @@ mod tests {\n         let args = ~[~\"progname\", ~\"filter\"];\n         let opts = match parse_opts(args) {\n           either::Left(copy o) => o,\n-          _ => die!(~\"Malformed arg in first_free_arg_should_be_a_filter\")\n+          _ => fail!(~\"Malformed arg in first_free_arg_should_be_a_filter\")\n         };\n         assert ~\"filter\" == opts.filter.get();\n     }\n@@ -886,7 +886,7 @@ mod tests {\n         let args = ~[~\"progname\", ~\"filter\", ~\"--ignored\"];\n         let opts = match parse_opts(args) {\n           either::Left(copy o) => o,\n-          _ => die!(~\"Malformed arg in parse_ignored_flag\")\n+          _ => fail!(~\"Malformed arg in parse_ignored_flag\")\n         };\n         assert (opts.run_ignored);\n     }"}, {"sha": "622e1ea65d8b5298d175f0393169ee56d945a8cf", "filename": "src/libstd/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -1040,7 +1040,7 @@ mod tests {\n             == Err(~\"Invalid time\");\n \n         match strptime(~\"Fri Feb 13 15:31:30 2009\", format) {\n-          Err(copy e) => die!(e),\n+          Err(copy e) => fail!(e),\n           Ok(ref tm) => {\n             assert tm.tm_sec == 30_i32;\n             assert tm.tm_min == 31_i32;\n@@ -1060,7 +1060,7 @@ mod tests {\n         fn test(s: &str, format: &str) -> bool {\n             match strptime(s, format) {\n               Ok(ref tm) => tm.strftime(format) == str::from_slice(s),\n-              Err(copy e) => die!(e)\n+              Err(copy e) => fail!(e)\n             }\n         }\n "}, {"sha": "6e1e6a331a29667a611ccf84a4cf91dd16a1222b", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -67,12 +67,12 @@ pub fn delayed_send<T: Owned>(iotask: &IoTask,\n                         } else {\n                             let error_msg = uv::ll::get_last_err_info(\n                                 loop_ptr);\n-                            die!(~\"timer::delayed_send() start failed: \" +\n+                            fail!(~\"timer::delayed_send() start failed: \" +\n                                 error_msg);\n                         }\n                     } else {\n                         let error_msg = uv::ll::get_last_err_info(loop_ptr);\n-                        die!(~\"timer::delayed_send() init failed: \" +\n+                        fail!(~\"timer::delayed_send() init failed: \" +\n                             error_msg);\n                     }\n                 }\n@@ -157,7 +157,7 @@ extern fn delayed_send_cb(handle: *uv::ll::uv_timer_t,\n         } else {\n             let loop_ptr = uv::ll::get_loop_for_uv_handle(handle);\n             let error_msg = uv::ll::get_last_err_info(loop_ptr);\n-            die!(~\"timer::sleep() init failed: \"+error_msg);\n+            fail!(~\"timer::sleep() init failed: \"+error_msg);\n         }\n     }\n }"}, {"sha": "6621eef8b0b420e51a5cf063623825c7b16fff1f", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -184,11 +184,11 @@ mod test {\n                                                            simple_timer_cb,\n                                                            1u, 0u);\n                         if(start_status != 0i32) {\n-                            die!(~\"failure on ll::timer_start()\");\n+                            fail!(~\"failure on ll::timer_start()\");\n                         }\n                     }\n                     else {\n-                        die!(~\"failure on ll::timer_init()\");\n+                        fail!(~\"failure on ll::timer_init()\");\n                     }\n                 }\n             };"}, {"sha": "d78761b70e3ef3d851e37779e8e4b6e0fe02290a", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -382,7 +382,7 @@ fn unwrap<T:Owned\n     ww.res <-> s;\n \n     match move s {\n-        None => die!(),\n+        None => fail!(),\n         Some(Left(move v)) => move v,\n         Some(Right(move port)) => {\n "}, {"sha": "949e9ff447c9b0ad14678dc76c3ed4805ec628ca", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -37,7 +37,7 @@ pub impl<S: Encoder> ident: Encodable<S> {\n         let intr = match unsafe {\n             task::local_data::local_data_get(interner_key!())\n         } {\n-            None => die!(~\"encode: TLS interner not set up\"),\n+            None => fail!(~\"encode: TLS interner not set up\"),\n             Some(intr) => intr\n         };\n \n@@ -50,7 +50,7 @@ pub impl<D: Decoder> ident: Decodable<D> {\n         let intr = match unsafe {\n             task::local_data::local_data_get(interner_key!())\n         } {\n-            None => die!(~\"decode: TLS interner not set up\"),\n+            None => fail!(~\"decode: TLS interner not set up\"),\n             Some(intr) => intr\n         };\n "}, {"sha": "9eeee943f8b24621bc8ff220c4dc0dd0678b1738", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -320,7 +320,7 @@ pub fn map_struct_def(struct_def: @ast::struct_def, parent_node: ast_node,\n                     cx.map.insert(ctor_id,\n                                   node_struct_ctor(struct_def, item, p));\n                 }\n-                _ => die!(~\"struct def parent wasn't an item\")\n+                _ => fail!(~\"struct def parent wasn't an item\")\n             }\n         }\n     }\n@@ -404,7 +404,7 @@ pub fn node_item_query<Result>(items: map, id: node_id,\n                            error_msg: ~str) -> Result {\n     match items.find(&id) {\n         Some(node_item(it, _)) => query(it),\n-        _ => die!(error_msg)\n+        _ => fail!(error_msg)\n     }\n }\n "}, {"sha": "335dd4e3fa2471f8e5b5d4aeb4e20813254d54ca", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -44,7 +44,7 @@ pub pure fn stmt_id(s: stmt) -> node_id {\n       stmt_decl(_, id) => id,\n       stmt_expr(_, id) => id,\n       stmt_semi(_, id) => id,\n-      stmt_mac(*) => die!(~\"attempted to analyze unexpanded stmt\")\n+      stmt_mac(*) => fail!(~\"attempted to analyze unexpanded stmt\")\n     }\n }\n \n@@ -53,7 +53,7 @@ pub fn variant_def_ids(d: def) -> {enm: def_id, var: def_id} {\n       def_variant(enum_id, var_id) => {\n         return {enm: enum_id, var: var_id}\n       }\n-      _ => die!(~\"non-variant in variant_def_ids\")\n+      _ => fail!(~\"non-variant in variant_def_ids\")\n     }\n }\n \n@@ -71,7 +71,7 @@ pub pure fn def_id_of_def(d: def) -> def_id {\n         local_def(id)\n       }\n \n-      def_prim_ty(_) => die!()\n+      def_prim_ty(_) => fail!()\n     }\n }\n "}, {"sha": "22f1e2d47533b661d91706f23347c72288bfb40f", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -198,7 +198,7 @@ fn eq(a: @ast::meta_item, b: @ast::meta_item) -> bool {\n             // FIXME (#607): Needs implementing\n             // This involves probably sorting the list by name and\n             // meta_item variant\n-            die!(~\"unimplemented meta_item variant\")\n+            fail!(~\"unimplemented meta_item variant\")\n           }\n         }\n }"}, {"sha": "b41e84a04f81fcec158a2d9a4696ac78e615aa34", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -401,7 +401,7 @@ pub impl CodeMap {\n         for self.files.each |fm| { if fm.name == filename { return *fm; } }\n         //XXjdm the following triggers a mismatched type bug\n         //      (or expected function, found _|_)\n-        die!(); // (\"asking for \" + filename + \" which we don't know about\");\n+        fail!(); // (\"asking for \" + filename + \" which we don't know about\");\n     }\n \n }\n@@ -421,7 +421,7 @@ priv impl CodeMap {\n             }\n         }\n         if (a >= len) {\n-            die!(fmt!(\"position %u does not resolve to a source location\",\n+            fail!(fmt!(\"position %u does not resolve to a source location\",\n                       pos.to_uint()))\n         }\n "}, {"sha": "e44ee4eef0a8c578f179c05f0163d7fabb14c576", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -66,7 +66,7 @@ struct CodemapT {\n impl CodemapT: span_handler {\n     fn span_fatal(@mut self, sp: span, msg: &str) -> ! {\n         self.handler.emit(Some((self.cm, sp)), msg, fatal);\n-        die!();\n+        fail!();\n     }\n     fn span_err(@mut self, sp: span, msg: &str) {\n         self.handler.emit(Some((self.cm, sp)), msg, error);\n@@ -92,7 +92,7 @@ impl CodemapT: span_handler {\n impl HandlerT: handler {\n     fn fatal(@mut self, msg: &str) -> ! {\n         (self.emit)(None, msg, fatal);\n-        die!();\n+        fail!();\n     }\n     fn err(@mut self, msg: &str) {\n         (self.emit)(None, msg, error);"}, {"sha": "c854fca64248dd8e0cf0c2f0a688a10a6ed6b25e", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -812,7 +812,7 @@ fn mk_struct_fields(fields: ~[@ast::struct_field]) -> ~[field] {\n     do fields.map |field| {\n         let (ident, mutbl) = match field.node.kind {\n             ast::named_field(ident, mutbl, _) => (ident, mutbl),\n-            _ => die!(~\"[auto_encode] does not support \\\n+            _ => fail!(~\"[auto_encode] does not support \\\n                         unnamed fields\")\n         };\n \n@@ -954,9 +954,9 @@ fn mk_enum_ser_body(\n             ast::tuple_variant_kind(args) =>\n                 ser_variant(cx, span, variant.node.name, v_idx, args),\n             ast::struct_variant_kind(*) =>\n-                die!(~\"struct variants unimplemented\"),\n+                fail!(~\"struct variants unimplemented\"),\n             ast::enum_variant_kind(*) =>\n-                die!(~\"enum variants unimplemented\"),\n+                fail!(~\"enum variants unimplemented\"),\n         }\n     };\n \n@@ -1047,9 +1047,9 @@ fn mk_enum_deser_body(\n                 }\n             },\n             ast::struct_variant_kind(*) =>\n-                die!(~\"struct variants unimplemented\"),\n+                fail!(~\"struct variants unimplemented\"),\n             ast::enum_variant_kind(*) =>\n-                die!(~\"enum variants unimplemented\")\n+                fail!(~\"enum variants unimplemented\")\n         };\n \n         let pat = @ast::pat {"}, {"sha": "17197f64c55564a43392bc1730f270487f1cd0e4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -292,7 +292,7 @@ pub fn core_macros() -> ~str {\n             ::core::sys::begin_unwind($msg, file!().to_owned(), line!())\n         );\n         () => (\n-            die!(~\\\"explicit failure\\\")\n+            fail!(~\\\"explicit failure\\\")\n         )\n     )\n \n@@ -301,14 +301,14 @@ pub fn core_macros() -> ~str {\n             ::core::sys::begin_unwind($msg, file!().to_owned(), line!())\n         );\n         () => (\n-            die!(~\\\"explicit failure\\\")\n+            fail!(~\\\"explicit failure\\\")\n         )\n     )\n \n     macro_rules! fail_unless(\n         ($cond:expr) => {\n             if !$cond {\n-                die!(~\\\"assertion failed: \\\" + stringify!($cond))\n+                fail!(~\\\"assertion failed: \\\" + stringify!($cond))\n             }\n         }\n     )"}, {"sha": "6a1708b8e2b51fb518b24285f72fd551cc134f40", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -40,13 +40,13 @@ pub impl parser::Parser: proto_parser {\n         self.expect(token::COLON);\n         let dir = match copy self.token {\n           token::IDENT(n, _) => self.interner.get(n),\n-          _ => die!()\n+          _ => fail!()\n         };\n         self.bump();\n         let dir = match dir {\n           @~\"send\" => send,\n           @~\"recv\" => recv,\n-          _ => die!()\n+          _ => fail!()\n         };\n \n         let typarms = if self.token == token::LT {"}, {"sha": "4522c7e0fd6c2b97cb462b7b22831e74907599bb", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -184,7 +184,7 @@ pub mod rt {\n                 Some(ast) => ast,\n                 None => {\n                     error!(\"Parse error with ```\\n%s\\n```\", s);\n-                    die!()\n+                    fail!()\n                 }\n             }\n         }\n@@ -399,7 +399,7 @@ fn mk_token(cx: ext_ctxt, sp: span, tok: token::Token) -> @ast::expr {\n                                   ~[mk_ident(cx, sp, ident)]);\n         }\n \n-        INTERPOLATED(_) => die!(~\"quote! with interpolated token\"),\n+        INTERPOLATED(_) => fail!(~\"quote! with interpolated token\"),\n \n         _ => ()\n     }\n@@ -437,7 +437,7 @@ fn mk_token(cx: ext_ctxt, sp: span, tok: token::Token) -> @ast::expr {\n         DOLLAR => \"DOLLAR\",\n         UNDERSCORE => \"UNDERSCORE\",\n         EOF => \"EOF\",\n-        _ => die!()\n+        _ => fail!()\n     };\n     build::mk_path(cx, sp,\n                    ids_ext(cx, ~[name.to_owned()]))\n@@ -467,7 +467,7 @@ fn mk_tt(cx: ext_ctxt, sp: span, tt: &ast::token_tree)\n         }\n \n         ast::tt_delim(ref tts) => mk_tts(cx, sp, *tts),\n-        ast::tt_seq(*) => die!(~\"tt_seq in quote!\"),\n+        ast::tt_seq(*) => fail!(~\"tt_seq in quote!\"),\n \n         ast::tt_nonterminal(sp, ident) => {\n "}, {"sha": "9e89e703c09bbb15b930d3e53438a6d5bc23a90d", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -124,7 +124,7 @@ pub type matcher_pos = ~{\n pub fn copy_up(&& mpu: matcher_pos_up) -> matcher_pos {\n     match &mpu {\n       &matcher_pos_up(Some(ref mp)) => copy (*mp),\n-      _ => die!()\n+      _ => fail!()\n     }\n }\n \n@@ -361,7 +361,7 @@ pub fn parse(sess: parse_sess,\n                         fmt!(\"%s ('%s')\", *sess.interner.get(name),\n                              *sess.interner.get(bind))\n                       }\n-                      _ => die!()\n+                      _ => fail!()\n                     } }), ~\" or \");\n                 return error(sp, fmt!(\n                     \"Local ambiguity: multiple parsing options: \\\n@@ -386,7 +386,7 @@ pub fn parse(sess: parse_sess,\n                         parse_nt(rust_parser, *sess.interner.get(name))));\n                     ei.idx += 1u;\n                   }\n-                  _ => die!()\n+                  _ => fail!()\n                 }\n                 cur_eis.push(move ei);\n "}, {"sha": "1e17cf3543dd6ea65f642e88fc656b8defd25a1d", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -117,7 +117,7 @@ pub fn strip_doc_comment_decoration(comment: ~str) -> ~str {\n         return str::connect(lines, ~\"\\n\");\n     }\n \n-    die!(~\"not a doc-comment: \" + comment);\n+    fail!(~\"not a doc-comment: \" + comment);\n }\n \n fn read_to_eol(rdr: @mut StringReader) -> ~str {\n@@ -297,7 +297,7 @@ fn consume_comment(rdr: @mut StringReader,\n         read_block_comment(rdr, code_to_the_left, comments);\n     } else if rdr.curr == '#' && nextch(rdr) == '!' {\n         read_shebang_comment(rdr, code_to_the_left, comments);\n-    } else { die!(); }\n+    } else { fail!(); }\n     debug!(\"<<< consume comment\");\n }\n "}, {"sha": "48ba94bdc33b72e00ab138eb819f3b37f412ac69", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -215,7 +215,7 @@ fn hex_digit_val(c: char) -> int {\n     if in_range(c, '0', '9') { return (c as int) - ('0' as int); }\n     if in_range(c, 'a', 'f') { return (c as int) - ('a' as int) + 10; }\n     if in_range(c, 'A', 'F') { return (c as int) - ('A' as int) + 10; }\n-    die!();\n+    fail!();\n }\n \n fn bin_digit_value(c: char) -> int { if c == '0' { return 0; } return 1; }"}, {"sha": "1fcd99e19469e26d2089bde393f7a2fb290c9caf", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -2538,7 +2538,7 @@ pub impl Parser {\n                           _ => None\n                         }\n                       }\n-                      _ => die!()\n+                      _ => fail!()\n                     };\n \n                     match maybe_bound {\n@@ -3907,7 +3907,7 @@ pub impl Parser {\n             let metadata = self.parse_optional_meta();\n             view_item_use(ident, metadata, self.get_id())\n         } else {\n-            die!();\n+            fail!();\n         };\n         self.expect(token::SEMI);\n         @ast::view_item { node: node,"}, {"sha": "dbcb3d756c809a25cfc54b2eecaa5b7c99b5ca24", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -210,7 +210,7 @@ pub fn to_str(in: @ident_interner, t: Token) -> ~str {\n                       nt_block(*) => ~\"block\",\n                       nt_stmt(*) => ~\"statement\",\n                       nt_pat(*) => ~\"pattern\",\n-                      nt_expr(*) => die!(~\"should have been handled above\"),\n+                      nt_expr(*) => fail!(~\"should have been handled above\"),\n                       nt_ty(*) => ~\"type\",\n                       nt_ident(*) => ~\"identifier\",\n                       nt_path(*) => ~\"path\",\n@@ -263,7 +263,7 @@ pub fn flip_delimiter(t: token::Token) -> token::Token {\n       token::RPAREN => token::LPAREN,\n       token::RBRACE => token::LBRACE,\n       token::RBRACKET => token::LBRACKET,\n-      _ => die!()\n+      _ => fail!()\n     }\n }\n "}, {"sha": "aeebcce1f2b2716a5bb5475b113a0108f97f1e39", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -519,7 +519,7 @@ pub impl Printer {\n           }\n           EOF => {\n             // EOF should never get here.\n-            die!();\n+            fail!();\n           }\n         }\n     }"}, {"sha": "b05461aa8d98f5a12de747171279776579a99045", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -440,10 +440,10 @@ pub fn print_type_ex(s: @ps, &&ty: @ast::Ty, print_colons: bool) {\n         word(s.s, ~\"]\");\n       }\n       ast::ty_mac(_) => {\n-          die!(~\"print_type doesn't know how to print a ty_mac\");\n+          fail!(~\"print_type doesn't know how to print a ty_mac\");\n       }\n       ast::ty_infer => {\n-          die!(~\"print_type shouldn't see a ty_infer\");\n+          fail!(~\"print_type shouldn't see a ty_infer\");\n       }\n \n     }\n@@ -637,7 +637,7 @@ pub fn print_enum_def(s: @ps, enum_definition: ast::enum_def,\n         word_space(s, ~\"=\");\n         match enum_definition.variants[0].node.kind {\n             ast::tuple_variant_kind(args) => print_type(s, args[0].ty),\n-            _ => die!(~\"newtype syntax with struct?\")\n+            _ => fail!(~\"newtype syntax with struct?\")\n         }\n         word(s.s, ~\";\");\n         end(s);\n@@ -706,7 +706,7 @@ pub fn print_struct(s: @ps,\n             }\n \n             match field.node.kind {\n-                ast::named_field(*) => die!(~\"unexpected named field\"),\n+                ast::named_field(*) => fail!(~\"unexpected named field\"),\n                 ast::unnamed_field => {\n                     maybe_print_comment(s, field.span.lo);\n                     print_type(s, field.node.ty);\n@@ -729,7 +729,7 @@ pub fn print_struct(s: @ps,\n \n         for struct_def.fields.each |field| {\n             match field.node.kind {\n-                ast::unnamed_field => die!(~\"unexpected unnamed field\"),\n+                ast::unnamed_field => fail!(~\"unexpected unnamed field\"),\n                 ast::named_field(ident, mutability, visibility) => {\n                     hardbreak_if_not_bol(s);\n                     maybe_print_comment(s, field.span.lo);\n@@ -1015,7 +1015,7 @@ pub fn print_if(s: @ps, test: @ast::expr, blk: ast::blk,\n               }\n               // BLEAH, constraints would be great here\n               _ => {\n-                  die!(~\"print_if saw if with weird alternative\");\n+                  fail!(~\"print_if saw if with weird alternative\");\n               }\n             }\n           }\n@@ -1316,7 +1316,7 @@ pub fn print_expr(s: @ps, &&expr: @ast::expr) {\n                         }\n                         end(s); // close enclosing cbox\n                     }\n-                    None => die!()\n+                    None => fail!()\n                 }\n             } else {\n                 // the block will close the pattern's ibox\n@@ -2257,7 +2257,7 @@ pub mod test {\n \n     fn string_check<T : Eq> (given : &T, expected: &T) {\n         if !(given == expected) {\n-            die!(fmt!(\"given %?, expected %?\",given,expected));\n+            fail!(fmt!(\"given %?, expected %?\",given,expected));\n         }\n     }\n "}, {"sha": "b6d333349a091ec8b44ce8af73382baf7d62043e", "filename": "src/libsyntax/util/testing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Futil%2Ftesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Flibsyntax%2Futil%2Ftesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Ftesting.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -13,12 +13,12 @@ use core::cmp;\n \n pub pure fn check_equal_ptr<T : cmp::Eq> (given : &T, expected: &T) {\n     if !((given == expected) && (expected == given )) {\n-        die!(fmt!(\"given %?, expected %?\",given,expected));\n+        fail!(fmt!(\"given %?, expected %?\",given,expected));\n     }\n }\n \n pub pure fn check_equal<T : cmp::Eq> (given : T, expected: T) {\n     if !((given == expected) && (expected == given )) {\n-        die!(fmt!(\"given %?, expected %?\",given,expected));\n+        fail!(fmt!(\"given %?, expected %?\",given,expected));\n     }\n }"}, {"sha": "8f1c3d5bb5f52b17c93693107dc70cb88027b57b", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -25,7 +25,7 @@ pub fn alist_get<A: Copy, B: Copy>(lst: alist<A,B>, k: A) -> B {\n     for lst.data.each |entry| {\n         if eq_fn(entry.key, k) { return entry.value; }\n     }\n-    die!();\n+    fail!();\n }\n \n #[inline]"}, {"sha": "6007b1f3d175e8e8f31b7dc0c36a6b5ec496694e", "filename": "src/test/auxiliary/issue2378a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2378a.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -14,7 +14,7 @@ impl methods<T:copy> for maybe<T> {\n     fn ~[](idx: uint) -> T {\n         match self {\n           just(t) { t }\n-          nothing { die!(); }\n+          nothing { fail!(); }\n         }\n     }\n }"}, {"sha": "b3fa8e73cc22292fc9349262d887613eacd446ce", "filename": "src/test/auxiliary/issue_2723_a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub unsafe fn f(xs: ~[int]) {\n-    xs.map(|_x| { unsafe fn q() { die!(); } });\n+    xs.map(|_x| { unsafe fn q() { fail!(); } });\n }"}, {"sha": "37be325f15bc60df67632947de88344a5d974728", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -36,6 +36,6 @@ impl bool: read {\n pub fn read<T: read Copy>(s: ~str) -> T {\n     match read::readMaybe(s) {\n       Some(x) => x,\n-      _ => die!(~\"read failed!\")\n+      _ => fail!(~\"read failed!\")\n     }\n }"}, {"sha": "e88cb62db7345fefbed54783b8133639c96039db", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -213,7 +213,7 @@ fn bfs2(graph: graph, key: node_id) -> bfs_result {\n         match *c {\n           white => { -1i64 }\n           black(parent) => { parent }\n-          _ => { die!(~\"Found remaining gray nodes in BFS\") }\n+          _ => { fail!(~\"Found remaining gray nodes in BFS\") }\n         }\n     }\n }\n@@ -300,7 +300,7 @@ fn pbfs(&&graph: arc::ARC<graph>, key: node_id) -> bfs_result {\n             match *c {\n                 white => { -1i64 }\n                 black(parent) => { parent }\n-                _ => { die!(~\"Found remaining gray nodes in BFS\") }\n+                _ => { fail!(~\"Found remaining gray nodes in BFS\") }\n             }\n         }\n     }"}, {"sha": "3d367c546838bd1a821547349c7c04eeedc7076d", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -56,7 +56,7 @@ macro_rules! follow (\n             $(Some($message($($x,)* move next)) => {\n                 let $next = move next;\n                 move $e })+\n-                _ => { die!() }\n+                _ => { fail!() }\n         }\n     );\n \n@@ -67,7 +67,7 @@ macro_rules! follow (\n             $(Some($message(move next)) => {\n                 let $next = move next;\n                 move $e })+\n-                _ => { die!() }\n+                _ => { fail!() }\n         }\n     )\n )"}, {"sha": "27111ff3b6d45d39a294a3a01196ecefacf2312e", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -63,7 +63,7 @@ fn show_digit(nn: uint) -> ~str {\n         7 => {~\"seven\"}\n         8 => {~\"eight\"}\n         9 => {~\"nine\"}\n-        _ => {die!(~\"expected digits from 0 to 9...\")}\n+        _ => {fail!(~\"expected digits from 0 to 9...\")}\n     }\n }\n "}, {"sha": "ac695421059c71e5f47e68ebda430f89e2c16ccb", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -68,7 +68,7 @@ fn parse_opts(argv: ~[~str]) -> Config {\n       Ok(ref m) => {\n           return Config {stress: getopts::opt_present(m, ~\"stress\")}\n       }\n-      Err(_) => { die!(); }\n+      Err(_) => { fail!(); }\n     }\n }\n "}, {"sha": "885eaf01c445320900f7da65577fc0c3f19b2242", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -118,7 +118,7 @@ pub fn solve_grid(g: grid_t) {\n             ptr = ptr + 1u;\n         } else {\n             // no: redo this field aft recoloring pred; unless there is none\n-            if ptr == 0u { die!(~\"No solution found for this sudoku\"); }\n+            if ptr == 0u { fail!(~\"No solution found for this sudoku\"); }\n             ptr = ptr - 1u;\n         }\n     }"}, {"sha": "c67305bab8f3155c8b2aea2cd648dd4af703553a", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -69,7 +69,7 @@ fn r(l: @nillist) -> r {\n fn recurse_or_fail(depth: int, st: Option<State>) {\n     if depth == 0 {\n         debug!(\"unwinding %.4f\", precise_time_s());\n-        die!();\n+        fail!();\n     } else {\n         let depth = depth - 1;\n "}, {"sha": "06f4213ee7b93809b57b37f08075b446e4613bc5", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -46,6 +46,6 @@ fn main() {\n     let (p,c) = pipes::stream();\n     child_generation(uint::from_str(args[1]).get(), move c);\n     if p.try_recv().is_none() {\n-        die!(~\"it happened when we slumbered\");\n+        fail!(~\"it happened when we slumbered\");\n     }\n }"}, {"sha": "4a6195b1ae89cbba14c4fa418caa1dc4a4046ffe", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -77,7 +77,7 @@ fn main() {\n         }\n         // Grandparent group waits for middle group to be gone, then fails\n         error!(\"Grandparent group wakes up and fails\");\n-        die!();\n+        fail!();\n     };\n     assert x.is_err();\n }"}, {"sha": "a94709c5774663c10ab72316bcebc8346fc212be", "filename": "src/test/compile-fail/alt-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-join.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // a good test that we merge paths correctly in the presence of a\n // variable that's used before it's declared\n \n-fn my_fail() -> ! { die!(); }\n+fn my_fail() -> ! { fail!(); }\n \n fn main() {\n     match true { false => { my_fail(); } true => { } }"}, {"sha": "2ffb5dd29066f37f712f0c54823627e19a2dd4a9", "filename": "src/test/compile-fail/bad-bang-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,7 +12,7 @@\n // Tests that a function with a ! annotation always actually fails\n \n fn bad_bang(i: uint) -> ! {\n-    if i < 0u { } else { die!(); }\n+    if i < 0u { } else { fail!(); }\n     //~^ ERROR expected `!` but found `()`\n }\n "}, {"sha": "1bffb0739e93faea76560414c9eb9cc2f2a52524", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -20,6 +20,6 @@ fn main() {\n     let x = Some(X { x: () });\n     match move x {\n         Some(ref _y @ move _z) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        None => die!()\n+        None => fail!()\n     }\n }"}, {"sha": "cbf48559909159499f64abac7676930681502cb0", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -20,6 +20,6 @@ fn main() {\n     let x = Some((X { x: () }, X { x: () }));\n     match move x {\n         Some((ref _y, move _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        None => die!()\n+        None => fail!()\n     }\n }"}, {"sha": "9c14a53eba169cb9912bd5a77916dc66c597c915", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -22,6 +22,6 @@ fn main() {\n     let x = some2(X { x: () }, X { x: () });\n     match move x {\n         some2(ref _y, move _z) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        none2 => die!()\n+        none2 => fail!()\n     }\n }"}, {"sha": "1d492fdd0f1f2b9c2ad4933378ab30d83fcc72bd", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -20,6 +20,6 @@ fn main() {\n     let x = Some((X { x: () }, X { x: () }));\n     match move x {\n         Some((move _y, ref _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        None => die!()\n+        None => fail!()\n     }\n }"}, {"sha": "82f4d57911b4cae6ed3bf03e07f1b5705a82f7dc", "filename": "src/test/compile-fail/bind-by-move-no-guards.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -13,8 +13,8 @@ fn main() {\n     let x = Some(p);\n     c.send(false);\n     match move x {\n-        Some(move z) if z.recv() => { die!() }, //~ ERROR cannot bind by-move into a pattern guard\n+        Some(move z) if z.recv() => { fail!() }, //~ ERROR cannot bind by-move into a pattern guard\n         Some(move z) => { assert !z.recv(); },\n-        None => die!()\n+        None => fail!()\n     }\n }"}, {"sha": "e4e8cba4e9ce181380d008684b7803d267c8fa86", "filename": "src/test/compile-fail/bind-by-move-no-lvalues-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -22,6 +22,6 @@ fn main() {\n     let x = Some(X { x: () });\n     match x {\n         Some(move _z) => { }, //~ ERROR cannot bind by-move when matching an lvalue\n-        None => die!()\n+        None => fail!()\n     }\n }"}, {"sha": "45f9415db9b75d8096efe629450072e2e034ba79", "filename": "src/test/compile-fail/bind-by-move-no-lvalues-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -24,6 +24,6 @@ fn main() {\n     let x = Y { y: Some(X { x: () }) };\n     match x.y {\n         Some(move _z) => { }, //~ ERROR cannot bind by-move when matching an lvalue\n-        None => die!()\n+        None => fail!()\n     }\n }"}, {"sha": "0d845983c6e0dbfad4055a82f8b6ce2465a4404a", "filename": "src/test/compile-fail/bind-by-move-no-sub-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -20,6 +20,6 @@ fn main() {\n     let x = Some(X { x: () });\n     match move x {\n         Some(move _y @ ref _z) => { }, //~ ERROR cannot bind by-move with sub-bindings\n-        None => die!()\n+        None => fail!()\n     }\n }"}, {"sha": "b3ef5f4d481c6d2771b8fd29cb1aa81762cc8a34", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -23,7 +23,7 @@ fn main() {\n                 x = X(Left((0,0))); //~ ERROR assigning to captured outer mutable variable\n                 (*f)()\n             },\n-            _ => die!()\n+            _ => fail!()\n         }\n     }\n }"}, {"sha": "a2ba5ad48916750fb95f8a5640ad9d7cfac42f1e", "filename": "src/test/compile-fail/borrowck-loan-local-as-both-mut-and-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -16,7 +16,7 @@ use core::either::{Either, Left, Right};\n                 *x = Right(1.0);\n                 *z\n             }\n-            _ => die!()\n+            _ => fail!()\n         }\n     }\n "}, {"sha": "37ee747069ccf98c1bfa24e2d07671adcaac8525", "filename": "src/test/compile-fail/borrowck-ref-into-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -14,7 +14,7 @@ fn main() {\n         Some(ref m) => {\n             msg = m;\n         },  \n-        None => { die!() }\n+        None => { fail!() }\n     }   \n     io::println(*msg);\n }"}, {"sha": "deebff5f43a3c57443313b07cd22ea1b1636c025", "filename": "src/test/compile-fail/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -2,7 +2,7 @@ fn a() -> &[int] {\n     let vec = [1, 2, 3, 4];\n     let tail = match vec { //~ ERROR illegal borrow\n         [_a, ..tail] => tail,\n-        _ => die!(~\"foo\")\n+        _ => fail!(~\"foo\")\n     };\n     move tail\n }"}, {"sha": "05ff85d612c82d011379ed02d0e8bebbcb855b0d", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -4,7 +4,7 @@ fn a() {\n         [~ref _a] => {\n             vec[0] = ~4; //~ ERROR prohibited due to outstanding loan\n         }\n-        _ => die!(~\"foo\")\n+        _ => fail!(~\"foo\")\n     }\n }\n "}, {"sha": "e1ed0f0daa1e8119324d26f03c4020c11c8cb6ca", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -2,7 +2,7 @@ fn a() -> &int {\n     let vec = [1, 2, 3, 4];\n     let tail = match vec { //~ ERROR illegal borrow\n         [_a, ..tail] => &tail[0],\n-        _ => die!(~\"foo\")\n+        _ => fail!(~\"foo\")\n     };\n     move tail\n }"}, {"sha": "66d4e601ec7b6449468812d14fc3e8e775fb084a", "filename": "src/test/compile-fail/closure-that-fails.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -2,6 +2,6 @@ fn foo(f: fn() -> !) {}\n \n fn main() {\n     // Type inference didn't use to be able to handle this:\n-    foo(|| die!());\n+    foo(|| fail!());\n     foo(|| 22); //~ ERROR mismatched types\n }"}, {"sha": "5f93faef5fc1d0fddbd0b06b4367ac60a599b37f", "filename": "src/test/compile-fail/deref-non-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fderef-non-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fderef-non-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderef-non-pointer.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,6 +11,6 @@\n // error-pattern:cannot be dereferenced\n fn main() {\n   match *1 {\n-      _ => { die!(); }\n+      _ => { fail!(); }\n   }\n }"}, {"sha": "29369f081d75da7d0a8542076fdb71917c8417fe", "filename": "src/test/compile-fail/die-not-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fdie-not-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fdie-not-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdie-not-unique.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:mismatched types\n \n fn main() {\n-    die!(\"test\");\n+    fail!(\"test\");\n }"}, {"sha": "38a883d44dbda589726e4cc0bf1451ff570b9142", "filename": "src/test/compile-fail/fail-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:mismatched types\n \n-fn main() { die!(5); }\n+fn main() { fail!(5); }"}, {"sha": "7def16770a790d9e39f7f22f7982c3a38bdee63c", "filename": "src/test/compile-fail/fail-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Ffail-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Ffail-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-simple.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,5 +12,5 @@\n \n // error-pattern:unexpected token\n fn main() {\n-  die!(@);\n+  fail!(@);\n }"}, {"sha": "664063b466b2fa507febaddd9009361327c5c6c3", "filename": "src/test/compile-fail/fail-type-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // error-pattern:expected `~str` but found `~[int]`\n-fn main() { die!(~[0i]); }\n+fn main() { fail!(~[0i]); }"}, {"sha": "abc6fe50fab8e00088fee6ac871b5210aa2aaa00", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -14,7 +14,7 @@ trait vec_monad<A> {\n \n impl<A> ~[A]: vec_monad<A> {\n     fn bind<B>(f: fn(A) -> ~[B]) {\n-        let mut r = die!();\n+        let mut r = fail!();\n         for self.each |elt| { r += f(*elt); }\n         //~^ WARNING unreachable expression\n         //~^^ ERROR the type of this value must be known"}, {"sha": "3ab8f765ad545bf0bde62959e8897ace592cdc3e", "filename": "src/test/compile-fail/issue-2150.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn fail_len(v: ~[const int]) -> uint {\n-    let mut i = die!();\n+    let mut i = fail!();\n     for v.each |x| { i += 1u; }\n     //~^ WARNING unreachable statement\n     //~^^ ERROR the type of this value must be known"}, {"sha": "a9f0ddbe74316b731f1ab42c7013e8b2f0e8e03f", "filename": "src/test/compile-fail/issue-2151.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    for vec::each(die!()) |i| {\n+    for vec::each(fail!()) |i| {\n         log (debug, i * 2);\n         //~^ ERROR the type of this value must be known\n    };"}, {"sha": "9ff9676b675fb2226f7166dbfdf8dfbec33895e4", "filename": "src/test/compile-fail/issue-2330.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -16,7 +16,7 @@ trait channel<T> {\n \n // `chan` is not a trait, it's an enum\n impl int: chan { //~ ERROR can only implement trait types\n-    fn send(v: int) { die!() }\n+    fn send(v: int) { fail!() }\n }\n \n fn main() {"}, {"sha": "409e1c1f040204cc149ad836586479037939a97f", "filename": "src/test/compile-fail/issue-2354.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -16,8 +16,8 @@\n  */\n fn foo() { //~ ERROR this open brace is not closed\n   match Some(x) {\n-      Some(y) { die!(); }\n-      None    { die!(); }\n+      Some(y) { fail!(); }\n+      None    { fail!(); }\n }\n \n fn bar() {"}, {"sha": "4bcdf9b299f4d69c59652ba7602a7903f67615a6", "filename": "src/test/compile-fail/issue-2611-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -24,7 +24,7 @@ struct E {\n }\n \n impl E: A {\n-  fn b<F:Copy, G>(_x: F) -> F { die!() } //~ ERROR in method `b`, type parameter 0 has 1 bound, but\n+  fn b<F:Copy, G>(_x: F) -> F { fail!() } //~ ERROR in method `b`, type parameter 0 has 1 bound, but\n }\n \n fn main() {}"}, {"sha": "a20a182d85ec32ce486b2fa23c9815fdc4b7fdf7", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -21,7 +21,7 @@ struct E {\n }\n \n impl E: A {\n-  fn b<F:Copy Const, G>(_x: F) -> F { die!() } //~ ERROR in method `b`, type parameter 0 has 2 bounds, but\n+  fn b<F:Copy Const, G>(_x: F) -> F { fail!() } //~ ERROR in method `b`, type parameter 0 has 2 bounds, but\n }\n \n fn main() {}"}, {"sha": "f55feb80c32c640d2845108be4532a05b1042501", "filename": "src/test/compile-fail/issue-2611-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -22,7 +22,7 @@ struct E {\n \n impl E: A {\n   // n.b. The error message is awful -- see #3404\n-  fn b<F:Copy, G>(_x: G) -> G { die!() } //~ ERROR method `b` has an incompatible type\n+  fn b<F:Copy, G>(_x: G) -> G { fail!() } //~ ERROR method `b` has an incompatible type\n }\n \n fn main() {}"}, {"sha": "8c28fcdc7fcd7df6d6777d743968995e0e6cc9b7", "filename": "src/test/compile-fail/issue-2817.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2817.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-2817.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2817.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn uuid() -> uint { die!(); }\n+fn uuid() -> uint { fail!(); }\n \n-fn from_str(s: ~str) -> uint { die!(); }\n-fn to_str(u: uint) -> ~str { die!(); }\n-fn uuid_random() -> uint { die!(); }\n+fn from_str(s: ~str) -> uint { fail!(); }\n+fn to_str(u: uint) -> ~str { fail!(); }\n+fn uuid_random() -> uint { fail!(); }\n \n fn main() {\n     do uint::range(0, 100000) |_i| { //~ ERROR Do-block body must return bool, but"}, {"sha": "fa9c4eb52170cfc47e1f2998e5941e8783151c13", "filename": "src/test/compile-fail/issue-3021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -26,7 +26,7 @@ fn siphash(k0 : u64) -> siphash {\n            //~^ ERROR unresolved name: k0\n         }\n     }\n-    die!();\n+    fail!();\n }\n \n fn main() {}"}, {"sha": "40d65938795ff3e1f7f77ea9bca721a719c70d99", "filename": "src/test/compile-fail/issue-3601.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -37,6 +37,6 @@ fn main() {\n         ~Element(ed) => match ed.kind {\n             ~HTMLImageElement(d) if d.image.is_some() => { true }\n         },\n-        _ => die!(~\"WAT\") //~ ERROR wat\n+        _ => fail!(~\"WAT\") //~ ERROR wat\n     };\n }"}, {"sha": "364701de2d1091fb69275c9b8737c1126d7299b4", "filename": "src/test/compile-fail/issue-3668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -16,7 +16,7 @@ trait PTrait {\n impl P: PTrait {\n    fn getChildOption() -> Option<@P> {\n        const childVal: @P = self.child.get(); //~ ERROR attempt to use a non-constant value in a constant\n-       die!();\n+       fail!();\n    }\n }\n "}, {"sha": "253563c12195ce6ca11e3f0b76dee7186c3484c7", "filename": "src/test/compile-fail/issue-897-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn g() -> ! { die!(); }\n+fn g() -> ! { fail!(); }\n fn f() -> ! {\n     return 42i; //~ ERROR expected `!` but found `int`\n     g(); //~ WARNING unreachable statement"}, {"sha": "503574fce877356ab59ab10c8e45b3a208ae7a2a", "filename": "src/test/compile-fail/issue-897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-897.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -10,6 +10,6 @@\n \n fn f() -> ! {\n     return 42i; //~ ERROR expected `!` but found `int`\n-    die!(); //~ WARNING unreachable statement\n+    fail!(); //~ WARNING unreachable statement\n }\n fn main() { }"}, {"sha": "f852fb1d38e42d543070f294d2a525fedecc0e79", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n fn send<T: Owned>(ch: _chan<T>, -data: T) {\n     log(debug, ch);\n     log(debug, data);\n-    die!();\n+    fail!();\n }\n \n enum _chan<T> = int;\n@@ -23,4 +23,4 @@ fn test00_start(ch: _chan<~int>, message: ~int, _count: ~int) {\n     log(debug, message); //~ ERROR use of moved value: `message`\n }\n \n-fn main() { die!(); }\n+fn main() { fail!(); }"}, {"sha": "7356c227360c807d19035485acab1374b0786c23", "filename": "src/test/compile-fail/moves-based-on-type-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -2,7 +2,7 @@\n // they occur as part of various kinds of expressions.\n \n struct Foo<A> { f: A }\n-fn guard(_s: ~str) -> bool {die!()}\n+fn guard(_s: ~str) -> bool {fail!()}\n fn touch<A>(_a: &A) {}\n \n fn f10() {"}, {"sha": "4d1db362376400169347f1412fead039c3e97c94", "filename": "src/test/compile-fail/non-exhaustive-match-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -16,8 +16,8 @@ enum u { c, d }\n fn main() {\n   let x = a(c);\n   match x {\n-      a(d) => { die!(~\"hello\"); }\n-      b => { die!(~\"goodbye\"); }\n+      a(d) => { fail!(~\"hello\"); }\n+      b => { fail!(~\"goodbye\"); }\n     }\n }\n "}, {"sha": "9f21d5a647ae15aea941b407135873f0819dda31", "filename": "src/test/compile-fail/noncopyable-match-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fnoncopyable-match-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fnoncopyable-match-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-match-pattern.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -14,6 +14,6 @@ fn main() {\n         Some(copy z) => { //~ ERROR copying a value of non-copyable type\n             do z.with |b| { assert !*b; }\n         }\n-        None => die!()\n+        None => fail!()\n     }\n }"}, {"sha": "57eca3666ef14ef3dc363b4e1f8c32f719f26b58", "filename": "src/test/compile-fail/not-enough-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -13,7 +13,7 @@\n // unrelated errors.\n \n fn foo(a: int, b: int, c: int, d:int) {\n-  die!();\n+  fail!();\n }\n \n fn main() {"}, {"sha": "29eb1ec8d0a3fdec6428e06177d825e0b855aff1", "filename": "src/test/compile-fail/pattern-tyvar-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -17,6 +17,6 @@ use option::Some;\n \n enum bar { t1((), Option<~[int]>), t2, }\n \n-fn foo(t: bar) -> int { match t { t1(_, Some(x)) => { return x * 3; } _ => { die!(); } } }\n+fn foo(t: bar) -> int { match t { t1(_, Some(x)) => { return x * 3; } _ => { fail!(); } } }\n \n fn main() { }"}, {"sha": "bb4e97f9101b995a7af4e34c4d06eb71c26d1bc5", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -21,7 +21,7 @@ fn foo(t: bar) {\n       t1(_, Some::<int>(x)) => {\n         log(debug, x);\n       }\n-      _ => { die!(); }\n+      _ => { fail!(); }\n     }\n }\n "}, {"sha": "a9ba7082628b5f402c74ec9bc273af28b07c12cd", "filename": "src/test/compile-fail/qquote-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -63,6 +63,6 @@ fn main() {\n }\n \n fn check_pp<T>(expr: T, f: fn(pprust::ps, T), expect: str) {\n-    die!();\n+    fail!();\n }\n "}, {"sha": "fe382badb5cdf5e73a5074031f88fad7553eb0b8", "filename": "src/test/compile-fail/qquote-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -58,6 +58,6 @@ fn main() {\n }\n \n fn check_pp<T>(expr: T, f: fn(pprust::ps, T), expect: str) {\n-    die!();\n+    fail!();\n }\n "}, {"sha": "6deef8cee9e46631ba228d553f1d5b44a6dbe039", "filename": "src/test/compile-fail/regions-fn-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fregions-fn-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fregions-fn-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-bound.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn of<T>() -> @fn(T) { die!(); }\n-fn subtype<T>(x: @fn(T)) { die!(); }\n+fn of<T>() -> @fn(T) { fail!(); }\n+fn subtype<T>(x: @fn(T)) { fail!(); }\n \n fn test_fn<T>(_x: &x/T, _y: &y/T, _z: &z/T) {\n     // Here, x, y, and z are free.  Other letters"}, {"sha": "526a5de7fefe2e1171e3468580a4bbaad2bd8a03", "filename": "src/test/compile-fail/regions-fn-subtyping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn of<T>() -> @fn(T) { die!(); }\n-fn subtype<T>(x: @fn(T)) { die!(); }\n+fn of<T>() -> @fn(T) { fail!(); }\n+fn subtype<T>(x: @fn(T)) { fail!(); }\n \n fn test_fn<T>(_x: &x/T, _y: &y/T, _z: &z/T) {\n     // Here, x, y, and z are free.  Other letters"}, {"sha": "a05d6a324de7ba09e1d801a2e7d6e6cb5019e054", "filename": "src/test/compile-fail/tag-that-dare-not-speak-its-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -16,7 +16,7 @@\n extern mod core;\n \n fn last<T>(v: ~[const &T]) -> core::Option<T> {\n-    die!();\n+    fail!();\n }\n \n fn main() {"}, {"sha": "4550d95aa5d022b5e252bee19e85100af8e01680", "filename": "src/test/compile-fail/tag-type-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Ftag-type-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Ftag-type-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-type-args.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -14,4 +14,4 @@ enum quux<T> { bar }\n \n fn foo(c: quux) { assert (false); }\n \n-fn main() { die!(); }\n+fn main() { fail!(); }"}, {"sha": "bb6d754805b54c5d23425714d6797995e30f4881", "filename": "src/test/compile-fail/warn-foreign-int-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -16,5 +16,5 @@ extern mod xx {\n \n fn main() {\n   // let it fail to verify warning message\n-  die!()\n+  fail!()\n }"}, {"sha": "636fac82b6b00ae8a3c31010efd932cbe1196b35", "filename": "src/test/pretty/issue-929.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fpretty%2Fissue-929.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Fpretty%2Fissue-929.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-929.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f() { if (1 == die!()) { } else { } }\n+fn f() { if (1 == fail!()) { } else { } }\n \n fn main() { }"}, {"sha": "2ba78e21374eaf77a5f390687a8edb898c716497", "filename": "src/test/run-fail/alt-bot-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Falt-bot-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Falt-bot-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Falt-bot-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -14,6 +14,6 @@ fn foo(s: ~str) { }\n \n fn main() {\n     let i =\n-        match Some::<int>(3) { None::<int> => { die!() } Some::<int>(_) => { die!() } };\n+        match Some::<int>(3) { None::<int> => { fail!() } Some::<int>(_) => { fail!() } };\n     foo(i);\n }"}, {"sha": "afe2735e67d21941b470bf3f2d376bb6f8bbed37", "filename": "src/test/run-fail/alt-disc-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Falt-disc-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Falt-disc-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Falt-disc-bot.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn f() -> ! { die!(~\"quux\") }\n+fn f() -> ! { fail!(~\"quux\") }\n fn g() -> int { match f() { true => { 1 } false => { 0 } } }\n fn main() { g(); }"}, {"sha": "4730f1bc5602d42b235dc220c1a096fe6c1a3cb4", "filename": "src/test/run-fail/alt-wildcards.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Falt-wildcards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Falt-wildcards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Falt-wildcards.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,9 +11,9 @@\n // error-pattern:squirrelcupcake\n fn cmp() -> int {\n     match (option::Some('a'), option::None::<char>) {\n-        (option::Some(_), _) => { die!(~\"squirrelcupcake\"); }\n-        (_, option::Some(_)) => { die!(); }\n-        _                    => { die!(~\"wat\"); }\n+        (option::Some(_), _) => { fail!(~\"squirrelcupcake\"); }\n+        (_, option::Some(_)) => { fail!(); }\n+        _                    => { fail!(~\"wat\"); }\n     }\n }\n "}, {"sha": "5cdddb0cda89453a388a5d9873f58aed80041e4a", "filename": "src/test/run-fail/args-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fargs-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // error-pattern:meep\n-fn f(a: int, b: int, c: @int) { die!(~\"moop\"); }\n+fn f(a: int, b: int, c: @int) { fail!(~\"moop\"); }\n \n-fn main() { f(1, die!(~\"meep\"), @42); }\n+fn main() { f(1, fail!(~\"meep\"), @42); }"}, {"sha": "2f1eb65a43ac63d98a9ba236c6e55d07ed576137", "filename": "src/test/run-fail/binop-fail-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: ~str) -> ! { log(error, s); die!(~\"quux\"); }\n+fn my_err(s: ~str) -> ! { log(error, s); fail!(~\"quux\"); }\n fn main() { 3u == my_err(~\"bye\"); }"}, {"sha": "2f1eb65a43ac63d98a9ba236c6e55d07ed576137", "filename": "src/test/run-fail/binop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fbinop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fbinop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: ~str) -> ! { log(error, s); die!(~\"quux\"); }\n+fn my_err(s: ~str) -> ! { log(error, s); fail!(~\"quux\"); }\n fn main() { 3u == my_err(~\"bye\"); }"}, {"sha": "85e0f3dd398ee61ea833dc13a9170703912f486c", "filename": "src/test/run-fail/bug-811.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fbug-811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fbug-811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-811.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -16,6 +16,6 @@ type port_id = int;\n \n enum chan_t<T> = {task: task_id, port: port_id};\n \n-fn send<T: Owned>(ch: chan_t<T>, data: T) { die!(); }\n+fn send<T: Owned>(ch: chan_t<T>, data: T) { fail!(); }\n \n-fn main() { die!(~\"quux\"); }\n+fn main() { fail!(~\"quux\"); }"}, {"sha": "26d5ea4349de676dbe94bb62f638a91d1b0cf586", "filename": "src/test/run-fail/die-macro-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:test\n \n fn main() {\n-    let i: int = die!(~\"test\");\n+    let i: int = fail!(~\"test\");\n }\n\\ No newline at end of file"}, {"sha": "74de57a8a25a4b3b1656c93ea703b2c2604ad4f1", "filename": "src/test/run-fail/die-macro-pure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fdie-macro-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fdie-macro-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdie-macro-pure.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:test\n \n pure fn f() {\n-    die!(~\"test\");\n+    fail!(~\"test\");\n }\n \n fn main() {"}, {"sha": "6eb56a5be4e59e3dc6835e230e3d502c7fe03245", "filename": "src/test/run-fail/die-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fdie-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fdie-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdie-macro.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:test\n \n fn main() {\n-    die!(~\"test\");\n+    fail!(~\"test\");\n }\n\\ No newline at end of file"}, {"sha": "ce9678aa5eb6bd0c577cc54eda53f8f80466d8ab", "filename": "src/test/run-fail/doublefail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fdoublefail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fdoublefail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdoublefail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -10,6 +10,6 @@\n \n //error-pattern:One\n fn main() {\n-    die!(~\"One\");\n-    die!(~\"Two\");\n+    fail!(~\"One\");\n+    fail!(~\"Two\");\n }"}, {"sha": "17fb14881a542e84658782f5e1931ba54423788f", "filename": "src/test/run-fail/explicit-fail-msg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern:wooooo\n fn main() {\n-    let mut a = 1; if 1 == 1 { a = 2; } die!(~\"woooo\" + ~\"o\");\n+    let mut a = 1; if 1 == 1 { a = 2; } fail!(~\"woooo\" + ~\"o\");\n }"}, {"sha": "8c204b66e3657f2010776d4c370f977438567a24", "filename": "src/test/run-fail/explicit-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fexplicit-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fexplicit-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,4 +12,4 @@\n \n \n // error-pattern:explicit\n-fn main() { die!(); }\n+fn main() { fail!(); }"}, {"sha": "6476e57a35b842b3ca89cd4192f54c3afacaa74d", "filename": "src/test/run-fail/expr-alt-fail-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fexpr-alt-fail-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fexpr-alt-fail-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-alt-fail-fn.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,7 +12,7 @@\n \n \n // error-pattern:explicit failure\n-fn f() -> ! { die!() }\n+fn f() -> ! { fail!() }\n \n fn g() -> int { let x = match true { true => { f() } false => { 10 } }; return x; }\n "}, {"sha": "e2bf6052a1038e876d962513187c9c953ac823e0", "filename": "src/test/run-fail/expr-alt-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fexpr-alt-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fexpr-alt-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-alt-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,4 +12,4 @@\n \n \n // error-pattern:explicit failure\n-fn main() { let x = match true { false => { 0 } true => { die!() } }; }\n+fn main() { let x = match true { false => { 0 } true => { fail!() } }; }"}, {"sha": "e645ea34df5647b5c204396ae33327844729db05", "filename": "src/test/run-fail/expr-fn-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fexpr-fn-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fexpr-fn-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-fn-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,6 +12,6 @@\n \n \n // error-pattern:explicit failure\n-fn f() -> ! { die!() }\n+fn f() -> ! { fail!() }\n \n fn main() { f(); }"}, {"sha": "99f798147f28f3e615fc8c5d30874ca6bce63739", "filename": "src/test/run-fail/expr-if-fail-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fexpr-if-fail-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fexpr-if-fail-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-if-fail-fn.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,7 +12,7 @@\n \n \n // error-pattern:explicit failure\n-fn f() -> ! { die!() }\n+fn f() -> ! { fail!() }\n \n fn g() -> int { let x = if true { f() } else { 10 }; return x; }\n "}, {"sha": "c1663866519b77fe15b3ca6493b86fd6cfd8bf90", "filename": "src/test/run-fail/expr-if-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fexpr-if-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fexpr-if-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-if-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,4 +12,4 @@\n \n \n // error-pattern:explicit failure\n-fn main() { let x = if false { 0 } else if true { die!() } else { 10 }; }\n+fn main() { let x = if false { 0 } else if true { fail!() } else { 10 }; }"}, {"sha": "7227be11e8064fd11ea4c2cab69bf819d75bc309", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -37,7 +37,7 @@ fn main() {\n         do task::spawn {\n             let result = count(5u);\n             debug!(\"result = %?\", result);\n-            die!();\n+            fail!();\n         };\n     }\n }"}, {"sha": "fc365613cf16ca9ef4d6ebfcb340e180812868f1", "filename": "src/test/run-fail/fail-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-arg.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,4 +11,4 @@\n // error-pattern:woe\n fn f(a: int) { log(debug, a); }\n \n-fn main() { f(die!(~\"woe\")); }\n+fn main() { f(fail!(~\"woe\")); }"}, {"sha": "50031261bfca9b05e5f8d2779cc685c41f05f700", "filename": "src/test/run-fail/fail-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Ffail-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Ffail-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-main.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:moop\n extern mod std;\n-fn main() { die!(~\"moop\"); }\n+fn main() { fail!(~\"moop\"); }"}, {"sha": "5ba907b0eb63cdac9806efd8a75362fda03278a3", "filename": "src/test/run-fail/fail-parens.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Ffail-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Ffail-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-parens.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -13,8 +13,8 @@\n // error-pattern:oops\n \n fn bigfail() {\n-    while (die!(~\"oops\")) { if (die!()) {\n-        match (die!()) { () => {\n+    while (fail!(~\"oops\")) { if (fail!()) {\n+        match (fail!()) { () => {\n         }\n                      }\n     }};"}, {"sha": "10d890383814392347a7abb0b0397768dba96f21", "filename": "src/test/run-fail/fmt-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Ffmt-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Ffmt-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffmt-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,4 +11,4 @@\n // error-pattern:meh\n extern mod std;\n \n-fn main() { let str_var: ~str = ~\"meh\"; die!(fmt!(\"%s\", str_var)); }\n+fn main() { let str_var: ~str = ~\"meh\"; fail!(fmt!(\"%s\", str_var)); }"}, {"sha": "fa62a9c5c34c9c039e8dbba92ea16984eac17cd9", "filename": "src/test/run-fail/for-each-loop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:moop\n extern mod std;\n-fn main() { for uint::range(0u, 10u) |_i| { die!(~\"moop\"); } }\n+fn main() { for uint::range(0u, 10u) |_i| { fail!(~\"moop\"); } }"}, {"sha": "5f9da798ffab2ad48b063b3c1f9159d4d4be0573", "filename": "src/test/run-fail/if-check-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-check-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -19,7 +19,7 @@ fn foo(x: uint) {\n     if even(x) {\n         log(debug, x);\n     } else {\n-        die!(~\"Number is odd\");\n+        fail!(~\"Number is odd\");\n     }\n }\n "}, {"sha": "d558ff1e3b84b54e46fdcee864271f343df78aa6", "filename": "src/test/run-fail/if-cond-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: ~str) -> ! { log(error, s); die!(~\"quux\"); }\n+fn my_err(s: ~str) -> ! { log(error, s); fail!(~\"quux\"); }\n fn main() { if my_err(~\"bye\") { } }"}, {"sha": "7f8cc7459de44acf2aa79ef935fbbb67da551f5c", "filename": "src/test/run-fail/issue-1459.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fissue-1459.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fissue-1459.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-1459.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern:roflcopter\n fn main() {\n-    log (die!(~\"roflcopter\"), 2);\n+    log (fail!(~\"roflcopter\"), 2);\n }"}, {"sha": "a518816533e48d160a3b86ba95aabdd787b79453", "filename": "src/test/run-fail/issue-2156.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2156.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -15,6 +15,6 @@ use io::ReaderUtil;\n \n fn main() {\n     do io::with_str_reader(~\"\") |rdr| {\n-        match rdr.read_char() { '=' => { } _ => { die!() } }\n+        match rdr.read_char() { '=' => { } _ => { fail!() } }\n     }\n }"}, {"sha": "5ce89bc1814960d5cdfa25f5e9942fa6427a9593", "filename": "src/test/run-fail/issue-2272.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fissue-2272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fissue-2272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2272.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -22,5 +22,5 @@ fn main() {\n         },\n         a: ~0\n     };\n-    die!();\n+    fail!();\n }"}, {"sha": "04a0f47fc06fdb66f5df969c49bb9348ff2495ff", "filename": "src/test/run-fail/issue-2444.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2444.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -15,7 +15,7 @@ use std::arc;\n \n enum e<T> { e(arc::ARC<T>) }\n \n-fn foo() -> e<int> {die!();}\n+fn foo() -> e<int> {fail!();}\n \n fn main() {\n    let f = foo();"}, {"sha": "3ae6eccd5e214ef03f423d319929e7782f419e0c", "filename": "src/test/run-fail/issue-3029.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-3029.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:so long\n fn main() {\n     let x = ~[], y = ~[3];\n-    die!(~\"so long\");\n+    fail!(~\"so long\");\n     x += y;\n     ~\"good\" + ~\"bye\";\n }"}, {"sha": "2f9a1e8a058750692023f729b0bb876e78cd2262", "filename": "src/test/run-fail/issue-948.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fissue-948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fissue-948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-948.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -14,5 +14,5 @@ struct Point { x: int, y: int }\n \n fn main() {\n     let origin = Point {x: 0, y: 0};\n-    let f: Point = Point {x: (die!(~\"beep boop\")),.. origin};\n+    let f: Point = Point {x: (fail!(~\"beep boop\")),.. origin};\n }"}, {"sha": "1402020c357ec71088102264d8f750404da63664", "filename": "src/test/run-fail/linked-failure2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure2.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,7 +12,7 @@\n \n // error-pattern:fail\n \n-fn child() { die!(); }\n+fn child() { fail!(); }\n \n fn main() {\n     let (p, _c) = pipes::stream::<()>();"}, {"sha": "cb03a71aabcdd89c688dda978efd00576cd93d3c", "filename": "src/test/run-fail/linked-failure3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure3.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,7 +12,7 @@\n \n // error-pattern:fail\n \n-fn grandchild() { die!(~\"grandchild dies\"); }\n+fn grandchild() { fail!(~\"grandchild dies\"); }\n \n fn child() {\n     let (p, _c) = pipes::stream::<int>();"}, {"sha": "f4faac0b2aba6d49d2b15eeb3acfa64f7aef15fe", "filename": "src/test/run-fail/morestack1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fmorestack1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fmorestack1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack1.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -13,7 +13,7 @@ fn getbig(i: int) {\n     if i != 0 {\n         getbig(i - 1);\n     } else {\n-        die!();\n+        fail!();\n     }\n }\n "}, {"sha": "d5f438385986d0464898d2585c4eae9649aeea5d", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -27,7 +27,7 @@ fn getbig_call_c_and_fail(i: int) {\n     } else {\n         unsafe {\n             rustrt::rust_get_argc();\n-            die!();\n+            fail!();\n         }\n     }\n }"}, {"sha": "e97e56ea0f9e2c5e4bff41b5609171b0f30380c8", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -19,7 +19,7 @@ fn getbig_and_fail(&&i: int) {\n     if i != 0 {\n         getbig_and_fail(i - 1);\n     } else {\n-        die!();\n+        fail!();\n     }\n }\n "}, {"sha": "30e9147cff7e881523b7d55e1a84b7179b8b1d70", "filename": "src/test/run-fail/morestack4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack4.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -19,7 +19,7 @@ fn getbig_and_fail(&&i: int) {\n     if i != 0 {\n         getbig_and_fail(i - 1);\n     } else {\n-        die!();\n+        fail!();\n     }\n }\n "}, {"sha": "f432abe85ab25feababc316c28341767678a63a2", "filename": "src/test/run-fail/rhs-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Frhs-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Frhs-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frhs-type.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -14,4 +14,4 @@\n \n struct T { t: ~str }\n \n-fn main() { let pth = die!(~\"bye\"); let rs: T = T {t: pth}; }\n+fn main() { let pth = fail!(~\"bye\"); let rs: T = T {t: pth}; }"}, {"sha": "07cf24e2feb36885eac9b1a7e6d7bd0a7ddfc70f", "filename": "src/test/run-fail/rt-log-trunc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Frt-log-trunc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Frt-log-trunc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-log-trunc.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,7 +12,7 @@\n // error-pattern:[...]\n \n fn main() {\n-    die!(~\"\\\n+    fail!(~\"\\\n           aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n           aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n           aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\"}, {"sha": "ed08022f44908f944f85ba6b3bbe126f087bfdfd", "filename": "src/test/run-fail/rt-set-exit-status-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     // normally. In this case we're going to fail, so instead of of\n     // returning 50 the process will return the typical rt failure code.\n     os::set_exit_status(50);\n-    die!();\n+    fail!();\n }"}, {"sha": "e936270d4b865f54e67a8944b8bfe77d99f07575", "filename": "src/test/run-fail/rt-set-exit-status-fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -34,5 +34,5 @@ fn main() {\n     do task::spawn {\n       let i = r(5);\n     };\n-    die!();\n+    fail!();\n }"}, {"sha": "fd898e31347ddfbd716e960c3320e9505fe94bc9", "filename": "src/test/run-fail/run-unexported-tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -17,5 +17,5 @@ mod m {\n     pub fn exported() { }\n \n     #[test]\n-    fn unexported() { die!(~\"runned an unexported test\"); }\n+    fn unexported() { fail!(~\"runned an unexported test\"); }\n }"}, {"sha": "8431f7bb74d98f96da471571422ce0425270ea3a", "filename": "src/test/run-fail/spawnfail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fspawnfail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -15,7 +15,7 @@ extern mod std;\n // We don't want to see any invalid reads\n fn main() {\n     fn f() {\n-        die!();\n+        fail!();\n     }\n     task::spawn(|| f() );\n }"}, {"sha": "bd866b9f9e7c77eab48efba7e94a9143b83a23b5", "filename": "src/test/run-fail/task-comm-recv-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,7 +12,7 @@\n \n fn goodfail() {\n     task::yield();\n-    die!(~\"goodfail\");\n+    fail!(~\"goodfail\");\n }\n \n fn main() {\n@@ -21,5 +21,5 @@ fn main() {\n     // We shouldn't be able to get past this recv since there's no\n     // message available\n     let i: int = po.recv();\n-    die!(~\"badfail\");\n+    fail!(~\"badfail\");\n }"}, {"sha": "86fde5b7f9781de0aff8e8711e5ed9b082278f4f", "filename": "src/test/run-fail/unique-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funique-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funique-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funique-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // error-pattern: fail\n-fn main() { ~die!(); }\n+fn main() { ~fail!(); }"}, {"sha": "1b28dd0e8ef2d1ceecdae3e2a5d52313baeefc64", "filename": "src/test/run-fail/unwind-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-alt.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -15,7 +15,7 @@ fn test_box() {\n }\n fn test_str() {\n   let res = match false { true => { ~\"happy\" },\n-     _ => die!(~\"non-exhaustive match failure\") };\n+     _ => fail!(~\"non-exhaustive match failure\") };\n   assert res == ~\"happy\";\n }\n fn main() {"}, {"sha": "6128e96d7bc408c564c0ccdfec14c7278ed5dbf3", "filename": "src/test/run-fail/unwind-box-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn failfn() {\n-    die!();\n+    fail!();\n }\n \n fn main() {"}, {"sha": "e1d959694e2d1f909dc8028e77c157d3ad060cf7", "filename": "src/test/run-fail/unwind-box-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn failfn() {\n-    die!();\n+    fail!();\n }\n \n fn main() {"}, {"sha": "920ddbb5bf24c896440304ec00a20f7119e5a13b", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn failfn() {\n-    die!();\n+    fail!();\n }\n \n struct r {"}, {"sha": "aaf714fff9c4c328df4c32de32c5f1cb54378ef5", "filename": "src/test/run-fail/unwind-box-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-str.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn failfn() {\n-    die!();\n+    fail!();\n }\n \n fn main() {"}, {"sha": "1602964b481e707cef6836c85bfe40a33f5e3f20", "filename": "src/test/run-fail/unwind-box-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn failfn() {\n-    die!();\n+    fail!();\n }\n \n trait i {"}, {"sha": "22a5c72b68cf2abc4f79afa8802a7b415656d7f4", "filename": "src/test/run-fail/unwind-box-unique-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn failfn() {\n-    die!();\n+    fail!();\n }\n \n fn main() {"}, {"sha": "3ae4000c2b1bd62534b4767b7d8aa3d40d7a2b87", "filename": "src/test/run-fail/unwind-box-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn failfn() {\n-    die!();\n+    fail!();\n }\n \n fn main() {"}, {"sha": "d8afdd5a6614de489081d2e02dd75e562a9c2086", "filename": "src/test/run-fail/unwind-box-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn failfn() {\n-    die!();\n+    fail!();\n }\n \n fn main() {"}, {"sha": "21308945253b543f9b90aeeca3ff04b342c79ad2", "filename": "src/test/run-fail/unwind-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn failfn() {\n-    die!();\n+    fail!();\n }\n \n fn main() {"}, {"sha": "34257b15b7fd8fcb669a243f03dd2d291ecf6756", "filename": "src/test/run-fail/unwind-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-closure.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn f(a: @int) {\n-    die!();\n+    fail!();\n }\n \n fn main() {"}, {"sha": "4d4bc0d53eba22dd79442871ab102bf1cd4b66c9", "filename": "src/test/run-fail/unwind-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,5 +12,5 @@\n \n fn main() {\n     @0;\n-    die!();\n+    fail!();\n }"}, {"sha": "e7f8a866543105a4d2fb67760a5be1c2f764f594", "filename": "src/test/run-fail/unwind-initializer-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-fn f() -> @int { die!(); }\n+fn f() -> @int { fail!(); }\n \n fn main() {\n     let a: @int = f();"}, {"sha": "0293e5ba07e594a9a93ee26fafcb46058f7b8844", "filename": "src/test/run-fail/unwind-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,6 +12,6 @@\n \n fn main() {\n     let a: @int = {\n-        die!();\n+        fail!();\n     };\n }"}, {"sha": "142813bcc30b71b61d523a39b7e6463c77613049", "filename": "src/test/run-fail/unwind-interleaved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,7 +12,7 @@\n \n fn a() { }\n \n-fn b() { die!(); }\n+fn b() { fail!(); }\n \n fn main() {\n     let x = ~[0];"}, {"sha": "135c5eecc2e9b267c8b35ba9c3c55db56da61250", "filename": "src/test/run-fail/unwind-iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn x(it: fn(int)) {\n-    die!();\n+    fail!();\n     it(0);\n }\n "}, {"sha": "f17f9fb9154bb097ff357e2ee460c277c5eacbe9", "filename": "src/test/run-fail/unwind-iter2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter2.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -16,5 +16,5 @@ fn x(it: fn(int)) {\n }\n \n fn main() {\n-    x(|_x| die!() );\n+    x(|_x| fail!() );\n }"}, {"sha": "1fff98c433846faf20abdc7e571c0b48ac61286e", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -21,7 +21,7 @@ fn main() {\n         let cheese = copy cheese;\n         let f = fn@() {\n             let chew = mush + cheese;\n-            die!(~\"so yummy\")\n+            fail!(~\"so yummy\")\n         };\n         f();\n     });"}, {"sha": "572d5a90751d1fc1f2eaac48dc2eb22576c4d6cb", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -22,7 +22,7 @@ fn main() {\n         arr += ~[@~\"key stuff\"];\n         map.insert(copy arr, arr + ~[@~\"value stuff\"]);\n         if arr.len() == 5 {\n-            die!();\n+            fail!();\n         }\n     }\n }"}, {"sha": "539896e83131988ae8edf654a9143b7bd2007150", "filename": "src/test/run-fail/unwind-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-move.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n fn f(-_a: @int) {\n-    die!();\n+    fail!();\n }\n \n fn main() {"}, {"sha": "ca9a761cfa1e1745278b5c03a665b8046382193a", "filename": "src/test/run-fail/unwind-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-nested.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     {\n         let b = @0;\n         {\n-            die!();\n+            fail!();\n         }\n     }\n }"}, {"sha": "d1e3b63698bc5f97efef028a42105cd12a2b6453", "filename": "src/test/run-fail/unwind-partial-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-fn f() -> ~[int] { die!(); }\n+fn f() -> ~[int] { fail!(); }\n \n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n // have been to do with memory allocation patterns."}, {"sha": "5976add8800a40706b8b5c433d6cfd2295abb6fc", "filename": "src/test/run-fail/unwind-partial-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-fn f() -> ~[int] { die!(); }\n+fn f() -> ~[int] { fail!(); }\n \n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n // have been to do with memory allocation patterns."}, {"sha": "d51c83a06d9c0b95bff0e4577466c7c7a50bf70a", "filename": "src/test/run-fail/unwind-partial-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-fn f() -> ~[int] { die!(); }\n+fn f() -> ~[int] { fail!(); }\n \n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n // have been to do with memory allocation patterns."}, {"sha": "378816476e4ddd26bb0a87c98b6fbe6f42c9e090", "filename": "src/test/run-fail/unwind-rec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-rec.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn build() -> ~[int] {\n-    die!();\n+    fail!();\n }\n \n struct Blk { node: ~[int] }"}, {"sha": "1abf6d53600b9e170e9d16926937eb352c4e9a50", "filename": "src/test/run-fail/unwind-rec2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-rec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-rec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-rec2.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -15,7 +15,7 @@ fn build1() -> ~[int] {\n }\n \n fn build2() -> ~[int] {\n-    die!();\n+    fail!();\n }\n \n struct Blk { node: ~[int], span: ~[int] }"}, {"sha": "8b9d1a66457149cb4af0fd5630333b5e861f13be", "filename": "src/test/run-fail/unwind-resource-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,7 +12,7 @@\n \n struct r {\n     i: int,\n-    drop { die!(~\"squirrel\") }\n+    drop { fail!(~\"squirrel\") }\n }\n \n fn r(i: int) -> r { r { i: i } }"}, {"sha": "9c2c1a24a5e666496729491f0508425ca1e91558", "filename": "src/test/run-fail/unwind-resource-fail2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -13,13 +13,13 @@\n \n struct r {\n     i: int,\n-    drop { die!(~\"wombat\") }\n+    drop { fail!(~\"wombat\") }\n }\n \n fn r(i: int) -> r { r { i: i } }\n \n fn main() {\n     @0;\n     let r = move r(0);\n-    die!();\n+    fail!();\n }"}, {"sha": "514c780da096908b46b454d7d530bc38447259d2", "filename": "src/test/run-fail/unwind-resource-fail3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -19,7 +19,7 @@ fn faily_box(i: @int) -> faily_box { faily_box { i: i } }\n \n impl faily_box : Drop {\n     fn finalize(&self) {\n-        die!(~\"quux\");\n+        fail!(~\"quux\");\n     }\n }\n "}, {"sha": "a8faa550c8fbe346cd2a93378cfeac16606a16af", "filename": "src/test/run-fail/unwind-stacked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-stacked.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -12,7 +12,7 @@\n \n fn f() {\n     let a = @0;\n-    die!();\n+    fail!();\n }\n \n fn g() {"}, {"sha": "b135b9f609b88d8d1c3adbc19193c5390bb69233", "filename": "src/test/run-fail/unwind-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn fold_local() -> @~[int]{\n-    die!();\n+    fail!();\n }\n \n fn main() {"}, {"sha": "5e299c52a2905a9697e8e08bddc435380221159c", "filename": "src/test/run-fail/unwind-tup2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup2.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -15,7 +15,7 @@ fn fold_local() -> @~[int]{\n }\n \n fn fold_remote() -> @~[int]{\n-    die!();\n+    fail!();\n }\n \n fn main() {"}, {"sha": "e45c5c94ed4b12c0b2b4a1d7a470b0ecf7a3cce8", "filename": "src/test/run-fail/unwind-uninitialized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn f() {\n-    die!();\n+    fail!();\n }\n \n fn main() {"}, {"sha": "53b2a55602c296162792008022a2bf3cc84448f7", "filename": "src/test/run-fail/unwind-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-unique.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn failfn() {\n-    die!();\n+    fail!();\n }\n \n fn main() {"}, {"sha": "73718b0d0b6d048411933f45d20905215072f3d6", "filename": "src/test/run-fail/while-body-fails.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn main() { let x: int = { while true { die!(~\"quux\"); } ; 8 } ; }\n+fn main() { let x: int = { while true { fail!(~\"quux\"); } ; 8 } ; }"}, {"sha": "22cbf215e9e66d4f6ee207eb9f7a44c5ad2dc3a1", "filename": "src/test/run-fail/while-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-fail.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern:giraffe\n fn main() {\n-    die!({ while true { die!(~\"giraffe\")}; ~\"clandestine\" });\n+    fail!({ while true { fail!(~\"giraffe\")}; ~\"clandestine\" });\n }"}, {"sha": "b50836beaa2e6af9927985d9ff3e9318d1a4bfd2", "filename": "src/test/run-fail/zip-different-lengths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -37,5 +37,5 @@ fn main() {\n \n     assert same_length(chars, ints);\n     let ps = zip(chars, ints);\n-    die!(~\"the impossible happened\");\n+    fail!(~\"the impossible happened\");\n }"}, {"sha": "ba897bd92c01757c7cadacc14cf665c1b154f43d", "filename": "src/test/run-pass/alt-bot-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Falt-bot-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Falt-bot-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-bot-2.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // n.b. This was only ever failing with optimization disabled.\n-fn a() -> int { match return 1 { 2 => 3, _ => die!() } }\n+fn a() -> int { match return 1 { 2 => 3, _ => fail!() } }\n pub fn main() { a(); }"}, {"sha": "d4887c4415e6335192159f480d10da432a245d8b", "filename": "src/test/run-pass/alt-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Falt-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Falt-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-bot.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,6 +11,6 @@\n \n pub fn main() {\n     let i: int =\n-        match Some::<int>(3) { None::<int> => { die!() } Some::<int>(_) => { 5 } };\n+        match Some::<int>(3) { None::<int> => { fail!() } Some::<int>(_) => { 5 } };\n     log(debug, i);\n }"}, {"sha": "647be966df4ada7dddec86daf4ab78a3fc6e4ce6", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -22,7 +22,7 @@ fn foo(s: @int) {\n         log(debug, y); // ref up then down\n \n       }\n-      _ => { debug!(\"?\"); die!(); }\n+      _ => { debug!(\"?\"); fail!(); }\n     }\n     log(debug, ::core::sys::refcount(s));\n     assert (::core::sys::refcount(s) == count + 1u);"}, {"sha": "22512a47fe0f071cfafede598a65c23b3f452516", "filename": "src/test/run-pass/alt-pattern-lit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -14,7 +14,7 @@ fn altlit(f: int) -> int {\n     match f {\n       10 => { debug!(\"case 10\"); return 20; }\n       11 => { debug!(\"case 11\"); return 22; }\n-      _  => die!(~\"the impossible happened\")\n+      _  => fail!(~\"the impossible happened\")\n     }\n }\n "}, {"sha": "b3634b498b1dd3be44c92b5af1c2870364924744", "filename": "src/test/run-pass/alt-range.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Falt-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Falt-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-range.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,31 +11,31 @@\n pub fn main() {\n     match 5u {\n       1u..5u => {}\n-      _ => die!(~\"should match range\"),\n+      _ => fail!(~\"should match range\"),\n     }\n     match 5u {\n-      6u..7u => die!(~\"shouldn't match range\"),\n+      6u..7u => fail!(~\"shouldn't match range\"),\n       _ => {}\n     }\n     match 5u {\n-      1u => die!(~\"should match non-first range\"),\n+      1u => fail!(~\"should match non-first range\"),\n       2u..6u => {}\n-      _ => die!(~\"math is broken\")\n+      _ => fail!(~\"math is broken\")\n     }\n     match 'c' {\n       'a'..'z' => {}\n-      _ => die!(~\"should suppport char ranges\")\n+      _ => fail!(~\"should suppport char ranges\")\n     }\n     match -3 {\n       -7..5 => {}\n-      _ => die!(~\"should match signed range\")\n+      _ => fail!(~\"should match signed range\")\n     }\n     match 3.0 {\n       1.0..5.0 => {}\n-      _ => die!(~\"should match float range\")\n+      _ => fail!(~\"should match float range\")\n     }\n     match -1.5 {\n       -3.6..3.6 => {}\n-      _ => die!(~\"should match negative float range\")\n+      _ => fail!(~\"should match negative float range\")\n     }\n }"}, {"sha": "a04d8d4618a276f7074656d720ea46fff43bcde2", "filename": "src/test/run-pass/alt-ref-binding-in-guard-3256.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Falt-ref-binding-in-guard-3256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Falt-ref-binding-in-guard-3256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-ref-binding-in-guard-3256.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -14,6 +14,6 @@ pub fn main() {\n         Some(ref z) if z.with(|b| *b) => {\n             do z.with |b| { assert *b; }\n         },\n-        _ => die!()\n+        _ => fail!()\n     }\n }"}, {"sha": "d98dc11801e2944d275a6f363bf479c62fb0984f", "filename": "src/test/run-pass/alt-str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Falt-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Falt-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-str.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,21 +11,21 @@\n // Issue #53\n \n pub fn main() {\n-    match ~\"test\" { ~\"not-test\" => die!(), ~\"test\" => (), _ => die!() }\n+    match ~\"test\" { ~\"not-test\" => fail!(), ~\"test\" => (), _ => fail!() }\n \n     enum t { tag1(~str), tag2, }\n \n \n     match tag1(~\"test\") {\n-      tag2 => die!(),\n-      tag1(~\"not-test\") => die!(),\n+      tag2 => fail!(),\n+      tag1(~\"not-test\") => fail!(),\n       tag1(~\"test\") => (),\n-      _ => die!()\n+      _ => fail!()\n     }\n \n-    let x = match ~\"a\" { ~\"a\" => 1, ~\"b\" => 2, _ => die!() };\n+    let x = match ~\"a\" { ~\"a\" => 1, ~\"b\" => 2, _ => fail!() };\n     assert (x == 1);\n \n-    match ~\"a\" { ~\"a\" => { } ~\"b\" => { }, _ => die!() }\n+    match ~\"a\" { ~\"a\" => { } ~\"b\" => { }, _ => fail!() }\n \n }"}, {"sha": "741f7006633302da56c05806265667c57ede867d", "filename": "src/test/run-pass/attr-main-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-main-2.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n \n pub fn main() {\n-    die!()\n+    fail!()\n }\n \n #[main]"}, {"sha": "b7fa7915aa58714e9afd14655f28458eb24b8f0f", "filename": "src/test/run-pass/binary-minus-without-space.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -11,6 +11,6 @@\n // Check that issue #954 stays fixed\n \n pub fn main() {\n-    match -1 { -1 => {}, _ => die!(~\"wat\") }\n+    match -1 { -1 => {}, _ => fail!(~\"wat\") }\n     assert 1-1 == 0;\n }"}, {"sha": "bdcc629566462216cc006bc438db23a0a41254a5", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -19,6 +19,6 @@ pub fn main() {\n     let x = Some(p);\n     match move x {\n         Some(move z) => { dispose(z); },\n-        None => die!()\n+        None => fail!()\n     }\n }"}, {"sha": "d85a51997e1a64e7938a2e0103948d84f82e03b4", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -35,14 +35,14 @@ pub fn main() {\n         assert false;\n     }\n     match do vec::all(v) |e| { float::is_negative(*e) } {\n-        true => { die!(~\"incorrect answer.\"); }\n+        true => { fail!(~\"incorrect answer.\"); }\n         false => { }\n     }\n     match 3 {\n       _ if do vec::any(v) |e| { float::is_negative(*e) } => {\n       }\n       _ => {\n-        die!(~\"wrong answer.\");\n+        fail!(~\"wrong answer.\");\n       }\n     }\n "}, {"sha": "4fe553ec03958d9296468a499ecb96996a978347", "filename": "src/test/run-pass/boxed-class-type-substitution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -15,7 +15,7 @@ type Tree<T> = {\n     mut parent: Option<T>,\n };\n \n-fn empty<T>() -> Tree<T> { die!() }\n+fn empty<T>() -> Tree<T> { fail!() }\n \n struct Box {\n     tree: Tree<@Box>"}, {"sha": "347f44b2afa6ac79ff76b541ec377e59b73adb77", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -108,7 +108,7 @@ impl<T> cat<T> {\n     pure fn get(&self, k: &int) -> &self/T {\n         match self.find(k) {\n           Some(v) => { v }\n-          None    => { die!(~\"epic fail\"); }\n+          None    => { fail!(~\"epic fail\"); }\n         }\n     }\n "}, {"sha": "74dc2e3a0cf4486188fc69198c811aa5e5d2b91f", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-win32\n fn adder(+x: @int, +y: @int) -> int { return *x + *y; }\n-fn failer() -> @int { die!(); }\n+fn failer() -> @int { fail!(); }\n pub fn main() {\n     assert(result::is_err(&task::try(|| {\n         adder(@2, failer()); ()"}, {"sha": "1c2da8ff3ec1c217b3776cb5a0e7a7540243c2e2", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -81,7 +81,7 @@ mod m {\n // Since the bogus configuration isn't defined main will just be\n // parsed, but nothing further will be done with it\n #[cfg(bogus)]\n-pub fn main() { die!() }\n+pub fn main() { fail!() }\n \n pub fn main() {\n     // Exercise some of the configured items in ways that wouldn't be possible\n@@ -95,7 +95,7 @@ pub fn main() {\n \n fn test_in_fn_ctxt() {\n     #[cfg(bogus)]\n-    fn f() { die!() }\n+    fn f() { fail!() }\n     fn f() { }\n     f();\n "}, {"sha": "6e75758ff77b6f133155b7a7da1587e3b110b02a", "filename": "src/test/run-pass/const-big-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -19,18 +19,18 @@ const X: Foo = Baz;\n pub fn main() {\n     match X {\n         Baz => {}\n-        _ => die!()\n+        _ => fail!()\n     }\n     match Y {\n         Bar(s) => assert(s == 2654435769),\n-        _ => die!()\n+        _ => fail!()\n     }\n     match Z {\n         Quux(d,h) => {\n             assert(d == 0x123456789abcdef0);\n             assert(h == 0x1234);\n         }\n-        _ => die!()\n+        _ => fail!()\n     }\n }\n "}, {"sha": "19311cb17325a992c8a968472b6fecaf50abba86", "filename": "src/test/run-pass/const-enum-byref-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -15,7 +15,7 @@ impl E {\n     fn method(&self) {\n         match *self {\n             V => {}\n-            VV(*) => die!()\n+            VV(*) => fail!()\n         }\n     }\n }"}, {"sha": "a8d24dc300a859f06e4fd8cb4576dc263dbb831d", "filename": "src/test/run-pass/const-enum-byref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -14,7 +14,7 @@ const C: E = V;\n fn f(a: &E) {\n     match *a {\n         V => {}\n-        VV(*) => die!()\n+        VV(*) => fail!()\n     }\n }\n "}, {"sha": "92b74902efb13d892e49302757c7de951e351e7a", "filename": "src/test/run-pass/const-enum-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -14,6 +14,6 @@ const C: &static/E = &V0;\n fn main() {\n     match *C {\n         V0 => (),\n-        _ => die!()\n+        _ => fail!()\n     }\n }"}, {"sha": "ed9075f4932dd6cd03b3c2573600455085534e9b", "filename": "src/test/run-pass/const-enum-vec-index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -16,10 +16,10 @@ const C1: E = C[1];\n fn main() {\n     match C0 { \n         V0 => (),\n-        _ => die!()\n+        _ => fail!()\n     }\n     match C1 {\n         V1(n) => assert(n == 0xDEADBEE),\n-        _ => die!()\n+        _ => fail!()\n     }\n }"}, {"sha": "60023889305d42d281429bb73a27a3fc6ccac194", "filename": "src/test/run-pass/const-enum-vec-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -14,10 +14,10 @@ const C: &static/[E] = &[V0, V1(0xDEADBEE), V0];\n fn main() {\n     match C[1] {\n         V1(n) => assert(n == 0xDEADBEE),\n-        _ => die!()\n+        _ => fail!()\n     }\n     match C[2] { \n         V0 => (),\n-        _ => die!()\n+        _ => fail!()\n     }\n }"}, {"sha": "b95c42fc49389cc39c6dee2994f760acb1cf9aff", "filename": "src/test/run-pass/const-enum-vector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -14,10 +14,10 @@ const C: [E * 3] = [V0, V1(0xDEADBEE), V0];\n fn main() {\n     match C[1] {\n         V1(n) => assert(n == 0xDEADBEE),\n-        _ => die!()\n+        _ => fail!()\n     }\n     match C[2] { \n         V0 => (),\n-        _ => die!()\n+        _ => fail!()\n     }\n }"}, {"sha": "cbc862185a8d84f1182018d63173f03018a5464e", "filename": "src/test/run-pass/const-nullary-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -19,11 +19,11 @@ const X: Foo = Bar;\n pub fn main() {\n     match X {\n         Bar => {}\n-        Baz | Boo => die!()\n+        Baz | Boo => fail!()\n     }\n     match Y {\n         Baz => {}\n-        Bar | Boo => die!()\n+        Bar | Boo => fail!()\n     }\n }\n "}, {"sha": "c4f5e2640ee1ded485aca713dc5865e3765de0dc", "filename": "src/test/run-pass/die-macro.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae74bef188fe4f1fff69c0fa85d308c40bce7f8/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdie-macro.rs?ref=0ae74bef188fe4f1fff69c0fa85d308c40bce7f8", "patch": "@@ -1,9 +1,9 @@\n-// Just testing that die!() type checks in statement or expr\n+// Just testing that fail!() type checks in statement or expr\n \n fn f() {\n-    die!();\n+    fail!();\n \n-    let x: int = die!();\n+    let x: int = fail!();\n }\n \n pub fn main() {"}]}