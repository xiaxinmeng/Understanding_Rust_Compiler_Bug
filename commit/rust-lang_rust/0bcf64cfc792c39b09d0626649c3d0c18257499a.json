{"sha": "0bcf64cfc792c39b09d0626649c3d0c18257499a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiY2Y2NGNmYzc5MmMzOWIwOWQwNjI2NjQ5YzNkMGMxODI1NzQ5OWE=", "commit": {"author": {"name": "Murarth", "email": "murarth@gmail.com", "date": "2016-07-11T22:06:28Z"}, "committer": {"name": "Murarth", "email": "murarth@gmail.com", "date": "2016-07-12T01:07:14Z"}, "message": "Add method `String::insert_str`", "tree": {"sha": "2660463eef7184e18b48711d264fae4890b18881", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2660463eef7184e18b48711d264fae4890b18881"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bcf64cfc792c39b09d0626649c3d0c18257499a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bcf64cfc792c39b09d0626649c3d0c18257499a", "html_url": "https://github.com/rust-lang/rust/commit/0bcf64cfc792c39b09d0626649c3d0c18257499a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bcf64cfc792c39b09d0626649c3d0c18257499a/comments", "author": {"login": "murarth", "id": 1332722, "node_id": "MDQ6VXNlcjEzMzI3MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1332722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/murarth", "html_url": "https://github.com/murarth", "followers_url": "https://api.github.com/users/murarth/followers", "following_url": "https://api.github.com/users/murarth/following{/other_user}", "gists_url": "https://api.github.com/users/murarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/murarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/murarth/subscriptions", "organizations_url": "https://api.github.com/users/murarth/orgs", "repos_url": "https://api.github.com/users/murarth/repos", "events_url": "https://api.github.com/users/murarth/events{/privacy}", "received_events_url": "https://api.github.com/users/murarth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "murarth", "id": 1332722, "node_id": "MDQ6VXNlcjEzMzI3MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1332722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/murarth", "html_url": "https://github.com/murarth", "followers_url": "https://api.github.com/users/murarth/followers", "following_url": "https://api.github.com/users/murarth/following{/other_user}", "gists_url": "https://api.github.com/users/murarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/murarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/murarth/subscriptions", "organizations_url": "https://api.github.com/users/murarth/orgs", "repos_url": "https://api.github.com/users/murarth/repos", "events_url": "https://api.github.com/users/murarth/events{/privacy}", "received_events_url": "https://api.github.com/users/murarth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab8054ac182fc170099135304a0c1c6760da57a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab8054ac182fc170099135304a0c1c6760da57a", "html_url": "https://github.com/rust-lang/rust/commit/3ab8054ac182fc170099135304a0c1c6760da57a"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "ce3f96893242fc455135d72d1e085fad79705cf5", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 53, "deletions": 9, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0bcf64cfc792c39b09d0626649c3d0c18257499a/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcf64cfc792c39b09d0626649c3d0c18257499a/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=0bcf64cfc792c39b09d0626649c3d0c18257499a", "patch": "@@ -1126,18 +1126,62 @@ impl String {\n         assert!(idx <= len);\n         assert!(self.is_char_boundary(idx));\n         let bits = ch.encode_utf8();\n-        let bits = bits.as_slice();\n-        let amt = bits.len();\n+\n+        unsafe {\n+            self.insert_bytes(idx, bits.as_slice());\n+        }\n+    }\n+\n+    unsafe fn insert_bytes(&mut self, idx: usize, bytes: &[u8]) {\n+        let len = self.len();\n+        let amt = bytes.len();\n         self.vec.reserve(amt);\n \n+        ptr::copy(self.vec.as_ptr().offset(idx as isize),\n+                  self.vec.as_mut_ptr().offset((idx + amt) as isize),\n+                  len - idx);\n+        ptr::copy(bytes.as_ptr(),\n+                  self.vec.as_mut_ptr().offset(idx as isize),\n+                  amt);\n+        self.vec.set_len(len + amt);\n+    }\n+\n+    /// Inserts a string into this `String` at a byte position.\n+    ///\n+    /// This is an `O(n)` operation as it requires copying every element in the\n+    /// buffer.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `idx` is larger than the `String`'s length, or if it does not\n+    /// lie on a [`char`] boundary.\n+    ///\n+    /// [`char`]: ../../std/primitive.char.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(insert_str)]\n+    ///\n+    /// let mut s = String::from(\"bar\");\n+    ///\n+    /// s.insert_str(0, \"foo\");\n+    ///\n+    /// assert_eq!(\"foobar\", s);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"insert_str\",\n+               reason = \"recent addition\",\n+               issue = \"0\")]\n+    pub fn insert_str(&mut self, idx: usize, string: &str) {\n+        let len = self.len();\n+        assert!(idx <= len);\n+        assert!(self.is_char_boundary(idx));\n+\n         unsafe {\n-            ptr::copy(self.vec.as_ptr().offset(idx as isize),\n-                      self.vec.as_mut_ptr().offset((idx + amt) as isize),\n-                      len - idx);\n-            ptr::copy(bits.as_ptr(),\n-                      self.vec.as_mut_ptr().offset(idx as isize),\n-                      amt);\n-            self.vec.set_len(len + amt);\n+            self.insert_bytes(idx, string.as_bytes());\n         }\n     }\n "}]}