{"sha": "20395c5c5511ef1003962e47b5bcbd337a8f77a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMzk1YzVjNTUxMWVmMTAwMzk2MmU0N2I1YmNiZDMzN2E4Zjc3YTg=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-04-02T20:27:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-02T20:27:35Z"}, "message": "Merge pull request #1430 from fintelia/stdin_lines\n\nThe --file_lines argument now supports \"stdin\"", "tree": {"sha": "491dc7da75c4d4a134231016c2dfa50eefeeaa11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/491dc7da75c4d4a134231016c2dfa50eefeeaa11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20395c5c5511ef1003962e47b5bcbd337a8f77a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20395c5c5511ef1003962e47b5bcbd337a8f77a8", "html_url": "https://github.com/rust-lang/rust/commit/20395c5c5511ef1003962e47b5bcbd337a8f77a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20395c5c5511ef1003962e47b5bcbd337a8f77a8/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94a97d9a1d2a2798043dd74ea97c418fe6b1541", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94a97d9a1d2a2798043dd74ea97c418fe6b1541", "html_url": "https://github.com/rust-lang/rust/commit/e94a97d9a1d2a2798043dd74ea97c418fe6b1541"}, {"sha": "6241469a69176b42291d5573d508ebeb2c5f39e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6241469a69176b42291d5573d508ebeb2c5f39e9", "html_url": "https://github.com/rust-lang/rust/commit/6241469a69176b42291d5573d508ebeb2c5f39e9"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "b5d731dbd69e24e36fe5e85fd0f21fd8c6b17237", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/20395c5c5511ef1003962e47b5bcbd337a8f77a8/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20395c5c5511ef1003962e47b5bcbd337a8f77a8/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=20395c5c5511ef1003962e47b5bcbd337a8f77a8", "patch": "@@ -217,16 +217,26 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n             // write_mode is always Plain for Stdin.\n             config.write_mode = WriteMode::Plain;\n \n+            // parse file_lines\n+            if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n+                config.file_lines = try!(file_lines.parse());\n+                for f in config.file_lines.files() {\n+                    if f != \"stdin\" {\n+                        println!(\"Warning: Extra file listed in file_lines option '{}'\", f);\n+                    }\n+                }\n+            }\n+\n             Ok(run(Input::Text(input), &config))\n         }\n-        Operation::Format {\n-            mut files,\n-            config_path,\n-        } => {\n+        Operation::Format { files, config_path } => {\n             let options = try!(CliOptions::from_matches(&matches));\n \n-            // Add any additional files that were specified via `--file-lines`.\n-            files.extend(options.file_lines.files().cloned().map(PathBuf::from));\n+            for f in options.file_lines.files() {\n+                if !files.contains(&PathBuf::from(f)) {\n+                    println!(\"Warning: Extra file listed in file_lines option '{}'\", f);\n+                }\n+            }\n \n             let mut config = Config::default();\n             let mut path = None;\n@@ -345,9 +355,8 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n                       Some(dir)\n                   });\n \n-    // if no file argument is supplied and `--file-lines` is not specified, read from stdin\n-    if matches.free.is_empty() && !matches.opt_present(\"file-lines\") {\n-\n+    // if no file argument is supplied, read from stdin\n+    if matches.free.is_empty() {\n         let mut buffer = String::new();\n         try!(io::stdin().read_to_string(&mut buffer));\n \n@@ -357,7 +366,6 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n                   });\n     }\n \n-    // We append files from `--file-lines` later in `execute()`.\n     let files: Vec<_> = matches.free.iter().map(PathBuf::from).collect();\n \n     Ok(Operation::Format {"}, {"sha": "e68751eb887592d632307bff1d1ff1d05913e6f9", "filename": "src/file_lines.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20395c5c5511ef1003962e47b5bcbd337a8f77a8/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20395c5c5511ef1003962e47b5bcbd337a8f77a8/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=20395c5c5511ef1003962e47b5bcbd337a8f77a8", "patch": "@@ -162,6 +162,10 @@ impl<'a> iter::Iterator for Files<'a> {\n }\n \n fn canonicalize_path_string(s: &str) -> Result<String, ()> {\n+    if s == \"stdin\" {\n+        return Ok(s.to_string());\n+    }\n+\n     match path::PathBuf::from(s).canonicalize() {\n         Ok(canonicalized) => canonicalized.to_str().map(|s| s.to_string()).ok_or(()),\n         _ => Err(()),"}]}