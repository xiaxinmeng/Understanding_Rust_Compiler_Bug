{"sha": "0e2af5cc63065db84ffee23532ec572e644e4cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMmFmNWNjNjMwNjVkYjg0ZmZlZTIzNTMyZWM1NzJlNjQ0ZTRjZjQ=", "commit": {"author": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2020-11-02T21:19:36Z"}, "committer": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2020-11-02T21:25:01Z"}, "message": "Check predicates from blanket trait impls while testing if they apply", "tree": {"sha": "ff471fa53a22c5c8fc165e68718869d3de8ed3ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff471fa53a22c5c8fc165e68718869d3de8ed3ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e2af5cc63065db84ffee23532ec572e644e4cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e2af5cc63065db84ffee23532ec572e644e4cf4", "html_url": "https://github.com/rust-lang/rust/commit/0e2af5cc63065db84ffee23532ec572e644e4cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e2af5cc63065db84ffee23532ec572e644e4cf4/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4051473c8b5158984a5253d1b5faad6a94de7682", "url": "https://api.github.com/repos/rust-lang/rust/commits/4051473c8b5158984a5253d1b5faad6a94de7682", "html_url": "https://github.com/rust-lang/rust/commit/4051473c8b5158984a5253d1b5faad6a94de7682"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "7030fd9b7f23b2053e9a323491a9d268488a3e3e", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0e2af5cc63065db84ffee23532ec572e644e4cf4/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2af5cc63065db84ffee23532ec572e644e4cf4/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=0e2af5cc63065db84ffee23532ec572e644e4cf4", "patch": "@@ -62,14 +62,30 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             \"invoking predicate_may_hold: param_env={:?}, trait_ref={:?}, ty={:?}\",\n                             param_env, trait_ref, ty\n                         );\n-                        match infcx.evaluate_obligation(&traits::Obligation::new(\n-                            cause,\n-                            param_env,\n-                            trait_ref.without_const().to_predicate(infcx.tcx),\n-                        )) {\n-                            Ok(eval_result) => eval_result.may_apply(),\n-                            Err(traits::OverflowError) => true, // overflow doesn't mean yes *or* no\n+                        let predicates = self\n+                            .cx\n+                            .tcx\n+                            .predicates_of(impl_def_id)\n+                            .instantiate(self.cx.tcx, impl_substs)\n+                            .predicates\n+                            .into_iter()\n+                            .chain(Some(trait_ref.without_const().to_predicate(infcx.tcx)));\n+                        for predicate in predicates {\n+                            debug!(\"testing predicate {:?}\", predicate);\n+                            let obligation = traits::Obligation::new(\n+                                traits::ObligationCause::dummy(),\n+                                param_env,\n+                                predicate,\n+                            );\n+                            match infcx.evaluate_obligation(&obligation) {\n+                                Ok(eval_result) if eval_result.may_apply() => {}\n+                                Err(traits::OverflowError) => {}\n+                                _ => {\n+                                    return false;\n+                                }\n+                            }\n                         }\n+                        true\n                     } else {\n                         false\n                     }"}, {"sha": "d09141c320473933bef1d05874ca5faff4b0901e", "filename": "src/test/rustdoc/issue-78673.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0e2af5cc63065db84ffee23532ec572e644e4cf4/src%2Ftest%2Frustdoc%2Fissue-78673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2af5cc63065db84ffee23532ec572e644e4cf4/src%2Ftest%2Frustdoc%2Fissue-78673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-78673.rs?ref=0e2af5cc63065db84ffee23532ec572e644e4cf4", "patch": "@@ -0,0 +1,24 @@\n+#![crate_name = \"issue_78673\"]\n+\n+pub trait Something {}\n+\n+pub trait AnAmazingTrait {}\n+\n+impl<T: Something> AnAmazingTrait for T {}\n+\n+// @has 'issue_78673/struct.MyStruct.html'\n+// @has  - '//*[@class=\"impl\"]' 'AnAmazingTrait for MyStruct'\n+// @!has - '//*[@class=\"impl\"]' 'AnAmazingTrait for T'\n+pub struct MyStruct;\n+\n+impl AnAmazingTrait for MyStruct {}\n+\n+// generic structs may have _both_ specific and blanket impls that apply\n+\n+// @has 'issue_78673/struct.AnotherStruct.html'\n+// @has - '//*[@class=\"impl\"]' 'AnAmazingTrait for AnotherStruct<()>'\n+// @has - '//*[@class=\"impl\"]' 'AnAmazingTrait for T'\n+pub struct AnotherStruct<T>(T);\n+\n+impl<T: Something> Something for AnotherStruct<T> {}\n+impl AnAmazingTrait for AnotherStruct<()> {}"}]}