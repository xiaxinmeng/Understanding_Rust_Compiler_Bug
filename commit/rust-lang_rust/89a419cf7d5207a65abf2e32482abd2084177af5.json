{"sha": "89a419cf7d5207a65abf2e32482abd2084177af5", "node_id": "C_kwDOAAsO6NoAKDg5YTQxOWNmN2Q1MjA3YTY1YWJmMmUzMjQ4MmFiZDIwODQxNzdhZjU", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-15T19:09:04Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-20T15:10:46Z"}, "message": "Filter out Negative impls on intercrate mode's ambiguous reasoning", "tree": {"sha": "d830141fbab738a45f91f20b5f7112f46cb2c93e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d830141fbab738a45f91f20b5f7112f46cb2c93e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89a419cf7d5207a65abf2e32482abd2084177af5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmFwMXYACgkQgTGiTgx5\n76/IfxAAhDtRTyUXeXHDltwRzRljDo6+TdsAHQ8XYV5cLEWDy2/Gr4dB7fzicnAp\nfOrjqBhsMdBrzWKsAqk9OaOftMX37EeStHn/n0nMeUNcORwholjHsUqGf6mhTmhM\nSQhkVtPCSsxBZxzmBj0S/r/swYCa+8S9jXhWVBQ4BWhmeSxr+pm9zpSorywIWvGI\nDW1WTwSrnAXczoE4zksr2Hjqe91uhtQ94JhWCNuXpnv70BrN31WFqaYZv1xDvAlk\nnO9haiIrqI4qR/kfuPWERGts0nhbirVhrdoLgKj/v1uAgQxbmRQW7uyXbzFlj022\nMq95ondQIz4a+k9QIci3HuSRpeac3Aky0OKHV1YDbg/U5EIIOsO1s3tPw0AkhEdd\nukma8aO3DM7I6Rhs91jNmSgssOzttucjToL6WhM1KVM2ZI2Xtd3GDFcq0xpwyszB\nh/pYxGJA+7tstiwSdiXeh8YUxxdLDPYrq8osPQALvwA+DLIX8rdIoLTsW3ScoAHb\nAWm++ZB6pziJ97g9otHHt0wkbJhGh8piOjannTrwZLRM3f0ulWWsvdKTcWVR7fLx\n6sFsWM+Sjdmzg7UbxhAVBXVX00D8LXhBuXmEPzYImNzJ87m9uaLgT/Xc0JwL+J1p\no/CbK0rvDOJXapuGdZRHfuFcNB0gD5E/3h65WXTCqzbSA1GSVCs=\n=qEtx\n-----END PGP SIGNATURE-----", "payload": "tree d830141fbab738a45f91f20b5f7112f46cb2c93e\nparent 85c8fd9c94d842fcdee98d60abaf7225250be870\nauthor Santiago Pastorino <spastorino@gmail.com> 1634324944 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1634742646 -0300\n\nFilter out Negative impls on intercrate mode's ambiguous reasoning\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89a419cf7d5207a65abf2e32482abd2084177af5", "html_url": "https://github.com/rust-lang/rust/commit/89a419cf7d5207a65abf2e32482abd2084177af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89a419cf7d5207a65abf2e32482abd2084177af5/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85c8fd9c94d842fcdee98d60abaf7225250be870", "url": "https://api.github.com/repos/rust-lang/rust/commits/85c8fd9c94d842fcdee98d60abaf7225250be870", "html_url": "https://github.com/rust-lang/rust/commit/85c8fd9c94d842fcdee98d60abaf7225250be870"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "9e77364aef36a6212ac843082cfc2d9cfd845a6c", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/89a419cf7d5207a65abf2e32482abd2084177af5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a419cf7d5207a65abf2e32482abd2084177af5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=89a419cf7d5207a65abf2e32482abd2084177af5", "patch": "@@ -866,34 +866,39 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // precise still.\n         let unbound_input_types =\n             stack.fresh_trait_ref.value.skip_binder().substs.types().any(|ty| ty.is_fresh());\n-        // This check was an imperfect workaround for a bug in the old\n-        // intercrate mode; it should be removed when that goes away.\n-        if unbound_input_types && self.intercrate {\n-            debug!(\"evaluate_stack --> unbound argument, intercrate -->  ambiguous\",);\n-            // Heuristics: show the diagnostics when there are no candidates in crate.\n-            if self.intercrate_ambiguity_causes.is_some() {\n-                debug!(\"evaluate_stack: intercrate_ambiguity_causes is some\");\n-                if let Ok(candidate_set) = self.assemble_candidates(stack) {\n-                    if !candidate_set.ambiguous && candidate_set.vec.is_empty() {\n-                        let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n-                        let self_ty = trait_ref.self_ty();\n-                        let cause =\n-                            with_no_trimmed_paths(|| IntercrateAmbiguityCause::DownstreamCrate {\n-                                trait_desc: trait_ref.print_only_trait_path().to_string(),\n-                                self_desc: if self_ty.has_concrete_skeleton() {\n-                                    Some(self_ty.to_string())\n-                                } else {\n-                                    None\n-                                },\n+\n+        if stack.obligation.predicate.skip_binder().polarity != ty::ImplPolarity::Negative {\n+            // This check was an imperfect workaround for a bug in the old\n+            // intercrate mode; it should be removed when that goes away.\n+            if unbound_input_types && self.intercrate {\n+                debug!(\"evaluate_stack --> unbound argument, intercrate -->  ambiguous\",);\n+                // Heuristics: show the diagnostics when there are no candidates in crate.\n+                if self.intercrate_ambiguity_causes.is_some() {\n+                    debug!(\"evaluate_stack: intercrate_ambiguity_causes is some\");\n+                    if let Ok(candidate_set) = self.assemble_candidates(stack) {\n+                        if !candidate_set.ambiguous && candidate_set.vec.is_empty() {\n+                            let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n+                            let self_ty = trait_ref.self_ty();\n+                            let cause = with_no_trimmed_paths(|| {\n+                                IntercrateAmbiguityCause::DownstreamCrate {\n+                                    trait_desc: trait_ref.print_only_trait_path().to_string(),\n+                                    self_desc: if self_ty.has_concrete_skeleton() {\n+                                        Some(self_ty.to_string())\n+                                    } else {\n+                                        None\n+                                    },\n+                                }\n                             });\n \n-                        debug!(?cause, \"evaluate_stack: pushing cause\");\n-                        self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);\n+                            debug!(?cause, \"evaluate_stack: pushing cause\");\n+                            self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);\n+                        }\n                     }\n                 }\n+                return Ok(EvaluatedToAmbig);\n             }\n-            return Ok(EvaluatedToAmbig);\n         }\n+\n         if unbound_input_types\n             && stack.iter().skip(1).any(|prev| {\n                 stack.obligation.param_env == prev.obligation.param_env\n@@ -1178,7 +1183,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Option<Conflict> {\n         debug!(\"is_knowable(intercrate={:?})\", self.intercrate);\n \n-        if !self.intercrate {\n+        if !self.intercrate\n+            || stack.obligation.predicate.skip_binder().polarity == ty::ImplPolarity::Negative\n+        {\n             return None;\n         }\n "}]}