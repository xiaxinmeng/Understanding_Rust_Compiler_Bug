{"sha": "8222a1fddfe73dab5e00437efeffa7d95db0b6be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMjJhMWZkZGZlNzNkYWI1ZTAwNDM3ZWZlZmZhN2Q5NWRiMGI2YmU=", "commit": {"author": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-13T15:36:01Z"}, "committer": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-13T15:36:01Z"}, "message": "Fix is_path_start to accept T![<], fix is_path_start usages", "tree": {"sha": "a8520fc5a354fb66b4304e0ddd210c6bfc076e92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8520fc5a354fb66b4304e0ddd210c6bfc076e92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8222a1fddfe73dab5e00437efeffa7d95db0b6be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8222a1fddfe73dab5e00437efeffa7d95db0b6be", "html_url": "https://github.com/rust-lang/rust/commit/8222a1fddfe73dab5e00437efeffa7d95db0b6be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8222a1fddfe73dab5e00437efeffa7d95db0b6be/comments", "author": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1e62501c3de7932396d29c89588ff296bbcc50d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1e62501c3de7932396d29c89588ff296bbcc50d", "html_url": "https://github.com/rust-lang/rust/commit/f1e62501c3de7932396d29c89588ff296bbcc50d"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "aa959864adf9057568d0fab75f9e24edf497ca46", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=8222a1fddfe73dab5e00437efeffa7d95db0b6be", "patch": "@@ -549,7 +549,7 @@ fn arg_list(p: &mut Parser) {\n //     let _ = format!();\n // }\n fn path_expr(p: &mut Parser, r: Restrictions) -> (CompletedMarker, BlockLike) {\n-    assert!(paths::is_path_start(p) || p.at(T![<]));\n+    assert!(paths::is_path_start(p));\n     let m = p.start();\n     paths::expr_path(p);\n     match p.current() {"}, {"sha": "401c738a3f55da2a8a7d0d674c8342a1e89eaee9", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=8222a1fddfe73dab5e00437efeffa7d95db0b6be", "patch": "@@ -62,7 +62,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n     if let Some(m) = literal(p) {\n         return Some((m, BlockLike::NotBlock));\n     }\n-    if paths::is_path_start(p) || p.at(T![<]) {\n+    if paths::is_path_start(p) {\n         return Some(path_expr(p, r));\n     }\n     let la = p.nth(1);"}, {"sha": "b7da44758d90a3a2056d3330ecd5231a74d6418a", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=8222a1fddfe73dab5e00437efeffa7d95db0b6be", "patch": "@@ -49,7 +49,7 @@ pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool, flavor: ItemF\n         }\n         Err(m) => m,\n     };\n-    if paths::is_path_start(p) {\n+    if paths::is_use_path_start(p) {\n         match macro_call(p) {\n             BlockLike::Block => (),\n             BlockLike::NotBlock => {\n@@ -378,7 +378,7 @@ pub(crate) fn mod_item_list(p: &mut Parser) {\n }\n \n fn macro_call(p: &mut Parser) -> BlockLike {\n-    assert!(paths::is_path_start(p));\n+    assert!(paths::is_use_path_start(p));\n     paths::use_path(p);\n     macro_call_after_excl(p)\n }"}, {"sha": "c0c7d0ec6faa6c7ade2d134aeb99b460e8071a86", "filename": "crates/ra_parser/src/grammar/items/use_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs?ref=8222a1fddfe73dab5e00437efeffa7d95db0b6be", "patch": "@@ -65,7 +65,7 @@ fn use_tree(p: &mut Parser) {\n         // use crate::Item;\n         // use self::some::Struct;\n         // use crate_name::some_item;\n-        _ if paths::is_path_start(p) => {\n+        _ if paths::is_use_path_start(p) => {\n             paths::use_path(p);\n             match p.current() {\n                 T![as] => {"}, {"sha": "07eb53b0c701a63f2014cfb5786db49c106f1a26", "filename": "crates/ra_parser/src/grammar/paths.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=8222a1fddfe73dab5e00437efeffa7d95db0b6be", "patch": "@@ -4,6 +4,10 @@ pub(super) const PATH_FIRST: TokenSet =\n     token_set![IDENT, SELF_KW, SUPER_KW, CRATE_KW, COLONCOLON, L_ANGLE];\n \n pub(super) fn is_path_start(p: &Parser) -> bool {\n+    is_use_path_start(p) || p.at(T![<])\n+}\n+\n+pub(super) fn is_use_path_start(p: &Parser) -> bool {\n     match p.current() {\n         IDENT | T![self] | T![super] | T![crate] | T![::] => true,\n         _ => false,\n@@ -58,7 +62,7 @@ fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n     if first && p.eat(T![<]) {\n         types::type_(p);\n         if p.eat(T![as]) {\n-            if is_path_start(p) {\n+            if is_use_path_start(p) {\n                 types::path_type(p);\n             } else {\n                 p.error(\"expected a trait\");"}, {"sha": "df60007070ce104b1c122471a697ae2a554cb78c", "filename": "crates/ra_parser/src/grammar/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=8222a1fddfe73dab5e00437efeffa7d95db0b6be", "patch": "@@ -65,7 +65,7 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n     {\n         return Some(bind_pat(p, true));\n     }\n-    if paths::is_path_start(p) {\n+    if paths::is_use_path_start(p) {\n         return Some(path_pat(p));\n     }\n \n@@ -118,7 +118,7 @@ fn literal_pat(p: &mut Parser) -> CompletedMarker {\n //     let Bar(..) = ();\n // }\n fn path_pat(p: &mut Parser) -> CompletedMarker {\n-    assert!(paths::is_path_start(p));\n+    assert!(paths::is_use_path_start(p));\n     let m = p.start();\n     paths::expr_path(p);\n     let kind = match p.current() {"}, {"sha": "d739df72773b3ecec4a89995cf51864f8724ec71", "filename": "crates/ra_parser/src/grammar/type_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=8222a1fddfe73dab5e00437efeffa7d95db0b6be", "patch": "@@ -101,7 +101,7 @@ fn type_bound(p: &mut Parser) -> bool {\n     match p.current() {\n         LIFETIME => p.bump(),\n         T![for] => types::for_type(p),\n-        _ if paths::is_path_start(p) => types::path_type_(p, false),\n+        _ if paths::is_use_path_start(p) => types::path_type_(p, false),\n         _ => {\n             m.abandon(p);\n             return false;"}, {"sha": "29d173305cf5ab410db6f1f5a4d31a88f44234c3", "filename": "crates/ra_parser/src/grammar/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8222a1fddfe73dab5e00437efeffa7d95db0b6be/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=8222a1fddfe73dab5e00437efeffa7d95db0b6be", "patch": "@@ -29,7 +29,7 @@ fn type_with_bounds_cond(p: &mut Parser, allow_bounds: bool) {\n         T![dyn ] => dyn_trait_type(p),\n         // Some path types are not allowed to have bounds (no plus)\n         T![<] => path_type_(p, allow_bounds),\n-        _ if paths::is_path_start(p) => path_or_macro_type_(p, allow_bounds),\n+        _ if paths::is_use_path_start(p) => path_or_macro_type_(p, allow_bounds),\n         _ => {\n             p.err_recover(\"expected type\", TYPE_RECOVERY_SET);\n         }\n@@ -213,7 +213,7 @@ pub(super) fn for_type(p: &mut Parser) {\n     match p.current() {\n         T![fn] | T![unsafe] | T![extern] => fn_pointer_type(p),\n         T![&] => reference_type(p),\n-        _ if paths::is_path_start(p) || p.at(T![<]) => path_type_(p, false),\n+        _ if paths::is_path_start(p) => path_type_(p, false),\n         _ => p.error(\"expected a path\"),\n     }\n     m.complete(p, FOR_TYPE);\n@@ -252,7 +252,7 @@ pub(super) fn path_type(p: &mut Parser) {\n // type A = foo!();\n // type B = crate::foo!();\n fn path_or_macro_type_(p: &mut Parser, allow_bounds: bool) {\n-    assert!(paths::is_path_start(p) || p.at(T![<]));\n+    assert!(paths::is_path_start(p));\n     let m = p.start();\n     paths::type_path(p);\n \n@@ -271,7 +271,7 @@ fn path_or_macro_type_(p: &mut Parser, allow_bounds: bool) {\n }\n \n pub(super) fn path_type_(p: &mut Parser, allow_bounds: bool) {\n-    assert!(paths::is_path_start(p) || p.at(T![<]));\n+    assert!(paths::is_path_start(p));\n     let m = p.start();\n     paths::type_path(p);\n "}]}