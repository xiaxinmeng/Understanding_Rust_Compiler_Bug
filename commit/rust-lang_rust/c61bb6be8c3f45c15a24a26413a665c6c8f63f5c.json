{"sha": "c61bb6be8c3f45c15a24a26413a665c6c8f63f5c", "node_id": "C_kwDOAAsO6NoAKGM2MWJiNmJlOGMzZjQ1YzE1YTI0YTI2NDEzYTY2NWM2YzhmNjNmNWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-23T14:37:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-23T14:37:35Z"}, "message": "Auto merge of #12064 - Veykril:attr-range, r=Veykril\n\nfix: Fix `ide_db::search` not searching bodies of attributed items\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/12050", "tree": {"sha": "fb750fceae9b8f438c32f30bede99cb8855f57f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb750fceae9b8f438c32f30bede99cb8855f57f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c61bb6be8c3f45c15a24a26413a665c6c8f63f5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c61bb6be8c3f45c15a24a26413a665c6c8f63f5c", "html_url": "https://github.com/rust-lang/rust/commit/c61bb6be8c3f45c15a24a26413a665c6c8f63f5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c61bb6be8c3f45c15a24a26413a665c6c8f63f5c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23e47e1ebcfbee1b3ed99566a6d37755d27f36fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/23e47e1ebcfbee1b3ed99566a6d37755d27f36fe", "html_url": "https://github.com/rust-lang/rust/commit/23e47e1ebcfbee1b3ed99566a6d37755d27f36fe"}, {"sha": "d524e43ef55711f01c234e2e9bef734cb15e8625", "url": "https://api.github.com/repos/rust-lang/rust/commits/d524e43ef55711f01c234e2e9bef734cb15e8625", "html_url": "https://github.com/rust-lang/rust/commit/d524e43ef55711f01c234e2e9bef734cb15e8625"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "bc5372754d68228e2f2a78e5db567654be00e22a", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c61bb6be8c3f45c15a24a26413a665c6c8f63f5c/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61bb6be8c3f45c15a24a26413a665c6c8f63f5c/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=c61bb6be8c3f45c15a24a26413a665c6c8f63f5c", "patch": "@@ -435,6 +435,29 @@ impl MacroCallKind {\n         }\n     }\n \n+    /// Returns the original file range that best describes the location of this macro call.\n+    ///\n+    /// Unlike `MacroCallKind::original_call_range`, this also spans the item of attributes and derives.\n+    pub fn original_call_range_with_body(self, db: &dyn db::AstDatabase) -> FileRange {\n+        let mut kind = self;\n+        let file_id = loop {\n+            match kind.file_id().0 {\n+                HirFileIdRepr::MacroFile(file) => {\n+                    kind = db.lookup_intern_macro_call(file.macro_call_id).kind;\n+                }\n+                HirFileIdRepr::FileId(file_id) => break file_id,\n+            }\n+        };\n+\n+        let range = match kind {\n+            MacroCallKind::FnLike { ast_id, .. } => ast_id.to_node(db).syntax().text_range(),\n+            MacroCallKind::Derive { ast_id, .. } => ast_id.to_node(db).syntax().text_range(),\n+            MacroCallKind::Attr { ast_id, .. } => ast_id.to_node(db).syntax().text_range(),\n+        };\n+\n+        FileRange { range, file_id }\n+    }\n+\n     /// Returns the original file range that best describes the location of this macro call.\n     ///\n     /// Here we try to roughly match what rustc does to improve diagnostics: fn-like macros\n@@ -751,6 +774,9 @@ impl<'a> InFile<&'a SyntaxNode> {\n     }\n \n     /// Falls back to the macro call range if the node cannot be mapped up fully.\n+    ///\n+    /// For attributes and derives, this will point back to the attribute only.\n+    /// For the entire item `InFile::use original_file_range_full`.\n     pub fn original_file_range(self, db: &dyn db::AstDatabase) -> FileRange {\n         if let Some(res) = self.original_file_range_opt(db) {\n             return res;\n@@ -766,6 +792,22 @@ impl<'a> InFile<&'a SyntaxNode> {\n         }\n     }\n \n+    /// Falls back to the macro call range if the node cannot be mapped up fully.\n+    pub fn original_file_range_full(self, db: &dyn db::AstDatabase) -> FileRange {\n+        if let Some(res) = self.original_file_range_opt(db) {\n+            return res;\n+        }\n+\n+        // Fall back to whole macro call.\n+        match self.file_id.0 {\n+            HirFileIdRepr::FileId(file_id) => FileRange { file_id, range: self.value.text_range() },\n+            HirFileIdRepr::MacroFile(mac_file) => {\n+                let loc = db.lookup_intern_macro_call(mac_file.macro_call_id);\n+                loc.kind.original_call_range_with_body(db)\n+            }\n+        }\n+    }\n+\n     /// Attempts to map the syntax node back up its macro calls.\n     pub fn original_file_range_opt(self, db: &dyn db::AstDatabase) -> Option<FileRange> {\n         match ascend_node_border_tokens(db, self) {"}, {"sha": "79f5d0499efad016b0592e5458b0011bbf01699f", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61bb6be8c3f45c15a24a26413a665c6c8f63f5c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61bb6be8c3f45c15a24a26413a665c6c8f63f5c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=c61bb6be8c3f45c15a24a26413a665c6c8f63f5c", "patch": "@@ -171,7 +171,7 @@ fn get_adt_source(\n     adt: &hir::Adt,\n     fn_name: &str,\n ) -> Option<(Option<ast::Impl>, FileId)> {\n-    let range = adt.source(ctx.sema.db)?.syntax().original_file_range(ctx.sema.db);\n+    let range = adt.source(ctx.sema.db)?.syntax().original_file_range_full(ctx.sema.db);\n     let file = ctx.sema.parse(range.file_id);\n     let adt_source =\n         ctx.sema.find_node_at_offset_with_macros(file.syntax(), range.range.start())?;"}, {"sha": "ab614b0ace9ff7692e3e424aacef4661566623d6", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61bb6be8c3f45c15a24a26413a665c6c8f63f5c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61bb6be8c3f45c15a24a26413a665c6c8f63f5c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=c61bb6be8c3f45c15a24a26413a665c6c8f63f5c", "patch": "@@ -198,7 +198,7 @@ pub(crate) fn inline_call(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let fn_body = fn_source.value.body()?;\n     let param_list = fn_source.value.param_list()?;\n \n-    let FileRange { file_id, range } = fn_source.syntax().original_file_range(ctx.sema.db);\n+    let FileRange { file_id, range } = fn_source.syntax().original_file_range_full(ctx.sema.db);\n     if file_id == ctx.file_id() && range.contains(ctx.offset()) {\n         cov_mark::hit!(inline_call_recursive);\n         return None;"}, {"sha": "e6bd46347d91dd8461a519cc746ede37973d6bcc", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c61bb6be8c3f45c15a24a26413a665c6c8f63f5c/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61bb6be8c3f45c15a24a26413a665c6c8f63f5c/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=c61bb6be8c3f45c15a24a26413a665c6c8f63f5c", "patch": "@@ -239,14 +239,14 @@ impl Definition {\n                 DefWithBody::Static(s) => s.source(db).map(|src| src.syntax().cloned()),\n             };\n             return match def {\n-                Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),\n+                Some(def) => SearchScope::file_range(def.as_ref().original_file_range_full(db)),\n                 None => SearchScope::single_file(file_id),\n             };\n         }\n \n         if let Definition::SelfType(impl_) = self {\n             return match impl_.source(db).map(|src| src.syntax().cloned()) {\n-                Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),\n+                Some(def) => SearchScope::file_range(def.as_ref().original_file_range_full(db)),\n                 None => SearchScope::single_file(file_id),\n             };\n         }\n@@ -262,7 +262,7 @@ impl Definition {\n                 hir::GenericDef::Const(it) => it.source(db).map(|src| src.syntax().cloned()),\n             };\n             return match def {\n-                Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),\n+                Some(def) => SearchScope::file_range(def.as_ref().original_file_range_full(db)),\n                 None => SearchScope::single_file(file_id),\n             };\n         }"}]}