{"sha": "37892fc51138fe55bdf7f31fa3cbbd573d8ab7c4", "node_id": "C_kwDOAAsO6NoAKDM3ODkyZmM1MTEzOGZlNTViZGY3ZjMxZmEzY2JiZDU3M2Q4YWI3YzQ", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-05-03T15:33:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-03T15:33:00Z"}, "message": "Merge pull request #170 from yvt/fix-internal-load-calls\n\nUse the provided pointee type in `<Builder as BuilderMethods>::load`", "tree": {"sha": "7b18a94a8f77089a5c95c2bd380797a975b5e414", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b18a94a8f77089a5c95c2bd380797a975b5e414"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37892fc51138fe55bdf7f31fa3cbbd573d8ab7c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJicUssCRBK7hj4Ov3rIwAA8NgIABFt+VtQLaIeaVlf5L7hM21V\n4TuB5JVFXB6ZITWpfVoFCrXCPROzr8qai4JM09b1MenhZQp0Q/ulRRcpFw54p3+t\nVLUUZB2OU9IZXDMFyOIZ6tJcdPKNNldyGW7A0M0XRXz5JdJmygrOIekzwPsJ3Z8L\n6jVP09X74WtX5fCJcaDpWUey5g5uNDTq87kbGzIK0N1cnoX90TVCjg3Qe+SSKjAh\nswyl298foiemIOk6+cKEImmhYN6lK52IgTgaCCoPWKdaIWLOhgOWxnevuemZlsVy\n0bt2XjJTjB8eUXzQMA3ikYaw2Ydm5JnWqKgVI/QERwO0yCKwRSCwAwgXAHwjxmI=\n=nr3t\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b18a94a8f77089a5c95c2bd380797a975b5e414\nparent 0405aa0065f567ac11756c8ce5845a5bc9604f94\nparent 351c68367425c4e292394ae5c7137b6e45de0916\nauthor antoyo <antoyo@users.noreply.github.com> 1651591980 -0400\ncommitter GitHub <noreply@github.com> 1651591980 -0400\n\nMerge pull request #170 from yvt/fix-internal-load-calls\n\nUse the provided pointee type in `<Builder as BuilderMethods>::load`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37892fc51138fe55bdf7f31fa3cbbd573d8ab7c4", "html_url": "https://github.com/rust-lang/rust/commit/37892fc51138fe55bdf7f31fa3cbbd573d8ab7c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37892fc51138fe55bdf7f31fa3cbbd573d8ab7c4/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0405aa0065f567ac11756c8ce5845a5bc9604f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/0405aa0065f567ac11756c8ce5845a5bc9604f94", "html_url": "https://github.com/rust-lang/rust/commit/0405aa0065f567ac11756c8ce5845a5bc9604f94"}, {"sha": "351c68367425c4e292394ae5c7137b6e45de0916", "url": "https://api.github.com/repos/rust-lang/rust/commits/351c68367425c4e292394ae5c7137b6e45de0916", "html_url": "https://github.com/rust-lang/rust/commit/351c68367425c4e292394ae5c7137b6e45de0916"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "9a5cf785a1f5b897b1d4bc912dbb264b596d5ca4", "filename": "src/builder.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37892fc51138fe55bdf7f31fa3cbbd573d8ab7c4/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37892fc51138fe55bdf7f31fa3cbbd573d8ab7c4/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=37892fc51138fe55bdf7f31fa3cbbd573d8ab7c4", "patch": "@@ -652,18 +652,17 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         unimplemented!();\n     }\n \n-    fn load(&mut self, _ty: Type<'gcc>, ptr: RValue<'gcc>, _align: Align) -> RValue<'gcc> {\n-        // TODO(antoyo): use ty.\n+    fn load(&mut self, pointee_ty: Type<'gcc>, ptr: RValue<'gcc>, _align: Align) -> RValue<'gcc> {\n         let block = self.llbb();\n         let function = block.get_function();\n         // NOTE: instead of returning the dereference here, we have to assign it to a variable in\n         // the current basic block. Otherwise, it could be used in another basic block, causing a\n         // dereference after a drop, for instance.\n         // TODO(antoyo): handle align of the load instruction.\n+        let ptr = self.context.new_cast(None, ptr, pointee_ty.make_pointer());\n         let deref = ptr.dereference(None).to_rvalue();\n-        let value_type = deref.get_type();\n         unsafe { RETURN_VALUE_COUNT += 1 };\n-        let loaded_value = function.new_local(None, value_type, &format!(\"loadedValue{}\", unsafe { RETURN_VALUE_COUNT }));\n+        let loaded_value = function.new_local(None, pointee_ty, &format!(\"loadedValue{}\", unsafe { RETURN_VALUE_COUNT }));\n         block.add_assignment(None, loaded_value, deref);\n         loaded_value.to_rvalue()\n     }\n@@ -715,7 +714,11 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n                 OperandValue::Ref(place.llval, Some(llextra), place.align)\n             }\n             else if place.layout.is_gcc_immediate() {\n-                let load = self.load(place.llval.get_type(), place.llval, place.align);\n+                let load = self.load(\n+                    place.layout.gcc_type(self, false),\n+                    place.llval,\n+                    place.align,\n+                );\n                 if let abi::Abi::Scalar(ref scalar) = place.layout.abi {\n                     scalar_load_metadata(self, load, scalar);\n                 }\n@@ -727,7 +730,8 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n \n                 let mut load = |i, scalar: &abi::Scalar, align| {\n                     let llptr = self.struct_gep(pair_type, place.llval, i as u64);\n-                    let load = self.load(llptr.get_type(), llptr, align);\n+                    let llty = place.layout.scalar_pair_element_gcc_type(self, i, false);\n+                    let load = self.load(llty, llptr, align);\n                     scalar_load_metadata(self, load, scalar);\n                     if scalar.is_bool() { self.trunc(load, self.type_i1()) } else { load }\n                 };\n@@ -980,7 +984,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     fn memmove(&mut self, dst: RValue<'gcc>, dst_align: Align, src: RValue<'gcc>, src_align: Align, size: RValue<'gcc>, flags: MemFlags) {\n         if flags.contains(MemFlags::NONTEMPORAL) {\n             // HACK(nox): This is inefficient but there is no nontemporal memmove.\n-            let val = self.load(src.get_type(), src, src_align);\n+            let val = self.load(src.get_type().get_pointee().expect(\"get_pointee\"), src, src_align);\n             let ptr = self.pointercast(dst, self.type_ptr_to(self.val_ty(val)));\n             self.store_with_flags(val, ptr, dst_align, flags);\n             return;"}]}