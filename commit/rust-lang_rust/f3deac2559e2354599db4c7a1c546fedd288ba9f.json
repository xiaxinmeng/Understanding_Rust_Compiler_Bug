{"sha": "f3deac2559e2354599db4c7a1c546fedd288ba9f", "node_id": "C_kwDOAAsO6NoAKGYzZGVhYzI1NTllMjM1NDU5OWRiNGM3YTFjNTQ2ZmVkZDI4OGJhOWY", "commit": {"author": {"name": "Andy Fiddaman", "email": "illumos@fiddaman.net", "date": "2022-09-28T16:01:12Z"}, "committer": {"name": "Andy Fiddaman", "email": "illumos@fiddaman.net", "date": "2022-10-15T08:21:52Z"}, "message": "The illumos linker does not support --strip-debug", "tree": {"sha": "153a243562e5fea40439d3a63398933b89cf1142", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/153a243562e5fea40439d3a63398933b89cf1142"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3deac2559e2354599db4c7a1c546fedd288ba9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3deac2559e2354599db4c7a1c546fedd288ba9f", "html_url": "https://github.com/rust-lang/rust/commit/f3deac2559e2354599db4c7a1c546fedd288ba9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3deac2559e2354599db4c7a1c546fedd288ba9f/comments", "author": {"login": "citrus-it", "id": 29426693, "node_id": "MDQ6VXNlcjI5NDI2Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/29426693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/citrus-it", "html_url": "https://github.com/citrus-it", "followers_url": "https://api.github.com/users/citrus-it/followers", "following_url": "https://api.github.com/users/citrus-it/following{/other_user}", "gists_url": "https://api.github.com/users/citrus-it/gists{/gist_id}", "starred_url": "https://api.github.com/users/citrus-it/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/citrus-it/subscriptions", "organizations_url": "https://api.github.com/users/citrus-it/orgs", "repos_url": "https://api.github.com/users/citrus-it/repos", "events_url": "https://api.github.com/users/citrus-it/events{/privacy}", "received_events_url": "https://api.github.com/users/citrus-it/received_events", "type": "User", "site_admin": false}, "committer": {"login": "citrus-it", "id": 29426693, "node_id": "MDQ6VXNlcjI5NDI2Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/29426693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/citrus-it", "html_url": "https://github.com/citrus-it", "followers_url": "https://api.github.com/users/citrus-it/followers", "following_url": "https://api.github.com/users/citrus-it/following{/other_user}", "gists_url": "https://api.github.com/users/citrus-it/gists{/gist_id}", "starred_url": "https://api.github.com/users/citrus-it/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/citrus-it/subscriptions", "organizations_url": "https://api.github.com/users/citrus-it/orgs", "repos_url": "https://api.github.com/users/citrus-it/repos", "events_url": "https://api.github.com/users/citrus-it/events{/privacy}", "received_events_url": "https://api.github.com/users/citrus-it/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09ae7846a272a500ff7145255f0de5556c0b8949", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ae7846a272a500ff7145255f0de5556c0b8949", "html_url": "https://github.com/rust-lang/rust/commit/09ae7846a272a500ff7145255f0de5556c0b8949"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "c8d3d8485f29ce5c886a55c7ea6f8789eafdd0d8", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f3deac2559e2354599db4c7a1c546fedd288ba9f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3deac2559e2354599db4c7a1c546fedd288ba9f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=f3deac2559e2354599db4c7a1c546fedd288ba9f", "patch": "@@ -1034,16 +1034,36 @@ fn link_natively<'a>(\n \n     if sess.target.is_like_osx {\n         match (strip, crate_type) {\n-            (Strip::Debuginfo, _) => strip_symbols_in_osx(sess, &out_filename, Some(\"-S\")),\n+            (Strip::Debuginfo, _) => {\n+                strip_symbols_with_external_utility(sess, \"strip\", &out_filename, Some(\"-S\"))\n+            }\n             // Per the manpage, `-x` is the maximum safe strip level for dynamic libraries. (#93988)\n             (Strip::Symbols, CrateType::Dylib | CrateType::Cdylib | CrateType::ProcMacro) => {\n-                strip_symbols_in_osx(sess, &out_filename, Some(\"-x\"))\n+                strip_symbols_with_external_utility(sess, \"strip\", &out_filename, Some(\"-x\"))\n+            }\n+            (Strip::Symbols, _) => {\n+                strip_symbols_with_external_utility(sess, \"strip\", &out_filename, None)\n             }\n-            (Strip::Symbols, _) => strip_symbols_in_osx(sess, &out_filename, None),\n             (Strip::None, _) => {}\n         }\n     }\n \n+    if sess.target.os == \"illumos\" {\n+        // Many illumos systems will have both the native 'strip' utility and\n+        // the GNU one. Use the native version explicitly and do not rely on\n+        // what's in the path.\n+        let stripcmd = \"/usr/bin/strip\";\n+        match strip {\n+            // Always preserve the symbol table (-x).\n+            Strip::Debuginfo => {\n+                strip_symbols_with_external_utility(sess, stripcmd, &out_filename, Some(\"-x\"))\n+            }\n+            // Strip::Symbols is handled via the --strip-all linker option.\n+            Strip::Symbols => {}\n+            Strip::None => {}\n+        }\n+    }\n+\n     Ok(())\n }\n \n@@ -1055,8 +1075,13 @@ fn strip_value(sess: &Session) -> Strip {\n     }\n }\n \n-fn strip_symbols_in_osx<'a>(sess: &'a Session, out_filename: &Path, option: Option<&str>) {\n-    let mut cmd = Command::new(\"strip\");\n+fn strip_symbols_with_external_utility<'a>(\n+    sess: &'a Session,\n+    util: &str,\n+    out_filename: &Path,\n+    option: Option<&str>,\n+) {\n+    let mut cmd = Command::new(util);\n     if let Some(option) = option {\n         cmd.arg(option);\n     }\n@@ -1067,14 +1092,14 @@ fn strip_symbols_in_osx<'a>(sess: &'a Session, out_filename: &Path, option: Opti\n                 let mut output = prog.stderr.clone();\n                 output.extend_from_slice(&prog.stdout);\n                 sess.struct_warn(&format!(\n-                    \"stripping debug info with `strip` failed: {}\",\n-                    prog.status\n+                    \"stripping debug info with `{}` failed: {}\",\n+                    util, prog.status\n                 ))\n                 .note(&escape_string(&output))\n                 .emit();\n             }\n         }\n-        Err(e) => sess.fatal(&format!(\"unable to run `strip`: {}\", e)),\n+        Err(e) => sess.fatal(&format!(\"unable to run `{}`: {}\", util, e)),\n     }\n }\n "}, {"sha": "6c5b4876dc3c343ee1271506f95c6540a7443217", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3deac2559e2354599db4c7a1c546fedd288ba9f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3deac2559e2354599db4c7a1c546fedd288ba9f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=f3deac2559e2354599db4c7a1c546fedd288ba9f", "patch": "@@ -617,7 +617,13 @@ impl<'a> Linker for GccLinker<'a> {\n         match strip {\n             Strip::None => {}\n             Strip::Debuginfo => {\n-                self.linker_arg(\"--strip-debug\");\n+                // The illumos linker does not support --strip-debug although\n+                // it does support --strip-all as a compatibility alias for -s.\n+                // The --strip-debug case is handled by running an external\n+                // `strip` utility as a separate step after linking.\n+                if self.sess.target.os != \"illumos\" {\n+                    self.linker_arg(\"--strip-debug\");\n+                }\n             }\n             Strip::Symbols => {\n                 self.linker_arg(\"--strip-all\");"}]}