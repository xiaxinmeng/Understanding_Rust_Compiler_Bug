{"sha": "fed71e344818dd2b1f2e48005b6d3da21cda30f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZDcxZTM0NDgxOGRkMmIxZjJlNDgwMDViNmQzZGEyMWNkYTMwZjU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-05T16:46:13Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-05T16:46:13Z"}, "message": "Pass CrateInfo instead of TyCtxt to load_imported_symbols_for_jit", "tree": {"sha": "88bf219696c5bf8c884e13d3aa40ee03d7fc37b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88bf219696c5bf8c884e13d3aa40ee03d7fc37b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fed71e344818dd2b1f2e48005b6d3da21cda30f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fed71e344818dd2b1f2e48005b6d3da21cda30f5", "html_url": "https://github.com/rust-lang/rust/commit/fed71e344818dd2b1f2e48005b6d3da21cda30f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fed71e344818dd2b1f2e48005b6d3da21cda30f5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0cdbd1aa61e47fed13e84cbbda9460ea88b7100", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100", "html_url": "https://github.com/rust-lang/rust/commit/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "a53d281303f1344d8767f4beea8cfd7d29cd2633", "filename": "src/driver/jit.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fed71e344818dd2b1f2e48005b6d3da21cda30f5/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed71e344818dd2b1f2e48005b6d3da21cda30f5/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=fed71e344818dd2b1f2e48005b6d3da21cda30f5", "patch": "@@ -10,6 +10,7 @@ use std::sync::{mpsc, Mutex};\n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_codegen_ssa::CrateInfo;\n use rustc_middle::mir::mono::MonoItem;\n+use rustc_session::Session;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n@@ -65,7 +66,8 @@ fn create_jit_module<'tcx>(\n     backend_config: &BackendConfig,\n     hotswap: bool,\n ) -> (JITModule, CodegenCx<'tcx>) {\n-    let imported_symbols = load_imported_symbols_for_jit(tcx);\n+    let crate_info = CrateInfo::new(tcx);\n+    let imported_symbols = load_imported_symbols_for_jit(tcx.sess, crate_info);\n \n     let isa = crate::build_isa(tcx.sess, backend_config);\n     let mut jit_builder = JITBuilder::with_isa(isa, cranelift_module::default_libcall_names());\n@@ -255,14 +257,16 @@ fn jit_fn(instance_ptr: *const Instance<'static>, trampoline_ptr: *const u8) ->\n     })\n }\n \n-fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n+fn load_imported_symbols_for_jit(\n+    sess: &Session,\n+    crate_info: CrateInfo,\n+) -> Vec<(String, *const u8)> {\n     use rustc_middle::middle::dependency_format::Linkage;\n \n     let mut dylib_paths = Vec::new();\n \n-    let crate_info = CrateInfo::new(tcx);\n-    let formats = tcx.dependency_formats(());\n-    let data = &formats\n+    let data = &crate_info\n+        .dependency_formats\n         .iter()\n         .find(|(crate_type, _data)| *crate_type == rustc_session::config::CrateType::Executable)\n         .unwrap()\n@@ -272,9 +276,8 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n         match data[cnum.as_usize() - 1] {\n             Linkage::NotLinked | Linkage::IncludedFromDylib => {}\n             Linkage::Static => {\n-                let name = tcx.crate_name(cnum);\n-                let mut err =\n-                    tcx.sess.struct_err(&format!(\"Can't load static lib {}\", name.as_str()));\n+                let name = &crate_info.crate_name[&cnum];\n+                let mut err = sess.struct_err(&format!(\"Can't load static lib {}\", name.as_str()));\n                 err.note(\"rustc_codegen_cranelift can only load dylibs in JIT mode.\");\n                 err.emit();\n             }\n@@ -314,7 +317,7 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n         std::mem::forget(lib)\n     }\n \n-    tcx.sess.abort_if_errors();\n+    sess.abort_if_errors();\n \n     imported_symbols\n }"}]}