{"sha": "d714b9790b59673ea66d837063e044be136e4f09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MTRiOTc5MGI1OTY3M2VhNjZkODM3MDYzZTA0NGJlMTM2ZTRmMDk=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-06-13T11:47:13Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-06-13T11:47:13Z"}, "message": "incr.comp.: Don't use Ident in DefPath because that's unstable across compilation sessions.", "tree": {"sha": "14c1fe62f29de6adf064be806d1e303b05dae1e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14c1fe62f29de6adf064be806d1e303b05dae1e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d714b9790b59673ea66d837063e044be136e4f09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d714b9790b59673ea66d837063e044be136e4f09", "html_url": "https://github.com/rust-lang/rust/commit/d714b9790b59673ea66d837063e044be136e4f09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d714b9790b59673ea66d837063e044be136e4f09/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7fffa2211f3145e444c2d90321a0e39d6150b42", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7fffa2211f3145e444c2d90321a0e39d6150b42", "html_url": "https://github.com/rust-lang/rust/commit/e7fffa2211f3145e444c2d90321a0e39d6150b42"}], "stats": {"total": 180, "additions": 93, "deletions": 87}, "files": [{"sha": "3d77381e2e930020f076cf3ddfd2a58f76071c98", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d714b9790b59673ea66d837063e044be136e4f09/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d714b9790b59673ea66d837063e044be136e4f09/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d714b9790b59673ea66d837063e044be136e4f09", "patch": "@@ -2686,7 +2686,7 @@ impl<'a> LoweringContext<'a> {\n         let parent_def = self.parent_def.unwrap();\n         let def_id = {\n             let defs = self.resolver.definitions();\n-            let def_path_data = DefPathData::Binding(Ident::with_empty_ctxt(name));\n+            let def_path_data = DefPathData::Binding(name);\n             let def_index = defs\n                 .create_def_with_parent(parent_def, id, def_path_data, REGULAR_SPACE, Mark::root());\n             DefId::local(def_index)"}, {"sha": "7fbefa5788b2608a90a5d0488fe50b9199d7984c", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d714b9790b59673ea66d837063e044be136e4f09/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d714b9790b59673ea66d837063e044be136e4f09/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=d714b9790b59673ea66d837063e044be136e4f09", "patch": "@@ -15,6 +15,7 @@ use syntax::ast::*;\n use syntax::ext::hygiene::Mark;\n use syntax::visit;\n use syntax::symbol::keywords;\n+use syntax::symbol::Symbol;\n \n use hir::map::{ITEM_LIKE_SPACE, REGULAR_SPACE};\n \n@@ -103,14 +104,14 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 DefPathData::Impl,\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) | ItemKind::Trait(..) |\n             ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) | ItemKind::Ty(..) =>\n-                DefPathData::TypeNs(i.ident.modern()),\n+                DefPathData::TypeNs(i.ident.name),\n             ItemKind::Mod(..) if i.ident == keywords::Invalid.ident() => {\n                 return visit::walk_item(self, i);\n             }\n-            ItemKind::Mod(..) => DefPathData::Module(i.ident.modern()),\n+            ItemKind::Mod(..) => DefPathData::Module(i.ident.name),\n             ItemKind::Static(..) | ItemKind::Const(..) | ItemKind::Fn(..) =>\n-                DefPathData::ValueNs(i.ident.modern()),\n-            ItemKind::MacroDef(..) => DefPathData::MacroDef(i.ident.modern()),\n+                DefPathData::ValueNs(i.ident.name),\n+            ItemKind::MacroDef(..) => DefPathData::MacroDef(i.ident.name),\n             ItemKind::Mac(..) => return self.visit_macro_invoc(i.id, false),\n             ItemKind::GlobalAsm(..) => DefPathData::Misc,\n             ItemKind::Use(ref view_path) => {\n@@ -138,13 +139,13 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     for v in &enum_definition.variants {\n                         let variant_def_index =\n                             this.create_def(v.node.data.id(),\n-                                            DefPathData::EnumVariant(v.node.name.modern()),\n+                                            DefPathData::EnumVariant(v.node.name.name),\n                                             REGULAR_SPACE);\n                         this.with_parent(variant_def_index, |this| {\n                             for (index, field) in v.node.data.fields().iter().enumerate() {\n-                                let ident = field.ident.map(Ident::modern)\n-                                    .unwrap_or_else(|| Ident::from_str(&index.to_string()));\n-                                this.create_def(field.id, DefPathData::Field(ident), REGULAR_SPACE);\n+                                let name = field.ident.map(|ident| ident.name)\n+                                    .unwrap_or_else(|| Symbol::intern(&index.to_string()));\n+                                this.create_def(field.id, DefPathData::Field(name), REGULAR_SPACE);\n                             }\n \n                             if let Some(ref expr) = v.node.disr_expr {\n@@ -162,9 +163,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     }\n \n                     for (index, field) in struct_def.fields().iter().enumerate() {\n-                        let ident = field.ident.map(Ident::modern)\n-                            .unwrap_or_else(|| Ident::from_str(&index.to_string()));\n-                        this.create_def(field.id, DefPathData::Field(ident), REGULAR_SPACE);\n+                        let name = field.ident.map(|ident| ident.name)\n+                            .unwrap_or_else(|| Symbol::intern(&index.to_string()));\n+                        this.create_def(field.id, DefPathData::Field(name), REGULAR_SPACE);\n                     }\n                 }\n                 _ => {}\n@@ -175,7 +176,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_foreign_item(&mut self, foreign_item: &'a ForeignItem) {\n         let def = self.create_def(foreign_item.id,\n-                                  DefPathData::ValueNs(foreign_item.ident.modern()),\n+                                  DefPathData::ValueNs(foreign_item.ident.name),\n                                   REGULAR_SPACE);\n \n         self.with_parent(def, |this| {\n@@ -186,7 +187,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_generics(&mut self, generics: &'a Generics) {\n         for ty_param in generics.ty_params.iter() {\n             self.create_def(ty_param.id,\n-                            DefPathData::TypeParam(ty_param.ident.modern()),\n+                            DefPathData::TypeParam(ty_param.ident.name),\n                             REGULAR_SPACE);\n         }\n \n@@ -196,8 +197,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_trait_item(&mut self, ti: &'a TraitItem) {\n         let def_data = match ti.node {\n             TraitItemKind::Method(..) | TraitItemKind::Const(..) =>\n-                DefPathData::ValueNs(ti.ident.modern()),\n-            TraitItemKind::Type(..) => DefPathData::TypeNs(ti.ident.modern()),\n+                DefPathData::ValueNs(ti.ident.name),\n+            TraitItemKind::Type(..) => DefPathData::TypeNs(ti.ident.name),\n             TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id, false),\n         };\n \n@@ -214,8 +215,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n         let def_data = match ii.node {\n             ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n-                DefPathData::ValueNs(ii.ident.modern()),\n-            ImplItemKind::Type(..) => DefPathData::TypeNs(ii.ident.modern()),\n+                DefPathData::ValueNs(ii.ident.name),\n+            ImplItemKind::Type(..) => DefPathData::TypeNs(ii.ident.name),\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id, false),\n         };\n \n@@ -236,7 +237,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             PatKind::Mac(..) => return self.visit_macro_invoc(pat.id, false),\n             PatKind::Ident(_, id, _) => {\n                 let def = self.create_def(pat.id,\n-                                          DefPathData::Binding(id.node.modern()),\n+                                          DefPathData::Binding(id.node.name),\n                                           REGULAR_SPACE);\n                 self.parent_def = Some(def);\n             }\n@@ -281,7 +282,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_lifetime_def(&mut self, def: &'a LifetimeDef) {\n         self.create_def(def.lifetime.id,\n-                        DefPathData::LifetimeDef(def.lifetime.ident.modern()),\n+                        DefPathData::LifetimeDef(def.lifetime.ident.name),\n                         REGULAR_SPACE);\n     }\n "}, {"sha": "c969aef675ff9e0a162ad8410cc074d80da72625", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 72, "deletions": 67, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/d714b9790b59673ea66d837063e044be136e4f09/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d714b9790b59673ea66d837063e044be136e4f09/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=d714b9790b59673ea66d837063e044be136e4f09", "patch": "@@ -24,8 +24,8 @@ use rustc_data_structures::stable_hasher::StableHasher;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use std::fmt::Write;\n use std::hash::Hash;\n-use syntax::ast::{self, Ident};\n-use syntax::ext::hygiene::{Mark, SyntaxContext};\n+use syntax::ast;\n+use syntax::ext::hygiene::Mark;\n use syntax::symbol::{Symbol, InternedString};\n use ty::TyCtxt;\n use util::nodemap::NodeMap;\n@@ -248,7 +248,39 @@ impl DefKey {\n         // and the special \"root_parent\" below.\n         0u8.hash(&mut hasher);\n         parent_hash.hash(&mut hasher);\n-        self.disambiguated_data.hash(&mut hasher);\n+\n+        let DisambiguatedDefPathData {\n+            ref data,\n+            disambiguator,\n+        } = self.disambiguated_data;\n+\n+        ::std::mem::discriminant(data).hash(&mut hasher);\n+        match *data {\n+            DefPathData::TypeNs(name) |\n+            DefPathData::ValueNs(name) |\n+            DefPathData::Module(name) |\n+            DefPathData::MacroDef(name) |\n+            DefPathData::TypeParam(name) |\n+            DefPathData::LifetimeDef(name) |\n+            DefPathData::EnumVariant(name) |\n+            DefPathData::Binding(name) |\n+            DefPathData::Field(name) |\n+            DefPathData::GlobalMetaData(name) => {\n+                (*name.as_str()).hash(&mut hasher);\n+            }\n+\n+            DefPathData::Impl |\n+            DefPathData::CrateRoot |\n+            DefPathData::Misc |\n+            DefPathData::ClosureExpr |\n+            DefPathData::StructCtor |\n+            DefPathData::Initializer |\n+            DefPathData::ImplTrait |\n+            DefPathData::Typeof => {}\n+        };\n+\n+        disambiguator.hash(&mut hasher);\n+\n         DefPathHash(hasher.finish())\n     }\n \n@@ -354,7 +386,7 @@ impl DefPath {\n     }\n }\n \n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, Eq, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub enum DefPathData {\n     // Root: these should only be used for the root nodes, because\n     // they are treated specially by the `def_path` function.\n@@ -368,31 +400,31 @@ pub enum DefPathData {\n     /// An impl\n     Impl,\n     /// Something in the type NS\n-    TypeNs(Ident),\n+    TypeNs(Symbol),\n     /// Something in the value NS\n-    ValueNs(Ident),\n+    ValueNs(Symbol),\n     /// A module declaration\n-    Module(Ident),\n+    Module(Symbol),\n     /// A macro rule\n-    MacroDef(Ident),\n+    MacroDef(Symbol),\n     /// A closure expression\n     ClosureExpr,\n \n     // Subportions of items\n     /// A type parameter (generic parameter)\n-    TypeParam(Ident),\n+    TypeParam(Symbol),\n     /// A lifetime definition\n-    LifetimeDef(Ident),\n+    LifetimeDef(Symbol),\n     /// A variant of a enum\n-    EnumVariant(Ident),\n+    EnumVariant(Symbol),\n     /// A struct field\n-    Field(Ident),\n+    Field(Symbol),\n     /// Implicit ctor for a tuple-like struct\n     StructCtor,\n     /// Initializer for a const\n     Initializer,\n     /// Pattern binding\n-    Binding(Ident),\n+    Binding(Symbol),\n     /// An `impl Trait` type node.\n     ImplTrait,\n     /// A `typeof` type node.\n@@ -401,7 +433,7 @@ pub enum DefPathData {\n     /// GlobalMetaData identifies a piece of crate metadata that is global to\n     /// a whole crate (as opposed to just one item). GlobalMetaData components\n     /// are only supposed to show up right below the crate root.\n-    GlobalMetaData(Ident)\n+    GlobalMetaData(Symbol)\n }\n \n #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug,\n@@ -604,19 +636,19 @@ impl Definitions {\n }\n \n impl DefPathData {\n-    pub fn get_opt_ident(&self) -> Option<Ident> {\n+    pub fn get_opt_name(&self) -> Option<Symbol> {\n         use self::DefPathData::*;\n         match *self {\n-            TypeNs(ident) |\n-            ValueNs(ident) |\n-            Module(ident) |\n-            MacroDef(ident) |\n-            TypeParam(ident) |\n-            LifetimeDef(ident) |\n-            EnumVariant(ident) |\n-            Binding(ident) |\n-            Field(ident) |\n-            GlobalMetaData(ident) => Some(ident),\n+            TypeNs(name) |\n+            ValueNs(name) |\n+            Module(name) |\n+            MacroDef(name) |\n+            TypeParam(name) |\n+            LifetimeDef(name) |\n+            EnumVariant(name) |\n+            Binding(name) |\n+            Field(name) |\n+            GlobalMetaData(name) => Some(name),\n \n             Impl |\n             CrateRoot |\n@@ -629,24 +661,20 @@ impl DefPathData {\n         }\n     }\n \n-    pub fn get_opt_name(&self) -> Option<ast::Name> {\n-        self.get_opt_ident().map(|ident| ident.name)\n-    }\n-\n     pub fn as_interned_str(&self) -> InternedString {\n         use self::DefPathData::*;\n         let s = match *self {\n-            TypeNs(ident) |\n-            ValueNs(ident) |\n-            Module(ident) |\n-            MacroDef(ident) |\n-            TypeParam(ident) |\n-            LifetimeDef(ident) |\n-            EnumVariant(ident) |\n-            Binding(ident) |\n-            Field(ident) |\n-            GlobalMetaData(ident) => {\n-                return ident.name.as_str();\n+            TypeNs(name) |\n+            ValueNs(name) |\n+            Module(name) |\n+            MacroDef(name) |\n+            TypeParam(name) |\n+            LifetimeDef(name) |\n+            EnumVariant(name) |\n+            Binding(name) |\n+            Field(name) |\n+            GlobalMetaData(name) => {\n+                return name.as_str();\n             }\n \n             // note that this does not show up in user printouts\n@@ -669,29 +697,6 @@ impl DefPathData {\n     }\n }\n \n-impl Eq for DefPathData {}\n-impl PartialEq for DefPathData {\n-    fn eq(&self, other: &DefPathData) -> bool {\n-        ::std::mem::discriminant(self) == ::std::mem::discriminant(other) &&\n-        self.get_opt_ident() == other.get_opt_ident()\n-    }\n-}\n-\n-impl ::std::hash::Hash for DefPathData {\n-    fn hash<H: ::std::hash::Hasher>(&self, hasher: &mut H) {\n-        ::std::mem::discriminant(self).hash(hasher);\n-        if let Some(ident) = self.get_opt_ident() {\n-            if ident.ctxt == SyntaxContext::empty() && ident.name == ident.name.interned() {\n-                ident.name.as_str().hash(hasher)\n-            } else {\n-                // FIXME(jseyfried) implement stable hashing for idents with macros 2.0 hygiene info\n-                ident.hash(hasher)\n-            }\n-        }\n-    }\n-}\n-\n-\n // We define the GlobalMetaDataKind enum with this macro because we want to\n // make sure that we exhaustively iterate over all variants when registering\n // the corresponding DefIndices in the DefTable.\n@@ -712,7 +717,7 @@ macro_rules! define_global_metadata_kind {\n                     definitions.create_def_with_parent(\n                         CRATE_DEF_INDEX,\n                         ast::DUMMY_NODE_ID,\n-                        DefPathData::GlobalMetaData(instance.ident()),\n+                        DefPathData::GlobalMetaData(instance.name()),\n                         DefIndexAddressSpace::High,\n                         Mark::root()\n                     );\n@@ -726,15 +731,15 @@ macro_rules! define_global_metadata_kind {\n                 let def_key = DefKey {\n                     parent: Some(CRATE_DEF_INDEX),\n                     disambiguated_data: DisambiguatedDefPathData {\n-                        data: DefPathData::GlobalMetaData(self.ident()),\n+                        data: DefPathData::GlobalMetaData(self.name()),\n                         disambiguator: 0,\n                     }\n                 };\n \n                 def_path_table.key_to_index[&def_key]\n             }\n \n-            fn ident(&self) -> Ident {\n+            fn name(&self) -> Symbol {\n \n                 let string = match *self {\n                     $(\n@@ -744,7 +749,7 @@ macro_rules! define_global_metadata_kind {\n                     )*\n                 };\n \n-                Ident::from_str(string)\n+                Symbol::intern(string)\n             }\n         }\n     )"}]}