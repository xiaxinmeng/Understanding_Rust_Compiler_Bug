{"sha": "1b3ef660261c880783db0154b89c09a1c4608845", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiM2VmNjYwMjYxYzg4MDc4M2RiMDE1NGI4OWMwOWExYzQ2MDg4NDU=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-06-27T21:54:19Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-06-30T16:10:44Z"}, "message": "Switch crate_extern_paths to a query, and tweak wording.", "tree": {"sha": "e429cfc4aebc74f0878c808979a75a7be9a054be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e429cfc4aebc74f0878c808979a75a7be9a054be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b3ef660261c880783db0154b89c09a1c4608845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b3ef660261c880783db0154b89c09a1c4608845", "html_url": "https://github.com/rust-lang/rust/commit/1b3ef660261c880783db0154b89c09a1c4608845", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b3ef660261c880783db0154b89c09a1c4608845/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c225e5c5cb1200f46b83752e160b489eba1cd597", "url": "https://api.github.com/repos/rust-lang/rust/commits/c225e5c5cb1200f46b83752e160b489eba1cd597", "html_url": "https://github.com/rust-lang/rust/commit/c225e5c5cb1200f46b83752e160b489eba1cd597"}], "stats": {"total": 47, "additions": 20, "deletions": 27}, "files": [{"sha": "abbe45fe02e25f3c2162a185ce75e9eb5e3eec61", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b3ef660261c880783db0154b89c09a1c4608845/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3ef660261c880783db0154b89c09a1c4608845/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=1b3ef660261c880783db0154b89c09a1c4608845", "patch": "@@ -27,7 +27,6 @@ use rustc_span::symbol::{Ident, Symbol};\n use rustc_data_structures::sync::Lrc;\n use smallvec::SmallVec;\n use std::any::Any;\n-use std::path::PathBuf;\n \n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n@@ -240,6 +239,8 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n         syms\n     }\n+\n+    crate_extern_paths => { cdata.source().paths().cloned().collect() }\n }\n \n pub fn provide(providers: &mut Providers<'_>) {\n@@ -514,8 +515,4 @@ impl CrateStore for CStore {\n     fn allocator_kind(&self) -> Option<AllocatorKind> {\n         self.allocator_kind()\n     }\n-\n-    fn crate_extern_paths(&self, cnum: CrateNum) -> Vec<PathBuf> {\n-        self.get_crate_data(cnum).source().paths().cloned().collect()\n-    }\n }"}, {"sha": "97e877df96663956e1db36d22c8c0e75672d9657", "filename": "src/librustc_middle/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b3ef660261c880783db0154b89c09a1c4608845/src%2Flibrustc_middle%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3ef660261c880783db0154b89c09a1c4608845/src%2Flibrustc_middle%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fcstore.rs?ref=1b3ef660261c880783db0154b89c09a1c4608845", "patch": "@@ -203,7 +203,6 @@ pub trait CrateStore {\n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata;\n     fn metadata_encoding_version(&self) -> &[u8];\n     fn allocator_kind(&self) -> Option<AllocatorKind>;\n-    fn crate_extern_paths(&self, cnum: CrateNum) -> Vec<PathBuf>;\n }\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync;"}, {"sha": "e7f9ad9d1cfd75443011b9d340e553c8dbce7a98", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b3ef660261c880783db0154b89c09a1c4608845/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3ef660261c880783db0154b89c09a1c4608845/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=1b3ef660261c880783db0154b89c09a1c4608845", "patch": "@@ -1042,6 +1042,10 @@ rustc_queries! {\n             eval_always\n             desc { \"looking up the extra filename for a crate\" }\n         }\n+        query crate_extern_paths(_: CrateNum) -> Vec<PathBuf> {\n+            eval_always\n+            desc { \"looking up the paths for extern crates\" }\n+        }\n     }\n \n     TypeChecking {"}, {"sha": "e2f601371b1eeab9a07941bab20fe4ea72ffe076", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b3ef660261c880783db0154b89c09a1c4608845/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3ef660261c880783db0154b89c09a1c4608845/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=1b3ef660261c880783db0154b89c09a1c4608845", "patch": "@@ -62,7 +62,6 @@ use std::hash::{Hash, Hasher};\n use std::iter;\n use std::mem;\n use std::ops::{Bound, Deref};\n-use std::path::PathBuf;\n use std::sync::Arc;\n \n type InternedSet<'tcx, T> = ShardedHashMap<Interned<'tcx, T>, ()>;\n@@ -1253,14 +1252,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         if cnum == LOCAL_CRATE { false } else { self.cstore.crate_is_private_dep_untracked(cnum) }\n     }\n \n-    pub fn crate_extern_paths(&self, cnum: CrateNum) -> Vec<PathBuf> {\n-        if cnum == LOCAL_CRATE {\n-            self.sess.local_crate_source_file.iter().cloned().collect()\n-        } else {\n-            self.cstore.crate_extern_paths(cnum)\n-        }\n-    }\n-\n     #[inline]\n     pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {\n         if let Some(def_id) = def_id.as_local() {"}, {"sha": "2ad49b1acce435c9ad1cac9f11bda2cdf60e0730", "filename": "src/librustc_middle/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b3ef660261c880783db0154b89c09a1c4608845/src%2Flibrustc_middle%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3ef660261c880783db0154b89c09a1c4608845/src%2Flibrustc_middle%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fmod.rs?ref=1b3ef660261c880783db0154b89c09a1c4608845", "patch": "@@ -57,6 +57,7 @@ use rustc_span::{Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::collections::BTreeMap;\n use std::ops::Deref;\n+use std::path::PathBuf;\n use std::sync::Arc;\n \n #[macro_use]"}, {"sha": "0326591a931f5e3984d6859c585750b43c230ec6", "filename": "src/librustc_passes/lang_items.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1b3ef660261c880783db0154b89c09a1c4608845/src%2Flibrustc_passes%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3ef660261c880783db0154b89c09a1c4608845/src%2Flibrustc_passes%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flang_items.rs?ref=1b3ef660261c880783db0154b89c09a1c4608845", "patch": "@@ -147,23 +147,24 @@ impl LanguageItemCollector<'tcx> {\n                         }\n                     }\n                     let mut note_def = |which, def_id: DefId| {\n-                        let location = if def_id.is_local() {\n-                            \"the local crate\".to_string()\n+                        let crate_name = self.tcx.crate_name(def_id.krate);\n+                        let note = if def_id.is_local() {\n+                            format!(\"{} definition in the local crate (`{}`)\", which, crate_name)\n                         } else {\n                             let paths: Vec<_> = self\n                                 .tcx\n                                 .crate_extern_paths(def_id.krate)\n                                 .iter()\n                                 .map(|p| p.display().to_string())\n                                 .collect();\n-                            paths.join(\", \")\n+                            format!(\n+                                \"{} definition in `{}` loaded from {}\",\n+                                which,\n+                                crate_name,\n+                                paths.join(\", \")\n+                            )\n                         };\n-                        err.note(&format!(\n-                            \"{} definition in `{}` loaded from {}\",\n-                            which,\n-                            self.tcx.crate_name(def_id.krate),\n-                            location\n-                        ));\n+                        err.note(&note);\n                     };\n                     note_def(\"first\", original_def_id);\n                     note_def(\"second\", item_def_id);"}, {"sha": "61cccf40ed8a5133526ea9658019b050c7f4c6a2", "filename": "src/test/ui/duplicate_entry_error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b3ef660261c880783db0154b89c09a1c4608845/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b3ef660261c880783db0154b89c09a1c4608845/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr?ref=1b3ef660261c880783db0154b89c09a1c4608845", "patch": "@@ -9,7 +9,7 @@ LL | | }\n    |\n    = note: the lang item is first defined in crate `std` (which `duplicate_entry_error` depends on)\n    = note: first definition in `std` loaded from SYSROOT/libstd-*.rlib\n-   = note: second definition in `duplicate_entry_error` loaded from the local crate\n+   = note: second definition in the local crate (`duplicate_entry_error`)\n \n error: aborting due to previous error\n "}, {"sha": "7445c2880af1c0a98e8b858439fa518a6cad7eb8", "filename": "src/test/ui/error-codes/E0152.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b3ef660261c880783db0154b89c09a1c4608845/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b3ef660261c880783db0154b89c09a1c4608845/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr?ref=1b3ef660261c880783db0154b89c09a1c4608845", "patch": "@@ -6,7 +6,7 @@ LL | struct Foo;\n    |\n    = note: the lang item is first defined in crate `alloc` (which `std` depends on)\n    = note: first definition in `alloc` loaded from SYSROOT/liballoc-*.rlib\n-   = note: second definition in `E0152` loaded from the local crate\n+   = note: second definition in the local crate (`E0152`)\n \n error: aborting due to previous error\n "}, {"sha": "bb656089bcaffb0e20f3754722c2fd285dcda829", "filename": "src/test/ui/panic-handler/panic-handler-std.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b3ef660261c880783db0154b89c09a1c4608845/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b3ef660261c880783db0154b89c09a1c4608845/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr?ref=1b3ef660261c880783db0154b89c09a1c4608845", "patch": "@@ -8,7 +8,7 @@ LL | | }\n    |\n    = note: the lang item is first defined in crate `std` (which `panic_handler_std` depends on)\n    = note: first definition in `std` loaded from SYSROOT/libstd-*.rlib\n-   = note: second definition in `panic_handler_std` loaded from the local crate\n+   = note: second definition in the local crate (`panic_handler_std`)\n \n error: argument should be `&PanicInfo`\n   --> $DIR/panic-handler-std.rs:8:16"}]}