{"sha": "f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121", "node_id": "C_kwDOAAsO6NoAKGY1ZjY4ZTRkYzczYmEzN2VhYTA1N2I2YjdlNDc2YjRiYzRhMDYxMjE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-18T11:25:54Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-18T11:25:54Z"}, "message": "Make workspace fields of config private", "tree": {"sha": "4342a908cd641dd52502a06b853b9ba904cb1c6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4342a908cd641dd52502a06b853b9ba904cb1c6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121", "html_url": "https://github.com/rust-lang/rust/commit/f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b835f334f2c61d66c8c6554ec90325992752ce3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b835f334f2c61d66c8c6554ec90325992752ce3", "html_url": "https://github.com/rust-lang/rust/commit/9b835f334f2c61d66c8c6554ec90325992752ce3"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "835bc785c4e7fab5eb1eb1bdf5e5d435a6f228d7", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121", "patch": "@@ -27,7 +27,7 @@ use project_model::{\n };\n use rustc_hash::{FxHashMap, FxHashSet};\n use serde::{de::DeserializeOwned, Deserialize};\n-use vfs::AbsPathBuf;\n+use vfs::{AbsPath, AbsPathBuf};\n \n use crate::{\n     caps::completion_item_edit_resolve,\n@@ -535,8 +535,9 @@ impl Default for ConfigData {\n \n #[derive(Debug, Clone)]\n pub struct Config {\n-    pub discovered_projects: Option<Vec<ProjectManifest>>,\n-    pub workspace_roots: Vec<AbsPathBuf>,\n+    discovered_projects: Option<Vec<ProjectManifest>>,\n+    /// The workspace roots as registered by the LSP client\n+    workspace_roots: Vec<AbsPathBuf>,\n     caps: lsp_types::ClientCapabilities,\n     root_path: AbsPathBuf,\n     data: ConfigData,\n@@ -758,6 +759,16 @@ impl Config {\n         self.discovered_projects = Some(discovered);\n     }\n \n+    pub fn remove_workspace(&mut self, path: &AbsPath) {\n+        if let Some(position) = self.workspace_roots.iter().position(|it| it == path) {\n+            self.workspace_roots.remove(position);\n+        }\n+    }\n+\n+    pub fn add_workspaces(&mut self, paths: impl Iterator<Item = AbsPathBuf>) {\n+        self.workspace_roots.extend(paths);\n+    }\n+\n     pub fn update(&mut self, mut json: serde_json::Value) -> Result<(), ConfigUpdateError> {\n         tracing::info!(\"updating config from JSON: {:#}\", json);\n         if json.is_null() || json.as_object().map_or(false, |it| it.is_empty()) {"}, {"sha": "bcc3eed4ff9c8f7d188c2bd6c9b745df36e2aad3", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121", "patch": "@@ -777,14 +777,7 @@ pub(crate) fn handle_runnables(\n             }\n         }\n         None => {\n-            if !snap.config.linked_projects().is_empty()\n-                || !snap\n-                    .config\n-                    .discovered_projects\n-                    .as_ref()\n-                    .map(|projects| projects.is_empty())\n-                    .unwrap_or(true)\n-            {\n+            if !snap.config.linked_projects().is_empty() {\n                 res.push(lsp_ext::Runnable {\n                     label: \"cargo check --workspace\".to_string(),\n                     location: None,"}, {"sha": "afbc2bb6c21d48a4d0af7dc7eb3784efc6d8a06c", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121", "patch": "@@ -908,8 +908,10 @@ impl GlobalState {\n                     // Re-fetch workspaces if a workspace related file has changed\n                     if let Some(abs_path) = vfs_path.as_path() {\n                         if reload::should_refresh_for_change(abs_path, ChangeKind::Modify) {\n-                            this.fetch_workspaces_queue\n-                                .request_op(format!(\"DidSaveTextDocument {}\", abs_path.display()), ());\n+                            this.fetch_workspaces_queue.request_op(\n+                                format!(\"DidSaveTextDocument {}\", abs_path.display()),\n+                                (),\n+                            );\n                         }\n                     }\n \n@@ -972,8 +974,7 @@ impl GlobalState {\n                 for workspace in params.event.removed {\n                     let Ok(path) = workspace.uri.to_file_path() else { continue };\n                     let Ok(path) = AbsPathBuf::try_from(path) else { continue };\n-                    let Some(position) = config.workspace_roots.iter().position(|it| it == &path) else { continue };\n-                    config.workspace_roots.remove(position);\n+                    config.remove_workspace(&path);\n                 }\n \n                 let added = params\n@@ -982,11 +983,12 @@ impl GlobalState {\n                     .into_iter()\n                     .filter_map(|it| it.uri.to_file_path().ok())\n                     .filter_map(|it| AbsPathBuf::try_from(it).ok());\n-                config.workspace_roots.extend(added);\n-                    if !config.has_linked_projects() && config.detached_files().is_empty() {\n-                        config.rediscover_workspaces();\n-                        this.fetch_workspaces_queue.request_op(\"client workspaces changed\".to_string(), ())\n-                    }\n+                config.add_workspaces(added);\n+                if !config.has_linked_projects() && config.detached_files().is_empty() {\n+                    config.rediscover_workspaces();\n+                    this.fetch_workspaces_queue\n+                        .request_op(\"client workspaces changed\".to_string(), ())\n+                }\n \n                 Ok(())\n             })?"}, {"sha": "f3481914ed1a2e50532ddc9f2e945b016bf805d5", "filename": "crates/rust-analyzer/tests/slow-tests/support.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs?ref=f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121", "patch": "@@ -101,10 +101,6 @@ impl<'a> Project<'a> {\n         if roots.is_empty() {\n             roots.push(tmp_dir_path.clone());\n         }\n-        let discovered_projects = roots\n-            .into_iter()\n-            .map(|it| ProjectManifest::discover_single(&it).unwrap())\n-            .collect::<Vec<_>>();\n \n         let mut config = Config::new(\n             tmp_dir_path,\n@@ -144,10 +140,10 @@ impl<'a> Project<'a> {\n                 })),\n                 ..Default::default()\n             },\n-            Vec::new(),\n+            roots,\n         );\n-        config.discovered_projects = Some(discovered_projects);\n         config.update(self.config).expect(\"invalid config\");\n+        config.rediscover_workspaces();\n \n         Server::new(tmp_dir, config)\n     }"}]}