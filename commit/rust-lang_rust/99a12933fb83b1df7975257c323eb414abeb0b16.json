{"sha": "99a12933fb83b1df7975257c323eb414abeb0b16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YTEyOTMzZmI4M2IxZGY3OTc1MjU3YzMyM2ViNDE0YWJlYjBiMTY=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-20T19:39:34Z"}, "committer": {"name": "Jared Roesch", "email": "jroesch@MacBook.home", "date": "2015-07-26T02:57:59Z"}, "message": "Rework cross crate error messages", "tree": {"sha": "2e8261adf4d7ac9b47c80731f6b816f025f95ad7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e8261adf4d7ac9b47c80731f6b816f025f95ad7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99a12933fb83b1df7975257c323eb414abeb0b16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99a12933fb83b1df7975257c323eb414abeb0b16", "html_url": "https://github.com/rust-lang/rust/commit/99a12933fb83b1df7975257c323eb414abeb0b16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99a12933fb83b1df7975257c323eb414abeb0b16/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed3fbba797b0a68b797469f49f878307cc64c993", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3fbba797b0a68b797469f49f878307cc64c993", "html_url": "https://github.com/rust-lang/rust/commit/ed3fbba797b0a68b797469f49f878307cc64c993"}], "stats": {"total": 72, "additions": 52, "deletions": 20}, "files": [{"sha": "fb11aaed6195825b2ce9801207c46367b8bf2dbb", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99a12933fb83b1df7975257c323eb414abeb0b16/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a12933fb83b1df7975257c323eb414abeb0b16/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=99a12933fb83b1df7975257c323eb414abeb0b16", "patch": "@@ -56,6 +56,7 @@\n #![feature(slice_splits)]\n #![feature(slice_patterns)]\n #![feature(slice_position_elem)]\n+#![feature(slice_concat_ext)]\n #![feature(staged_api)]\n #![feature(str_char)]\n #![feature(str_match_indices)]"}, {"sha": "f63154af724260d2c13d899f490ee632d679dd35", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99a12933fb83b1df7975257c323eb414abeb0b16/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a12933fb83b1df7975257c323eb414abeb0b16/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=99a12933fb83b1df7975257c323eb414abeb0b16", "patch": "@@ -1061,11 +1061,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         for def in defs.iter() {\n             let default = def.default.map(|default| {\n-                let definition_span = self.tcx.map.opt_span(def.def_id.node);\n                 type_variable::Default {\n                     ty: default.subst_spanned(self.tcx, substs, Some(span)),\n                     origin_span: span,\n-                    definition_span: definition_span.unwrap_or(DUMMY_SP)\n+                    def_id: def.default_def_id\n                 }\n             });\n "}, {"sha": "3684651f85be6e0bbf6fadb95d109c60d31e2093", "filename": "src/librustc/middle/infer/type_variable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99a12933fb83b1df7975257c323eb414abeb0b16/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a12933fb83b1df7975257c323eb414abeb0b16/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs?ref=99a12933fb83b1df7975257c323eb414abeb0b16", "patch": "@@ -12,6 +12,7 @@ pub use self::RelationDir::*;\n use self::TypeVariableValue::*;\n use self::UndoEntry::*;\n use middle::ty::{self, Ty};\n+use syntax::ast::DefId;\n use syntax::codemap::Span;\n \n use std::cmp::min;\n@@ -45,7 +46,7 @@ pub struct Default<'tcx> {\n     /// The span where the default was incurred\n     pub origin_span: Span,\n     /// The definition that the default originates from\n-    pub definition_span: Span\n+    pub def_id: DefId\n }\n \n pub struct Snapshot {"}, {"sha": "3bda1730e63b85925342e412ddf903a59cbed8f5", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/99a12933fb83b1df7975257c323eb414abeb0b16/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a12933fb83b1df7975257c323eb414abeb0b16/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=99a12933fb83b1df7975257c323eb414abeb0b16", "patch": "@@ -79,6 +79,7 @@ use std::ops;\n use std::rc::Rc;\n use std::vec::IntoIter;\n use collections::enum_set::{self, EnumSet, CLike};\n+use collections::slice::SliceConcatExt;\n use std::collections::{HashMap, HashSet};\n use syntax::abi;\n use syntax::ast::{CrateNum, DefId, ItemImpl, ItemTrait, LOCAL_CRATE};\n@@ -5448,17 +5449,47 @@ impl<'tcx> ctxt<'tcx> {\n                 let expected = values.expected;\n                 let found = values.found;\n                 self.sess.span_note(sp,\n-                    &format!(\"conflicting type parameter defaults {} and {}\",\n-                             expected.ty,\n-                             found.ty));\n-                self.sess.span_note(expected.definition_span,\n-                    &format!(\"a default was defined here...\"));\n+                                    &format!(\"conflicting type parameter defaults `{}` and `{}`\",\n+                                             expected.ty,\n+                                             found.ty));\n+\n+                match (expected.def_id.krate == ast::LOCAL_CRATE, self.map.opt_span(expected.def_id.node)) {\n+                    (true, Some(span)) => {\n+                        self.sess.span_note(span,\n+                                            &format!(\"a default was defined here...\"));\n+                    }\n+                    (_, _) => {\n+                        let elems = csearch::get_item_path(self, expected.def_id)\n+                                        .into_iter()\n+                                        .map(|p| p.to_string())\n+                                        .collect::<Vec<_>>();\n+                        self.sess.note(\n+                            &format!(\"a default is defined on `{}`\", \n+                                     elems.join(\"::\")));\n+                    }\n+                }\n+\n                 self.sess.span_note(expected.origin_span,\n-                    &format!(\"...that was applied to an unconstrained type variable here\"));\n-                self.sess.span_note(found.definition_span,\n-                    &format!(\"a second default was defined here...\"));\n+                                    &format!(\"...that was applied to an unconstrained type variable here\"));\n+\n+                match (found.def_id.krate == ast::LOCAL_CRATE, self.map.opt_span(found.def_id.node)) {\n+                    (true, Some(span)) => {\n+                        self.sess.span_note(span,\n+                                            &format!(\"a second default was defined here...\"));\n+                    }\n+                    (_, _) => {\n+                        let elems = csearch::get_item_path(self, found.def_id)\n+                                        .into_iter()\n+                                        .map(|p| p.to_string())\n+                                        .collect::<Vec<_>>();\n+\n+                        self.sess.note(\n+                            &format!(\"a second default is defined on `{}`\", elems.join(\" \")));\n+                    }\n+                }\n+\n                 self.sess.span_note(found.origin_span,\n-                    &format!(\"...that also applies to the same type variable here\"));\n+                                    &format!(\"...that also applies to the same type variable here\"));\n             }\n             _ => {}\n         }"}, {"sha": "fd4cf6f28df91bec999a1f8ac82a750a835c78d4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99a12933fb83b1df7975257c323eb414abeb0b16/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a12933fb83b1df7975257c323eb414abeb0b16/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=99a12933fb83b1df7975257c323eb414abeb0b16", "patch": "@@ -1146,14 +1146,10 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n                 span: Span) -> Ty<'tcx> {\n         // Grab the default doing subsitution\n         let default = ty_param_def.and_then(|def| {\n-            let definition_span = self.tcx()\n-                                      .map\n-                                      .opt_span(def.def_id.node);\n-\n             def.default.map(|ty| type_variable::Default {\n                 ty: ty.subst_spanned(self.tcx(), substs.as_ref().unwrap(), Some(span)),\n                 origin_span: span,\n-                definition_span: definition_span.unwrap_or(codemap::DUMMY_SP)\n+                def_id: def.default_def_id\n             })\n         });\n \n@@ -1850,7 +1846,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .unwrap_or(type_variable::Default {\n                                 ty: self.infcx().next_ty_var(),\n                                 origin_span: codemap::DUMMY_SP,\n-                                definition_span: codemap::DUMMY_SP\n+                                def_id: local_def(0) // what do I put here?\n                             });\n \n                     self.infcx().report_conflicting_default_types("}, {"sha": "d31a29ecc0e2c44ab8af461d26741eed352a9ba8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99a12933fb83b1df7975257c323eb414abeb0b16/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a12933fb83b1df7975257c323eb414abeb0b16/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=99a12933fb83b1df7975257c323eb414abeb0b16", "patch": "@@ -1647,12 +1647,14 @@ fn ty_generics_for_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     // the node id for the Self type parameter.\n     let param_id = trait_id;\n \n+    let parent = ccx.tcx.map.get_parent(param_id);\n+\n     let def = ty::TypeParameterDef {\n         space: SelfSpace,\n         index: 0,\n         name: special_idents::type_self.name,\n         def_id: local_def(param_id),\n-        default_def_id: local_def(param_id),\n+        default_def_id: local_def(parent),\n         default: None,\n         object_lifetime_default: ty::ObjectLifetimeDefault::BaseDefault,\n     };\n@@ -1921,13 +1923,15 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n         compute_object_lifetime_default(ccx, param.id,\n                                         &param.bounds, &ast_generics.where_clause);\n \n+    let parent = tcx.map.get_parent(param.id);\n+\n     let def = ty::TypeParameterDef {\n         space: space,\n         index: index,\n         name: param.ident.name,\n         def_id: local_def(param.id),\n         // what do I return? should this be an option as well\n-        default_def_id: local_def(param.default.as_ref().map(|d| d.id).unwrap_or(param.id)),\n+        default_def_id: local_def(parent),\n         default: default,\n         object_lifetime_default: object_lifetime_default,\n     };"}]}