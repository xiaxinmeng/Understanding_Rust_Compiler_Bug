{"sha": "553bb7f50aac5d062fd8ba534d18f70aaa9bd25b", "node_id": "C_kwDOAAsO6NoAKDU1M2JiN2Y1MGFhYzVkMDYyZmQ4YmE1MzRkMThmNzBhYWE5YmQyNWI", "commit": {"author": {"name": "Paul Horn", "email": "dev@knutwalker.engineer", "date": "2021-11-18T16:30:36Z"}, "committer": {"name": "Paul Horn", "email": "dev@knutwalker.engineer", "date": "2021-11-18T16:52:02Z"}, "message": "Allow clients to configure the global workspace search limit", "tree": {"sha": "5856550b97ce7750908182a912848e50a2a87475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5856550b97ce7750908182a912848e50a2a87475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/553bb7f50aac5d062fd8ba534d18f70aaa9bd25b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEezIwUV/Ip+3TBFF/k2HG+QFyO4EFAmGWhLIACgkQk2HG+QFy\nO4FeXA//SMKuWZBVknqP94+7XKWXNt+ePmqJgnzxWWCldCXKNOf4YirKmhbUAkff\n2OLk95Czd7puKMXCx/FCowh2ODQFlizdLucwlLX3EMxzvifT1r89RkuS8bP1weOj\n4lGl9+fvJgdcUA9Hp3C7KzEHJX49jVZfBmHwte+KYbjRht0sZIwWHyRP3UKJh2NU\nV5H58JsdvUfMOHaRCQILgBQVpEnkvLPXPks9sT8MTmDx3q1qfI8/Zka0fzloA9wA\npHe55LenTRO+wERYKC2oNc4SuCg/TzfJlaEe900uzV6jdCUX3PFWTA2mc7/6nhFH\nJR6iqAugGGyEXPn+nI4+XKTvoiqCsJnEYyrEanmcbjjme8V9/78UIsRMMCvXntrm\nMg74VA2Z/h4p377T+eEKsum0POvinMTP97Rs9yJrB2yiH2Ndjz9TXEeCz0RRJFlP\nlWlsqUfJRjBv8yLbVfyE/EW3/Um6d6XZCMRimgVafOLSlY0Qfwa+wyhMb1BJZOiG\nEB6kN0VqS/A15IimHwHyAky+ML6j69Eizw9RZLF9t0aVCOB1YWUf+Nl8DcZvyEG2\nRaNJdGL9JW6Y7MUZ4h4DY+GcHO2AOkfdvlIe8IfcH1uiimdN01CPYi6luI5Qez8M\n7G65GRQaUbyu5sqwgkTTsSYIpvmF8wM6YD0d1cnJUq73X3rimlE=\n=5CrQ\n-----END PGP SIGNATURE-----", "payload": "tree 5856550b97ce7750908182a912848e50a2a87475\nparent cfa26c3ac3d85d502f75c2f6b760aadcc997a1a8\nauthor Paul Horn <dev@knutwalker.engineer> 1637253036 +0100\ncommitter Paul Horn <dev@knutwalker.engineer> 1637254322 +0100\n\nAllow clients to configure the global workspace search limit\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/553bb7f50aac5d062fd8ba534d18f70aaa9bd25b", "html_url": "https://github.com/rust-lang/rust/commit/553bb7f50aac5d062fd8ba534d18f70aaa9bd25b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/553bb7f50aac5d062fd8ba534d18f70aaa9bd25b/comments", "author": {"login": "knutwalker", "id": 633183, "node_id": "MDQ6VXNlcjYzMzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/633183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/knutwalker", "html_url": "https://github.com/knutwalker", "followers_url": "https://api.github.com/users/knutwalker/followers", "following_url": "https://api.github.com/users/knutwalker/following{/other_user}", "gists_url": "https://api.github.com/users/knutwalker/gists{/gist_id}", "starred_url": "https://api.github.com/users/knutwalker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/knutwalker/subscriptions", "organizations_url": "https://api.github.com/users/knutwalker/orgs", "repos_url": "https://api.github.com/users/knutwalker/repos", "events_url": "https://api.github.com/users/knutwalker/events{/privacy}", "received_events_url": "https://api.github.com/users/knutwalker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "knutwalker", "id": 633183, "node_id": "MDQ6VXNlcjYzMzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/633183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/knutwalker", "html_url": "https://github.com/knutwalker", "followers_url": "https://api.github.com/users/knutwalker/followers", "following_url": "https://api.github.com/users/knutwalker/following{/other_user}", "gists_url": "https://api.github.com/users/knutwalker/gists{/gist_id}", "starred_url": "https://api.github.com/users/knutwalker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/knutwalker/subscriptions", "organizations_url": "https://api.github.com/users/knutwalker/orgs", "repos_url": "https://api.github.com/users/knutwalker/repos", "events_url": "https://api.github.com/users/knutwalker/events{/privacy}", "received_events_url": "https://api.github.com/users/knutwalker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa26c3ac3d85d502f75c2f6b760aadcc997a1a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa26c3ac3d85d502f75c2f6b760aadcc997a1a8", "html_url": "https://github.com/rust-lang/rust/commit/cfa26c3ac3d85d502f75c2f6b760aadcc997a1a8"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "b07afd5a6949eead8ade46777786979077c7a993", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/553bb7f50aac5d062fd8ba534d18f70aaa9bd25b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/553bb7f50aac5d062fd8ba534d18f70aaa9bd25b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=553bb7f50aac5d062fd8ba534d18f70aaa9bd25b", "patch": "@@ -288,6 +288,10 @@ config_data! {\n         workspace_symbol_search_scope: WorkspaceSymbolSearchScopeDef = \"\\\"workspace\\\"\",\n         /// Workspace symbol search kind.\n         workspace_symbol_search_kind: WorkspaceSymbolSearchKindDef = \"\\\"only_types\\\"\",\n+        /// Limits the number of items returned from a workspace symbol search (Defaults to 128).\n+        /// Some clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\n+        /// Other clients requires all results upfront and might require a higher limit.\n+        workspace_symbol_search_limit: usize = \"128\",\n     }\n }\n \n@@ -421,8 +425,10 @@ pub struct RunnablesConfig {\n pub struct WorkspaceSymbolConfig {\n     /// In what scope should the symbol be searched in.\n     pub search_scope: WorkspaceSymbolSearchScope,\n-    /// What kind of symbol is being search for.\n+    /// What kind of symbol is being searched for.\n     pub search_kind: WorkspaceSymbolSearchKind,\n+    /// How many items are returned at most.\n+    pub search_limit: usize,\n }\n \n pub struct ClientCommandsConfig {\n@@ -893,6 +899,7 @@ impl Config {\n                 WorkspaceSymbolSearchKindDef::OnlyTypes => WorkspaceSymbolSearchKind::OnlyTypes,\n                 WorkspaceSymbolSearchKindDef::AllSymbols => WorkspaceSymbolSearchKind::AllSymbols,\n             },\n+            search_limit: self.data.workspace_symbol_search_limit,\n         }\n     }\n \n@@ -1159,6 +1166,7 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n \n     match ty {\n         \"bool\" => set!(\"type\": \"boolean\"),\n+        \"usize\" => set!(\"type\": \"integer\", \"minimum\": 0),\n         \"String\" => set!(\"type\": \"string\"),\n         \"Vec<String>\" => set! {\n             \"type\": \"array\","}, {"sha": "5caf84ff8b517a34b593d7041bbd24f4eadbc34d", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/553bb7f50aac5d062fd8ba534d18f70aaa9bd25b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/553bb7f50aac5d062fd8ba534d18f70aaa9bd25b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=553bb7f50aac5d062fd8ba534d18f70aaa9bd25b", "patch": "@@ -34,7 +34,7 @@ use vfs::AbsPathBuf;\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n-    config::RustfmtConfig,\n+    config::{RustfmtConfig, WorkspaceSymbolConfig},\n     diff::diff,\n     from_proto,\n     global_state::{GlobalState, GlobalStateSnapshot},\n@@ -392,7 +392,9 @@ pub(crate) fn handle_workspace_symbol(\n ) -> Result<Option<Vec<SymbolInformation>>> {\n     let _p = profile::span(\"handle_workspace_symbol\");\n \n-    let (all_symbols, libs) = decide_search_scope_and_kind(&params, &snap);\n+    let config = snap.config.workspace_symbol();\n+    let (all_symbols, libs) = decide_search_scope_and_kind(&params, &config);\n+    let limit = config.search_limit;\n \n     let query = {\n         let query: String = params.query.chars().filter(|&c| c != '#' && c != '*').collect();\n@@ -403,28 +405,26 @@ pub(crate) fn handle_workspace_symbol(\n         if libs {\n             q.libs();\n         }\n-        q.limit(128);\n+        q.limit(limit);\n         q\n     };\n     let mut res = exec_query(&snap, query)?;\n     if res.is_empty() && !all_symbols {\n         let mut query = Query::new(params.query);\n-        query.limit(128);\n+        query.limit(limit);\n         res = exec_query(&snap, query)?;\n     }\n \n     return Ok(Some(res));\n \n     fn decide_search_scope_and_kind(\n         params: &WorkspaceSymbolParams,\n-        snap: &GlobalStateSnapshot,\n+        config: &WorkspaceSymbolConfig,\n     ) -> (bool, bool) {\n         // Support old-style parsing of markers in the query.\n         let mut all_symbols = params.query.contains('#');\n         let mut libs = params.query.contains('*');\n \n-        let config = snap.config.workspace_symbol();\n-\n         // If no explicit marker was set, check request params. If that's also empty\n         // use global config.\n         if !all_symbols {"}, {"sha": "8e4c3462b56189224b2d6f32327a38d9a31b269a", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/553bb7f50aac5d062fd8ba534d18f70aaa9bd25b/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/553bb7f50aac5d062fd8ba534d18f70aaa9bd25b/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=553bb7f50aac5d062fd8ba534d18f70aaa9bd25b", "patch": "@@ -461,3 +461,10 @@ Workspace symbol search scope.\n --\n Workspace symbol search kind.\n --\n+[[rust-analyzer.workspace.symbol.search.limit]]rust-analyzer.workspace.symbol.search.limit (default: `128`)::\n++\n+--\n+Limits the number of items returned from a workspace symbol search (Defaults to 128).\n+Some clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\n+Other clients requires all results upfront and might require a higher limit.\n+--"}, {"sha": "245aa80d457d50edc05b452e28294e7d7f4ba1a4", "filename": "editors/code/package.json", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/553bb7f50aac5d062fd8ba534d18f70aaa9bd25b/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/553bb7f50aac5d062fd8ba534d18f70aaa9bd25b/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=553bb7f50aac5d062fd8ba534d18f70aaa9bd25b", "patch": "@@ -929,6 +929,12 @@\n                         \"Search for all symbols kinds\"\n                     ]\n                 },\n+                \"rust-analyzer.workspace.symbol.search.limit\": {\n+                    \"markdownDescription\": \"Limits the number of items returned from a workspace symbol search (Defaults to 128).\\nSome clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\\nOther clients requires all results upfront and might require a higher limit.\",\n+                    \"default\": 128,\n+                    \"type\": \"integer\",\n+                    \"minimum\": 0\n+                },\n                 \"$generated-end\": {}\n             }\n         },"}]}