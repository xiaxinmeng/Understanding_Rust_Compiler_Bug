{"sha": "a4d899b4a1248f885563e241fa56fe9f69616dc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZDg5OWI0YTEyNDhmODg1NTYzZTI0MWZhNTZmZTlmNjk2MTZkYzI=", "commit": {"author": {"name": "Mike Hommey", "email": "mh@glandium.org", "date": "2018-05-16T00:16:37Z"}, "committer": {"name": "Mike Hommey", "email": "mh@glandium.org", "date": "2018-05-30T01:57:38Z"}, "message": "Add hooks allowing to override the `oom` behavior", "tree": {"sha": "4c7f5275e05d8b11bf386aa060f7dc413a0745c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c7f5275e05d8b11bf386aa060f7dc413a0745c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4d899b4a1248f885563e241fa56fe9f69616dc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d899b4a1248f885563e241fa56fe9f69616dc2", "html_url": "https://github.com/rust-lang/rust/commit/a4d899b4a1248f885563e241fa56fe9f69616dc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4d899b4a1248f885563e241fa56fe9f69616dc2/comments", "author": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f4ef003ac1691d04f0ce519d1d78696689534aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4ef003ac1691d04f0ce519d1d78696689534aa", "html_url": "https://github.com/rust-lang/rust/commit/0f4ef003ac1691d04f0ce519d1d78696689534aa"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "4f9dffc7c9549cb2ebc0405769f5e6b6b90af478", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a4d899b4a1248f885563e241fa56fe9f69616dc2/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d899b4a1248f885563e241fa56fe9f69616dc2/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=a4d899b4a1248f885563e241fa56fe9f69616dc2", "patch": "@@ -17,11 +17,55 @@\n #[doc(inline)] pub use alloc_system::System;\n #[doc(inline)] pub use core::alloc::*;\n \n+use core::sync::atomic::{AtomicPtr, Ordering};\n+use core::{mem, ptr};\n+\n+static HOOK: AtomicPtr<()> = AtomicPtr::new(ptr::null_mut());\n+\n+/// Registers a custom OOM hook, replacing any that was previously registered.\n+///\n+/// The OOM hook is invoked when an infallible memory allocation fails.\n+/// The default hook prints a message to standard error and aborts the\n+/// execution, but this behavior can be customized with the [`set_oom_hook`]\n+/// and [`take_oom_hook`] functions.\n+///\n+/// The hook is provided with a `Layout` struct which contains information\n+/// about the allocation that failed.\n+///\n+/// The OOM hook is a global resource.\n+pub fn set_oom_hook(hook: fn(Layout) -> !) {\n+    HOOK.store(hook as *mut (), Ordering::SeqCst);\n+}\n+\n+/// Unregisters the current OOM hook, returning it.\n+///\n+/// *See also the function [`set_oom_hook`].*\n+///\n+/// If no custom hook is registered, the default hook will be returned.\n+pub fn take_oom_hook() -> fn(Layout) -> ! {\n+    let hook = HOOK.swap(ptr::null_mut(), Ordering::SeqCst);\n+    if hook.is_null() {\n+        default_oom_hook\n+    } else {\n+        unsafe { mem::transmute(hook) }\n+    }\n+}\n+\n+fn default_oom_hook(layout: Layout) -> ! {\n+    rtabort!(\"memory allocation of {} bytes failed\", layout.size())\n+}\n+\n #[cfg(not(test))]\n #[doc(hidden)]\n #[lang = \"oom\"]\n-pub extern fn rust_oom(_: Layout) -> ! {\n-    rtabort!(\"memory allocation failed\");\n+pub extern fn rust_oom(layout: Layout) -> ! {\n+    let hook = HOOK.load(Ordering::SeqCst);\n+    let hook: fn(Layout) -> ! = if hook.is_null() {\n+        default_oom_hook\n+    } else {\n+        unsafe { mem::transmute(hook) }\n+    };\n+    hook(layout)\n }\n \n #[cfg(not(test))]"}]}