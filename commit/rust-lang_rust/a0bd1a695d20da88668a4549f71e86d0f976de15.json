{"sha": "a0bd1a695d20da88668a4549f71e86d0f976de15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYmQxYTY5NWQyMGRhODg2NjhhNDU0OWY3MWU4NmQwZjk3NmRlMTU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-13T23:19:24Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-26T21:50:16Z"}, "message": "Prevent an ICE on invalid transmutes", "tree": {"sha": "028853f9f9672f8d82ef06535fb18ecd79d65505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/028853f9f9672f8d82ef06535fb18ecd79d65505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0bd1a695d20da88668a4549f71e86d0f976de15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0bd1a695d20da88668a4549f71e86d0f976de15", "html_url": "https://github.com/rust-lang/rust/commit/a0bd1a695d20da88668a4549f71e86d0f976de15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0bd1a695d20da88668a4549f71e86d0f976de15/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13694de4a260e461bd832bd7bc09eb7c3a367c2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/13694de4a260e461bd832bd7bc09eb7c3a367c2a", "html_url": "https://github.com/rust-lang/rust/commit/13694de4a260e461bd832bd7bc09eb7c3a367c2a"}], "stats": {"total": 167, "additions": 161, "deletions": 6}, "files": [{"sha": "51f0818fe0be114a9e64f3141a012f16d8b21c81", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0bd1a695d20da88668a4549f71e86d0f976de15/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0bd1a695d20da88668a4549f71e86d0f976de15/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=a0bd1a695d20da88668a4549f71e86d0f976de15", "patch": "@@ -432,6 +432,7 @@ pub enum UnsupportedOpInfo<'tcx> {\n     HeapAllocNonPowerOfTwoAlignment(u64),\n     ReadFromReturnPointer,\n     PathNotFound(Vec<String>),\n+    TransmuteSizeDiff(Ty<'tcx>, Ty<'tcx>),\n }\n \n impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n@@ -460,6 +461,11 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n                            passing data of type {:?}\",\n                 callee_ty, caller_ty\n             ),\n+            TransmuteSizeDiff(from_ty, to_ty) => write!(\n+                f,\n+                \"tried to transmute from {:?} to {:?}, but their sizes differed\",\n+                from_ty, to_ty\n+            ),\n             FunctionRetMismatch(caller_ty, callee_ty) => write!(\n                 f,\n                 \"tried to call a function with return type {:?} \\"}, {"sha": "50953348fdc2e8fe5f895b950713daad37d3ab39", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0bd1a695d20da88668a4549f71e86d0f976de15/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0bd1a695d20da88668a4549f71e86d0f976de15/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=a0bd1a695d20da88668a4549f71e86d0f976de15", "patch": "@@ -923,12 +923,10 @@ where\n             return self.copy_op(src, dest);\n         }\n         // We still require the sizes to match.\n-        assert!(\n-            src.layout.size == dest.layout.size,\n-            \"Size mismatch when transmuting!\\nsrc: {:#?}\\ndest: {:#?}\",\n-            src,\n-            dest\n-        );\n+        if src.layout.size != dest.layout.size {\n+            error!(\"Size mismatch when transmuting!\\nsrc: {:#?}\\ndest: {:#?}\", src, dest);\n+            throw_unsup!(TransmuteSizeDiff(src.layout.ty, dest.layout.ty));\n+        }\n         // Unsized copies rely on interpreting `src.meta` with `dest.layout`, we want\n         // to avoid that here.\n         assert!("}, {"sha": "1235dd8dcbd98e08b91644ce59fedd086b4189af", "filename": "src/test/ui/consts/transmute-size-mismatch-before-typeck.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a0bd1a695d20da88668a4549f71e86d0f976de15/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0bd1a695d20da88668a4549f71e86d0f976de15/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs?ref=a0bd1a695d20da88668a4549f71e86d0f976de15", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_transmute)]\n+\n+fn main() {\n+    match &b\"\"[..] {\n+        ZST => {}\n+        //~^ ERROR could not evaluate constant pattern\n+    }\n+}\n+\n+const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n+//~^ ERROR any use of this value will cause an error\n+//~| ERROR cannot transmute between types of different sizes\n+\n+// Once the `any use of this value will cause an error` disappears in this test, make sure to\n+// remove the `TransmuteSizeDiff` error variant and make its emitter site an assertion again."}, {"sha": "29aeb42898739c280a81bc3068603688894215ff", "filename": "src/test/ui/consts/transmute-size-mismatch-before-typeck.stderr", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/a0bd1a695d20da88668a4549f71e86d0f976de15/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0bd1a695d20da88668a4549f71e86d0f976de15/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr?ref=a0bd1a695d20da88668a4549f71e86d0f976de15", "patch": "@@ -0,0 +1,136 @@\n+[ERROR rustc_mir::interpret::place] Size mismatch when transmuting!\n+    src: OpTy {\n+        op: Immediate(\n+            Scalar(\n+                0x0000000000000001,\n+            ),\n+        ),\n+        layout: TyLayout {\n+            ty: usize,\n+            details: LayoutDetails {\n+                variants: Single {\n+                    index: 0,\n+                },\n+                fields: Union(\n+                    0,\n+                ),\n+                abi: Scalar(\n+                    Scalar {\n+                        value: Int(\n+                            I64,\n+                            false,\n+                        ),\n+                        valid_range: 0..=18446744073709551615,\n+                    },\n+                ),\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 3,\n+                    },\n+                    pref: Align {\n+                        pow2: 3,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 8,\n+                },\n+            },\n+        },\n+    }\n+    dest: PlaceTy {\n+        place: Ptr(\n+            MemPlace {\n+                ptr: AllocId(0).0x0,\n+                align: Align {\n+                    pow2: 3,\n+                },\n+                meta: None,\n+            },\n+        ),\n+        layout: TyLayout {\n+            ty: &[u8],\n+            details: LayoutDetails {\n+                variants: Single {\n+                    index: 0,\n+                },\n+                fields: Arbitrary {\n+                    offsets: [\n+                        Size {\n+                            raw: 0,\n+                        },\n+                        Size {\n+                            raw: 8,\n+                        },\n+                    ],\n+                    memory_index: [\n+                        0,\n+                        1,\n+                    ],\n+                },\n+                abi: ScalarPair(\n+                    Scalar {\n+                        value: Pointer,\n+                        valid_range: 1..=18446744073709551615,\n+                    },\n+                    Scalar {\n+                        value: Int(\n+                            I64,\n+                            false,\n+                        ),\n+                        valid_range: 0..=18446744073709551615,\n+                    },\n+                ),\n+                largest_niche: Some(\n+                    Niche {\n+                        offset: Size {\n+                            raw: 0,\n+                        },\n+                        scalar: Scalar {\n+                            value: Pointer,\n+                            valid_range: 1..=18446744073709551615,\n+                        },\n+                    },\n+                ),\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 3,\n+                    },\n+                    pref: Align {\n+                        pow2: 3,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 16,\n+                },\n+            },\n+        },\n+    }\n+error: any use of this value will cause an error\n+  --> $DIR/transmute-size-mismatch-before-typeck.rs:10:29\n+   |\n+LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n+   | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                             |\n+   |                             tried to transmute from usize to &[u8], but their sizes differed\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/transmute-size-mismatch-before-typeck.rs:5:9\n+   |\n+LL |         ZST => {}\n+   |         ^^^\n+\n+error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n+  --> $DIR/transmute-size-mismatch-before-typeck.rs:10:29\n+   |\n+LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n+   |                             ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: `usize` (64 bits)\n+   = note: target type: `&'static [u8]` (128 bits)\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0512`."}]}