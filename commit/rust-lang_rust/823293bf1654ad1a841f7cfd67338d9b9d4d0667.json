{"sha": "823293bf1654ad1a841f7cfd67338d9b9d4d0667", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMzI5M2JmMTY1NGFkMWE4NDFmN2NmZDY3MzM4ZDliOWQ0ZDA2Njc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-03T13:42:32Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-04T13:39:43Z"}, "message": "Fix subst error for consts in wfcheck", "tree": {"sha": "6739f5218f8337f76a8db3dc61ed4397dd08107d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6739f5218f8337f76a8db3dc61ed4397dd08107d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/823293bf1654ad1a841f7cfd67338d9b9d4d0667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/823293bf1654ad1a841f7cfd67338d9b9d4d0667", "html_url": "https://github.com/rust-lang/rust/commit/823293bf1654ad1a841f7cfd67338d9b9d4d0667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/823293bf1654ad1a841f7cfd67338d9b9d4d0667/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c187f7112059d2ec182dc216c45581328977f097", "url": "https://api.github.com/repos/rust-lang/rust/commits/c187f7112059d2ec182dc216c45581328977f097", "html_url": "https://github.com/rust-lang/rust/commit/c187f7112059d2ec182dc216c45581328977f097"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "1420c66c73ea3ca6849d0f172601d39caab897e3", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/823293bf1654ad1a841f7cfd67338d9b9d4d0667/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/823293bf1654ad1a841f7cfd67338d9b9d4d0667/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=823293bf1654ad1a841f7cfd67338d9b9d4d0667", "patch": "@@ -421,8 +421,8 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n     return_ty: Option<Ty<'tcx>>,\n ) {\n     let predicates = fcx.tcx.predicates_of(def_id);\n-\n     let generics = tcx.generics_of(def_id);\n+\n     let is_our_default = |def: &ty::GenericParamDef| {\n         match def.kind {\n             GenericParamDefKind::Type { has_default, .. } => {\n@@ -465,6 +465,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n                 // All regions are identity.\n                 fcx.tcx.mk_param_from_def(param)\n             }\n+\n             GenericParamDefKind::Type { .. } => {\n                 // If the param has a default,\n                 if is_our_default(param) {\n@@ -478,25 +479,24 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n                 // Mark unwanted params as err.\n                 fcx.tcx.types.err.into()\n             }\n+\n             GenericParamDefKind::Const => {\n                 // FIXME(const_generics:defaults)\n-                fcx.tcx.types.err.into()\n+                fcx.tcx.consts.err.into()\n             }\n         }\n     });\n+\n     // Now we build the substituted predicates.\n     let default_obligations = predicates.predicates.iter().flat_map(|&(pred, _)| {\n         #[derive(Default)]\n         struct CountParams { params: FxHashSet<u32> }\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n-                match t.sty {\n-                    ty::Param(p) => {\n-                        self.params.insert(p.idx);\n-                        t.super_visit_with(self)\n-                    }\n-                    _ => t.super_visit_with(self)\n+                if let ty::Param(param) = t.sty {\n+                    self.params.insert(param.idx);\n                 }\n+                t.super_visit_with(self)\n             }\n \n             fn visit_region(&mut self, _: ty::Region<'tcx>) -> bool {"}]}