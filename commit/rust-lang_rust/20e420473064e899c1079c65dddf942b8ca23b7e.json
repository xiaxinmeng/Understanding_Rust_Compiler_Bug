{"sha": "20e420473064e899c1079c65dddf942b8ca23b7e", "node_id": "C_kwDOAAsO6NoAKDIwZTQyMDQ3MzA2NGU4OTljMTA3OWM2NWRkZGY5NDJiOGNhMjNiN2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-24T17:21:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-24T17:21:15Z"}, "message": "Auto merge of #9237 - Alexendoo:useless-format-spans, r=Jarcho\n\nFix `useless_format` spans for `format!(\"{foo}\")`\n\nFixes #9234\n\nchangelog: [`useless_format`]: Fix spans for `format!(\"{foo}\")`\n\nhttps://github.com/rust-lang/rust/pull/94030 made our workaround unneeded, but by coincidence our test still passed [because `Span::new()` swaps `hi` & `lo` if needed](https://github.com/rust-lang/rust/blob/c32dcbba187d1ee0dbe92dc152cb9c2f3f42900c/compiler/rustc_span/src/span_encoding.rs#L86-L88). So with a single character variable like `format!(\"{x}\")` it still worked", "tree": {"sha": "eef7235e67587123a6e22694dbc6ce919205397f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eef7235e67587123a6e22694dbc6ce919205397f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20e420473064e899c1079c65dddf942b8ca23b7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20e420473064e899c1079c65dddf942b8ca23b7e", "html_url": "https://github.com/rust-lang/rust/commit/20e420473064e899c1079c65dddf942b8ca23b7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20e420473064e899c1079c65dddf942b8ca23b7e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a5b7e266a4b3c10b38fcb107e737fd5d7f510c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a5b7e266a4b3c10b38fcb107e737fd5d7f510c1", "html_url": "https://github.com/rust-lang/rust/commit/4a5b7e266a4b3c10b38fcb107e737fd5d7f510c1"}, {"sha": "d60d5e8bde9650f967f511f6649bc8f8ece8decc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d60d5e8bde9650f967f511f6649bc8f8ece8decc", "html_url": "https://github.com/rust-lang/rust/commit/d60d5e8bde9650f967f511f6649bc8f8ece8decc"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "9137d8ef382b0c6d9362d44abdbd42138112a08a", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/20e420473064e899c1079c65dddf942b8ca23b7e/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20e420473064e899c1079c65dddf942b8ca23b7e/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=20e420473064e899c1079c65dddf942b8ca23b7e", "patch": "@@ -9,7 +9,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::kw;\n-use rustc_span::{sym, BytePos, Span};\n+use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -85,22 +85,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n                         ExprKind::MethodCall(path, ..) => path.ident.name.as_str() == \"to_string\",\n                         _ => false,\n                     };\n-                    let sugg = if format_args.format_string_span.contains(value.span) {\n-                        // Implicit argument. e.g. `format!(\"{x}\")` span points to `{x}`\n-                        let spdata = value.span.data();\n-                        let span = Span::new(\n-                            spdata.lo + BytePos(1),\n-                            spdata.hi - BytePos(1),\n-                            spdata.ctxt,\n-                            spdata.parent\n-                        );\n-                        let snip = snippet_with_applicability(cx, span, \"..\", &mut applicability);\n-                        if is_new_string {\n-                            snip.into()\n-                        } else {\n-                            format!(\"{snip}.to_string()\")\n-                        }\n-                    } else if is_new_string {\n+                    let sugg = if is_new_string {\n                         snippet_with_applicability(cx, value.span, \"..\", &mut applicability).into_owned()\n                     } else {\n                         let sugg = Sugg::hir_with_applicability(cx, value, \"<arg>\", &mut applicability);"}, {"sha": "f4db2d20c713c0b4dc1d83591e6b6eceb00fe7cc", "filename": "tests/ui/format.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20e420473064e899c1079c65dddf942b8ca23b7e/tests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/20e420473064e899c1079c65dddf942b8ca23b7e/tests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.fixed?ref=20e420473064e899c1079c65dddf942b8ca23b7e", "patch": "@@ -84,4 +84,10 @@ fn main() {\n     let _ = x.to_string();\n     let _ = format!(\"{x:?}\"); // Don't lint on debug\n     let _ = x.to_string();\n+\n+    // Issue #9234\n+    let abc = \"abc\";\n+    let _ = abc.to_string();\n+    let xx = \"xx\";\n+    let _ = xx.to_string();\n }"}, {"sha": "bf687cb1e96c79cf864252d9ec156f80597345fd", "filename": "tests/ui/format.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20e420473064e899c1079c65dddf942b8ca23b7e/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20e420473064e899c1079c65dddf942b8ca23b7e/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=20e420473064e899c1079c65dddf942b8ca23b7e", "patch": "@@ -86,4 +86,10 @@ fn main() {\n     let _ = format!(\"{x}\");\n     let _ = format!(\"{x:?}\"); // Don't lint on debug\n     let _ = format!(\"{y}\", y = x);\n+\n+    // Issue #9234\n+    let abc = \"abc\";\n+    let _ = format!(\"{abc}\");\n+    let xx = \"xx\";\n+    let _ = format!(\"{xx}\");\n }"}, {"sha": "a0f8e7d19379110b1ffef5a8f7a82389421c795a", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20e420473064e899c1079c65dddf942b8ca23b7e/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20e420473064e899c1079c65dddf942b8ca23b7e/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=20e420473064e899c1079c65dddf942b8ca23b7e", "patch": "@@ -111,5 +111,17 @@ error: useless use of `format!`\n LL |     let _ = format!(\"{y}\", y = x);\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n-error: aborting due to 17 previous errors\n+error: useless use of `format!`\n+  --> $DIR/format.rs:92:13\n+   |\n+LL |     let _ = format!(\"{abc}\");\n+   |             ^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `abc.to_string()`\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:94:13\n+   |\n+LL |     let _ = format!(\"{xx}\");\n+   |             ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `xx.to_string()`\n+\n+error: aborting due to 19 previous errors\n "}]}