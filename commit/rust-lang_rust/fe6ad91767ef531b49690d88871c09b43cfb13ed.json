{"sha": "fe6ad91767ef531b49690d88871c09b43cfb13ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNmFkOTE3NjdlZjUzMWI0OTY5MGQ4ODg3MWMwOWI0M2NmYjEzZWQ=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-05-12T11:09:15Z"}, "committer": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-05-12T11:09:15Z"}, "message": "Merge pull request #919 from oli-obk/fix/917\n\ndon't suggest closures over constants", "tree": {"sha": "3b9b6415fa62b340f76113ecee1f57eeb5a0bd4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b9b6415fa62b340f76113ecee1f57eeb5a0bd4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe6ad91767ef531b49690d88871c09b43cfb13ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe6ad91767ef531b49690d88871c09b43cfb13ed", "html_url": "https://github.com/rust-lang/rust/commit/fe6ad91767ef531b49690d88871c09b43cfb13ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe6ad91767ef531b49690d88871c09b43cfb13ed/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fa68f1e089bc18d3924a19a21853bc4848f8959", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa68f1e089bc18d3924a19a21853bc4848f8959", "html_url": "https://github.com/rust-lang/rust/commit/8fa68f1e089bc18d3924a19a21853bc4848f8959"}, {"sha": "610883b7aa8107e805cd5b43957fb7a5a300a381", "url": "https://api.github.com/repos/rust-lang/rust/commits/610883b7aa8107e805cd5b43957fb7a5a300a381", "html_url": "https://github.com/rust-lang/rust/commit/610883b7aa8107e805cd5b43957fb7a5a300a381"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "b47ae924bf012440a34fcf0e0fca0a5b2a2fa5ae", "filename": "src/methods.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad91767ef531b49690d88871c09b43cfb13ed/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad91767ef531b49690d88871c09b43cfb13ed/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=fe6ad91767ef531b49690d88871c09b43cfb13ed", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir::*;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n+use rustc::middle::const_qualif::ConstQualif;\n use rustc::ty::subst::{Subst, TypeSpace};\n use rustc::ty;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n@@ -502,6 +503,13 @@ fn lint_or_fun_call(cx: &LateContext, expr: &Expr, name: &str, args: &[P<Expr>])\n     /// Check for `*or(foo())`.\n     fn check_general_case(cx: &LateContext, name: &str, fun: &Expr, self_expr: &Expr, arg: &Expr, or_has_args: bool,\n                           span: Span) {\n+        // don't lint for constant values\n+        // FIXME: can we `expect` here instead of match?\n+        if let Some(qualif) = cx.tcx.const_qualif_map.borrow().get(&arg.id) {\n+            if !qualif.contains(ConstQualif::NOT_CONST) {\n+                return;\n+            }\n+        }\n         // (path, fn_has_argument, methods)\n         let know_types: &[(&[_], _, &[_], _)] = &[(&paths::BTREEMAP_ENTRY, false, &[\"or_insert\"], \"with\"),\n                                                   (&paths::HASHMAP_ENTRY, false, &[\"or_insert\"], \"with\"),"}, {"sha": "0a943840e17a100102c8ac8b8ce2284867c14331", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad91767ef531b49690d88871c09b43cfb13ed/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad91767ef531b49690d88871c09b43cfb13ed/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=fe6ad91767ef531b49690d88871c09b43cfb13ed", "patch": "@@ -1,4 +1,5 @@\n #![feature(plugin)]\n+#![feature(const_fn)]\n #![plugin(clippy)]\n \n #![deny(clippy, clippy_pedantic)]\n@@ -227,8 +228,20 @@ fn or_fun_call() {\n         fn new() -> Foo { Foo }\n     }\n \n+    enum Enum {\n+        A(i32),\n+    }\n+\n+    const fn make_const(i: i32) -> i32 { i }\n+\n     fn make<T>() -> T { unimplemented!(); }\n \n+    let with_enum = Some(Enum::A(1));\n+    with_enum.unwrap_or(Enum::A(5));\n+\n+    let with_const_fn = Some(1);\n+    with_const_fn.unwrap_or(make_const(5));\n+\n     let with_constructor = Some(vec![1]);\n     with_constructor.unwrap_or(make());\n     //~^ERROR use of `unwrap_or`"}]}