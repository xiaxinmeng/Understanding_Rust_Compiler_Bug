{"sha": "4e43df26b2650cdef4178d2493e70c0ce946e39c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNDNkZjI2YjI2NTBjZGVmNDE3OGQyNDkzZTcwYzBjZTk0NmUzOWM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-23T23:18:21Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-23T23:56:06Z"}, "message": "Consider references when applying postfix completions", "tree": {"sha": "27a6c2ba10017eb1498121376a8866ffd657da74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27a6c2ba10017eb1498121376a8866ffd657da74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e43df26b2650cdef4178d2493e70c0ce946e39c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e43df26b2650cdef4178d2493e70c0ce946e39c", "html_url": "https://github.com/rust-lang/rust/commit/4e43df26b2650cdef4178d2493e70c0ce946e39c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e43df26b2650cdef4178d2493e70c0ce946e39c/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9494f114798f66b5f2174cf518a2951a82571d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9494f114798f66b5f2174cf518a2951a82571d3", "html_url": "https://github.com/rust-lang/rust/commit/f9494f114798f66b5f2174cf518a2951a82571d3"}], "stats": {"total": 140, "additions": 123, "deletions": 17}, "files": [{"sha": "0a00054b2395ad58181141284de3b21663ce4bd2", "filename": "crates/ra_ide/src/completion/complete_postfix.rs", "status": "modified", "additions": 123, "deletions": 17, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/4e43df26b2650cdef4178d2493e70c0ce946e39c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e43df26b2650cdef4178d2493e70c0ce946e39c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=4e43df26b2650cdef4178d2493e70c0ce946e39c", "patch": "@@ -1,6 +1,9 @@\n //! FIXME: write short doc here\n \n-use ra_syntax::{ast::AstNode, TextRange, TextUnit};\n+use ra_syntax::{\n+    ast::{self, AstNode},\n+    TextRange, TextUnit,\n+};\n use ra_text_edit::TextEdit;\n \n use crate::{\n@@ -21,53 +24,97 @@ pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         None => return,\n     };\n \n-    let receiver_text = if ctx.dot_receiver_is_ambiguous_float_literal {\n-        let text = dot_receiver.syntax().text();\n-        let without_dot = ..text.len() - TextUnit::of_char('.');\n-        text.slice(without_dot).to_string()\n-    } else {\n-        dot_receiver.syntax().text().to_string()\n-    };\n+    let receiver_text =\n+        get_receiver_text(dot_receiver, ctx.dot_receiver_is_ambiguous_float_literal);\n \n     let receiver_ty = match ctx.sema.type_of_expr(&dot_receiver) {\n         Some(it) => it,\n         None => return,\n     };\n \n     if receiver_ty.is_bool() || receiver_ty.is_unknown() {\n-        postfix_snippet(ctx, \"if\", \"if expr {}\", &format!(\"if {} {{$0}}\", receiver_text))\n-            .add_to(acc);\n         postfix_snippet(\n             ctx,\n+            &dot_receiver,\n+            \"if\",\n+            \"if expr {}\",\n+            &format!(\"if {} {{$0}}\", receiver_text),\n+        )\n+        .add_to(acc);\n+        postfix_snippet(\n+            ctx,\n+            &dot_receiver,\n             \"while\",\n             \"while expr {}\",\n             &format!(\"while {} {{\\n$0\\n}}\", receiver_text),\n         )\n         .add_to(acc);\n     }\n \n-    postfix_snippet(ctx, \"not\", \"!expr\", &format!(\"!{}\", receiver_text)).add_to(acc);\n+    // !&&&42 is a compiler error, ergo process it before considering the references\n+    postfix_snippet(ctx, &dot_receiver, \"not\", \"!expr\", &format!(\"!{}\", receiver_text)).add_to(acc);\n \n-    postfix_snippet(ctx, \"ref\", \"&expr\", &format!(\"&{}\", receiver_text)).add_to(acc);\n-    postfix_snippet(ctx, \"refm\", \"&mut expr\", &format!(\"&mut {}\", receiver_text)).add_to(acc);\n+    postfix_snippet(ctx, &dot_receiver, \"ref\", \"&expr\", &format!(\"&{}\", receiver_text)).add_to(acc);\n+    postfix_snippet(ctx, &dot_receiver, \"refm\", \"&mut expr\", &format!(\"&mut {}\", receiver_text))\n+        .add_to(acc);\n+\n+    // The rest of the postfix completions create an expression that moves an argument,\n+    // so it's better to consider references now to avoid breaking the compilation\n+    let dot_receiver = include_references(dot_receiver);\n+    let receiver_text =\n+        get_receiver_text(&dot_receiver, ctx.dot_receiver_is_ambiguous_float_literal);\n \n     postfix_snippet(\n         ctx,\n+        &dot_receiver,\n         \"match\",\n         \"match expr {}\",\n         &format!(\"match {} {{\\n    ${{1:_}} => {{$0\\\\}},\\n}}\", receiver_text),\n     )\n     .add_to(acc);\n \n-    postfix_snippet(ctx, \"dbg\", \"dbg!(expr)\", &format!(\"dbg!({})\", receiver_text)).add_to(acc);\n+    postfix_snippet(\n+        ctx,\n+        &dot_receiver,\n+        \"box\",\n+        \"Box::new(expr)\",\n+        &format!(\"Box::new({})\", receiver_text),\n+    )\n+    .add_to(acc);\n \n-    postfix_snippet(ctx, \"box\", \"Box::new(expr)\", &format!(\"Box::new({})\", receiver_text))\n+    postfix_snippet(ctx, &dot_receiver, \"dbg\", \"dbg!(expr)\", &format!(\"dbg!({})\", receiver_text))\n         .add_to(acc);\n }\n \n-fn postfix_snippet(ctx: &CompletionContext, label: &str, detail: &str, snippet: &str) -> Builder {\n+fn get_receiver_text(receiver: &ast::Expr, receiver_is_ambiguous_float_literal: bool) -> String {\n+    if receiver_is_ambiguous_float_literal {\n+        let text = receiver.syntax().text();\n+        let without_dot = ..text.len() - TextUnit::of_char('.');\n+        text.slice(without_dot).to_string()\n+    } else {\n+        receiver.to_string()\n+    }\n+}\n+\n+fn include_references(initial_element: &ast::Expr) -> ast::Expr {\n+    let mut resulting_element = initial_element.clone();\n+    while let Some(parent_ref_element) =\n+        resulting_element.syntax().parent().and_then(ast::RefExpr::cast)\n+    {\n+        resulting_element = ast::Expr::from(parent_ref_element);\n+    }\n+    resulting_element\n+}\n+\n+fn postfix_snippet(\n+    ctx: &CompletionContext,\n+    receiver: &ast::Expr,\n+    label: &str,\n+    detail: &str,\n+    snippet: &str,\n+) -> Builder {\n     let edit = {\n-        let receiver_syntax = ctx.dot_receiver.as_ref().expect(\"no receiver available\").syntax();\n+        let receiver_syntax = receiver.syntax();\n         let receiver_range = ctx.sema.original_range(receiver_syntax).range;\n         let delete_range = TextRange::from_to(receiver_range.start(), ctx.source_range().end());\n         TextEdit::replace(delete_range, snippet.to_string())\n@@ -340,4 +387,63 @@ mod tests {\n         \"###\n         );\n     }\n+\n+    #[test]\n+    fn postfix_completion_for_references() {\n+        assert_debug_snapshot!(\n+            do_postfix_completion(\n+                r#\"\n+                fn main() {\n+                    &&&&42.<|>\n+                }\n+                \"#,\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"box\",\n+                source_range: [56; 56),\n+                delete: [49; 56),\n+                insert: \"Box::new(&&&&42)\",\n+                detail: \"Box::new(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"dbg\",\n+                source_range: [56; 56),\n+                delete: [49; 56),\n+                insert: \"dbg!(&&&&42)\",\n+                detail: \"dbg!(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: [56; 56),\n+                delete: [49; 56),\n+                insert: \"match &&&&42 {\\n    ${1:_} => {$0\\\\},\\n}\",\n+                detail: \"match expr {}\",\n+            },\n+            CompletionItem {\n+                label: \"not\",\n+                source_range: [56; 56),\n+                delete: [53; 56),\n+                insert: \"!42\",\n+                detail: \"!expr\",\n+            },\n+            CompletionItem {\n+                label: \"ref\",\n+                source_range: [56; 56),\n+                delete: [53; 56),\n+                insert: \"&42\",\n+                detail: \"&expr\",\n+            },\n+            CompletionItem {\n+                label: \"refm\",\n+                source_range: [56; 56),\n+                delete: [53; 56),\n+                insert: \"&mut 42\",\n+                detail: \"&mut expr\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n }"}]}