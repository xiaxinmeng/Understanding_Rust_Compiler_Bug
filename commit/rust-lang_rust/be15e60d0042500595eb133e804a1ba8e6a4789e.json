{"sha": "be15e60d0042500595eb133e804a1ba8e6a4789e", "node_id": "C_kwDOAAsO6NoAKGJlMTVlNjBkMDA0MjUwMDU5NWViMTMzZTgwNGExYmE4ZTZhNDc4OWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-14T13:48:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-14T13:48:53Z"}, "message": "Auto merge of #10053 - naosense:fix_9933, r=xFrednet\n\nimprove `manual_is_ascii_check ` check\n\nSorry, not familiar the api, i can only check the method name of expression `<expr-1>.contains(<expr-2>)` after read clippy book and hints from #9933 . i dont know how to check\n1.  if <expr-1> is a specific range\n2. <expr-2> is a character\n\nr? `@xFrednet` could you please provide some more hints? \ud83d\ude1d\ufe0f\n\n---\n\nchangelog: Enhancement: [`manual_is_ascii_check`]: Now detects ranges with `.contains()` calls\n[#10053](https://github.com/rust-lang/rust-clippy/pull/10053)\n<!-- changelog_checked -->", "tree": {"sha": "ee16af69c95de61360710fa60892940835febf42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee16af69c95de61360710fa60892940835febf42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be15e60d0042500595eb133e804a1ba8e6a4789e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be15e60d0042500595eb133e804a1ba8e6a4789e", "html_url": "https://github.com/rust-lang/rust/commit/be15e60d0042500595eb133e804a1ba8e6a4789e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be15e60d0042500595eb133e804a1ba8e6a4789e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b67e6af9ef74ed854184b4e772b8c0141c26ad5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b67e6af9ef74ed854184b4e772b8c0141c26ad5", "html_url": "https://github.com/rust-lang/rust/commit/3b67e6af9ef74ed854184b4e772b8c0141c26ad5"}, {"sha": "1f862c2ad31a64beb86a2c6b0c1d2a1947b8173b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f862c2ad31a64beb86a2c6b0c1d2a1947b8173b", "html_url": "https://github.com/rust-lang/rust/commit/1f862c2ad31a64beb86a2c6b0c1d2a1947b8173b"}], "stats": {"total": 181, "additions": 141, "deletions": 40}, "files": [{"sha": "d9ef7dffa020dbbd6d24715a35129fa72f88bcf2", "filename": "clippy_lints/src/manual_is_ascii_check.rs", "status": "modified", "additions": 56, "deletions": 35, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/be15e60d0042500595eb133e804a1ba8e6a4789e/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be15e60d0042500595eb133e804a1ba8e6a4789e/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs?ref=be15e60d0042500595eb133e804a1ba8e6a4789e", "patch": "@@ -1,11 +1,12 @@\n use clippy_utils::msrvs::{self, Msrv};\n-use clippy_utils::{diagnostics::span_lint_and_sugg, in_constant, macros::root_macro_call, source::snippet};\n+use clippy_utils::{diagnostics::span_lint_and_sugg, higher, in_constant, macros::root_macro_call, source::snippet};\n+use rustc_ast::ast::RangeLimits;\n use rustc_ast::LitKind::{Byte, Char};\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, PatKind, RangeEnd};\n+use rustc_hir::{BorrowKind, Expr, ExprKind, PatKind, RangeEnd};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{def_id::DefId, sym};\n+use rustc_span::{def_id::DefId, sym, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -23,6 +24,10 @@ declare_clippy_lint! {\n     ///     assert!(matches!(b'X', b'A'..=b'Z'));\n     ///     assert!(matches!('2', '0'..='9'));\n     ///     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n+    ///\n+    ///     ('0'..='9').contains(&'0');\n+    ///     ('a'..='z').contains(&'a');\n+    ///     ('A'..='Z').contains(&'A');\n     /// }\n     /// ```\n     /// Use instead:\n@@ -32,6 +37,10 @@ declare_clippy_lint! {\n     ///     assert!(b'X'.is_ascii_uppercase());\n     ///     assert!('2'.is_ascii_digit());\n     ///     assert!('x'.is_ascii_alphabetic());\n+    ///\n+    ///     '0'.is_ascii_digit();\n+    ///     'a'.is_ascii_lowercase();\n+    ///     'A'.is_ascii_uppercase();\n     /// }\n     /// ```\n     #[clippy::version = \"1.66.0\"]\n@@ -75,47 +84,59 @@ impl<'tcx> LateLintPass<'tcx> for ManualIsAsciiCheck {\n             return;\n         }\n \n-        let Some(macro_call) = root_macro_call(expr.span) else { return };\n-\n-        if is_matches_macro(cx, macro_call.def_id) {\n+        if let Some(macro_call) = root_macro_call(expr.span)\n+            && is_matches_macro(cx, macro_call.def_id) {\n             if let ExprKind::Match(recv, [arm, ..], _) = expr.kind {\n                 let range = check_pat(&arm.pat.kind);\n-\n-                if let Some(sugg) = match range {\n-                    CharRange::UpperChar => Some(\"is_ascii_uppercase\"),\n-                    CharRange::LowerChar => Some(\"is_ascii_lowercase\"),\n-                    CharRange::FullChar => Some(\"is_ascii_alphabetic\"),\n-                    CharRange::Digit => Some(\"is_ascii_digit\"),\n-                    CharRange::Otherwise => None,\n-                } {\n-                    let default_snip = \"..\";\n-                    // `snippet_with_applicability` may set applicability to `MaybeIncorrect` for\n-                    // macro span, so we check applicability manually by comparing `recv` is not default.\n-                    let recv = snippet(cx, recv.span, default_snip);\n-\n-                    let applicability = if recv == default_snip {\n-                        Applicability::HasPlaceholders\n-                    } else {\n-                        Applicability::MachineApplicable\n-                    };\n-\n-                    span_lint_and_sugg(\n-                        cx,\n-                        MANUAL_IS_ASCII_CHECK,\n-                        macro_call.span,\n-                        \"manual check for common ascii range\",\n-                        \"try\",\n-                        format!(\"{recv}.{sugg}()\"),\n-                        applicability,\n-                    );\n-                }\n+                check_is_ascii(cx, macro_call.span, recv, &range);\n+            }\n+        } else if let ExprKind::MethodCall(path, receiver, [arg], ..) = expr.kind\n+            && path.ident.name == sym!(contains)\n+            && let Some(higher::Range { start: Some(start), end: Some(end), limits: RangeLimits::Closed })\n+            = higher::Range::hir(receiver) {\n+            let range = check_range(start, end);\n+            if let ExprKind::AddrOf(BorrowKind::Ref, _, e) = arg.kind {\n+                check_is_ascii(cx, expr.span, e, &range);\n+            } else {\n+                check_is_ascii(cx, expr.span, arg, &range);\n             }\n         }\n     }\n \n     extract_msrv_attr!(LateContext);\n }\n \n+fn check_is_ascii(cx: &LateContext<'_>, span: Span, recv: &Expr<'_>, range: &CharRange) {\n+    if let Some(sugg) = match range {\n+        CharRange::UpperChar => Some(\"is_ascii_uppercase\"),\n+        CharRange::LowerChar => Some(\"is_ascii_lowercase\"),\n+        CharRange::FullChar => Some(\"is_ascii_alphabetic\"),\n+        CharRange::Digit => Some(\"is_ascii_digit\"),\n+        CharRange::Otherwise => None,\n+    } {\n+        let default_snip = \"..\";\n+        // `snippet_with_applicability` may set applicability to `MaybeIncorrect` for\n+        // macro span, so we check applicability manually by comparing `recv` is not default.\n+        let recv = snippet(cx, recv.span, default_snip);\n+\n+        let applicability = if recv == default_snip {\n+            Applicability::HasPlaceholders\n+        } else {\n+            Applicability::MachineApplicable\n+        };\n+\n+        span_lint_and_sugg(\n+            cx,\n+            MANUAL_IS_ASCII_CHECK,\n+            span,\n+            \"manual check for common ascii range\",\n+            \"try\",\n+            format!(\"{recv}.{sugg}()\"),\n+            applicability,\n+        );\n+    }\n+}\n+\n fn check_pat(pat_kind: &PatKind<'_>) -> CharRange {\n     match pat_kind {\n         PatKind::Or(pats) => {"}, {"sha": "5b2b44c2fdb2bbaa6c960d482f36e051616267fe", "filename": "tests/ui/manual_is_ascii_check.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/be15e60d0042500595eb133e804a1ba8e6a4789e/tests%2Fui%2Fmanual_is_ascii_check.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/be15e60d0042500595eb133e804a1ba8e6a4789e/tests%2Fui%2Fmanual_is_ascii_check.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.fixed?ref=be15e60d0042500595eb133e804a1ba8e6a4789e", "patch": "@@ -15,6 +15,19 @@ fn main() {\n     assert!('x'.is_ascii_alphabetic());\n \n     assert!(matches!('x', 'A'..='Z' | 'a'..='z' | '_'));\n+\n+    b'0'.is_ascii_digit();\n+    b'a'.is_ascii_lowercase();\n+    b'A'.is_ascii_uppercase();\n+\n+    '0'.is_ascii_digit();\n+    'a'.is_ascii_lowercase();\n+    'A'.is_ascii_uppercase();\n+\n+    let cool_letter = &'g';\n+    cool_letter.is_ascii_digit();\n+    cool_letter.is_ascii_lowercase();\n+    cool_letter.is_ascii_uppercase();\n }\n \n #[clippy::msrv = \"1.23\"]"}, {"sha": "c9433f33a1b6f3891e47a391ad150a784c2bc0db", "filename": "tests/ui/manual_is_ascii_check.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/be15e60d0042500595eb133e804a1ba8e6a4789e/tests%2Fui%2Fmanual_is_ascii_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be15e60d0042500595eb133e804a1ba8e6a4789e/tests%2Fui%2Fmanual_is_ascii_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.rs?ref=be15e60d0042500595eb133e804a1ba8e6a4789e", "patch": "@@ -15,6 +15,19 @@ fn main() {\n     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n \n     assert!(matches!('x', 'A'..='Z' | 'a'..='z' | '_'));\n+\n+    (b'0'..=b'9').contains(&b'0');\n+    (b'a'..=b'z').contains(&b'a');\n+    (b'A'..=b'Z').contains(&b'A');\n+\n+    ('0'..='9').contains(&'0');\n+    ('a'..='z').contains(&'a');\n+    ('A'..='Z').contains(&'A');\n+\n+    let cool_letter = &'g';\n+    ('0'..='9').contains(cool_letter);\n+    ('a'..='z').contains(cool_letter);\n+    ('A'..='Z').contains(cool_letter);\n }\n \n #[clippy::msrv = \"1.23\"]"}, {"sha": "ee60188506d6fc08182a897d47a9d3c7ca290aa4", "filename": "tests/ui/manual_is_ascii_check.stderr", "status": "modified", "additions": 59, "deletions": 5, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/be15e60d0042500595eb133e804a1ba8e6a4789e/tests%2Fui%2Fmanual_is_ascii_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be15e60d0042500595eb133e804a1ba8e6a4789e/tests%2Fui%2Fmanual_is_ascii_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.stderr?ref=be15e60d0042500595eb133e804a1ba8e6a4789e", "patch": "@@ -43,28 +43,82 @@ LL |     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_alphabetic()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:29:13\n+  --> $DIR/manual_is_ascii_check.rs:19:5\n+   |\n+LL |     (b'0'..=b'9').contains(&b'0');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'0'.is_ascii_digit()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:20:5\n+   |\n+LL |     (b'a'..=b'z').contains(&b'a');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'a'.is_ascii_lowercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:21:5\n+   |\n+LL |     (b'A'..=b'Z').contains(&b'A');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'A'.is_ascii_uppercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:23:5\n+   |\n+LL |     ('0'..='9').contains(&'0');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'0'.is_ascii_digit()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:24:5\n+   |\n+LL |     ('a'..='z').contains(&'a');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'a'.is_ascii_lowercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:25:5\n+   |\n+LL |     ('A'..='Z').contains(&'A');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'A'.is_ascii_uppercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:28:5\n+   |\n+LL |     ('0'..='9').contains(cool_letter);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `cool_letter.is_ascii_digit()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:29:5\n+   |\n+LL |     ('a'..='z').contains(cool_letter);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `cool_letter.is_ascii_lowercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:30:5\n+   |\n+LL |     ('A'..='Z').contains(cool_letter);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `cool_letter.is_ascii_uppercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:42:13\n    |\n LL |     assert!(matches!(b'1', b'0'..=b'9'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'1'.is_ascii_digit()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:30:13\n+  --> $DIR/manual_is_ascii_check.rs:43:13\n    |\n LL |     assert!(matches!('X', 'A'..='Z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'X'.is_ascii_uppercase()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:31:13\n+  --> $DIR/manual_is_ascii_check.rs:44:13\n    |\n LL |     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_alphabetic()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:41:23\n+  --> $DIR/manual_is_ascii_check.rs:54:23\n    |\n LL |     const FOO: bool = matches!('x', '0'..='9');\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_digit()`\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 20 previous errors\n "}]}