{"sha": "f11502cda8a05aae9b260141ac9c4538d46bb01b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMTUwMmNkYThhMDVhYWU5YjI2MDE0MWFjOWM0NTM4ZDQ2YmIwMWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-09T10:36:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-09T10:36:41Z"}, "message": "Auto merge of #26904 - bluss:no-repeat, r=alexcrichton\n\nIn a followup to PR #26849, improve one more location for I/O where\r\nwe can use `Vec::resize` to ensure better performance when zeroing\r\nbuffers.\r\n\r\nUse the `vec![elt; n]` macro everywhere we can in the tree. It replaces\r\n`repeat(elt).take(n).collect()` which is more verbose, requires type\r\nhints, and right now produces worse code. `vec![]` is preferable for vector\r\ninitialization.\r\n\r\nThe `vec![]` replacement touches upon one I/O path too, Stdin::read\r\nfor windows, and that should be a small improvement.\r\n\r\nr? @alexcrichton", "tree": {"sha": "fd3a72c4bf63d6d12a48155843dd172af01a6a70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd3a72c4bf63d6d12a48155843dd172af01a6a70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f11502cda8a05aae9b260141ac9c4538d46bb01b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f11502cda8a05aae9b260141ac9c4538d46bb01b", "html_url": "https://github.com/rust-lang/rust/commit/f11502cda8a05aae9b260141ac9c4538d46bb01b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f11502cda8a05aae9b260141ac9c4538d46bb01b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "517e087c16749086a3a0fec453af3d1c53232605", "url": "https://api.github.com/repos/rust-lang/rust/commits/517e087c16749086a3a0fec453af3d1c53232605", "html_url": "https://github.com/rust-lang/rust/commit/517e087c16749086a3a0fec453af3d1c53232605"}, {"sha": "836f32e7697195a482b88883cbbe4a2dd986d8cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/836f32e7697195a482b88883cbbe4a2dd986d8cb", "html_url": "https://github.com/rust-lang/rust/commit/836f32e7697195a482b88883cbbe4a2dd986d8cb"}], "stats": {"total": 157, "additions": 64, "deletions": 93}, "files": [{"sha": "3a4cfbba65f4ecfc463262a32c7cc105b531c521", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -283,7 +283,7 @@ impl BitVec {\n     pub fn from_elem(nbits: usize, bit: bool) -> BitVec {\n         let nblocks = blocks_for_bits(nbits);\n         let mut bit_vec = BitVec {\n-            storage: repeat(if bit { !0 } else { 0 }).take(nblocks).collect(),\n+            storage: vec![if bit { !0 } else { 0 }; nblocks],\n             nbits: nbits\n         };\n         bit_vec.fix_last_block();"}, {"sha": "d88d8b8e4a06822de36e6ab26f2f37c1336d680e", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -1318,7 +1318,7 @@ mod bench {\n \n     #[bench]\n     fn mut_iterator(b: &mut Bencher) {\n-        let mut v: Vec<_> = repeat(0).take(100).collect();\n+        let mut v = vec![0; 100];\n \n         b.iter(|| {\n             let mut i = 0;\n@@ -1419,7 +1419,7 @@ mod bench {\n     #[bench]\n     fn zero_1kb_from_elem(b: &mut Bencher) {\n         b.iter(|| {\n-            repeat(0u8).take(1024).collect::<Vec<_>>()\n+            vec![0u8; 1024]\n         });\n     }\n \n@@ -1467,7 +1467,7 @@ mod bench {\n     fn random_inserts(b: &mut Bencher) {\n         let mut rng = thread_rng();\n         b.iter(|| {\n-            let mut v: Vec<_> = repeat((0, 0)).take(30).collect();\n+            let mut v = vec![(0, 0); 30];\n             for _ in 0..100 {\n                 let l = v.len();\n                 v.insert(rng.gen::<usize>() % (l + 1),\n@@ -1479,7 +1479,7 @@ mod bench {\n     fn random_removes(b: &mut Bencher) {\n         let mut rng = thread_rng();\n         b.iter(|| {\n-            let mut v: Vec<_> = repeat((0, 0)).take(130).collect();\n+            let mut v = vec![(0, 0); 130];\n             for _ in 0..100 {\n                 let l = v.len();\n                 v.remove(rng.gen::<usize>() % l);"}, {"sha": "865b049aae55a4e8b5b5bf141f2696161bbdb329", "filename": "src/libcoretest/ptr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibcoretest%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibcoretest%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fptr.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -10,7 +10,6 @@\n \n use core::ptr::*;\n use core::mem;\n-use std::iter::repeat;\n \n #[test]\n fn test() {\n@@ -110,7 +109,7 @@ fn test_as_mut() {\n #[test]\n fn test_ptr_addition() {\n     unsafe {\n-        let xs = repeat(5).take(16).collect::<Vec<_>>();\n+        let xs = vec![5; 16];\n         let mut ptr = xs.as_ptr();\n         let end = ptr.offset(16);\n \n@@ -128,7 +127,7 @@ fn test_ptr_addition() {\n             m_ptr = m_ptr.offset(1);\n         }\n \n-        assert!(xs_mut == repeat(10).take(16).collect::<Vec<_>>());\n+        assert!(xs_mut == vec![10; 16]);\n     }\n }\n "}, {"sha": "cd9e677d87fae8f7ab134729dbb6e828652ceeb9", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -599,7 +599,6 @@ mod tests {\n     use std::io;\n     use std::io::prelude::*;\n     use std::borrow::IntoCow;\n-    use std::iter::repeat;\n \n     /// each node is an index in a vector in the graph.\n     type Node = usize;\n@@ -647,7 +646,7 @@ mod tests {\n         fn to_opt_strs(self) -> Vec<Option<&'static str>> {\n             match self {\n                 UnlabelledNodes(len)\n-                    => repeat(None).take(len).collect(),\n+                    => vec![None; len],\n                 AllNodesLabelled(lbls)\n                     => lbls.into_iter().map(\n                         |l|Some(l)).collect(),"}, {"sha": "73ff51da290d83868974d7445a6d37327a254e5b", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -186,7 +186,7 @@ mod tests {\n     const FILL_BYTES_V_LEN: usize = 13579;\n     #[test]\n     fn test_rng_fill_bytes() {\n-        let mut v = repeat(0).take(FILL_BYTES_V_LEN).collect::<Vec<_>>();\n+        let mut v = vec![0; FILL_BYTES_V_LEN];\n         ::test::rng().fill_bytes(&mut v);\n \n         // Sanity test: if we've gotten here, `fill_bytes` has not infinitely"}, {"sha": "444192b7913ec0b9e585fec4d23b2933b1755b8e", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -704,7 +704,7 @@ fn is_useful(cx: &MatchCheckCtxt,\n                 match is_useful(cx, &matrix, v.tail(), witness) {\n                     UsefulWithWitness(pats) => {\n                         let arity = constructor_arity(cx, &constructor, left_ty);\n-                        let wild_pats: Vec<_> = repeat(DUMMY_WILD_PAT).take(arity).collect();\n+                        let wild_pats = vec![DUMMY_WILD_PAT; arity];\n                         let enum_pat = construct_witness(cx, &constructor, wild_pats, left_ty);\n                         let mut new_pats = vec![enum_pat];\n                         new_pats.extend(pats);\n@@ -862,7 +862,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n     } = raw_pat(r[col]);\n     let head: Option<Vec<&Pat>> = match *node {\n         ast::PatWild(_) =>\n-            Some(repeat(DUMMY_WILD_PAT).take(arity).collect()),\n+            Some(vec![DUMMY_WILD_PAT; arity]),\n \n         ast::PatIdent(_, _, _) => {\n             let opt_def = cx.tcx.def_map.borrow().get(&pat_id).map(|d| d.full_def());\n@@ -875,7 +875,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n                 } else {\n                     None\n                 },\n-                _ => Some(repeat(DUMMY_WILD_PAT).take(arity).collect())\n+                _ => Some(vec![DUMMY_WILD_PAT; arity])\n             }\n         }\n \n@@ -889,7 +889,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n                 DefVariant(..) | DefStruct(..) => {\n                     Some(match args {\n                         &Some(ref args) => args.iter().map(|p| &**p).collect(),\n-                        &None => repeat(DUMMY_WILD_PAT).take(arity).collect(),\n+                        &None => vec![DUMMY_WILD_PAT; arity],\n                     })\n                 }\n                 _ => None"}, {"sha": "dea769197aa96c0d9adc0bb053f51ade53989057", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -21,7 +21,6 @@ use middle::cfg::CFGIndex;\n use middle::ty;\n use std::io;\n use std::usize;\n-use std::iter::repeat;\n use syntax::ast;\n use syntax::ast_util::IdRange;\n use syntax::visit;\n@@ -239,11 +238,11 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n \n         let entry = if oper.initial_value() { usize::MAX } else {0};\n \n-        let zeroes: Vec<_> = repeat(0).take(num_nodes * words_per_id).collect();\n-        let gens: Vec<_> = zeroes.clone();\n-        let kills1: Vec<_> = zeroes.clone();\n-        let kills2: Vec<_> = zeroes;\n-        let on_entry: Vec<_> = repeat(entry).take(num_nodes * words_per_id).collect();\n+        let zeroes = vec![0; num_nodes * words_per_id];\n+        let gens = zeroes.clone();\n+        let kills1 = zeroes.clone();\n+        let kills2 = zeroes;\n+        let on_entry = vec![entry; num_nodes * words_per_id];\n \n         let nodeid_to_index = build_nodeid_to_index(decl, cfg);\n \n@@ -511,7 +510,7 @@ impl<'a, 'tcx, O:DataFlowOperator+Clone+'static> DataFlowContext<'a, 'tcx, O> {\n                 changed: true\n             };\n \n-            let mut temp: Vec<_> = repeat(0).take(words_per_id).collect();\n+            let mut temp = vec![0; words_per_id];\n             while propcx.changed {\n                 propcx.changed = false;\n                 propcx.reset(&mut temp);"}, {"sha": "ba5814167a6179b446f013606bed2f4178839e49", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -34,7 +34,6 @@ use util::nodemap::{FnvHashMap, FnvHashSet};\n use std::cell::{Cell, RefCell};\n use std::cmp::Ordering::{self, Less, Greater, Equal};\n use std::fmt;\n-use std::iter::repeat;\n use std::u32;\n use syntax::ast;\n \n@@ -1304,7 +1303,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n         // idea is to report errors that derive from independent\n         // regions of the graph, but not those that derive from\n         // overlapping locations.\n-        let mut dup_vec: Vec<_> = repeat(u32::MAX).take(self.num_vars() as usize).collect();\n+        let mut dup_vec = vec![u32::MAX; self.num_vars() as usize];\n \n         for idx in 0..self.num_vars() as usize {\n             match var_data[idx].value {"}, {"sha": "4345649de0c815d9ad8094d7f40b956473b078c5", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -119,7 +119,6 @@ use util::nodemap::NodeMap;\n use std::{fmt, usize};\n use std::io::prelude::*;\n use std::io;\n-use std::iter::repeat;\n use std::rc::Rc;\n use syntax::ast::{self, NodeId, Expr};\n use syntax::codemap::{BytePos, original_sp, Span};\n@@ -566,8 +565,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         Liveness {\n             ir: ir,\n             s: specials,\n-            successors: repeat(invalid_node()).take(num_live_nodes).collect(),\n-            users: repeat(invalid_users()).take(num_live_nodes * num_vars).collect(),\n+            successors: vec![invalid_node(); num_live_nodes],\n+            users: vec![invalid_users(); num_live_nodes * num_vars],\n             loop_scope: Vec::new(),\n             break_ln: NodeMap(),\n             cont_ln: NodeMap(),"}, {"sha": "4f904c20a51d0fa110fd6dda17e2ae1563031dd8", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -12,7 +12,6 @@\n //! use. This implementation is not intended for external use or for any use where security is\n //! important.\n \n-use std::iter::repeat;\n use std::slice::bytes::{MutableByteVector, copy_memory};\n use serialize::hex::ToHex;\n \n@@ -255,7 +254,7 @@ pub trait Digest {\n     /// Convenience function that retrieves the result of a digest as a\n     /// newly allocated vec of bytes.\n     fn result_bytes(&mut self) -> Vec<u8> {\n-        let mut buf: Vec<u8> = repeat(0).take((self.output_bits()+7)/8).collect();\n+        let mut buf = vec![0; (self.output_bits()+7)/8];\n         self.result(&mut buf);\n         buf\n     }\n@@ -534,7 +533,6 @@ mod tests {\n     use self::rand::Rng;\n     use self::rand::isaac::IsaacRng;\n     use serialize::hex::FromHex;\n-    use std::iter::repeat;\n     use std::u64;\n     use super::{Digest, Sha256, FixedBuffer};\n \n@@ -613,7 +611,7 @@ mod tests {\n     /// correct.\n     fn test_digest_1million_random<D: Digest>(digest: &mut D, blocksize: usize, expected: &str) {\n         let total_size = 1000000;\n-        let buffer: Vec<u8> = repeat('a' as u8).take(blocksize * 2).collect();\n+        let buffer = vec![b'a'; blocksize * 2];\n         let mut rng = IsaacRng::new_unseeded();\n         let mut count = 0;\n "}, {"sha": "f2f4a69d882b45c671d6538693d2911e7a4d15ce", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::iter;\n-\n /// A very simple BitVector type.\n pub struct BitVector {\n     data: Vec<u64>\n@@ -18,7 +16,7 @@ pub struct BitVector {\n impl BitVector {\n     pub fn new(num_bits: usize) -> BitVector {\n         let num_words = (num_bits + 63) / 64;\n-        BitVector { data: iter::repeat(0).take(num_words).collect() }\n+        BitVector { data: vec![0; num_words] }\n     }\n \n     fn word_mask(&self, bit: usize) -> (usize, u64) {"}, {"sha": "fa3824866ccb8880738d9055fa54e1e9fe94437a", "filename": "src/librustc_trans/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -21,7 +21,6 @@ use trans::context::CrateContext;\n use trans::type_::Type;\n \n use std::cmp;\n-use std::iter::repeat;\n \n #[derive(Clone, Copy, PartialEq)]\n enum RegClass {\n@@ -319,7 +318,7 @@ fn classify_ty(ty: Type) -> Vec<RegClass> {\n     }\n \n     let words = (ty_size(ty) + 7) / 8;\n-    let mut cls: Vec<_> = repeat(NoClass).take(words).collect();\n+    let mut cls = vec![NoClass; words];\n     if words > 4 {\n         all_mem(&mut cls);\n         return cls;"}, {"sha": "5b6d939d9e6235fd319d5bd3018d2bb5c09d433a", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -35,7 +35,6 @@ use middle::subst::Substs;\n use middle::ty::{self, Ty};\n use util::nodemap::NodeMap;\n \n-use std::iter::repeat;\n use libc::c_uint;\n use syntax::{ast, ast_util};\n use syntax::parse::token;\n@@ -780,7 +779,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             let llunitty = type_of::type_of(cx, unit_ty);\n             let n = cx.tcx().eval_repeat_count(count);\n             let unit_val = const_expr(cx, &**elem, param_substs, fn_args).0;\n-            let vs: Vec<_> = repeat(unit_val).take(n).collect();\n+            let vs = vec![unit_val; n];\n             if val_ty(unit_val) != llunitty {\n                 C_struct(cx, &vs[..], false)\n             } else {"}, {"sha": "f62e4d43cc6c073bf54d9587b1eb17abf66763ec", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -83,7 +83,6 @@ use syntax::{ast, ast_util, codemap};\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n use syntax::parse::token;\n-use std::iter::repeat;\n use std::mem;\n \n // Destinations\n@@ -1400,7 +1399,7 @@ fn trans_struct<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     let tcx = bcx.tcx();\n     with_field_tys(tcx, ty, Some(expr_id), |discr, field_tys| {\n-        let mut need_base: Vec<bool> = repeat(true).take(field_tys.len()).collect();\n+        let mut need_base = vec![true; field_tys.len()];\n \n         let numbered_fields = fields.iter().map(|field| {\n             let opt_pos ="}, {"sha": "ac39d10a23d6ed59e09d79854fd802174f00ff05", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -23,7 +23,6 @@ use std::ffi::CString;\n use std::mem;\n use std::ptr;\n use std::cell::RefCell;\n-use std::iter::repeat;\n \n use libc::c_uint;\n \n@@ -253,7 +252,7 @@ impl Type {\n             if n_elts == 0 {\n                 return Vec::new();\n             }\n-            let mut elts: Vec<_> = repeat(Type { rf: ptr::null_mut() }).take(n_elts).collect();\n+            let mut elts = vec![Type { rf: ptr::null_mut() }; n_elts];\n             llvm::LLVMGetStructElementTypes(self.to_ref(),\n                                             elts.as_mut_ptr() as *mut TypeRef);\n             elts\n@@ -267,7 +266,7 @@ impl Type {\n     pub fn func_params(&self) -> Vec<Type> {\n         unsafe {\n             let n_args = llvm::LLVMCountParamTypes(self.to_ref()) as usize;\n-            let mut args: Vec<_> = repeat(Type { rf: ptr::null_mut() }).take(n_args).collect();\n+            let mut args = vec![Type { rf: ptr::null_mut() }; n_args];\n             llvm::LLVMGetParamTypes(self.to_ref(),\n                                     args.as_mut_ptr() as *mut TypeRef);\n             args"}, {"sha": "ef3c858bed5862b21ec620d3f3b32207b4972732", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -64,7 +64,6 @@ use rscope::{self, UnelidableRscope, RegionScope, ElidableRscope, ExplicitRscope\n use util::common::{ErrorReported, FN_OUTPUT_NAME};\n use util::nodemap::FnvHashSet;\n \n-use std::iter::repeat;\n use std::slice;\n use syntax::{abi, ast, ast_util};\n use syntax::codemap::{Span, Pos};\n@@ -588,7 +587,7 @@ fn convert_parenthesized_parameters<'tcx>(this: &AstConv<'tcx>,\n                                                0, &region_substs, a_t))\n                    .collect::<Vec<Ty<'tcx>>>();\n \n-    let input_params: Vec<_> = repeat(String::new()).take(inputs.len()).collect();\n+    let input_params = vec![String::new(); inputs.len()];\n     let implied_output_region = find_implied_output_region(this.tcx(), &inputs, input_params);\n \n     let input_ty = this.tcx().mk_tup(inputs);"}, {"sha": "b9c986a512ebddc80dab4d83659b89e90a57d1b4", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -20,7 +20,6 @@ use middle::infer;\n use middle::infer::InferCtxt;\n use syntax::ast;\n use syntax::codemap::Span;\n-use std::iter::repeat;\n \n struct ConfirmContext<'a, 'tcx:'a> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n@@ -322,7 +321,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n             } else if num_supplied_types != num_method_types {\n                 span_err!(self.tcx().sess, self.span, E0036,\n                     \"incorrect number of type parameters given for this method\");\n-                repeat(self.tcx().types.err).take(num_method_types).collect()\n+                vec![self.tcx().types.err; num_method_types]\n             } else {\n                 supplied_method_types\n             }"}, {"sha": "638cc86852742b21c6230ea162b00c21aac42648", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -108,7 +108,6 @@ use util::lev_distance::lev_distance;\n \n use std::cell::{Cell, Ref, RefCell};\n use std::mem::replace;\n-use std::iter::repeat;\n use std::slice;\n use syntax::{self, abi, attr};\n use syntax::attr::AttrMetaMethods;\n@@ -4340,15 +4339,15 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         def::DefTyParam(..) => {\n             // Everything but the final segment should have no\n             // parameters at all.\n-            segment_spaces = repeat(None).take(segments.len() - 1).collect();\n+            segment_spaces = vec![None; segments.len() - 1];\n             segment_spaces.push(Some(subst::TypeSpace));\n         }\n \n         // Case 2. Reference to a top-level value.\n         def::DefFn(..) |\n         def::DefConst(..) |\n         def::DefStatic(..) => {\n-            segment_spaces = repeat(None).take(segments.len() - 1).collect();\n+            segment_spaces = vec![None; segments.len() - 1];\n             segment_spaces.push(Some(subst::FnSpace));\n         }\n \n@@ -4362,7 +4361,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             }\n \n             if segments.len() >= 2 {\n-                segment_spaces = repeat(None).take(segments.len() - 2).collect();\n+                segment_spaces = vec![None; segments.len() - 2];\n                 segment_spaces.push(Some(subst::TypeSpace));\n                 segment_spaces.push(Some(subst::FnSpace));\n             } else {\n@@ -4382,7 +4381,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             }\n \n             if segments.len() >= 2 {\n-                segment_spaces = repeat(None).take(segments.len() - 2).collect();\n+                segment_spaces = vec![None; segments.len() - 2];\n                 segment_spaces.push(Some(subst::TypeSpace));\n                 segment_spaces.push(None);\n             } else {\n@@ -4400,7 +4399,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         def::DefRegion(..) |\n         def::DefLabel(..) |\n         def::DefUpvar(..) => {\n-            segment_spaces = repeat(None).take(segments.len()).collect();\n+            segment_spaces = vec![None; segments.len()];\n         }\n     }\n     assert_eq!(segment_spaces.len(), segments.len());\n@@ -4681,7 +4680,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                 if required_len == 1 {\"\"} else {\"s\"},\n                 provided_len,\n                 if provided_len == 1 {\"\"} else {\"s\"});\n-            substs.types.replace(space, repeat(fcx.tcx().types.err).take(desired.len()).collect());\n+            substs.types.replace(space, vec![fcx.tcx().types.err; desired.len()]);\n             return;\n         }\n \n@@ -4813,7 +4812,7 @@ pub fn check_bounds_are_used<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n     // make a vector of booleans initially false, set to true when used\n     if tps.is_empty() { return; }\n-    let mut tps_used: Vec<_> = repeat(false).take(tps.len()).collect();\n+    let mut tps_used = vec![false; tps.len()];\n \n     for leaf_ty in ty.walk() {\n         if let ty::TyParam(ParamTy {idx, ..}) = leaf_ty.sty {"}, {"sha": "1b33f588e924276b267173850f6c0bf4cbf391e6", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -13,7 +13,6 @@ use middle::ty;\n use middle::ty_fold;\n \n use std::cell::Cell;\n-use std::iter::repeat;\n use syntax::codemap::Span;\n \n #[derive(Clone)]\n@@ -147,7 +146,7 @@ impl RegionScope for ElidableRscope {\n                     count: usize)\n                     -> Result<Vec<ty::Region>, Option<Vec<ElisionFailureInfo>>>\n     {\n-        Ok(repeat(self.default).take(count).collect())\n+        Ok(vec![self.default; count])\n     }\n }\n "}, {"sha": "5ecf0fe8ecfb928a92f59c9f102e9b172fe94756", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -1920,7 +1920,7 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     try!(write!(w, r#\"<script type=\"text/javascript\" async\n                               src=\"{root_path}/implementors/{path}/{ty}.{name}.js\">\n                       </script>\"#,\n-                root_path = repeat(\"..\").take(cx.current.len()).collect::<Vec<_>>().connect(\"/\"),\n+                root_path = vec![\"..\"; cx.current.len()].connect(\"/\"),\n                 path = if ast_util::is_local(it.def_id) {\n                     cx.current.connect(\"/\")\n                 } else {"}, {"sha": "06a30670e8b2286546bd01312fb8f66f95e7f0fb", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -1638,7 +1638,7 @@ mod test_map {\n \n     use super::HashMap;\n     use super::Entry::{Occupied, Vacant};\n-    use iter::{range_inclusive, repeat};\n+    use iter::range_inclusive;\n     use cell::RefCell;\n     use rand::{thread_rng, Rng};\n \n@@ -1698,7 +1698,7 @@ mod test_map {\n     #[test]\n     fn test_drops() {\n         DROP_VECTOR.with(|slot| {\n-            *slot.borrow_mut() = repeat(0).take(200).collect();\n+            *slot.borrow_mut() = vec![0; 200];\n         });\n \n         {\n@@ -1757,7 +1757,7 @@ mod test_map {\n     #[test]\n     fn test_move_iter_drops() {\n         DROP_VECTOR.with(|v| {\n-            *v.borrow_mut() = repeat(0).take(200).collect();\n+            *v.borrow_mut() = vec![0; 200];\n         });\n \n         let hm = {"}, {"sha": "f059b24baf6a4f74fd787559a9da9af905300fa0", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -13,7 +13,6 @@ use io::prelude::*;\n \n use cmp;\n use io::{self, SeekFrom, Error, ErrorKind};\n-use iter::repeat;\n use slice;\n \n /// A `Cursor` is a type which wraps a non-I/O object to provide a `Seek`\n@@ -143,7 +142,9 @@ impl Write for Cursor<Vec<u8>> {\n         // currently are\n         let pos = self.position();\n         let amt = pos.saturating_sub(self.inner.len() as u64);\n-        self.inner.extend(repeat(0).take(amt as usize));\n+        // use `resize` so that the zero filling is as efficient as possible\n+        let len = self.inner.len();\n+        self.inner.resize(len + amt as usize, 0);\n \n         // Figure out what bytes will be used to overwrite what's currently\n         // there (left), and what will be appended on the end (right)"}, {"sha": "356787d5bf01ac43e49963a4bac1784553269192", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -12,7 +12,6 @@ use prelude::v1::*;\n use io::prelude::*;\n \n use io::{self, Cursor};\n-use iter::repeat;\n use libc;\n use ptr;\n use str;\n@@ -94,7 +93,7 @@ impl Stdin {\n         let mut utf8 = self.utf8.lock().unwrap();\n         // Read more if the buffer is empty\n         if utf8.position() as usize == utf8.get_ref().len() {\n-            let mut utf16: Vec<u16> = repeat(0u16).take(0x1000).collect();\n+            let mut utf16 = vec![0u16; 0x1000];\n             let mut num = 0;\n             try!(cvt(unsafe {\n                 c::ReadConsoleW(handle,"}, {"sha": "5b972b464c960e6ffc10e0ec0618dd203bcb3537", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -23,7 +23,6 @@ use parse::token;\n use ptr::P;\n \n use std::collections::HashMap;\n-use std::iter::repeat;\n \n #[derive(PartialEq)]\n enum ArgumentType {\n@@ -469,7 +468,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     /// to\n     fn into_expr(mut self) -> P<ast::Expr> {\n         let mut locals = Vec::new();\n-        let mut names: Vec<_> = repeat(None).take(self.name_positions.len()).collect();\n+        let mut names = vec![None; self.name_positions.len()];\n         let mut pats = Vec::new();\n         let mut heads = Vec::new();\n "}, {"sha": "7c5a46465f513163e2954a2d75b6059835a61a14", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -61,7 +61,6 @@\n \n use std::io;\n use std::string;\n-use std::iter::repeat;\n \n #[derive(Clone, Copy, PartialEq)]\n pub enum Breaks {\n@@ -166,9 +165,9 @@ pub fn mk_printer<'a>(out: Box<io::Write+'a>, linewidth: usize) -> Printer<'a> {\n     // fall behind.\n     let n: usize = 3 * linewidth;\n     debug!(\"mk_printer {}\", linewidth);\n-    let token: Vec<Token> = repeat(Token::Eof).take(n).collect();\n-    let size: Vec<isize> = repeat(0).take(n).collect();\n-    let scan_stack: Vec<usize> = repeat(0).take(n).collect();\n+    let token = vec![Token::Eof; n];\n+    let size = vec![0_isize; n];\n+    let scan_stack = vec![0_usize; n];\n     Printer {\n         out: out,\n         buf_len: n,"}, {"sha": "e7d64dfe2c5a8e1029e252fed39f5670bb215bad", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -12,7 +12,6 @@\n \n #![feature(rand, vec_push_all, duration, duration_span)]\n \n-use std::iter::repeat;\n use std::mem::swap;\n use std::env;\n use std::__rand::{thread_rng, Rng};\n@@ -56,7 +55,7 @@ fn maybe_run_test<F>(argv: &[String], name: String, test: F) where F: FnOnce() {\n }\n \n fn shift_push() {\n-    let mut v1 = repeat(1).take(30000).collect::<Vec<_>>();\n+    let mut v1 = vec![1; 30000];\n     let mut v2 = Vec::new();\n \n     while !v1.is_empty() {\n@@ -70,7 +69,7 @@ fn vec_plus() {\n     let mut v = Vec::new();\n     let mut i = 0;\n     while i < 1500 {\n-        let rv = repeat(i).take(r.gen_range(0, i + 1)).collect::<Vec<_>>();\n+        let rv = vec![i; r.gen_range(0, i + 1)];\n         if r.gen() {\n             v.extend(rv);\n         } else {\n@@ -88,7 +87,7 @@ fn vec_append() {\n     let mut v = Vec::new();\n     let mut i = 0;\n     while i < 1500 {\n-        let rv = repeat(i).take(r.gen_range(0, i + 1)).collect::<Vec<_>>();\n+        let rv = vec![i; r.gen_range(0, i + 1)];\n         if r.gen() {\n             let mut t = v.clone();\n             t.push_all(&rv);\n@@ -108,7 +107,7 @@ fn vec_push_all() {\n \n     let mut v = Vec::new();\n     for i in 0..1500 {\n-        let mut rv = repeat(i).take(r.gen_range(0, i + 1)).collect::<Vec<_>>();\n+        let mut rv = vec![i; r.gen_range(0, i + 1)];\n         if r.gen() {\n             v.push_all(&rv);\n         }"}, {"sha": "3f3c9e52220a1fd7f954f738ffd96debb28d598b", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -42,7 +42,6 @@ use std::cmp::min;\n use std::env;\n use std::io;\n use std::io::prelude::*;\n-use std::iter::repeat;\n \n const LINE_LEN: usize = 60;\n const LOOKUP_SIZE: usize = 4 * 1024;\n@@ -121,7 +120,7 @@ impl<'a, W: Write> RepeatFasta<'a, W> {\n \n     fn make(&mut self, n: usize) -> io::Result<()> {\n         let alu_len = self.alu.len();\n-        let mut buf = repeat(0).take(alu_len + LINE_LEN).collect::<Vec<_>>();\n+        let mut buf = vec![0; alu_len + LINE_LEN];\n         let alu: &[u8] = self.alu.as_bytes();\n \n         for (slot, val) in buf.iter_mut().zip(alu) {"}, {"sha": "331d83b535a0cfae57b51d03fea9e8bac61462c7", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -42,7 +42,6 @@\n \n #![feature(iter_cmp)]\n \n-use std::iter::repeat;\n use std::sync::Arc;\n use std::sync::mpsc::channel;\n use std::thread;\n@@ -221,7 +220,7 @@ fn get_id(m: u64) -> u8 {\n \n // Converts a list of mask to a Vec<u8>.\n fn to_vec(raw_sol: &List<u64>) -> Vec<u8> {\n-    let mut sol = repeat('.' as u8).take(50).collect::<Vec<_>>();\n+    let mut sol = vec![b'.'; 50];\n     for &m in raw_sol.iter() {\n         let id = '0' as u8 + get_id(m);\n         for i in 0..50 {"}, {"sha": "7f3f6a3c85f89cd9d981cbb80b1ddc9e2c1b1716", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -43,7 +43,6 @@\n #![allow(non_snake_case)]\n #![feature(unboxed_closures, iter_arith, core_simd, scoped)]\n \n-use std::iter::repeat;\n use std::thread;\n use std::env;\n use std::simd::f64x2;\n@@ -62,7 +61,7 @@ fn main() {\n \n fn spectralnorm(n: usize) -> f64 {\n     assert!(n % 2 == 0, \"only even lengths are accepted\");\n-    let mut u = repeat(1.0).take(n).collect::<Vec<_>>();\n+    let mut u = vec![1.0; n];\n     let mut v = u.clone();\n     let mut tmp = v.clone();\n     for _ in 0..10 {"}, {"sha": "bcadfd74493dc18a411bf6eb30f26e7e40480c24", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -15,7 +15,6 @@\n \n use std::io::prelude::*;\n use std::io;\n-use std::iter::repeat;\n use std::env;\n \n // Computes a single solution to a given 9x9 sudoku\n@@ -59,8 +58,7 @@ impl Sudoku {\n         reader.read_line(&mut s).unwrap();\n         assert_eq!(s, \"9,9\\n\");\n \n-        let mut g = repeat(vec![0, 0, 0, 0, 0, 0, 0, 0, 0])\n-                          .take(10).collect::<Vec<_>>();\n+        let mut g = vec![vec![0, 0, 0, 0, 0, 0, 0, 0, 0]; 10];\n         for line in reader.lines() {\n             let line = line.unwrap();\n             let comps: Vec<&str> = line"}, {"sha": "5cd58c0ecfb262221e76df2d25c1323344b8eb04", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -68,12 +68,9 @@ impl Drop for AsciiArt {\n // If there is a canonical constructor it is typically named the same as the type.\n // Other constructor sort of functions are typically named from_foo, from_bar, etc.\n fn AsciiArt(width: usize, height: usize, fill: char) -> AsciiArt {\n-    // Use an anonymous function to build a vector of vectors containing\n-    // blank characters for each position in our canvas.\n-    let mut lines = Vec::new();\n-    for _ in 0..height {\n-        lines.push(repeat('.').take(width).collect::<Vec<_>>());\n-    }\n+    // Build a vector of vectors containing blank characters for each position in\n+    // our canvas.\n+    let lines = vec![vec!['.'; width]; height];\n \n     // Rust code often returns values by omitting the trailing semi-colon\n     // instead of using an explicit return statement."}, {"sha": "b32d42df6b1297ed4f556b6121f619b3cc6d6b35", "filename": "src/test/run-pass/realloc-16687.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11502cda8a05aae9b260141ac9c4538d46bb01b/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frealloc-16687.rs?ref=f11502cda8a05aae9b260141ac9c4538d46bb01b", "patch": "@@ -19,7 +19,6 @@ extern crate alloc;\n \n use alloc::heap;\n use std::ptr;\n-use std::iter::repeat;\n \n fn main() {\n     unsafe {\n@@ -29,7 +28,7 @@ fn main() {\n \n unsafe fn test_triangle() -> bool {\n     static COUNT : usize = 16;\n-    let mut ascend = repeat(ptr::null_mut()).take(COUNT).collect::<Vec<_>>();\n+    let mut ascend = vec![ptr::null_mut(); COUNT];\n     let ascend = &mut *ascend;\n     static ALIGN : usize = 1;\n "}]}