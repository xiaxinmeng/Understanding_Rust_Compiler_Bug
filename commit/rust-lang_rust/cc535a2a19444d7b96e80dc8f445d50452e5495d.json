{"sha": "cc535a2a19444d7b96e80dc8f445d50452e5495d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNTM1YTJhMTk0NDRkN2I5NmU4MGRjOGY0NDVkNTA0NTJlNTQ5NWQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-02T05:47:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-07T02:45:59Z"}, "message": "Bail when encountering a second unexpected token in the same span", "tree": {"sha": "5043bb9f945399df3abf45f0594226c82d3b2e25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5043bb9f945399df3abf45f0594226c82d3b2e25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc535a2a19444d7b96e80dc8f445d50452e5495d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc535a2a19444d7b96e80dc8f445d50452e5495d", "html_url": "https://github.com/rust-lang/rust/commit/cc535a2a19444d7b96e80dc8f445d50452e5495d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc535a2a19444d7b96e80dc8f445d50452e5495d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ec7d0b2281e57a456d6122dadd5646804a9d36e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec7d0b2281e57a456d6122dadd5646804a9d36e", "html_url": "https://github.com/rust-lang/rust/commit/2ec7d0b2281e57a456d6122dadd5646804a9d36e"}], "stats": {"total": 103, "additions": 25, "deletions": 78}, "files": [{"sha": "c27a1f79d8ccb6cbc19662363e573af6910fa669", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cc535a2a19444d7b96e80dc8f445d50452e5495d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc535a2a19444d7b96e80dc8f445d50452e5495d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cc535a2a19444d7b96e80dc8f445d50452e5495d", "patch": "@@ -46,7 +46,7 @@ use crate::ThinVec;\n use crate::tokenstream::{self, DelimSpan, TokenTree, TokenStream, TreeAndJoint};\n use crate::symbol::{Symbol, keywords};\n \n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n use rustc_target::spec::abi::{self, Abi};\n use syntax_pos::{Span, MultiSpan, BytePos, FileName};\n use log::{debug, trace};\n@@ -256,6 +256,7 @@ pub struct Parser<'a> {\n     /// it gets removed from here. Every entry left at the end gets emitted as an independent\n     /// error.\n     crate unclosed_delims: Vec<UnmatchedBrace>,\n+    last_unexpected_token_span: Option<Span>,\n }\n \n \n@@ -582,6 +583,7 @@ impl<'a> Parser<'a> {\n             unmatched_angle_bracket_count: 0,\n             max_angle_bracket_count: 0,\n             unclosed_delims: Vec::new(),\n+            last_unexpected_token_span: None,\n         };\n \n         let tok = parser.next_tok();\n@@ -775,6 +777,8 @@ impl<'a> Parser<'a> {\n         } else if inedible.contains(&self.token) {\n             // leave it in the input\n             Ok(false)\n+        } else if self.last_unexpected_token_span == Some(self.span) {\n+            FatalError.raise();\n         } else {\n             let mut expected = edible.iter()\n                 .map(|x| TokenType::Token(x.clone()))\n@@ -802,6 +806,7 @@ impl<'a> Parser<'a> {\n                  (self.sess.source_map().next_point(self.prev_span),\n                   format!(\"expected {} here\", expect)))\n             };\n+            self.last_unexpected_token_span = Some(self.span);\n             let mut err = self.fatal(&msg_exp);\n             if self.token.is_ident_named(\"and\") {\n                 err.span_suggestion_short(\n@@ -6332,10 +6337,11 @@ impl<'a> Parser<'a> {\n                     &token::CloseDelim(token::Paren), sep, parse_arg_fn)?;\n                 fn_inputs.append(&mut input);\n                 (fn_inputs, recovered)\n-            } else if let Err(err) = self.expect_one_of(&[], &[]) {\n-                return Err(err);\n             } else {\n-                (vec![self_arg], true)\n+                match self.expect_one_of(&[], &[]) {\n+                    Err(err) => return Err(err),\n+                    Ok(recovered) => (vec![self_arg], recovered),\n+                }\n             }\n         } else {\n             self.parse_seq_to_before_end(&token::CloseDelim(token::Paren), sep, parse_arg_fn)?"}, {"sha": "f5edac0d2e316ab7ef528865520761c01c00755a", "filename": "src/test/ui/issues/issue-58856-1.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc535a2a19444d7b96e80dc8f445d50452e5495d/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc535a2a19444d7b96e80dc8f445d50452e5495d/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.rs?ref=cc535a2a19444d7b96e80dc8f445d50452e5495d", "patch": "@@ -1,9 +1,8 @@\n+struct A;\n+\n impl A {\n-//~^ ERROR cannot find type `A` in this scope\n-    fn b(self>\n+    fn b(self> {}\n     //~^ ERROR expected one of `)`, `,`, or `:`, found `>`\n-    //~| ERROR expected one of `->`, `where`, or `{`, found `>`\n-    //~| ERROR expected one of `->`, `async`, `const`, `crate`, `default`, `existential`,\n }\n \n fn main() {}"}, {"sha": "85101e467b137077cf9cb7e651d581d8b259a649", "filename": "src/test/ui/issues/issue-58856-1.stderr", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cc535a2a19444d7b96e80dc8f445d50452e5495d/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc535a2a19444d7b96e80dc8f445d50452e5495d/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr?ref=cc535a2a19444d7b96e80dc8f445d50452e5495d", "patch": "@@ -1,30 +1,11 @@\n error: expected one of `)`, `,`, or `:`, found `>`\n-  --> $DIR/issue-58856-1.rs:3:14\n+  --> $DIR/issue-58856-1.rs:4:14\n    |\n-LL |     fn b(self>\n+LL |     fn b(self> {}\n    |         -    ^\n    |         |    |\n    |         |    help: `)` may belong here\n    |         unclosed delimiter\n \n-error: expected one of `->`, `where`, or `{`, found `>`\n-  --> $DIR/issue-58856-1.rs:3:14\n-   |\n-LL |     fn b(self>\n-   |              ^ expected one of `->`, `where`, or `{` here\n-\n-error: expected one of `->`, `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`, `pub`, `type`, `unsafe`, `where`, or `}`, found `>`\n-  --> $DIR/issue-58856-1.rs:3:14\n-   |\n-LL |     fn b(self>\n-   |              ^ expected one of 13 possible tokens here\n-\n-error[E0412]: cannot find type `A` in this scope\n-  --> $DIR/issue-58856-1.rs:1:6\n-   |\n-LL | impl A {\n-   |      ^ not found in this scope\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0412`."}, {"sha": "acc38e4c20163ee9f626d52a0a23b86a91fb6fa8", "filename": "src/test/ui/issues/issue-58856-2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc535a2a19444d7b96e80dc8f445d50452e5495d/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc535a2a19444d7b96e80dc8f445d50452e5495d/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.rs?ref=cc535a2a19444d7b96e80dc8f445d50452e5495d", "patch": "@@ -1,11 +1,12 @@\n+struct Empty;\n+\n trait Howness {}\n+\n impl Howness for () {\n     fn how_are_you(&self -> Empty {\n     //~^ ERROR expected one of `)` or `,`, found `->`\n     //~| ERROR method `how_are_you` is not a member of trait `Howness`\n-    //~| ERROR cannot find type `Empty` in this scope\n         Empty\n-        //~^ ERROR cannot find value `Empty` in this scope\n     }\n }\n //~^ ERROR expected one of `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`,"}, {"sha": "55a9e9d5cb863004d18983f07c573ae5adc359c9", "filename": "src/test/ui/issues/issue-58856-2.stderr", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cc535a2a19444d7b96e80dc8f445d50452e5495d/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc535a2a19444d7b96e80dc8f445d50452e5495d/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr?ref=cc535a2a19444d7b96e80dc8f445d50452e5495d", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `)` or `,`, found `->`\n-  --> $DIR/issue-58856-2.rs:3:26\n+  --> $DIR/issue-58856-2.rs:6:26\n    |\n LL |     fn how_are_you(&self -> Empty {\n    |                   -     -^^\n@@ -8,48 +8,23 @@ LL |     fn how_are_you(&self -> Empty {\n    |                   unclosed delimiter\n \n error: expected one of `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `)`\n-  --> $DIR/issue-58856-2.rs:10:1\n+  --> $DIR/issue-58856-2.rs:11:1\n    |\n LL |     }\n    |      - expected one of 11 possible tokens here\n LL | }\n    | ^ unexpected token\n \n error[E0407]: method `how_are_you` is not a member of trait `Howness`\n-  --> $DIR/issue-58856-2.rs:3:5\n+  --> $DIR/issue-58856-2.rs:6:5\n    |\n LL | /     fn how_are_you(&self -> Empty {\n LL | |     //~^ ERROR expected one of `)` or `,`, found `->`\n LL | |     //~| ERROR method `how_are_you` is not a member of trait `Howness`\n-LL | |     //~| ERROR cannot find type `Empty` in this scope\n LL | |         Empty\n-LL | |         //~^ ERROR cannot find value `Empty` in this scope\n LL | |     }\n    | |_____^ not a member of trait `Howness`\n \n-error[E0412]: cannot find type `Empty` in this scope\n-  --> $DIR/issue-58856-2.rs:3:29\n-   |\n-LL |     fn how_are_you(&self -> Empty {\n-   |                             ^^^^^ not found in this scope\n-help: possible candidates are found in other modules, you can import them into scope\n-   |\n-LL | use std::io::Empty;\n-   |\n-LL | use std::iter::Empty;\n-   |\n-\n-error[E0425]: cannot find value `Empty` in this scope\n-  --> $DIR/issue-58856-2.rs:7:9\n-   |\n-LL |         Empty\n-   |         ^^^^^ not found in this scope\n-help: possible candidate is found in another module, you can import it into scope\n-   |\n-LL | use std::sync::mpsc::TryRecvError::Empty;\n-   |\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0407, E0412, E0425.\n-For more information about an error, try `rustc --explain E0407`.\n+For more information about this error, try `rustc --explain E0407`."}, {"sha": "7f2f2cc7ab039b8897de9b75a0f34e3fb51414a8", "filename": "src/test/ui/parser/recover-enum2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc535a2a19444d7b96e80dc8f445d50452e5495d/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc535a2a19444d7b96e80dc8f445d50452e5495d/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.rs?ref=cc535a2a19444d7b96e80dc8f445d50452e5495d", "patch": "@@ -25,9 +25,6 @@ fn main() {\n         // fail again\n         enum Test4 {\n             Nope(i32 {}) //~ ERROR: found `{`\n-                         //~^ ERROR: found `{`\n         }\n     }\n-    // still recover later\n-    let bad_syntax = _; //~ ERROR: expected expression, found reserved identifier `_`\n }"}, {"sha": "315bfde77c73c6d80e39646f2baaae4fe3af55a8", "filename": "src/test/ui/parser/recover-enum2.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cc535a2a19444d7b96e80dc8f445d50452e5495d/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc535a2a19444d7b96e80dc8f445d50452e5495d/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr?ref=cc535a2a19444d7b96e80dc8f445d50452e5495d", "patch": "@@ -10,17 +10,5 @@ error: expected one of `!`, `(`, `)`, `+`, `,`, `::`, or `<`, found `{`\n LL |             Nope(i32 {}) //~ ERROR: found `{`\n    |                      ^ expected one of 7 possible tokens here\n \n-error: expected one of `!`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `...`, `::`, `<`, `?`, `[`, `_`, `crate`, `dyn`, `extern`, `fn`, `for`, `impl`, `pub`, `unsafe`, `}`, or lifetime, found `{`\n-  --> $DIR/recover-enum2.rs:27:22\n-   |\n-LL |             Nope(i32 {}) //~ ERROR: found `{`\n-   |                      ^ expected one of 24 possible tokens here\n-\n-error: expected expression, found reserved identifier `_`\n-  --> $DIR/recover-enum2.rs:32:22\n-   |\n-LL |     let bad_syntax = _; //~ ERROR: expected expression, found reserved identifier `_`\n-   |                      ^ expected expression\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n "}]}