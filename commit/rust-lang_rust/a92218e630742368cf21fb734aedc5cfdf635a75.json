{"sha": "a92218e630742368cf21fb734aedc5cfdf635a75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MjIxOGU2MzA3NDIzNjhjZjIxZmI3MzRhZWRjNWNmZGY2MzVhNzU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-27T06:38:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-04T22:59:56Z"}, "message": "Upgrade LLVM to svn revision 145779\n\nThis pulls in commits 145765 & 145766, which are required for split stacks.", "tree": {"sha": "adfb2be04d73874ffdf22623abfdd4d7fba3bd5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adfb2be04d73874ffdf22623abfdd4d7fba3bd5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a92218e630742368cf21fb734aedc5cfdf635a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a92218e630742368cf21fb734aedc5cfdf635a75", "html_url": "https://github.com/rust-lang/rust/commit/a92218e630742368cf21fb734aedc5cfdf635a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a92218e630742368cf21fb734aedc5cfdf635a75/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96b0881a685e4960439f56cc5ffdcff112894d3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/96b0881a685e4960439f56cc5ffdcff112894d3d", "html_url": "https://github.com/rust-lang/rust/commit/96b0881a685e4960439f56cc5ffdcff112894d3d"}], "stats": {"total": 100, "additions": 34, "deletions": 66}, "files": [{"sha": "52ab6d98edaae684738bc45b1076c7d965670913", "filename": "Makefile.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a92218e630742368cf21fb734aedc5cfdf635a75/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/a92218e630742368cf21fb734aedc5cfdf635a75/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=a92218e630742368cf21fb734aedc5cfdf635a75", "patch": "@@ -202,6 +202,9 @@ COMPILER_INPUTS := $(wildcard $(addprefix $(S)src/comp/, \\\n # LLVM macros\n ######################################################################\n \n+# FIXME: x86-ism\n+LLVM_COMPONENTS=x86 ipo bitreader bitwriter linker asmparser\n+\n define DEF_LLVM_VARS\n # The configure script defines these variables with the target triples\n # separated by Z. This defines new ones with the expected format.\n@@ -214,7 +217,7 @@ LLVM_VERSION_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --version)\n LLVM_BINDIR_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --bindir)\n LLVM_INCDIR_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --includedir)\n LLVM_LIBDIR_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --libdir)\n-LLVM_LIBS_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --libs)\n+LLVM_LIBS_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --libs $$(LLVM_COMPONENTS))\n LLVM_LDFLAGS_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --ldflags)\n LLVM_CXXFLAGS_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --cxxflags)\n LLVM_HOST_TRIPLE_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --host-target)"}, {"sha": "cdf95aeee6696142d46849b1d3aef65729c5c093", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a92218e630742368cf21fb734aedc5cfdf635a75/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a92218e630742368cf21fb734aedc5cfdf635a75/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=a92218e630742368cf21fb734aedc5cfdf635a75", "patch": "@@ -4,6 +4,14 @@\n \n define DEF_RUSTLLVM_TARGETS\n \n+# FIXME: Lately, on windows, llvm-config --includedir is not enough\n+# to find the llvm includes (probably because we're not actually installing\n+# llvm, but using it straight out of the build directory)\n+ifdef CFG_WINDOWSY\n+LLVM_EXTRA_INCDIRS_$(1)= -iquote $(S)src/llvm/include \\\n+                         -iquote llvm/$(1)/include\n+endif\n+\n RUSTLLVM_OBJS_CS_$(1) := $$(addprefix rustllvm/, RustGCMetadataPrinter.cpp \\\n     RustGCStrategy.cpp RustWrapper.cpp)\n \n@@ -14,7 +22,8 @@ endif\n \n RUSTLLVM_DEF_$(1) := rustllvm/rustllvm$$(CFG_DEF_SUFFIX)\n \n-RUSTLLVM_INCS_$(1) = -iquote $$(LLVM_INCDIR_$(1)) \\\n+RUSTLLVM_INCS_$(1) = $$(LLVM_EXTRA_INCDIRS_$(1)) \\\n+                     -iquote $$(LLVM_INCDIR_$(1)) \\\n                      -iquote $$(S)src/rustllvm/include\n RUSTLLVM_OBJS_OBJS_$(1) := $$(RUSTLLVM_OBJS_CS_$(1):rustllvm/%.cpp=rustllvm/$(1)/%.o)\n "}, {"sha": "73137bd7437fd4731de3f610f0cb8815881366ba", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a92218e630742368cf21fb734aedc5cfdf635a75/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a92218e630742368cf21fb734aedc5cfdf635a75/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=a92218e630742368cf21fb734aedc5cfdf635a75", "patch": "@@ -125,7 +125,6 @@ mod write {\n     fn run_passes(sess: session::session, llmod: ModuleRef, output: str) {\n         let opts = sess.get_opts();\n         if opts.time_llvm_passes { llvm::LLVMRustEnableTimePasses(); }\n-        if opts.stack_growth { llvm::LLVMRustEnableSegmentedStacks(); }\n         link_intrinsics(sess, llmod);\n         let pm = mk_pass_manager();\n         let td = mk_target_data(\n@@ -244,7 +243,8 @@ mod write {\n                                     buf_t,\n                                     buf_o,\n                                     LLVMAssemblyFile,\n-                                    CodeGenOptLevel)})});\n+                                    CodeGenOptLevel,\n+                                    opts.stack_growth)})});\n                 }\n \n \n@@ -263,7 +263,8 @@ mod write {\n                                         buf_t,\n                                         buf_o,\n                                         LLVMObjectFile,\n-                                        CodeGenOptLevel)})});\n+                                        CodeGenOptLevel,\n+                                        opts.stack_growth)})});\n                 }\n             } else {\n                 // If we aren't saving temps then just output the file\n@@ -280,7 +281,8 @@ mod write {\n                                     buf_t,\n                                     buf_o,\n                                     FileType,\n-                                    CodeGenOptLevel)})});\n+                                    CodeGenOptLevel,\n+                                    opts.stack_growth)})});\n             }\n             // Clean up and return\n "}, {"sha": "21c09d8ef4210cb0734f679eefcf349e5c9c058b", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a92218e630742368cf21fb734aedc5cfdf635a75/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a92218e630742368cf21fb734aedc5cfdf635a75/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=a92218e630742368cf21fb734aedc5cfdf635a75", "patch": "@@ -852,15 +852,13 @@ native mod llvm {\n \n     /* FIXME: The FileType is an enum.*/\n     fn LLVMRustWriteOutputFile(PM: PassManagerRef, M: ModuleRef, Triple: sbuf,\n-                               Output: sbuf, FileType: int, OptLevel: int);\n+                               Output: sbuf, FileType: int, OptLevel: int,\n+                               EnableSegmentedStacks: bool);\n \n     /** Returns a string describing the last error caused by an LLVMRust*\n         call. */\n     fn LLVMRustGetLastError() -> sbuf;\n \n-    /** Returns a string describing the hosts triple */\n-    fn LLVMRustGetHostTriple() -> sbuf;\n-\n     /** Parses the bitcode in the given memory buffer. */\n     fn LLVMRustParseBitcode(MemBuf: MemoryBufferRef) -> ModuleRef;\n \n@@ -876,8 +874,6 @@ native mod llvm {\n \n     /** Turn on LLVM pass-timing. */\n     fn LLVMRustEnableTimePasses();\n-    /** Turn on LLVM segmented stacks. */\n-    fn LLVMRustEnableSegmentedStacks();\n \n     /** Print the pass timings since static dtors aren't picking them up. */\n     fn LLVMRustPrintPassTimings();"}, {"sha": "80b1ae92922202c197078038c4229045cb1e295f", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=a92218e630742368cf21fb734aedc5cfdf635a75", "patch": "@@ -1 +1 @@\n-Subproject commit 566f233ba64c0bb2773b5717cb18753c7564f4b7\n+Subproject commit 80b1ae92922202c197078038c4229045cb1e295f"}, {"sha": "d50cc527dfd1a1c93a1b35698b47de731020a809", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a92218e630742368cf21fb734aedc5cfdf635a75/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a92218e630742368cf21fb734aedc5cfdf635a75/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=a92218e630742368cf21fb734aedc5cfdf635a75", "patch": "@@ -81,31 +81,35 @@ LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n                         const char *triple,\n                         const char *path,\n                         TargetMachine::CodeGenFileType FileType,\n-                        CodeGenOpt::Level OptLevel) {\n-\n-  // Set compilation options.\n-  llvm::NoFramePointerElim = true;\n+                        CodeGenOpt::Level OptLevel,\n+\t\t\tbool EnableSegmentedStacks) {\n \n   InitializeAllTargets();\n   InitializeAllTargetMCs();\n   InitializeAllAsmPrinters();\n   InitializeAllAsmParsers();\n+\n+  TargetOptions Options;\n+  Options.NoFramePointerElim = true;\n+  Options.EnableSegmentedStacks = EnableSegmentedStacks;\n+\n   std::string Err;\n   const Target *TheTarget = TargetRegistry::lookupTarget(triple, Err);\n   std::string FeaturesStr;\n   std::string Trip(triple);\n   std::string CPUStr = llvm::sys::getHostCPUName();\n   TargetMachine *Target =\n-    TheTarget->createTargetMachine(Trip, CPUStr, FeaturesStr, Reloc::PIC_);\n+    TheTarget->createTargetMachine(Trip, CPUStr, FeaturesStr,\n+\t\t\t\t   Options, Reloc::PIC_,\n+\t\t\t\t   CodeModel::Default, OptLevel);\n   bool NoVerify = false;\n   PassManager *PM = unwrap<PassManager>(PMR);\n   std::string ErrorInfo;\n   raw_fd_ostream OS(path, ErrorInfo,\n                     raw_fd_ostream::F_Binary);\n   formatted_raw_ostream FOS(OS);\n \n-  bool foo = Target->addPassesToEmitFile(*PM, FOS, FileType, OptLevel,\n-                                         NoVerify);\n+  bool foo = Target->addPassesToEmitFile(*PM, FOS, FileType, NoVerify);\n   assert(!foo);\n   (void)foo;\n   PM->run(*unwrap(M));\n@@ -130,12 +134,6 @@ extern \"C\" LLVMModuleRef LLVMRustParseBitcode(LLVMMemoryBufferRef MemBuf) {\n          ? NULL : M;\n }\n \n-extern \"C\" const char *LLVMRustGetHostTriple(void)\n-{\n-  static std::string str = llvm::sys::getHostTriple();\n-  return str.c_str();\n-}\n-\n extern \"C\" LLVMValueRef LLVMRustConstSmallInt(LLVMTypeRef IntTy, unsigned N,\n                                               LLVMBool SignExtend) {\n   return LLVMConstInt(IntTy, (unsigned long long)N, SignExtend);\n@@ -161,11 +159,6 @@ extern \"C\" void LLVMRustPrintPassTimings() {\n   TimerGroup::printAll(OS);\n }\n \n-extern bool llvm::EnableSegmentedStacks;\n-extern \"C\" void LLVMRustEnableSegmentedStacks() {\n-  EnableSegmentedStacks = true;\n-}\n-\n extern \"C\" LLVMValueRef LLVMGetOrInsertFunction(LLVMModuleRef M,\n                                                 const char* Name,\n                                                 LLVMTypeRef FunctionTy) {"}, {"sha": "381c5293eb73cd7e937aa30f5949f3b982b9483a", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a92218e630742368cf21fb734aedc5cfdf635a75/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/a92218e630742368cf21fb734aedc5cfdf635a75/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=a92218e630742368cf21fb734aedc5cfdf635a75", "patch": "@@ -2,13 +2,11 @@ LLVMRustCreateMemoryBufferWithContentsOfFile\n LLVMRustEnableTimePasses\n LLVMRustWriteOutputFile\n LLVMRustGetLastError\n-LLVMRustGetHostTriple\n LLVMRustConstSmallInt\n LLVMRustConstInt\n LLVMRustParseBitcode\n LLVMRustParseAssemblyFile\n LLVMRustPrintPassTimings\n-LLVMRustEnableSegmentedStacks\n LLVMLinkModules\n LLVMCreateObjectFile\n LLVMDisposeObjectFile\n@@ -46,7 +44,6 @@ LLVMAddGVNPass\n LLVMAddGlobal\n LLVMAddGlobalDCEPass\n LLVMAddGlobalInAddressSpace\n-LLVMAddGlobalMapping\n LLVMAddGlobalOptimizerPass\n LLVMAddIPConstantPropagationPass\n LLVMAddIPSCCPPass\n@@ -63,8 +60,6 @@ LLVMAddLoopRotatePass\n LLVMAddLoopUnrollPass\n LLVMAddLoopUnswitchPass\n LLVMAddMemCpyOptPass\n-LLVMAddModule\n-LLVMAddModuleProvider\n LLVMAddPromoteMemoryToRegisterPass\n LLVMAddPruneEHPass\n LLVMAddReassociatePass\n@@ -262,17 +257,8 @@ LLVMCountParams\n LLVMCountStructElementTypes\n LLVMCreateBuilder\n LLVMCreateBuilderInContext\n-LLVMCreateExecutionEngine\n-LLVMCreateExecutionEngineForModule\n LLVMCreateFunctionPassManager\n LLVMCreateFunctionPassManagerForModule\n-LLVMCreateGenericValueOfFloat\n-LLVMCreateGenericValueOfInt\n-LLVMCreateGenericValueOfPointer\n-LLVMCreateInterpreter\n-LLVMCreateInterpreterForModule\n-LLVMCreateJITCompiler\n-LLVMCreateJITCompilerForModule\n LLVMCreateMemoryBufferWithContentsOfFile\n LLVMCreateMemoryBufferWithSTDIN\n LLVMCreateModuleProviderForExistingModule\n@@ -283,8 +269,6 @@ LLVMDeleteBasicBlock\n LLVMDeleteFunction\n LLVMDeleteGlobal\n LLVMDisposeBuilder\n-LLVMDisposeExecutionEngine\n-LLVMDisposeGenericValue\n LLVMDisposeMemoryBuffer\n LLVMDisposeMessage\n LLVMDisposeModule\n@@ -301,15 +285,9 @@ LLVMElementAtOffset\n LLVMFP128Type\n LLVMFP128TypeInContext\n LLVMFinalizeFunctionPassManager\n-LLVMFindFunction\n LLVMFloatType\n LLVMFloatTypeInContext\n-LLVMFreeMachineCodeForFunction\n LLVMFunctionType\n-LLVMGenericValueIntWidth\n-LLVMGenericValueToFloat\n-LLVMGenericValueToInt\n-LLVMGenericValueToPointer\n LLVMGetAlignment\n LLVMGetArrayLength\n LLVMGetAttribute\n@@ -324,7 +302,6 @@ LLVMGetCurrentDebugLocation\n LLVMGetDataLayout\n LLVMGetElementType\n LLVMGetEntryBasicBlock\n-LLVMGetExecutionEngineTargetData\n LLVMGetFirstBasicBlock\n LLVMGetFirstFunction\n LLVMGetFirstGlobal\n@@ -372,7 +349,6 @@ LLVMGetParamParent\n LLVMGetParamTypes\n LLVMGetParams\n LLVMGetPointerAddressSpace\n-LLVMGetPointerToGlobal\n LLVMGetPreviousBasicBlock\n LLVMGetPreviousFunction\n LLVMGetPreviousGlobal\n@@ -399,7 +375,6 @@ LLVMInitializeCodeGen\n LLVMInitializeFunctionPassManager\n LLVMInitializeIPA\n LLVMInitializeInstCombine\n-LLVMInitializeInstrumentation\n LLVMInitializeScalarOpts\n LLVMInitializeTarget\n LLVMInitializeTransformUtils\n@@ -508,9 +483,6 @@ LLVMIsThreadLocal\n LLVMIsUndef\n LLVMLabelType\n LLVMLabelTypeInContext\n-LLVMLinkInInterpreter\n-LLVMLinkInJIT\n-LLVMLinkInMCJIT\n LLVMMDNode\n LLVMMDNodeInContext\n LLVMMDString\n@@ -542,19 +514,12 @@ LLVMPositionBuilderAtEnd\n LLVMPositionBuilderBefore\n LLVMPreferredAlignmentOfGlobal\n LLVMPreferredAlignmentOfType\n-LLVMRecompileAndRelinkFunction\n LLVMRemoveAttribute\n LLVMRemoveFunctionAttr\n LLVMRemoveInstrAttribute\n-LLVMRemoveModule\n-LLVMRemoveModuleProvider\n LLVMReplaceAllUsesWith\n-LLVMRunFunction\n-LLVMRunFunctionAsMain\n LLVMRunFunctionPassManager\n LLVMRunPassManager\n-LLVMRunStaticConstructors\n-LLVMRunStaticDestructors\n LLVMSetAlignment\n LLVMSetCleanup\n LLVMSetCurrentDebugLocation"}]}