{"sha": "c04973585df518edaa3bce547fe00793fa34d360", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNDk3MzU4NWRmNTE4ZWRhYTNiY2U1NDdmZTAwNzkzZmEzNGQzNjA=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-09-13T15:47:24Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-09-13T15:48:03Z"}, "message": "Support `ignore` for lint examples.", "tree": {"sha": "e621ea03cbc34a16b5a4fe0b3a2943ecfdae6906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e621ea03cbc34a16b5a4fe0b3a2943ecfdae6906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c04973585df518edaa3bce547fe00793fa34d360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c04973585df518edaa3bce547fe00793fa34d360", "html_url": "https://github.com/rust-lang/rust/commit/c04973585df518edaa3bce547fe00793fa34d360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c04973585df518edaa3bce547fe00793fa34d360/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce014be0b9d0325ad9e6ecb8c93b3c8186b18089", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089", "html_url": "https://github.com/rust-lang/rust/commit/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "62e021d5e45bd42eec9073fd84aec74133bb04d4", "filename": "compiler/rustc_session/src/lint.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c04973585df518edaa3bce547fe00793fa34d360/compiler%2Frustc_session%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04973585df518edaa3bce547fe00793fa34d360/compiler%2Frustc_session%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint.rs?ref=c04973585df518edaa3bce547fe00793fa34d360", "patch": "@@ -319,8 +319,10 @@ impl LintBuffer {\n ///\n /// The `{{produces}}` tag will be automatically replaced with the output from\n /// the example by the build system. You can build and view the rustc book\n-/// with `x.py doc --stage=1 src/doc/rustc --open` (use --stage=0 if just\n-/// changing the wording of an existing lint).\n+/// with `x.py doc --stage=1 src/doc/rustc --open`. If the lint example is too\n+/// complex to run as a simple example (for example, it needs an extern\n+/// crate), mark it with `ignore` and manually paste the expected output below\n+/// the example.\n #[macro_export]\n macro_rules! declare_lint {\n     ($(#[$attr:meta])* $vis: vis $NAME: ident, $Level: ident, $desc: expr) => ("}, {"sha": "935e910c1e2c5b80943e4c2de89ee98efa371c94", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c04973585df518edaa3bce547fe00793fa34d360/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04973585df518edaa3bce547fe00793fa34d360/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=c04973585df518edaa3bce547fe00793fa34d360", "patch": "@@ -128,7 +128,7 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```rust,compile_fail\n+    /// ```rust,ignore (needs separate file)\n     /// fn main() {\n     ///     include!(\"foo.txt\");\n     /// }\n@@ -344,7 +344,7 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```rust,compile_fail\n+    /// ```rust,ignore (needs extern crate)\n     /// #![deny(unused_crate_dependencies)]\n     /// ```\n     ///\n@@ -1984,7 +1984,7 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```rust,compile_fail\n+    /// ```rust,ignore (needs extern crate)\n     /// #![deny(macro_use_extern_crate)]\n     ///\n     /// #[macro_use]\n@@ -2378,7 +2378,19 @@ declare_lint! {\n     /// }\n     /// ```\n     ///\n-    /// {{produces}}\n+    /// This will produce:\n+    ///\n+    /// ```text\n+    /// warning: formatting may not be suitable for sub-register argument\n+    ///  --> src/main.rs:6:19\n+    ///   |\n+    /// 6 |         asm!(\"mov {0}, {0}\", in(reg) 0i16);\n+    ///   |                   ^^^  ^^^           ---- for this argument\n+    ///   |\n+    ///   = note: `#[warn(asm_sub_register)]` on by default\n+    ///   = help: use the `x` modifier to have the register formatted as `ax`\n+    ///   = help: or use the `r` modifier to keep the default formatting of `rax`\n+    /// ```\n     ///\n     /// ### Explanation\n     ///"}, {"sha": "5323bc357c09dd5ffbce9480d6731ffceb56b980", "filename": "src/tools/lint-docs/src/lib.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c04973585df518edaa3bce547fe00793fa34d360/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04973585df518edaa3bce547fe00793fa34d360/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs?ref=c04973585df518edaa3bce547fe00793fa34d360", "patch": "@@ -19,6 +19,13 @@ impl Lint {\n     fn doc_contains(&self, text: &str) -> bool {\n         self.doc.iter().any(|line| line.contains(text))\n     }\n+\n+    fn is_ignored(&self) -> bool {\n+        self.doc\n+            .iter()\n+            .filter(|line| line.starts_with(\"```rust\"))\n+            .all(|line| line.contains(\",ignore\"))\n+    }\n }\n \n #[derive(Clone, Copy, PartialEq)]\n@@ -208,13 +215,8 @@ fn generate_output_example(\n     // try to avoid adding to this list.\n     if matches!(\n         lint.name.as_str(),\n-        \"unused_features\"\n-            | \"unstable_features\"\n-            | \"incomplete_include\"\n-            | \"unused_crate_dependencies\"\n-            | \"exported_private_dependencies\"\n-            | \"proc_macro_derive_resolution_fallback\"\n-            | \"macro_use_extern_crate\"\n+        \"unused_features\" // broken lint\n+        | \"unstable_features\" // deprecated\n     ) {\n         return Ok(());\n     }\n@@ -223,13 +225,22 @@ fn generate_output_example(\n         return Ok(());\n     }\n     check_style(lint)?;\n-    replace_produces(lint, rustc_path, verbose)?;\n+    // Unfortunately some lints have extra requirements that this simple test\n+    // setup can't handle (like extern crates). An alternative is to use a\n+    // separate test suite, and use an include mechanism such as mdbook's\n+    // `{{#rustdoc_include}}`.\n+    if !lint.is_ignored() {\n+        replace_produces(lint, rustc_path, verbose)?;\n+    }\n     Ok(())\n }\n \n /// Checks the doc style of the lint.\n fn check_style(lint: &Lint) -> Result<(), Box<dyn Error>> {\n-    for expected in &[\"### Example\", \"### Explanation\", \"{{produces}}\"] {\n+    for &expected in &[\"### Example\", \"### Explanation\", \"{{produces}}\"] {\n+        if expected == \"{{produces}}\" && lint.is_ignored() {\n+            continue;\n+        }\n         if !lint.doc_contains(expected) {\n             return Err(format!(\"lint docs should contain the line `{}`\", expected).into());\n         }"}]}