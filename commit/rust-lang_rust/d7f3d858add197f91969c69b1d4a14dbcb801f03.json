{"sha": "d7f3d858add197f91969c69b1d4a14dbcb801f03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZjNkODU4YWRkMTk3ZjkxOTY5YzY5YjFkNGExNGRiY2I4MDFmMDM=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-04-19T19:15:49Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-04-19T19:15:49Z"}, "message": "Some clippy fixes", "tree": {"sha": "87de3a5aeb55aabd3bd14ba7132d69751db0bb24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87de3a5aeb55aabd3bd14ba7132d69751db0bb24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7f3d858add197f91969c69b1d4a14dbcb801f03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f3d858add197f91969c69b1d4a14dbcb801f03", "html_url": "https://github.com/rust-lang/rust/commit/d7f3d858add197f91969c69b1d4a14dbcb801f03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7f3d858add197f91969c69b1d4a14dbcb801f03/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24af351018f2aeb11a2fb8cabb551798a5ab695e", "url": "https://api.github.com/repos/rust-lang/rust/commits/24af351018f2aeb11a2fb8cabb551798a5ab695e", "html_url": "https://github.com/rust-lang/rust/commit/24af351018f2aeb11a2fb8cabb551798a5ab695e"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "0621487e8f7e97666cacef033f5f6e0b2fd32b74", "filename": "crates/ra_assists/src/handlers/add_from_impl_for_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs?ref=d7f3d858add197f91969c69b1d4a14dbcb801f03", "patch": "@@ -98,7 +98,7 @@ fn already_has_from_impl(\n     };\n     let var_ty = hir_enum_var.fields(sema.db)[0].signature_ty(sema.db);\n \n-    e_ty.impls_trait(sema.db, from_trait, &[var_ty.clone()])\n+    e_ty.impls_trait(sema.db, from_trait, &[var_ty])\n }\n \n #[cfg(test)]"}, {"sha": "8c09e6bcd063ae40fa848c2648f3d6562fca8340", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=d7f3d858add197f91969c69b1d4a14dbcb801f03", "patch": "@@ -124,7 +124,7 @@ fn anchor_stmt(expr: ast::Expr) -> Option<(SyntaxNode, bool)> {\n             }\n         }\n \n-        if ast::Stmt::cast(node.clone().into()).is_some() {\n+        if ast::Stmt::cast(node.clone()).is_some() {\n             return Some((node, false));\n         }\n "}, {"sha": "4be1238f146d2b3cb00bb485dbde6cfdad478276", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=d7f3d858add197f91969c69b1d4a14dbcb801f03", "patch": "@@ -30,7 +30,7 @@ pub(crate) fn merge_imports(ctx: AssistCtx) -> Option<Assist> {\n             .filter_map(|dir| neighbor(&use_item, dir))\n             .filter_map(|it| Some((it.clone(), it.use_tree()?)))\n             .find_map(|(use_item, use_tree)| {\n-                Some((try_merge_trees(&tree, &use_tree)?, use_item.clone()))\n+                Some((try_merge_trees(&tree, &use_tree)?, use_item))\n             })?;\n \n         rewriter.replace_ast(&tree, &merged);"}, {"sha": "8248684eeac172822032e362a8677af2d61b894f", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=d7f3d858add197f91969c69b1d4a14dbcb801f03", "patch": "@@ -235,7 +235,7 @@ fn parse_meta(meta: &str) -> ParsedMeta {\n             \"env\" => {\n                 for key in value.split(',') {\n                     if let Some((k, v)) = split1(key, '=') {\n-                        env.set(k.into(), v.into());\n+                        env.set(k, v.into());\n                     }\n                 }\n             }"}, {"sha": "ab14e2d5e64d5d771c193324003617f6a7b26fbf", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=d7f3d858add197f91969c69b1d4a14dbcb801f03", "patch": "@@ -327,7 +327,7 @@ impl ExternSource {\n         self.extern_paths.iter().find_map(|(root_path, id)| {\n             if let Ok(rel_path) = path.strip_prefix(root_path) {\n                 let rel_path = RelativePathBuf::from_path(rel_path).ok()?;\n-                Some((id.clone(), rel_path))\n+                Some((*id, rel_path))\n             } else {\n                 None\n             }"}, {"sha": "0caedd8d852e0e69ef64eaf5dd04c3003aa5b424", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=d7f3d858add197f91969c69b1d4a14dbcb801f03", "patch": "@@ -473,16 +473,14 @@ impl ExprCollector<'_> {\n         self.collect_block_items(&block);\n         let statements = block\n             .statements()\n-            .filter_map(|s| match s {\n+            .map(|s| match s {\n                 ast::Stmt::LetStmt(stmt) => {\n                     let pat = self.collect_pat_opt(stmt.pat());\n                     let type_ref = stmt.ascribed_type().map(TypeRef::from_ast);\n                     let initializer = stmt.initializer().map(|e| self.collect_expr(e));\n-                    Some(Statement::Let { pat, type_ref, initializer })\n-                }\n-                ast::Stmt::ExprStmt(stmt) => {\n-                    Some(Statement::Expr(self.collect_expr_opt(stmt.expr())))\n+                    Statement::Let { pat, type_ref, initializer }\n                 }\n+                ast::Stmt::ExprStmt(stmt) => Statement::Expr(self.collect_expr_opt(stmt.expr())),\n             })\n             .collect();\n         let tail = block.expr().map(|e| self.collect_expr(e));"}, {"sha": "d19569245e0b387483ebaf4ef4367c9d06880539", "filename": "crates/ra_hir_expand/src/ast_id_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs?ref=d7f3d858add197f91969c69b1d4a14dbcb801f03", "patch": "@@ -66,7 +66,7 @@ impl AstIdMap {\n         // change parent's id. This means that, say, adding a new function to a\n         // trait does not change ids of top-level items, which helps caching.\n         bfs(node, |it| {\n-            if let Some(module_item) = ast::ModuleItem::cast(it.clone()) {\n+            if let Some(module_item) = ast::ModuleItem::cast(it) {\n                 res.alloc(module_item.syntax());\n             }\n         });"}, {"sha": "3da137f2e65f8a8a137ed0121c39c99c08a9015e", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=d7f3d858add197f91969c69b1d4a14dbcb801f03", "patch": "@@ -301,7 +301,7 @@ fn relative_file(db: &dyn AstDatabase, call_id: MacroCallId, path: &str) -> Opti\n     }\n \n     // Extern paths ?\n-    let krate = db.relevant_crates(call_site).get(0)?.clone();\n+    let krate = *db.relevant_crates(call_site).get(0)?;\n     let (extern_source_id, relative_file) =\n         db.crate_graph()[krate].extern_source.extern_path(path)?;\n \n@@ -329,7 +329,7 @@ fn include_expand(\n \n     // FIXME:\n     // Handle include as expression\n-    let res = parse_to_token_tree(&db.file_text(file_id.into()))\n+    let res = parse_to_token_tree(&db.file_text(file_id))\n         .ok_or_else(|| mbe::ExpandError::ConversionError)?\n         .0;\n \n@@ -340,7 +340,7 @@ fn get_env_inner(db: &dyn AstDatabase, arg_id: EagerMacroId, key: &str) -> Optio\n     let call_id: MacroCallId = arg_id.into();\n     let original_file = call_id.as_file().original_file(db);\n \n-    let krate = db.relevant_crates(original_file).get(0)?.clone();\n+    let krate = *db.relevant_crates(original_file).get(0)?;\n     db.crate_graph()[krate].env.get(key)\n }\n \n@@ -447,7 +447,7 @@ mod tests {\n                     file_id: file_id.into(),\n                 };\n \n-                let id: MacroCallId = db.intern_eager_expansion(eager.into()).into();\n+                let id: MacroCallId = db.intern_eager_expansion(eager).into();\n                 id.as_file()\n             }\n         };"}, {"sha": "753d2ef6a0a014f59c7fca8f5e914634e872ff59", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=d7f3d858add197f91969c69b1d4a14dbcb801f03", "patch": "@@ -96,7 +96,7 @@ fn try_extend_selection(\n         return Some(node.text_range());\n     }\n \n-    let node = shallowest_node(&node.into());\n+    let node = shallowest_node(&node);\n \n     if node.parent().map(|n| list_kinds.contains(&n.kind())) == Some(true) {\n         if let Some(range) = extend_list_item(&node) {"}, {"sha": "84008b2e344d671759fdf4979f9eaf64c94ad95c", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=d7f3d858add197f91969c69b1d4a14dbcb801f03", "patch": "@@ -303,8 +303,7 @@ pub fn load_extern_resources(\n                     if message.target.kind.contains(&\"proc-macro\".to_string()) {\n                         let package_id = message.package_id;\n                         // Skip rmeta file\n-                        if let Some(filename) =\n-                            message.filenames.iter().filter(|name| is_dylib(name)).next()\n+                        if let Some(filename) = message.filenames.iter().find(|name| is_dylib(name))\n                         {\n                             res.proc_dylib_paths.insert(package_id, filename.clone());\n                         }"}, {"sha": "369578fb6cf40a3cb73d8e734443f3135c6b9cb6", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f3d858add197f91969c69b1d4a14dbcb801f03/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=d7f3d858add197f91969c69b1d4a14dbcb801f03", "patch": "@@ -184,7 +184,7 @@ impl WorldState {\n         let mut analysis_host = AnalysisHost::new(lru_capacity);\n         analysis_host.apply_change(change);\n         WorldState {\n-            config: config,\n+            config,\n             roots: folder_roots,\n             workspaces: Arc::new(workspaces),\n             analysis_host,"}]}