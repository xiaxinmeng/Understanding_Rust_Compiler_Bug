{"sha": "1b1700f44b88225bc3557e1ca497644b9852e268", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMTcwMGY0NGI4ODIyNWJjMzU1N2UxY2E0OTc2NDRiOTg1MmUyNjg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-11T03:03:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-11T22:53:28Z"}, "message": "Add core::private::run_in_bare_thread\n\nThis begins executing Rust code in a fresh context with no runtime environment", "tree": {"sha": "401cb1b214872ef944deabb5bd13c0502ea72fc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/401cb1b214872ef944deabb5bd13c0502ea72fc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b1700f44b88225bc3557e1ca497644b9852e268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b1700f44b88225bc3557e1ca497644b9852e268", "html_url": "https://github.com/rust-lang/rust/commit/1b1700f44b88225bc3557e1ca497644b9852e268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b1700f44b88225bc3557e1ca497644b9852e268/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c441e95d69909265e69cffd3439f890914e02b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c441e95d69909265e69cffd3439f890914e02b3", "html_url": "https://github.com/rust-lang/rust/commit/4c441e95d69909265e69cffd3439f890914e02b3"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "fea2bc4e9b6335b484477e7a03a6aec3f92a78f7", "filename": "src/libcore/private.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1b1700f44b88225bc3557e1ca497644b9852e268/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b1700f44b88225bc3557e1ca497644b9852e268/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=1b1700f44b88225bc3557e1ca497644b9852e268", "patch": "@@ -37,6 +37,9 @@ extern mod rustrt {\n     unsafe fn rust_destroy_little_lock(lock: rust_little_lock);\n     unsafe fn rust_lock_little_lock(lock: rust_little_lock);\n     unsafe fn rust_unlock_little_lock(lock: rust_little_lock);\n+\n+    unsafe fn rust_raw_thread_start(f: &fn()) -> *raw_thread;\n+    unsafe fn rust_raw_thread_join_delete(thread: *raw_thread);\n }\n \n #[abi = \"rust-intrinsic\"]\n@@ -46,6 +49,37 @@ extern mod rusti {\n     fn atomic_xsub(dst: &mut int, src: int) -> int;\n }\n \n+#[allow(non_camel_case_types)] // runtime type\n+type raw_thread = libc::c_void;\n+\n+/**\n+Start a new thread outside of the current runtime context and wait for it to terminate.\n+\n+The executing thread has no access to a task pointer and will be using a normal large stack.\n+*/\n+pub unsafe fn run_in_bare_thread(f: ~fn()) {\n+    let (port, chan) = pipes::stream();\n+    // XXX Unfortunate that this creates an extra scheduler but it's necessary\n+    // since rust_raw_thread_join_delete is blocking\n+    do task::spawn_sched(task::SingleThreaded) unsafe {\n+        let closure: &fn() = || {\n+            f()\n+        };\n+        let thread = rustrt::rust_raw_thread_start(closure);\n+        rustrt::rust_raw_thread_join_delete(thread);\n+        chan.send(());\n+    }\n+    port.recv();\n+}\n+\n+#[test]\n+fn test_run_in_bare_thread() unsafe {\n+    let i = 100;\n+    do run_in_bare_thread {\n+        assert i == 100;\n+    }\n+}\n+\n #[allow(non_camel_case_types)] // runtime type\n type rust_port_id = uint;\n "}, {"sha": "b16006e1f91a163d4c11fe9e822cb5d9f5a84064", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1b1700f44b88225bc3557e1ca497644b9852e268/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1b1700f44b88225bc3557e1ca497644b9852e268/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=1b1700f44b88225bc3557e1ca497644b9852e268", "patch": "@@ -15,6 +15,7 @@\n #include \"rust_util.h\"\n #include \"rust_scheduler.h\"\n #include \"sync/timer.h\"\n+#include \"sync/rust_thread.h\"\n #include \"rust_abi.h\"\n #include \"rust_port.h\"\n \n@@ -972,6 +973,36 @@ rust_log_str(uint32_t level, const char *str, size_t size) {\n     task->sched_loop->get_log().log(task, level, \"%.*s\", (int)size, str);\n }\n \n+extern \"C\" CDECL void      record_sp_limit(void *limit);\n+\n+class raw_thread: public rust_thread {\n+public:\n+    fn_env_pair *fn;\n+\n+    raw_thread(fn_env_pair *fn) : fn(fn) { }\n+\n+    virtual void run() {\n+        record_sp_limit(0);\n+        fn->f(NULL, fn->env, NULL);\n+    }\n+};\n+\n+extern \"C\" raw_thread*\n+rust_raw_thread_start(fn_env_pair *fn) {\n+    assert(fn);\n+    raw_thread *thread = new raw_thread(fn);\n+    thread->start();\n+    return thread;\n+}\n+\n+extern \"C\" void\n+rust_raw_thread_join_delete(raw_thread *thread) {\n+    assert(thread);\n+    thread->join();\n+    delete thread;\n+}\n+\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "cce4e411e02c792639907f6ef0f75238e606047c", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b1700f44b88225bc3557e1ca497644b9852e268/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/1b1700f44b88225bc3557e1ca497644b9852e268/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=1b1700f44b88225bc3557e1ca497644b9852e268", "patch": "@@ -208,3 +208,5 @@ linenoiseHistoryAdd\n linenoiseHistorySetMaxLen\n linenoiseHistorySave\n linenoiseHistoryLoad\n+rust_raw_thread_start\n+rust_raw_thread_join_delete"}]}