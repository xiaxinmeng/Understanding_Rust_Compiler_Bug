{"sha": "ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5", "node_id": "C_kwDOAAsO6NoAKGViZGUyYWIzNjNlYTRjZmZmNGZiYjU4ZWY4MjFmM2JjZWJjMzUxYTU", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-04-03T20:30:13Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-04-04T13:10:13Z"}, "message": "Deny `use`ing tool paths", "tree": {"sha": "df0f5ee47767c2565ec299fac4a7a1c2f4d2bbaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df0f5ee47767c2565ec299fac4a7a1c2f4d2bbaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5", "html_url": "https://github.com/rust-lang/rust/commit/ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17675855094906ba90aca2f119be8fb7afc4d456", "url": "https://api.github.com/repos/rust-lang/rust/commits/17675855094906ba90aca2f119be8fb7afc4d456", "html_url": "https://github.com/rust-lang/rust/commit/17675855094906ba90aca2f119be8fb7afc4d456"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "2199ceee532614cedfcddb1da8fb7e596f2fdeec", "filename": "compiler/rustc_resolve/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5/compiler%2Frustc_resolve%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5/compiler%2Frustc_resolve%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fmessages.ftl?ref=ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5", "patch": "@@ -207,5 +207,9 @@ resolve_expected_found =\n resolve_indeterminate =\n     cannot determine resolution for the visibility\n \n+resolve_tool_module_imported =\n+    cannot use a tool module through an import\n+    .note = the tool module imported here\n+\n resolve_module_only =\n     visibility must resolve to a module"}, {"sha": "07aaaa1eb7f600c0d48e1b0a8346e1397b8f8713", "filename": "compiler/rustc_resolve/src/errors.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs?ref=ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5", "patch": "@@ -469,6 +469,15 @@ pub(crate) struct ExpectedFound {\n #[diag(resolve_indeterminate, code = \"E0578\")]\n pub(crate) struct Indeterminate(#[primary_span] pub(crate) Span);\n \n+#[derive(Diagnostic)]\n+#[diag(resolve_tool_module_imported)]\n+pub(crate) struct ToolModuleImported {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+    #[note]\n+    pub(crate) import: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(resolve_module_only)]\n pub(crate) struct ModuleOnly(#[primary_span] pub(crate) Span);"}, {"sha": "2467e604a15b9391ce08ce1dde137f960fcd125c", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5", "patch": "@@ -17,7 +17,7 @@ use crate::late::{\n     ConstantHasGenerics, ConstantItemKind, HasGenericParams, PathSource, Rib, RibKind,\n };\n use crate::macros::{sub_namespace_match, MacroRulesScope};\n-use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy, Finalize};\n+use crate::{errors, AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy, Finalize};\n use crate::{Import, ImportKind, LexicalScopeBinding, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{NameBinding, NameBindingKind, ParentScope, PathResult, PrivacyError, Res};\n use crate::{ResolutionError, Resolver, Scope, ScopeSet, Segment, ToNameBinding, Weak};\n@@ -1357,7 +1357,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 }\n             };\n \n-            let is_last = i == path.len() - 1;\n+            let is_last = i + 1 == path.len();\n             let ns = if is_last { opt_ns.unwrap_or(TypeNS) } else { TypeNS };\n             let name = ident.name;\n \n@@ -1494,16 +1494,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     if let Some(next_module) = binding.module() {\n                         module = Some(ModuleOrUniformRoot::Module(next_module));\n                         record_segment_res(self, res);\n-                    } else if res == Res::ToolMod && i + 1 != path.len() {\n+                    } else if res == Res::ToolMod && !is_last && opt_ns.is_some() {\n                         if binding.is_import() {\n-                            self.tcx\n-                                .sess\n-                                .struct_span_err(\n-                                    ident.span,\n-                                    \"cannot use a tool module through an import\",\n-                                )\n-                                .span_note(binding.span, \"the tool module imported here\")\n-                                .emit();\n+                            self.tcx.sess.emit_err(errors::ToolModuleImported {\n+                                span: ident.span,\n+                                import: binding.span,\n+                            });\n                         }\n                         let res = Res::NonMacroAttr(NonMacroAttrKind::Tool);\n                         return PathResult::NonModule(PartialRes::new(res));"}, {"sha": "971993332f540b2a6aa1e9c3b835b5be1409e39c", "filename": "tests/ui/resolve/tool-import.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5/tests%2Fui%2Fresolve%2Ftool-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5/tests%2Fui%2Fresolve%2Ftool-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Ftool-import.rs?ref=ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5", "patch": "@@ -0,0 +1,8 @@\n+// edition: 2018\n+\n+use clippy::time::Instant;\n+//~^ `clippy` is a tool module\n+\n+fn main() {\n+    Instant::now();\n+}"}, {"sha": "d3bdfc93d49234a13d575bfdfb26c3313760fe7d", "filename": "tests/ui/resolve/tool-import.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5/tests%2Fui%2Fresolve%2Ftool-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5/tests%2Fui%2Fresolve%2Ftool-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Ftool-import.stderr?ref=ebde2ab363ea4cfff4fbb58ef821f3bcebc351a5", "patch": "@@ -0,0 +1,9 @@\n+error[E0433]: failed to resolve: `clippy` is a tool module, not a module\n+  --> $DIR/tool-import.rs:3:5\n+   |\n+LL | use clippy::time::Instant;\n+   |     ^^^^^^ `clippy` is a tool module, not a module\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}]}