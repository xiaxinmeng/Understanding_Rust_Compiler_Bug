{"sha": "6f6433428f064f520d09fb5585dfc3e59e1165e7", "node_id": "C_kwDOAAsO6NoAKDZmNjQzMzQyOGYwNjRmNTIwZDA5ZmI1NTg1ZGZjM2U1OWUxMTY1ZTc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-09-26T14:54:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-07T12:35:12Z"}, "message": "add a few more assert_unsafe_precondition", "tree": {"sha": "68aea41f1a3796e5b29d37369263f69759fdde15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68aea41f1a3796e5b29d37369263f69759fdde15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f6433428f064f520d09fb5585dfc3e59e1165e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6433428f064f520d09fb5585dfc3e59e1165e7", "html_url": "https://github.com/rust-lang/rust/commit/6f6433428f064f520d09fb5585dfc3e59e1165e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f6433428f064f520d09fb5585dfc3e59e1165e7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bd30785eb6e55f317b41b7c278f438807eeb174", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd30785eb6e55f317b41b7c278f438807eeb174", "html_url": "https://github.com/rust-lang/rust/commit/4bd30785eb6e55f317b41b7c278f438807eeb174"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "80036bcc4def7f28158fe2687a80b26cde987911", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f6433428f064f520d09fb5585dfc3e59e1165e7/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6433428f064f520d09fb5585dfc3e59e1165e7/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=6f6433428f064f520d09fb5585dfc3e59e1165e7", "patch": "@@ -100,7 +100,10 @@ use crate::intrinsics;\n pub const unsafe fn unreachable_unchecked() -> ! {\n     // SAFETY: the safety contract for `intrinsics::unreachable` must\n     // be upheld by the caller.\n-    unsafe { intrinsics::unreachable() }\n+    unsafe {\n+        intrinsics::assert_unsafe_precondition!(() => false);\n+        intrinsics::unreachable()\n+    }\n }\n \n /// Emits a machine instruction to signal the processor that it is running in"}, {"sha": "d4ab234cec349898b859d2ee2593391f007c12c7", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f6433428f064f520d09fb5585dfc3e59e1165e7/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6433428f064f520d09fb5585dfc3e59e1165e7/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=6f6433428f064f520d09fb5585dfc3e59e1165e7", "patch": "@@ -1114,6 +1114,7 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n     // Also, since we just wrote a valid value into `tmp`, it is guaranteed\n     // to be properly initialized.\n     unsafe {\n+        assert_unsafe_precondition!([T](src: *const T) => is_aligned_and_not_null(src));\n         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n         tmp.assume_init()\n     }\n@@ -1307,6 +1308,7 @@ pub const unsafe fn write<T>(dst: *mut T, src: T) {\n     // `dst` cannot overlap `src` because the caller has mutable access\n     // to `dst` while `src` is owned by this function.\n     unsafe {\n+        assert_unsafe_precondition!([T](dst: *mut T) => is_aligned_and_not_null(dst));\n         copy_nonoverlapping(&src as *const T, dst, 1);\n         intrinsics::forget(src);\n     }"}, {"sha": "4318e926e47917dca9b99ac60e79168e38382e29", "filename": "src/test/codegen/mem-replace-direct-memcpy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f6433428f064f520d09fb5585dfc3e59e1165e7/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6433428f064f520d09fb5585dfc3e59e1165e7/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs?ref=6f6433428f064f520d09fb5585dfc3e59e1165e7", "patch": "@@ -4,6 +4,7 @@\n // known to be `1` after inlining).\n \n // compile-flags: -C no-prepopulate-passes -Zinline-mir=no\n+// ignore-debug: the debug assertions get in the way\n \n #![crate_type = \"lib\"]\n "}, {"sha": "f6de3699f778189891594022be12634cd343def9", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f6433428f064f520d09fb5585dfc3e59e1165e7/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f6433428f064f520d09fb5585dfc3e59e1165e7/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=6f6433428f064f520d09fb5585dfc3e59e1165e7", "patch": "@@ -1,11 +1,11 @@\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/hint.rs:LL:COL\n    |\n-LL |     unsafe { intrinsics::unreachable() }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              entering unreachable code\n-   |              inside `unreachable_unchecked` at $SRC_DIR/core/src/hint.rs:LL:COL\n+LL |         intrinsics::unreachable()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         entering unreachable code\n+   |         inside `unreachable_unchecked` at $SRC_DIR/core/src/hint.rs:LL:COL\n    |\n   ::: $DIR/const_unsafe_unreachable_ub.rs:6:18\n    |"}]}