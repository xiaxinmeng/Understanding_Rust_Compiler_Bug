{"sha": "7671828d45ea3b0d2f3814fc59bb01cba3d481d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NzE4MjhkNDVlYTNiMGQyZjM4MTRmYzU5YmIwMWNiYTNkNDgxZDU=", "commit": {"author": {"name": "Jason Orendorff", "email": "jason.orendorff@gmail.com", "date": "2010-07-16T04:24:28Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2010-07-16T06:53:49Z"}, "message": "Support nested for-each loops. Closes #79.", "tree": {"sha": "fa4f7c58465350e4aea9e35f8b0f7db8c751a597", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa4f7c58465350e4aea9e35f8b0f7db8c751a597"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7671828d45ea3b0d2f3814fc59bb01cba3d481d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7671828d45ea3b0d2f3814fc59bb01cba3d481d5", "html_url": "https://github.com/rust-lang/rust/commit/7671828d45ea3b0d2f3814fc59bb01cba3d481d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7671828d45ea3b0d2f3814fc59bb01cba3d481d5/comments", "author": {"login": "jorendorff", "id": 283361, "node_id": "MDQ6VXNlcjI4MzM2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/283361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jorendorff", "html_url": "https://github.com/jorendorff", "followers_url": "https://api.github.com/users/jorendorff/followers", "following_url": "https://api.github.com/users/jorendorff/following{/other_user}", "gists_url": "https://api.github.com/users/jorendorff/gists{/gist_id}", "starred_url": "https://api.github.com/users/jorendorff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jorendorff/subscriptions", "organizations_url": "https://api.github.com/users/jorendorff/orgs", "repos_url": "https://api.github.com/users/jorendorff/repos", "events_url": "https://api.github.com/users/jorendorff/events{/privacy}", "received_events_url": "https://api.github.com/users/jorendorff/received_events", "type": "User", "site_admin": true}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1b8863e4546c7732c0dda7f39dfd0d7c51c6b36", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b8863e4546c7732c0dda7f39dfd0d7c51c6b36", "html_url": "https://github.com/rust-lang/rust/commit/e1b8863e4546c7732c0dda7f39dfd0d7c51c6b36"}], "stats": {"total": 115, "additions": 94, "deletions": 21}, "files": [{"sha": "d690686c12b7270bf18e26f471b182adf528b212", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7671828d45ea3b0d2f3814fc59bb01cba3d481d5/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7671828d45ea3b0d2f3814fc59bb01cba3d481d5/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=7671828d45ea3b0d2f3814fc59bb01cba3d481d5", "patch": "@@ -453,6 +453,11 @@ let trans_visitor\n     Il.Mem (fp_imm out_mem_disp, args_rty)\n   in\n \n+  let fp_to_args (fp:Il.cell) (args_rty:Il.referent_ty): Il.cell =\n+    let (reg, _) = force_to_reg (Il.Cell fp) in\n+    Il.Mem(based_imm reg out_mem_disp, args_rty)\n+  in\n+\n   let get_ty_param (ty_params:Il.cell) (param_idx:int) : Il.cell =\n       get_element_ptr ty_params param_idx\n   in\n@@ -753,6 +758,28 @@ let trans_visitor\n             Il.Mem (mem, (pointee_type ptr))\n   in\n \n+  (*\n+   * Within a for-each block, calculate the fp of an enclosing for-each block\n+   * or the enclosing function by chasing static links.\n+   *)\n+  let get_nth_outer_frame_ptr (diff:int) : Il.cell =\n+    (* All for-each block frames have the same args. *)\n+    let block_args_rty = current_fn_args_rty None in\n+    let current_fp = Il.Reg (abi.Abi.abi_fp_reg, Il.AddrTy Il.OpaqueTy) in\n+    let rec out (n:int) (fp:Il.cell) : Il.cell =\n+      if n == 0\n+      then fp\n+      else\n+        let args = fp_to_args fp block_args_rty in\n+        let iter_args = get_element_ptr args Abi.calltup_elt_iterator_args in\n+        let outer_fp =\n+          get_element_ptr iter_args Abi.iterator_args_elt_outer_frame_ptr\n+        in\n+          out (n - 1) outer_fp\n+    in\n+      out diff current_fp\n+  in\n+\n   let cell_of_block_slot\n       (slot_id:node_id)\n       : Il.cell =\n@@ -820,28 +847,13 @@ let trans_visitor\n                             in\n                             let diff = stmt_depth - slot_depth in\n                             let _ = annotate \"get outer frame pointer\" in\n-                            let fp =\n-                              get_iter_outer_frame_ptr_for_current_frame ()\n+                            let fp = get_nth_outer_frame_ptr diff in\n+                            let _ = annotate \"calculate size\" in\n+                            let p =\n+                              based_sz (get_ty_params_of_current_frame())\n+                                (fst (force_to_reg (Il.Cell fp))) off\n                             in\n-                              if diff > 1\n-                              then\n-                                bug () \"unsupported nested for each loop\";\n-                              for i = 2 to diff do\n-                                (* FIXME (issue #79): access outer\n-                                 * caller-block fps, given nearest\n-                                 * caller-block fp. \n-                                 *)\n-                                let _ =\n-                                  annotate \"step to outer-outer frame\"\n-                                in\n-                                  mov fp (Il.Cell fp)\n-                              done;\n-                              let _ = annotate \"calculate size\" in\n-                              let p =\n-                                based_sz (get_ty_params_of_current_frame())\n-                                  (fst (force_to_reg (Il.Cell fp))) off\n-                              in\n-                                Il.Mem (p, referent_type)\n+                              Il.Mem (p, referent_type)\n                           else\n                             Il.Mem (fp_off_sz off, referent_type)\n             end"}, {"sha": "35487e7d92ee13aa2d72a459a8e32953fdb1ebd2", "filename": "src/test/run-pass/foreach-nested-2.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7671828d45ea3b0d2f3814fc59bb01cba3d481d5/src%2Ftest%2Frun-pass%2Fforeach-nested-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7671828d45ea3b0d2f3814fc59bb01cba3d481d5/src%2Ftest%2Frun-pass%2Fforeach-nested-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested-2.rs?ref=7671828d45ea3b0d2f3814fc59bb01cba3d481d5", "patch": "@@ -0,0 +1,38 @@\n+// -*- rust -*-\n+\n+iter two() -> int {\n+    put 0;\n+    put 1;\n+}\n+\n+iter range(int start, int stop) -> int {\n+    let int i = start;\n+    while (i < stop) {\n+        put i;\n+        i += 1;\n+    }\n+}\n+\n+fn main() {\n+    let vec[int] a = vec(-1, -1, -1, -1, -1, -1, -1, -1);\n+    let int p = 0;\n+\n+    for each (int i in two()) {\n+        for each (int j in range(0, 2)) {\n+            let int tmp = 10 * i + j;\n+            for each (int k in range(0, 2)) {\n+                a.(p) = 10 * tmp + k;\n+                p += 1;\n+            }\n+        }\n+    }\n+\n+    check (a.(0) == 0);\n+    check (a.(1) == 1);\n+    check (a.(2) == 10);\n+    check (a.(3) == 11);\n+    check (a.(4) == 100);\n+    check (a.(5) == 101);\n+    check (a.(6) == 110);\n+    check (a.(7) == 111);\n+}"}, {"sha": "848adb26e70878498e64a47c030e49343942b9d2", "filename": "src/test/run-pass/foreach-nested.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7671828d45ea3b0d2f3814fc59bb01cba3d481d5/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7671828d45ea3b0d2f3814fc59bb01cba3d481d5/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=7671828d45ea3b0d2f3814fc59bb01cba3d481d5", "patch": "@@ -0,0 +1,23 @@\n+// -*- rust -*-\n+\n+iter two() -> int {\n+    put 0;\n+    put 1;\n+}\n+\n+fn main() {\n+    let vec[int] a = vec(-1, -1, -1, -1);\n+    let int p = 0;\n+\n+    for each (int i in two()) {\n+        for each (int j in two()) {\n+            a.(p) = 10 * i + j;\n+            p += 1;\n+        }\n+    }\n+\n+    check (a.(0) == 0);\n+    check (a.(1) == 1);\n+    check (a.(2) == 10);\n+    check (a.(3) == 11);\n+}"}]}