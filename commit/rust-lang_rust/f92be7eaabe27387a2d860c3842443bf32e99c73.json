{"sha": "f92be7eaabe27387a2d860c3842443bf32e99c73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MmJlN2VhYWJlMjczODdhMmQ4NjBjMzg0MjQ0M2JmMzJlOTljNzM=", "commit": {"author": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2021-04-18T00:16:38Z"}, "committer": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2021-04-18T00:16:38Z"}, "message": "Escape characters in doc comments in macros correctly\n\nPreviously they were escaped twice, both by `.escape_default()` and the debug view of strings (`{:?}`). This leads to things like newlines or tabs in documentation comments being `\\\\n`, but we unescape literals only once, ending up with `\\n`.\n\nThis was hard to spot because CMark unescaped them (at least for `'` and `\"`), but it did not do so in code blocks.\n\nThis also was the root cause of #7781. This issue was solved by using `.escape_debug()` instead of `.escape_default()`, but the real issue remained.\nWe can bring the `.escape_default()` back by now, however I didn't do it because it is probably slower than `.escape_debug()` (more work to do), and also in order to change the code the least.", "tree": {"sha": "966d0d870973548ccf771126c23df693b2d392fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/966d0d870973548ccf771126c23df693b2d392fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f92be7eaabe27387a2d860c3842443bf32e99c73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f92be7eaabe27387a2d860c3842443bf32e99c73", "html_url": "https://github.com/rust-lang/rust/commit/f92be7eaabe27387a2d860c3842443bf32e99c73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f92be7eaabe27387a2d860c3842443bf32e99c73/comments", "author": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb1d925dab36372c6bd1fb5671bb68ce938ff009", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1d925dab36372c6bd1fb5671bb68ce938ff009", "html_url": "https://github.com/rust-lang/rust/commit/bb1d925dab36372c6bd1fb5671bb68ce938ff009"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "cfab99da80bcb19a02d5940e3eed32158b284fff", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92be7eaabe27387a2d860c3842443bf32e99c73/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92be7eaabe27387a2d860c3842443bf32e99c73/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=f92be7eaabe27387a2d860c3842443bf32e99c73", "patch": "@@ -213,7 +213,7 @@ fn doc_comment_text(comment: &ast::Comment) -> SmolStr {\n \n     // Quote the string\n     // Note that `tt::Literal` expect an escaped string\n-    let text = format!(\"{:?}\", text.escape_debug().to_string());\n+    let text = format!(\"\\\"{}\\\"\", text.escape_debug());\n     text.into()\n }\n "}, {"sha": "84f19d3e23cef95940bce2b53388c960f1e74274", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f92be7eaabe27387a2d860c3842443bf32e99c73/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92be7eaabe27387a2d860c3842443bf32e99c73/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=f92be7eaabe27387a2d860c3842443bf32e99c73", "patch": "@@ -921,7 +921,7 @@ fn test_meta_doc_comments() {\n                 MultiLines Doc\n             */\n         }\"#,\n-        \"# [doc = \\\" Single Line Doc 1\\\"] # [doc = \\\"\\\\\\\\n                MultiLines Doc\\\\\\\\n            \\\"] fn bar () {}\",\n+        \"# [doc = \\\" Single Line Doc 1\\\"] # [doc = \\\"\\\\n                MultiLines Doc\\\\n            \\\"] fn bar () {}\",\n     );\n }\n \n@@ -944,7 +944,27 @@ fn test_meta_doc_comments_non_latin() {\n                 \u838a\u751f\u66c9\u5922\u8ff7\u8774\u8776\uff0c\u671b\u5e1d\u6625\u5fc3\u8a17\u675c\u9d51\u3002\n             */\n         }\"#,\n-        \"# [doc = \\\" \u9326\u745f\u7121\u7aef\u4e94\u5341\u5f26\uff0c\u4e00\u5f26\u4e00\u67f1\u601d\u83ef\u5e74\u3002\\\"] # [doc = \\\"\\\\\\\\n                \u838a\u751f\u66c9\u5922\u8ff7\u8774\u8776\uff0c\u671b\u5e1d\u6625\u5fc3\u8a17\u675c\u9d51\u3002\\\\\\\\n            \\\"] fn bar () {}\",\n+        \"# [doc = \\\" \u9326\u745f\u7121\u7aef\u4e94\u5341\u5f26\uff0c\u4e00\u5f26\u4e00\u67f1\u601d\u83ef\u5e74\u3002\\\"] # [doc = \\\"\\\\n                \u838a\u751f\u66c9\u5922\u8ff7\u8774\u8776\uff0c\u671b\u5e1d\u6625\u5fc3\u8a17\u675c\u9d51\u3002\\\\n            \\\"] fn bar () {}\",\n+    );\n+}\n+\n+#[test]\n+fn test_meta_doc_comments_escaped_characters() {\n+    parse_macro(\n+        r#\"\n+        macro_rules! foo {\n+            ($(#[$ i:meta])+) => (\n+                $(#[$ i])+\n+                fn bar() {}\n+            )\n+        }\n+\"#,\n+    )\n+    .assert_expand_items(\n+        r#\"foo! {\n+            /// \\ \" '\n+        }\"#,\n+        r#\"# [doc = \" \\\\ \\\" \\'\"] fn bar () {}\"#,\n     );\n }\n "}]}