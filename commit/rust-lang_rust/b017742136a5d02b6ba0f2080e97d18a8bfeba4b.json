{"sha": "b017742136a5d02b6ba0f2080e97d18a8bfeba4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMTc3NDIxMzZhNWQwMmI2YmEwZjIwODBlOTdkMThhOGJmZWJhNGI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-04T14:03:46Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-12T20:53:13Z"}, "message": "Return Result instead of Option in alloc::Layout constructors", "tree": {"sha": "bce8f7a832eb5cb80d05a45ef5e562c274b0ff6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bce8f7a832eb5cb80d05a45ef5e562c274b0ff6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b017742136a5d02b6ba0f2080e97d18a8bfeba4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b017742136a5d02b6ba0f2080e97d18a8bfeba4b", "html_url": "https://github.com/rust-lang/rust/commit/b017742136a5d02b6ba0f2080e97d18a8bfeba4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b017742136a5d02b6ba0f2080e97d18a8bfeba4b/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9c96d70bd1471f662aa2ffdfe30ab6df69629d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c96d70bd1471f662aa2ffdfe30ab6df69629d1", "html_url": "https://github.com/rust-lang/rust/commit/f9c96d70bd1471f662aa2ffdfe30ab6df69629d1"}], "stats": {"total": 80, "additions": 54, "deletions": 26}, "files": [{"sha": "18aaf1de08e9c4ace6eff1778d731e9801d14b4b", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b017742136a5d02b6ba0f2080e97d18a8bfeba4b/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b017742136a5d02b6ba0f2080e97d18a8bfeba4b/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=b017742136a5d02b6ba0f2080e97d18a8bfeba4b", "patch": "@@ -422,7 +422,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n \n             // Nothing we can really do about these checks :(\n             let new_cap = used_cap.checked_add(needed_extra_cap).ok_or(CapacityOverflow)?;\n-            let new_layout = Layout::array::<T>(new_cap).ok_or(CapacityOverflow)?;\n+            let new_layout = Layout::array::<T>(new_cap).map_err(|_| CapacityOverflow)?;\n \n             alloc_guard(new_layout.size())?;\n \n@@ -530,7 +530,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n             }\n \n             let new_cap = self.amortized_new_size(used_cap, needed_extra_cap)?;\n-            let new_layout = Layout::array::<T>(new_cap).ok_or(CapacityOverflow)?;\n+            let new_layout = Layout::array::<T>(new_cap).map_err(|_| CapacityOverflow)?;\n \n              // FIXME: may crash and burn on over-reserve\n             alloc_guard(new_layout.size())?;"}, {"sha": "0acaf54e0d92be7b3d9d67a8ae40597ea3280788", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 41, "deletions": 22, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b017742136a5d02b6ba0f2080e97d18a8bfeba4b/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b017742136a5d02b6ba0f2080e97d18a8bfeba4b/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=b017742136a5d02b6ba0f2080e97d18a8bfeba4b", "patch": "@@ -94,9 +94,9 @@ impl Layout {\n     ///    must not overflow (i.e. the rounded value must be less than\n     ///    `usize::MAX`).\n     #[inline]\n-    pub fn from_size_align(size: usize, align: usize) -> Option<Layout> {\n+    pub fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutErr> {\n         if !align.is_power_of_two() {\n-            return None;\n+            return Err(LayoutErr { private: () });\n         }\n \n         // (power-of-two implies align != 0.)\n@@ -114,11 +114,11 @@ impl Layout {\n         // Above implies that checking for summation overflow is both\n         // necessary and sufficient.\n         if size > usize::MAX - (align - 1) {\n-            return None;\n+            return Err(LayoutErr { private: () });\n         }\n \n         unsafe {\n-            Some(Layout::from_size_align_unchecked(size, align))\n+            Ok(Layout::from_size_align_unchecked(size, align))\n         }\n     }\n \n@@ -130,7 +130,7 @@ impl Layout {\n     /// a power-of-two nor `size` aligned to `align` fits within the\n     /// address space (i.e. the `Layout::from_size_align` preconditions).\n     #[inline]\n-    pub unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Layout {\n+    pub unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n         Layout { size: size, align: align }\n     }\n \n@@ -229,15 +229,17 @@ impl Layout {\n     ///\n     /// On arithmetic overflow, returns `None`.\n     #[inline]\n-    pub fn repeat(&self, n: usize) -> Option<(Self, usize)> {\n-        let padded_size = self.size.checked_add(self.padding_needed_for(self.align))?;\n-        let alloc_size = padded_size.checked_mul(n)?;\n+    pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutErr> {\n+        let padded_size = self.size.checked_add(self.padding_needed_for(self.align))\n+            .ok_or(LayoutErr { private: () })?;\n+        let alloc_size = padded_size.checked_mul(n)\n+            .ok_or(LayoutErr { private: () })?;\n \n         // We can assume that `self.align` is a power-of-two.\n         // Furthermore, `alloc_size` has already been rounded up\n         // to a multiple of `self.align`; therefore, the call to\n         // `Layout::from_size_align` below should never panic.\n-        Some((Layout::from_size_align(alloc_size, self.align).unwrap(), padded_size))\n+        Ok((Layout::from_size_align(alloc_size, self.align).unwrap(), padded_size))\n     }\n \n     /// Creates a layout describing the record for `self` followed by\n@@ -251,17 +253,19 @@ impl Layout {\n     /// (assuming that the record itself starts at offset 0).\n     ///\n     /// On arithmetic overflow, returns `None`.\n-    pub fn extend(&self, next: Self) -> Option<(Self, usize)> {\n+    pub fn extend(&self, next: Self) -> Result<(Self, usize), LayoutErr> {\n         let new_align = cmp::max(self.align, next.align);\n         let realigned = Layout::from_size_align(self.size, new_align)?;\n \n         let pad = realigned.padding_needed_for(next.align);\n \n-        let offset = self.size.checked_add(pad)?;\n-        let new_size = offset.checked_add(next.size)?;\n+        let offset = self.size.checked_add(pad)\n+            .ok_or(LayoutErr { private: () })?;\n+        let new_size = offset.checked_add(next.size)\n+            .ok_or(LayoutErr { private: () })?;\n \n         let layout = Layout::from_size_align(new_size, new_align)?;\n-        Some((layout, offset))\n+        Ok((layout, offset))\n     }\n \n     /// Creates a layout describing the record for `n` instances of\n@@ -276,8 +280,8 @@ impl Layout {\n     /// aligned.\n     ///\n     /// On arithmetic overflow, returns `None`.\n-    pub fn repeat_packed(&self, n: usize) -> Option<Self> {\n-        let size = self.size().checked_mul(n)?;\n+    pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutErr> {\n+        let size = self.size().checked_mul(n).ok_or(LayoutErr { private: () })?;\n         Layout::from_size_align(size, self.align)\n     }\n \n@@ -296,16 +300,17 @@ impl Layout {\n     ///  `extend`.)\n     ///\n     /// On arithmetic overflow, returns `None`.\n-    pub fn extend_packed(&self, next: Self) -> Option<(Self, usize)> {\n-        let new_size = self.size().checked_add(next.size())?;\n+    pub fn extend_packed(&self, next: Self) -> Result<(Self, usize), LayoutErr> {\n+        let new_size = self.size().checked_add(next.size())\n+            .ok_or(LayoutErr { private: () })?;\n         let layout = Layout::from_size_align(new_size, self.align)?;\n-        Some((layout, self.size()))\n+        Ok((layout, self.size()))\n     }\n \n     /// Creates a layout describing the record for a `[T; n]`.\n     ///\n     /// On arithmetic overflow, returns `None`.\n-    pub fn array<T>(n: usize) -> Option<Self> {\n+    pub fn array<T>(n: usize) -> Result<Self, LayoutErr> {\n         Layout::new::<T>()\n             .repeat(n)\n             .map(|(k, offs)| {\n@@ -315,6 +320,20 @@ impl Layout {\n     }\n }\n \n+/// The parameters given to `Layout::from_size_align` do not satisfy\n+/// its documented constraints.\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub struct LayoutErr {\n+    private: ()\n+}\n+\n+// (we need this for downstream impl of trait Error)\n+impl fmt::Display for LayoutErr {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.write_str(\"invalid parameters to Layout::from_size_align\")\n+    }\n+}\n+\n /// The `AllocErr` error specifies whether an allocation failure is\n /// specifically due to resource exhaustion or if it is due to\n /// something wrong when combining the given input arguments with this\n@@ -990,7 +1009,7 @@ pub unsafe trait Alloc {\n         where Self: Sized\n     {\n         match Layout::array::<T>(n) {\n-            Some(ref layout) if layout.size() > 0 => {\n+            Ok(ref layout) if layout.size() > 0 => {\n                 unsafe {\n                     self.alloc(layout.clone())\n                         .map(|p| {\n@@ -1041,7 +1060,7 @@ pub unsafe trait Alloc {\n         where Self: Sized\n     {\n         match (Layout::array::<T>(n_old), Layout::array::<T>(n_new), ptr.as_ptr()) {\n-            (Some(ref k_old), Some(ref k_new), ptr) if k_old.size() > 0 && k_new.size() > 0 => {\n+            (Ok(ref k_old), Ok(ref k_new), ptr) if k_old.size() > 0 && k_new.size() > 0 => {\n                 self.realloc(ptr as *mut u8, k_old.clone(), k_new.clone())\n                     .map(|p| NonNull::new_unchecked(p as *mut T))\n             }\n@@ -1076,7 +1095,7 @@ pub unsafe trait Alloc {\n     {\n         let raw_ptr = ptr.as_ptr() as *mut u8;\n         match Layout::array::<T>(n) {\n-            Some(ref k) if k.size() > 0 => {\n+            Ok(ref k) if k.size() > 0 => {\n                 Ok(self.dealloc(raw_ptr, k.clone()))\n             }\n             _ => {"}, {"sha": "502637051434e0e871ff3cd37c0b25855232b192", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b017742136a5d02b6ba0f2080e97d18a8bfeba4b/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b017742136a5d02b6ba0f2080e97d18a8bfeba4b/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=b017742136a5d02b6ba0f2080e97d18a8bfeba4b", "patch": "@@ -755,7 +755,7 @@ impl<K, V> RawTable<K, V> {\n         }\n \n         let buffer = Global.alloc(Layout::from_size_align(size, alignment)\n-            .ok_or(CollectionAllocErr::CapacityOverflow)?)?;\n+            .map_err(|_| CollectionAllocErr::CapacityOverflow)?)?;\n \n         let hashes = buffer as *mut HashUint;\n "}, {"sha": "3c209928d432aa38a9b5c92995b96cc13fbc4367", "filename": "src/libstd/error.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b017742136a5d02b6ba0f2080e97d18a8bfeba4b/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b017742136a5d02b6ba0f2080e97d18a8bfeba4b/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=b017742136a5d02b6ba0f2080e97d18a8bfeba4b", "patch": "@@ -57,7 +57,7 @@ use cell;\n use char;\n use core::array;\n use fmt::{self, Debug, Display};\n-use heap::{AllocErr, CannotReallocInPlace};\n+use heap::{AllocErr, LayoutErr, CannotReallocInPlace};\n use mem::transmute;\n use num;\n use str;\n@@ -247,6 +247,15 @@ impl Error for AllocErr {\n     }\n }\n \n+#[unstable(feature = \"allocator_api\",\n+           reason = \"the precise API and guarantees it provides may be tweaked.\",\n+           issue = \"32838\")]\n+impl Error for LayoutErr {\n+    fn description(&self) -> &str {\n+        \"invalid parameters to Layout::from_size_align\"\n+    }\n+}\n+\n #[unstable(feature = \"allocator_api\",\n            reason = \"the precise API and guarantees it provides may be tweaked.\",\n            issue = \"32838\")]"}]}