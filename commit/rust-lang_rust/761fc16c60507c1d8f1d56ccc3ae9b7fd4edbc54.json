{"sha": "761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MWZjMTZjNjA1MDdjMWQ4ZjFkNTZjY2MzYWU5YjdmZDRlZGJjNTQ=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-06-17T23:49:45Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-06-22T00:38:40Z"}, "message": "Fix-up PP Code to reflect new lifetime param syntax", "tree": {"sha": "98e963064a9c9d0919a5f132e0d2510acac2cace", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98e963064a9c9d0919a5f132e0d2510acac2cace"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "html_url": "https://github.com/rust-lang/rust/commit/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "048ed1486f16191fbe72e32cc99f6f30a28a80e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/048ed1486f16191fbe72e32cc99f6f30a28a80e4", "html_url": "https://github.com/rust-lang/rust/commit/048ed1486f16191fbe72e32cc99f6f30a28a80e4"}], "stats": {"total": 113, "additions": 60, "deletions": 53}, "files": [{"sha": "ffb7a1daf3593a3871b1d2b4e214722f88933c96", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "patch": "@@ -50,7 +50,7 @@ use core::prelude::*;\n \n use middle::ty;\n use middle::typeck;\n-use util::ppaux::{ty_to_str, region_to_str, Repr};\n+use util::ppaux::{ty_to_str, region_ptr_to_str, Repr};\n use util::common::indenter;\n \n use core::uint;\n@@ -1026,7 +1026,7 @@ impl mem_categorization_ctxt {\n     }\n \n     pub fn region_to_str(&self, r: ty::Region) -> ~str {\n-        region_to_str(self.tcx, r)\n+        region_ptr_to_str(self.tcx, r)\n     }\n }\n "}, {"sha": "269451b13070dc6cc5c9f0ec4ddde360153c8c5f", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "patch": "@@ -693,7 +693,7 @@ fn set_debug_location(cx: @mut CrateContext, scope: DIScope, line: uint, col: ui\n }\n \n /// Set current debug location at the beginning of the span\n-pub fn update_source_pos(bcx: @mut Block, span: span) {\n+pub fn update_source_pos(bcx: block, span: span) {\n     if !bcx.sess().opts.debuginfo || (*span.lo == 0 && *span.hi == 0) {\n         return;\n     }"}, {"sha": "e67955505f6d4ee833aec958b1e29f6f1c25566d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "patch": "@@ -21,7 +21,7 @@ use middle::ty;\n use middle::subst::Subst;\n use middle::typeck;\n use middle;\n-use util::ppaux::{note_and_explain_region, bound_region_to_str};\n+use util::ppaux::{note_and_explain_region, bound_region_to_str, bound_region_ptr_to_str};\n use util::ppaux::{trait_store_to_str, ty_to_str, vstore_to_str};\n use util::ppaux::{Repr, UserString};\n use util::common::{indenter};\n@@ -3531,12 +3531,12 @@ pub fn type_err_to_str(cx: ctxt, err: &type_err) -> ~str {\n         terr_regions_insufficiently_polymorphic(br, _) => {\n             fmt!(\"expected bound lifetime parameter %s, \\\n                   but found concrete lifetime\",\n-                 bound_region_to_str(cx, br))\n+                 bound_region_ptr_to_str(cx, br))\n         }\n         terr_regions_overly_polymorphic(br, _) => {\n             fmt!(\"expected concrete lifetime, \\\n                   but found bound lifetime parameter %s\",\n-                 bound_region_to_str(cx, br))\n+                 bound_region_ptr_to_str(cx, br))\n         }\n         terr_vstores_differ(k, ref values) => {\n             fmt!(\"%s storage differs: expected %s but found %s\","}, {"sha": "a8ae904148269d6be74f1752d06f7e7c4e7787c5", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "patch": "@@ -107,7 +107,7 @@ use middle::typeck::{isr_alist, lookup_def_ccx};\n use middle::typeck::no_params;\n use middle::typeck::{require_same_types, method_map, vtable_map};\n use util::common::{block_query, indenter, loop_query};\n-use util::ppaux::{bound_region_to_str};\n+use util::ppaux::{bound_region_to_str,bound_region_ptr_to_str};\n use util::ppaux;\n \n \n@@ -680,7 +680,7 @@ impl FnCtxt {\n                 } else {\n                     result::Err(RegionError {\n                         msg: fmt!(\"named region `%s` not in scope here\",\n-                                  bound_region_to_str(self.tcx(), br)),\n+                                  bound_region_ptr_to_str(self.tcx(), br)),\n                         replacement: self.infcx().next_region_var_nb(span)\n                     })\n                 }"}, {"sha": "2ff8ffdd6b21f286e20ce6469c072d8b898a17aa", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "patch": "@@ -690,13 +690,13 @@ fn constrain_regions_in_type(\n     let tcx = rcx.fcx.ccx.tcx;\n \n     debug!(\"constrain_regions_in_type(minimum_lifetime=%s, ty=%s)\",\n-           region_to_str(tcx, minimum_lifetime),\n+           region_to_str(tcx, \"\", false, minimum_lifetime),\n            ty_to_str(tcx, ty));\n \n     do relate_nested_regions(tcx, Some(minimum_lifetime), ty) |r_sub, r_sup| {\n         debug!(\"relate(r_sub=%s, r_sup=%s)\",\n-               region_to_str(tcx, r_sub),\n-               region_to_str(tcx, r_sup));\n+               region_to_str(tcx, \"\", false, r_sub),\n+               region_to_str(tcx, \"\", false, r_sup));\n \n         if r_sup.is_bound() || r_sub.is_bound() {\n             // a bound region is one which appears inside an fn type."}, {"sha": "54b449eeb40f2aeecfa91d113fb36eedbce46fe0", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "patch": "@@ -149,7 +149,7 @@ pub fn replace_bound_regions_in_fn_sig(\n                     tcx.sess.bug(\n                         fmt!(\"Bound region not found in \\\n                               in_scope_regions list: %s\",\n-                             region_to_str(tcx, r)));\n+                             region_to_str(tcx, \"\", false, r)));\n                   }\n                 }\n               }"}, {"sha": "2e83acfa9f4b16f92173de18aecb3fb930e44374", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "patch": "@@ -821,7 +821,7 @@ impl InferCtxt {\n                 // debug message.\n                 let rvar = self.next_region_var_nb(span);\n                 debug!(\"Bound region %s maps to %?\",\n-                       bound_region_to_str(self.tcx, br),\n+                       bound_region_to_str(self.tcx, \"\", false, br),\n                        rvar);\n                 rvar\n             });"}, {"sha": "c5e0e2c8f016d7bfb9865e4a2ef560ff0b002fa6", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "patch": "@@ -179,7 +179,7 @@ impl Combine for Sub {\n                                               None, b) |br| {\n                 let skol = self.infcx.region_vars.new_skolemized(br);\n                 debug!(\"Bound region %s skolemized to %?\",\n-                       bound_region_to_str(self.infcx.tcx, br),\n+                       bound_region_to_str(self.infcx.tcx, \"\", false, br),\n                        skol);\n                 skol\n             }"}, {"sha": "8994c81bfb967ad40429ade9a138888073ebd074", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 44, "deletions": 37, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "patch": "@@ -112,7 +112,7 @@ pub fn explain_region_and_span(cx: ctxt, region: ty::Region)\n                                idx + 1),\n           br_fresh(_) => fmt!(\"an anonymous lifetime defined on\"),\n           _ => fmt!(\"the lifetime %s as defined on\",\n-                    bound_region_to_str(cx, fr.bound_region))\n+                    bound_region_ptr_to_str(cx, fr.bound_region))\n         };\n \n         match cx.items.find(&fr.scope_id) {\n@@ -147,22 +147,23 @@ pub fn explain_region_and_span(cx: ctxt, region: ty::Region)\n     }\n }\n \n-pub fn bound_region_to_str(cx: ctxt, br: bound_region) -> ~str {\n-    bound_region_to_str_space(cx, \"&\", br)\n+pub fn bound_region_ptr_to_str(cx: ctxt, br: bound_region) -> ~str {\n+    bound_region_to_str(cx, \"&\", true, br)\n }\n \n-pub fn bound_region_to_str_space(cx: ctxt,\n-                                 prefix: &str,\n-                                 br: bound_region)\n-                              -> ~str {\n-    if cx.sess.verbose() { return fmt!(\"%s%? \", prefix, br); }\n+pub fn bound_region_to_str(cx: ctxt,\n+                           prefix: &str, space: bool,\n+                           br: bound_region) -> ~str {\n+    let space_str = if space { \" \" } else { \"\" };\n+\n+    if cx.sess.verbose() { return fmt!(\"%s%?%s\", prefix, br, space_str); }\n \n     match br {\n-      br_named(id)         => fmt!(\"%s'%s \", prefix, cx.sess.str_of(id)),\n-      br_self              => fmt!(\"%s'self \", prefix),\n+      br_named(id)         => fmt!(\"%s'%s%s\", prefix, cx.sess.str_of(id), space_str),\n+      br_self              => fmt!(\"%s'self%s\", prefix, space_str),\n       br_anon(_)           => prefix.to_str(),\n       br_fresh(_)          => prefix.to_str(),\n-      br_cap_avoid(_, br)  => bound_region_to_str_space(cx, prefix, *br)\n+      br_cap_avoid(_, br)  => bound_region_to_str(cx, prefix, space, *br)\n     }\n }\n \n@@ -208,13 +209,15 @@ pub fn re_scope_id_to_str(cx: ctxt, node_id: ast::node_id) -> ~str {\n // In general, if you are giving a region error message,\n // you should use `explain_region()` or, better yet,\n // `note_and_explain_region()`\n-pub fn region_to_str(cx: ctxt, region: Region) -> ~str {\n-    region_to_str_space(cx, \"&\", region)\n+pub fn region_ptr_to_str(cx: ctxt, region: Region) -> ~str {\n+    region_to_str(cx, \"&\", true, region)\n }\n \n-pub fn region_to_str_space(cx: ctxt, prefix: &str, region: Region) -> ~str {\n+pub fn region_to_str(cx: ctxt, prefix: &str, space: bool, region: Region) -> ~str {\n+    let space_str = if space { \" \" } else { \"\" };\n+\n     if cx.sess.verbose() {\n-        return fmt!(\"%s%? \", prefix, region);\n+        return fmt!(\"%s%?%s\", prefix, region, space_str);\n     }\n \n     // These printouts are concise.  They do not contain all the information\n@@ -223,14 +226,14 @@ pub fn region_to_str_space(cx: ctxt, prefix: &str, region: Region) -> ~str {\n     // `explain_region()` or `note_and_explain_region()`.\n     match region {\n         re_scope(_) => prefix.to_str(),\n-        re_bound(br) => bound_region_to_str_space(cx, prefix, br),\n-        re_free(ref fr) => bound_region_to_str_space(cx, prefix, fr.bound_region),\n+        re_bound(br) => bound_region_to_str(cx, prefix, space, br),\n+        re_free(ref fr) => bound_region_to_str(cx, prefix, space, fr.bound_region),\n         re_infer(ReSkolemized(_, br)) => {\n-            bound_region_to_str_space(cx, prefix, br)\n+            bound_region_to_str(cx, prefix, space, br)\n         }\n         re_infer(ReVar(_)) => prefix.to_str(),\n-        re_static => fmt!(\"%s'static \", prefix),\n-        re_empty => fmt!(\"%s'<empty> \", prefix)\n+        re_static => fmt!(\"%s'static%s\", prefix, space_str),\n+        re_empty => fmt!(\"%s'<empty>%s\", prefix, space_str)\n     }\n }\n \n@@ -256,15 +259,15 @@ pub fn vstore_to_str(cx: ctxt, vs: ty::vstore) -> ~str {\n       ty::vstore_fixed(n) => fmt!(\"%u\", n),\n       ty::vstore_uniq => ~\"~\",\n       ty::vstore_box => ~\"@\",\n-      ty::vstore_slice(r) => region_to_str_space(cx, \"&\", r)\n+      ty::vstore_slice(r) => region_ptr_to_str(cx, r)\n     }\n }\n \n pub fn trait_store_to_str(cx: ctxt, s: ty::TraitStore) -> ~str {\n     match s {\n       ty::UniqTraitStore => ~\"~\",\n       ty::BoxTraitStore => ~\"@\",\n-      ty::RegionTraitStore(r) => region_to_str_space(cx, \"&\", r)\n+      ty::RegionTraitStore(r) => region_ptr_to_str(cx, r)\n     }\n }\n \n@@ -340,7 +343,7 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n             (ast::OwnedSigil, ty::re_static) => {}\n \n             (_, region) => {\n-                s.push_str(region_to_str_space(cx, \"\", region));\n+                s.push_str(region_to_str(cx, \"\", true, region));\n             }\n         }\n \n@@ -414,7 +417,7 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n       ty_uniq(ref tm) => ~\"~\" + mt_to_str(cx, tm),\n       ty_ptr(ref tm) => ~\"*\" + mt_to_str(cx, tm),\n       ty_rptr(r, ref tm) => {\n-        region_to_str_space(cx, \"&\", r) + mt_to_str(cx, tm)\n+        region_ptr_to_str(cx, r) + mt_to_str(cx, tm)\n       }\n       ty_unboxed_vec(ref tm) => { fmt!(\"unboxed_vec<%s>\", mt_to_str(cx, tm)) }\n       ty_type => ~\"type\",\n@@ -431,13 +434,15 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n       ty_infer(infer_ty) => infer_ty.to_str(),\n       ty_err => ~\"[type error]\",\n       ty_param(param_ty {idx: id, def_id: did}) => {\n+          let mut parm = (('T' as uint) + id) as char;\n+          if (parm as uint) > ('Z' as uint) {\n+              parm = (parm as uint - 26) as char;\n+          }\n+\n           if cx.sess.verbose() {\n-              fmt!(\"'%s:%?\",\n-                   str::from_bytes([('a' as u8) + (id as u8)]),\n-                   did)\n+              fmt!(\"%c:%?\", parm, did)\n           } else {\n-              fmt!(\"'%s\",\n-                   str::from_bytes([('a' as u8) + (id as u8)]))\n+              fmt!(\"%c\", parm)\n           }\n       }\n       ty_self(*) => ~\"Self\",\n@@ -468,18 +473,20 @@ pub fn parameterized(cx: ctxt,\n                      self_r: Option<ty::Region>,\n                      tps: &[ty::t]) -> ~str {\n \n-    let r_str = match self_r {\n-        None => ~\"\",\n+    let mut strs = ~[];\n+    match self_r {\n+        None => (),\n         Some(r) => {\n-            region_to_str(cx, r)\n+            strs.push(region_to_str(cx, \"\", false, r))\n         }\n     };\n \n-    if tps.len() > 0u {\n-        let strs = vec::map(tps, |t| ty_to_str(cx, *t));\n-        fmt!(\"%s%s<%s>\", r_str, base, strs.connect(\",\"))\n+    strs += vec::map(tps, |t| ty_to_str(cx, *t));\n+\n+    if strs.len() > 0u {\n+        fmt!(\"%s<%s>\", base, strs.connect(\",\"))\n     } else {\n-        fmt!(\"%s%s\", r_str, base)\n+        fmt!(\"%s\", base)\n     }\n }\n \n@@ -597,7 +604,7 @@ impl Repr for @ast::pat {\n \n impl Repr for ty::Region {\n     fn repr(&self, tcx: ctxt) -> ~str {\n-        region_to_str(tcx, *self)\n+        region_to_str(tcx, \"\", false, *self)\n     }\n }\n "}, {"sha": "35ba386243807db7dac24cf279560739362c0cd5", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "patch": "@@ -16,11 +16,11 @@ struct an_enum<'self>(&'self int);\n struct a_class<'self> { x:&'self int }\n \n fn a_fn1<'a,'b>(e: an_enum<'a>) -> an_enum<'b> {\n-    return e; //~ ERROR mismatched types: expected `an_enum/&'b ` but found `an_enum/&'a `\n+    return e; //~ ERROR mismatched types: expected `an_enum<'b>` but found `an_enum<'a>`\n }\n \n fn a_fn3<'a,'b>(e: a_class<'a>) -> a_class<'b> {\n-    return e; //~ ERROR mismatched types: expected `a_class/&'b ` but found `a_class/&'a `\n+    return e; //~ ERROR mismatched types: expected `a_class<'b>` but found `a_class<'a>`\n }\n \n fn a_fn4<'a,'b>() {"}]}