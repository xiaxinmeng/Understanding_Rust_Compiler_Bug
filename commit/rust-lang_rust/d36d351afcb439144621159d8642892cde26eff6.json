{"sha": "d36d351afcb439144621159d8642892cde26eff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNmQzNTFhZmNiNDM5MTQ0NjIxMTU5ZDg2NDI4OTJjZGUyNmVmZjY=", "commit": {"author": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-06-23T15:46:24Z"}, "committer": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-06-24T13:38:42Z"}, "message": "Implement intrinsic", "tree": {"sha": "3608677ef90df0bb8c46e386756f6c8c8f47aa05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3608677ef90df0bb8c46e386756f6c8c8f47aa05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d36d351afcb439144621159d8642892cde26eff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d36d351afcb439144621159d8642892cde26eff6", "html_url": "https://github.com/rust-lang/rust/commit/d36d351afcb439144621159d8642892cde26eff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d36d351afcb439144621159d8642892cde26eff6/comments", "author": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1557fb031b272b4c5bfcc7de5df7eddc7b36a584", "url": "https://api.github.com/repos/rust-lang/rust/commits/1557fb031b272b4c5bfcc7de5df7eddc7b36a584", "html_url": "https://github.com/rust-lang/rust/commit/1557fb031b272b4c5bfcc7de5df7eddc7b36a584"}], "stats": {"total": 112, "additions": 107, "deletions": 5}, "files": [{"sha": "4074087e1e67f58b0a36d64b5d164760adcede83", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d36d351afcb439144621159d8642892cde26eff6/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36d351afcb439144621159d8642892cde26eff6/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=d36d351afcb439144621159d8642892cde26eff6", "patch": "@@ -1917,6 +1917,15 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n     pub fn discriminant_value<T>(v: &T) -> <T as DiscriminantKind>::Discriminant;\n \n+    /// Returns the number of variants of the type `T` cast to a `usize`;\n+    /// if `T` has no variants, returns 0. Uninhabited variants will be counted.\n+    ///\n+    /// The to-be-stabilized version of this intrinsic is\n+    /// [`std::mem::variant_count`](../../std/mem/fn.variant_count.html)\n+    #[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n+    #[cfg(not(bootstrap))]\n+    pub fn variant_count<T>() -> usize;\n+\n     /// Rust's \"try catch\" construct which invokes the function pointer `try_fn`\n     /// with the data pointer `data`.\n     ///\n@@ -1960,6 +1969,12 @@ extern \"rust-intrinsic\" {\n     pub fn ptr_guaranteed_ne<T>(ptr: *const T, other: *const T) -> bool;\n }\n \n+#[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n+#[cfg(bootstrap)]\n+pub const fn variant_count<T>() -> usize {\n+    0\n+}\n+\n // Some functions are defined here because they accidentally got made\n // available in this module on stable. See <https://github.com/rust-lang/rust/issues/15702>.\n // (`transmute` also falls into this category, but it cannot be wrapped due to the"}, {"sha": "2b26e5303a89cee5d67838452fb04d3cd3444b04", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d36d351afcb439144621159d8642892cde26eff6/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36d351afcb439144621159d8642892cde26eff6/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=d36d351afcb439144621159d8642892cde26eff6", "patch": "@@ -124,6 +124,7 @@\n #![feature(unsized_locals)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n+#![feature(variant_count)]\n #![feature(doc_alias)]\n #![feature(mmx_target_feature)]\n #![feature(tbm_target_feature)]"}, {"sha": "d041571f26079eae2be466b776b24edaa4d5953d", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d36d351afcb439144621159d8642892cde26eff6/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36d351afcb439144621159d8642892cde26eff6/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=d36d351afcb439144621159d8642892cde26eff6", "patch": "@@ -999,3 +999,30 @@ impl<T> fmt::Debug for Discriminant<T> {\n pub const fn discriminant<T>(v: &T) -> Discriminant<T> {\n     Discriminant(intrinsics::discriminant_value(v))\n }\n+\n+/// Returns the number of variants in the enum type `T`.\n+///\n+/// If `T` is not an enum, calling this function will not result in undefined behavior, but the\n+/// return value is unspecified. Equally, if `T` is an enum with more variants than `usize::MAX`\n+/// the return value is unspecified. Uninhabited variants will be counted.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::mem;\n+///\n+/// enum Void {}\n+/// enum Foo { A(&'static str), B(i32), C(i32) }\n+///\n+/// assert_eq!(mem::variant_count::<Void>(), 0);\n+/// assert_eq!(mem::variant_count::<Foo>(), 3);\n+///\n+/// assert_eq!(mem::variant_count::<Option<!>>(), 2);\n+/// assert_eq!(mem::variant_count::<Result<!, !>>(), 2);\n+/// ```\n+#[inline(always)]\n+#[unstable(feature = \"variant_count\", issue = \"73662\")]\n+#[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n+pub const fn variant_count<T>() -> usize {\n+    intrinsics::variant_count::<T>()\n+}"}, {"sha": "e43c814a6125ee5e4e90b2d7ea6b03ff50e3c451", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36d351afcb439144621159d8642892cde26eff6/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36d351afcb439144621159d8642892cde26eff6/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=d36d351afcb439144621159d8642892cde26eff6", "patch": "@@ -213,7 +213,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 }\n             }\n             \"size_of\" | \"pref_align_of\" | \"min_align_of\" | \"needs_drop\" | \"type_id\"\n-            | \"type_name\" => {\n+            | \"type_name\" | \"variant_count\" => {\n                 let value = self\n                     .tcx\n                     .const_eval_instance(ty::ParamEnv::reveal_all(), instance, None)"}, {"sha": "88ba28dab82e18081ea8ce1756a62b212081916b", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d36d351afcb439144621159d8642892cde26eff6/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36d351afcb439144621159d8642892cde26eff6/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=d36d351afcb439144621159d8642892cde26eff6", "patch": "@@ -69,6 +69,13 @@ crate fn eval_nullary_intrinsic<'tcx>(\n             ConstValue::from_machine_usize(n, &tcx)\n         }\n         sym::type_id => ConstValue::from_u64(tcx.type_id_hash(tp_ty)),\n+        sym::variant_count => {\n+            if let ty::Adt(ref adt, _) = tp_ty.kind {\n+                ConstValue::from_machine_usize(adt.variants.len() as u64, &tcx)\n+            } else {\n+                ConstValue::from_machine_usize(0u64, &tcx)\n+            }\n+        }\n         other => bug!(\"`{}` is not a zero arg intrinsic\", other),\n     })\n }\n@@ -109,10 +116,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | sym::needs_drop\n             | sym::size_of\n             | sym::type_id\n-            | sym::type_name => {\n+            | sym::type_name\n+            | sym::variant_count => {\n                 let gid = GlobalId { instance, promoted: None };\n                 let ty = match intrinsic_name {\n-                    sym::min_align_of | sym::pref_align_of | sym::size_of => self.tcx.types.usize,\n+                    sym::min_align_of | sym::pref_align_of | sym::size_of | sym::variant_count => {\n+                        self.tcx.types.usize\n+                    }\n                     sym::needs_drop => self.tcx.types.bool,\n                     sym::type_id => self.tcx.types.u64,\n                     sym::type_name => self.tcx.mk_static_str(),"}, {"sha": "07b05d37ed303c3d723b0151da8733349fae6fef", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d36d351afcb439144621159d8642892cde26eff6/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36d351afcb439144621159d8642892cde26eff6/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=d36d351afcb439144621159d8642892cde26eff6", "patch": "@@ -830,6 +830,7 @@ symbols! {\n         v1,\n         val,\n         var,\n+        variant_count,\n         vec,\n         Vec,\n         version,"}, {"sha": "1c0b22ca7370bd5da2bdad633619a2abe85058c4", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d36d351afcb439144621159d8642892cde26eff6/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36d351afcb439144621159d8642892cde26eff6/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=d36d351afcb439144621159d8642892cde26eff6", "patch": "@@ -75,7 +75,7 @@ pub fn intrinsic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n         | \"saturating_sub\" | \"rotate_left\" | \"rotate_right\" | \"ctpop\" | \"ctlz\" | \"cttz\"\n         | \"bswap\" | \"bitreverse\" | \"discriminant_value\" | \"type_id\" | \"likely\" | \"unlikely\"\n         | \"ptr_guaranteed_eq\" | \"ptr_guaranteed_ne\" | \"minnumf32\" | \"minnumf64\" | \"maxnumf32\"\n-        | \"maxnumf64\" | \"type_name\" => hir::Unsafety::Normal,\n+        | \"maxnumf64\" | \"type_name\" | \"variant_count\" => hir::Unsafety::Normal,\n         _ => hir::Unsafety::Unsafe,\n     }\n }\n@@ -137,7 +137,9 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n         let unsafety = intrinsic_operation_unsafety(&name[..]);\n         let (n_tps, inputs, output) = match &name[..] {\n             \"breakpoint\" => (0, Vec::new(), tcx.mk_unit()),\n-            \"size_of\" | \"pref_align_of\" | \"min_align_of\" => (1, Vec::new(), tcx.types.usize),\n+            \"size_of\" | \"pref_align_of\" | \"min_align_of\" | \"variant_count\" => {\n+                (1, Vec::new(), tcx.types.usize)\n+            }\n             \"size_of_val\" | \"min_align_of_val\" => {\n                 (1, vec![tcx.mk_imm_ptr(param(0))], tcx.types.usize)\n             }"}, {"sha": "f21f6e9c291687462e85423466a7f78f7517d5e0", "filename": "src/test/ui/consts/const-variant-count.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d36d351afcb439144621159d8642892cde26eff6/src%2Ftest%2Fui%2Fconsts%2Fconst-variant-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36d351afcb439144621159d8642892cde26eff6/src%2Ftest%2Fui%2Fconsts%2Fconst-variant-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-variant-count.rs?ref=d36d351afcb439144621159d8642892cde26eff6", "patch": "@@ -0,0 +1,46 @@\n+// run-pass\n+#![allow(dead_code)]\n+#![feature(variant_count)]\n+\n+use std::mem::variant_count;\n+\n+enum Void {}\n+\n+enum Foo {\n+    A,\n+    B,\n+    C,\n+}\n+\n+enum Bar {\n+    A,\n+    B,\n+    C,\n+    D(usize),\n+    E { field_1: usize, field_2: Foo },\n+}\n+\n+struct Baz {\n+    a: u32,\n+    b: *const u8,\n+}\n+\n+const TEST_VOID: usize = variant_count::<Void>();\n+const TEST_FOO: usize = variant_count::<Foo>();\n+const TEST_BAR: usize = variant_count::<Bar>();\n+\n+const NO_ICE_STRUCT: usize = variant_count::<Baz>();\n+const NO_ICE_BOOL: usize = variant_count::<bool>();\n+const NO_ICE_PRIM: usize = variant_count::<*const u8>();\n+\n+fn main() {\n+    assert_eq!(TEST_VOID, 0);\n+    assert_eq!(TEST_FOO, 3);\n+    assert_eq!(TEST_BAR, 5);\n+    assert_eq!(variant_count::<Void>(), 0);\n+    assert_eq!(variant_count::<Foo>(), 3);\n+    assert_eq!(variant_count::<Bar>(), 5);\n+    assert_eq!(variant_count::<Option<char>>(), 2);\n+    assert_eq!(variant_count::<Option<!>>(), 2);\n+    assert_eq!(variant_count::<Result<!, !>>(), 2);\n+}"}]}