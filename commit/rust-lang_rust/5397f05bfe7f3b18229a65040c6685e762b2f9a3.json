{"sha": "5397f05bfe7f3b18229a65040c6685e762b2f9a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOTdmMDViZmU3ZjNiMTgyMjlhNjUwNDBjNjY4NWU3NjJiMmY5YTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-07T16:28:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-07T16:28:33Z"}, "message": "Merge #3049\n\n3049: Introduce assists utils r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a3c4aab400ffe1c84bd33e094a047798e7136d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3c4aab400ffe1c84bd33e094a047798e7136d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5397f05bfe7f3b18229a65040c6685e762b2f9a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJePZAxCRBK7hj4Ov3rIwAAdHIIAErWXhBaE2IATJJhWmqQ29Hf\nB9/XkAvU951qtUqycEkDPZb7VR6RfXRx7m7hGLmAbMsm2U0ez1Uana9hoRCOd0RG\nFmYg06VY0dM+AxVZxL4oOUaYjJeCYH+BqANv6i6jdwtG4oRq+HeAux7Fj+Bu7x5z\nVUcceiJw1geZ6Mm7xF/m5TkgSs5+UDX9xrVdHKoxqZ/5nydcblOcSx2eCX6v5i0F\nGKEvXdYHrqduTVSj9pCTJD2W7Sdiq/fZlEimtyZB99iQP2KoQEkEjvrAHawV/NIS\nKLsdGp4zAHidR1bOUU7xDIni/P5pnJ/UrZy0X4QzasIehvDmNuZ+D0ynOhbKRWk=\n=BFHn\n-----END PGP SIGNATURE-----\n", "payload": "tree a3c4aab400ffe1c84bd33e094a047798e7136d2d\nparent 1996762b1f2b9cb196cc879f0ce26d28a3c450c8\nparent d00add1f1fec59494c3c1a99c27937ae3891458d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581092913 +0000\ncommitter GitHub <noreply@github.com> 1581092913 +0000\n\nMerge #3049\n\n3049: Introduce assists utils r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5397f05bfe7f3b18229a65040c6685e762b2f9a3", "html_url": "https://github.com/rust-lang/rust/commit/5397f05bfe7f3b18229a65040c6685e762b2f9a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5397f05bfe7f3b18229a65040c6685e762b2f9a3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1996762b1f2b9cb196cc879f0ce26d28a3c450c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1996762b1f2b9cb196cc879f0ce26d28a3c450c8", "html_url": "https://github.com/rust-lang/rust/commit/1996762b1f2b9cb196cc879f0ce26d28a3c450c8"}, {"sha": "d00add1f1fec59494c3c1a99c27937ae3891458d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d00add1f1fec59494c3c1a99c27937ae3891458d", "html_url": "https://github.com/rust-lang/rust/commit/d00add1f1fec59494c3c1a99c27937ae3891458d"}], "stats": {"total": 206, "additions": 97, "deletions": 109}, "files": [{"sha": "81f999090a1ca9f114b9a3c8458bd2c04e51d2e0", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "patch": "@@ -19,6 +19,8 @@ pub(crate) enum Assist {\n     Resolved { assist: ResolvedAssist },\n }\n \n+pub(crate) type AssistHandler = fn(AssistCtx) -> Option<Assist>;\n+\n /// `AssistCtx` allows to apply an assist or check if it could be applied.\n ///\n /// Assists use a somewhat over-engineered approach, given the current needs. The\n@@ -57,7 +59,7 @@ pub(crate) struct AssistCtx<'a> {\n     should_compute_edit: bool,\n }\n \n-impl<'a> Clone for AssistCtx<'a> {\n+impl Clone for AssistCtx<'_> {\n     fn clone(&self) -> Self {\n         AssistCtx {\n             db: self.db,\n@@ -69,31 +71,18 @@ impl<'a> Clone for AssistCtx<'a> {\n }\n \n impl<'a> AssistCtx<'a> {\n-    pub(crate) fn with_ctx<F, T>(\n-        db: &RootDatabase,\n-        frange: FileRange,\n-        should_compute_edit: bool,\n-        f: F,\n-    ) -> T\n-    where\n-        F: FnOnce(AssistCtx) -> T,\n-    {\n+    pub fn new(db: &RootDatabase, frange: FileRange, should_compute_edit: bool) -> AssistCtx {\n         let parse = db.parse(frange.file_id);\n-\n-        let ctx = AssistCtx { db, frange, source_file: parse.tree(), should_compute_edit };\n-        f(ctx)\n+        AssistCtx { db, frange, source_file: parse.tree(), should_compute_edit }\n     }\n-}\n \n-impl<'a> AssistCtx<'a> {\n     pub(crate) fn add_assist(\n         self,\n         id: AssistId,\n         label: impl Into<String>,\n         f: impl FnOnce(&mut ActionBuilder),\n     ) -> Option<Assist> {\n-        let label = AssistLabel { label: label.into(), id };\n-        assert!(label.label.chars().nth(0).unwrap().is_uppercase());\n+        let label = AssistLabel::new(label.into(), id);\n \n         let assist = if self.should_compute_edit {\n             let action = {\n@@ -115,7 +104,7 @@ impl<'a> AssistCtx<'a> {\n         label: impl Into<String>,\n         f: impl FnOnce() -> Vec<ActionBuilder>,\n     ) -> Option<Assist> {\n-        let label = AssistLabel { label: label.into(), id };\n+        let label = AssistLabel::new(label.into(), id);\n         let assist = if self.should_compute_edit {\n             let actions = f();\n             assert!(!actions.is_empty(), \"Assist cannot have no\");"}, {"sha": "7fdd816bf82e9af08f0542ab2e94d8bef7b31679", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/add_custom_impl.rs"}, {"sha": "b0d1a0a80dbafde6aafe55d2073a147a4c5b0dc5", "filename": "crates/ra_assists/src/handlers/add_derive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/add_derive.rs"}, {"sha": "2cb9d2f48ebf4e0b5527e0767b338a711641f896", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/add_explicit_type.rs"}, {"sha": "241b085fd2265648c6e098ea26d94b8e90c3bf55", "filename": "crates/ra_assists/src/handlers/add_impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/add_impl.rs"}, {"sha": "f03dddac8fcf8355692e5b626b0d02f51384023e", "filename": "crates/ra_assists/src/handlers/add_import.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_import.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/add_import.rs"}, {"sha": "448697d3151749f9d5c98eb33744373a8206a939", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs"}, {"sha": "a08639311f4be5b941b01fa93d3e330b6902c4af", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/add_new.rs"}, {"sha": "239807e2431de32bd2a67c24a5321f4913398c0d", "filename": "crates/ra_assists/src/handlers/apply_demorgan.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "patch": "@@ -1,7 +1,6 @@\n-use super::invert_if::invert_boolean_expression;\n use ra_syntax::ast::{self, AstNode};\n \n-use crate::{Assist, AssistCtx, AssistId};\n+use crate::{utils::invert_boolean_expression, Assist, AssistCtx, AssistId};\n \n // Assist: apply_demorgan\n //", "previous_filename": "crates/ra_assists/src/assists/apply_demorgan.rs"}, {"sha": "84b5474f9d5f363fe3ff61e2aa1f0aa255a4503f", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "renamed", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "patch": "@@ -1,4 +1,5 @@\n use hir::ModPath;\n+use ra_ide_db::imports_locator::ImportsLocator;\n use ra_syntax::{\n     ast::{self, AstNode},\n     SyntaxNode,\n@@ -8,7 +9,7 @@ use crate::{\n     assist_ctx::{ActionBuilder, Assist, AssistCtx},\n     auto_import_text_edit, AssistId,\n };\n-use ra_ide_db::imports_locator::ImportsLocator;\n+use std::collections::BTreeSet;\n \n // Assist: auto_import\n //\n@@ -60,7 +61,8 @@ pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n         .filter_map(|module_def| module_with_name_to_import.find_use_path(ctx.db, module_def))\n         .filter(|use_path| !use_path.segments.is_empty())\n         .take(20)\n-        .collect::<std::collections::BTreeSet<_>>();\n+        .collect::<BTreeSet<_>>();\n+\n     if proposed_imports.is_empty() {\n         return None;\n     }\n@@ -82,9 +84,10 @@ fn import_to_action(import: ModPath, position: &SyntaxNode, anchor: &SyntaxNode)\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n     use crate::helpers::{check_assist, check_assist_not_applicable};\n \n+    use super::*;\n+\n     #[test]\n     fn applicable_when_found_an_import() {\n         check_assist(", "previous_filename": "crates/ra_assists/src/assists/auto_import.rs"}, {"sha": "f325b6f9225bf92290255b228bbee215d76ed932", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/change_visibility.rs"}, {"sha": "22f88884f4a17774671c516e251f8f7c031ddf84", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{\n \n use crate::{\n     assist_ctx::{Assist, AssistCtx},\n-    assists::invert_if::invert_boolean_expression,\n+    utils::invert_boolean_expression,\n     AssistId,\n };\n ", "previous_filename": "crates/ra_assists/src/assists/early_return.rs"}, {"sha": "0908fc2469f70217e28d1ff3f7f5f708048cbbea", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/fill_match_arms.rs"}, {"sha": "bfcc09e909779d08a9b5ff6578182e80a45e0d60", "filename": "crates/ra_assists/src/handlers/flip_binexpr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/flip_binexpr.rs"}, {"sha": "1dacf29f834280f3f0c0197a21a76ad94cdf4c57", "filename": "crates/ra_assists/src/handlers/flip_comma.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/flip_comma.rs"}, {"sha": "f56769624e7fcaf70b628648f77f7df47dff078f", "filename": "crates/ra_assists/src/handlers/flip_trait_bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/flip_trait_bound.rs"}, {"sha": "91b588243eb4f40ec82f71bc19b2f219639337a5", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/inline_local_variable.rs"}, {"sha": "7312ce6871e0e64ad54200a597c6c1aa8656b922", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/introduce_variable.rs"}, {"sha": "a594e7e0c38ac049ef30d1d50a8490f61c213a6b", "filename": "crates/ra_assists/src/handlers/invert_if.rs", "status": "renamed", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "patch": "@@ -1,7 +1,7 @@\n-use ra_syntax::ast::{self, make, AstNode};\n+use ra_syntax::ast::{self, AstNode};\n use ra_syntax::T;\n \n-use crate::{Assist, AssistCtx, AssistId};\n+use crate::{utils::invert_boolean_expression, Assist, AssistCtx, AssistId};\n \n // Assist: invert_if\n //\n@@ -51,27 +51,6 @@ pub(crate) fn invert_if(ctx: AssistCtx) -> Option<Assist> {\n     None\n }\n \n-pub(crate) fn invert_boolean_expression(expr: ast::Expr) -> ast::Expr {\n-    if let Some(expr) = invert_special_case(&expr) {\n-        return expr;\n-    }\n-    make::expr_prefix(T![!], expr)\n-}\n-\n-pub(crate) fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n-    match expr {\n-        ast::Expr::BinExpr(bin) => match bin.op_kind()? {\n-            ast::BinOp::NegatedEqualityTest => bin.replace_op(T![==]).map(|it| it.into()),\n-            ast::BinOp::EqualityTest => bin.replace_op(T![!=]).map(|it| it.into()),\n-            _ => None,\n-        },\n-        ast::Expr::PrefixExpr(pe) if pe.op_kind()? == ast::PrefixOp::Not => pe.expr(),\n-        // FIXME:\n-        // ast::Expr::Literal(true | false )\n-        _ => None,\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;", "previous_filename": "crates/ra_assists/src/assists/invert_if.rs"}, {"sha": "670614dd83df1b7aee8a717f62d30e0a3f5d3300", "filename": "crates/ra_assists/src/handlers/merge_match_arms.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/merge_match_arms.rs"}, {"sha": "90793b5fc3a16fbb89d593f3f7fc9267be7d6e85", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/move_bounds.rs"}, {"sha": "2b91ce7c4dc7836a9491f79da4419e2a4597900f", "filename": "crates/ra_assists/src/handlers/move_guard.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/move_guard.rs"}, {"sha": "2c0a1e12656de1b191ccdeb2358c10d780310d70", "filename": "crates/ra_assists/src/handlers/raw_string.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/raw_string.rs"}, {"sha": "5085649b42aaa05652f1cb76616d48c97f62db9f", "filename": "crates/ra_assists/src/handlers/remove_dbg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/remove_dbg.rs"}, {"sha": "e6cd50bc1236ae3b6d6219b181442f0b7f61011f", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/replace_if_let_with_match.rs"}, {"sha": "2c3f07a79dff4489727dc4da325988a992f682f4", "filename": "crates/ra_assists/src/handlers/split_import.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "previous_filename": "crates/ra_assists/src/assists/split_import.rs"}, {"sha": "eca6dec4b0f854c27c08fcd4c3d6c49332c20561", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 51, "deletions": 60, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "patch": "@@ -9,16 +9,19 @@ mod assist_ctx;\n mod marks;\n #[cfg(test)]\n mod doc_tests;\n+mod utils;\n pub mod ast_transform;\n \n+use std::cmp::Ordering;\n+\n use either::Either;\n use ra_db::FileRange;\n use ra_ide_db::RootDatabase;\n use ra_syntax::{TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n \n-pub(crate) use crate::assist_ctx::{Assist, AssistCtx};\n-pub use crate::assists::add_import::auto_import_text_edit;\n+pub(crate) use crate::assist_ctx::{Assist, AssistCtx, AssistHandler};\n+pub use crate::handlers::add_import::auto_import_text_edit;\n \n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n@@ -32,11 +35,20 @@ pub struct AssistLabel {\n     pub id: AssistId,\n }\n \n+impl AssistLabel {\n+    pub(crate) fn new(label: String, id: AssistId) -> AssistLabel {\n+        // FIXME: make fields private, so that this invariant can't be broken\n+        assert!(label.chars().nth(0).unwrap().is_uppercase());\n+        AssistLabel { label: label.into(), id }\n+    }\n+}\n+\n #[derive(Debug, Clone)]\n pub struct AssistAction {\n     pub label: Option<String>,\n     pub edit: TextEdit,\n     pub cursor_position: Option<TextUnit>,\n+    // FIXME: This belongs to `AssistLabel`\n     pub target: Option<TextRange>,\n }\n \n@@ -60,39 +72,36 @@ impl ResolvedAssist {\n /// Assists are returned in the \"unresolved\" state, that is only labels are\n /// returned, without actual edits.\n pub fn unresolved_assists(db: &RootDatabase, range: FileRange) -> Vec<AssistLabel> {\n-    AssistCtx::with_ctx(db, range, false, |ctx| {\n-        assists::all()\n-            .iter()\n-            .filter_map(|f| f(ctx.clone()))\n-            .map(|a| match a {\n-                Assist::Unresolved { label } => label,\n-                Assist::Resolved { .. } => unreachable!(),\n-            })\n-            .collect()\n-    })\n+    let ctx = AssistCtx::new(db, range, false);\n+    handlers::all()\n+        .iter()\n+        .filter_map(|f| f(ctx.clone()))\n+        .map(|a| match a {\n+            Assist::Unresolved { label } => label,\n+            Assist::Resolved { .. } => unreachable!(),\n+        })\n+        .collect()\n }\n \n /// Return all the assists applicable at the given position.\n ///\n /// Assists are returned in the \"resolved\" state, that is with edit fully\n /// computed.\n pub fn resolved_assists(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssist> {\n-    AssistCtx::with_ctx(db, range, true, |ctx| {\n-        let mut a = assists::all()\n-            .iter()\n-            .filter_map(|f| f(ctx.clone()))\n-            .map(|a| match a {\n-                Assist::Resolved { assist } => assist,\n-                Assist::Unresolved { .. } => unreachable!(),\n-            })\n-            .collect();\n-        sort_assists(&mut a);\n-        a\n-    })\n+    let ctx = AssistCtx::new(db, range, true);\n+    let mut a = handlers::all()\n+        .iter()\n+        .filter_map(|f| f(ctx.clone()))\n+        .map(|a| match a {\n+            Assist::Resolved { assist } => assist,\n+            Assist::Unresolved { .. } => unreachable!(),\n+        })\n+        .collect::<Vec<_>>();\n+    sort_assists(&mut a);\n+    a\n }\n \n-fn sort_assists(assists: &mut Vec<ResolvedAssist>) {\n-    use std::cmp::Ordering;\n+fn sort_assists(assists: &mut [ResolvedAssist]) {\n     assists.sort_by(|a, b| match (a.get_first_action().target, b.get_first_action().target) {\n         (Some(a), Some(b)) => a.len().cmp(&b.len()),\n         (Some(_), None) => Ordering::Less,\n@@ -101,8 +110,8 @@ fn sort_assists(assists: &mut Vec<ResolvedAssist>) {\n     });\n }\n \n-mod assists {\n-    use crate::{Assist, AssistCtx};\n+mod handlers {\n+    use crate::AssistHandler;\n \n     mod add_derive;\n     mod add_explicit_type;\n@@ -130,7 +139,7 @@ mod assists {\n     mod move_bounds;\n     mod early_return;\n \n-    pub(crate) fn all() -> &'static [fn(AssistCtx) -> Option<Assist>] {\n+    pub(crate) fn all() -> &'static [AssistHandler] {\n         &[\n             add_derive::add_derive,\n             add_explicit_type::add_explicit_type,\n@@ -175,7 +184,7 @@ mod helpers {\n     use ra_syntax::TextRange;\n     use test_utils::{add_cursor, assert_eq_text, extract_offset, extract_range};\n \n-    use crate::{Assist, AssistCtx};\n+    use crate::{Assist, AssistCtx, AssistHandler};\n \n     pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n         let (mut db, file_id) = RootDatabase::with_single_file(text);\n@@ -186,13 +195,13 @@ mod helpers {\n         (db, file_id)\n     }\n \n-    pub(crate) fn check_assist(assist: fn(AssistCtx) -> Option<Assist>, before: &str, after: &str) {\n+    pub(crate) fn check_assist(assist: AssistHandler, before: &str, after: &str) {\n         let (before_cursor_pos, before) = extract_offset(before);\n         let (db, file_id) = with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n-            AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n+            assist(AssistCtx::new(&db, frange, true)).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n             Assist::Resolved { assist } => assist.get_first_action(),\n@@ -210,16 +219,12 @@ mod helpers {\n         assert_eq_text!(after, &actual);\n     }\n \n-    pub(crate) fn check_assist_range(\n-        assist: fn(AssistCtx) -> Option<Assist>,\n-        before: &str,\n-        after: &str,\n-    ) {\n+    pub(crate) fn check_assist_range(assist: AssistHandler, before: &str, after: &str) {\n         let (range, before) = extract_range(before);\n         let (db, file_id) = with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n-            AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n+            assist(AssistCtx::new(&db, frange, true)).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n             Assist::Resolved { assist } => assist.get_first_action(),\n@@ -232,17 +237,13 @@ mod helpers {\n         assert_eq_text!(after, &actual);\n     }\n \n-    pub(crate) fn check_assist_target(\n-        assist: fn(AssistCtx) -> Option<Assist>,\n-        before: &str,\n-        target: &str,\n-    ) {\n+    pub(crate) fn check_assist_target(assist: AssistHandler, before: &str, target: &str) {\n         let (before_cursor_pos, before) = extract_offset(before);\n         let (db, file_id) = with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n-            AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n+            assist(AssistCtx::new(&db, frange, true)).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n             Assist::Resolved { assist } => assist.get_first_action(),\n@@ -252,16 +253,12 @@ mod helpers {\n         assert_eq_text!(&before[range.start().to_usize()..range.end().to_usize()], target);\n     }\n \n-    pub(crate) fn check_assist_range_target(\n-        assist: fn(AssistCtx) -> Option<Assist>,\n-        before: &str,\n-        target: &str,\n-    ) {\n+    pub(crate) fn check_assist_range_target(assist: AssistHandler, before: &str, target: &str) {\n         let (range, before) = extract_range(before);\n         let (db, file_id) = with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n-            AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n+            assist(AssistCtx::new(&db, frange, true)).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n             Assist::Resolved { assist } => assist.get_first_action(),\n@@ -271,26 +268,20 @@ mod helpers {\n         assert_eq_text!(&before[range.start().to_usize()..range.end().to_usize()], target);\n     }\n \n-    pub(crate) fn check_assist_not_applicable(\n-        assist: fn(AssistCtx) -> Option<Assist>,\n-        before: &str,\n-    ) {\n+    pub(crate) fn check_assist_not_applicable(assist: AssistHandler, before: &str) {\n         let (before_cursor_pos, before) = extract_offset(before);\n         let (db, file_id) = with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n-        let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n+        let assist = assist(AssistCtx::new(&db, frange, true));\n         assert!(assist.is_none());\n     }\n \n-    pub(crate) fn check_assist_range_not_applicable(\n-        assist: fn(AssistCtx) -> Option<Assist>,\n-        before: &str,\n-    ) {\n+    pub(crate) fn check_assist_range_not_applicable(assist: AssistHandler, before: &str) {\n         let (range, before) = extract_range(before);\n         let (db, file_id) = with_single_file(&before);\n         let frange = FileRange { file_id, range };\n-        let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n+        let assist = assist(AssistCtx::new(&db, frange, true));\n         assert!(assist.is_none());\n     }\n }"}, {"sha": "0d57222956f02c7e84d0007b857e26b78c6bc449", "filename": "crates/ra_assists/src/utils.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "patch": "@@ -0,0 +1,27 @@\n+//! Assorted functions shared by several assists.\n+\n+use ra_syntax::{\n+    ast::{self, make},\n+    T,\n+};\n+\n+pub(crate) fn invert_boolean_expression(expr: ast::Expr) -> ast::Expr {\n+    if let Some(expr) = invert_special_case(&expr) {\n+        return expr;\n+    }\n+    make::expr_prefix(T![!], expr)\n+}\n+\n+fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n+    match expr {\n+        ast::Expr::BinExpr(bin) => match bin.op_kind()? {\n+            ast::BinOp::NegatedEqualityTest => bin.replace_op(T![==]).map(|it| it.into()),\n+            ast::BinOp::EqualityTest => bin.replace_op(T![!=]).map(|it| it.into()),\n+            _ => None,\n+        },\n+        ast::Expr::PrefixExpr(pe) if pe.op_kind()? == ast::PrefixOp::Not => pe.expr(),\n+        // FIXME:\n+        // ast::Expr::Literal(true | false )\n+        _ => None,\n+    }\n+}"}, {"sha": "a53d573359a8c4b30ace63cddd38fdfe6a89d9a3", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "patch": "@@ -25,7 +25,7 @@ const ERR_INLINE_TESTS_DIR: &str = \"crates/ra_syntax/test_data/parser/inline/err\n pub const SYNTAX_KINDS: &str = \"crates/ra_parser/src/syntax_kind/generated.rs\";\n pub const AST: &str = \"crates/ra_syntax/src/ast/generated.rs\";\n \n-const ASSISTS_DIR: &str = \"crates/ra_assists/src/assists\";\n+const ASSISTS_DIR: &str = \"crates/ra_assists/src/handlers\";\n const ASSISTS_TESTS: &str = \"crates/ra_assists/src/doc_tests/generated.rs\";\n const ASSISTS_DOCS: &str = \"docs/user/assists.md\";\n "}, {"sha": "6a69e7d6a0f2ddf1c1f871255ca42e5c6bf25348", "filename": "xtask/tests/tidy-tests/docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5397f05bfe7f3b18229a65040c6685e762b2f9a3/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs?ref=5397f05bfe7f3b18229a65040c6685e762b2f9a3", "patch": "@@ -6,7 +6,7 @@ use xtask::project_root;\n fn is_exclude_dir(p: &Path) -> bool {\n     // Test hopefully don't really need comments, and for assists we already\n     // have special comments which are source of doc tests and user docs.\n-    let exclude_dirs = [\"tests\", \"test_data\", \"assists\"];\n+    let exclude_dirs = [\"tests\", \"test_data\", \"handlers\"];\n     let mut cur_path = p;\n     while let Some(path) = cur_path.parent() {\n         if exclude_dirs.iter().any(|dir| path.ends_with(dir)) {"}]}