{"sha": "bc9b93629051979cec6fd078511954388bd4e9f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjOWI5MzYyOTA1MTk3OWNlYzZmZDA3ODUxMTk1NDM4OGJkNGU5Zjk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-07T19:15:47Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-07T19:15:47Z"}, "message": "Fix with_emitter callers", "tree": {"sha": "f946e6cd0efd98b201cb286116c3e6f1b7fae010", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f946e6cd0efd98b201cb286116c3e6f1b7fae010"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc9b93629051979cec6fd078511954388bd4e9f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9b93629051979cec6fd078511954388bd4e9f9", "html_url": "https://github.com/rust-lang/rust/commit/bc9b93629051979cec6fd078511954388bd4e9f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc9b93629051979cec6fd078511954388bd4e9f9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7563a30c0576761a0770b196e9effbaaf846be8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7563a30c0576761a0770b196e9effbaaf846be8", "html_url": "https://github.com/rust-lang/rust/commit/a7563a30c0576761a0770b196e9effbaaf846be8"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "3d52f1d44ba295e19e2d1ba89f5e1d11407ef5c1", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc9b93629051979cec6fd078511954388bd4e9f9/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9b93629051979cec6fd078511954388bd4e9f9/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=bc9b93629051979cec6fd078511954388bd4e9f9", "patch": "@@ -113,7 +113,7 @@ fn test_env_with_pool<F>(\n ) where\n     F: FnOnce(Env),\n {\n-    let diagnostic_handler = errors::Handler::with_emitter(true, false, emitter);\n+    let diagnostic_handler = errors::Handler::with_emitter(true, None, emitter);\n     let sess = session::build_session_(\n         options,\n         None,"}, {"sha": "db5b8dcda4eab7daadddc04514043510a00b683b", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc9b93629051979cec6fd078511954388bd4e9f9/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9b93629051979cec6fd078511954388bd4e9f9/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=bc9b93629051979cec6fd078511954388bd4e9f9", "patch": "@@ -1920,7 +1920,7 @@ mod tests {\n                                                           false,\n                                                           false);\n         ParseSess {\n-            span_diagnostic: errors::Handler::with_emitter(true, false, Box::new(emitter)),\n+            span_diagnostic: errors::Handler::with_emitter(true, None, Box::new(emitter)),\n             unstable_features: UnstableFeatures::from_environment(),\n             config: CrateConfig::default(),\n             included_mod_stack: Lock::new(Vec::new()),"}, {"sha": "2b3d18835d543bc631dd0e60f511159442ad8fd6", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc9b93629051979cec6fd078511954388bd4e9f9/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9b93629051979cec6fd078511954388bd4e9f9/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=bc9b93629051979cec6fd078511954388bd4e9f9", "patch": "@@ -58,7 +58,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n                                         Some(source_map.clone()),\n                                         false,\n                                         false);\n-        let handler = Handler::with_emitter(true, false, Box::new(emitter));\n+        let handler = Handler::with_emitter(true, None, Box::new(emitter));\n         handler.span_err(msp, \"foo\");\n \n         assert!(expected_output.chars().next() == Some('\\n'),"}]}