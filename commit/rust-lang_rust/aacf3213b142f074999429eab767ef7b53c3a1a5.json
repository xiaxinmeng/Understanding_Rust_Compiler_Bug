{"sha": "aacf3213b142f074999429eab767ef7b53c3a1a5", "node_id": "C_kwDOAAsO6NoAKGFhY2YzMjEzYjE0MmYwNzQ5OTk0MjllYWI3NjdlZjdiNTNjM2ExYTU", "commit": {"author": {"name": "Keith Smiley", "email": "keithbsmiley@gmail.com", "date": "2023-01-05T00:06:19Z"}, "committer": {"name": "Keith Smiley", "email": "keithbsmiley@gmail.com", "date": "2023-02-13T00:00:31Z"}, "message": "Add sanitizer support for modern iOS platforms\n\nasan and tsan generally support iOS, but that previously wasn't\nconfigured in rust. This only adds support for the simulator\narchitectures, and arm64 device architecture, not the older 32 bit\narchitectures.", "tree": {"sha": "ee9b0dc841099160231cf87c43b7e4561cfd4a02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee9b0dc841099160231cf87c43b7e4561cfd4a02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aacf3213b142f074999429eab767ef7b53c3a1a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJLBAABCAA1FiEErCCyYzJ+nJqmGlWhM7pg1ExxZ/gFAmPpfZ8XHGtlaXRoYnNt\naWxleUBnbWFpbC5jb20ACgkQM7pg1ExxZ/hMPg//WeROeNGbD4wDVQY8O5VtueR0\nrQs5/SM6USRW3wU+q4jElXaaL3DXRMZB0q7+OxPEk7P6asObuiFCawu2nkxQqqf+\n63KCOrgA7vyBrx7n1RavZJ+U3T/eizgk+gzyWGgf4rt81ESMsdof+r0QNRN8Voz7\nlCWuCerPU/Q+wFZxXxOiXabtEVNubWb29Y2HE8g/S9aLxLjc3MobO7R2Wzlp9NCo\n8Pw4WnUlPY3ICAwZT/81oCc0+tATWrrYQD6GQnnp8SJbyw9Xk1HnyjYBI2n10qK+\n1hJEHNAUdeR87G/KQt8cLAZs5ozSJTpGB/qNNyvqHbDvWKvHkfuBN4DIYAzL7G2Q\njz4nvcQUMAQNx+I9E9PWiyspC7+wxScGHMf8ZmxXAgRM5a/rYaqCWSZq6ELl+Utl\nZuPBmj+jtcWZyfr8ZegQK74eSmG+eaDSw1TchQAtWNjB/9/USkLlUq/9yfYxGsCX\nYg3L28Vf/bG4j0NM4SNTNt4GeNxPanNNu7Gn+GiMhAcAj3g6ryStz9RtfzZMe6Db\nOyTvcyzxNFfwzCpWr8aYyquc3yuBKOvK+K0vF4Hb+viYtl9THvVVvGvo1KdpWglD\nUpFvnCoEGNgtPPA2phyoPz0Y5T+Od5XV2n/raPgz/+8qDVRR0vFkJmZ4xPUmIIuS\nXu1V1vtFOjwhq5J0ZX8=\n=ve7a\n-----END PGP SIGNATURE-----", "payload": "tree ee9b0dc841099160231cf87c43b7e4561cfd4a02\nparent 5b8f284536d00ba649ca968584bedab4820d8527\nauthor Keith Smiley <keithbsmiley@gmail.com> 1672877179 -0800\ncommitter Keith Smiley <keithbsmiley@gmail.com> 1676246431 -0800\n\nAdd sanitizer support for modern iOS platforms\n\nasan and tsan generally support iOS, but that previously wasn't\nconfigured in rust. This only adds support for the simulator\narchitectures, and arm64 device architecture, not the older 32 bit\narchitectures.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aacf3213b142f074999429eab767ef7b53c3a1a5", "html_url": "https://github.com/rust-lang/rust/commit/aacf3213b142f074999429eab767ef7b53c3a1a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aacf3213b142f074999429eab767ef7b53c3a1a5/comments", "author": {"login": "keith", "id": 283886, "node_id": "MDQ6VXNlcjI4Mzg4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/283886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keith", "html_url": "https://github.com/keith", "followers_url": "https://api.github.com/users/keith/followers", "following_url": "https://api.github.com/users/keith/following{/other_user}", "gists_url": "https://api.github.com/users/keith/gists{/gist_id}", "starred_url": "https://api.github.com/users/keith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keith/subscriptions", "organizations_url": "https://api.github.com/users/keith/orgs", "repos_url": "https://api.github.com/users/keith/repos", "events_url": "https://api.github.com/users/keith/events{/privacy}", "received_events_url": "https://api.github.com/users/keith/received_events", "type": "User", "site_admin": false}, "committer": {"login": "keith", "id": 283886, "node_id": "MDQ6VXNlcjI4Mzg4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/283886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keith", "html_url": "https://github.com/keith", "followers_url": "https://api.github.com/users/keith/followers", "following_url": "https://api.github.com/users/keith/following{/other_user}", "gists_url": "https://api.github.com/users/keith/gists{/gist_id}", "starred_url": "https://api.github.com/users/keith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keith/subscriptions", "organizations_url": "https://api.github.com/users/keith/orgs", "repos_url": "https://api.github.com/users/keith/repos", "events_url": "https://api.github.com/users/keith/events{/privacy}", "received_events_url": "https://api.github.com/users/keith/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b8f284536d00ba649ca968584bedab4820d8527", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b8f284536d00ba649ca968584bedab4820d8527", "html_url": "https://github.com/rust-lang/rust/commit/5b8f284536d00ba649ca968584bedab4820d8527"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "e9edfd2877b866a19bba2b32623643ce8dc446ec", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aacf3213b142f074999429eab767ef7b53c3a1a5/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aacf3213b142f074999429eab767ef7b53c3a1a5/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs?ref=aacf3213b142f074999429eab767ef7b53c3a1a5", "patch": "@@ -1,8 +1,11 @@\n use super::apple_base::{ios_llvm_target, opts, Arch};\n-use crate::spec::{FramePointer, Target, TargetOptions};\n+use crate::spec::{FramePointer, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let arch = Arch::Arm64;\n+    let mut base = opts(\"ios\", arch);\n+    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::THREAD;\n+\n     Target {\n         // Clang automatically chooses a more specific target based on\n         // IPHONEOS_DEPLOYMENT_TARGET.\n@@ -28,7 +31,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..opts(\"ios\", arch)\n+            ..base\n         },\n     }\n }"}, {"sha": "6e2d62b6e085570415b20c19c236484122f1735a", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_sim.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aacf3213b142f074999429eab767ef7b53c3a1a5/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aacf3213b142f074999429eab767ef7b53c3a1a5/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs?ref=aacf3213b142f074999429eab767ef7b53c3a1a5", "patch": "@@ -1,8 +1,11 @@\n use super::apple_base::{ios_sim_llvm_target, opts, Arch};\n-use crate::spec::{FramePointer, Target, TargetOptions};\n+use crate::spec::{FramePointer, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let arch = Arch::Arm64_sim;\n+    let mut base = opts(\"ios\", arch);\n+    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::THREAD;\n+\n     Target {\n         // Clang automatically chooses a more specific target based on\n         // IPHONEOS_DEPLOYMENT_TARGET.\n@@ -28,7 +31,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..opts(\"ios\", arch)\n+            ..base\n         },\n     }\n }"}, {"sha": "1dcb47056a463b335010c81b56116102ecb06e04", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aacf3213b142f074999429eab767ef7b53c3a1a5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aacf3213b142f074999429eab767ef7b53c3a1a5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs?ref=aacf3213b142f074999429eab767ef7b53c3a1a5", "patch": "@@ -1,8 +1,11 @@\n use super::apple_base::{ios_sim_llvm_target, opts, Arch};\n-use crate::spec::{StackProbeType, Target, TargetOptions};\n+use crate::spec::{SanitizerSet, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let arch = Arch::X86_64_sim;\n+    let mut base = opts(\"ios\", arch);\n+    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::THREAD;\n+\n     Target {\n         llvm_target: ios_sim_llvm_target(arch).into(),\n         pointer_width: 64,\n@@ -12,7 +15,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,\n-            ..opts(\"ios\", arch)\n+            ..base\n         },\n     }\n }"}, {"sha": "253553132a999243b14e58ae62f7990de606e838", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aacf3213b142f074999429eab767ef7b53c3a1a5/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aacf3213b142f074999429eab767ef7b53c3a1a5/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=aacf3213b142f074999429eab767ef7b53c3a1a5", "patch": "@@ -467,7 +467,12 @@ fn copy_sanitizers(\n         let dst = libdir.join(&runtime.name);\n         builder.copy(&runtime.path, &dst);\n \n-        if target == \"x86_64-apple-darwin\" || target == \"aarch64-apple-darwin\" {\n+        if target == \"x86_64-apple-darwin\"\n+            || target == \"aarch64-apple-darwin\"\n+            || target == \"aarch64-apple-ios\"\n+            || target == \"aarch64-apple-ios-sim\"\n+            || target == \"x86_64-apple-ios\"\n+        {\n             // Update the library\u2019s install name to reflect that it has been renamed.\n             apple_darwin_update_library_name(&dst, &format!(\"@rpath/{}\", &runtime.name));\n             // Upon renaming the install name, the code signature of the file will invalidate,"}, {"sha": "c0273f2f5f26cdacc25207ace25d3a13ae32b8e1", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aacf3213b142f074999429eab767ef7b53c3a1a5/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aacf3213b142f074999429eab767ef7b53c3a1a5/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=aacf3213b142f074999429eab767ef7b53c3a1a5", "patch": "@@ -483,7 +483,7 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_VERSION_SUFFIX\", suffix);\n         }\n \n-        configure_cmake(builder, target, &mut cfg, true, ldflags);\n+        configure_cmake(builder, target, &mut cfg, true, ldflags, &[]);\n         configure_llvm(builder, target, &mut cfg);\n \n         for (key, val) in &builder.config.llvm_build_config {\n@@ -574,6 +574,7 @@ fn configure_cmake(\n     cfg: &mut cmake::Config,\n     use_compiler_launcher: bool,\n     mut ldflags: LdFlags,\n+    extra_compiler_flags: &[&str],\n ) {\n     // Do not print installation messages for up-to-date files.\n     // LLVM and LLD builds can produce a lot of those and hit CI limits on log size.\n@@ -714,6 +715,9 @@ fn configure_cmake(\n     if builder.config.llvm_clang_cl.is_some() {\n         cflags.push(&format!(\" --target={}\", target));\n     }\n+    for flag in extra_compiler_flags {\n+        cflags.push(&format!(\" {}\", flag));\n+    }\n     cfg.define(\"CMAKE_C_FLAGS\", cflags);\n     let mut cxxflags: OsString = builder.cflags(target, GitRepo::Llvm, CLang::Cxx).join(\" \").into();\n     if let Some(ref s) = builder.config.llvm_cxxflags {\n@@ -723,6 +727,9 @@ fn configure_cmake(\n     if builder.config.llvm_clang_cl.is_some() {\n         cxxflags.push(&format!(\" --target={}\", target));\n     }\n+    for flag in extra_compiler_flags {\n+        cxxflags.push(&format!(\" {}\", flag));\n+    }\n     cfg.define(\"CMAKE_CXX_FLAGS\", cxxflags);\n     if let Some(ar) = builder.ar(target) {\n         if ar.is_absolute() {\n@@ -864,7 +871,7 @@ impl Step for Lld {\n             }\n         }\n \n-        configure_cmake(builder, target, &mut cfg, true, ldflags);\n+        configure_cmake(builder, target, &mut cfg, true, ldflags, &[]);\n         configure_llvm(builder, target, &mut cfg);\n \n         // Re-use the same flags as llvm to control the level of debug information\n@@ -1028,7 +1035,16 @@ impl Step for Sanitizers {\n         // Unfortunately sccache currently lacks support to build them successfully.\n         // Disable compiler launcher on Darwin targets to avoid potential issues.\n         let use_compiler_launcher = !self.target.contains(\"apple-darwin\");\n-        configure_cmake(builder, self.target, &mut cfg, use_compiler_launcher, LdFlags::default());\n+        let extra_compiler_flags: &[&str] =\n+            if self.target.contains(\"apple\") { &[\"-fembed-bitcode=off\"] } else { &[] };\n+        configure_cmake(\n+            builder,\n+            self.target,\n+            &mut cfg,\n+            use_compiler_launcher,\n+            LdFlags::default(),\n+            extra_compiler_flags,\n+        );\n \n         t!(fs::create_dir_all(&out_dir));\n         cfg.out_dir(out_dir);\n@@ -1084,12 +1100,15 @@ fn supported_sanitizers(\n \n     match &*target.triple {\n         \"aarch64-apple-darwin\" => darwin_libs(\"osx\", &[\"asan\", \"lsan\", \"tsan\"]),\n+        \"aarch64-apple-ios\" => darwin_libs(\"ios\", &[\"asan\", \"tsan\"]),\n+        \"aarch64-apple-ios-sim\" => darwin_libs(\"iossim\", &[\"asan\", \"tsan\"]),\n         \"aarch64-unknown-fuchsia\" => common_libs(\"fuchsia\", \"aarch64\", &[\"asan\"]),\n         \"aarch64-unknown-linux-gnu\" => {\n             common_libs(\"linux\", \"aarch64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\", \"hwasan\"])\n         }\n         \"x86_64-apple-darwin\" => darwin_libs(\"osx\", &[\"asan\", \"lsan\", \"tsan\"]),\n         \"x86_64-unknown-fuchsia\" => common_libs(\"fuchsia\", \"x86_64\", &[\"asan\"]),\n+        \"x86_64-apple-ios\" => darwin_libs(\"iossim\", &[\"asan\", \"tsan\"]),\n         \"x86_64-unknown-freebsd\" => common_libs(\"freebsd\", \"x86_64\", &[\"asan\", \"msan\", \"tsan\"]),\n         \"x86_64-unknown-netbsd\" => {\n             common_libs(\"netbsd\", \"x86_64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])"}, {"sha": "b86516bf5daadf5d63f92c6d632f60b30214bc97", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aacf3213b142f074999429eab767ef7b53c3a1a5/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aacf3213b142f074999429eab767ef7b53c3a1a5/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=aacf3213b142f074999429eab767ef7b53c3a1a5", "patch": "@@ -11,6 +11,8 @@ mod tests;\n \n pub const ASAN_SUPPORTED_TARGETS: &[&str] = &[\n     \"aarch64-apple-darwin\",\n+    \"aarch64-apple-ios\",\n+    \"aarch64-apple-ios-sim\",\n     \"aarch64-unknown-fuchsia\",\n     \"aarch64-linux-android\",\n     \"aarch64-unknown-linux-gnu\",\n@@ -19,6 +21,7 @@ pub const ASAN_SUPPORTED_TARGETS: &[&str] = &[\n     \"i686-linux-android\",\n     \"i686-unknown-linux-gnu\",\n     \"x86_64-apple-darwin\",\n+    \"x86_64-apple-ios\",\n     \"x86_64-unknown-fuchsia\",\n     \"x86_64-linux-android\",\n     \"x86_64-unknown-freebsd\",\n@@ -63,8 +66,11 @@ pub const MSAN_SUPPORTED_TARGETS: &[&str] = &[\n \n pub const TSAN_SUPPORTED_TARGETS: &[&str] = &[\n     \"aarch64-apple-darwin\",\n+    \"aarch64-apple-ios\",\n+    \"aarch64-apple-ios-sim\",\n     \"aarch64-unknown-linux-gnu\",\n     \"x86_64-apple-darwin\",\n+    \"x86_64-apple-ios\",\n     \"x86_64-unknown-freebsd\",\n     \"x86_64-unknown-linux-gnu\",\n     \"s390x-unknown-linux-gnu\","}]}