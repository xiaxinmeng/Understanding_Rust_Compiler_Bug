{"sha": "b0e293bf696f31dc3281c027a194c1e3e08a24ef", "node_id": "C_kwDOAAsO6NoAKGIwZTI5M2JmNjk2ZjMxZGMzMjgxYzAyN2ExOTRjMWUzZTA4YTI0ZWY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-21T10:21:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-21T10:21:39Z"}, "message": "Merge #11424\n\n11424: Pass required features to cargo when using run action r=Veykril a=WaffleLapkin\n\nWhen using `F1`->`Rust Analyzer: Run` action on an `example`, pass its `required-features` to `cargo run`. This allows to run examples that were otherwise impossible to run with RA.\n\nCo-authored-by: Maybe Waffle <waffle.lapkin@gmail.com>", "tree": {"sha": "63b4e988c440289f2bf434674b1af2a640c7114d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63b4e988c440289f2bf434674b1af2a640c7114d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0e293bf696f31dc3281c027a194c1e3e08a24ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiE2ezCRBK7hj4Ov3rIwAAagMIAAVAOcvbX79e7s5yUuIFcUNB\npgFdkAqIS2SusmNgtBFxRUVdfFlFi9ph/UDxlDMjOFmXQ6iE0oXBYVt69LhCp6CR\nyWdP7uEndglwAr+zfDyopGxxncv0aYO4T7REoTIiH5a6KsY7ajK8kX9/XSQJMEYt\neYR26jkEtam0AvnCCqtP/gSAIF717PdJJuKLDBk2mr1EhJpsmKv5iAZlOGxS8Cah\nGSADQeGM91uMeiOxBjdsl9tf8Naiy2nouWzr6Od+Q6IgcM3TGyoIBGuZx8XmYEtD\nqtd4wkmNit59LOvKjFTXWyofhunxlVMJXceelN9mm+NTaH1JkiK7WbszR2Q9Bdc=\n=RVYt\n-----END PGP SIGNATURE-----\n", "payload": "tree 63b4e988c440289f2bf434674b1af2a640c7114d\nparent c67660fc22e32ca8b9165e6efe34382747e044b0\nparent 662dd7c27dff54a1bed9f8d85020dd8b6b055fd6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645438899 +0000\ncommitter GitHub <noreply@github.com> 1645438899 +0000\n\nMerge #11424\n\n11424: Pass required features to cargo when using run action r=Veykril a=WaffleLapkin\n\nWhen using `F1`->`Rust Analyzer: Run` action on an `example`, pass its `required-features` to `cargo run`. This allows to run examples that were otherwise impossible to run with RA.\n\nCo-authored-by: Maybe Waffle <waffle.lapkin@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e293bf696f31dc3281c027a194c1e3e08a24ef", "html_url": "https://github.com/rust-lang/rust/commit/b0e293bf696f31dc3281c027a194c1e3e08a24ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0e293bf696f31dc3281c027a194c1e3e08a24ef/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c67660fc22e32ca8b9165e6efe34382747e044b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c67660fc22e32ca8b9165e6efe34382747e044b0", "html_url": "https://github.com/rust-lang/rust/commit/c67660fc22e32ca8b9165e6efe34382747e044b0"}, {"sha": "662dd7c27dff54a1bed9f8d85020dd8b6b055fd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/662dd7c27dff54a1bed9f8d85020dd8b6b055fd6", "html_url": "https://github.com/rust-lang/rust/commit/662dd7c27dff54a1bed9f8d85020dd8b6b055fd6"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "48051e4b5e8fbc4c39bb6750a247ffbbb3c1d951", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0e293bf696f31dc3281c027a194c1e3e08a24ef/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e293bf696f31dc3281c027a194c1e3e08a24ef/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=b0e293bf696f31dc3281c027a194c1e3e08a24ef", "patch": "@@ -210,6 +210,8 @@ pub struct TargetData {\n     pub kind: TargetKind,\n     /// Is this target a proc-macro\n     pub is_proc_macro: bool,\n+    /// Required features of the target without which it won't build\n+    pub required_features: Vec<String>,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -348,6 +350,7 @@ impl CargoWorkspace {\n                     root: AbsPathBuf::assert(PathBuf::from(&meta_tgt.src_path)),\n                     kind: TargetKind::new(meta_tgt.kind.as_slice()),\n                     is_proc_macro,\n+                    required_features: meta_tgt.required_features.clone(),\n                 });\n                 pkg_data.targets.push(tgt);\n             }"}, {"sha": "ec5dd16d001cdd38e0ea649b9619713f7af9f7c7", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b0e293bf696f31dc3281c027a194c1e3e08a24ef/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e293bf696f31dc3281c027a194c1e3e08a24ef/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=b0e293bf696f31dc3281c027a194c1e3e08a24ef", "patch": "@@ -1,5 +1,7 @@\n //! See `CargoTargetSpec`\n \n+use std::mem;\n+\n use cfg::{CfgAtom, CfgExpr};\n use ide::{FileId, RunnableKind, TestId};\n use project_model::{self, ManifestPath, TargetKind};\n@@ -18,17 +20,22 @@ pub(crate) struct CargoTargetSpec {\n     pub(crate) package: String,\n     pub(crate) target: String,\n     pub(crate) target_kind: TargetKind,\n+    pub(crate) required_features: Vec<String>,\n }\n \n impl CargoTargetSpec {\n     pub(crate) fn runnable_args(\n         snap: &GlobalStateSnapshot,\n-        spec: Option<CargoTargetSpec>,\n+        mut spec: Option<CargoTargetSpec>,\n         kind: &RunnableKind,\n         cfg: &Option<CfgExpr>,\n     ) -> Result<(Vec<String>, Vec<String>)> {\n         let mut args = Vec::new();\n         let mut extra_args = Vec::new();\n+\n+        let target_required_features =\n+            spec.as_mut().map(|spec| mem::take(&mut spec.required_features)).unwrap_or(Vec::new());\n+\n         match kind {\n             RunnableKind::Test { test_id, attr } => {\n                 args.push(\"test\".to_string());\n@@ -87,14 +94,20 @@ impl CargoTargetSpec {\n         let cargo_config = snap.config.cargo();\n         if cargo_config.all_features {\n             args.push(\"--all-features\".to_string());\n+\n+            for feature in target_required_features {\n+                args.push(\"--features\".to_string());\n+                args.push(feature);\n+            }\n         } else {\n             let mut features = Vec::new();\n             if let Some(cfg) = cfg.as_ref() {\n                 required_features(cfg, &mut features);\n             }\n-            for feature in cargo_config.features {\n-                features.push(feature.clone());\n-            }\n+\n+            features.extend(cargo_config.features);\n+            features.extend(target_required_features);\n+\n             features.dedup();\n             for feature in features {\n                 args.push(\"--features\".to_string());\n@@ -126,6 +139,7 @@ impl CargoTargetSpec {\n             package: cargo_ws.package_flag(package_data),\n             target: target_data.name.clone(),\n             target_kind: target_data.kind,\n+            required_features: target_data.required_features.clone(),\n         };\n \n         Ok(Some(res))"}]}