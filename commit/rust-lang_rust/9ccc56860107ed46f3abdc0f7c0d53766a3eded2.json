{"sha": "9ccc56860107ed46f3abdc0f7c0d53766a3eded2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljY2M1Njg2MDEwN2VkNDZmM2FiZGMwZjdjMGQ1Mzc2NmEzZWRlZDI=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2018-10-06T20:53:12Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2018-10-06T20:53:12Z"}, "message": "Dynamically apply highlightingOn config\n\nFixes #84", "tree": {"sha": "2c3b2df2c21395b9c8afba134f9917a885c57fd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c3b2df2c21395b9c8afba134f9917a885c57fd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ccc56860107ed46f3abdc0f7c0d53766a3eded2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ccc56860107ed46f3abdc0f7c0d53766a3eded2", "html_url": "https://github.com/rust-lang/rust/commit/9ccc56860107ed46f3abdc0f7c0d53766a3eded2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ccc56860107ed46f3abdc0f7c0d53766a3eded2/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81bf190f7aca4cadec5394c397bd7c084b53b9f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/81bf190f7aca4cadec5394c397bd7c084b53b9f5", "html_url": "https://github.com/rust-lang/rust/commit/81bf190f7aca4cadec5394c397bd7c084b53b9f5"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "9f05fe91a023f817fddc919cde6258ef5fa8f424", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ccc56860107ed46f3abdc0f7c0d53766a3eded2/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/9ccc56860107ed46f3abdc0f7c0d53766a3eded2/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=9ccc56860107ed46f3abdc0f7c0d53766a3eded2", "patch": "@@ -111,7 +111,7 @@\n         ],\n         \"configuration\": {\n             \"type\": \"object\",\n-            \"title\": \"Rust Analyzer configuration\",\n+            \"title\": \"Rust Analyzer\",\n             \"properties\": {\n                 \"ra-lsp.highlightingOn\": {\n                     \"type\": \"boolean\","}, {"sha": "fde6a480d85677dfceb5acf49aa63178a7da6eb9", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9ccc56860107ed46f3abdc0f7c0d53766a3eded2/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/9ccc56860107ed46f3abdc0f7c0d53766a3eded2/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=9ccc56860107ed46f3abdc0f7c0d53766a3eded2", "patch": "@@ -11,10 +11,22 @@ let uris = {\n let highlightingOn = true;\n \n export function activate(context: vscode.ExtensionContext) {\n-    let config = vscode.workspace.getConfiguration('ra-lsp');\n-    if (config.has('highlightingOn')) {\n-        highlightingOn = config.get('highlightingOn') as boolean;\n-    }\n+    let applyHighlightingOn = () => {\n+        let config = vscode.workspace.getConfiguration('ra-lsp');\n+        if (config.has('highlightingOn')) {\n+            highlightingOn = config.get('highlightingOn') as boolean;\n+        };\n+\n+        if (!highlightingOn) {\n+            removeHighlights();\n+        }\n+    };\n+\n+    // Apply the highlightingOn config now and whenever the config changes\n+    applyHighlightingOn();\n+    vscode.workspace.onDidChangeConfiguration(_ => {\n+        applyHighlightingOn();\n+    });\n \n     let textDocumentContentProvider = new TextDocumentContentProvider()\n     let dispose = (disposable: vscode.Disposable) => {\n@@ -130,7 +142,7 @@ export function activate(context: vscode.ExtensionContext) {\n         })\n     }, null, context.subscriptions)\n     vscode.window.onDidChangeActiveTextEditor(async (editor) => {\n-        if (!editor || editor.document.languageId != 'rust') return\n+        if (!highlightingOn || !editor || editor.document.languageId != 'rust') return\n         let params: lc.TextDocumentIdentifier = {\n             uri: editor.document.uri.toString()\n         }\n@@ -179,7 +191,7 @@ function startServer() {\n                 let editor = vscode.window.visibleTextEditors.find(\n                     (editor) => editor.document.uri.toString() == params.uri\n                 )\n-                if (editor == null) return;\n+                if (!highlightingOn || !editor) return;\n                 setHighlights(\n                     editor,\n                     params.decorations,\n@@ -213,10 +225,11 @@ class TextDocumentContentProvider implements vscode.TextDocumentContentProvider\n     }\n }\n \n+let decorations: { [index: string]: vscode.TextEditorDecorationType } = {};\n \n-const decorations: { [index: string]: vscode.TextEditorDecorationType } = (() => {\n+function initDecorations() {\n     const decor = (obj: any) => vscode.window.createTextEditorDecorationType({ color: obj })\n-    return {\n+    decorations = {\n         background: decor(\"#3F3F3F\"),\n         error: vscode.window.createTextEditorDecorationType({\n             borderColor: \"red\",\n@@ -232,14 +245,26 @@ const decorations: { [index: string]: vscode.TextEditorDecorationType } = (() =>\n         attribute: decor(\"#BFEBBF\"),\n         literal: decor(\"#DFAF8F\"),\n     }\n-})()\n+}\n+\n+function removeHighlights() {\n+    for (let tag in decorations) {\n+        decorations[tag].dispose();\n+    }\n+\n+    decorations = {};\n+}\n \n function setHighlights(\n     editor: vscode.TextEditor,\n     highlights: Array<Decoration>\n ) {\n-    if (!highlightingOn) {\n-        return;\n+    // Initialize decorations if necessary\n+    //\n+    // Note: decoration objects need to be kept around so we can dispose them\n+    // if the user disables syntax highlighting\n+    if (Object.keys(decorations).length === 0) {\n+        initDecorations();\n     }\n \n     let byTag: Map<string, vscode.Range[]> = new Map()"}]}