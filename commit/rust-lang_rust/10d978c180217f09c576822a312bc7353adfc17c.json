{"sha": "10d978c180217f09c576822a312bc7353adfc17c", "node_id": "C_kwDOAAsO6NoAKDEwZDk3OGMxODAyMTdmMDljNTc2ODIyYTMxMmJjNzM1M2FkZmMxN2M", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-05-12T20:06:17Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-05-12T20:06:17Z"}, "message": "Inline _create() calls and add assertions", "tree": {"sha": "3c9704217e98c833f5b96440d9d9f5fdc7c7c953", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c9704217e98c833f5b96440d9d9f5fdc7c7c953"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10d978c180217f09c576822a312bc7353adfc17c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmJ9aLkACgkQGBtJ+fOP\nM3R+uwwAhNOtf2x/EXRDxcO0zZtvzmv18YvaLbVa5c2Kk5fUUovqHldWi1OL4V1o\nalZ/bdvE0riBNbzWxwJ+hShzknlh9JUWxzgpwFOw9vcVvvCaPuyTIUHzOwdG71MU\nF/cLRU90xd2B9me6jlQGbswW/hYReywnyARlX6hpw9ZKPclSCm9Ri9M9RL83rixu\nHL5zOo8srIhJNSIKFCjGPuMymRBKzBkhlOgdZibaYPWxm0usg8Cr4TkGnRqeMVif\n0g0vFdsqsTuP3rUCyQn+NY4ZowMfppPtJqts84wWuLNpF6MTx1D7EN0wec2wiZXv\nMsWWJnNYAHTZiVSlfTgEEYCJVs7f7zCw+qqwyeMQQaJLA1ZN9pXwLZtIsOVxCTh3\nCDc1wRM27S9tZnfSN4qV/aUBmkS68rvD7M2z5cCIP9ijAbQ4SpazwFGBHyxOym+1\n3Zyx1xWvCNhHV0PTUlSt7sEXFpoqvyFeZPUYLEeicDIGmIS+i3tjou4mJRThvBmu\nYLHB2vTA\n=1vme\n-----END PGP SIGNATURE-----", "payload": "tree 3c9704217e98c833f5b96440d9d9f5fdc7c7c953\nparent a5db2c32e5f0b29c730451a80efc0b4751ca208e\nauthor Andy Wang <cbeuw.andy@gmail.com> 1652385977 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1652385977 +0100\n\nInline _create() calls and add assertions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10d978c180217f09c576822a312bc7353adfc17c", "html_url": "https://github.com/rust-lang/rust/commit/10d978c180217f09c576822a312bc7353adfc17c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10d978c180217f09c576822a312bc7353adfc17c/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5db2c32e5f0b29c730451a80efc0b4751ca208e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5db2c32e5f0b29c730451a80efc0b4751ca208e", "html_url": "https://github.com/rust-lang/rust/commit/a5db2c32e5f0b29c730451a80efc0b4751ca208e"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "0eebe4f654e4cb5ca43fadd6ff7ac448709e916b", "filename": "src/sync.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/10d978c180217f09c576822a312bc7353adfc17c/src%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d978c180217f09c576822a312bc7353adfc17c/src%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsync.rs?ref=10d978c180217f09c576822a312bc7353adfc17c", "patch": "@@ -223,10 +223,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         F: FnOnce(&mut MiriEvalContext<'mir, 'tcx>, MutexId) -> InterpResult<'tcx, Option<MutexId>>,\n     {\n         let this = self.eval_context_mut();\n-        if let Some(old) = existing(this, this.machine.threads.sync.mutexes.next_index())? {\n+        let next_index = this.machine.threads.sync.mutexes.next_index();\n+        if let Some(old) = existing(this, next_index)? {\n             Ok(old)\n         } else {\n-            Ok(self.mutex_create())\n+            let new_index = this.machine.threads.sync.mutexes.push(Default::default());\n+            assert_eq!(next_index, new_index);\n+            Ok(new_index)\n         }\n     }\n \n@@ -323,10 +326,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         ) -> InterpResult<'tcx, Option<RwLockId>>,\n     {\n         let this = self.eval_context_mut();\n-        if let Some(old) = existing(this, this.machine.threads.sync.rwlocks.next_index())? {\n+        let next_index = this.machine.threads.sync.rwlocks.next_index();\n+        if let Some(old) = existing(this, next_index)? {\n             Ok(old)\n         } else {\n-            Ok(self.rwlock_create())\n+            let new_index = this.machine.threads.sync.rwlocks.push(Default::default());\n+            assert_eq!(next_index, new_index);\n+            Ok(new_index)\n         }\n     }\n \n@@ -489,10 +495,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         ) -> InterpResult<'tcx, Option<CondvarId>>,\n     {\n         let this = self.eval_context_mut();\n-        if let Some(old) = existing(this, this.machine.threads.sync.condvars.next_index())? {\n+        let next_index = this.machine.threads.sync.condvars.next_index();\n+        if let Some(old) = existing(this, next_index)? {\n             Ok(old)\n         } else {\n-            Ok(self.condvar_create())\n+            let new_index = this.machine.threads.sync.condvars.push(Default::default());\n+            assert_eq!(next_index, new_index);\n+            Ok(new_index)\n         }\n     }\n "}]}