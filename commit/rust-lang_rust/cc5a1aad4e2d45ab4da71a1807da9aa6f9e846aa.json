{"sha": "cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNWExYWFkNGUyZDQ1YWI0ZGE3MWExODA3ZGE5YWE2ZjllODQ2YWE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-13T21:02:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-13T21:02:21Z"}, "message": "Rollup merge of #77722 - fusion-engineering-forks:safe-unsupported-locks, r=Mark-Simulacrum\n\nRemove unsafety from sys/unsupported and add deny(unsafe_op_in_unsafe_fn).\n\nReplacing `UnsafeCell`s by a `Cell`s simplifies things and makes the mutex and rwlock implementations safe. Other than that, only unsafety in strlen() contained unsafe code.\n\n@rustbot modify labels: +F-unsafe-block-in-unsafe-fn +C-cleanup", "tree": {"sha": "623614a69ee529ffd304eab8c4e044ff4d680741", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/623614a69ee529ffd304eab8c4e044ff4d680741"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhhXeCRBK7hj4Ov3rIwAAdHIIABZdg/JOvUy7VxVJDLUX7Hwj\nI+ubGFYsXlDoDNjdbDCbdNpDwD/YShyi9pBVW9zEOK+qERj15akXWsuR155a2t4U\nBh7KB1B5Vkx4dTLTCb7VspLw3icPC/xjJLFddB8jB/WzBx6WnicxVOTtZZactc3i\n0jsaPyZh3u66eN/mCzcD2n4XnpMKdowR0H7bBPVbqR/JmifDrjZ+yCV477XJp4Fe\nl1kr0uj5i0Wl3SjJPE0aMykykPcGS0E1Wl287elZ4Xz4/LeG5o9xEUKMis0/YZS5\nYbvW10SNaiByUulwRLlSDLR5gdbgeK+3oEioIqJ3manhZU7KtvxKTEpY1heOGKc=\n=xB9J\n-----END PGP SIGNATURE-----\n", "payload": "tree 623614a69ee529ffd304eab8c4e044ff4d680741\nparent 7de5fe76f25304cb5a34b81a3989c6117b0761f0\nparent af414dc274d30bc3f4aea1d396ac2663e0c08c56\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1602622941 +0900\ncommitter GitHub <noreply@github.com> 1602622941 +0900\n\nRollup merge of #77722 - fusion-engineering-forks:safe-unsupported-locks, r=Mark-Simulacrum\n\nRemove unsafety from sys/unsupported and add deny(unsafe_op_in_unsafe_fn).\n\nReplacing `UnsafeCell`s by a `Cell`s simplifies things and makes the mutex and rwlock implementations safe. Other than that, only unsafety in strlen() contained unsafe code.\n\n@rustbot modify labels: +F-unsafe-block-in-unsafe-fn +C-cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa", "html_url": "https://github.com/rust-lang/rust/commit/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7de5fe76f25304cb5a34b81a3989c6117b0761f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7de5fe76f25304cb5a34b81a3989c6117b0761f0", "html_url": "https://github.com/rust-lang/rust/commit/7de5fe76f25304cb5a34b81a3989c6117b0761f0"}, {"sha": "af414dc274d30bc3f4aea1d396ac2663e0c08c56", "url": "https://api.github.com/repos/rust-lang/rust/commits/af414dc274d30bc3f4aea1d396ac2663e0c08c56", "html_url": "https://github.com/rust-lang/rust/commit/af414dc274d30bc3f4aea1d396ac2663e0c08c56"}], "stats": {"total": 71, "additions": 34, "deletions": 37}, "files": [{"sha": "2cdd9c4d19e6e93faad2a16640dac845d05c659b", "filename": "library/std/src/sys/unsupported/common.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs?ref=cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa", "patch": "@@ -39,10 +39,13 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n pub enum Void {}\n \n pub unsafe fn strlen(mut s: *const c_char) -> usize {\n-    let mut n = 0;\n-    while *s != 0 {\n-        n += 1;\n-        s = s.offset(1);\n+    // SAFETY: The caller must guarantee `s` points to a valid 0-terminated string.\n+    unsafe {\n+        let mut n = 0;\n+        while *s != 0 {\n+            n += 1;\n+            s = s.offset(1);\n+        }\n+        n\n     }\n-    return n;\n }"}, {"sha": "d9efdec33d93749948315dec25cd8fd468c2f8b4", "filename": "library/std/src/sys/unsupported/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs?ref=cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa", "patch": "@@ -1,3 +1,5 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n pub mod alloc;\n pub mod args;\n pub mod cmath;"}, {"sha": "b3203c16c50022bb6f67e436899dd7a9879640ed", "filename": "library/std/src/sys/unsupported/mutex.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmutex.rs?ref=cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa", "patch": "@@ -1,7 +1,8 @@\n-use crate::cell::UnsafeCell;\n+use crate::cell::Cell;\n \n pub struct Mutex {\n-    locked: UnsafeCell<bool>,\n+    // This platform has no threads, so we can use a Cell here.\n+    locked: Cell<bool>,\n }\n \n pub type MovableMutex = Mutex;\n@@ -11,33 +12,25 @@ unsafe impl Sync for Mutex {} // no threads on this platform\n \n impl Mutex {\n     pub const fn new() -> Mutex {\n-        Mutex { locked: UnsafeCell::new(false) }\n+        Mutex { locked: Cell::new(false) }\n     }\n \n     #[inline]\n     pub unsafe fn init(&mut self) {}\n \n     #[inline]\n     pub unsafe fn lock(&self) {\n-        let locked = self.locked.get();\n-        assert!(!*locked, \"cannot recursively acquire mutex\");\n-        *locked = true;\n+        assert_eq!(self.locked.replace(true), false, \"cannot recursively acquire mutex\");\n     }\n \n     #[inline]\n     pub unsafe fn unlock(&self) {\n-        *self.locked.get() = false;\n+        self.locked.set(false);\n     }\n \n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool {\n-        let locked = self.locked.get();\n-        if *locked {\n-            false\n-        } else {\n-            *locked = true;\n-            true\n-        }\n+        self.locked.replace(true) == false\n     }\n \n     #[inline]"}, {"sha": "6982b2b155fa5b8ae75ecb3a0ef0454b219fa13d", "filename": "library/std/src/sys/unsupported/rwlock.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Frwlock.rs?ref=cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa", "patch": "@@ -1,32 +1,33 @@\n-use crate::cell::UnsafeCell;\n+use crate::cell::Cell;\n \n pub struct RWLock {\n-    mode: UnsafeCell<isize>,\n+    // This platform has no threads, so we can use a Cell here.\n+    mode: Cell<isize>,\n }\n \n unsafe impl Send for RWLock {}\n unsafe impl Sync for RWLock {} // no threads on this platform\n \n impl RWLock {\n     pub const fn new() -> RWLock {\n-        RWLock { mode: UnsafeCell::new(0) }\n+        RWLock { mode: Cell::new(0) }\n     }\n \n     #[inline]\n     pub unsafe fn read(&self) {\n-        let mode = self.mode.get();\n-        if *mode >= 0 {\n-            *mode += 1;\n+        let m = self.mode.get();\n+        if m >= 0 {\n+            self.mode.set(m + 1);\n         } else {\n             rtabort!(\"rwlock locked for writing\");\n         }\n     }\n \n     #[inline]\n     pub unsafe fn try_read(&self) -> bool {\n-        let mode = self.mode.get();\n-        if *mode >= 0 {\n-            *mode += 1;\n+        let m = self.mode.get();\n+        if m >= 0 {\n+            self.mode.set(m + 1);\n             true\n         } else {\n             false\n@@ -35,19 +36,15 @@ impl RWLock {\n \n     #[inline]\n     pub unsafe fn write(&self) {\n-        let mode = self.mode.get();\n-        if *mode == 0 {\n-            *mode = -1;\n-        } else {\n+        if self.mode.replace(-1) != 0 {\n             rtabort!(\"rwlock locked for reading\")\n         }\n     }\n \n     #[inline]\n     pub unsafe fn try_write(&self) -> bool {\n-        let mode = self.mode.get();\n-        if *mode == 0 {\n-            *mode = -1;\n+        if self.mode.get() == 0 {\n+            self.mode.set(-1);\n             true\n         } else {\n             false\n@@ -56,12 +53,12 @@ impl RWLock {\n \n     #[inline]\n     pub unsafe fn read_unlock(&self) {\n-        *self.mode.get() -= 1;\n+        self.mode.set(self.mode.get() - 1);\n     }\n \n     #[inline]\n     pub unsafe fn write_unlock(&self) {\n-        *self.mode.get() += 1;\n+        assert_eq!(self.mode.replace(0), -1);\n     }\n \n     #[inline]"}, {"sha": "a0a37ef8316a87ca6f063361418f32fe676e6815", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa", "patch": "@@ -53,6 +53,7 @@ pub mod thread_local_key;\n pub mod time;\n \n #[path = \"../unsupported/common.rs\"]\n+#[deny(unsafe_op_in_unsafe_fn)]\n #[allow(unused)]\n mod common;\n pub use common::*;"}, {"sha": "18295e1129a053be0aed1e01657fee90d1991ac6", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=cc5a1aad4e2d45ab4da71a1807da9aa6f9e846aa", "patch": "@@ -66,5 +66,6 @@ cfg_if::cfg_if! {\n }\n \n #[path = \"../unsupported/common.rs\"]\n+#[deny(unsafe_op_in_unsafe_fn)]\n mod common;\n pub use common::*;"}]}