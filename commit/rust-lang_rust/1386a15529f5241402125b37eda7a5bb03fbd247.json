{"sha": "1386a15529f5241402125b37eda7a5bb03fbd247", "node_id": "C_kwDOAAsO6NoAKDEzODZhMTU1MjlmNTI0MTQwMjEyNWIzN2VkYTdhNWJiMDNmYmQyNDc", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2021-12-14T21:56:49Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2021-12-14T21:56:49Z"}, "message": "Update std::error::Report based on feedback", "tree": {"sha": "af626e1fd6e25d9014d0bc40de734495b144d2ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af626e1fd6e25d9014d0bc40de734495b144d2ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1386a15529f5241402125b37eda7a5bb03fbd247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1386a15529f5241402125b37eda7a5bb03fbd247", "html_url": "https://github.com/rust-lang/rust/commit/1386a15529f5241402125b37eda7a5bb03fbd247", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1386a15529f5241402125b37eda7a5bb03fbd247/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32bcb8113f750db36b9590b516a9fc40c0fa99df", "url": "https://api.github.com/repos/rust-lang/rust/commits/32bcb8113f750db36b9590b516a9fc40c0fa99df", "html_url": "https://github.com/rust-lang/rust/commit/32bcb8113f750db36b9590b516a9fc40c0fa99df"}], "stats": {"total": 252, "additions": 171, "deletions": 81}, "files": [{"sha": "10de248c3d7ec0ef35c0b18769d2792233d86258", "filename": "library/std/src/error.rs", "status": "modified", "additions": 47, "deletions": 27, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1386a15529f5241402125b37eda7a5bb03fbd247/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1386a15529f5241402125b37eda7a5bb03fbd247/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=1386a15529f5241402125b37eda7a5bb03fbd247", "patch": "@@ -25,7 +25,7 @@ use crate::backtrace::Backtrace;\n use crate::borrow::Cow;\n use crate::cell;\n use crate::char;\n-use crate::fmt::{self, Debug, Display};\n+use crate::fmt::{self, Debug, Display, Write};\n use crate::mem::transmute;\n use crate::num;\n use crate::str;\n@@ -63,7 +63,7 @@ pub trait Error: Debug + Display {\n     ///\n     /// #[derive(Debug)]\n     /// struct SuperError {\n-    ///     side: SuperErrorSideKick,\n+    ///     source: SuperErrorSideKick,\n     /// }\n     ///\n     /// impl fmt::Display for SuperError {\n@@ -74,7 +74,7 @@ pub trait Error: Debug + Display {\n     ///\n     /// impl Error for SuperError {\n     ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n-    ///         Some(&self.side)\n+    ///         Some(&self.source)\n     ///     }\n     /// }\n     ///\n@@ -90,7 +90,7 @@ pub trait Error: Debug + Display {\n     /// impl Error for SuperErrorSideKick {}\n     ///\n     /// fn get_super_error() -> Result<(), SuperError> {\n-    ///     Err(SuperError { side: SuperErrorSideKick })\n+    ///     Err(SuperError { source: SuperErrorSideKick })\n     /// }\n     ///\n     /// fn main() {\n@@ -836,10 +836,6 @@ impl dyn Error + Send + Sync {\n ///\n /// impl<'a> Error for SuperError<'a> {}\n ///\n-/// // Note that the error doesn't need to be `Send` or `Sync`.\n-/// impl<'a> !Send for SuperError<'a> {}\n-/// impl<'a> !Sync for SuperError<'a> {}\n-///\n /// fn main() {\n ///     let msg = String::from(\"Huzzah!\");\n ///     let error = SuperError { side: &msg };\n@@ -883,6 +879,19 @@ where\n         self\n     }\n \n+    fn backtrace(&self) -> Option<&Backtrace> {\n+        // have to grab the backtrace on the first error directly since that error may not be\n+        // 'static\n+        let backtrace = self.error.backtrace();\n+        let backtrace = backtrace.or_else(|| {\n+            self.error\n+                .source()\n+                .map(|source| source.chain().find_map(|source| source.backtrace()))\n+                .flatten()\n+        });\n+        backtrace\n+    }\n+\n     /// Format the report as a single line.\n     #[unstable(feature = \"error_reporter\", issue = \"90172\")]\n     fn fmt_singleline(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n@@ -911,17 +920,17 @@ where\n \n             for (ind, error) in cause.chain().enumerate() {\n                 writeln!(f)?;\n-\n-                if multiple {\n-                    write!(f, \"{: >4}: {}\", ind, Indented { source: error })?;\n-                } else {\n-                    write!(f, \"    {}\", error)?;\n-                }\n+                let mut indented = Indented {\n+                    inner: f,\n+                    number: if multiple { Some(ind) } else { None },\n+                    started: false,\n+                };\n+                write!(indented, \"{}\", error)?;\n             }\n         }\n \n         if self.show_backtrace {\n-            let backtrace = error.backtrace();\n+            let backtrace = self.backtrace();\n \n             if let Some(backtrace) = backtrace {\n                 let backtrace = backtrace.to_string();\n@@ -968,23 +977,34 @@ where\n }\n \n /// Wrapper type for indenting the inner source.\n-struct Indented<D> {\n-    source: D,\n+struct Indented<'a, D> {\n+    inner: &'a mut D,\n+    number: Option<usize>,\n+    started: bool,\n }\n \n-impl<D> fmt::Display for Indented<D>\n+impl<T> Write for Indented<'_, T>\n where\n-    D: fmt::Display,\n+    T: Write,\n {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let source = self.source.to_string();\n-\n-        for (ind, line) in source.trim().split('\\n').filter(|l| !l.is_empty()).enumerate() {\n-            if ind > 0 {\n-                write!(f, \"\\n      {}\", line)?;\n-            } else {\n-                write!(f, \"{}\", line)?;\n+    fn write_str(&mut self, s: &str) -> fmt::Result {\n+        for (i, line) in s.split('\\n').enumerate() {\n+            if !self.started {\n+                self.started = true;\n+                match self.number {\n+                    Some(number) => write!(self.inner, \"{: >5}: \", number)?,\n+                    None => self.inner.write_str(\"    \")?,\n+                }\n+            } else if i > 0 {\n+                self.inner.write_char('\\n')?;\n+                if self.number.is_some() {\n+                    self.inner.write_str(\"       \")?;\n+                } else {\n+                    self.inner.write_str(\"    \")?;\n+                }\n             }\n+\n+            self.inner.write_str(line)?;\n         }\n \n         Ok(())"}, {"sha": "82ef39ae90fb61919365cfc7720b5c63f7581574", "filename": "library/std/src/error/tests.rs", "status": "modified", "additions": 124, "deletions": 54, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/1386a15529f5241402125b37eda7a5bb03fbd247/library%2Fstd%2Fsrc%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1386a15529f5241402125b37eda7a5bb03fbd247/library%2Fstd%2Fsrc%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror%2Ftests.rs?ref=1386a15529f5241402125b37eda7a5bb03fbd247", "patch": "@@ -36,13 +36,12 @@ fn downcasting() {\n     }\n }\n \n-use crate::backtrace;\n-use crate::env;\n+use crate::backtrace::Backtrace;\n use crate::error::Report;\n \n #[derive(Debug)]\n struct SuperError {\n-    side: SuperErrorSideKick,\n+    source: SuperErrorSideKick,\n }\n \n impl fmt::Display for SuperError {\n@@ -53,7 +52,7 @@ impl fmt::Display for SuperError {\n \n impl Error for SuperError {\n     fn source(&self) -> Option<&(dyn Error + 'static)> {\n-        Some(&self.side)\n+        Some(&self.source)\n     }\n }\n \n@@ -70,7 +69,7 @@ impl Error for SuperErrorSideKick {}\n \n #[test]\n fn single_line_formatting() {\n-    let error = SuperError { side: SuperErrorSideKick };\n+    let error = SuperError { source: SuperErrorSideKick };\n     let report = Report::new(&error);\n     let actual = report.to_string();\n     let expected = String::from(\"SuperError is here!: SuperErrorSideKick is here!\");\n@@ -80,7 +79,7 @@ fn single_line_formatting() {\n \n #[test]\n fn multi_line_formatting() {\n-    let error = SuperError { side: SuperErrorSideKick };\n+    let error = SuperError { source: SuperErrorSideKick };\n     let report = Report::new(&error).pretty(true);\n     let actual = report.to_string();\n     let expected =\n@@ -108,50 +107,57 @@ fn error_with_no_sources_formats_multi_line_correctly() {\n }\n \n #[test]\n-fn error_with_backtrace_outputs_correctly() {\n-    use backtrace::Backtrace;\n+fn error_with_backtrace_outputs_correctly_with_one_source() {\n+    let trace = Backtrace::force_capture();\n+    let expected = format!(\"The source of the error\n \n-    env::remove_var(\"RUST_BACKTRACE\");\n+Caused by:\n+    Error with backtrace\n \n-    #[derive(Debug)]\n-    struct ErrorWithBacktrace<'a> {\n-        msg: &'a str,\n-        trace: Backtrace,\n-    }\n+Stack backtrace:\n+{}\", trace);\n+    let error = GenericError::new(\"Error with backtrace\");\n+    let mut error = GenericError::new_with_source(\"The source of the error\", error);\n+    error.backtrace = Some(trace);\n+    let report = Report::new(error).pretty(true).show_backtrace(true);\n \n-    impl<'a> fmt::Display for ErrorWithBacktrace<'a> {\n-        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            write!(f, \"Error with backtrace: {}\", self.msg)\n-        }\n-    }\n \n-    impl<'a> Error for ErrorWithBacktrace<'a> {\n-        fn backtrace(&self) -> Option<&Backtrace> {\n-            Some(&self.trace)\n-        }\n-    }\n+    println!(\"Error: {}\", report);\n+    assert_eq!(expected.trim_end(), report.to_string());\n+}\n+\n+#[test]\n+fn error_with_backtrace_outputs_correctly_with_two_sources() {\n+    let trace = Backtrace::force_capture();\n+    let expected = format!(\"Error with two sources\n \n-    let msg = String::from(\"The source of the error\");\n-    let report = Report::new(ErrorWithBacktrace { msg: &msg, trace: Backtrace::capture() })\n-        .pretty(true)\n-        .show_backtrace(true);\n+Caused by:\n+    0: The source of the error\n+    1: Error with backtrace\n \n-    let expected = String::from(\n-        \"Error with backtrace: The source of the error\\n\\nStack backtrace:\\ndisabled backtrace\",\n-    );\n+Stack backtrace:\n+{}\", trace);\n+    let mut error = GenericError::new(\"Error with backtrace\");\n+    error.backtrace = Some(trace);\n+    let error = GenericError::new_with_source(\"The source of the error\", error);\n+    let error = GenericError::new_with_source(\"Error with two sources\", error);\n+    let report = Report::new(error).pretty(true).show_backtrace(true);\n \n-    assert_eq!(expected, report.to_string());\n+\n+    println!(\"Error: {}\", report);\n+    assert_eq!(expected.trim_end(), report.to_string());\n }\n \n #[derive(Debug)]\n struct GenericError<D> {\n     message: D,\n+    backtrace: Option<Backtrace>,\n     source: Option<Box<dyn Error + 'static>>,\n }\n \n impl<D> GenericError<D> {\n     fn new(message: D) -> GenericError<D> {\n-        Self { message, source: None }\n+        Self { message, backtrace: None, source: None }\n     }\n \n     fn new_with_source<E>(message: D, source: E) -> GenericError<D>\n@@ -160,7 +166,7 @@ impl<D> GenericError<D> {\n     {\n         let source: Box<dyn Error + 'static> = Box::new(source);\n         let source = Some(source);\n-        GenericError { message, source }\n+        GenericError { message, backtrace: None, source }\n     }\n }\n \n@@ -180,6 +186,10 @@ where\n     fn source(&self) -> Option<&(dyn Error + 'static)> {\n         self.source.as_deref()\n     }\n+\n+    fn backtrace(&self) -> Option<&Backtrace> {\n+        self.backtrace.as_ref()\n+    }\n }\n \n #[test]\n@@ -254,24 +264,24 @@ line 5\n line 6\n \n Caused by:\n-   0: line 1\n-      line 2\n-      line 3\n-      line 4\n-      line 5\n-      line 6\n-   1: line 1\n-      line 2\n-      line 3\n-      line 4\n-      line 5\n-      line 6\n-   2: line 1\n-      line 2\n-      line 3\n-      line 4\n-      line 5\n-      line 6\"#;\n+    0: line 1\n+       line 2\n+       line 3\n+       line 4\n+       line 5\n+       line 6\n+    1: line 1\n+       line 2\n+       line 3\n+       line 4\n+       line 5\n+       line 6\n+    2: line 1\n+       line 2\n+       line 3\n+       line 4\n+       line 5\n+       line 6\"#;\n \n     let actual = report.to_string();\n     assert_eq!(expected, actual);\n@@ -297,8 +307,12 @@ The message\n \n \n Caused by:\n-   0: The message\n-   1: The message\"#;\n+    0: \n+       The message\n+       \n+    1: \n+       The message\n+       \"#;\n \n     let actual = report.to_string();\n     assert_eq!(expected, actual);\n@@ -326,3 +340,59 @@ Caused by:\n     let actual = report.to_string();\n     assert_eq!(expected, actual);\n }\n+\n+#[test]\n+fn empty_lines_mid_message() {\n+    #[derive(Debug)]\n+    struct MyMessage;\n+\n+    impl fmt::Display for MyMessage {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+            f.write_str(\"line 1\\n\\nline 2\")\n+        }\n+    }\n+\n+    let error = GenericError::new(MyMessage);\n+    let error = GenericError::new_with_source(MyMessage, error);\n+    let error = GenericError::new_with_source(MyMessage, error);\n+    let report = Report::new(error).pretty(true);\n+    let expected = r#\"line 1\n+\n+line 2\n+\n+Caused by:\n+    0: line 1\n+       \n+       line 2\n+    1: line 1\n+       \n+       line 2\"#;\n+\n+    let actual = report.to_string();\n+    assert_eq!(expected, actual);\n+}\n+\n+#[test]\n+fn only_one_source() {\n+    #[derive(Debug)]\n+    struct MyMessage;\n+\n+    impl fmt::Display for MyMessage {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+            f.write_str(\"line 1\\nline 2\")\n+        }\n+    }\n+\n+    let error = GenericError::new(MyMessage);\n+    let error = GenericError::new_with_source(MyMessage, error);\n+    let report = Report::new(error).pretty(true);\n+    let expected = r#\"line 1\n+line 2\n+\n+Caused by:\n+    line 1\n+    line 2\"#;\n+\n+    let actual = report.to_string();\n+    assert_eq!(expected, actual);\n+}"}]}