{"sha": "a421cbbead5a9817fdca94a62a119e32684ae068", "node_id": "C_kwDOAAsO6NoAKGE0MjFjYmJlYWQ1YTk4MTdmZGNhOTRhNjJhMTE5ZTMyNjg0YWUwNjg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-27T23:34:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-31T12:57:45Z"}, "message": "interpret: make isize::MAX the limit for dynamic value sizes", "tree": {"sha": "9a5b099379e1bda795ea2712f75268c16505c35e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a5b099379e1bda795ea2712f75268c16505c35e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a421cbbead5a9817fdca94a62a119e32684ae068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a421cbbead5a9817fdca94a62a119e32684ae068", "html_url": "https://github.com/rust-lang/rust/commit/a421cbbead5a9817fdca94a62a119e32684ae068", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a421cbbead5a9817fdca94a62a119e32684ae068/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df20355fa9fa5e9fb89be4e4bfee8a643bb7a23e", "url": "https://api.github.com/repos/rust-lang/rust/commits/df20355fa9fa5e9fb89be4e4bfee8a643bb7a23e", "html_url": "https://github.com/rust-lang/rust/commit/df20355fa9fa5e9fb89be4e4bfee8a643bb7a23e"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "a81f8b16230a4683f216b6a5b99c24ba104b7c4a", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a421cbbead5a9817fdca94a62a119e32684ae068/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a421cbbead5a9817fdca94a62a119e32684ae068/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=a421cbbead5a9817fdca94a62a119e32684ae068", "patch": "@@ -23,8 +23,8 @@ use rustc_target::abi::{call::FnAbi, Align, HasDataLayout, Size, TargetDataLayou\n \n use super::{\n     AllocCheck, AllocId, GlobalId, Immediate, InterpErrorInfo, InterpResult, MPlaceTy, Machine,\n-    MemPlace, MemPlaceMeta, Memory, MemoryKind, Operand, Place, PlaceTy, Pointer, Provenance,\n-    Scalar, ScalarMaybeUninit, StackPopJump,\n+    MemPlace, MemPlaceMeta, Memory, MemoryKind, Operand, Place, PlaceTy, Pointer,\n+    PointerArithmetic, Provenance, Scalar, ScalarMaybeUninit, StackPopJump,\n };\n use crate::transform::validate::equal_up_to_regions;\n \n@@ -678,7 +678,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let size = size.align_to(align);\n \n                 // Check if this brought us over the size limit.\n-                if size.bytes() >= self.tcx.data_layout.obj_size_bound() {\n+                if size > self.max_size_of_val() {\n                     throw_ub!(InvalidMeta(\"total size is bigger than largest supported object\"));\n                 }\n                 Ok(Some((size, align)))\n@@ -694,9 +694,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let elem = layout.field(self, 0);\n \n                 // Make sure the slice is not too big.\n-                let size = elem.size.checked_mul(len, self).ok_or_else(|| {\n-                    err_ub!(InvalidMeta(\"slice is bigger than largest supported object\"))\n-                })?;\n+                let size = elem.size * len;\n+                if size > self.max_size_of_val() {\n+                    throw_ub!(InvalidMeta(\"slice is bigger than largest supported object\"));\n+                }\n                 Ok(Some((size, elem.align.abi)))\n             }\n "}, {"sha": "fc60a40e2ada6253881d91284c8fea91b833ae95", "filename": "compiler/rustc_const_eval/src/interpret/traits.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a421cbbead5a9817fdca94a62a119e32684ae068/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a421cbbead5a9817fdca94a62a119e32684ae068/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs?ref=a421cbbead5a9817fdca94a62a119e32684ae068", "patch": "@@ -110,16 +110,17 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             .read_ptr_sized(pointer_size * u64::try_from(COMMON_VTABLE_ENTRIES_SIZE).unwrap())?\n             .check_init()?;\n         let size = size.to_machine_usize(self)?;\n+        let size = Size::from_bytes(size);\n         let align = vtable\n             .read_ptr_sized(pointer_size * u64::try_from(COMMON_VTABLE_ENTRIES_ALIGN).unwrap())?\n             .check_init()?;\n         let align = align.to_machine_usize(self)?;\n         let align = Align::from_bytes(align).map_err(|e| err_ub!(InvalidVtableAlignment(e)))?;\n \n-        if size >= self.tcx.data_layout.obj_size_bound() {\n+        if size > self.max_size_of_val() {\n             throw_ub!(InvalidVtableSize);\n         }\n-        Ok((Size::from_bytes(size), align))\n+        Ok((size, align))\n     }\n \n     pub fn read_new_vtable_after_trait_upcasting_from_vtable("}, {"sha": "813c0912f539679db80f57d1ec455580c0ccb1de", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a421cbbead5a9817fdca94a62a119e32684ae068/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a421cbbead5a9817fdca94a62a119e32684ae068/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=a421cbbead5a9817fdca94a62a119e32684ae068", "patch": "@@ -18,6 +18,11 @@ pub trait PointerArithmetic: HasDataLayout {\n         self.data_layout().pointer_size\n     }\n \n+    #[inline(always)]\n+    fn max_size_of_val(&self) -> Size {\n+        Size::from_bytes(self.machine_isize_max())\n+    }\n+\n     #[inline]\n     fn machine_usize_max(&self) -> u64 {\n         self.pointer_size().unsigned_int_max().try_into().unwrap()"}]}