{"sha": "949f0d9c72e901a001acd9c82bca6339be3b6b0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0OWYwZDljNzJlOTAxYTAwMWFjZDljODJiY2E2MzM5YmUzYjZiMGU=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2018-06-29T14:55:26Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2018-06-29T14:55:31Z"}, "message": "Fix badly mangled lint message for neg-cmp-op-on-partial-ord", "tree": {"sha": "56745ab287079d2c6329cd9df2512a4a997d8aa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56745ab287079d2c6329cd9df2512a4a997d8aa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/949f0d9c72e901a001acd9c82bca6339be3b6b0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/949f0d9c72e901a001acd9c82bca6339be3b6b0e", "html_url": "https://github.com/rust-lang/rust/commit/949f0d9c72e901a001acd9c82bca6339be3b6b0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/949f0d9c72e901a001acd9c82bca6339be3b6b0e/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4b6e6558e3ccd5ef11758297dc064acceb15ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4b6e6558e3ccd5ef11758297dc064acceb15ef2", "html_url": "https://github.com/rust-lang/rust/commit/b4b6e6558e3ccd5ef11758297dc064acceb15ef2"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "cae88263111f4a68e15c49711b6749911e648af1", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/949f0d9c72e901a001acd9c82bca6339be3b6b0e/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949f0d9c72e901a001acd9c82bca6339be3b6b0e/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=949f0d9c72e901a001acd9c82bca6339be3b6b0e", "patch": "@@ -4,20 +4,20 @@ use rustc::lint::*;\n use crate::utils::{self, paths, span_lint, in_external_macro};\n \n /// **What it does:**\n-/// Checks for the usage of negated comparision operators on types which only implement\n+/// Checks for the usage of negated comparison operators on types which only implement\n /// `PartialOrd` (e.g. `f64`).\n ///\n /// **Why is this bad?**\n /// These operators make it easy to forget that the underlying types actually allow not only three\n-/// potential Orderings (Less, Equal, Greater) but also a forth one (Uncomparable). Escpeccially if\n-/// the operator based comparision result is negated it is easy to miss that fact.\n+/// potential Orderings (Less, Equal, Greater) but also a forth one (Uncomparable). This is\n+/// especially easy to miss if the operator based comparison result is negated.\n ///\n /// **Known problems:** None.\n ///\n /// **Example:**\n ///\n /// ```rust\n-/// use core::cmp::Ordering;\n+/// use std::cmp::Ordering;\n /// \n /// // Bad\n /// let a = 1.0;\n@@ -37,7 +37,7 @@ use crate::utils::{self, paths, span_lint, in_external_macro};\n declare_clippy_lint! {\n     pub NEG_CMP_OP_ON_PARTIAL_ORD,\n     complexity,\n-    \"The use of negated comparision operators on partially orded types may produce confusing code.\"\n+    \"The use of negated comparison operators on partially ordered types may produce confusing code.\"\n }\n \n pub struct NoNegCompOpForPartialOrd;\n@@ -83,10 +83,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoNegCompOpForPartialOrd {\n                         cx,\n                         NEG_CMP_OP_ON_PARTIAL_ORD,\n                         expr.span,\n-                        \"The use of negated comparision operators on partially orded \\\n+                        \"The use of negated comparison operators on partially ordered \\\n                         types produces code that is hard to read and refactor. Please \\\n-                        consider to use the `partial_cmp` instead, to make it clear \\\n-                        that the two values could be incomparable.\"\n+                        consider using the `partial_cmp` method instead, to make it \\\n+                        clear that the two values could be incomparable.\"\n                     )\n                 }\n             }"}, {"sha": "fc16c12af28ac62beb0485b3e790df07559e4d43", "filename": "tests/ui/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949f0d9c72e901a001acd9c82bca6339be3b6b0e/tests%2Fui%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949f0d9c72e901a001acd9c82bca6339be3b6b0e/tests%2Fui%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.rs?ref=949f0d9c72e901a001acd9c82bca6339be3b6b0e", "patch": "@@ -116,7 +116,7 @@ fn warn_for_built_in_methods_with_negation() {\n }\n \n #[allow(neg_cmp_op_on_partial_ord)]\n-fn dont_warn_for_negated_partial_ord_comparision() {\n+fn dont_warn_for_negated_partial_ord_comparison() {\n     let a: f64 = unimplemented!();\n     let b: f64 = unimplemented!();\n     let _ = !(a < b);"}, {"sha": "e739908bc282f2039fd962e9720dc65771e12d02", "filename": "tests/ui/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949f0d9c72e901a001acd9c82bca6339be3b6b0e/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949f0d9c72e901a001acd9c82bca6339be3b6b0e/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs?ref=949f0d9c72e901a001acd9c82bca6339be3b6b0e", "patch": "@@ -59,9 +59,9 @@ fn main() {\n \n     // Issue 2856: False positive on assert!()\n     //\n-    // The macro always negates the result of the given comparision in its\n+    // The macro always negates the result of the given comparison in its\n     // internal check which automatically triggered the lint. As it's an\n-    // external macro there was no chance to do anything about it which lead\n+    // external macro there was no chance to do anything about it which led\n     // to a whitelisting of all external macros.\n     assert!(a_value < another_value);\n }"}, {"sha": "ccd3056110090db4dcaefd3919e97f86e74ef608", "filename": "tests/ui/neg_cmp_op_on_partial_ord.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/949f0d9c72e901a001acd9c82bca6339be3b6b0e/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/949f0d9c72e901a001acd9c82bca6339be3b6b0e/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr?ref=949f0d9c72e901a001acd9c82bca6339be3b6b0e", "patch": "@@ -1,24 +1,24 @@\n-error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n+error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:17:21\n    |\n 17 |     let _not_less = !(a_value < another_value);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D neg-cmp-op-on-partial-ord` implied by `-D warnings`\n \n-error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n+error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:20:30\n    |\n 20 |     let _not_less_or_equal = !(a_value <= another_value);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n+error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:23:24\n    |\n 23 |     let _not_greater = !(a_value > another_value);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n+error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:26:33\n    |\n 26 |     let _not_greater_or_equal = !(a_value >= another_value);"}]}