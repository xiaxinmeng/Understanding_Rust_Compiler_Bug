{"sha": "052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MmU3MjI3YjZmN2ViOGRjNGY2ODlhN2UxNGQxMTBiOGFmZjg1NTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-19T18:43:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-19T18:43:20Z"}, "message": "Merge #6946\n\n6946: Better fuzzy heuristics r=matklad a=SomeoneToIgnore\n\nContinuation of the https://github.com/rust-analyzer/rust-analyzer/pull/6922, mainly created for a test.\r\n\r\nTurns out our current completions tests were sorting the completions by label, I had to remove that to test the order properly and update this order in a bunch of tests (ergo the changes)\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "7039ea9626325051e53f38fe97b98ec4560accc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7039ea9626325051e53f38fe97b98ec4560accc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf3knICRBK7hj4Ov3rIwAAdHIIAI+4HDCZeZiX9QnCSxLSZnVc\nF/tqI9Qzq2z7kR8fSNEhRvsdwfUzO+1GjEHatCiwJlgbiDjFPi0qewnE9QTxgLju\nR/eEsXAkY7QszzyRGMcG7vj7NCHy/lbyD9CAdAmmlgNNOtyylbIMH4zRJnObn63y\nvms1kcWLK+Tm2Ni639uDGlP+nOXnZUG3O+HYztOveFjDJzFK1Mu3Xa/L0cVQLZME\naKQ3lvhHVdVLqFvKfj9JUBkHAtSmig3Wtp+jAycMu/js5bx1xfQcOz2IhxmR8v5I\nitc5mHDxr3DaTA+SMmmEIlyQjgyyRvCoah2Q/ct0wz4F9OgdK452qqtV188WCbY=\n=AEvh\n-----END PGP SIGNATURE-----\n", "payload": "tree 7039ea9626325051e53f38fe97b98ec4560accc5\nparent 8b73135b11ba241aa92ca4242166f563b42bf05d\nparent b45ec84739eced0d93d9ccdaa06b546a5a567dea\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608403400 +0000\ncommitter GitHub <noreply@github.com> 1608403400 +0000\n\nMerge #6946\n\n6946: Better fuzzy heuristics r=matklad a=SomeoneToIgnore\n\nContinuation of the https://github.com/rust-analyzer/rust-analyzer/pull/6922, mainly created for a test.\r\n\r\nTurns out our current completions tests were sorting the completions by label, I had to remove that to test the order properly and update this order in a bunch of tests (ergo the changes)\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "html_url": "https://github.com/rust-lang/rust/commit/052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b73135b11ba241aa92ca4242166f563b42bf05d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b73135b11ba241aa92ca4242166f563b42bf05d", "html_url": "https://github.com/rust-lang/rust/commit/8b73135b11ba241aa92ca4242166f563b42bf05d"}, {"sha": "b45ec84739eced0d93d9ccdaa06b546a5a567dea", "url": "https://api.github.com/repos/rust-lang/rust/commits/b45ec84739eced0d93d9ccdaa06b546a5a567dea", "html_url": "https://github.com/rust-lang/rust/commit/b45ec84739eced0d93d9ccdaa06b546a5a567dea"}], "stats": {"total": 479, "additions": 263, "deletions": 216}, "files": [{"sha": "19ce2482fd4babf364e2dcdd42754a7e445a0b76", "filename": "crates/completion/src/completions/attribute.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "patch": "@@ -428,8 +428,8 @@ struct Test {}\n                 at Hash\n                 at PartialEq\n                 at PartialEq, Eq\n-                at PartialEq, Eq, PartialOrd, Ord\n                 at PartialEq, PartialOrd\n+                at PartialEq, Eq, PartialOrd, Ord\n             \"#]],\n         );\n     }\n@@ -457,10 +457,10 @@ struct Test {}\n                 at Clone, Copy\n                 at Debug\n                 at Default\n-                at Eq\n-                at Eq, PartialOrd, Ord\n                 at Hash\n+                at Eq\n                 at PartialOrd\n+                at Eq, PartialOrd, Ord\n             \"#]],\n         )\n     }\n@@ -472,14 +472,14 @@ struct Test {}\n             expect![[r#\"\n                 at allow(\u2026)\n                 at automatically_derived\n-                at cfg(\u2026)\n                 at cfg_attr(\u2026)\n+                at cfg(\u2026)\n                 at cold\n                 at deny(\u2026)\n                 at deprecated = \"\u2026\"\n                 at derive(\u2026)\n-                at doc = \"\u2026\"\n                 at export_name = \"\u2026\"\n+                at doc = \"\u2026\"\n                 at forbid(\u2026)\n                 at ignore = \"\u2026\"\n                 at inline(\u2026)\n@@ -518,15 +518,15 @@ struct Test {}\n             expect![[r#\"\n                 at allow(\u2026)\n                 at automatically_derived\n-                at cfg(\u2026)\n                 at cfg_attr(\u2026)\n+                at cfg(\u2026)\n                 at cold\n                 at crate_name = \"\"\n                 at deny(\u2026)\n                 at deprecated = \"\u2026\"\n                 at derive(\u2026)\n-                at doc = \"\u2026\"\n                 at export_name = \"\u2026\"\n+                at doc = \"\u2026\"\n                 at feature(\u2026)\n                 at forbid(\u2026)\n                 at global_allocator\n@@ -538,8 +538,8 @@ struct Test {}\n                 at macro_export\n                 at macro_use\n                 at must_use = \"\u2026\"\n-                at no_implicit_prelude\n                 at no_link\n+                at no_implicit_prelude\n                 at no_main\n                 at no_mangle\n                 at no_std"}, {"sha": "551ef17716d1fc4799c8ca4fdc03c302c0eca03d", "filename": "crates/completion/src/completions/dot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fdot.rs?ref=052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "patch": "@@ -82,8 +82,8 @@ impl S {\n fn foo(s: S) { s.<|> }\n \"#,\n             expect![[r#\"\n-                me bar() fn bar(&self)\n                 fd foo   u32\n+                me bar() fn bar(&self)\n             \"#]],\n         );\n     }\n@@ -98,8 +98,8 @@ impl S {\n }\n \"#,\n             expect![[r#\"\n-                me foo()     fn foo(self)\n                 fd the_field (u32,)\n+                me foo()     fn foo(self)\n             \"#]],\n         )\n     }\n@@ -114,8 +114,8 @@ impl A {\n }\n \"#,\n             expect![[r#\"\n-                me foo()     fn foo(&self)\n                 fd the_field (u32, i32)\n+                me foo()     fn foo(&self)\n             \"#]],\n         )\n     }\n@@ -147,8 +147,8 @@ mod inner {\n fn foo(a: inner::A) { a.<|> }\n \"#,\n             expect![[r#\"\n-                fd crate_field u32\n                 fd pub_field   u32\n+                fd crate_field u32\n                 fd super_field u32\n             \"#]],\n         );"}, {"sha": "1859dec70861f19bca786ced4cdf6c76b70b6596", "filename": "crates/completion/src/completions/keyword.rs", "status": "modified", "additions": 71, "deletions": 71, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "patch": "@@ -223,21 +223,21 @@ mod tests {\n         check(\n             r\"m<|>\",\n             expect![[r#\"\n-                kw const\n-                kw enum\n-                kw extern\n                 kw fn\n+                kw use\n                 kw impl\n-                kw mod\n-                kw pub\n-                kw pub(crate)\n-                kw static\n-                kw struct\n                 kw trait\n-                kw type\n+                kw enum\n+                kw struct\n                 kw union\n+                kw mod\n+                kw const\n+                kw type\n+                kw static\n+                kw extern\n                 kw unsafe\n-                kw use\n+                kw pub(crate)\n+                kw pub\n             \"#]],\n         );\n     }\n@@ -247,23 +247,23 @@ mod tests {\n         check(\n             r\"fn quux() { <|> }\",\n             expect![[r#\"\n-                kw const\n-                kw extern\n                 kw fn\n+                kw use\n+                kw impl\n+                kw trait\n+                kw match\n+                kw while\n+                kw loop\n                 kw if\n                 kw if let\n-                kw impl\n                 kw let\n-                kw loop\n-                kw match\n                 kw mod\n-                kw return\n-                kw static\n-                kw trait\n+                kw const\n                 kw type\n+                kw static\n+                kw extern\n                 kw unsafe\n-                kw use\n-                kw while\n+                kw return\n             \"#]],\n         );\n     }\n@@ -273,23 +273,23 @@ mod tests {\n         check(\n             r\"fn quux() { if true { <|> } }\",\n             expect![[r#\"\n-                kw const\n-                kw extern\n                 kw fn\n+                kw use\n+                kw impl\n+                kw trait\n+                kw match\n+                kw while\n+                kw loop\n                 kw if\n                 kw if let\n-                kw impl\n                 kw let\n-                kw loop\n-                kw match\n                 kw mod\n-                kw return\n-                kw static\n-                kw trait\n+                kw const\n                 kw type\n+                kw static\n+                kw extern\n                 kw unsafe\n-                kw use\n-                kw while\n+                kw return\n             \"#]],\n         );\n     }\n@@ -299,25 +299,25 @@ mod tests {\n         check(\n             r#\"fn quux() { if true { () } <|> }\"#,\n             expect![[r#\"\n-                kw const\n-                kw else\n-                kw else if\n-                kw extern\n                 kw fn\n+                kw use\n+                kw impl\n+                kw trait\n+                kw match\n+                kw while\n+                kw loop\n                 kw if\n                 kw if let\n-                kw impl\n                 kw let\n-                kw loop\n-                kw match\n+                kw else\n+                kw else if\n                 kw mod\n-                kw return\n-                kw static\n-                kw trait\n+                kw const\n                 kw type\n+                kw static\n+                kw extern\n                 kw unsafe\n-                kw use\n-                kw while\n+                kw return\n             \"#]],\n         );\n         check_edit(\n@@ -336,13 +336,13 @@ fn quux() -> i32 {\n }\n \"#,\n             expect![[r#\"\n+                kw match\n+                kw while\n+                kw loop\n                 kw if\n                 kw if let\n-                kw loop\n-                kw match\n-                kw return\n                 kw unsafe\n-                kw while\n+                kw return\n             \"#]],\n         );\n     }\n@@ -352,8 +352,8 @@ fn quux() -> i32 {\n         check(\n             r\"trait My { <|> }\",\n             expect![[r#\"\n-                kw const\n                 kw fn\n+                kw const\n                 kw type\n                 kw unsafe\n             \"#]],\n@@ -365,12 +365,12 @@ fn quux() -> i32 {\n         check(\n             r\"impl My { <|> }\",\n             expect![[r#\"\n-                kw const\n                 kw fn\n-                kw pub\n-                kw pub(crate)\n+                kw const\n                 kw type\n                 kw unsafe\n+                kw pub(crate)\n+                kw pub\n             \"#]],\n         );\n     }\n@@ -380,25 +380,25 @@ fn quux() -> i32 {\n         check(\n             r\"fn my() { loop { <|> } }\",\n             expect![[r#\"\n-                kw break\n-                kw const\n-                kw continue\n-                kw extern\n                 kw fn\n+                kw use\n+                kw impl\n+                kw trait\n+                kw match\n+                kw while\n+                kw loop\n                 kw if\n                 kw if let\n-                kw impl\n                 kw let\n-                kw loop\n-                kw match\n                 kw mod\n-                kw return\n-                kw static\n-                kw trait\n+                kw const\n                 kw type\n+                kw static\n+                kw extern\n                 kw unsafe\n-                kw use\n-                kw while\n+                kw continue\n+                kw break\n+                kw return\n             \"#]],\n         );\n     }\n@@ -409,8 +409,8 @@ fn quux() -> i32 {\n             r\"unsafe <|>\",\n             expect![[r#\"\n                 kw fn\n-                kw impl\n                 kw trait\n+                kw impl\n             \"#]],\n         );\n     }\n@@ -421,8 +421,8 @@ fn quux() -> i32 {\n             r\"fn my_fn() { unsafe <|> }\",\n             expect![[r#\"\n                 kw fn\n-                kw impl\n                 kw trait\n+                kw impl\n             \"#]],\n         );\n     }\n@@ -542,12 +542,12 @@ pub mod future {\n         check(\n             r#\"fn main() { let _ = <|> }\"#,\n             expect![[r#\"\n+                kw match\n+                kw while\n+                kw loop\n                 kw if\n                 kw if let\n-                kw loop\n-                kw match\n                 kw return\n-                kw while\n             \"#]],\n         )\n     }\n@@ -562,8 +562,8 @@ struct Foo {\n }\n \"#,\n             expect![[r#\"\n-                kw pub\n                 kw pub(crate)\n+                kw pub\n             \"#]],\n         )\n     }\n@@ -600,12 +600,12 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n+                kw match\n+                kw while\n+                kw loop\n                 kw if\n                 kw if let\n-                kw loop\n-                kw match\n                 kw return\n-                kw while\n             \"#]],\n         );\n     }"}, {"sha": "f77864b7752fc922adc684b94586733d32f78872", "filename": "crates/completion/src/completions/mod_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "patch": "@@ -170,8 +170,8 @@ mod tests {\n             fn ignored_bar() {}\n         \"#,\n             expect![[r#\"\n-                md bar;\n                 md foo;\n+                md bar;\n             \"#]],\n         );\n     }\n@@ -207,8 +207,8 @@ mod tests {\n             fn ignored_bar() {}\n         \"#,\n             expect![[r#\"\n-                md bar;\n                 md foo;\n+                md bar;\n             \"#]],\n         );\n     }"}, {"sha": "0c98e4412e7b0cb786077a85607cda5198e86271", "filename": "crates/completion/src/completions/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "patch": "@@ -66,10 +66,10 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                st Bar\n                 en E\n-                ev X   ()\n                 ct Z\n+                st Bar\n+                ev X   ()\n                 md m\n             \"#]],\n         );"}, {"sha": "d6db82a93bbc49fa5529dd7be59dc32ec87f0850", "filename": "crates/completion/src/completions/postfix.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "patch": "@@ -315,20 +315,20 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                sn box   Box::new(expr)\n-                sn call  function(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n                 sn if    if expr {}\n-                sn let   let\n-                sn letm  let mut\n-                sn match match expr {}\n+                sn while while expr {}\n                 sn not   !expr\n-                sn ok    Ok(expr)\n                 sn ref   &expr\n                 sn refm  &mut expr\n+                sn match match expr {}\n+                sn box   Box::new(expr)\n+                sn ok    Ok(expr)\n                 sn some  Some(expr)\n-                sn while while expr {}\n+                sn dbg   dbg!(expr)\n+                sn dbgr  dbg!(&expr)\n+                sn call  function(expr)\n+                sn let   let\n+                sn letm  let mut\n             \"#]],\n         );\n     }\n@@ -347,18 +347,18 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                sn box   Box::new(expr)\n-                sn call  function(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n                 sn if    if expr {}\n-                sn match match expr {}\n+                sn while while expr {}\n                 sn not   !expr\n-                sn ok    Ok(expr)\n                 sn ref   &expr\n                 sn refm  &mut expr\n+                sn match match expr {}\n+                sn box   Box::new(expr)\n+                sn ok    Ok(expr)\n                 sn some  Some(expr)\n-                sn while while expr {}\n+                sn dbg   dbg!(expr)\n+                sn dbgr  dbg!(&expr)\n+                sn call  function(expr)\n             \"#]],\n         );\n     }\n@@ -373,17 +373,17 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n+                sn ref   &expr\n+                sn refm  &mut expr\n+                sn match match expr {}\n                 sn box   Box::new(expr)\n-                sn call  function(expr)\n+                sn ok    Ok(expr)\n+                sn some  Some(expr)\n                 sn dbg   dbg!(expr)\n                 sn dbgr  dbg!(&expr)\n+                sn call  function(expr)\n                 sn let   let\n                 sn letm  let mut\n-                sn match match expr {}\n-                sn ok    Ok(expr)\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn some  Some(expr)\n             \"#]],\n         )\n     }\n@@ -398,20 +398,20 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                sn box   Box::new(expr)\n-                sn call  function(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n                 sn if    if expr {}\n-                sn let   let\n-                sn letm  let mut\n-                sn match match expr {}\n+                sn while while expr {}\n                 sn not   !expr\n-                sn ok    Ok(expr)\n                 sn ref   &expr\n                 sn refm  &mut expr\n+                sn match match expr {}\n+                sn box   Box::new(expr)\n+                sn ok    Ok(expr)\n                 sn some  Some(expr)\n-                sn while while expr {}\n+                sn dbg   dbg!(expr)\n+                sn dbgr  dbg!(&expr)\n+                sn call  function(expr)\n+                sn let   let\n+                sn letm  let mut\n             \"#]],\n         );\n     }"}, {"sha": "1300f00b2f22c59d63ccf605a7d7cfc7a2b81ae0", "filename": "crates/completion/src/completions/qualified_path.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "patch": "@@ -199,22 +199,22 @@ use self::{foo::*, bar<|>};\n         check_builtin(\n             r#\"fn main() { let _: <|> = 92; }\"#,\n             expect![[r#\"\n+                bt u32\n                 bt bool\n-                bt char\n+                bt u8\n+                bt isize\n+                bt u16\n+                bt u64\n+                bt u128\n                 bt f32\n-                bt f64\n                 bt i128\n                 bt i16\n-                bt i32\n+                bt str\n                 bt i64\n+                bt char\n+                bt f64\n+                bt i32\n                 bt i8\n-                bt isize\n-                bt str\n-                bt u128\n-                bt u16\n-                bt u32\n-                bt u64\n-                bt u8\n                 bt usize\n             \"#]],\n         );\n@@ -279,8 +279,8 @@ struct Spam;\n use crate::Sp<|>\n \"#,\n             expect![[r#\"\n-                st Spam\n                 md foo\n+                st Spam\n             \"#]],\n         );\n     }\n@@ -296,8 +296,8 @@ struct Spam;\n use crate::{Sp<|>};\n \"#,\n             expect![[r#\"\n-                st Spam\n                 md foo\n+                st Spam\n             \"#]],\n         );\n     }\n@@ -330,8 +330,8 @@ enum E { Foo, Bar(i32) }\n fn foo() { let _ = E::<|> }\n \"#,\n             expect![[r#\"\n-                ev Bar(\u2026) (i32)\n                 ev Foo    ()\n+                ev Bar(\u2026) (i32)\n             \"#]],\n         );\n     }\n@@ -353,10 +353,10 @@ impl S {\n fn foo() { let _ = S::<|> }\n \"#,\n             expect![[r#\"\n-                ct C    const C: i32 = 42;\n-                ta T    type T = i32;\n                 fn a()  fn a()\n                 me b(\u2026) fn b(&self)\n+                ct C    const C: i32 = 42;\n+                ta T    type T = i32;\n             \"#]],\n         );\n     }\n@@ -381,9 +381,9 @@ mod m {\n fn foo() { let _ = S::<|> }\n \"#,\n             expect![[r#\"\n+                fn public_method() pub(crate) fn public_method()\n                 ct PUBLIC_CONST    pub(crate) const PUBLIC_CONST: u32 = 1;\n                 ta PublicType      pub(crate) type PublicType = u32;\n-                fn public_method() pub(crate) fn public_method()\n             \"#]],\n         );\n     }\n@@ -503,14 +503,14 @@ trait Sub: Super {\n fn foo<T: Sub>() { T::<|> }\n \"#,\n             expect![[r#\"\n-                ct C2           const C2: ();\n-                ct CONST        const CONST: u8;\n                 ta SubTy        type SubTy;\n                 ta Ty           type Ty;\n-                fn func()       fn func()\n-                me method(\u2026)    fn method(&self)\n+                ct C2           const C2: ();\n                 fn subfunc()    fn subfunc()\n                 me submethod(\u2026) fn submethod(&self)\n+                ct CONST        const CONST: u8;\n+                fn func()       fn func()\n+                me method(\u2026)    fn method(&self)\n             \"#]],\n         );\n     }\n@@ -543,12 +543,12 @@ impl<T> Sub for Wrap<T> {\n }\n \"#,\n             expect![[r#\"\n-                ct C2           const C2: () = ();\n-                ct CONST        const CONST: u8 = 0;\n                 ta SubTy        type SubTy;\n                 ta Ty           type Ty;\n+                ct CONST        const CONST: u8 = 0;\n                 fn func()       fn func()\n                 me method(\u2026)    fn method(&self)\n+                ct C2           const C2: () = ();\n                 fn subfunc()    fn subfunc()\n                 me submethod(\u2026) fn submethod(&self)\n             \"#]],\n@@ -567,8 +567,8 @@ impl T { fn bar() {} }\n fn main() { T::<|>; }\n \"#,\n             expect![[r#\"\n-                fn bar() fn bar()\n                 fn foo() fn foo()\n+                fn bar() fn bar()\n             \"#]],\n         );\n     }\n@@ -583,9 +583,9 @@ macro_rules! foo { () => {} }\n fn main() { let _ = crate::<|> }\n         \"#,\n             expect![[r##\"\n+                fn main()  fn main()\n                 ma foo!(\u2026) #[macro_export]\n                 macro_rules! foo\n-                fn main()  fn main()\n             \"##]],\n         );\n     }\n@@ -603,8 +603,8 @@ mod a {\n }\n \"#,\n             expect![[r#\"\n-                ct A\n                 md b\n+                ct A\n             \"#]],\n         );\n     }\n@@ -628,8 +628,8 @@ mod p {\n \"#,\n             expect![[r#\"\n                 ct RIGHT_CONST\n-                st RightType\n                 fn right_fn()  fn wrong_fn()\n+                st RightType\n             \"#]],\n         );\n \n@@ -675,8 +675,8 @@ fn main() { m!(self::f<|>); }\n fn foo() {}\n \"#,\n             expect![[r#\"\n-                fn foo()  fn foo()\n                 fn main() fn main()\n+                fn foo()  fn foo()\n             \"#]],\n         );\n     }\n@@ -747,8 +747,8 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                fn foo(\u2026) fn foo(a: i32, b: i32)\n                 fn main() fn main()\n+                fn foo(\u2026) fn foo(a: i32, b: i32)\n             \"#]],\n         );\n     }"}, {"sha": "91bf4a8ad95234acc8b526edf855c259843b015d", "filename": "crates/completion/src/completions/record.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs?ref=052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "patch": "@@ -94,9 +94,9 @@ fn process(f: S) {\n         check_snippet(\n             test_code,\n             expect![[r#\"\n-                fd ..Default::default()\n                 sn pd\n                 sn ppd\n+                fd ..Default::default()\n             \"#]],\n         );\n     }\n@@ -160,8 +160,8 @@ fn process(e: E) {\n }\n \"#,\n             expect![[r#\"\n-                fd bar ()\n                 fd foo u32\n+                fd bar ()\n             \"#]],\n         );\n     }"}, {"sha": "84259013002f4ca642c18c5ec811543cfa03e85a", "filename": "crates/completion/src/completions/snippet.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "patch": "@@ -105,9 +105,9 @@ mod tests {\n }\n \"#,\n             expect![[r#\"\n-                sn macro_rules\n-                sn tfn (Test function)\n                 sn tmod (Test module)\n+                sn tfn (Test function)\n+                sn macro_rules\n             \"#]],\n         )\n     }"}, {"sha": "c4e0d06698f27cc2db416b69a2aa0d1cadc565f8", "filename": "crates/completion/src/completions/trait_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "patch": "@@ -266,10 +266,10 @@ impl Test for T {\n }\n \"#,\n             expect![[\"\n+ta type TestType = \\n\\\n ct const TEST_CONST: u16 = \\n\\\n fn fn test()\n-ta type TestType = \\n\\\n-            \"]],\n+\"]],\n         );\n     }\n "}, {"sha": "099ffb4d48bd0b4bfbc35d86c8f242fc549d6342", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 110, "deletions": 62, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "patch": "@@ -1,7 +1,7 @@\n //! Completion of names from the current scope, e.g. locals and imported items.\n \n use either::Either;\n-use hir::{Adt, ModuleDef, ScopeDef, Type};\n+use hir::{Adt, ModPath, ModuleDef, ScopeDef, Type};\n use ide_db::helpers::insert_use::ImportScope;\n use ide_db::imports_locator;\n use syntax::AstNode;\n@@ -146,13 +146,9 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n     .filter(|(mod_path, _)| mod_path.len() > 1)\n     .collect::<Vec<_>>();\n \n+    let user_input_lowercased = potential_import_name.to_lowercase();\n     all_mod_paths.sort_by_cached_key(|(mod_path, _)| {\n-        if let Some(name) = mod_path.segments.last().map(|name| name.to_string().to_lowercase()) {\n-            if name.contains(&potential_import_name.to_lowercase()) {\n-                return 0;\n-            }\n-        }\n-        1\n+        compute_fuzzy_completion_order_key(mod_path, &user_input_lowercased)\n     });\n \n     acc.add_all(all_mod_paths.into_iter().filter_map(|(import_path, definition)| {\n@@ -165,21 +161,48 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n     Some(())\n }\n \n+fn compute_fuzzy_completion_order_key(\n+    proposed_mod_path: &ModPath,\n+    user_input_lowercased: &str,\n+) -> usize {\n+    mark::hit!(certain_fuzzy_order_test);\n+    let proposed_import_name = match proposed_mod_path.segments.last() {\n+        Some(name) => name.to_string().to_lowercase(),\n+        None => return usize::MAX,\n+    };\n+    match proposed_import_name.match_indices(user_input_lowercased).next() {\n+        Some((first_matching_index, _)) => first_matching_index,\n+        None => usize::MAX,\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n     use test_utils::mark;\n \n     use crate::{\n-        test_utils::{check_edit, check_edit_with_config, completion_list},\n+        test_utils::{check_edit, check_edit_with_config, completion_list_with_config},\n         CompletionConfig, CompletionKind,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n+        check_with_config(CompletionConfig::default(), ra_fixture, expect);\n+    }\n+\n+    fn check_with_config(config: CompletionConfig, ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list_with_config(config, ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual)\n     }\n \n+    fn fuzzy_completion_config() -> CompletionConfig {\n+        let mut completion_config = CompletionConfig::default();\n+        completion_config\n+            .active_resolve_capabilities\n+            .insert(crate::CompletionResolveCapability::AdditionalTextEdits);\n+        completion_config\n+    }\n+\n     #[test]\n     fn self_fulfilling_completion() {\n         mark::check!(self_fulfilling_completion);\n@@ -255,9 +278,9 @@ fn quux(x: i32) {\n }\n \"#,\n             expect![[r#\"\n-                fn quux(\u2026) fn quux(x: i32)\n-                bn x       i32\n                 bn y       i32\n+                bn x       i32\n+                fn quux(\u2026) fn quux(x: i32)\n             \"#]],\n         );\n     }\n@@ -277,8 +300,8 @@ fn quux() {\n }\n \"#,\n             expect![[r#\"\n-                bn a\n                 bn b      i32\n+                bn a\n                 fn quux() fn quux()\n             \"#]],\n         );\n@@ -293,8 +316,8 @@ fn quux() {\n }\n \"#,\n             expect![[r#\"\n-                fn quux() fn quux()\n                 bn x\n+                fn quux() fn quux()\n             \"#]],\n         );\n     }\n@@ -335,9 +358,9 @@ fn main() {\n         check(\n             r#\"struct S<T> { x: <|>}\"#,\n             expect![[r#\"\n-                st S<\u2026>\n                 tp Self\n                 tp T\n+                st S<\u2026>\n             \"#]],\n         );\n     }\n@@ -362,9 +385,9 @@ enum E {}\n fn quux() { <|> }\n \"#,\n             expect![[r#\"\n-                en E\n                 st S\n                 fn quux() fn quux()\n+                en E\n             \"#]],\n         );\n     }\n@@ -416,8 +439,8 @@ mod m {\n }\n \"#,\n             expect![[r#\"\n-                st Bar\n                 fn quux() fn quux()\n+                st Bar\n             \"#]],\n         );\n     }\n@@ -462,8 +485,8 @@ fn foo() {\n         check(\n             r#\"impl S { fn foo(&self) { <|> } }\"#,\n             expect![[r#\"\n-                tp Self\n                 bn self &{unknown}\n+                tp Self\n             \"#]],\n         );\n     }\n@@ -482,9 +505,9 @@ use prelude::*;\n mod prelude { struct Option; }\n \"#,\n             expect![[r#\"\n-                st Option\n                 fn foo()  fn foo()\n                 md std\n+                st Option\n             \"#]],\n         );\n     }\n@@ -509,10 +532,10 @@ use prelude::*;\n mod prelude { struct String; }\n \"#,\n             expect![[r#\"\n-                st String\n-                md core\n                 fn foo()  fn foo()\n                 md std\n+                md core\n+                st String\n             \"#]],\n         );\n     }\n@@ -538,13 +561,13 @@ mod m2 {\n fn main() { let v = <|> }\n \"#,\n             expect![[r##\"\n-                ma bar!(\u2026) macro_rules! bar\n+                md m1\n                 ma baz!(\u2026) #[macro_export]\n                 macro_rules! baz\n-                ma foo!(\u2026) macro_rules! foo\n-                md m1\n-                md m2\n                 fn main()  fn main()\n+                md m2\n+                ma bar!(\u2026) macro_rules! bar\n+                ma foo!(\u2026) macro_rules! foo\n             \"##]],\n         );\n     }\n@@ -557,8 +580,8 @@ macro_rules! foo { () => {} }\n fn foo() { <|> }\n \"#,\n             expect![[r#\"\n-                ma foo!(\u2026) macro_rules! foo\n                 fn foo()   fn foo()\n+                ma foo!(\u2026) macro_rules! foo\n             \"#]],\n         );\n     }\n@@ -571,8 +594,8 @@ macro_rules! foo { () => {} }\n fn main() { let x: <|> }\n \"#,\n             expect![[r#\"\n-                ma foo!(\u2026) macro_rules! foo\n                 fn main()  fn main()\n+                ma foo!(\u2026) macro_rules! foo\n             \"#]],\n         );\n     }\n@@ -585,8 +608,8 @@ macro_rules! foo { () => {} }\n fn main() { <|> }\n \"#,\n             expect![[r#\"\n-                ma foo!(\u2026) macro_rules! foo\n                 fn main()  fn main()\n+                ma foo!(\u2026) macro_rules! foo\n             \"#]],\n         );\n     }\n@@ -618,10 +641,10 @@ fn quux(x: i32) {\n }\n \"#,\n             expect![[r#\"\n-                ma m!(\u2026)   macro_rules! m\n-                fn quux(\u2026) fn quux(x: i32)\n-                bn x       i32\n                 bn y       i32\n+                bn x       i32\n+                fn quux(\u2026) fn quux(x: i32)\n+                ma m!(\u2026)   macro_rules! m\n             \"#]],\n         );\n     }\n@@ -637,10 +660,10 @@ fn quux(x: i32) {\n }\n \",\n             expect![[r#\"\n-                ma m!(\u2026)   macro_rules! m\n-                fn quux(\u2026) fn quux(x: i32)\n-                bn x       i32\n                 bn y       i32\n+                bn x       i32\n+                fn quux(\u2026) fn quux(x: i32)\n+                ma m!(\u2026)   macro_rules! m\n             \"#]],\n         );\n     }\n@@ -656,10 +679,10 @@ fn quux(x: i32) {\n }\n \"#,\n             expect![[r#\"\n-                ma m!(\u2026)   macro_rules! m\n-                fn quux(\u2026) fn quux(x: i32)\n-                bn x       i32\n                 bn y       i32\n+                bn x       i32\n+                fn quux(\u2026) fn quux(x: i32)\n+                ma m!(\u2026)   macro_rules! m\n             \"#]],\n         );\n     }\n@@ -673,8 +696,8 @@ use spam::Quux;\n fn main() { <|> }\n \"#,\n             expect![[r#\"\n-                ?? Quux\n                 fn main() fn main()\n+                ?? Quux\n             \"#]],\n         );\n     }\n@@ -690,10 +713,10 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                en Foo\n                 ev Foo::Bar  ()\n                 ev Foo::Baz  ()\n                 ev Foo::Quux ()\n+                en Foo\n             \"#]],\n         )\n     }\n@@ -710,10 +733,10 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                en Foo\n                 ev Foo::Bar  ()\n                 ev Foo::Baz  ()\n                 ev Foo::Quux ()\n+                en Foo\n             \"#]],\n         )\n     }\n@@ -726,10 +749,10 @@ enum Foo { Bar, Baz, Quux }\n fn main() { let foo: Foo = Q<|> }\n \"#,\n             expect![[r#\"\n-                en Foo\n                 ev Foo::Bar  ()\n                 ev Foo::Baz  ()\n                 ev Foo::Quux ()\n+                en Foo\n                 fn main()    fn main()\n             \"#]],\n         )\n@@ -743,9 +766,9 @@ mod m { pub enum E { V } }\n fn f() -> m::E { V<|> }\n \"#,\n             expect![[r#\"\n-                fn f()     fn f() -> m::E\n-                md m\n                 ev m::E::V ()\n+                md m\n+                fn f()     fn f() -> m::E\n             \"#]],\n         )\n     }\n@@ -772,22 +795,17 @@ struct MyStruct {}\n impl My<|>\n \"#,\n             expect![[r#\"\n-                st MyStruct\n-                tt MyTrait\n                 tp Self\n+                tt MyTrait\n+                st MyStruct\n             \"#]],\n         )\n     }\n \n     #[test]\n     fn function_fuzzy_completion() {\n-        let mut completion_config = CompletionConfig::default();\n-        completion_config\n-            .active_resolve_capabilities\n-            .insert(crate::CompletionResolveCapability::AdditionalTextEdits);\n-\n         check_edit_with_config(\n-            completion_config,\n+            fuzzy_completion_config(),\n             \"stdin\",\n             r#\"\n //- /lib.rs crate:dep\n@@ -812,13 +830,8 @@ fn main() {\n \n     #[test]\n     fn macro_fuzzy_completion() {\n-        let mut completion_config = CompletionConfig::default();\n-        completion_config\n-            .active_resolve_capabilities\n-            .insert(crate::CompletionResolveCapability::AdditionalTextEdits);\n-\n         check_edit_with_config(\n-            completion_config,\n+            fuzzy_completion_config(),\n             \"macro_with_curlies!\",\n             r#\"\n //- /lib.rs crate:dep\n@@ -845,13 +858,8 @@ fn main() {\n \n     #[test]\n     fn struct_fuzzy_completion() {\n-        let mut completion_config = CompletionConfig::default();\n-        completion_config\n-            .active_resolve_capabilities\n-            .insert(crate::CompletionResolveCapability::AdditionalTextEdits);\n-\n         check_edit_with_config(\n-            completion_config,\n+            fuzzy_completion_config(),\n             \"ThirdStruct\",\n             r#\"\n //- /lib.rs crate:dep\n@@ -877,4 +885,44 @@ fn main() {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn fuzzy_completions_come_in_specific_order() {\n+        mark::check!(certain_fuzzy_order_test);\n+        check_with_config(\n+            fuzzy_completion_config(),\n+            r#\"\n+//- /lib.rs crate:dep\n+pub struct FirstStruct;\n+pub mod some_module {\n+    // already imported, omitted\n+    pub struct SecondStruct;\n+    // does not contain all letters from the query, omitted\n+    pub struct UnrelatedOne;\n+    // contains all letters from the query, but not in sequence, displayed last\n+    pub struct ThiiiiiirdStruct;\n+    // contains all letters from the query, but not in the beginning, displayed second\n+    pub struct AfterThirdStruct;\n+    // contains all letters from the query in the begginning, displayed first\n+    pub struct ThirdStruct;\n+}\n+\n+//- /main.rs crate:main deps:dep\n+use dep::{FirstStruct, some_module::SecondStruct};\n+\n+fn main() {\n+    hir<|>\n+}\n+\"#,\n+            expect![[r#\"\n+                fn main()           fn main()\n+                st SecondStruct\n+                st FirstStruct\n+                md dep\n+                st dep::some_module::ThirdStruct\n+                st dep::some_module::AfterThirdStruct\n+                st dep::some_module::ThiiiiiirdStruct\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "eb0c16f52bd22d8e79a5681a40d25dc106e00341", "filename": "crates/completion/src/test_utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052e7227b6f7eb8dc4f689a7e14d110b8aff8555/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs?ref=052e7227b6f7eb8dc4f689a7e14d110b8aff8555", "patch": "@@ -47,9 +47,8 @@ pub(crate) fn completion_list_with_config(\n     code: &str,\n     kind: CompletionKind,\n ) -> String {\n-    let mut kind_completions: Vec<CompletionItem> =\n+    let kind_completions: Vec<CompletionItem> =\n         get_all_items(config, code).into_iter().filter(|c| c.completion_kind == kind).collect();\n-    kind_completions.sort_by_key(|c| c.label().to_owned());\n     let label_width = kind_completions\n         .iter()\n         .map(|it| monospace_width(it.label()))"}]}