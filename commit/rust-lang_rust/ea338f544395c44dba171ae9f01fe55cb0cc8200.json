{"sha": "ea338f544395c44dba171ae9f01fe55cb0cc8200", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMzM4ZjU0NDM5NWM0NGRiYTE3MWFlOWYwMWZlNTVjYjBjYzgyMDA=", "commit": {"author": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2020-12-18T05:17:43Z"}, "committer": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2020-12-18T05:22:58Z"}, "message": "Edit formatting in Rust Prelude docs\n\nUse consistent punctuation and capitalization in the list\nof things re-exported in the prelude.\n\nAlso adds a (possibly missing) word.", "tree": {"sha": "71857fffd2e2e3d0e78d3fe556da3b571242f026", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71857fffd2e2e3d0e78d3fe556da3b571242f026"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea338f544395c44dba171ae9f01fe55cb0cc8200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea338f544395c44dba171ae9f01fe55cb0cc8200", "html_url": "https://github.com/rust-lang/rust/commit/ea338f544395c44dba171ae9f01fe55cb0cc8200", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea338f544395c44dba171ae9f01fe55cb0cc8200/comments", "author": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d23e08448332425a84ae23124bea4dbd685536ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/d23e08448332425a84ae23124bea4dbd685536ce", "html_url": "https://github.com/rust-lang/rust/commit/d23e08448332425a84ae23124bea4dbd685536ce"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "a3776681d03494dc10698756b4ed1a6a276aa642", "filename": "library/std/src/prelude/mod.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ea338f544395c44dba171ae9f01fe55cb0cc8200/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea338f544395c44dba171ae9f01fe55cb0cc8200/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs?ref=ea338f544395c44dba171ae9f01fe55cb0cc8200", "patch": "@@ -26,38 +26,37 @@\n //! # Prelude contents\n //!\n //! The current version of the prelude (version 1) lives in\n-//! [`std::prelude::v1`], and re-exports the following.\n+//! [`std::prelude::v1`], and re-exports the following:\n //!\n-//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`], [`Unpin`]}. The\n-//!   marker traits indicate fundamental properties of types.\n-//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}. Various\n+//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`], [`Unpin`]},\n+//!   marker traits that indicate fundamental properties of types.\n+//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}, various\n //!   operations for both destructors and overloading `()`.\n //! * [`std::mem`]::[`drop`][`mem::drop`], a convenience function for explicitly\n //!   dropping a value.\n //! * [`std::boxed`]::[`Box`], a way to allocate values on the heap.\n-//! * [`std::borrow`]::[`ToOwned`], The conversion trait that defines\n+//! * [`std::borrow`]::[`ToOwned`], the conversion trait that defines\n //!   [`to_owned`], the generic method for creating an owned type from a\n //!   borrowed type.\n //! * [`std::clone`]::[`Clone`], the ubiquitous trait that defines\n //!   [`clone`][`Clone::clone`], the method for producing a copy of a value.\n-//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`] }. The\n+//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`] }, the\n //!   comparison traits, which implement the comparison operators and are often\n //!   seen in trait bounds.\n-//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}. Generic\n+//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}, generic\n //!   conversions, used by savvy API authors to create overloaded methods.\n //! * [`std::default`]::[`Default`], types that have default values.\n-//! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`],\n-//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}. Iterators of various\n+//! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`]\n+//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}, iterators of various\n //!   kinds.\n-//! * [`std::option`]::[`Option`]::{[`self`][`Option`], [`Some`], [`None`]}. A\n+//! * [`std::option`]::[`Option`]::{[`self`][`Option`], [`Some`], [`None`]}, a\n //!   type which expresses the presence or absence of a value. This type is so\n //!   commonly used, its variants are also exported.\n-//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}. A type\n+//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}, a type\n //!   for functions that may succeed or fail. Like [`Option`], its variants are\n //!   exported as well.\n //! * [`std::string`]::{[`String`], [`ToString`]}, heap allocated strings.\n-//! * [`std::vec`]::[`Vec`], a growable, heap-allocated\n-//!   vector.\n+//! * [`std::vec`]::[`Vec`], a growable, heap-allocated vector.\n //!\n //! [`mem::drop`]: crate::mem::drop\n //! [`std::borrow`]: crate::borrow"}]}