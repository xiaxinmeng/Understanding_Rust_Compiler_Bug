{"sha": "8d19f44c9dbe780cbed3ee44d7a7684e178a8832", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMTlmNDRjOWRiZTc4MGNiZWQzZWU0NGQ3YTc2ODRlMTc4YTg4MzI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-04-27T17:57:07Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-15T03:10:46Z"}, "message": "syntax: add IterBytes impls for some ast types", "tree": {"sha": "85ae910fe8fc8f6b72b9a219252c7590bb6c38da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85ae910fe8fc8f6b72b9a219252c7590bb6c38da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d19f44c9dbe780cbed3ee44d7a7684e178a8832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d19f44c9dbe780cbed3ee44d7a7684e178a8832", "html_url": "https://github.com/rust-lang/rust/commit/8d19f44c9dbe780cbed3ee44d7a7684e178a8832", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d19f44c9dbe780cbed3ee44d7a7684e178a8832/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bfe0f717f51eaf7c00f686d6dbd68607b585535", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bfe0f717f51eaf7c00f686d6dbd68607b585535", "html_url": "https://github.com/rust-lang/rust/commit/4bfe0f717f51eaf7c00f686d6dbd68607b585535"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "4ef38c300c62f11d24ea487a49e29d46e73dbe23", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8d19f44c9dbe780cbed3ee44d7a7684e178a8832/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d19f44c9dbe780cbed3ee44d7a7684e178a8832/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8d19f44c9dbe780cbed3ee44d7a7684e178a8832", "patch": "@@ -17,6 +17,7 @@ use opt_vec::OptVec;\n use core::cast;\n use core::option::{None, Option, Some};\n use core::to_bytes;\n+use core::to_bytes::IterBytes;\n use core::to_str::ToStr;\n use std::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n@@ -121,6 +122,20 @@ pub struct Lifetime {\n     ident: ident\n }\n \n+#[cfg(stage0)]\n+impl to_bytes::IterBytes for Lifetime {\n+    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) {\n+        to_bytes::iter_bytes_3(&self.id, &self.span, &self.ident, lsb0, f)\n+    }\n+}\n+\n+#[cfg(not(stage0))]\n+impl to_bytes::IterBytes for Lifetime {\n+    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n+        to_bytes::iter_bytes_3(&self.id, &self.span, &self.ident, lsb0, f)\n+    }\n+}\n+\n // a \"Path\" is essentially Rust's notion of a name;\n // for instance: core::cmp::Eq  .  It's represented\n // as a sequence of identifiers, along with a bunch\n@@ -1057,6 +1072,32 @@ pub enum self_ty_ {\n     sty_uniq(mutability)                       // `~self`\n }\n \n+#[cfg(stage0)]\n+impl to_bytes::IterBytes for self_ty_ {\n+    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) {\n+        match *self {\n+            sty_static => 0u8.iter_bytes(lsb0, f),\n+            sty_value => 1u8.iter_bytes(lsb0, f),\n+            sty_region(ref lft, ref mutbl) => to_bytes::iter_bytes_3(&2u8, &lft, mutbl, lsb0, f),\n+            sty_box(ref mutbl) => to_bytes::iter_bytes_2(&3u8, mutbl, lsb0, f),\n+            sty_uniq(ref mutbl) => to_bytes::iter_bytes_2(&4u8, mutbl, lsb0, f),\n+        }\n+    }\n+}\n+\n+#[cfg(not(stage0))]\n+impl to_bytes::IterBytes for self_ty_ {\n+    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n+        match *self {\n+            sty_static => 0u8.iter_bytes(lsb0, f),\n+            sty_value => 1u8.iter_bytes(lsb0, f),\n+            sty_region(ref lft, ref mutbl) => to_bytes::iter_bytes_3(&2u8, &lft, mutbl, lsb0, f),\n+            sty_box(ref mutbl) => to_bytes::iter_bytes_2(&3u8, mutbl, lsb0, f),\n+            sty_uniq(ref mutbl) => to_bytes::iter_bytes_2(&4u8, mutbl, lsb0, f),\n+        }\n+    }\n+}\n+\n pub type self_ty = spanned<self_ty_>;\n \n #[auto_encode]"}, {"sha": "cd0b29f2a1e3f12024a055812eea467873a0d8f6", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8d19f44c9dbe780cbed3ee44d7a7684e178a8832/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d19f44c9dbe780cbed3ee44d7a7684e178a8832/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=8d19f44c9dbe780cbed3ee44d7a7684e178a8832", "patch": "@@ -152,6 +152,20 @@ impl<D:Decoder> Decodable<D> for span {\n     }\n }\n \n+#[cfg(stage0)]\n+impl to_bytes::IterBytes for span {\n+    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) {\n+        to_bytes::iter_bytes_3(&self.lo, &self.hi, &self.expn_info, lsb0, f);\n+    }\n+}\n+\n+#[cfg(not(stage0))]\n+impl to_bytes::IterBytes for span {\n+    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n+        to_bytes::iter_bytes_3(&self.lo, &self.hi, &self.expn_info, lsb0, f)\n+    }\n+}\n+\n pub fn spanned<T>(lo: BytePos, hi: BytePos, t: T) -> spanned<T> {\n     respan(mk_sp(lo, hi), t)\n }\n@@ -199,16 +213,62 @@ pub struct FileMapAndLine {fm: @FileMap, line: uint}\n pub struct FileMapAndBytePos {fm: @FileMap, pos: BytePos}\n pub struct NameAndSpan {name: ~str, span: Option<span>}\n \n+#[cfg(stage0)]\n+impl to_bytes::IterBytes for NameAndSpan {\n+    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) {\n+        to_bytes::iter_bytes_2(&self.name, &self.span, lsb0, f)\n+    }\n+}\n+\n+#[cfg(not(stage0))]\n+impl to_bytes::IterBytes for NameAndSpan {\n+    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n+        to_bytes::iter_bytes_2(&self.name, &self.span, lsb0, f)\n+    }\n+}\n+\n pub struct CallInfo {\n     call_site: span,\n     callee: NameAndSpan\n }\n \n+#[cfg(stage0)]\n+impl to_bytes::IterBytes for CallInfo {\n+    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) {\n+        to_bytes::iter_bytes_2(&self.call_site, &self.callee, lsb0, f)\n+    }\n+}\n+\n+#[cfg(not(stage0))]\n+impl to_bytes::IterBytes for CallInfo {\n+    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n+        to_bytes::iter_bytes_2(&self.call_site, &self.callee, lsb0, f)\n+    }\n+}\n+\n /// Extra information for tracking macro expansion of spans\n pub enum ExpnInfo {\n     ExpandedFrom(CallInfo)\n }\n \n+#[cfg(stage0)]\n+impl to_bytes::IterBytes for ExpnInfo {\n+    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) {\n+        match *self {\n+            ExpandedFrom(ref call_info) => to_bytes::iter_bytes_2(&0u8, call_info, lsb0, f)\n+        }\n+    }\n+}\n+\n+#[cfg(not(stage0))]\n+impl to_bytes::IterBytes for ExpnInfo {\n+    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n+        match *self {\n+            ExpandedFrom(ref call_info) => to_bytes::iter_bytes_2(&0u8, call_info, lsb0, f)\n+        }\n+    }\n+}\n+\n pub type FileName = ~str;\n \n pub struct FileLines"}]}