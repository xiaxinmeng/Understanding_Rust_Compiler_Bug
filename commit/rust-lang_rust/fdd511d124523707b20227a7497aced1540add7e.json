{"sha": "fdd511d124523707b20227a7497aced1540add7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZDUxMWQxMjQ1MjM3MDdiMjAyMjdhNzQ5N2FjZWQxNTQwYWRkN2U=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-09-19T20:54:47Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-09-22T21:54:10Z"}, "message": "Fix terminology around boxes\n\nit's just 'box' not 'owned box'", "tree": {"sha": "4315817ef6287ba7d9aa4319234ef9a3408fc4aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4315817ef6287ba7d9aa4319234ef9a3408fc4aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdd511d124523707b20227a7497aced1540add7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd511d124523707b20227a7497aced1540add7e", "html_url": "https://github.com/rust-lang/rust/commit/fdd511d124523707b20227a7497aced1540add7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdd511d124523707b20227a7497aced1540add7e/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72c27aba9ca429d7c0a1741a8b63bbc1c8050faf", "url": "https://api.github.com/repos/rust-lang/rust/commits/72c27aba9ca429d7c0a1741a8b63bbc1c8050faf", "html_url": "https://github.com/rust-lang/rust/commit/72c27aba9ca429d7c0a1741a8b63bbc1c8050faf"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "1c89567148ca14d64b97961593a585fa7d953f67", "filename": "src/doc/reference.md", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fdd511d124523707b20227a7497aced1540add7e/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/fdd511d124523707b20227a7497aced1540add7e/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=fdd511d124523707b20227a7497aced1540add7e", "patch": "@@ -3950,16 +3950,16 @@ to each function as the task executes. A stack allocation is reclaimed when\n control leaves the frame containing it.\n \n The _heap_ is a general term that describes two separate sets of boxes: managed\n-boxes &mdash; which may be subject to garbage collection &mdash; and owned\n-boxes. The lifetime of an allocation in the heap depends on the lifetime of\n-the box values pointing to it. Since box values may themselves be passed in and\n-out of frames, or stored in the heap, heap allocations may outlive the frame\n-they are allocated within.\n+boxes &mdash; which may be subject to garbage collection &mdash; and boxes. The\n+lifetime of an allocation in the heap depends on the lifetime of the box values\n+pointing to it. Since box values may themselves be passed in and out of frames,\n+or stored in the heap, heap allocations may outlive the frame they are\n+allocated within.\n \n ### Memory ownership\n \n A task owns all memory it can *safely* reach through local variables, as well\n-as managed, owned boxes and references.\n+as managed, boxes and references.\n \n When a task sends a value that has the `Send` trait to another task, it loses\n ownership of the value sent and can no longer refer to it. This is statically\n@@ -4013,23 +4013,22 @@ state. Subsequent statements within a function may or may not initialize the\n local variables. Local variables can be used only after they have been\n initialized; this is enforced by the compiler.\n \n-### Owned boxes\n+### Boxes\n \n-An  _owned box_ is a reference to a heap allocation holding another value,\n-which is constructed by the prefix operator `box`. When the standard library is\n-in use, the type of an owned box is `std::owned::Box<T>`.\n+An  _box_ is a reference to a heap allocation holding another value, which is\n+constructed by the prefix operator `box`. When the standard library is in use,\n+the type of an box is `std::owned::Box<T>`.\n \n-An example of an owned box type and value:\n+An example of an box type and value:\n \n ```\n let x: Box<int> = box 10;\n ```\n \n-Owned box values exist in 1:1 correspondence with their heap allocation,\n-copying an owned box value makes a shallow copy of the pointer. Rust will\n-consider a shallow copy of an owned box to move ownership of the value. After a\n-value has been moved, the source location cannot be used unless it is\n-reinitialized.\n+Box values exist in 1:1 correspondence with their heap allocation, copying an\n+box value makes a shallow copy of the pointer. Rust will consider a shallow\n+copy of an box to move ownership of the value. After a value has been moved,\n+the source location cannot be used unless it is reinitialized.\n \n ```\n let x: Box<int> = box 10;"}]}