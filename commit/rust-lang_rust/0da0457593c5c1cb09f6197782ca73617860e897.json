{"sha": "0da0457593c5c1cb09f6197782ca73617860e897", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYTA0NTc1OTNjNWMxY2IwOWY2MTk3NzgyY2E3MzYxNzg2MGU4OTc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T12:47:19Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:20:17Z"}, "message": "Clean up some generic substs handling", "tree": {"sha": "01f224f57a9069aa60c823e874d87113456f6307", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01f224f57a9069aa60c823e874d87113456f6307"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0da0457593c5c1cb09f6197782ca73617860e897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0da0457593c5c1cb09f6197782ca73617860e897", "html_url": "https://github.com/rust-lang/rust/commit/0da0457593c5c1cb09f6197782ca73617860e897", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0da0457593c5c1cb09f6197782ca73617860e897/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "162405f2221439fc9410ecb60f3e5939c2f2fac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/162405f2221439fc9410ecb60f3e5939c2f2fac8", "html_url": "https://github.com/rust-lang/rust/commit/162405f2221439fc9410ecb60f3e5939c2f2fac8"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "1b7ecc7c3a67cedc41a125ecae7f34b2d77cc3b1", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0da0457593c5c1cb09f6197782ca73617860e897/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da0457593c5c1cb09f6197782ca73617860e897/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=0da0457593c5c1cb09f6197782ca73617860e897", "patch": "@@ -381,10 +381,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         substs,\n                         item_def_id: _,\n                     }) => {\n-                        for r in substs.regions() {\n-                            bound_region(r);\n+                        for k in substs {\n+                            match k.unpack() {\n+                                UnpackedKind::Lifetime(lt) => bound_region(lt),\n+                                UnpackedKind::Type(ty) => types.push(ty),\n+                                UnpackedKind::Const(_) => {\n+                                    // Const parameters don't impose constraints.\n+                                }\n+                            }\n                         }\n-                        types.extend(substs.types());\n                     }\n \n                     Component::EscapingProjection(more_components) => {"}, {"sha": "ee66032848519887c0454b0290946d6fd872c398", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0da0457593c5c1cb09f6197782ca73617860e897/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da0457593c5c1cb09f6197782ca73617860e897/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=0da0457593c5c1cb09f6197782ca73617860e897", "patch": "@@ -67,6 +67,7 @@ use crate::hir;\n use crate::traits::ObligationCause;\n use crate::ty::outlives::Component;\n use crate::ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::subst::UnpackedKind;\n \n impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// Registers that the given region obligation must be resolved\n@@ -430,13 +431,18 @@ where\n         if approx_env_bounds.is_empty() && trait_bounds.is_empty() && needs_infer {\n             debug!(\"projection_must_outlive: no declared bounds\");\n \n-            for component_ty in projection_ty.substs.types() {\n-                self.type_must_outlive(origin.clone(), component_ty, region);\n-            }\n-\n-            for r in projection_ty.substs.regions() {\n-                self.delegate\n-                    .push_sub_region_constraint(origin.clone(), region, r);\n+            for k in projection_ty.substs {\n+                match k.unpack() {\n+                    UnpackedKind::Lifetime(lt) => {\n+                        self.delegate.push_sub_region_constraint(origin.clone(), region, lt);\n+                    }\n+                    UnpackedKind::Type(ty) => {\n+                        self.type_must_outlive(origin.clone(), ty, region);\n+                    }\n+                    UnpackedKind::Const(_) => {\n+                        // Const parameters don't impose constraints.\n+                    }\n+                }\n             }\n \n             return;"}, {"sha": "a03d33a3ef5bc4842849e3ee8d4b0cecbf350167", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0da0457593c5c1cb09f6197782ca73617860e897/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da0457593c5c1cb09f6197782ca73617860e897/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=0da0457593c5c1cb09f6197782ca73617860e897", "patch": "@@ -81,7 +81,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::{self, RegionObligation, SuppressRegionErrors};\n use rustc::ty::adjustment;\n-use rustc::ty::subst::SubstsRef;\n+use rustc::ty::subst::{SubstsRef, UnpackedKind};\n use rustc::ty::{self, Ty};\n \n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -1407,13 +1407,19 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n \n         let origin = infer::ParameterInScope(origin, expr_span);\n \n-        for region in substs.regions() {\n-            self.sub_regions(origin.clone(), expr_region, region);\n-        }\n-\n-        for ty in substs.types() {\n-            let ty = self.resolve_type(ty);\n-            self.type_must_outlive(origin.clone(), ty, expr_region);\n+        for kind in substs {\n+            match kind.unpack() {\n+                UnpackedKind::Lifetime(lt) => {\n+                    self.sub_regions(origin.clone(), expr_region, lt);\n+                }\n+                UnpackedKind::Type(ty) => {\n+                    let ty = self.resolve_type(ty);\n+                    self.type_must_outlive(origin.clone(), ty, expr_region);\n+                }\n+                UnpackedKind::Const(_) => {\n+                    // Const parameters don't impose constraints.\n+                }\n+            }\n         }\n     }\n }"}]}