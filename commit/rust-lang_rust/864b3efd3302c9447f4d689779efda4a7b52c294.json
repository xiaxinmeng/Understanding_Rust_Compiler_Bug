{"sha": "864b3efd3302c9447f4d689779efda4a7b52c294", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NGIzZWZkMzMwMmM5NDQ3ZjRkNjg5Nzc5ZWZkYTRhN2I1MmMyOTQ=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-08-17T22:53:10Z"}, "committer": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-08-17T22:53:10Z"}, "message": "Fix tidy and nits", "tree": {"sha": "6f28240d9e0014d1504498772de5b8116e6253f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f28240d9e0014d1504498772de5b8116e6253f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/864b3efd3302c9447f4d689779efda4a7b52c294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/864b3efd3302c9447f4d689779efda4a7b52c294", "html_url": "https://github.com/rust-lang/rust/commit/864b3efd3302c9447f4d689779efda4a7b52c294", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/864b3efd3302c9447f4d689779efda4a7b52c294/comments", "author": null, "committer": null, "parents": [{"sha": "70ce90c320aa4d6ae7646497a0cd17f775b94e43", "url": "https://api.github.com/repos/rust-lang/rust/commits/70ce90c320aa4d6ae7646497a0cd17f775b94e43", "html_url": "https://github.com/rust-lang/rust/commit/70ce90c320aa4d6ae7646497a0cd17f775b94e43"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "fd5db97b5d8bc48ed3da920df32333b1caa638cb", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/864b3efd3302c9447f4d689779efda4a7b52c294/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b3efd3302c9447f4d689779efda4a7b52c294/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=864b3efd3302c9447f4d689779efda4a7b52c294", "patch": "@@ -43,7 +43,7 @@ use std::mem;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::attr::AttrMetaMethods;\n-use syntax_pos::{MultiSpan, Span, BytePos};\n+use syntax_pos::{MultiSpan, Span};\n use errors::DiagnosticBuilder;\n \n use rustc::hir;\n@@ -963,14 +963,12 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             .emit();\n     }\n \n-    fn convert_region_to_span(&self, region: ty::Region) -> Option<Span> {\n+    fn region_end_span(&self, region: ty::Region) -> Option<Span> {\n         match region {\n             ty::ReScope(scope) => {\n                 match scope.span(&self.tcx.region_maps, &self.tcx.map) {\n                     Some(s) => {\n-                        let mut last_span = s;\n-                        last_span.lo = BytePos(last_span.hi.0 - 1);\n-                        Some(last_span)\n+                        Some(s.end_point())\n                     }\n                     None => {\n                         None\n@@ -1024,6 +1022,10 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             err_out_of_scope(super_scope, sub_scope, cause) => {\n                 match cause {\n                     euv::ClosureCapture(s) => {\n+                        // The primary span starts out as the closure creation point.\n+                        // Change the primary span here to highlight the use of the variable\n+                        // in the closure, because it seems more natural. Highlight\n+                        // closure creation point as a secondary span.\n                         match db.span.primary_span() {\n                             Some(primary) => {\n                                 db.span = MultiSpan::from_span(s);\n@@ -1038,8 +1040,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                let sub_span = self.convert_region_to_span(sub_scope);\n-                let super_span = self.convert_region_to_span(super_scope);\n+                let sub_span = self.region_end_span(sub_scope);\n+                let super_span = self.region_end_span(super_scope);\n \n                 match (sub_span, super_span) {\n                     (Some(s1), Some(s2)) if s1 == s2 => {"}, {"sha": "18206a68515fe9c4503322588f7cd635582d5336", "filename": "src/test/compile-fail/region-borrow-params-issue-29793-small.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/864b3efd3302c9447f4d689779efda4a7b52c294/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-small.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b3efd3302c9447f4d689779efda4a7b52c294/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-small.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-small.rs?ref=864b3efd3302c9447f4d689779efda4a7b52c294", "patch": "@@ -27,8 +27,8 @@ fn escaping_borrow_of_closure_params_1() {\n         //~| NOTE values in a scope are dropped in the opposite order they are created\n         return f;\n     };\n-    //~^ NOTE borrowed value dropped before borrower \n-    //~| NOTE borrowed value dropped before borrower \n+    //~^ NOTE borrowed value dropped before borrower\n+    //~| NOTE borrowed value dropped before borrower\n \n     // We delberately do not call `g`; this small version of the test,\n     // after adding such a call, was (properly) rejected even when the\n@@ -50,8 +50,8 @@ fn escaping_borrow_of_closure_params_2() {\n         //~| NOTE values in a scope are dropped in the opposite order they are created\n         f\n     };\n-    //~^ NOTE borrowed value dropped before borrower \n-    //~| NOTE borrowed value dropped before borrower \n+    //~^ NOTE borrowed value dropped before borrower\n+    //~| NOTE borrowed value dropped before borrower\n \n     // (we don't call `g`; see above)\n }"}]}