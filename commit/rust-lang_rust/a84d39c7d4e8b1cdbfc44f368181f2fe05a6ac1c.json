{"sha": "a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NGQzOWM3ZDRlOGIxY2RiZmM0NGYzNjgxODFmMmZlMDVhNmFjMWM=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-09-17T05:09:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-17T05:09:47Z"}, "message": "Rollup merge of #88751 - bjorn3:move_filesearch, r=oli-obk\n\nCouple of changes to FileSearch and SearchPath\n\n* Turn a couple of regular comments into doc comments\n* Move `get_tools_search_paths` from `FileSearch` to `Session`\n* Use Lrc instead of Option to avoid duplication of a `SearchPath`", "tree": {"sha": "0eb0a0a375f5fcebdd5b45bca1dd2fa8c6bccbb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0eb0a0a375f5fcebdd5b45bca1dd2fa8c6bccbb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhRCMbCRBK7hj4Ov3rIwAA9AkIAIVvR2nqnsNwEPTRsT9bdma1\n8pxO4Hw6Xl9NAsPxkjmntbP/LdpApiNp9xTtDEdLzN+zo5sNXwGmeR8YaoiGwbhP\nsYooQz+/ev60su4HPZdxrrMyWK1sk6wsz2CoszLBZtheWg3gjAe43uL/PaaTOdsU\nPQjIfFO2vo298ASiGJa+8qwH4S3VCibDmheMaDJAc+4hD4sxrvUys+QW4GAUNgK2\nzpbcPF7ilhgLxAcVsc7zOUokU0oAOVDN7rqFNpWH1TQhbDcrwHnBjoeUTJUT73Bu\niAmz3ARjeZwmvd0t6Ck5Etqcbuj7Dy8VAs9hxLFAnpwY4tR0EYyBh9wZ4B8Wooo=\n=6FMd\n-----END PGP SIGNATURE-----\n", "payload": "tree 0eb0a0a375f5fcebdd5b45bca1dd2fa8c6bccbb3\nparent 758c7bcc58387178ee0d7c454e6cf748a44a8618\nparent d7ef0b30e89960aede88bf450e4a2172332432e0\nauthor Yuki Okushi <jtitor@2k36.org> 1631855387 +0900\ncommitter GitHub <noreply@github.com> 1631855387 +0900\n\nRollup merge of #88751 - bjorn3:move_filesearch, r=oli-obk\n\nCouple of changes to FileSearch and SearchPath\n\n* Turn a couple of regular comments into doc comments\n* Move `get_tools_search_paths` from `FileSearch` to `Session`\n* Use Lrc instead of Option to avoid duplication of a `SearchPath`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c", "html_url": "https://github.com/rust-lang/rust/commit/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "758c7bcc58387178ee0d7c454e6cf748a44a8618", "url": "https://api.github.com/repos/rust-lang/rust/commits/758c7bcc58387178ee0d7c454e6cf748a44a8618", "html_url": "https://github.com/rust-lang/rust/commit/758c7bcc58387178ee0d7c454e6cf748a44a8618"}, {"sha": "d7ef0b30e89960aede88bf450e4a2172332432e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ef0b30e89960aede88bf450e4a2172332432e0", "html_url": "https://github.com/rust-lang/rust/commit/d7ef0b30e89960aede88bf450e4a2172332432e0"}], "stats": {"total": 90, "additions": 42, "deletions": 48}, "files": [{"sha": "826c09cd948f649e0edf10d9cf26b6e835b06ae9", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c", "patch": "@@ -637,7 +637,7 @@ fn link_dwarf_object<'a>(sess: &'a Session, executable_out_filename: &Path) {\n     cmd.arg(\"-o\");\n     cmd.arg(&dwp_out_filename);\n \n-    let mut new_path = sess.host_filesearch(PathKind::All).get_tools_search_paths(false);\n+    let mut new_path = sess.get_tools_search_paths(false);\n     if let Some(path) = env::var_os(\"PATH\") {\n         new_path.extend(env::split_paths(&path));\n     }\n@@ -2555,8 +2555,7 @@ fn add_gcc_ld_path(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n             match ld_impl {\n                 LdImpl::Lld => {\n                     if sess.target.lld_flavor == LldFlavor::Ld64 {\n-                        let tools_path =\n-                            sess.host_filesearch(PathKind::All).get_tools_search_paths(false);\n+                        let tools_path = sess.get_tools_search_paths(false);\n                         let ld64_exe = tools_path\n                             .into_iter()\n                             .map(|p| p.join(\"gcc-ld\"))\n@@ -2571,8 +2570,7 @@ fn add_gcc_ld_path(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n                             arg\n                         });\n                     } else {\n-                        let tools_path =\n-                            sess.host_filesearch(PathKind::All).get_tools_search_paths(false);\n+                        let tools_path = sess.get_tools_search_paths(false);\n                         let lld_path = tools_path\n                             .into_iter()\n                             .map(|p| p.join(\"gcc-ld\"))"}, {"sha": "e3b0eea0d89c70ac0dd0988731bc6352852efa72", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c", "patch": "@@ -15,7 +15,6 @@ use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::ty::TyCtxt;\n use rustc_serialize::{json, Encoder};\n use rustc_session::config::{self, CrateType, DebugInfo, LinkerPluginLto, Lto, OptLevel, Strip};\n-use rustc_session::search_paths::PathKind;\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor};\n@@ -101,7 +100,7 @@ pub fn get_linker<'a>(\n \n     // The compiler's sysroot often has some bundled tools, so add it to the\n     // PATH for the child.\n-    let mut new_path = sess.host_filesearch(PathKind::All).get_tools_search_paths(self_contained);\n+    let mut new_path = sess.get_tools_search_paths(self_contained);\n     let mut msvc_changed_path = false;\n     if sess.target.is_like_msvc {\n         if let Some(ref tool) = msvc_tool {"}, {"sha": "4c6a2baaef1e512972460433edf13ae172d8b5fd", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c", "patch": "@@ -677,10 +677,7 @@ impl RustcDefaultCalls {\n                     println!(\"{}\", targets.join(\"\\n\"));\n                 }\n                 Sysroot => println!(\"{}\", sess.sysroot.display()),\n-                TargetLibdir => println!(\n-                    \"{}\",\n-                    sess.target_tlib_path.as_ref().unwrap_or(&sess.host_tlib_path).dir.display()\n-                ),\n+                TargetLibdir => println!(\"{}\", sess.target_tlib_path.dir.display()),\n                 TargetSpec => println!(\"{}\", sess.target.to_json().pretty()),\n                 FileNames | CrateName => {\n                     let input = input.unwrap_or_else(|| {"}, {"sha": "9359a55e55a9c74845c6a539f30abb43b3016056", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c", "patch": "@@ -1,3 +1,5 @@\n+//! A module for searching for libraries\n+\n pub use self::FileMatch::*;\n \n use std::env;\n@@ -14,8 +16,6 @@ pub enum FileMatch {\n     FileDoesntMatch,\n }\n \n-// A module for searching for libraries\n-\n #[derive(Clone)]\n pub struct FileSearch<'a> {\n     sysroot: &'a Path,\n@@ -83,22 +83,10 @@ impl<'a> FileSearch<'a> {\n         FileSearch { sysroot, triple, search_paths, tlib_path, kind }\n     }\n \n-    // Returns just the directories within the search paths.\n+    /// Returns just the directories within the search paths.\n     pub fn search_path_dirs(&self) -> Vec<PathBuf> {\n         self.search_paths().map(|sp| sp.dir.to_path_buf()).collect()\n     }\n-\n-    // Returns a list of directories where target-specific tool binaries are located.\n-    pub fn get_tools_search_paths(&self, self_contained: bool) -> Vec<PathBuf> {\n-        let rustlib_path = rustc_target::target_rustlib_path(self.sysroot, &self.triple);\n-        let p = std::array::IntoIter::new([\n-            Path::new(&self.sysroot),\n-            Path::new(&rustlib_path),\n-            Path::new(\"bin\"),\n-        ])\n-        .collect::<PathBuf>();\n-        if self_contained { vec![p.clone(), p.join(\"self-contained\")] } else { vec![p] }\n-    }\n }\n \n pub fn make_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n@@ -107,8 +95,8 @@ pub fn make_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n         .collect::<PathBuf>()\n }\n \n-// This function checks if sysroot is found using env::args().next(), and if it\n-// is not found, uses env::current_exe() to imply sysroot.\n+/// This function checks if sysroot is found using env::args().next(), and if it\n+/// is not found, uses env::current_exe() to imply sysroot.\n pub fn get_or_default_sysroot() -> PathBuf {\n     // Follow symlinks.  If the resolved path is relative, make it absolute.\n     fn canonicalize(path: PathBuf) -> PathBuf {"}, {"sha": "acb6c735e051ebc2cfb90b5310e07c7bc8208533", "filename": "compiler/rustc_session/src/search_paths.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs?ref=a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c", "patch": "@@ -9,17 +9,17 @@ pub struct SearchPath {\n     pub files: Vec<SearchPathFile>,\n }\n \n-// The obvious implementation of `SearchPath::files` is a `Vec<PathBuf>`. But\n-// it is searched repeatedly by `find_library_crate`, and the searches involve\n-// checking the prefix and suffix of the filename of each `PathBuf`. This is\n-// doable, but very slow, because it involves calls to `file_name` and\n-// `extension` that are themselves slow.\n-//\n-// This type augments the `PathBuf` with an `Option<String>` containing the\n-// `PathBuf`'s filename. The prefix and suffix checking is much faster on the\n-// `Option<String>` than the `PathBuf`. (It's an `Option` because\n-// `Path::file_name` can fail; if that happens then all subsequent checking\n-// will also fail, which is fine.)\n+/// The obvious implementation of `SearchPath::files` is a `Vec<PathBuf>`. But\n+/// it is searched repeatedly by `find_library_crate`, and the searches involve\n+/// checking the prefix and suffix of the filename of each `PathBuf`. This is\n+/// doable, but very slow, because it involves calls to `file_name` and\n+/// `extension` that are themselves slow.\n+///\n+/// This type augments the `PathBuf` with an `Option<String>` containing the\n+/// `PathBuf`'s filename. The prefix and suffix checking is much faster on the\n+/// `Option<String>` than the `PathBuf`. (It's an `Option` because\n+/// `Path::file_name` can fail; if that happens then all subsequent checking\n+/// will also fail, which is fine.)\n #[derive(Clone, Debug)]\n pub struct SearchPathFile {\n     pub path: PathBuf,"}, {"sha": "d6f4a3ae4f121f76a8594e7662a224f7d057ce79", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=a84d39c7d4e8b1cdbfc44f368181f2fe05a6ac1c", "patch": "@@ -36,7 +36,7 @@ use std::fmt;\n use std::io::Write;\n use std::num::NonZeroU32;\n use std::ops::{Div, Mul};\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n use std::str::FromStr;\n use std::sync::Arc;\n use std::time::Duration;\n@@ -131,9 +131,8 @@ pub struct Session {\n     pub target: Target,\n     pub host: Target,\n     pub opts: config::Options,\n-    pub host_tlib_path: SearchPath,\n-    /// `None` if the host and target are the same.\n-    pub target_tlib_path: Option<SearchPath>,\n+    pub host_tlib_path: Lrc<SearchPath>,\n+    pub target_tlib_path: Lrc<SearchPath>,\n     pub parse_sess: ParseSess,\n     pub sysroot: PathBuf,\n     /// The name of the root source file of the crate, in the local file system.\n@@ -787,8 +786,7 @@ impl Session {\n             &self.sysroot,\n             self.opts.target_triple.triple(),\n             &self.opts.search_paths,\n-            // `target_tlib_path == None` means it's the same as `host_tlib_path`.\n-            self.target_tlib_path.as_ref().unwrap_or(&self.host_tlib_path),\n+            &self.target_tlib_path,\n             kind,\n         )\n     }\n@@ -802,6 +800,18 @@ impl Session {\n         )\n     }\n \n+    /// Returns a list of directories where target-specific tool binaries are located.\n+    pub fn get_tools_search_paths(&self, self_contained: bool) -> Vec<PathBuf> {\n+        let rustlib_path = rustc_target::target_rustlib_path(&self.sysroot, &config::host_triple());\n+        let p = std::array::IntoIter::new([\n+            Path::new(&self.sysroot),\n+            Path::new(&rustlib_path),\n+            Path::new(\"bin\"),\n+        ])\n+        .collect::<PathBuf>();\n+        if self_contained { vec![p.clone(), p.join(\"self-contained\")] } else { vec![p] }\n+    }\n+\n     pub fn init_incr_comp_session(\n         &self,\n         session_dir: PathBuf,\n@@ -1245,11 +1255,13 @@ pub fn build_session(\n \n     let host_triple = config::host_triple();\n     let target_triple = sopts.target_triple.triple();\n-    let host_tlib_path = SearchPath::from_sysroot_and_triple(&sysroot, host_triple);\n+    let host_tlib_path = Lrc::new(SearchPath::from_sysroot_and_triple(&sysroot, host_triple));\n     let target_tlib_path = if host_triple == target_triple {\n-        None\n+        // Use the same `SearchPath` if host and target triple are identical to avoid unnecessary\n+        // rescanning of the target lib path and an unnecessary allocation.\n+        host_tlib_path.clone()\n     } else {\n-        Some(SearchPath::from_sysroot_and_triple(&sysroot, target_triple))\n+        Lrc::new(SearchPath::from_sysroot_and_triple(&sysroot, target_triple))\n     };\n \n     let file_path_mapping = sopts.file_path_mapping();"}]}