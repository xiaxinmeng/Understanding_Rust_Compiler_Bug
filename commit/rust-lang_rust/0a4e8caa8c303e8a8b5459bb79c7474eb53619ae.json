{"sha": "0a4e8caa8c303e8a8b5459bb79c7474eb53619ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNGU4Y2FhOGMzMDNlOGE4YjU0NTliYjc5Yzc0NzRlYjUzNjE5YWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-26T09:15:01Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-27T21:32:15Z"}, "message": "adjust to canonical_alloc_id removal", "tree": {"sha": "d376d230d642d376e8312c3a2ae4cc095da47642", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d376d230d642d376e8312c3a2ae4cc095da47642"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a4e8caa8c303e8a8b5459bb79c7474eb53619ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4e8caa8c303e8a8b5459bb79c7474eb53619ae", "html_url": "https://github.com/rust-lang/rust/commit/0a4e8caa8c303e8a8b5459bb79c7474eb53619ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a4e8caa8c303e8a8b5459bb79c7474eb53619ae/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "345b033c3fb0c4be917cf405828596a625ead759", "url": "https://api.github.com/repos/rust-lang/rust/commits/345b033c3fb0c4be917cf405828596a625ead759", "html_url": "https://github.com/rust-lang/rust/commit/345b033c3fb0c4be917cf405828596a625ead759"}], "stats": {"total": 86, "additions": 14, "deletions": 72}, "files": [{"sha": "3c6486244591e94c1cadd95b15841544e9cfdfd7", "filename": "src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a4e8caa8c303e8a8b5459bb79c7474eb53619ae/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4e8caa8c303e8a8b5459bb79c7474eb53619ae/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=0a4e8caa8c303e8a8b5459bb79c7474eb53619ae", "patch": "@@ -94,8 +94,8 @@ pub fn report_error<'tcx, 'mir>(\n             let helps = match e.kind {\n                 Unsupported(UnsupportedOpInfo::NoMirFor(..)) =>\n                     vec![format!(\"make sure to use a Miri sysroot, which you can prepare with `cargo miri setup`\")],\n-                Unsupported(UnsupportedOpInfo::ReadBytesAsPointer) =>\n-                    panic!(\"`ReadBytesAsPointer` cannot be raised by Miri\"),\n+                Unsupported(UnsupportedOpInfo::ReadBytesAsPointer | UnsupportedOpInfo::ThreadLocalStatic(_) | UnsupportedOpInfo::ReadExternStatic(_)) =>\n+                    panic!(\"Error should never be raised by Miri: {:?}\", e.kind),\n                 Unsupported(_) =>\n                     vec![format!(\"this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\")],\n                 UndefinedBehavior(UndefinedBehaviorInfo::AlignmentCheckFailed { .. }) =>"}, {"sha": "188ff94861bdd194a223f092f5c24149c276b725", "filename": "src/intptrcast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a4e8caa8c303e8a8b5459bb79c7474eb53619ae/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4e8caa8c303e8a8b5459bb79c7474eb53619ae/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=0a4e8caa8c303e8a8b5459bb79c7474eb53619ae", "patch": "@@ -6,7 +6,6 @@ use log::trace;\n use rand::Rng;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_mir::interpret::{AllocCheck, AllocId, InterpResult, Memory, Machine, Pointer, PointerArithmetic};\n use rustc_target::abi::{Size, HasDataLayout};\n \n use crate::*;\n@@ -79,7 +78,7 @@ impl<'mir, 'tcx> GlobalState {\n     ) -> InterpResult<'tcx, u64> {\n         let mut global_state = memory.extra.intptrcast.borrow_mut();\n         let global_state = &mut *global_state;\n-        let id = Evaluator::canonical_alloc_id(memory, ptr.alloc_id);\n+        let id = ptr.alloc_id;\n \n         // There is nothing wrong with a raw pointer being cast to an integer only after\n         // it became dangling.  Hence `MaybeDead`."}, {"sha": "d418409df067435e20076a10af681dd90f1d1e61", "filename": "src/machine.rs", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0a4e8caa8c303e8a8b5459bb79c7474eb53619ae/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4e8caa8c303e8a8b5459bb79c7474eb53619ae/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=0a4e8caa8c303e8a8b5459bb79c7474eb53619ae", "patch": "@@ -426,44 +426,26 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         Ok(())\n     }\n \n-    fn thread_local_alloc_id(\n+    fn thread_local_static_alloc_id(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         def_id: DefId,\n     ) -> InterpResult<'tcx, AllocId> {\n         ecx.get_or_create_thread_local_alloc_id(def_id)\n     }\n \n-    fn adjust_global_const(\n-        ecx: &InterpCx<'mir, 'tcx, Self>,\n-        mut val: mir::interpret::ConstValue<'tcx>,\n-    ) -> InterpResult<'tcx, mir::interpret::ConstValue<'tcx>> {\n-        // FIXME: Remove this, do The Right Thing in `thread_local_alloc_id` instead.\n-        ecx.remap_thread_local_alloc_ids(&mut val)?;\n-        Ok(val)\n-    }\n-\n-    fn canonical_alloc_id(mem: &Memory<'mir, 'tcx, Self>, id: AllocId) -> AllocId {\n-        let tcx = mem.tcx;\n-        // Figure out if this is an extern static, and if yes, which one.\n-        let def_id = match tcx.get_global_alloc(id) {\n-            Some(GlobalAlloc::Static(def_id)) if tcx.is_foreign_item(def_id) => def_id,\n-            _ => {\n-                // No need to canonicalize anything.\n-                return id;\n-            }\n-        };\n-        let attrs = tcx.get_attrs(def_id);\n+    fn extern_static_alloc_id(\n+        memory: &Memory<'mir, 'tcx, Self>,\n+        def_id: DefId,\n+    ) -> InterpResult<'tcx, AllocId> {\n+        let attrs = memory.tcx.get_attrs(def_id);\n         let link_name = match attr::first_attr_value_str_by_name(&attrs, sym::link_name) {\n             Some(name) => name,\n-            None => tcx.item_name(def_id),\n+            None => memory.tcx.item_name(def_id),\n         };\n-        // Check if we know this one.\n-        if let Some(canonical_id) = mem.extra.extern_statics.get(&link_name) {\n-            trace!(\"canonical_alloc_id: {:?} ({}) -> {:?}\", id, link_name, canonical_id);\n-            *canonical_id\n+        if let Some(&id) = memory.extra.extern_statics.get(&link_name) {\n+            Ok(id)\n         } else {\n-            // Return original id; `Memory::get_static_alloc` will throw an error.\n-            id\n+            throw_unsup_format!(\"`extern` static {:?} is not supported by Miri\", def_id)\n         }\n     }\n "}, {"sha": "0a83b71665c5cef90e3539dc3b3bee3b02ab9089", "filename": "src/thread.rs", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0a4e8caa8c303e8a8b5459bb79c7474eb53619ae/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4e8caa8c303e8a8b5459bb79c7474eb53619ae/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=0a4e8caa8c303e8a8b5459bb79c7474eb53619ae", "patch": "@@ -11,11 +11,7 @@ use log::trace;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::{\n-    middle::codegen_fn_attrs::CodegenFnAttrFlags,\n-    mir,\n-    ty::{self, Instance},\n-};\n+use rustc_middle::ty::{self, Instance};\n \n use crate::sync::SynchronizationState;\n use crate::*;\n@@ -499,41 +495,6 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n // Public interface to thread management.\n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n-    /// A workaround for thread-local statics until\n-    /// https://github.com/rust-lang/rust/issues/70685 is fixed: change the\n-    /// thread-local allocation id with a freshly generated allocation id for\n-    /// the currently active thread.\n-    fn remap_thread_local_alloc_ids(\n-        &self,\n-        val: &mut mir::interpret::ConstValue<'tcx>,\n-    ) -> InterpResult<'tcx> {\n-        let this = self.eval_context_ref();\n-        match *val {\n-            mir::interpret::ConstValue::Scalar(Scalar::Ptr(ref mut ptr)) => {\n-                let alloc_id = ptr.alloc_id;\n-                let alloc = this.tcx.get_global_alloc(alloc_id);\n-                let tcx = this.tcx;\n-                let is_thread_local = |def_id| {\n-                    tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)\n-                };\n-                match alloc {\n-                    Some(GlobalAlloc::Static(def_id)) if is_thread_local(def_id) => {\n-                        ptr.alloc_id = this.get_or_create_thread_local_alloc_id(def_id)?;\n-                    }\n-                    _ => {}\n-                }\n-            }\n-            _ => {\n-                // FIXME: Handling only `Scalar` seems to work for now, but at\n-                // least in principle thread-locals could be in any constant, so\n-                // we should also consider other cases. However, once\n-                // https://github.com/rust-lang/rust/issues/70685 gets fixed,\n-                // this code will have to be rewritten anyway.\n-            }\n-        }\n-        Ok(())\n-    }\n-\n     /// Get a thread-specific allocation id for the given thread-local static.\n     /// If needed, allocate a new one.\n     ///"}]}