{"sha": "8f397bc8a0d8f2569d9aec7ad787b484c4b147e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMzk3YmM4YTBkOGYyNTY5ZDlhZWM3YWQ3ODdiNDg0YzRiMTQ3ZTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-31T12:51:31Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-08T17:24:15Z"}, "message": "Simplify box_region macros", "tree": {"sha": "dc6f27758179056b4cb3a1f1d905367d898d65d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc6f27758179056b4cb3a1f1d905367d898d65d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f397bc8a0d8f2569d9aec7ad787b484c4b147e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f397bc8a0d8f2569d9aec7ad787b484c4b147e4", "html_url": "https://github.com/rust-lang/rust/commit/8f397bc8a0d8f2569d9aec7ad787b484c4b147e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f397bc8a0d8f2569d9aec7ad787b484c4b147e4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a50d72158e08e02cfc051b863017bdbd2c45b637", "url": "https://api.github.com/repos/rust-lang/rust/commits/a50d72158e08e02cfc051b863017bdbd2c45b637", "html_url": "https://github.com/rust-lang/rust/commit/a50d72158e08e02cfc051b863017bdbd2c45b637"}], "stats": {"total": 46, "additions": 18, "deletions": 28}, "files": [{"sha": "2f212b03e08e5f21832ffcfc60d9edc20aeef89f", "filename": "compiler/rustc_data_structures/src/box_region.rs", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8f397bc8a0d8f2569d9aec7ad787b484c4b147e4/compiler%2Frustc_data_structures%2Fsrc%2Fbox_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f397bc8a0d8f2569d9aec7ad787b484c4b147e4/compiler%2Frustc_data_structures%2Fsrc%2Fbox_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fbox_region.rs?ref=8f397bc8a0d8f2569d9aec7ad787b484c4b147e4", "patch": "@@ -82,37 +82,35 @@ pub enum YieldType<I, A> {\n #[macro_export]\n #[allow_internal_unstable(fn_traits)]\n macro_rules! declare_box_region_type {\n-    (impl $v:vis\n-     $name: ident,\n-     $yield_type:ty,\n-     for($($lifetimes:tt)*),\n-     ($($args:ty),*) -> ($reti:ty, $retc:ty)\n-    ) => {\n+    ($v:vis $name: ident, ($($args:ty),*) -> ($reti:ty, $retc:ty)) => {\n         $v struct $name($crate::box_region::PinnedGenerator<\n             $reti,\n-            for<$($lifetimes)*> fn(($($args,)*)),\n+            fn(($($args,)*)),\n             $retc\n         >);\n \n         impl $name {\n-            fn new<T: ::std::ops::Generator<$crate::box_region::Action, Yield = $yield_type, Return = $retc> + 'static>(\n-                generator: T\n-            ) -> ($reti, Self) {\n+            fn new<T>(generator: T) -> ($reti, Self)\n+            where T: ::std::ops::Generator<\n+                $crate::box_region::Action,\n+                Yield = $crate::box_region::YieldType<$reti, fn(($($args,)*))>,\n+                Return = $retc,\n+            > + 'static {\n                 let (initial, pinned) = $crate::box_region::PinnedGenerator::new(generator);\n                 (initial, $name(pinned))\n             }\n \n-            $v fn access<F: for<$($lifetimes)*> FnOnce($($args,)*) -> R, R>(&mut self, f: F) -> R {\n+            $v fn access<F: FnOnce($($args,)*) -> R, R>(&mut self, f: F) -> R {\n                 // Turn the FnOnce closure into *mut dyn FnMut()\n                 // so we can pass it in to the generator\n                 let mut r = None;\n                 let mut f = Some(f);\n-                let mut_f: &mut dyn for<$($lifetimes)*> FnMut(($($args,)*)) =\n+                let mut_f: &mut dyn FnMut(($($args,)*)) =\n                     &mut |args| {\n                         let f = f.take().unwrap();\n                         r = Some(FnOnce::call_once(f, args));\n                 };\n-                let mut_f = mut_f as *mut dyn for<$($lifetimes)*> FnMut(($($args,)*));\n+                let mut_f = mut_f as *mut dyn FnMut(($($args,)*));\n \n                 // Get the generator to call our closure\n                 unsafe {\n@@ -127,36 +125,29 @@ macro_rules! declare_box_region_type {\n                 self.0.complete()\n             }\n \n-            fn initial_yield(value: $reti) -> $yield_type {\n+            fn initial_yield(\n+                value: $reti,\n+            ) -> $crate::box_region::YieldType<$reti, fn(($($args,)*))> {\n                 $crate::box_region::YieldType::Initial(value)\n             }\n         }\n     };\n-\n-    ($v:vis $name: ident, for($($lifetimes:tt)*), ($($args:ty),*) -> ($reti:ty, $retc:ty)) => {\n-        declare_box_region_type!(\n-            impl $v $name,\n-            $crate::box_region::YieldType<$reti, for<$($lifetimes)*> fn(($($args,)*))>,\n-            for($($lifetimes)*),\n-            ($($args),*) -> ($reti, $retc)\n-        );\n-    };\n }\n \n #[macro_export]\n #[allow_internal_unstable(fn_traits)]\n macro_rules! box_region_allow_access {\n-    (for($($lifetimes:tt)*), ($($args:ty),*), ($($exprs:expr),*), $action:ident) => {\n+    (($($args:ty),*), ($($exprs:expr),*), $action:ident) => {\n         loop {\n             match $action {\n                 $crate::box_region::Action::Access(accessor) => {\n-                    let accessor: &mut dyn for<$($lifetimes)*> FnMut($($args),*) = unsafe {\n+                    let accessor: &mut dyn FnMut($($args),*) = unsafe {\n                         ::std::mem::transmute(accessor.get())\n                     };\n                     (*accessor)(($($exprs),*));\n                     unsafe {\n                         let marker = $crate::box_region::Marker::<\n-                            for<$($lifetimes)*> fn(($($args,)*))\n+                            fn(($($args,)*))\n                         >::new();\n                         $action = yield $crate::box_region::YieldType::Accessor(marker);\n                     };"}, {"sha": "478b2ef4d8f43cd2f7da0b300d25b831e5444518", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f397bc8a0d8f2569d9aec7ad787b484c4b147e4/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f397bc8a0d8f2569d9aec7ad787b484c4b147e4/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=8f397bc8a0d8f2569d9aec7ad787b484c4b147e4", "patch": "@@ -87,7 +87,6 @@ fn count_nodes(krate: &ast::Crate) -> usize {\n \n declare_box_region_type!(\n     pub BoxedResolver,\n-    for(),\n     (&mut Resolver<'_>) -> (Result<ast::Crate>, ResolverOutputs)\n );\n \n@@ -133,7 +132,7 @@ pub fn configure_and_expand(\n                 resolver\n             }\n         };\n-        box_region_allow_access!(for(), (&mut Resolver<'_>), (&mut resolver), action);\n+        box_region_allow_access!((&mut Resolver<'_>), (&mut resolver), action);\n         resolver.into_outputs()\n     });\n     result.map(|k| (k, resolver))"}]}