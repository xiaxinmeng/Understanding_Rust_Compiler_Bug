{"sha": "3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNGEwZGZjMTM5ODcyMzQxYTJiNTVlZTk5NThmNmZhOGE5ZjFkNjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-23T23:17:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-23T23:17:38Z"}, "message": "Auto merge of #86429 - JohnTitor:get-by-key-enum-part-2, r=oli-obk\n\nImprove `get_by_key_enumerated` more\n\nFollow-up of #86392, this applies the suggestions by `@m-ou-se.`\n\nr? `@m-ou-se`", "tree": {"sha": "14324551c38fb6a4e591b61eafd9a78cca07f849", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14324551c38fb6a4e591b61eafd9a78cca07f849"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64", "html_url": "https://github.com/rust-lang/rust/commit/3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67b03007cf40f2331892d5b0f65d2917ac3603d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/67b03007cf40f2331892d5b0f65d2917ac3603d5", "html_url": "https://github.com/rust-lang/rust/commit/67b03007cf40f2331892d5b0f65d2917ac3603d5"}, {"sha": "6761826b1bacf79959ed97d84686a47521e8a18f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6761826b1bacf79959ed97d84686a47521e8a18f", "html_url": "https://github.com/rust-lang/rust/commit/6761826b1bacf79959ed97d84686a47521e8a18f"}], "stats": {"total": 74, "additions": 24, "deletions": 50}, "files": [{"sha": "041d52aa20abd6cef4d45258c71f4109f262c82e", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64", "patch": "@@ -7,24 +7,26 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(allow_internal_unstable)]\n #![feature(array_windows)]\n+#![feature(associated_type_bounds)]\n+#![feature(auto_traits)]\n+#![feature(bool_to_option)]\n+#![feature(const_panic)]\n #![feature(control_flow_enum)]\n+#![feature(core_intrinsics)]\n+#![feature(extend_one)]\n+#![feature(hash_raw_entry)]\n #![feature(in_band_lifetimes)]\n+#![feature(iter_map_while)]\n+#![feature(maybe_uninit_uninit_array)]\n #![feature(min_specialization)]\n-#![feature(auto_traits)]\n+#![feature(min_type_alias_impl_trait)]\n+#![feature(new_uninit)]\n #![feature(nll)]\n-#![feature(allow_internal_unstable)]\n-#![feature(hash_raw_entry)]\n-#![feature(core_intrinsics)]\n+#![feature(once_cell)]\n #![feature(test)]\n-#![feature(associated_type_bounds)]\n #![feature(thread_id_value)]\n-#![feature(extend_one)]\n-#![feature(const_panic)]\n-#![feature(new_uninit)]\n-#![feature(once_cell)]\n-#![feature(maybe_uninit_uninit_array)]\n-#![feature(min_type_alias_impl_trait)]\n #![allow(rustc::default_hash_types)]\n #![deny(unaligned_references)]\n "}, {"sha": "e92db9ea128057f4c82556a55ff27d3d728aafb0", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64", "patch": "@@ -1,6 +1,5 @@\n //! A variant of `SortedMap` that preserves insertion order.\n \n-use std::borrow::Borrow;\n use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n \n@@ -76,11 +75,7 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     ///\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n-    pub fn get_by_key<Q: 'a>(&'a self, key: &Q) -> impl 'a + Iterator<Item = &'a V>\n-    where\n-        Q: Ord + ?Sized,\n-        K: Borrow<Q>,\n-    {\n+    pub fn get_by_key(&'a self, key: K) -> impl 'a + Iterator<Item = &'a V> {\n         self.get_by_key_enumerated(key).map(|(_, v)| v)\n     }\n \n@@ -89,35 +84,12 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     ///\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n-    pub fn get_by_key_enumerated<Q>(&self, key: &Q) -> impl '_ + Iterator<Item = (I, &V)>\n-    where\n-        Q: Ord + ?Sized,\n-        K: Borrow<Q>,\n-    {\n-        match self.binary_search_idx(key) {\n-            Err(_) => self.idxs_to_items_enumerated(&[]),\n-\n-            Ok(idx) => {\n-                let start = self.idx_sorted_by_item_key[..idx]\n-                    .partition_point(|&i| self.items[i].0.borrow() != key);\n-                let end = idx\n-                    + self.idx_sorted_by_item_key[idx..]\n-                        .partition_point(|&i| self.items[i].0.borrow() == key);\n-                self.idxs_to_items_enumerated(&self.idx_sorted_by_item_key[start..end])\n-            }\n-        }\n-    }\n-\n-    fn binary_search_idx<Q>(&self, key: &Q) -> Result<usize, usize>\n-    where\n-        Q: Ord + ?Sized,\n-        K: Borrow<Q>,\n-    {\n-        self.idx_sorted_by_item_key.binary_search_by(|&idx| self.items[idx].0.borrow().cmp(key))\n-    }\n-\n-    fn idxs_to_items_enumerated(&'a self, idxs: &'a [I]) -> impl 'a + Iterator<Item = (I, &'a V)> {\n-        idxs.iter().map(move |&idx| (idx, &self.items[idx].1))\n+    pub fn get_by_key_enumerated(&'a self, key: K) -> impl '_ + Iterator<Item = (I, &V)> {\n+        let lower_bound = self.idx_sorted_by_item_key.partition_point(|&i| self.items[i].0 < key);\n+        self.idx_sorted_by_item_key[lower_bound..].iter().map_while(move |&i| {\n+            let (k, v) = &self.items[i];\n+            (k == &key).then_some((i, v))\n+        })\n     }\n }\n "}, {"sha": "1e977d709f1cdae35699717160e0c29b97c973da", "filename": "compiler/rustc_data_structures/src/sorted_map/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Ftests.rs?ref=3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64", "patch": "@@ -14,11 +14,11 @@ fn test_sorted_index_multi_map() {\n     }\n \n     // `get_by_key` works.\n-    assert_eq!(set.get_by_key(&3).copied().collect::<Vec<_>>(), vec![0]);\n-    assert!(set.get_by_key(&4).next().is_none());\n+    assert_eq!(set.get_by_key(3).copied().collect::<Vec<_>>(), vec![0]);\n+    assert!(set.get_by_key(4).next().is_none());\n \n     // `get_by_key` returns items in insertion order.\n-    let twos: Vec<_> = set.get_by_key_enumerated(&2).collect();\n+    let twos: Vec<_> = set.get_by_key_enumerated(2).collect();\n     let idxs: Vec<usize> = twos.iter().map(|(i, _)| *i).collect();\n     let values: Vec<usize> = twos.iter().map(|(_, &v)| v).collect();\n "}, {"sha": "2d177551664f6fa43aa22b08674b1a415a6ac65a", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=3b4a0dfc139872341a2b55ee9958f6fa8a9f1d64", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> AssocItems<'tcx> {\n         &self,\n         name: Symbol,\n     ) -> impl '_ + Iterator<Item = &ty::AssocItem> {\n-        self.items.get_by_key(&name).copied()\n+        self.items.get_by_key(name).copied()\n     }\n \n     /// Returns an iterator over all associated items with the given name."}]}