{"sha": "b663c0f4f6ff84a8c9df0f708e1f8d628330d973", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NjNjMGY0ZjZmZjg0YThjOWRmMGY3MDhlMWY4ZDYyODMzMGQ5NzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-29T19:27:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-29T19:27:53Z"}, "message": "Auto merge of #85698 - ehuss:incremental-session-panic, r=estebank\n\nDon't panic when failing to initialize incremental directory.\n\nThis removes a panic when rustc fails to initialize the incremental directory. This can commonly happen on various filesystems that don't support locking (often various network filesystems). Panics can be confusing and scary, and there are already plenty of issues reporting this.\n\nThis has been panicking since 1.22 due to I think #44502 which was a major rework of how things work. Previously, things were simpler and the [`load_dep_graph`](https://github.com/rust-lang/rust/blob/1.21.0/src/librustc_incremental/persist/load.rs#L43-L65) function would emit an error and then continue on without panicking. With 1.22, [`load_dep_graph`](https://github.com/rust-lang/rust/blob/1.22.0/src/librustc_incremental/persist/load.rs#L44) was changed so that it assumes it can load the data without errors. Today, the problem is that it calls [`prepare_session_directory`](https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler/rustc_interface/src/passes.rs#L175-L179) and then immediately calls `garbage_collect_session_directories` which will panic since the session is `IncrCompSession::NotInitialized`.\n\nThe solution here is to have `prepare_session_directory` return an error that must be handled so that compilation stops if it fails.\n\nSome other options:\n\n* Ignore directory lock failures.\n* Print a warning on directory lock failure, but otherwise continue with incremental enabled.\n* Print a warning on directory lock failure, and disable incremental.\n* Provide a different locking mechanism.\n\nCargo ignores lock errors if locking is not supported, so that would be a precedent for the first option. These options would require quite a bit more changes, but I'm happy to entertain any of them, as I think they all have valid justifications.\n\nThere is more discussion on the many issues where this is reported: #49773, #59224, #66513, #76251. I'm not sure if this can be considered closing any of those, though, since I think there is some value in discussing if there is a way to avoid the error altogether. But I think it would make sense to at least close all but one to consolidate them.", "tree": {"sha": "b07bf1d57d1457ebd136968bd8765757b6497957", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b07bf1d57d1457ebd136968bd8765757b6497957"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b663c0f4f6ff84a8c9df0f708e1f8d628330d973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b663c0f4f6ff84a8c9df0f708e1f8d628330d973", "html_url": "https://github.com/rust-lang/rust/commit/b663c0f4f6ff84a8c9df0f708e1f8d628330d973", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff5522fc1ae2c1d66fb2a465f48e03732fa8570b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5522fc1ae2c1d66fb2a465f48e03732fa8570b", "html_url": "https://github.com/rust-lang/rust/commit/ff5522fc1ae2c1d66fb2a465f48e03732fa8570b"}, {"sha": "4c550bc014cae30a3f0e8a7eb14f216ec26c345e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c550bc014cae30a3f0e8a7eb14f216ec26c345e", "html_url": "https://github.com/rust-lang/rust/commit/4c550bc014cae30a3f0e8a7eb14f216ec26c345e"}], "stats": {"total": 104, "additions": 77, "deletions": 27}, "files": [{"sha": "954e2e90f3de30c8748500b224d3cb64703ccf62", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b663c0f4f6ff84a8c9df0f708e1f8d628330d973", "patch": "@@ -3876,6 +3876,7 @@ dependencies = [\n  \"rand 0.7.3\",\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n+ \"rustc_errors\",\n  \"rustc_fs_util\",\n  \"rustc_graphviz\",\n  \"rustc_hir\","}, {"sha": "c35a164bb33423e0f34b233523d756a8aa7bcf31", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=b663c0f4f6ff84a8c9df0f708e1f8d628330d973", "patch": "@@ -34,7 +34,7 @@ tempfile = \"3.2\"\n version = \"0.11\"\n \n [target.'cfg(windows)'.dependencies]\n-winapi = { version = \"0.3\", features = [\"fileapi\", \"psapi\"] }\n+winapi = { version = \"0.3\", features = [\"fileapi\", \"psapi\", \"winerror\"] }\n \n [target.'cfg(not(target_arch = \"wasm32\"))'.dependencies]\n memmap2 = \"0.2.1\""}, {"sha": "4f5d8d7ea48ba36939b84202281a6e14b5157e9a", "filename": "compiler/rustc_data_structures/src/flock.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/compiler%2Frustc_data_structures%2Fsrc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/compiler%2Frustc_data_structures%2Fsrc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fflock.rs?ref=b663c0f4f6ff84a8c9df0f708e1f8d628330d973", "patch": "@@ -54,6 +54,10 @@ cfg_if! {\n                     Ok(Lock { _file: file })\n                 }\n             }\n+\n+            pub fn error_unsupported(err: &io::Error) -> bool {\n+                matches!(err.raw_os_error(), Some(libc::ENOTSUP) | Some(libc::ENOSYS))\n+            }\n         }\n \n         // Note that we don't need a Drop impl to execute `flock(fd, LOCK_UN)`. Lock acquired by\n@@ -103,6 +107,10 @@ cfg_if! {\n                     Ok(Lock { file })\n                 }\n             }\n+\n+            pub fn error_unsupported(err: &io::Error) -> bool {\n+                matches!(err.raw_os_error(), Some(libc::ENOTSUP) | Some(libc::ENOSYS))\n+            }\n         }\n \n         impl Drop for Lock {\n@@ -122,6 +130,7 @@ cfg_if! {\n         use std::mem;\n         use std::os::windows::prelude::*;\n \n+        use winapi::shared::winerror::ERROR_INVALID_FUNCTION;\n         use winapi::um::minwinbase::{OVERLAPPED, LOCKFILE_FAIL_IMMEDIATELY, LOCKFILE_EXCLUSIVE_LOCK};\n         use winapi::um::fileapi::LockFileEx;\n         use winapi::um::winnt::{FILE_SHARE_DELETE, FILE_SHARE_READ, FILE_SHARE_WRITE};\n@@ -194,6 +203,10 @@ cfg_if! {\n                     Ok(Lock { _file: file })\n                 }\n             }\n+\n+            pub fn error_unsupported(err: &io::Error) -> bool {\n+                err.raw_os_error() == Some(ERROR_INVALID_FUNCTION as i32)\n+            }\n         }\n \n         // Note that we don't need a Drop impl on the Windows: The file is unlocked"}, {"sha": "85bf4dc176bd1465479827a95debef8a6b8ed518", "filename": "compiler/rustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/compiler%2Frustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/compiler%2Frustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2FCargo.toml?ref=b663c0f4f6ff84a8c9df0f708e1f8d628330d973", "patch": "@@ -20,3 +20,4 @@ rustc_macros = { path = \"../rustc_macros\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_fs_util = { path = \"../rustc_fs_util\" }\n rustc_session = { path = \"../rustc_session\" }\n+rustc_errors = { path = \"../rustc_errors\" }"}, {"sha": "83e80b55daec1b3e2d9eac3bcdc9f7067550ac62", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 43, "deletions": 23, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=b663c0f4f6ff84a8c9df0f708e1f8d628330d973", "patch": "@@ -106,6 +106,7 @@\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::{base_n, flock};\n+use rustc_errors::ErrorReported;\n use rustc_fs_util::{link_or_copy, LinkOrCopy};\n use rustc_session::{CrateDisambiguator, Session};\n \n@@ -189,9 +190,9 @@ pub fn prepare_session_directory(\n     sess: &Session,\n     crate_name: &str,\n     crate_disambiguator: CrateDisambiguator,\n-) {\n+) -> Result<(), ErrorReported> {\n     if sess.opts.incremental.is_none() {\n-        return;\n+        return Ok(());\n     }\n \n     let _timer = sess.timer(\"incr_comp_prepare_session_directory\");\n@@ -201,9 +202,7 @@ pub fn prepare_session_directory(\n     // {incr-comp-dir}/{crate-name-and-disambiguator}\n     let crate_dir = crate_path(sess, crate_name, crate_disambiguator);\n     debug!(\"crate-dir: {}\", crate_dir.display());\n-    if create_dir(sess, &crate_dir, \"crate\").is_err() {\n-        return;\n-    }\n+    create_dir(sess, &crate_dir, \"crate\")?;\n \n     // Hack: canonicalize the path *after creating the directory*\n     // because, on windows, long paths can cause problems;\n@@ -217,7 +216,7 @@ pub fn prepare_session_directory(\n                 crate_dir.display(),\n                 err\n             ));\n-            return;\n+            return Err(ErrorReported);\n         }\n     };\n \n@@ -232,16 +231,11 @@ pub fn prepare_session_directory(\n \n         // Lock the new session directory. If this fails, return an\n         // error without retrying\n-        let (directory_lock, lock_file_path) = match lock_directory(sess, &session_dir) {\n-            Ok(e) => e,\n-            Err(_) => return,\n-        };\n+        let (directory_lock, lock_file_path) = lock_directory(sess, &session_dir)?;\n \n         // Now that we have the lock, we can actually create the session\n         // directory\n-        if create_dir(sess, &session_dir, \"session\").is_err() {\n-            return;\n-        }\n+        create_dir(sess, &session_dir, \"session\")?;\n \n         // Find a suitable source directory to copy from. Ignore those that we\n         // have already tried before.\n@@ -257,7 +251,7 @@ pub fn prepare_session_directory(\n             );\n \n             sess.init_incr_comp_session(session_dir, directory_lock, false);\n-            return;\n+            return Ok(());\n         };\n \n         debug!(\"attempting to copy data from source: {}\", source_directory.display());\n@@ -278,7 +272,7 @@ pub fn prepare_session_directory(\n             }\n \n             sess.init_incr_comp_session(session_dir, directory_lock, true);\n-            return;\n+            return Ok(());\n         } else {\n             debug!(\"copying failed - trying next directory\");\n \n@@ -478,7 +472,7 @@ fn generate_session_dir_path(crate_dir: &Path) -> PathBuf {\n     directory_path\n }\n \n-fn create_dir(sess: &Session, path: &Path, dir_tag: &str) -> Result<(), ()> {\n+fn create_dir(sess: &Session, path: &Path, dir_tag: &str) -> Result<(), ErrorReported> {\n     match std_fs::create_dir_all(path) {\n         Ok(()) => {\n             debug!(\"{} directory created successfully\", dir_tag);\n@@ -492,13 +486,16 @@ fn create_dir(sess: &Session, path: &Path, dir_tag: &str) -> Result<(), ()> {\n                 path.display(),\n                 err\n             ));\n-            Err(())\n+            Err(ErrorReported)\n         }\n     }\n }\n \n /// Allocate the lock-file and lock it.\n-fn lock_directory(sess: &Session, session_dir: &Path) -> Result<(flock::Lock, PathBuf), ()> {\n+fn lock_directory(\n+    sess: &Session,\n+    session_dir: &Path,\n+) -> Result<(flock::Lock, PathBuf), ErrorReported> {\n     let lock_file_path = lock_file_path(session_dir);\n     debug!(\"lock_directory() - lock_file: {}\", lock_file_path.display());\n \n@@ -510,13 +507,36 @@ fn lock_directory(sess: &Session, session_dir: &Path) -> Result<(flock::Lock, Pa\n     ) {\n         // the lock should be exclusive\n         Ok(lock) => Ok((lock, lock_file_path)),\n-        Err(err) => {\n-            sess.err(&format!(\n+        Err(lock_err) => {\n+            let mut err = sess.struct_err(&format!(\n                 \"incremental compilation: could not create \\\n-                               session directory lock file: {}\",\n-                err\n+                 session directory lock file: {}\",\n+                lock_err\n             ));\n-            Err(())\n+            if flock::Lock::error_unsupported(&lock_err) {\n+                err.note(&format!(\n+                    \"the filesystem for the incremental path at {} \\\n+                     does not appear to support locking, consider changing the \\\n+                     incremental path to a filesystem that supports locking \\\n+                     or disable incremental compilation\",\n+                    session_dir.display()\n+                ));\n+                if std::env::var_os(\"CARGO\").is_some() {\n+                    err.help(\n+                        \"incremental compilation can be disabled by setting the \\\n+                         environment variable CARGO_INCREMENTAL=0 (see \\\n+                         https://doc.rust-lang.org/cargo/reference/profiles.html#incremental)\",\n+                    );\n+                    err.help(\n+                        \"the entire build directory can be changed to a different \\\n+                        filesystem by setting the environment variable CARGO_TARGET_DIR \\\n+                        to a different path (see \\\n+                        https://doc.rust-lang.org/cargo/reference/config.html#buildtarget-dir)\",\n+                    );\n+                }\n+            }\n+            err.emit();\n+            Err(ErrorReported)\n         }\n     }\n }"}, {"sha": "f99d929023852a5dcd0ff9ed541cd0cf5714cdce", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=b663c0f4f6ff84a8c9df0f708e1f8d628330d973", "patch": "@@ -172,7 +172,7 @@ pub fn register_plugins<'a>(\n \n     let disambiguator = util::compute_crate_disambiguator(sess);\n     sess.crate_disambiguator.set(disambiguator).expect(\"not yet initialized\");\n-    rustc_incremental::prepare_session_directory(sess, &crate_name, disambiguator);\n+    rustc_incremental::prepare_session_directory(sess, &crate_name, disambiguator)?;\n \n     if sess.opts.incremental.is_some() {\n         sess.time(\"incr_comp_garbage_collect_session_directories\", || {"}, {"sha": "969b526235bb2affd4f023ad6555bb92f9380744", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=b663c0f4f6ff84a8c9df0f708e1f8d628330d973", "patch": "@@ -148,7 +148,7 @@ impl<'tcx> Queries<'tcx> {\n                 self.compiler.register_lints.as_deref().unwrap_or_else(|| empty),\n                 krate,\n                 &crate_name,\n-            );\n+            )?;\n \n             // Compute the dependency graph (in the background). We want to do\n             // this as early as possible, to give the DepGraph maximum time to\n@@ -157,7 +157,7 @@ impl<'tcx> Queries<'tcx> {\n             // called, which happens within passes::register_plugins().\n             self.dep_graph_future().ok();\n \n-            result\n+            Ok(result)\n         })\n     }\n "}, {"sha": "0461bb926e76ead8764557f1d7b2395cbd44ede2", "filename": "src/test/run-make/incremental-session-fail/Makefile", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/src%2Ftest%2Frun-make%2Fincremental-session-fail%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/src%2Ftest%2Frun-make%2Fincremental-session-fail%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fincremental-session-fail%2FMakefile?ref=b663c0f4f6ff84a8c9df0f708e1f8d628330d973", "patch": "@@ -0,0 +1,14 @@\n+include ../../run-make-fulldeps/tools.mk\n+\n+SESSION_DIR := $(TMPDIR)/session\n+OUTPUT_FILE := $(TMPDIR)/build-output\n+\n+all:\n+\techo $(TMPDIR)\n+\t# Make it so that rustc will fail to create a session directory.\n+\ttouch $(SESSION_DIR)\n+\t# Check exit code is 1 for an error, and not 101 for ICE.\n+\t$(RUSTC) foo.rs --crate-type=rlib -C incremental=$(SESSION_DIR) > $(OUTPUT_FILE) 2>&1; [ $$? -eq 1 ]\n+\t$(CGREP) \"Could not create incremental compilation crate directory\" < $(OUTPUT_FILE)\n+\t# -v tests are fragile, hopefully this text won't change\n+\t$(CGREP) -v \"internal compiler error\" < $(OUTPUT_FILE)"}, {"sha": "d11c69f812a8dfe9ea3db2474363c188c096c5b3", "filename": "src/test/run-make/incremental-session-fail/foo.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/src%2Ftest%2Frun-make%2Fincremental-session-fail%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b663c0f4f6ff84a8c9df0f708e1f8d628330d973/src%2Ftest%2Frun-make%2Fincremental-session-fail%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fincremental-session-fail%2Ffoo.rs?ref=b663c0f4f6ff84a8c9df0f708e1f8d628330d973", "patch": "@@ -0,0 +1 @@\n+// intentionally empty"}]}