{"sha": "09ef38b30b2ca04a4e194323ceb48609239fdabe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZWYzOGIzMGIyY2EwNGE0ZTE5NDMyM2NlYjQ4NjA5MjM5ZmRhYmU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-15T23:50:30Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-15T23:50:30Z"}, "message": "Merge pull request #676 from mcarton/hash_eq\n\nMake DERIVE_HASH_NOT_EQ symmetric", "tree": {"sha": "f1c73ed45ce8fe66a778ec2cc45eb8670f980fa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1c73ed45ce8fe66a778ec2cc45eb8670f980fa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09ef38b30b2ca04a4e194323ceb48609239fdabe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09ef38b30b2ca04a4e194323ceb48609239fdabe", "html_url": "https://github.com/rust-lang/rust/commit/09ef38b30b2ca04a4e194323ceb48609239fdabe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09ef38b30b2ca04a4e194323ceb48609239fdabe/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0", "html_url": "https://github.com/rust-lang/rust/commit/2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0"}, {"sha": "b5ba621f61a07193d3f7b0e7bd04204cc0dec4b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ba621f61a07193d3f7b0e7bd04204cc0dec4b4", "html_url": "https://github.com/rust-lang/rust/commit/b5ba621f61a07193d3f7b0e7bd04204cc0dec4b4"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "05737f142fa1ce8d398980881eb0586590680af2", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09ef38b30b2ca04a4e194323ceb48609239fdabe/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/09ef38b30b2ca04a4e194323ceb48609239fdabe/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=09ef38b30b2ca04a4e194323ceb48609239fdabe", "patch": "@@ -33,7 +33,7 @@ name\n [collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                               | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }` and an `else { if .. } expression can be collapsed to `else if`\n [cyclomatic_complexity](https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity)                 | warn    | finds functions that should be split up into multiple functions\n [deprecated_semver](https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver)                         | warn    | `Warn` on `#[deprecated(since = \"x\")]` where x is not semver\n-[derive_hash_not_eq](https://github.com/Manishearth/rust-clippy/wiki#derive_hash_not_eq)                       | warn    | deriving `Hash` but implementing `PartialEq` explicitly\n+[derive_hash_xor_eq](https://github.com/Manishearth/rust-clippy/wiki#derive_hash_xor_eq)                       | warn    | deriving `Hash` but implementing `PartialEq` explicitly\n [drop_ref](https://github.com/Manishearth/rust-clippy/wiki#drop_ref)                                           | warn    | call to `std::mem::drop` with a reference instead of an owned value, which will not call the `Drop::drop` method on the underlying value\n [duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument) | warn    | Function arguments having names which only differ by an underscore\n [empty_loop](https://github.com/Manishearth/rust-clippy/wiki#empty_loop)                                       | warn    | empty `loop {}` detected"}, {"sha": "084d00d409f763b229e8754958dae3bd81a1ce57", "filename": "src/derive.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/09ef38b30b2ca04a4e194323ceb48609239fdabe/src%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09ef38b30b2ca04a4e194323ceb48609239fdabe/src%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fderive.rs?ref=09ef38b30b2ca04a4e194323ceb48609239fdabe", "patch": "@@ -32,7 +32,7 @@ use utils::{match_path, span_lint_and_then};\n /// }\n /// ```\n declare_lint! {\n-    pub DERIVE_HASH_NOT_EQ,\n+    pub DERIVE_HASH_XOR_EQ,\n     Warn,\n     \"deriving `Hash` but implementing `PartialEq` explicitly\"\n }\n@@ -65,7 +65,7 @@ pub struct Derive;\n \n impl LintPass for Derive {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(EXPL_IMPL_CLONE_ON_COPY, DERIVE_HASH_NOT_EQ)\n+        lint_array!(EXPL_IMPL_CLONE_ON_COPY, DERIVE_HASH_XOR_EQ)\n     }\n }\n \n@@ -75,19 +75,25 @@ impl LateLintPass for Derive {\n             let ItemImpl(_, _, _, Some(ref trait_ref), _, _) = item.node\n         ], {\n             let ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(item.id)).ty;\n-            if item.attrs.iter().any(is_automatically_derived) {\n-                check_hash_peq(cx, item.span, trait_ref, ty);\n-            }\n-            else {\n+            let is_automatically_derived = item.attrs.iter().any(is_automatically_derived);\n+\n+            check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n+\n+            if !is_automatically_derived {\n                 check_copy_clone(cx, item, trait_ref, ty);\n             }\n         }}\n     }\n }\n \n-/// Implementation of the `DERIVE_HASH_NOT_EQ` lint.\n-fn check_hash_peq(cx: &LateContext, span: Span, trait_ref: &TraitRef, ty: ty::Ty) {\n-    // If `item` is an automatically derived `Hash` implementation\n+/// Implementation of the `DERIVE_HASH_XOR_EQ` lint.\n+fn check_hash_peq(\n+    cx: &LateContext,\n+    span: Span,\n+    trait_ref: &TraitRef,\n+    ty: ty::Ty,\n+    hash_is_automatically_derived: bool\n+) {\n     if_let_chain! {[\n         match_path(&trait_ref.path, &HASH_PATH),\n         let Some(peq_trait_def_id) = cx.tcx.lang_items.eq_trait()\n@@ -103,14 +109,25 @@ fn check_hash_peq(cx: &LateContext, span: Span, trait_ref: &TraitRef, ty: ty::Ty\n             let Some(impl_ids) = peq_impls.get(&simpl_ty)\n         ], {\n             for &impl_id in impl_ids {\n+                let peq_is_automatically_derived = cx.tcx.get_attrs(impl_id).iter().any(is_automatically_derived);\n+\n+                if peq_is_automatically_derived == hash_is_automatically_derived {\n+                    return;\n+                }\n+\n                 let trait_ref = cx.tcx.impl_trait_ref(impl_id).expect(\"must be a trait implementation\");\n \n                 // Only care about `impl PartialEq<Foo> for Foo`\n-                if trait_ref.input_types()[0] == ty &&\n-                  !cx.tcx.get_attrs(impl_id).iter().any(is_automatically_derived) {\n+                if trait_ref.input_types()[0] == ty {\n+                    let mess = if peq_is_automatically_derived {\n+                        \"you are implementing `Hash` explicitly but have derived `PartialEq`\"\n+                    } else {\n+                        \"you are deriving `Hash` but have implemented `PartialEq` explicitly\"\n+                    };\n+\n                     span_lint_and_then(\n-                        cx, DERIVE_HASH_NOT_EQ, span,\n-                        \"you are deriving `Hash` but have implemented `PartialEq` explicitly\",\n+                        cx, DERIVE_HASH_XOR_EQ, span,\n+                        mess,\n                         |db| {\n                         if let Some(node_id) = cx.tcx.map.as_local_node_id(impl_id) {\n                             db.span_note("}, {"sha": "bd13190f859cf4ef82feb3ca36eb531dcad48b2f", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09ef38b30b2ca04a4e194323ceb48609239fdabe/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09ef38b30b2ca04a4e194323ceb48609239fdabe/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=09ef38b30b2ca04a4e194323ceb48609239fdabe", "patch": "@@ -198,7 +198,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         copies::IFS_SAME_COND,\n         copies::MATCH_SAME_ARMS,\n         cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n-        derive::DERIVE_HASH_NOT_EQ,\n+        derive::DERIVE_HASH_XOR_EQ,\n         derive::EXPL_IMPL_CLONE_ON_COPY,\n         drop_ref::DROP_REF,\n         entry::MAP_ENTRY,"}, {"sha": "06f1388dc056916b978d6cb977d4bb965ebfcf63", "filename": "tests/compile-fail/derive.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09ef38b30b2ca04a4e194323ceb48609239fdabe/tests%2Fcompile-fail%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09ef38b30b2ca04a4e194323ceb48609239fdabe/tests%2Fcompile-fail%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderive.rs?ref=09ef38b30b2ca04a4e194323ceb48609239fdabe", "patch": "@@ -4,6 +4,8 @@\n #![deny(warnings)]\n #![allow(dead_code)]\n \n+use std::hash::{Hash, Hasher};\n+\n #[derive(PartialEq, Hash)]\n struct Foo;\n \n@@ -27,6 +29,14 @@ impl PartialEq<Baz> for Baz {\n     fn eq(&self, _: &Baz) -> bool { true }\n }\n \n+#[derive(PartialEq)]\n+struct Bah;\n+\n+impl Hash for Bah {\n+//~^ ERROR you are implementing `Hash` explicitly but have derived `PartialEq`\n+    fn hash<H: Hasher>(&self, _: &mut H) {}\n+}\n+\n #[derive(Copy)]\n struct Qux;\n "}]}