{"sha": "6d9b219e6f84325ee32c70a29bf782e7ad54ebc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOWIyMTllNmY4NDMyNWVlMzJjNzBhMjliZjc4MmU3YWQ1NGViYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-24T22:16:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-24T22:16:00Z"}, "message": "auto merge of #16646 : P1start/rust/trailing-commas, r=alexcrichton\n\nThis lets the parser understand trailing commas in method calls, method definitions, enum variants, and type parameters.\r\n\r\nCloses #14240.\r\nCloses #15887.", "tree": {"sha": "dd314a23c6ab1e045f15c822669bf8ade257adae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd314a23c6ab1e045f15c822669bf8ade257adae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d9b219e6f84325ee32c70a29bf782e7ad54ebc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d9b219e6f84325ee32c70a29bf782e7ad54ebc8", "html_url": "https://github.com/rust-lang/rust/commit/6d9b219e6f84325ee32c70a29bf782e7ad54ebc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d9b219e6f84325ee32c70a29bf782e7ad54ebc8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e8c30c5530eb73ced57426a357e5456bfa38fcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8c30c5530eb73ced57426a357e5456bfa38fcb", "html_url": "https://github.com/rust-lang/rust/commit/9e8c30c5530eb73ced57426a357e5456bfa38fcb"}, {"sha": "fde41a3f7026023ef968a41bcb256dc96a384e09", "url": "https://api.github.com/repos/rust-lang/rust/commits/fde41a3f7026023ef968a41bcb256dc96a384e09", "html_url": "https://github.com/rust-lang/rust/commit/fde41a3f7026023ef968a41bcb256dc96a384e09"}], "stats": {"total": 69, "additions": 49, "deletions": 20}, "files": [{"sha": "bd995d44fead55a513bd9320220a6ab3a8697473", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6d9b219e6f84325ee32c70a29bf782e7ad54ebc8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9b219e6f84325ee32c70a29bf782e7ad54ebc8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6d9b219e6f84325ee32c70a29bf782e7ad54ebc8", "patch": "@@ -86,6 +86,7 @@ use std::collections::HashSet;\n use std::mem::replace;\n use std::rc::Rc;\n use std::gc::{Gc, GC};\n+use std::iter;\n \n #[allow(non_camel_case_types)]\n #[deriving(PartialEq)]\n@@ -762,20 +763,26 @@ impl<'a> Parser<'a> {\n                                   sep: Option<token::Token>,\n                                   f: |&mut Parser| -> T)\n                                   -> OwnedSlice<T> {\n-        let mut first = true;\n         let mut v = Vec::new();\n-        while self.token != token::GT\n-            && self.token != token::BINOP(token::SHR)\n-            && self.token != token::GE\n-            && self.token != token::BINOPEQ(token::SHR) {\n-            match sep {\n-              Some(ref t) => {\n-                if first { first = false; }\n-                else { self.expect(t); }\n-              }\n-              _ => ()\n+        // This loop works by alternating back and forth between parsing types\n+        // and commas.  For example, given a string `A, B,>`, the parser would\n+        // first parse `A`, then a comma, then `B`, then a comma. After that it\n+        // would encounter a `>` and stop. This lets the parser handle trailing\n+        // commas in generic parameters, because it can stop either after\n+        // parsing a type or after parsing a comma.\n+        for i in iter::count(0u, 1) {\n+            if self.token == token::GT\n+                || self.token == token::BINOP(token::SHR)\n+                || self.token == token::GE\n+                || self.token == token::BINOPEQ(token::SHR) {\n+                break;\n+            }\n+\n+            if i % 2 == 0 {\n+                v.push(f(self));\n+            } else {\n+                sep.as_ref().map(|t| self.expect(t));\n             }\n-            v.push(f(self));\n         }\n         return OwnedSlice::from_vec(v);\n     }\n@@ -2266,7 +2273,7 @@ impl<'a> Parser<'a> {\n                             let mut es = self.parse_unspanned_seq(\n                                 &token::LPAREN,\n                                 &token::RPAREN,\n-                                seq_sep_trailing_disallowed(token::COMMA),\n+                                seq_sep_trailing_allowed(token::COMMA),\n                                 |p| p.parse_expr()\n                             );\n                             hi = self.last_span.hi;\n@@ -3196,7 +3203,7 @@ impl<'a> Parser<'a> {\n                                 args = self.parse_enum_variant_seq(\n                                     &token::LPAREN,\n                                     &token::RPAREN,\n-                                    seq_sep_trailing_disallowed(token::COMMA),\n+                                    seq_sep_trailing_allowed(token::COMMA),\n                                     |p| p.parse_pat()\n                                 );\n                                 pat = PatEnum(enum_path, Some(args));\n@@ -4068,7 +4075,7 @@ impl<'a> Parser<'a> {\n             match self.token {\n                 token::COMMA => {\n                     self.bump();\n-                    let sep = seq_sep_trailing_disallowed(token::COMMA);\n+                    let sep = seq_sep_trailing_allowed(token::COMMA);\n                     let mut fn_inputs = self.parse_seq_to_before_end(\n                         &token::RPAREN,\n                         sep,\n@@ -4091,7 +4098,7 @@ impl<'a> Parser<'a> {\n \n         let fn_inputs = match explicit_self {\n             SelfStatic =>  {\n-                let sep = seq_sep_trailing_disallowed(token::COMMA);\n+                let sep = seq_sep_trailing_allowed(token::COMMA);\n                 self.parse_seq_to_before_end(&token::RPAREN, sep, parse_arg_fn)\n             }\n             SelfValue(id) => parse_remaining_arguments!(id),\n@@ -4128,7 +4135,7 @@ impl<'a> Parser<'a> {\n                     self.parse_optional_unboxed_closure_kind();\n                 let args = self.parse_seq_to_before_end(\n                     &token::BINOP(token::OR),\n-                    seq_sep_trailing_disallowed(token::COMMA),\n+                    seq_sep_trailing_allowed(token::COMMA),\n                     |p| p.parse_fn_block_arg()\n                 );\n                 self.bump();\n@@ -4950,7 +4957,7 @@ impl<'a> Parser<'a> {\n                 let arg_tys = self.parse_enum_variant_seq(\n                     &token::LPAREN,\n                     &token::RPAREN,\n-                    seq_sep_trailing_disallowed(token::COMMA),\n+                    seq_sep_trailing_allowed(token::COMMA),\n                     |p| p.parse_ty(true)\n                 );\n                 for ty in arg_tys.move_iter() {"}, {"sha": "394ff831d9bd67086c52c19bb238ef90d9613700", "filename": "src/test/run-pass/trailing-comma.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6d9b219e6f84325ee32c70a29bf782e7ad54ebc8/src%2Ftest%2Frun-pass%2Ftrailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9b219e6f84325ee32c70a29bf782e7ad54ebc8/src%2Ftest%2Frun-pass%2Ftrailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrailing-comma.rs?ref=6d9b219e6f84325ee32c70a29bf782e7ad54ebc8", "patch": "@@ -8,9 +8,31 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(_: int,) {}\n+fn f<T,>(_: T,) {}\n+\n+struct Foo<T,>;\n+\n+struct Bar;\n+\n+impl Bar {\n+    fn f(_: int,) {}\n+    fn g(self, _: int,) {}\n+    fn h(self,) {}\n+}\n+\n+enum Baz {\n+    Qux(int,),\n+}\n \n pub fn main() {\n-    f(0i,);\n+    f::<int,>(0i,);\n     let (_, _,) = (1i, 1i,);\n+\n+    let x: Foo<int,> = Foo::<int,>;\n+\n+    Bar::f(0i,);\n+    Bar.g(0i,);\n+    Bar.h();\n+\n+    let x = Qux(1,);\n }"}]}