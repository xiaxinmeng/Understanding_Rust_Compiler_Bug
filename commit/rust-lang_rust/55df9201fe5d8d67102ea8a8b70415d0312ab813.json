{"sha": "55df9201fe5d8d67102ea8a8b70415d0312ab813", "node_id": "C_kwDOAAsO6NoAKDU1ZGY5MjAxZmU1ZDhkNjcxMDJlYThhOGI3MDQxNWQwMzEyYWI4MTM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-06T17:16:08Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-09T01:31:46Z"}, "message": "Tweak feature error, add test", "tree": {"sha": "f96dab4eab356366b01570ab703850892aacd450", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f96dab4eab356366b01570ab703850892aacd450"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55df9201fe5d8d67102ea8a8b70415d0312ab813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55df9201fe5d8d67102ea8a8b70415d0312ab813", "html_url": "https://github.com/rust-lang/rust/commit/55df9201fe5d8d67102ea8a8b70415d0312ab813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55df9201fe5d8d67102ea8a8b70415d0312ab813/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05812df603ab5940c1dffe6514b25c665dccfcf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/05812df603ab5940c1dffe6514b25c665dccfcf1", "html_url": "https://github.com/rust-lang/rust/commit/05812df603ab5940c1dffe6514b25c665dccfcf1"}], "stats": {"total": 61, "additions": 52, "deletions": 9}, "files": [{"sha": "9b4ee9b5a65721f3957ddfc7709d7fcac673ac27", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/55df9201fe5d8d67102ea8a8b70415d0312ab813/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df9201fe5d8d67102ea8a8b70415d0312ab813/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=55df9201fe5d8d67102ea8a8b70415d0312ab813", "patch": "@@ -312,7 +312,7 @@ impl std::fmt::Display for ImplTraitPosition {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, PartialEq, Eq)]\n enum FnDeclKind {\n     Fn,\n     Inherent,\n@@ -1373,6 +1373,18 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         }\n                         path\n                     }\n+                    ImplTraitContext::Disallowed(\n+                        position @ (ImplTraitPosition::TraitReturn | ImplTraitPosition::ImplReturn),\n+                    ) => {\n+                        self.tcx.sess.create_feature_err(\n+                            MisplacedImplTrait {\n+                                span: t.span,\n+                                position: DiagnosticArgFromDisplay(&position),\n+                            },\n+                            sym::return_position_impl_trait_in_trait,\n+                        ).emit();\n+                        hir::TyKind::Err\n+                    }\n                     ImplTraitContext::Disallowed(position) => {\n                         self.tcx.sess.emit_err(MisplacedImplTrait {\n                             span: t.span,\n@@ -1717,13 +1729,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }\n                 _ => {\n                     if !kind.impl_trait_return_allowed(self.tcx) {\n-                        self.tcx\n-                            .sess\n-                            .create_feature_err(\n-                                TraitFnAsync { fn_span, span },\n-                                sym::return_position_impl_trait_in_trait,\n-                            )\n-                            .emit();\n+                        if kind == FnDeclKind::Impl {\n+                            self.tcx\n+                                .sess\n+                                .create_feature_err(\n+                                    TraitFnAsync { fn_span, span },\n+                                    sym::return_position_impl_trait_in_trait,\n+                                )\n+                                .emit();\n+                        } else {\n+                            self.tcx.sess.emit_err(TraitFnAsync { fn_span, span });\n+                        }\n                     }\n                     self.lower_async_fn_ret_ty(\n                         &decl.output,"}, {"sha": "6c17077d90b95fbd69e432499687417eb09a4305", "filename": "src/test/ui/async-await/async-trait-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df9201fe5d8d67102ea8a8b70415d0312ab813/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55df9201fe5d8d67102ea8a8b70415d0312ab813/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr?ref=55df9201fe5d8d67102ea8a8b70415d0312ab813", "patch": "@@ -62,7 +62,7 @@ LL |     async fn bar(&self) {}\n LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n-   = note: expected associated type `<Self as T>::bar::{opaque#0}`\n+   = note: expected associated type `<Self as T>::bar::{opaque#0}<'_>`\n                   found opaque type `impl Future<Output = ()>`\n \n error[E0308]: mismatched types"}, {"sha": "36177bbe1583023b9c729f2141395bedecd3bb05", "filename": "src/test/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55df9201fe5d8d67102ea8a8b70415d0312ab813/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55df9201fe5d8d67102ea8a8b70415d0312ab813/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr?ref=55df9201fe5d8d67102ea8a8b70415d0312ab813", "patch": "@@ -3,6 +3,9 @@ error[E0562]: `impl Trait` only allowed in function and inherent method return t\n    |\n LL |     fn bar() -> impl Sized;\n    |                 ^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "d6ede1cc495c6dc5729847785dbc552876c62cc7", "filename": "src/test/ui/impl-trait/in-trait/reveal.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/55df9201fe5d8d67102ea8a8b70415d0312ab813/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Freveal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df9201fe5d8d67102ea8a8b70415d0312ab813/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Freveal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Freveal.rs?ref=55df9201fe5d8d67102ea8a8b70415d0312ab813", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    fn f() -> Box<impl Sized>;\n+}\n+\n+impl Foo for () {\n+    fn f() -> Box<String> {\n+        Box::new(String::new())\n+    }\n+}\n+\n+fn main() {\n+    let x: Box<String> = <() as Foo>::f();\n+}"}, {"sha": "9b346387d61064cbf9bd4d01a47fb4fd0cc1028a", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55df9201fe5d8d67102ea8a8b70415d0312ab813/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55df9201fe5d8d67102ea8a8b70415d0312ab813/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=55df9201fe5d8d67102ea8a8b70415d0312ab813", "patch": "@@ -162,12 +162,18 @@ error[E0562]: `impl Trait` only allowed in function and inherent method return t\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n   --> $DIR/where-allowed.rs:125:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` param\n   --> $DIR/where-allowed.rs:138:33"}]}