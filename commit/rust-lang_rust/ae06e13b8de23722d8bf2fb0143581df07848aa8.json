{"sha": "ae06e13b8de23722d8bf2fb0143581df07848aa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMDZlMTNiOGRlMjM3MjJkOGJmMmZiMDE0MzU4MWRmMDc4NDhhYTg=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-07-22T23:38:58Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-07-22T23:38:58Z"}, "message": "Move the pipe2 call behind a hard target `#[cfg]`", "tree": {"sha": "7b6ed366f727ef104c7aa3896d25963ae9625eea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b6ed366f727ef104c7aa3896d25963ae9625eea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae06e13b8de23722d8bf2fb0143581df07848aa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae06e13b8de23722d8bf2fb0143581df07848aa8", "html_url": "https://github.com/rust-lang/rust/commit/ae06e13b8de23722d8bf2fb0143581df07848aa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae06e13b8de23722d8bf2fb0143581df07848aa8/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37dd7a023b8cef226c73bb9e17b37e379b4ffb48", "url": "https://api.github.com/repos/rust-lang/rust/commits/37dd7a023b8cef226c73bb9e17b37e379b4ffb48", "html_url": "https://github.com/rust-lang/rust/commit/37dd7a023b8cef226c73bb9e17b37e379b4ffb48"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "2fcb5b9c4e66e722098efde38810b1ab60389582", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae06e13b8de23722d8bf2fb0143581df07848aa8/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae06e13b8de23722d8bf2fb0143581df07848aa8/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=ae06e13b8de23722d8bf2fb0143581df07848aa8", "patch": "@@ -71,6 +71,7 @@ pub fn errno() -> i32 {\n \n /// Sets the platform-specific value of errno\n #[cfg(all(not(target_os = \"linux\"), not(target_os = \"dragonfly\")))] // needed for readdir and syscall!\n+#[allow(dead_code)] // but not all target cfgs actually end up using it\n pub fn set_errno(e: i32) {\n     unsafe { *errno_location() = e as c_int }\n }"}, {"sha": "7ae37bdda70bded963b72d304b7abbbbfed904a9", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ae06e13b8de23722d8bf2fb0143581df07848aa8/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae06e13b8de23722d8bf2fb0143581df07848aa8/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=ae06e13b8de23722d8bf2fb0143581df07848aa8", "patch": "@@ -12,27 +12,29 @@ pub struct AnonPipe(FileDesc);\n pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n     let mut fds = [0; 2];\n \n-    // Unfortunately the only known way right now to create atomically set the\n-    // CLOEXEC flag is to use the `pipe2` syscall on Linux. This was added in\n-    // 2.6.27, glibc 2.9 and musl 0.9.3.\n-    if cfg!(any(\n-        target_os = \"dragonfly\",\n-        target_os = \"freebsd\",\n-        target_os = \"linux\",\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-        target_os = \"redox\"\n-    )) {\n-        cvt(unsafe { libc::pipe2(fds.as_mut_ptr(), libc::O_CLOEXEC) })?;\n-        Ok((AnonPipe(FileDesc::new(fds[0])), AnonPipe(FileDesc::new(fds[1]))))\n-    } else {\n-        cvt(unsafe { libc::pipe(fds.as_mut_ptr()) })?;\n-\n-        let fd0 = FileDesc::new(fds[0]);\n-        let fd1 = FileDesc::new(fds[1]);\n-        fd0.set_cloexec()?;\n-        fd1.set_cloexec()?;\n-        Ok((AnonPipe(fd0), AnonPipe(fd1)))\n+    // The only known way right now to create atomically set the CLOEXEC flag is\n+    // to use the `pipe2` syscall. This was added to Linux in 2.6.27, glibc 2.9\n+    // and musl 0.9.3, and some other targets also have it.\n+    cfg_if::cfg_if! {\n+        if #[cfg(any(\n+            target_os = \"dragonfly\",\n+            target_os = \"freebsd\",\n+            target_os = \"linux\",\n+            target_os = \"netbsd\",\n+            target_os = \"openbsd\",\n+            target_os = \"redox\"\n+        ))] {\n+            cvt(unsafe { libc::pipe2(fds.as_mut_ptr(), libc::O_CLOEXEC) })?;\n+            Ok((AnonPipe(FileDesc::new(fds[0])), AnonPipe(FileDesc::new(fds[1]))))\n+        } else {\n+            cvt(unsafe { libc::pipe(fds.as_mut_ptr()) })?;\n+\n+            let fd0 = FileDesc::new(fds[0]);\n+            let fd1 = FileDesc::new(fds[1]);\n+            fd0.set_cloexec()?;\n+            fd1.set_cloexec()?;\n+            Ok((AnonPipe(fd0), AnonPipe(fd1)))\n+        }\n     }\n }\n "}, {"sha": "f4b33a00f7c85d79d8b682be0884024283a529f0", "filename": "src/libstd/sys/unix/weak.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae06e13b8de23722d8bf2fb0143581df07848aa8/src%2Flibstd%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae06e13b8de23722d8bf2fb0143581df07848aa8/src%2Flibstd%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fweak.rs?ref=ae06e13b8de23722d8bf2fb0143581df07848aa8", "patch": "@@ -16,6 +16,11 @@\n //! symbol, but that caused Debian to detect an unnecessarily strict versioned\n //! dependency on libc6 (#23628).\n \n+// There are a variety of `#[cfg]`s controlling which targets are involved in\n+// each instance of `weak!` and `syscall!`. Rather than trying to unify all of\n+// that, we'll just allow that some unix targets don't use this module at all.\n+#![allow(dead_code, unused_macros)]\n+\n use crate::ffi::CStr;\n use crate::marker;\n use crate::mem;"}]}