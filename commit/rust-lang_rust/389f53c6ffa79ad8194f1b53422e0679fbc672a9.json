{"sha": "389f53c6ffa79ad8194f1b53422e0679fbc672a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OWY1M2M2ZmZhNzlhZDgxOTRmMWI1MzQyMmUwNjc5ZmJjNjcyYTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-16T01:58:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-16T01:58:30Z"}, "message": "core: Docs", "tree": {"sha": "b0666365a88e0c749a3818b96e46ce8c6a220036", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0666365a88e0c749a3818b96e46ce8c6a220036"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/389f53c6ffa79ad8194f1b53422e0679fbc672a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/389f53c6ffa79ad8194f1b53422e0679fbc672a9", "html_url": "https://github.com/rust-lang/rust/commit/389f53c6ffa79ad8194f1b53422e0679fbc672a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/389f53c6ffa79ad8194f1b53422e0679fbc672a9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07d0981bbbbb1b0f2a44dc34b1bb6e92a9156d3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/07d0981bbbbb1b0f2a44dc34b1bb6e92a9156d3e", "html_url": "https://github.com/rust-lang/rust/commit/07d0981bbbbb1b0f2a44dc34b1bb6e92a9156d3e"}], "stats": {"total": 83, "additions": 71, "deletions": 12}, "files": [{"sha": "0e33a0e30b596127a00382c49e06468b03631b8a", "filename": "src/libcore/path.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/389f53c6ffa79ad8194f1b53422e0679fbc672a9/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389f53c6ffa79ad8194f1b53422e0679fbc672a9/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=389f53c6ffa79ad8194f1b53422e0679fbc672a9", "patch": "@@ -1,10 +1,36 @@\n-#[doc = \"Path data type and helper functions\"]\n+#[doc = \"Path data type and helper functions\"];\n+\n+export path;\n+export consts;\n+export path_is_absolute;\n+export path_sep;\n+export dirname;\n+export basename;\n+export connect;\n+export connect_many;\n+export split;\n+export splitext;\n+export normalize;\n+\n+// FIXME: This type should probably be constrained\n+#[doc = \"A path or fragment of a filesystem path\"]\n+type path = str;\n \n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n #[cfg(target_os = \"linux\")]\n mod consts {\n+    #[doc = \"\n+    The primary path seperator character for the platform\n+\n+    On all platforms it is '/'\n+    \"]\n     const path_sep: char = '/';\n+    #[doc = \"\n+    The secondary path seperator character for the platform\n+\n+    On Unixes it is '/'. On Windows it is '\\\\'.\n+    \"]\n     const alt_path_sep: char = '/';\n }\n \n@@ -35,15 +61,9 @@ fn path_is_absolute(p: str) -> bool {\n             || str::char_at(p, 2u) == consts::alt_path_sep);\n }\n \n-\n-\n #[doc = \"Get the default path separator for the host platform\"]\n fn path_sep() -> str { ret str::from_char(consts::path_sep); }\n \n-// FIXME: This type should probably be constrained\n-#[doc = \"A path or fragment of a filesystem path\"]\n-type path = str;\n-\n fn split_dirname_basename (pp: path) -> {dirname: str, basename: str} {\n     alt str::rfind(pp, {|ch|\n         ch == consts::path_sep || ch == consts::alt_path_sep"}, {"sha": "a2e985ba008893df8d9346f6631c09295d175ed1", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389f53c6ffa79ad8194f1b53422e0679fbc672a9/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389f53c6ffa79ad8194f1b53422e0679fbc672a9/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=389f53c6ffa79ad8194f1b53422e0679fbc672a9", "patch": "@@ -1,4 +1,6 @@\n-#[doc = \"Random number generation\"]\n+#[doc = \"Random number generation\"];\n+\n+export rng;\n \n enum rctx {}\n "}, {"sha": "9fb3517d8cfd4a5d6c3a566e118a708f4ad941a1", "filename": "src/libcore/str.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/389f53c6ffa79ad8194f1b53422e0679fbc672a9/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389f53c6ffa79ad8194f1b53422e0679fbc672a9/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=389f53c6ffa79ad8194f1b53422e0679fbc672a9", "patch": "@@ -961,6 +961,7 @@ fn is_utf8(v: [const u8]) -> bool {\n     ret true;\n }\n \n+#[doc = \"Determines if a vector of `u16` contains valid UTF-16\"]\n fn is_utf16(v: [const u16]) -> bool {\n     let len = v.len();\n     let mut i = 0u;\n@@ -981,6 +982,7 @@ fn is_utf16(v: [const u16]) -> bool {\n     ret true;\n }\n \n+#[doc = \"Converts to a vector of `u16` encoded as UTF-16\"]\n fn to_utf16(s: str) -> [u16] {\n     let mut u = [];\n     chars_iter(s) {|cch|\n@@ -1200,7 +1202,7 @@ Loop through a substring, char by char\n # Safety note\n \n * This function does not check whether the substring is valid.\n-* This function fails if `byte_offset` or `byte_len` do not\n+* This function fails if `start` or `end` do not\n   represent valid positions inside `s`\n \n # Arguments\n@@ -1227,6 +1229,27 @@ fn all_between(s: str, start: uint, end: uint, it: fn(char) -> bool) -> bool {\n     ret true;\n }\n \n+#[doc = \"\n+Loop through a substring, char by char\n+\n+# Safety note\n+\n+* This function does not check whether the substring is valid.\n+* This function fails if `start` or `end` do not\n+  represent valid positions inside `s`\n+\n+# Arguments\n+\n+* s - A string to traverse. It may be empty.\n+* start - The byte offset at which to start in the string.\n+* end - The end of the range to traverse\n+* it - A block to execute with each consecutive character of `s`.\n+       Return `true` to continue, `false` to stop.\n+\n+# Return value\n+\n+`true` if `it` returns `true` for any character\n+\"]\n fn any_between(s: str, start: uint, end: uint, it: fn(char) -> bool) -> bool {\n     !all_between(s, start, end, {|c| !it(c)})\n }"}, {"sha": "98840dadc1115083e43d8242bca6aa44a2232d91", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/389f53c6ffa79ad8194f1b53422e0679fbc672a9/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389f53c6ffa79ad8194f1b53422e0679fbc672a9/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=389f53c6ffa79ad8194f1b53422e0679fbc672a9", "patch": "@@ -1,13 +1,18 @@\n+#[doc = \"Operations on tuples\"];\n+\n+#[doc = \"Return the first element of a pair\"]\n pure fn first<T:copy, U:copy>(pair: (T, U)) -> T {\n     let (t, _) = pair;\n     ret t;\n }\n \n+#[doc = \"Return the second element of a pair\"]\n pure fn second<T:copy, U:copy>(pair: (T, U)) -> U {\n     let (_, u) = pair;\n     ret u;\n }\n \n+#[doc = \"Return the results of swapping the two elements of a pair\"]\n pure fn swap<T:copy, U:copy>(pair: (T, U)) -> (U, T) {\n     let (t, u) = pair;\n     ret (u, t);"}, {"sha": "30609fe9c3cf075fbb0f78555649ac6de3a6374e", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/389f53c6ffa79ad8194f1b53422e0679fbc672a9/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389f53c6ffa79ad8194f1b53422e0679fbc672a9/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=389f53c6ffa79ad8194f1b53422e0679fbc672a9", "patch": "@@ -1,3 +1,5 @@\n+#[doc = \"Vectors\"];\n+\n import option::{some, none};\n import uint::next_power_of_two;\n import ptr::addr_of;\n@@ -396,7 +398,7 @@ fn grow_set<T: copy>(&v: [mutable T], index: uint, initval: T, val: T) {\n \n // Functional utilities\n \n-#[doc =\"\n+#[doc = \"\n Apply a function to each element of a vector and return the results\n \"]\n fn map<T, U>(v: [T], f: fn(T) -> U) -> [U] {\n@@ -406,15 +408,17 @@ fn map<T, U>(v: [T], f: fn(T) -> U) -> [U] {\n     ret result;\n }\n \n+#[doc = \"\n+Apply a function eo each element of a vector and return a concatenation\n+of each result vector\n+\"]\n fn flat_map<T, U>(v: [T], f: fn(T) -> [U]) -> [U] {\n     let mut result = [];\n     for elem: T in v { result += f(elem); }\n     ret result;\n }\n \n #[doc = \"\n-Function: map2\n-\n Apply a function to each pair of elements and return the results\n \"]\n fn map2<T: copy, U: copy, V>(v0: [const T], v1: [const U],\n@@ -860,13 +864,17 @@ fn as_mut_buf<E,T>(v: [mutable E], f: fn(*mutable E) -> T) -> T unsafe {\n     let buf = unsafe::to_ptr(v) as *mutable E; f(buf)\n }\n \n+#[doc = \"An extension implementation providing a `len` method\"]\n impl vec_len<T> for [T] {\n+    #[doc = \"Return the length of the vector\"]\n     #[inline(always)]\n     fn len() -> uint { len(self) }\n }\n \n+#[doc = \"Unsafe operations\"]\n mod unsafe {\n     // FIXME: This should have crate visibility\n+    #[doc = \"The internal representation of a vector\"]\n     type vec_repr = {mutable fill: uint, mutable alloc: uint, data: u8};\n \n     #[doc = \"\n@@ -912,6 +920,7 @@ mod unsafe {\n     }\n }\n \n+#[doc = \"Operations on `[u8]`\"]\n mod u8 {\n     export cmp;\n     export lt, le, eq, ne, ge, gt;"}]}