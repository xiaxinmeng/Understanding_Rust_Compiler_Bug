{"sha": "a59a2d3f6a80001b0610f03cfc7a6452b63f8935", "node_id": "C_kwDOAAsO6NoAKGE1OWEyZDNmNmE4MDAwMWIwNjEwZjAzY2ZjN2E2NDUyYjYzZjg5MzU", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-12-03T23:21:19Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-12-04T03:09:40Z"}, "message": "Also avoid creating a terminating scope in mixed chains\n\nThis avoids creation of a terminating scope in\nchains that contain both && and ||, because\nalso there we know that a terminating scope is\nnot neccessary: all the chain members are already\nin such terminating scopes.\n\nAlso add a mixed && / || test.", "tree": {"sha": "2a3e2faa00f2c85fcf99a01ff85f5a8e2e12f920", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a3e2faa00f2c85fcf99a01ff85f5a8e2e12f920"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a59a2d3f6a80001b0610f03cfc7a6452b63f8935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a59a2d3f6a80001b0610f03cfc7a6452b63f8935", "html_url": "https://github.com/rust-lang/rust/commit/a59a2d3f6a80001b0610f03cfc7a6452b63f8935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a59a2d3f6a80001b0610f03cfc7a6452b63f8935/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2076dc0a67b0fec7fe0548d0038eed46e714535", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2076dc0a67b0fec7fe0548d0038eed46e714535", "html_url": "https://github.com/rust-lang/rust/commit/a2076dc0a67b0fec7fe0548d0038eed46e714535"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "b315ebad4686c37d4bac86575a991a744e2c27f0", "filename": "compiler/rustc_hir_analysis/src/check/region.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a59a2d3f6a80001b0610f03cfc7a6452b63f8935/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59a2d3f6a80001b0610f03cfc7a6452b63f8935/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs?ref=a59a2d3f6a80001b0610f03cfc7a6452b63f8935", "patch": "@@ -241,12 +241,7 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n             // scopes, meaning that temporaries cannot outlive them.\n             // This ensures fixed size stacks.\n             hir::ExprKind::Binary(\n-                source_map::Spanned { node: outer @ hir::BinOpKind::And, .. },\n-                ref l,\n-                ref r,\n-            )\n-            | hir::ExprKind::Binary(\n-                source_map::Spanned { node: outer @ hir::BinOpKind::Or, .. },\n+                source_map::Spanned { node: hir::BinOpKind::And | hir::BinOpKind::Or, .. },\n                 ref l,\n                 ref r,\n             ) => {\n@@ -268,14 +263,19 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n                 // into a terminating scope if it is not a binop.\n \n                 let terminate_lhs = match l.kind {\n+                    // let expressions can create temporaries that live on\n                     hir::ExprKind::Let(_) => false,\n-                    hir::ExprKind::Binary(source_map::Spanned { node, .. }, ..)\n-                        if node == outer =>\n-                    {\n-                        false\n-                    }\n-                    // If the LHS is not another binop itself of the same kind as\n-                    // the current binop, mark it as terminating.\n+                    // binops already drop their temporaries, so there is no\n+                    // need to put them into a terminating scope.\n+                    // This is purely an optimization to reduce the number of\n+                    // terminating scopes.\n+                    hir::ExprKind::Binary(\n+                        source_map::Spanned {\n+                            node: hir::BinOpKind::And | hir::BinOpKind::Or, ..\n+                        },\n+                        ..,\n+                    ) => false,\n+                    // otherwise: mark it as terminating\n                     _ => true,\n                 };\n                 if terminate_lhs {"}, {"sha": "5ce1fd54a9e62027a7f53517d8fb03fb74c14207", "filename": "src/test/ui/drop/drop_order.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a59a2d3f6a80001b0610f03cfc7a6452b63f8935/src%2Ftest%2Fui%2Fdrop%2Fdrop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59a2d3f6a80001b0610f03cfc7a6452b63f8935/src%2Ftest%2Fui%2Fdrop%2Fdrop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdrop_order.rs?ref=a59a2d3f6a80001b0610f03cfc7a6452b63f8935", "patch": "@@ -172,6 +172,20 @@ impl DropOrderCollector {\n         }\n     }\n \n+    fn mixed_and_or_chain(&self) {\n+        // issue-103107\n+        if self.option_loud_drop(1).is_none() // 1\n+            || self.option_loud_drop(2).is_none() // 2\n+            || self.option_loud_drop(3).is_some() // 3\n+            && self.option_loud_drop(4).is_some() // 4\n+            && self.option_loud_drop(5).is_none() // 5\n+            || self.option_loud_drop(6).is_none() // 6\n+            || self.option_loud_drop(7).is_some() // 7\n+        {\n+            self.print(8); // 8\n+        }\n+    }\n+\n     fn let_chain(&self) {\n         // take the \"then\" branch\n         if self.option_loud_drop(1).is_some() // 1\n@@ -251,6 +265,11 @@ fn main() {\n     collector.or_chain();\n     collector.assert_sorted();\n \n+    println!(\"-- mixed and/or chain --\");\n+    let collector = DropOrderCollector::default();\n+    collector.mixed_and_or_chain();\n+    collector.assert_sorted();\n+\n     println!(\"-- if let --\");\n     let collector = DropOrderCollector::default();\n     collector.if_let();"}]}