{"sha": "ef6b583a80495ccbfd378eb19ebec3d633036790", "node_id": "C_kwDOAAsO6NoAKGVmNmI1ODNhODA0OTVjY2JmZDM3OGViMTllYmVjM2Q2MzMwMzY3OTA", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-31T10:07:29Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-31T10:09:23Z"}, "message": "Don't accept `Edition` by ref", "tree": {"sha": "c0bde954d3c27444c5db0cc799ed64830b3f314b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0bde954d3c27444c5db0cc799ed64830b3f314b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef6b583a80495ccbfd378eb19ebec3d633036790", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6b583a80495ccbfd378eb19ebec3d633036790", "html_url": "https://github.com/rust-lang/rust/commit/ef6b583a80495ccbfd378eb19ebec3d633036790", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef6b583a80495ccbfd378eb19ebec3d633036790/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03158f40d2fc66d41ae3432edbb644f939c892bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/03158f40d2fc66d41ae3432edbb644f939c892bf", "html_url": "https://github.com/rust-lang/rust/commit/03158f40d2fc66d41ae3432edbb644f939c892bf"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "e66ec07904341b8585d529f82c2d87adc829bbc7", "filename": "compiler/rustc_span/src/edition.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ef6b583a80495ccbfd378eb19ebec3d633036790/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6b583a80495ccbfd378eb19ebec3d633036790/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fedition.rs?ref=ef6b583a80495ccbfd378eb19ebec3d633036790", "patch": "@@ -49,26 +49,26 @@ impl fmt::Display for Edition {\n }\n \n impl Edition {\n-    pub fn lint_name(&self) -> &'static str {\n-        match *self {\n+    pub fn lint_name(self) -> &'static str {\n+        match self {\n             Edition::Edition2015 => \"rust_2015_compatibility\",\n             Edition::Edition2018 => \"rust_2018_compatibility\",\n             Edition::Edition2021 => \"rust_2021_compatibility\",\n             Edition::Edition2024 => \"rust_2024_compatibility\",\n         }\n     }\n \n-    pub fn feature_name(&self) -> Symbol {\n-        match *self {\n+    pub fn feature_name(self) -> Symbol {\n+        match self {\n             Edition::Edition2015 => sym::rust_2015_preview,\n             Edition::Edition2018 => sym::rust_2018_preview,\n             Edition::Edition2021 => sym::rust_2021_preview,\n             Edition::Edition2024 => sym::rust_2024_preview,\n         }\n     }\n \n-    pub fn is_stable(&self) -> bool {\n-        match *self {\n+    pub fn is_stable(self) -> bool {\n+        match self {\n             Edition::Edition2015 => true,\n             Edition::Edition2018 => true,\n             Edition::Edition2021 => true,\n@@ -77,23 +77,23 @@ impl Edition {\n     }\n \n     /// Is this edition 2015?\n-    pub fn rust_2015(&self) -> bool {\n-        *self == Edition::Edition2015\n+    pub fn rust_2015(self) -> bool {\n+        self == Edition::Edition2015\n     }\n \n     /// Are we allowed to use features from the Rust 2018 edition?\n-    pub fn rust_2018(&self) -> bool {\n-        *self >= Edition::Edition2018\n+    pub fn rust_2018(self) -> bool {\n+        self >= Edition::Edition2018\n     }\n \n     /// Are we allowed to use features from the Rust 2021 edition?\n-    pub fn rust_2021(&self) -> bool {\n-        *self >= Edition::Edition2021\n+    pub fn rust_2021(self) -> bool {\n+        self >= Edition::Edition2021\n     }\n \n     /// Are we allowed to use features from the Rust 2024 edition?\n-    pub fn rust_2024(&self) -> bool {\n-        *self >= Edition::Edition2024\n+    pub fn rust_2024(self) -> bool {\n+        self >= Edition::Edition2024\n     }\n }\n "}]}