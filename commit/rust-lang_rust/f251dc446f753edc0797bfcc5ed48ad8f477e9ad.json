{"sha": "f251dc446f753edc0797bfcc5ed48ad8f477e9ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNTFkYzQ0NmY3NTNlZGMwNzk3YmZjYzVlZDQ4YWQ4ZjQ3N2U5YWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-19T09:08:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-05T07:12:54Z"}, "message": "VecDeque: fix incorrect &mut aliasing in IterMut::next/next_back", "tree": {"sha": "7c96410a10b9ce152036a601c281d9ff8f5ff03a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c96410a10b9ce152036a601c281d9ff8f5ff03a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f251dc446f753edc0797bfcc5ed48ad8f477e9ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f251dc446f753edc0797bfcc5ed48ad8f477e9ad", "html_url": "https://github.com/rust-lang/rust/commit/f251dc446f753edc0797bfcc5ed48ad8f477e9ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f251dc446f753edc0797bfcc5ed48ad8f477e9ad/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "url": "https://api.github.com/repos/rust-lang/rust/commits/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "html_url": "https://github.com/rust-lang/rust/commit/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "39b4223b0fd77ce8e8fca8338be9df6723a2b026", "filename": "library/alloc/src/collections/vec_deque.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f251dc446f753edc0797bfcc5ed48ad8f477e9ad/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f251dc446f753edc0797bfcc5ed48ad8f477e9ad/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs?ref=f251dc446f753edc0797bfcc5ed48ad8f477e9ad", "patch": "@@ -14,6 +14,7 @@ use core::cmp::{self, Ordering};\n use core::fmt;\n use core::hash::{Hash, Hasher};\n use core::iter::{repeat_with, FromIterator, FusedIterator};\n+use core::marker::PhantomData;\n use core::mem::{self, replace, ManuallyDrop};\n use core::ops::{Index, IndexMut, Range, RangeBounds, Try};\n use core::ptr::{self, NonNull};\n@@ -982,7 +983,12 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n-        IterMut { tail: self.tail, head: self.head, ring: unsafe { self.buffer_as_mut_slice() } }\n+        IterMut {\n+            tail: self.tail,\n+            head: self.head,\n+            ring: unsafe { self.buffer_as_mut_slice() },\n+            phantom: PhantomData,\n+        }\n     }\n \n     /// Returns a pair of slices which contain, in order, the contents of the\n@@ -1175,6 +1181,7 @@ impl<T> VecDeque<T> {\n             head,\n             // The shared reference we have in &mut self is maintained in the '_ of IterMut.\n             ring: unsafe { self.buffer_as_mut_slice() },\n+            phantom: PhantomData,\n         }\n     }\n \n@@ -2662,15 +2669,19 @@ impl<T> FusedIterator for Iter<'_, T> {}\n /// [`iter_mut`]: VecDeque::iter_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n-    ring: &'a mut [T],\n+    ring: *mut [T],\n     tail: usize,\n     head: usize,\n+    phantom: PhantomData<&'a mut [T]>,\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let (front, back) = RingSlices::ring_slices(&*self.ring, self.head, self.tail);\n+        // FIXME: this creates a reference to the full ring, including the part\n+        // to which we already handed out mutable references via `next()`. This\n+        // is an aliasing violation.\n+        let (front, back) = RingSlices::ring_slices(unsafe { &*self.ring }, self.head, self.tail);\n         f.debug_tuple(\"IterMut\").field(&front).field(&back).finish()\n     }\n }\n@@ -2689,7 +2700,7 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n \n         unsafe {\n             let elem = self.ring.get_unchecked_mut(tail);\n-            Some(&mut *(elem as *mut _))\n+            Some(&mut *elem)\n         }\n     }\n \n@@ -2703,7 +2714,10 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n     where\n         F: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n+        // FIXME: this creates a reference to the full ring, including the part\n+        // to which we already handed out mutable references via `next()`. This\n+        // is an aliasing violation.\n+        let (front, back) = RingSlices::ring_slices(unsafe { &mut *self.ring }, self.head, self.tail);\n         accum = front.iter_mut().fold(accum, &mut f);\n         back.iter_mut().fold(accum, &mut f)\n     }\n@@ -2735,15 +2749,18 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n \n         unsafe {\n             let elem = self.ring.get_unchecked_mut(self.head);\n-            Some(&mut *(elem as *mut _))\n+            Some(&mut *elem)\n         }\n     }\n \n     fn rfold<Acc, F>(self, mut accum: Acc, mut f: F) -> Acc\n     where\n         F: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n+        // FIXME: this creates a reference to the full ring, including the part\n+        // to which we already handed out mutable references via `next()`. This\n+        // is an aliasing violation.\n+        let (front, back) = RingSlices::ring_slices(unsafe { &mut *self.ring }, self.head, self.tail);\n         accum = back.iter_mut().rfold(accum, &mut f);\n         front.iter_mut().rfold(accum, &mut f)\n     }"}]}