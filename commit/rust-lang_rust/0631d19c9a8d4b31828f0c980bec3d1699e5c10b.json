{"sha": "0631d19c9a8d4b31828f0c980bec3d1699e5c10b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MzFkMTljOWE4ZDRiMzE4MjhmMGM5ODBiZWMzZDE2OTllNWMxMGI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-28T20:46:48Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-28T20:46:56Z"}, "message": "Avoid unneeded bug!() call", "tree": {"sha": "8c1295c7a82e97ff8b439df7f70e451acdac6c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c1295c7a82e97ff8b439df7f70e451acdac6c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0631d19c9a8d4b31828f0c980bec3d1699e5c10b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0631d19c9a8d4b31828f0c980bec3d1699e5c10b", "html_url": "https://github.com/rust-lang/rust/commit/0631d19c9a8d4b31828f0c980bec3d1699e5c10b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0631d19c9a8d4b31828f0c980bec3d1699e5c10b/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7da118581c9dc839c8bf3fbb622bab9ce32bbf38", "url": "https://api.github.com/repos/rust-lang/rust/commits/7da118581c9dc839c8bf3fbb622bab9ce32bbf38", "html_url": "https://github.com/rust-lang/rust/commit/7da118581c9dc839c8bf3fbb622bab9ce32bbf38"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "cd32d6f484d730f671a650f06edb4c284954db8a", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0631d19c9a8d4b31828f0c980bec3d1699e5c10b/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0631d19c9a8d4b31828f0c980bec3d1699e5c10b/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=0631d19c9a8d4b31828f0c980bec3d1699e5c10b", "patch": "@@ -396,22 +396,20 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let cx = self.cx;\n         let tcx = self.cx.tcx();\n \n-        if let mir::Place::Base(mir::PlaceBase::Local(index)) = *place {\n-            match self.locals[index] {\n-                LocalRef::Place(place) => {\n-                    return place;\n-                }\n-                LocalRef::UnsizedPlace(place) => {\n-                    return bx.load_operand(place).deref(cx);\n-                }\n-                LocalRef::Operand(..) => {\n-                    bug!(\"using operand local {:?} as place\", place);\n+        let result = match *place {\n+            mir::Place::Base(mir::PlaceBase::Local(index)) => {\n+                match self.locals[index] {\n+                    LocalRef::Place(place) => {\n+                        return place;\n+                    }\n+                    LocalRef::UnsizedPlace(place) => {\n+                        return bx.load_operand(place).deref(cx);\n+                    }\n+                    LocalRef::Operand(..) => {\n+                        bug!(\"using operand local {:?} as place\", place);\n+                    }\n                 }\n             }\n-        }\n-\n-        let result = match *place {\n-            mir::Place::Base(mir::PlaceBase::Local(_)) => bug!(), // handled above\n             mir::Place::Base(\n                 mir::PlaceBase::Static(\n                     box mir::Static { ty, kind: mir::StaticKind::Promoted(promoted) }"}]}