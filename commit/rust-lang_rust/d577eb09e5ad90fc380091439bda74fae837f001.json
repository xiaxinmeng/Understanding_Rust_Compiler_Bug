{"sha": "d577eb09e5ad90fc380091439bda74fae837f001", "node_id": "C_kwDOAAsO6NoAKGQ1NzdlYjA5ZTVhZDkwZmMzODAwOTE0MzliZGE3NGZhZTgzN2YwMDE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-21T03:52:08Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-21T04:04:05Z"}, "message": "Bless tests after #100769", "tree": {"sha": "3a99af4769418493ac78cb0076dafd6d8954f420", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a99af4769418493ac78cb0076dafd6d8954f420"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d577eb09e5ad90fc380091439bda74fae837f001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d577eb09e5ad90fc380091439bda74fae837f001", "html_url": "https://github.com/rust-lang/rust/commit/d577eb09e5ad90fc380091439bda74fae837f001", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d577eb09e5ad90fc380091439bda74fae837f001/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5212ac9dac4c99714ca7379f7882109fb1f07405", "url": "https://api.github.com/repos/rust-lang/rust/commits/5212ac9dac4c99714ca7379f7882109fb1f07405", "html_url": "https://github.com/rust-lang/rust/commit/5212ac9dac4c99714ca7379f7882109fb1f07405"}], "stats": {"total": 191, "additions": 97, "deletions": 94}, "files": [{"sha": "a93f9ec0397d2649400b408a0e0c26cbec9b691a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 95, "deletions": 92, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/d577eb09e5ad90fc380091439bda74fae837f001/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577eb09e5ad90fc380091439bda74fae837f001/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d577eb09e5ad90fc380091439bda74fae837f001", "patch": "@@ -903,7 +903,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             obligation.cause.code()\n         {\n             &parent_code\n-        } else if let ObligationCauseCode::ItemObligation(_) = obligation.cause.code() {\n+        } else if let ObligationCauseCode::ItemObligation(_)\n+        | ObligationCauseCode::ExprItemObligation(..) = obligation.cause.code()\n+        {\n             obligation.cause.code()\n         } else if let ExpnKind::Desugaring(DesugaringKind::ForLoop) =\n             span.ctxt().outer_expn_data().kind\n@@ -929,35 +931,36 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let param_env = obligation.param_env;\n \n         // Try to apply the original trait binding obligation by borrowing.\n-        let mut try_borrowing =\n-            |old_pred: ty::PolyTraitPredicate<'tcx>, blacklist: &[DefId]| -> bool {\n-                if blacklist.contains(&old_pred.def_id()) {\n-                    return false;\n-                }\n-                // We map bounds to `&T` and `&mut T`\n-                let trait_pred_and_imm_ref = old_pred.map_bound(|trait_pred| {\n-                    (\n-                        trait_pred,\n-                        self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, trait_pred.self_ty()),\n-                    )\n-                });\n-                let trait_pred_and_mut_ref = old_pred.map_bound(|trait_pred| {\n-                    (\n-                        trait_pred,\n-                        self.tcx.mk_mut_ref(self.tcx.lifetimes.re_static, trait_pred.self_ty()),\n-                    )\n-                });\n+        let mut try_borrowing = |old_pred: ty::PolyTraitPredicate<'tcx>,\n+                                 blacklist: &[DefId]|\n+         -> bool {\n+            if blacklist.contains(&old_pred.def_id()) {\n+                return false;\n+            }\n+            // We map bounds to `&T` and `&mut T`\n+            let trait_pred_and_imm_ref = old_pred.map_bound(|trait_pred| {\n+                (\n+                    trait_pred,\n+                    self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, trait_pred.self_ty()),\n+                )\n+            });\n+            let trait_pred_and_mut_ref = old_pred.map_bound(|trait_pred| {\n+                (\n+                    trait_pred,\n+                    self.tcx.mk_mut_ref(self.tcx.lifetimes.re_static, trait_pred.self_ty()),\n+                )\n+            });\n \n-                let mk_result = |trait_pred_and_new_ty| {\n-                    let obligation =\n-                        self.mk_trait_obligation_with_new_self_ty(param_env, trait_pred_and_new_ty);\n-                    self.predicate_must_hold_modulo_regions(&obligation)\n-                };\n-                let imm_ref_self_ty_satisfies_pred = mk_result(trait_pred_and_imm_ref);\n-                let mut_ref_self_ty_satisfies_pred = mk_result(trait_pred_and_mut_ref);\n+            let mk_result = |trait_pred_and_new_ty| {\n+                let obligation =\n+                    self.mk_trait_obligation_with_new_self_ty(param_env, trait_pred_and_new_ty);\n+                self.predicate_must_hold_modulo_regions(&obligation)\n+            };\n+            let imm_ref_self_ty_satisfies_pred = mk_result(trait_pred_and_imm_ref);\n+            let mut_ref_self_ty_satisfies_pred = mk_result(trait_pred_and_mut_ref);\n \n-                let (ref_inner_ty_satisfies_pred, ref_inner_ty_mut) =\n-                if let ObligationCauseCode::ItemObligation(_) = obligation.cause.code()\n+            let (ref_inner_ty_satisfies_pred, ref_inner_ty_mut) =\n+                if let ObligationCauseCode::ItemObligation(_) | ObligationCauseCode::ExprItemObligation(..) = obligation.cause.code()\n                     && let ty::Ref(_, ty, mutability) = old_pred.self_ty().skip_binder().kind()\n                 {\n                     (\n@@ -968,74 +971,74 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     (false, false)\n                 };\n \n-                if imm_ref_self_ty_satisfies_pred\n-                    || mut_ref_self_ty_satisfies_pred\n-                    || ref_inner_ty_satisfies_pred\n-                {\n-                    if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                        // We don't want a borrowing suggestion on the fields in structs,\n-                        // ```\n-                        // struct Foo {\n-                        //  the_foos: Vec<Foo>\n-                        // }\n-                        // ```\n-                        if !matches!(\n-                            span.ctxt().outer_expn_data().kind,\n-                            ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop)\n-                        ) {\n-                            return false;\n-                        }\n-                        if snippet.starts_with('&') {\n-                            // This is already a literal borrow and the obligation is failing\n-                            // somewhere else in the obligation chain. Do not suggest non-sense.\n-                            return false;\n-                        }\n-                        // We have a very specific type of error, where just borrowing this argument\n-                        // might solve the problem. In cases like this, the important part is the\n-                        // original type obligation, not the last one that failed, which is arbitrary.\n-                        // Because of this, we modify the error to refer to the original obligation and\n-                        // return early in the caller.\n-\n-                        let msg = format!(\"the trait bound `{}` is not satisfied\", old_pred);\n-                        if has_custom_message {\n-                            err.note(&msg);\n-                        } else {\n-                            err.message =\n-                                vec![(rustc_errors::DiagnosticMessage::Str(msg), Style::NoStyle)];\n-                        }\n-                        err.span_label(\n-                            span,\n-                            format!(\n-                                \"the trait `{}` is not implemented for `{}`\",\n-                                old_pred.print_modifiers_and_trait_path(),\n-                                old_pred.self_ty().skip_binder(),\n+            if imm_ref_self_ty_satisfies_pred\n+                || mut_ref_self_ty_satisfies_pred\n+                || ref_inner_ty_satisfies_pred\n+            {\n+                if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                    // We don't want a borrowing suggestion on the fields in structs,\n+                    // ```\n+                    // struct Foo {\n+                    //  the_foos: Vec<Foo>\n+                    // }\n+                    // ```\n+                    if !matches!(\n+                        span.ctxt().outer_expn_data().kind,\n+                        ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop)\n+                    ) {\n+                        return false;\n+                    }\n+                    if snippet.starts_with('&') {\n+                        // This is already a literal borrow and the obligation is failing\n+                        // somewhere else in the obligation chain. Do not suggest non-sense.\n+                        return false;\n+                    }\n+                    // We have a very specific type of error, where just borrowing this argument\n+                    // might solve the problem. In cases like this, the important part is the\n+                    // original type obligation, not the last one that failed, which is arbitrary.\n+                    // Because of this, we modify the error to refer to the original obligation and\n+                    // return early in the caller.\n+\n+                    let msg = format!(\"the trait bound `{}` is not satisfied\", old_pred);\n+                    if has_custom_message {\n+                        err.note(&msg);\n+                    } else {\n+                        err.message =\n+                            vec![(rustc_errors::DiagnosticMessage::Str(msg), Style::NoStyle)];\n+                    }\n+                    err.span_label(\n+                        span,\n+                        format!(\n+                            \"the trait `{}` is not implemented for `{}`\",\n+                            old_pred.print_modifiers_and_trait_path(),\n+                            old_pred.self_ty().skip_binder(),\n+                        ),\n+                    );\n+\n+                    if imm_ref_self_ty_satisfies_pred && mut_ref_self_ty_satisfies_pred {\n+                        err.span_suggestions(\n+                            span.shrink_to_lo(),\n+                            \"consider borrowing here\",\n+                            [\"&\".to_string(), \"&mut \".to_string()].into_iter(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    } else {\n+                        let is_mut = mut_ref_self_ty_satisfies_pred || ref_inner_ty_mut;\n+                        err.span_suggestion_verbose(\n+                            span.shrink_to_lo(),\n+                            &format!(\n+                                \"consider{} borrowing here\",\n+                                if is_mut { \" mutably\" } else { \"\" }\n                             ),\n+                            format!(\"&{}\", if is_mut { \"mut \" } else { \"\" }),\n+                            Applicability::MaybeIncorrect,\n                         );\n-\n-                        if imm_ref_self_ty_satisfies_pred && mut_ref_self_ty_satisfies_pred {\n-                            err.span_suggestions(\n-                                span.shrink_to_lo(),\n-                                \"consider borrowing here\",\n-                                [\"&\".to_string(), \"&mut \".to_string()].into_iter(),\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        } else {\n-                            let is_mut = mut_ref_self_ty_satisfies_pred || ref_inner_ty_mut;\n-                            err.span_suggestion_verbose(\n-                                span.shrink_to_lo(),\n-                                &format!(\n-                                    \"consider{} borrowing here\",\n-                                    if is_mut { \" mutably\" } else { \"\" }\n-                                ),\n-                                format!(\"&{}\", if is_mut { \"mut \" } else { \"\" }),\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        }\n-                        return true;\n                     }\n+                    return true;\n                 }\n-                return false;\n-            };\n+            }\n+            return false;\n+        };\n \n         if let ObligationCauseCode::ImplDerivedObligation(cause) = &*code {\n             try_borrowing(cause.derived.parent_trait_pred, &[])"}, {"sha": "125a8b44f2f0a257ee7173c41d6f075fbd43aede", "filename": "src/test/ui/suggestions/suggest-adding-reference-to-trait-assoc-item.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d577eb09e5ad90fc380091439bda74fae837f001/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-adding-reference-to-trait-assoc-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d577eb09e5ad90fc380091439bda74fae837f001/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-adding-reference-to-trait-assoc-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-adding-reference-to-trait-assoc-item.stderr?ref=d577eb09e5ad90fc380091439bda74fae837f001", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `&mut usize: Default` is not satisfied\n   --> $DIR/suggest-adding-reference-to-trait-assoc-item.rs:13:9\n    |\n LL |     foo(Default::default());\n-   |         ^^^^^^^^^^^^^^^^ expected an implementor of trait `Default`\n+   |         ^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `&mut usize`\n    |\n help: consider mutably borrowing here\n    |\n@@ -13,7 +13,7 @@ error[E0277]: the trait bound `&usize: Default` is not satisfied\n   --> $DIR/suggest-adding-reference-to-trait-assoc-item.rs:14:9\n    |\n LL |     bar(Default::default());\n-   |         ^^^^^^^^^^^^^^^^ expected an implementor of trait `Default`\n+   |         ^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `&usize`\n    |\n help: consider borrowing here\n    |"}]}