{"sha": "a5e21daa1909f538ddd696f7baffad4603f38a5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZTIxZGFhMTkwOWY1MzhkZGQ2OTZmN2JhZmZhZDQ2MDNmMzhhNWQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-06-29T23:24:46Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-06-29T23:24:46Z"}, "message": "Kill count_late_bound_regions\n\nNo, it didn't show up in my profiler. It still needs to die.", "tree": {"sha": "61123e5e34d8375c7fe911b232e2505da3d50561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61123e5e34d8375c7fe911b232e2505da3d50561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5e21daa1909f538ddd696f7baffad4603f38a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e21daa1909f538ddd696f7baffad4603f38a5d", "html_url": "https://github.com/rust-lang/rust/commit/a5e21daa1909f538ddd696f7baffad4603f38a5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5e21daa1909f538ddd696f7baffad4603f38a5d/comments", "author": null, "committer": null, "parents": [{"sha": "336f81215eb166aad4f8759be0cf284f3321212f", "url": "https://api.github.com/repos/rust-lang/rust/commits/336f81215eb166aad4f8759be0cf284f3321212f", "html_url": "https://github.com/rust-lang/rust/commit/336f81215eb166aad4f8759be0cf284f3321212f"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "dc3ccd417b8f7be506eaf267c7f179731a87f7b1", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a5e21daa1909f538ddd696f7baffad4603f38a5d/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e21daa1909f538ddd696f7baffad4603f38a5d/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=a5e21daa1909f538ddd696f7baffad4603f38a5d", "patch": "@@ -421,16 +421,18 @@ fn process_predicate<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n             // regions.  If there are, we will call this obligation an\n             // error. Eventually we should be able to support some\n             // cases here, I imagine (e.g., `for<'a> int : 'a`).\n-            if selcx.tcx().count_late_bound_regions(binder) != 0 {\n-                errors.push(\n-                    FulfillmentError::new(\n-                        obligation.clone(),\n-                        CodeSelectionError(Unimplemented)));\n-            } else {\n-                let ty::OutlivesPredicate(t_a, r_b) = binder.0;\n-                register_region_obligation(t_a, r_b,\n-                                           obligation.cause.clone(),\n-                                           region_obligations);\n+            match selcx.tcx().no_late_bound_regions(binder) {\n+                None => {\n+                    errors.push(\n+                        FulfillmentError::new(\n+                            obligation.clone(),\n+                            CodeSelectionError(Unimplemented)))\n+                }\n+                Some(ty::OutlivesPredicate(t_a, r_b)) => {\n+                    register_region_obligation(t_a, r_b,\n+                                               obligation.cause.clone(),\n+                                               region_obligations);\n+                }\n             }\n             true\n         }\n@@ -501,5 +503,3 @@ impl<'tcx> FulfilledPredicates<'tcx> {\n         !self.set.insert(p.clone())\n     }\n }\n-\n-"}, {"sha": "fe52fba49c6e5459e060f2b8f8c328d69d53da1a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a5e21daa1909f538ddd696f7baffad4603f38a5d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e21daa1909f538ddd696f7baffad4603f38a5d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a5e21daa1909f538ddd696f7baffad4603f38a5d", "patch": "@@ -6853,19 +6853,6 @@ impl<'tcx> ctxt<'tcx> {\n             |br| ty::ReFree(ty::FreeRegion{scope: all_outlive_scope, bound_region: br})).0\n     }\n \n-    pub fn count_late_bound_regions<T>(&self, value: &Binder<T>) -> usize\n-        where T : TypeFoldable<'tcx>\n-    {\n-        let (_, skol_map) = ty_fold::replace_late_bound_regions(self, value, |_| ty::ReStatic);\n-        skol_map.len()\n-    }\n-\n-    pub fn binds_late_bound_regions<T>(&self, value: &Binder<T>) -> bool\n-        where T : TypeFoldable<'tcx>\n-    {\n-        self.count_late_bound_regions(value) > 0\n-    }\n-\n     /// Flattens two binding levels into one. So `for<'a> for<'b> Foo`\n     /// becomes `for<'a,'b> Foo`.\n     pub fn flatten_late_bound_regions<T>(&self, bound2_value: &Binder<Binder<T>>)\n@@ -6890,9 +6877,9 @@ impl<'tcx> ctxt<'tcx> {\n     }\n \n     pub fn no_late_bound_regions<T>(&self, value: &Binder<T>) -> Option<T>\n-        where T : TypeFoldable<'tcx>\n+        where T : TypeFoldable<'tcx> + RegionEscape\n     {\n-        if self.binds_late_bound_regions(value) {\n+        if value.0.has_escaping_regions() {\n             None\n         } else {\n             Some(value.0.clone())\n@@ -7052,6 +7039,19 @@ impl<'tcx> RegionEscape for Substs<'tcx> {\n     }\n }\n \n+impl<T:RegionEscape> RegionEscape for Vec<T> {\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n+        self.iter().any(|t| t.has_regions_escaping_depth(depth))\n+    }\n+}\n+\n+impl<'tcx> RegionEscape for FnSig<'tcx> {\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n+        self.inputs.has_regions_escaping_depth(depth) ||\n+            self.output.has_regions_escaping_depth(depth)\n+    }\n+}\n+\n impl<'tcx,T:RegionEscape> RegionEscape for VecPerParamSpace<T> {\n     fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n         self.iter_enumerated().any(|(space, _, t)| {\n@@ -7124,6 +7124,15 @@ impl<'tcx,T:RegionEscape> RegionEscape for Binder<T> {\n     }\n }\n \n+impl<'tcx> RegionEscape for FnOutput<'tcx> {\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n+        match *self {\n+            FnConverging(t) => t.has_regions_escaping_depth(depth),\n+            FnDiverging => false\n+        }\n+    }\n+}\n+\n impl<'tcx> RegionEscape for EquatePredicate<'tcx> {\n     fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n         self.0.has_regions_escaping_depth(depth) || self.1.has_regions_escaping_depth(depth)"}, {"sha": "00b7f420614052ad4aba92b1422506554358d100", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5e21daa1909f538ddd696f7baffad4603f38a5d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e21daa1909f538ddd696f7baffad4603f38a5d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a5e21daa1909f538ddd696f7baffad4603f38a5d", "patch": "@@ -125,14 +125,14 @@ pub trait AstConv<'tcx> {\n                                         item_name: ast::Name)\n                                         -> Ty<'tcx>\n     {\n-        if self.tcx().binds_late_bound_regions(&poly_trait_ref) {\n+        if let Some(trait_ref) = self.tcx().no_late_bound_regions(&poly_trait_ref) {\n+            self.projected_ty(span, trait_ref, item_name)\n+        } else {\n+            // no late-bound regions, we can just ignore the binder\n             span_err!(self.tcx().sess, span, E0212,\n                 \"cannot extract an associated type from a higher-ranked trait bound \\\n                  in this context\");\n             self.tcx().types.err\n-        } else {\n-            // no late-bound regions, we can just ignore the binder\n-            self.projected_ty(span, poly_trait_ref.0.clone(), item_name)\n         }\n     }\n "}]}