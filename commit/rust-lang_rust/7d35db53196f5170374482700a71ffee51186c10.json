{"sha": "7d35db53196f5170374482700a71ffee51186c10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMzVkYjUzMTk2ZjUxNzAzNzQ0ODI3MDBhNzFmZmVlNTExODZjMTA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-27T20:13:27Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:56:28Z"}, "message": "[WIP] Implement basic stack store to load forwarding", "tree": {"sha": "d8255cbcbec6cfd1ec7cbc778e56ea27daf8a1c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8255cbcbec6cfd1ec7cbc778e56ea27daf8a1c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d35db53196f5170374482700a71ffee51186c10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d35db53196f5170374482700a71ffee51186c10", "html_url": "https://github.com/rust-lang/rust/commit/7d35db53196f5170374482700a71ffee51186c10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d35db53196f5170374482700a71ffee51186c10/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be6cdb28d0ac896478cf784478a41b9e2c1c5234", "url": "https://api.github.com/repos/rust-lang/rust/commits/be6cdb28d0ac896478cf784478a41b9e2c1c5234", "html_url": "https://github.com/rust-lang/rust/commit/be6cdb28d0ac896478cf784478a41b9e2c1c5234"}], "stats": {"total": 93, "additions": 90, "deletions": 3}, "files": [{"sha": "d368d50a032599653c0cceef810f4570464d61a6", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 90, "deletions": 3, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/7d35db53196f5170374482700a71ffee51186c10/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d35db53196f5170374482700a71ffee51186c10/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=7d35db53196f5170374482700a71ffee51186c10", "patch": "@@ -1,8 +1,8 @@\n-use std::collections::{BTreeMap, BTreeSet, HashSet};\n+use std::collections::{BTreeMap, HashSet};\n use std::ops::Not;\n \n use cranelift_codegen::cursor::{Cursor, FuncCursor};\n-use cranelift_codegen::ir::{Opcode, InstructionData, ValueDef};\n+use cranelift_codegen::ir::{InstructionData, Opcode, ProgramOrder, ValueDef};\n use cranelift_codegen::ir::immediates::Offset32;\n \n use crate::prelude::*;\n@@ -87,7 +87,44 @@ pub(super) fn optimize_function(\n         let is_loaded = users.stack_load.is_empty().not();\n         let is_stored = users.stack_store.is_empty().not();\n         match (is_loaded, is_stored) {\n-            (true, true) => {} // FIXME perform store to load optimization\n+            (true, true) => {\n+                for load in users.stack_load.clone().drain() {\n+                    let load_ebb = func.layout.inst_ebb(load).unwrap();\n+                    let loaded_value = func.dfg.inst_results(load)[0];\n+                    let loaded_type = func.dfg.value_type(loaded_value);\n+\n+                    let potential_stores = users.stack_store.iter().cloned().filter(|&store| {\n+                        match spatial_overlap(func, load, store) {\n+                            SpatialOverlap::No => false, // Can never be the source of the loaded value.\n+                            SpatialOverlap::Partial | SpatialOverlap::Full => true,\n+                        }\n+                    }).filter(|&store| {\n+                        if load_ebb == func.layout.inst_ebb(store).unwrap() {\n+                            func.layout.cmp(store, load) == std::cmp::Ordering::Less\n+                        } else {\n+                            true // FIXME\n+                        }\n+                    }).collect::<Vec<Inst>>();\n+                    for &store in &potential_stores {\n+                        println!(\"Potential store -> load forwarding {} -> {} ({:?})\", func.dfg.display_inst(store, None), func.dfg.display_inst(load, None), spatial_overlap(func, load, store));\n+                    }\n+                    match *potential_stores {\n+                        [] => println!(\"[{}] [BUG?] Reading uninitialized memory\", name),\n+                        [store] if spatial_overlap(func, load, store) == SpatialOverlap::Full => {\n+                            let store_ebb = func.layout.inst_ebb(store).unwrap();\n+                            let stored_value = func.dfg.inst_args(store)[0];\n+                            let stored_type = func.dfg.value_type(stored_value);\n+                            if stored_type == loaded_type && store_ebb == load_ebb {\n+                                println!(\"Store to load forward {} -> {}\", store, load);\n+                                func.dfg.detach_results(load);\n+                                func.dfg.replace(load).nop();\n+                                func.dfg.change_to_alias(loaded_value, stored_value);\n+                            }\n+                        }\n+                        _ => {} // FIXME implement this\n+                    }\n+                }\n+            }\n             (true, false) => println!(\"[{}] [BUG?] Reading uninitialized memory\", name),\n             (false, _) => {\n                 // Never loaded; can safely remove all stores and the stack slot.\n@@ -202,3 +239,53 @@ fn try_get_stack_slot_and_offset_for_addr(func: &Function, addr: Value) -> Optio\n     }\n     None\n }\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+enum SpatialOverlap {\n+    No,\n+    Partial,\n+    Full,\n+}\n+\n+fn spatial_overlap(func: &Function, src: Inst, dest: Inst) -> SpatialOverlap {\n+    fn inst_info(func: &Function, inst: Inst) -> (StackSlot, Offset32, u32) {\n+        match func.dfg[inst] {\n+            InstructionData::StackLoad {\n+                opcode: Opcode::StackAddr,\n+                stack_slot,\n+                offset,\n+            }\n+            | InstructionData::StackLoad {\n+                opcode: Opcode::StackLoad,\n+                stack_slot,\n+                offset,\n+            }\n+            | InstructionData::StackStore {\n+                opcode: Opcode::StackStore,\n+                stack_slot,\n+                offset,\n+                arg: _,\n+            } => (stack_slot, offset, func.dfg.ctrl_typevar(inst).bytes()),\n+            _ => unreachable!(\"{:?}\", func.dfg[inst]),\n+        }\n+    }\n+\n+    let (src_ss, src_offset, src_size) = inst_info(func, src);\n+    let (dest_ss, dest_offset, dest_size) = inst_info(func, dest);\n+\n+    if src_ss != dest_ss {\n+        return SpatialOverlap::No;\n+    }\n+\n+    if src_offset == dest_offset && src_size == dest_size {\n+        return SpatialOverlap::Full;\n+    }\n+\n+    let src_end: i64 = src_offset.try_add_i64(i64::from(src_size)).unwrap().into();\n+    let dest_end: i64 = dest_offset.try_add_i64(i64::from(dest_size)).unwrap().into();\n+    if src_end <= dest_offset.into() || dest_end <= src_offset.into() {\n+        return SpatialOverlap::No;\n+    }\n+\n+    SpatialOverlap::Partial\n+}"}]}