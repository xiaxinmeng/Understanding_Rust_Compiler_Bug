{"sha": "fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOWJjMzNiYmFhNTk1Y2RmZTNlNWU1Y2QzN2NkOTYxODZmYzUyZWI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-30T19:46:50Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-15T18:32:28Z"}, "message": "Only store a LocalDefId in hir::TraitItem.", "tree": {"sha": "c5043320caad5d42bd1cb91d7dd4cf68c7db6fa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5043320caad5d42bd1cb91d7dd4cf68c7db6fa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb", "html_url": "https://github.com/rust-lang/rust/commit/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dc65397ee5710c16e077e0ca1e7513c365c10a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc65397ee5710c16e077e0ca1e7513c365c10a6", "html_url": "https://github.com/rust-lang/rust/commit/2dc65397ee5710c16e077e0ca1e7513c365c10a6"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "8a82b550bdae647be072c68b6dfabbc4d2a6a3ed", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb", "patch": "@@ -246,7 +246,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n-                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, None, None);\n+                lint_for_missing_headers(cx, item.hir_id(), item.span, sig, headers, None, None);\n             }\n         }\n     }"}, {"sha": "f8ef2a464d5c31aa929ce65aba6a53f64307f92d", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb", "patch": "@@ -87,11 +87,11 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n             // find `self` ty for this trait if relevant\n             if let ItemKind::Trait(_, _, _, _, items) = item.kind {\n                 for trait_item in items {\n-                    if trait_item.id.hir_id == hir_id {\n+                    if trait_item.id.hir_id() == hir_id {\n                         // be sure we have `self` parameter in this function\n                         if let AssocItemKind::Fn { has_self: true } = trait_item.kind {\n                             trait_self_ty =\n-                                Some(TraitRef::identity(cx.tcx, trait_item.id.hir_id.owner.to_def_id()).self_ty());\n+                                Some(TraitRef::identity(cx.tcx, trait_item.id.def_id.to_def_id()).self_ty());\n                         }\n                     }\n                 }"}, {"sha": "eabc745a7b07e0b54bb7e581aee9b4ca18d6217e", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb", "patch": "@@ -339,27 +339,27 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n             if sig.header.abi == Abi::Rust {\n                 self.check_arg_number(cx, &sig.decl, item.span.with_hi(sig.decl.output.span().hi()));\n             }\n-            let is_public = cx.access_levels.is_exported(item.hir_id);\n+            let is_public = cx.access_levels.is_exported(item.hir_id());\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n             if is_public {\n                 check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n             }\n \n             let attr = must_use_attr(&item.attrs);\n             if let Some(attr) = attr {\n-                check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n+                check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n             }\n             if let hir::TraitFn::Provided(eid) = *eid {\n                 let body = cx.tcx.hir().body(eid);\n-                Self::check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id);\n+                Self::check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id());\n \n                 if attr.is_none() && is_public && !is_proc_macro(cx.sess(), &item.attrs) {\n                     check_must_use_candidate(\n                         cx,\n                         &sig.decl,\n                         body,\n                         item.span,\n-                        item.hir_id,\n+                        item.hir_id(),\n                         item.span.with_hi(sig.decl.output.span().hi()),\n                         \"this method could have a `#[must_use]` attribute\",\n                     );"}, {"sha": "a89941ceb226bc36ea2867f0d0f8dfaa19fe3ae7", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb", "patch": "@@ -159,10 +159,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n     fn is_named_self(cx: &LateContext<'_>, item: &TraitItemRef, name: &str) -> bool {\n         item.ident.name.as_str() == name\n             && if let AssocItemKind::Fn { has_self } = item.kind {\n-                has_self && {\n-                    let did = cx.tcx.hir().local_def_id(item.id.hir_id);\n-                    cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n-                }\n+                has_self && { cx.tcx.fn_sig(item.id.def_id).inputs().skip_binder().len() == 1 }\n             } else {\n                 false\n             }"}, {"sha": "a68775ffb7541eea98673b72f8de343bfa0ebd7b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb", "patch": "@@ -1791,7 +1791,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let Some(first_arg_ty) = sig.decl.inputs.iter().next();\n             let first_arg_span = first_arg_ty.span;\n             let first_arg_ty = hir_ty_to_ty(cx.tcx, first_arg_ty);\n-            let self_ty = TraitRef::identity(cx.tcx, item.hir_id.owner.to_def_id()).self_ty();\n+            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n \n             then {\n                 lint_wrong_self_convention(cx, &item.ident.name.as_str(), false, self_ty, first_arg_ty, first_arg_span);\n@@ -1801,8 +1801,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         if_chain! {\n             if item.ident.name == sym::new;\n             if let TraitItemKind::Fn(_, _) = item.kind;\n-            let ret_ty = return_ty(cx, item.hir_id);\n-            let self_ty = TraitRef::identity(cx.tcx, item.hir_id.owner.to_def_id()).self_ty();\n+            let ret_ty = return_ty(cx, item.hir_id());\n+            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n             if !contains_ty(ret_ty, self_ty);\n \n             then {"}, {"sha": "5fce322933e98813ffdabe503a45b1e1c7d4e911", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb", "patch": "@@ -164,8 +164,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, trait_item: &'tcx hir::TraitItem<'_>) {\n-        let def_id = cx.tcx.hir().local_def_id(trait_item.hir_id);\n-        let (article, desc) = cx.tcx.article_and_description(def_id.to_def_id());\n+        let (article, desc) = cx.tcx.article_and_description(trait_item.def_id.to_def_id());\n \n         self.check_missing_docs_attrs(cx, &trait_item.attrs, trait_item.span, article, desc);\n     }"}, {"sha": "16981946e18e764bb10b58ccad7ec459b13c0a04", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb", "patch": "@@ -71,7 +71,7 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'tcx>) {\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n-            check_sig(cx, item.hir_id, &sig.decl);\n+            check_sig(cx, item.hir_id(), &sig.decl);\n         }\n     }\n "}, {"sha": "b9ba32001b5137620f077b3996ef7bc00dab041c", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb", "patch": "@@ -206,7 +206,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         if let hir::TraitItemKind::Fn(method_sig, _) = &item.kind {\n-            self.check_poly_fn(cx, item.hir_id, &*method_sig.decl, None);\n+            self.check_poly_fn(cx, item.hir_id(), &*method_sig.decl, None);\n         }\n     }\n "}, {"sha": "ee4ad086eb9a29bf6c8608f8292f4fa702796e39", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n             } else {\n                 None\n             };\n-            check_fn(cx, &sig.decl, item.hir_id, body_id);\n+            check_fn(cx, &sig.decl, item.hir_id(), body_id);\n         }\n     }\n "}]}