{"sha": "4bd417e4389e9d1c4b589d6f36911e8e05224904", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZDQxN2U0Mzg5ZTlkMWM0YjU4OWQ2ZjM2OTExZThlMDUyMjQ5MDQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-04-25T19:38:21Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-04-25T19:38:39Z"}, "message": "Fix object safety violations in the test", "tree": {"sha": "b31783085bda75ccfc84928e0f63eb5bc83b508e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b31783085bda75ccfc84928e0f63eb5bc83b508e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bd417e4389e9d1c4b589d6f36911e8e05224904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd417e4389e9d1c4b589d6f36911e8e05224904", "html_url": "https://github.com/rust-lang/rust/commit/4bd417e4389e9d1c4b589d6f36911e8e05224904", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bd417e4389e9d1c4b589d6f36911e8e05224904/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1883b8d715d91c65cb25fc8a2e7258c9fc704c16", "url": "https://api.github.com/repos/rust-lang/rust/commits/1883b8d715d91c65cb25fc8a2e7258c9fc704c16", "html_url": "https://github.com/rust-lang/rust/commit/1883b8d715d91c65cb25fc8a2e7258c9fc704c16"}], "stats": {"total": 71, "additions": 48, "deletions": 23}, "files": [{"sha": "721d7583230a7f7cfb0751f571e571edfec1777b", "filename": "src/test/compile-fail/trait-item-privacy.rs", "status": "modified", "additions": 48, "deletions": 23, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4bd417e4389e9d1c4b589d6f36911e8e05224904/src%2Ftest%2Fcompile-fail%2Ftrait-item-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd417e4389e9d1c4b589d6f36911e8e05224904/src%2Ftest%2Fcompile-fail%2Ftrait-item-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-item-privacy.rs?ref=4bd417e4389e9d1c4b589d6f36911e8e05224904", "patch": "@@ -16,23 +16,37 @@ struct S;\n mod method {\n     trait A {\n         fn a(&self) { }\n-        const A: u8 = 0;\n     }\n \n     pub trait B {\n         fn b(&self) { }\n-        const B: u8 = 0;\n     }\n \n     pub trait C: A + B {\n         fn c(&self) { }\n-        const C: u8 = 0;\n     }\n \n     impl A for ::S {}\n     impl B for ::S {}\n     impl C for ::S {}\n+}\n+\n+mod assoc_const {\n+    trait A {\n+        const A: u8 = 0;\n+    }\n+\n+    pub trait B {\n+        const B: u8 = 0;\n+    }\n+\n+    pub trait C: A + B {\n+        const C: u8 = 0;\n+    }\n \n+    impl A for ::S {}\n+    impl B for ::S {}\n+    impl C for ::S {}\n }\n \n mod assoc_ty {\n@@ -51,27 +65,9 @@ mod assoc_ty {\n     impl A for ::S {}\n     impl B for ::S {}\n     impl C for ::S {}\n-\n-}\n-\n-fn check_assoc_ty<T: assoc_ty::C>() {\n-    // A is private\n-    // B is pub, not in scope\n-    // C : A + B is pub, in scope\n-    use assoc_ty::C;\n-\n-    // Associated types\n-    // A, B, C are resolved as trait items, their traits need to be in scope, not implemented yet\n-    let _: S::A; //~ ERROR ambiguous associated type\n-    let _: S::B; //~ ERROR ambiguous associated type\n-    let _: S::C; //~ ERROR ambiguous associated type\n-    // A, B, C are resolved as inherent items, their traits don't need to be in scope\n-    let _: T::A; //~ ERROR associated type `A` is private\n-    let _: T::B; // OK\n-    let _: T::C; // OK\n }\n \n-fn main() {\n+fn check_method() {\n     // A is private\n     // B is pub, not in scope\n     // C : A + B is pub, in scope\n@@ -97,6 +93,13 @@ fn main() {\n     C::a(&S); //~ ERROR method `a` is private\n     C::b(&S); // OK\n     C::c(&S); // OK\n+}\n+\n+fn check_assoc_const() {\n+    // A is private\n+    // B is pub, not in scope\n+    // C : A + B is pub, in scope\n+    use assoc_const::C;\n \n     // Associated constants\n     // A, B, C are resolved as trait items, their traits need to be in scope\n@@ -105,6 +108,28 @@ fn main() {\n     S::C; // OK\n     // A, B, C are resolved as inherent items, their traits don't need to be in scope\n     C::A; //~ ERROR associated constant `A` is private\n-    C::B; // OK\n+          //~^ ERROR the trait `assoc_const::C` cannot be made into an object\n+          //~| ERROR the trait bound `assoc_const::C: assoc_const::A` is not satisfied\n+    C::B; // ERROR the trait `assoc_const::C` cannot be made into an object\n+          //~^ ERROR the trait bound `assoc_const::C: assoc_const::B` is not satisfied\n     C::C; // OK\n }\n+\n+fn check_assoc_ty<T: assoc_ty::C>() {\n+    // A is private\n+    // B is pub, not in scope\n+    // C : A + B is pub, in scope\n+    use assoc_ty::C;\n+\n+    // Associated types\n+    // A, B, C are resolved as trait items, their traits need to be in scope, not implemented yet\n+    let _: S::A; //~ ERROR ambiguous associated type\n+    let _: S::B; //~ ERROR ambiguous associated type\n+    let _: S::C; //~ ERROR ambiguous associated type\n+    // A, B, C are resolved as inherent items, their traits don't need to be in scope\n+    let _: T::A; //~ ERROR associated type `A` is private\n+    let _: T::B; // OK\n+    let _: T::C; // OK\n+}\n+\n+fn main() {}"}]}