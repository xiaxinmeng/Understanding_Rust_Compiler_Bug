{"sha": "d0cf4306bd238209aa26a5263074dbb3480a4387", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwY2Y0MzA2YmQyMzgyMDlhYTI2YTUyNjMwNzRkYmIzNDgwYTQzODc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T17:55:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T17:55:38Z"}, "message": "fix todo", "tree": {"sha": "61aece4e9587614611f8697fe7eb821d3546d000", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61aece4e9587614611f8697fe7eb821d3546d000"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0cf4306bd238209aa26a5263074dbb3480a4387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0cf4306bd238209aa26a5263074dbb3480a4387", "html_url": "https://github.com/rust-lang/rust/commit/d0cf4306bd238209aa26a5263074dbb3480a4387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0cf4306bd238209aa26a5263074dbb3480a4387/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daaba4be17cae9ee32a2e151e256ef71f600814e", "url": "https://api.github.com/repos/rust-lang/rust/commits/daaba4be17cae9ee32a2e151e256ef71f600814e", "html_url": "https://github.com/rust-lang/rust/commit/daaba4be17cae9ee32a2e151e256ef71f600814e"}], "stats": {"total": 49, "additions": 11, "deletions": 38}, "files": [{"sha": "dc0c50918e343843af62ae34e109678fc6f72187", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cf4306bd238209aa26a5263074dbb3480a4387/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cf4306bd238209aa26a5263074dbb3480a4387/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=d0cf4306bd238209aa26a5263074dbb3480a4387", "patch": "@@ -97,9 +97,7 @@ pub(crate) fn reference_definition(\n         {\n             let resolved = module.resolve_path(db, &path);\n             if let Some(def_id) = resolved.take_types().or(resolved.take_values()) {\n-                if let Some(target) = NavigationTarget::from_def(db, def_id) {\n-                    return Exact(target);\n-                }\n+                return Exact(NavigationTarget::from_def(db, def_id));\n             }\n         }\n     }"}, {"sha": "d73d4afa72153bd8f73c974bf51db889e1f02da4", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 10, "deletions": 35, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d0cf4306bd238209aa26a5263074dbb3480a4387/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cf4306bd238209aa26a5263074dbb3480a4387/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=d0cf4306bd238209aa26a5263074dbb3480a4387", "patch": "@@ -112,62 +112,37 @@ impl NavigationTarget {\n         }\n     }\n \n-    // TODO once Def::Item is gone, this should be able to always return a NavigationTarget\n-    pub(crate) fn from_def(\n-        db: &RootDatabase,\n-        module_def: hir::ModuleDef,\n-    ) -> Option<NavigationTarget> {\n+    pub(crate) fn from_def(db: &RootDatabase, module_def: hir::ModuleDef) -> NavigationTarget {\n         match module_def {\n-            hir::ModuleDef::Module(module) => Some(NavigationTarget::from_module(db, module)),\n-            hir::ModuleDef::Function(func) => Some(NavigationTarget::from_function(db, func)),\n+            hir::ModuleDef::Module(module) => NavigationTarget::from_module(db, module),\n+            hir::ModuleDef::Function(func) => NavigationTarget::from_function(db, func),\n             hir::ModuleDef::Struct(s) => {\n                 let (file_id, node) = s.source(db);\n-                Some(NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                ))\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n             hir::ModuleDef::Const(s) => {\n                 let (file_id, node) = s.source(db);\n-                Some(NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                ))\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n             hir::ModuleDef::Static(s) => {\n                 let (file_id, node) = s.source(db);\n-                Some(NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                ))\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n             hir::ModuleDef::Enum(e) => {\n                 let (file_id, node) = e.source(db);\n-                Some(NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                ))\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n             hir::ModuleDef::EnumVariant(var) => {\n                 let (file_id, node) = var.source(db);\n-                Some(NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                ))\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n             hir::ModuleDef::Trait(e) => {\n                 let (file_id, node) = e.source(db);\n-                Some(NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                ))\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n             hir::ModuleDef::Type(e) => {\n                 let (file_id, node) = e.source(db);\n-                Some(NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                ))\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n         }\n     }"}]}