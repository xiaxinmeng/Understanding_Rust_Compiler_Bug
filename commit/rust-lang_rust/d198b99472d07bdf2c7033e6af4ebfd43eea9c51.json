{"sha": "d198b99472d07bdf2c7033e6af4ebfd43eea9c51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxOThiOTk0NzJkMDdiZGYyYzcwMzNlNmFmNGViZmQ0M2VlYTljNTE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-02-04T15:59:06Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-02-04T15:59:06Z"}, "message": "fix false negatives introduced in the rustup", "tree": {"sha": "69c71ded12061e3075474419fa82d6155f33d728", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69c71ded12061e3075474419fa82d6155f33d728"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d198b99472d07bdf2c7033e6af4ebfd43eea9c51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d198b99472d07bdf2c7033e6af4ebfd43eea9c51", "html_url": "https://github.com/rust-lang/rust/commit/d198b99472d07bdf2c7033e6af4ebfd43eea9c51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d198b99472d07bdf2c7033e6af4ebfd43eea9c51/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fbc7c0bb2c6a8de595c05fe25945a80ba98ee87", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fbc7c0bb2c6a8de595c05fe25945a80ba98ee87", "html_url": "https://github.com/rust-lang/rust/commit/7fbc7c0bb2c6a8de595c05fe25945a80ba98ee87"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "30ffcc9f6e3a66960ef6ba83b9ec12b4975f5439", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d198b99472d07bdf2c7033e6af4ebfd43eea9c51/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d198b99472d07bdf2c7033e6af4ebfd43eea9c51/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=d198b99472d07bdf2c7033e6af4ebfd43eea9c51", "patch": "@@ -949,6 +949,7 @@ fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: ty::Ty) -> Option<sug\n     fn may_slice(cx: &LateContext, ty: ty::Ty) -> bool {\n         match ty.sty {\n             ty::TySlice(_) => true,\n+            ty::TyAdt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n             ty::TyAdt(..) => match_type(cx, ty, &paths::VEC),\n             ty::TyArray(_, size) => size < 32,\n             ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) => may_slice(cx, inner),\n@@ -965,6 +966,7 @@ fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: ty::Ty) -> Option<sug\n     } else {\n         match ty.sty {\n             ty::TySlice(_) => sugg::Sugg::hir_opt(cx, expr),\n+            ty::TyAdt(def, _) if def.is_box() && may_slice(cx, ty.boxed_ty()) => sugg::Sugg::hir_opt(cx, expr),\n             ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) => {\n                 if may_slice(cx, inner) {\n                     sugg::Sugg::hir_opt(cx, expr)"}, {"sha": "43a4386886d9f8b0353694aee1d8216aa5f7a57c", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d198b99472d07bdf2c7033e6af4ebfd43eea9c51/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d198b99472d07bdf2c7033e6af4ebfd43eea9c51/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=d198b99472d07bdf2c7033e6af4ebfd43eea9c51", "patch": "@@ -350,6 +350,7 @@ fn or_fun_call() {\n /// Checks implementation of `ITER_NTH` lint\n fn iter_nth() {\n     let mut some_vec = vec![0, 1, 2, 3];\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n     let mut some_vec_deque: VecDeque<_> = some_vec.iter().cloned().collect();\n \n     {\n@@ -358,6 +359,8 @@ fn iter_nth() {\n         //~^ERROR called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n         let bad_slice = &some_vec[..].iter().nth(3);\n         //~^ERROR called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+        let bad_boxed_slice = boxed_slice.iter().nth(3);\n+        //~^ERROR called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n         let bad_vec_deque = some_vec_deque.iter().nth(3);\n         //~^ERROR called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n     }\n@@ -414,6 +417,7 @@ impl GetFalsePositive {\n \n /// Checks implementation of `GET_UNWRAP` lint\n fn get_unwrap() {\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n     let mut some_slice = &mut [0, 1, 2, 3];\n     let mut some_vec = vec![0, 1, 2, 3];\n     let mut some_vecdeque: VecDeque<_> = some_vec.iter().cloned().collect();\n@@ -422,6 +426,10 @@ fn get_unwrap() {\n     let mut false_positive = GetFalsePositive { arr: [0, 1, 2] };\n \n     { // Test `get().unwrap()`\n+        let _ = boxed_slice.get(1).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION boxed_slice[1]\n         let _ = some_slice.get(0).unwrap();\n         //~^ERROR called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n         //~|HELP try this\n@@ -447,6 +455,10 @@ fn get_unwrap() {\n     }\n \n     { // Test `get_mut().unwrap()`\n+        *boxed_slice.get_mut(0).unwrap() = 1;\n+        //~^ERROR called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION &mut boxed_slice[0]\n         *some_slice.get_mut(0).unwrap() = 1;\n         //~^ERROR called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n         //~|HELP try this"}]}