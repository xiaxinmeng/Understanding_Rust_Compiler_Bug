{"sha": "ff51611c42d160f95a01d556045d32f0539d8989", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNTE2MTFjNDJkMTYwZjk1YTAxZDU1NjA0NWQzMmYwNTM5ZDg5ODk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-08T21:31:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-08T21:31:28Z"}, "message": "Rollup merge of #65213 - estebank:peel-drop-temps, r=Centril\n\nIgnore `ExprKind::DropTemps` for some ref suggestions\n\nIntroduce `Expr::peel_drop_temps()` to ignore `ExprKind::DropTemps` for suggestions that depend on the `ExprKind` for accuracy.", "tree": {"sha": "8d6c88672d85193d1a53f3a72c703f886b501071", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d6c88672d85193d1a53f3a72c703f886b501071"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff51611c42d160f95a01d556045d32f0539d8989", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdnQAwCRBK7hj4Ov3rIwAAdHIIAF/CayDNgEG3hDlhos3uVL4q\neQyOz5Pw9WbhOrsSzU/xaHyNeq7SMZD9i7KJczNqjtmYytcra/FVvfuWu+WECjhc\nOxENfTHhRN3VnGttagUJplPdOHkmnCY9FM2kZZLQrKZc6HQNqih3m4X+Zm1i0XEP\n3y0D5AOgg9LYCmmdjg297MtA+Mo6Lsa2QndjRuHtuWAGXx3MhQzpcsXJP9aR6Exa\ntFgJi66Sp/EGePmIgYPQ5h8SDEP51nxi2T69mSBQ0Tfi87HF6K7EdV8JrGll4dRr\nby6Kd9Gan0NX8UA0PbiFmfZPnqnKhaw+sAtnffXKvM80gGwv+56Se+ptiPeNAX4=\n=bDbB\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d6c88672d85193d1a53f3a72c703f886b501071\nparent 4a6304fb05f60e32fcca21eee44cb8bf442cc0b4\nparent d0eea6ff6dbdab88ddbcf0ce2dcbbfd456678e39\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570570288 +0200\ncommitter GitHub <noreply@github.com> 1570570288 +0200\n\nRollup merge of #65213 - estebank:peel-drop-temps, r=Centril\n\nIgnore `ExprKind::DropTemps` for some ref suggestions\n\nIntroduce `Expr::peel_drop_temps()` to ignore `ExprKind::DropTemps` for suggestions that depend on the `ExprKind` for accuracy.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff51611c42d160f95a01d556045d32f0539d8989", "html_url": "https://github.com/rust-lang/rust/commit/ff51611c42d160f95a01d556045d32f0539d8989", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff51611c42d160f95a01d556045d32f0539d8989/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a6304fb05f60e32fcca21eee44cb8bf442cc0b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6304fb05f60e32fcca21eee44cb8bf442cc0b4", "html_url": "https://github.com/rust-lang/rust/commit/4a6304fb05f60e32fcca21eee44cb8bf442cc0b4"}, {"sha": "d0eea6ff6dbdab88ddbcf0ce2dcbbfd456678e39", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0eea6ff6dbdab88ddbcf0ce2dcbbfd456678e39", "html_url": "https://github.com/rust-lang/rust/commit/d0eea6ff6dbdab88ddbcf0ce2dcbbfd456678e39"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "1f792ecc2da9031fb3b78b3afe990272b8670868", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff51611c42d160f95a01d556045d32f0539d8989/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff51611c42d160f95a01d556045d32f0539d8989/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ff51611c42d160f95a01d556045d32f0539d8989", "patch": "@@ -1548,6 +1548,19 @@ impl Expr {\n             }\n         }\n     }\n+\n+    /// If `Self.kind` is `ExprKind::DropTemps(expr)`, drill down until we get a non-`DropTemps`\n+    /// `Expr`. This is used in suggestions to ignore this `ExprKind` as it is semantically\n+    /// silent, only signaling the ownership system. By doing this, suggestions that check the\n+    /// `ExprKind` of any given `Expr` for presentation don't have to care about `DropTemps`\n+    /// beyond remembering to call this function before doing analysis on it.\n+    pub fn peel_drop_temps(&self) -> &Self {\n+        let mut expr = self;\n+        while let ExprKind::DropTemps(inner) = &expr.kind {\n+            expr = inner;\n+        }\n+        expr\n+    }\n }\n \n impl fmt::Debug for Expr {"}, {"sha": "d92ea7fd49a7294fa5d87175bf524ac020399c5b", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff51611c42d160f95a01d556045d32f0539d8989/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff51611c42d160f95a01d556045d32f0539d8989/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=ff51611c42d160f95a01d556045d32f0539d8989", "patch": "@@ -115,6 +115,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Err(e) => e\n         };\n \n+        let expr = expr.peel_drop_temps();\n         let cause = self.misc(expr.span);\n         let expr_ty = self.resolve_type_vars_with_obligations(checked_ty);\n         let mut err = self.report_mismatched_types(&cause, expected, expr_ty, e);\n@@ -355,6 +356,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n         let is_macro = sp.from_expansion() && !is_desugaring;\n \n+        // `ExprKind::DropTemps` is semantically irrelevant for these suggestions.\n+        let expr = expr.peel_drop_temps();\n+\n         match (&expr.kind, &expected.kind, &checked_ty.kind) {\n             (_, &ty::Ref(_, exp, _), &ty::Ref(_, check, _)) => match (&exp.kind, &check.kind) {\n                 (&ty::Str, &ty::Array(arr, _)) |"}, {"sha": "ad46a443b8ffa9e886969f8409266a13d30b4d7a", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff51611c42d160f95a01d556045d32f0539d8989/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff51611c42d160f95a01d556045d32f0539d8989/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=ff51611c42d160f95a01d556045d32f0539d8989", "patch": "@@ -87,12 +87,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         if let Some(mut err) = self.demand_suptype_diag(expr.span, expected_ty, ty) {\n+            let expr = expr.peel_drop_temps();\n             self.suggest_ref_or_into(&mut err, expr, expected_ty, ty);\n-\n-            let expr = match &expr.kind {\n-                ExprKind::DropTemps(expr) => expr,\n-                _ => expr,\n-            };\n             extend_err(&mut err);\n             // Error possibly reported in `check_assign` so avoid emitting error again.\n             err.emit_unless(self.is_assign_to_bool(expr, expected_ty));"}, {"sha": "7475b9cc3b327b9b4940f2edc0b9587756aa12e9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff51611c42d160f95a01d556045d32f0539d8989/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff51611c42d160f95a01d556045d32f0539d8989/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ff51611c42d160f95a01d556045d32f0539d8989", "patch": "@@ -4216,20 +4216,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn suggest_mismatched_types_on_tail(\n         &self,\n         err: &mut DiagnosticBuilder<'tcx>,\n-        expression: &'tcx hir::Expr,\n+        expr: &'tcx hir::Expr,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n         cause_span: Span,\n         blk_id: hir::HirId,\n     ) -> bool {\n-        self.suggest_missing_semicolon(err, expression, expected, cause_span);\n+        let expr = expr.peel_drop_temps();\n+        self.suggest_missing_semicolon(err, expr, expected, cause_span);\n         let mut pointing_at_return_type = false;\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n             pointing_at_return_type = self.suggest_missing_return_type(\n                 err, &fn_decl, expected, found, can_suggest);\n         }\n-        self.suggest_ref_or_into(err, expression, expected, found);\n-        self.suggest_boxing_when_appropriate(err, expression, expected, found);\n+        self.suggest_ref_or_into(err, expr, expected, found);\n+        self.suggest_boxing_when_appropriate(err, expr, expected, found);\n         pointing_at_return_type\n     }\n "}, {"sha": "0936f3b9e38e856c313cb33272fcaffa658de498", "filename": "src/test/ui/if/if-no-match-bindings.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff51611c42d160f95a01d556045d32f0539d8989/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff51611c42d160f95a01d556045d32f0539d8989/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr?ref=ff51611c42d160f95a01d556045d32f0539d8989", "patch": "@@ -29,7 +29,7 @@ LL |     if &true {}\n    |        ^^^^^\n    |        |\n    |        expected bool, found &bool\n-   |        help: consider dereferencing the borrow: `*&true`\n+   |        help: consider removing the borrow: `true`\n    |\n    = note: expected type `bool`\n               found type `&bool`\n@@ -41,7 +41,7 @@ LL |     if &mut true {}\n    |        ^^^^^^^^^\n    |        |\n    |        expected bool, found &mut bool\n-   |        help: consider dereferencing the borrow: `*&mut true`\n+   |        help: consider removing the borrow: `true`\n    |\n    = note: expected type `bool`\n               found type `&mut bool`\n@@ -77,7 +77,7 @@ LL |     while &true {}\n    |           ^^^^^\n    |           |\n    |           expected bool, found &bool\n-   |           help: consider dereferencing the borrow: `*&true`\n+   |           help: consider removing the borrow: `true`\n    |\n    = note: expected type `bool`\n               found type `&bool`\n@@ -89,7 +89,7 @@ LL |     while &mut true {}\n    |           ^^^^^^^^^\n    |           |\n    |           expected bool, found &mut bool\n-   |           help: consider dereferencing the borrow: `*&mut true`\n+   |           help: consider removing the borrow: `true`\n    |\n    = note: expected type `bool`\n               found type `&mut bool`"}, {"sha": "ad4686c1915d67de9ef1e40b89cff1bca1e80770", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff51611c42d160f95a01d556045d32f0539d8989/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff51611c42d160f95a01d556045d32f0539d8989/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=ff51611c42d160f95a01d556045d32f0539d8989", "patch": "@@ -520,7 +520,7 @@ LL |     if &let 0 = 0 {}\n    |        ^^^^^^^^^^\n    |        |\n    |        expected bool, found &bool\n-   |        help: consider dereferencing the borrow: `*&let 0 = 0`\n+   |        help: consider removing the borrow: `let 0 = 0`\n    |\n    = note: expected type `bool`\n               found type `&bool`\n@@ -708,7 +708,7 @@ LL |     while &let 0 = 0 {}\n    |           ^^^^^^^^^^\n    |           |\n    |           expected bool, found &bool\n-   |           help: consider dereferencing the borrow: `*&let 0 = 0`\n+   |           help: consider removing the borrow: `let 0 = 0`\n    |\n    = note: expected type `bool`\n               found type `&bool`"}]}