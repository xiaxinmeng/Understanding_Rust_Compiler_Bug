{"sha": "a547055184c55961b3e7d89b031d0e7b07de0a36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NDcwNTUxODRjNTU5NjFiM2U3ZDg5YjAzMWQwZTdiMDdkZTBhMzY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-24T20:39:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-24T20:39:41Z"}, "message": "Rollup merge of #76614 - NoraCodes:nora/control_flow_enum, r=scottmcm\n\nchange the order of type arguments on ControlFlow\n\nThis allows ControlFlow<BreakType> which is much more ergonomic for common iterator combinator use cases.\n\nAddresses one component of #75744", "tree": {"sha": "57d0624bb7aba36360b59ede84a6f8fc63f8c14f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57d0624bb7aba36360b59ede84a6f8fc63f8c14f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a547055184c55961b3e7d89b031d0e7b07de0a36", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJflJENCRBK7hj4Ov3rIwAAdHIIAAwtzGt6NOaMNdz5DTK/5p6t\neOBsYefMGKcL2cXMY2oRjjj6vE8Bm+BivImMsOAa6lK5BHjlB//puRZkC0I39BxG\nntmSUGZ9px5CtorNKOlC+Y3WTbyV8TQNv3XGLkhw79XCBwKSALrVjVmPiVK+Un4R\nveFAjG0tVy8ZEMj/+eF/U2OhiBkJXB3pkCD1D21MCQMBM3m0H5w/JwOu0yWVgmvy\nJmUH9Bu2g7DLKEZU7SDFJWZ6yki5IVSa28ZSUlJSoi/qLN9S7RvqeNXQr4HVUbst\nwKVJrBpUnJD+6fIqmCEXvp66PJyWjjMIU4/u5IITigyYsPWO6zWYeiboGz0B9yk=\n=pqXv\n-----END PGP SIGNATURE-----\n", "payload": "tree 57d0624bb7aba36360b59ede84a6f8fc63f8c14f\nparent 01a38f0d9ad7abec9f71519d08fccb1f59a63a22\nparent bc2317915f72d8b37367fe3db32e3a1aa20493eb\nauthor Jonas Schievink <jonasschievink@gmail.com> 1603571981 +0200\ncommitter GitHub <noreply@github.com> 1603571981 +0200\n\nRollup merge of #76614 - NoraCodes:nora/control_flow_enum, r=scottmcm\n\nchange the order of type arguments on ControlFlow\n\nThis allows ControlFlow<BreakType> which is much more ergonomic for common iterator combinator use cases.\n\nAddresses one component of #75744\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a547055184c55961b3e7d89b031d0e7b07de0a36", "html_url": "https://github.com/rust-lang/rust/commit/a547055184c55961b3e7d89b031d0e7b07de0a36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a547055184c55961b3e7d89b031d0e7b07de0a36/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a38f0d9ad7abec9f71519d08fccb1f59a63a22", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a38f0d9ad7abec9f71519d08fccb1f59a63a22", "html_url": "https://github.com/rust-lang/rust/commit/01a38f0d9ad7abec9f71519d08fccb1f59a63a22"}, {"sha": "bc2317915f72d8b37367fe3db32e3a1aa20493eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc2317915f72d8b37367fe3db32e3a1aa20493eb", "html_url": "https://github.com/rust-lang/rust/commit/bc2317915f72d8b37367fe3db32e3a1aa20493eb"}], "stats": {"total": 48, "additions": 20, "deletions": 28}, "files": [{"sha": "5f42d46e28575453abc62e2694d3549befbf3679", "filename": "compiler/rustc_data_structures/src/graph/iterate/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a547055184c55961b3e7d89b031d0e7b07de0a36/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a547055184c55961b3e7d89b031d0e7b07de0a36/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs?ref=a547055184c55961b3e7d89b031d0e7b07de0a36", "patch": "@@ -1,6 +1,7 @@\n use super::{DirectedGraph, WithNumNodes, WithStartNode, WithSuccessors};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n+use std::ops::ControlFlow;\n \n #[cfg(test)]\n mod tests;\n@@ -86,10 +87,6 @@ where\n     }\n }\n \n-/// Allows searches to terminate early with a value.\n-// FIXME (#75744): remove the alias once the generics are in a better order and `C=()`.\n-pub type ControlFlow<T> = std::ops::ControlFlow<(), T>;\n-\n /// The status of a node in the depth-first search.\n ///\n /// See the documentation of `TriColorDepthFirstSearch` to see how a node's status is updated"}, {"sha": "576b537c017669140c562cb46a4c6ec6af94703c", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a547055184c55961b3e7d89b031d0e7b07de0a36/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a547055184c55961b3e7d89b031d0e7b07de0a36/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=a547055184c55961b3e7d89b031d0e7b07de0a36", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::graph::iterate::{\n-    ControlFlow, NodeStatus, TriColorDepthFirstSearch, TriColorVisitor,\n+    NodeStatus, TriColorDepthFirstSearch, TriColorVisitor,\n };\n use rustc_hir::intravisit::FnKind;\n use rustc_middle::hir::map::blocks::FnLikeNode;\n@@ -8,6 +8,7 @@ use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n use rustc_middle::ty::{self, AssocItem, AssocItemContainer, Instance, TyCtxt};\n use rustc_session::lint::builtin::UNCONDITIONAL_RECURSION;\n use rustc_span::Span;\n+use std::ops::ControlFlow;\n \n crate fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n     let def_id = body.source.def_id().expect_local();"}, {"sha": "9c8e639c2d802cfcf0350386b69575e874f5345a", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a547055184c55961b3e7d89b031d0e7b07de0a36/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a547055184c55961b3e7d89b031d0e7b07de0a36/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=a547055184c55961b3e7d89b031d0e7b07de0a36", "patch": "@@ -1280,7 +1280,7 @@ where\n         #[inline]\n         fn find<T, B>(\n             f: &mut impl FnMut(T) -> Option<B>,\n-        ) -> impl FnMut((), T) -> ControlFlow<(), B> + '_ {\n+        ) -> impl FnMut((), T) -> ControlFlow<B> + '_ {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n                 None => ControlFlow::CONTINUE,\n@@ -2059,7 +2059,7 @@ where\n             flag: &'a mut bool,\n             p: &'a mut impl FnMut(&T) -> bool,\n             mut fold: impl FnMut(Acc, T) -> R + 'a,\n-        ) -> impl FnMut(Acc, T) -> ControlFlow<Acc, R> + 'a {\n+        ) -> impl FnMut(Acc, T) -> ControlFlow<R, Acc> + 'a {\n             move |acc, x| {\n                 if p(&x) {\n                     ControlFlow::from_try(fold(acc, x))\n@@ -2372,7 +2372,7 @@ where\n         fn check<T, Acc, R: Try<Ok = Acc>>(\n             mut n: usize,\n             mut fold: impl FnMut(Acc, T) -> R,\n-        ) -> impl FnMut(Acc, T) -> ControlFlow<Acc, R> {\n+        ) -> impl FnMut(Acc, T) -> ControlFlow<R, Acc> {\n             move |acc, x| {\n                 n -= 1;\n                 let r = fold(acc, x);\n@@ -2496,7 +2496,7 @@ where\n         fn check<'a, T, Acc, R: Try<Ok = Acc>>(\n             n: &'a mut usize,\n             mut fold: impl FnMut(Acc, T) -> R + 'a,\n-        ) -> impl FnMut(Acc, T) -> ControlFlow<Acc, R> + 'a {\n+        ) -> impl FnMut(Acc, T) -> ControlFlow<R, Acc> + 'a {\n             move |acc, x| {\n                 *n -= 1;\n                 let r = fold(acc, x);\n@@ -2681,7 +2681,7 @@ where\n             state: &'a mut St,\n             f: &'a mut impl FnMut(&mut St, T) -> Option<B>,\n             mut fold: impl FnMut(Acc, B) -> R + 'a,\n-        ) -> impl FnMut(Acc, T) -> ControlFlow<Acc, R> + 'a {\n+        ) -> impl FnMut(Acc, T) -> ControlFlow<R, Acc> + 'a {\n             move |acc, x| match f(state, x) {\n                 None => ControlFlow::Break(try { acc }),\n                 Some(x) => ControlFlow::from_try(fold(acc, x)),"}, {"sha": "6f8cb6b5a65b6fcdef683a4b24b300cbfd1037e0", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a547055184c55961b3e7d89b031d0e7b07de0a36/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a547055184c55961b3e7d89b031d0e7b07de0a36/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=a547055184c55961b3e7d89b031d0e7b07de0a36", "patch": "@@ -339,9 +339,7 @@ pub trait DoubleEndedIterator: Iterator {\n         P: FnMut(&Self::Item) -> bool,\n     {\n         #[inline]\n-        fn check<T>(\n-            mut predicate: impl FnMut(&T) -> bool,\n-        ) -> impl FnMut((), T) -> ControlFlow<(), T> {\n+        fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {\n             move |(), x| {\n                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n             }"}, {"sha": "7fc60caec2a736fe5ee56895dc3575188c43bdab", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a547055184c55961b3e7d89b031d0e7b07de0a36/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a547055184c55961b3e7d89b031d0e7b07de0a36/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=a547055184c55961b3e7d89b031d0e7b07de0a36", "patch": "@@ -2109,7 +2109,7 @@ pub trait Iterator {\n         F: FnMut(Self::Item) -> bool,\n     {\n         #[inline]\n-        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<(), ()> {\n+        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {\n             move |(), x| {\n                 if f(x) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }\n             }\n@@ -2162,7 +2162,7 @@ pub trait Iterator {\n         F: FnMut(Self::Item) -> bool,\n     {\n         #[inline]\n-        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<(), ()> {\n+        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {\n             move |(), x| {\n                 if f(x) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n             }\n@@ -2222,9 +2222,7 @@ pub trait Iterator {\n         P: FnMut(&Self::Item) -> bool,\n     {\n         #[inline]\n-        fn check<T>(\n-            mut predicate: impl FnMut(&T) -> bool,\n-        ) -> impl FnMut((), T) -> ControlFlow<(), T> {\n+        fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {\n             move |(), x| {\n                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n             }\n@@ -2255,9 +2253,7 @@ pub trait Iterator {\n         F: FnMut(Self::Item) -> Option<B>,\n     {\n         #[inline]\n-        fn check<T, B>(\n-            mut f: impl FnMut(T) -> Option<B>,\n-        ) -> impl FnMut((), T) -> ControlFlow<(), B> {\n+        fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut((), T) -> ControlFlow<B> {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n                 None => ControlFlow::CONTINUE,\n@@ -2296,7 +2292,7 @@ pub trait Iterator {\n         R: Try<Ok = bool>,\n     {\n         #[inline]\n-        fn check<F, T, R>(mut f: F) -> impl FnMut((), T) -> ControlFlow<(), Result<T, R::Error>>\n+        fn check<F, T, R>(mut f: F) -> impl FnMut((), T) -> ControlFlow<Result<T, R::Error>>\n         where\n             F: FnMut(&T) -> R,\n             R: Try<Ok = bool>,"}, {"sha": "5ede1ba8e2c104076aa205dff4ff2edd5e87a738", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a547055184c55961b3e7d89b031d0e7b07de0a36/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a547055184c55961b3e7d89b031d0e7b07de0a36/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=a547055184c55961b3e7d89b031d0e7b07de0a36", "patch": "@@ -3,15 +3,15 @@ use crate::ops::Try;\n /// Used to make try_fold closures more like normal loops\n #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n #[derive(Debug, Clone, Copy, PartialEq)]\n-pub enum ControlFlow<C, B> {\n+pub enum ControlFlow<B, C = ()> {\n     /// Continue in the loop, using the given value for the next iteration\n     Continue(C),\n     /// Exit the loop, yielding the given value\n     Break(B),\n }\n \n #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n-impl<C, B> Try for ControlFlow<C, B> {\n+impl<B, C> Try for ControlFlow<B, C> {\n     type Ok = C;\n     type Error = B;\n     #[inline]\n@@ -31,7 +31,7 @@ impl<C, B> Try for ControlFlow<C, B> {\n     }\n }\n \n-impl<C, B> ControlFlow<C, B> {\n+impl<B, C> ControlFlow<B, C> {\n     /// Returns `true` if this is a `Break` variant.\n     #[inline]\n     #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n@@ -58,7 +58,7 @@ impl<C, B> ControlFlow<C, B> {\n     }\n }\n \n-impl<R: Try> ControlFlow<R::Ok, R> {\n+impl<R: Try> ControlFlow<R, R::Ok> {\n     /// Create a `ControlFlow` from any type implementing `Try`.\n     #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     #[inline]\n@@ -80,7 +80,7 @@ impl<R: Try> ControlFlow<R::Ok, R> {\n     }\n }\n \n-impl<B> ControlFlow<(), B> {\n+impl<B> ControlFlow<B, ()> {\n     /// It's frequently the case that there's no value needed with `Continue`,\n     /// so this provides a way to avoid typing `(())`, if you prefer it.\n     ///\n@@ -102,7 +102,7 @@ impl<B> ControlFlow<(), B> {\n     pub const CONTINUE: Self = ControlFlow::Continue(());\n }\n \n-impl<C> ControlFlow<C, ()> {\n+impl<C> ControlFlow<(), C> {\n     /// APIs like `try_for_each` don't need values with `Break`,\n     /// so this provides a way to avoid typing `(())`, if you prefer it.\n     ///"}]}