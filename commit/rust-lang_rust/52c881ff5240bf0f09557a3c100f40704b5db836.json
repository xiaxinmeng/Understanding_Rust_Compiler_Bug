{"sha": "52c881ff5240bf0f09557a3c100f40704b5db836", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYzg4MWZmNTI0MGJmMGYwOTU1N2EzYzEwMGY0MDcwNGI1ZGI4MzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-23T14:41:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-23T14:41:14Z"}, "message": "Auto merge of #87661 - FabianWolff:issue-87461, r=estebank\n\nImprove error reporting for closure return type mismatches\n\nFixes #87461.", "tree": {"sha": "0ab3e98dfe63dd2fea50634ae98fc487592f1355", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ab3e98dfe63dd2fea50634ae98fc487592f1355"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52c881ff5240bf0f09557a3c100f40704b5db836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52c881ff5240bf0f09557a3c100f40704b5db836", "html_url": "https://github.com/rust-lang/rust/commit/52c881ff5240bf0f09557a3c100f40704b5db836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52c881ff5240bf0f09557a3c100f40704b5db836/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5998c2e9adfb01f40ea9d0169488fbdaad10b035", "url": "https://api.github.com/repos/rust-lang/rust/commits/5998c2e9adfb01f40ea9d0169488fbdaad10b035", "html_url": "https://github.com/rust-lang/rust/commit/5998c2e9adfb01f40ea9d0169488fbdaad10b035"}, {"sha": "d2fe289fc7fe15c51da2b5c5b6b87211a14720b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2fe289fc7fe15c51da2b5c5b6b87211a14720b9", "html_url": "https://github.com/rust-lang/rust/commit/d2fe289fc7fe15c51da2b5c5b6b87211a14720b9"}], "stats": {"total": 111, "additions": 89, "deletions": 22}, "files": [{"sha": "a7fd20888428feaa848b7c8693a6ee8fdf63fdb1", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52c881ff5240bf0f09557a3c100f40704b5db836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c881ff5240bf0f09557a3c100f40704b5db836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=52c881ff5240bf0f09557a3c100f40704b5db836", "patch": "@@ -78,6 +78,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n     fn_id: hir::HirId,\n     body: &'tcx hir::Body<'tcx>,\n     can_be_generator: Option<hir::Movability>,\n+    return_type_pre_known: bool,\n ) -> (FnCtxt<'a, 'tcx>, Option<GeneratorTypes<'tcx>>) {\n     let mut fn_sig = fn_sig;\n \n@@ -87,6 +88,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n     // in the case of closures, based on the outer context.\n     let mut fcx = FnCtxt::new(inherited, param_env, body.value.hir_id);\n     fcx.ps.set(UnsafetyState::function(fn_sig.unsafety, fn_id));\n+    fcx.return_type_pre_known = return_type_pre_known;\n \n     let tcx = fcx.tcx;\n     let sess = tcx.sess;"}, {"sha": "e4b615e4adeaa4220f346ca613d295861d951e9d", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/52c881ff5240bf0f09557a3c100f40704b5db836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c881ff5240bf0f09557a3c100f40704b5db836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=52c881ff5240bf0f09557a3c100f40704b5db836", "patch": "@@ -73,8 +73,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         debug!(\"check_closure: ty_of_closure returns {:?}\", liberated_sig);\n \n-        let generator_types =\n-            check_fn(self, self.param_env, liberated_sig, decl, expr.hir_id, body, gen).1;\n+        let return_type_pre_known = !liberated_sig.output().is_ty_infer();\n+\n+        let generator_types = check_fn(\n+            self,\n+            self.param_env,\n+            liberated_sig,\n+            decl,\n+            expr.hir_id,\n+            body,\n+            gen,\n+            return_type_pre_known,\n+        )\n+        .1;\n \n         let parent_substs = InternalSubsts::identity_for_item(\n             self.tcx,"}, {"sha": "a4a54bac87028cb8920a5d90ea87a3c4d4286700", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/52c881ff5240bf0f09557a3c100f40704b5db836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c881ff5240bf0f09557a3c100f40704b5db836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=52c881ff5240bf0f09557a3c100f40704b5db836", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.suggest_missing_parentheses(err, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n-        self.report_closure_infered_return_type(err, expected)\n+        self.report_closure_inferred_return_type(err, expected);\n     }\n \n     // Requires that the two types unify, and prints an error message if\n@@ -1106,29 +1106,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     // Report the type inferred by the return statement.\n-    fn report_closure_infered_return_type(\n+    fn report_closure_inferred_return_type(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n         expected: Ty<'tcx>,\n     ) {\n         if let Some(sp) = self.ret_coercion_span.get() {\n-            // If the closure has an explicit return type annotation,\n-            // then a type error may occur at the first return expression we\n-            // see in the closure (if it conflicts with the declared\n-            // return type). Skip adding a note in this case, since it\n-            // would be incorrect.\n-            if !err.span.primary_spans().iter().any(|&span| span == sp) {\n-                let hir = self.tcx.hir();\n-                let body_owner = hir.body_owned_by(hir.enclosing_body_owner(self.body_id));\n-                if self.tcx.is_closure(hir.body_owner_def_id(body_owner).to_def_id()) {\n-                    err.span_note(\n-                        sp,\n-                        &format!(\n-                            \"return type inferred to be `{}` here\",\n-                            self.resolve_vars_if_possible(expected)\n-                        ),\n-                    );\n-                }\n+            // If the closure has an explicit return type annotation, or if\n+            // the closure's return type has been inferred from outside\n+            // requirements (such as an Fn* trait bound), then a type error\n+            // may occur at the first return expression we see in the closure\n+            // (if it conflicts with the declared return type). Skip adding a\n+            // note in this case, since it would be incorrect.\n+            if !self.return_type_pre_known {\n+                err.span_note(\n+                    sp,\n+                    &format!(\n+                        \"return type inferred to be `{}` here\",\n+                        self.resolve_vars_if_possible(expected)\n+                    ),\n+                );\n             }\n         }\n     }"}, {"sha": "a466a04bd98b18f7a1a6cb95810574434ba05cb1", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52c881ff5240bf0f09557a3c100f40704b5db836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c881ff5240bf0f09557a3c100f40704b5db836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=52c881ff5240bf0f09557a3c100f40704b5db836", "patch": "@@ -111,6 +111,12 @@ pub struct FnCtxt<'a, 'tcx> {\n     pub(super) enclosing_breakables: RefCell<EnclosingBreakables<'tcx>>,\n \n     pub(super) inh: &'a Inherited<'a, 'tcx>,\n+\n+    /// True if the function or closure's return type is known before\n+    /// entering the function/closure, i.e. if the return type is\n+    /// either given explicitly or inferred from, say, an `Fn*` trait\n+    /// bound. Used for diagnostic purposes only.\n+    pub(super) return_type_pre_known: bool,\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -137,6 +143,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 by_id: Default::default(),\n             }),\n             inh,\n+            return_type_pre_known: true,\n         }\n     }\n "}, {"sha": "2a196644dac9dd3be052cbca4bc0d0f59e471073", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52c881ff5240bf0f09557a3c100f40704b5db836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c881ff5240bf0f09557a3c100f40704b5db836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=52c881ff5240bf0f09557a3c100f40704b5db836", "patch": "@@ -392,7 +392,7 @@ fn typeck_with_fallback<'tcx>(\n                 fn_sig,\n             );\n \n-            let fcx = check_fn(&inh, param_env, fn_sig, decl, id, body, None).0;\n+            let fcx = check_fn(&inh, param_env, fn_sig, decl, id, body, None, true).0;\n             fcx\n         } else {\n             let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);"}, {"sha": "0151080eeb44a9b1f91d82eeb67ee821e4f83ff9", "filename": "src/test/ui/closures/issue-87461.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/52c881ff5240bf0f09557a3c100f40704b5db836/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c881ff5240bf0f09557a3c100f40704b5db836/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.rs?ref=52c881ff5240bf0f09557a3c100f40704b5db836", "patch": "@@ -0,0 +1,29 @@\n+// Regression test for #87461.\n+\n+// edition:2021\n+\n+async fn func() -> Result<u16, u64> {\n+    let _ = async {\n+        Err(42u64)\n+    }.await?;\n+\n+    Ok(())\n+    //~^ ERROR: mismatched types [E0308]\n+}\n+\n+async fn func2() -> Result<u16, u64> {\n+    Err(42u64)?;\n+\n+    Ok(())\n+    //~^ ERROR: mismatched types [E0308]\n+}\n+\n+fn main() {\n+    || -> Result<u16, u64> {\n+        if true {\n+            return Err(42u64);\n+        }\n+        Ok(())\n+        //~^ ERROR: mismatched types [E0308]\n+    };\n+}"}, {"sha": "a3cff2c12124ae4fc533207fb0c3a8e304966a13", "filename": "src/test/ui/closures/issue-87461.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/52c881ff5240bf0f09557a3c100f40704b5db836/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52c881ff5240bf0f09557a3c100f40704b5db836/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.stderr?ref=52c881ff5240bf0f09557a3c100f40704b5db836", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-87461.rs:10:8\n+   |\n+LL |     Ok(())\n+   |        ^^ expected `u16`, found `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-87461.rs:17:8\n+   |\n+LL |     Ok(())\n+   |        ^^ expected `u16`, found `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-87461.rs:26:12\n+   |\n+LL |         Ok(())\n+   |            ^^ expected `u16`, found `()`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}