{"sha": "ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNGFkNTU1ZDc2ZDJlYjhlNmViNzQ5ZTFiNGMxNjNlMTYwNzc5ODU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-08T08:36:43Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-08T20:55:25Z"}, "message": "Introduce `#[rustc_dummy]` attribute and use it in tests\n\nUnlike other built-in attributes, this attribute accepts any input", "tree": {"sha": "db7c7c663622201b88c9deb1d41bbe24177c3283", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db7c7c663622201b88c9deb1d41bbe24177c3283"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "html_url": "https://github.com/rust-lang/rust/commit/ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74a6d1c821a37a407d2b2bc701d62d0b460b9215", "url": "https://api.github.com/repos/rust-lang/rust/commits/74a6d1c821a37a407d2b2bc701d62d0b460b9215", "html_url": "https://github.com/rust-lang/rust/commit/74a6d1c821a37a407d2b2bc701d62d0b460b9215"}], "stats": {"total": 940, "additions": 458, "deletions": 482}, "files": [{"sha": "7119fd13fbbfb0ba2c223d08a989edb270210147", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1336,6 +1336,11 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n                                                 \"internal implementation detail\",\n                                                 cfg_fn!(rustc_attrs))),\n \n+    (sym::rustc_dummy, Normal, template!(Word /* doesn't matter*/), Gated(Stability::Unstable,\n+                                         sym::rustc_attrs,\n+                                         \"used by the test suite\",\n+                                         cfg_fn!(rustc_attrs))),\n+\n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n     (\n         sym::doc,\n@@ -1962,12 +1967,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n \n         match attr_info {\n-            Some(&(name, _, template, _)) => self.check_builtin_attribute(\n-                attr,\n-                name,\n-                template\n-            ),\n-            None => if let Some(TokenTree::Token(token)) = attr.tokens.trees().next() {\n+            // `rustc_dummy` doesn't have any restrictions specific to built-in attributes.\n+            Some(&(name, _, template, _)) if name != sym::rustc_dummy =>\n+                self.check_builtin_attribute(attr, name, template),\n+            _ => if let Some(TokenTree::Token(token)) = attr.tokens.trees().next() {\n                 if token == token::Eq {\n                     // All key-value attributes are restricted to meta-item syntax.\n                     attr.parse_meta(self.context.parse_sess).map_err(|mut err| err.emit()).ok();"}, {"sha": "302b3c75263cf687c32a56660d1cb8c667e7f3ac", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -527,6 +527,7 @@ symbols! {\n         rustc_diagnostic_macros,\n         rustc_dirty,\n         rustc_doc_only_macro,\n+        rustc_dummy,\n         rustc_dump_env_program_clauses,\n         rustc_dump_program_clauses,\n         rustc_dump_user_substs,"}, {"sha": "0a745e7d34fc1bcab326efa5a9dc39a9ef0e4b76", "filename": "src/test/pretty/attr-fn-inner.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fpretty%2Fattr-fn-inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fpretty%2Fattr-fn-inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-fn-inner.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,15 +1,16 @@\n-// pp-exact\n // Testing that both the inner item and next outer item are\n // preserved, and that the first outer item parsed in main is not\n // accidentally carried over to each inner function\n \n-#![feature(custom_attribute)]\n+// pp-exact\n+\n+#![feature(rustc_attrs)]\n \n fn main() {\n-    #![inner_attr]\n-    #[outer_attr]\n+    #![rustc_dummy]\n+    #[rustc_dummy]\n     fn f() { }\n \n-    #[outer_attr]\n+    #[rustc_dummy]\n     fn g() { }\n }"}, {"sha": "44d2c5db3e668e67fad55215387a9710a4aeb250", "filename": "src/test/pretty/attr-literals.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fpretty%2Fattr-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fpretty%2Fattr-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-literals.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,13 +1,14 @@\n-// pp-exact\n // Tests literals in attributes.\n \n-#![feature(custom_attribute)]\n+// pp-exact\n+\n+#![feature(rustc_attrs)]\n \n fn main() {\n-    #![hello(\"hi\", 1, 2, 1.012, pi = 3.14, bye, name(\"John\"))]\n-    #[align = 8]\n+    #![rustc_dummy(\"hi\", 1, 2, 1.012, pi = 3.14, bye, name(\"John\"))]\n+    #[rustc_dummy = 8]\n     fn f() { }\n \n-    #[vector(1, 2, 3)]\n+    #[rustc_dummy(1, 2, 3)]\n     fn g() { }\n }"}, {"sha": "d81485b555fa6c502a699f52e2ca5308d0d46be4", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 134, "deletions": 145, "changes": 279, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,84 +1,84 @@\n // pp-exact\n \n-#![feature(custom_attribute)]\n #![feature(box_syntax)]\n+#![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n \n fn main() { }\n \n fn _0() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     foo();\n }\n \n fn _1() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     unsafe {\n         // code\n     }\n }\n \n fn _2() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     { foo(); }\n \n     {\n-        #![attr]\n+        #![rustc_dummy]\n \n         foo()\n     }\n }\n \n fn _3() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     match () { _ => { } }\n }\n \n fn _4() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     match () {\n-        #![attr]\n+        #![rustc_dummy]\n         _ => (),\n     }\n \n     let _ =\n-        #[attr] match () {\n-                    #![attr]\n-                    () => (),\n-                };\n+        #[rustc_dummy] match () {\n+                           #![rustc_dummy]\n+                           () => (),\n+                       };\n }\n \n fn _5() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     let x = 1;\n \n-    let x = #[attr] 1;\n+    let x = #[rustc_dummy] 1;\n \n     let y = ();\n     let z = ();\n \n-    foo3(x, #[attr] y, z);\n+    foo3(x, #[rustc_dummy] y, z);\n \n-    qux(3 + #[attr] 2);\n+    qux(3 + #[rustc_dummy] 2);\n }\n \n fn _6() {\n \n-    #[attr]\n-    [#![attr] 1, 2, 3];\n+    #[rustc_dummy]\n+    [#![rustc_dummy] 1, 2, 3];\n \n-    let _ = #[attr] [#![attr] 1, 2, 3];\n+    let _ = #[rustc_dummy] [#![rustc_dummy] 1, 2, 3];\n \n-    #[attr]\n-    [#![attr] 1; 4];\n+    #[rustc_dummy]\n+    [#![rustc_dummy] 1; 4];\n \n-    let _ = #[attr] [#![attr] 1; 4];\n+    let _ = #[rustc_dummy] [#![rustc_dummy] 1; 4];\n }\n \n struct Foo {\n@@ -89,184 +89,173 @@ struct Bar(());\n \n fn _7() {\n \n-    #[attr]\n-    Foo{#![attr] data: (),};\n+    #[rustc_dummy]\n+    Foo{#![rustc_dummy] data: (),};\n \n-    let _ = #[attr] Foo{#![attr] data: (),};\n+    let _ = #[rustc_dummy] Foo{#![rustc_dummy] data: (),};\n }\n \n fn _8() {\n \n-    #[attr]\n-    (#![attr] );\n+    #[rustc_dummy]\n+    (#![rustc_dummy] );\n \n-    #[attr]\n-    (#![attr] 0);\n+    #[rustc_dummy]\n+    (#![rustc_dummy] 0);\n \n-    #[attr]\n-    (#![attr] 0,);\n+    #[rustc_dummy]\n+    (#![rustc_dummy] 0,);\n \n-    #[attr]\n-    (#![attr] 0, 1);\n+    #[rustc_dummy]\n+    (#![rustc_dummy] 0, 1);\n }\n \n fn _9() {\n     macro_rules! stmt_mac((  ) => { let _ = (  ) ; });\n \n-    #[attr]\n+    #[rustc_dummy]\n     stmt_mac!();\n \n-    /*\n-    // pre existing pp bug: delimiter styles gets lost:\n-\n-    #[attr]\n+    #[rustc_dummy]\n     stmt_mac!{ };\n \n-    #[attr]\n+    #[rustc_dummy]\n     stmt_mac![];\n \n-    #[attr]\n-    stmt_mac!{ } // pre-existing pp bug: compiler ICEs with a None unwrap\n-    */\n+    #[rustc_dummy]\n+    stmt_mac!{ }\n \n     let _ = ();\n }\n \n macro_rules! expr_mac((  ) => { (  ) });\n \n fn _10() {\n-\n-    let _ = #[attr] expr_mac!();\n-\n-    /*\n-    // pre existing pp bug: delimiter styles gets lost:\n-    let _ = #[attr] expr_mac![];\n-    let _ = #[attr] expr_mac!{};\n-    */\n+    let _ = #[rustc_dummy] expr_mac!();\n+    let _ = #[rustc_dummy] expr_mac![];\n+    let _ = #[rustc_dummy] expr_mac!{ };\n }\n \n fn _11() {\n-    let _ = #[attr] box 0;\n-    let _: [(); 0] = #[attr] [#![attr] ];\n-    let _ = #[attr] [#![attr] 0, 0];\n-    let _ = #[attr] [#![attr] 0; 0];\n-    let _ = #[attr] foo();\n-    let _ = #[attr] 1i32.clone();\n-    let _ = #[attr] (#![attr] );\n-    let _ = #[attr] (#![attr] 0);\n-    let _ = #[attr] (#![attr] 0,);\n-    let _ = #[attr] (#![attr] 0, 0);\n-    let _ = #[attr] 0 + #[attr] 0;\n-    let _ = #[attr] !0;\n-    let _ = #[attr] -0i32;\n-    let _ = #[attr] false;\n-    let _ = #[attr] 'c';\n-    let _ = #[attr] 0;\n-    let _ = #[attr] 0 as usize;\n+    let _ = #[rustc_dummy] box 0;\n+    let _: [(); 0] = #[rustc_dummy] [#![rustc_dummy] ];\n+    let _ = #[rustc_dummy] [#![rustc_dummy] 0, 0];\n+    let _ = #[rustc_dummy] [#![rustc_dummy] 0; 0];\n+    let _ = #[rustc_dummy] foo();\n+    let _ = #[rustc_dummy] 1i32.clone();\n+    let _ = #[rustc_dummy] (#![rustc_dummy] );\n+    let _ = #[rustc_dummy] (#![rustc_dummy] 0);\n+    let _ = #[rustc_dummy] (#![rustc_dummy] 0,);\n+    let _ = #[rustc_dummy] (#![rustc_dummy] 0, 0);\n+    let _ = #[rustc_dummy] 0 + #[rustc_dummy] 0;\n+    let _ = #[rustc_dummy] !0;\n+    let _ = #[rustc_dummy] -0i32;\n+    let _ = #[rustc_dummy] false;\n+    let _ = #[rustc_dummy] 'c';\n+    let _ = #[rustc_dummy] 0;\n+    let _ = #[rustc_dummy] 0 as usize;\n     let _ =\n-        #[attr] while false {\n-                    #![attr]\n-                };\n+        #[rustc_dummy] while false {\n+                           #![rustc_dummy]\n+                       };\n     let _ =\n-        #[attr] while let None = Some(()) {\n-                    #![attr]\n-                };\n+        #[rustc_dummy] while let None = Some(()) {\n+                           #![rustc_dummy]\n+                       };\n     let _ =\n-        #[attr] for _ in 0..0 {\n-                    #![attr]\n-                };\n+        #[rustc_dummy] for _ in 0..0 {\n+                           #![rustc_dummy]\n+                       };\n     // FIXME: pp bug, two spaces after the loop\n     let _ =\n-        #[attr] loop  {\n-                    #![attr]\n-                };\n+        #[rustc_dummy] loop  {\n+                           #![rustc_dummy]\n+                       };\n     let _ =\n-        #[attr] match false {\n-                    #![attr]\n-                    _ => (),\n-                };\n-    let _ = #[attr] || #[attr] ();\n-    let _ = #[attr] move || #[attr] ();\n+        #[rustc_dummy] match false {\n+                           #![rustc_dummy]\n+                           _ => (),\n+                       };\n+    let _ = #[rustc_dummy] || #[rustc_dummy] ();\n+    let _ = #[rustc_dummy] move || #[rustc_dummy] ();\n     let _ =\n-        #[attr] ||\n-                    {\n-                        #![attr]\n-                        #[attr]\n-                        ()\n-                    };\n+        #[rustc_dummy] ||\n+                           {\n+                               #![rustc_dummy]\n+                               #[rustc_dummy]\n+                               ()\n+                           };\n     let _ =\n-        #[attr] move ||\n-                    {\n-                        #![attr]\n-                        #[attr]\n-                        ()\n-                    };\n+        #[rustc_dummy] move ||\n+                           {\n+                               #![rustc_dummy]\n+                               #[rustc_dummy]\n+                               ()\n+                           };\n     let _ =\n-        #[attr] {\n-                    #![attr]\n-                };\n+        #[rustc_dummy] {\n+                           #![rustc_dummy]\n+                       };\n     let _ =\n-        #[attr] {\n-                    #![attr]\n-                    let _ = ();\n-                };\n+        #[rustc_dummy] {\n+                           #![rustc_dummy]\n+                           let _ = ();\n+                       };\n     let _ =\n-        #[attr] {\n-                    #![attr]\n-                    let _ = ();\n-                    ()\n-                };\n+        #[rustc_dummy] {\n+                           #![rustc_dummy]\n+                           let _ = ();\n+                           ()\n+                       };\n     let mut x = 0;\n-    let _ = #[attr] x = 15;\n-    let _ = #[attr] x += 15;\n+    let _ = #[rustc_dummy] x = 15;\n+    let _ = #[rustc_dummy] x += 15;\n     let s = Foo{data: (),};\n-    let _ = #[attr] s.data;\n-    let _ = (#[attr] s).data;\n+    let _ = #[rustc_dummy] s.data;\n+    let _ = (#[rustc_dummy] s).data;\n     let t = Bar(());\n-    let _ = #[attr] t.0;\n-    let _ = (#[attr] t).0;\n+    let _ = #[rustc_dummy] t.0;\n+    let _ = (#[rustc_dummy] t).0;\n     let v = vec!(0);\n-    let _ = #[attr] v[0];\n-    let _ = (#[attr] v)[0];\n-    let _ = #[attr] 0..#[attr] 0;\n-    let _ = #[attr] 0..;\n-    let _ = #[attr] (0..0);\n-    let _ = #[attr] (0..);\n-    let _ = #[attr] (..0);\n-    let _ = #[attr] (..);\n-    let _: fn(&u32) -> u32 = #[attr] std::clone::Clone::clone;\n-    let _ = #[attr] &0;\n-    let _ = #[attr] &mut 0;\n-    let _ = #[attr] &#[attr] 0;\n-    let _ = #[attr] &mut #[attr] 0;\n+    let _ = #[rustc_dummy] v[0];\n+    let _ = (#[rustc_dummy] v)[0];\n+    let _ = #[rustc_dummy] 0..#[rustc_dummy] 0;\n+    let _ = #[rustc_dummy] 0..;\n+    let _ = #[rustc_dummy] (0..0);\n+    let _ = #[rustc_dummy] (0..);\n+    let _ = #[rustc_dummy] (..0);\n+    let _ = #[rustc_dummy] (..);\n+    let _: fn(&u32) -> u32 = #[rustc_dummy] std::clone::Clone::clone;\n+    let _ = #[rustc_dummy] &0;\n+    let _ = #[rustc_dummy] &mut 0;\n+    let _ = #[rustc_dummy] &#[rustc_dummy] 0;\n+    let _ = #[rustc_dummy] &mut #[rustc_dummy] 0;\n     // FIXME: pp bug, extra space after keyword?\n-    while false { let _ = #[attr] continue ; }\n-    while true { let _ = #[attr] break ; }\n-    || #[attr] return;\n-    let _ = #[attr] expr_mac!();\n-    /* FIXME: pp bug, losing delimiter styles\n-    let _ = #[attr] expr_mac![];\n-    let _ = #[attr] expr_mac!{};\n-    */\n-    let _ = #[attr] Foo{#![attr] data: (),};\n-    let _ = #[attr] Foo{#![attr] ..s};\n-    let _ = #[attr] Foo{#![attr] data: (), ..s};\n-    let _ = #[attr] (#![attr] 0);\n+    while false { let _ = #[rustc_dummy] continue ; }\n+    while true { let _ = #[rustc_dummy] break ; }\n+    || #[rustc_dummy] return;\n+    let _ = #[rustc_dummy] expr_mac!();\n+    let _ = #[rustc_dummy] expr_mac![];\n+    let _ = #[rustc_dummy] expr_mac!{ };\n+    let _ = #[rustc_dummy] Foo{#![rustc_dummy] data: (),};\n+    let _ = #[rustc_dummy] Foo{#![rustc_dummy] ..s};\n+    let _ = #[rustc_dummy] Foo{#![rustc_dummy] data: (), ..s};\n+    let _ = #[rustc_dummy] (#![rustc_dummy] 0);\n }\n \n fn _12() {\n-    #[attr]\n+    #[rustc_dummy]\n     let _ = 0;\n \n-    #[attr]\n+    #[rustc_dummy]\n     0;\n \n-    #[attr]\n+    #[rustc_dummy]\n     expr_mac!();\n \n-    #[attr]\n+    #[rustc_dummy]\n     {\n-        #![attr]\n+        #![rustc_dummy]\n     }\n }\n "}, {"sha": "3aa2ee77ee51cfe5712c3e486c71f69a83830aa1", "filename": "src/test/run-pass/attr-before-view-item.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,11 +1,10 @@\n-#![allow(unused_attributes)]\n-\n // pretty-expanded FIXME #23616\n \n-#![feature(custom_attribute, test)]\n+#![allow(unused)]\n+#![feature(rustc_attrs)]\n+#![feature(test)]\n \n-#[foo = \"bar\"]\n+#[rustc_dummy = \"bar\"]\n extern crate test;\n \n-pub fn main() {\n-}\n+fn main() {}"}, {"sha": "2b3a09b5e6fd5216c475ddbd6c6e728816c04550", "filename": "src/test/run-pass/attr-before-view-item2.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,13 +1,12 @@\n-#![allow(unused_attributes)]\n-\n // pretty-expanded FIXME #23616\n \n-#![feature(custom_attribute, test)]\n+#![allow(unused)]\n+#![feature(rustc_attrs)]\n+#![feature(test)]\n \n mod m {\n-    #[foo = \"bar\"]\n+    #[rustc_dummy = \"bar\"]\n     extern crate test;\n }\n \n-pub fn main() {\n-}\n+fn main() {}"}, {"sha": "ca53bfacf919109b09bd083bf13f23ceb5f6ecfc", "filename": "src/test/run-pass/attr-mix-new.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,14 +1,11 @@\n-#![allow(unused_attributes)]\n-#![allow(unknown_lints)]\n-\n // pretty-expanded FIXME #23616\n \n-#![allow(unused_attribute)]\n-#![feature(custom_attribute)]\n+#![allow(unused)]\n+#![feature(rustc_attrs)]\n \n-#[foo(bar)]\n+#[rustc_dummy(bar)]\n mod foo {\n   #![feature(globs)]\n }\n \n-pub fn main() {}\n+fn main() {}"}, {"sha": "1801fa05f85c921608af56385475fb0c42f12671", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 56, "deletions": 60, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,80 +1,76 @@\n-#![allow(non_camel_case_types)]\n-#![allow(non_upper_case_globals)]\n-#![allow(unused_attributes)]\n-#![allow(dead_code)]\n-#![allow(unknown_lints)]\n // These are attributes of the implicit crate. Really this just needs to parse\n // for completeness since .rs files linked from .rc files support this\n // notation to specify their module's attributes\n \n-#![feature(custom_attribute)]\n-#![allow(unused_attribute)]\n-#![attr1 = \"val\"]\n-#![attr2 = \"val\"]\n-#![attr3]\n-#![attr4(attr5)]\n+#![allow(unused)]\n+#![feature(rustc_attrs)]\n+\n+#![rustc_dummy = \"val\"]\n+#![rustc_dummy = \"val\"]\n+#![rustc_dummy]\n+#![rustc_dummy(attr5)]\n \n #![crate_id=\"foobar#0.1\"]\n \n // These are attributes of the following mod\n-#[attr1 = \"val\"]\n-#[attr2 = \"val\"]\n+#[rustc_dummy = \"val\"]\n+#[rustc_dummy = \"val\"]\n mod test_first_item_in_file_mod {}\n \n mod test_single_attr_outer {\n-    #[attr = \"val\"]\n-    pub static x: isize = 10;\n+    #[rustc_dummy = \"val\"]\n+    pub static X: isize = 10;\n \n-    #[attr = \"val\"]\n+    #[rustc_dummy = \"val\"]\n     pub fn f() { }\n \n-    #[attr = \"val\"]\n+    #[rustc_dummy = \"val\"]\n     pub mod mod1 {}\n \n     pub mod rustrt {\n-        #[attr = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         extern {}\n     }\n }\n \n mod test_multi_attr_outer {\n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n-    pub static x: isize = 10;\n+    #[rustc_dummy = \"val\"]\n+    #[rustc_dummy = \"val\"]\n+    pub static X: isize = 10;\n \n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n+    #[rustc_dummy = \"val\"]\n+    #[rustc_dummy = \"val\"]\n     pub fn f() { }\n \n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n+    #[rustc_dummy = \"val\"]\n+    #[rustc_dummy = \"val\"]\n     pub mod mod1 {}\n \n     pub mod rustrt {\n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n+        #[rustc_dummy = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         extern {}\n     }\n \n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n-    struct t {x: isize}\n+    #[rustc_dummy = \"val\"]\n+    #[rustc_dummy = \"val\"]\n+    struct T {x: isize}\n }\n \n mod test_stmt_single_attr_outer {\n     pub fn f() {\n-        #[attr = \"val\"]\n-        static x: isize = 10;\n+        #[rustc_dummy = \"val\"]\n+        static X: isize = 10;\n \n-        #[attr = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         fn f() { }\n \n-        #[attr = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         mod mod1 {\n         }\n \n         mod rustrt {\n-            #[attr = \"val\"]\n+            #[rustc_dummy = \"val\"]\n             extern {\n             }\n         }\n@@ -84,22 +80,22 @@ mod test_stmt_single_attr_outer {\n mod test_stmt_multi_attr_outer {\n     pub fn f() {\n \n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n-        static x: isize = 10;\n+        #[rustc_dummy = \"val\"]\n+        #[rustc_dummy = \"val\"]\n+        static X: isize = 10;\n \n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n+        #[rustc_dummy = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         fn f() { }\n \n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n+        #[rustc_dummy = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         mod mod1 {\n         }\n \n         mod rustrt {\n-            #[attr1 = \"val\"]\n-            #[attr2 = \"val\"]\n+            #[rustc_dummy = \"val\"]\n+            #[rustc_dummy = \"val\"]\n             extern {\n             }\n         }\n@@ -109,54 +105,54 @@ mod test_stmt_multi_attr_outer {\n mod test_attr_inner {\n     pub mod m {\n         // This is an attribute of mod m\n-        #![attr = \"val\"]\n+        #![rustc_dummy = \"val\"]\n     }\n }\n \n mod test_attr_inner_then_outer {\n     pub mod m {\n         // This is an attribute of mod m\n-        #![attr = \"val\"]\n+        #![rustc_dummy = \"val\"]\n         // This is an attribute of fn f\n-        #[attr = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         fn f() { }\n     }\n }\n \n mod test_attr_inner_then_outer_multi {\n     pub mod m {\n         // This is an attribute of mod m\n-        #![attr1 = \"val\"]\n-        #![attr2 = \"val\"]\n+        #![rustc_dummy = \"val\"]\n+        #![rustc_dummy = \"val\"]\n         // This is an attribute of fn f\n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n+        #[rustc_dummy = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         fn f() { }\n     }\n }\n \n mod test_distinguish_syntax_ext {\n     pub fn f() {\n         format!(\"test{}\", \"s\");\n-        #[attr = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         fn g() { }\n     }\n }\n \n mod test_other_forms {\n-    #[attr]\n-    #[attr(word)]\n-    #[attr(attr(word))]\n-    #[attr(key1 = \"val\", key2 = \"val\", attr)]\n+    #[rustc_dummy]\n+    #[rustc_dummy(word)]\n+    #[rustc_dummy(attr(word))]\n+    #[rustc_dummy(key1 = \"val\", key2 = \"val\", attr)]\n     pub fn f() { }\n }\n \n mod test_foreign_items {\n     pub mod rustrt {\n         extern {\n-            #![attr]\n+            #![rustc_dummy]\n \n-            #[attr]\n+            #[rustc_dummy]\n             fn rust_get_test_int() -> u32;\n         }\n     }\n@@ -178,7 +174,7 @@ mod test_foreign_items {\n }*/\n \n fn test_fn_inner() {\n-    #![inner_fn_attr]\n+    #![rustc_dummy]\n }\n \n-pub fn main() { }\n+fn main() {}"}, {"sha": "8a4ce49ffb6c4a395237631b7b4fef97886f43eb", "filename": "src/test/run-pass/methods/method-attributes.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fmethods%2Fmethod-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fmethods%2Fmethod-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethods%2Fmethod-attributes.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,31 +1,28 @@\n-// run-pass\n-#![allow(unused_attributes)]\n-#![allow(non_camel_case_types)]\n-\n // pp-exact - Make sure we print all the attributes\n // pretty-expanded FIXME #23616\n \n-#![feature(custom_attribute)]\n+#![allow(unused)]\n+#![feature(rustc_attrs)]\n \n-#[frobable]\n-trait frobable {\n-    #[frob_attr]\n+#[rustc_dummy]\n+trait Frobable {\n+    #[rustc_dummy]\n     fn frob(&self);\n-    #[defrob_attr]\n+    #[rustc_dummy]\n     fn defrob(&self);\n }\n \n-#[int_frobable]\n-impl frobable for isize {\n-    #[frob_attr1]\n+#[rustc_dummy]\n+impl Frobable for isize {\n+    #[rustc_dummy]\n     fn frob(&self) {\n-        #![frob_attr2]\n+        #![rustc_dummy]\n     }\n \n-    #[defrob_attr1]\n+    #[rustc_dummy]\n     fn defrob(&self) {\n-        #![defrob_attr2]\n+        #![rustc_dummy]\n     }\n }\n \n-pub fn main() { }\n+fn main() {}"}, {"sha": "62cd10ef3bf5f8fb4604b0d76e1bd09c1c83974d", "filename": "src/test/run-pass/structs-enums/class-attributes-1.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-1.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,21 +1,19 @@\n-// run-pass\n-#![allow(unused_attributes)]\n-#![allow(non_camel_case_types)]\n-\n // pp-exact - Make sure we actually print the attributes\n-#![feature(custom_attribute)]\n \n-struct cat {\n+#![allow(unused)]\n+#![feature(rustc_attrs)]\n+\n+struct Cat {\n     name: String,\n }\n \n-impl Drop for cat {\n-    #[cat_dropper]\n+impl Drop for Cat {\n+    #[rustc_dummy]\n     fn drop(&mut self) { println!(\"{} landed on hir feet\" , self . name); }\n }\n \n \n-#[cat_maker]\n-fn cat(name: String) -> cat { cat{name: name,} }\n+#[rustc_dummy]\n+fn cat(name: String) -> Cat { Cat{name: name,} }\n \n-pub fn main() { let _kitty = cat(\"Spotty\".to_string()); }\n+fn main() { let _kitty = cat(\"Spotty\".to_string()); }"}, {"sha": "5026ce84ad90268677e00ac94d03dcfc7aca0c86", "filename": "src/test/run-pass/structs-enums/class-attributes-2.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-2.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,15 +1,12 @@\n-// run-pass\n-#![allow(unused_attributes)]\n-#![allow(non_camel_case_types)]\n+#![allow(unused)]\n+#![feature(rustc_attrs)]\n \n-#![feature(custom_attribute)]\n-\n-struct cat {\n-  name: String,\n+struct Cat {\n+    name: String,\n }\n \n-impl Drop for cat {\n-    #[cat_dropper]\n+impl Drop for Cat {\n+    #[rustc_dummy]\n     /**\n        Actually, cats don't always land on their feet when you drop them.\n     */\n@@ -18,16 +15,16 @@ impl Drop for cat {\n     }\n }\n \n-#[cat_maker]\n+#[rustc_dummy]\n /**\n Maybe it should technically be a kitten_maker.\n */\n-fn cat(name: String) -> cat {\n-    cat {\n+fn cat(name: String) -> Cat {\n+    Cat {\n         name: name\n     }\n }\n \n-pub fn main() {\n-  let _kitty = cat(\"Spotty\".to_string());\n+fn main() {\n+    let _kitty = cat(\"Spotty\".to_string());\n }"}, {"sha": "25a214cea82f68edb74e3e030888614a717151e0", "filename": "src/test/run-pass/variant-attributes.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fvariant-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Frun-pass%2Fvariant-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariant-attributes.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,38 +1,37 @@\n-#![allow(unused_attributes)]\n-#![allow(non_camel_case_types)]\n-#![allow(dead_code)]\n // pp-exact - Make sure we actually print the attributes\n // pretty-expanded FIXME #23616\n \n-#![feature(custom_attribute)]\n+#![allow(unused)]\n+#![allow(non_camel_case_types)]\n+#![feature(rustc_attrs)]\n \n enum crew_of_enterprise_d {\n \n-    #[captain]\n+    #[rustc_dummy]\n     jean_luc_picard,\n \n-    #[oldcommander]\n+    #[rustc_dummy]\n     william_t_riker,\n \n-    #[chief_medical_officer]\n+    #[rustc_dummy]\n     beverly_crusher,\n \n-    #[ships_councellor]\n+    #[rustc_dummy]\n     deanna_troi,\n \n-    #[lieutenant_oldcommander]\n+    #[rustc_dummy]\n     data,\n \n-    #[chief_of_security]\n+    #[rustc_dummy]\n     worf,\n \n-    #[chief_engineer]\n+    #[rustc_dummy]\n     geordi_la_forge,\n }\n \n fn boldly_go(_crew_member: crew_of_enterprise_d, _where: String) { }\n \n-pub fn main() {\n+fn main() {\n     boldly_go(crew_of_enterprise_d::worf,\n               \"where no one has gone before\".to_string());\n }"}, {"sha": "2424a1c92cd644a80981c1f7f204f7a379babf85", "filename": "src/test/ui/issues/issue-24434.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fissues%2Fissue-24434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fissues%2Fissue-24434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24434.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,8 +1,7 @@\n // compile-pass\n-#![allow(unused_attributes)]\n // compile-flags:--cfg set1\n \n-#![cfg_attr(set1, feature(custom_attribute))]\n+#![cfg_attr(set1, feature(rustc_attrs))]\n+#![rustc_dummy]\n \n-#![foobar]\n fn main() {}"}, {"sha": "56a902315661293e21971ce57cf9ea0003e2ce8d", "filename": "src/test/ui/macros/macro-inner-attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fmacros%2Fmacro-inner-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fmacros%2Fmacro-inner-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-inner-attributes.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,4 +1,4 @@\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n macro_rules! test { ($nm:ident,\n                      #[$a:meta],\n@@ -12,7 +12,7 @@ test!(b,\n       #[cfg(not(qux))],\n       pub fn bar() { });\n \n-#[qux]\n+#[rustc_dummy]\n fn main() {\n     a::bar();\n     //~^ ERROR failed to resolve: use of undeclared type or module `a`"}, {"sha": "0752f7e3153c19e5b7ac870bf4185b4fa6235a12", "filename": "src/test/ui/macros/macro-outer-attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,4 +1,4 @@\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n macro_rules! test { ($nm:ident,\n                      #[$a:meta],\n@@ -13,7 +13,7 @@ test!(b,\n       pub fn bar() { });\n \n // test1!(#[bar])\n-#[qux]\n+#[rustc_dummy]\n fn main() {\n     a::bar(); //~ ERROR cannot find function `bar` in module `a`\n     b::bar();"}, {"sha": "5101b5caeea09c31df69bf6a56586e7979b02bf2", "filename": "src/test/ui/malformed/malformed-interpolated.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,9 +1,9 @@\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n macro_rules! check {\n     ($expr: expr) => (\n-        #[my_attr = $expr] //~ ERROR unexpected token: `-0`\n-                           //~| ERROR unexpected token: `0 + 0`\n+        #[rustc_dummy = $expr] //~ ERROR unexpected token: `-0`\n+                               //~| ERROR unexpected token: `0 + 0`\n         use main as _;\n     );\n }"}, {"sha": "bcd2ef545d815ed93bbb93eca31d21059563a167", "filename": "src/test/ui/malformed/malformed-interpolated.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -7,19 +7,19 @@ LL | check!(0u8);\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: unexpected token: `-0`\n-  --> $DIR/malformed-interpolated.rs:5:21\n+  --> $DIR/malformed-interpolated.rs:5:25\n    |\n-LL |         #[my_attr = $expr]\n-   |                     ^^^^^\n+LL |         #[rustc_dummy = $expr]\n+   |                         ^^^^^\n ...\n LL | check!(-0); // ERROR, see above\n    | ----------- in this macro invocation\n \n error: unexpected token: `0 + 0`\n-  --> $DIR/malformed-interpolated.rs:5:21\n+  --> $DIR/malformed-interpolated.rs:5:25\n    |\n-LL |         #[my_attr = $expr]\n-   |                     ^^^^^\n+LL |         #[rustc_dummy = $expr]\n+   |                         ^^^^^\n ...\n LL | check!(0 + 0); // ERROR, see above\n    | -------------- in this macro invocation"}, {"sha": "674a5ed18cee3ab5033e6d7842dc94d8afb1f5da", "filename": "src/test/ui/stmt_expr_attrs_no_feature.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,4 +1,4 @@\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n macro_rules! stmt_mac {\n     () => {\n@@ -7,44 +7,45 @@ macro_rules! stmt_mac {\n }\n \n fn main() {\n-    #[attr]\n+    #[rustc_dummy]\n     fn a() {}\n \n-    #[attr] //~ ERROR attributes on expressions are experimental\n+    // Bug: built-in attrs like `rustc_dummy` are not gated on blocks, but other attrs are.\n+    #[rustfmt::skip] //~ ERROR attributes on expressions are experimental\n     {\n \n     }\n \n-    #[attr]\n+    #[rustc_dummy]\n     5;\n \n-    #[attr]\n+    #[rustc_dummy]\n     stmt_mac!();\n }\n \n // Check that cfg works right\n \n #[cfg(unset)]\n fn c() {\n-    #[attr]\n+    #[rustc_dummy]\n     5;\n }\n \n #[cfg(not(unset))]\n fn j() {\n-    #[attr]\n+    #[rustc_dummy]\n     5;\n }\n \n #[cfg_attr(not(unset), cfg(unset))]\n fn d() {\n-    #[attr]\n+    #[rustc_dummy]\n     8;\n }\n \n #[cfg_attr(not(unset), cfg(not(unset)))]\n fn i() {\n-    #[attr]\n+    #[rustc_dummy]\n     8;\n }\n \n@@ -53,30 +54,30 @@ fn i() {\n macro_rules! item_mac {\n     ($e:ident) => {\n         fn $e() {\n-            #[attr]\n+            #[rustc_dummy]\n             42;\n \n             #[cfg(unset)]\n             fn f() {\n-                #[attr]\n+                #[rustc_dummy]\n                 5;\n             }\n \n             #[cfg(not(unset))]\n             fn k() {\n-                #[attr]\n+                #[rustc_dummy]\n                 5;\n             }\n \n             #[cfg_attr(not(unset), cfg(unset))]\n             fn g() {\n-                #[attr]\n+                #[rustc_dummy]\n                 8;\n             }\n \n             #[cfg_attr(not(unset), cfg(not(unset)))]\n             fn h() {\n-                #[attr]\n+                #[rustc_dummy]\n                 8;\n             }\n \n@@ -90,51 +91,51 @@ item_mac!(e);\n \n extern {\n     #[cfg(unset)]\n-    fn x(a: [u8; #[attr] 5]);\n-    fn y(a: [u8; #[attr] 5]); //~ ERROR attributes on expressions are experimental\n+    fn x(a: [u8; #[rustc_dummy] 5]);\n+    fn y(a: [u8; #[rustc_dummy] 5]); //~ ERROR attributes on expressions are experimental\n }\n \n struct Foo;\n impl Foo {\n     #[cfg(unset)]\n-    const X: u8 = #[attr] 5;\n-    const Y: u8 = #[attr] 5; //~ ERROR attributes on expressions are experimental\n+    const X: u8 = #[rustc_dummy] 5;\n+    const Y: u8 = #[rustc_dummy] 5; //~ ERROR attributes on expressions are experimental\n }\n \n trait Bar {\n     #[cfg(unset)]\n-    const X: [u8; #[attr] 5];\n-    const Y: [u8; #[attr] 5]; //~ ERROR attributes on expressions are experimental\n+    const X: [u8; #[rustc_dummy] 5];\n+    const Y: [u8; #[rustc_dummy] 5]; //~ ERROR attributes on expressions are experimental\n }\n \n struct Joyce {\n     #[cfg(unset)]\n-    field: [u8; #[attr] 5],\n-    field2: [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n+    field: [u8; #[rustc_dummy] 5],\n+    field2: [u8; #[rustc_dummy] 5] //~ ERROR attributes on expressions are experimental\n }\n \n struct Walky(\n-    #[cfg(unset)] [u8; #[attr] 5],\n-    [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n+    #[cfg(unset)] [u8; #[rustc_dummy] 5],\n+    [u8; #[rustc_dummy] 5] //~ ERROR attributes on expressions are experimental\n );\n \n enum Mike {\n     Happy(\n-        #[cfg(unset)] [u8; #[attr] 5],\n-        [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n+        #[cfg(unset)] [u8; #[rustc_dummy] 5],\n+        [u8; #[rustc_dummy] 5] //~ ERROR attributes on expressions are experimental\n     ),\n     Angry {\n         #[cfg(unset)]\n-        field: [u8; #[attr] 5],\n-        field2: [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n+        field: [u8; #[rustc_dummy] 5],\n+        field2: [u8; #[rustc_dummy] 5] //~ ERROR attributes on expressions are experimental\n     }\n }\n \n fn pat() {\n     match 5 {\n         #[cfg(unset)]\n-        5 => #[attr] (),\n-        6 => #[attr] (), //~ ERROR attributes on expressions are experimental\n+        5 => #[rustc_dummy] (),\n+        6 => #[rustc_dummy] (), //~ ERROR attributes on expressions are experimental\n         _ => (),\n     }\n }"}, {"sha": "01372cc164b62f63884aa2b31e31e2abcad7df28", "filename": "src/test/ui/stmt_expr_attrs_no_feature.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.stderr?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,80 +1,80 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:13:5\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:14:5\n    |\n-LL |     #[attr]\n-   |     ^^^^^^^\n+LL |     #[rustfmt::skip]\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:94:18\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:95:18\n    |\n-LL |     fn y(a: [u8; #[attr] 5]);\n-   |                  ^^^^^^^\n+LL |     fn y(a: [u8; #[rustc_dummy] 5]);\n+   |                  ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:101:19\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:102:19\n    |\n-LL |     const Y: u8 = #[attr] 5;\n-   |                   ^^^^^^^\n+LL |     const Y: u8 = #[rustc_dummy] 5;\n+   |                   ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:107:19\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:108:19\n    |\n-LL |     const Y: [u8; #[attr] 5];\n-   |                   ^^^^^^^\n+LL |     const Y: [u8; #[rustc_dummy] 5];\n+   |                   ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:113:18\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:114:18\n    |\n-LL |     field2: [u8; #[attr] 5]\n-   |                  ^^^^^^^\n+LL |     field2: [u8; #[rustc_dummy] 5]\n+   |                  ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:118:10\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:119:10\n    |\n-LL |     [u8; #[attr] 5]\n-   |          ^^^^^^^\n+LL |     [u8; #[rustc_dummy] 5]\n+   |          ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:124:14\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:125:14\n    |\n-LL |         [u8; #[attr] 5]\n-   |              ^^^^^^^\n+LL |         [u8; #[rustc_dummy] 5]\n+   |              ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:129:22\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:130:22\n    |\n-LL |         field2: [u8; #[attr] 5]\n-   |                      ^^^^^^^\n+LL |         field2: [u8; #[rustc_dummy] 5]\n+   |                      ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:137:14\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:138:14\n    |\n-LL |         6 => #[attr] (),\n-   |              ^^^^^^^\n+LL |         6 => #[rustc_dummy] (),\n+   |              ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable"}, {"sha": "a6531490c015914091f13b6423d65a64611090a5", "filename": "src/test/ui/suffixed-literal-meta.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,15 +1,15 @@\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n-#[my_attr = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1u8] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1u16] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1u32] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1u64] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1isize] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1i8] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1i16] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1i32] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1i64] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1.0f32] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1.0f64] //~ ERROR: suffixed literals are not allowed in attributes\n-fn main() { }\n+#[rustc_dummy = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1u8] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1u16] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1u32] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1u64] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1isize] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1i8] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1i16] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1i32] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1i64] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1.0f32] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1.0f64] //~ ERROR: suffixed literals are not allowed in attributes\n+fn main() {}"}, {"sha": "83de173b1a703a4e553c0b160022108436947e73", "filename": "src/test/ui/suffixed-literal-meta.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,96 +1,96 @@\n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:3:13\n+  --> $DIR/suffixed-literal-meta.rs:3:17\n    |\n-LL | #[my_attr = 1usize]\n-   |             ^^^^^^\n+LL | #[rustc_dummy = 1usize]\n+   |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:4:13\n+  --> $DIR/suffixed-literal-meta.rs:4:17\n    |\n-LL | #[my_attr = 1u8]\n-   |             ^^^\n+LL | #[rustc_dummy = 1u8]\n+   |                 ^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:5:13\n+  --> $DIR/suffixed-literal-meta.rs:5:17\n    |\n-LL | #[my_attr = 1u16]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1u16]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:6:13\n+  --> $DIR/suffixed-literal-meta.rs:6:17\n    |\n-LL | #[my_attr = 1u32]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1u32]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:7:13\n+  --> $DIR/suffixed-literal-meta.rs:7:17\n    |\n-LL | #[my_attr = 1u64]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1u64]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:8:13\n+  --> $DIR/suffixed-literal-meta.rs:8:17\n    |\n-LL | #[my_attr = 1isize]\n-   |             ^^^^^^\n+LL | #[rustc_dummy = 1isize]\n+   |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:9:13\n+  --> $DIR/suffixed-literal-meta.rs:9:17\n    |\n-LL | #[my_attr = 1i8]\n-   |             ^^^\n+LL | #[rustc_dummy = 1i8]\n+   |                 ^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:10:13\n+  --> $DIR/suffixed-literal-meta.rs:10:17\n    |\n-LL | #[my_attr = 1i16]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1i16]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:11:13\n+  --> $DIR/suffixed-literal-meta.rs:11:17\n    |\n-LL | #[my_attr = 1i32]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1i32]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:12:13\n+  --> $DIR/suffixed-literal-meta.rs:12:17\n    |\n-LL | #[my_attr = 1i64]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1i64]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:13:13\n+  --> $DIR/suffixed-literal-meta.rs:13:17\n    |\n-LL | #[my_attr = 1.0f32]\n-   |             ^^^^^^\n+LL | #[rustc_dummy = 1.0f32]\n+   |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:14:13\n+  --> $DIR/suffixed-literal-meta.rs:14:17\n    |\n-LL | #[my_attr = 1.0f64]\n-   |             ^^^^^^\n+LL | #[rustc_dummy = 1.0f64]\n+   |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n "}, {"sha": "b07ab96bce13fe55ce2a4d58c9926c0c7f456a3c", "filename": "src/test/ui/unrestricted-attribute-tokens.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Funrestricted-attribute-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Funrestricted-attribute-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funrestricted-attribute-tokens.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,8 +1,8 @@\n // compile-pass\n \n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n-#[my_attr(a b c d)]\n-#[my_attr[a b c d]]\n-#[my_attr{a b c d}]\n+#[rustc_dummy(a b c d)]\n+#[rustc_dummy[a b c d]]\n+#[rustc_dummy{a b c d}]\n fn main() {}"}, {"sha": "cb8ac0e6a05c0837433fae4b7ff3df756421c165", "filename": "src/test/ui/unused/unused-attr.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Funused%2Funused-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Funused%2Funused-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-attr.rs?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,49 +1,48 @@\n #![deny(unused_attributes)]\n-#![allow(dead_code, unused_imports, unused_extern_crates)]\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n-#![foo] //~ ERROR unused attribute\n+#![rustc_dummy] //~ ERROR unused attribute\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n extern crate core;\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n use std::collections;\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n extern \"C\" {\n-    #[foo] //~ ERROR unused attribute\n+    #[rustc_dummy] //~ ERROR unused attribute\n     fn foo();\n }\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n mod foo {\n-    #[foo] //~ ERROR unused attribute\n+    #[rustc_dummy] //~ ERROR unused attribute\n     pub enum Foo {\n-        #[foo] //~ ERROR unused attribute\n+        #[rustc_dummy] //~ ERROR unused attribute\n         Bar,\n     }\n }\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n fn bar(f: foo::Foo) {\n     match f {\n-        #[foo] //~ ERROR unused attribute\n+        #[rustc_dummy] //~ ERROR unused attribute\n         foo::Foo::Bar => {}\n     }\n }\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n struct Foo {\n-    #[foo] //~ ERROR unused attribute\n+    #[rustc_dummy] //~ ERROR unused attribute\n     a: isize\n }\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n trait Baz {\n-    #[foo] //~ ERROR unused attribute\n+    #[rustc_dummy] //~ ERROR unused attribute\n     fn blah(&self);\n-    #[foo] //~ ERROR unused attribute\n+    #[rustc_dummy] //~ ERROR unused attribute\n     fn blah2(&self) {}\n }\n "}, {"sha": "956b870715eb2fcd6280c154596b2f7b402cf3b7", "filename": "src/test/ui/unused/unused-attr.stderr", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Funused%2Funused-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea4ad555d76d2eb8e6eb749e1b4c163e16077985/src%2Ftest%2Fui%2Funused%2Funused-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-attr.stderr?ref=ea4ad555d76d2eb8e6eb749e1b4c163e16077985", "patch": "@@ -1,8 +1,8 @@\n error: unused attribute\n-  --> $DIR/unused-attr.rs:7:1\n+  --> $DIR/unused-attr.rs:6:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/unused-attr.rs:1:9\n@@ -11,88 +11,88 @@ LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:10:1\n+  --> $DIR/unused-attr.rs:9:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:15:5\n+  --> $DIR/unused-attr.rs:14:5\n    |\n-LL |     #[foo]\n-   |     ^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:13:1\n+  --> $DIR/unused-attr.rs:12:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:23:9\n+  --> $DIR/unused-attr.rs:22:9\n    |\n-LL |         #[foo]\n-   |         ^^^^^^\n+LL |         #[rustc_dummy]\n+   |         ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:21:5\n+  --> $DIR/unused-attr.rs:20:5\n    |\n-LL |     #[foo]\n-   |     ^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:19:1\n+  --> $DIR/unused-attr.rs:18:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:31:9\n+  --> $DIR/unused-attr.rs:30:9\n    |\n-LL |         #[foo]\n-   |         ^^^^^^\n+LL |         #[rustc_dummy]\n+   |         ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:28:1\n+  --> $DIR/unused-attr.rs:27:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:38:5\n+  --> $DIR/unused-attr.rs:37:5\n    |\n-LL |     #[foo]\n-   |     ^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:36:1\n+  --> $DIR/unused-attr.rs:35:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:44:5\n+  --> $DIR/unused-attr.rs:43:5\n    |\n-LL |     #[foo]\n-   |     ^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:46:5\n+  --> $DIR/unused-attr.rs:45:5\n    |\n-LL |     #[foo]\n-   |     ^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:42:1\n+  --> $DIR/unused-attr.rs:41:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:5:1\n+  --> $DIR/unused-attr.rs:4:1\n    |\n-LL | #![foo]\n-   | ^^^^^^^\n+LL | #![rustc_dummy]\n+   | ^^^^^^^^^^^^^^^\n \n error: aborting due to 15 previous errors\n "}]}