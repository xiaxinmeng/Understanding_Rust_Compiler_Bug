{"sha": "b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NzZkOWU2NjYwYzE2ZjRhMWQ1YTI4YjExYWZhN2NjYjRmNzVkYTY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-12-31T05:47:14Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-14T21:24:12Z"}, "message": "Implement JSON error emission\n\n[breaking-change]\n\nsyntax::errors::Handler::new has been renamed to with_tty_emitter\n\nMany functions which used to take a syntax::errors::ColorConfig, now take a rustc::session::config::ErrorOutputType. If you previously used ColorConfig::Auto as a default, you should now use ErrorOutputType::default().", "tree": {"sha": "7838d2d7d0bb08bf607bc4108c83e1822d58d33f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7838d2d7d0bb08bf607bc4108c83e1822d58d33f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6", "html_url": "https://github.com/rust-lang/rust/commit/b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd46c78f8f5bc760a46c36fc03f97d43ac389db6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd46c78f8f5bc760a46c36fc03f97d43ac389db6", "html_url": "https://github.com/rust-lang/rust/commit/fd46c78f8f5bc760a46c36fc03f97d43ac389db6"}], "stats": {"total": 243, "additions": 213, "deletions": 30}, "files": [{"sha": "01eb14474a282dd66260a9c3cd3b157253c92e92", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6", "patch": "@@ -940,8 +940,8 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             None => ErrorOutputType::default(),\n \n             Some(arg) => {\n-                early_error(ErrorOutputType::default(), &format!(\"argument for --output must be tty or \\\n-                                                                  json (instead was `{}`)\",\n+                early_error(ErrorOutputType::default(), &format!(\"argument for --output must be \\\n+                                                                  tty or json (instead was `{}`)\",\n                                                                  arg))\n             }\n         }"}, {"sha": "0b8da7a09b12176ff78211becdd6d62d2fa29385", "filename": "src/libsyntax/errors/json.rs", "status": "modified", "additions": 192, "deletions": 12, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6/src%2Flibsyntax%2Ferrors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6/src%2Flibsyntax%2Ferrors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fjson.rs?ref=b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6", "patch": "@@ -9,45 +9,225 @@\n // except according to those terms.\n \n //! A JSON emitter for errors.\n+//!\n+//! This works by converting errors to a simplified structural format (see the\n+//! structs at the start of the file) and then serialising them. These should\n+//! contain as much information about the error as possible.\n+//!\n+//! The format of the JSON output should be considered *unstable*. For now the\n+//! structs at the end of this file (Diagnostic*) specify the error format.\n+\n+// FIXME spec the JSON output properly.\n+\n \n use codemap::{Span, CodeMap};\n use diagnostics::registry::Registry;\n-use errors::{Level, DiagnosticBuilder, RenderSpan};\n+use errors::{Level, DiagnosticBuilder, SubDiagnostic, RenderSpan};\n use errors::emitter::Emitter;\n \n use std::rc::Rc;\n+use std::io::{self, Write};\n+\n+use rustc_serialize::json::as_json;\n \n pub struct JsonEmitter {\n-    todo: i32\n+    dst: Box<Write + Send>,\n+    registry: Option<Registry>,\n+    cm: Rc<CodeMap>,\n }\n \n impl JsonEmitter {\n     pub fn basic() -> JsonEmitter {\n-        JsonEmitter {\n-            todo: 42,\n-        }\n+        JsonEmitter::stderr(None, Rc::new(CodeMap::new()))\n     }\n \n     pub fn stderr(registry: Option<Registry>,\n                   code_map: Rc<CodeMap>) -> JsonEmitter {\n         JsonEmitter {\n-            todo: 42,\n+            dst: Box::new(io::stderr()),\n+            registry: registry,\n+            cm: code_map,\n         }\n     }\n }\n \n impl Emitter for JsonEmitter {\n-    fn emit(&mut self, span: Option<Span>, msg: &str, code: Option<&str>, lvl: Level) {\n-        unimplemented!();\n+    fn emit(&mut self, span: Option<Span>, msg: &str, code: Option<&str>, level: Level) {\n+        let data = Diagnostic::new(span, msg, code, level, self);\n+        if let Err(e) = writeln!(&mut self.dst, \"{}\", as_json(&data)) {\n+            panic!(\"failed to print diagnostics: {:?}\", e);\n+        }\n+    }\n+\n+    fn custom_emit(&mut self, sp: RenderSpan, msg: &str, level: Level) {\n+        let data = Diagnostic::from_render_span(&sp, msg, level, self);\n+        if let Err(e) = writeln!(&mut self.dst, \"{}\", as_json(&data)) {\n+            panic!(\"failed to print diagnostics: {:?}\", e);\n+        }\n+    }\n+\n+    fn emit_struct(&mut self, db: &DiagnosticBuilder) {\n+        let data = Diagnostic::from_diagnostic_builder(db, self);\n+        if let Err(e) = writeln!(&mut self.dst, \"{}\", as_json(&data)) {\n+            panic!(\"failed to print diagnostics: {:?}\", e);\n+        }\n+    }\n+}\n+\n+// The following data types are provided just for serialisation.\n+\n+#[derive(RustcEncodable)]\n+struct Diagnostic<'a> {\n+    /// The primary error message.\n+    message: &'a str,\n+    code: Option<DiagnosticCode>,\n+    /// \"error: internal compiler error\", \"error\", \"warning\", \"note\", \"help\".\n+    level: &'static str,\n+    span: Option<DiagnosticSpan>,\n+    /// Assocaited diagnostic messages.\n+    children: Vec<Diagnostic<'a>>,\n+}\n+\n+#[derive(RustcEncodable)]\n+struct DiagnosticSpan {\n+    file_name: String,\n+    byte_start: u32,\n+    byte_end: u32,\n+    /// 1-based.\n+    line_start: usize,\n+    line_end: usize,\n+    /// 1-based, character offset.\n+    column_start: usize,\n+    column_end: usize,\n+}\n \n+#[derive(RustcEncodable)]\n+struct DiagnosticCode {\n+    /// The code itself.\n+    code: String,\n+    /// An explanation for the code.\n+    explanation: Option<&'static str>,\n+}\n+\n+impl<'a> Diagnostic<'a> {\n+    fn new(span: Option<Span>,\n+           msg: &'a str,\n+           code: Option<&str>,\n+           level: Level,\n+           je: &JsonEmitter)\n+           -> Diagnostic<'a> {\n+        Diagnostic {\n+            message: msg,\n+            code: DiagnosticCode::map_opt_string(code.map(|c| c.to_owned()), je),\n+            level: level.to_str(),\n+            span: span.map(|sp| DiagnosticSpan::from_span(sp, je)),\n+            children: vec![],\n+        }\n     }\n \n-    fn custom_emit(&mut self, sp: RenderSpan, msg: &str, lvl: Level) {\n-        unimplemented!();\n+    fn from_render_span(span: &RenderSpan,\n+                        msg: &'a str,\n+                        level: Level,\n+                        je: &JsonEmitter)\n+                        -> Diagnostic<'a> {\n+        Diagnostic {\n+            msg: msg,\n+            code: None,\n+            level: level.to_str(),\n+            span: Some(DiagnosticSpan::from_render_span(span, je)),\n+            children: vec![],\n+        }\n+    }\n \n+    fn from_diagnostic_builder<'c>(db: &'c DiagnosticBuilder,\n+                                   je: &JsonEmitter)\n+                                   -> Diagnostic<'c> {\n+        Diagnostic {\n+            message: &db.message,\n+            code: DiagnosticCode::map_opt_string(db.code.clone(), je),\n+            level: db.level.to_str(),\n+            span: db.span.map(|sp| DiagnosticSpan::from_span(sp, je)),\n+            children: db.children.iter().map(|c| {\n+                Diagnostic::from_sub_diagnostic(c, je)\n+            }).collect(),\n+        }\n     }\n \n-    fn emit_struct(&mut self, db: &DiagnosticBuilder) {\n-        unimplemented!();\n+    fn from_sub_diagnostic<'c>(db: &'c SubDiagnostic, je: &JsonEmitter) -> Diagnostic<'c> {\n+        Diagnostic {\n+            message: &db.message,\n+            code: None,\n+            level: db.level.to_str(),\n+            span: db.render_span.as_ref()\n+                    .map(|sp| DiagnosticSpan::from_render_span(sp, je))\n+                    .or_else(|| db.span.map(|sp| DiagnosticSpan::from_span(sp, je))),\n+            children: vec![],\n+        }\n+    }\n+}\n+\n+impl DiagnosticSpan {\n+    fn from_span(span: Span, je: &JsonEmitter) -> DiagnosticSpan {\n+        let start = je.cm.lookup_char_pos(span.lo);\n+        let end = je.cm.lookup_char_pos(span.hi);\n+        DiagnosticSpan {\n+            file_name: start.file.name.clone(),\n+            byte_start: span.lo.0,\n+            byte_end: span.hi.0,\n+            line_start: start.line,\n+            line_end: end.line,\n+            column_start: start.col.0 + 1,\n+            column_end: end.col.0 + 1,\n+        }\n+    }\n+\n+    fn from_render_span(span: &RenderSpan, je: &JsonEmitter) -> DiagnosticSpan {\n+        match *span {\n+            // FIXME(#30701) handle Suggestion properly\n+            RenderSpan::FullSpan(sp) | RenderSpan::Suggestion(sp, _) => {\n+                DiagnosticSpan::from_span(sp, je)\n+            }\n+            RenderSpan::EndSpan(span) => {\n+                let end = je.cm.lookup_char_pos(span.hi);\n+                DiagnosticSpan {\n+                    file_name: end.file.name.clone(),\n+                    byte_start: span.lo.0,\n+                    byte_end: span.hi.0,\n+                    line_start: 0,\n+                    line_end: end.line,\n+                    column_start: 0,\n+                    column_end: end.col.0 + 1,\n+                }\n+            }\n+            RenderSpan::FileLine(span) => {\n+                let start = je.cm.lookup_char_pos(span.lo);\n+                let end = je.cm.lookup_char_pos(span.hi);\n+                DiagnosticSpan {\n+                    file_name: start.file.name.clone(),\n+                    byte_start: span.lo.0,\n+                    byte_end: span.hi.0,\n+                    line_start: start.line,\n+                    line_end: end.line,\n+                    column_start: 0,\n+                    column_end: 0,\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+impl DiagnosticCode {\n+    fn map_opt_string(s: Option<String>, je: &JsonEmitter) -> Option<DiagnosticCode> {\n+        s.map(|s| {\n+\n+            let explanation = je.registry\n+                                .as_ref()\n+                                .and_then(|registry| registry.find_description(&s));\n+\n+            DiagnosticCode {\n+                code: s,\n+                explanation: explanation,\n+            }\n+        })\n     }\n }"}, {"sha": "f269dee31d9ead90579cee0144ac3513179cce61", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6", "patch": "@@ -276,13 +276,12 @@ pub struct Handler {\n }\n \n impl Handler {\n-    // TODO remove\n-    pub fn new(color_config: ColorConfig,\n-               registry: Option<diagnostics::registry::Registry>,\n-               can_emit_warnings: bool,\n-               treat_err_as_bug: bool,\n-               cm: Rc<codemap::CodeMap>)\n-               -> Handler {\n+    pub fn with_tty_emitter(color_config: ColorConfig,\n+                            registry: Option<diagnostics::registry::Registry>,\n+                            can_emit_warnings: bool,\n+                            treat_err_as_bug: bool,\n+                            cm: Rc<codemap::CodeMap>)\n+                            -> Handler {\n         let emitter = Box::new(EmitterWriter::stderr(color_config, registry, cm));\n         Handler::with_emitter(can_emit_warnings, treat_err_as_bug, emitter)\n     }\n@@ -549,14 +548,7 @@ impl fmt::Display for Level {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         use std::fmt::Display;\n \n-        match *self {\n-            Bug => \"error: internal compiler error\".fmt(f),\n-            Fatal | Error => \"error\".fmt(f),\n-            Warning => \"warning\".fmt(f),\n-            Note => \"note\".fmt(f),\n-            Help => \"help\".fmt(f),\n-            Cancelled => unreachable!(),\n-        }\n+        self.to_str().fmt(f)\n     }\n }\n \n@@ -570,6 +562,17 @@ impl Level {\n             Cancelled => unreachable!(),\n         }\n     }\n+\n+    fn to_str(self) -> &'static str {\n+        match self {\n+            Bug => \"error: internal compiler error\",\n+            Fatal | Error => \"error\",\n+            Warning => \"warning\",\n+            Note => \"note\",\n+            Help => \"help\",\n+            Cancelled => panic!(\"Shouldn't call on cancelled error\"),\n+        }\n+    }\n }\n \n pub fn expect<T, M>(diag: &Handler, opt: Option<T>, msg: M) -> T where"}, {"sha": "090b070433f46dc9fef15255b90dd99044df2c3b", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6", "patch": "@@ -49,7 +49,7 @@ pub struct ParseSess {\n impl ParseSess {\n     pub fn new() -> ParseSess {\n         let cm = Rc::new(CodeMap::new());\n-        let handler = Handler::new(ColorConfig::Auto, None, true, false, cm.clone());\n+        let handler = Handler::with_tty_emitter(ColorConfig::Auto, None, true, false, cm.clone());\n         ParseSess::with_span_handler(handler, cm)\n     }\n "}]}