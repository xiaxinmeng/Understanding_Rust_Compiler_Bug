{"sha": "729060dbb95afd1d8562a6b3129555a173b81b0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOTA2MGRiYjk1YWZkMWQ4NTYyYTZiMzEyOTU1NWExNzNiODFiMGM=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-01-30T00:20:34Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-01-30T03:52:25Z"}, "message": "Remove Times trait\n\n`Times::times` was always a second-class loop because it did not support the `break` and `continue` operations. Its playful appeal was then lost after `do` was disabled for closures. It's time to let this one go.", "tree": {"sha": "0530d4f7fe149f68b4a910d340b44b7404a0d748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0530d4f7fe149f68b4a910d340b44b7404a0d748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/729060dbb95afd1d8562a6b3129555a173b81b0c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/729060dbb95afd1d8562a6b3129555a173b81b0c", "html_url": "https://github.com/rust-lang/rust/commit/729060dbb95afd1d8562a6b3129555a173b81b0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/729060dbb95afd1d8562a6b3129555a173b81b0c/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfb61166f5a62845e7edc71ac533a4d3a35afebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb61166f5a62845e7edc71ac533a4d3a35afebc", "html_url": "https://github.com/rust-lang/rust/commit/dfb61166f5a62845e7edc71ac533a4d3a35afebc"}], "stats": {"total": 351, "additions": 151, "deletions": 200}, "files": [{"sha": "e18861cb7a9da7ce36e106db88328c948eadd9ed", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -78,7 +78,6 @@ syn keyword rustTrait FromStr\n syn keyword rustTrait FromIterator Extendable\n syn keyword rustTrait Iterator DoubleEndedIterator RandomAccessIterator CloneableIterator\n syn keyword rustTrait OrdIterator MutableDoubleEndedIterator ExactSize\n-syn keyword rustTrait Times\n \n syn keyword rustTrait Algebraic Trigonometric Exponential Hyperbolic\n syn keyword rustTrait Bitwise Bounded Integer Fractional Real RealExt"}, {"sha": "7aa65713466467a3dc509898ce4badf14b47a851", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -770,19 +770,19 @@ mod tests {\n \n         task::spawn(proc() {\n             arc2.write(|num| {\n-                10.times(|| {\n+                for _ in range(0, 10) {\n                     let tmp = *num;\n                     *num = -1;\n                     task::deschedule();\n                     *num = tmp + 1;\n-                });\n+                }\n                 c.send(());\n             })\n         });\n \n         // Readers try to catch the writer in the act\n         let mut children = ~[];\n-        5.times(|| {\n+        for _ in range(0, 5) {\n             let arc3 = arc.clone();\n             let mut builder = task::task();\n             children.push(builder.future_result());\n@@ -791,7 +791,7 @@ mod tests {\n                     assert!(*num >= 0);\n                 })\n             });\n-        });\n+        }\n \n         // Wait for children to pass their asserts\n         for r in children.mut_iter() {\n@@ -836,7 +836,7 @@ mod tests {\n \n         // Reader tasks\n         let mut reader_convos = ~[];\n-        10.times(|| {\n+        for _ in range(0, 10) {\n             let ((rp1, rc1), (rp2, rc2)) = (Chan::new(), Chan::new());\n             reader_convos.push((rc1, rp2));\n             let arcn = arc.clone();\n@@ -847,7 +847,7 @@ mod tests {\n                     rc2.send(());\n                 })\n             });\n-        });\n+        }\n \n         // Writer task\n         let arc2 = arc.clone();\n@@ -944,7 +944,7 @@ mod tests {\n             read_mode.read(|state| {\n                 // if writer mistakenly got in, make sure it mutates state\n                 // before we assert on it\n-                5.times(|| task::deschedule());\n+                for _ in range(0, 5) { task::deschedule(); }\n                 // make sure writer didn't get in.\n                 assert!(*state);\n             })\n@@ -956,6 +956,6 @@ mod tests {\n         // helped to expose the race nearly 100% of the time... but adding\n         // deschedules in the intuitively-right locations made it even less likely,\n         // and I wasn't sure why :( . This is a mediocre \"next best\" option.\n-        8.times(|| test_rw_write_cond_downgrade_read_race_helper());\n+        for _ in range(0, 8) { test_rw_write_cond_downgrade_read_race_helper(); }\n     }\n }"}, {"sha": "738afcd5c5f9310c9cba780e4b51c0ee3121ec32", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -336,11 +336,11 @@ mod test {\n         use std::rand::{task_rng, random, Rng};\n         use std::vec;\n \n-        1000.times(|| {\n+        for _ in range(0, 1000) {\n             let times = task_rng().gen_range(1u, 100);\n             let v = vec::from_fn(times, |_| random::<u8>());\n             assert_eq!(v.to_base64(STANDARD).from_base64().unwrap(), v);\n-        })\n+        }\n     }\n \n     #[bench]"}, {"sha": "c7d550762540a6ca9128bdf74d37df2da56c248f", "filename": "src/libextra/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcomm.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -127,9 +127,9 @@ mod test {\n         // Rendezvous streams should be able to handle any number of messages being sent\n         let (port, chan) = rendezvous();\n         spawn(proc() {\n-            10000.times(|| { chan.send(()) })\n+            for _ in range(0, 10000) { chan.send(()); }\n         });\n-        10000.times(|| { port.recv() })\n+        for _ in range(0, 10000) { port.recv(); }\n     }\n \n     #[test]"}, {"sha": "ee80fa1c4c46eacc569a89c475beadfbd4122ff1", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -1036,11 +1036,11 @@ mod tests {\n \n     #[test]\n     fn test_fuzz() {\n-        25.times(|| {\n+        for _ in range(0, 25) {\n             fuzz_test(3);\n             fuzz_test(16);\n             fuzz_test(189);\n-        })\n+        }\n     }\n \n     #[cfg(test)]"}, {"sha": "4293f04795e03a96db200c95fef66f36c968c577", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -726,9 +726,9 @@ pub mod groups {\n             // here we just need to indent the start of the description\n             let rowlen = row.char_len();\n             if rowlen < 24 {\n-                (24 - rowlen).times(|| {\n-                    row.push_char(' ')\n-                })\n+                for _ in range(0, 24 - rowlen) {\n+                    row.push_char(' ');\n+                }\n             } else {\n                 row.push_str(desc_sep)\n             }"}, {"sha": "f8b1c216529b1bcfb0a44db98d87488f6d24293a", "filename": "src/libextra/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -282,7 +282,7 @@ fn escape_str(s: &str) -> ~str {\n \n fn spaces(n: uint) -> ~str {\n     let mut ss = ~\"\";\n-    n.times(|| ss.push_str(\" \"));\n+    for _ in range(0, n) { ss.push_str(\" \"); }\n     return ss;\n }\n "}, {"sha": "6dfe036d207b99f433e294b7006ad0d8b0381d0a", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -2052,22 +2052,22 @@ mod biguint_tests {\n     fn test_rand_range() {\n         let mut rng = task_rng();\n \n-        10.times(|| {\n+        for _ in range(0, 10) {\n             assert_eq!(rng.gen_bigint_range(&FromPrimitive::from_uint(236).unwrap(),\n                                             &FromPrimitive::from_uint(237).unwrap()),\n                        FromPrimitive::from_uint(236).unwrap());\n-        });\n+        }\n \n         let l = FromPrimitive::from_uint(403469000 + 2352).unwrap();\n         let u = FromPrimitive::from_uint(403469000 + 3513).unwrap();\n-        1000.times(|| {\n+        for _ in range(0, 1000) {\n             let n: BigUint = rng.gen_biguint_below(&u);\n             assert!(n < u);\n \n             let n: BigUint = rng.gen_biguint_range(&l, &u);\n             assert!(n >= l);\n             assert!(n < u);\n-        })\n+        }\n     }\n \n     #[test]\n@@ -2550,19 +2550,19 @@ mod bigint_tests {\n     fn test_rand_range() {\n         let mut rng = task_rng();\n \n-        10.times(|| {\n+        for _ in range(0, 10) {\n             assert_eq!(rng.gen_bigint_range(&FromPrimitive::from_uint(236).unwrap(),\n                                             &FromPrimitive::from_uint(237).unwrap()),\n                        FromPrimitive::from_uint(236).unwrap());\n-        });\n+        }\n \n         fn check(l: BigInt, u: BigInt) {\n             let mut rng = task_rng();\n-            1000.times(|| {\n+            for _ in range(0, 1000) {\n                 let n: BigInt = rng.gen_bigint_range(&l, &u);\n                 assert!(n >= l);\n                 assert!(n < u);\n-            });\n+            }\n         }\n         let l: BigInt = FromPrimitive::from_uint(403469000 + 2352).unwrap();\n         let u: BigInt = FromPrimitive::from_uint(403469000 + 3513).unwrap();"}, {"sha": "ddef2f0a37a8fb5328948dbb27278646b7ff0254", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -571,9 +571,9 @@ mod tests {\n     fn bench_grow(b: &mut test::BenchHarness) {\n         let mut deq = RingBuf::new();\n         b.iter(|| {\n-            65.times(|| {\n+            for _ in range(0, 65) {\n                 deq.push_front(1);\n-            })\n+            }\n         })\n     }\n "}, {"sha": "b2ab27d4a8caec01d7836959aab283d36a22a894", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -120,7 +120,7 @@ impl<Q:Send> Sem<Q> {\n                 }\n             });\n             // Uncomment if you wish to test for sem races. Not valgrind-friendly.\n-            /* 1000.times(|| task::deschedule()); */\n+            /* for _ in range(0, 1000) { task::deschedule(); } */\n             // Need to wait outside the exclusive.\n             if waiter_nobe.is_some() {\n                 let _ = waiter_nobe.unwrap().recv();\n@@ -155,7 +155,7 @@ impl Sem<~[WaitQueue]> {\n     fn new_and_signal(count: int, num_condvars: uint)\n         -> Sem<~[WaitQueue]> {\n         let mut queues = ~[];\n-        num_condvars.times(|| queues.push(WaitQueue::new()));\n+        for _ in range(0, num_condvars) { queues.push(WaitQueue::new()); }\n         Sem::new(count, queues)\n     }\n }\n@@ -691,7 +691,7 @@ impl<'a> RWLockReadMode<'a> {\n /// use extra::sync::Barrier;\n ///\n /// let barrier = Barrier::new(10);\n-/// 10.times(|| {\n+/// for _ in range(0, 10) {\n ///     let c = barrier.clone();\n ///     // The same messages will be printed together.\n ///     // You will NOT see any interleaving.\n@@ -700,7 +700,7 @@ impl<'a> RWLockReadMode<'a> {\n ///         c.wait();\n ///         println!(\"after wait\");\n ///     });\n-/// });\n+/// }\n /// ```\n #[deriving(Clone)]\n pub struct Barrier {\n@@ -780,11 +780,11 @@ mod tests {\n         let s2 = s.clone();\n         task::spawn(proc() {\n             s2.access(|| {\n-                5.times(|| { task::deschedule(); })\n+                for _ in range(0, 5) { task::deschedule(); }\n             })\n         });\n         s.access(|| {\n-            5.times(|| { task::deschedule(); })\n+            for _ in range(0, 5) { task::deschedule(); }\n         })\n     }\n     #[test]\n@@ -797,7 +797,7 @@ mod tests {\n             s2.acquire();\n             c.send(());\n         });\n-        5.times(|| { task::deschedule(); });\n+        for _ in range(0, 5) { task::deschedule(); }\n         s.release();\n         let _ = p.recv();\n \n@@ -806,7 +806,7 @@ mod tests {\n         let s = Semaphore::new(0);\n         let s2 = s.clone();\n         task::spawn(proc() {\n-            5.times(|| { task::deschedule(); });\n+            for _ in range(0, 5) { task::deschedule(); }\n             s2.release();\n             let _ = p.recv();\n         });\n@@ -848,7 +848,7 @@ mod tests {\n                 c.send(());\n             });\n             let _ = p.recv(); // wait for child to come alive\n-            5.times(|| { task::deschedule(); }); // let the child contend\n+            for _ in range(0, 5) { task::deschedule(); } // let the child contend\n         });\n         let _ = p.recv(); // wait for child to be done\n     }\n@@ -880,13 +880,13 @@ mod tests {\n         }\n \n         fn access_shared(sharedstate: &mut int, m: &Mutex, n: uint) {\n-            n.times(|| {\n+            for _ in range(0, n) {\n                 m.lock(|| {\n                     let oldval = *sharedstate;\n                     task::deschedule();\n                     *sharedstate = oldval + 1;\n                 })\n-            })\n+            }\n         }\n     }\n     #[test]\n@@ -926,7 +926,7 @@ mod tests {\n         let m = Mutex::new();\n         let mut ports = ~[];\n \n-        num_waiters.times(|| {\n+        for _ in range(0, num_waiters) {\n             let mi = m.clone();\n             let (port, chan) = Chan::new();\n             ports.push(port);\n@@ -937,7 +937,7 @@ mod tests {\n                     chan.send(());\n                 })\n             });\n-        });\n+        }\n \n         // wait until all children get in the mutex\n         for port in ports.mut_iter() { let _ = port.recv(); }\n@@ -1020,7 +1020,7 @@ mod tests {\n \n         let result: result::Result<(), ~Any> = task::try(proc() {\n             let mut sibling_convos = ~[];\n-            2.times(|| {\n+            for _ in range(0, 2) {\n                 let (p, c) = Chan::new();\n                 sibling_convos.push(p);\n                 let mi = m2.clone();\n@@ -1037,7 +1037,7 @@ mod tests {\n                         })\n                     })\n                 });\n-            });\n+            }\n             for p in sibling_convos.mut_iter() {\n                 let _ = p.recv(); // wait for sibling to get in the mutex\n             }\n@@ -1156,13 +1156,13 @@ mod tests {\n \n         fn access_shared(sharedstate: &mut int, x: &RWLock, mode: RWLockMode,\n                          n: uint) {\n-            n.times(|| {\n+            for _ in range(0, n) {\n                 lock_rwlock_in_mode(x, mode, || {\n                     let oldval = *sharedstate;\n                     task::deschedule();\n                     *sharedstate = oldval + 1;\n                 })\n-            })\n+            }\n         }\n     }\n     #[test]\n@@ -1287,7 +1287,7 @@ mod tests {\n         let x = RWLock::new();\n         let mut ports = ~[];\n \n-        num_waiters.times(|| {\n+        for _ in range(0, num_waiters) {\n             let xi = x.clone();\n             let (port, chan) = Chan::new();\n             ports.push(port);\n@@ -1298,7 +1298,7 @@ mod tests {\n                     chan.send(());\n                 })\n             });\n-        });\n+        }\n \n         // wait until all children get in the mutex\n         for port in ports.mut_iter() { let _ = port.recv(); }\n@@ -1388,14 +1388,14 @@ mod tests {\n         let barrier = Barrier::new(10);\n         let (port, chan) = SharedChan::new();\n \n-        9.times(|| {\n+        for _ in range(0, 9) {\n             let c = barrier.clone();\n             let chan = chan.clone();\n             spawn(proc() {\n                 c.wait();\n                 chan.send(true);\n             });\n-        });\n+        }\n \n         // At this point, all spawned tasks should be blocked,\n         // so we shouldn't get anything from the port\n@@ -1406,8 +1406,8 @@ mod tests {\n \n         barrier.wait();\n         // Now, the barrier is cleared and we should get data.\n-        9.times(|| {\n+        for _ in range(0, 9) {\n             port.recv();\n-        });\n+        }\n     }\n }"}, {"sha": "0d8cccfe2b9aec25595a2f40bb891c6337e477da", "filename": "src/libextra/task_pool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftask_pool.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -86,7 +86,7 @@ fn test_task_pool() {\n         g\n     };\n     let mut pool = TaskPool::new(4, f);\n-    8.times(|| {\n+    for _ in range(0, 8) {\n         pool.execute(proc(i) println!(\"Hello from thread {}!\", *i));\n-    })\n+    }\n }"}, {"sha": "6605ea00c4413348558a0d5f3b04c0f4db0ffc62", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -1150,8 +1150,8 @@ mod test_treemap {\n \n         let mut rng: rand::IsaacRng = rand::SeedableRng::from_seed(&[42]);\n \n-        3.times(|| {\n-            90.times(|| {\n+        for _ in range(0, 3) {\n+            for _ in range(0, 90) {\n                 let k = rng.gen();\n                 let v = rng.gen();\n                 if !ctrl.iter().any(|x| x == &(k, v)) {\n@@ -1160,16 +1160,16 @@ mod test_treemap {\n                     check_structure(&map);\n                     check_equal(ctrl, &map);\n                 }\n-            });\n+            }\n \n-            30.times(|| {\n+            for _ in range(0, 30) {\n                 let r = rng.gen_range(0, ctrl.len());\n                 let (key, _) = ctrl.remove(r).unwrap();\n                 assert!(map.remove(&key));\n                 check_structure(&map);\n                 check_equal(ctrl, &map);\n-            });\n-        })\n+            }\n+        }\n     }\n \n     #[test]"}, {"sha": "d4a85b01324fe23ac9469d743c35a1ac85ec0cc0", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -103,15 +103,15 @@ mod tests {\n     fn test_flate_round_trip() {\n         let mut r = rand::rng();\n         let mut words = ~[];\n-        20.times(|| {\n+        for _ in range(0, 20) {\n             let range = r.gen_range(1u, 10);\n             words.push(r.gen_vec::<u8>(range));\n-        });\n-        20.times(|| {\n+        }\n+        for _ in range(0, 20) {\n             let mut input = ~[];\n-            2000.times(|| {\n+            for _ in range(0, 2000) {\n                 input.push_all(r.choose(words));\n-            });\n+            }\n             debug!(\"de/inflate of {} bytes of random word-sequences\",\n                    input.len());\n             let cmp = deflate_bytes(input);\n@@ -120,7 +120,7 @@ mod tests {\n                    input.len(), cmp.len(),\n                    100.0 * ((cmp.len() as f64) / (input.len() as f64)));\n             assert_eq!(input, out);\n-        });\n+        }\n     }\n \n     #[test]"}, {"sha": "a8071dd82eb9ba33a8a3626d9b9f881716d2379c", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -1275,13 +1275,13 @@ mod test {\n     fn multithreading() {\n         run(proc() {\n             let mut ports = ~[];\n-            10.times(|| {\n+            for _ in range(0, 10) {\n                 let (port, chan) = Chan::new();\n                 spawn(proc() {\n                     chan.send(());\n                 });\n                 ports.push(port);\n-            });\n+            }\n \n             loop {\n                 match ports.pop() {\n@@ -1410,7 +1410,7 @@ mod test {\n     fn single_threaded_yield() {\n         use std::task::deschedule;\n         run(proc() {\n-            5.times(deschedule);\n+            for _ in range(0, 5) { deschedule(); }\n         });\n     }\n "}, {"sha": "a2ecaf6fa9cac89176cfbf490ebea515307d6775", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -534,7 +534,7 @@ mod tests {\n     fn yield_test() {\n         let (p, c) = Chan::new();\n         spawn_opts(TaskOpts::new(), proc() {\n-            10.times(task::deschedule);\n+            for _ in range(0, 10) { task::deschedule(); }\n             c.send(());\n         });\n         p.recv();"}, {"sha": "3742517970118a7bf0ccde00a1293fb42c352a4a", "filename": "src/libnative/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibnative%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibnative%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Ftask.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -312,7 +312,7 @@ mod tests {\n     fn yield_test() {\n         let (p, c) = Chan::new();\n         spawn(proc() {\n-            10.times(task::deschedule);\n+            for _ in range(0, 10) { task::deschedule(); }\n             c.send(());\n         });\n         p.recv();"}, {"sha": "a957b8c7ef5f23ec67c3ca8b7042dee2b7bbf655", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -214,11 +214,11 @@ impl<O:DataFlowOperator> DataFlowContext<O> {\n         });\n         if expanded {\n             let entry = if self.oper.initial_value() { uint::MAX } else {0};\n-            self.words_per_id.times(|| {\n+            for _ in range(0, self.words_per_id) {\n                 self.gens.push(0);\n                 self.kills.push(0);\n                 self.on_entry.push(entry);\n-            })\n+            }\n         }\n         let start = *n * self.words_per_id;\n         let end = start + self.words_per_id;"}, {"sha": "9ccd9a463a37bb5117827c4d5965ac50de1f86d9", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -540,10 +540,10 @@ impl<'a> Context<'a> {\n \n         // rollback\n         self.is_doc_hidden = old_is_doc_hidden;\n-        pushed.times(|| {\n+        for _ in range(0, pushed) {\n             let (lint, lvl, src) = self.lint_stack.pop().unwrap();\n             self.set_level(lint, lvl, src);\n-        })\n+        }\n     }\n \n     fn visit_ids(&self, f: |&mut ast_util::IdVisitor<Context>|) {"}, {"sha": "79aa536a0dbdc47dc69bdc24170caece3f666df9", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -229,12 +229,12 @@ pub fn const_expr(cx: @CrateContext, e: &ast::Expr, is_local: bool) -> (ValueRef\n                 ty::AutoDerefRef(ref adj) => {\n                     let mut ty = ety;\n                     let mut maybe_ptr = None;\n-                    adj.autoderefs.times(|| {\n+                    for _ in range(0, adj.autoderefs) {\n                         let (dv, dt) = const_deref(cx, llconst, ty, false);\n                         maybe_ptr = Some(llconst);\n                         llconst = dv;\n                         ty = dt;\n-                    });\n+                    }\n \n                     match adj.autoref {\n                         None => { }"}, {"sha": "b0695bc0128eb02d95b181c860381cd12d98eee1", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -38,11 +38,11 @@ fn read_u32v_be(dst: &mut[u32], input: &[u8]) {\n     unsafe {\n         let mut x: *mut i32 = transmute(dst.unsafe_mut_ref(0));\n         let mut y: *i32 = transmute(input.unsafe_ref(0));\n-        dst.len().times(|| {\n+        for _ in range(0, dst.len()) {\n             *x = to_be32(*y);\n             x = x.offset(1);\n             y = y.offset(1);\n-        });\n+        }\n     }\n }\n "}, {"sha": "255172e0988a67a20864b146dca0c0c126c3651c", "filename": "src/librustpkg/sha1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibrustpkg%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibrustpkg%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fsha1.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -51,11 +51,11 @@ fn read_u32v_be(dst: &mut[u32], input: &[u8]) {\n     unsafe {\n         let mut x: *mut i32 = transmute(dst.unsafe_mut_ref(0));\n         let mut y: *i32 = transmute(input.unsafe_ref(0));\n-        dst.len().times(|| {\n+        for _ in range(0, dst.len()) {\n             *x = to_be32(*y);\n             x = x.offset(1);\n             y = y.offset(1);\n-        })\n+        }\n     }\n }\n "}, {"sha": "7f8f74f1b641a7d42d64cd6c843ad88729d6b512", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -1227,29 +1227,29 @@ mod test {\n     })\n \n     test!(fn oneshot_multi_thread_close_stress() {\n-        stress_factor().times(|| {\n+        for _ in range(0, stress_factor()) {\n             let (port, chan) = Chan::<int>::new();\n             spawn(proc() {\n                 let _p = port;\n             });\n             let _chan = chan;\n-        })\n+        }\n     })\n \n     test!(fn oneshot_multi_thread_send_close_stress() {\n-        stress_factor().times(|| {\n+        for _ in range(0, stress_factor()) {\n             let (port, chan) = Chan::<int>::new();\n             spawn(proc() {\n                 let _p = port;\n             });\n             task::try(proc() {\n                 chan.send(1);\n             });\n-        })\n+        }\n     })\n \n     test!(fn oneshot_multi_thread_recv_close_stress() {\n-        stress_factor().times(|| {\n+        for _ in range(0, stress_factor()) {\n             let (port, chan) = Chan::<int>::new();\n             spawn(proc() {\n                 let port = port;\n@@ -1264,23 +1264,23 @@ mod test {\n                     let _chan = chan;\n                 });\n             });\n-        })\n+        }\n     })\n \n     test!(fn oneshot_multi_thread_send_recv_stress() {\n-        stress_factor().times(|| {\n+        for _ in range(0, stress_factor()) {\n             let (port, chan) = Chan::<~int>::new();\n             spawn(proc() {\n                 chan.send(~10);\n             });\n             spawn(proc() {\n                 assert!(port.recv() == ~10);\n             });\n-        })\n+        }\n     })\n \n     test!(fn stream_send_recv_stress() {\n-        stress_factor().times(|| {\n+        for _ in range(0, stress_factor()) {\n             let (port, chan) = Chan::<~int>::new();\n \n             send(chan, 0);\n@@ -1303,29 +1303,29 @@ mod test {\n                     recv(port, i + 1);\n                 });\n             }\n-        })\n+        }\n     })\n \n     test!(fn recv_a_lot() {\n         // Regression test that we don't run out of stack in scheduler context\n         let (port, chan) = Chan::new();\n-        10000.times(|| { chan.send(()) });\n-        10000.times(|| { port.recv() });\n+        for _ in range(0, 10000) { chan.send(()); }\n+        for _ in range(0, 10000) { port.recv(); }\n     })\n \n     test!(fn shared_chan_stress() {\n         let (port, chan) = SharedChan::new();\n         let total = stress_factor() + 100;\n-        total.times(|| {\n+        for _ in range(0, total) {\n             let chan_clone = chan.clone();\n             spawn(proc() {\n                 chan_clone.send(());\n             });\n-        });\n+        }\n \n-        total.times(|| {\n+        for _ in range(0, total) {\n             port.recv();\n-        });\n+        }\n     })\n \n     test!(fn test_nested_recv_iter() {"}, {"sha": "a0db70117aa2bf6ddb4262afbfbd2de37aba228d", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -379,10 +379,10 @@ mod test {\n         let (p3, c3) = Chan::<int>::new();\n \n         spawn(proc() {\n-            20.times(task::deschedule);\n+            for _ in range(0, 20) { task::deschedule(); }\n             c1.send(1);\n             p3.recv();\n-            20.times(task::deschedule);\n+            for _ in range(0, 20) { task::deschedule(); }\n         });\n \n         select! (\n@@ -402,7 +402,7 @@ mod test {\n         let (p3, c3) = Chan::<()>::new();\n \n         spawn(proc() {\n-            20.times(task::deschedule);\n+            for _ in range(0, 20) { task::deschedule(); }\n             c1.send(1);\n             c2.send(2);\n             p3.recv();"}, {"sha": "fc608ce25a66801720da18fad8125a5ad368f3bc", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -355,15 +355,15 @@ mod test {\n \n     iotest!(fn multiple_connect_serial_ip4() {\n         let addr = next_test_ip4();\n-        let max = 10;\n+        let max = 10u;\n         let (port, chan) = Chan::new();\n \n         spawn(proc() {\n             port.recv();\n-            max.times(|| {\n+            for _ in range(0, max) {\n                 let mut stream = TcpStream::connect(addr);\n                 stream.write([99]);\n-            });\n+            }\n         });\n \n         let mut acceptor = TcpListener::bind(addr).listen();\n@@ -377,15 +377,15 @@ mod test {\n \n     iotest!(fn multiple_connect_serial_ip6() {\n         let addr = next_test_ip6();\n-        let max = 10;\n+        let max = 10u;\n         let (port, chan) = Chan::new();\n \n         spawn(proc() {\n             port.recv();\n-            max.times(|| {\n+            for _ in range(0, max) {\n                 let mut stream = TcpStream::connect(addr);\n                 stream.write([99]);\n-            });\n+            }\n         });\n \n         let mut acceptor = TcpListener::bind(addr).listen();"}, {"sha": "d470e9bfda108d2cb2ab3ab17301c7881e1648d1", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -234,20 +234,20 @@ mod tests {\n \n         spawn(proc() {\n             port.recv();\n-            times.times(|| {\n+            for _ in range(0, times) {\n                 let mut stream = UnixStream::connect(&path2);\n                 stream.write([100]);\n-            })\n+            }\n         });\n \n         let mut acceptor = UnixListener::bind(&path1).listen();\n         chan.send(());\n-        times.times(|| {\n+        for _ in range(0, times) {\n             let mut client = acceptor.accept();\n             let mut buf = [0];\n             client.read(buf);\n             assert_eq!(buf[0], 100);\n-        })\n+        }\n     }\n \n     #[test]"}, {"sha": "28f0cfbce1512294992ccc3df7bf5b2ab60b8885", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -139,18 +139,6 @@ pub trait Signed: Num\n \n pub trait Unsigned: Num {}\n \n-/// Times trait\n-///\n-/// ```rust\n-/// let ten = 10u;\n-/// let mut accum = 0;\n-/// ten.times(|| { accum += 1; })\n-/// ```\n-///\n-pub trait Times {\n-    fn times(&self, it: ||);\n-}\n-\n pub trait Integer: Num\n                  + Orderable\n                  + Div<Self,Self>"}, {"sha": "89914571adaf81ca5bc9999443513e8a2fcf79e3", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -20,7 +20,6 @@ use num::{Bitwise, Bounded};\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n-use num;\n use option::{Option, Some, None};\n use str;\n use unstable::intrinsics;\n@@ -80,27 +79,6 @@ pub fn div_round(x: uint, y: uint) -> uint {\n ///\n pub fn div_floor(x: uint, y: uint) -> uint { return x / y; }\n \n-impl num::Times for uint {\n-    #[inline]\n-    ///\n-    /// A convenience form for basic repetition. Given a uint `x`,\n-    /// `x.times(|| { ... })` executes the given block x times.\n-    ///\n-    /// Equivalent to `for uint::range(0, x) |_| { ... }`.\n-    ///\n-    /// Not defined on all integer types to permit unambiguous\n-    /// use with integer literals of inferred integer-type as\n-    /// the self-value (eg. `100.times(|| { ... })`).\n-    ///\n-    fn times(&self, it: ||) {\n-        let mut i = *self;\n-        while i > 0 {\n-            it();\n-            i -= 1;\n-        }\n-    }\n-}\n-\n /// Returns the smallest power of 2 greater than or equal to `n`\n #[inline]\n pub fn next_power_of_two(n: uint) -> uint {\n@@ -245,12 +223,3 @@ fn test_div() {\n     assert!((div_ceil(3u, 4u)  == 1u));\n     assert!((div_round(3u, 4u) == 1u));\n }\n-\n-#[test]\n-pub fn test_times() {\n-    use num::Times;\n-    let ten = 10 as uint;\n-    let mut accum = 0;\n-    ten.times(|| { accum += 1; });\n-    assert!((accum == 10));\n-}"}, {"sha": "d750e8ed4065f4e671704fb0be4dd6db0a8769d9", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -57,7 +57,6 @@ pub use hash::Hash;\n pub use iter::{FromIterator, Extendable};\n pub use iter::{Iterator, DoubleEndedIterator, RandomAccessIterator, CloneableIterator};\n pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n-pub use num::Times;\n pub use num::{Integer, Real, Num, NumCast, CheckedAdd, CheckedSub, CheckedMul};\n pub use num::{Orderable, Signed, Unsigned, Round};\n pub use num::{Primitive, Int, Float, ToStrRadix, ToPrimitive, FromPrimitive};"}, {"sha": "9871207a91e6ad4dfa98507cacea28430e042c2e", "filename": "src/libstd/rand/isaac.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Frand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibstd%2Frand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fisaac.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -12,7 +12,6 @@\n \n use rand::{Rng, SeedableRng, OSRng};\n use iter::{Iterator, range, range_step, Repeat};\n-use num::Times;\n use option::{None, Some};\n use vec::{raw, MutableVector, ImmutableVector};\n use mem;\n@@ -95,7 +94,7 @@ impl IsaacRng {\n             }}\n         );\n \n-        4.times(|| mix!());\n+        for _ in range(0, 4) { mix!(); }\n \n         if use_rsl {\n             macro_rules! memloop ("}, {"sha": "fabc244e00af88aeafb69e1fe68d15a8befaf565", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -14,6 +14,7 @@ use codemap;\n use std::cell::Cell;\n use std::io;\n use std::io::stdio::StdWriter;\n+use std::iter::range;\n use std::local_data;\n use extra::term;\n \n@@ -320,7 +321,7 @@ fn highlight_lines(cm: &codemap::CodeMap,\n         // Skip is the number of characters we need to skip because they are\n         // part of the 'filename:line ' part of the previous line.\n         let skip = fm.name.len() + digits + 3u;\n-        skip.times(|| s.push_char(' '));\n+        for _ in range(0, skip) { s.push_char(' '); }\n         let orig = fm.get_line(lines.lines[0] as int);\n         for pos in range(0u, left-skip) {\n             let curChar = (orig[pos] as char);\n@@ -339,7 +340,7 @@ fn highlight_lines(cm: &codemap::CodeMap,\n         if hi.col != lo.col {\n             // the ^ already takes up one space\n             let num_squigglies = hi.col.to_uint()-lo.col.to_uint()-1u;\n-            num_squigglies.times(|| s.push_char('~'));\n+            for _ in range(0, num_squigglies) { s.push_char('~'); }\n         }\n         print_maybe_styled(s + \"\\n\", term::attr::ForegroundColor(lvl.color()));\n     }\n@@ -378,7 +379,7 @@ fn custom_highlight_lines(cm: &codemap::CodeMap,\n     // Span seems to use half-opened interval, so subtract 1\n     let skip = last_line_start.len() + hi.col.to_uint() - 1;\n     let mut s = ~\"\";\n-    skip.times(|| s.push_char(' '));\n+    for _ in range(0, skip) { s.push_char(' '); }\n     s.push_char('^');\n     print_maybe_styled(s + \"\\n\", term::attr::ForegroundColor(lvl.color()));\n }"}, {"sha": "d5a30a7cf11866cf358d4cc775b3cb489f3c6def", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -396,9 +396,9 @@ pub fn parse(sess: @ParseSess,\n                 }\n                 cur_eis.push(ei);\n \n-                rust_parser.tokens_consumed.times(|| {\n+                for _ in range(0, rust_parser.tokens_consumed) {\n                     let _ = rdr.next_token();\n-                });\n+                }\n             }\n         }\n "}, {"sha": "0412a9596f0a24cf4c94eb5e303cbd431267e9b6", "filename": "src/test/bench/rt-messaging-ping-pong.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -29,25 +29,25 @@ fn ping_pong_bench(n: uint, m: uint) {\n         spawn(proc() {\n             let chan = ca;\n             let port = pb;\n-            n.times(|| {\n+            for _ in range(0, n) {\n                 chan.send(());\n                 port.recv();\n-            })\n+            }\n         });\n \n         spawn(proc() {\n             let chan = cb;\n             let port = pa;\n-            n.times(|| {\n+            for _ in range(0, n) {\n                 port.recv();\n                 chan.send(());\n-            })\n+            }\n         });\n     }\n \n-    m.times(|| {\n+    for _ in range(0, m) {\n         run_pair(n)\n-    })\n+    }\n }\n \n "}, {"sha": "20ecee5499fdddde2e42a13f7a5c3b06bc1b1930", "filename": "src/test/bench/rt-spawn-rate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Fbench%2Frt-spawn-rate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Fbench%2Frt-spawn-rate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-spawn-rate.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -26,8 +26,8 @@ fn main() {\n         100000\n     };\n \n-    n.times(|| {\n+    for _ in range(0, n) {\n         spawn(proc() {});\n-    })\n+    }\n \n }"}, {"sha": "4f0c71457b2c520536231c746e25c65e7fd96bd1", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -39,9 +39,9 @@ fn block_overarching_alias_mut() {\n \n     let mut v = ~3;\n     let mut x = &mut v;\n-    3.times(|| {\n+    for _ in range(0, 3) {\n         borrow(v); //~ ERROR cannot borrow\n-    });\n+    }\n     *x = ~5;\n }\n "}, {"sha": "06a4088617a2bec5065b6f5f411dcf7b2c0daefc", "filename": "src/test/compile-fail/implicit-method-bind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let _f = 10.times; //~ ERROR attempted to take value of method\n+    let _f = 10i.abs; //~ ERROR attempted to take value of method\n }"}, {"sha": "0f97db18a1f3705727211a38f33ae35d3bdfac5a", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -41,11 +41,11 @@ fn count(n: uint) -> uint {\n }\n \n fn main() {\n-    10u.times(proc() {\n+    for _ in range(0, 10u) {\n         task::spawn(proc() {\n             let result = count(5u);\n             info!(\"result = %?\", result);\n             fail!();\n         });\n-    });\n+    }\n }"}, {"sha": "a3e11d27f276e4ad72817bdba8735e345181e58e", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -20,5 +20,5 @@ fn bitv_test() {\n }\n \n pub fn main() {\n-    10000.times(|| bitv_test());\n+    for _ in range(0, 10000) { bitv_test(); }\n }"}, {"sha": "444790bcce99cbac3a5841908161f7ce957ac1c2", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -72,9 +72,9 @@ pub fn main() {\n     roundtrip::<C>();\n     roundtrip::<D>();\n \n-    20.times(|| {\n+    for _ in range(0, 20) {\n         roundtrip::<E>();\n         roundtrip::<F>();\n         roundtrip::<G<int>>();\n-    })\n+    }\n }"}, {"sha": "a8dc8de0c23b8582785e2db2866594e9c29d53dc", "filename": "src/test/run-pass/deriving-rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-rand.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -34,10 +34,10 @@ enum D {\n \n pub fn main() {\n     // check there's no segfaults\n-    20.times(|| {\n+    for _ in range(0, 20) {\n         rand::random::<A>();\n         rand::random::<B>();\n         rand::random::<C>();\n         rand::random::<D>();\n-    })\n+    }\n }"}, {"sha": "ef1b26fc1af052c3531e097ad88d7121e0686244", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -41,9 +41,9 @@ fn count(n: uint) -> uint {\n }\n \n pub fn main() {\n-    100u.times(|| {\n+    for _ in range(0, 100u) {\n         task::spawn(proc() {\n             assert_eq!(count(5u), 16u);\n         });\n-    })\n+    }\n }"}, {"sha": "d7b8ed583a5184821ece5b4b6ec1926bfff60589", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -38,11 +38,11 @@ fn count(n: uint) -> uint {\n }\n \n pub fn main() {\n-    10u.times(|| {\n+    for _ in range(0, 10u) {\n         task::spawn(proc() {\n             let result = count(5u);\n             info!(\"result = {}\", result);\n             assert_eq!(result, 16u);\n         });\n-    })\n+    }\n }"}, {"sha": "63a457be9f0209f8be67921fc4bc64efb4df104b", "filename": "src/test/run-pass/issue-3211.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3211.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -1,6 +1,6 @@\n pub fn main() {\n     let mut x = 0;\n-    4096.times(|| x += 1);\n+    for _ in range(0, 4096) { x += 1; }\n     assert_eq!(x, 4096);\n     println!(\"x = {}\", x);\n }"}, {"sha": "54f865a6cd5802fad38509e023d68b30b3edf32c", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -65,7 +65,7 @@ fn AsciiArt(width: uint, height: uint, fill: char) -> AsciiArt {\n     // Use an anonymous function to build a vector of vectors containing\n     // blank characters for each position in our canvas.\n     let lines = vec::build(Some(height), |push| {\n-        height.times(|| push(vec::from_elem(width, '.')))\n+        for _ in range(0, height) { push(vec::from_elem(width, '.')); }\n     });\n \n     // Rust code often returns values by omitting the trailing semi-colon"}, {"sha": "88556af254204b7ec15e31e5f82203346a7828ff", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -44,17 +44,16 @@ priv fn parse_data(len: uint, io: @io::Reader) -> Result {\n }\n \n priv fn parse_list(len: uint, io: @io::Reader) -> Result {\n-  let mut list: ~[Result] = ~[];\n-    len.times(proc() {\n-    let v =\n-        match io.read_char() {\n-        '$' => parse_bulk(io),\n-        ':' => parse_int(io),\n-         _ => fail!()\n-    });\n-    list.push(v);\n+    let mut list: ~[Result] = ~[];\n+    for _ in range(0, len) {\n+        let v = match io.read_char() {\n+            '$' => parse_bulk(io),\n+            ':' => parse_int(io),\n+             _ => fail!()\n+        };\n+        list.push(v);\n     }\n-  return List(list);\n+    return List(list);\n }\n \n priv fn chop(s: ~str) -> ~str {"}, {"sha": "72390cfdad7797866a8236322d29ec6529b5f6c6", "filename": "src/test/run-pass/issue-4401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4401.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -1,6 +1,6 @@\n pub fn main() {\n     let mut count = 0;\n-    999_999.times(|| count += 1);\n+    for _ in range(0, 999_999) { count += 1; }\n     assert_eq!(count, 999_999);\n     println!(\"{}\", count);\n }"}, {"sha": "fcb8092b7234fd7f3bed64073c18f77ef67e9bf2", "filename": "src/test/run-pass/issue-5321-immediates-with-bare-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -14,7 +14,7 @@ trait Fooable {\n \n impl Fooable for uint {\n     fn yes(self) {\n-        self.times(|| println!(\"yes\"));\n+        for _ in range(0, self) { println!(\"yes\"); }\n     }\n }\n "}, {"sha": "34f2c85350984ef17d567277d789b7b676de18d4", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729060dbb95afd1d8562a6b3129555a173b81b0c/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=729060dbb95afd1d8562a6b3129555a173b81b0c", "patch": "@@ -31,9 +31,6 @@ pub fn main() {\n     assert_eq!(15u32.add(&6u32), 21u32);\n     assert_eq!(15u64.add(&6u64), 21u64);\n \n-    // times\n-     15u.times(|| {});\n-\n // floats\n     // num\n     assert_eq!(10f32.to_int().unwrap(), 10);"}]}