{"sha": "5c9d28d303f316c6cc6895ec742839b79392720a", "node_id": "C_kwDOAAsO6NoAKDVjOWQyOGQzMDNmMzE2YzZjYzY4OTVlYzc0MjgzOWI3OTM5MjcyMGE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-05T13:56:51Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-08T08:10:21Z"}, "message": "Opaque types' generic params do not imply anything about their hidden type's lifetimes", "tree": {"sha": "25ce3dcb49ca6bb4b6a5552e275be9459717c819", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25ce3dcb49ca6bb4b6a5552e275be9459717c819"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c9d28d303f316c6cc6895ec742839b79392720a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c9d28d303f316c6cc6895ec742839b79392720a", "html_url": "https://github.com/rust-lang/rust/commit/5c9d28d303f316c6cc6895ec742839b79392720a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c9d28d303f316c6cc6895ec742839b79392720a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44adfccffe34d14079b06ae459982b8600f84577", "url": "https://api.github.com/repos/rust-lang/rust/commits/44adfccffe34d14079b06ae459982b8600f84577", "html_url": "https://github.com/rust-lang/rust/commit/44adfccffe34d14079b06ae459982b8600f84577"}], "stats": {"total": 118, "additions": 113, "deletions": 5}, "files": [{"sha": "5f8cb578202103e26f38aca5f58639f022af4913", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c9d28d303f316c6cc6895ec742839b79392720a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9d28d303f316c6cc6895ec742839b79392720a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=5c9d28d303f316c6cc6895ec742839b79392720a", "patch": "@@ -666,7 +666,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         // ignore the inputs to a projection, as they may not appear\n         // in the normalized form\n         if self.just_constrained {\n-            if let ty::Projection(..) = t.kind() {\n+            if let ty::Projection(..) | ty::Opaque(..) = t.kind() {\n                 return ControlFlow::CONTINUE;\n             }\n         }"}, {"sha": "1300a2e45d57d139ad1aa7519695af347f308268", "filename": "src/test/ui/type-alias-impl-trait/constrain_inputs.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5c9d28d303f316c6cc6895ec742839b79392720a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9d28d303f316c6cc6895ec742839b79392720a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.rs?ref=5c9d28d303f316c6cc6895ec742839b79392720a", "patch": "@@ -1,17 +1,33 @@\n-// check-pass\n-\n #![feature(type_alias_impl_trait)]\n \n-mod foo {\n+mod lifetime_params {\n     type Ty<'a> = impl Sized;\n     fn defining(s: &str) -> Ty<'_> { s }\n     fn execute(ty: Ty<'_>) -> &str { todo!() }\n+    //~^ ERROR return type references an anonymous lifetime, which is not constrained by the fn input types\n+\n+    type BadFnSig = fn(Ty<'_>) -> &str;\n+    //~^ ERROR return type references an anonymous lifetime, which is not constrained by the fn input types\n+    type BadTraitRef = dyn Fn(Ty<'_>) -> &str;\n+    //~^ ERROR binding for associated type `Output` references an anonymous lifetime\n }\n \n-mod bar {\n+mod type_params {\n     type Ty<'a> = impl FnOnce() -> &'a str;\n     fn defining(s: &str) -> Ty<'_> { move || s }\n     fn execute(ty: Ty<'_>) -> &str { ty() }\n+    //~^ ERROR return type references an anonymous lifetime, which is not constrained by the fn input types\n+}\n+\n+// regression test for https://github.com/rust-lang/rust/issues/97104\n+mod type_params2 {\n+    type Ty<T> = impl Sized;\n+    fn define<T>(s: T) -> Ty<T> { s }\n+\n+    type BadFnSig = fn(Ty<&str>) -> &str;\n+    //~^ ERROR return type references an anonymous lifetime, which is not constrained by the fn input types\n+    type BadTraitRef = dyn Fn(Ty<&str>) -> &str;\n+    //~^ ERROR binding for associated type `Output` references an anonymous lifetime\n }\n \n fn main() {}"}, {"sha": "c35b55df643800d1714e8da9aab3dfb8c3d183a7", "filename": "src/test/ui/type-alias-impl-trait/constrain_inputs.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5c9d28d303f316c6cc6895ec742839b79392720a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9d28d303f316c6cc6895ec742839b79392720a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.stderr?ref=5c9d28d303f316c6cc6895ec742839b79392720a", "patch": "@@ -0,0 +1,52 @@\n+error[E0581]: return type references an anonymous lifetime, which is not constrained by the fn input types\n+  --> $DIR/constrain_inputs.rs:6:31\n+   |\n+LL |     fn execute(ty: Ty<'_>) -> &str { todo!() }\n+   |                               ^^^^\n+   |\n+   = note: lifetimes appearing in an associated type are not considered constrained\n+\n+error[E0581]: return type references an anonymous lifetime, which is not constrained by the fn input types\n+  --> $DIR/constrain_inputs.rs:9:35\n+   |\n+LL |     type BadFnSig = fn(Ty<'_>) -> &str;\n+   |                                   ^^^^\n+   |\n+   = note: lifetimes appearing in an associated type are not considered constrained\n+\n+error[E0582]: binding for associated type `Output` references an anonymous lifetime, which does not appear in the trait input types\n+  --> $DIR/constrain_inputs.rs:11:42\n+   |\n+LL |     type BadTraitRef = dyn Fn(Ty<'_>) -> &str;\n+   |                                          ^^^^\n+   |\n+   = note: lifetimes appearing in an associated type are not considered constrained\n+\n+error[E0581]: return type references an anonymous lifetime, which is not constrained by the fn input types\n+  --> $DIR/constrain_inputs.rs:18:31\n+   |\n+LL |     fn execute(ty: Ty<'_>) -> &str { ty() }\n+   |                               ^^^^\n+   |\n+   = note: lifetimes appearing in an associated type are not considered constrained\n+\n+error[E0581]: return type references an anonymous lifetime, which is not constrained by the fn input types\n+  --> $DIR/constrain_inputs.rs:27:37\n+   |\n+LL |     type BadFnSig = fn(Ty<&str>) -> &str;\n+   |                                     ^^^^\n+   |\n+   = note: lifetimes appearing in an associated type are not considered constrained\n+\n+error[E0582]: binding for associated type `Output` references an anonymous lifetime, which does not appear in the trait input types\n+  --> $DIR/constrain_inputs.rs:29:44\n+   |\n+LL |     type BadTraitRef = dyn Fn(Ty<&str>) -> &str;\n+   |                                            ^^^^\n+   |\n+   = note: lifetimes appearing in an associated type are not considered constrained\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0581, E0582.\n+For more information about an error, try `rustc --explain E0581`."}, {"sha": "937ca48a52dbdc4387cb9440a3e98f56d909f28b", "filename": "src/test/ui/type-alias-impl-trait/constrain_inputs_unsound.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5c9d28d303f316c6cc6895ec742839b79392720a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs_unsound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9d28d303f316c6cc6895ec742839b79392720a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs_unsound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs_unsound.rs?ref=5c9d28d303f316c6cc6895ec742839b79392720a", "patch": "@@ -0,0 +1,31 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait Static: 'static {}\n+impl Static for () {}\n+\n+type Gal<T> = impl Static;\n+fn _defining<T>() -> Gal<T> {}\n+\n+trait Callable<Arg> { type Output; }\n+\n+/// We can infer `<C as Callable<Arg>>::Output: 'static`,\n+/// because we know `C: 'static` and `Arg: 'static`,\n+fn box_str<C, Arg>(s: C::Output) -> Box<dyn AsRef<str> + 'static>\n+where\n+    Arg: Static,\n+    C: ?Sized + Callable<Arg> + 'static,\n+    C::Output: AsRef<str>,\n+{\n+    Box::new(s)\n+}\n+\n+fn extend_lifetime(s: &str) -> Box<dyn AsRef<str> + 'static> {\n+    type MalformedTy = dyn for<'a> Callable<Gal<&'a ()>, Output = &'a str>;\n+    //~^ ERROR binding for associated type `Output` references lifetime `'a`\n+    box_str::<MalformedTy, _>(s)\n+}\n+\n+fn main() {\n+    //let extended = extend_lifetime(&String::from(\"hello\"));\n+    //println!(\"{}\", extended.as_ref().as_ref());\n+}"}, {"sha": "d5fc46cb1f596d01c889402106e20d229205c6e9", "filename": "src/test/ui/type-alias-impl-trait/constrain_inputs_unsound.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c9d28d303f316c6cc6895ec742839b79392720a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs_unsound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9d28d303f316c6cc6895ec742839b79392720a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs_unsound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs_unsound.stderr?ref=5c9d28d303f316c6cc6895ec742839b79392720a", "patch": "@@ -0,0 +1,9 @@\n+error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/constrain_inputs_unsound.rs:23:58\n+   |\n+LL |     type MalformedTy = dyn for<'a> Callable<Gal<&'a ()>, Output = &'a str>;\n+   |                                                          ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0582`."}]}