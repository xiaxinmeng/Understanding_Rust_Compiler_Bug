{"sha": "a1514b475854e858a3de95b3806d5795e0d6d72e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNTE0YjQ3NTg1NGU4NThhM2RlOTViMzgwNmQ1Nzk1ZTBkNmQ3MmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-23T20:19:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-23T20:19:11Z"}, "message": "Rollup merge of #65479 - SimonSapin:matches, r=alexcrichton\n\nAdd the `matches!( $expr, $pat ) -> bool` macro\n\n# Motivation\n\nThis macro is:\n\n* General-purpose (not domain-specific)\n* Simple (the implementation is short)\n* Very popular [on crates.io](https://crates.io/crates/matches) (currently 37th in all-time downloads)\n* The two previous points combined make it number one in [left-pad index](https://twitter.com/bascule/status/1184523027888988160) score\n\nAs such, I feel it is a good candidate for inclusion in the standard library.\n\nIn fact I already felt that way five years ago: https://github.com/rust-lang/rust/pull/14685 (Although the proof of popularity was not as strong at the time.)\n\n# API\n\n<details>\n<del>\n\nBack then, the main concern was that this macro may not be quite universally-enough useful to belong in the prelude.\n\nTherefore, this PR adds the macro such that using it requires one of:\n\n```rust\nuse core::macros::matches;\nuse std::macros::matches;\n```\n\n</del>\n</details>\n\nLike arms of a `match` expression, the macro supports multiple patterns separated by `|` and optionally followed by `if` and a guard expression:\n\n```rust\nlet foo = 'f';\nassert!(matches!(foo, 'A'..='Z' | 'a'..='z'));\n\nlet bar = Some(4);\nassert!(matches!(bar, Some(x) if x > 2));\n```\n\n<details>\n<del>\n\n# Implementation constraints\n\nA combination of reasons make it tricky for a standard library macro not to be in the prelude.\n\nCurrently, all public `macro_rules` macros in the standard library macros end up \u201cin the prelude\u201d of every crate not through `use std::prelude::v1::*;` like for other kinds of items, but through `#[macro_use]` on `extern crate std;`. (Both are injected by `src/libsyntax_ext/standard_library_imports.rs`.)\n\n`#[macro_use]` seems to import every macro that is available at the top-level of a crate, even if through a `pub use` re-export.\n\nTherefore, for `matches!` not to be in the prelude, we need it to be inside of a module rather than at the root of `core` or `std`.\n\nHowever, the only way to make a `macro_rules` macro public outside of the crate where it is defined appears to be `#[macro_export]`. This exports the macro at the root of the crate regardless of which module defines it. See [macro scoping](https://doc.rust-lang.org/reference/macros-by-example.html#scoping-exporting-and-importing) in the reference.\n\nTherefore, the macro needs to be defined in a crate that is not `core` or `std`.\n\n# Implementation\n\nThis PR adds a new `matches_macro` crate as a private implementation detail of the standard library. This crate is `#![no_core]` so that libcore can depend on it. It contains a `macro_rules` definition with `#[macro_export]`.\n\nlibcore and libstd each have a new public `macros` module that contains a `pub use` re-export of the macro. Both the module and the macro are unstable, for now.\n\nThe existing private `macros` modules are renamed `prelude_macros`, though their respective source remains in `macros.rs` files.\n\n</del>\n</details>", "tree": {"sha": "e7478f199d47d3d1b8252b2acdafb553f8e4d6c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7478f199d47d3d1b8252b2acdafb553f8e4d6c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1514b475854e858a3de95b3806d5795e0d6d72e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdsLW/CRBK7hj4Ov3rIwAAdHIIAI5jld/dj56RsoHFAJVigzwP\n/e3ss/gwVqy3k/zVyzzfc6lZNVxVxvYABR2K33b/m3WoGliLmuBSRIIv39Vd3GEE\nV2HX4tFFj/9RCxsY4LlIzLNQ5eivyZjcyIgfwYdZHZSjHTTKaEa+Z2oDRzVRtX+7\n+8+p6w2VoHY5A678jdEX/vyw4Lbrrz6rc249nokPcTkhEjEENkdTY1p3t6N5EPZe\n7TkBrnJdesxrmEViMbnOePlccz3ZGj9/R54rS7MGFFFBGCrIB55P7CavhwVPKMc9\nFpDz3cpN+VxOOPxSoUGgPIq2LB4ne8pUpZ16nQR3WxvHFcihnvCDC/96PWg++SY=\n=p18j\n-----END PGP SIGNATURE-----\n", "payload": "tree e7478f199d47d3d1b8252b2acdafb553f8e4d6c3\nparent 7c043e284a9a3e71ee2e5d34be8e40abf1daa49e\nparent e76a1846153209b15dfbf697a33c25214bb753b3\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571861951 +0200\ncommitter GitHub <noreply@github.com> 1571861951 +0200\n\nRollup merge of #65479 - SimonSapin:matches, r=alexcrichton\n\nAdd the `matches!( $expr, $pat ) -> bool` macro\n\n# Motivation\n\nThis macro is:\n\n* General-purpose (not domain-specific)\n* Simple (the implementation is short)\n* Very popular [on crates.io](https://crates.io/crates/matches) (currently 37th in all-time downloads)\n* The two previous points combined make it number one in [left-pad index](https://twitter.com/bascule/status/1184523027888988160) score\n\nAs such, I feel it is a good candidate for inclusion in the standard library.\n\nIn fact I already felt that way five years ago: https://github.com/rust-lang/rust/pull/14685 (Although the proof of popularity was not as strong at the time.)\n\n# API\n\n<details>\n<del>\n\nBack then, the main concern was that this macro may not be quite universally-enough useful to belong in the prelude.\n\nTherefore, this PR adds the macro such that using it requires one of:\n\n```rust\nuse core::macros::matches;\nuse std::macros::matches;\n```\n\n</del>\n</details>\n\nLike arms of a `match` expression, the macro supports multiple patterns separated by `|` and optionally followed by `if` and a guard expression:\n\n```rust\nlet foo = 'f';\nassert!(matches!(foo, 'A'..='Z' | 'a'..='z'));\n\nlet bar = Some(4);\nassert!(matches!(bar, Some(x) if x > 2));\n```\n\n<details>\n<del>\n\n# Implementation constraints\n\nA combination of reasons make it tricky for a standard library macro not to be in the prelude.\n\nCurrently, all public `macro_rules` macros in the standard library macros end up \u201cin the prelude\u201d of every crate not through `use std::prelude::v1::*;` like for other kinds of items, but through `#[macro_use]` on `extern crate std;`. (Both are injected by `src/libsyntax_ext/standard_library_imports.rs`.)\n\n`#[macro_use]` seems to import every macro that is available at the top-level of a crate, even if through a `pub use` re-export.\n\nTherefore, for `matches!` not to be in the prelude, we need it to be inside of a module rather than at the root of `core` or `std`.\n\nHowever, the only way to make a `macro_rules` macro public outside of the crate where it is defined appears to be `#[macro_export]`. This exports the macro at the root of the crate regardless of which module defines it. See [macro scoping](https://doc.rust-lang.org/reference/macros-by-example.html#scoping-exporting-and-importing) in the reference.\n\nTherefore, the macro needs to be defined in a crate that is not `core` or `std`.\n\n# Implementation\n\nThis PR adds a new `matches_macro` crate as a private implementation detail of the standard library. This crate is `#![no_core]` so that libcore can depend on it. It contains a `macro_rules` definition with `#[macro_export]`.\n\nlibcore and libstd each have a new public `macros` module that contains a `pub use` re-export of the macro. Both the module and the macro are unstable, for now.\n\nThe existing private `macros` modules are renamed `prelude_macros`, though their respective source remains in `macros.rs` files.\n\n</del>\n</details>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1514b475854e858a3de95b3806d5795e0d6d72e", "html_url": "https://github.com/rust-lang/rust/commit/a1514b475854e858a3de95b3806d5795e0d6d72e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1514b475854e858a3de95b3806d5795e0d6d72e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "html_url": "https://github.com/rust-lang/rust/commit/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e"}, {"sha": "e76a1846153209b15dfbf697a33c25214bb753b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e76a1846153209b15dfbf697a33c25214bb753b3", "html_url": "https://github.com/rust-lang/rust/commit/e76a1846153209b15dfbf697a33c25214bb753b3"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "35558e3abcdddcba3e920b4f49b0b1d86074d265", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a1514b475854e858a3de95b3806d5795e0d6d72e/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1514b475854e858a3de95b3806d5795e0d6d72e/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=a1514b475854e858a3de95b3806d5795e0d6d72e", "patch": "@@ -238,6 +238,33 @@ macro_rules! debug_assert_ne {\n     ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_ne!($($arg)*); })\n }\n \n+/// Returns whether the given expression matches any of the given patterns.\n+///\n+/// Like in a `match` expression, the pattern can be optionally followed by `if`\n+/// and a guard expression that has access to names bound by the pattern.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(matches_macro)]\n+///\n+/// let foo = 'f';\n+/// assert!(matches!(foo, 'A'..='Z' | 'a'..='z'));\n+///\n+/// let bar = Some(4);\n+/// assert!(matches!(bar, Some(x) if x > 2));\n+/// ```\n+#[macro_export]\n+#[unstable(feature = \"matches_macro\", issue = \"65721\")]\n+macro_rules! matches {\n+    ($expression:expr, $( $pattern:pat )|+ $( if $guard: expr )?) => {\n+        match $expression {\n+            $( $pattern )|+ $( if $guard )? => true,\n+            _ => false\n+        }\n+    }\n+}\n+\n /// Unwraps a result or propagates its error.\n ///\n /// The `?` operator was added to replace `try!` and should be used instead."}, {"sha": "d0cb0104f6cbad23d2058345d3397041a07b48e8", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1514b475854e858a3de95b3806d5795e0d6d72e/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1514b475854e858a3de95b3806d5795e0d6d72e/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=a1514b475854e858a3de95b3806d5795e0d6d72e", "patch": "@@ -276,6 +276,7 @@\n #![feature(linkage)]\n #![feature(log_syntax)]\n #![feature(manually_drop_take)]\n+#![feature(matches_macro)]\n #![feature(maybe_uninit_ref)]\n #![feature(maybe_uninit_slice)]\n #![feature(needs_panic_runtime)]\n@@ -527,6 +528,7 @@ pub use core::{\n     writeln,\n     // Unstable\n     todo,\n+    matches,\n };\n \n // Re-export built-in macros defined through libcore."}]}