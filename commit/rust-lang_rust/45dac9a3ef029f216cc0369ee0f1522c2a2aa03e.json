{"sha": "45dac9a3ef029f216cc0369ee0f1522c2a2aa03e", "node_id": "C_kwDOAAsO6NoAKDQ1ZGFjOWEzZWYwMjlmMjE2Y2MwMzY5ZWUwZjE1MjJjMmEyYWEwM2U", "commit": {"author": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2022-08-30T18:47:08Z"}, "committer": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2022-08-30T18:47:08Z"}, "message": "Move comments to the extracted struct", "tree": {"sha": "289392079c47e8b97e48b37add7134fd487c6a39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289392079c47e8b97e48b37add7134fd487c6a39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45dac9a3ef029f216cc0369ee0f1522c2a2aa03e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45dac9a3ef029f216cc0369ee0f1522c2a2aa03e", "html_url": "https://github.com/rust-lang/rust/commit/45dac9a3ef029f216cc0369ee0f1522c2a2aa03e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45dac9a3ef029f216cc0369ee0f1522c2a2aa03e/comments", "author": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d777759bf5615411496eb9d1f73c5c43540b150", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d777759bf5615411496eb9d1f73c5c43540b150", "html_url": "https://github.com/rust-lang/rust/commit/7d777759bf5615411496eb9d1f73c5c43540b150"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "ddc2052e7aa240f92f32c3122423138edea0f4da", "filename": "crates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/45dac9a3ef029f216cc0369ee0f1522c2a2aa03e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dac9a3ef029f216cc0369ee0f1522c2a2aa03e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=45dac9a3ef029f216cc0369ee0f1522c2a2aa03e", "patch": "@@ -105,7 +105,8 @@ pub(crate) fn extract_struct_from_enum_variant(\n                 .generic_param_list()\n                 .and_then(|known_generics| extract_generic_params(&known_generics, &field_list));\n             let generics = generic_params.as_ref().map(|generics| generics.clone_for_update());\n-            let def = create_struct_def(variant_name.clone(), &field_list, generics, &enum_ast);\n+            let def =\n+                create_struct_def(variant_name.clone(), &variant, &field_list, generics, &enum_ast);\n \n             let enum_ast = variant.parent_enum();\n             let indent = enum_ast.indent_level();\n@@ -228,6 +229,7 @@ fn tag_generics_in_variant(ty: &ast::Type, generics: &mut [(ast::GenericParam, b\n \n fn create_struct_def(\n     name: ast::Name,\n+    variant: &ast::Variant,\n     field_list: &Either<ast::RecordFieldList, ast::TupleFieldList>,\n     generics: Option<ast::GenericParamList>,\n     enum_: &ast::Enum,\n@@ -272,6 +274,12 @@ fn create_struct_def(\n \n     let strukt = make::struct_(enum_vis, name, generics, field_list).clone_for_update();\n \n+    // take comments from variant\n+    ted::insert_all(\n+        ted::Position::first_child_of(strukt.syntax()),\n+        take_all_comments(variant.syntax()),\n+    );\n+\n     // copy attributes from enum\n     ted::insert_all(\n         ted::Position::first_child_of(strukt.syntax()),\n@@ -340,6 +348,31 @@ fn update_variant(variant: &ast::Variant, generics: Option<ast::GenericParamList\n     Some(())\n }\n \n+// Note: this also detaches whitespace after comments,\n+// since `SyntaxNode::splice_children` (and by extension `ted::insert_all_raw`)\n+// detaches nodes. If we only took the comments, we'd leave behind the old whitespace.\n+fn take_all_comments(node: &SyntaxNode) -> Vec<SyntaxElement> {\n+    let mut remove_next_ws = false;\n+    node.children_with_tokens()\n+        .filter_map(move |child| match child.kind() {\n+            COMMENT => {\n+                remove_next_ws = true;\n+                child.detach();\n+                Some(child)\n+            }\n+            WHITESPACE if remove_next_ws => {\n+                remove_next_ws = false;\n+                child.detach();\n+                Some(make::tokens::single_newline().into())\n+            }\n+            _ => {\n+                remove_next_ws = false;\n+                None\n+            }\n+        })\n+        .collect()\n+}\n+\n fn apply_references(\n     insert_use_cfg: InsertUseConfig,\n     segment: ast::PathSegment,\n@@ -602,7 +635,7 @@ enum A { One(One) }\"#,\n     }\n \n     #[test]\n-    fn test_extract_struct_keep_comments_and_attrs_on_variant_struct() {\n+    fn test_extract_struct_move_struct_variant_comments() {\n         check_assist(\n             extract_struct_from_enum_variant,\n             r#\"\n@@ -616,22 +649,22 @@ enum A {\n     }\n }\"#,\n             r#\"\n+/* comment */\n+// other\n+/// comment\n struct One{\n     a: u32\n }\n \n enum A {\n-    /* comment */\n-    // other\n-    /// comment\n     #[attr]\n     One(One)\n }\"#,\n         );\n     }\n \n     #[test]\n-    fn test_extract_struct_keep_comments_and_attrs_on_variant_tuple() {\n+    fn test_extract_struct_move_tuple_variant_comments() {\n         check_assist(\n             extract_struct_from_enum_variant,\n             r#\"\n@@ -643,12 +676,12 @@ enum A {\n     $0One(u32, u32)\n }\"#,\n             r#\"\n+/* comment */\n+// other\n+/// comment\n struct One(u32, u32);\n \n enum A {\n-    /* comment */\n-    // other\n-    /// comment\n     #[attr]\n     One(One)\n }\"#,"}]}