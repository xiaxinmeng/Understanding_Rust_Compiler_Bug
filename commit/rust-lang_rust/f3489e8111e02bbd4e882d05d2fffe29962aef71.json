{"sha": "f3489e8111e02bbd4e882d05d2fffe29962aef71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNDg5ZTgxMTFlMDJiYmQ0ZTg4MmQwNWQyZmZmZTI5OTYyYWVmNzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-31T08:30:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-31T20:23:30Z"}, "message": "add eat methods", "tree": {"sha": "c6d54d7e08e6adfaf1782eba58ce8726fead6aa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6d54d7e08e6adfaf1782eba58ce8726fead6aa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3489e8111e02bbd4e882d05d2fffe29962aef71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3489e8111e02bbd4e882d05d2fffe29962aef71", "html_url": "https://github.com/rust-lang/rust/commit/f3489e8111e02bbd4e882d05d2fffe29962aef71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3489e8111e02bbd4e882d05d2fffe29962aef71/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e28a5e048a9da3091897c86e48bc7d4fb2cf601c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e28a5e048a9da3091897c86e48bc7d4fb2cf601c", "html_url": "https://github.com/rust-lang/rust/commit/e28a5e048a9da3091897c86e48bc7d4fb2cf601c"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "3d6dcefa840cd40140bdd263287507c1ede6cb1a", "filename": "crates/ra_hir/src/macros/mbe.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f3489e8111e02bbd4e882d05d2fffe29962aef71/crates%2Fra_hir%2Fsrc%2Fmacros%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3489e8111e02bbd4e882d05d2fffe29962aef71/crates%2Fra_hir%2Fsrc%2Fmacros%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmacros%2Fmbe.rs?ref=f3489e8111e02bbd4e882d05d2fffe29962aef71", "patch": "@@ -85,16 +85,15 @@ pub(crate) fn parse(tt: &tt::Subtree) -> Option<MacroRules> {\n }\n \n fn parse_rule(p: &mut RulesParser) -> Option<Rule> {\n-    let lhs = match p.current()? {\n-        tt::TokenTree::Subtree(sub) => parse_subtree(sub)?,\n-        _ => return None,\n-    };\n-    let rhs = unimplemented!();\n+    let lhs = parse_subtree(p.eat_subtree()?)?;\n+    p.eat_punct('=');\n+    p.eat_punct('>');\n+    let rhs = parse_subtree(p.eat_subtree()?)?;\n     Some(Rule { lhs, rhs })\n }\n \n fn parse_subtree(tt: &tt::Subtree) -> Option<Subtree> {\n-    unimplemented!()\n+    None\n }\n \n struct RulesParser<'a> {\n@@ -118,4 +117,22 @@ impl<'a> RulesParser<'a> {\n     fn bump(&mut self) {\n         self.pos += 1;\n     }\n+    fn eat_subtree(&mut self) -> Option<&'a tt::Subtree> {\n+        match self.current()? {\n+            tt::TokenTree::Subtree(sub) => {\n+                self.bump();\n+                Some(sub)\n+            }\n+            _ => return None,\n+        }\n+    }\n+    fn eat_punct(&mut self, char: char) -> Option<()> {\n+        match self.current()? {\n+            tt::TokenTree::Leaf(tt::Leaf::Punct(tt::Punct { char: c })) if *c == char => {\n+                self.bump();\n+                Some(())\n+            }\n+            _ => None,\n+        }\n+    }\n }"}]}