{"sha": "3322ffa8a048ef5369d3cdd914869fdf383473a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMjJmZmE4YTA0OGVmNTM2OWQzY2RkOTE0ODY5ZmRmMzgzNDczYTQ=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-11-04T09:55:14Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-11-04T12:37:18Z"}, "message": "New lint for assignment to temporary", "tree": {"sha": "b4538c9fc05c5ee76422286ed673e5ec0e9a160c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4538c9fc05c5ee76422286ed673e5ec0e9a160c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3322ffa8a048ef5369d3cdd914869fdf383473a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3322ffa8a048ef5369d3cdd914869fdf383473a4", "html_url": "https://github.com/rust-lang/rust/commit/3322ffa8a048ef5369d3cdd914869fdf383473a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3322ffa8a048ef5369d3cdd914869fdf383473a4/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "364bdc5b70d42da11d0a7be3e3ca5bb75e8228f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/364bdc5b70d42da11d0a7be3e3ca5bb75e8228f1", "html_url": "https://github.com/rust-lang/rust/commit/364bdc5b70d42da11d0a7be3e3ca5bb75e8228f1"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "5a2ea945349326bd08a02835ad0f24c44bbb624b", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3322ffa8a048ef5369d3cdd914869fdf383473a4/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/3322ffa8a048ef5369d3cdd914869fdf383473a4/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=3322ffa8a048ef5369d3cdd914869fdf383473a4", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 72 lints included in this crate:\n+There are 73 lints included in this crate:\n \n name                                                                                                   | default | meaning\n -------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -68,6 +68,7 @@ name\n [string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                               | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n [string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)                 | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n [string_to_string](https://github.com/Manishearth/rust-clippy/wiki#string_to_string)                   | warn    | calling `String.to_string()` which is a no-op\n+[temporary_assignment](https://github.com/Manishearth/rust-clippy/wiki#temporary_assignment)           | warn    | assignments to temporaries\n [toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                   | warn    | An entire binding was declared as `ref`, in a function argument (`fn foo(ref x: Bar)`), or a `let` statement (`let ref x = foo()`). In such cases, it is preferred to take references with `&`.\n [type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                     | warn    | usage of very complex types; recommends factoring out parts into `type` definitions\n [unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                     | allow   | using a unicode literal not in NFC normal form (see http://www.unicode.org/reports/tr15/ for further information)"}, {"sha": "970a244e2cd7c8dc6c37dc85a32cff8287e165fb", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3322ffa8a048ef5369d3cdd914869fdf383473a4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3322ffa8a048ef5369d3cdd914869fdf383473a4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3322ffa8a048ef5369d3cdd914869fdf383473a4", "patch": "@@ -54,6 +54,7 @@ pub mod open_options;\n pub mod needless_features;\n pub mod needless_update;\n pub mod no_effect;\n+pub mod temporary_assignment;\n \n mod reexport {\n     pub use syntax::ast::{Name, Ident, NodeId};\n@@ -102,6 +103,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box needless_update::NeedlessUpdatePass);\n     reg.register_late_lint_pass(box no_effect::NoEffectPass);\n     reg.register_late_lint_pass(box map_clone::MapClonePass);\n+    reg.register_late_lint_pass(box temporary_assignment::TemporaryAssignmentPass);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         methods::OPTION_UNWRAP_USED,\n@@ -172,6 +174,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         ranges::RANGE_ZIP_WITH_LEN,\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n+        temporary_assignment::TEMPORARY_ASSIGNMENT,\n         types::BOX_VEC,\n         types::LET_UNIT_VALUE,\n         types::LINKEDLIST,"}, {"sha": "6cfcb711ff7affabbfd76fd2ebf4f25f32d19781", "filename": "src/temporary_assignment.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3322ffa8a048ef5369d3cdd914869fdf383473a4/src%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3322ffa8a048ef5369d3cdd914869fdf383473a4/src%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftemporary_assignment.rs?ref=3322ffa8a048ef5369d3cdd914869fdf383473a4", "patch": "@@ -0,0 +1,44 @@\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc_front::hir::{Expr, ExprAssign, ExprField, ExprStruct, ExprTup, ExprTupField};\n+\n+use utils::is_adjusted;\n+use utils::span_lint;\n+\n+declare_lint! {\n+    pub TEMPORARY_ASSIGNMENT,\n+    Warn,\n+    \"assignments to temporaries\"\n+}\n+\n+fn is_temporary(expr: &Expr) -> bool {\n+    match expr.node {\n+        ExprStruct(..) |\n+        ExprTup(..) => true,\n+        _ => false,\n+    }\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct TemporaryAssignmentPass;\n+\n+impl LintPass for TemporaryAssignmentPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(TEMPORARY_ASSIGNMENT)\n+    }\n+}\n+\n+impl LateLintPass for TemporaryAssignmentPass {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if let ExprAssign(ref target, _) = expr.node {\n+            match target.node {\n+                ExprField(ref base, _) | ExprTupField(ref base, _) => {\n+                    if is_temporary(base) && !is_adjusted(cx, base) {\n+                        span_lint(cx, TEMPORARY_ASSIGNMENT, expr.span,\n+                                  \"assignment to temporary\");\n+                    }\n+                }\n+                _ => ()\n+            }\n+        }\n+    }\n+}"}, {"sha": "b1c2b990024f2a8e165b63965e079f2edb930f28", "filename": "tests/compile-fail/temporary_assignment.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3322ffa8a048ef5369d3cdd914869fdf383473a4/tests%2Fcompile-fail%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3322ffa8a048ef5369d3cdd914869fdf383473a4/tests%2Fcompile-fail%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftemporary_assignment.rs?ref=3322ffa8a048ef5369d3cdd914869fdf383473a4", "patch": "@@ -0,0 +1,36 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(temporary_assignment)]\n+\n+use std::ops::{Deref, DerefMut};\n+\n+struct Struct {\n+    field: i32\n+}\n+\n+struct Wrapper<'a> {\n+    inner: &'a mut Struct\n+}\n+\n+impl<'a> Deref for Wrapper<'a> {\n+    type Target = Struct;\n+    fn deref(&self) -> &Struct { self.inner }\n+}\n+\n+impl<'a> DerefMut for Wrapper<'a> {\n+    fn deref_mut(&mut self) -> &mut Struct { self.inner }\n+}\n+\n+fn main() {\n+    let mut s = Struct { field: 0 };\n+    let mut t = (0, 0);\n+\n+    Struct { field: 0 }.field = 1; //~ERROR assignment to temporary\n+    (0, 0).0 = 1; //~ERROR assignment to temporary\n+\n+    // no error\n+    s.field = 1;\n+    t.0 = 1;\n+    Wrapper { inner: &mut s }.field = 1;\n+}"}]}