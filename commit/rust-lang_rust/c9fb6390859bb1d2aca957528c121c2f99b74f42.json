{"sha": "c9fb6390859bb1d2aca957528c121c2f99b74f42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZmI2MzkwODU5YmIxZDJhY2E5NTc1MjhjMTIxYzJmOTliNzRmNDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-15T14:05:05Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T23:29:29Z"}, "message": "let_chains: Adjust lowering logic in lieu of ::Let.", "tree": {"sha": "2216e620b895b1f9839b5e39421d55b903b3a80c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2216e620b895b1f9839b5e39421d55b903b3a80c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9fb6390859bb1d2aca957528c121c2f99b74f42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9fb6390859bb1d2aca957528c121c2f99b74f42", "html_url": "https://github.com/rust-lang/rust/commit/c9fb6390859bb1d2aca957528c121c2f99b74f42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9fb6390859bb1d2aca957528c121c2f99b74f42/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7b00f5807dc02f9990c649572d76a91a850110c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b00f5807dc02f9990c649572d76a91a850110c", "html_url": "https://github.com/rust-lang/rust/commit/a7b00f5807dc02f9990c649572d76a91a850110c"}], "stats": {"total": 244, "additions": 106, "deletions": 138}, "files": [{"sha": "a684816c6defe1a57830524ae9edb4a910bf1625", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 106, "deletions": 138, "changes": 244, "blob_url": "https://github.com/rust-lang/rust/blob/c9fb6390859bb1d2aca957528c121c2f99b74f42/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9fb6390859bb1d2aca957528c121c2f99b74f42/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c9fb6390859bb1d2aca957528c121c2f99b74f42", "patch": "@@ -4344,53 +4344,120 @@ impl<'a> LoweringContext<'a> {\n                 let ohs = P(self.lower_expr(ohs));\n                 hir::ExprKind::AddrOf(m, ohs)\n             }\n-            // More complicated than you might expect because the else branch\n-            // might be `if let`.\n+            ExprKind::Let(..) => {\n+                // This should have been caught `ast_validation`!\n+                self.sess.span_err(e.span, \"`let` expressions only supported in `if`\");\n+                // ^-- FIXME(53667): Change to `delay_span_bug` when let_chains handled in lowering.\n+                self.sess.abort_if_errors();\n+                hir::ExprKind::Err\n+            }\n+            // FIXME(#53667): handle lowering of && and parens.\n             ExprKind::If(ref cond, ref then, ref else_opt) => {\n-                // `true => then`:\n-                let then_pat = self.pat_bool(e.span, true);\n-                let then_blk = self.lower_block(then, false);\n-                let then_expr = self.expr_block(then_blk, ThinVec::new());\n-                let then_arm = self.arm(hir_vec![then_pat], P(then_expr));\n-\n                 // `_ => else_block` where `else_block` is `{}` if there's `None`:\n                 let else_pat = self.pat_wild(e.span);\n-                let else_expr = match else_opt {\n-                    None => self.expr_block_empty(e.span),\n-                    Some(els) => match els.node {\n-                        ExprKind::IfLet(..) => {\n-                            // Wrap the `if let` expr in a block.\n-                            let els = self.lower_expr(els);\n-                            let blk = self.block_all(els.span, hir_vec![], Some(P(els)));\n-                            self.expr_block(P(blk), ThinVec::new())\n-                        }\n-                        _ => self.lower_expr(els),\n-                    }\n+                let (else_expr, contains_else_clause) = match else_opt {\n+                    None => (self.expr_block_empty(e.span), false),\n+                    Some(els) => (self.lower_expr(els), true),\n                 };\n                 let else_arm = self.arm(hir_vec![else_pat], P(else_expr));\n \n-                // Lower condition:\n-                let span_block = self.mark_span_with_reason(IfTemporary, cond.span, None);\n-                let cond = self.lower_expr(cond);\n-                // Wrap in a construct equivalent to `{ let _t = $cond; _t }` to preserve drop\n-                // semantics since `if cond { ... }` don't let temporaries live outside of `cond`.\n-                let cond = self.expr_drop_temps(span_block, P(cond), ThinVec::new());\n+                // Handle then + scrutinee:\n+                let then_blk = self.lower_block(then, false);\n+                let then_expr = self.expr_block(then_blk, ThinVec::new());\n+                let (then_pats, scrutinee, desugar) = match cond.node {\n+                    // `<pat> => <then>`\n+                    ExprKind::Let(ref pats, ref scrutinee) => {\n+                        let scrutinee = self.lower_expr(scrutinee);\n+                        let pats = pats.iter().map(|pat| self.lower_pat(pat)).collect();\n+                        let desugar = hir::MatchSource::IfLetDesugar { contains_else_clause };\n+                        (pats, scrutinee, desugar)\n+                    }\n+                    // `true => then`:\n+                    _ => {\n+                        // Lower condition:\n+                        let cond = self.lower_expr(cond);\n+                        // Wrap in a construct equivalent to `{ let _t = $cond; _t }`\n+                        // to preserve drop semantics since `if cond { ... }`\n+                        // don't let temporaries live outside of `cond`.\n+                        let span_block = self.mark_span_with_reason(IfTemporary, cond.span, None);\n+                        // Wrap in a construct equivalent to `{ let _t = $cond; _t }`\n+                        // to preserve drop semantics since `if cond { ... }` does not\n+                        // let temporaries live outside of `cond`.\n+                        let cond = self.expr_drop_temps(span_block, P(cond), ThinVec::new());\n+\n+                        let desugar = hir::MatchSource::IfDesugar { contains_else_clause };\n+                        let pats = hir_vec![self.pat_bool(e.span, true)];\n+                        (pats, cond, desugar)\n+                    }\n+                };\n+                let then_arm = self.arm(then_pats, P(then_expr));\n \n-                hir::ExprKind::Match(\n-                    P(cond),\n-                    vec![then_arm, else_arm].into(),\n-                    hir::MatchSource::IfDesugar {\n-                        contains_else_clause: else_opt.is_some()\n-                    },\n-                )\n+                hir::ExprKind::Match(P(scrutinee), vec![then_arm, else_arm].into(), desugar)\n+            }\n+            // FIXME(#53667): handle lowering of && and parens.\n+            ExprKind::While(ref cond, ref body, opt_label) => {\n+                // Desugar `ExprWhileLet`\n+                // from: `[opt_ident]: while let <pat> = <sub_expr> <body>`\n+                if let ExprKind::Let(ref pats, ref sub_expr) = cond.node {\n+                    // to:\n+                    //\n+                    //   [opt_ident]: loop {\n+                    //     match <sub_expr> {\n+                    //       <pat> => <body>,\n+                    //       _ => break\n+                    //     }\n+                    //   }\n+\n+                    // Note that the block AND the condition are evaluated in the loop scope.\n+                    // This is done to allow `break` from inside the condition of the loop.\n+                    let (body, break_expr, sub_expr) = self.with_loop_scope(e.id, |this| {\n+                        (\n+                            this.lower_block(body, false),\n+                            this.expr_break(e.span, ThinVec::new()),\n+                            this.with_loop_condition_scope(|this| P(this.lower_expr(sub_expr))),\n+                        )\n+                    });\n+\n+                    // `<pat> => <body>`\n+                    let pat_arm = {\n+                        let body_expr = P(self.expr_block(body, ThinVec::new()));\n+                        let pats = pats.iter().map(|pat| self.lower_pat(pat)).collect();\n+                        self.arm(pats, body_expr)\n+                    };\n+\n+                    // `_ => break`\n+                    let break_arm = {\n+                        let pat_under = self.pat_wild(e.span);\n+                        self.arm(hir_vec![pat_under], break_expr)\n+                    };\n+\n+                    // `match <sub_expr> { ... }`\n+                    let arms = hir_vec![pat_arm, break_arm];\n+                    let match_expr = self.expr(\n+                        sub_expr.span,\n+                        hir::ExprKind::Match(sub_expr, arms, hir::MatchSource::WhileLetDesugar),\n+                        ThinVec::new(),\n+                    );\n+\n+                    // `[opt_ident]: loop { ... }`\n+                    let loop_block = P(self.block_expr(P(match_expr)));\n+                    let loop_expr = hir::ExprKind::Loop(\n+                        loop_block,\n+                        self.lower_label(opt_label),\n+                        hir::LoopSource::WhileLet,\n+                    );\n+                    // Add attributes to the outer returned expr node.\n+                    loop_expr\n+                } else {\n+                    self.with_loop_scope(e.id, |this| {\n+                        hir::ExprKind::While(\n+                            this.with_loop_condition_scope(|this| P(this.lower_expr(cond))),\n+                            this.lower_block(body, false),\n+                            this.lower_label(opt_label),\n+                        )\n+                    })\n+                }\n             }\n-            ExprKind::While(ref cond, ref body, opt_label) => self.with_loop_scope(e.id, |this| {\n-                hir::ExprKind::While(\n-                    this.with_loop_condition_scope(|this| P(this.lower_expr(cond))),\n-                    this.lower_block(body, false),\n-                    this.lower_label(opt_label),\n-                )\n-            }),\n             ExprKind::Loop(ref body, opt_label) => self.with_loop_scope(e.id, |this| {\n                 hir::ExprKind::Loop(\n                     this.lower_block(body, false),\n@@ -4703,105 +4770,6 @@ impl<'a> LoweringContext<'a> {\n \n             ExprKind::Err => hir::ExprKind::Err,\n \n-            // Desugar `ExprIfLet`\n-            // from: `if let <pat> = <sub_expr> <body> [<else_opt>]`\n-            ExprKind::IfLet(ref pats, ref sub_expr, ref body, ref else_opt) => {\n-                // to:\n-                //\n-                //   match <sub_expr> {\n-                //     <pat> => <body>,\n-                //     _ => [<else_opt> | ()]\n-                //   }\n-\n-                let mut arms = vec![];\n-\n-                // `<pat> => <body>`\n-                {\n-                    let body = self.lower_block(body, false);\n-                    let body_expr = P(self.expr_block(body, ThinVec::new()));\n-                    let pats = pats.iter().map(|pat| self.lower_pat(pat)).collect();\n-                    arms.push(self.arm(pats, body_expr));\n-                }\n-\n-                // _ => [<else_opt>|{}]\n-                {\n-                    let wildcard_arm: Option<&Expr> = else_opt.as_ref().map(|p| &**p);\n-                    let wildcard_pattern = self.pat_wild(e.span);\n-                    let body = if let Some(else_expr) = wildcard_arm {\n-                        self.lower_expr(else_expr)\n-                    } else {\n-                        self.expr_block_empty(e.span)\n-                    };\n-                    arms.push(self.arm(hir_vec![wildcard_pattern], P(body)));\n-                }\n-\n-                let contains_else_clause = else_opt.is_some();\n-\n-                let sub_expr = P(self.lower_expr(sub_expr));\n-\n-                hir::ExprKind::Match(\n-                    sub_expr,\n-                    arms.into(),\n-                    hir::MatchSource::IfLetDesugar {\n-                        contains_else_clause,\n-                    },\n-                )\n-            }\n-\n-            // Desugar `ExprWhileLet`\n-            // from: `[opt_ident]: while let <pat> = <sub_expr> <body>`\n-            ExprKind::WhileLet(ref pats, ref sub_expr, ref body, opt_label) => {\n-                // to:\n-                //\n-                //   [opt_ident]: loop {\n-                //     match <sub_expr> {\n-                //       <pat> => <body>,\n-                //       _ => break\n-                //     }\n-                //   }\n-\n-                // Note that the block AND the condition are evaluated in the loop scope.\n-                // This is done to allow `break` from inside the condition of the loop.\n-                let (body, break_expr, sub_expr) = self.with_loop_scope(e.id, |this| {\n-                    (\n-                        this.lower_block(body, false),\n-                        this.expr_break(e.span, ThinVec::new()),\n-                        this.with_loop_condition_scope(|this| P(this.lower_expr(sub_expr))),\n-                    )\n-                });\n-\n-                // `<pat> => <body>`\n-                let pat_arm = {\n-                    let body_expr = P(self.expr_block(body, ThinVec::new()));\n-                    let pats = pats.iter().map(|pat| self.lower_pat(pat)).collect();\n-                    self.arm(pats, body_expr)\n-                };\n-\n-                // `_ => break`\n-                let break_arm = {\n-                    let pat_under = self.pat_wild(e.span);\n-                    self.arm(hir_vec![pat_under], break_expr)\n-                };\n-\n-                // `match <sub_expr> { ... }`\n-                let arms = hir_vec![pat_arm, break_arm];\n-                let match_expr = self.expr(\n-                    sub_expr.span,\n-                    hir::ExprKind::Match(sub_expr, arms, hir::MatchSource::WhileLetDesugar),\n-                    ThinVec::new(),\n-                );\n-\n-                // `[opt_ident]: loop { ... }`\n-                let loop_block = P(self.block_expr(P(match_expr)));\n-                let loop_expr = hir::ExprKind::Loop(\n-                    loop_block,\n-                    self.lower_label(opt_label),\n-                    hir::LoopSource::WhileLet,\n-                );\n-                // Add attributes to the outer returned expr node.\n-                loop_expr\n-            }\n-\n             // Desugar `ExprForLoop`\n             // from: `[opt_ident]: for <pat> in <head> <body>`\n             ExprKind::ForLoop(ref pat, ref head, ref body, opt_label) => {"}]}