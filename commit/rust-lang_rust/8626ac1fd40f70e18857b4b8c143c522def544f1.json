{"sha": "8626ac1fd40f70e18857b4b8c143c522def544f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MjZhYzFmZDQwZjcwZTE4ODU3YjRiOGMxNDNjNTIyZGVmNTQ0ZjE=", "commit": {"author": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-10-22T21:16:58Z"}, "committer": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-10-26T22:57:55Z"}, "message": "Fixes for code review comments\n\n* remove weird infinite loops from compile-tests\n* remove call to Option::unwrap\n* in the lint message, show while-let loop rewritten as for loop", "tree": {"sha": "156df3a6d21036e1bcb2c4c1bb99bc3ccff91a3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/156df3a6d21036e1bcb2c4c1bb99bc3ccff91a3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8626ac1fd40f70e18857b4b8c143c522def544f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8626ac1fd40f70e18857b4b8c143c522def544f1", "html_url": "https://github.com/rust-lang/rust/commit/8626ac1fd40f70e18857b4b8c143c522def544f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8626ac1fd40f70e18857b4b8c143c522def544f1/comments", "author": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "659e7c1d5efa79394695c62375ef6860ab37aa67", "url": "https://api.github.com/repos/rust-lang/rust/commits/659e7c1d5efa79394695c62375ef6860ab37aa67", "html_url": "https://github.com/rust-lang/rust/commit/659e7c1d5efa79394695c62375ef6860ab37aa67"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "bf64ec5b1326b1ecde21bf062accee6cb53dcb7a", "filename": "src/loops.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8626ac1fd40f70e18857b4b8c143c522def544f1/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8626ac1fd40f70e18857b4b8c143c522def544f1/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=8626ac1fd40f70e18857b4b8c143c522def544f1", "patch": "@@ -231,17 +231,26 @@ impl LateLintPass for LoopsPass {\n                 }\n             }\n         }\n-        if let ExprMatch(ref expr, ref arms, MatchSource::WhileLetDesugar) = expr.node {\n+        if let ExprMatch(ref match_expr, ref arms, MatchSource::WhileLetDesugar) = expr.node {\n             let body = &arms[0].body;\n             let pat = &arms[0].pats[0].node;\n-            if let (&PatEnum(ref path, _), &ExprMethodCall(method_name, _, ref args)) = (pat, &expr.node) {\n-                let iterator_def_id = var_def_id(cx, &args[0]);\n-                if method_name.node.as_str() == \"next\" &&\n-                        match_trait_method(cx, expr, &[\"core\", \"iter\", \"Iterator\"]) &&\n-                        path.segments.last().unwrap().identifier.name.as_str() == \"Some\" &&\n-                        !var_used(body, iterator_def_id, cx) {\n-                    span_lint(cx, WHILE_LET_ON_ITERATOR, expr.span,\n-                              \"this loop could be written as a `for` loop\");\n+            if let (&PatEnum(ref path, Some(ref pat_args)),\n+                    &ExprMethodCall(method_name, _, ref method_args)) =\n+                        (pat, &match_expr.node) {\n+                let iterator_def_id = var_def_id(cx, &method_args[0]);\n+                if let Some(lhs_constructor) = path.segments.last() {\n+                    if method_name.node.as_str() == \"next\" &&\n+                            match_trait_method(cx, match_expr, &[\"core\", \"iter\", \"Iterator\"]) &&\n+                            lhs_constructor.identifier.name.as_str() == \"Some\" &&\n+                            !var_used(body, iterator_def_id, cx) {\n+                        let iterator = snippet(cx, method_args[0].span, \"_\");\n+                        let loop_var = snippet(cx, pat_args[0].span, \"_\");\n+                        span_help_and_lint(cx, WHILE_LET_ON_ITERATOR, expr.span,\n+                                           \"this loop could be written as a `for` loop\",\n+                                           &format!(\"try\\nfor {} in {} {{...}}\",\n+                                                    loop_var,\n+                                                    iterator));\n+                    }\n                 }\n             }\n         }"}, {"sha": "334ddd346a2410986a39d1619503d33a6f5bebb1", "filename": "tests/compile-fail/while_loop.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8626ac1fd40f70e18857b4b8c143c522def544f1/tests%2Fcompile-fail%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8626ac1fd40f70e18857b4b8c143c522def544f1/tests%2Fcompile-fail%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwhile_loop.rs?ref=8626ac1fd40f70e18857b4b8c143c522def544f1", "patch": "@@ -54,20 +54,24 @@ fn main() {\n         println!(\"{}\", x);\n     }\n \n-\n-    while let Option::Some(x) = (1..20).next() { //~ERROR this loop could be written as a `for` loop\n+    let mut iter = 1..20;\n+    while let Option::Some(x) = iter.next() { //~ERROR this loop could be written as a `for` loop\n         println!(\"{}\", x);\n     }\n \n-    while let Some(x) = (1..20).next() { //~ERROR this loop could be written as a `for` loop\n+    let mut iter = 1..20;\n+    while let Some(x) = iter.next() { //~ERROR this loop could be written as a `for` loop\n         println!(\"{}\", x);\n     }\n \n-    while let Some(_) = (1..20).next() {} //~ERROR this loop could be written as a `for` loop\n+    let mut iter = 1..20;\n+    while let Some(_) = iter.next() {} //~ERROR this loop could be written as a `for` loop\n \n-    while let None = (1..20).next() {} // this is fine (if nonsensical)\n+    let mut iter = 1..20;\n+    while let None = iter.next() {} // this is fine (if nonsensical)\n \n-    if let Some(x) = (1..20).next() { // also fine\n+    let mut iter = 1..20;\n+    if let Some(x) = iter.next() { // also fine\n         println!(\"{}\", x)\n     }\n \n@@ -76,10 +80,6 @@ fn main() {\n     while let Some(x) = iter.next() {\n         println!(\"next: {:?}\", iter.next())\n     }\n-\n-    // but this should:\n-    let mut iter2 = 1u32..20;\n-    while let Some(x) = iter2.next() { } //~ERROR this loop could be written as a `for` loop\n }\n \n // regression test (#360)"}]}