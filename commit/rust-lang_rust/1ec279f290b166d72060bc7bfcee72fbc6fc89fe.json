{"sha": "1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYzI3OWYyOTBiMTY2ZDcyMDYwYmM3YmZjZWU3MmZiYzZmYzg5ZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-30T08:42:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-30T08:42:25Z"}, "message": "Auto merge of #801 - RalfJung:num_cpus, r=RalfJung\n\nsupport num_cpus crate and test that\n\nAlso make some magic numbers into proper global constants.", "tree": {"sha": "368932edc4e259ea8a60676ab115c9249f92a12f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/368932edc4e259ea8a60676ab115c9249f92a12f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "html_url": "https://github.com/rust-lang/rust/commit/1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1522a47dce9ef791dd415a7b48bd03bc68fb0aa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7", "html_url": "https://github.com/rust-lang/rust/commit/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7"}, {"sha": "019ad4bab456bf107cba54dc8c396fbdd6d2bae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/019ad4bab456bf107cba54dc8c396fbdd6d2bae0", "html_url": "https://github.com/rust-lang/rust/commit/019ad4bab456bf107cba54dc8c396fbdd6d2bae0"}], "stats": {"total": 93, "additions": 66, "deletions": 27}, "files": [{"sha": "9c9e77abfed37b9183f6e4cb73ecf66e04da6df1", "filename": "src/fn_call.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "patch": "@@ -622,11 +622,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let name = this.read_scalar(args[0])?.to_i32()?;\n \n                 trace!(\"sysconf() called with name {}\", name);\n-                // Cache the sysconf integers via Miri's global cache.\n+                // TODO: Cache the sysconf integers via Miri's global cache.\n                 let paths = &[\n-                    (&[\"libc\", \"_SC_PAGESIZE\"], Scalar::from_int(4096, dest.layout.size)),\n+                    (&[\"libc\", \"_SC_PAGESIZE\"], Scalar::from_int(PAGE_SIZE, dest.layout.size)),\n                     (&[\"libc\", \"_SC_GETPW_R_SIZE_MAX\"], Scalar::from_int(-1, dest.layout.size)),\n-                    (&[\"libc\", \"_SC_NPROCESSORS_ONLN\"], Scalar::from_int(1, dest.layout.size)),\n+                    (&[\"libc\", \"_SC_NPROCESSORS_ONLN\"], Scalar::from_int(NUM_CPUS, dest.layout.size)),\n                 ];\n                 let mut result = None;\n                 for &(path, path_value) in paths {\n@@ -648,6 +648,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n \n+            \"sched_getaffinity\" => {\n+                // Return an error; `num_cpus` then falls back to `sysconf`.\n+                this.write_scalar(Scalar::from_int(-1, dest.layout.size), dest)?;\n+            }\n+\n             \"isatty\" => {\n                 this.write_null(dest)?;\n             }\n@@ -722,14 +727,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // Second argument is where we are supposed to write the stack size.\n                 let ptr = this.deref_operand(args[1])?;\n                 // Just any address.\n-                let stack_addr = Scalar::from_int(0x80000, args[1].layout.size);\n+                let stack_addr = Scalar::from_uint(STACK_ADDR, args[1].layout.size);\n                 this.write_scalar(stack_addr, ptr.into())?;\n                 // Return success (`0`).\n                 this.write_null(dest)?;\n             }\n             \"pthread_get_stackaddr_np\" => {\n                 // Just any address.\n-                let stack_addr = Scalar::from_int(0x80000, dest.layout.size);\n+                let stack_addr = Scalar::from_uint(STACK_ADDR, dest.layout.size);\n                 this.write_scalar(stack_addr, dest)?;\n             }\n \n@@ -838,14 +843,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // Initialize with `0`.\n                 this.memory_mut().get_mut(system_info_ptr.alloc_id)?\n                     .write_repeat(tcx, system_info_ptr, 0, system_info.layout.size)?;\n-                // Set number of processors to `1`.\n+                // Set number of processors.\n                 let dword_size = Size::from_bytes(4);\n                 let offset = 2*dword_size + 3*tcx.pointer_size();\n                 this.memory_mut().get_mut(system_info_ptr.alloc_id)?\n                     .write_scalar(\n                         tcx,\n                         system_info_ptr.offset(offset, tcx)?,\n-                        Scalar::from_int(1, dword_size).into(),\n+                        Scalar::from_int(NUM_CPUS, dword_size).into(),\n                         dword_size,\n                     )?;\n             }"}, {"sha": "7fd48defda13c3d48379fc1b46ffc04d8bc498f2", "filename": "src/intptrcast.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "patch": "@@ -6,8 +6,7 @@ use rustc::mir::interpret::{AllocId, Pointer, InterpResult};\n use rustc_mir::interpret::Memory;\n use rustc_target::abi::Size;\n \n-use crate::stacked_borrows::Tag;\n-use crate::Evaluator;\n+use crate::{Evaluator, Tag, STACK_ADDR};\n \n pub type MemoryExtra = RefCell<GlobalState>;\n \n@@ -27,11 +26,10 @@ pub struct GlobalState {\n }\n \n impl Default for GlobalState {\n-    // FIXME: Query the page size in the future\n     fn default() -> Self {\n         GlobalState {\n             int_to_ptr_map: Vec::default(),\n-            next_base_addr: 2u64.pow(16)\n+            next_base_addr: STACK_ADDR,\n         }\n     }\n }"}, {"sha": "0e4a9c4ccc37c0724ead535f1345d9cc8c5ed993", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "patch": "@@ -37,7 +37,10 @@ pub use crate::range_map::RangeMap;\n pub use crate::helpers::{EvalContextExt as HelpersEvalContextExt};\n pub use crate::mono_hash_map::MonoHashMap;\n pub use crate::stacked_borrows::{EvalContextExt as StackedBorEvalContextExt, Tag, Permission, Stack, Stacks, Item};\n-pub use crate::machine::{MemoryExtra, AllocExtra, MiriMemoryKind, Evaluator, MiriEvalContext, MiriEvalContextExt};\n+pub use crate::machine::{\n+    PAGE_SIZE, STACK_ADDR, NUM_CPUS,\n+    MemoryExtra, AllocExtra, MiriMemoryKind, Evaluator, MiriEvalContext, MiriEvalContextExt,\n+};\n pub use crate::eval::{eval_main, create_ecx, MiriConfig};\n \n /// Insert rustc arguments at the beginning of the argument list that Miri wants to be"}, {"sha": "485286ea400ddb5a3a88ab93043fe1d128b12bc3", "filename": "src/machine.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "patch": "@@ -13,6 +13,11 @@ use rustc::mir;\n \n use crate::*;\n \n+// Some global facts about the emulated machine.\n+pub const PAGE_SIZE: u64 = 4*1024; // FIXME: adjust to target architecture\n+pub const STACK_ADDR: u64 = 16*PAGE_SIZE; // not really about the \"stack\", but where we start assigning integer addresses to allocations\n+pub const NUM_CPUS: u64 = 1;\n+\n /// Extra memory kinds\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n pub enum MiriMemoryKind {"}, {"sha": "8343832886a6b3adc8aa7ce1d04dace1d925f172", "filename": "test-cargo-miri/Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/test-cargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/test-cargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.lock?ref=1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "patch": "@@ -29,6 +29,7 @@ name = \"cargo-miri-test\"\n version = \"0.1.0\"\n dependencies = [\n  \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -66,6 +67,14 @@ name = \"libc\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"num_cpus\"\n+version = \"1.10.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"ppv-lite86\"\n version = \"0.2.5\"\n@@ -148,6 +157,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum getrandom 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8d1dffef07351aafe6ef177e4dd2b8dcf503e6bc765dea3b0de9ed149a3db1ec\"\n \"checksum lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc5729f27f159ddd61f4df6228e827e86643d4d3e7c32183cb30a1c08f604a14\"\n \"checksum libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6281b86796ba5e4366000be6e9e18bf35580adf9e63fbe2294aadb587613a319\"\n+\"checksum num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcef43580c035376c0705c42792c294b66974abbfd2789b511784023f71f3273\"\n \"checksum ppv-lite86 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3cbf9f658cdb5000fcf6f362b8ea2ba154b9f146a61c7a20d647034c6b6561b\"\n \"checksum rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d47eab0e83d9693d40f825f86948aa16eff6750ead4bdffc4ab95b8b3a7f052c\"\n \"checksum rand_chacha 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e193067942ef6f485a349a113329140d0ab9e2168ce92274499bb0e9a4190d9d\""}, {"sha": "3abb437049f0f0a710ca9c2b31660992f9e83da2", "filename": "test-cargo-miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/test-cargo-miri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/test-cargo-miri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.toml?ref=1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "patch": "@@ -9,3 +9,4 @@ byteorder = \"1.0\"\n \n [dev-dependencies]\n rand = { version = \"0.7\", features = [\"small_rng\"] }\n+num_cpus = \"1.10.1\""}, {"sha": "73515c74e401030dd14a4169a984662121622ce2", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "patch": "@@ -8,7 +8,7 @@\n import sys, subprocess, os\n \n def fail(msg):\n-    print(\"TEST FAIL: {}\".format(msg))\n+    print(\"\\nTEST FAIL: {}\".format(msg))\n     sys.exit(1)\n \n def cargo_miri(cmd):\n@@ -57,7 +57,7 @@ def test_cargo_miri_test():\n         \"test.stdout.ref\", \"test.stderr.ref\"\n     )\n     test(\"cargo miri test (with filter)\",\n-        cargo_miri(\"test\") + [\"--\", \"--\", \"impl\"],\n+        cargo_miri(\"test\") + [\"--\", \"--\", \"le1\"],\n         \"test.stdout.ref2\", \"test.stderr.ref\"\n     )\n \n@@ -66,5 +66,5 @@ def test_cargo_miri_test():\n test_cargo_miri_run()\n test_cargo_miri_test()\n \n-print(\"TEST SUCCESSFUL!\")\n+print(\"\\nTEST SUCCESSFUL!\")\n sys.exit(0)"}, {"sha": "d3663ec849d36dbc3c69d955347b9e98a309d217", "filename": "test-cargo-miri/src/main.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/test-cargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/test-cargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fsrc%2Fmain.rs?ref=1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "patch": "@@ -1,10 +1,13 @@\n use byteorder::{BigEndian, ByteOrder};\n \n fn main() {\n+    // Exercise external crate, printing to stdout.\n     let buf = &[1,2,3,4];\n     let n = <BigEndian as ByteOrder>::read_u32(buf);\n     assert_eq!(n, 0x01020304);\n     println!(\"{:#010x}\", n);\n+\n+    // Access program arguments, printing to stderr.\n     for arg in std::env::args() {\n         eprintln!(\"{}\", arg);\n     }"}, {"sha": "c2257e68e256ca819ab2b2654a09e79e4da54cbc", "filename": "test-cargo-miri/test.stdout.ref", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/test-cargo-miri%2Ftest.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/test-cargo-miri%2Ftest.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref?ref=1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "patch": "@@ -5,9 +5,11 @@ test test::rng ... ok\n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n \n \n-running 2 tests\n+running 4 tests\n test entropy_rng ... ok\n-test simple ... ok\n+test num_cpus ... ok\n+test simple1 ... ok\n+test simple2 ... ok\n \n-test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n "}, {"sha": "a6f6e915e0e85441d731577b8d9f097a9c22e9d4", "filename": "test-cargo-miri/test.stdout.ref2", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/test-cargo-miri%2Ftest.stdout.ref2", "raw_url": "https://github.com/rust-lang/rust/raw/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/test-cargo-miri%2Ftest.stdout.ref2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref2?ref=1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "patch": "@@ -5,7 +5,7 @@ test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n \n \n running 1 test\n-test simple ... ok\n+test simple1 ... ok\n \n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 3 filtered out\n "}, {"sha": "cfbe3f6d7fb66da4066e1545464c29a9507b9bb7", "filename": "test-cargo-miri/tests/test.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/test-cargo-miri%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec279f290b166d72060bc7bfcee72fbc6fc89fe/test-cargo-miri%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftests%2Ftest.rs?ref=1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "patch": "@@ -3,13 +3,28 @@ use rand::{SeedableRng, Rng, rngs::SmallRng};\n // Having more than 1 test does seem to make a difference\n // (i.e., this calls ptr::swap which having just one test does not).\n #[test]\n-fn simple() {\n+fn simple1() {\n     assert_eq!(4, 4);\n }\n \n+#[test]\n+fn simple2() {\n+    assert_ne!(42, 24);\n+}\n+\n+// A test that won't work on miri (tests disabling tests)\n+#[cfg(not(miri))]\n+#[test]\n+fn does_not_work_on_miri() {\n+    let x = 0u8;\n+    assert!(&x as *const _ as usize % 4 < 4);\n+}\n+\n+// We also use this to test some external crates, that we cannot depend on in the compiletest suite.\n+\n #[test]\n fn entropy_rng() {\n-    // Use this opportunity to test querying the RNG (needs an external crate, hence tested here and not in the compiletest suite)\n+    // Try seeding with \"real\" entropy.\n     let mut rng = SmallRng::from_entropy();\n     let _val = rng.gen::<i32>();\n     let _val = rng.gen::<isize>();\n@@ -22,10 +37,7 @@ fn entropy_rng() {\n     let _val = rng.gen::<i128>();\n }\n \n-// A test that won't work on miri\n-#[cfg(not(miri))]\n #[test]\n-fn does_not_work_on_miri() {\n-    let x = 0u8;\n-    assert!(&x as *const _ as usize % 4 < 4);\n+fn num_cpus() {\n+    assert_eq!(num_cpus::get(), 1);\n }"}]}