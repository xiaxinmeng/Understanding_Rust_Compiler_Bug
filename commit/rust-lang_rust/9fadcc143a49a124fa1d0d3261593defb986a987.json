{"sha": "9fadcc143a49a124fa1d0d3261593defb986a987", "node_id": "C_kwDOAAsO6NoAKDlmYWRjYzE0M2E0OWExMjRmYTFkMGQzMjYxNTkzZGVmYjk4NmE5ODc", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-04-10T16:46:12Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-04-12T22:50:10Z"}, "message": "Special-case item attributes in the suggestion output", "tree": {"sha": "893e65c8134b89447a09716b0d0c34979a94cc22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/893e65c8134b89447a09716b0d0c34979a94cc22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fadcc143a49a124fa1d0d3261593defb986a987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fadcc143a49a124fa1d0d3261593defb986a987", "html_url": "https://github.com/rust-lang/rust/commit/9fadcc143a49a124fa1d0d3261593defb986a987", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fadcc143a49a124fa1d0d3261593defb986a987/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b40aa5eb484b31c9a82c1b1a0f414840477b9ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b40aa5eb484b31c9a82c1b1a0f414840477b9ea", "html_url": "https://github.com/rust-lang/rust/commit/5b40aa5eb484b31c9a82c1b1a0f414840477b9ea"}], "stats": {"total": 198, "additions": 10, "deletions": 188}, "files": [{"sha": "fe44799efdb6a946b9daa54c714e58a55c1a3513", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -1886,6 +1886,7 @@ impl EmitterWriter {\n             }\n             let mut unhighlighted_lines = Vec::new();\n             let mut last_pos = 0;\n+            let mut is_item_attribute = false;\n             for (line_pos, (line, highlight_parts)) in lines.by_ref().zip(highlights).enumerate() {\n                 last_pos = line_pos;\n                 debug!(%line_pos, %line, ?highlight_parts);\n@@ -1895,6 +1896,12 @@ impl EmitterWriter {\n                     unhighlighted_lines.push((line_pos, line));\n                     continue;\n                 }\n+                if highlight_parts.len() == 1\n+                    && line.trim().starts_with(\"#[\")\n+                    && line.trim().ends_with(']')\n+                {\n+                    is_item_attribute = true;\n+                }\n \n                 match unhighlighted_lines.len() {\n                     0 => (),\n@@ -1971,11 +1978,13 @@ impl EmitterWriter {\n                     is_multiline,\n                 )\n             }\n-            if let DisplaySuggestion::Add = show_code_change {\n+            if let DisplaySuggestion::Add = show_code_change && is_item_attribute {\n                 // The suggestion adds an entire line of code, ending on a newline, so we'll also\n                 // print the *following* line, to provide context of what we're advicing people to\n                 // do. Otherwise you would only see contextless code that can be confused for\n                 // already existing code, despite the colors and UI elements.\n+                // We special case `#[derive(_)]\\n` and other attribute suggestions, because those\n+                // are the ones where context is most useful.\n                 let file_lines = sm\n                     .span_to_lines(span.primary_span().unwrap().shrink_to_hi())\n                     .expect(\"span_to_lines failed when emitting suggestion\");"}, {"sha": "4787282f504a6c58959a7b9fdcaab60d943fe86a", "filename": "src/tools/clippy/tests/ui/crashes/ice-6252.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,13 +7,10 @@ LL |     _n: PhantomData,\n help: consider importing one of these items\n    |\n LL + use core::marker::PhantomData;\n-LL | trait TypeVal<T> {\n    |\n LL + use serde::__private::PhantomData;\n-LL | trait TypeVal<T> {\n    |\n LL + use std::marker::PhantomData;\n-LL | trait TypeVal<T> {\n    |\n \n error[E0412]: cannot find type `VAL` in this scope"}, {"sha": "583dd327d6a5d8856b2cae4eadd2efef217d9b82", "filename": "src/tools/clippy/tests/ui/new_without_default.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_without_default.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -14,7 +14,6 @@ LL +     fn default() -> Self {\n LL +         Self::new()\n LL +     }\n LL + }\n-LL | impl Foo {\n    |\n \n error: you should consider adding a `Default` implementation for `Bar`\n@@ -32,7 +31,6 @@ LL +     fn default() -> Self {\n LL +         Self::new()\n LL +     }\n LL + }\n-LL | impl Bar {\n    |\n \n error: you should consider adding a `Default` implementation for `LtKo<'c>`\n@@ -50,7 +48,6 @@ LL +     fn default() -> Self {\n LL +         Self::new()\n LL +     }\n LL + }\n-LL | impl<'c> LtKo<'c> {\n    |\n \n error: you should consider adding a `Default` implementation for `NewNotEqualToDerive`\n@@ -68,7 +65,6 @@ LL +     fn default() -> Self {\n LL +         Self::new()\n LL +     }\n LL + }\n-LL | impl NewNotEqualToDerive {\n    |\n \n error: you should consider adding a `Default` implementation for `FooGenerics<T>`\n@@ -86,7 +82,6 @@ LL +     fn default() -> Self {\n LL +         Self::new()\n LL +     }\n LL + }\n-LL | impl<T> FooGenerics<T> {\n    |\n \n error: you should consider adding a `Default` implementation for `BarGenerics<T>`\n@@ -104,7 +99,6 @@ LL +     fn default() -> Self {\n LL +         Self::new()\n LL +     }\n LL + }\n-LL | impl<T: Copy> BarGenerics<T> {\n    |\n \n error: you should consider adding a `Default` implementation for `Foo<T>`"}, {"sha": "b381b0680734f4a3b1c8fc126a89a474a5179b3c", "filename": "tests/ui/coherence/coherence_inherent.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fcoherence%2Fcoherence_inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fcoherence%2Fcoherence_inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence_inherent.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -8,7 +8,6 @@ LL |         s.the_fn();\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL +     use Lib::TheTrait;\n-LL |     use Lib::TheStruct;\n    |\n \n error: aborting due to previous error"}, {"sha": "7b6cb7d4390b42ae72ba7e41ce1e2069c06e9688", "filename": "tests/ui/coherence/coherence_inherent_cc.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -8,7 +8,6 @@ LL |         s.the_fn();\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL +     use coherence_inherent_cc_lib::TheTrait;\n-LL |     use coherence_inherent_cc_lib::TheStruct;\n    |\n \n error: aborting due to previous error"}, {"sha": "dc7d0c54fcc9add69193b01f1de5e39cbff0b9e8", "filename": "tests/ui/const-generics/generic_const_exprs/issue-94287.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94287.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -9,7 +9,6 @@ help: consider enabling this feature\n   --> $DIR/issue-94287.rs:1:1\n    |\n LL + #![feature(generic_const_exprs)]\n-LL | #![feature(generic_const_exprs)]\n    |\n \n error: aborting due to previous error"}, {"sha": "d70c8d0bfbf3497c4542a7d62d12186d7cd36d40", "filename": "tests/ui/const-generics/issues/issue-82956.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,16 +7,12 @@ LL |         let mut iter = IntoIter::new(self);\n help: consider importing one of these items\n    |\n LL + use std::array::IntoIter;\n-LL | pub struct ConstCheck<const CHECK: bool>;\n    |\n LL + use std::collections::binary_heap::IntoIter;\n-LL | pub struct ConstCheck<const CHECK: bool>;\n    |\n LL + use std::collections::btree_map::IntoIter;\n-LL | pub struct ConstCheck<const CHECK: bool>;\n    |\n LL + use std::collections::btree_set::IntoIter;\n-LL | pub struct ConstCheck<const CHECK: bool>;\n    |\n      and 8 other candidates\n "}, {"sha": "a0262f4c1e597c86e408f22ba49f4e8bd20c1fc1", "filename": "tests/ui/derived-errors/issue-31997-1.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fderived-errors%2Fissue-31997-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fderived-errors%2Fissue-31997-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderived-errors%2Fissue-31997-1.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |     let mut map = HashMap::new();\n help: consider importing this struct\n    |\n LL + use std::collections::HashMap;\n-LL | use std::io::prelude::*;\n    |\n \n error: aborting due to previous error"}, {"sha": "5c610f36322dca7d681e01f6740fd4a4b78b883a", "filename": "tests/ui/did_you_mean/issue-56028-there-is-an-enum-variant.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -25,16 +25,12 @@ LL | fn setup() -> Set { Set }\n help: consider importing one of these items\n    |\n LL + use AffixHeart::Set;\n-LL | enum PutDown { Set }\n    |\n LL + use CauseToBe::Set;\n-LL | enum PutDown { Set }\n    |\n LL + use Determine::Set;\n-LL | enum PutDown { Set }\n    |\n LL + use PutDown::Set;\n-LL | enum PutDown { Set }\n    |\n      and 3 other candidates\n "}, {"sha": "180172644402be756f864e97ac29021ea19b574a", "filename": "tests/ui/hygiene/globs.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fglobs.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -14,7 +14,6 @@ LL |         g();\n help: consider importing this function\n    |\n LL + use foo::f;\n-LL | mod foo {\n    |\n \n error[E0425]: cannot find function `g` in this scope\n@@ -41,7 +40,6 @@ LL |     f();\n help: consider importing this function\n    |\n LL + use bar::g;\n-LL | mod foo {\n    |\n \n error[E0425]: cannot find function `f` in this scope"}, {"sha": "96187b1c50161e21ea46f94c14f6c34e9fd6d538", "filename": "tests/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -11,7 +11,6 @@ LL |         Vec::new();\n help: consider importing this struct\n    |\n LL +     use std::vec::Vec;\n-LL |     pub macro m() { Vec::<i32>::new(); ().clone() }\n    |\n \n error[E0599]: no method named `clone` found for unit type `()` in the current scope\n@@ -28,7 +27,6 @@ LL |         ().clone()\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL +     use std::clone::Clone;\n-LL |     pub macro m() { Vec::<i32>::new(); ().clone() }\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "f303534c709fc600d6c5ade959d576c41dc105cc", "filename": "tests/ui/hygiene/trait_items.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fhygiene%2Ftrait_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fhygiene%2Ftrait_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Ftrait_items.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -15,7 +15,6 @@ LL |     pub macro m() { ().f() }\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL +     use foo::T;\n-LL |     use foo::*;\n    |\n \n error: aborting due to previous error"}, {"sha": "160cc044078ed6debbd927e96527b954c55cd548", "filename": "tests/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -8,16 +8,12 @@ LL |     1u32.method();\n help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n    |\n LL + use foo::Bar;\n-LL | extern crate no_method_suggested_traits;\n    |\n LL + use no_method_suggested_traits::Reexported;\n-LL | extern crate no_method_suggested_traits;\n    |\n LL + use no_method_suggested_traits::foo::PubPub;\n-LL | extern crate no_method_suggested_traits;\n    |\n LL + use no_method_suggested_traits::qux::PrivPub;\n-LL | extern crate no_method_suggested_traits;\n    |\n \n error[E0599]: no method named `method` found for struct `Rc<&mut Box<&u32>>` in the current scope\n@@ -30,16 +26,12 @@ LL |     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n    |\n LL + use foo::Bar;\n-LL | extern crate no_method_suggested_traits;\n    |\n LL + use no_method_suggested_traits::Reexported;\n-LL | extern crate no_method_suggested_traits;\n    |\n LL + use no_method_suggested_traits::foo::PubPub;\n-LL | extern crate no_method_suggested_traits;\n    |\n LL + use no_method_suggested_traits::qux::PrivPub;\n-LL | extern crate no_method_suggested_traits;\n    |\n \n error[E0599]: no method named `method` found for type `char` in the current scope\n@@ -55,7 +47,6 @@ LL |     'a'.method();\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use foo::Bar;\n-LL | extern crate no_method_suggested_traits;\n    |\n \n error[E0599]: no method named `method` found for struct `Rc<&mut Box<&char>>` in the current scope\n@@ -68,7 +59,6 @@ LL |     std::rc::Rc::new(&mut Box::new(&'a')).method();\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use foo::Bar;\n-LL | extern crate no_method_suggested_traits;\n    |\n \n error[E0599]: no method named `method` found for type `i32` in the current scope\n@@ -86,7 +76,6 @@ LL |         fn method(&self) {}\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use no_method_suggested_traits::foo::PubPub;\n-LL | extern crate no_method_suggested_traits;\n    |\n \n error[E0599]: no method named `method` found for struct `Rc<&mut Box<&i32>>` in the current scope\n@@ -99,7 +88,6 @@ LL |     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use no_method_suggested_traits::foo::PubPub;\n-LL | extern crate no_method_suggested_traits;\n    |\n \n error[E0599]: no method named `method` found for struct `Foo` in the current scope"}, {"sha": "464d689589e914e313f00a40b62db576eea04644", "filename": "tests/ui/impl-trait/universal_wrong_bounds.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL | fn wants_debug(g: impl Debug) { }\n help: consider importing this trait instead\n    |\n LL + use std::fmt::Debug;\n-LL | use std::fmt::Display;\n    |\n \n error[E0404]: expected trait, found derive macro `Debug`\n@@ -19,7 +18,6 @@ LL | fn wants_display(g: impl Debug) { }\n help: consider importing this trait instead\n    |\n LL + use std::fmt::Debug;\n-LL | use std::fmt::Display;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "4401ef58732e8a003d85ad9a87bc06c64fe1ec33", "filename": "tests/ui/imports/glob-resolve1.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimports%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimports%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fglob-resolve1.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -61,7 +61,6 @@ LL |     import();\n help: consider importing this function\n    |\n LL + use other::import;\n-LL | use bar::*;\n    |\n \n error[E0412]: cannot find type `A` in this scope"}, {"sha": "1bb7ae29e108382b76eedfbe3ed3727ba28abda5", "filename": "tests/ui/imports/issue-38293.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimports%2Fissue-38293.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimports%2Fissue-38293.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-38293.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -13,7 +13,6 @@ LL |     baz();\n help: consider importing this function instead\n    |\n LL + use bar::baz;\n-LL | use foo::f::{self};\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "412423f4d595e6bd3410d8905f2d15517880455c", "filename": "tests/ui/imports/issue-4366-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimports%2Fissue-4366-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimports%2Fissue-4366-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-4366-2.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -19,7 +19,6 @@ LL |     foo();\n help: consider importing this function instead\n    |\n LL + use foo::foo;\n-LL | use m1::*;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "4d5b392a7e104725a23d4b2b9d19cd1b844230f8", "filename": "tests/ui/imports/issue-4366.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimports%2Fissue-4366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimports%2Fissue-4366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-4366.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |         fn sub() -> isize { foo(); 1 }\n help: consider importing this function\n    |\n LL +         use foo::foo;\n-LL |         use a::b::*;\n    |\n \n error: aborting due to previous error"}, {"sha": "490dccd3e808e2ea3482a6b81a087ebc5c6468d2", "filename": "tests/ui/imports/overlapping_pub_trait.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimports%2Foverlapping_pub_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimports%2Foverlapping_pub_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Foverlapping_pub_trait.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -13,7 +13,6 @@ LL |     pub trait Tr { fn method(&self); }\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use overlapping_pub_trait_source::m::Tr;\n-LL | extern crate overlapping_pub_trait_source;\n    |\n \n error: aborting due to previous error"}, {"sha": "5133273c22f6c75192b997d694d2ac051caa38b1", "filename": "tests/ui/imports/unnamed_pub_trait.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimports%2Funnamed_pub_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fimports%2Funnamed_pub_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Funnamed_pub_trait.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -13,7 +13,6 @@ LL |     pub trait Tr { fn method(&self); }\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use unnamed_pub_trait_source::prelude::*; // trait Tr\n-LL | extern crate unnamed_pub_trait_source;\n    |\n \n error: aborting due to previous error"}, {"sha": "1b7b9d5909ebbc51618f77b29209b2f6c59d5b3a", "filename": "tests/ui/issues/issue-10465.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fissues%2Fissue-10465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fissues%2Fissue-10465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-10465.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -8,7 +8,6 @@ LL |             b.foo();\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL +         use a::A;\n-LL |         use b::B;\n    |\n \n error: aborting due to previous error"}, {"sha": "cf7ed1bbd6682fa285b206765a4f1a85f56a1735", "filename": "tests/ui/issues/issue-17546.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fissues%2Fissue-17546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fissues%2Fissue-17546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-17546.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -25,16 +25,12 @@ LL |     fn new() -> Result<foo::MyEnum, String> {\n help: consider importing one of these items instead\n    |\n LL +     use std::fmt::Result;\n-LL |     use foo::MyEnum::Result;\n    |\n LL +     use std::io::Result;\n-LL |     use foo::MyEnum::Result;\n    |\n LL +     use std::result::Result;\n-LL |     use foo::MyEnum::Result;\n    |\n LL +     use std::thread::Result;\n-LL |     use foo::MyEnum::Result;\n    |\n \n error[E0573]: expected type, found variant `Result`\n@@ -46,16 +42,12 @@ LL | fn new() -> Result<foo::MyEnum, String> {\n help: consider importing one of these items instead\n    |\n LL + use std::fmt::Result;\n-LL | use foo::MyEnum::Result;\n    |\n LL + use std::io::Result;\n-LL | use foo::MyEnum::Result;\n    |\n LL + use std::result::Result;\n-LL | use foo::MyEnum::Result;\n    |\n LL + use std::thread::Result;\n-LL | use foo::MyEnum::Result;\n    |\n \n error[E0573]: expected type, found variant `NoResult`"}, {"sha": "b31d2a31551ef687a469c72159021f84f7afbab9", "filename": "tests/ui/issues/issue-35976.unimported.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fissues%2Fissue-35976.unimported.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fissues%2Fissue-35976.unimported.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-35976.unimported.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -10,7 +10,6 @@ LL |     arg.wait();\n help: another candidate was found in the following trait, perhaps add a `use` for it:\n    |\n LL + use private::Future;\n-LL | mod private {\n    |\n \n error: aborting due to previous error"}, {"sha": "7d3dd8800bd3462afb7614b93821ba0c74bc6a6b", "filename": "tests/ui/issues/issue-37534.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fissues%2Fissue-37534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fissues%2Fissue-37534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-37534.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL | struct Foo<T: ?Hash> { }\n help: consider importing this trait instead\n    |\n LL + use std::hash::Hash;\n-LL | struct Foo<T: ?Hash> { }\n    |\n \n warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default; only `?Sized` is supported"}, {"sha": "3a1476ac0e3afb650b7549419d5d9c2e823987e6", "filename": "tests/ui/issues/issue-39175.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fissues%2Fissue-39175.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fissues%2Fissue-39175.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-39175.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -8,7 +8,6 @@ LL |     Command::new(\"echo\").arg(\"hello\").exec();\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use std::os::unix::process::CommandExt;\n-LL | use std::process::Command;\n    |\n \n error: aborting due to previous error"}, {"sha": "1ddee1f4895bb0ee796418c152a45dcaaec586c2", "filename": "tests/ui/issues/issue-56175.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fissues%2Fissue-56175.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fissues%2Fissue-56175.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-56175.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -13,7 +13,6 @@ LL |         fn trait_method(&self) {\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use reexported_trait::Trait;\n-LL | fn main() {\n    |\n \n error[E0599]: no method named `trait_method_b` found for struct `FooStruct` in the current scope\n@@ -31,7 +30,6 @@ LL |         fn trait_method_b(&self) {\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use reexported_trait::TraitBRename;\n-LL | fn main() {\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "d6dcc8997b9ab6857366e93c69a34ec6bdf618f2", "filename": "tests/ui/issues/issue-77919.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fissues%2Fissue-77919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fissues%2Fissue-77919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-77919.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |     _n: PhantomData,\n help: consider importing this struct\n    |\n LL + use std::marker::PhantomData;\n-LL | fn main() {\n    |\n \n error[E0412]: cannot find type `VAL` in this scope"}, {"sha": "5ad450bed0781a7d4b4385b5fb56e10de8301ee2", "filename": "tests/ui/layout/issue-84108.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Flayout%2Fissue-84108.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Flayout%2Fissue-84108.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flayout%2Fissue-84108.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL | static FOO: (dyn AsRef<OsStr>, u8) = (\"hello\", 42);\n help: consider importing this struct\n    |\n LL + use std::ffi::OsStr;\n-LL | static FOO: (dyn AsRef<OsStr>, u8) = (\"hello\", 42);\n    |\n \n error[E0412]: cannot find type `Path` in this scope\n@@ -19,7 +18,6 @@ LL | const BAR: (&Path, [u8], usize) = (\"hello\", [], 42);\n help: consider importing this struct\n    |\n LL + use std::path::Path;\n-LL | static FOO: (dyn AsRef<OsStr>, u8) = (\"hello\", 42);\n    |\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time"}, {"sha": "89a6f585ce4150fbe6010ecc249b562a6c788548", "filename": "tests/ui/macros/issue-100199.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fmacros%2Fissue-100199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fmacros%2Fissue-100199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-100199.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -8,7 +8,6 @@ LL | #[issue_100199::struct_with_bound]\n help: consider importing this trait\n    |\n LL + use traits::MyTrait;\n-LL | #[issue_100199::struct_with_bound]\n    |\n \n error: aborting due to previous error"}, {"sha": "0bdc3416f807ea37e1a4b763f734e2a251be8ec4", "filename": "tests/ui/macros/macro-outer-attributes.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |     a::bar();\n help: consider importing this function\n    |\n LL + use b::bar;\n-LL | macro_rules! test { ($nm:ident,\n    |\n help: if you import `bar`, refer to it directly\n    |"}, {"sha": "3ac5e96c5742badc70d43a9def22256e40eb2865", "filename": "tests/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -15,10 +15,8 @@ LL |     check(m1::TS);\n help: consider importing one of these items instead\n    |\n LL + use m2::S;\n-LL | use namespace_mix::*;\n    |\n LL + use xm2::S;\n-LL | use namespace_mix::*;\n    |\n help: if you import `S`, refer to it directly\n    |\n@@ -45,10 +43,8 @@ LL |     check(xm1::TS);\n help: consider importing one of these items instead\n    |\n LL + use m2::S;\n-LL | use namespace_mix::*;\n    |\n LL + use xm2::S;\n-LL | use namespace_mix::*;\n    |\n help: if you import `S`, refer to it directly\n    |\n@@ -73,10 +69,8 @@ LL |     check(m7::TV);\n help: consider importing one of these items instead\n    |\n LL + use m8::V;\n-LL | use namespace_mix::*;\n    |\n LL + use xm8::V;\n-LL | use namespace_mix::*;\n    |\n help: if you import `V`, refer to it directly\n    |\n@@ -103,10 +97,8 @@ LL |     check(xm7::TV);\n help: consider importing one of these items instead\n    |\n LL + use m8::V;\n-LL | use namespace_mix::*;\n    |\n LL + use xm8::V;\n-LL | use namespace_mix::*;\n    |\n help: if you import `V`, refer to it directly\n    |"}, {"sha": "2de70789358b06f1c64c7a1206b35f9e816f07a1", "filename": "tests/ui/parser/circular_modules_main.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fparser%2Fcircular_modules_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fparser%2Fcircular_modules_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fcircular_modules_main.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -13,7 +13,6 @@ LL |     println!(\"{}\", circular_modules_main::hi_str());\n help: consider importing this function\n    |\n LL + use hi_str;\n-LL | #[path = \"circular_modules_main.rs\"]\n    |\n help: if you import `hi_str`, refer to it directly\n    |"}, {"sha": "9710cc48637bc0793e93a328f45b105bbe40b202", "filename": "tests/ui/privacy/privacy-ns1.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivacy-ns1.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -14,7 +14,6 @@ LL |     Baz();\n help: consider importing this function instead\n    |\n LL + use foo2::Bar;\n-LL | pub mod foo1 {\n    |\n \n error[E0425]: cannot find function, tuple struct or tuple variant `Bar` in this scope\n@@ -33,7 +32,6 @@ LL |     Baz();\n help: consider importing this function\n    |\n LL + use foo2::Bar;\n-LL | pub mod foo1 {\n    |\n \n error[E0412]: cannot find type `Bar` in this scope\n@@ -52,7 +50,6 @@ LL |     let _x: Box<Baz>;\n help: consider importing this trait\n    |\n LL + use foo1::Bar;\n-LL | pub mod foo1 {\n    |\n \n error[E0747]: constant provided when a type was expected"}, {"sha": "75e735e1e6a28c5d859b0898c946a704865a0ae2", "filename": "tests/ui/privacy/privacy-ns2.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivacy-ns2.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |     Bar();\n help: consider importing this function instead\n    |\n LL + use foo2::Bar;\n-LL | pub mod foo1 {\n    |\n \n error[E0423]: expected function, tuple struct or tuple variant, found trait `Bar`\n@@ -26,7 +25,6 @@ LL |     Baz();\n help: consider importing this function instead\n    |\n LL + use foo2::Bar;\n-LL | pub mod foo1 {\n    |\n \n error[E0573]: expected type, found function `Bar`\n@@ -42,7 +40,6 @@ LL |     let _x = Bar();\n help: consider importing this trait instead\n    |\n LL + use foo1::Bar;\n-LL | pub mod foo1 {\n    |\n \n error[E0603]: trait `Bar` is private"}, {"sha": "aa797339be4671b2306bf6cb71c5b55f0338ab47", "filename": "tests/ui/proc-macro/amputate-span.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fproc-macro%2Famputate-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fproc-macro%2Famputate-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Famputate-span.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |     Command::new(\"git\");\n help: consider importing this struct\n    |\n LL + use std::process::Command;\n-LL | #[amputate_span::drop_first_token]\n    |\n \n error[E0433]: failed to resolve: use of undeclared type `Command`\n@@ -19,7 +18,6 @@ LL |         Command::new(\"git\");\n help: consider importing this struct\n    |\n LL +     use std::process::Command;\n-LL |     #[amputate_span::drop_first_token]\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "97521f23aeef3a6ad26202b8cb16a2dcae87c026", "filename": "tests/ui/proc-macro/attributes-on-modules-fail.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -51,7 +51,6 @@ LL |     type A = Y;\n help: consider importing this struct\n    |\n LL +     use Y;\n-LL |     pub struct X;\n    |\n \n error[E0412]: cannot find type `X` in this scope\n@@ -63,7 +62,6 @@ LL | type A = X;\n help: consider importing this struct\n    |\n LL + use m::X;\n-LL | #[macro_use]\n    |\n \n error: aborting due to 7 previous errors"}, {"sha": "07fb5dcc035c18dbe52f6bb5f8c5b8c221b22626", "filename": "tests/ui/resolve/crate-in-paths.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fcrate-in-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fcrate-in-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fcrate-in-paths.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |     Foo;\n help: consider importing this unit struct\n    |\n LL + use crate::bar::Foo;\n-LL | mod bar {\n    |\n \n error: aborting due to previous error"}, {"sha": "5af6cb04275b8517f719d7731c6ad29c8a4eecf5", "filename": "tests/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |     let _ = namespaced_enums::A;\n help: consider importing this unit variant\n    |\n LL + use namespaced_enums::Foo::A;\n-LL | extern crate namespaced_enums;\n    |\n help: if you import `A`, refer to it directly\n    |\n@@ -24,7 +23,6 @@ LL |     let _ = namespaced_enums::B(10);\n help: consider importing this tuple variant\n    |\n LL + use namespaced_enums::Foo::B;\n-LL | extern crate namespaced_enums;\n    |\n help: if you import `B`, refer to it directly\n    |\n@@ -41,7 +39,6 @@ LL |     let _ = namespaced_enums::C { a: 10 };\n help: consider importing this variant\n    |\n LL + use namespaced_enums::Foo::C;\n-LL | extern crate namespaced_enums;\n    |\n help: if you import `C`, refer to it directly\n    |"}, {"sha": "cc1092dd0cfa8c15282db60c888e5d4c721a30e4", "filename": "tests/ui/resolve/filter-intrinsics.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Ffilter-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Ffilter-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Ffilter-intrinsics.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |     let _ = size_of::<usize>();\n help: consider importing this function\n    |\n LL + use std::mem::size_of;\n-LL | fn main() {\n    |\n \n error[E0425]: cannot find function `fabsf64` in this scope\n@@ -19,7 +18,6 @@ LL |     let _ = fabsf64(1.0);\n help: consider importing this function\n    |\n LL + use std::intrinsics::fabsf64;\n-LL | fn main() {\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "b2cdcb25c3f96138d5ce402a2d353335fb74299d", "filename": "tests/ui/resolve/issue-102946.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-102946.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-102946.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-102946.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL | impl Error for str::Utf8Error {\n help: consider importing this trait\n    |\n LL + use std::error::Error;\n-LL | impl Error for str::Utf8Error {\n    |\n \n error[E0223]: ambiguous associated type"}, {"sha": "710002a154efdd43a4a333cfcd31b1151a3575dd", "filename": "tests/ui/resolve/issue-16058.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-16058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-16058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-16058.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,13 +7,10 @@ LL |         Result {\n help: consider importing one of these items instead\n    |\n LL + use std::fmt::Result;\n-LL | pub struct GslResult {\n    |\n LL + use std::io::Result;\n-LL | pub struct GslResult {\n    |\n LL + use std::thread::Result;\n-LL | pub struct GslResult {\n    |\n \n error: aborting due to previous error"}, {"sha": "492e3b34a1798f5f232a13ed01aa710ba8c2216d", "filename": "tests/ui/resolve/issue-17518.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-17518.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-17518.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-17518.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |     E { name: \"foobar\" };\n help: consider importing this variant\n    |\n LL + use SomeEnum::E;\n-LL | enum SomeEnum {\n    |\n \n error: aborting due to previous error"}, {"sha": "a38116cd7287a23563b3d85541472f07b582534f", "filename": "tests/ui/resolve/issue-21221-1.stderr", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-21221-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-21221-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-21221-1.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,13 +7,10 @@ LL | impl Mul for Foo {\n help: consider importing one of these items\n    |\n LL + use mul1::Mul;\n-LL | mod mul1 {\n    |\n LL + use mul2::Mul;\n-LL | mod mul1 {\n    |\n LL + use std::ops::Mul;\n-LL | mod mul1 {\n    |\n \n error[E0412]: cannot find type `Mul` in this scope\n@@ -25,13 +22,10 @@ LL | fn getMul() -> Mul {\n help: consider importing one of these items\n    |\n LL + use mul1::Mul;\n-LL | mod mul1 {\n    |\n LL + use mul2::Mul;\n-LL | mod mul1 {\n    |\n LL + use std::ops::Mul;\n-LL | mod mul1 {\n    |\n \n error[E0405]: cannot find trait `ThisTraitReallyDoesntExistInAnyModuleReally` in this scope\n@@ -49,7 +43,6 @@ LL | impl Div for Foo {\n help: consider importing this trait\n    |\n LL + use std::ops::Div;\n-LL | mod mul1 {\n    |\n \n error: aborting due to 4 previous errors"}, {"sha": "9beb626623e4ef7e11ae069815769dfe7ed124ee", "filename": "tests/ui/resolve/issue-21221-2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-21221-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-21221-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-21221-2.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,10 +7,8 @@ LL | impl T for Foo { }\n help: consider importing one of these items\n    |\n LL + use baz::T;\n-LL | pub mod foo {\n    |\n LL + use foo::bar::T;\n-LL | pub mod foo {\n    |\n \n error: aborting due to previous error"}, {"sha": "0dabdfd9b39003933b4c2d813be550de8792b263", "filename": "tests/ui/resolve/issue-21221-3.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-21221-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-21221-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-21221-3.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL | impl OuterTrait for Foo {}\n help: consider importing this trait\n    |\n LL + use issue_21221_3::outer::OuterTrait;\n-LL | extern crate issue_21221_3;\n    |\n \n error: aborting due to previous error"}, {"sha": "5af14b1b68d365c3b762ff3fbc0605c4f84530af", "filename": "tests/ui/resolve/issue-21221-4.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-21221-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-21221-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-21221-4.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL | impl T for Foo {}\n help: consider importing this trait\n    |\n LL + use issue_21221_4::T;\n-LL | extern crate issue_21221_4;\n    |\n \n error: aborting due to previous error"}, {"sha": "313b3e30dd956b1aa888886e1401bcaa5baeb8de", "filename": "tests/ui/resolve/issue-2356.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-2356.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -11,7 +11,6 @@ LL |     Self::default();\n help: consider importing this function\n    |\n LL + use std::default::default;\n-LL | trait Groom {\n    |\n \n error[E0425]: cannot find value `whiskers` in this scope"}, {"sha": "42a7531c5b940828c28aefcf2045d6f4add42ebe", "filename": "tests/ui/resolve/issue-26545.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-26545.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-26545.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-26545.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |         B(());\n help: consider importing this tuple struct\n    |\n LL +     use foo::B;\n-LL |     fn foo() {\n    |\n \n error: aborting due to previous error"}, {"sha": "44af65b0768a8be1dad48a1140f6243d6e987b7f", "filename": "tests/ui/resolve/issue-35675.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-35675.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -18,7 +18,6 @@ LL |     Apple(5)\n help: consider importing this tuple variant\n    |\n LL + use Fruit::Apple;\n-LL | enum Fruit {\n    |\n \n error[E0573]: expected type, found variant `Fruit::Apple`\n@@ -39,7 +38,6 @@ LL |     Apple(5)\n help: consider importing this tuple variant\n    |\n LL + use Fruit::Apple;\n-LL | enum Fruit {\n    |\n \n error[E0573]: expected type, found variant `Ok`"}, {"sha": "70631a13cdf86d69b6808e6e11640ea59e5329c4", "filename": "tests/ui/resolve/issue-3907.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-3907.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-3907.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-3907.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -11,7 +11,6 @@ LL | trait Foo = dyn issue_3907::Foo;\n help: consider importing this trait instead\n    |\n LL + use issue_3907::Foo;\n-LL | extern crate issue_3907;\n    |\n \n error: aborting due to previous error"}, {"sha": "d7419b64facd2d645beb4bccc22e37709047d4cc", "filename": "tests/ui/resolve/issue-50599.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-50599.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,10 +7,8 @@ LL |     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize;\n help: consider importing one of these items\n    |\n LL + use std::f32::consts::LOG10_2;\n-LL | fn main() {\n    |\n LL + use std::f64::consts::LOG10_2;\n-LL | fn main() {\n    |\n help: if you import `LOG10_2`, refer to it directly\n    |"}, {"sha": "622de9b39bde78da6244f5951ea00489f048f351", "filename": "tests/ui/resolve/issue-73427.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-73427.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-73427.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-73427.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -108,10 +108,8 @@ LL |     (E::TupleWithFields(/* fields */)).foo();\n help: consider importing one of these items instead\n    |\n LL + use std::f32::consts::E;\n-LL | enum A {\n    |\n LL + use std::f64::consts::E;\n-LL | enum A {\n    |\n \n error[E0532]: expected tuple struct or tuple variant, found enum `A`"}, {"sha": "5f55d9c241a582b460964523271189855cc593fd", "filename": "tests/ui/resolve/issue-90113.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-90113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fissue-90113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-90113.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |         Cons(..) => {}\n help: consider importing this tuple variant\n    |\n LL + use list::List::Cons;\n-LL | mod list {\n    |\n \n error: aborting due to previous error"}, {"sha": "7a7b749aebb7b678747426fc7a1c90ef22cd46cb", "filename": "tests/ui/resolve/missing-in-namespace.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fmissing-in-namespace.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |     let _map = std::hahmap::HashMap::new();\n help: consider importing this struct\n    |\n LL + use std::collections::HashMap;\n-LL | fn main() {\n    |\n help: if you import `HashMap`, refer to it directly\n    |"}, {"sha": "49cf72bfee2d62fa58531f30ae6f5bc65f3a9fa5", "filename": "tests/ui/resolve/no-implicit-prelude-nested.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fno-implicit-prelude-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fno-implicit-prelude-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fno-implicit-prelude-nested.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |         impl Add for Test {}\n help: consider importing this trait\n    |\n LL +         use std::ops::Add;\n-LL |         struct Test;\n    |\n \n error[E0404]: expected trait, found derive macro `Clone`\n@@ -19,7 +18,6 @@ LL |         impl Clone for Test {}\n help: consider importing this trait instead\n    |\n LL +         use std::clone::Clone;\n-LL |         struct Test;\n    |\n \n error[E0405]: cannot find trait `Iterator` in this scope\n@@ -31,7 +29,6 @@ LL |         impl Iterator for Test {}\n help: consider importing this trait\n    |\n LL +         use std::iter::Iterator;\n-LL |         struct Test;\n    |\n \n error[E0405]: cannot find trait `ToString` in this scope\n@@ -43,7 +40,6 @@ LL |         impl ToString for Test {}\n help: consider importing this trait\n    |\n LL +         use std::string::ToString;\n-LL |         struct Test;\n    |\n \n error[E0405]: cannot find trait `Writer` in this scope\n@@ -61,7 +57,6 @@ LL |             drop(2)\n help: consider importing this function\n    |\n LL +         use std::mem::drop;\n-LL |         struct Test;\n    |\n \n error[E0405]: cannot find trait `Add` in this scope\n@@ -73,7 +68,6 @@ LL |     impl Add for Test {}\n help: consider importing this trait\n    |\n LL +     use std::ops::Add;\n-LL |     mod baz {\n    |\n \n error[E0404]: expected trait, found derive macro `Clone`\n@@ -85,7 +79,6 @@ LL |     impl Clone for Test {}\n help: consider importing this trait instead\n    |\n LL +     use std::clone::Clone;\n-LL |     mod baz {\n    |\n \n error[E0405]: cannot find trait `Iterator` in this scope\n@@ -97,7 +90,6 @@ LL |     impl Iterator for Test {}\n help: consider importing this trait\n    |\n LL +     use std::iter::Iterator;\n-LL |     mod baz {\n    |\n \n error[E0405]: cannot find trait `ToString` in this scope\n@@ -109,7 +101,6 @@ LL |     impl ToString for Test {}\n help: consider importing this trait\n    |\n LL +     use std::string::ToString;\n-LL |     mod baz {\n    |\n \n error[E0405]: cannot find trait `Writer` in this scope\n@@ -127,7 +118,6 @@ LL |         drop(2)\n help: consider importing this function\n    |\n LL +     use std::mem::drop;\n-LL |     mod baz {\n    |\n \n error[E0405]: cannot find trait `Add` in this scope\n@@ -139,7 +129,6 @@ LL |         impl Add for Test {}\n help: consider importing this trait\n    |\n LL +         use std::ops::Add;\n-LL |         struct Test;\n    |\n \n error[E0404]: expected trait, found derive macro `Clone`\n@@ -151,7 +140,6 @@ LL |         impl Clone for Test {}\n help: consider importing this trait instead\n    |\n LL +         use std::clone::Clone;\n-LL |         struct Test;\n    |\n \n error[E0405]: cannot find trait `Iterator` in this scope\n@@ -163,7 +151,6 @@ LL |         impl Iterator for Test {}\n help: consider importing this trait\n    |\n LL +         use std::iter::Iterator;\n-LL |         struct Test;\n    |\n \n error[E0405]: cannot find trait `ToString` in this scope\n@@ -175,7 +162,6 @@ LL |         impl ToString for Test {}\n help: consider importing this trait\n    |\n LL +         use std::string::ToString;\n-LL |         struct Test;\n    |\n \n error[E0405]: cannot find trait `Writer` in this scope\n@@ -193,7 +179,6 @@ LL |             drop(2)\n help: consider importing this function\n    |\n LL +         use std::mem::drop;\n-LL |         struct Test;\n    |\n \n error: aborting due to 18 previous errors"}, {"sha": "5a759743f72588d7e39757b9865ea425e2d4ba57", "filename": "tests/ui/resolve/no-implicit-prelude.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fno-implicit-prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fno-implicit-prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fno-implicit-prelude.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL | impl Add for Test {}\n help: consider importing this trait\n    |\n LL + use std::ops::Add;\n-LL | struct Test;\n    |\n \n error[E0404]: expected trait, found derive macro `Clone`\n@@ -19,7 +18,6 @@ LL | impl Clone for Test {}\n help: consider importing this trait instead\n    |\n LL + use std::clone::Clone;\n-LL | struct Test;\n    |\n \n error[E0405]: cannot find trait `Iterator` in this scope\n@@ -31,7 +29,6 @@ LL | impl Iterator for Test {}\n help: consider importing this trait\n    |\n LL + use std::iter::Iterator;\n-LL | struct Test;\n    |\n \n error[E0405]: cannot find trait `ToString` in this scope\n@@ -43,7 +40,6 @@ LL | impl ToString for Test {}\n help: consider importing this trait\n    |\n LL + use std::string::ToString;\n-LL | struct Test;\n    |\n \n error[E0405]: cannot find trait `Writer` in this scope\n@@ -61,7 +57,6 @@ LL |     drop(2)\n help: consider importing this function\n    |\n LL + use std::mem::drop;\n-LL | struct Test;\n    |\n \n error: aborting due to 6 previous errors"}, {"sha": "0bb09090569cbc20084320ac2a35558d2371dc38", "filename": "tests/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -85,10 +85,8 @@ LL |     let _: E = m::f;\n help: consider importing one of these items instead\n    |\n LL + use std::f32::consts::E;\n-LL | use m::E; // OK, only the type is imported\n    |\n LL + use std::f64::consts::E;\n-LL | use m::E; // OK, only the type is imported\n    |\n help: if you import `E`, refer to it directly\n    |\n@@ -124,10 +122,8 @@ LL |     let _: E = (E::Fn(/* fields */));\n help: consider importing one of these items instead\n    |\n LL + use std::f32::consts::E;\n-LL | use m::E; // OK, only the type is imported\n    |\n LL + use std::f64::consts::E;\n-LL | use m::E; // OK, only the type is imported\n    |\n \n error[E0412]: cannot find type `Z` in this scope"}, {"sha": "e3a5d4edcf1024f98f192b81fe1c72299524e7a8", "filename": "tests/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -13,7 +13,6 @@ LL |     let _: ::u8;\n help: consider importing this builtin type\n    |\n LL + use std::primitive::u8;\n-LL | fn main() {\n    |\n help: if you import `u8`, refer to it directly\n    |"}, {"sha": "1155f5caa1739ba2ab1538fa0286c8f83e0fa26d", "filename": "tests/ui/resolve/use_suggestion.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fuse_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fuse_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fuse_suggestion.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |     let x1 = HashMap::new();\n help: consider importing this struct\n    |\n LL + use std::collections::HashMap;\n-LL | fn main() {\n    |\n \n error[E0412]: cannot find type `HashMap` in this scope\n@@ -19,7 +18,6 @@ LL |     let y1: HashMap;\n help: consider importing this struct\n    |\n LL + use std::collections::HashMap;\n-LL | fn main() {\n    |\n \n error[E0412]: cannot find type `GooMap` in this scope"}, {"sha": "3611f9ae6b4edd09d159f26a64c4f4bce4d3f651", "filename": "tests/ui/resolve/use_suggestion_placement.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |     type Bar = Path;\n help: consider importing this struct\n    |\n LL +     use std::path::Path;\n-LL |     #[derive(Debug)]\n    |\n \n error[E0425]: cannot find value `A` in this scope\n@@ -19,7 +18,6 @@ LL |     let _ = A;\n help: consider importing this constant\n    |\n LL + use m::A;\n-LL | macro_rules! y {\n    |\n \n error[E0412]: cannot find type `HashMap` in this scope\n@@ -31,7 +29,6 @@ LL |     type Dict<K, V> = HashMap<K, V>;\n help: consider importing this struct\n    |\n LL + use std::collections::HashMap;\n-LL | macro_rules! y {\n    |\n \n error: aborting due to 3 previous errors"}, {"sha": "9933b92439c1387b8db922df126973921268dc9c", "filename": "tests/ui/rust-2018/issue-52202-use-suggestions.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,16 +7,12 @@ LL |     let _d = Drain {};\n help: consider importing one of these items\n    |\n LL + use crate::plumbing::Drain;\n-LL | mod plumbing {\n    |\n LL + use std::collections::binary_heap::Drain;\n-LL | mod plumbing {\n    |\n LL + use std::collections::hash_map::Drain;\n-LL | mod plumbing {\n    |\n LL + use std::collections::hash_set::Drain;\n-LL | mod plumbing {\n    |\n      and 3 other candidates\n "}, {"sha": "325c5976e7c89de10f1c6393d99f3c653a57214c", "filename": "tests/ui/rust-2018/trait-import-suggestions.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -11,7 +11,6 @@ LL |         x.foobar();\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL +     use crate::foo::foobar::Foobar;\n-LL |     mod foobar {\n    |\n \n error[E0599]: no method named `bar` found for type `u32` in the current scope\n@@ -27,7 +26,6 @@ LL |     x.bar();\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use crate::foo::Bar;\n-LL | mod foo {\n    |\n \n error[E0599]: no method named `baz` found for type `u32` in the current scope\n@@ -46,7 +44,6 @@ LL |     let y = u32::from_str(\"33\");\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use std::str::FromStr;\n-LL | mod foo {\n    |\n help: there is an associated function with a similar name\n    |"}, {"sha": "ac2baa3595bd3a926e4cf91a815d83f37dad2a90", "filename": "tests/ui/rust-2018/uniform-paths/issue-87932.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Frust-2018%2Funiform-paths%2Fissue-87932.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Frust-2018%2Funiform-paths%2Fissue-87932.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Funiform-paths%2Fissue-87932.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -11,7 +11,6 @@ LL |     A::deserialize();\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use <crate::A as issue_87932_a::Deserialize>::deserialize::_a::Deserialize;\n-LL | pub struct A {}\n    |\n \n error: aborting due to previous error"}, {"sha": "9dfaf13e2ecdc83faed9b37eaa16e66cd035fc2d", "filename": "tests/ui/rust-2021/future-prelude-collision-shadow.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -9,10 +9,8 @@ LL |         let _: u32 = 3u8.try_into().unwrap();\n help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n    |\n LL +     use crate::m::TryIntoU32;\n-LL |     use crate::m::AnotherTrick as TryIntoU32;\n    |\n LL +     use std::convert::TryInto;\n-LL |     use crate::m::AnotherTrick as TryIntoU32;\n    |\n \n error: aborting due to previous error"}, {"sha": "3c37d8197432c68f757238cd85be6bf3756eca10", "filename": "tests/ui/self/class-missing-self.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fself%2Fclass-missing-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fself%2Fclass-missing-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Fclass-missing-self.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -17,7 +17,6 @@ LL |       self.sleep();\n help: consider importing this function\n    |\n LL + use std::thread::sleep;\n-LL | struct Cat {\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "1af0400c88619e458265a545919f89eb5f3d1b35", "filename": "tests/ui/shadowed/shadowed-trait-methods.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -11,7 +11,6 @@ LL |     ().f()\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use foo::T;\n-LL | mod foo {\n    |\n \n error: aborting due to previous error"}, {"sha": "60433e1c28467c7ba95800198a121adb003356a0", "filename": "tests/ui/span/drop-location-span-error-rust-2021-incompatible-closure-captures-96258.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-96258.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-96258.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-96258.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -16,7 +16,6 @@ LL |         interval: Duration,\n help: consider importing this struct\n    |\n LL + use std::time::Duration;\n-LL | fn main() {}\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "88c86d2a91b58f72eade83fe35bbbdd2cbc763de", "filename": "tests/ui/span/issue-35987.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-35987.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -12,7 +12,6 @@ LL | impl<T: Clone, Add> Add for Foo<T> {\n help: consider importing this trait instead\n    |\n LL + use std::ops::Add;\n-LL | use std::ops::Add;\n    |\n \n error: aborting due to previous error"}, {"sha": "48ee44a74f2d3976e95cf75cdcd1245a6121564e", "filename": "tests/ui/suggestions/core-std-import-order-issue-83564.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fcore-std-import-order-issue-83564.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fcore-std-import-order-issue-83564.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fcore-std-import-order-issue-83564.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,10 +7,8 @@ LL |     let _x = NonZeroU32::new(5).unwrap();\n help: consider importing one of these items\n    |\n LL + use core::num::NonZeroU32;\n-LL | fn main() {\n    |\n LL + use std::num::NonZeroU32;\n-LL | fn main() {\n    |\n \n error: aborting due to previous error"}, {"sha": "85fbb8b88e81a4ca28bc079f4445ffa0d3ad3c64", "filename": "tests/ui/suggestions/dont-wrap-ambiguous-receivers.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fdont-wrap-ambiguous-receivers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fdont-wrap-ambiguous-receivers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fdont-wrap-ambiguous-receivers.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -11,10 +11,8 @@ LL |     banana::Chaenomeles.pick()\n help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n    |\n LL + use banana::Apple;\n-LL | mod banana {\n    |\n LL + use banana::Peach;\n-LL | mod banana {\n    |\n \n error: aborting due to previous error"}, {"sha": "3f54daf136f6d5411552366631bd342c2c6b1d23", "filename": "tests/ui/suggestions/import-trait-for-method-call.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -11,7 +11,6 @@ LL |     h.finish()\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use std::hash::Hasher;\n-LL | use std::hash::BuildHasher;\n    |\n \n error[E0599]: the method `as_ref` exists for reference `&dyn Bar`, but its trait bounds were not satisfied"}, {"sha": "68100e56cbc82a767e4da13c8a753c5b1a72fc45", "filename": "tests/ui/suggestions/no-extern-crate-in-type.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL | type Output = Option<Foo>;\n help: consider importing this struct\n    |\n LL + use foo::Foo;\n-LL | extern crate foo;\n    |\n \n error: aborting due to previous error"}, {"sha": "fb070ffc33230b46919f13629c7254f70faa2f16", "filename": "tests/ui/suggestions/raw-name-use-suggestion.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -29,7 +29,6 @@ LL |     r#break();\n help: consider importing this function\n    |\n LL + use foo::r#break;\n-LL | mod foo {\n    |\n \n error: aborting due to 3 previous errors"}, {"sha": "671f5efddd979d34b29bc4e5605a33fe81128331", "filename": "tests/ui/suggestions/suggest-tryinto-edition-change.stderr", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -9,10 +9,8 @@ LL |     let _i: i16 = TryFrom::try_from(0_i32).unwrap();\n help: consider importing one of these items\n    |\n LL + use core::convert::TryFrom;\n-LL | fn test() {\n    |\n LL + use std::convert::TryFrom;\n-LL | fn test() {\n    |\n \n error[E0433]: failed to resolve: use of undeclared type `TryInto`\n@@ -26,10 +24,8 @@ LL |     let _i: i16 = TryInto::try_into(0_i32).unwrap();\n help: consider importing one of these items\n    |\n LL + use core::convert::TryInto;\n-LL | fn test() {\n    |\n LL + use std::convert::TryInto;\n-LL | fn test() {\n    |\n \n error[E0433]: failed to resolve: use of undeclared type `FromIterator`\n@@ -47,10 +43,8 @@ LL |     let _v: Vec<_> = IntoIterator::from_iter(&[1]);\n help: consider importing one of these items\n    |\n LL + use core::iter::FromIterator;\n-LL | fn test() {\n    |\n LL + use std::iter::FromIterator;\n-LL | fn test() {\n    |\n \n error[E0599]: no method named `try_into` found for type `i32` in the current scope\n@@ -67,7 +61,6 @@ LL |     let _i: i16 = 0_i32.try_into().unwrap();\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use std::convert::TryInto;\n-LL | fn test() {\n    |\n \n error: aborting due to 4 previous errors"}, {"sha": "77724e7e2a479dabb9b8df7de754520a0f0e08e3", "filename": "tests/ui/suggestions/use-placement-resolve.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fuse-placement-resolve.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fuse-placement-resolve.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fuse-placement-resolve.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL | fn foobar<T: Debug>(x: T) {}\n help: consider importing this trait instead\n    |\n LL + use std::fmt::Debug;\n-LL | fn main() {}\n    |\n \n error: aborting due to previous error"}, {"sha": "e900e12b7df0f3d70c0283186cbb1e86243eea92", "filename": "tests/ui/suggestions/use-placement-typeck.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fuse-placement-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Fsuggestions%2Fuse-placement-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fuse-placement-typeck.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -14,7 +14,6 @@ LL |     pub struct S;\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use m::Foo;\n-LL | fn main() {\n    |\n \n error: aborting due to previous error"}, {"sha": "b114d295d7816edd6c9b721495a4767d600ff411", "filename": "tests/ui/trait-bounds/impl-bound-with-references-error.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Ftrait-bounds%2Fimpl-bound-with-references-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Ftrait-bounds%2Fimpl-bound-with-references-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Fimpl-bound-with-references-error.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |     T: Into<Cow<'static, str>>,\n help: consider importing this enum\n    |\n LL + use std::borrow::Cow;\n-LL | pub enum LabelText {\n    |\n \n error[E0119]: conflicting implementations of trait `From<LabelText>` for type `LabelText`"}, {"sha": "4547e1c984c053b1d849fc793b202feac4714479", "filename": "tests/ui/trait-bounds/shadowed-path-in-trait-bound-suggestion.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL |     pub struct A<H: A::Trait>(pub H);\n help: consider importing this trait\n    |\n LL +     use A::Trait;\n-LL |     pub struct A<H: A::Trait>(pub H);\n    |\n help: if you import `Trait`, refer to it directly\n    |"}, {"sha": "ec692ff911df57f04170e14394386a8abf8ead73", "filename": "tests/ui/traits/issue-78372.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Ftraits%2Fissue-78372.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Ftraits%2Fissue-78372.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-78372.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -7,7 +7,6 @@ LL | struct Smaht<T, MISC>(PhantomData);\n help: consider importing this struct\n    |\n LL + use std::marker::PhantomData;\n-LL | use std::ops::DispatchFromDyn;\n    |\n \n error[E0412]: cannot find type `U` in this scope"}, {"sha": "f538131892546e0501529636e63e72a9bd25ab55", "filename": "tests/ui/traits/item-privacy.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Ftraits%2Fitem-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Ftraits%2Fitem-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fitem-privacy.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -30,7 +30,6 @@ LL |     S.b();\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use method::B;\n-LL | struct S;\n    |\n \n error[E0624]: method `a` is private\n@@ -71,7 +70,6 @@ LL |     S::b(&S);\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use method::B;\n-LL | struct S;\n    |\n \n error[E0624]: method `a` is private\n@@ -112,7 +110,6 @@ LL |     S::B;\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use assoc_const::B;\n-LL | struct S;\n    |\n \n error[E0624]: associated constant `A` is private"}, {"sha": "e11799308c5c7ef41f38c6acd858306a2ac2296a", "filename": "tests/ui/traits/method-private.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Ftraits%2Fmethod-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Ftraits%2Fmethod-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fmethod-private.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -11,7 +11,6 @@ LL |     foo.method();\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use inner::Bar;\n-LL | mod inner {\n    |\n \n error: aborting due to previous error"}, {"sha": "c072e6a08ba0b0032e3c3848a01b733816db2289", "filename": "tests/ui/typeck/issue-43189.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Ftypeck%2Fissue-43189.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Ftypeck%2Fissue-43189.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-43189.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -13,7 +13,6 @@ LL |     fn a(&self) {}\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL + use xcrate_issue_43189_b::xcrate_issue_43189_a::A;\n-LL | extern crate xcrate_issue_43189_b;\n    |\n \n error: aborting due to previous error"}, {"sha": "f2c19405bbb8bce7fd729b5ae9d4eac9450e914b", "filename": "tests/ui/underscore-imports/shadow.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Funderscore-imports%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Funderscore-imports%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funderscore-imports%2Fshadow.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -8,7 +8,6 @@ LL |         x.deref();\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL +     use std::ops::Deref;\n-LL |     use crate::b::Shadow as _; // Only imports the struct\n    |\n \n error: aborting due to previous error"}, {"sha": "7ef2f6b1a292255df26c924f645b0e5757593f33", "filename": "tests/ui/unresolved/unresolved-candidates.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Funresolved%2Funresolved-candidates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fadcc143a49a124fa1d0d3261593defb986a987/tests%2Fui%2Funresolved%2Funresolved-candidates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funresolved%2Funresolved-candidates.stderr?ref=9fadcc143a49a124fa1d0d3261593defb986a987", "patch": "@@ -18,7 +18,6 @@ LL |     impl Trait for () {}\n help: consider importing this trait\n    |\n LL +     use a::Trait;\n-LL |     impl Trait for () {}\n    |\n \n error: aborting due to 2 previous errors"}]}