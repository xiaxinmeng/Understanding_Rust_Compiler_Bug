{"sha": "d4c970d1f21f014eddb550a2c33cacbf9546889d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0Yzk3MGQxZjIxZjAxNGVkZGI1NTBhMmMzM2NhY2JmOTU0Njg4OWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-17T13:22:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-17T13:22:43Z"}, "message": "Merge #6573\n\n6573: Add **Ignore Test** assist r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "3cf3a7bc4d7ef9a327418279354a68c2472db1af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cf3a7bc4d7ef9a327418279354a68c2472db1af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4c970d1f21f014eddb550a2c33cacbf9546889d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfs86jCRBK7hj4Ov3rIwAAdHIIACttCFpazdGouy3OPP8JsCPv\nMVdpxbZwqohP1JWk6kEm31BR+aBMfZX5l0A8cBdRuErLCFqd8JY3iYDY0CnSHY2N\ncAm1CcEVZw9ByFff7ugiFfYXPKg6+ZiEy9GY1yS/M/xrHVEIEPjNZfKu1gSvptJ2\nE701kXyRiX7+WsSqmDG9+K82yaB0N53Az47sBxBoTMEdgNdOXrUg3OoBRmf4LXoy\n743ycPGC2ev2BREPJYXNrV2vRhZsJusiemN7UoRO46OH2WQvcKG/AeNikyjUwLG1\nVsW6TuJqreaq9yw1J77CCnsJxiHg0eh9wKPhgyA3sX3oBADIIzT8Dp2Y8bN79II=\n=OAKt\n-----END PGP SIGNATURE-----\n", "payload": "tree 3cf3a7bc4d7ef9a327418279354a68c2472db1af\nparent 10e3a9879c8714320f9a0729d647da7877f0a753\nparent 9a30707281d3a978741a549196b71a27284f7240\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1605619363 +0000\ncommitter GitHub <noreply@github.com> 1605619363 +0000\n\nMerge #6573\n\n6573: Add **Ignore Test** assist r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c970d1f21f014eddb550a2c33cacbf9546889d", "html_url": "https://github.com/rust-lang/rust/commit/d4c970d1f21f014eddb550a2c33cacbf9546889d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4c970d1f21f014eddb550a2c33cacbf9546889d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10e3a9879c8714320f9a0729d647da7877f0a753", "url": "https://api.github.com/repos/rust-lang/rust/commits/10e3a9879c8714320f9a0729d647da7877f0a753", "html_url": "https://github.com/rust-lang/rust/commit/10e3a9879c8714320f9a0729d647da7877f0a753"}, {"sha": "9a30707281d3a978741a549196b71a27284f7240", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a30707281d3a978741a549196b71a27284f7240", "html_url": "https://github.com/rust-lang/rust/commit/9a30707281d3a978741a549196b71a27284f7240"}], "stats": {"total": 98, "additions": 80, "deletions": 18}, "files": [{"sha": "d2339184f1ae63b59a43b50545bfb884e28757fd", "filename": "crates/assists/src/handlers/ignore_test.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d4c970d1f21f014eddb550a2c33cacbf9546889d/crates%2Fassists%2Fsrc%2Fhandlers%2Fignore_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c970d1f21f014eddb550a2c33cacbf9546889d/crates%2Fassists%2Fsrc%2Fhandlers%2Fignore_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fignore_test.rs?ref=d4c970d1f21f014eddb550a2c33cacbf9546889d", "patch": "@@ -0,0 +1,34 @@\n+use syntax::{ast, AstNode};\n+\n+use crate::{utils::test_related_attribute, AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: ignore_test\n+//\n+// Adds `#[ignore]` attribute to the test.\n+//\n+// ```\n+// <|>#[test]\n+// fn arithmetics {\n+//     assert_eq!(2 + 2, 5);\n+// }\n+// ```\n+// ->\n+// ```\n+// #[test]\n+// #[ignore]\n+// fn arithmetics {\n+//     assert_eq!(2 + 2, 5);\n+// }\n+// ```\n+pub(crate) fn ignore_test(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let attr: ast::Attr = ctx.find_node_at_offset()?;\n+    let func = attr.syntax().parent().and_then(ast::Fn::cast)?;\n+    let attr = test_related_attribute(&func)?;\n+\n+    acc.add(\n+        AssistId(\"ignore_test\", AssistKind::None),\n+        \"Ignore this test\",\n+        attr.syntax().text_range(),\n+        |builder| builder.insert(attr.syntax().text_range().end(), &format!(\"\\n#[ignore]\")),\n+    )\n+}"}, {"sha": "17e9312db2b9a34bb1627609d89696e1bf022975", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c970d1f21f014eddb550a2c33cacbf9546889d/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c970d1f21f014eddb550a2c33cacbf9546889d/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=d4c970d1f21f014eddb550a2c33cacbf9546889d", "patch": "@@ -141,6 +141,7 @@ mod handlers {\n     mod generate_function;\n     mod generate_impl;\n     mod generate_new;\n+    mod ignore_test;\n     mod infer_function_return_type;\n     mod inline_local_variable;\n     mod introduce_named_lifetime;\n@@ -189,6 +190,7 @@ mod handlers {\n             generate_function::generate_function,\n             generate_impl::generate_impl,\n             generate_new::generate_new,\n+            ignore_test::ignore_test,\n             infer_function_return_type::infer_function_return_type,\n             inline_local_variable::inline_local_variable,\n             introduce_named_lifetime::introduce_named_lifetime,"}, {"sha": "5a9d1a01b7876a780dc9d8b24bb56ec6ffe200b4", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d4c970d1f21f014eddb550a2c33cacbf9546889d/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c970d1f21f014eddb550a2c33cacbf9546889d/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=d4c970d1f21f014eddb550a2c33cacbf9546889d", "patch": "@@ -473,6 +473,26 @@ impl<T: Clone> Ctx<T> {\n     )\n }\n \n+#[test]\n+fn doctest_ignore_test() {\n+    check_doc_test(\n+        \"ignore_test\",\n+        r#####\"\n+<|>#[test]\n+fn arithmetics {\n+    assert_eq!(2 + 2, 5);\n+}\n+\"#####,\n+        r#####\"\n+#[test]\n+#[ignore]\n+fn arithmetics {\n+    assert_eq!(2 + 2, 5);\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_infer_function_return_type() {\n     check_doc_test("}, {"sha": "d1a0a99b1dd6e91872a7d9f1be21caa3b34e3eea", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d4c970d1f21f014eddb550a2c33cacbf9546889d/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c970d1f21f014eddb550a2c33cacbf9546889d/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=d4c970d1f21f014eddb550a2c33cacbf9546889d", "patch": "@@ -9,6 +9,7 @@ use ide_db::RootDatabase;\n use itertools::Itertools;\n use syntax::{\n     ast::edit::AstNodeEdit,\n+    ast::AttrsOwner,\n     ast::NameOwner,\n     ast::{self, edit, make, ArgListOwner},\n     AstNode, Direction,\n@@ -82,6 +83,23 @@ pub fn extract_trivial_expression(block: &ast::BlockExpr) -> Option<ast::Expr> {\n     None\n }\n \n+/// This is a method with a heuristics to support test methods annotated with custom test annotations, such as\n+/// `#[test_case(...)]`, `#[tokio::test]` and similar.\n+/// Also a regular `#[test]` annotation is supported.\n+///\n+/// It may produce false positives, for example, `#[wasm_bindgen_test]` requires a different command to run the test,\n+/// but it's better than not to have the runnables for the tests at all.\n+pub fn test_related_attribute(fn_def: &ast::Fn) -> Option<ast::Attr> {\n+    fn_def.attrs().find_map(|attr| {\n+        let path = attr.path()?;\n+        if path.syntax().text().to_string().contains(\"test\") {\n+            Some(attr)\n+        } else {\n+            None\n+        }\n+    })\n+}\n+\n #[derive(Copy, Clone, PartialEq)]\n pub enum DefaultMethods {\n     Only,"}, {"sha": "5cbbe306e7ad551abc184b28a1dedfeac47bc24a", "filename": "crates/ide/src/fn_references.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4c970d1f21f014eddb550a2c33cacbf9546889d/crates%2Fide%2Fsrc%2Ffn_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c970d1f21f014eddb550a2c33cacbf9546889d/crates%2Fide%2Fsrc%2Ffn_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffn_references.rs?ref=d4c970d1f21f014eddb550a2c33cacbf9546889d", "patch": "@@ -1,11 +1,12 @@\n //! This module implements a methods and free functions search in the specified file.\n //! We have to skip tests, so cannot reuse file_structure module.\n \n+use assists::utils::test_related_attribute;\n use hir::Semantics;\n use ide_db::RootDatabase;\n use syntax::{ast, ast::NameOwner, AstNode, SyntaxNode};\n \n-use crate::{runnables::has_test_related_attribute, FileId, FileRange};\n+use crate::{FileId, FileRange};\n \n pub(crate) fn find_all_methods(db: &RootDatabase, file_id: FileId) -> Vec<FileRange> {\n     let sema = Semantics::new(db);\n@@ -15,7 +16,7 @@ pub(crate) fn find_all_methods(db: &RootDatabase, file_id: FileId) -> Vec<FileRa\n \n fn method_range(item: SyntaxNode, file_id: FileId) -> Option<FileRange> {\n     ast::Fn::cast(item).and_then(|fn_def| {\n-        if has_test_related_attribute(&fn_def) {\n+        if test_related_attribute(&fn_def).is_some() {\n             None\n         } else {\n             fn_def.name().map(|name| FileRange { file_id, range: name.syntax().text_range() })"}, {"sha": "e154117775910acd18db6ffad37a6c16bfec316e", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d4c970d1f21f014eddb550a2c33cacbf9546889d/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c970d1f21f014eddb550a2c33cacbf9546889d/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=d4c970d1f21f014eddb550a2c33cacbf9546889d", "patch": "@@ -1,5 +1,6 @@\n use std::fmt;\n \n+use assists::utils::test_related_attribute;\n use cfg::CfgExpr;\n use hir::{AsAssocItem, Attrs, HirFileId, InFile, Semantics};\n use ide_db::RootDatabase;\n@@ -156,7 +157,7 @@ fn runnable_fn(\n             None => TestId::Name(name_string),\n         };\n \n-        if has_test_related_attribute(&fn_def) {\n+        if test_related_attribute(&fn_def).is_some() {\n             let attr = TestAttr::from_fn(&fn_def);\n             RunnableKind::Test { test_id, attr }\n         } else if fn_def.has_atom_attr(\"bench\") {\n@@ -235,20 +236,6 @@ impl TestAttr {\n     }\n }\n \n-/// This is a method with a heuristics to support test methods annotated with custom test annotations, such as\n-/// `#[test_case(...)]`, `#[tokio::test]` and similar.\n-/// Also a regular `#[test]` annotation is supported.\n-///\n-/// It may produce false positives, for example, `#[wasm_bindgen_test]` requires a different command to run the test,\n-/// but it's better than not to have the runnables for the tests at all.\n-pub(crate) fn has_test_related_attribute(fn_def: &ast::Fn) -> bool {\n-    fn_def\n-        .attrs()\n-        .filter_map(|attr| attr.path())\n-        .map(|path| path.syntax().to_string().to_lowercase())\n-        .any(|attribute_text| attribute_text.contains(\"test\"))\n-}\n-\n const RUSTDOC_FENCE: &str = \"```\";\n const RUSTDOC_CODE_BLOCK_ATTRIBUTES_RUNNABLE: &[&str] =\n     &[\"\", \"rust\", \"should_panic\", \"edition2015\", \"edition2018\"];\n@@ -307,7 +294,7 @@ fn has_test_function_or_multiple_test_submodules(module: &ast::Module) -> bool {\n         for item in item_list.items() {\n             match item {\n                 ast::Item::Fn(f) => {\n-                    if has_test_related_attribute(&f) {\n+                    if test_related_attribute(&f).is_some() {\n                         return true;\n                     }\n                 }"}]}