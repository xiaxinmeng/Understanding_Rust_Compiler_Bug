{"sha": "d2cd59a0315809afa58df0196c34b33ee0a8c161", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyY2Q1OWEwMzE1ODA5YWZhNThkZjAxOTZjMzRiMzNlZTBhOGMxNjE=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-06-05T16:14:45Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-06-15T23:50:10Z"}, "message": "Add case for count_code_region() extern lang_item\n\nAs suggested in PR feedback:\n\nhttps://github.com/rust-lang/rust/pull/73011#discussion_r435728923\n\nThis allows count_code_region() to be handled like a normal intrinsic so\nthe InstanceDef::InjectedCode variant is no longer needed.", "tree": {"sha": "3983e85ba18ec57e3bf6472118f54f24c9eb95a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3983e85ba18ec57e3bf6472118f54f24c9eb95a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2cd59a0315809afa58df0196c34b33ee0a8c161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2cd59a0315809afa58df0196c34b33ee0a8c161", "html_url": "https://github.com/rust-lang/rust/commit/d2cd59a0315809afa58df0196c34b33ee0a8c161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2cd59a0315809afa58df0196c34b33ee0a8c161/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c5c2a6bc2f7023ee8ad252d2ee5a45fbfb2de22", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c5c2a6bc2f7023ee8ad252d2ee5a45fbfb2de22", "html_url": "https://github.com/rust-lang/rust/commit/2c5c2a6bc2f7023ee8ad252d2ee5a45fbfb2de22"}], "stats": {"total": 81, "additions": 27, "deletions": 54}, "files": [{"sha": "7ce5814d39a025a823c351eb8fe549843767e0c8", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=d2cd59a0315809afa58df0196c34b33ee0a8c161", "patch": "@@ -1941,22 +1941,13 @@ extern \"rust-intrinsic\" {\n     ///\n     /// Perma-unstable: do not use.\n     pub fn miri_start_panic(payload: *mut u8) -> !;\n-}\n \n-/// Defines the `count_code_region` intrinsic as a `LangItem`. `LangItem`s require a function body\n-/// to register its DefId with the LangItem entry. The function body is never actually called (and\n-/// is therefore implemented as an aborting stub) because it is replaced with the LLVM intrinsic\n-/// `llvm.instrprof.increment` by\n-/// `rustc_codegen_llvm::intrinsic::IntrinsicCallMethods::codegen_intrinsic_call()`.\n-#[cfg(not(bootstrap))]\n-#[cfg_attr(not(bootstrap), lang = \"count_code_region\")]\n-fn count_code_region(_index: u32) {\n-    // remove `unsafe` (and safety comment) on bootstrap bump\n-    #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n-    // SAFETY: the `abort` intrinsic has no requirements to be called.\n-    unsafe {\n-        abort()\n-    }\n+    /// Internal placeholder for injecting code coverage counters when the \"instrument-coverage\"\n+    /// option is enabled. The placeholder is replaced with `llvm.instrprof.increment` during code\n+    /// generation.\n+    #[cfg(not(bootstrap))]\n+    #[cfg_attr(not(bootstrap), lang = \"count_code_region\")]\n+    pub fn count_code_region(_index: u32);\n }\n \n // Some functions are defined here because they accidentally got made"}, {"sha": "665ef770909879ef0ddaebfbfea6ccbee9b8d625", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=d2cd59a0315809afa58df0196c34b33ee0a8c161", "patch": "@@ -566,10 +566,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Handle intrinsics old codegen wants Expr's for, ourselves.\n         let intrinsic = match def {\n-            Some(ty::InstanceDef::Intrinsic(def_id))\n-            | Some(ty::InstanceDef::InjectedCode(def_id)) => {\n-                Some(bx.tcx().item_name(def_id).as_str())\n-            }\n+            Some(ty::InstanceDef::Intrinsic(def_id)) => Some(bx.tcx().item_name(def_id).as_str()),\n             _ => None,\n         };\n         let intrinsic = intrinsic.as_ref().map(|s| &s[..]);"}, {"sha": "c889dbc0a449848603e6c7901b209fb374376982", "filename": "src/librustc_middle/mir/mono.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmono.rs?ref=d2cd59a0315809afa58df0196c34b33ee0a8c161", "patch": "@@ -352,7 +352,6 @@ impl<'tcx> CodegenUnit<'tcx> {\n                             InstanceDef::VtableShim(..)\n                             | InstanceDef::ReifyShim(..)\n                             | InstanceDef::Intrinsic(..)\n-                            | InstanceDef::InjectedCode(..)\n                             | InstanceDef::FnPtrShim(..)\n                             | InstanceDef::Virtual(..)\n                             | InstanceDef::ClosureOnceShim { .. }"}, {"sha": "1ce079821a22e52665609836777f986e2654a681", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=d2cd59a0315809afa58df0196c34b33ee0a8c161", "patch": "@@ -21,10 +21,6 @@ pub enum InstanceDef<'tcx> {\n     Item(DefId),\n     Intrinsic(DefId),\n \n-    /// Injected call to a placeholder function that is replaced with\n-    /// For example: `core::intrinsic::count_code_region()` for code coverage.\n-    InjectedCode(DefId),\n-\n     /// `<T as Trait>::method` where `method` receives unsizeable `self: Self`.\n     VtableShim(DefId),\n \n@@ -153,7 +149,6 @@ impl<'tcx> InstanceDef<'tcx> {\n             | InstanceDef::FnPtrShim(def_id, _)\n             | InstanceDef::Virtual(def_id, _)\n             | InstanceDef::Intrinsic(def_id)\n-            | InstanceDef::InjectedCode(def_id)\n             | InstanceDef::ClosureOnceShim { call_once: def_id }\n             | InstanceDef::DropGlue(def_id, _)\n             | InstanceDef::CloneShim(def_id, _) => def_id,\n@@ -241,7 +236,6 @@ impl<'tcx> fmt::Display for Instance<'tcx> {\n             InstanceDef::VtableShim(_) => write!(f, \" - shim(vtable)\"),\n             InstanceDef::ReifyShim(_) => write!(f, \" - shim(reify)\"),\n             InstanceDef::Intrinsic(_) => write!(f, \" - intrinsic\"),\n-            InstanceDef::InjectedCode(_) => write!(f, \" - injected-code\"),\n             InstanceDef::Virtual(_, num) => write!(f, \" - virtual#{}\", num),\n             InstanceDef::FnPtrShim(_, ty) => write!(f, \" - shim({:?})\", ty),\n             InstanceDef::ClosureOnceShim { .. } => write!(f, \" - shim\"),\n@@ -421,7 +415,6 @@ impl<'tcx> Instance<'tcx> {\n             | InstanceDef::FnPtrShim(..)\n             | InstanceDef::Item(_)\n             | InstanceDef::Intrinsic(..)\n-            | InstanceDef::InjectedCode(..)\n             | InstanceDef::ReifyShim(..)\n             | InstanceDef::Virtual(..)\n             | InstanceDef::VtableShim(..) => Some(self.substs),"}, {"sha": "93ef73171993c0522fd161cda065e54c821fdf7d", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=d2cd59a0315809afa58df0196c34b33ee0a8c161", "patch": "@@ -2717,7 +2717,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n             | ty::InstanceDef::Intrinsic(..)\n-            | ty::InstanceDef::InjectedCode(..)\n             | ty::InstanceDef::FnPtrShim(..)\n             | ty::InstanceDef::Virtual(..)\n             | ty::InstanceDef::ClosureOnceShim { .. }"}, {"sha": "f6f5dfd651612dbbc5e3376558218a2191f31bc9", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=d2cd59a0315809afa58df0196c34b33ee0a8c161", "patch": "@@ -674,7 +674,6 @@ impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n             ty::InstanceDef::VtableShim(def_id) => Some(ty::InstanceDef::VtableShim(def_id)),\n             ty::InstanceDef::ReifyShim(def_id) => Some(ty::InstanceDef::ReifyShim(def_id)),\n             ty::InstanceDef::Intrinsic(def_id) => Some(ty::InstanceDef::Intrinsic(def_id)),\n-            ty::InstanceDef::InjectedCode(def_id) => Some(ty::InstanceDef::Intrinsic(def_id)),\n             ty::InstanceDef::FnPtrShim(def_id, ref ty) => {\n                 Some(ty::InstanceDef::FnPtrShim(def_id, tcx.lift(ty)?))\n             }\n@@ -847,7 +846,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n                 VtableShim(did) => VtableShim(did.fold_with(folder)),\n                 ReifyShim(did) => ReifyShim(did.fold_with(folder)),\n                 Intrinsic(did) => Intrinsic(did.fold_with(folder)),\n-                InjectedCode(did) => InjectedCode(did.fold_with(folder)),\n                 FnPtrShim(did, ty) => FnPtrShim(did.fold_with(folder), ty.fold_with(folder)),\n                 Virtual(did, i) => Virtual(did.fold_with(folder), i),\n                 ClosureOnceShim { call_once } => {\n@@ -863,12 +861,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n         use crate::ty::InstanceDef::*;\n         self.substs.visit_with(visitor)\n             || match self.def {\n-                Item(did)\n-                | VtableShim(did)\n-                | ReifyShim(did)\n-                | Intrinsic(did)\n-                | InjectedCode(did)\n-                | Virtual(did, _) => did.visit_with(visitor),\n+                Item(did) | VtableShim(did) | ReifyShim(did) | Intrinsic(did) | Virtual(did, _) => {\n+                    did.visit_with(visitor)\n+                }\n                 FnPtrShim(did, ty) | CloneShim(did, ty) => {\n                     did.visit_with(visitor) || ty.visit_with(visitor)\n                 }"}, {"sha": "cd7621ea9752b4ebc51a0d40394b060bb7a74346", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=d2cd59a0315809afa58df0196c34b33ee0a8c161", "patch": "@@ -257,9 +257,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 assert!(caller_abi == Abi::RustIntrinsic || caller_abi == Abi::PlatformIntrinsic);\n                 M::call_intrinsic(self, instance, args, ret, unwind)\n             }\n-            ty::InstanceDef::InjectedCode(..) => {\n-                M::call_intrinsic(self, instance, args, ret, unwind)\n-            }\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n             | ty::InstanceDef::ClosureOnceShim { .. }"}, {"sha": "994d1e69f2e3e709cefadfa34f4205121b151bf7", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=d2cd59a0315809afa58df0196c34b33ee0a8c161", "patch": "@@ -714,9 +714,7 @@ fn visit_instance_use<'tcx>(\n     }\n \n     match instance.def {\n-        ty::InstanceDef::Virtual(..)\n-        | ty::InstanceDef::Intrinsic(_)\n-        | ty::InstanceDef::InjectedCode(_) => {\n+        ty::InstanceDef::Virtual(..) | ty::InstanceDef::Intrinsic(_) => {\n             if !is_direct_call {\n                 bug!(\"{:?} being reified\", instance);\n             }\n@@ -753,7 +751,6 @@ fn should_monomorphize_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx\n         | ty::InstanceDef::FnPtrShim(..)\n         | ty::InstanceDef::DropGlue(..)\n         | ty::InstanceDef::Intrinsic(_)\n-        | ty::InstanceDef::InjectedCode(_)\n         | ty::InstanceDef::CloneShim(..) => return true,\n     };\n "}, {"sha": "db1ea72c0a53101af30755e93ef5934c80d82947", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=d2cd59a0315809afa58df0196c34b33ee0a8c161", "patch": "@@ -322,7 +322,6 @@ fn mono_item_visibility(\n         | InstanceDef::FnPtrShim(..)\n         | InstanceDef::Virtual(..)\n         | InstanceDef::Intrinsic(..)\n-        | InstanceDef::InjectedCode(..)\n         | InstanceDef::ClosureOnceShim { .. }\n         | InstanceDef::DropGlue(..)\n         | InstanceDef::CloneShim(..) => return Visibility::Hidden,\n@@ -718,7 +717,6 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n                 | ty::InstanceDef::FnPtrShim(..)\n                 | ty::InstanceDef::ClosureOnceShim { .. }\n                 | ty::InstanceDef::Intrinsic(..)\n-                | ty::InstanceDef::InjectedCode(..)\n                 | ty::InstanceDef::DropGlue(..)\n                 | ty::InstanceDef::Virtual(..)\n                 | ty::InstanceDef::CloneShim(..) => return None,"}, {"sha": "f95fd9b9e90c562f51b31024f7795957268934f9", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=d2cd59a0315809afa58df0196c34b33ee0a8c161", "patch": "@@ -109,9 +109,6 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n         ty::InstanceDef::Intrinsic(_) => {\n             bug!(\"creating shims from intrinsics ({:?}) is unsupported\", instance)\n         }\n-        ty::InstanceDef::InjectedCode(_) => {\n-            bug!(\"creating shims from injected code ({:?}) is unsupported\", instance)\n-        }\n     };\n     debug!(\"make_shim({:?}) = untransformed {:?}\", instance, result);\n "}, {"sha": "f2f07b5d4fb26fba2d7a8acf877d2136f734b2ff", "filename": "src/librustc_passes/weak_lang_items.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_passes%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_passes%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fweak_lang_items.rs?ref=d2cd59a0315809afa58df0196c34b33ee0a8c161", "patch": "@@ -5,10 +5,12 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::lang_items;\n+use rustc_hir::lang_items::ITEM_REFS;\n use rustc_hir::weak_lang_items::WEAK_ITEMS_REFS;\n use rustc_middle::middle::lang_items::whitelisted;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::CrateType;\n+use rustc_span::symbol::sym;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n@@ -70,11 +72,21 @@ fn verify<'tcx>(tcx: TyCtxt<'tcx>, items: &lang_items::LanguageItems) {\n }\n \n impl<'a, 'tcx> Context<'a, 'tcx> {\n-    fn register(&mut self, name: Symbol, span: Span) {\n+    fn register(&mut self, name: Symbol, span: Span, hir_id: hir::HirId) {\n         if let Some(&item) = WEAK_ITEMS_REFS.get(&name) {\n             if self.items.require(item).is_err() {\n                 self.items.missing.push(item);\n             }\n+        } else if name == sym::count_code_region {\n+            // `core::intrinsics::code_count_region()` is (currently) the only `extern` lang item\n+            // that is never actually linked. It is not a `weak_lang_item` that can be registered\n+            // when used, and should be registered here instead.\n+            if let Some((item_index, _)) = ITEM_REFS.get(&*name.as_str()).cloned() {\n+                if self.items.items[item_index].is_none() {\n+                    let item_def_id = self.tcx.hir().local_def_id(hir_id).to_def_id();\n+                    self.items.items[item_index] = Some(item_def_id);\n+                }\n+            }\n         } else {\n             struct_span_err!(self.tcx.sess, span, E0264, \"unknown external lang item: `{}`\", name)\n                 .emit();\n@@ -91,7 +103,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n \n     fn visit_foreign_item(&mut self, i: &hir::ForeignItem<'_>) {\n         if let Some((lang_item, _)) = hir::lang_items::extract(&i.attrs) {\n-            self.register(lang_item, i.span);\n+            self.register(lang_item, i.span, i.hir_id);\n         }\n         intravisit::walk_foreign_item(self, i)\n     }"}, {"sha": "0acf7691681374387d2d5118b7ee2f2eeee3c8b0", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=d2cd59a0315809afa58df0196c34b33ee0a8c161", "patch": "@@ -35,10 +35,6 @@ fn resolve_instance<'tcx>(\n                 debug!(\" => intrinsic\");\n                 ty::InstanceDef::Intrinsic(def_id)\n             }\n-            ty::FnDef(def_id, _) if Some(def_id) == tcx.lang_items().count_code_region_fn() => {\n-                debug!(\" => injected placeholder function to be replaced\");\n-                ty::InstanceDef::InjectedCode(def_id)\n-            }\n             ty::FnDef(def_id, substs) if Some(def_id) == tcx.lang_items().drop_in_place_fn() => {\n                 let ty = substs.type_at(0);\n "}, {"sha": "3ec6973a17d567fb704eb158d5605ce28d682c00", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cd59a0315809afa58df0196c34b33ee0a8c161/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=d2cd59a0315809afa58df0196c34b33ee0a8c161", "patch": "@@ -347,6 +347,8 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 return;\n             }\n \n+            \"count_code_region\" => (0, vec![tcx.types.u32], tcx.mk_unit()),\n+\n             ref other => {\n                 struct_span_err!(\n                     tcx.sess,"}]}