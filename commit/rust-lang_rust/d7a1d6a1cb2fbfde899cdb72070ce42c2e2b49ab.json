{"sha": "d7a1d6a1cb2fbfde899cdb72070ce42c2e2b49ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YTFkNmExY2IyZmJmZGU4OTljZGI3MjA3MGNlNDJjMmUyYjQ5YWI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-15T12:00:58Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-15T12:00:58Z"}, "message": "Make trans understand by-ref bindings\n\nIssue #918", "tree": {"sha": "b0681207408bc619b486d449736911b424b1c31f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0681207408bc619b486d449736911b424b1c31f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a1d6a1cb2fbfde899cdb72070ce42c2e2b49ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a1d6a1cb2fbfde899cdb72070ce42c2e2b49ab", "html_url": "https://github.com/rust-lang/rust/commit/d7a1d6a1cb2fbfde899cdb72070ce42c2e2b49ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a1d6a1cb2fbfde899cdb72070ce42c2e2b49ab/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aad16112b1597b3276d04d674c50c36772e2697", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aad16112b1597b3276d04d674c50c36772e2697", "html_url": "https://github.com/rust-lang/rust/commit/8aad16112b1597b3276d04d674c50c36772e2697"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "a456608776efe5773e65b717f62fffd4c4a372cb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d7a1d6a1cb2fbfde899cdb72070ce42c2e2b49ab/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a1d6a1cb2fbfde899cdb72070ce42c2e2b49ab/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d7a1d6a1cb2fbfde899cdb72070ce42c2e2b49ab", "patch": "@@ -4444,7 +4444,7 @@ fn trans_be(cx: @block_ctxt, e: @ast::expr) : ast_util::is_call_expr(e) ->\n     ret trans_ret(cx, some(e));\n }\n \n-fn init_local(bcx: @block_ctxt, local: @ast::local) -> result {\n+fn init_local(bcx: @block_ctxt, local: @ast::local) -> @block_ctxt {\n     let ty = node_id_type(bcx_ccx(bcx), local.node.id);\n     let llptr = bcx.fcx.lllocals.get(local.node.id);\n     // Make a note to drop this slot on the way out.\n@@ -4476,7 +4476,7 @@ fn init_local(bcx: @block_ctxt, local: @ast::local) -> result {\n     bcx =\n         trans_alt::bind_irrefutable_pat(bcx, local.node.pat, llptr,\n                                         bcx.fcx.lllocals, false);\n-    ret rslt(bcx, llptr);\n+    ret bcx;\n \n     fn must_zero(ccx: @crate_ctxt, local: @ast::local) -> bool {\n         alt local.node.init {\n@@ -4513,6 +4513,14 @@ fn init_local(bcx: @block_ctxt, local: @ast::local) -> result {\n     }\n }\n \n+fn init_ref_local(bcx: @block_ctxt, local: @ast::local) -> @block_ctxt {\n+    let init_expr = option::get(local.node.init).expr;\n+    let val = trans_lval(bcx, init_expr);\n+    assert val.is_mem;\n+    ret trans_alt::bind_irrefutable_pat(bcx, local.node.pat, val.res.val,\n+                                        bcx.fcx.lllocals, false);\n+}\n+\n fn zero_alloca(cx: @block_ctxt, llptr: ValueRef, t: ty::t) -> result {\n     let bcx = cx;\n     let ccx = bcx_ccx(cx);\n@@ -4538,8 +4546,12 @@ fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> result {\n       ast::stmt_decl(d, _) {\n         alt d.node {\n           ast::decl_local(locals) {\n-            for (_, local) in locals {\n-                bcx = init_local(bcx, local).bcx;\n+            for (style, local) in locals {\n+                if style == ast::let_copy {\n+                    bcx = init_local(bcx, local);\n+                } else {\n+                    bcx = init_ref_local(bcx, local);\n+                }\n             }\n           }\n           ast::decl_item(i) { trans_item(cx.fcx.lcx, *i); }\n@@ -4646,15 +4658,14 @@ fn trans_fn_cleanups(fcx: @fn_ctxt, cx: @block_ctxt) {\n }\n \n iter block_locals(b: ast::blk) -> @ast::local {\n-\n-    // FIXME: putting from inside an iter block doesn't work, so we can't\n-    // use the index here.\n     for s: @ast::stmt in b.node.stmts {\n         alt s.node {\n           ast::stmt_decl(d, _) {\n             alt d.node {\n               ast::decl_local(locals) {\n-                for (_, local) in locals { put local; }\n+                for (style, local) in locals {\n+                    if style == ast::let_copy { put local; }\n+                }\n               }\n               _ {/* fall through */ }\n             }"}]}