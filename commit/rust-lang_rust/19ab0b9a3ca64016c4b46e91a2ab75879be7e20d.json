{"sha": "19ab0b9a3ca64016c4b46e91a2ab75879be7e20d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YWIwYjlhM2NhNjQwMTZjNGI0NmU5MWEyYWI3NTg3OWJlN2UyMGQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-27T06:12:40Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-27T15:07:37Z"}, "message": "Rollup merge of #22823 - kmcallister:fix-21370, r=huonw\n\n Fixes #21370.\n\n`unused-macro-with-follow-violation.rs` was already handled correctly. That test is just for good measure. :)\n\nI have a more involved plan to clean this up, but it ran into difficulties such as #22814.", "tree": {"sha": "c4ba97e1684618175be3f423f7bcaec3bbb7c524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4ba97e1684618175be3f423f7bcaec3bbb7c524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19ab0b9a3ca64016c4b46e91a2ab75879be7e20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19ab0b9a3ca64016c4b46e91a2ab75879be7e20d", "html_url": "https://github.com/rust-lang/rust/commit/19ab0b9a3ca64016c4b46e91a2ab75879be7e20d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19ab0b9a3ca64016c4b46e91a2ab75879be7e20d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a97fbab4b7bdfc0ad4e23c46a65ba3b685eb730", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a97fbab4b7bdfc0ad4e23c46a65ba3b685eb730", "html_url": "https://github.com/rust-lang/rust/commit/6a97fbab4b7bdfc0ad4e23c46a65ba3b685eb730"}, {"sha": "65ea9110bd930dc74b0fc37bf151dbbce80fe4ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/65ea9110bd930dc74b0fc37bf151dbbce80fe4ee", "html_url": "https://github.com/rust-lang/rust/commit/65ea9110bd930dc74b0fc37bf151dbbce80fe4ee"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "67011ad21a6dd8eec7111f7c07929e9664a0f7ce", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19ab0b9a3ca64016c4b46e91a2ab75879be7e20d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ab0b9a3ca64016c4b46e91a2ab75879be7e20d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=19ab0b9a3ca64016c4b46e91a2ab75879be7e20d", "patch": "@@ -334,6 +334,10 @@ fn check_matcher<'a, I>(cx: &mut ExtCtxt, matcher: I, follow: &Token)\n                 let tok = if let TtToken(_, ref tok) = *token { tok } else { unreachable!() };\n                 // If T' is in the set FOLLOW(NT), continue. Else, reject.\n                 match (&next_token, is_in_follow(cx, &next_token, frag_spec.as_str())) {\n+                    (_, Err(msg)) => {\n+                        cx.span_err(sp, &msg);\n+                        continue\n+                    }\n                     (&Eof, _) => return Some((sp, tok.clone())),\n                     (_, Ok(true)) => continue,\n                     (next, Ok(false)) => {\n@@ -343,10 +347,6 @@ fn check_matcher<'a, I>(cx: &mut ExtCtxt, matcher: I, follow: &Token)\n                                                  token_to_string(next)));\n                         continue\n                     },\n-                    (_, Err(msg)) => {\n-                        cx.span_err(sp, &msg);\n-                        continue\n-                    }\n                 }\n             },\n             TtSequence(sp, ref seq) => {"}, {"sha": "b868b79365d9f683755398adf8b5dc2d496d7292", "filename": "src/test/compile-fail/unused-macro-with-bad-frag-spec.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/19ab0b9a3ca64016c4b46e91a2ab75879be7e20d/src%2Ftest%2Fcompile-fail%2Funused-macro-with-bad-frag-spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ab0b9a3ca64016c4b46e91a2ab75879be7e20d/src%2Ftest%2Fcompile-fail%2Funused-macro-with-bad-frag-spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-macro-with-bad-frag-spec.rs?ref=19ab0b9a3ca64016c4b46e91a2ab75879be7e20d", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #21370\n+\n+macro_rules! test {\n+    ($wrong:t_ty) => () //~ ERROR invalid fragment specifier `t_ty`\n+}\n+\n+fn main() { }"}, {"sha": "e9d09bb6ad9cd739a7a4a700e9063a5e0ef4165f", "filename": "src/test/compile-fail/unused-macro-with-follow-violation.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/19ab0b9a3ca64016c4b46e91a2ab75879be7e20d/src%2Ftest%2Fcompile-fail%2Funused-macro-with-follow-violation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ab0b9a3ca64016c4b46e91a2ab75879be7e20d/src%2Ftest%2Fcompile-fail%2Funused-macro-with-follow-violation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-macro-with-follow-violation.rs?ref=19ab0b9a3ca64016c4b46e91a2ab75879be7e20d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! test {\n+    ($e:expr +) => () //~ ERROR not allowed for `expr` fragments\n+}\n+\n+fn main() { }"}]}