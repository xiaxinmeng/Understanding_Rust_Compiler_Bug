{"sha": "2db1f864e23e38d26b6dfb1e0a00829122a6aefd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYjFmODY0ZTIzZTM4ZDI2YjZkZmIxZTBhMDA4MjkxMjJhNmFlZmQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-24T00:16:34Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-24T00:16:34Z"}, "message": "Declare the global and upcall glues as ValueRefs in rustc's trans.", "tree": {"sha": "a202f8803da270d30401db8d39b0f01b6632df86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a202f8803da270d30401db8d39b0f01b6632df86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2db1f864e23e38d26b6dfb1e0a00829122a6aefd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2db1f864e23e38d26b6dfb1e0a00829122a6aefd", "html_url": "https://github.com/rust-lang/rust/commit/2db1f864e23e38d26b6dfb1e0a00829122a6aefd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2db1f864e23e38d26b6dfb1e0a00829122a6aefd/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bba4cae1b8b6422a4d9569c7b84139c53834b4eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bba4cae1b8b6422a4d9569c7b84139c53834b4eb", "html_url": "https://github.com/rust-lang/rust/commit/bba4cae1b8b6422a4d9569c7b84139c53834b4eb"}], "stats": {"total": 117, "additions": 95, "deletions": 22}, "files": [{"sha": "1a349a7b8db86fb62978a534c824cdc665108c3b", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2db1f864e23e38d26b6dfb1e0a00829122a6aefd/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db1f864e23e38d26b6dfb1e0a00829122a6aefd/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=2db1f864e23e38d26b6dfb1e0a00829122a6aefd", "patch": "@@ -34,6 +34,8 @@ const int calltup_elt_iterator_args = 5;\n \n const int worst_case_glue_call_args = 7;\n \n+const int n_upcall_glues = 7;\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "bfe502009c7276515dbb064f93df71b52ff0d26e", "filename": "src/comp/back/x86.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2db1f864e23e38d26b6dfb1e0a00829122a6aefd/src%2Fcomp%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db1f864e23e38d26b6dfb1e0a00829122a6aefd/src%2Fcomp%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86.rs?ref=2db1f864e23e38d26b6dfb1e0a00829122a6aefd", "patch": "@@ -1,15 +1,11 @@\n import lib.llvm.llvm;\n import lib.llvm.llvm.ModuleRef;\n import std._str;\n-import std._int;\n import std._vec;\n+import util.common.istr;\n \n const int wordsz = 4;\n \n-fn istr(int i) -> str {\n-    ret _int.to_str(i, 10u);\n-}\n-\n fn wstr(int i) -> str {\n     ret istr(i * wordsz);\n }\n@@ -122,6 +118,13 @@ fn decl_glue(int align, str prefix, str name, vec[str] insns) -> str {\n }\n \n \n+fn decl_upcall_glue(int align, str prefix, uint n) -> str {\n+    let int i = n as int;\n+    ret decl_glue(align, prefix,\n+                  \"rust_upcall_\" + istr(i),\n+                  upcall_glue(i));\n+}\n+\n fn get_module_asm() -> str {\n     auto align = 4;\n     auto prefix = \"\";\n@@ -133,20 +136,15 @@ fn get_module_asm() -> str {\n \n             decl_glue(align, prefix,\n                       \"rust_yield_glue\",\n-                      rust_yield_glue()));\n-\n-    let int i = 0;\n-    let int n_upcall_glues = 7;\n-    while (i < n_upcall_glues) {\n-        glues += decl_glue(align, prefix,\n-                           \"rust_upcall_\" + istr(i),\n-                           upcall_glue(i));\n-        i += 1;\n-    }\n+                      rust_yield_glue()))\n+\n+        + _vec.init_fn[str](bind decl_upcall_glue(align, prefix, _),\n+                            abi.n_upcall_glues as uint);\n \n     ret _str.connect(glues, \"\\n\\n\");\n }\n \n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "e5db62c7946dcaf4997b76059f15083a73413a1a", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2db1f864e23e38d26b6dfb1e0a00829122a6aefd/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db1f864e23e38d26b6dfb1e0a00829122a6aefd/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=2db1f864e23e38d26b6dfb1e0a00829122a6aefd", "patch": "@@ -25,8 +25,19 @@ type LongLong = i64;\n type Long = i32;\n type Bool = int;\n \n-fn True() -> Bool { ret 1; }\n-fn False() -> Bool { ret 0; }\n+\n+const Bool True = 1;\n+const Bool False = 0;\n+\n+// Consts for the LLVM CallConv type, pre-cast to uint.\n+// FIXME: figure out a way to merge these with the native\n+// typedef and/or a tag type in the native module below.\n+\n+const uint LLVMCCallConv = 0u;\n+const uint LLVMFastCallConv = 8u;\n+const uint LLVMColdCallConv = 9u;\n+const uint LLVMX86StdcallCallConv = 64u;\n+const uint LLVMX86FastcallCallConv = 65u;\n \n \n native mod llvm = llvm_lib {"}, {"sha": "b1e1306e48f34fd5fdd5a11ea922aebf46cac97f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 62, "deletions": 5, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2db1f864e23e38d26b6dfb1e0a00829122a6aefd/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db1f864e23e38d26b6dfb1e0a00829122a6aefd/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=2db1f864e23e38d26b6dfb1e0a00829122a6aefd", "patch": "@@ -6,6 +6,9 @@ import std._vec.rustrt.vbuf;\n import front.ast;\n import driver.session;\n import back.x86;\n+import back.abi;\n+\n+import util.common.istr;\n \n import lib.llvm.llvm;\n import lib.llvm.builder;\n@@ -18,8 +21,13 @@ import lib.llvm.llvm.BasicBlockRef;\n import lib.llvm.False;\n import lib.llvm.True;\n \n+type glue_fns = rec(ValueRef activate_glue,\n+                    ValueRef yield_glue,\n+                    vec[ValueRef] upcall_glues);\n+\n type trans_ctxt = rec(session.session sess,\n                       ModuleRef llmod,\n+                      @glue_fns glues,\n                       str path);\n \n fn T_nil() -> TypeRef {\n@@ -34,9 +42,53 @@ fn T_fn(vec[TypeRef] inputs, TypeRef output) -> TypeRef {\n     ret llvm.LLVMFunctionType(output,\n                               _vec.buf[TypeRef](inputs),\n                               _vec.len[TypeRef](inputs),\n-                              False());\n+                              False);\n+}\n+\n+fn T_ptr(TypeRef t) -> TypeRef {\n+    ret llvm.LLVMPointerType(t, 0u);\n+}\n+\n+fn T_struct(vec[TypeRef] elts) -> TypeRef {\n+    ret llvm.LLVMStructType(_vec.buf[TypeRef](elts),\n+                            _vec.len[TypeRef](elts),\n+                            False);\n+}\n+\n+fn T_opaque() -> TypeRef {\n+    ret llvm.LLVMOpaqueType();\n+}\n+\n+fn T_task() -> TypeRef {\n+    ret T_struct(vec(T_int(),      // Refcount\n+                     T_opaque())); // Rest is opaque for now\n+}\n+\n+fn decl_cdecl_fn(ModuleRef llmod, str name,\n+                 vec[TypeRef] inputs, TypeRef output) -> ValueRef {\n+    let TypeRef llty = T_fn(inputs, output);\n+    let ValueRef llfn =\n+        llvm.LLVMAddFunction(llmod, _str.buf(name), llty);\n+    llvm.LLVMSetFunctionCallConv(llfn, lib.llvm.LLVMCCallConv);\n+    ret llfn;\n+}\n+\n+fn decl_glue(ModuleRef llmod, str s) -> ValueRef {\n+    ret decl_cdecl_fn(llmod, s, vec(T_ptr(T_task())), T_nil());\n }\n \n+fn decl_upcall(ModuleRef llmod, uint _n) -> ValueRef {\n+    let int n = _n as int;\n+    let str s = \"rust_upcall_\" + istr(n);\n+    let vec[TypeRef] args =\n+        vec(T_ptr(T_task()), // taskptr\n+            T_int())         // callee\n+        + _vec.init_elt[TypeRef](T_int(), n as uint);\n+\n+    ret decl_cdecl_fn(llmod, s, args, T_int());\n+}\n+\n+\n type terminator = fn(&trans_ctxt cx, builder b);\n \n fn trans_log(&trans_ctxt cx, builder b, &ast.atom a) {\n@@ -71,10 +123,9 @@ fn trans_block(&trans_ctxt cx, ValueRef llfn, &ast.block b, terminator t) {\n \n fn trans_fn(&trans_ctxt cx, &ast._fn f) {\n     let vec[TypeRef] args = vec();\n-    let TypeRef llty = T_fn(args, T_nil());\n-    let ValueRef llfn =\n-        llvm.LLVMAddFunction(cx.llmod, _str.buf(cx.path), llty);\n+    let ValueRef llfn = decl_cdecl_fn(cx.llmod, cx.path, args, T_nil());\n     auto term = default_terminate;\n+\n     trans_block(cx, llfn, f.body, term);\n }\n \n@@ -103,7 +154,13 @@ fn trans_crate(session.session sess, ast.crate crate) {\n \n     llvm.LLVMSetModuleInlineAsm(llmod, _str.buf(x86.get_module_asm()));\n \n-    auto cx = rec(sess=sess, llmod=llmod, path=\"\");\n+    auto glues = @rec(activate_glue = decl_glue(llmod, \"rust_activate_glue\"),\n+                      yield_glue = decl_glue(llmod, \"rust_yield_glue\"),\n+                      upcall_glues =\n+                      _vec.init_fn[ValueRef](bind decl_upcall(llmod, _),\n+                                             abi.n_upcall_glues as uint));\n+\n+    auto cx = rec(sess=sess, llmod=llmod, glues=glues, path=\"\");\n     trans_mod(cx, crate.module);\n \n     llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(\"rust_out.bc\"));"}, {"sha": "7456a8c802acfc2b58fa9649638f4482d5a6f314", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2db1f864e23e38d26b6dfb1e0a00829122a6aefd/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db1f864e23e38d26b6dfb1e0a00829122a6aefd/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=2db1f864e23e38d26b6dfb1e0a00829122a6aefd", "patch": "@@ -1,4 +1,5 @@\n import std._uint;\n+import std._int;\n \n type pos = rec(uint line, uint col);\n type span = rec(str filename, pos lo, pos hi);\n@@ -41,6 +42,10 @@ fn new_str_hash[V]() -> std.map.hashmap[str,V] {\n     ret std.map.mk_hashmap[str,V](hasher, eqer);\n }\n \n+fn istr(int i) -> str {\n+    ret _int.to_str(i, 10u);\n+}\n+\n //\n // Local Variables:\n // mode: rust"}]}