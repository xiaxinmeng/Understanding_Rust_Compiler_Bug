{"sha": "98447f523603ce8ca5a258f216f6fcbd90fe114f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NDQ3ZjUyMzYwM2NlOGNhNWEyNThmMjE2ZjZmY2JkOTBmZTExNGY=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-22T05:04:29Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-23T16:00:19Z"}, "message": "(core::str) mostly rename len -> len_chars", "tree": {"sha": "0cff11ac753d9a2a71bc69bd2e1d64baf8ae4248", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cff11ac753d9a2a71bc69bd2e1d64baf8ae4248"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98447f523603ce8ca5a258f216f6fcbd90fe114f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98447f523603ce8ca5a258f216f6fcbd90fe114f", "html_url": "https://github.com/rust-lang/rust/commit/98447f523603ce8ca5a258f216f6fcbd90fe114f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98447f523603ce8ca5a258f216f6fcbd90fe114f/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a6498668f2f4d3eff393809418b565d027b35bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6498668f2f4d3eff393809418b565d027b35bd", "html_url": "https://github.com/rust-lang/rust/commit/7a6498668f2f4d3eff393809418b565d027b35bd"}], "stats": {"total": 106, "additions": 54, "deletions": 52}, "files": [{"sha": "8e8996551fa5128c837a1b9fa5e7170b4fe0d1e1", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -174,10 +174,10 @@ fn print(s: str) {\n }\n \n fn rest(s: str, start: uint) -> str {\n-    if (start >= str::len(s)) {\n+    if (start >= str::len_chars(s)) {\n         \"\"\n     } else {\n-        str::slice(s, start, str::len(s))\n+        str::slice(s, start, str::len_chars(s))\n     }\n }\n \n@@ -689,7 +689,7 @@ fn cmd_install(c: cargo) unsafe {\n         alt str::index(uuid, '/') {\n             option::some(idx) {\n                let source = str::slice(uuid, 0u, idx);\n-               uuid = str::slice(uuid, idx + 1u, str::len(uuid));\n+               uuid = str::slice(uuid, idx + 1u, str::len_chars(uuid));\n                install_uuid_specific(c, wd, source, uuid);\n             }\n             option::none {\n@@ -701,7 +701,7 @@ fn cmd_install(c: cargo) unsafe {\n         alt str::index(name, '/') {\n             option::some(idx) {\n                let source = str::slice(name, 0u, idx);\n-               name = str::slice(name, idx + 1u, str::len(name));\n+               name = str::slice(name, idx + 1u, str::len_chars(name));\n                install_named_specific(c, wd, source, name);\n             }\n             option::none {"}, {"sha": "f0c97588f59676178a383cb3bb11731eb47c56b1", "filename": "src/comp/driver/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdiagnostic.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -210,7 +210,7 @@ fn highlight_lines(cm: codemap::codemap, sp: span,\n     if elided {\n         let last_line = display_lines[vec::len(display_lines) - 1u];\n         let s = #fmt[\"%s:%u \", fm.name, last_line + 1u];\n-        let indent = str::len(s);\n+        let indent = str::len_bytes(s);\n         let out = \"\";\n         while indent > 0u { out += \" \"; indent -= 1u; }\n         out += \"...\\n\";\n@@ -228,7 +228,7 @@ fn highlight_lines(cm: codemap::codemap, sp: span,\n         while num > 0u { num /= 10u; digits += 1u; }\n \n         // indent past |name:## | and the 0-offset column location\n-        let left = str::len(fm.name) + digits + lo.col + 3u;\n+        let left = str::len_bytes(fm.name) + digits + lo.col + 3u;\n         let s = \"\";\n         while left > 0u { str::push_char(s, ' '); left -= 1u; }\n "}, {"sha": "6c0182c3411497f0c4d0050543ad1bb68adad39a", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -158,9 +158,9 @@ fn span_to_lines(sp: span, cm: codemap::codemap) -> @file_lines {\n fn get_line(fm: filemap, line: int) -> str unsafe {\n     let begin: uint = fm.lines[line].byte - fm.start_pos.byte;\n     let end = alt str::byte_index_from(*fm.src, '\\n' as u8, begin,\n-                                  str::len(*fm.src)) {\n+                                  str::len_bytes(*fm.src)) {\n       some(e) { e }\n-      none { str::len(*fm.src) }\n+      none { str::len_bytes(*fm.src) }\n     };\n     str::unsafe::slice_bytes(*fm.src, begin, end)\n }"}, {"sha": "e53307b474abf389bab7e9804543cd92662ba02e", "filename": "src/comp/syntax/ext/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -214,7 +214,7 @@ fn finish<T: qq_helper>\n         if (j < g_len && i == cx.gather[j].lo) {\n             assert ch == '$';\n             let repl = #fmt(\"$%u \", j);\n-            state = skip(str::len(repl));\n+            state = skip(str::len_chars(repl));\n             str2 += repl;\n         }\n         alt state {"}, {"sha": "9114caea2d4e2ba904dd03d7720d06e91d85d323", "filename": "src/comp/syntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -491,7 +491,7 @@ fn end(p: printer) { p.pretty_print(END); }\n fn eof(p: printer) { p.pretty_print(EOF); }\n \n fn word(p: printer, wrd: str) {\n-    p.pretty_print(STRING(wrd, str::len(wrd) as int));\n+    p.pretty_print(STRING(wrd, str::len_bytes(wrd) as int));\n }\n \n fn huge_word(p: printer, wrd: str) {"}, {"sha": "288d8a38dda7d16e661067281e7bc64462dbc21c", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -204,7 +204,7 @@ fn head(s: ps, w: str) {\n     // outer-box is consistent\n     cbox(s, indent_unit);\n     // head-box is inconsistent\n-    ibox(s, str::len(w) + 1u);\n+    ibox(s, str::len_bytes(w) + 1u);\n     // keyword that starts the head\n     word_nbsp(s, w);\n }"}, {"sha": "152df70e7a4f444279c18652698ef1c49971daf1", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -287,7 +287,7 @@ fn check_variants_T<T: copy>(\n \n fn last_part(filename: str) -> str {\n   let ix = option::get(str::rindex(filename, '/'));\n-  str::slice(filename, ix + 1u, str::len(filename) - 3u)\n+  str::slice(filename, ix + 1u, str::len_chars(filename) - 3u)\n }\n \n enum happiness { passed, cleanly_rejected(str), known_bug(str), failed(str), }"}, {"sha": "5fca4d69f3af1587f89a789572d9aba0fec670ee", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -325,7 +325,7 @@ mod rt {\n             alt cv.precision {\n               count_implied { s }\n               count_is(max) {\n-                if max as uint < str::len(s) {\n+                if max as uint < str::len_chars(s) {\n                     str::substr(s, 0u, max as uint)\n                 } else { s }\n               }\n@@ -368,7 +368,7 @@ mod rt {\n                 \"\"\n             } else {\n                 let s = uint::to_str(num, radix);\n-                let len = str::len(s);\n+                let len = str::len_chars(s);\n                 if len < prec {\n                     let diff = prec - len;\n                     let pad = str_init_elt(diff, '0');\n@@ -400,7 +400,7 @@ mod rt {\n             uwidth = width as uint;\n           }\n         }\n-        let strlen = str::len(s);\n+        let strlen = str::len_chars(s);\n         if uwidth <= strlen { ret s; }\n         let padchar = ' ';\n         let diff = uwidth - strlen;"}, {"sha": "de8ba2f28b6ba95019b6c4ad663b3cbc41a1b548", "filename": "src/libcore/str.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -86,7 +86,7 @@ export\n    is_not_empty,\n    is_whitespace,\n    len_bytes,\n-   len_chars, len,\n+   len_chars, //len,\n \n    // Misc\n    // FIXME: perhaps some more of this section shouldn't be exported?\n@@ -529,7 +529,7 @@ fn split(ss: str, sepfn: fn(cc: char)->bool) -> [str] {\n         }\n     });\n \n-    if len(accum) >= 0u || ends_with_sep {\n+    if len_chars(accum) >= 0u || ends_with_sep {\n         vv += [accum];\n     }\n \n@@ -601,7 +601,7 @@ separated by whitespace\n */\n fn words(ss: str) -> [str] {\n     ret vec::filter( split(ss, {|cc| char::is_whitespace(cc)}),\n-                     {|w| 0u < str::len(w)});\n+                     {|w| 0u < str::len_chars(w)});\n }\n \n /*\n@@ -611,7 +611,7 @@ Create a vector of substrings of size `nn`\n */\n fn windowed(nn: uint, ss: str) -> [str] {\n     let ww = [];\n-    let len = str::len(ss);\n+    let len = str::len_chars(ss);\n \n     assert 1u <= nn;\n \n@@ -883,7 +883,7 @@ fn byte_index_from(s: str, b: u8, start: uint, end: uint) -> option<uint> {\n // (as option some/none)\n fn rindex(ss: str, cc: char) -> option<uint> {\n     let bii = len_bytes(ss);\n-    let cii = len(ss);\n+    let cii = len_chars(ss);\n     while bii > 0u {\n         let {ch, prev} = char_range_at_reverse(ss, bii);\n         cii -= 1u;\n@@ -1008,8 +1008,8 @@ haystack - The string to look in\n needle - The string to look for\n */\n fn ends_with(haystack: str, needle: str) -> bool {\n-    let haystack_len: uint = len(haystack);\n-    let needle_len: uint = len(needle);\n+    let haystack_len: uint = len_chars(haystack);\n+    let needle_len: uint = len_chars(needle);\n     ret if needle_len == 0u {\n             true\n         } else if needle_len > haystack_len {\n@@ -1079,7 +1079,9 @@ fn len(s: str) -> uint {\n     substr_len_chars(s, 0u, len_bytes(s))\n }\n \n-fn len_chars(s: str) -> uint { len(s) }\n+fn len_chars(s: str) -> uint {\n+    substr_len_chars(s, 0u, len_bytes(s))\n+}\n \n /*\n Section: Misc\n@@ -1529,14 +1531,14 @@ mod tests {\n         assert (len_bytes(\"\\u2620\") == 3u);\n         assert (len_bytes(\"\\U0001d11e\") == 4u);\n \n-        assert (len(\"\") == 0u);\n-        assert (len(\"hello world\") == 11u);\n-        assert (len(\"\\x63\") == 1u);\n-        assert (len(\"\\xa2\") == 1u);\n-        assert (len(\"\\u03c0\") == 1u);\n-        assert (len(\"\\u2620\") == 1u);\n-        assert (len(\"\\U0001d11e\") == 1u);\n-        assert (len(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\") == 19u);\n+        assert (len_chars(\"\") == 0u);\n+        assert (len_chars(\"hello world\") == 11u);\n+        assert (len_chars(\"\\x63\") == 1u);\n+        assert (len_chars(\"\\xa2\") == 1u);\n+        assert (len_chars(\"\\u03c0\") == 1u);\n+        assert (len_chars(\"\\u2620\") == 1u);\n+        assert (len_chars(\"\\U0001d11e\") == 1u);\n+        assert (len_chars(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\") == 19u);\n     }\n \n     #[test]"}, {"sha": "ff2188461504d6acd5c45bbf4f8917729352a992", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -45,7 +45,7 @@ fn splitDirnameBasename (pp: path) -> {dirname: str, basename: str} {\n     }\n \n     ret {dirname: str::slice(pp, 0u, ii),\n-         basename: str::slice(pp, ii + 1u, str::len(pp))};\n+         basename: str::slice(pp, ii + 1u, str::len_chars(pp))};\n }\n \n /*"}, {"sha": "e925cd16e335d1f57151ff48e20767413c290201", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -79,7 +79,7 @@ A description of a possible option\n type opt = {name: name, hasarg: hasarg, occur: occur};\n \n fn mkname(nm: str) -> name {\n-    ret if str::len(nm) == 1u {\n+    ret if str::len_bytes(nm) == 1u {\n             short(str::char_at(nm, 0u))\n         } else { long(nm) };\n }"}, {"sha": "23d70a78bf61abc1464a6f681205bba4aa004a81", "filename": "src/libstd/json.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -70,8 +70,8 @@ fn to_str(j: json) -> str {\n }\n \n fn rest(s: str) -> str {\n-    assert(str::len(s) >= 1u);\n-    str::slice(s, 1u, str::len(s))\n+    assert(str::len_chars(s) >= 1u);\n+    str::slice(s, 1u, str::len_chars(s))\n }\n \n fn from_str_str(s: str) -> (option<json>, str) {\n@@ -99,7 +99,7 @@ fn from_str_str(s: str) -> (option<json>, str) {\n             cont;\n         } else if (c == '\"') {\n             ret (some(string(res)),\n-                 str::slice(s, pos, str::len(s)));\n+                 str::slice(s, pos, str::len_chars(s)));\n         }\n         res = res + str::from_char(c);\n     }\n@@ -200,12 +200,12 @@ fn from_str_float(s: str) -> (option<json>, str) {\n             }\n             '.' { break; }\n             _ { ret (some(num(neg * res)),\n-                     str::slice(s, opos, str::len(s))); }\n+                     str::slice(s, opos, str::len_chars(s))); }\n         }\n     }\n \n     if pos == len {\n-        ret (some(num(neg * res)), str::slice(s, pos, str::len(s)));\n+        ret (some(num(neg * res)), str::slice(s, pos, str::len_chars(s)));\n     }\n \n     let dec = 1f;\n@@ -220,25 +220,25 @@ fn from_str_float(s: str) -> (option<json>, str) {\n                 res += (((c as int) - ('0' as int)) as float) * dec;\n             }\n             _ { ret (some(num(neg * res)),\n-                     str::slice(s, opos, str::len(s))); }\n+                     str::slice(s, opos, str::len_chars(s))); }\n         }\n     }\n-    ret (some(num(neg * res)), str::slice(s, pos, str::len(s)));\n+    ret (some(num(neg * res)), str::slice(s, pos, str::len_chars(s)));\n }\n \n fn from_str_bool(s: str) -> (option<json>, str) {\n     if (str::starts_with(s, \"true\")) {\n-        (some(boolean(true)), str::slice(s, 4u, str::len(s)))\n+        (some(boolean(true)), str::slice(s, 4u, str::len_chars(s)))\n     } else if (str::starts_with(s, \"false\")) {\n-        (some(boolean(false)), str::slice(s, 5u, str::len(s)))\n+        (some(boolean(false)), str::slice(s, 5u, str::len_chars(s)))\n     } else {\n         (none, s)\n     }\n }\n \n fn from_str_null(s: str) -> (option<json>, str) {\n     if (str::starts_with(s, \"null\")) {\n-        (some(null), str::slice(s, 4u, str::len(s)))\n+        (some(null), str::slice(s, 4u, str::len_chars(s)))\n     } else {\n         (none, s)\n     }"}, {"sha": "33fac40fcccc39bfbe8dc1f6b63608d13d222a98", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -77,7 +77,7 @@ fn mk_rng() -> rng {\n             let i = 0u;\n             while (i < len) {\n                 let n = rustrt::rand_next(**self) as uint %\n-                    str::len(charset);\n+                    str::len_bytes(charset);\n                 s = s + str::from_char(str::char_at(charset, n));\n                 i += 1u;\n             }\n@@ -130,8 +130,8 @@ mod tests {\n         log(debug, r.gen_str(10u));\n         log(debug, r.gen_str(10u));\n         log(debug, r.gen_str(10u));\n-        assert(str::len(r.gen_str(10u)) == 10u);\n-        assert(str::len(r.gen_str(16u)) == 16u);\n+        assert(str::len_bytes(r.gen_str(10u)) == 10u);\n+        assert(str::len_bytes(r.gen_str(16u)) == 16u);\n     }\n }\n "}, {"sha": "3f330c3586d463e81c216c8880bfee8029494391", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -1373,7 +1373,7 @@ mod tests {\n         let sample = @\"0123456789ABCDE\";\n         let r      = of_str(sample);\n \n-        assert char_len(r) == str::len(*sample);\n+        assert char_len(r) == str::len_chars(*sample);\n         assert rope_to_string(r) == *sample;\n     }\n \n@@ -1384,7 +1384,7 @@ mod tests {\n         while i < 10 { *buf = *buf + *buf; i+=1;}\n         let sample = @*buf;\n         let r      = of_str(sample);\n-        assert char_len(r) == str::len(*sample);\n+        assert char_len(r) == str::len_chars(*sample);\n         assert rope_to_string(r) == *sample;\n \n         let string_iter = 0u;\n@@ -1427,7 +1427,7 @@ mod tests {\n             }\n         }\n \n-        assert len == str::len(*sample);\n+        assert len == str::len_chars(*sample);\n     }\n \n     #[test]"}, {"sha": "82ae2ff8fed7b7b61de0029e7c892431d3305b2c", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -175,7 +175,7 @@ fn parse_desc(desc: str) -> (option<str>, option<str>) {\n \n     if check vec::is_not_empty(paras) {\n         let maybe_brief = vec::head(paras);\n-        if str::len(maybe_brief) <= max_brief_len {\n+        if str::len_bytes(maybe_brief) <= max_brief_len {\n             let desc_paras = vec::tail(paras);\n             let desc = if vec::is_not_empty(desc_paras) {\n                 some(str::connect(desc_paras, \"\\n\\n\"))"}, {"sha": "d8f56e20479446999391853884ab0b682049b94d", "filename": "src/rustdoc/unindent_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Frustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Frustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Funindent_pass.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -68,7 +68,7 @@ fn unindent(s: str) -> str {\n                 line\n             } else {\n                 assert str::len_bytes(line) >= min_indent;\n-                str::slice(line, min_indent, str::len(line))\n+                str::slice(line, min_indent, str::len_chars(line))\n             }\n         };\n         str::connect(unindented, \"\\n\")"}, {"sha": "fbb66b5a1ca48b44ce5170a0c0020626f1ea4464", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98447f523603ce8ca5a258f216f6fcbd90fe114f/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=98447f523603ce8ca5a258f216f6fcbd90fe114f", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     let s: str = str::from_chars(chs);\n \n     assert (str::len_bytes(s) == 10u);\n-    assert (str::len(s) == 4u);\n+    assert (str::len_chars(s) == 4u);\n     assert (vec::len::<char>(str::chars(s)) == 4u);\n     assert (str::eq(str::from_chars(str::chars(s)), s));\n     assert (str::char_at(s, 0u) == 'e');"}]}