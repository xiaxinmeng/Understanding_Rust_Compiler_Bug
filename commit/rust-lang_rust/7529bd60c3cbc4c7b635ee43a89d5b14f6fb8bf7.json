{"sha": "7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MjliZDYwYzNjYmM0YzdiNjM1ZWU0M2E4OWQ1YjE0ZjZmYjhiZjc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-05T23:44:28Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-07T16:30:00Z"}, "message": "std: Remove a double-box in ReentrantMutex\n\nPerform unsafe initialization up front and then only afterward the mutex is in\nplace do we initialize it.", "tree": {"sha": "3497eae8c3d88f0f1b5c1e9fb3cf289b751c414e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3497eae8c3d88f0f1b5c1e9fb3cf289b751c414e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7", "html_url": "https://github.com/rust-lang/rust/commit/7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a031325e83b8f050f840395239197ea87361ada5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a031325e83b8f050f840395239197ea87361ada5", "html_url": "https://github.com/rust-lang/rust/commit/a031325e83b8f050f840395239197ea87361ada5"}], "stats": {"total": 47, "additions": 25, "deletions": 22}, "files": [{"sha": "1a467580672b3740ce62720ea3e41799013e1a5f", "filename": "src/libstd/sys/common/remutex.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs?ref=7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7", "patch": "@@ -19,9 +19,9 @@ use sys::mutex as sys;\n \n /// A re-entrant mutual exclusion\n ///\n-/// This mutex will block *other* threads waiting for the lock to become available. The thread\n-/// which has already locked the mutex can lock it multiple times without blocking, preventing a\n-/// common source of deadlocks.\n+/// This mutex will block *other* threads waiting for the lock to become\n+/// available. The thread which has already locked the mutex can lock it\n+/// multiple times without blocking, preventing a common source of deadlocks.\n pub struct ReentrantMutex<T> {\n     inner: Box<sys::ReentrantMutex>,\n     poison: poison::Flag,\n@@ -51,10 +51,14 @@ impl<'a, T> !marker::Send for ReentrantMutexGuard<'a, T> {}\n impl<T> ReentrantMutex<T> {\n     /// Creates a new reentrant mutex in an unlocked state.\n     pub fn new(t: T) -> ReentrantMutex<T> {\n-        ReentrantMutex {\n-            inner: box unsafe { sys::ReentrantMutex::new() },\n-            poison: poison::FLAG_INIT,\n-            data: t,\n+        unsafe {\n+            let mut mutex = ReentrantMutex {\n+                inner: box sys::ReentrantMutex::uninitialized(),\n+                poison: poison::FLAG_INIT,\n+                data: t,\n+            };\n+            mutex.inner.init();\n+            return mutex\n         }\n     }\n "}, {"sha": "70d14f63dbcc62f25b60d1c7d965c38acbc36d13", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7", "patch": "@@ -69,30 +69,27 @@ impl Mutex {\n     }\n }\n \n-// FIXME: remove the box, because box happens twice now, once at the common layer and once here.\n-// Box is necessary here, because mutex may not change address after it is intialised on some\n-// platforms. Regular Mutex above handles this by offloading intialisation to the OS on first lock.\n-// Sadly, as far as reentrant mutexes go, this scheme is not quite portable and we must initialise\n-// when we create the mutex, in the `new`.\n-pub struct ReentrantMutex { inner: Box<UnsafeCell<ffi::pthread_mutex_t>> }\n+pub struct ReentrantMutex { inner: UnsafeCell<ffi::pthread_mutex_t> }\n \n unsafe impl Send for ReentrantMutex {}\n unsafe impl Sync for ReentrantMutex {}\n \n impl ReentrantMutex {\n-    pub unsafe fn new() -> ReentrantMutex {\n-        let mutex = ReentrantMutex { inner: box mem::uninitialized() };\n+    pub unsafe fn uninitialized() -> ReentrantMutex {\n+        ReentrantMutex { inner: mem::uninitialized() }\n+    }\n+\n+    pub unsafe fn init(&mut self) {\n         let mut attr: ffi::pthread_mutexattr_t = mem::uninitialized();\n         let result = ffi::pthread_mutexattr_init(&mut attr as *mut _);\n         debug_assert_eq!(result, 0);\n         let result = ffi::pthread_mutexattr_settype(&mut attr as *mut _,\n                                                     ffi::PTHREAD_MUTEX_RECURSIVE);\n         debug_assert_eq!(result, 0);\n-        let result = ffi::pthread_mutex_init(mutex.inner.get(), &attr as *const _);\n+        let result = ffi::pthread_mutex_init(self.inner.get(), &attr as *const _);\n         debug_assert_eq!(result, 0);\n         let result = ffi::pthread_mutexattr_destroy(&mut attr as *mut _);\n         debug_assert_eq!(result, 0);\n-        mutex\n     }\n \n     pub unsafe fn lock(&self) {"}, {"sha": "9d2624f94180e5612fc4439dba3f9c5e5a3a73d9", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7", "patch": "@@ -59,16 +59,18 @@ impl Mutex {\n     }\n }\n \n-pub struct ReentrantMutex { inner: Box<UnsafeCell<ffi::CRITICAL_SECTION>> }\n+pub struct ReentrantMutex { inner: UnsafeCell<ffi::CRITICAL_SECTION> }\n \n unsafe impl Send for ReentrantMutex {}\n unsafe impl Sync for ReentrantMutex {}\n \n impl ReentrantMutex {\n-    pub unsafe fn new() -> ReentrantMutex {\n-        let mutex = ReentrantMutex { inner: box mem::uninitialized() };\n-        ffi::InitializeCriticalSection(mutex.inner.get());\n-        mutex\n+    pub unsafe fn uninitialized() -> ReentrantMutex {\n+        mem::uninitialized()\n+    }\n+\n+    pub unsafe fn init(&mut self) {\n+        ffi::InitializeCriticalSection(self.inner.get());\n     }\n \n     pub unsafe fn lock(&self) {"}]}