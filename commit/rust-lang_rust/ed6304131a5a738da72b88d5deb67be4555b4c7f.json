{"sha": "ed6304131a5a738da72b88d5deb67be4555b4c7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNjMwNDEzMWE1YTczOGRhNzJiODhkNWRlYjY3YmU0NTU1YjRjN2Y=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-26T11:06:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-26T11:20:46Z"}, "message": "Simplify", "tree": {"sha": "de81cb18bfed0a2e4d21b53a91c04432c8618f64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de81cb18bfed0a2e4d21b53a91c04432c8618f64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed6304131a5a738da72b88d5deb67be4555b4c7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6304131a5a738da72b88d5deb67be4555b4c7f", "html_url": "https://github.com/rust-lang/rust/commit/ed6304131a5a738da72b88d5deb67be4555b4c7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed6304131a5a738da72b88d5deb67be4555b4c7f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb50614d8871f55ad4f0306cba289681a29c14ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb50614d8871f55ad4f0306cba289681a29c14ef", "html_url": "https://github.com/rust-lang/rust/commit/bb50614d8871f55ad4f0306cba289681a29c14ef"}], "stats": {"total": 175, "additions": 69, "deletions": 106}, "files": [{"sha": "41ce5cae91e0407fd792e327f288424e808673d3", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 69, "deletions": 106, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/ed6304131a5a738da72b88d5deb67be4555b4c7f/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6304131a5a738da72b88d5deb67be4555b4c7f/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=ed6304131a5a738da72b88d5deb67be4555b4c7f", "patch": "@@ -5,7 +5,7 @@\n \n use std::{env, fmt::Write, path::PathBuf};\n \n-use anyhow::{bail, Result};\n+use anyhow::{bail, format_err, Result};\n use pico_args::Arguments;\n use rust_analyzer::cli::{AnalysisStatsCmd, BenchCmd, BenchWhat, Position, Verbosity};\n use ssr::{SsrPattern, SsrRule};\n@@ -96,8 +96,6 @@ diagnostics <PATH>\n \n ssr [RULE...]\n     <RULE>            A structured search replace rule (`$a.foo($b) ==> bar($a, $b)`)\n-    --debug <snippet> Prints debug information for any nodes with source exactly\n-                      equal to <snippet>\n \n search [PATTERN..]\n     <PATTERN>         A structured search replace pattern (`$a.foo($b)`)\n@@ -145,116 +143,81 @@ impl Args {\n             }\n         };\n         let command = match subcommand.as_str() {\n-            \"parse\" => {\n-                let no_dump = matches.contains(\"--no-dump\");\n-                matches.finish().or_else(handle_extra_flags)?;\n-                Command::Parse { no_dump }\n-            }\n-            \"symbols\" => {\n-                matches.finish().or_else(handle_extra_flags)?;\n-                Command::Symbols\n-            }\n-            \"highlight\" => {\n-                let rainbow = matches.contains(\"--rainbow\");\n-                matches.finish().or_else(handle_extra_flags)?;\n-                Command::Highlight { rainbow }\n-            }\n-            \"analysis-stats\" => {\n-                let randomize = matches.contains(\"--randomize\");\n-                let parallel = matches.contains(\"--parallel\");\n-                let memory_usage = matches.contains(\"--memory-usage\");\n-                let only: Option<String> = matches.opt_value_from_str([\"-o\", \"--only\"])?;\n-                let with_deps: bool = matches.contains(\"--with-deps\");\n-                let load_output_dirs = matches.contains(\"--load-output-dirs\");\n-                let with_proc_macro = matches.contains(\"--with-proc-macro\");\n-                let path = {\n-                    let mut trailing = matches.free()?;\n-                    if trailing.len() != 1 {\n-                        bail!(\"Invalid flags\");\n-                    }\n-                    trailing.pop().unwrap().into()\n-                };\n-\n-                Command::AnalysisStats(AnalysisStatsCmd {\n-                    randomize,\n-                    parallel,\n-                    memory_usage,\n-                    only,\n-                    with_deps,\n-                    path,\n-                    load_output_dirs,\n-                    with_proc_macro,\n-                })\n-            }\n-            \"analysis-bench\" => {\n-                let highlight_path: Option<String> = matches.opt_value_from_str(\"--highlight\")?;\n-                let complete_path: Option<Position> = matches.opt_value_from_str(\"--complete\")?;\n-                let goto_def_path: Option<Position> = matches.opt_value_from_str(\"--goto-def\")?;\n-                let what = match (highlight_path, complete_path, goto_def_path) {\n-                    (Some(path), None, None) => {\n-                        let path = env::current_dir().unwrap().join(path);\n-                        BenchWhat::Highlight { path: AbsPathBuf::assert(path) }\n-                    }\n-                    (None, Some(position), None) => BenchWhat::Complete(position),\n-                    (None, None, Some(position)) => BenchWhat::GotoDef(position),\n-                    _ => panic!(\n-                        \"exactly one of  `--highlight`, `--complete` or `--goto-def` must be set\"\n-                    ),\n-                };\n-                let memory_usage = matches.contains(\"--memory-usage\");\n-                let load_output_dirs = matches.contains(\"--load-output-dirs\");\n-                let with_proc_macro = matches.contains(\"--with-proc-macro\");\n-\n-                let path = {\n-                    let mut trailing = matches.free()?;\n-                    if trailing.len() != 1 {\n-                        bail!(\"Invalid flags\");\n+            \"parse\" => Command::Parse { no_dump: matches.contains(\"--no-dump\") },\n+            \"symbols\" => Command::Symbols,\n+            \"highlight\" => Command::Highlight { rainbow: matches.contains(\"--rainbow\") },\n+            \"analysis-stats\" => Command::AnalysisStats(AnalysisStatsCmd {\n+                randomize: matches.contains(\"--randomize\"),\n+                parallel: matches.contains(\"--parallel\"),\n+                memory_usage: matches.contains(\"--memory-usage\"),\n+                only: matches.opt_value_from_str([\"-o\", \"--only\"])?,\n+                with_deps: matches.contains(\"--with-deps\"),\n+                load_output_dirs: matches.contains(\"--load-output-dirs\"),\n+                with_proc_macro: matches.contains(\"--with-proc-macro\"),\n+                path: matches\n+                    .free_from_str()?\n+                    .ok_or_else(|| format_err!(\"expected positional argument\"))?,\n+            }),\n+            \"analysis-bench\" => Command::Bench(BenchCmd {\n+                what: {\n+                    let highlight_path: Option<String> =\n+                        matches.opt_value_from_str(\"--highlight\")?;\n+                    let complete_path: Option<Position> =\n+                        matches.opt_value_from_str(\"--complete\")?;\n+                    let goto_def_path: Option<Position> =\n+                        matches.opt_value_from_str(\"--goto-def\")?;\n+                    match (highlight_path, complete_path, goto_def_path) {\n+                            (Some(path), None, None) => {\n+                                let path = env::current_dir().unwrap().join(path);\n+                                BenchWhat::Highlight { path: AbsPathBuf::assert(path) }\n+                            }\n+                            (None, Some(position), None) => BenchWhat::Complete(position),\n+                            (None, None, Some(position)) => BenchWhat::GotoDef(position),\n+                            _ => panic!(\n+                                \"exactly one of  `--highlight`, `--complete` or `--goto-def` must be set\"\n+                            ),\n+                        }\n+                },\n+                memory_usage: matches.contains(\"--memory-usage\"),\n+                load_output_dirs: matches.contains(\"--load-output-dirs\"),\n+                with_proc_macro: matches.contains(\"--with-proc-macro\"),\n+                path: matches\n+                    .free_from_str()?\n+                    .ok_or_else(|| format_err!(\"expected positional argument\"))?,\n+            }),\n+            \"diagnostics\" => Command::Diagnostics {\n+                load_output_dirs: matches.contains(\"--load-output-dirs\"),\n+                with_proc_macro: matches.contains(\"--with-proc-macro\"),\n+                path: matches\n+                    .free_from_str()?\n+                    .ok_or_else(|| format_err!(\"expected positional argument\"))?,\n+            },\n+            \"proc-macro\" => Command::ProcMacro,\n+            \"ssr\" => Command::Ssr {\n+                rules: {\n+                    let mut acc = Vec::new();\n+                    while let Some(rule) = matches.free_from_str()? {\n+                        acc.push(rule);\n                     }\n-                    trailing.pop().unwrap().into()\n-                };\n-\n-                Command::Bench(BenchCmd {\n-                    memory_usage,\n-                    path,\n-                    what,\n-                    load_output_dirs,\n-                    with_proc_macro,\n-                })\n-            }\n-            \"diagnostics\" => {\n-                let load_output_dirs = matches.contains(\"--load-output-dirs\");\n-                let with_proc_macro = matches.contains(\"--with-proc-macro\");\n-                let path = {\n-                    let mut trailing = matches.free()?;\n-                    if trailing.len() != 1 {\n-                        bail!(\"Invalid flags\");\n+                    acc\n+                },\n+            },\n+            \"search\" => Command::StructuredSearch {\n+                debug_snippet: matches.opt_value_from_str(\"--debug\")?,\n+                patterns: {\n+                    let mut acc = Vec::new();\n+                    while let Some(rule) = matches.free_from_str()? {\n+                        acc.push(rule);\n                     }\n-                    trailing.pop().unwrap().into()\n-                };\n-\n-                Command::Diagnostics { path, load_output_dirs, with_proc_macro }\n-            }\n-            \"proc-macro\" => Command::ProcMacro,\n-            \"ssr\" => {\n-                let mut rules = Vec::new();\n-                while let Some(rule) = matches.free_from_str()? {\n-                    rules.push(rule);\n-                }\n-                Command::Ssr { rules }\n-            }\n-            \"search\" => {\n-                let debug_snippet = matches.opt_value_from_str(\"--debug\")?;\n-                let mut patterns = Vec::new();\n-                while let Some(rule) = matches.free_from_str()? {\n-                    patterns.push(rule);\n-                }\n-                Command::StructuredSearch { patterns, debug_snippet }\n-            }\n+                    acc\n+                },\n+            },\n             _ => {\n                 eprintln!(\"{}\", HELP);\n                 return Ok(Args { verbosity, log_file: None, command: Command::Help });\n             }\n         };\n+        matches.finish().or_else(handle_extra_flags)?;\n         Ok(Args { verbosity, log_file, command })\n     }\n }"}]}