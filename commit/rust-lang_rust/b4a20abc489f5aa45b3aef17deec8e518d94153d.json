{"sha": "b4a20abc489f5aa45b3aef17deec8e518d94153d", "node_id": "C_kwDOAAsO6NoAKGI0YTIwYWJjNDg5ZjVhYTQ1YjNhZWYxN2RlZWM4ZTUxOGQ5NDE1M2Q", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-02-05T02:20:06Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-02-05T02:48:08Z"}, "message": "rustc_interface: remove huge error imports", "tree": {"sha": "2b33385ed4d30d047dab50c55ab8c49c97817da2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b33385ed4d30d047dab50c55ab8c49c97817da2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4a20abc489f5aa45b3aef17deec8e518d94153d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a20abc489f5aa45b3aef17deec8e518d94153d", "html_url": "https://github.com/rust-lang/rust/commit/b4a20abc489f5aa45b3aef17deec8e518d94153d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4a20abc489f5aa45b3aef17deec8e518d94153d/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a399f0ca8429db2399f007cdb12dad687b8973d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a399f0ca8429db2399f007cdb12dad687b8973d9", "html_url": "https://github.com/rust-lang/rust/commit/a399f0ca8429db2399f007cdb12dad687b8973d9"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "2a373ebc1324da0112c47002f85b2b1e86e62b5f", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b4a20abc489f5aa45b3aef17deec8e518d94153d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a20abc489f5aa45b3aef17deec8e518d94153d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=b4a20abc489f5aa45b3aef17deec8e518d94153d", "patch": "@@ -1,9 +1,4 @@\n-use crate::errors::{\n-    CantEmitMIR, EmojiIdentifier, ErrorWritingDependencies, FerrisIdentifier,\n-    GeneratedFileConflictsWithDirectory, InputFileWouldBeOverWritten, MixedBinCrate,\n-    MixedProcMacroCrate, OutDirError, ProcMacroCratePanicAbort, ProcMacroDocWithoutArg,\n-    TempsDirError,\n-};\n+use crate::errors;\n use crate::interface::{Compiler, Result};\n use crate::proc_macro_decls;\n use crate::util;\n@@ -374,15 +369,15 @@ pub fn configure_and_expand(\n \n     if crate_types.len() > 1 {\n         if is_executable_crate {\n-            sess.emit_err(MixedBinCrate);\n+            sess.emit_err(errors::MixedBinCrate);\n         }\n         if is_proc_macro_crate {\n-            sess.emit_err(MixedProcMacroCrate);\n+            sess.emit_err(errors::MixedProcMacroCrate);\n         }\n     }\n \n     if is_proc_macro_crate && sess.panic_strategy() == PanicStrategy::Abort {\n-        sess.emit_warning(ProcMacroCratePanicAbort);\n+        sess.emit_warning(errors::ProcMacroCratePanicAbort);\n     }\n \n     // For backwards compatibility, we don't try to run proc macro injection\n@@ -392,7 +387,7 @@ pub fn configure_and_expand(\n     // However, we do emit a warning, to let such users know that they should\n     // start passing '--crate-type proc-macro'\n     if has_proc_macro_decls && sess.opts.actually_rustdoc && !is_proc_macro_crate {\n-        sess.emit_warning(ProcMacroDocWithoutArg);\n+        sess.emit_warning(errors::ProcMacroDocWithoutArg);\n     } else {\n         krate = sess.time(\"maybe_create_a_macro_crate\", || {\n             let is_test_crate = sess.opts.test;\n@@ -441,9 +436,9 @@ pub fn configure_and_expand(\n             spans.sort();\n             if ident == sym::ferris {\n                 let first_span = spans[0];\n-                sess.emit_err(FerrisIdentifier { spans, first_span });\n+                sess.emit_err(errors::FerrisIdentifier { spans, first_span });\n             } else {\n-                sess.emit_err(EmojiIdentifier { spans, ident });\n+                sess.emit_err(errors::EmojiIdentifier { spans, ident });\n             }\n         }\n     });\n@@ -655,7 +650,7 @@ fn write_out_deps(\n             }\n         }\n         Err(error) => {\n-            sess.emit_fatal(ErrorWritingDependencies { path: &deps_filename, error });\n+            sess.emit_fatal(errors::ErrorWritingDependencies { path: &deps_filename, error });\n         }\n     }\n }\n@@ -676,17 +671,20 @@ fn output_filenames(tcx: TyCtxt<'_>, (): ()) -> Arc<OutputFilenames> {\n     if let Some(ref input_path) = sess.io.input.opt_path() {\n         if sess.opts.will_create_output_file() {\n             if output_contains_path(&output_paths, input_path) {\n-                sess.emit_fatal(InputFileWouldBeOverWritten { path: input_path });\n+                sess.emit_fatal(errors::InputFileWouldBeOverWritten { path: input_path });\n             }\n             if let Some(ref dir_path) = output_conflicts_with_dir(&output_paths) {\n-                sess.emit_fatal(GeneratedFileConflictsWithDirectory { input_path, dir_path });\n+                sess.emit_fatal(errors::GeneratedFileConflictsWithDirectory {\n+                    input_path,\n+                    dir_path,\n+                });\n             }\n         }\n     }\n \n     if let Some(ref dir) = sess.io.temps_dir {\n         if fs::create_dir_all(dir).is_err() {\n-            sess.emit_fatal(TempsDirError);\n+            sess.emit_fatal(errors::TempsDirError);\n         }\n     }\n \n@@ -698,7 +696,7 @@ fn output_filenames(tcx: TyCtxt<'_>, (): ()) -> Arc<OutputFilenames> {\n     if !only_dep_info {\n         if let Some(ref dir) = sess.io.output_dir {\n             if fs::create_dir_all(dir).is_err() {\n-                sess.emit_fatal(OutDirError);\n+                sess.emit_fatal(errors::OutDirError);\n             }\n         }\n     }\n@@ -977,7 +975,7 @@ pub fn start_codegen<'tcx>(\n \n     if tcx.sess.opts.output_types.contains_key(&OutputType::Mir) {\n         if let Err(error) = rustc_mir_transform::dump_mir::emit_mir(tcx) {\n-            tcx.sess.emit_err(CantEmitMIR { error });\n+            tcx.sess.emit_err(errors::CantEmitMIR { error });\n             tcx.sess.abort_if_errors();\n         }\n     }"}]}