{"sha": "38798c6d68394874686dfa3d03e56e12a3ff3d54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4Nzk4YzZkNjgzOTQ4NzQ2ODZkZmEzZDAzZTU2ZTEyYTNmZjNkNTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-16T23:05:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-16T23:05:06Z"}, "message": "Auto merge of #62592 - nikic:actually-update-llvm, r=alexcrichton\n\nUpdate to LLVM 9 trunk\n\nFollowing the preparatory changes in #62474, this updates the LLVM submodule to https://github.com/rust-lang/llvm-project/tree/rustc/9.0-2019-07-12 and:\n\n * Changes the LLVM Rust bindings to account for the new SubtargetSubTypeKV.\n * Adjusts a codegen test for the new form of the byval attribute that takes a type.\n * Makes a PGO codegen test more liberal with regard to order and linkage.\n * Builds InstrProfilingPlatformWindows.c as part of libprofiler_builtins.\n * Moves registration of additional passes (in particular sanitizers) to the end of the module pass manager.\n * Disables LLDB on builders.\n\nr? @alexcrichton", "tree": {"sha": "c945d229153d7e8d2b3ed33842f0a306d790155c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c945d229153d7e8d2b3ed33842f0a306d790155c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38798c6d68394874686dfa3d03e56e12a3ff3d54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38798c6d68394874686dfa3d03e56e12a3ff3d54", "html_url": "https://github.com/rust-lang/rust/commit/38798c6d68394874686dfa3d03e56e12a3ff3d54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38798c6d68394874686dfa3d03e56e12a3ff3d54/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e0c3651ce2a7b326f7678e135d8d5bbbbe5d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e0c3651ce2a7b326f7678e135d8d5bbbbe5d18", "html_url": "https://github.com/rust-lang/rust/commit/07e0c3651ce2a7b326f7678e135d8d5bbbbe5d18"}, {"sha": "d2c1d1bc158eb07f5df95277ba36c6259d98b050", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c1d1bc158eb07f5df95277ba36c6259d98b050", "html_url": "https://github.com/rust-lang/rust/commit/d2c1d1bc158eb07f5df95277ba36c6259d98b050"}], "stats": {"total": 158, "additions": 95, "deletions": 63}, "files": [{"sha": "6ed1585c5168b91b8818fc0666ab67322a8fa67c", "filename": ".azure-pipelines/auto.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38798c6d68394874686dfa3d03e56e12a3ff3d54/.azure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/38798c6d68394874686dfa3d03e56e12a3ff3d54/.azure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fauto.yml?ref=38798c6d68394874686dfa3d03e56e12a3ff3d54", "patch": "@@ -174,7 +174,7 @@ jobs:\n \n       dist-x86_64-apple:\n         SCRIPT: ./x.py dist\n-        RUST_CONFIGURE_ARGS: --target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --enable-lldb --set rust.jemalloc\n+        RUST_CONFIGURE_ARGS: --target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc\n         DEPLOY: 1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n         MACOSX_DEPLOYMENT_TARGET: 10.7\n@@ -184,7 +184,7 @@ jobs:\n \n       dist-x86_64-apple-alt:\n         SCRIPT: ./x.py dist\n-        RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --enable-lldb --set rust.jemalloc\n+        RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --set rust.jemalloc\n         DEPLOY_ALT: 1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n         MACOSX_DEPLOYMENT_TARGET: 10.7\n@@ -202,7 +202,7 @@ jobs:\n \n       dist-i686-apple:\n         SCRIPT: ./x.py dist\n-        RUST_CONFIGURE_ARGS: --build=i686-apple-darwin --enable-full-tools --enable-profiler --enable-lldb --set rust.jemalloc\n+        RUST_CONFIGURE_ARGS: --build=i686-apple-darwin --enable-full-tools --enable-profiler --set rust.jemalloc\n         DEPLOY: 1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n         MACOSX_DEPLOYMENT_TARGET: 10.7"}, {"sha": "0df6c6c951f246eaf70d018f6546ae7c54e4b273", "filename": ".azure-pipelines/try.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38798c6d68394874686dfa3d03e56e12a3ff3d54/.azure-pipelines%2Ftry.yml", "raw_url": "https://github.com/rust-lang/rust/raw/38798c6d68394874686dfa3d03e56e12a3ff3d54/.azure-pipelines%2Ftry.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Ftry.yml?ref=38798c6d68394874686dfa3d03e56e12a3ff3d54", "patch": "@@ -36,7 +36,7 @@ jobs:\n #     matrix:\n #       dist-x86_64-apple:\n #         SCRIPT: ./x.py dist\n-#         RUST_CONFIGURE_ARGS: --target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --enable-lldb --set rust.jemalloc\n+#         RUST_CONFIGURE_ARGS: --target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc\n #         DEPLOY: 1\n #         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n #         MACOSX_DEPLOYMENT_TARGET: 10.7\n@@ -46,7 +46,7 @@ jobs:\n #\n #       dist-x86_64-apple-alt:\n #         SCRIPT: ./x.py dist\n-#         RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --enable-lldb --set rust.jemalloc\n+#         RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --set rust.jemalloc\n #         DEPLOY_ALT: 1\n #         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n #         MACOSX_DEPLOYMENT_TARGET: 10.7"}, {"sha": "f64e21c5af0e4dec0382ff2261b8354f9a27b246", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38798c6d68394874686dfa3d03e56e12a3ff3d54/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/38798c6d68394874686dfa3d03e56e12a3ff3d54/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=38798c6d68394874686dfa3d03e56e12a3ff3d54", "patch": "@@ -43,7 +43,7 @@\n [submodule \"src/llvm-project\"]\n \tpath = src/llvm-project\n \turl = https://github.com/rust-lang/llvm-project.git\n-\tbranch = rustc/8.0-2019-03-18\n+\tbranch = rustc/9.0-2019-07-12\n [submodule \"src/doc/embedded-book\"]\n \tpath = src/doc/embedded-book\n \turl = https://github.com/rust-embedded/book.git"}, {"sha": "b2748d9c2ab79696791838f8d063e08f2619fc51", "filename": "src/ci/docker/x86_64-gnu-debug/Dockerfile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38798c6d68394874686dfa3d03e56e12a3ff3d54/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/38798c6d68394874686dfa3d03e56e12a3ff3d54/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile?ref=38798c6d68394874686dfa3d03e56e12a3ff3d54", "patch": "@@ -33,7 +33,6 @@ ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n       --enable-debug \\\n       --enable-lld \\\n-      --enable-lldb \\\n       --enable-optimize \\\n       --set llvm.use-linker=lld \\\n       --set target.x86_64-unknown-linux-gnu.linker=clang \\"}, {"sha": "775f84535fbf25b9e17a7561a1f0ec3358703d0b", "filename": "src/libprofiler_builtins/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38798c6d68394874686dfa3d03e56e12a3ff3d54/src%2Flibprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38798c6d68394874686dfa3d03e56e12a3ff3d54/src%2Flibprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Fbuild.rs?ref=38798c6d68394874686dfa3d03e56e12a3ff3d54", "patch": "@@ -19,6 +19,7 @@ fn main() {\n                                    \"InstrProfilingPlatformDarwin.c\",\n                                    \"InstrProfilingPlatformLinux.c\",\n                                    \"InstrProfilingPlatformOther.c\",\n+                                   \"InstrProfilingPlatformWindows.c\",\n                                    \"InstrProfilingRuntime.cc\",\n                                    \"InstrProfilingUtil.c\",\n                                    \"InstrProfilingValue.c\","}, {"sha": "253110dcb34c097baf679577a0cde33f4e6b0778", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 49, "deletions": 39, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/38798c6d68394874686dfa3d03e56e12a3ff3d54/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38798c6d68394874686dfa3d03e56e12a3ff3d54/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=38798c6d68394874686dfa3d03e56e12a3ff3d54", "patch": "@@ -329,33 +329,55 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n         let mpm = llvm::LLVMCreatePassManager();\n \n         {\n-            // If we're verifying or linting, add them to the function pass\n-            // manager.\n-            let addpass = |pass_name: &str| {\n+            let find_pass = |pass_name: &str| {\n                 let pass_name = SmallCStr::new(pass_name);\n-                let pass = match llvm::LLVMRustFindAndCreatePass(pass_name.as_ptr()) {\n-                    Some(pass) => pass,\n-                    None => return false,\n-                };\n-                let pass_manager = match llvm::LLVMRustPassKind(pass) {\n-                    llvm::PassKind::Function => &*fpm,\n-                    llvm::PassKind::Module => &*mpm,\n-                    llvm::PassKind::Other => {\n-                        diag_handler.err(\"Encountered LLVM pass kind we can't handle\");\n-                        return true\n-                    },\n-                };\n-                llvm::LLVMRustAddPass(pass_manager, pass);\n-                true\n+                llvm::LLVMRustFindAndCreatePass(pass_name.as_ptr())\n             };\n \n-            if config.verify_llvm_ir { assert!(addpass(\"verify\")); }\n+            if config.verify_llvm_ir {\n+                // Verification should run as the very first pass.\n+                llvm::LLVMRustAddPass(fpm, find_pass(\"verify\").unwrap());\n+            }\n+\n+            let mut extra_passes = Vec::new();\n+            let mut have_name_anon_globals_pass = false;\n+\n+            for pass_name in &config.passes {\n+                if pass_name == \"lint\" {\n+                    // Linting should also be performed early, directly on the generated IR.\n+                    llvm::LLVMRustAddPass(fpm, find_pass(\"lint\").unwrap());\n+                    continue;\n+                }\n+\n+                if let Some(pass) = find_pass(pass_name) {\n+                    extra_passes.push(pass);\n+                } else {\n+                    diag_handler.warn(&format!(\"unknown pass `{}`, ignoring\", pass_name));\n+                }\n+\n+                if pass_name == \"name-anon-globals\" {\n+                    have_name_anon_globals_pass = true;\n+                }\n+            }\n+\n+            for pass_name in &cgcx.plugin_passes {\n+                if let Some(pass) = find_pass(pass_name) {\n+                    extra_passes.push(pass);\n+                } else {\n+                    diag_handler.err(&format!(\"a plugin asked for LLVM pass \\\n+                                               `{}` but LLVM does not \\\n+                                               recognize it\", pass_name));\n+                }\n+\n+                if pass_name == \"name-anon-globals\" {\n+                    have_name_anon_globals_pass = true;\n+                }\n+            }\n \n             // Some options cause LLVM bitcode to be emitted, which uses ThinLTOBuffers, so we need\n             // to make sure we run LLVM's NameAnonGlobals pass when emitting bitcode; otherwise\n             // we'll get errors in LLVM.\n             let using_thin_buffers = config.bitcode_needed();\n-            let mut have_name_anon_globals_pass = false;\n             if !config.no_prepopulate_passes {\n                 llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n                 llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n@@ -364,34 +386,22 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n                 let prepare_for_thin_lto = cgcx.lto == Lto::Thin || cgcx.lto == Lto::ThinLocal ||\n                     (cgcx.lto != Lto::Fat && cgcx.opts.cg.linker_plugin_lto.enabled());\n                 with_llvm_pmb(llmod, &config, opt_level, prepare_for_thin_lto, &mut |b| {\n+                    llvm::LLVMRustAddLastExtensionPasses(\n+                        b, extra_passes.as_ptr(), extra_passes.len() as size_t);\n                     llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(b, fpm);\n                     llvm::LLVMPassManagerBuilderPopulateModulePassManager(b, mpm);\n                 });\n \n                 have_name_anon_globals_pass = have_name_anon_globals_pass || prepare_for_thin_lto;\n                 if using_thin_buffers && !prepare_for_thin_lto {\n-                    assert!(addpass(\"name-anon-globals\"));\n-                    have_name_anon_globals_pass = true;\n-                }\n-            }\n-\n-            for pass in &config.passes {\n-                if !addpass(pass) {\n-                    diag_handler.warn(&format!(\"unknown pass `{}`, ignoring\", pass));\n-                }\n-                if pass == \"name-anon-globals\" {\n+                    llvm::LLVMRustAddPass(mpm, find_pass(\"name-anon-globals\").unwrap());\n                     have_name_anon_globals_pass = true;\n                 }\n-            }\n-\n-            for pass in &cgcx.plugin_passes {\n-                if !addpass(pass) {\n-                    diag_handler.err(&format!(\"a plugin asked for LLVM pass \\\n-                                               `{}` but LLVM does not \\\n-                                               recognize it\", pass));\n-                }\n-                if pass == \"name-anon-globals\" {\n-                    have_name_anon_globals_pass = true;\n+            } else {\n+                // If we don't use the standard pipeline, directly populate the MPM\n+                // with the extra passes.\n+                for pass in extra_passes {\n+                    llvm::LLVMRustAddPass(mpm, pass);\n                 }\n             }\n "}, {"sha": "5d82698d8efb6724ea7847c35c74359db4b8dae1", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38798c6d68394874686dfa3d03e56e12a3ff3d54/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38798c6d68394874686dfa3d03e56e12a3ff3d54/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=38798c6d68394874686dfa3d03e56e12a3ff3d54", "patch": "@@ -1668,6 +1668,9 @@ extern \"C\" {\n     pub fn LLVMRustPassKind(Pass: &Pass) -> PassKind;\n     pub fn LLVMRustFindAndCreatePass(Pass: *const c_char) -> Option<&'static mut Pass>;\n     pub fn LLVMRustAddPass(PM: &PassManager<'_>, Pass: &'static mut Pass);\n+    pub fn LLVMRustAddLastExtensionPasses(PMB: &PassManagerBuilder,\n+                                          Passes: *const &'static mut Pass,\n+                                          NumPasses: size_t);\n \n     pub fn LLVMRustHasFeature(T: &TargetMachine, s: *const c_char) -> bool;\n "}, {"sha": "f6446fa8e9629ffb1861303f17930c3aa83ef660", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=38798c6d68394874686dfa3d03e56e12a3ff3d54", "patch": "@@ -1 +1 @@\n-Subproject commit 6c1a545b269bc046743c6bb9b0173ec37bd624ab\n+Subproject commit f6446fa8e9629ffb1861303f17930c3aa83ef660"}, {"sha": "7d20086d9a22ee780771151999a34b29554face7", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/38798c6d68394874686dfa3d03e56e12a3ff3d54/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/38798c6d68394874686dfa3d03e56e12a3ff3d54/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=38798c6d68394874686dfa3d03e56e12a3ff3d54", "patch": "@@ -99,6 +99,23 @@ void LLVMRustPassManagerBuilderPopulateThinLTOPassManager(\n   unwrap(PMBR)->populateThinLTOPassManager(*unwrap(PMR));\n }\n \n+extern \"C\"\n+void LLVMRustAddLastExtensionPasses(\n+    LLVMPassManagerBuilderRef PMBR, LLVMPassRef *Passes, size_t NumPasses) {\n+  auto AddExtensionPasses = [Passes, NumPasses](\n+      const PassManagerBuilder &Builder, PassManagerBase &PM) {\n+    for (size_t I = 0; I < NumPasses; I++) {\n+      PM.add(unwrap(Passes[I]));\n+    }\n+  };\n+  // Add the passes to both of the pre-finalization extension points,\n+  // so they are run for optimized and non-optimized builds.\n+  unwrap(PMBR)->addExtension(PassManagerBuilder::EP_OptimizerLast,\n+                             AddExtensionPasses);\n+  unwrap(PMBR)->addExtension(PassManagerBuilder::EP_EnabledOnOptLevel0,\n+                             AddExtensionPasses);\n+}\n+\n #ifdef LLVM_COMPONENT_X86\n #define SUBTARGET_X86 SUBTARGET(X86)\n #else\n@@ -266,8 +283,8 @@ static Optional<Reloc::Model> fromRust(LLVMRustRelocMode RustReloc) {\n \n #ifdef LLVM_RUSTLLVM\n /// getLongestEntryLength - Return the length of the longest entry in the table.\n-///\n-static size_t getLongestEntryLength(ArrayRef<SubtargetFeatureKV> Table) {\n+template<typename KV>\n+static size_t getLongestEntryLength(ArrayRef<KV> Table) {\n   size_t MaxLen = 0;\n   for (auto &I : Table)\n     MaxLen = std::max(MaxLen, std::strlen(I.Key));\n@@ -279,7 +296,7 @@ extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM) {\n   const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n   const Triple::ArchType HostArch = Triple(sys::getProcessTriple()).getArch();\n   const Triple::ArchType TargetArch = Target->getTargetTriple().getArch();\n-  const ArrayRef<SubtargetFeatureKV> CPUTable = MCInfo->getCPUTable();\n+  const ArrayRef<SubtargetSubTypeKV> CPUTable = MCInfo->getCPUTable();\n   unsigned MaxCPULen = getLongestEntryLength(CPUTable);\n \n   printf(\"Available CPUs for this target:\\n\");\n@@ -289,7 +306,7 @@ extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM) {\n       MaxCPULen, \"native\", (int)HostCPU.size(), HostCPU.data());\n   }\n   for (auto &CPU : CPUTable)\n-    printf(\"    %-*s - %s.\\n\", MaxCPULen, CPU.Key, CPU.Desc);\n+    printf(\"    %-*s\\n\", MaxCPULen, CPU.Key);\n   printf(\"\\n\");\n }\n "}, {"sha": "c085f3c829ea440f7b7954b61587fea1a2f42916", "filename": "src/test/codegen/pgo-instrumentation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38798c6d68394874686dfa3d03e56e12a3ff3d54/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38798c6d68394874686dfa3d03e56e12a3ff3d54/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs?ref=38798c6d68394874686dfa3d03e56e12a3ff3d54", "patch": "@@ -5,10 +5,10 @@\n // compile-flags: -Cprofile-generate -Ccodegen-units=1 -Cpanic=abort\n \n // CHECK: @__llvm_profile_raw_version =\n-// CHECK: @__profc_{{.*}}pgo_instrumentation{{.*}}some_function{{.*}} = private global\n-// CHECK: @__profd_{{.*}}pgo_instrumentation{{.*}}some_function{{.*}} = private global\n-// CHECK: @__profc_{{.*}}pgo_instrumentation{{.*}}some_other_function{{.*}} = private global\n-// CHECK: @__profd_{{.*}}pgo_instrumentation{{.*}}some_other_function{{.*}} = private global\n+// CHECK-DAG: @__profc_{{.*}}pgo_instrumentation{{.*}}some_function{{.*}} = {{.*}}global\n+// CHECK-DAG: @__profd_{{.*}}pgo_instrumentation{{.*}}some_function{{.*}} = {{.*}}global\n+// CHECK-DAG: @__profc_{{.*}}pgo_instrumentation{{.*}}some_other_function{{.*}} = {{.*}}global\n+// CHECK-DAG: @__profd_{{.*}}pgo_instrumentation{{.*}}some_other_function{{.*}} = {{.*}}global\n // CHECK: @__llvm_profile_filename = {{.*}}\"default_%m.profraw\\00\"{{.*}}\n \n #![crate_type=\"lib\"]"}, {"sha": "1c8959619d3b2331f183b865c948202a3847152f", "filename": "src/test/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/38798c6d68394874686dfa3d03e56e12a3ff3d54/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38798c6d68394874686dfa3d03e56e12a3ff3d54/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=38798c6d68394874686dfa3d03e56e12a3ff3d54", "patch": "@@ -1,11 +1,13 @@\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n \n+// min-system-llvm-version: 9.0\n // ignore-arm\n // ignore-mips\n // ignore-mips64\n // ignore-powerpc\n // ignore-powerpc64\n+// ignore-windows\n // See repr-transparent.rs\n \n #![feature(transparent_enums, transparent_unions)]\n@@ -30,19 +32,19 @@ pub enum TeBigS {\n     Variant(BigS),\n }\n \n-// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS:.*]], %BigS* [[BIGS_ARG_ATTRS:.*]])\n+// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS:.*]], %BigS* [[BIGS_ARG_ATTRS1:.*]] byval(%BigS) [[BIGS_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern fn test_BigS(_: BigS) -> BigS { loop {} }\n \n-// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS]], %TsBigS* [[BIGS_ARG_ATTRS]])\n+// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS]], %TsBigS* [[BIGS_ARG_ATTRS1]] byval(%TsBigS) [[BIGS_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern fn test_TsBigS(_: TsBigS) -> TsBigS { loop {} }\n \n-// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS]], %TuBigS* [[BIGS_ARG_ATTRS]])\n+// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS]], %TuBigS* [[BIGS_ARG_ATTRS1]] byval(%TuBigS) [[BIGS_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern fn test_TuBigS(_: TuBigS) -> TuBigS { loop {} }\n \n-// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS]], %\"TeBigS::Variant\"* [[BIGS_ARG_ATTRS]])\n+// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS]], %\"TeBigS::Variant\"* [[BIGS_ARG_ATTRS1]] byval(%\"TeBigS::Variant\") [[BIGS_ARG_ATTRS2]])\n #[no_mangle]\n pub extern fn test_TeBigS(_: TeBigS) -> TeBigS { loop {} }\n \n@@ -66,18 +68,18 @@ pub enum TeBigU {\n     Variant(BigU),\n }\n \n-// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS:.*]], %BigU* [[BIGU_ARG_ATTRS:.*]])\n+// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS:.*]], %BigU* [[BIGU_ARG_ATTRS1:.*]] byval(%BigU) [[BIGU_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern fn test_BigU(_: BigU) -> BigU { loop {} }\n \n-// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS:.*]], %TsBigU* [[BIGU_ARG_ATTRS]])\n+// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS:.*]], %TsBigU* [[BIGU_ARG_ATTRS1]] byval(%TsBigU) [[BIGU_ARG_ATTRS2]])\n #[no_mangle]\n pub extern fn test_TsBigU(_: TsBigU) -> TsBigU { loop {} }\n \n-// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS]], %TuBigU* [[BIGU_ARG_ATTRS]])\n+// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS]], %TuBigU* [[BIGU_ARG_ATTRS1]] byval(%TuBigU) [[BIGU_ARG_ATTRS2]])\n #[no_mangle]\n pub extern fn test_TuBigU(_: TuBigU) -> TuBigU { loop {} }\n \n-// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS]], %\"TeBigU::Variant\"* [[BIGU_ARG_ATTRS]])\n+// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS]], %\"TeBigU::Variant\"* [[BIGU_ARG_ATTRS1]] byval(%\"TeBigU::Variant\") [[BIGU_ARG_ATTRS2]])\n #[no_mangle]\n pub extern fn test_TeBigU(_: TeBigU) -> TeBigU { loop {} }"}]}