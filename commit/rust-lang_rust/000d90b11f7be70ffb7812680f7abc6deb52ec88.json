{"sha": "000d90b11f7be70ffb7812680f7abc6deb52ec88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMGQ5MGIxMWY3YmU3MGZmYjc4MTI2ODBmN2FiYzZkZWI1MmVjODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-10T23:43:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-10T23:43:55Z"}, "message": "Auto merge of #64823 - cuviper:min-std, r=Mark-Simulacrum\n\nminimize the rust-std component\n\nThis changes the `rust-std` dist component to only include the artifacts of compiling the `libstd` step, as listed in `.libstd.stamp`. This does include `test` and `proc-macro` as well. The remaining _unstable_ libraries that are built as part of `rustc` are packaged into a new `rustc-dev` component, intended for use in the development of closely related tools (clippy, miri, rls).\n\nHere are the component sizes from the [try build](https://dev-static.rust-lang.org/dist/2019-10-07/index.html):\n\n| Name | Size\n| --- | ---\n| rust-std-nightly-x86_64-unknown-linux-gnu.tar.gz | 23.94 MiB\n| rust-std-nightly-x86_64-unknown-linux-gnu.tar.xz | 17.4 MiB\n| rustc-dev-nightly-x86_64-unknown-linux-gnu.tar.gz | 182.03 MiB\n| rustc-dev-nightly-x86_64-unknown-linux-gnu.tar.xz | 157.91 MiB\n\nFixes #61978\nFixes #62486", "tree": {"sha": "7d8633ef9a2b069d9801b93666c79be5a0119af0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d8633ef9a2b069d9801b93666c79be5a0119af0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/000d90b11f7be70ffb7812680f7abc6deb52ec88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/000d90b11f7be70ffb7812680f7abc6deb52ec88", "html_url": "https://github.com/rust-lang/rust/commit/000d90b11f7be70ffb7812680f7abc6deb52ec88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/000d90b11f7be70ffb7812680f7abc6deb52ec88/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "898f36c83cc28d7921a1d7b3605323dc5cfcf533", "url": "https://api.github.com/repos/rust-lang/rust/commits/898f36c83cc28d7921a1d7b3605323dc5cfcf533", "html_url": "https://github.com/rust-lang/rust/commit/898f36c83cc28d7921a1d7b3605323dc5cfcf533"}, {"sha": "d3052540993b6acf009d39949b79077a49544934", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3052540993b6acf009d39949b79077a49544934", "html_url": "https://github.com/rust-lang/rust/commit/d3052540993b6acf009d39949b79077a49544934"}], "stats": {"total": 160, "additions": 127, "deletions": 33}, "files": [{"sha": "7e3ae7f2cc907231ed943258ee59f90e119c6d9d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/000d90b11f7be70ffb7812680f7abc6deb52ec88/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000d90b11f7be70ffb7812680f7abc6deb52ec88/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=000d90b11f7be70ffb7812680f7abc6deb52ec88", "patch": "@@ -443,6 +443,7 @@ impl<'a> Builder<'a> {\n                 dist::Rustc,\n                 dist::DebuggerScripts,\n                 dist::Std,\n+                dist::RustcDev,\n                 dist::Analysis,\n                 dist::Src,\n                 dist::PlainSourceTarball,"}, {"sha": "e5a43dcb29f6386a2ec3471071477a4a1161cf24", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 96, "deletions": 33, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/000d90b11f7be70ffb7812680f7abc6deb52ec88/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000d90b11f7be70ffb7812680f7abc6deb52ec88/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=000d90b11f7be70ffb7812680f7abc6deb52ec88", "patch": "@@ -637,6 +637,28 @@ impl Step for DebuggerScripts {\n     }\n }\n \n+fn skip_host_target_lib(builder: &Builder<'_>, compiler: Compiler) -> bool {\n+    // The only true set of target libraries came from the build triple, so\n+    // let's reduce redundant work by only producing archives from that host.\n+    if compiler.host != builder.config.build {\n+        builder.info(\"\\tskipping, not a build host\");\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+/// Copy stamped files into an image's `target/lib` directory.\n+fn copy_target_libs(builder: &Builder<'_>, target: &str, image: &Path, stamp: &Path) {\n+    let dst = image.join(\"lib/rustlib\").join(target).join(\"lib\");\n+    t!(fs::create_dir_all(&dst));\n+    for (path, host) in builder.read_stamp_file(stamp) {\n+        if !host || builder.config.build == target {\n+            builder.copy(&path, &dst.join(path.file_name().unwrap()));\n+        }\n+    }\n+}\n+\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Std {\n     pub compiler: Compiler,\n@@ -667,44 +689,19 @@ impl Step for Std {\n         let target = self.target;\n \n         let name = pkgname(builder, \"rust-std\");\n-\n-        // The only true set of target libraries came from the build triple, so\n-        // let's reduce redundant work by only producing archives from that host.\n-        if compiler.host != builder.config.build {\n-            builder.info(\"\\tskipping, not a build host\");\n-            return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        if skip_host_target_lib(builder, compiler) {\n+            return archive;\n         }\n \n-        // We want to package up as many target libraries as possible\n-        // for the `rust-std` package, so if this is a host target we\n-        // depend on librustc and otherwise we just depend on libtest.\n-        if builder.hosts.iter().any(|t| t == target) {\n-            builder.ensure(compile::Rustc { compiler, target });\n-        } else {\n-            builder.ensure(compile::Std { compiler, target });\n-        }\n+        builder.ensure(compile::Std { compiler, target });\n \n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n         let _ = fs::remove_dir_all(&image);\n \n-        let dst = image.join(\"lib/rustlib\").join(target);\n-        t!(fs::create_dir_all(&dst));\n-        let mut src = builder.sysroot_libdir(compiler, target).to_path_buf();\n-        src.pop(); // Remove the trailing /lib folder from the sysroot_libdir\n-        builder.cp_filtered(&src, &dst, &|path| {\n-            if let Some(name) = path.file_name().and_then(|s| s.to_str()) {\n-                if name == builder.config.rust_codegen_backends_dir.as_str() {\n-                    return false\n-                }\n-                if name == \"bin\" {\n-                    return false\n-                }\n-                if name.contains(\"LLVM\") {\n-                    return false\n-                }\n-            }\n-            true\n-        });\n+        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n+        let stamp = compile::libstd_stamp(builder, compiler_to_use, target);\n+        copy_target_libs(builder, &target, &image, &stamp);\n \n         let mut cmd = rust_installer(builder);\n         cmd.arg(\"generate\")\n@@ -723,7 +720,73 @@ impl Step for Std {\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n+        archive\n+    }\n+}\n+\n+#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct RustcDev {\n+    pub compiler: Compiler,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for RustcDev {\n+    type Output = PathBuf;\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"rustc-dev\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(RustcDev {\n+            compiler: run.builder.compiler_for(\n+                run.builder.top_stage,\n+                run.builder.config.build,\n+                run.target,\n+            ),\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+        let compiler = self.compiler;\n+        let target = self.target;\n+\n+        let name = pkgname(builder, \"rustc-dev\");\n+        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        if skip_host_target_lib(builder, compiler) {\n+            return archive;\n+        }\n+\n+        builder.ensure(compile::Rustc { compiler, target });\n+\n+        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n+        let _ = fs::remove_dir_all(&image);\n+\n+        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n+        let stamp = compile::librustc_stamp(builder, compiler_to_use, target);\n+        copy_target_libs(builder, &target, &image, &stamp);\n+\n+        let mut cmd = rust_installer(builder);\n+        cmd.arg(\"generate\")\n+           .arg(\"--product-name=Rust\")\n+           .arg(\"--rel-manifest-dir=rustlib\")\n+           .arg(\"--success-message=Rust-is-ready-to-develop.\")\n+           .arg(\"--image-dir\").arg(&image)\n+           .arg(\"--work-dir\").arg(&tmpdir(builder))\n+           .arg(\"--output-dir\").arg(&distdir(builder))\n+           .arg(format!(\"--package-name={}-{}\", name, target))\n+           .arg(format!(\"--component-name=rustc-dev-{}\", target))\n+           .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+\n+        builder.info(&format!(\"Dist rustc-dev stage{} ({} -> {})\",\n+            compiler.stage, &compiler.host, target));\n+        let _time = timeit(builder);\n+        builder.run(&mut cmd);\n+        builder.remove_dir(&image);\n+        archive\n     }\n }\n "}, {"sha": "c0d2deab2f8ba2a5ba86d9e15c596a9588bec3a2", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/000d90b11f7be70ffb7812680f7abc6deb52ec88/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000d90b11f7be70ffb7812680f7abc6deb52ec88/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=000d90b11f7be70ffb7812680f7abc6deb52ec88", "patch": "@@ -399,6 +399,7 @@ impl Builder {\n     fn add_packages_to(&mut self, manifest: &mut Manifest) {\n         let mut package = |name, targets| self.package(name, &mut manifest.pkg, targets);\n         package(\"rustc\", HOSTS);\n+        package(\"rustc-dev\", HOSTS);\n         package(\"cargo\", HOSTS);\n         package(\"rust-mingw\", MINGW);\n         package(\"rust-std\", TARGETS);\n@@ -426,6 +427,13 @@ impl Builder {\n             \"rls-preview\", \"rust-src\", \"llvm-tools-preview\",\n             \"lldb-preview\", \"rust-analysis\", \"miri-preview\"\n         ]);\n+\n+        // The compiler libraries are not stable for end users, but `rustc-dev` was only recently\n+        // split out of `rust-std`. We'll include it by default as a transition for nightly users.\n+        if self.rust_release == \"nightly\" {\n+            self.extend_profile(\"default\", &mut manifest.profiles, &[\"rustc-dev\"]);\n+            self.extend_profile(\"complete\", &mut manifest.profiles, &[\"rustc-dev\"]);\n+        }\n     }\n \n     fn add_renames_to(&self, manifest: &mut Manifest) {\n@@ -481,6 +489,15 @@ impl Builder {\n             components.push(host_component(\"rust-mingw\"));\n         }\n \n+        // The compiler libraries are not stable for end users, but `rustc-dev` was only recently\n+        // split out of `rust-std`. We'll include it by default as a transition for nightly users,\n+        // but ship it as an optional component on the beta and stable channels.\n+        if self.rust_release == \"nightly\" {\n+            components.push(host_component(\"rustc-dev\"));\n+        } else {\n+            extensions.push(host_component(\"rustc-dev\"));\n+        }\n+\n         // Tools are always present in the manifest,\n         // but might be marked as unavailable if they weren't built.\n         extensions.extend(vec![\n@@ -498,6 +515,11 @@ impl Builder {\n                 .filter(|&&target| target != host)\n                 .map(|target| Component::from_str(\"rust-std\", target))\n         );\n+        extensions.extend(\n+            HOSTS.iter()\n+                .filter(|&&target| target != host)\n+                .map(|target| Component::from_str(\"rustc-dev\", target))\n+        );\n         extensions.push(Component::from_str(\"rust-src\", \"*\"));\n \n         // If the components/extensions don't actually exist for this\n@@ -534,6 +556,14 @@ impl Builder {\n         dst.insert(profile_name.to_owned(), pkgs.iter().map(|s| (*s).to_owned()).collect());\n     }\n \n+    fn extend_profile(&mut self,\n+               profile_name: &str,\n+               dst: &mut BTreeMap<String, Vec<String>>,\n+               pkgs: &[&str]) {\n+        dst.get_mut(profile_name).expect(\"existing profile\")\n+            .extend(pkgs.iter().map(|s| (*s).to_owned()));\n+    }\n+\n     fn package(&mut self,\n                pkgname: &str,\n                dst: &mut BTreeMap<String, Package>,"}]}