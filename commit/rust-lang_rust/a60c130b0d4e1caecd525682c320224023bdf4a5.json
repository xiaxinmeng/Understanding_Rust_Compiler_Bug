{"sha": "a60c130b0d4e1caecd525682c320224023bdf4a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MGMxMzBiMGQ0ZTFjYWVjZDUyNTY4MmMzMjAyMjQwMjNiZGY0YTU=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-06-08T23:34:02Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-06-08T23:34:02Z"}, "message": "Extract common logic for Windows host workaround", "tree": {"sha": "852edc808d7c3fa7169aa94b69893c93521f9abf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/852edc808d7c3fa7169aa94b69893c93521f9abf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a60c130b0d4e1caecd525682c320224023bdf4a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a60c130b0d4e1caecd525682c320224023bdf4a5", "html_url": "https://github.com/rust-lang/rust/commit/a60c130b0d4e1caecd525682c320224023bdf4a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a60c130b0d4e1caecd525682c320224023bdf4a5/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e352d4fbb7bc46b66debd642967f18b9c7ecea2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e352d4fbb7bc46b66debd642967f18b9c7ecea2f", "html_url": "https://github.com/rust-lang/rust/commit/e352d4fbb7bc46b66debd642967f18b9c7ecea2f"}], "stats": {"total": 64, "additions": 24, "deletions": 40}, "files": [{"sha": "c789263ebea76f3f95482e783ab421358fab495e", "filename": "src/shims/fs.rs", "status": "modified", "additions": 24, "deletions": 40, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a60c130b0d4e1caecd525682c320224023bdf4a5/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60c130b0d4e1caecd525682c320224023bdf4a5/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=a60c130b0d4e1caecd525682c320224023bdf4a5", "patch": "@@ -232,6 +232,18 @@ impl Default for DirHandler {\n     }\n }\n \n+fn maybe_sync_file(file: &File, writable: bool, operation: fn(&File) -> std::io::Result<()>) -> std::io::Result<i32> {\n+    if !writable && cfg!(windows) {\n+        // sync_all() and sync_data() will return an error on Windows hosts if the file is not opened\n+        // for writing. (FlushFileBuffers requires that the file handle have the\n+        // GENERIC_WRITE right)\n+        Ok(0i32)\n+    } else {\n+        let result = operation(file);\n+        result.map(|_| 0i32)\n+    }\n+}\n+\n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn open(\n@@ -379,16 +391,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             && cmd == this.eval_libc_i32(\"F_FULLFSYNC\")?\n         {\n             let &[_, _] = check_arg_count(args)?;\n-            if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get_mut(&fd) {\n-                if !*writable && cfg!(windows) {\n-                    // sync_all() will return an error on Windows hosts if the file is not opened\n-                    // for writing. (FlushFileBuffers requires that the file handle have the\n-                    // GENERIC_WRITE right)\n-                    Ok(0i32)\n-                } else {\n-                    let result = file.sync_all();\n-                    this.try_unwrap_io_result(result.map(|_| 0i32))\n-                }\n+            if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get(&fd) {\n+                let io_result = maybe_sync_file(file, *writable, File::sync_all);\n+                this.try_unwrap_io_result(io_result)\n             } else {\n                 this.handle_not_found()\n             }\n@@ -1132,15 +1137,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.check_no_isolation(\"fsync\")?;\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n-        if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get_mut(&fd) {\n-            if !*writable && cfg!(windows) {\n-                // sync_all() will return an error on Windows hosts if the file is not opened for writing.\n-                // (FlushFileBuffers requires that the file handle have the GENERIC_WRITE right)\n-                Ok(0i32)\n-            } else {\n-                let result = file.sync_all();\n-                this.try_unwrap_io_result(result.map(|_| 0i32))\n-            }\n+        if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get(&fd) {\n+            let io_result = maybe_sync_file(file, *writable, File::sync_all);\n+            this.try_unwrap_io_result(io_result)\n         } else {\n             this.handle_not_found()\n         }\n@@ -1152,15 +1151,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.check_no_isolation(\"fdatasync\")?;\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n-        if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get_mut(&fd) {\n-            if !*writable && cfg!(windows) {\n-                // sync_data() will return an error on Windows hosts if the file is not opened for writing.\n-                // (FlushFileBuffers requires that the file handle have the GENERIC_WRITE right)\n-                Ok(0i32)\n-            } else {\n-                let result = file.sync_data();\n-                this.try_unwrap_io_result(result.map(|_| 0i32))\n-            }\n+        if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get(&fd) {\n+            let io_result = maybe_sync_file(file, *writable, File::sync_data);\n+            this.try_unwrap_io_result(io_result)\n         } else {\n             this.handle_not_found()\n         }\n@@ -1196,18 +1189,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok(-1);\n         }\n \n-        if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get_mut(&fd) {\n-            if !*writable && cfg!(windows) {\n-                // sync_data() will return an error on Windows hosts if the file is not opened for\n-                // writing. (FlushFileBuffers requires that the file handle have the GENERIC_WRITE\n-                // right)\n-                Ok(0i32)\n-            } else {\n-                // In the interest of host compatibility, we conservatively ignore\n-                // offset, nbytes, and flags, and sync the entire file.\n-                let result = file.sync_data();\n-                this.try_unwrap_io_result(result.map(|_| 0i32))\n-            }\n+        if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get(&fd) {\n+            let io_result = maybe_sync_file(file, *writable, File::sync_data);\n+            this.try_unwrap_io_result(io_result)\n         } else {\n             this.handle_not_found()\n         }"}]}