{"sha": "ae7633f434011fe1829b9b235a20d91634479eb5", "node_id": "C_kwDOAAsO6NoAKGFlNzYzM2Y0MzQwMTFmZTE4MjliOWIyMzVhMjBkOTE2MzQ0NzllYjU", "commit": {"author": {"name": "Tomoaki Kawada", "email": "kawada@kmckk.co.jp", "date": "2022-12-01T02:56:31Z"}, "committer": {"name": "Tomoaki Kawada", "email": "kawada@kmckk.co.jp", "date": "2022-12-02T07:58:41Z"}, "message": "kmc-solid: Don't do `Box::from_raw(&*(x: Box<T>) as *const T as *mut T)`\n\nThis pattern seems to be considered illegal by Miri.", "tree": {"sha": "55583de07b312f72b08010aa63883a3181bb94d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55583de07b312f72b08010aa63883a3181bb94d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae7633f434011fe1829b9b235a20d91634479eb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7633f434011fe1829b9b235a20d91634479eb5", "html_url": "https://github.com/rust-lang/rust/commit/ae7633f434011fe1829b9b235a20d91634479eb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae7633f434011fe1829b9b235a20d91634479eb5/comments", "author": {"login": "kawadakk", "id": 81723441, "node_id": "MDQ6VXNlcjgxNzIzNDQx", "avatar_url": "https://avatars.githubusercontent.com/u/81723441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kawadakk", "html_url": "https://github.com/kawadakk", "followers_url": "https://api.github.com/users/kawadakk/followers", "following_url": "https://api.github.com/users/kawadakk/following{/other_user}", "gists_url": "https://api.github.com/users/kawadakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kawadakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kawadakk/subscriptions", "organizations_url": "https://api.github.com/users/kawadakk/orgs", "repos_url": "https://api.github.com/users/kawadakk/repos", "events_url": "https://api.github.com/users/kawadakk/events{/privacy}", "received_events_url": "https://api.github.com/users/kawadakk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kawadakk", "id": 81723441, "node_id": "MDQ6VXNlcjgxNzIzNDQx", "avatar_url": "https://avatars.githubusercontent.com/u/81723441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kawadakk", "html_url": "https://github.com/kawadakk", "followers_url": "https://api.github.com/users/kawadakk/followers", "following_url": "https://api.github.com/users/kawadakk/following{/other_user}", "gists_url": "https://api.github.com/users/kawadakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kawadakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kawadakk/subscriptions", "organizations_url": "https://api.github.com/users/kawadakk/orgs", "repos_url": "https://api.github.com/users/kawadakk/repos", "events_url": "https://api.github.com/users/kawadakk/events{/privacy}", "received_events_url": "https://api.github.com/users/kawadakk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f482e55adf3fb76860d304c9b7f5c7f3f9a40717", "url": "https://api.github.com/repos/rust-lang/rust/commits/f482e55adf3fb76860d304c9b7f5c7f3f9a40717", "html_url": "https://github.com/rust-lang/rust/commit/f482e55adf3fb76860d304c9b7f5c7f3f9a40717"}], "stats": {"total": 48, "additions": 30, "deletions": 18}, "files": [{"sha": "c2b3668087225cdc884a28d3a15660974c16b98d", "filename": "library/std/src/sys/itron/thread.rs", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ae7633f434011fe1829b9b235a20d91634479eb5/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae7633f434011fe1829b9b235a20d91634479eb5/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs?ref=ae7633f434011fe1829b9b235a20d91634479eb5", "patch": "@@ -11,18 +11,25 @@ use crate::{\n     ffi::CStr,\n     hint, io,\n     mem::ManuallyDrop,\n+    ptr::NonNull,\n     sync::atomic::{AtomicUsize, Ordering},\n     sys::thread_local_dtor::run_dtors,\n     time::Duration,\n };\n \n pub struct Thread {\n-    inner: ManuallyDrop<Box<ThreadInner>>,\n+    p_inner: NonNull<ThreadInner>,\n \n     /// The ID of the underlying task.\n     task: abi::ID,\n }\n \n+// Safety: There's nothing in `Thread` that ties it to the original creator. It\n+//         can be dropped by any threads.\n+unsafe impl Send for Thread {}\n+// Safety: `Thread` provides no methods that take `&self`.\n+unsafe impl Sync for Thread {}\n+\n /// State data shared between a parent thread and child thread. It's dropped on\n /// a transition to one of the final states.\n struct ThreadInner {\n@@ -90,8 +97,9 @@ impl Thread {\n         });\n \n         unsafe extern \"C\" fn trampoline(exinf: isize) {\n+            let p_inner: *mut ThreadInner = crate::ptr::from_exposed_addr_mut(exinf as usize);\n             // Safety: `ThreadInner` is alive at this point\n-            let inner: &ThreadInner = unsafe { &*crate::ptr::from_exposed_addr(exinf as usize) };\n+            let inner = unsafe { &*p_inner };\n \n             // Safety: Since `trampoline` is called only once for each\n             //         `ThreadInner` and only `trampoline` touches `start`,\n@@ -119,13 +127,13 @@ impl Thread {\n                     // No one will ever join, so we'll ask the collector task to\n                     // delete the task.\n \n-                    // In this case, `inner`'s ownership has been moved to us,\n-                    // And we are responsible for dropping it. The acquire\n+                    // In this case, `*p_inner`'s ownership has been moved to\n+                    // us, and we are responsible for dropping it. The acquire\n                     // ordering is not necessary because the parent thread made\n                     // no memory access needing synchronization since the call\n                     // to `acre_tsk`.\n                     // Safety: See above.\n-                    let _ = unsafe { Box::from_raw(inner as *const _ as *mut ThreadInner) };\n+                    let _ = unsafe { Box::from_raw(p_inner) };\n \n                     // Safety: There are no pinned references to the stack\n                     unsafe { terminate_and_delete_current_task() };\n@@ -162,13 +170,14 @@ impl Thread {\n             }\n         }\n \n-        let inner_ptr = (&*inner) as *const ThreadInner;\n+        // Safety: `Box::into_raw` returns a non-null pointer\n+        let p_inner = unsafe { NonNull::new_unchecked(Box::into_raw(inner)) };\n \n         let new_task = ItronError::err_if_negative(unsafe {\n             abi::acre_tsk(&abi::T_CTSK {\n                 // Activate this task immediately\n                 tskatr: abi::TA_ACT,\n-                exinf: inner_ptr.expose_addr() as abi::EXINF,\n+                exinf: p_inner.as_ptr().expose_addr() as abi::EXINF,\n                 // The entry point\n                 task: Some(trampoline),\n                 // Inherit the calling task's base priority\n@@ -180,7 +189,7 @@ impl Thread {\n         })\n         .map_err(|e| e.as_io_error())?;\n \n-        Ok(Self { inner: ManuallyDrop::new(inner), task: new_task })\n+        Ok(Self { p_inner, task: new_task })\n     }\n \n     pub fn yield_now() {\n@@ -197,8 +206,9 @@ impl Thread {\n         }\n     }\n \n-    pub fn join(mut self) {\n-        let inner = &*self.inner;\n+    pub fn join(self) {\n+        // Safety: `ThreadInner` is alive at this point\n+        let inner = unsafe { self.p_inner.as_ref() };\n         // Get the current task ID. Panicking here would cause a resource leak,\n         // so just abort on failure.\n         let current_task = task::current_task_id_aborting();\n@@ -243,8 +253,8 @@ impl Thread {\n         unsafe { terminate_and_delete_task(self.task) };\n \n         // In either case, we are responsible for dropping `inner`.\n-        // Safety: The contents of `self.inner` will not be accessed hereafter\n-        let _inner = unsafe { ManuallyDrop::take(&mut self.inner) };\n+        // Safety: The contents of `*p_inner` will not be accessed hereafter\n+        let _inner = unsafe { Box::from_raw(self.p_inner.as_ptr()) };\n \n         // Skip the destructor (because it would attempt to detach the thread)\n         crate::mem::forget(self);\n@@ -253,13 +263,16 @@ impl Thread {\n \n impl Drop for Thread {\n     fn drop(&mut self) {\n+        // Safety: `ThreadInner` is alive at this point\n+        let inner = unsafe { self.p_inner.as_ref() };\n+\n         // Detach the thread.\n-        match self.inner.lifecycle.swap(LIFECYCLE_DETACHED_OR_JOINED, Ordering::Acquire) {\n+        match inner.lifecycle.swap(LIFECYCLE_DETACHED_OR_JOINED, Ordering::Acquire) {\n             LIFECYCLE_INIT => {\n                 // [INIT \u2192 DETACHED]\n                 // When the time comes, the child will figure out that no\n                 // one will ever join it.\n-                // The ownership of `self.inner` is moved to the child thread.\n+                // The ownership of `*p_inner` is moved to the child thread.\n                 // However, the release ordering is not necessary because we\n                 // made no memory access needing synchronization since the call\n                 // to `acre_tsk`.\n@@ -278,10 +291,9 @@ impl Drop for Thread {\n                 //         delete by entering the `FINISHED` state.\n                 unsafe { terminate_and_delete_task(self.task) };\n \n-                // Wwe are responsible for dropping `inner`.\n-                // Safety: The contents of `self.inner` will not be accessed\n-                //         hereafter\n-                unsafe { ManuallyDrop::drop(&mut self.inner) };\n+                // Wwe are responsible for dropping `*p_inner`.\n+                // Safety: The contents of `*p_inner` will not be accessed hereafter\n+                let _ = unsafe { Box::from_raw(self.p_inner.as_ptr()) };\n             }\n             _ => unsafe { hint::unreachable_unchecked() },\n         }"}]}