{"sha": "bab9abefa14d762a50920120315f4531681ab01a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYjlhYmVmYTE0ZDc2MmE1MDkyMDEyMDMxNWY0NTMxNjgxYWIwMWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-11T09:05:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-11T09:05:29Z"}, "message": "Merge branch 'master' into appveyor", "tree": {"sha": "ceaa0ebace89e296c90d3bf553af6dd333a4fa8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceaa0ebace89e296c90d3bf553af6dd333a4fa8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bab9abefa14d762a50920120315f4531681ab01a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcYTrZCRBK7hj4Ov3rIwAAdHIIAIHec3sqDnFtPdS7ibAdSYAO\n5QkocvBg/awsJ7ibrU3UV+PNx/REJHtPtURfA46xzcqxWGt6PtP+uBLXBJNfRVOQ\nrYjP/dzMVDle1EZ7JwQObYjgS4Qq6uizPYWTuH5CSuJwARbY52zO8UAuIuq7je9i\n/VWyiTZmyeh43tJkOpJE+6X16J9Rkw/UNkaYfR33seRZiiR4JAjU/BPqFY5SMXzO\n+k3WhlClMx2xAczYL7Q2lhUHhMdk30yB2y3MRbOe+IvACz+OrKCcyKHHLtVhGHbW\nUzh3GZHICiqb70WE0V8x9kLsXzNuZeHxwanscRTJS3jXco+mOfbKvz7aXggKcdk=\n=3N17\n-----END PGP SIGNATURE-----\n", "payload": "tree ceaa0ebace89e296c90d3bf553af6dd333a4fa8b\nparent 88bb7a1525fa03173c5f04b3dcdac34ca2bce082\nparent ecb8755c9746567bcfe4f9e3ea3666adcb34f6a3\nauthor Ralf Jung <post@ralfj.de> 1549875929 +0100\ncommitter GitHub <noreply@github.com> 1549875929 +0100\n\nMerge branch 'master' into appveyor"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bab9abefa14d762a50920120315f4531681ab01a", "html_url": "https://github.com/rust-lang/rust/commit/bab9abefa14d762a50920120315f4531681ab01a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bab9abefa14d762a50920120315f4531681ab01a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88bb7a1525fa03173c5f04b3dcdac34ca2bce082", "url": "https://api.github.com/repos/rust-lang/rust/commits/88bb7a1525fa03173c5f04b3dcdac34ca2bce082", "html_url": "https://github.com/rust-lang/rust/commit/88bb7a1525fa03173c5f04b3dcdac34ca2bce082"}, {"sha": "ecb8755c9746567bcfe4f9e3ea3666adcb34f6a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecb8755c9746567bcfe4f9e3ea3666adcb34f6a3", "html_url": "https://github.com/rust-lang/rust/commit/ecb8755c9746567bcfe4f9e3ea3666adcb34f6a3"}], "stats": {"total": 216, "additions": 160, "deletions": 56}, "files": [{"sha": "721ebe5cfd46b972a7241d1039081aeb2eb81a03", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bab9abefa14d762a50920120315f4531681ab01a/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bab9abefa14d762a50920120315f4531681ab01a/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=bab9abefa14d762a50920120315f4531681ab01a", "patch": "@@ -39,6 +39,7 @@ directories = { version = \"1.0\", optional = true }\n rustc_version = { version = \"0.2.3\", optional = true }\n env_logger = \"0.6\"\n log = \"0.4\"\n+shell-escape = \"0.1.4\"\n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`\n # for more information."}, {"sha": "21e9fa43a8f8c55ec53ea6759de1dc73154928e2", "filename": "README.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bab9abefa14d762a50920120315f4531681ab01a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/bab9abefa14d762a50920120315f4531681ab01a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=bab9abefa14d762a50920120315f4531681ab01a", "patch": "@@ -48,6 +48,13 @@ Now you can run your project in Miri:\n 3. If you have a binary project, you can run it through Miri using `cargo\n    +nightly miri run`.\n \n+You can pass arguments to Miri after the first `--`, and pass arguments to the\n+interpreted program or test suite after the second `--`.  For example, `cargo\n++nightly miri run -- -Zmiri-disable-validation` runs the program without\n+validation of basic type invariants and references.  `cargo +nightly miri test\n+-- -- filter` passes `filter` to the test suite the same way `cargo test filter`\n+would.\n+\n When running code via `cargo miri`, the `miri` config flag is set.  You can\n use this to exclude test cases that will fail under Miri because they do things\n Miri does not support:"}, {"sha": "404fe7ae91501928f0b86740aa61af7323a8cd44", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bab9abefa14d762a50920120315f4531681ab01a/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab9abefa14d762a50920120315f4531681ab01a/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=bab9abefa14d762a50920120315f4531681ab01a", "patch": "@@ -4,11 +4,13 @@ extern crate rustc;\n extern crate rustc_driver;\n extern crate test;\n \n-use self::miri::eval_main;\n-use self::rustc_driver::{driver, Compilation};\n+use rustc_driver::{driver, Compilation};\n use rustc::hir::def_id::LOCAL_CRATE;\n use std::cell::RefCell;\n use std::rc::Rc;\n+\n+use miri::{MiriConfig, eval_main};\n+\n use crate::test::Bencher;\n \n pub struct MiriCompilerCalls<'a>(Rc<RefCell<&'a mut Bencher>>);\n@@ -50,7 +52,8 @@ pub fn run(filename: &str, bencher: &mut Bencher) {\n         );\n \n         bencher.borrow_mut().iter(|| {\n-            eval_main(tcx, entry_def_id, false);\n+            let config = MiriConfig { validate: true, args: vec![] };\n+            eval_main(tcx, entry_def_id, config);\n         });\n \n         state.session.abort_if_errors();"}, {"sha": "93200f33a260644e477789b2a5ba8738c3f8e1f8", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bab9abefa14d762a50920120315f4531681ab01a/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab9abefa14d762a50920120315f4531681ab01a/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=bab9abefa14d762a50920120315f4531681ab01a", "patch": "@@ -10,7 +10,7 @@ use std::fs::{self, File};\n const CARGO_MIRI_HELP: &str = r#\"Interprets bin crates and tests in Miri\n \n Usage:\n-    cargo miri [subcommand] [options] [--] [<miri opts>...]\n+    cargo miri [subcommand] [options] [--] [<miri opts>...] [--] [<program opts>...]\n \n Subcommands:\n     run                      Run binaries (default)\n@@ -22,8 +22,9 @@ Common options:\n     --features               Features to compile for the package\n     -V, --version            Print version info and exit\n \n-Other [options] are the same as `cargo rustc`.  Everything after the \"--\" is\n-passed verbatim to Miri.\n+Other [options] are the same as `cargo rustc`.  Everything after the first \"--\" is\n+passed verbatim to Miri, which will pass everything after the second \"--\" verbatim\n+to the interpreted program.\n \n The config flag `miri` is automatically defined for convenience. You can use\n it to configure the resource limits\n@@ -355,11 +356,13 @@ fn in_cargo_miri() {\n             }\n             cmd.arg(arg);\n         }\n-        // add \"--\" \"-Zcargo-miri-marker\" and the remaining user flags\n+        // Add \"--\" (to end the cargo flags), and then the user flags.  We add markers around the user flags\n+        // to be able to identify them later.\n         cmd\n             .arg(\"--\")\n-            .arg(\"cargo-miri-marker\")\n-            .args(args);\n+            .arg(\"cargo-miri-marker-begin\")\n+            .args(args)\n+            .arg(\"cargo-miri-marker-end\");\n         let path = std::env::current_exe().expect(\"current executable path invalid\");\n         cmd.env(\"RUSTC_WRAPPER\", path);\n         if verbose {\n@@ -413,10 +416,19 @@ fn inside_cargo_rustc() {\n     };\n     args.splice(0..0, miri::miri_default_args().iter().map(ToString::to_string));\n \n-    // see if we have cargo-miri-marker, which means we want to interpret this crate in Miri\n-    // (and remove the marker).\n-    let needs_miri = if let Some(pos) = args.iter().position(|arg| arg == \"cargo-miri-marker\") {\n-        args.remove(pos);\n+    // See if we can find the cargo-miri markers.  Those only get added to the binary we want to\n+    // run.  They also serve to mark the user-defined arguments, which we have to move all the way to the\n+    // end (they get added somewhere in the middle).\n+    let needs_miri = if let Some(begin) = args.iter().position(|arg| arg == \"cargo-miri-marker-begin\") {\n+        let end = args.iter().position(|arg| arg == \"cargo-miri-marker-end\").expect(\"Cannot find end marker\");\n+        // These mark the user arguments.  We remove the first and last as they are the markers.\n+        let mut user_args = args.drain(begin..=end);\n+        assert_eq!(user_args.next().unwrap(), \"cargo-miri-marker-begin\");\n+        assert_eq!(user_args.next_back().unwrap(), \"cargo-miri-marker-end\");\n+        // Collect the rest and add it back at the end\n+        let mut user_args = user_args.collect::<Vec<String>>();\n+        args.append(&mut user_args);\n+        // Run this in Miri\n         true\n     } else {\n         false"}, {"sha": "3a70577cb7f22c00f0a02f4a0bb125ba987ecc12", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bab9abefa14d762a50920120315f4531681ab01a/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab9abefa14d762a50920120315f4531681ab01a/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=bab9abefa14d762a50920120315f4531681ab01a", "patch": "@@ -25,6 +25,8 @@ use rustc::ty::TyCtxt;\n use syntax::ast;\n use rustc::hir::def_id::LOCAL_CRATE;\n \n+use miri::MiriConfig;\n+\n struct MiriCompilerCalls {\n     default: Box<RustcDefaultCalls>,\n     /// whether we are building for the host\n@@ -94,9 +96,10 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n             fn visit_item(&mut self, i: &'hir hir::Item) {\n                 if let hir::ItemKind::Fn(.., body_id) = i.node {\n                     if i.attrs.iter().any(|attr| attr.name() == \"test\") {\n+                        let config = MiriConfig { validate: true, args: vec![] };\n                         let did = self.0.hir().body_owner_def_id(body_id);\n                         println!(\"running test: {}\", self.0.def_path_debug_str(did));\n-                        miri::eval_main(self.0, did, /*validate*/true);\n+                        miri::eval_main(self.0, did, config);\n                         self.1.session.abort_if_errors();\n                     }\n                 }\n@@ -106,7 +109,8 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n         }\n         state.hir_crate.unwrap().visit_all_item_likes(&mut Visitor(tcx, state));\n     } else if let Some((entry_def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n-        miri::eval_main(tcx, entry_def_id, /*validate*/true);\n+        let config = MiriConfig { validate: true, args: vec![] };\n+        miri::eval_main(tcx, entry_def_id, config);\n \n         state.session.abort_if_errors();\n     } else {"}, {"sha": "31bd1deb10f57e6c3df135caa65f75dc39a13bc7", "filename": "src/bin/miri.rs", "status": "modified", "additions": 43, "deletions": 24, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/bab9abefa14d762a50920120315f4531681ab01a/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab9abefa14d762a50920120315f4531681ab01a/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=bab9abefa14d762a50920120315f4531681ab01a", "patch": "@@ -27,11 +27,11 @@ use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc::hir::def_id::LOCAL_CRATE;\n use syntax::ast;\n \n+use miri::MiriConfig;\n+\n struct MiriCompilerCalls {\n     default: Box<RustcDefaultCalls>,\n-\n-    /// Whether to enforce the validity invariant.\n-    validate: bool,\n+    miri_config: MiriConfig,\n }\n \n impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n@@ -79,6 +79,8 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         odir: &Option<PathBuf>,\n         ofile: &Option<PathBuf>,\n     ) -> Compilation {\n+        // Called *before* build_controller. Add filename to miri arguments.\n+        self.miri_config.args.insert(0, input.filestem().to_string());\n         self.default.late_callback(codegen_backend, matches, sess, cstore, input, odir, ofile)\n     }\n     fn build_controller(\n@@ -89,9 +91,9 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         let this = *self;\n         let mut control = this.default.build_controller(sess, matches);\n         control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n-        let validate = this.validate;\n+        let miri_config = this.miri_config;\n         control.after_analysis.callback =\n-            Box::new(move |state| after_analysis(state, validate));\n+            Box::new(move |state| after_analysis(state, miri_config.clone()));\n         control.after_analysis.stop = Compilation::Stop;\n         control\n     }\n@@ -107,7 +109,7 @@ fn after_hir_lowering(state: &mut CompileState) {\n \n fn after_analysis<'a, 'tcx>(\n     state: &mut CompileState<'a, 'tcx>,\n-    validate: bool,\n+    miri_config: MiriConfig,\n ) {\n     init_late_loggers();\n     state.session.abort_if_errors();\n@@ -117,7 +119,7 @@ fn after_analysis<'a, 'tcx>(\n \n     let (entry_def_id, _) = tcx.entry_fn(LOCAL_CRATE).expect(\"no main function found!\");\n \n-    miri::eval_main(tcx, entry_def_id, validate);\n+    miri::eval_main(tcx, entry_def_id, miri_config);\n \n     state.session.abort_if_errors();\n }\n@@ -188,34 +190,51 @@ fn find_sysroot() -> String {\n \n fn main() {\n     init_early_loggers();\n-    let mut args: Vec<String> = std::env::args().collect();\n \n-    // Parse our own -Z flags and remove them before rustc gets their hand on them.\n+    // Parse our arguments and split them across rustc and miri\n     let mut validate = true;\n-    args.retain(|arg| {\n-        match arg.as_str() {\n-            \"-Zmiri-disable-validation\" => {\n-                validate = false;\n-                false\n-            },\n-            _ => true\n+    let mut rustc_args = vec![];\n+    let mut miri_args = vec![];\n+    let mut after_dashdash = false;\n+    for arg in std::env::args() {\n+        if rustc_args.is_empty() {\n+            // Very first arg: for rustc\n+            rustc_args.push(arg);\n         }\n-    });\n+        else if after_dashdash {\n+            // Everything that comes is Miri args\n+            miri_args.push(arg);\n+        } else {\n+            match arg.as_str() {\n+                \"-Zmiri-disable-validation\" => {\n+                    validate = false;\n+                },\n+                \"--\" => {\n+                    after_dashdash = true;\n+                }\n+                _ => {\n+                    rustc_args.push(arg);\n+                }\n+            }\n+        }\n+    }\n \n     // Determine sysroot and let rustc know about it\n     let sysroot_flag = String::from(\"--sysroot\");\n-    if !args.contains(&sysroot_flag) {\n-        args.push(sysroot_flag);\n-        args.push(find_sysroot());\n+    if !rustc_args.contains(&sysroot_flag) {\n+        rustc_args.push(sysroot_flag);\n+        rustc_args.push(find_sysroot());\n     }\n     // Finally, add the default flags all the way in the beginning, but after the binary name.\n-    args.splice(1..1, miri::miri_default_args().iter().map(ToString::to_string));\n+    rustc_args.splice(1..1, miri::miri_default_args().iter().map(ToString::to_string));\n \n-    trace!(\"rustc arguments: {:?}\", args);\n+    debug!(\"rustc arguments: {:?}\", rustc_args);\n+    debug!(\"miri arguments: {:?}\", miri_args);\n+    let miri_config = MiriConfig { validate, args: miri_args };\n     let result = rustc_driver::run(move || {\n-        rustc_driver::run_compiler(&args, Box::new(MiriCompilerCalls {\n+        rustc_driver::run_compiler(&rustc_args, Box::new(MiriCompilerCalls {\n             default: Box::new(RustcDefaultCalls),\n-            validate,\n+            miri_config,\n         }), None, None)\n     });\n     std::process::exit(result as i32);"}, {"sha": "f59a476ed94e8478af52371d267d80053e631b1f", "filename": "src/lib.rs", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/bab9abefa14d762a50920120315f4531681ab01a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab9abefa14d762a50920120315f4531681ab01a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bab9abefa14d762a50920120315f4531681ab01a", "patch": "@@ -57,16 +57,23 @@ pub fn miri_default_args() -> &'static [&'static str] {\n     &[\"-Zalways-encode-mir\", \"-Zmir-emit-retag\", \"-Zmir-opt-level=0\", \"--cfg=miri\"]\n }\n \n+/// Configuration needed to spawn a Miri instance\n+#[derive(Clone)]\n+pub struct MiriConfig {\n+    pub validate: bool,\n+    pub args: Vec<String>,\n+}\n+\n // Used by priroda\n pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     main_id: DefId,\n-    validate: bool,\n+    config: MiriConfig,\n ) -> EvalResult<'tcx, EvalContext<'a, 'mir, 'tcx, Evaluator<'tcx>>> {\n     let mut ecx = EvalContext::new(\n         tcx.at(syntax::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n-        Evaluator::new(validate),\n+        Evaluator::new(config.validate),\n     );\n \n     let main_instance = ty::Instance::mono(ecx.tcx.tcx, main_id);\n@@ -120,7 +127,7 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n \n     // Second argument (argc): 1\n     let dest = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n-    let argc = Scalar::from_int(1, dest.layout.size);\n+    let argc = Scalar::from_uint(config.args.len() as u128, dest.layout.size);\n     ecx.write_scalar(argc, dest)?;\n     // Store argc for macOS _NSGetArgc\n     {\n@@ -130,26 +137,46 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     }\n \n     // FIXME: extract main source file path\n-    // Third argument (argv): &[b\"foo\"]\n-    const CMD: &str = \"running-in-miri\\0\";\n+    // Third argument (argv): Created from config.args\n     let dest = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n-    let cmd = ecx.memory_mut().allocate_static_bytes(CMD.as_bytes()).with_default_tag();\n-    let raw_str_layout = ecx.layout_of(ecx.tcx.mk_imm_ptr(ecx.tcx.types.u8))?;\n-    let cmd_place = ecx.allocate(raw_str_layout, MiriMemoryKind::Env.into());\n-    ecx.write_scalar(Scalar::Ptr(cmd), cmd_place.into())?;\n-    ecx.memory_mut().mark_immutable(cmd_place.to_ptr()?.alloc_id)?;\n+    // For Windows, construct a command string with all the aguments\n+    let mut cmd = String::new();\n+    for arg in config.args.iter() {\n+        if !cmd.is_empty() {\n+            cmd.push(' ');\n+        }\n+        cmd.push_str(&*shell_escape::windows::escape(arg.as_str().into()));\n+    }\n+    cmd.push(std::char::from_u32(0).unwrap()); // don't forget 0 terminator\n+    // Collect the pointers to the individual strings.\n+    let mut argvs = Vec::<Pointer<Borrow>>::new();\n+    for arg in config.args {\n+        // Add 0 terminator\n+        let mut arg = arg.into_bytes();\n+        arg.push(0);\n+        argvs.push(ecx.memory_mut().allocate_static_bytes(arg.as_slice()).with_default_tag());\n+    }\n+    // Make an array with all these pointers, in the Miri memory.\n+    let argvs_layout = ecx.layout_of(ecx.tcx.mk_array(ecx.tcx.mk_imm_ptr(ecx.tcx.types.u8), argvs.len() as u64))?;\n+    let argvs_place = ecx.allocate(argvs_layout, MiriMemoryKind::Env.into());\n+    for (idx, arg) in argvs.into_iter().enumerate() {\n+        let place = ecx.mplace_field(argvs_place, idx as u64)?;\n+        ecx.write_scalar(Scalar::Ptr(arg), place.into())?;\n+    }\n+    ecx.memory_mut().mark_immutable(argvs_place.to_ptr()?.alloc_id)?;\n+    // Write a pointe to that place as the argument.\n+    let argv = argvs_place.ptr;\n+    ecx.write_scalar(argv, dest)?;\n     // Store argv for macOS _NSGetArgv\n     {\n-        let argv = cmd_place.ptr;\n-        ecx.write_scalar(argv, dest)?;\n         let argv_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into());\n         ecx.write_scalar(argv, argv_place.into())?;\n         ecx.machine.argv = Some(argv_place.ptr.to_ptr()?);\n     }\n     // Store cmdline as UTF-16 for Windows GetCommandLineW\n     {\n         let tcx = &{ecx.tcx.tcx};\n-        let cmd_utf16: Vec<u16> = CMD.encode_utf16().collect();\n+        let cmd_utf16: Vec<u16> = cmd.encode_utf16().collect();\n         let cmd_ptr = ecx.memory_mut().allocate(\n             Size::from_bytes(cmd_utf16.len() as u64 * 2),\n             Align::from_bytes(2).unwrap(),\n@@ -179,9 +206,9 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n pub fn eval_main<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     main_id: DefId,\n-    validate: bool,\n+    config: MiriConfig,\n ) {\n-    let mut ecx = create_ecx(tcx, main_id, validate).expect(\"Couldn't create ecx\");\n+    let mut ecx = create_ecx(tcx, main_id, config).expect(\"Couldn't create ecx\");\n \n     // Run! The main execution.\n     let res: EvalResult = (|| {"}, {"sha": "8c59b6bcdead616496035b3d17b001011daeb946", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bab9abefa14d762a50920120315f4531681ab01a/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/bab9abefa14d762a50920120315f4531681ab01a/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=bab9abefa14d762a50920120315f4531681ab01a", "patch": "@@ -37,10 +37,19 @@ def test(name, cmd, stdout_ref, stderr_ref):\n \n def test_cargo_miri_run():\n     test(\"cargo miri run\", [\"cargo\", \"miri\", \"run\", \"-q\"], \"stdout.ref\", \"stderr.ref\")\n+    test(\"cargo miri run (with arguments)\",\n+        [\"cargo\", \"miri\", \"run\", \"-q\", \"--\", \"--\", \"hello world\", '\"hello world\"'],\n+        \"stdout.ref\", \"stderr.ref2\"\n+    )\n \n def test_cargo_miri_test():\n     test(\"cargo miri test\", [\"cargo\", \"miri\", \"test\", \"-q\"], \"test.stdout.ref\", \"test.stderr.ref\")\n+    test(\"cargo miri test (with filter)\",\n+        [\"cargo\", \"miri\", \"test\", \"-q\", \"--\", \"--\", \"impl\"],\n+        \"test.stdout.ref2\", \"test.stderr.ref\"\n+    )\n \n test_cargo_miri_run()\n test_cargo_miri_test()\n+print(\"TEST SUCCESSFUL!\")\n sys.exit(0)"}, {"sha": "32f1bac57d20ff4e5fe26a4a36c56567d33df613", "filename": "test-cargo-miri/src/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bab9abefa14d762a50920120315f4531681ab01a/test-cargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab9abefa14d762a50920120315f4531681ab01a/test-cargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fsrc%2Fmain.rs?ref=bab9abefa14d762a50920120315f4531681ab01a", "patch": "@@ -9,7 +9,9 @@ fn main() {\n     let n = <BigEndian as ByteOrder>::read_u32(buf);\n     assert_eq!(n, 0x01020304);\n     println!(\"{:#010x}\", n);\n-    eprintln!(\"standard error\");\n+    for arg in std::env::args() {\n+        eprintln!(\"{}\", arg);\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "ba2906d0666cf726c7eaadd2cd3db615dedfdf3a", "filename": "test-cargo-miri/stderr.ref", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bab9abefa14d762a50920120315f4531681ab01a/test-cargo-miri%2Fstderr.ref", "raw_url": "https://github.com/rust-lang/rust/raw/bab9abefa14d762a50920120315f4531681ab01a/test-cargo-miri%2Fstderr.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fstderr.ref?ref=bab9abefa14d762a50920120315f4531681ab01a", "patch": "@@ -1 +1 @@\n-standard error\n+main"}, {"sha": "8226b1b7cdec7f93577fa8dd1a7e8a5147d5145b", "filename": "test-cargo-miri/stderr.ref2", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bab9abefa14d762a50920120315f4531681ab01a/test-cargo-miri%2Fstderr.ref2", "raw_url": "https://github.com/rust-lang/rust/raw/bab9abefa14d762a50920120315f4531681ab01a/test-cargo-miri%2Fstderr.ref2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fstderr.ref2?ref=bab9abefa14d762a50920120315f4531681ab01a", "patch": "@@ -0,0 +1,3 @@\n+main\n+hello world\n+\"hello world\""}, {"sha": "ce3506709d5a09b46c0f09981b198d4d6b7b8dd5", "filename": "test-cargo-miri/test.stdout.ref2", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bab9abefa14d762a50920120315f4531681ab01a/test-cargo-miri%2Ftest.stdout.ref2", "raw_url": "https://github.com/rust-lang/rust/raw/bab9abefa14d762a50920120315f4531681ab01a/test-cargo-miri%2Ftest.stdout.ref2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref2?ref=bab9abefa14d762a50920120315f4531681ab01a", "patch": "@@ -0,0 +1,11 @@\n+\n+running 0 tests\n+\n+test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n+\n+\n+running 1 test\n+test simple ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n+"}, {"sha": "0116dce4992dcab2c92df739ed408773f601ee99", "filename": "tests/run-pass/args.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bab9abefa14d762a50920120315f4531681ab01a/tests%2Frun-pass%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab9abefa14d762a50920120315f4531681ab01a/tests%2Frun-pass%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fargs.rs?ref=bab9abefa14d762a50920120315f4531681ab01a", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    for arg in std::env::args() {\n+        println!(\"{}\", arg);\n+    }\n+}"}, {"sha": "9564f5a1aa056804e6b7f35d533c3a06afd76af9", "filename": "tests/run-pass/args.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bab9abefa14d762a50920120315f4531681ab01a/tests%2Frun-pass%2Fargs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/bab9abefa14d762a50920120315f4531681ab01a/tests%2Frun-pass%2Fargs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fargs.stdout?ref=bab9abefa14d762a50920120315f4531681ab01a", "patch": "@@ -0,0 +1 @@\n+args"}]}