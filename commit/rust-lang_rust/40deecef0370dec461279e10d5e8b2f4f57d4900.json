{"sha": "40deecef0370dec461279e10d5e8b2f4f57d4900", "node_id": "C_kwDOAAsO6NoAKDQwZGVlY2VmMDM3MGRlYzQ2MTI3OWUxMGQ1ZThiMmY0ZjU3ZDQ5MDA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-12T16:43:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-12T16:43:24Z"}, "message": "Rollup merge of #102719 - Nilstrieb:tidy-alphabetical, r=jackh726\n\nEnforce alphabetical sorting with tidy\n\nWe have many places where things are supposed to be sorted alphabetically. For the smaller and more recent size assertions, this is mostly upheld, but in other more... alive places it's very messy.\n\nThis introduces a new tidy directive to check that a section of code is sorted alphabetically and fixes all places where sorting has gone wrong.", "tree": {"sha": "af5d77fe8eeee49b6a95817373cb95b8a5adf389", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af5d77fe8eeee49b6a95817373cb95b8a5adf389"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40deecef0370dec461279e10d5e8b2f4f57d4900", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjRu6sCRBK7hj4Ov3rIwAAqeoIADkhVwK7M4rzHX2WMpIPt8gb\npsDKez6w4VAndG6oCAvXHR2u3LS49uudwaA9OYwXGx1I+rgoOwET97cwLa+S74uw\ndL+j6D1neVBgI6tNc4YqwXtYZ9AiM4EpUOwDIgVb7ToUQtlHU2Q4U60XldCoP7W9\nwXPj/PAIpwY0abZSfykPivA4P9fKXMDurjqqSv2UCvwR0YV1Z4k2VNuTXs38azO2\nhk+c/L3xmXmSD9plqYPCrZ45n2X3M/5rI3qjtKv+jN4SCPQjJWWYbJLHLucHmRER\nJOepcWiD0eMP7+qwddQQyxKRsmixpyh4D4sIasWkTkNQmMdNOokb99V7pbs+WDI=\n=FSFe\n-----END PGP SIGNATURE-----\n", "payload": "tree af5d77fe8eeee49b6a95817373cb95b8a5adf389\nparent dc9f6f32434d0b7c761100d6b744af68acf743b1\nparent ce3560979d029e102777f5bf3aec840f4ff9c0fe\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1665593004 +0530\ncommitter GitHub <noreply@github.com> 1665593004 +0530\n\nRollup merge of #102719 - Nilstrieb:tidy-alphabetical, r=jackh726\n\nEnforce alphabetical sorting with tidy\n\nWe have many places where things are supposed to be sorted alphabetically. For the smaller and more recent size assertions, this is mostly upheld, but in other more... alive places it's very messy.\n\nThis introduces a new tidy directive to check that a section of code is sorted alphabetically and fixes all places where sorting has gone wrong.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40deecef0370dec461279e10d5e8b2f4f57d4900", "html_url": "https://github.com/rust-lang/rust/commit/40deecef0370dec461279e10d5e8b2f4f57d4900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40deecef0370dec461279e10d5e8b2f4f57d4900/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc9f6f32434d0b7c761100d6b744af68acf743b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc9f6f32434d0b7c761100d6b744af68acf743b1", "html_url": "https://github.com/rust-lang/rust/commit/dc9f6f32434d0b7c761100d6b744af68acf743b1"}, {"sha": "ce3560979d029e102777f5bf3aec840f4ff9c0fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce3560979d029e102777f5bf3aec840f4ff9c0fe", "html_url": "https://github.com/rust-lang/rust/commit/ce3560979d029e102777f5bf3aec840f4ff9c0fe"}], "stats": {"total": 337, "additions": 234, "deletions": 103}, "files": [{"sha": "60b7f2e4c2223e4a89c0dee3f9f7490a0928843e", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -3039,7 +3039,7 @@ pub type ForeignItem = Item<ForeignItemKind>;\n mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n-    // These are in alphabetical order, which is easy to maintain.\n+    // tidy-alphabetical-start\n     static_assert_size!(AssocItem, 104);\n     static_assert_size!(AssocItemKind, 32);\n     static_assert_size!(Attribute, 32);\n@@ -3060,11 +3060,12 @@ mod size_asserts {\n     static_assert_size!(Local, 72);\n     static_assert_size!(Param, 40);\n     static_assert_size!(Pat, 120);\n-    static_assert_size!(PatKind, 96);\n     static_assert_size!(Path, 40);\n     static_assert_size!(PathSegment, 24);\n+    static_assert_size!(PatKind, 96);\n     static_assert_size!(Stmt, 32);\n     static_assert_size!(StmtKind, 16);\n     static_assert_size!(Ty, 96);\n     static_assert_size!(TyKind, 72);\n+    // tidy-alphabetical-end\n }"}, {"sha": "83b10d906e297980ff3b96095bbd1db7a6cd18eb", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -889,10 +889,11 @@ where\n mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n-    // These are in alphabetical order, which is easy to maintain.\n+    // tidy-alphabetical-start\n     static_assert_size!(Lit, 12);\n     static_assert_size!(LitKind, 2);\n     static_assert_size!(Nonterminal, 16);\n     static_assert_size!(Token, 24);\n     static_assert_size!(TokenKind, 16);\n+    // tidy-alphabetical-end\n }"}, {"sha": "015f5c1ee8ae5ab817d7d081d212feeead02ea8f", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -646,10 +646,11 @@ impl DelimSpan {\n mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n-    // These are in alphabetical order, which is easy to maintain.\n+    // tidy-alphabetical-start\n     static_assert_size!(AttrTokenStream, 8);\n     static_assert_size!(AttrTokenTree, 32);\n     static_assert_size!(LazyAttrTokenStream, 8);\n     static_assert_size!(TokenStream, 8);\n     static_assert_size!(TokenTree, 32);\n+    // tidy-alphabetical-end\n }"}, {"sha": "719588a936ce377b5e8b3dc27f5d7318e9d31216", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -788,9 +788,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n-    // These are in alphabetical order, which is easy to maintain.\n+    // tidy-alphabetical-start\n     static_assert_size!(Immediate, 48);\n     static_assert_size!(ImmTy<'_>, 64);\n     static_assert_size!(Operand, 56);\n     static_assert_size!(OpTy<'_>, 80);\n+    // tidy-alphabetical-end\n }"}, {"sha": "b0625b5f412e03ad900f57d5ef7c77130e6dca9c", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -892,10 +892,11 @@ where\n mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n-    // These are in alphabetical order, which is easy to maintain.\n-    static_assert_size!(MemPlaceMeta, 24);\n+    // tidy-alphabetical-start\n     static_assert_size!(MemPlace, 40);\n+    static_assert_size!(MemPlaceMeta, 24);\n     static_assert_size!(MPlaceTy<'_>, 64);\n     static_assert_size!(Place, 40);\n     static_assert_size!(PlaceTy<'_>, 64);\n+    // tidy-alphabetical-end\n }"}, {"sha": "a6024044ad82fb17bb522fb78119ec5f0cee3dd4", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -35,6 +35,7 @@ pub use unic_langid::{langid, LanguageIdentifier};\n \n // Generates `DEFAULT_LOCALE_RESOURCES` static and `fluent_generated` module.\n fluent_messages! {\n+    // tidy-alphabetical-start\n     ast_lowering => \"../locales/en-US/ast_lowering.ftl\",\n     ast_passes => \"../locales/en-US/ast_passes.ftl\",\n     attr => \"../locales/en-US/attr.ftl\",\n@@ -64,6 +65,7 @@ fluent_messages! {\n     symbol_mangling => \"../locales/en-US/symbol_mangling.ftl\",\n     trait_selection => \"../locales/en-US/trait_selection.ftl\",\n     ty_utils => \"../locales/en-US/ty_utils.ftl\",\n+    // tidy-alphabetical-end\n }\n \n pub use fluent_generated::{self as fluent, DEFAULT_LOCALE_RESOURCES};"}, {"sha": "bc149e48d89e842b8333989350810b0988a752fc", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -3514,7 +3514,7 @@ impl<'hir> Node<'hir> {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {\n     use super::*;\n-    // These are in alphabetical order, which is easy to maintain.\n+    // tidy-alphabetical-start\n     static_assert_size!(Block<'_>, 48);\n     static_assert_size!(Body<'_>, 32);\n     static_assert_size!(Expr<'_>, 64);\n@@ -3533,9 +3533,9 @@ mod size_asserts {\n     static_assert_size!(Local<'_>, 64);\n     static_assert_size!(Param<'_>, 32);\n     static_assert_size!(Pat<'_>, 72);\n-    static_assert_size!(PatKind<'_>, 48);\n     static_assert_size!(Path<'_>, 40);\n     static_assert_size!(PathSegment<'_>, 48);\n+    static_assert_size!(PatKind<'_>, 48);\n     static_assert_size!(QPath<'_>, 24);\n     static_assert_size!(Res, 12);\n     static_assert_size!(Stmt<'_>, 32);\n@@ -3544,4 +3544,5 @@ mod size_asserts {\n     static_assert_size!(TraitItemKind<'_>, 48);\n     static_assert_size!(Ty<'_>, 48);\n     static_assert_size!(TyKind<'_>, 32);\n+    // tidy-alphabetical-end\n }"}, {"sha": "d64cdcdbaa9db70b8f4ced2bc7f5bf6ca56594be", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -540,7 +540,7 @@ fn test_codegen_options_tracking_hash() {\n     }\n \n     // Make sure that changing an [UNTRACKED] option leaves the hash unchanged.\n-    // This list is in alphabetical order.\n+    // tidy-alphabetical-start\n     untracked!(ar, String::from(\"abc\"));\n     untracked!(codegen_units, Some(42));\n     untracked!(default_linker_libraries, true);\n@@ -556,6 +556,7 @@ fn test_codegen_options_tracking_hash() {\n     untracked!(rpath, true);\n     untracked!(save_temps, true);\n     untracked!(strip, Strip::Debuginfo);\n+    // tidy-alphabetical-end\n \n     macro_rules! tracked {\n         ($name: ident, $non_default_value: expr) => {\n@@ -567,7 +568,7 @@ fn test_codegen_options_tracking_hash() {\n     }\n \n     // Make sure that changing a [TRACKED] option changes the hash.\n-    // This list is in alphabetical order.\n+    // tidy-alphabetical-start\n     tracked!(code_model, Some(CodeModel::Large));\n     tracked!(control_flow_guard, CFGuard::Checks);\n     tracked!(debug_assertions, Some(true));\n@@ -577,8 +578,8 @@ fn test_codegen_options_tracking_hash() {\n     tracked!(force_unwind_tables, Some(true));\n     tracked!(inline_threshold, Some(0xf007ba11));\n     tracked!(instrument_coverage, Some(InstrumentCoverage::All));\n-    tracked!(linker_plugin_lto, LinkerPluginLto::LinkerPluginAuto);\n     tracked!(link_dead_code, Some(true));\n+    tracked!(linker_plugin_lto, LinkerPluginLto::LinkerPluginAuto);\n     tracked!(llvm_args, vec![String::from(\"1\"), String::from(\"2\")]);\n     tracked!(lto, LtoCli::Fat);\n     tracked!(metadata, vec![String::from(\"A\"), String::from(\"B\")]);\n@@ -599,6 +600,7 @@ fn test_codegen_options_tracking_hash() {\n     tracked!(symbol_mangling_version, Some(SymbolManglingVersion::V0));\n     tracked!(target_cpu, Some(String::from(\"abc\")));\n     tracked!(target_feature, String::from(\"all the features, all of them\"));\n+    // tidy-alphabetical-end\n }\n \n #[test]\n@@ -619,12 +621,13 @@ fn test_top_level_options_tracked_no_crate() {\n     }\n \n     // Make sure that changing a [TRACKED_NO_CRATE_HASH] option leaves the crate hash unchanged but changes the incremental hash.\n-    // This list is in alphabetical order.\n-    tracked!(remap_path_prefix, vec![(\"/home/bors/rust\".into(), \"src\".into())]);\n+    // tidy-alphabetical-start\n     tracked!(\n         real_rust_source_base_dir,\n         Some(\"/home/bors/rust/.rustup/toolchains/nightly/lib/rustlib/src/rust\".into())\n     );\n+    tracked!(remap_path_prefix, vec![(\"/home/bors/rust\".into(), \"src\".into())]);\n+    // tidy-alphabetical-end\n }\n \n #[test]\n@@ -641,7 +644,7 @@ fn test_unstable_options_tracking_hash() {\n     }\n \n     // Make sure that changing an [UNTRACKED] option leaves the hash unchanged.\n-    // This list is in alphabetical order.\n+    // tidy-alphabetical-start\n     untracked!(assert_incr_state, Some(String::from(\"loaded\")));\n     untracked!(deduplicate_diagnostics, false);\n     untracked!(dep_tasks, true);\n@@ -678,12 +681,12 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(perf_stats, true);\n     // `pre_link_arg` is omitted because it just forwards to `pre_link_args`.\n     untracked!(pre_link_args, vec![String::from(\"abc\"), String::from(\"def\")]);\n-    untracked!(profile_closures, true);\n     untracked!(print_llvm_passes, true);\n     untracked!(print_mono_items, Some(String::from(\"abc\")));\n     untracked!(print_type_sizes, true);\n     untracked!(proc_macro_backtrace, true);\n     untracked!(proc_macro_execution_strategy, ProcMacroExecutionStrategy::CrossThread);\n+    untracked!(profile_closures, true);\n     untracked!(query_dep_graph, true);\n     untracked!(save_analysis, true);\n     untracked!(self_profile, SwitchWithOptPath::Enabled(None));\n@@ -701,6 +704,7 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(unstable_options, true);\n     untracked!(validate_mir, true);\n     untracked!(verbose, true);\n+    // tidy-alphabetical-end\n \n     macro_rules! tracked {\n         ($name: ident, $non_default_value: expr) => {\n@@ -712,7 +716,7 @@ fn test_unstable_options_tracking_hash() {\n     }\n \n     // Make sure that changing a [TRACKED] option changes the hash.\n-    // This list is in alphabetical order.\n+    // tidy-alphabetical-start\n     tracked!(allow_features, Some(vec![String::from(\"lang_items\")]));\n     tracked!(always_encode_mir, true);\n     tracked!(asm_comments, true);\n@@ -733,10 +737,10 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(debug_macros, true);\n     tracked!(dep_info_omit_d_target, true);\n     tracked!(drop_tracking, true);\n-    tracked!(export_executable_symbols, true);\n     tracked!(dual_proc_macros, true);\n     tracked!(dwarf_version, Some(5));\n     tracked!(emit_thin_lto, false);\n+    tracked!(export_executable_symbols, true);\n     tracked!(fewer_names, Some(true));\n     tracked!(force_unstable_if_unmarked, true);\n     tracked!(fuel, Some((\"abc\".to_string(), 99)));\n@@ -759,8 +763,8 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(mutable_noalias, Some(true));\n     tracked!(no_generate_arange_section, true);\n     tracked!(no_link, true);\n-    tracked!(no_unique_section_names, true);\n     tracked!(no_profiler_runtime, true);\n+    tracked!(no_unique_section_names, true);\n     tracked!(oom, OomStrategy::Panic);\n     tracked!(osx_rpath_install_name, true);\n     tracked!(packed_bundled_libs, true);\n@@ -773,8 +777,8 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(print_fuel, Some(\"abc\".to_string()));\n     tracked!(profile, true);\n     tracked!(profile_emit, Some(PathBuf::from(\"abc\")));\n-    tracked!(profiler_runtime, \"abc\".to_string());\n     tracked!(profile_sample_use, Some(PathBuf::from(\"abc\")));\n+    tracked!(profiler_runtime, \"abc\".to_string());\n     tracked!(relax_elf_relocations, Some(true));\n     tracked!(relro_level, Some(RelroLevel::Full));\n     tracked!(remap_cwd_prefix, Some(PathBuf::from(\"abc\")));\n@@ -803,6 +807,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(verify_llvm_ir, true);\n     tracked!(virtual_function_elimination, true);\n     tracked!(wasi_exec_model, Some(WasiExecModel::Reactor));\n+    // tidy-alphabetical-end\n \n     macro_rules! tracked_no_crate_hash {\n         ($name: ident, $non_default_value: expr) => {"}, {"sha": "d4258151ff3f33a853dd025a1691d18406d293fa", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -2946,11 +2946,12 @@ impl Location {\n mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n-    // These are in alphabetical order, which is easy to maintain.\n+    // tidy-alphabetical-start\n     static_assert_size!(BasicBlockData<'_>, 144);\n     static_assert_size!(LocalDecl<'_>, 56);\n     static_assert_size!(Statement<'_>, 32);\n     static_assert_size!(StatementKind<'_>, 16);\n     static_assert_size!(Terminator<'_>, 112);\n     static_assert_size!(TerminatorKind<'_>, 96);\n+    // tidy-alphabetical-end\n }"}, {"sha": "85ef51f129bbdde75834a4b1ddc11ae3706dda66", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -1245,10 +1245,11 @@ pub enum BinOp {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {\n     use super::*;\n-    // These are in alphabetical order, which is easy to maintain.\n+    // tidy-alphabetical-start\n     static_assert_size!(AggregateKind<'_>, 40);\n     static_assert_size!(Operand<'_>, 24);\n     static_assert_size!(Place<'_>, 16);\n     static_assert_size!(PlaceElem<'_>, 24);\n     static_assert_size!(Rvalue<'_>, 40);\n+    // tidy-alphabetical-end\n }"}, {"sha": "ea7a507d7a43ceb499a1f4c87b571d716fff02ab", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -848,12 +848,13 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {\n     use super::*;\n-    // These are in alphabetical order, which is easy to maintain.\n+    // tidy-alphabetical-start\n     static_assert_size!(Block, 56);\n     static_assert_size!(Expr<'_>, 64);\n     static_assert_size!(ExprKind<'_>, 40);\n     static_assert_size!(Pat<'_>, 72);\n     static_assert_size!(PatKind<'_>, 56);\n     static_assert_size!(Stmt<'_>, 48);\n     static_assert_size!(StmtKind<'_>, 40);\n+    // tidy-alphabetical-end\n }"}, {"sha": "12d24d6751e27c1d0e1ac1dfe3e86033602a6c18", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -2668,8 +2668,9 @@ pub struct DestructuredConst<'tcx> {\n mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n-    // These are in alphabetical order, which is easy to maintain.\n+    // tidy-alphabetical-start\n     static_assert_size!(PredicateS<'_>, 48);\n     static_assert_size!(TyS<'_>, 40);\n     static_assert_size!(WithStableHash<TyS<'_>>, 56);\n+    // tidy-alphabetical-end\n }"}, {"sha": "81c051b8f35e4843916857857fc4d8a830e60755", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -459,7 +459,8 @@ fn make_token_stream(\n mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n-    // These are in alphabetical order, which is easy to maintain.\n+    // tidy-alphabetical-start\n     static_assert_size!(AttrWrapper, 16);\n     static_assert_size!(LazyAttrTokenStreamImpl, 144);\n+    // tidy-alphabetical-end\n }"}, {"sha": "102df3a4d7eade10d358a6e9b092f757201511d9", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 51, "deletions": 55, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -1075,12 +1075,11 @@ mod parse {\n options! {\n     CodegenOptions, CG_OPTIONS, cgopts, \"C\", \"codegen\",\n \n-    // This list is in alphabetical order.\n-    //\n     // If you add a new option, please update:\n     // - compiler/rustc_interface/src/tests.rs\n     // - src/doc/rustc/src/codegen-options/index.md\n \n+    // tidy-alphabetical-start\n     ar: String = (String::new(), parse_string, [UNTRACKED],\n         \"this option is deprecated and does nothing\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::code_model` instead of this field\")]\n@@ -1195,9 +1194,8 @@ options! {\n     target_feature: String = (String::new(), parse_target_feature, [TRACKED],\n         \"target specific attributes. (`rustc --print target-features` for details). \\\n         This feature is unsafe.\"),\n+    // tidy-alphabetical-end\n \n-    // This list is in alphabetical order.\n-    //\n     // If you add a new option, please update:\n     // - compiler/rustc_interface/src/tests.rs\n     // - src/doc/rustc/src/codegen-options/index.md\n@@ -1206,24 +1204,23 @@ options! {\n options! {\n     UnstableOptions, Z_OPTIONS, dbopts, \"Z\", \"unstable\",\n \n-    // This list is in alphabetical order.\n-    //\n     // If you add a new option, please update:\n     // - compiler/rustc_interface/src/tests.rs\n     // - src/doc/unstable-book/src/compiler-flags\n \n+    // tidy-alphabetical-start\n     allow_features: Option<Vec<String>> = (None, parse_opt_comma_list, [TRACKED],\n         \"only allow the listed language features to be enabled in code (space separated)\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n         \"encode MIR of all functions into the crate metadata (default: no)\"),\n-    assume_incomplete_release: bool = (false, parse_bool, [TRACKED],\n-        \"make cfg(version) treat the current version as incomplete (default: no)\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::asm_comments` instead of this field\")]\n     asm_comments: bool = (false, parse_bool, [TRACKED],\n         \"generate comments into the assembly (may change behavior) (default: no)\"),\n     assert_incr_state: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"assert that the incremental cache is in given state: \\\n          either `loaded` or `not-loaded`.\"),\n+    assume_incomplete_release: bool = (false, parse_bool, [TRACKED],\n+        \"make cfg(version) treat the current version as incomplete (default: no)\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::binary_dep_depinfo` instead of this field\")]\n     binary_dep_depinfo: bool = (false, parse_bool, [TRACKED],\n         \"include artifacts (sysroot, crate dependencies) used during compilation in dep-info \\\n@@ -1256,6 +1253,8 @@ options! {\n     dep_tasks: bool = (false, parse_bool, [UNTRACKED],\n         \"print tasks that execute and the color their dep node gets (requires debug build) \\\n         (default: no)\"),\n+    diagnostic_width: Option<usize> = (None, parse_opt_number, [UNTRACKED],\n+        \"set the current output width for diagnostic truncation\"),\n     dlltool: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n         \"import library generation tool (windows-gnu only)\"),\n     dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n@@ -1337,16 +1336,16 @@ options! {\n         \"hash spans relative to their parent item for incr. comp. (default: no)\"),\n     incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],\n         \"verify incr. comp. hashes of green query instances (default: no)\"),\n+    inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"control whether `#[inline]` functions are in all CGUs\"),\n     inline_llvm: bool = (true, parse_bool, [TRACKED],\n         \"enable LLVM inlining (default: yes)\"),\n     inline_mir: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable MIR inlining (default: no)\"),\n-    inline_mir_threshold: Option<usize> = (None, parse_opt_number, [TRACKED],\n-        \"a default MIR inlining threshold (default: 50)\"),\n     inline_mir_hint_threshold: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"inlining threshold for functions with inline hint (default: 100)\"),\n-    inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"control whether `#[inline]` functions are in all CGUs\"),\n+    inline_mir_threshold: Option<usize> = (None, parse_opt_number, [TRACKED],\n+        \"a default MIR inlining threshold (default: 50)\"),\n     input_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"gather statistics about the input (default: no)\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::instrument_coverage` instead of this field\")]\n@@ -1363,6 +1362,8 @@ options! {\n         \"insert function instrument code for mcount-based tracing (default: no)\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n         \"keep hygiene data after analysis (default: no)\"),\n+    layout_seed: Option<u64> = (None, parse_opt_number, [TRACKED],\n+        \"seed layout randomization\"),\n     link_native_libraries: bool = (true, parse_bool, [UNTRACKED],\n         \"link native libraries in the linker invocation (default: yes)\"),\n     link_only: bool = (false, parse_bool, [TRACKED],\n@@ -1392,11 +1393,11 @@ options! {\n         \"use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be \\\n         enabled, overriding all other checks. Passes that are not specified are enabled or \\\n         disabled by other flags as usual.\"),\n-    mir_pretty_relative_line_numbers: bool = (false, parse_bool, [UNTRACKED],\n-        \"use line numbers relative to the function in mir pretty printing\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::mir_opt_level` instead of this field\")]\n     mir_opt_level: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\"),\n+    mir_pretty_relative_line_numbers: bool = (false, parse_bool, [UNTRACKED],\n+        \"use line numbers relative to the function in mir pretty printing\"),\n     move_size_limit: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"the size at which the `large_assignments` lint starts to be emitted\"),\n     mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n@@ -1419,18 +1420,16 @@ options! {\n         \"compile without linking\"),\n     no_parallel_llvm: bool = (false, parse_no_flag, [UNTRACKED],\n         \"run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\"),\n-    no_unique_section_names: bool = (false, parse_bool, [TRACKED],\n-        \"do not use unique names for text and data sections when -Z function-sections is used\"),\n     no_profiler_runtime: bool = (false, parse_no_flag, [TRACKED],\n         \"prevent automatic injection of the profiler_builtins crate\"),\n+    no_unique_section_names: bool = (false, parse_bool, [TRACKED],\n+        \"do not use unique names for text and data sections when -Z function-sections is used\"),\n     normalize_docs: bool = (false, parse_bool, [TRACKED],\n         \"normalize associated items in rustdoc when generating documentation\"),\n     oom: OomStrategy = (OomStrategy::Abort, parse_oom_strategy, [TRACKED],\n         \"panic strategy for out-of-memory handling\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n         \"pass `-install_name @rpath/...` to the macOS linker (default: no)\"),\n-    diagnostic_width: Option<usize> = (None, parse_opt_number, [UNTRACKED],\n-        \"set the current output width for diagnostic truncation\"),\n     packed_bundled_libs: bool = (false, parse_bool, [TRACKED],\n         \"change rlib format to store native libraries as archives\"),\n     panic_abort_tests: bool = (false, parse_bool, [TRACKED],\n@@ -1480,25 +1479,20 @@ options! {\n     profile_emit: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"file path to emit profiling data at runtime when using 'profile' \\\n         (default based on relative source path)\"),\n-    profiler_runtime: String = (String::from(\"profiler_builtins\"), parse_string, [TRACKED],\n-        \"name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\"),\n     profile_sample_use: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"use the given `.prof` file for sampled profile-guided optimization (also known as AutoFDO)\"),\n+    profiler_runtime: String = (String::from(\"profiler_builtins\"), parse_string, [TRACKED],\n+        \"name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"enable queries of the dependency graph for regression testing (default: no)\"),\n     randomize_layout: bool = (false, parse_bool, [TRACKED],\n         \"randomize the layout of types (default: no)\"),\n-    layout_seed: Option<u64> = (None, parse_opt_number, [TRACKED],\n-        \"seed layout randomization\"),\n     relax_elf_relocations: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"whether ELF relocations can be relaxed\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n     remap_cwd_prefix: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"remap paths under the current working directory to this path prefix\"),\n-    simulate_remapped_rust_src_base: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n-        \"simulate the effect of remap-debuginfo = true at bootstrapping by remapping path \\\n-        to rust's source base directory. only meant for testing purposes\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n         \"immediately print bugs registered with `delay_span_bug` (default: no)\"),\n     sanitizer: SanitizerSet = (SanitizerSet::empty(), parse_sanitizers, [TRACKED],\n@@ -1516,27 +1510,41 @@ options! {\n     self_profile: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n         parse_switch_with_opt_path, [UNTRACKED],\n         \"run the self profiler and output the raw event data\"),\n-    /// keep this in sync with the event filter names in librustc_data_structures/profiling.rs\n-    self_profile_events: Option<Vec<String>> = (None, parse_opt_comma_list, [UNTRACKED],\n-        \"specify the events recorded by the self profiler;\n-        for example: `-Z self-profile-events=default,query-keys`\n-        all options: none, all, default, generic-activity, query-provider, query-cache-hit\n-                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\"),\n     self_profile_counter: String = (\"wall-time\".to_string(), parse_string, [UNTRACKED],\n         \"counter used by the self profiler (default: `wall-time`), one of:\n         `wall-time` (monotonic clock, i.e. `std::time::Instant`)\n         `instructions:u` (retired instructions, userspace-only)\n         `instructions-minus-irqs:u` (subtracting hardware interrupt counts for extra accuracy)\"\n     ),\n+    /// keep this in sync with the event filter names in librustc_data_structures/profiling.rs\n+    self_profile_events: Option<Vec<String>> = (None, parse_opt_comma_list, [UNTRACKED],\n+        \"specify the events recorded by the self profiler;\n+        for example: `-Z self-profile-events=default,query-keys`\n+        all options: none, all, default, generic-activity, query-provider, query-cache-hit\n+                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\"),\n     share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"make the current crate share its generic instantiations\"),\n     show_span: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"show spans for compiler debugging (expr|pat|ty)\"),\n+    simulate_remapped_rust_src_base: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n+        \"simulate the effect of remap-debuginfo = true at bootstrapping by remapping path \\\n+        to rust's source base directory. only meant for testing purposes\"),\n     span_debug: bool = (false, parse_bool, [UNTRACKED],\n         \"forward proc_macro::Span's `Debug` impl to `Span`\"),\n     /// o/w tests have closure@path\n     span_free_formats: bool = (false, parse_bool, [UNTRACKED],\n         \"exclude spans when debug-printing compiler state (default: no)\"),\n+    split_dwarf_inlining: bool = (true, parse_bool, [TRACKED],\n+        \"provide minimal debug info in the object/executable to facilitate online \\\n+         symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\"),\n+    split_dwarf_kind: SplitDwarfKind = (SplitDwarfKind::Split, parse_split_dwarf_kind, [TRACKED],\n+        \"split dwarf variant (only if -Csplit-debuginfo is enabled and on relevant platform)\n+        (default: `split`)\n+\n+        `split`: sections which do not require relocation are written into a DWARF object (`.dwo`)\n+                 file which is ignored by the linker\n+        `single`: sections which do not require relocation are written into object file but ignored\n+                  by the linker\"),\n     src_hash_algorithm: Option<SourceFileHashAlgorithm> = (None, parse_src_file_hash, [TRACKED],\n         \"hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::stack_protector` instead of this field\")]\n@@ -1546,17 +1554,6 @@ options! {\n         \"control if mem::uninitialized and mem::zeroed panic on more UB\"),\n     strip: Strip = (Strip::None, parse_strip, [UNTRACKED],\n         \"tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\"),\n-    split_dwarf_kind: SplitDwarfKind = (SplitDwarfKind::Split, parse_split_dwarf_kind, [TRACKED],\n-        \"split dwarf variant (only if -Csplit-debuginfo is enabled and on relevant platform)\n-        (default: `split`)\n-\n-        `split`: sections which do not require relocation are written into a DWARF object (`.dwo`)\n-                 file which is ignored by the linker\n-        `single`: sections which do not require relocation are written into object file but ignored\n-                  by the linker\"),\n-    split_dwarf_inlining: bool = (true, parse_bool, [TRACKED],\n-        \"provide minimal debug info in the object/executable to facilitate online \\\n-         symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\"),\n     symbol_mangling_version: Option<SymbolManglingVersion> = (None,\n         parse_symbol_mangling_version, [TRACKED],\n         \"which mangling version to use for symbol names ('legacy' (default) or 'v0')\"),\n@@ -1565,17 +1562,6 @@ options! {\n         \"show extended diagnostic help (default: no)\"),\n     temps_dir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"the directory the intermediate files are written to\"),\n-    // Diagnostics are considered side-effects of a query (see `QuerySideEffects`) and are saved\n-    // alongside query results and changes to translation options can affect diagnostics - so\n-    // translation options should be tracked.\n-    translate_lang: Option<LanguageIdentifier> = (None, parse_opt_langid, [TRACKED],\n-        \"language identifier for diagnostic output\"),\n-    translate_additional_ftl: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n-        \"additional fluent translation to preferentially use (for testing translation)\"),\n-    translate_directionality_markers: bool = (false, parse_bool, [TRACKED],\n-        \"emit directionality isolation markers in translated diagnostics\"),\n-    tune_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"select processor to schedule for (`rustc --print target-cpus` for details)\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::lto` instead of this field\")]\n     thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable ThinLTO when possible\"),\n@@ -1599,6 +1585,15 @@ options! {\n         \"choose the TLS model to use (`rustc --print tls-models` for details)\"),\n     trace_macros: bool = (false, parse_bool, [UNTRACKED],\n         \"for every macro invocation, print its name and arguments (default: no)\"),\n+    // Diagnostics are considered side-effects of a query (see `QuerySideEffects`) and are saved\n+    // alongside query results and changes to translation options can affect diagnostics - so\n+    // translation options should be tracked.\n+    translate_additional_ftl: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n+        \"additional fluent translation to preferentially use (for testing translation)\"),\n+    translate_directionality_markers: bool = (false, parse_bool, [TRACKED],\n+        \"emit directionality isolation markers in translated diagnostics\"),\n+    translate_lang: Option<LanguageIdentifier> = (None, parse_opt_langid, [TRACKED],\n+        \"language identifier for diagnostic output\"),\n     translate_remapped_path_to_local_path: bool = (true, parse_bool, [TRACKED],\n         \"translate remapped paths into local paths when possible (default: yes)\"),\n     trap_unreachable: Option<bool> = (None, parse_opt_bool, [TRACKED],\n@@ -1607,6 +1602,8 @@ options! {\n         \"treat error number `val` that occurs as bug\"),\n     trim_diagnostic_paths: bool = (true, parse_bool, [UNTRACKED],\n         \"in diagnostics, use heuristics to shorten paths referring to items\"),\n+    tune_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"select processor to schedule for (`rustc --print target-cpus` for details)\"),\n     ui_testing: bool = (false, parse_bool, [UNTRACKED],\n         \"emit compiler diagnostics in a form suitable for UI testing (default: no)\"),\n     uninit_const_chunk_threshold: usize = (16, parse_number, [TRACKED],\n@@ -1647,9 +1644,8 @@ options! {\n         Requires `-Clto[=[fat,yes]]`\"),\n     wasi_exec_model: Option<WasiExecModel> = (None, parse_wasi_exec_model, [TRACKED],\n         \"whether to build a wasi command or reactor\"),\n+    // tidy-alphabetical-end\n \n-    // This list is in alphabetical order.\n-    //\n     // If you add a new option, please update:\n     // - compiler/rustc_interface/src/tests.rs\n }"}, {"sha": "9fe7da3f29ec132d04b338b67c208dff5a31eaec", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -740,7 +740,8 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n-    // These are in alphabetical order, which is easy to maintain.\n+    // tidy-alphabetical-start\n     static_assert_size!(ArgAbi<'_, usize>, 56);\n     static_assert_size!(FnAbi<'_, usize>, 80);\n+    // tidy-alphabetical-end\n }"}, {"sha": "dbf3a8f00ee6d0e7a307f5fe00543e73cb823c70", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -1,8 +1,8 @@\n     -Z                          allow-features=val -- only allow the listed language features to be enabled in code (space separated)\n     -Z                       always-encode-mir=val -- encode MIR of all functions into the crate metadata (default: no)\n-    -Z               assume-incomplete-release=val -- make cfg(version) treat the current version as incomplete (default: no)\n     -Z                            asm-comments=val -- generate comments into the assembly (may change behavior) (default: no)\n     -Z                       assert-incr-state=val -- assert that the incremental cache is in given state: either `loaded` or `not-loaded`.\n+    -Z               assume-incomplete-release=val -- make cfg(version) treat the current version as incomplete (default: no)\n     -Z                      binary-dep-depinfo=val -- include artifacts (sysroot, crate dependencies) used during compilation in dep-info (default: no)\n     -Z                             box-noalias=val -- emit noalias metadata for box (default: yes)\n     -Z                       branch-protection=val -- set options for branch target identification and pointer authentication on AArch64\n@@ -17,6 +17,7 @@\n     -Z                 deduplicate-diagnostics=val -- deduplicate identical diagnostics (default: yes)\n     -Z                  dep-info-omit-d-target=val -- in dep-info output, omit targets for tracking dependencies of the dep-info files themselves (default: no)\n     -Z                               dep-tasks=val -- print tasks that execute and the color their dep node gets (requires debug build) (default: no)\n+    -Z                        diagnostic-width=val -- set the current output width for diagnostic truncation\n     -Z                                 dlltool=val -- import library generation tool (windows-gnu only)\n     -Z                 dont-buffer-diagnostics=val -- emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) (default: no)\n     -Z                           drop-tracking=val -- enables drop tracking in generators (default: no)\n@@ -54,11 +55,11 @@\n     -Z                        incremental-info=val -- print high-level information about incremental reuse (or the lack thereof) (default: no)\n     -Z              incremental-relative-spans=val -- hash spans relative to their parent item for incr. comp. (default: no)\n     -Z                  incremental-verify-ich=val -- verify incr. comp. hashes of green query instances (default: no)\n+    -Z                      inline-in-all-cgus=val -- control whether `#[inline]` functions are in all CGUs\n     -Z                             inline-llvm=val -- enable LLVM inlining (default: yes)\n     -Z                              inline-mir=val -- enable MIR inlining (default: no)\n-    -Z                    inline-mir-threshold=val -- a default MIR inlining threshold (default: 50)\n     -Z               inline-mir-hint-threshold=val -- inlining threshold for functions with inline hint (default: 100)\n-    -Z                      inline-in-all-cgus=val -- control whether `#[inline]` functions are in all CGUs\n+    -Z                    inline-mir-threshold=val -- a default MIR inlining threshold (default: 50)\n     -Z                             input-stats=val -- gather statistics about the input (default: no)\n     -Z                     instrument-coverage=val -- instrument the generated code to support LLVM source-based code coverage reports (note, the compiler build config must include `profiler = true`); implies `-C symbol-mangling-version=v0`. Optional values are:\n         `=all` (implicit value)\n@@ -67,6 +68,7 @@\n         `=off` (default)\n     -Z                       instrument-mcount=val -- insert function instrument code for mcount-based tracing (default: no)\n     -Z                       keep-hygiene-data=val -- keep hygiene data after analysis (default: no)\n+    -Z                             layout-seed=val -- seed layout randomization\n     -Z                   link-native-libraries=val -- link native libraries in the linker invocation (default: yes)\n     -Z                               link-only=val -- link the `.rlink` file generated by `-Z no-link` (default: no)\n     -Z                            llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n@@ -78,8 +80,8 @@\n     -Z                              meta-stats=val -- gather metadata statistics (default: no)\n     -Z                          mir-emit-retag=val -- emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 (default: no)\n     -Z                       mir-enable-passes=val -- use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be enabled, overriding all other checks. Passes that are not specified are enabled or disabled by other flags as usual.\n-    -Z        mir-pretty-relative-line-numbers=val -- use line numbers relative to the function in mir pretty printing\n     -Z                           mir-opt-level=val -- MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\n+    -Z        mir-pretty-relative-line-numbers=val -- use line numbers relative to the function in mir pretty printing\n     -Z                         move-size-limit=val -- the size at which the `large_assignments` lint starts to be emitted\n     -Z                         mutable-noalias=val -- emit noalias metadata for mutable references (default: yes)\n     -Z                               nll-facts=val -- dump facts from NLL analysis into side files (default: no)\n@@ -91,12 +93,11 @@\n     -Z                           no-leak-check=val -- disable the 'leak check' for subtyping; unsound, but useful for tests\n     -Z                                 no-link=val -- compile without linking\n     -Z                        no-parallel-llvm=val -- run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\n-    -Z                 no-unique-section-names=val -- do not use unique names for text and data sections when -Z function-sections is used\n     -Z                     no-profiler-runtime=val -- prevent automatic injection of the profiler_builtins crate\n+    -Z                 no-unique-section-names=val -- do not use unique names for text and data sections when -Z function-sections is used\n     -Z                          normalize-docs=val -- normalize associated items in rustdoc when generating documentation\n     -Z                                     oom=val -- panic strategy for out-of-memory handling\n     -Z                  osx-rpath-install-name=val -- pass `-install_name @rpath/...` to the macOS linker (default: no)\n-    -Z                        diagnostic-width=val -- set the current output width for diagnostic truncation\n     -Z                     packed-bundled-libs=val -- change rlib format to store native libraries as archives\n     -Z                       panic-abort-tests=val -- support compiling tests with panic=abort (default: no)\n     -Z                           panic-in-drop=val -- panic strategy for panics in drops\n@@ -120,64 +121,63 @@\n     -Z                                 profile=val -- insert profiling code (default: no)\n     -Z                        profile-closures=val -- profile size of closures\n     -Z                            profile-emit=val -- file path to emit profiling data at runtime when using 'profile' (default based on relative source path)\n-    -Z                        profiler-runtime=val -- name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\n     -Z                      profile-sample-use=val -- use the given `.prof` file for sampled profile-guided optimization (also known as AutoFDO)\n+    -Z                        profiler-runtime=val -- name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\n     -Z                         query-dep-graph=val -- enable queries of the dependency graph for regression testing (default: no)\n     -Z                        randomize-layout=val -- randomize the layout of types (default: no)\n-    -Z                             layout-seed=val -- seed layout randomization\n     -Z                   relax-elf-relocations=val -- whether ELF relocations can be relaxed\n     -Z                             relro-level=val -- choose which RELRO level to use\n     -Z                        remap-cwd-prefix=val -- remap paths under the current working directory to this path prefix\n-    -Z         simulate-remapped-rust-src-base=val -- simulate the effect of remap-debuginfo = true at bootstrapping by remapping path to rust's source base directory. only meant for testing purposes\n     -Z                     report-delayed-bugs=val -- immediately print bugs registered with `delay_span_bug` (default: no)\n     -Z                               sanitizer=val -- use a sanitizer\n     -Z          sanitizer-memory-track-origins=val -- enable origins tracking in MemorySanitizer\n     -Z                       sanitizer-recover=val -- enable recovery for selected sanitizers\n     -Z                  saturating-float-casts=val -- make float->int casts UB-free: numbers outside the integer type's range are clipped to the max/min integer respectively, and NaN is mapped to 0 (default: yes)\n     -Z                           save-analysis=val -- write syntax and type analysis (in JSON format) information, in addition to normal output (default: no)\n     -Z                            self-profile=val -- run the self profiler and output the raw event data\n-    -Z                     self-profile-events=val -- specify the events recorded by the self profiler;\n-        for example: `-Z self-profile-events=default,query-keys`\n-        all options: none, all, default, generic-activity, query-provider, query-cache-hit\n-                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\n     -Z                    self-profile-counter=val -- counter used by the self profiler (default: `wall-time`), one of:\n         `wall-time` (monotonic clock, i.e. `std::time::Instant`)\n         `instructions:u` (retired instructions, userspace-only)\n         `instructions-minus-irqs:u` (subtracting hardware interrupt counts for extra accuracy)\n+    -Z                     self-profile-events=val -- specify the events recorded by the self profiler;\n+        for example: `-Z self-profile-events=default,query-keys`\n+        all options: none, all, default, generic-activity, query-provider, query-cache-hit\n+                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\n     -Z                          share-generics=val -- make the current crate share its generic instantiations\n     -Z                               show-span=val -- show spans for compiler debugging (expr|pat|ty)\n+    -Z         simulate-remapped-rust-src-base=val -- simulate the effect of remap-debuginfo = true at bootstrapping by remapping path to rust's source base directory. only meant for testing purposes\n     -Z                              span-debug=val -- forward proc_macro::Span's `Debug` impl to `Span`\n     -Z                       span-free-formats=val -- exclude spans when debug-printing compiler state (default: no)\n-    -Z                      src-hash-algorithm=val -- hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\n-    -Z                         stack-protector=val -- control stack smash protection strategy (`rustc --print stack-protector-strategies` for details)\n-    -Z                      strict-init-checks=val -- control if mem::uninitialized and mem::zeroed panic on more UB\n-    -Z                                   strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\n+    -Z                    split-dwarf-inlining=val -- provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n     -Z                        split-dwarf-kind=val -- split dwarf variant (only if -Csplit-debuginfo is enabled and on relevant platform)\n         (default: `split`)\n \n         `split`: sections which do not require relocation are written into a DWARF object (`.dwo`)\n                  file which is ignored by the linker\n         `single`: sections which do not require relocation are written into object file but ignored\n                   by the linker\n-    -Z                    split-dwarf-inlining=val -- provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n+    -Z                      src-hash-algorithm=val -- hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\n+    -Z                         stack-protector=val -- control stack smash protection strategy (`rustc --print stack-protector-strategies` for details)\n+    -Z                      strict-init-checks=val -- control if mem::uninitialized and mem::zeroed panic on more UB\n+    -Z                                   strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\n     -Z                 symbol-mangling-version=val -- which mangling version to use for symbol names ('legacy' (default) or 'v0')\n     -Z                                   teach=val -- show extended diagnostic help (default: no)\n     -Z                               temps-dir=val -- the directory the intermediate files are written to\n-    -Z                          translate-lang=val -- language identifier for diagnostic output\n-    -Z                translate-additional-ftl=val -- additional fluent translation to preferentially use (for testing translation)\n-    -Z        translate-directionality-markers=val -- emit directionality isolation markers in translated diagnostics\n-    -Z                                tune-cpu=val -- select processor to schedule for (`rustc --print target-cpus` for details)\n     -Z                                 thinlto=val -- enable ThinLTO when possible\n     -Z                           thir-unsafeck=val -- use the THIR unsafety checker (default: no)\n     -Z                                 threads=val -- use a thread pool with N threads\n     -Z                        time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n     -Z                             time-passes=val -- measure time of each rustc pass (default: no)\n     -Z                               tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n     -Z                            trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\n+    -Z                translate-additional-ftl=val -- additional fluent translation to preferentially use (for testing translation)\n+    -Z        translate-directionality-markers=val -- emit directionality isolation markers in translated diagnostics\n+    -Z                          translate-lang=val -- language identifier for diagnostic output\n     -Z   translate-remapped-path-to-local-path=val -- translate remapped paths into local paths when possible (default: yes)\n     -Z                        trap-unreachable=val -- generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\n     -Z                        treat-err-as-bug=val -- treat error number `val` that occurs as bug\n     -Z                   trim-diagnostic-paths=val -- in diagnostics, use heuristics to shorten paths referring to items\n+    -Z                                tune-cpu=val -- select processor to schedule for (`rustc --print target-cpus` for details)\n     -Z                              ui-testing=val -- emit compiler diagnostics in a form suitable for UI testing (default: no)\n     -Z            uninit-const-chunk-threshold=val -- allow generating const initializers with mixed init/uninit chunks, and set the maximum number of chunks for which this is allowed (default: 16)\n     -Z          unleash-the-miri-inside-of-you=val -- take the brakes off const evaluation. NOTE: this is unsound (default: no)"}, {"sha": "c9f1dfb707f3f1efa514afea89e1a0c2f2b91e3f", "filename": "src/tools/tidy/src/alphabetical.rs", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -0,0 +1,113 @@\n+//! Checks that a list of items is in alphabetical order\n+//!\n+//! To use, use the following annotation in the code:\n+//! ```rust\n+//! // tidy-alphabetical-start\n+//! fn aaa() {}\n+//! fn eee() {}\n+//! fn z() {}\n+//! // tidy-alphabetical-end\n+//! ```\n+//!\n+//! The following lines are ignored:\n+//! - Lines that are indented with more or less spaces than the first line\n+//! - Lines starting with `//`, `#[`, `)`, `]`, `}` if the comment has the same indentation as\n+//!   the first line\n+//!\n+//! If a line ends with an opening bracket, the line is ignored and the next line will have\n+//! its extra indentation ignored.\n+\n+use std::{fmt::Display, path::Path};\n+\n+use crate::walk::{filter_dirs, walk};\n+\n+fn indentation(line: &str) -> usize {\n+    line.find(|c| c != ' ').unwrap_or(0)\n+}\n+\n+fn is_close_bracket(c: char) -> bool {\n+    matches!(c, ')' | ']' | '}')\n+}\n+\n+const START_COMMENT: &str = \"// tidy-alphabetical-start\";\n+const END_COMMENT: &str = \"// tidy-alphabetical-end\";\n+\n+fn check_section<'a>(\n+    file: impl Display,\n+    lines: impl Iterator<Item = (usize, &'a str)>,\n+    bad: &mut bool,\n+) {\n+    let content_lines = lines.take_while(|(_, line)| !line.contains(END_COMMENT));\n+\n+    let mut prev_line = String::new();\n+    let mut first_indent = None;\n+    let mut in_split_line = None;\n+\n+    for (line_idx, line) in content_lines {\n+        if line.contains(START_COMMENT) {\n+            tidy_error!(\n+                bad,\n+                \"{file}:{} found `// tidy-alphabetical-start` expecting `// tidy-alphabetical-end`\",\n+                line_idx\n+            )\n+        }\n+\n+        let indent = first_indent.unwrap_or_else(|| {\n+            let indent = indentation(line);\n+            first_indent = Some(indent);\n+            indent\n+        });\n+\n+        let line = if let Some(prev_split_line) = in_split_line {\n+            in_split_line = None;\n+            format!(\"{prev_split_line}{}\", line.trim_start())\n+        } else {\n+            line.to_string()\n+        };\n+\n+        if indentation(&line) != indent {\n+            continue;\n+        }\n+\n+        let trimmed_line = line.trim_start_matches(' ');\n+\n+        if trimmed_line.starts_with(\"//\")\n+            || trimmed_line.starts_with(\"#[\")\n+            || trimmed_line.starts_with(is_close_bracket)\n+        {\n+            continue;\n+        }\n+\n+        if line.trim_end().ends_with('(') {\n+            in_split_line = Some(line);\n+            continue;\n+        }\n+\n+        let prev_line_trimmed_lowercase = prev_line.trim_start_matches(' ').to_lowercase();\n+\n+        if trimmed_line.to_lowercase() < prev_line_trimmed_lowercase {\n+            tidy_error!(bad, \"{file}:{}: line not in alphabetical order\", line_idx + 1,);\n+        }\n+\n+        prev_line = line;\n+    }\n+}\n+\n+pub fn check(path: &Path, bad: &mut bool) {\n+    walk(path, &mut filter_dirs, &mut |entry, contents| {\n+        let file = &entry.path().display();\n+\n+        let mut lines = contents.lines().enumerate().peekable();\n+        while let Some((_, line)) = lines.next() {\n+            if line.contains(START_COMMENT) {\n+                check_section(file, &mut lines, bad);\n+                if lines.peek().is_none() {\n+                    tidy_error!(\n+                        bad,\n+                        \"{file}: reached end of file expecting `// tidy-alphabetical-end`\"\n+                    )\n+                }\n+            }\n+        }\n+    });\n+}"}, {"sha": "fc0bce585723329bbeb827803412fbbcbbb4e4b9", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -38,6 +38,7 @@ macro_rules! tidy_error {\n     });\n }\n \n+pub mod alphabetical;\n pub mod bins;\n pub mod debug_artifacts;\n pub mod deps;"}, {"sha": "8fe361c45a263fc8856f4b862be7dbb86083a7ca", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40deecef0370dec461279e10d5e8b2f4f57d4900/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40deecef0370dec461279e10d5e8b2f4f57d4900/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=40deecef0370dec461279e10d5e8b2f4f57d4900", "patch": "@@ -90,6 +90,8 @@ fn main() {\n         check!(edition, &compiler_path);\n         check!(edition, &library_path);\n \n+        check!(alphabetical, &compiler_path);\n+\n         let collected = {\n             while handles.len() >= concurrency.get() {\n                 handles.pop_front().unwrap().join().unwrap();"}]}