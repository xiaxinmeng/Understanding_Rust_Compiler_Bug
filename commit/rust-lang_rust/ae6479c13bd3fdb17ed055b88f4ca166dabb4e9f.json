{"sha": "ae6479c13bd3fdb17ed055b88f4ca166dabb4e9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNjQ3OWMxM2JkM2ZkYjE3ZWQwNTViODhmNGNhMTY2ZGFiYjRlOWY=", "commit": {"author": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2018-09-14T19:54:45Z"}, "committer": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2018-09-18T12:36:37Z"}, "message": "Move comments for fake reads where the causes are defined", "tree": {"sha": "e615aa1f6f885fbfc83abeda8ce2bbe843aafa35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e615aa1f6f885fbfc83abeda8ce2bbe843aafa35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae6479c13bd3fdb17ed055b88f4ca166dabb4e9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae6479c13bd3fdb17ed055b88f4ca166dabb4e9f", "html_url": "https://github.com/rust-lang/rust/commit/ae6479c13bd3fdb17ed055b88f4ca166dabb4e9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae6479c13bd3fdb17ed055b88f4ca166dabb4e9f/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab236dfc86269e3f862c4a1ba6411ae34ee2fb64", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64", "html_url": "https://github.com/rust-lang/rust/commit/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "57aa2186927a91671e02abf985ddb2371029c5f2", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae6479c13bd3fdb17ed055b88f4ca166dabb4e9f/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae6479c13bd3fdb17ed055b88f4ca166dabb4e9f/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ae6479c13bd3fdb17ed055b88f4ca166dabb4e9f", "patch": "@@ -1667,7 +1667,25 @@ pub enum StatementKind<'tcx> {\n /// The `FakeReadCause` describes the type of pattern why a `FakeRead` statement exists.\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum FakeReadCause {\n+    /// Inject a fake read of the borrowed input at the start of each arm's\n+    /// pattern testing code.\n+    ///\n+    /// This should ensure that you cannot change the variant for an enum\n+    /// while you are in the midst of matching on it.\n     ForMatch,\n+\n+    /// Officially, the semantics of\n+    ///\n+    /// `let pattern = <expr>;`\n+    ///\n+    /// is that `<expr>` is evaluated into a temporary and then this temporary is\n+    /// into the pattern.\n+    ///\n+    /// However, if we see the simple pattern `let var = <expr>`, we optimize this to\n+    /// evaluate `<expr>` directly into the variable `var`. This is mostly unobservable,\n+    /// but in some cases it can affect the borrow checker, as in #53695.\n+    /// Therefore, we insert a \"fake read\" here to ensure that we get\n+    /// appropriate errors.\n     ForLet,\n }\n "}, {"sha": "c30dcdafdb40284ea2470600436e8e86aad92d5d", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ae6479c13bd3fdb17ed055b88f4ca166dabb4e9f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae6479c13bd3fdb17ed055b88f4ca166dabb4e9f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=ae6479c13bd3fdb17ed055b88f4ca166dabb4e9f", "patch": "@@ -145,19 +145,16 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     if let (true, Some(borrow_temp)) =\n                         (tcx.emit_read_for_match(), borrowed_input_temp.clone())\n                     {\n-                        // inject a fake read of the borrowed input at\n-                        // the start of each arm's pattern testing\n-                        // code.\n-                        //\n-                        // This should ensure that you cannot change\n-                        // the variant for an enum while you are in\n-                        // the midst of matching on it.\n+                        // Inject a fake read, see comments on `FakeReadCause::ForMatch`.\n                         let pattern_source_info = self.source_info(pattern.span);\n                         self.cfg.push(\n                             *pre_binding_block,\n                             Statement {\n                                 source_info: pattern_source_info,\n-                                kind: StatementKind::FakeRead(FakeReadCause::ForMatch, borrow_temp.clone()),\n+                                kind: StatementKind::FakeRead(\n+                                    FakeReadCause::ForMatch,\n+                                    borrow_temp.clone(),\n+                                ),\n                             },\n                         );\n                     }\n@@ -266,19 +263,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 unpack!(block = self.into(&place, block, initializer));\n \n \n-                // Officially, the semantics of\n-                //\n-                // `let pattern = <expr>;`\n-                //\n-                // is that `<expr>` is evaluated into a temporary and then this temporary is\n-                // into the pattern.\n-                //\n-                // However, if we see the simple pattern `let var = <expr>`, we optimize this to\n-                // evaluate `<expr>` directly into the variable `var`. This is mostly unobservable,\n-                // but in some cases it can affect the borrow checker, as in #53695.\n-                // Therefore, we insert a \"fake read\" here to ensure that we get\n-                // appropriate errors.\n-                //\n+                // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n                 let source_info = self.source_info(irrefutable_pat.span);\n                 self.cfg.push(\n                     block,\n@@ -329,9 +314,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     },\n                 );\n \n-                // Similarly to the `let var = <expr>` case, we insert a \"fake read\" here to\n-                // ensure that we get appropriate errors when this usually unobservable\n-                // optimization affects the borrow checker.\n+                // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n                 self.cfg.push(\n                     block,\n                     Statement {"}]}