{"sha": "ecda7f314fa79bbfbf2125c99fd66288ca83c875", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZGE3ZjMxNGZhNzliYmZiZjIxMjVjOTlmZDY2Mjg4Y2E4M2M4NzU=", "commit": {"author": {"name": "Micha\u0142 Krasnoborski", "email": "mkrdln@gmail.com", "date": "2017-02-02T02:38:12Z"}, "committer": {"name": "Micha\u0142 Krasnoborski", "email": "mkrdln@gmail.com", "date": "2017-02-02T02:38:12Z"}, "message": "remove the wrapping arithmetics", "tree": {"sha": "7a54b37ad0b5f2505c9c6a13cd2b6a0001dd2258", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a54b37ad0b5f2505c9c6a13cd2b6a0001dd2258"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecda7f314fa79bbfbf2125c99fd66288ca83c875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecda7f314fa79bbfbf2125c99fd66288ca83c875", "html_url": "https://github.com/rust-lang/rust/commit/ecda7f314fa79bbfbf2125c99fd66288ca83c875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecda7f314fa79bbfbf2125c99fd66288ca83c875/comments", "author": {"login": "krdln", "id": 3074996, "node_id": "MDQ6VXNlcjMwNzQ5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/3074996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krdln", "html_url": "https://github.com/krdln", "followers_url": "https://api.github.com/users/krdln/followers", "following_url": "https://api.github.com/users/krdln/following{/other_user}", "gists_url": "https://api.github.com/users/krdln/gists{/gist_id}", "starred_url": "https://api.github.com/users/krdln/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krdln/subscriptions", "organizations_url": "https://api.github.com/users/krdln/orgs", "repos_url": "https://api.github.com/users/krdln/repos", "events_url": "https://api.github.com/users/krdln/events{/privacy}", "received_events_url": "https://api.github.com/users/krdln/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krdln", "id": 3074996, "node_id": "MDQ6VXNlcjMwNzQ5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/3074996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krdln", "html_url": "https://github.com/krdln", "followers_url": "https://api.github.com/users/krdln/followers", "following_url": "https://api.github.com/users/krdln/following{/other_user}", "gists_url": "https://api.github.com/users/krdln/gists{/gist_id}", "starred_url": "https://api.github.com/users/krdln/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krdln/subscriptions", "organizations_url": "https://api.github.com/users/krdln/orgs", "repos_url": "https://api.github.com/users/krdln/repos", "events_url": "https://api.github.com/users/krdln/events{/privacy}", "received_events_url": "https://api.github.com/users/krdln/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7403ee9d07a1b096e9628871bd97e39f464c3aa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7403ee9d07a1b096e9628871bd97e39f464c3aa5", "html_url": "https://github.com/rust-lang/rust/commit/7403ee9d07a1b096e9628871bd97e39f464c3aa5"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "a989f914db616dbd6aedc179d37fa7cddca6c3b5", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ecda7f314fa79bbfbf2125c99fd66288ca83c875/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecda7f314fa79bbfbf2125c99fd66288ca83c875/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=ecda7f314fa79bbfbf2125c99fd66288ca83c875", "patch": "@@ -274,16 +274,12 @@ impl<'a> Arguments<'a> {\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n                issue = \"0\")]\n     pub fn estimated_capacity(&self) -> usize {\n-        // Using wrapping arithmetics in this function, because\n-        // wrong result is highly unlikely and doesn't cause unsafety.\n-        use ::num::Wrapping as W;\n-\n-        let pieces_length: W<usize> = self.pieces.iter()\n-            .map(|x| W(x.len())).sum();\n+        let pieces_length: usize = self.pieces.iter()\n+            .map(|x| x.len()).sum();\n \n         if self.args.is_empty() {\n-            pieces_length.0\n-        } else if self.pieces[0] == \"\" && pieces_length < W(16) {\n+            pieces_length\n+        } else if self.pieces[0] == \"\" && pieces_length < 16 {\n             // If the format string starts with an argument,\n             // don't preallocate anything, unless length\n             // of pieces is significant.\n@@ -292,9 +288,8 @@ impl<'a> Arguments<'a> {\n             // There are some arguments, so any additional push\n             // will reallocate the string. To avoid that,\n             // we're \"pre-doubling\" the capacity here.\n-            (pieces_length * W(2)).0\n+            pieces_length.checked_mul(2).unwrap_or(0)\n         }\n-\n     }\n }\n "}]}