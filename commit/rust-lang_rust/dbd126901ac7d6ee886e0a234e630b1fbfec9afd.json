{"sha": "dbd126901ac7d6ee886e0a234e630b1fbfec9afd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZDEyNjkwMWFjN2Q2ZWU4ODZlMGEyMzRlNjMwYjFmYmZlYzlhZmQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-18T01:34:50Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-29T21:21:54Z"}, "message": "Add feature gates for `for` and `?` in consts", "tree": {"sha": "e5b1eae2ecbc3a582207071f2c59f63f8152a4ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5b1eae2ecbc3a582207071f2c59f63f8152a4ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbd126901ac7d6ee886e0a234e630b1fbfec9afd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd126901ac7d6ee886e0a234e630b1fbfec9afd", "html_url": "https://github.com/rust-lang/rust/commit/dbd126901ac7d6ee886e0a234e630b1fbfec9afd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a985d8e6c7f0519fa1e147854430a381ac4eadf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a985d8e6c7f0519fa1e147854430a381ac4eadf8", "html_url": "https://github.com/rust-lang/rust/commit/a985d8e6c7f0519fa1e147854430a381ac4eadf8"}], "stats": {"total": 95, "additions": 91, "deletions": 4}, "files": [{"sha": "9faed49c88bb29c52a1dd600ef166d1fbeb939b3", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=dbd126901ac7d6ee886e0a234e630b1fbfec9afd", "patch": "@@ -677,6 +677,12 @@ declare_features! (\n     /// Allows `#[derive(Default)]` and `#[default]` on enums.\n     (active, derive_default_enum, \"1.56.0\", Some(86985), None),\n \n+    /// Allows `for _ in _` loops in const contexts.\n+    (active, const_for, \"1.55.0\", None, None),\n+\n+    /// Allows the `?` operator in const contexts.\n+    (active, const_try, \"1.55.0\", None, None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "f6a93f5e02d5fec22a87de5b695b34c4124c67e6", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=dbd126901ac7d6ee886e0a234e630b1fbfec9afd", "patch": "@@ -40,13 +40,14 @@ impl NonConstExpr {\n         use hir::MatchSource::*;\n \n         let gates: &[_] = match self {\n-            // A `for` loop's desugaring contains a call to `IntoIterator::into_iter`,\n-            // so they are not yet allowed.\n-            // Likewise, `?` desugars to a call to `Try::into_result`.\n-            Self::Loop(ForLoop) | Self::Match(ForLoopDesugar | TryDesugar | AwaitDesugar) => {\n+            Self::Match(AwaitDesugar) => {\n                 return None;\n             }\n \n+            Self::Loop(ForLoop) | Self::Match(ForLoopDesugar) => &[sym::const_for],\n+\n+            Self::Match(TryDesugar) => &[sym::const_try],\n+\n             Self::Match(IfLetGuardDesugar) => bug!(\"`if let` guard outside a `match` expression\"),\n \n             // All other expressions are allowed."}, {"sha": "295e53aba35421349818352a80629e6ab45e68c0", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=dbd126901ac7d6ee886e0a234e630b1fbfec9afd", "patch": "@@ -410,6 +410,7 @@ symbols! {\n         const_fn_transmute,\n         const_fn_union,\n         const_fn_unsize,\n+        const_for,\n         const_format_args,\n         const_generic_defaults,\n         const_generics,\n@@ -432,6 +433,7 @@ symbols! {\n         const_trait_bound_opt_out,\n         const_trait_impl,\n         const_transmute,\n+        const_try,\n         constant,\n         constructor,\n         contents,"}, {"sha": "bec7b808905360a7b0bb1bb0ac30ac5c4358a0fa", "filename": "src/test/ui/consts/const-for-feature-gate.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.rs?ref=dbd126901ac7d6ee886e0a234e630b1fbfec9afd", "patch": "@@ -0,0 +1,8 @@\n+// gate-test-const_for\n+\n+const _: () = {\n+    for _ in 0..5 {}\n+    //~^ error: `for` is not allowed in a `const`\n+};\n+\n+fn main() {}"}, {"sha": "c1b46ef73761477673339d9eea19b5edd725e250", "filename": "src/test/ui/consts/const-for-feature-gate.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.stderr?ref=dbd126901ac7d6ee886e0a234e630b1fbfec9afd", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: `for` is not allowed in a `const`\n+  --> $DIR/const-for-feature-gate.rs:4:5\n+   |\n+LL |     for _ in 0..5 {}\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_for)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "0839c23a0b99bb7b66b03e5d4526c3489cca08ec", "filename": "src/test/ui/consts/const-try-feature-gate.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/src%2Ftest%2Fui%2Fconsts%2Fconst-try-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/src%2Ftest%2Fui%2Fconsts%2Fconst-try-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-try-feature-gate.rs?ref=dbd126901ac7d6ee886e0a234e630b1fbfec9afd", "patch": "@@ -0,0 +1,9 @@\n+// gate-test-const_try\n+\n+const fn t() -> Option<()> {\n+    Some(())?;\n+    //~^ error: `?` is not allowed in a `const fn`\n+    None\n+}\n+\n+fn main() {}"}, {"sha": "9e3aa09ab00f545968acd78230a7a5745e5d92f6", "filename": "src/test/ui/consts/const-try-feature-gate.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/src%2Ftest%2Fui%2Fconsts%2Fconst-try-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/src%2Ftest%2Fui%2Fconsts%2Fconst-try-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-try-feature-gate.stderr?ref=dbd126901ac7d6ee886e0a234e630b1fbfec9afd", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: `?` is not allowed in a `const fn`\n+  --> $DIR/const-try-feature-gate.rs:4:5\n+   |\n+LL |     Some(())?;\n+   |     ^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_try)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e199fd9ff8a1af5cf8b0b0e16ca645ab8cdcb950", "filename": "src/test/ui/consts/const-try.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/src%2Ftest%2Fui%2Fconsts%2Fconst-try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd126901ac7d6ee886e0a234e630b1fbfec9afd/src%2Ftest%2Fui%2Fconsts%2Fconst-try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-try.rs?ref=dbd126901ac7d6ee886e0a234e630b1fbfec9afd", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+\n+// Demonstrates what's needed to make use of `?` in const contexts.\n+\n+#![crate_type = \"lib\"]\n+#![feature(try_trait_v2)]\n+#![feature(const_trait_impl)]\n+#![feature(const_try)]\n+\n+use std::ops::{ControlFlow, FromResidual, Try};\n+\n+struct TryMe;\n+struct Error;\n+\n+impl const FromResidual<Error> for TryMe {\n+    fn from_residual(residual: Error) -> Self {\n+        TryMe\n+    }\n+}\n+\n+impl const Try for TryMe {\n+    type Output = ();\n+    type Residual = Error;\n+    fn from_output(output: Self::Output) -> Self {\n+        TryMe\n+    }\n+    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {\n+        ControlFlow::Break(Error)\n+    }\n+}\n+\n+const fn t() -> TryMe {\n+    TryMe?;\n+    TryMe\n+}\n+\n+const _: () = {\n+    t();\n+};"}]}