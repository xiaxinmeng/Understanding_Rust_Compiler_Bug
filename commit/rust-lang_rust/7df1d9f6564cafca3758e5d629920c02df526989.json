{"sha": "7df1d9f6564cafca3758e5d629920c02df526989", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZjFkOWY2NTY0Y2FmY2EzNzU4ZTVkNjI5OTIwYzAyZGY1MjY5ODk=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-13T13:10:47Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-29T09:16:03Z"}, "message": "Allow constants of byte slice type as patterns", "tree": {"sha": "884aec6ea6b64b641fd316036c85d34034605993", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/884aec6ea6b64b641fd316036c85d34034605993"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7df1d9f6564cafca3758e5d629920c02df526989", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7df1d9f6564cafca3758e5d629920c02df526989", "html_url": "https://github.com/rust-lang/rust/commit/7df1d9f6564cafca3758e5d629920c02df526989", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7df1d9f6564cafca3758e5d629920c02df526989/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a49316ddc99d9d595193557fc899f6c52e4d9af9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a49316ddc99d9d595193557fc899f6c52e4d9af9", "html_url": "https://github.com/rust-lang/rust/commit/a49316ddc99d9d595193557fc899f6c52e4d9af9"}], "stats": {"total": 127, "additions": 68, "deletions": 59}, "files": [{"sha": "87b35b1c5345118e8d1e3ce67f104ed5ed1b14a2", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 57, "deletions": 59, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/7df1d9f6564cafca3758e5d629920c02df526989/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df1d9f6564cafca3758e5d629920c02df526989/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=7df1d9f6564cafca3758e5d629920c02df526989", "patch": "@@ -330,47 +330,6 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n         })\n     }\n \n-    // convert a byte-string pattern to a list of u8 patterns.\n-    fn lower_byte_str_pattern<'p>(&mut self, pat: &'p Pattern<'tcx>) -> Vec<&'p Pattern<'tcx>>\n-            where 'a: 'p\n-    {\n-        let pattern_arena = &*self.pattern_arena;\n-        let tcx = self.tcx;\n-        self.byte_array_map.entry(pat).or_insert_with(|| {\n-            match pat.kind {\n-                box PatternKind::Constant {\n-                    value: const_val\n-                } => {\n-                    if let Some(ptr) = const_val.to_ptr() {\n-                        let is_array_ptr = const_val.ty\n-                            .builtin_deref(true)\n-                            .and_then(|t| t.ty.builtin_index())\n-                            .map_or(false, |t| t == tcx.types.u8);\n-                        assert!(is_array_ptr);\n-                        let alloc = tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n-                        assert_eq!(ptr.offset.bytes(), 0);\n-                        // FIXME: check length\n-                        alloc.bytes.iter().map(|b| {\n-                            &*pattern_arena.alloc(Pattern {\n-                                ty: tcx.types.u8,\n-                                span: pat.span,\n-                                kind: box PatternKind::Constant {\n-                                    value: ty::Const::from_bits(\n-                                        tcx,\n-                                        *b as u128,\n-                                        ty::ParamEnv::empty().and(tcx.types.u8))\n-                                }\n-                            })\n-                        }).collect()\n-                    } else {\n-                        bug!(\"not a byte str: {:?}\", const_val)\n-                    }\n-                }\n-                _ => span_bug!(pat.span, \"unexpected byte array pattern {:?}\", pat)\n-            }\n-        }).clone()\n-    }\n-\n     fn is_uninhabited(&self, ty: Ty<'tcx>) -> bool {\n         if self.tcx.features().exhaustive_patterns {\n             self.tcx.is_ty_uninhabited_from(self.module, ty)\n@@ -1705,26 +1664,65 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n         PatternKind::Constant { value } => {\n             match *constructor {\n                 Slice(..) => {\n-                    if let Some(ptr) = value.to_ptr() {\n-                        let is_array_ptr = value.ty\n-                            .builtin_deref(true)\n-                            .and_then(|t| t.ty.builtin_index())\n-                            .map_or(false, |t| t == cx.tcx.types.u8);\n-                        assert!(is_array_ptr);\n-                        let data_len = cx.tcx\n-                            .alloc_map\n-                            .lock()\n-                            .unwrap_memory(ptr.alloc_id)\n-                            .bytes\n-                            .len();\n-                        if wild_patterns.len() == data_len {\n-                            Some(cx.lower_byte_str_pattern(pat))\n-                        } else {\n-                            None\n+                    // we extract an `Option` for the pointer because slices of zero elements don't\n+                    // necessarily point to memory, they are usually just integers. The only time\n+                    // they should be pointing to memory is when they are subslices of nonzero\n+                    // slices\n+                    let (opt_ptr, data_len) = match value.ty.builtin_deref(false).unwrap().ty.sty {\n+                        ty::TyKind::Array(t, n) => {\n+                            assert!(t == cx.tcx.types.u8);\n+                            (value.to_ptr(), n.unwrap_usize(cx.tcx))\n+                        },\n+                        ty::TyKind::Slice(t) => {\n+                            assert!(t == cx.tcx.types.u8);\n+                            match value.val {\n+                                ConstValue::ScalarPair(ptr, n) => (\n+                                    ptr.to_ptr().ok(),\n+                                    n.to_bits(cx.tcx.data_layout.pointer_size).unwrap() as u64\n+                                ),\n+                                _ => span_bug!(\n+                                    pat.span,\n+                                    \"slice pattern constant must be scalar pair but is {:?}\",\n+                                    value,\n+                                ),\n+                            }\n+                        },\n+                        _ => span_bug!(\n+                            pat.span,\n+                            \"unexpected const-val {:?} with ctor {:?}\",\n+                            value,\n+                            constructor,\n+                        ),\n+                    };\n+                    if wild_patterns.len() as u64 == data_len {\n+                        // convert a byte-string pattern to a list of u8 patterns.\n+                        match (data_len, opt_ptr) {\n+                            (0, _) => Some(Vec::new()),\n+                            (_, Some(ptr)) => {\n+                                let alloc = cx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n+                                // FIXME: use `Allocation::read_bytes` once available\n+                                assert_eq!(ptr.offset.bytes(), 0);\n+                                Some(alloc.bytes.iter().map(|b| {\n+                                    &*cx.pattern_arena.alloc(Pattern {\n+                                        ty: cx.tcx.types.u8,\n+                                        span: pat.span,\n+                                        kind: box PatternKind::Constant {\n+                                            value: ty::Const::from_bits(\n+                                                cx.tcx,\n+                                                *b as u128,\n+                                                ty::ParamEnv::empty().and(cx.tcx.types.u8))\n+                                        },\n+                                    })\n+                                }).collect())\n+                            },\n+                            (_, None) => span_bug!(\n+                                pat.span,\n+                                \"non zero length slice with const-val {:?}\",\n+                                value,\n+                            ),\n                         }\n                     } else {\n-                        span_bug!(pat.span,\n-                        \"unexpected const-val {:?} with ctor {:?}\", value, constructor)\n+                        None\n                     }\n                 }\n                 _ => {"}, {"sha": "6fcf197c7ae0d62c9c13b51cffe3fd63a41df6c8", "filename": "src/test/ui/pattern/slice-pattern-const.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7df1d9f6564cafca3758e5d629920c02df526989/src%2Ftest%2Fui%2Fpattern%2Fslice-pattern-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df1d9f6564cafca3758e5d629920c02df526989/src%2Ftest%2Fui%2Fpattern%2Fslice-pattern-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fslice-pattern-const.rs?ref=7df1d9f6564cafca3758e5d629920c02df526989", "patch": "@@ -0,0 +1,11 @@\n+// compile-pass\n+\n+fn main() {\n+\tlet s = &[0x00; 4][..]; //Slice of any value\n+\tconst MAGIC_TEST: &[u8] = b\"TEST\"; //Const slice to pattern match with\n+\tmatch s {\n+\t\tMAGIC_TEST => (),\n+\t\t[0x00, 0x00, 0x00, 0x00] => (),\n+\t\t_ => ()\n+\t}\n+}\n\\ No newline at end of file"}]}