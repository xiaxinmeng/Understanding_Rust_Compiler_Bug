{"sha": "eaf851288ed31090afd924eeb22f5e0f202151d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZjg1MTI4OGVkMzEwOTBhZmQ5MjRlZWIyMmY1ZTBmMjAyMTUxZDQ=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-26T00:35:28Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-26T00:35:28Z"}, "message": "Simplify loop and remove old debugging code\n\nCo-authored-by: Joshua Nelson <jyn514@gmail.com>", "tree": {"sha": "1154f938a3e781b63b0a910d6acba48c77777ada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1154f938a3e781b63b0a910d6acba48c77777ada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaf851288ed31090afd924eeb22f5e0f202151d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf851288ed31090afd924eeb22f5e0f202151d4", "html_url": "https://github.com/rust-lang/rust/commit/eaf851288ed31090afd924eeb22f5e0f202151d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaf851288ed31090afd924eeb22f5e0f202151d4/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b1b277cf90886466e2e0dc5017ea535ef5e00ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1b277cf90886466e2e0dc5017ea535ef5e00ce", "html_url": "https://github.com/rust-lang/rust/commit/4b1b277cf90886466e2e0dc5017ea535ef5e00ce"}], "stats": {"total": 19, "additions": 5, "deletions": 14}, "files": [{"sha": "b49ed07f8e83f546ce9217c601ff1a3517c47563", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eaf851288ed31090afd924eeb22f5e0f202151d4/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf851288ed31090afd924eeb22f5e0f202151d4/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=eaf851288ed31090afd924eeb22f5e0f202151d4", "patch": "@@ -636,21 +636,12 @@ crate fn find_closest_parent_module(tcx: TyCtxt<'_>, def_id: DefId) -> Option<De\n         let mut current = def_id;\n         // The immediate parent might not always be a module.\n         // Find the first parent which is.\n-        loop {\n-            if let Some(parent) = tcx.parent(current) {\n-                if tcx.def_kind(parent) == DefKind::Mod {\n-                    break Some(parent);\n-                }\n-                current = parent;\n-            } else {\n-                debug!(\n-                    \"{:?} has no parent (kind={:?}, original was {:?})\",\n-                    current,\n-                    tcx.def_kind(current),\n-                    def_id\n-                );\n-                break None;\n+        while let Some(parent) = tcx.parent(current) {\n+            if tcx.def_kind(parent) == DefKind::Mod {\n+                return Some(parent);\n             }\n+            current = parent;\n         }\n+        None\n     }\n }"}]}