{"sha": "5753614152b4c6d9c0d20bc311a335c4746c3ed0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NTM2MTQxNTJiNGM2ZDljMGQyMGJjMzExYTMzNWM0NzQ2YzNlZDA=", "commit": {"author": {"name": "nahuakang", "email": "kangnahua@gmail.com", "date": "2021-01-27T08:34:59Z"}, "committer": {"name": "nahuakang", "email": "kangnahua@gmail.com", "date": "2021-02-01T15:49:53Z"}, "message": "Draft skeleton for new lint", "tree": {"sha": "5a249d3e7bfa97f63e8058d06aee8c5854265c67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a249d3e7bfa97f63e8058d06aee8c5854265c67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5753614152b4c6d9c0d20bc311a335c4746c3ed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5753614152b4c6d9c0d20bc311a335c4746c3ed0", "html_url": "https://github.com/rust-lang/rust/commit/5753614152b4c6d9c0d20bc311a335c4746c3ed0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5753614152b4c6d9c0d20bc311a335c4746c3ed0/comments", "author": {"login": "nahuakang", "id": 18533347, "node_id": "MDQ6VXNlcjE4NTMzMzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/18533347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nahuakang", "html_url": "https://github.com/nahuakang", "followers_url": "https://api.github.com/users/nahuakang/followers", "following_url": "https://api.github.com/users/nahuakang/following{/other_user}", "gists_url": "https://api.github.com/users/nahuakang/gists{/gist_id}", "starred_url": "https://api.github.com/users/nahuakang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nahuakang/subscriptions", "organizations_url": "https://api.github.com/users/nahuakang/orgs", "repos_url": "https://api.github.com/users/nahuakang/repos", "events_url": "https://api.github.com/users/nahuakang/events{/privacy}", "received_events_url": "https://api.github.com/users/nahuakang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nahuakang", "id": 18533347, "node_id": "MDQ6VXNlcjE4NTMzMzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/18533347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nahuakang", "html_url": "https://github.com/nahuakang", "followers_url": "https://api.github.com/users/nahuakang/followers", "following_url": "https://api.github.com/users/nahuakang/following{/other_user}", "gists_url": "https://api.github.com/users/nahuakang/gists{/gist_id}", "starred_url": "https://api.github.com/users/nahuakang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nahuakang/subscriptions", "organizations_url": "https://api.github.com/users/nahuakang/orgs", "repos_url": "https://api.github.com/users/nahuakang/repos", "events_url": "https://api.github.com/users/nahuakang/events{/privacy}", "received_events_url": "https://api.github.com/users/nahuakang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "949b12589112cecad9566305444527ec0738d521", "url": "https://api.github.com/repos/rust-lang/rust/commits/949b12589112cecad9566305444527ec0738d521", "html_url": "https://github.com/rust-lang/rust/commit/949b12589112cecad9566305444527ec0738d521"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "e8e738313d4505fa628183ac53ce2acdb1962342", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5753614152b4c6d9c0d20bc311a335c4746c3ed0/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5753614152b4c6d9c0d20bc311a335c4746c3ed0/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5753614152b4c6d9c0d20bc311a335c4746c3ed0", "patch": "@@ -1969,6 +1969,7 @@ Released 2018-09-13\n [`fn_to_numeric_cast_with_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_with_truncation\n [`for_kv_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map\n [`for_loops_over_fallibles`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loops_over_fallibles\n+[`for_loops_over_options`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loops_over_options\n [`forget_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_copy\n [`forget_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_ref\n [`from_iter_instead_of_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_iter_instead_of_collect"}, {"sha": "3793208735540ab3b74677769c0192ebf7f76ade", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5753614152b4c6d9c0d20bc311a335c4746c3ed0/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5753614152b4c6d9c0d20bc311a335c4746c3ed0/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5753614152b4c6d9c0d20bc311a335c4746c3ed0", "patch": "@@ -685,6 +685,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &loops::EXPLICIT_ITER_LOOP,\n         &loops::FOR_KV_MAP,\n         &loops::FOR_LOOPS_OVER_FALLIBLES,\n+        &loops::FOR_LOOPS_OVER_OPTIONS,\n         &loops::ITER_NEXT_LOOP,\n         &loops::MANUAL_MEMCPY,\n         &loops::MUT_RANGE_BOUND,\n@@ -1488,6 +1489,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::EXPLICIT_COUNTER_LOOP),\n         LintId::of(&loops::FOR_KV_MAP),\n         LintId::of(&loops::FOR_LOOPS_OVER_FALLIBLES),\n+        LintId::of(&loops::FOR_LOOPS_OVER_OPTIONS),\n         LintId::of(&loops::ITER_NEXT_LOOP),\n         LintId::of(&loops::MANUAL_MEMCPY),\n         LintId::of(&loops::MUT_RANGE_BOUND),\n@@ -1820,6 +1822,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&lifetimes::EXTRA_UNUSED_LIFETIMES),\n         LintId::of(&lifetimes::NEEDLESS_LIFETIMES),\n         LintId::of(&loops::EXPLICIT_COUNTER_LOOP),\n+        LintId::of(&loops::FOR_LOOPS_OVER_OPTIONS),\n         LintId::of(&loops::MUT_RANGE_BOUND),\n         LintId::of(&loops::SINGLE_ELEMENT_LOOP),\n         LintId::of(&loops::WHILE_LET_LOOP),"}, {"sha": "c1a59650cb04c0060d89f771ab71b7370550c82a", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5753614152b4c6d9c0d20bc311a335c4746c3ed0/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5753614152b4c6d9c0d20bc311a335c4746c3ed0/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=5753614152b4c6d9c0d20bc311a335c4746c3ed0", "patch": "@@ -494,13 +494,45 @@ declare_clippy_lint! {\n     \"there is no reason to have a single element loop\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for iteration of `Option`s with\n+    /// a single `if let Some()` expression inside.\n+    ///\n+    /// **Why is this bad?** It is verbose and can be simplified\n+    /// by first calling the `flatten` method on the `Iterator`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let x = vec![Some(1), Some(2), Some(3)];\n+    /// for n in x {\n+    ///     if let Some(n) = n {\n+    ///         println!(\"{}\", n);\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let x = vec![Some(1), Some(2), Some(3)];\n+    /// for n in x.iter().flatten() {\n+    ///     println!(\"{}\", n);\n+    /// }\n+    /// ```\n+    pub FOR_LOOPS_OVER_OPTIONS,\n+    complexity,\n+    \"for loops over `Option`s or `Result`s with a single expression can be simplified\"\n+}\n+\n declare_lint_pass!(Loops => [\n     MANUAL_MEMCPY,\n     NEEDLESS_RANGE_LOOP,\n     EXPLICIT_ITER_LOOP,\n     EXPLICIT_INTO_ITER_LOOP,\n     ITER_NEXT_LOOP,\n     FOR_LOOPS_OVER_FALLIBLES,\n+    FOR_LOOPS_OVER_OPTIONS,\n     WHILE_LET_LOOP,\n     NEEDLESS_COLLECT,\n     EXPLICIT_COUNTER_LOOP,\n@@ -830,6 +862,7 @@ fn check_for_loop<'tcx>(\n     check_for_mut_range_bound(cx, arg, body);\n     check_for_single_element_loop(cx, pat, arg, body, expr);\n     detect_same_item_push(cx, pat, arg, body, expr);\n+    check_for_loop_over_options_or_results(cx, pat, arg, body, expr);\n }\n \n // this function assumes the given expression is a `for` loop.\n@@ -1953,6 +1986,37 @@ fn check_for_single_element_loop<'tcx>(\n     }\n }\n \n+/// Check if a for loop loops over `Option`s or `Result`s and contains only\n+/// a `if let Some` or `if let Ok` expression.\n+fn check_for_loop_over_options_or_results<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    pat: &'tcx Pat<'_>,\n+    arg: &'tcx Expr<'_>,\n+    body: &'tcx Expr<'_>,\n+    expr: &'tcx Expr<'_>,\n+) {\n+    if_chain! {\n+        if let ExprKind::Block(ref block, _) = body.kind;\n+        if block.stmts.is_empty();\n+        if let Some(inner_expr) = block.expr;\n+        if let ExprKind::Match(ref _match_expr, ref _match_arms, MatchSource::IfLetDesugar{ contains_else_clause }) = inner_expr.kind;\n+        if !contains_else_clause;\n+        then {\n+            // println!(\"if_let_expr:\\n{:?}\", snippet(cx, if_let_expr.span, \"..\"));\n+            // println!(\"pat is:\\n {:?}\", snippet(cx, pat.span, \"..\"));\n+            // println!(\"arg is:\\n {:?}\", snippet(cx, arg.span, \"..\"));\n+            // println!(\"body is:\\n {:?}\", snippet(cx, body.span, \"..\"));\n+            // println!(\"arg kind is: {:?}\", arg.kind);\n+            // println!(\"expr is:\\n {:?}\", snippet(cx, expr.span, \"..\"));\n+            // todo!();\n+            let arg_snippet = snippet(cx, arg.span, \"..\");\n+            let msg = \"looping over `Option`s or `Result`s with an `if let` expression.\";\n+            let hint = format!(\"try turn {} into an `Iterator` and use `flatten`: `{}.iter().flatten()`\", arg_snippet, arg_snippet);\n+            span_lint_and_help(cx, FOR_LOOPS_OVER_OPTIONS, expr.span, msg, None, &hint);\n+        }\n+    }\n+}\n+\n struct MutatePairDelegate<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n     hir_id_low: Option<HirId>,"}]}