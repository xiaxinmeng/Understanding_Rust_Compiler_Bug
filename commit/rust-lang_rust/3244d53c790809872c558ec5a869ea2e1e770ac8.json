{"sha": "3244d53c790809872c558ec5a869ea2e1e770ac8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNDRkNTNjNzkwODA5ODcyYzU1OGVjNWE4NjllYTJlMWU3NzBhYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-12T01:20:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-12T01:20:19Z"}, "message": "Auto merge of #52089 - eddyb:issue-51907, r=nagisa\n\nrustc_codegen_llvm: replace the first argument early in FnType::new_vtable.\n\nFixes #51907 by removing the vtable pointer before the `ArgType` is even created.\nThis allows any ABI to support trait object method calls, regardless of how it passes `*dyn Trait`.\n\nr? @nikomatsakis", "tree": {"sha": "5b081873eded339502f1be13dad7ca6ef330d1a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b081873eded339502f1be13dad7ca6ef330d1a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3244d53c790809872c558ec5a869ea2e1e770ac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3244d53c790809872c558ec5a869ea2e1e770ac8", "html_url": "https://github.com/rust-lang/rust/commit/3244d53c790809872c558ec5a869ea2e1e770ac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3244d53c790809872c558ec5a869ea2e1e770ac8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ba5ff4d3020ed0de7da8f976204342a2102fdf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba5ff4d3020ed0de7da8f976204342a2102fdf1", "html_url": "https://github.com/rust-lang/rust/commit/4ba5ff4d3020ed0de7da8f976204342a2102fdf1"}, {"sha": "ce94518ed36f9248bbbcc34f5d7ec9bb194ed228", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce94518ed36f9248bbbcc34f5d7ec9bb194ed228", "html_url": "https://github.com/rust-lang/rust/commit/ce94518ed36f9248bbbcc34f5d7ec9bb194ed228"}], "stats": {"total": 106, "additions": 69, "deletions": 37}, "files": [{"sha": "dbada85098b41b92bbf8cb614acb6a777b02d913", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 43, "deletions": 37, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/3244d53c790809872c558ec5a869ea2e1e770ac8/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3244d53c790809872c558ec5a869ea2e1e770ac8/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=3244d53c790809872c558ec5a869ea2e1e770ac8", "patch": "@@ -261,9 +261,12 @@ pub trait FnTypeExt<'a, 'tcx> {\n     fn new_vtable(cx: &CodegenCx<'a, 'tcx>,\n                   sig: ty::FnSig<'tcx>,\n                   extra_args: &[Ty<'tcx>]) -> Self;\n-    fn unadjusted(cx: &CodegenCx<'a, 'tcx>,\n-                  sig: ty::FnSig<'tcx>,\n-                  extra_args: &[Ty<'tcx>]) -> Self;\n+    fn new_internal(\n+        cx: &CodegenCx<'a, 'tcx>,\n+        sig: ty::FnSig<'tcx>,\n+        extra_args: &[Ty<'tcx>],\n+        mk_arg_type: impl Fn(Ty<'tcx>, Option<usize>) -> ArgType<'tcx, Ty<'tcx>>,\n+    ) -> Self;\n     fn adjust_for_abi(&mut self,\n                       cx: &CodegenCx<'a, 'tcx>,\n                       abi: Abi);\n@@ -285,40 +288,40 @@ impl<'a, 'tcx> FnTypeExt<'a, 'tcx> for FnType<'tcx, Ty<'tcx>> {\n     fn new(cx: &CodegenCx<'a, 'tcx>,\n                sig: ty::FnSig<'tcx>,\n                extra_args: &[Ty<'tcx>]) -> Self {\n-        let mut fn_ty = FnType::unadjusted(cx, sig, extra_args);\n-        fn_ty.adjust_for_abi(cx, sig.abi);\n-        fn_ty\n+        FnType::new_internal(cx, sig, extra_args, |ty, _| {\n+            ArgType::new(cx.layout_of(ty))\n+        })\n     }\n \n     fn new_vtable(cx: &CodegenCx<'a, 'tcx>,\n                       sig: ty::FnSig<'tcx>,\n                       extra_args: &[Ty<'tcx>]) -> Self {\n-        let mut fn_ty = FnType::unadjusted(cx, sig, extra_args);\n-        // Don't pass the vtable, it's not an argument of the virtual fn.\n-        {\n-            let self_arg = &mut fn_ty.args[0];\n-            match self_arg.mode {\n-                PassMode::Pair(data_ptr, _) => {\n-                    self_arg.mode = PassMode::Direct(data_ptr);\n-                }\n-                _ => bug!(\"FnType::new_vtable: non-pair self {:?}\", self_arg)\n-            }\n-\n-            let pointee = self_arg.layout.ty.builtin_deref(true)\n-                .unwrap_or_else(|| {\n-                    bug!(\"FnType::new_vtable: non-pointer self {:?}\", self_arg)\n-                }).ty;\n-            let fat_ptr_ty = cx.tcx.mk_mut_ptr(pointee);\n-            self_arg.layout = cx.layout_of(fat_ptr_ty).field(cx, 0);\n-        }\n-        fn_ty.adjust_for_abi(cx, sig.abi);\n-        fn_ty\n+        FnType::new_internal(cx, sig, extra_args, |ty, arg_idx| {\n+            let mut layout = cx.layout_of(ty);\n+            // Don't pass the vtable, it's not an argument of the virtual fn.\n+            // Instead, pass just the (thin pointer) first field of `*dyn Trait`.\n+            if arg_idx == Some(0) {\n+                // FIXME(eddyb) `layout.field(cx, 0)` is not enough because e.g.\n+                // `Box<dyn Trait>` has a few newtype wrappers around the raw\n+                // pointer, so we'd have to \"dig down\" to find `*dyn Trait`.\n+                let pointee = layout.ty.builtin_deref(true)\n+                    .unwrap_or_else(|| {\n+                        bug!(\"FnType::new_vtable: non-pointer self {:?}\", layout)\n+                    }).ty;\n+                let fat_ptr_ty = cx.tcx.mk_mut_ptr(pointee);\n+                layout = cx.layout_of(fat_ptr_ty).field(cx, 0);\n+            }\n+            ArgType::new(layout)\n+        })\n     }\n \n-    fn unadjusted(cx: &CodegenCx<'a, 'tcx>,\n-                      sig: ty::FnSig<'tcx>,\n-                      extra_args: &[Ty<'tcx>]) -> Self {\n-        debug!(\"FnType::unadjusted({:?}, {:?})\", sig, extra_args);\n+    fn new_internal(\n+        cx: &CodegenCx<'a, 'tcx>,\n+        sig: ty::FnSig<'tcx>,\n+        extra_args: &[Ty<'tcx>],\n+        mk_arg_type: impl Fn(Ty<'tcx>, Option<usize>) -> ArgType<'tcx, Ty<'tcx>>,\n+    ) -> Self {\n+        debug!(\"FnType::new_internal({:?}, {:?})\", sig, extra_args);\n \n         use self::Abi::*;\n         let conv = match cx.sess().target.target.adjust_abi(sig.abi) {\n@@ -435,8 +438,9 @@ impl<'a, 'tcx> FnTypeExt<'a, 'tcx> for FnType<'tcx, Ty<'tcx>> {\n             }\n         };\n \n-        let arg_of = |ty: Ty<'tcx>, is_return: bool| {\n-            let mut arg = ArgType::new(cx.layout_of(ty));\n+        let arg_of = |ty: Ty<'tcx>, arg_idx: Option<usize>| {\n+            let is_return = arg_idx.is_none();\n+            let mut arg = mk_arg_type(ty, arg_idx);\n             if arg.layout.is_zst() {\n                 // For some forsaken reason, x86_64-pc-windows-gnu\n                 // doesn't ignore zero-sized struct arguments.\n@@ -479,14 +483,16 @@ impl<'a, 'tcx> FnTypeExt<'a, 'tcx> for FnType<'tcx, Ty<'tcx>> {\n             arg\n         };\n \n-        FnType {\n-            ret: arg_of(sig.output(), true),\n-            args: inputs.iter().chain(extra_args.iter()).map(|ty| {\n-                arg_of(ty, false)\n+        let mut fn_ty = FnType {\n+            ret: arg_of(sig.output(), None),\n+            args: inputs.iter().chain(extra_args).enumerate().map(|(i, ty)| {\n+                arg_of(ty, Some(i))\n             }).collect(),\n             variadic: sig.variadic,\n             conv,\n-        }\n+        };\n+        fn_ty.adjust_for_abi(cx, sig.abi);\n+        fn_ty\n     }\n \n     fn adjust_for_abi(&mut self,"}, {"sha": "de2a59c5f015bfb094774313b8bcf426f551a426", "filename": "src/test/run-pass/issue-51907.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3244d53c790809872c558ec5a869ea2e1e770ac8/src%2Ftest%2Frun-pass%2Fissue-51907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3244d53c790809872c558ec5a869ea2e1e770ac8/src%2Ftest%2Frun-pass%2Fissue-51907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-51907.rs?ref=3244d53c790809872c558ec5a869ea2e1e770ac8", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    extern fn borrow(&self);\n+    extern fn take(self: Box<Self>);\n+}\n+\n+struct Bar;\n+impl Foo for Bar {\n+    extern fn borrow(&self) {}\n+    extern fn take(self: Box<Self>) {}\n+}\n+\n+fn main() {\n+    let foo: Box<dyn Foo> = Box::new(Bar);\n+    foo.borrow();\n+    foo.take()\n+}"}]}