{"sha": "ba177596d3e26dc8ba934c41ed42a6b26794f94c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMTc3NTk2ZDNlMjZkYzhiYTkzNGM0MWVkNDJhNmIyNjc5NGY5NGM=", "commit": {"author": {"name": "crhino", "email": "piraino.chris@gmail.com", "date": "2014-12-24T07:57:35Z"}, "committer": {"name": "crhino", "email": "piraino.chris@gmail.com", "date": "2014-12-29T00:26:00Z"}, "message": "Make lifetime elision help more useful on type signatures.\n\nFixes #19707.", "tree": {"sha": "b0f6b1c6c9cd04749d17d2dc01d757073093c694", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0f6b1c6c9cd04749d17d2dc01d757073093c694"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba177596d3e26dc8ba934c41ed42a6b26794f94c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba177596d3e26dc8ba934c41ed42a6b26794f94c", "html_url": "https://github.com/rust-lang/rust/commit/ba177596d3e26dc8ba934c41ed42a6b26794f94c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba177596d3e26dc8ba934c41ed42a6b26794f94c/comments", "author": {"login": "crhino", "id": 4146455, "node_id": "MDQ6VXNlcjQxNDY0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/4146455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crhino", "html_url": "https://github.com/crhino", "followers_url": "https://api.github.com/users/crhino/followers", "following_url": "https://api.github.com/users/crhino/following{/other_user}", "gists_url": "https://api.github.com/users/crhino/gists{/gist_id}", "starred_url": "https://api.github.com/users/crhino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crhino/subscriptions", "organizations_url": "https://api.github.com/users/crhino/orgs", "repos_url": "https://api.github.com/users/crhino/repos", "events_url": "https://api.github.com/users/crhino/events{/privacy}", "received_events_url": "https://api.github.com/users/crhino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crhino", "id": 4146455, "node_id": "MDQ6VXNlcjQxNDY0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/4146455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crhino", "html_url": "https://github.com/crhino", "followers_url": "https://api.github.com/users/crhino/followers", "following_url": "https://api.github.com/users/crhino/following{/other_user}", "gists_url": "https://api.github.com/users/crhino/gists{/gist_id}", "starred_url": "https://api.github.com/users/crhino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crhino/subscriptions", "organizations_url": "https://api.github.com/users/crhino/orgs", "repos_url": "https://api.github.com/users/crhino/repos", "events_url": "https://api.github.com/users/crhino/events{/privacy}", "received_events_url": "https://api.github.com/users/crhino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63666317214788329e0b7680929b09823f127d83", "url": "https://api.github.com/repos/rust-lang/rust/commits/63666317214788329e0b7680929b09823f127d83", "html_url": "https://github.com/rust-lang/rust/commit/63666317214788329e0b7680929b09823f127d83"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "c7dcdba551b70e11f42f3a5317a49ef6224e03e3", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba177596d3e26dc8ba934c41ed42a6b26794f94c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba177596d3e26dc8ba934c41ed42a6b26794f94c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ba177596d3e26dc8ba934c41ed42a6b26794f94c", "patch": "@@ -164,10 +164,16 @@ pub fn opt_ast_region_to_region<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                             let mut m = String::new();\n                             let len = v.len();\n                             for (i, (name, n)) in v.into_iter().enumerate() {\n-                                m.push_str(if n == 1 {\n+                                let help_name = if name.is_empty() {\n+                                    format!(\"argument {}\", i + 1)\n+                                } else {\n                                     format!(\"`{}`\", name)\n+                                };\n+\n+                                m.push_str(if n == 1 {\n+                                    help_name\n                                 } else {\n-                                    format!(\"one of `{}`'s {} elided lifetimes\", name, n)\n+                                    format!(\"one of {}'s {} elided lifetimes\", help_name, n)\n                                 }[]);\n \n                                 if len == 2 && i == 0 {"}, {"sha": "9affb44b7445c7d07736851368efa81e3e7ddc9d", "filename": "src/test/compile-fail/issue-19707.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ba177596d3e26dc8ba934c41ed42a6b26794f94c/src%2Ftest%2Fcompile-fail%2Fissue-19707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba177596d3e26dc8ba934c41ed42a6b26794f94c/src%2Ftest%2Fcompile-fail%2Fissue-19707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19707.rs?ref=ba177596d3e26dc8ba934c41ed42a6b26794f94c", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closures)]\n+#![allow(dead_code)]\n+\n+type foo = fn(&u8, &u8) -> &u8; //~ ERROR missing lifetime specifier\n+//~^ HELP the signature does not say whether it is borrowed from argument 1 or argument 2\n+\n+fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {} //~ ERROR missing lifetime specifier\n+//~^ HELP the signature does not say whether it is borrowed from argument 1 or argument 2\n+\n+fn main() {}"}]}