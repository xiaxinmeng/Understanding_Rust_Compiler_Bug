{"sha": "b8c1726f267ce24b773f04c7d161c62f6fbc05fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YzE3MjZmMjY3Y2UyNGI3NzNmMDRjN2QxNjFjNjJmNmZiYzA1ZmI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-12-02T18:11:32Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-12-06T22:34:36Z"}, "message": "Show 'loading content' when loading content", "tree": {"sha": "6b407c5625fb52593d377cc8b17d890650c30d1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b407c5625fb52593d377cc8b17d890650c30d1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8c1726f267ce24b773f04c7d161c62f6fbc05fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c1726f267ce24b773f04c7d161c62f6fbc05fb", "html_url": "https://github.com/rust-lang/rust/commit/b8c1726f267ce24b773f04c7d161c62f6fbc05fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8c1726f267ce24b773f04c7d161c62f6fbc05fb/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e17518f65ea7b9af90e91f15784a485a3f4a6598", "url": "https://api.github.com/repos/rust-lang/rust/commits/e17518f65ea7b9af90e91f15784a485a3f4a6598", "html_url": "https://github.com/rust-lang/rust/commit/e17518f65ea7b9af90e91f15784a485a3f4a6598"}], "stats": {"total": 109, "additions": 51, "deletions": 58}, "files": [{"sha": "b84fa7d581f489762b904844f970c94bf6692998", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 42, "deletions": 54, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/b8c1726f267ce24b773f04c7d161c62f6fbc05fb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c1726f267ce24b773f04c7d161c62f6fbc05fb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b8c1726f267ce24b773f04c7d161c62f6fbc05fb", "patch": "@@ -3016,6 +3016,22 @@ fn item_trait(\n     // Trait documentation\n     document(w, cx, it)?;\n \n+    fn write_small_section_header(\n+        w: &mut fmt::Formatter,\n+        id: &str,\n+        title: &str,\n+        extra_content: &str,\n+    ) -> fmt::Result {\n+        write!(w, \"\n+            <h2 id='{0}' class='small-section-header'>\\\n+              {1}<a href='#{0}' class='anchor'></a>\\\n+            </h2>{2}\", id, title, extra_content)\n+    }\n+\n+    fn write_loading_content(w: &mut fmt::Formatter, extra_content: &str) -> fmt::Result {\n+        write!(w, \"{}<span class='loading-content'>Loading content...</span>\", extra_content)\n+    }\n+\n     fn trait_item(w: &mut fmt::Formatter, cx: &Context, m: &clean::Item, t: &clean::Item)\n                   -> fmt::Result {\n         let name = m.name.as_ref().unwrap();\n@@ -3036,74 +3052,45 @@ fn item_trait(\n     }\n \n     if !types.is_empty() {\n-        write!(w, \"\n-            <h2 id='associated-types' class='small-section-header'>\n-              Associated Types<a href='#associated-types' class='anchor'></a>\n-            </h2>\n-            <div class='methods'>\n-        \")?;\n+        write_small_section_header(w, \"associated-types\", \"Associated Types\",\n+                                   \"<div class='methods'>\")?;\n         for t in &types {\n             trait_item(w, cx, *t, it)?;\n         }\n-        write!(w, \"</div>\")?;\n+        write_loading_content(w, \"</div>\")?;\n     }\n \n     if !consts.is_empty() {\n-        write!(w, \"\n-            <h2 id='associated-const' class='small-section-header'>\n-              Associated Constants<a href='#associated-const' class='anchor'></a>\n-            </h2>\n-            <div class='methods'>\n-        \")?;\n+        write_small_section_header(w, \"associated-const\", \"Associated Constants\",\n+                                   \"<div class='methods'>\")?;\n         for t in &consts {\n             trait_item(w, cx, *t, it)?;\n         }\n-        write!(w, \"</div>\")?;\n+        write_loading_content(w, \"</div>\")?;\n     }\n \n     // Output the documentation for each function individually\n     if !required.is_empty() {\n-        write!(w, \"\n-            <h2 id='required-methods' class='small-section-header'>\n-              Required Methods<a href='#required-methods' class='anchor'></a>\n-            </h2>\n-            <div class='methods'>\n-        \")?;\n+        write_small_section_header(w, \"required-methods\", \"Required methods\",\n+                                   \"<div class='methods'>\")?;\n         for m in &required {\n             trait_item(w, cx, *m, it)?;\n         }\n-        write!(w, \"</div>\")?;\n+        write_loading_content(w, \"</div>\")?;\n     }\n     if !provided.is_empty() {\n-        write!(w, \"\n-            <h2 id='provided-methods' class='small-section-header'>\n-              Provided Methods<a href='#provided-methods' class='anchor'></a>\n-            </h2>\n-            <div class='methods'>\n-        \")?;\n+        write_small_section_header(w, \"provided-methods\", \"Provided methods\",\n+                                   \"<div class='methods'>\")?;\n         for m in &provided {\n             trait_item(w, cx, *m, it)?;\n         }\n-        write!(w, \"</div>\")?;\n+        write_loading_content(w, \"</div>\")?;\n     }\n \n     // If there are methods directly on this trait object, render them here.\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)?;\n \n     let cache = cache();\n-    let impl_header = \"\\\n-        <h2 id='implementors' class='small-section-header'>\\\n-          Implementors<a href='#implementors' class='anchor'></a>\\\n-        </h2>\\\n-        <div class='item-list' id='implementors-list'>\\\n-    \";\n-\n-    let synthetic_impl_header = \"\\\n-        <h2 id='synthetic-implementors' class='small-section-header'>\\\n-          Auto implementors<a href='#synthetic-implementors' class='anchor'></a>\\\n-        </h2>\\\n-        <div class='item-list' id='synthetic-implementors-list'>\\\n-    \";\n \n     let mut synthetic_types = Vec::new();\n \n@@ -3140,11 +3127,7 @@ fn item_trait(\n         concrete.sort_by(compare_impl);\n \n         if !foreign.is_empty() {\n-            write!(w, \"\n-                <h2 id='foreign-impls' class='small-section-header'>\n-                  Implementations on Foreign Types<a href='#foreign-impls' class='anchor'></a>\n-                </h2>\n-            \")?;\n+            write_small_section_header(w, \"foreign-impls\", \"Implementations on Foreign Types\", \"\")?;\n \n             for implementor in foreign {\n                 let assoc_link = AssocItemLink::GotoSource(\n@@ -3155,33 +3138,38 @@ fn item_trait(\n                             RenderMode::Normal, implementor.impl_item.stable_since(), false,\n                             None)?;\n             }\n+            write_loading_content(w, \"\")?;\n         }\n \n-        write!(w, \"{}\", impl_header)?;\n+        write_small_section_header(w, \"implementors\", \"Implementors\",\n+                                   \"<div class='item-list' id='implementors-list'>\")?;\n         for implementor in concrete {\n             render_implementor(cx, implementor, w, &implementor_dups)?;\n         }\n-        write!(w, \"</div>\")?;\n+        write_loading_content(w, \"</div>\")?;\n \n         if t.auto {\n-            write!(w, \"{}\", synthetic_impl_header)?;\n+            write_small_section_header(w, \"synthetic-implementors\", \"Auto implementors\",\n+                                       \"<div class='item-list' id='synthetic-implementors-list'>\")?;\n             for implementor in synthetic {\n                 synthetic_types.extend(\n                     collect_paths_for_type(implementor.inner_impl().for_.clone())\n                 );\n                 render_implementor(cx, implementor, w, &implementor_dups)?;\n             }\n-            write!(w, \"</div>\")?;\n+            write_loading_content(w, \"</div>\")?;\n         }\n     } else {\n         // even without any implementations to write in, we still want the heading and list, so the\n         // implementors javascript file pulled in below has somewhere to write the impls into\n-        write!(w, \"{}\", impl_header)?;\n-        write!(w, \"</div>\")?;\n+        write_small_section_header(w, \"implementors\", \"Implementors\",\n+                                   \"<div class='item-list' id='implementors-list'>\")?;\n+        write_loading_content(w, \"</div>\")?;\n \n         if t.auto {\n-            write!(w, \"{}\", synthetic_impl_header)?;\n-            write!(w, \"</div>\")?;\n+            write_small_section_header(w, \"synthetic-implementors\", \"Auto implementors\",\n+                                       \"<div class='item-list' id='synthetic-implementors-list'>\")?;\n+            write_loading_content(w, \"</div>\")?;\n         }\n     }\n     write!(w, r#\"<script type=\"text/javascript\">window.inlined_types=new Set({});</script>\"#,"}, {"sha": "51714c35d6faa2dddb3e0266a23dbe4a846213c7", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8c1726f267ce24b773f04c7d161c62f6fbc05fb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/b8c1726f267ce24b773f04c7d161c62f6fbc05fb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=b8c1726f267ce24b773f04c7d161c62f6fbc05fb", "patch": "@@ -1961,7 +1961,7 @@ if (!DOMTokenList.prototype.remove) {\n         }\n \n         var relatedDoc;\n-        var action;\n+        var action = mode;\n         if (hasClass(toggle.parentNode, \"impl\") === false) {\n             relatedDoc = toggle.parentNode.nextElementSibling;\n             if (hasClass(relatedDoc, \"stability\")) {\n@@ -1997,7 +1997,7 @@ if (!DOMTokenList.prototype.remove) {\n             }\n \n             if ((!relatedDoc && hasClass(docblock, \"docblock\") === false) ||\n-                (pageId && relatedDoc.getElementById(pageId))) {\n+                (pageId && document.getElementById(pageId))) {\n                 return;\n             }\n \n@@ -2026,7 +2026,7 @@ if (!DOMTokenList.prototype.remove) {\n         }\n     }\n \n-    function collapser(e) {\n+    function collapser(e, collapse) {\n         // inherent impl ids are like \"impl\" or impl-<number>'.\n         // they will never be hidden by default.\n         var n = e.parentElement;\n@@ -2045,7 +2045,9 @@ if (!DOMTokenList.prototype.remove) {\n             var impl_list = document.getElementById(\"implementations-list\");\n \n             if (impl_list !== null) {\n-                onEachLazy(impl_list.getElementsByClassName(\"collapse-toggle\"), collapser);\n+                onEachLazy(impl_list.getElementsByClassName(\"collapse-toggle\"), function(e) {\n+                    collapser(e, collapse);\n+                });\n             }\n         }\n     }\n@@ -2415,6 +2417,9 @@ if (!DOMTokenList.prototype.remove) {\n     }\n \n     if (main) {\n+        onEachLazy(main.getElementsByClassName(\"loading-content\"), function(e) {\n+            e.remove();\n+        });\n         onEachLazy(main.childNodes, function(e) {\n             if (e.tagName === \"H2\" || e.tagName === \"H3\") {\n                 e.nextElementSibling.style.display = \"block\";"}]}