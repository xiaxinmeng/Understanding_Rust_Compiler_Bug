{"sha": "744a97b98c3f2722e1a43486c05203b04e499e21", "node_id": "C_kwDOAAsO6NoAKDc0NGE5N2I5OGMzZjI3MjJlMWE0MzQ4NmMwNTIwM2IwNGU0OTllMjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-01T04:16:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-01T04:16:30Z"}, "message": "Auto merge of #105095 - matthiaskrgr:rollup-9pu7vrx, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #103065 (rustdoc-json: Document and Test that args can be patterns.)\n - #104865 (Don't overwrite local changes when updating submodules)\n - #104895 (Avoid Invalid code suggested when encountering unsatisfied trait bounds in derive macro code)\n - #105063 (Rustdoc Json Tests: Don't assume that core::fmt::Debug will always have one item.)\n - #105064 (rustdoc: add comment to confusing CSS `main { min-width: 0 }`)\n - #105074 (Add Nicholas Bishop to `.mailmap`)\n - #105081 (Add a regression test for #104322)\n - #105086 (rustdoc: clean up sidebar link CSS)\n - #105091 (add Tshepang Mbambo to .mailmap)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d8639877e32145188bf1f950f630bb016250158c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8639877e32145188bf1f950f630bb016250158c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/744a97b98c3f2722e1a43486c05203b04e499e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/744a97b98c3f2722e1a43486c05203b04e499e21", "html_url": "https://github.com/rust-lang/rust/commit/744a97b98c3f2722e1a43486c05203b04e499e21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/744a97b98c3f2722e1a43486c05203b04e499e21/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dcf6add3d1c8c68ebebc28dbd5edd9806346432", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dcf6add3d1c8c68ebebc28dbd5edd9806346432", "html_url": "https://github.com/rust-lang/rust/commit/1dcf6add3d1c8c68ebebc28dbd5edd9806346432"}, {"sha": "ffb071f9069512e4d35a1ee8c76203df82f460c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffb071f9069512e4d35a1ee8c76203df82f460c3", "html_url": "https://github.com/rust-lang/rust/commit/ffb071f9069512e4d35a1ee8c76203df82f460c3"}], "stats": {"total": 217, "additions": 206, "deletions": 11}, "files": [{"sha": "022cdd0fd50c161b9c3f0c2756fa5a9cd608818f", "filename": ".mailmap", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/744a97b98c3f2722e1a43486c05203b04e499e21/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/744a97b98c3f2722e1a43486c05203b04e499e21/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=744a97b98c3f2722e1a43486c05203b04e499e21", "patch": "@@ -402,6 +402,8 @@ Nathaniel Herman <nherman@post.harvard.edu> Nathaniel Herman <nherman@college.ha\n Neil Pankey <npankey@gmail.com> <neil@wire.im>\n Ngo Iok Ui (Wu Yu Wei) <wusyong9104@gmail.com>\n Nicholas Baron <nicholas.baron.ten@gmail.com>\n+Nicholas Bishop <nbishop@nbishop.net> <nicholasbishop@gmail.com>\n+Nicholas Bishop <nbishop@nbishop.net> <nicholasbishop@google.com>\n Nicholas Nethercote <n.nethercote@gmail.com> <nnethercote@apple.com>\n Nicholas Nethercote <n.nethercote@gmail.com> <nnethercote@mozilla.com>\n Nick Platt <platt.nicholas@gmail.com>\n@@ -530,6 +532,7 @@ Tomas Koutsky <tomas@stepnivlk.net>\n Torsten Weber <TorstenWeber12@gmail.com>\n Torsten Weber <TorstenWeber12@gmail.com> <torstenweber12@gmail.com>\n Trevor Spiteri <tspiteri@ieee.org> <trevor.spiteri@um.edu.mt>\n+Tshepang Mbambo <tshepang@gmail.com>\n Ty Overby <ty@pre-alpha.com>\n Tyler Mandry <tmandry@gmail.com> <tmandry@google.com>\n Tyler Ruckinger <t.ruckinger@gmail.com>"}, {"sha": "511d51cd670fb94ff8bf013f3512e545f9ea881e", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/744a97b98c3f2722e1a43486c05203b04e499e21/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744a97b98c3f2722e1a43486c05203b04e499e21/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=744a97b98c3f2722e1a43486c05203b04e499e21", "patch": "@@ -355,6 +355,12 @@ pub fn suggest_constraining_type_params<'a>(\n         ));\n     }\n \n+    // FIXME: remove the suggestions that are from derive, as the span is not correct\n+    suggestions = suggestions\n+        .into_iter()\n+        .filter(|(span, _, _)| !span.in_derive_expansion())\n+        .collect::<Vec<_>>();\n+\n     if suggestions.len() == 1 {\n         let (span, suggestion, msg) = suggestions.pop().unwrap();\n "}, {"sha": "a3d1893afbb65d171eb8052773a757978e5f75c1", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=744a97b98c3f2722e1a43486c05203b04e499e21", "patch": "@@ -647,9 +647,10 @@ impl Build {\n         if !update(true).status().map_or(false, |status| status.success()) {\n             self.run(&mut update(false));\n         }\n-\n+        self.run(Command::new(\"git\").args(&[\"stash\", \"push\"]).current_dir(&absolute_path));\n         self.run(Command::new(\"git\").args(&[\"reset\", \"-q\", \"--hard\"]).current_dir(&absolute_path));\n-        self.run(Command::new(\"git\").args(&[\"clean\", \"-qdfx\"]).current_dir(absolute_path));\n+        self.run(Command::new(\"git\").args(&[\"clean\", \"-qdfx\"]).current_dir(&absolute_path));\n+        self.run(Command::new(\"git\").args(&[\"stash\", \"pop\"]).current_dir(absolute_path));\n     }\n \n     /// If any submodule has been initialized already, sync it unconditionally."}, {"sha": "02a51312e8f84d9a43b2948b4584e1d8509ba094", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=744a97b98c3f2722e1a43486c05203b04e499e21", "patch": "@@ -314,7 +314,7 @@ main {\n \tposition: relative;\n \tflex-grow: 1;\n \tpadding: 10px 15px 40px 45px;\n-\tmin-width: 0;\n+\tmin-width: 0; /* avoid growing beyond the size limit */\n }\n \n .source main {\n@@ -480,15 +480,11 @@ ul.block, .block li {\n \tlist-style: none;\n }\n \n-.block a,\n-.sidebar h2 a,\n-.sidebar h3 a {\n+.sidebar-elems a,\n+.sidebar > h2 a {\n \tdisplay: block;\n-\tpadding: 0.25rem;\n+\tpadding: 0.25rem; /* 4px */\n \tmargin-left: -0.25rem;\n-\n-\ttext-overflow: ellipsis;\n-\toverflow: hidden;\n }\n \n .sidebar h2 {\n@@ -522,6 +518,8 @@ ul.block, .block li {\n \n .sidebar-elems .block li a {\n \twhite-space: nowrap;\n+\ttext-overflow: ellipsis;\n+\toverflow: hidden;\n }\n \n .mobile-topbar {"}, {"sha": "1ee96b8231cd1418349c17977a645c44d2d75a2c", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=744a97b98c3f2722e1a43486c05203b04e499e21", "patch": "@@ -615,6 +615,10 @@ pub struct FunctionPointer {\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct FnDecl {\n+    /// List of argument names and their type.\n+    ///\n+    /// Note that not all names will be valid identifiers, as some of\n+    /// them may be patterns.\n     pub inputs: Vec<(String, Type)>,\n     pub output: Option<Type>,\n     pub c_variadic: bool,"}, {"sha": "32b7da0fae4e28b5afe2104eab65a7fbbbd98f5a", "filename": "src/test/rustdoc-json/fns/pattern_arg.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Ftest%2Frustdoc-json%2Ffns%2Fpattern_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Ftest%2Frustdoc-json%2Ffns%2Fpattern_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fpattern_arg.rs?ref=744a97b98c3f2722e1a43486c05203b04e499e21", "patch": "@@ -0,0 +1,7 @@\n+// @is \"$.index[*][?(@.name=='fst')].inner.decl.inputs[0][0]\" '\"(x, _)\"'\n+pub fn fst<X, Y>((x, _): (X, Y)) -> X {\n+    x\n+}\n+\n+// @is \"$.index[*][?(@.name=='drop_int')].inner.decl.inputs[0][0]\" '\"_\"'\n+pub fn drop_int(_: i32) {}"}, {"sha": "a4add43c6a1743fef3211fddf9b829162e43686b", "filename": "src/test/rustdoc-json/traits/uses_extern_trait.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Ftest%2Frustdoc-json%2Ftraits%2Fuses_extern_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Ftest%2Frustdoc-json%2Ftraits%2Fuses_extern_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftraits%2Fuses_extern_trait.rs?ref=744a97b98c3f2722e1a43486c05203b04e499e21", "patch": "@@ -3,5 +3,10 @@ pub fn drop_default<T: core::default::Default>(_x: T) {}\n \n // FIXME(adotinthevoid): Theses shouldn't be here\n // @has \"$.index[*][?(@.name=='Debug')]\"\n-// @set Debug_fmt = \"$.index[*][?(@.name=='Debug')].inner.items[*]\"\n+\n+// Debug may have several items. All we depend on here the that `fmt` is first. See\n+// https://github.com/rust-lang/rust/pull/104525#issuecomment-1331087852 for why we\n+// can't use [*].\n+\n+// @set Debug_fmt = \"$.index[*][?(@.name=='Debug')].inner.items[0]\"\n // @has \"$.index[*][?(@.name=='fmt')].id\" $Debug_fmt"}, {"sha": "0de59d005731d91b4fb86f920abe0eb29c4b1a7b", "filename": "src/test/ui/proc-macro/auxiliary/issue-104884.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-104884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-104884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-104884.rs?ref=744a97b98c3f2722e1a43486c05203b04e499e21", "patch": "@@ -0,0 +1,23 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(AddImpl)]\n+\n+pub fn derive(input: TokenStream) -> TokenStream {\n+    \"use std::cmp::Ordering;\n+\n+    impl<T> Ord for PriorityQueue<T> {\n+        fn cmp(&self, other: &Self) -> Ordering {\n+            self.0.cmp(&self.height)\n+        }\n+    }\n+    \"\n+    .parse()\n+    .unwrap()\n+}"}, {"sha": "a0d619c456644b6c1af6cb8a5f3adcbd68e2864e", "filename": "src/test/ui/proc-macro/issue-104884-trait-impl-sugg-err.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Ftest%2Fui%2Fproc-macro%2Fissue-104884-trait-impl-sugg-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Ftest%2Fui%2Fproc-macro%2Fissue-104884-trait-impl-sugg-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-104884-trait-impl-sugg-err.rs?ref=744a97b98c3f2722e1a43486c05203b04e499e21", "patch": "@@ -0,0 +1,20 @@\n+// aux-build:issue-104884.rs\n+\n+use std::collections::BinaryHeap;\n+\n+#[macro_use]\n+extern crate issue_104884;\n+\n+#[derive(PartialEq, Eq, PartialOrd, Ord)]\n+struct PriorityQueueEntry<T> {\n+    value: T,\n+}\n+\n+#[derive(PartialOrd, AddImpl)]\n+//~^ ERROR can't compare `PriorityQueue<T>` with `PriorityQueue<T>`\n+//~| ERROR the trait bound `PriorityQueue<T>: Eq` is not satisfied\n+//~| ERROR can't compare `T` with `T`\n+\n+struct PriorityQueue<T>(BinaryHeap<PriorityQueueEntry<T>>);\n+\n+fn main() {}"}, {"sha": "ac49e04e3c0a9ed21ddafd652569e9b9c48454be", "filename": "src/test/ui/proc-macro/issue-104884-trait-impl-sugg-err.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Ftest%2Fui%2Fproc-macro%2Fissue-104884-trait-impl-sugg-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Ftest%2Fui%2Fproc-macro%2Fissue-104884-trait-impl-sugg-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-104884-trait-impl-sugg-err.stderr?ref=744a97b98c3f2722e1a43486c05203b04e499e21", "patch": "@@ -0,0 +1,48 @@\n+error[E0277]: can't compare `PriorityQueue<T>` with `PriorityQueue<T>`\n+  --> $DIR/issue-104884-trait-impl-sugg-err.rs:13:10\n+   |\n+LL | #[derive(PartialOrd, AddImpl)]\n+   |          ^^^^^^^^^^ no implementation for `PriorityQueue<T> == PriorityQueue<T>`\n+   |\n+   = help: the trait `PartialEq` is not implemented for `PriorityQueue<T>`\n+note: required by a bound in `PartialOrd`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL | pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n+   |                                           ^^^^^^^^^^^^^^ required by this bound in `PartialOrd`\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: the trait bound `PriorityQueue<T>: Eq` is not satisfied\n+  --> $DIR/issue-104884-trait-impl-sugg-err.rs:13:22\n+   |\n+LL | #[derive(PartialOrd, AddImpl)]\n+   |                      ^^^^^^^ the trait `Eq` is not implemented for `PriorityQueue<T>`\n+   |\n+note: required by a bound in `Ord`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL | pub trait Ord: Eq + PartialOrd<Self> {\n+   |                ^^ required by this bound in `Ord`\n+   = note: this error originates in the derive macro `AddImpl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: can't compare `T` with `T`\n+  --> $DIR/issue-104884-trait-impl-sugg-err.rs:13:22\n+   |\n+LL | #[derive(PartialOrd, AddImpl)]\n+   |                      ^^^^^^^ no implementation for `T < T` and `T > T`\n+   |\n+note: required for `PriorityQueue<T>` to implement `PartialOrd`\n+  --> $DIR/issue-104884-trait-impl-sugg-err.rs:13:10\n+   |\n+LL | #[derive(PartialOrd, AddImpl)]\n+   |          ^^^^^^^^^^\n+note: required by a bound in `Ord`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL | pub trait Ord: Eq + PartialOrd<Self> {\n+   |                     ^^^^^^^^^^^^^^^^ required by this bound in `Ord`\n+   = note: this error originates in the derive macro `AddImpl` which comes from the expansion of the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "dcc27f1f03ae1531ca171a41582747377638513a", "filename": "src/test/ui/traits/issue-104322.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Ftest%2Fui%2Ftraits%2Fissue-104322.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744a97b98c3f2722e1a43486c05203b04e499e21/src%2Ftest%2Fui%2Ftraits%2Fissue-104322.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-104322.rs?ref=744a97b98c3f2722e1a43486c05203b04e499e21", "patch": "@@ -0,0 +1,80 @@\n+// build-pass\n+//\n+// Tests that overflows do not occur in certain situations\n+// related to generic diesel code\n+\n+use mini_diesel::*;\n+\n+pub trait HandleDelete<K> {}\n+\n+pub fn handle_delete<D, R>()\n+where\n+    R: HasTable,\n+    R::Table: HandleDelete<D> + 'static,\n+{\n+}\n+\n+impl<K, T> HandleDelete<K> for T\n+where\n+    T: Table + HasTable<Table = T> + 'static,\n+    K: 'static,\n+    &'static K: Identifiable<Table = T>,\n+    T::PrimaryKey: EqAll<<&'static K as Identifiable>::Id>,\n+    T::Query: FilterDsl<<T::PrimaryKey as EqAll<<&'static K as Identifiable>::Id>>::Output>,\n+    Filter<T::Query, <T::PrimaryKey as EqAll<<&'static K as Identifiable>::Id>>::Output>:\n+        IntoUpdateTarget<Table = T>,\n+{\n+}\n+\n+mod mini_diesel {\n+    pub trait HasTable {\n+        type Table: Table;\n+    }\n+\n+    pub trait Identifiable: HasTable {\n+        type Id;\n+    }\n+\n+    pub trait EqAll<Rhs> {\n+        type Output;\n+    }\n+\n+    pub trait IntoUpdateTarget: HasTable {\n+        type WhereClause;\n+    }\n+\n+    pub trait Query {\n+        type SqlType;\n+    }\n+\n+    pub trait AsQuery {\n+        type Query: Query;\n+    }\n+    impl<T: Query> AsQuery for T {\n+        type Query = Self;\n+    }\n+\n+    pub trait FilterDsl<Predicate> {\n+        type Output;\n+    }\n+\n+    impl<T, Predicate> FilterDsl<Predicate> for T\n+    where\n+        T: Table,\n+        T::Query: FilterDsl<Predicate>,\n+    {\n+        type Output = Filter<T::Query, Predicate>;\n+    }\n+\n+    pub trait QuerySource {\n+        type FromClause;\n+    }\n+\n+    pub trait Table: QuerySource + AsQuery + Sized {\n+        type PrimaryKey;\n+    }\n+\n+    pub type Filter<Source, Predicate> = <Source as FilterDsl<Predicate>>::Output;\n+}\n+\n+fn main() {}"}]}