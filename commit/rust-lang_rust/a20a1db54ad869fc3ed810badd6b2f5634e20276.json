{"sha": "a20a1db54ad869fc3ed810badd6b2f5634e20276", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMGExZGI1NGFkODY5ZmMzZWQ4MTBiYWRkNmIyZjU2MzRlMjAyNzY=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2016-08-06T17:48:59Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2016-08-09T03:59:56Z"}, "message": "Implement `RefCell::{try_borrow, try_borrow_mut}`", "tree": {"sha": "7e10b4d7473773a93ef66becb979ed75c5b35cd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e10b4d7473773a93ef66becb979ed75c5b35cd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a20a1db54ad869fc3ed810badd6b2f5634e20276", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXqVU9AAoJENpc3BX5vtsrhf0P/RbKuVPvoq1ywfVI8xgkYN+i\nA1VLQAxg+jNx4MPREuHcoLf/WWCiB3mIAya41UX05JnbTGLf9WrvBYII2ycwPozx\n2zaYv0P5VwA1L8Rlobk2cZeMa0yFKUrstEZjaOaXpmu/U+V8xLw0Uv8hRR5UYwTk\n3JW0l4HNTl7RzGYvFNmnG/1iwf5r1+MZR8mVwlUHmv4AMWCanhq23LuS7TuCFn3g\n7lXMa2TJM/u7biSjMv8vSDPexCvMMtOjURkfOE6Lvv/6vJSBBkwtH+1gQ2iWhRjL\neJrFeN5ZGf6MFyBGY/5NNu5+8x+vCMPXHi9IxZbPYyJ1Po23A2XBbDFRpg0clSRf\nEPhXQGJgkpIEtAKsb+TDYUnadbWz/THWqGjBh5AqmbIK8dIjR6bdiAT8lk9BcXBa\n1nZdWqJBF4mP7r2hBFwTtsl2PsOrL3zL8usLIcrYLbrEaK36xjbowbohCeqaLdgz\nvQuuhjX4TSmpZbnfVYZEyU1D0VobKQC56mNWovMkZI8PbFhslkFdg5V17HaBtcxt\nR1NcmG4e6o1FbFV3JhuWC7D3ZnBuH9X3xM4b4mhQrxTFER11oiv5PZ1Lqv7MxHxz\nzHQxFqecb8v4JbToe94qIKJnJsv3YNlsOxmsp6QmbvK2BCDASHj7IltSJQbPWKuz\nb5/1L1wSOFolMkQJq4Fn\n=VZm7\n-----END PGP SIGNATURE-----", "payload": "tree 7e10b4d7473773a93ef66becb979ed75c5b35cd3\nparent ecdd51b7bb7fd993acd2ff5dbd72209244b1e4aa\nauthor Andrew Paseltiner <apaseltiner@gmail.com> 1470505739 -0400\ncommitter Andrew Paseltiner <apaseltiner@gmail.com> 1470715196 -0400\n\nImplement `RefCell::{try_borrow, try_borrow_mut}`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a20a1db54ad869fc3ed810badd6b2f5634e20276", "html_url": "https://github.com/rust-lang/rust/commit/a20a1db54ad869fc3ed810badd6b2f5634e20276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a20a1db54ad869fc3ed810badd6b2f5634e20276/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecdd51b7bb7fd993acd2ff5dbd72209244b1e4aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecdd51b7bb7fd993acd2ff5dbd72209244b1e4aa", "html_url": "https://github.com/rust-lang/rust/commit/ecdd51b7bb7fd993acd2ff5dbd72209244b1e4aa"}], "stats": {"total": 141, "additions": 132, "deletions": 9}, "files": [{"sha": "434084d3af8653f9888fb3f41cc75c1a19f5ffd2", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 116, "deletions": 9, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/a20a1db54ad869fc3ed810badd6b2f5634e20276/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20a1db54ad869fc3ed810badd6b2f5634e20276/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=a20a1db54ad869fc3ed810badd6b2f5634e20276", "patch": "@@ -147,10 +147,13 @@\n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use default::Default;\n-use marker::{Copy, Send, Sync, Sized, Unsize};\n+use fmt::{self, Debug, Display};\n+use marker::{Copy, PhantomData, Send, Sync, Sized, Unsize};\n use ops::{Deref, DerefMut, Drop, FnOnce, CoerceUnsized};\n use option::Option;\n use option::Option::{None, Some};\n+use result::Result;\n+use result::Result::{Ok, Err};\n \n /// A mutable memory location that admits only `Copy` data.\n ///\n@@ -347,6 +350,46 @@ pub enum BorrowState {\n     Unused,\n }\n \n+/// An error returned by [`RefCell::try_borrow`](struct.RefCell.html#method.try_borrow).\n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+pub struct BorrowError<'a, T: 'a + ?Sized> {\n+    marker: PhantomData<&'a RefCell<T>>,\n+}\n+\n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+impl<'a, T: ?Sized> Debug for BorrowError<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"BorrowError\").finish()\n+    }\n+}\n+\n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+impl<'a, T: ?Sized> Display for BorrowError<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        Display::fmt(\"already mutably borrowed\", f)\n+    }\n+}\n+\n+/// An error returned by [`RefCell::try_borrow_mut`](struct.RefCell.html#method.try_borrow_mut).\n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+pub struct BorrowMutError<'a, T: 'a + ?Sized> {\n+    marker: PhantomData<&'a RefCell<T>>,\n+}\n+\n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+impl<'a, T: ?Sized> Debug for BorrowMutError<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"BorrowMutError\").finish()\n+    }\n+}\n+\n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+impl<'a, T: ?Sized> Display for BorrowMutError<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        Display::fmt(\"already borrowed\", f)\n+    }\n+}\n+\n // Values [1, MAX-1] represent the number of `Ref` active\n // (will not outgrow its range since `usize` is the size of the address space)\n type BorrowFlag = usize;\n@@ -432,7 +475,8 @@ impl<T: ?Sized> RefCell<T> {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is currently mutably borrowed.\n+    /// Panics if the value is currently mutably borrowed. For a non-panicking variant, use\n+    /// [`try_borrow`](#method.try_borrow).\n     ///\n     /// # Examples\n     ///\n@@ -463,12 +507,45 @@ impl<T: ?Sized> RefCell<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn borrow(&self) -> Ref<T> {\n+        self.try_borrow().expect(\"already mutably borrowed\")\n+    }\n+\n+    /// Immutably borrows the wrapped value, returning an error if the value is currently mutably\n+    /// borrowed.\n+    ///\n+    /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be\n+    /// taken out at the same time.\n+    ///\n+    /// This is the non-panicking variant of [`borrow`](#method.borrow).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(try_borrow)]\n+    ///\n+    /// use std::cell::RefCell;\n+    ///\n+    /// let c = RefCell::new(5);\n+    ///\n+    /// {\n+    ///     let m = c.borrow_mut();\n+    ///     assert!(c.try_borrow().is_err());\n+    /// }\n+    ///\n+    /// {\n+    ///     let m = c.borrow();\n+    ///     assert!(c.try_borrow().is_ok());\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+    #[inline]\n+    pub fn try_borrow(&self) -> Result<Ref<T>, BorrowError<T>> {\n         match BorrowRef::new(&self.borrow) {\n-            Some(b) => Ref {\n+            Some(b) => Ok(Ref {\n                 value: unsafe { &*self.value.get() },\n                 borrow: b,\n-            },\n-            None => panic!(\"RefCell<T> already mutably borrowed\"),\n+            }),\n+            None => Err(BorrowError { marker: PhantomData }),\n         }\n     }\n \n@@ -479,7 +556,8 @@ impl<T: ?Sized> RefCell<T> {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is currently borrowed.\n+    /// Panics if the value is currently borrowed. For a non-panicking variant, use\n+    /// [`try_borrow_mut`](#method.try_borrow_mut).\n     ///\n     /// # Examples\n     ///\n@@ -511,12 +589,41 @@ impl<T: ?Sized> RefCell<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn borrow_mut(&self) -> RefMut<T> {\n+        self.try_borrow_mut().expect(\"already borrowed\")\n+    }\n+\n+    /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.\n+    ///\n+    /// The borrow lasts until the returned `RefMut` exits scope. The value cannot be borrowed\n+    /// while this borrow is active.\n+    ///\n+    /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(try_borrow)]\n+    ///\n+    /// use std::cell::RefCell;\n+    ///\n+    /// let c = RefCell::new(5);\n+    ///\n+    /// {\n+    ///     let m = c.borrow();\n+    ///     assert!(c.try_borrow_mut().is_err());\n+    /// }\n+    ///\n+    /// assert!(c.try_borrow_mut().is_ok());\n+    /// ```\n+    #[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+    #[inline]\n+    pub fn try_borrow_mut(&self) -> Result<RefMut<T>, BorrowMutError<T>> {\n         match BorrowRefMut::new(&self.borrow) {\n-            Some(b) => RefMut {\n+            Some(b) => Ok(RefMut {\n                 value: unsafe { &mut *self.value.get() },\n                 borrow: b,\n-            },\n-            None => panic!(\"RefCell<T> already borrowed\"),\n+            }),\n+            None => Err(BorrowMutError { marker: PhantomData }),\n         }\n     }\n "}, {"sha": "914599271aca279044667c6ff0cb572d0a7d2ce2", "filename": "src/libstd/error.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a20a1db54ad869fc3ed810badd6b2f5634e20276/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20a1db54ad869fc3ed810badd6b2f5634e20276/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=a20a1db54ad869fc3ed810badd6b2f5634e20276", "patch": "@@ -49,6 +49,7 @@\n \n use any::TypeId;\n use boxed::Box;\n+use cell;\n use char;\n use fmt::{self, Debug, Display};\n use marker::{Send, Sync, Reflect};\n@@ -289,6 +290,20 @@ impl Error for fmt::Error {\n     }\n }\n \n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+impl<'a, T: ?Sized + Reflect> Error for cell::BorrowError<'a, T> {\n+    fn description(&self) -> &str {\n+        \"already mutably borrowed\"\n+    }\n+}\n+\n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+impl<'a, T: ?Sized + Reflect> Error for cell::BorrowMutError<'a, T> {\n+    fn description(&self) -> &str {\n+        \"already borrowed\"\n+    }\n+}\n+\n // copied from any.rs\n impl Error + 'static {\n     /// Returns true if the boxed type is the same as `T`"}, {"sha": "c6272012d66d5b13bb1010658e0c9b220b3bf85d", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a20a1db54ad869fc3ed810badd6b2f5634e20276/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20a1db54ad869fc3ed810badd6b2f5634e20276/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=a20a1db54ad869fc3ed810badd6b2f5634e20276", "patch": "@@ -269,6 +269,7 @@\n #![feature(str_utf16)]\n #![feature(test, rustc_private)]\n #![feature(thread_local)]\n+#![feature(try_borrow)]\n #![feature(try_from)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]"}]}