{"sha": "ec117c0ebd6a47a2be6fc1e96b8ccc18f10a8c50", "node_id": "C_kwDOAAsO6NoAKGVjMTE3YzBlYmQ2YTQ3YTJiZTZmYzFlOTZiOGNjYzE4ZjEwYThjNTA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-07T05:54:02Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-07T08:29:31Z"}, "message": "Rename `$passes` as `$pass` in several macros.\n\nBecause it makes more sense that way.", "tree": {"sha": "e1637311873df2306fe334240ae5e7bfd231b19d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1637311873df2306fe334240ae5e7bfd231b19d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec117c0ebd6a47a2be6fc1e96b8ccc18f10a8c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec117c0ebd6a47a2be6fc1e96b8ccc18f10a8c50", "html_url": "https://github.com/rust-lang/rust/commit/ec117c0ebd6a47a2be6fc1e96b8ccc18f10a8c50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec117c0ebd6a47a2be6fc1e96b8ccc18f10a8c50/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac1e69c9033a33e374f1dd91b3e4cd54e1c0033f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac1e69c9033a33e374f1dd91b3e4cd54e1c0033f", "html_url": "https://github.com/rust-lang/rust/commit/ac1e69c9033a33e374f1dd91b3e4cd54e1c0033f"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "00922cef38462963380b7dddd502e4fdc20bf3da", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ec117c0ebd6a47a2be6fc1e96b8ccc18f10a8c50/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec117c0ebd6a47a2be6fc1e96b8ccc18f10a8c50/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=ec117c0ebd6a47a2be6fc1e96b8ccc18f10a8c50", "patch": "@@ -81,8 +81,8 @@ impl LateLintPass<'_> for HardwiredLints {}\n \n #[macro_export]\n macro_rules! expand_combined_late_lint_pass_method {\n-    ([$($passes:ident),*], $self: ident, $name: ident, $params:tt) => ({\n-        $($self.$passes.$name $params;)*\n+    ([$($pass:ident),*], $self: ident, $name: ident, $params:tt) => ({\n+        $($self.$pass.$name $params;)*\n     })\n }\n \n@@ -97,28 +97,28 @@ macro_rules! expand_combined_late_lint_pass_methods {\n \n #[macro_export]\n macro_rules! declare_combined_late_lint_pass {\n-    ([$v:vis $name:ident, [$($passes:ident: $constructor:expr,)*]], $methods:tt) => (\n+    ([$v:vis $name:ident, [$($pass:ident: $constructor:expr,)*]], $methods:tt) => (\n         #[allow(non_snake_case)]\n         $v struct $name {\n-            $($passes: $passes,)*\n+            $($pass: $pass,)*\n         }\n \n         impl $name {\n             $v fn new() -> Self {\n                 Self {\n-                    $($passes: $constructor,)*\n+                    $($pass: $constructor,)*\n                 }\n             }\n \n             $v fn get_lints() -> LintArray {\n                 let mut lints = Vec::new();\n-                $(lints.extend_from_slice(&$passes::get_lints());)*\n+                $(lints.extend_from_slice(&$pass::get_lints());)*\n                 lints\n             }\n         }\n \n         impl<'tcx> LateLintPass<'tcx> for $name {\n-            expand_combined_late_lint_pass_methods!([$($passes),*], $methods);\n+            expand_combined_late_lint_pass_methods!([$($pass),*], $methods);\n         }\n \n         #[allow(rustc::lint_pass_impl_without_macro)]\n@@ -184,8 +184,8 @@ early_lint_methods!(declare_early_lint_pass, []);\n \n #[macro_export]\n macro_rules! expand_combined_early_lint_pass_method {\n-    ([$($passes:ident),*], $self: ident, $name: ident, $params:tt) => ({\n-        $($self.$passes.$name $params;)*\n+    ([$($pass:ident),*], $self: ident, $name: ident, $params:tt) => ({\n+        $($self.$pass.$name $params;)*\n     })\n }\n \n@@ -200,28 +200,28 @@ macro_rules! expand_combined_early_lint_pass_methods {\n \n #[macro_export]\n macro_rules! declare_combined_early_lint_pass {\n-    ([$v:vis $name:ident, [$($passes:ident: $constructor:expr,)*]], $methods:tt) => (\n+    ([$v:vis $name:ident, [$($pass:ident: $constructor:expr,)*]], $methods:tt) => (\n         #[allow(non_snake_case)]\n         $v struct $name {\n-            $($passes: $passes,)*\n+            $($pass: $pass,)*\n         }\n \n         impl $name {\n             $v fn new() -> Self {\n                 Self {\n-                    $($passes: $constructor,)*\n+                    $($pass: $constructor,)*\n                 }\n             }\n \n             $v fn get_lints() -> LintArray {\n                 let mut lints = Vec::new();\n-                $(lints.extend_from_slice(&$passes::get_lints());)*\n+                $(lints.extend_from_slice(&$pass::get_lints());)*\n                 lints\n             }\n         }\n \n         impl EarlyLintPass for $name {\n-            expand_combined_early_lint_pass_methods!([$($passes),*], $methods);\n+            expand_combined_early_lint_pass_methods!([$($pass),*], $methods);\n         }\n \n         #[allow(rustc::lint_pass_impl_without_macro)]"}]}