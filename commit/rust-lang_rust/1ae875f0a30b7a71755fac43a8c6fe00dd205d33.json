{"sha": "1ae875f0a30b7a71755fac43a8c6fe00dd205d33", "node_id": "C_kwDOAAsO6NoAKDFhZTg3NWYwYTMwYjdhNzE3NTVmYWM0M2E4YzZmZTAwZGQyMDVkMzM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-02-14T13:22:25Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-02-18T17:28:17Z"}, "message": "Improve code readability", "tree": {"sha": "18cf78af41ed82cad529af5338b5f87d7cc44dbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18cf78af41ed82cad529af5338b5f87d7cc44dbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ae875f0a30b7a71755fac43a8c6fe00dd205d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae875f0a30b7a71755fac43a8c6fe00dd205d33", "html_url": "https://github.com/rust-lang/rust/commit/1ae875f0a30b7a71755fac43a8c6fe00dd205d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ae875f0a30b7a71755fac43a8c6fe00dd205d33/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3adc0812542e6c9b13c78b85407dcc9d54885e0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3adc0812542e6c9b13c78b85407dcc9d54885e0e", "html_url": "https://github.com/rust-lang/rust/commit/3adc0812542e6c9b13c78b85407dcc9d54885e0e"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "d5e9010eb4ed98682e08976810fd35edad3fd0a6", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1ae875f0a30b7a71755fac43a8c6fe00dd205d33/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae875f0a30b7a71755fac43a8c6fe00dd205d33/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=1ae875f0a30b7a71755fac43a8c6fe00dd205d33", "patch": "@@ -38,7 +38,7 @@ impl JsonRenderer<'_> {\n                     Some(UrlFragment::UserWritten(_)) | None => *page_id,\n                 };\n \n-                (link.clone(), id_from_item_inner(id.into(), self.tcx, None, None))\n+                (link.clone(), id_from_item_default(id.into(), self.tcx))\n             })\n             .collect();\n         let docs = item.attrs.collapsed_doc_value();\n@@ -108,7 +108,7 @@ impl JsonRenderer<'_> {\n             Some(ty::Visibility::Public) => Visibility::Public,\n             Some(ty::Visibility::Restricted(did)) if did.is_crate_root() => Visibility::Crate,\n             Some(ty::Visibility::Restricted(did)) => Visibility::Restricted {\n-                parent: id_from_item_inner(did.into(), self.tcx, None, None),\n+                parent: id_from_item_default(did.into(), self.tcx),\n                 path: self.tcx.def_path(did).to_string_no_crate_verbose(),\n             },\n         }\n@@ -205,14 +205,25 @@ impl FromWithTcx<clean::TypeBindingKind> for TypeBindingKind {\n     }\n }\n \n+#[inline]\n+pub(crate) fn id_from_item_default(item_id: ItemId, tcx: TyCtxt<'_>) -> Id {\n+    id_from_item_inner(item_id, tcx, None, None)\n+}\n+\n /// It generates an ID as follows:\n ///\n-/// `CRATE_ID:ITEM_ID[:NAME_ID]` (if there is no name, NAME_ID is not generated).\n+/// `CRATE_ID:ITEM_ID[:NAME_ID][-EXTRA]`:\n+///   * If there is no `name`, `NAME_ID` is not generated.\n+///   * If there is no `extra`, `EXTRA` is not generated.\n+///\n+/// * `name` is the item's name if available (it's not for impl blocks for example).\n+/// * `extra` is used for reexports: it contains the ID of the reexported item. It is used to allow\n+///   to have items with the same name but different types to both appear in the generated JSON.\n pub(crate) fn id_from_item_inner(\n     item_id: ItemId,\n     tcx: TyCtxt<'_>,\n-    extra: Option<&Id>,\n     name: Option<Symbol>,\n+    extra: Option<&Id>,\n ) -> Id {\n     struct DisplayDefId<'a, 'b>(DefId, TyCtxt<'a>, Option<&'b Id>, Option<Symbol>);\n \n@@ -275,9 +286,9 @@ pub(crate) fn id_from_item(item: &clean::Item, tcx: TyCtxt<'_>) -> Id {\n         clean::ItemKind::ImportItem(ref import) => {\n             let extra =\n                 import.source.did.map(ItemId::from).map(|i| id_from_item_inner(i, tcx, None, None));\n-            id_from_item_inner(item.item_id, tcx, extra.as_ref(), item.name)\n+            id_from_item_inner(item.item_id, tcx, item.name, extra.as_ref())\n         }\n-        _ => id_from_item_inner(item.item_id, tcx, None, item.name),\n+        _ => id_from_item_inner(item.item_id, tcx, item.name, None),\n     }\n }\n \n@@ -551,7 +562,7 @@ impl FromWithTcx<clean::Path> for Path {\n     fn from_tcx(path: clean::Path, tcx: TyCtxt<'_>) -> Path {\n         Path {\n             name: path.whole_name(),\n-            id: id_from_item_inner(path.def_id().into(), tcx, None, None),\n+            id: id_from_item_default(path.def_id().into(), tcx),\n             args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n         }\n     }\n@@ -728,7 +739,7 @@ impl FromWithTcx<clean::Import> for Import {\n         Import {\n             source: import.source.path.whole_name(),\n             name,\n-            id: import.source.did.map(ItemId::from).map(|i| id_from_item_inner(i, tcx, None, None)),\n+            id: import.source.did.map(ItemId::from).map(|i| id_from_item_default(i, tcx)),\n             glob,\n         }\n     }"}, {"sha": "08bceb59cfde683c686bae3e66eb7b6baaf2872f", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ae875f0a30b7a71755fac43a8c6fe00dd205d33/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae875f0a30b7a71755fac43a8c6fe00dd205d33/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=1ae875f0a30b7a71755fac43a8c6fe00dd205d33", "patch": "@@ -28,7 +28,7 @@ use crate::docfs::PathError;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n use crate::formats::FormatRenderer;\n-use crate::json::conversions::{id_from_item, id_from_item_inner, IntoWithTcx};\n+use crate::json::conversions::{id_from_item, id_from_item_default, IntoWithTcx};\n use crate::{clean, try_err};\n \n #[derive(Clone)]\n@@ -243,7 +243,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 .chain(&self.cache.external_paths)\n                 .map(|(&k, &(ref path, kind))| {\n                     (\n-                        id_from_item_inner(k.into(), self.tcx, None, None),\n+                        id_from_item_default(k.into(), self.tcx),\n                         types::ItemSummary {\n                             crate_id: k.krate.as_u32(),\n                             path: path.iter().map(|s| s.to_string()).collect(),"}]}