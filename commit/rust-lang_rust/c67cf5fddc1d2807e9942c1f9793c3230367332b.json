{"sha": "c67cf5fddc1d2807e9942c1f9793c3230367332b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2N2NmNWZkZGMxZDI4MDdlOTk0MmMxZjk3OTNjMzIzMDM2NzMzMmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-15T12:13:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-15T12:13:27Z"}, "message": "Auto merge of #41316 - suchithjn225:issue-41272, r=eddyb\n\nDo not desugar if-let-else to match arm guards\n\nFixes #41272\nChanged the desugaring code\n\n**Before**\n```rust\nmatch <sub_expr> {\n     <pat> => <body>,\n     [_ if <else_opt_if_cond> => <else_opt_if_body>,]\n     _ => [<else_opt> | ()]\n}\n```\n\n**After**\n```rust\nmatch <sub_expr> {\n    <pat> => <body>,\n     _       => [<else_opt> | ()]\n}\n```\nWith this fix, it doesn't cause E0301", "tree": {"sha": "47e19bda06f63dda3841c82d74f60cfa9ae8859f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47e19bda06f63dda3841c82d74f60cfa9ae8859f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c67cf5fddc1d2807e9942c1f9793c3230367332b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c67cf5fddc1d2807e9942c1f9793c3230367332b", "html_url": "https://github.com/rust-lang/rust/commit/c67cf5fddc1d2807e9942c1f9793c3230367332b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c67cf5fddc1d2807e9942c1f9793c3230367332b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f13a3b540ab6024665322d716e487c800645f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f13a3b540ab6024665322d716e487c800645f24", "html_url": "https://github.com/rust-lang/rust/commit/5f13a3b540ab6024665322d716e487c800645f24"}, {"sha": "5649b3796fa3f8b32116f13e81b44361169ec686", "url": "https://api.github.com/repos/rust-lang/rust/commits/5649b3796fa3f8b32116f13e81b44361169ec686", "html_url": "https://github.com/rust-lang/rust/commit/5649b3796fa3f8b32116f13e81b44361169ec686"}], "stats": {"total": 125, "additions": 38, "deletions": 87}, "files": [{"sha": "b7aafa0a9ab0b06b1c082ee795ab51c5a0791bf5", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 9, "deletions": 87, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/c67cf5fddc1d2807e9942c1f9793c3230367332b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67cf5fddc1d2807e9942c1f9793c3230367332b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c67cf5fddc1d2807e9942c1f9793c3230367332b", "patch": "@@ -2041,7 +2041,6 @@ impl<'a> LoweringContext<'a> {\n                 //\n                 //   match <sub_expr> {\n                 //     <pat> => <body>,\n-                //     [_ if <else_opt_if_cond> => <else_opt_if_body>,]\n                 //     _ => [<else_opt> | ()]\n                 //   }\n \n@@ -2055,93 +2054,16 @@ impl<'a> LoweringContext<'a> {\n                     arms.push(self.arm(hir_vec![pat], body_expr));\n                 }\n \n-                // `[_ if <else_opt_if_cond> => <else_opt_if_body>,]`\n-                // `_ => [<else_opt> | ()]`\n+                // _ => [<else_opt>|()]\n                 {\n-                    let mut current: Option<&Expr> = else_opt.as_ref().map(|p| &**p);\n-                    let mut else_exprs: Vec<Option<&Expr>> = vec![current];\n-\n-                    // First, we traverse the AST and recursively collect all\n-                    // `else` branches into else_exprs, e.g.:\n-                    //\n-                    // if let Some(_) = x {\n-                    //    ...\n-                    // } else if ... {  // Expr1\n-                    //    ...\n-                    // } else if ... {  // Expr2\n-                    //    ...\n-                    // } else {         // Expr3\n-                    //    ...\n-                    // }\n-                    //\n-                    // ... results in else_exprs = [Some(&Expr1),\n-                    //                              Some(&Expr2),\n-                    //                              Some(&Expr3)]\n-                    //\n-                    // Because there also the case there is no `else`, these\n-                    // entries can also be `None`, as in:\n-                    //\n-                    // if let Some(_) = x {\n-                    //    ...\n-                    // } else if ... {  // Expr1\n-                    //    ...\n-                    // } else if ... {  // Expr2\n-                    //    ...\n-                    // }\n-                    //\n-                    // ... results in else_exprs = [Some(&Expr1),\n-                    //                              Some(&Expr2),\n-                    //                              None]\n-                    //\n-                    // The last entry in this list is always translated into\n-                    // the final \"unguard\" wildcard arm of the `match`. In the\n-                    // case of a `None`, it becomes `_ => ()`.\n-                    loop {\n-                        if let Some(e) = current {\n-                            // There is an else branch at this level\n-                            if let ExprKind::If(_, _, ref else_opt) = e.node {\n-                                // The else branch is again an if-expr\n-                                current = else_opt.as_ref().map(|p| &**p);\n-                                else_exprs.push(current);\n-                            } else {\n-                                // The last item in the list is not an if-expr,\n-                                // stop here\n-                                break\n-                             }\n-                        } else {\n-                            // We have no more else branch\n-                            break\n-                         }\n-                    }\n-\n-                    // Now translate the list of nested else-branches into the\n-                    // arms of the match statement.\n-                    for else_expr in else_exprs {\n-                        if let Some(else_expr) = else_expr {\n-                            let (guard, body) = if let ExprKind::If(ref cond,\n-                                                                    ref then,\n-                                                                    _) = else_expr.node {\n-                                let then = self.lower_block(then, false);\n-                                (Some(cond),\n-                                 self.expr_block(then, ThinVec::new()))\n-                            } else {\n-                                (None,\n-                                 self.lower_expr(else_expr))\n-                            };\n-\n-                            arms.push(hir::Arm {\n-                                attrs: hir_vec![],\n-                                pats: hir_vec![self.pat_wild(e.span)],\n-                                guard: guard.map(|e| P(self.lower_expr(e))),\n-                                body: P(body),\n-                            });\n-                        } else {\n-                            // There was no else-branch, push a noop\n-                            let pat_under = self.pat_wild(e.span);\n-                            let unit = self.expr_tuple(e.span, hir_vec![]);\n-                            arms.push(self.arm(hir_vec![pat_under], unit));\n-                        }\n-                    }\n+                    let wildcard_arm: Option<&Expr> = else_opt.as_ref().map(|p| &**p);\n+                    let wildcard_pattern = self.pat_wild(e.span);\n+                    let body = if let Some(else_expr) = wildcard_arm {\n+                        P(self.lower_expr(else_expr))\n+                    } else {\n+                        self.expr_tuple(e.span, hir_vec![])\n+                    };\n+                    arms.push(self.arm(hir_vec![wildcard_pattern], body));\n                 }\n \n                 let contains_else_clause = else_opt.is_some();"}, {"sha": "d6a0034690af8a4df9ff9d225d85eace8cb557ab", "filename": "src/test/run-pass/issue-41272.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c67cf5fddc1d2807e9942c1f9793c3230367332b/src%2Ftest%2Frun-pass%2Fissue-41272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67cf5fddc1d2807e9942c1f9793c3230367332b/src%2Ftest%2Frun-pass%2Fissue-41272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-41272.rs?ref=c67cf5fddc1d2807e9942c1f9793c3230367332b", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn bar(&mut self) -> bool { true }\n+}\n+\n+fn error(foo: &mut Foo) {\n+    if let Some(_) = Some(true) {\n+    } else if foo.bar() {}\n+}\n+\n+fn ok(foo: &mut Foo) {\n+    if let Some(_) = Some(true) {\n+    } else {\n+        if foo.bar() {}\n+    }\n+}\n+\n+fn main() {}"}]}