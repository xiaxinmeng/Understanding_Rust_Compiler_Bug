{"sha": "c9dc44be24c58ff13ce46416c4b97ab5c1bd8429", "node_id": "C_kwDOAAsO6NoAKGM5ZGM0NGJlMjRjNThmZjEzY2U0NjQxNmM0Yjk3YWI1YzFiZDg0Mjk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-03T00:09:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-03T00:09:10Z"}, "message": "Rollup merge of #93663 - sunfishcode:sunfishcode/as-raw-name, r=joshtriplett\n\nRename `BorrowedFd::borrow_raw_fd` to `BorrowedFd::borrow_raw`.\n\nAlso, rename `BorrowedHandle::borrow_raw_handle` and\n`BorrowedSocket::borrow_raw_socket` to `BorrowedHandle::borrow_raw` and\n`BorrowedSocket::borrow_raw`.\n\nThis is just a minor rename to reduce redundancy in the user code calling\nthese functions, and to eliminate an inessential difference between\n`BorrowedFd` code and `BorrowedHandle`/`BorrowedSocket` code.\n\nWhile here, add a simple test exercising `BorrowedFd::borrow_raw_fd`.\n\nr? ``````@joshtriplett``````", "tree": {"sha": "1dd60f81224a4504b7476e88cef557f32b69ea14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dd60f81224a4504b7476e88cef557f32b69ea14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIAcmCRBK7hj4Ov3rIwAA0yQIAE+XUS93jPOcIyesv3ED3vQi\nP3mCucNjsv7vhAh3+ITjlYH/arSTJJq6yiAbCs8Mz+J01lz6xbp/BQLkl8l8St0I\nJzlS7Uou1uoK3S9DxT8SVzkI/cuTeAZuT9DwSjJUL6g8wyYtCFlqTL1YAK5rKbm4\nY7NQqidtmilgGQqCW7lqwf8rqSlgqcp8HLz6YD5zado+7YVukKnioKCOhIcao1kw\nviupm3BJ1uf4U32m4qlFp/j78jpzGxOHA8rGs8b1O0402lR+taZnbqcg365obZQ3\nqVv+xGS40uj8wok3ZAnJbJBVq71DbYq7hMCIS6yRsBUt75MhKjBV8D/tASPohDI=\n=YaAH\n-----END PGP SIGNATURE-----\n", "payload": "tree 1dd60f81224a4504b7476e88cef557f32b69ea14\nparent bc1a8905d62f61f08a1657e5ad77d54b2977b8cc\nparent 7d603dc1b2330713a8739b933ec4fc564ee1127c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646266150 +0100\ncommitter GitHub <noreply@github.com> 1646266150 +0100\n\nRollup merge of #93663 - sunfishcode:sunfishcode/as-raw-name, r=joshtriplett\n\nRename `BorrowedFd::borrow_raw_fd` to `BorrowedFd::borrow_raw`.\n\nAlso, rename `BorrowedHandle::borrow_raw_handle` and\n`BorrowedSocket::borrow_raw_socket` to `BorrowedHandle::borrow_raw` and\n`BorrowedSocket::borrow_raw`.\n\nThis is just a minor rename to reduce redundancy in the user code calling\nthese functions, and to eliminate an inessential difference between\n`BorrowedFd` code and `BorrowedHandle`/`BorrowedSocket` code.\n\nWhile here, add a simple test exercising `BorrowedFd::borrow_raw_fd`.\n\nr? ``````@joshtriplett``````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429", "html_url": "https://github.com/rust-lang/rust/commit/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc1a8905d62f61f08a1657e5ad77d54b2977b8cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1a8905d62f61f08a1657e5ad77d54b2977b8cc", "html_url": "https://github.com/rust-lang/rust/commit/bc1a8905d62f61f08a1657e5ad77d54b2977b8cc"}, {"sha": "7d603dc1b2330713a8739b933ec4fc564ee1127c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d603dc1b2330713a8739b933ec4fc564ee1127c", "html_url": "https://github.com/rust-lang/rust/commit/7d603dc1b2330713a8739b933ec4fc564ee1127c"}], "stats": {"total": 87, "additions": 62, "deletions": 25}, "files": [{"sha": "13bb079194fbe06d1ecec28b5a14dfa28f0f2c10", "filename": "library/std/src/os/fd/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fmod.rs?ref=c9dc44be24c58ff13ce46416c4b97ab5c1bd8429", "patch": "@@ -11,3 +11,6 @@ pub mod owned;\n \n // Implementations for `AsRawFd` etc. for network types.\n mod net;\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "807b057234ac1e3be37f786349bf2a6c8c5f7033", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=c9dc44be24c58ff13ce46416c4b97ab5c1bd8429", "patch": "@@ -66,7 +66,7 @@ impl BorrowedFd<'_> {\n     /// the returned `BorrowedFd`, and it must not have the value `-1`.\n     #[inline]\n     #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-    pub unsafe fn borrow_raw_fd(fd: RawFd) -> Self {\n+    pub unsafe fn borrow_raw(fd: RawFd) -> Self {\n         assert_ne!(fd, u32::MAX as RawFd);\n         // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n         unsafe { Self { fd, _phantom: PhantomData } }\n@@ -235,7 +235,7 @@ impl AsFd for OwnedFd {\n         // Safety: `OwnedFd` and `BorrowedFd` have the same validity\n         // invariants, and the `BorrowdFd` is bounded by the lifetime\n         // of `&self`.\n-        unsafe { BorrowedFd::borrow_raw_fd(self.as_raw_fd()) }\n+        unsafe { BorrowedFd::borrow_raw(self.as_raw_fd()) }\n     }\n }\n "}, {"sha": "26ef93e3d7110a1f5d9020fd95ef69597b175534", "filename": "library/std/src/os/fd/tests.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library%2Fstd%2Fsrc%2Fos%2Ffd%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library%2Fstd%2Fsrc%2Fos%2Ffd%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Ftests.rs?ref=c9dc44be24c58ff13ce46416c4b97ab5c1bd8429", "patch": "@@ -0,0 +1,34 @@\n+#[cfg(any(unix, target_os = \"wasi\"))]\n+#[test]\n+fn test_raw_fd() {\n+    #[cfg(unix)]\n+    use crate::os::unix::io::{AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, RawFd};\n+    #[cfg(target_os = \"wasi\")]\n+    use crate::os::wasi::io::{AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, RawFd};\n+\n+    let raw_fd: RawFd = crate::io::stdin().as_raw_fd();\n+\n+    let stdin_as_file = unsafe { crate::fs::File::from_raw_fd(raw_fd) };\n+    assert_eq!(stdin_as_file.as_raw_fd(), raw_fd);\n+    assert_eq!(unsafe { BorrowedFd::borrow_raw(raw_fd).as_raw_fd() }, raw_fd);\n+    assert_eq!(stdin_as_file.into_raw_fd(), 0);\n+}\n+\n+#[cfg(any(unix, target_os = \"wasi\"))]\n+#[test]\n+fn test_fd() {\n+    #[cfg(unix)]\n+    use crate::os::unix::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n+    #[cfg(target_os = \"wasi\")]\n+    use crate::os::wasi::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n+\n+    let stdin = crate::io::stdin();\n+    let fd: BorrowedFd<'_> = stdin.as_fd();\n+    let raw_fd: RawFd = fd.as_raw_fd();\n+    let owned_fd: OwnedFd = unsafe { OwnedFd::from_raw_fd(raw_fd) };\n+\n+    let stdin_as_file = crate::fs::File::from(owned_fd);\n+\n+    assert_eq!(stdin_as_file.as_fd().as_raw_fd(), raw_fd);\n+    assert_eq!(Into::<OwnedFd>::into(stdin_as_file).into_raw_fd(), raw_fd);\n+}"}, {"sha": "842a15ae1bfc02764efee9744599fb89e3c5bfcc", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=c9dc44be24c58ff13ce46416c4b97ab5c1bd8429", "patch": "@@ -135,7 +135,7 @@ impl BorrowedHandle<'_> {\n     /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]\n     #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-    pub unsafe fn borrow_raw_handle(handle: RawHandle) -> Self {\n+    pub unsafe fn borrow_raw(handle: RawHandle) -> Self {\n         Self { handle, _phantom: PhantomData }\n     }\n }\n@@ -349,7 +349,7 @@ impl AsHandle for OwnedHandle {\n         // Safety: `OwnedHandle` and `BorrowedHandle` have the same validity\n         // invariants, and the `BorrowdHandle` is bounded by the lifetime\n         // of `&self`.\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n@@ -377,49 +377,49 @@ impl From<OwnedHandle> for fs::File {\n impl AsHandle for crate::io::Stdin {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n impl<'a> AsHandle for crate::io::StdinLock<'a> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n impl AsHandle for crate::io::Stdout {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n impl<'a> AsHandle for crate::io::StdoutLock<'a> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n impl AsHandle for crate::io::Stderr {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n impl<'a> AsHandle for crate::io::StderrLock<'a> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n impl AsHandle for crate::process::ChildStdin {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n@@ -433,7 +433,7 @@ impl From<crate::process::ChildStdin> for OwnedHandle {\n impl AsHandle for crate::process::ChildStdout {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n@@ -447,7 +447,7 @@ impl From<crate::process::ChildStdout> for OwnedHandle {\n impl AsHandle for crate::process::ChildStderr {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n@@ -461,7 +461,7 @@ impl From<crate::process::ChildStderr> for OwnedHandle {\n impl<T> AsHandle for crate::thread::JoinHandle<T> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n "}, {"sha": "a695a4106e81004f8cd6e912fdf5604088e0f28d", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=c9dc44be24c58ff13ce46416c4b97ab5c1bd8429", "patch": "@@ -71,7 +71,7 @@ impl BorrowedSocket<'_> {\n     /// `INVALID_SOCKET`.\n     #[inline]\n     #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-    pub unsafe fn borrow_raw_socket(socket: RawSocket) -> Self {\n+    pub unsafe fn borrow_raw(socket: RawSocket) -> Self {\n         debug_assert_ne!(socket, c::INVALID_SOCKET as RawSocket);\n         Self { socket, _phantom: PhantomData }\n     }\n@@ -243,14 +243,14 @@ impl AsSocket for OwnedSocket {\n         // Safety: `OwnedSocket` and `BorrowedSocket` have the same validity\n         // invariants, and the `BorrowdSocket` is bounded by the lifetime\n         // of `&self`.\n-        unsafe { BorrowedSocket::borrow_raw_socket(self.as_raw_socket()) }\n+        unsafe { BorrowedSocket::borrow_raw(self.as_raw_socket()) }\n     }\n }\n \n impl AsSocket for crate::net::TcpStream {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n-        unsafe { BorrowedSocket::borrow_raw_socket(self.as_raw_socket()) }\n+        unsafe { BorrowedSocket::borrow_raw(self.as_raw_socket()) }\n     }\n }\n \n@@ -271,7 +271,7 @@ impl From<OwnedSocket> for crate::net::TcpStream {\n impl AsSocket for crate::net::TcpListener {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n-        unsafe { BorrowedSocket::borrow_raw_socket(self.as_raw_socket()) }\n+        unsafe { BorrowedSocket::borrow_raw(self.as_raw_socket()) }\n     }\n }\n \n@@ -292,7 +292,7 @@ impl From<OwnedSocket> for crate::net::TcpListener {\n impl AsSocket for crate::net::UdpSocket {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n-        unsafe { BorrowedSocket::borrow_raw_socket(self.as_raw_socket()) }\n+        unsafe { BorrowedSocket::borrow_raw(self.as_raw_socket()) }\n     }\n }\n "}, {"sha": "e4d83ba0ffd1335e3cefd3c6c9edfe16f1091685", "filename": "library/std/src/sys/unix/stdio.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc44be24c58ff13ce46416c4b97ab5c1bd8429/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs?ref=c9dc44be24c58ff13ce46416c4b97ab5c1bd8429", "patch": "@@ -96,46 +96,46 @@ pub fn panic_output() -> Option<impl io::Write> {\n impl AsFd for io::Stdin {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw_fd(libc::STDIN_FILENO) }\n+        unsafe { BorrowedFd::borrow_raw(libc::STDIN_FILENO) }\n     }\n }\n \n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n impl<'a> AsFd for io::StdinLock<'a> {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw_fd(libc::STDIN_FILENO) }\n+        unsafe { BorrowedFd::borrow_raw(libc::STDIN_FILENO) }\n     }\n }\n \n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n impl AsFd for io::Stdout {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw_fd(libc::STDOUT_FILENO) }\n+        unsafe { BorrowedFd::borrow_raw(libc::STDOUT_FILENO) }\n     }\n }\n \n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n impl<'a> AsFd for io::StdoutLock<'a> {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw_fd(libc::STDOUT_FILENO) }\n+        unsafe { BorrowedFd::borrow_raw(libc::STDOUT_FILENO) }\n     }\n }\n \n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n impl AsFd for io::Stderr {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw_fd(libc::STDERR_FILENO) }\n+        unsafe { BorrowedFd::borrow_raw(libc::STDERR_FILENO) }\n     }\n }\n \n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n impl<'a> AsFd for io::StderrLock<'a> {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw_fd(libc::STDERR_FILENO) }\n+        unsafe { BorrowedFd::borrow_raw(libc::STDERR_FILENO) }\n     }\n }"}]}