{"sha": "d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4", "node_id": "C_kwDOAAsO6NoAKGQ0ZmM1YWUyNWNlYTEwNjhmYzJhM2Q5Njc2M2QzZWRlM2E2YTE0ZDQ", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2022-01-26T03:46:56Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2022-02-23T05:38:24Z"}, "message": "rustc_errors: handle `force_warn` only through `DiagnosticId::Lint`.", "tree": {"sha": "c5eb1d2eb4b4bfdb915f8dbd114fc5cf98ee6578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5eb1d2eb4b4bfdb915f8dbd114fc5cf98ee6578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4", "html_url": "https://github.com/rust-lang/rust/commit/d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02ff9e0aef03d48fdecc2d114311217010ec1d81", "url": "https://api.github.com/repos/rust-lang/rust/commits/02ff9e0aef03d48fdecc2d114311217010ec1d81", "html_url": "https://github.com/rust-lang/rust/commit/02ff9e0aef03d48fdecc2d114311217010ec1d81"}], "stats": {"total": 50, "additions": 8, "deletions": 42}, "files": [{"sha": "aec67b5e1fdf70e3e32eef7f56cdedf591009cfa", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4", "patch": "@@ -632,27 +632,15 @@ impl Handler {\n \n     /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n     ///\n-    /// The builder will be canceled if warnings cannot be emitted.\n+    /// Attempting to `.emit()` the builder will only emit if either:\n+    /// * `can_emit_warnings` is `true`\n+    /// * `is_force_warn` was set in `DiagnosticId::Lint`\n     pub fn struct_span_warn(&self, span: impl Into<MultiSpan>, msg: &str) -> DiagnosticBuilder<'_> {\n         let mut result = self.struct_warn(msg);\n         result.set_span(span);\n         result\n     }\n \n-    /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n-    ///\n-    /// This will \"force\" the warning meaning it will not be canceled even\n-    /// if warnings cannot be emitted.\n-    pub fn struct_span_force_warn(\n-        &self,\n-        span: impl Into<MultiSpan>,\n-        msg: &str,\n-    ) -> DiagnosticBuilder<'_> {\n-        let mut result = self.struct_force_warn(msg);\n-        result.set_span(span);\n-        result\n-    }\n-\n     /// Construct a builder at the `Allow` level at the given `span` and with the `msg`.\n     pub fn struct_span_allow(\n         &self,\n@@ -679,20 +667,10 @@ impl Handler {\n \n     /// Construct a builder at the `Warning` level with the `msg`.\n     ///\n-    /// The builder will be canceled if warnings cannot be emitted.\n+    /// Attempting to `.emit()` the builder will only emit if either:\n+    /// * `can_emit_warnings` is `true`\n+    /// * `is_force_warn` was set in `DiagnosticId::Lint`\n     pub fn struct_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n-        let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n-        if !self.flags.can_emit_warnings {\n-            result.cancel();\n-        }\n-        result\n-    }\n-\n-    /// Construct a builder at the `Warning` level with the `msg`.\n-    ///\n-    /// This will \"force\" a warning meaning it will not be canceled even\n-    /// if warnings cannot be emitted.\n-    pub fn struct_force_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         DiagnosticBuilder::new(self, Level::Warning, msg)\n     }\n "}, {"sha": "8e28ae3ce44c4a193e2fb2a05adc495b87234758", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4", "patch": "@@ -314,10 +314,8 @@ pub fn struct_lint_level<'s, 'd>(\n                     return;\n                 }\n             }\n-            (Level::Warn, Some(span)) => sess.struct_span_warn(span, \"\"),\n-            (Level::Warn, None) => sess.struct_warn(\"\"),\n-            (Level::ForceWarn, Some(span)) => sess.struct_span_force_warn(span, \"\"),\n-            (Level::ForceWarn, None) => sess.struct_force_warn(\"\"),\n+            (Level::Warn | Level::ForceWarn, Some(span)) => sess.struct_span_warn(span, \"\"),\n+            (Level::Warn | Level::ForceWarn, None) => sess.struct_warn(\"\"),\n             (Level::Deny | Level::Forbid, Some(span)) => {\n                 let mut builder = sess.diagnostic().struct_err_lint(\"\");\n                 builder.set_span(span);"}, {"sha": "0515c440ab8fcd67a94a8444f1933ba6fbbd54a3", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4", "patch": "@@ -306,13 +306,6 @@ impl Session {\n     pub fn struct_span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n-    pub fn struct_span_force_warn<S: Into<MultiSpan>>(\n-        &self,\n-        sp: S,\n-        msg: &str,\n-    ) -> DiagnosticBuilder<'_> {\n-        self.diagnostic().struct_span_force_warn(sp, msg)\n-    }\n     pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -324,9 +317,6 @@ impl Session {\n     pub fn struct_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_warn(msg)\n     }\n-    pub fn struct_force_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n-        self.diagnostic().struct_force_warn(msg)\n-    }\n     pub fn struct_span_allow<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_allow(sp, msg)\n     }"}]}