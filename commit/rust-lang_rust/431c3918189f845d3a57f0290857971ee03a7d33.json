{"sha": "431c3918189f845d3a57f0290857971ee03a7d33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMWMzOTE4MTg5Zjg0NWQzYTU3ZjAyOTA4NTc5NzFlZTAzYTdkMzM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-02T07:55:34Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-02T08:07:41Z"}, "message": "Fix a panic caused by while let", "tree": {"sha": "aa4d8b3001a7a14357b4eb195efcaec22acff954", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa4d8b3001a7a14357b4eb195efcaec22acff954"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/431c3918189f845d3a57f0290857971ee03a7d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/431c3918189f845d3a57f0290857971ee03a7d33", "html_url": "https://github.com/rust-lang/rust/commit/431c3918189f845d3a57f0290857971ee03a7d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/431c3918189f845d3a57f0290857971ee03a7d33/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eb08962716abc83226dfa7d3f4ac1bc48f39ba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb08962716abc83226dfa7d3f4ac1bc48f39ba0", "html_url": "https://github.com/rust-lang/rust/commit/7eb08962716abc83226dfa7d3f4ac1bc48f39ba0"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "2069a56f78f1b919ac3f5b36d192ca80dc1270df", "filename": "src/loops.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/431c3918189f845d3a57f0290857971ee03a7d33/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431c3918189f845d3a57f0290857971ee03a7d33/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=431c3918189f845d3a57f0290857971ee03a7d33", "patch": "@@ -312,7 +312,7 @@ fn is_iterable_array(ty: ty::Ty) -> bool {\n fn extract_expr_from_first_stmt(block: &Block) -> Option<&Expr> {\n     match block.expr {\n         Some(_) => None,\n-        None => match block.stmts[0].node {\n+        None if !block.stmts.is_empty() => match block.stmts[0].node {\n             StmtDecl(ref decl, _) => match decl.node {\n                 DeclLocal(ref local) => match local.init {\n                     Some(ref expr) => Some(expr),\n@@ -322,17 +322,19 @@ fn extract_expr_from_first_stmt(block: &Block) -> Option<&Expr> {\n             },\n             _ => None,\n         },\n+        _ => None,\n     }\n }\n \n /// If a block begins with an expression (with or without semicolon), return it.\n fn extract_first_expr(block: &Block) -> Option<&Expr> {\n     match block.expr {\n         Some(ref expr) => Some(expr),\n-        None => match block.stmts[0].node {\n+        None if !block.stmts.is_empty() => match block.stmts[0].node {\n             StmtExpr(ref expr, _) | StmtSemi(ref expr, _) => Some(expr),\n             _ => None,\n         },\n+        _ => None,\n     }\n }\n "}, {"sha": "eca2c7e12aecfa3053d710bdc39a8f41143b9588", "filename": "tests/compile-fail/while_loop.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/431c3918189f845d3a57f0290857971ee03a7d33/tests%2Fcompile-fail%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431c3918189f845d3a57f0290857971ee03a7d33/tests%2Fcompile-fail%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwhile_loop.rs?ref=431c3918189f845d3a57f0290857971ee03a7d33", "patch": "@@ -1,7 +1,9 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#[deny(while_let_loop)]\n+#![deny(while_let_loop)]\n+#![allow(dead_code, unused)]\n+\n fn main() {\n     let y = Some(true);\n     loop { //~ERROR\n@@ -44,3 +46,18 @@ fn main() {\n         println!(\"{}\", x);\n     }\n }\n+\n+// regression test (#360)\n+// this should not panic\n+// it's okay if further iterations of the lint\n+// cause this function to trigger it\n+fn no_panic<T>(slice: &[T]) {\n+    let mut iter = slice.iter();\n+    loop {\n+        let _ = match iter.next() {\n+            Some(ele) => ele,\n+            None => break\n+        };\n+        loop {}\n+    }\n+}"}]}