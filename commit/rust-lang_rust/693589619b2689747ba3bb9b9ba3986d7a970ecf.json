{"sha": "693589619b2689747ba3bb9b9ba3986d7a970ecf", "node_id": "C_kwDOAAsO6NoAKDY5MzU4OTYxOWIyNjg5NzQ3YmEzYmI5YjliYTM5ODZkN2E5NzBlY2Y", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-04-05T18:58:36Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-04-13T20:47:03Z"}, "message": "Add codegen tests for additional cases where noop iterators get optimized away\n\nOptimization have improved over time and now LLVM manages to optimize more\nin-place-collect noop-iterators to O(1) functions. This updates the codegen test to match.", "tree": {"sha": "fbc8a59a9bfb002066d191843e996307865f4730", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbc8a59a9bfb002066d191843e996307865f4730"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/693589619b2689747ba3bb9b9ba3986d7a970ecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/693589619b2689747ba3bb9b9ba3986d7a970ecf", "html_url": "https://github.com/rust-lang/rust/commit/693589619b2689747ba3bb9b9ba3986d7a970ecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/693589619b2689747ba3bb9b9ba3986d7a970ecf/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d13f6afeba4935499abe0c9a07426c94492c94e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d13f6afeba4935499abe0c9a07426c94492c94e", "html_url": "https://github.com/rust-lang/rust/commit/0d13f6afeba4935499abe0c9a07426c94492c94e"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "13c41f7d4a9061f3715dc4af80e15ce328d8b577", "filename": "src/test/codegen/vec-in-place.rs", "status": "modified", "additions": 63, "deletions": 4, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/693589619b2689747ba3bb9b9ba3986d7a970ecf/src%2Ftest%2Fcodegen%2Fvec-in-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693589619b2689747ba3bb9b9ba3986d7a970ecf/src%2Ftest%2Fcodegen%2Fvec-in-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-in-place.rs?ref=693589619b2689747ba3bb9b9ba3986d7a970ecf", "patch": "@@ -1,13 +1,72 @@\n+// min-llvm-version: 14.0\n // ignore-debug: the debug assertions get in the way\n-// compile-flags: -O\n+// compile-flags: -O -Z merge-functions=disabled\n #![crate_type = \"lib\"]\n \n // Ensure that trivial casts of vec elements are O(1)\n \n-// CHECK-LABEL: @vec_iterator_cast\n+pub struct Wrapper<T>(T);\n+\n+#[repr(C)]\n+pub struct Foo {\n+    a: u64,\n+    b: u64,\n+    c: u64,\n+    d: u64,\n+}\n+\n+// Going from an aggregate struct to another type currently requires Copy to\n+// enable the TrustedRandomAccess specialization. Without it optimizations do not yet\n+// reliably recognize the loops as noop for for repr(C) or non-Copy structs.\n+#[derive(Copy, Clone)]\n+pub struct Bar {\n+    a: u64,\n+    b: u64,\n+    c: u64,\n+    d: u64,\n+}\n+\n+// CHECK-LABEL: @vec_iterator_cast_primitive\n+#[no_mangle]\n+pub fn vec_iterator_cast_primitive(vec: Vec<i8>) -> Vec<u8> {\n+    // CHECK-NOT: loop\n+    // CHECK-NOT: call\n+    vec.into_iter().map(|e| e as u8).collect()\n+}\n+\n+// CHECK-LABEL: @vec_iterator_cast_wrapper\n+#[no_mangle]\n+pub fn vec_iterator_cast_wrapper(vec: Vec<u8>) -> Vec<Wrapper<u8>> {\n+    // CHECK-NOT: loop\n+    // CHECK-NOT: call\n+    vec.into_iter().map(|e| Wrapper(e)).collect()\n+}\n+\n+// CHECK-LABEL: @vec_iterator_cast_unwrap\n+#[no_mangle]\n+pub fn vec_iterator_cast_unwrap(vec: Vec<Wrapper<u8>>) -> Vec<u8> {\n+    // CHECK-NOT: loop\n+    // CHECK-NOT: call\n+    vec.into_iter().map(|e| e.0).collect()\n+}\n+\n+// CHECK-LABEL: @vec_iterator_cast_aggregate\n #[no_mangle]\n-pub fn vec_iterator_cast(vec: Vec<isize>) -> Vec<usize> {\n+pub fn vec_iterator_cast_aggregate(vec: Vec<[u64; 4]>) -> Vec<Foo> {\n     // CHECK-NOT: loop\n     // CHECK-NOT: call\n-    vec.into_iter().map(|e| e as usize).collect()\n+    vec.into_iter().map(|e| unsafe { std::mem::transmute(e) }).collect()\n+}\n+\n+// CHECK-LABEL: @vec_iterator_cast_deaggregate\n+#[no_mangle]\n+pub fn vec_iterator_cast_deaggregate(vec: Vec<Bar>) -> Vec<[u64; 4]> {\n+    // CHECK-NOT: loop\n+    // CHECK-NOT: call\n+\n+    // Safety: For the purpose of this test we assume that Bar layout matches [u64; 4].\n+    // This currently is not guaranteed for repr(Rust) types, but it happens to work here and\n+    // the UCG may add additional guarantees for homogenous types in the future that would make this\n+    // correct.\n+    vec.into_iter().map(|e| unsafe { std::mem::transmute(e) }).collect()\n }"}]}