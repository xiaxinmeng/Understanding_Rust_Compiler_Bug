{"sha": "12a95482c10f1ca9123f1685a85f627967157c2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYTk1NDgyYzEwZjFjYTkxMjNmMTY4NWE4NWY2Mjc5NjcxNTdjMmI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-04-10T14:43:00Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-04-10T14:43:00Z"}, "message": "Improve rustdoc source code a bit", "tree": {"sha": "8edd3cf76de5b20f4f7fbe00599334c2b6601a6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8edd3cf76de5b20f4f7fbe00599334c2b6601a6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12a95482c10f1ca9123f1685a85f627967157c2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12a95482c10f1ca9123f1685a85f627967157c2b", "html_url": "https://github.com/rust-lang/rust/commit/12a95482c10f1ca9123f1685a85f627967157c2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12a95482c10f1ca9123f1685a85f627967157c2b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b521f57735663de9373679cf8c6502622036bf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b521f57735663de9373679cf8c6502622036bf1", "html_url": "https://github.com/rust-lang/rust/commit/1b521f57735663de9373679cf8c6502622036bf1"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "ace24597288381b3217c3ec13c9fddcec41011fd", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/12a95482c10f1ca9123f1685a85f627967157c2b/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a95482c10f1ca9123f1685a85f627967157c2b/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=12a95482c10f1ca9123f1685a85f627967157c2b", "patch": "@@ -208,10 +208,10 @@ pub fn get_real_types(\n                             if !adds.is_empty() {\n                                 res.extend(adds);\n                             } else if !ty.is_full_generic() {\n-                                if let Some(did) = ty.def_id() {\n-                                    if let Some(kind) = cx.tcx.def_kind(did).clean(cx) {\n-                                        res.insert((ty, kind));\n-                                    }\n+                                if let Some(kind) =\n+                                    ty.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx))\n+                                {\n+                                    res.insert((ty, kind));\n                                 }\n                             }\n                         }\n@@ -226,20 +226,18 @@ pub fn get_real_types(\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     } else if !ty.is_full_generic() {\n-                        if let Some(did) = ty.def_id() {\n-                            if let Some(kind) = cx.tcx.def_kind(did).clean(cx) {\n-                                res.insert((ty.clone(), kind));\n-                            }\n+                        if let Some(kind) =\n+                            ty.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx))\n+                        {\n+                            res.insert((ty.clone(), kind));\n                         }\n                     }\n                 }\n             }\n         }\n     } else {\n-        if let Some(did) = arg.def_id() {\n-            if let Some(kind) = cx.tcx.def_kind(did).clean(cx) {\n-                res.insert((arg.clone(), kind));\n-            }\n+        if let Some(kind) = arg.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx)) {\n+            res.insert((arg.clone(), kind));\n         }\n         if let Some(gens) = arg.generics() {\n             for gen in gens.iter() {\n@@ -248,10 +246,10 @@ pub fn get_real_types(\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     }\n-                } else if let Some(did) = gen.def_id() {\n-                    if let Some(kind) = cx.tcx.def_kind(did).clean(cx) {\n-                        res.insert((gen.clone(), kind));\n-                    }\n+                } else if let Some(kind) =\n+                    gen.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx))\n+                {\n+                    res.insert((gen.clone(), kind));\n                 }\n             }\n         }\n@@ -277,10 +275,8 @@ pub fn get_all_types(\n         if !args.is_empty() {\n             all_types.extend(args);\n         } else {\n-            if let Some(did) = arg.type_.def_id() {\n-                if let Some(kind) = cx.tcx.def_kind(did).clean(cx) {\n-                    all_types.insert((arg.type_.clone(), kind));\n-                }\n+            if let Some(kind) = arg.type_.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx)) {\n+                all_types.insert((arg.type_.clone(), kind));\n             }\n         }\n     }\n@@ -289,10 +285,10 @@ pub fn get_all_types(\n         FnRetTy::Return(ref return_type) => {\n             let mut ret = get_real_types(generics, &return_type, cx, 0);\n             if ret.is_empty() {\n-                if let Some(did) = return_type.def_id() {\n-                    if let Some(kind) = cx.tcx.def_kind(did).clean(cx) {\n-                        ret.insert((return_type.clone(), kind));\n-                    }\n+                if let Some(kind) =\n+                    return_type.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx))\n+                {\n+                    ret.insert((return_type.clone(), kind));\n                 }\n             }\n             ret.into_iter().collect()"}, {"sha": "a8efb16a1d31e90abc4725ccb98f1e36ec91e534", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12a95482c10f1ca9123f1685a85f627967157c2b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a95482c10f1ca9123f1685a85f627967157c2b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=12a95482c10f1ca9123f1685a85f627967157c2b", "patch": "@@ -697,11 +697,11 @@ fn get_generics(clean_type: &clean::Type) -> Option<Vec<Generic>> {\n         let r = types\n             .iter()\n             .filter_map(|t| {\n-                if let Some(name) = get_index_type_name(t, false) {\n-                    Some(Generic { name: name.to_ascii_lowercase(), defid: t.def_id(), idx: None })\n-                } else {\n-                    None\n-                }\n+                get_index_type_name(t, false).map(|name| Generic {\n+                    name: name.to_ascii_lowercase(),\n+                    defid: t.def_id(),\n+                    idx: None,\n+                })\n             })\n             .collect::<Vec<_>>();\n         if r.is_empty() { None } else { Some(r) }"}]}