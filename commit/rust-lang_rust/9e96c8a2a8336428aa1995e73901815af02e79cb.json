{"sha": "9e96c8a2a8336428aa1995e73901815af02e79cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOTZjOGEyYTgzMzY0MjhhYTE5OTVlNzM5MDE4MTVhZjAyZTc5Y2I=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-02-05T01:47:13Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-02-10T00:14:46Z"}, "message": "Add missing From implementation, add simple mask API tests", "tree": {"sha": "f1440963cbcbb3478d4681b72c5435e17ab54f54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1440963cbcbb3478d4681b72c5435e17ab54f54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e96c8a2a8336428aa1995e73901815af02e79cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e96c8a2a8336428aa1995e73901815af02e79cb", "html_url": "https://github.com/rust-lang/rust/commit/9e96c8a2a8336428aa1995e73901815af02e79cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e96c8a2a8336428aa1995e73901815af02e79cb/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92293aff9d44c74a57f85edf9af0f1b449f20ff0", "url": "https://api.github.com/repos/rust-lang/rust/commits/92293aff9d44c74a57f85edf9af0f1b449f20ff0", "html_url": "https://github.com/rust-lang/rust/commit/92293aff9d44c74a57f85edf9af0f1b449f20ff0"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "e51052f53f2f573b42380fafa814c39428c39353", "filename": "crates/core_simd/src/masks/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e96c8a2a8336428aa1995e73901815af02e79cb/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e96c8a2a8336428aa1995e73901815af02e79cb/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs?ref=9e96c8a2a8336428aa1995e73901815af02e79cb", "patch": "@@ -59,6 +59,24 @@ macro_rules! define_opaque_mask {\n             }\n         }\n \n+        impl<const $lanes: usize> From<$inner_ty> for $name<$lanes>\n+        where\n+            BitMask<$lanes>: LanesAtMost64,\n+        {\n+            fn from(value: $inner_ty) -> Self {\n+                Self(value)\n+            }\n+        }\n+\n+        impl<const $lanes: usize> From<$name<$lanes>> for $inner_ty\n+        where\n+            BitMask<$lanes>: LanesAtMost64,\n+        {\n+            fn from(value: $name<$lanes>) -> Self {\n+                value.0\n+            }\n+        }\n+\n         impl<const $lanes: usize> Copy for $name<$lanes> where BitMask<$lanes>: LanesAtMost64 {}\n \n         impl<const $lanes: usize> Clone for $name<$lanes> where BitMask<$lanes>: LanesAtMost64 {"}, {"sha": "1ae003fc27fca0de816b5955134d0215ae65e2d9", "filename": "crates/core_simd/tests/masks.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9e96c8a2a8336428aa1995e73901815af02e79cb/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e96c8a2a8336428aa1995e73901815af02e79cb/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmasks.rs?ref=9e96c8a2a8336428aa1995e73901815af02e79cb", "patch": "@@ -0,0 +1,67 @@\n+use core_simd::{BitMask, Mask8, SimdMask8, SimdI8};\n+use core::convert::TryFrom;\n+\n+#[cfg(target_arch = \"wasm32\")]\n+use wasm_bindgen_test::*;\n+\n+#[cfg(target_arch = \"wasm32\")]\n+wasm_bindgen_test_configure!(run_in_browser);\n+\n+#[test]\n+#[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n+fn mask_format_round_trip() {\n+    let ints = SimdI8::from_array([-1, 0, 0, -1]);\n+\n+    let simd_mask = SimdMask8::try_from(ints).unwrap();\n+\n+    let bitmask = BitMask::from(simd_mask);\n+\n+    let opaque_mask = Mask8::from(bitmask);\n+\n+    let simd_mask_returned = SimdMask8::from(opaque_mask);\n+\n+    let ints_returned = SimdI8::from(simd_mask_returned);\n+\n+    assert_eq!(ints_returned, ints);\n+}\n+\n+macro_rules! test_mask_api {\n+    { $name:ident } => {\n+        #[allow(non_snake_case)]\n+        mod $name {\n+            #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n+            fn set_and_test() {\n+                let values = [true, false, false, true, false, false, true, false];\n+                let mut mask = core_simd::$name::<8>::splat(false);\n+                for (lane, value) in values.iter().copied().enumerate() {\n+                    mask.set(lane, value);\n+                }\n+                for (lane, value) in values.iter().copied().enumerate() {\n+                    assert_eq!(mask.test(lane), value);\n+                }\n+            }\n+\n+            #[test]\n+            #[should_panic]\n+            fn set_invalid_lane() {\n+                let mut mask = core_simd::$name::<8>::splat(false);\n+                mask.set(8, true);\n+                let _ = mask;\n+            }\n+\n+            #[test]\n+            #[should_panic]\n+            fn test_invalid_lane() {\n+                let mask = core_simd::$name::<8>::splat(false);\n+                let _ = mask.test(8);\n+            }\n+        }\n+    }\n+}\n+\n+mod mask_api {\n+    test_mask_api!{ Mask8 }\n+    test_mask_api!{ SimdMask8 }\n+    test_mask_api!{ BitMask }\n+}"}]}