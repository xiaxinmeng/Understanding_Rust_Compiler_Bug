{"sha": "4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "node_id": "C_kwDOAAsO6NoAKDRlN2FhZjFmNDQ4ZGQ5ODA4YTk0ZTk4ZGZmZTRjMTE3NmMzODhlMGQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-06T14:14:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-09T11:43:56Z"}, "message": "tweak names and output and bless", "tree": {"sha": "17d0725f18b8bf3770795c189322577992c80f24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17d0725f18b8bf3770795c189322577992c80f24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "html_url": "https://github.com/rust-lang/rust/commit/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac265cdc19fe99b5909410893dd1583d6cb895fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac265cdc19fe99b5909410893dd1583d6cb895fe", "html_url": "https://github.com/rust-lang/rust/commit/ac265cdc19fe99b5909410893dd1583d6cb895fe"}], "stats": {"total": 472, "additions": 241, "deletions": 231}, "files": [{"sha": "48972321a9f40e2e09c5edb8265c7d1605d241fa", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -167,7 +167,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n     }\n \n     match const_val {\n-        ConstValue::Zst => unreachable!(), // we already handles ZST above\n+        ConstValue::ZeroSized => unreachable!(), // we already handles ZST above\n         ConstValue::Scalar(x) => match x {\n             Scalar::Int(int) => {\n                 if fx.clif_type(layout.ty).is_some() {"}, {"sha": "c612634fce2a6609cd5fc9368dca9aad53163561", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -84,7 +84,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n                 let llval = bx.scalar_to_backend(x, scalar, bx.immediate_backend_type(layout));\n                 OperandValue::Immediate(llval)\n             }\n-            ConstValue::Zst => {\n+            ConstValue::ZeroSized => {\n                 let llval = bx.zst_to_backend(bx.immediate_backend_type(layout));\n                 OperandValue::Immediate(llval)\n             }"}, {"sha": "b18976302b4ffb824abb6715d2e78ed8d289d712", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -157,7 +157,7 @@ pub(super) fn op_to_const<'tcx>(\n                     \"this MPlaceTy must come from a validated constant, thus we can assume the \\\n                 alignment is correct\",\n                 );\n-                ConstValue::Zst\n+                ConstValue::ZeroSized\n             }\n         }\n     };"}, {"sha": "2288a4e7b6c784f1acf7a7b8cf53c08f755f1084", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -272,7 +272,7 @@ pub fn valtree_to_const_value<'tcx>(\n     match ty.kind() {\n         ty::FnDef(..) => {\n             assert!(valtree.unwrap_branch().is_empty());\n-            ConstValue::Zst\n+            ConstValue::ZeroSized\n         }\n         ty::Bool | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Char => match valtree {\n             ty::ValTree::Leaf(scalar_int) => ConstValue::Scalar(Scalar::Int(scalar_int)),"}, {"sha": "d11ae7b4925dfda0a7bb45a623c7e0ac3357aaba", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -709,7 +709,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 Operand::Indirect(MemPlace::from_ptr(ptr.into()))\n             }\n             ConstValue::Scalar(x) => Operand::Immediate(tag_scalar(x)?.into()),\n-            ConstValue::Zst => Operand::Immediate(Immediate::Uninit),\n+            ConstValue::ZeroSized => Operand::Immediate(Immediate::Uninit),\n             ConstValue::Slice { data, start, end } => {\n                 // We rely on mutability being set correctly in `data` to prevent writes\n                 // where none should happen."}, {"sha": "22bbe29c105559364678dea89533db364af705da", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -35,7 +35,7 @@ pub enum ConstValue<'tcx> {\n     Scalar(Scalar),\n \n     /// Only used for ZSTs.\n-    Zst,\n+    ZeroSized,\n \n     /// Used only for `&[u8]` and `&str`\n     Slice { data: ConstAllocation<'tcx>, start: usize, end: usize },\n@@ -58,7 +58,7 @@ impl<'a, 'tcx> Lift<'tcx> for ConstValue<'a> {\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<ConstValue<'tcx>> {\n         Some(match self {\n             ConstValue::Scalar(s) => ConstValue::Scalar(s),\n-            ConstValue::Zst => ConstValue::Zst,\n+            ConstValue::ZeroSized => ConstValue::ZeroSized,\n             ConstValue::Slice { data, start, end } => {\n                 ConstValue::Slice { data: tcx.lift(data)?, start, end }\n             }\n@@ -73,7 +73,7 @@ impl<'tcx> ConstValue<'tcx> {\n     #[inline]\n     pub fn try_to_scalar(&self) -> Option<Scalar<AllocId>> {\n         match *self {\n-            ConstValue::ByRef { .. } | ConstValue::Slice { .. } | ConstValue::Zst => None,\n+            ConstValue::ByRef { .. } | ConstValue::Slice { .. } | ConstValue::ZeroSized => None,\n             ConstValue::Scalar(val) => Some(val),\n         }\n     }"}, {"sha": "fc8b3112b871f23f5994f5c801284dfe173b09d4", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -1711,7 +1711,7 @@ impl<'tcx> Operand<'tcx> {\n         Operand::Constant(Box::new(Constant {\n             span,\n             user_ty: None,\n-            literal: ConstantKind::Val(ConstValue::Zst, ty),\n+            literal: ConstantKind::Val(ConstValue::ZeroSized, ty),\n         }))\n     }\n \n@@ -2196,7 +2196,7 @@ impl<'tcx> ConstantKind<'tcx> {\n \n     #[inline]\n     pub fn zero_sized(ty: Ty<'tcx>) -> Self {\n-        let cv = ConstValue::Zst;\n+        let cv = ConstValue::ZeroSized;\n         Self::Val(cv, ty)\n     }\n \n@@ -2772,6 +2772,13 @@ fn pretty_print_const_value<'tcx>(\n                 fmt.write_str(&cx.into_buffer())?;\n                 return Ok(());\n             }\n+            (ConstValue::ZeroSized, ty::FnDef(d, s)) => {\n+                let mut cx = FmtPrinter::new(tcx, Namespace::ValueNS);\n+                cx.print_alloc_ids = true;\n+                let cx = cx.print_value_path(*d, s)?;\n+                fmt.write_str(&cx.into_buffer())?;\n+                return Ok(());\n+            }\n             // FIXME(oli-obk): also pretty print arrays and other aggregate constants by reading\n             // their fields instead of just dumping the memory.\n             _ => {}"}, {"sha": "e2fa37ee7be80547616be452970ca21d9d5e5af9", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -448,8 +448,9 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n                 self.push(&format!(\"+ user_ty: {:?}\", user_ty));\n             }\n \n+            // FIXME: this is a poor version of `pretty_print_const_value`.\n             let fmt_val = |val: &ConstValue<'tcx>| match val {\n-                ConstValue::Zst => format!(\"ZST\"),\n+                ConstValue::ZeroSized => format!(\"<ZST>\"),\n                 ConstValue::Scalar(s) => format!(\"Scalar({:?})\", s),\n                 ConstValue::Slice { .. } => format!(\"Slice(..)\"),\n                 ConstValue::ByRef { .. } => format!(\"ByRef(..)\"),\n@@ -680,7 +681,7 @@ pub fn write_allocations<'tcx>(\n             ConstValue::Scalar(interpret::Scalar::Int { .. }) => {\n                 Either::Left(Either::Right(std::iter::empty()))\n             }\n-            ConstValue::Zst => Either::Left(Either::Right(std::iter::empty())),\n+            ConstValue::ZeroSized => Either::Left(Either::Right(std::iter::empty())),\n             ConstValue::ByRef { alloc, .. } | ConstValue::Slice { data: alloc, .. } => {\n                 Either::Right(alloc_ids_from_alloc(alloc))\n             }"}, {"sha": "648d10b9e42a8db2e6bac923b99fc8a2ec3395b9", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -61,7 +61,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         inferred_ty: ty,\n                     })\n                 });\n-                let literal = ConstantKind::Val(ConstValue::Zst, ty);\n+                let literal = ConstantKind::Val(ConstValue::ZeroSized, ty);\n \n                 Constant { span, user_ty: user_ty, literal }\n             }"}, {"sha": "c8848caa027091967a4f47839ed0cd91f6ac755e", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -39,7 +39,7 @@ fn main() -> () {\n         _5 = foo(move _6) -> bb1;        // scope 4 at $DIR/array-index-is-temporary.rs:16:21: 16:27\n                                          // mir::Constant\n                                          // + span: $DIR/array-index-is-temporary.rs:16:21: 16:24\n-                                         // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "c8848caa027091967a4f47839ed0cd91f6ac755e", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -39,7 +39,7 @@ fn main() -> () {\n         _5 = foo(move _6) -> bb1;        // scope 4 at $DIR/array-index-is-temporary.rs:16:21: 16:27\n                                          // mir::Constant\n                                          // + span: $DIR/array-index-is-temporary.rs:16:21: 16:24\n-                                         // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "9b35beccbcc5ae435864441fa1a3ae38e3ccb88b", "filename": "src/test/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -22,7 +22,7 @@ fn main() -> () {\n         _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/box_expr.rs:7:13: 7:25\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:7:13: 7:25\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n@@ -31,7 +31,7 @@ fn main() -> () {\n         (*_5) = S::new() -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:7:17: 7:23\n-                                         // + literal: Const { ty: fn() -> S {S::new}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() -> S {S::new}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n@@ -47,7 +47,7 @@ fn main() -> () {\n         _6 = std::mem::drop::<Box<S>>(move _7) -> [return: bb4, unwind: bb6]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:8:5: 8:9\n-                                         // + literal: Const { ty: fn(Box<S>) {std::mem::drop::<Box<S>>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(Box<S>) {std::mem::drop::<Box<S>>}, val: Value(<ZST>) }\n     }\n \n     bb4: {"}, {"sha": "7ecd67d7c679abd26138b93e24a987f123539c26", "filename": "src/test/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -24,7 +24,7 @@\n           _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n                                            // mir::Constant\n                                            // + span: $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-                                           // + literal: Const { ty: for<'r> fn(&'r T) -> T {<T as Clone>::clone}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> fn(&'r T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -37,7 +37,7 @@\n -         _5 = <u64 as Clone>::clone(move _6) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n -                                          // mir::Constant\n -                                          // + span: $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n--                                          // + literal: Const { ty: for<'r> fn(&'r u64) -> u64 {<u64 as Clone>::clone}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> fn(&'r u64) -> u64 {<u64 as Clone>::clone}, val: Value(<ZST>) }\n +         _6 = _7;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n +         _5 = (*_6);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n +         goto -> bb2;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n@@ -53,7 +53,7 @@\n -         _8 = <[f32; 3] as Clone>::clone(move _9) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n -                                          // mir::Constant\n -                                          // + span: $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n--                                          // + literal: Const { ty: for<'r> fn(&'r [f32; 3]) -> [f32; 3] {<[f32; 3] as Clone>::clone}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> fn(&'r [f32; 3]) -> [f32; 3] {<[f32; 3] as Clone>::clone}, val: Value(<ZST>) }\n +         _9 = _10;                        // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n +         _8 = (*_9);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n +         goto -> bb3;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16"}, {"sha": "bc82222d11856ee185060b6786bc53638c1bb29f", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -33,7 +33,7 @@\n           _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:9:36: 9:42\n-                                           // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "39dcf2f10c6f2c3f23643aea4192f4004112e9c1", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -35,7 +35,7 @@\n           _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:13:47: 13:53\n-                                           // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "919b909435197d91e78fcf85013a6b5e0c5f1c8b", "filename": "src/test/mir-opt/const_prop/boxes.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -32,7 +32,7 @@\n +         _6 = alloc::alloc::exchange_malloc(const 4_usize, const 4_usize) -> bb1; // scope 2 at $DIR/boxes.rs:12:14: 12:22\n                                            // mir::Constant\n                                            // + span: $DIR/boxes.rs:12:14: 12:22\n-                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "852a2419f558dd3a64d29624321cc5108bb89274", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -30,7 +30,7 @@\n           _4 = read(move _5) -> bb1;       // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:5: 8:12\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:8:5: 8:9\n-                                           // + literal: Const { ty: fn(usize) {read}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(usize) {read}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "d0287cc2b2b64238d00c6ea7681cec600a2b284a", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -19,7 +19,7 @@\n           _2 = begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }"}, {"sha": "5991d7637f50faa0819a728f02228d116325efe5", "filename": "src/test/mir-opt/const_prop/issue_66971.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -20,7 +20,7 @@\n           _1 = encode(move _2) -> bb1;     // scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n                                            // mir::Constant\n                                            // + span: $DIR/issue-66971.rs:16:5: 16:11\n-                                           // + literal: Const { ty: fn(((), u8, u8)) {encode}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(((), u8, u8)) {encode}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "149a60c0bbb549e354044773e2db435defbcc3e5", "filename": "src/test/mir-opt/const_prop/issue_67019.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -21,7 +21,7 @@\n           _1 = test(move _2) -> bb1;       // scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n                                            // mir::Constant\n                                            // + span: $DIR/issue-67019.rs:11:5: 11:9\n-                                           // + literal: Const { ty: fn(((u8, u8),)) {test}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(((u8, u8),)) {test}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "724cf096f5946580d90a27e0182a6ce4a6f049fb", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_partial_read.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -17,7 +17,7 @@\n           _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:5:29: 5:34\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_aggregate_partial_read.rs:5:29: 5:32\n-                                           // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "a22efa7eaf50a256ef4fd9765fc335ce3d35cc91", "filename": "src/test/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -26,7 +26,7 @@\n           _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_unprop_assign.rs:5:13: 5:18\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_unprop_assign.rs:5:13: 5:16\n-                                           // + literal: Const { ty: fn() -> i32 {foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> i32 {foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "80f461a4c02cf16edbdad8bf0b24434aae1990f9", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -16,7 +16,7 @@\n           _3 = main as fn() (Pointer(ReifyFnPointer)); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:17\n                                            // mir::Constant\n                                            // + span: $DIR/reify_fn_ptr.rs:4:13: 4:17\n-                                           // + literal: Const { ty: fn() {main}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n           _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n           StorageDead(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:25: 4:26\n           _1 = move _2 as *const fn() (PointerFromExposedAddress); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41"}, {"sha": "6343ee80a2562ff55a4c1fb9e0a48b329d0cb0b5", "filename": "src/test/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -21,7 +21,7 @@\n +         _2 = consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n                                            // mir::Constant\n                                            // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:12\n-                                           // + literal: Const { ty: fn(u32) {consume}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(u32) {consume}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "5dfa05a46d3778155cd64bc78b8e5c6c21e09a4d", "filename": "src/test/mir-opt/const_prop/switch_int.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -16,14 +16,14 @@\n           _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:9:14: 9:21\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:9:14: 9:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n           _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:8:14: 8:20\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:8:14: 8:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb3: {"}, {"sha": "704b4bbe018d5195eebd48468a42c6b23191fa20", "filename": "src/test/mir-opt/const_prop/switch_int.main.SimplifyConstCondition-after-const-prop.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -16,14 +16,14 @@\n           _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:9:14: 9:21\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:9:14: 9:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n           _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:8:14: 8:20\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:8:14: 8:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb3: {"}, {"sha": "adb182314ac5e5dd08fae57a3d24f7b038f08503", "filename": "src/test/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -22,7 +22,7 @@\n           _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/tuple_literal_propagation.rs:5:5: 5:15\n                                            // mir::Constant\n                                            // + span: $DIR/tuple_literal_propagation.rs:5:5: 5:12\n-                                           // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "5f8019ac975a3be560b36d98b053b5f66e4bdb30", "filename": "src/test/mir-opt/dead-store-elimination/cycle.cycle.DeadStoreElimination.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -28,7 +28,7 @@\n           _5 = cond() -> bb2;              // scope 0 at $DIR/cycle.rs:12:11: 12:17\n                                            // mir::Constant\n                                            // + span: $DIR/cycle.rs:12:11: 12:15\n-                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n       }\n   \n       bb2: {"}, {"sha": "688015f68d37e34fa10e030e74dbd13588080cad", "filename": "src/test/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -27,7 +27,7 @@\n +         _2 = transmute::<&str, &[u8]>(move _8) -> bb12; // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/str/mod.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&str) -> &[u8] {transmute::<&str, &[u8]>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&str) -> &[u8] {transmute::<&str, &[u8]>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "571efc91171029a3526c7c1f0471580880275a52", "filename": "src/test/mir-opt/derefer_complex_case.main.Derefer.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -36,7 +36,7 @@\n           _1 = <&[i32; 2] as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_complex_case.rs:4:17: 4:26\n-                                           // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -56,7 +56,7 @@\n           _7 = <std::slice::Iter<i32> as Iterator>::next(move _8) -> bb3; // scope 1 at $DIR/derefer_complex_case.rs:4:17: 4:26\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_complex_case.rs:4:17: 4:26\n-                                           // + literal: Const { ty: for<'r> fn(&'r mut std::slice::Iter<i32>) -> Option<<std::slice::Iter<i32> as Iterator>::Item> {<std::slice::Iter<i32> as Iterator>::next}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> fn(&'r mut std::slice::Iter<i32>) -> Option<<std::slice::Iter<i32> as Iterator>::Item> {<std::slice::Iter<i32> as Iterator>::next}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n@@ -77,7 +77,7 @@\n           _6 = std::mem::drop::<i32>(move _13) -> bb7; // scope 2 at $DIR/derefer_complex_case.rs:4:29: 4:38\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_complex_case.rs:4:29: 4:33\n-                                           // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n       }\n   \n       bb5: {"}, {"sha": "09cce1c1654421171f5071a101c35af269f9cad1", "filename": "src/test/mir-opt/derefer_inline_test.main.Derefer.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -19,7 +19,7 @@\n           _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at $DIR/derefer_inline_test.rs:10:5: 10:12\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_inline_test.rs:10:5: 10:12\n-                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -28,7 +28,7 @@\n           (*_5) = f() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/derefer_inline_test.rs:10:9: 10:12\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_inline_test.rs:10:9: 10:10\n-                                           // + literal: Const { ty: fn() -> Box<u32> {f}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> Box<u32> {f}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n@@ -59,7 +59,7 @@\n           _6 = alloc::alloc::box_free::<Box<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::boxed::Box<u32>>), move (_5.1: std::alloc::Global)) -> bb6; // scope 0 at $DIR/derefer_inline_test.rs:10:11: 10:12\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_inline_test.rs:10:11: 10:12\n-                                           // + literal: Const { ty: unsafe fn(Unique<Box<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Box<u32>, std::alloc::Global>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe fn(Unique<Box<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Box<u32>, std::alloc::Global>}, val: Value(<ZST>) }\n       }\n   \n       bb8 (cleanup): {"}, {"sha": "cb110afe0190cda627029204e94e310571443139", "filename": "src/test/mir-opt/derefer_terminator_test.main.Derefer.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -33,15 +33,15 @@\n           _1 = foo() -> bb1;               // scope 0 at $DIR/derefer_terminator_test.rs:3:13: 3:18\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_terminator_test.rs:3:13: 3:16\n-                                           // + literal: Const { ty: fn() -> bool {foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n           StorageLive(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:4:9: 4:10\n           _2 = foo() -> bb2;               // scope 1 at $DIR/derefer_terminator_test.rs:4:13: 4:18\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_terminator_test.rs:4:13: 4:16\n-                                           // + literal: Const { ty: fn() -> bool {foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n       }\n   \n       bb2: {"}, {"sha": "97fb7fce14e40b47cb0a136ccda1ac3656ae7986", "filename": "src/test/mir-opt/dest-prop/branch.main.DestinationPropagation.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -19,7 +19,7 @@\n           _1 = val() -> bb1;               // scope 0 at $DIR/branch.rs:13:13: 13:18\n                                            // mir::Constant\n                                            // + span: $DIR/branch.rs:13:13: 13:16\n-                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -28,7 +28,7 @@\n           _3 = cond() -> bb2;              // scope 1 at $DIR/branch.rs:15:16: 15:22\n                                            // mir::Constant\n                                            // + span: $DIR/branch.rs:15:16: 15:20\n-                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n@@ -45,7 +45,7 @@\n           _4 = val() -> bb5;               // scope 1 at $DIR/branch.rs:18:9: 18:14\n                                            // mir::Constant\n                                            // + span: $DIR/branch.rs:18:9: 18:12\n-                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   \n       bb5: {"}, {"sha": "11a0d1f609f72f2028e97cbd18e35871edf3ebb5", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.bar.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -14,7 +14,7 @@\n           _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:16:5: 16:10\n-                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "1346a04938a20fe1edf14a3c4cbe66c46dcc7f84", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.foo.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -14,7 +14,7 @@\n           _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:11:9: 11:14\n-                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "516180fbec68d12caedde175440713a508a3e7ea", "filename": "src/test/mir-opt/dest-prop/cycle.main.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -27,7 +27,7 @@\n           _1 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:9:17: 9:22\n                                            // mir::Constant\n                                            // + span: $DIR/cycle.rs:9:17: 9:20\n-                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "acfd3c18fc93065937ed528dc4c7ea90896e51a4", "filename": "src/test/mir-opt/dest-prop/union.main.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -22,7 +22,7 @@\n           _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:13:23: 13:28\n                                            // mir::Constant\n                                            // + span: $DIR/union.rs:13:23: 13:26\n-                                           // + literal: Const { ty: fn() -> u32 {val}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> u32 {val}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "a930d83b9e79833cd367633751502039b47ada4c", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -41,7 +41,7 @@\n           _4 = Formatter::sign_plus(move _5) -> bb1; // scope 0 at $DIR/funky_arms.rs:15:22: 15:37\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:15:26: 15:35\n-                                           // + literal: Const { ty: for<'r> fn(&'r Formatter) -> bool {Formatter::sign_plus}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> fn(&'r Formatter) -> bool {Formatter::sign_plus}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -69,7 +69,7 @@\n           _7 = Formatter::precision(move _8) -> bb5; // scope 3 at $DIR/funky_arms.rs:24:30: 24:45\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:24:34: 24:43\n-                                           // + literal: Const { ty: for<'r> fn(&'r Formatter) -> Option<usize> {Formatter::precision}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> fn(&'r Formatter) -> Option<usize> {Formatter::precision}, val: Value(<ZST>) }\n       }\n   \n       bb5: {\n@@ -100,7 +100,7 @@\n           _0 = float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb7; // scope 3 at $DIR/funky_arms.rs:26:9: 26:87\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:26:9: 26:42\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut Formatter<'s>, &'t0 T, Sign, u32, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut Formatter<'s>, &'t0 T, Sign, u32, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb7: {\n@@ -125,7 +125,7 @@\n           _0 = float_to_exponential_common_shortest::<T>(move _18, move _19, move _20, move _21) -> bb9; // scope 2 at $DIR/funky_arms.rs:28:9: 28:68\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:28:9: 28:45\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut Formatter<'s>, &'t0 T, Sign, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut Formatter<'s>, &'t0 T, Sign, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb9: {"}, {"sha": "af4ed32c50889145793000d9e69e1f2d5f2bcd7d", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -41,7 +41,7 @@ yields ()\n         _7 = take::<Foo>(move _8) -> [return: bb2, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:26:9: 26:13\n-                                         // + literal: Const { ty: fn(Foo) {take::<Foo>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(Foo) {take::<Foo>}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n@@ -53,7 +53,7 @@ yields ()\n         _9 = take::<Bar>(move _10) -> [return: bb3, unwind: bb8]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n-                                         // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(<ZST>) }\n     }\n \n     bb3: {"}, {"sha": "16fa432dc3ad3d3cf32b2db51d7106545d1ace8b", "filename": "src/test/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -61,7 +61,7 @@ fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 19:24\n         _8 = callee() -> bb4;            // scope 1 at $DIR/generator-tiny.rs:23:13: 23:21\n                                          // mir::Constant\n                                          // + span: $DIR/generator-tiny.rs:23:13: 23:19\n-                                         // + literal: Const { ty: fn() {callee}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() {callee}, val: Value(<ZST>) }\n     }\n \n     bb4: {"}, {"sha": "d30c74897b342cff4f86f597698fc6a5a8b19dc2", "filename": "src/test/mir-opt/inline/caller_with_trivial_bound.foo.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -13,7 +13,7 @@\n           _1 = bar::<T>() -> bb1;          // scope 0 at $DIR/caller-with-trivial-bound.rs:20:51: 20:61\n                                            // mir::Constant\n                                            // + span: $DIR/caller-with-trivial-bound.rs:20:51: 20:59\n-                                           // + literal: Const { ty: fn() -> <IntFactory as Factory<T>>::Item {bar::<T>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> <IntFactory as Factory<T>>::Item {bar::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "1376ba99d992c6bdf73ab7f978d949302aa5847d", "filename": "src/test/mir-opt/inline/cycle.f.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -17,7 +17,7 @@\n           _2 = <impl Fn() as Fn<()>>::call(move _3, move _4) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/cycle.rs:6:5: 6:8\n                                            // mir::Constant\n                                            // + span: $DIR/cycle.rs:6:5: 6:6\n-                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "5a8c147a32723760738bc3ff37246f5f965c8dfe", "filename": "src/test/mir-opt/inline/cycle.g.Inline.diff", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -5,11 +5,11 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:11:8: 11:8\n       let _1: ();                          // in scope 0 at $DIR/cycle.rs:12:5: 12:12\n +     let mut _2: fn() {main};             // in scope 0 at $DIR/cycle.rs:12:5: 12:12\n-+     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n +     scope 1 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n +         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n +         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         let mut _4: &fn() {main};        // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         scope 2 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n +         }\n +     }\n@@ -21,15 +21,14 @@\n +         _2 = main;                       // scope 0 at $DIR/cycle.rs:12:5: 12:12\n                                            // mir::Constant\n -                                          // + span: $DIR/cycle.rs:12:5: 12:6\n--                                          // + literal: Const { ty: fn(fn() {main}) {f::<fn() {main}>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn(fn() {main}) {f::<fn() {main}>}, val: Value(<ZST>) }\n -                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:12:7: 12:11\n-                                           // + literal: Const { ty: fn() {main}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n +         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         _3 = move (*_4)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n@@ -49,7 +48,7 @@\n +     }\n + \n +     bb4: {\n-+         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n +         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n +         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n +         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2"}, {"sha": "e102c65090587a8b0e0c00e9c487f08ba83799f2", "filename": "src/test/mir-opt/inline/cycle.main.Inline.diff", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -5,11 +5,11 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:16:11: 16:11\n       let _1: ();                          // in scope 0 at $DIR/cycle.rs:17:5: 17:9\n +     let mut _2: fn() {g};                // in scope 0 at $DIR/cycle.rs:17:5: 17:9\n-+     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n +     scope 1 (inlined f::<fn() {g}>) {    // at $DIR/cycle.rs:17:5: 17:9\n +         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n +         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         let mut _4: &fn() {g};           // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         scope 2 (inlined <fn() {g} as Fn<()>>::call - shim(fn() {g})) { // at $DIR/cycle.rs:6:5: 6:8\n +             scope 3 (inlined g) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n +                 let mut _6: fn() {main}; // in scope 3 at $DIR/cycle.rs:12:5: 12:12\n@@ -31,15 +31,14 @@\n +         _2 = g;                          // scope 0 at $DIR/cycle.rs:17:5: 17:9\n                                            // mir::Constant\n -                                          // + span: $DIR/cycle.rs:17:5: 17:6\n--                                          // + literal: Const { ty: fn(fn() {g}) {f::<fn() {g}>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn(fn() {g}) {f::<fn() {g}>}, val: Value(<ZST>) }\n -                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:17:7: 17:8\n-                                           // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n +         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:12:5: 12:12\n +         StorageLive(_7);                 // scope 4 at $DIR/cycle.rs:6:5: 6:8\n +         StorageLive(_8);                 // scope 4 at $DIR/cycle.rs:6:5: 6:6\n@@ -66,7 +65,7 @@\n +         StorageDead(_8);                 // scope 4 at $DIR/cycle.rs:6:7: 6:8\n +         StorageDead(_7);                 // scope 4 at $DIR/cycle.rs:6:8: 6:9\n +         StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:12:5: 12:12\n-+         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n +         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n +         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n +         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2"}, {"sha": "7b306dd9482cafe76eea4b542805e671498bb8cb", "filename": "src/test/mir-opt/inline/dyn_trait.get_query.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -28,7 +28,7 @@\n                                            // mir::Constant\n                                            // + span: $DIR/dyn-trait.rs:33:13: 33:21\n                                            // + user_ty: UserType(0)\n-                                           // + literal: Const { ty: for<'r> fn(&'r T) -> &'r <Q as Query>::C {<Q as Query>::cache::<T>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> fn(&'r T) -> &'r <Q as Query>::C {<Q as Query>::cache::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -46,9 +46,9 @@\n +         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(move _7) -> bb2; // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n                                            // mir::Constant\n -                                          // + span: $DIR/dyn-trait.rs:34:5: 34:22\n--                                          // + literal: Const { ty: for<'r> fn(&'r <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> fn(&'r <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(<ZST>) }\n +                                          // + span: $DIR/dyn-trait.rs:21:7: 21:20\n-+                                          // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = <Q as Query>::V>) {<dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache}, val: Value(Scalar(<ZST>)) }\n++                                          // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = <Q as Query>::V>) {<dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   \n       bb2: {"}, {"sha": "2a909702a6dc0872b1158ab956f4495ad9d35d47", "filename": "src/test/mir-opt/inline/dyn_trait.mk_cycle.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -12,7 +12,7 @@\n           _0 = <dyn Cache<V = V> as Cache>::store_nocache(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n                                            // mir::Constant\n                                            // + span: $DIR/dyn-trait.rs:21:7: 21:20\n-                                           // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = V>) {<dyn Cache<V = V> as Cache>::store_nocache}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = V>) {<dyn Cache<V = V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "01ebc999cb3ec633aec8c35868b62216119d5cc6", "filename": "src/test/mir-opt/inline/dyn_trait.try_execute_query.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -23,9 +23,9 @@\n +         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(move _4) -> bb1; // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n                                            // mir::Constant\n -                                          // + span: $DIR/dyn-trait.rs:27:5: 27:13\n--                                          // + literal: Const { ty: for<'r> fn(&'r (dyn Cache<V = <C as Cache>::V> + 'r)) {mk_cycle::<<C as Cache>::V>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> fn(&'r (dyn Cache<V = <C as Cache>::V> + 'r)) {mk_cycle::<<C as Cache>::V>}, val: Value(<ZST>) }\n +                                          // + span: $DIR/dyn-trait.rs:21:7: 21:20\n-+                                          // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = <C as Cache>::V>) {<dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache}, val: Value(Scalar(<ZST>)) }\n++                                          // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = <C as Cache>::V>) {<dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "ff338ae58cd878c275b6524e2c658e03bc7a27d5", "filename": "src/test/mir-opt/inline/inline_any_operand.bar.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -21,7 +21,7 @@ fn bar() -> bool {\n         _1 = foo;                        // scope 0 at $DIR/inline-any-operand.rs:11:13: 11:16\n                                          // mir::Constant\n                                          // + span: $DIR/inline-any-operand.rs:11:13: 11:16\n-                                         // + literal: Const { ty: fn(i32, i32) -> bool {foo}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(i32, i32) -> bool {foo}, val: Value(<ZST>) }\n         StorageLive(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n         _2 = _1;                         // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n         StorageLive(_3);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13"}, {"sha": "34762b97c3b2f1ee1c88b6bb9d327cde9021e0f0", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_no_sanitize.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -12,7 +12,7 @@\n -         _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:24:5: 24:18\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-compatibility.rs:24:5: 24:16\n--                                          // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {"}, {"sha": "fd1e1983d1e0daa971e7cf5eb06ba400a8f4ab8a", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -12,7 +12,7 @@\n -         _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:13:5: 13:21\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-compatibility.rs:13:5: 13:19\n--                                          // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {"}, {"sha": "bced3f6fe56a7a6735bc43a461daf0646ef1fc3e", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_c_variadic.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -13,7 +13,7 @@\n           _1 = sum(const 4_u32, const 4_u32, const 30_u32, const 200_u32, const 1000_u32) -> bb1; // scope 0 at $DIR/inline-compatibility.rs:42:13: 42:52\n                                            // mir::Constant\n                                            // + span: $DIR/inline-compatibility.rs:42:13: 42:16\n-                                           // + literal: Const { ty: unsafe extern \"C\" fn(u32, ...) -> u32 {sum}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe extern \"C\" fn(u32, ...) -> u32 {sum}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "a4989cbfa096dc4f8944a56ac29aa02e7b5fe981", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_no_sanitize.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -10,7 +10,7 @@\n           _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:29:5: 29:18\n                                            // mir::Constant\n                                            // + span: $DIR/inline-compatibility.rs:29:5: 29:16\n-                                           // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "49dd90c971cb4d63feaf2748da64a6201573c977", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -10,7 +10,7 @@\n           _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:18:5: 18:21\n                                            // mir::Constant\n                                            // + span: $DIR/inline-compatibility.rs:18:5: 18:19\n-                                           // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "8128797d27eaeaeadefad9919dc678dd8bb0da6f", "filename": "src/test/mir-opt/inline/inline_cycle.one.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -18,7 +18,7 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-cycle.rs:14:5: 14:22\n +                                          // + span: $DIR/inline-cycle.rs:36:9: 36:26\n-                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "29c793d7bd8cd1aa1b11c049bb022f6ed68c4719", "filename": "src/test/mir-opt/inline/inline_cycle.two.Inline.diff", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -5,11 +5,11 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle.rs:48:10: 48:10\n       let _1: ();                          // in scope 0 at $DIR/inline-cycle.rs:49:5: 49:12\n +     let mut _2: fn() {f};                // in scope 0 at $DIR/inline-cycle.rs:49:5: 49:12\n-+     let mut _5: ();                      // in scope 0 at $DIR/inline-cycle.rs:54:5: 54:8\n +     scope 1 (inlined call::<fn() {f}>) { // at $DIR/inline-cycle.rs:49:5: 49:12\n +         debug f => _2;                   // in scope 1 at $DIR/inline-cycle.rs:53:22: 53:23\n +         let _3: ();                      // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n +         let mut _4: fn() {f};            // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n++         let mut _5: ();                  // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n +         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline-cycle.rs:54:5: 54:8\n +             scope 3 (inlined f) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n +                 let _6: ();              // in scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n@@ -25,26 +25,25 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-cycle.rs:49:5: 49:9\n +                                          // + span: $DIR/inline-cycle.rs:49:10: 49:11\n-+                                          // + literal: Const { ty: fn() {f}, val: Value(Scalar(<ZST>)) }\n++                                          // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n +         StorageLive(_3);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n +         StorageLive(_4);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n +         _4 = move _2;                    // scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n +         StorageLive(_5);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n-+         _5 = const ();                   // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n +         StorageLive(_6);                 // scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n +         _6 = call::<fn() {f}>(f) -> bb1; // scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n +                                          // mir::Constant\n +                                          // + span: $DIR/inline-cycle.rs:59:5: 59:9\n-                                           // + literal: Const { ty: fn(fn() {f}) {call::<fn() {f}>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(fn() {f}) {call::<fn() {f}>}, val: Value(<ZST>) }\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-cycle.rs:49:10: 49:11\n +                                          // + span: $DIR/inline-cycle.rs:59:10: 59:11\n-                                           // + literal: Const { ty: fn() {f}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n +         StorageDead(_6);                 // scope 3 at $DIR/inline-cycle.rs:59:12: 59:13\n-+         StorageDead(_5);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n++         StorageDead(_5);                 // scope 1 at $DIR/inline-cycle.rs:54:7: 54:8\n +         StorageDead(_4);                 // scope 1 at $DIR/inline-cycle.rs:54:7: 54:8\n +         StorageDead(_3);                 // scope 1 at $DIR/inline-cycle.rs:54:8: 54:9\n +         StorageDead(_2);                 // scope 0 at $DIR/inline-cycle.rs:49:5: 49:12"}, {"sha": "2ccd39e7931ed022915a1df44a72491a5cebfe8e", "filename": "src/test/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -20,7 +20,7 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-cycle-generic.rs:9:5: 9:22\n +                                          // + span: $DIR/inline-cycle-generic.rs:31:9: 31:26\n-                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "7cdc1a6b546a2fc6c8d4a76833d2146c6d46f25e", "filename": "src/test/mir-opt/inline/inline_diverging.f.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -13,7 +13,7 @@\n -         _2 = sleep();                    // scope 0 at $DIR/inline-diverging.rs:8:5: 8:12\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-diverging.rs:8:5: 8:10\n--                                          // + literal: Const { ty: fn() -> ! {sleep}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn() -> ! {sleep}, val: Value(<ZST>) }\n +         goto -> bb1;                     // scope 0 at $DIR/inline-diverging.rs:8:5: 8:12\n +     }\n + "}, {"sha": "595df0aed5ff81537a3e11b6f7219be6a15df5cf", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -38,9 +38,9 @@\n +         _7 = begin_panic::<&str>(const \"explicit panic\"); // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-diverging.rs:16:9: 16:14\n--                                          // + literal: Const { ty: fn() -> ! {panic}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn() -> ! {panic}, val: Value(<ZST>) }\n +                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-+                                          // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n++                                          // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }\n +                                          // mir::Constant\n +                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n +                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }"}, {"sha": "32066cf2e3e73251fb0112529ab7e93795cdf7ea", "filename": "src/test/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -5,20 +5,20 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-diverging.rs:21:12: 21:12\n       let _1: (!, !);                      // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n +     let mut _2: fn() -> ! {sleep};       // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+     let mut _9: ();                      // in scope 0 at $DIR/inline-diverging.rs:27:13: 27:16\n-+     let mut _10: ();                     // in scope 0 at $DIR/inline-diverging.rs:28:13: 28:16\n +     scope 1 (inlined call_twice::<!, fn() -> ! {sleep}>) { // at $DIR/inline-diverging.rs:22:5: 22:22\n +         debug f => _2;                   // in scope 1 at $DIR/inline-diverging.rs:26:36: 26:37\n +         let _3: !;                       // in scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n +         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n-+         let mut _6: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:28:13: 28:14\n-+         let mut _7: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:6: 29:7\n-+         let mut _8: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:9: 29:10\n++         let mut _5: ();                  // in scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n++         let mut _7: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:28:13: 28:14\n++         let mut _8: ();                  // in scope 1 at $DIR/inline-diverging.rs:28:13: 28:16\n++         let mut _9: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:6: 29:7\n++         let mut _10: !;                  // in scope 1 at $DIR/inline-diverging.rs:29:9: 29:10\n +         scope 2 {\n +             debug a => _3;               // in scope 2 at $DIR/inline-diverging.rs:27:9: 27:10\n-+             let _5: !;                   // in scope 2 at $DIR/inline-diverging.rs:28:9: 28:10\n++             let _6: !;                   // in scope 2 at $DIR/inline-diverging.rs:28:9: 28:10\n +             scope 3 {\n-+                 debug b => _5;           // in scope 3 at $DIR/inline-diverging.rs:28:9: 28:10\n++                 debug b => _6;           // in scope 3 at $DIR/inline-diverging.rs:28:9: 28:10\n +             }\n +             scope 6 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline-diverging.rs:28:13: 28:16\n +                 scope 7 (inlined sleep) { // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n@@ -38,15 +38,14 @@\n +         _2 = sleep;                      // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-diverging.rs:22:5: 22:15\n--                                          // + literal: Const { ty: fn(fn() -> ! {sleep}) -> (!, !) {call_twice::<!, fn() -> ! {sleep}>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn(fn() -> ! {sleep}) -> (!, !) {call_twice::<!, fn() -> ! {sleep}>}, val: Value(<ZST>) }\n -                                          // mir::Constant\n                                            // + span: $DIR/inline-diverging.rs:22:16: 22:21\n-                                           // + literal: Const { ty: fn() -> ! {sleep}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> ! {sleep}, val: Value(<ZST>) }\n +         StorageLive(_3);                 // scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n +         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n +         _4 = &_2;                        // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n-+         StorageLive(_9);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n-+         _9 = const ();                   // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n++         StorageLive(_5);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n +         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:39:5: 39:12\n +     }\n + "}, {"sha": "bb093c5bc0936d7720445e1771e6b35f310b383a", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -43,7 +43,7 @@\n -         _4 = g() -> bb1;                 // scope 0 at $DIR/inline-generator.rs:9:28: 9:31\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:28: 9:29\n--                                          // + literal: Const { ty: fn() -> impl Generator<bool> {g}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn() -> impl Generator<bool> {g}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {\n@@ -54,7 +54,7 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:14: 9:22\n -                                          // + user_ty: UserType(0)\n--                                          // + literal: Const { ty: fn(&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]) -> Pin<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]> {Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>::new}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn(&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]) -> Pin<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]> {Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>::new}, val: Value(<ZST>) }\n -     }\n - \n -     bb2: {\n@@ -70,7 +70,7 @@\n -         _1 = <[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:33: 9:39\n--                                          // + literal: Const { ty: for<'r> fn(Pin<&'r mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>, bool) -> GeneratorState<<[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::Yield, <[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::Return> {<[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::resume}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> fn(Pin<&'r mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>, bool) -> GeneratorState<<[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::Yield, <[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::Return> {<[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::resume}, val: Value(<ZST>) }\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         StorageLive(_10);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46"}, {"sha": "05bd99b62cd1f7aa4eb276cdcc720aedb62bc1d4", "filename": "src/test/mir-opt/inline/inline_instruction_set.default.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -14,7 +14,7 @@\n           _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline-instruction-set.rs:51:5: 51:26\n                                            // mir::Constant\n                                            // + span: $DIR/inline-instruction-set.rs:51:5: 51:24\n-                                           // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -23,7 +23,7 @@\n           _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline-instruction-set.rs:52:5: 52:26\n                                            // mir::Constant\n                                            // + span: $DIR/inline-instruction-set.rs:52:5: 52:24\n-                                           // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n@@ -32,7 +32,7 @@\n -         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline-instruction-set.rs:53:5: 53:30\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-instruction-set.rs:53:5: 53:28\n--                                          // + literal: Const { ty: fn() {instruction_set_default}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn() {instruction_set_default}, val: Value(<ZST>) }\n -     }\n - \n -     bb3: {"}, {"sha": "cb0d01428c946ba6258ec21c51e1b1ea051c6fae", "filename": "src/test/mir-opt/inline/inline_instruction_set.t32.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -14,7 +14,7 @@\n           _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline-instruction-set.rs:42:5: 42:26\n                                            // mir::Constant\n                                            // + span: $DIR/inline-instruction-set.rs:42:5: 42:24\n-                                           // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -23,7 +23,7 @@\n -         _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline-instruction-set.rs:43:5: 43:26\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-instruction-set.rs:43:5: 43:24\n--                                          // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(<ZST>) }\n -     }\n - \n -     bb2: {\n@@ -33,7 +33,7 @@\n +         _3 = instruction_set_default() -> bb2; // scope 0 at $DIR/inline-instruction-set.rs:46:5: 46:30\n                                            // mir::Constant\n                                            // + span: $DIR/inline-instruction-set.rs:46:5: 46:28\n-                                           // + literal: Const { ty: fn() {instruction_set_default}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() {instruction_set_default}, val: Value(<ZST>) }\n       }\n   \n -     bb3: {"}, {"sha": "17050f184cb484c4b0dd72b2ed7cde01b9b9f410", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -28,7 +28,7 @@\n           _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n                                            // mir::Constant\n                                            // + span: $DIR/inline-into-box-place.rs:8:29: 8:43\n-                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -44,7 +44,7 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n--                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }\n -     }\n - \n -     bb2: {\n@@ -75,7 +75,7 @@\n -         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb5; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n--                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(<ZST>) }\n -     }\n - \n -     bb5 (cleanup): {"}, {"sha": "17050f184cb484c4b0dd72b2ed7cde01b9b9f410", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -28,7 +28,7 @@\n           _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n                                            // mir::Constant\n                                            // + span: $DIR/inline-into-box-place.rs:8:29: 8:43\n-                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -44,7 +44,7 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n--                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }\n -     }\n - \n -     bb2: {\n@@ -75,7 +75,7 @@\n -         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb5; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n--                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(<ZST>) }\n -     }\n - \n -     bb5 (cleanup): {"}, {"sha": "45023083be6685d34f61a723de37b55dfcb6e2a5", "filename": "src/test/mir-opt/inline/inline_options.main.Inline.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -15,7 +15,7 @@ fn main() -> () {\n         _1 = not_inlined() -> bb1;       // scope 0 at $DIR/inline-options.rs:9:5: 9:18\n                                          // mir::Constant\n                                          // + span: $DIR/inline-options.rs:9:5: 9:16\n-                                         // + literal: Const { ty: fn() {not_inlined}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() {not_inlined}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n@@ -25,7 +25,7 @@ fn main() -> () {\n         _3 = g() -> bb2;                 // scope 1 at $DIR/inline-options.rs:16:23: 16:26\n                                          // mir::Constant\n                                          // + span: $DIR/inline-options.rs:16:23: 16:24\n-                                         // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n@@ -34,7 +34,7 @@ fn main() -> () {\n         _4 = g() -> bb3;                 // scope 1 at $DIR/inline-options.rs:16:28: 16:31\n                                          // mir::Constant\n                                          // + span: $DIR/inline-options.rs:16:28: 16:29\n-                                         // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n@@ -43,7 +43,7 @@ fn main() -> () {\n         _5 = g() -> bb4;                 // scope 1 at $DIR/inline-options.rs:16:33: 16:36\n                                          // mir::Constant\n                                          // + span: $DIR/inline-options.rs:16:33: 16:34\n-                                         // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n \n     bb4: {"}, {"sha": "fcc1767578eb2d7f33226c99544da6139363b69f", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -27,7 +27,7 @@ fn bar() -> bool {\n         _1 = foo;                        // scope 0 at $DIR/inline-retag.rs:11:13: 11:16\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:11:13: 11:16\n-                                         // + literal: Const { ty: for<'r, 's> fn(&'r i32, &'s i32) -> bool {foo}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: for<'r, 's> fn(&'r i32, &'s i32) -> bool {foo}, val: Value(<ZST>) }\n         StorageLive(_2);                 // scope 1 at $DIR/inline-retag.rs:12:5: 12:6\n         _2 = _1;                         // scope 1 at $DIR/inline-retag.rs:12:5: 12:6\n         StorageLive(_3);                 // scope 1 at $DIR/inline-retag.rs:12:7: 12:9"}, {"sha": "d67b07b0181b4b065d7b64f99cfae780418a2dbb", "filename": "src/test/mir-opt/inline/inline_shims.clone.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -14,7 +14,7 @@\n -         _0 = <fn(A, B) as Clone>::clone(move _2) -> bb1; // scope 0 at $DIR/inline-shims.rs:6:5: 6:14\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-shims.rs:6:7: 6:12\n--                                          // + literal: Const { ty: for<'r> fn(&'r fn(A, B)) -> fn(A, B) {<fn(A, B) as Clone>::clone}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> fn(&'r fn(A, B)) -> fn(A, B) {<fn(A, B) as Clone>::clone}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {"}, {"sha": "5c7cbc9b41900e09ca55cc9ee7b66fd6c3ee18e4", "filename": "src/test/mir-opt/inline/inline_shims.drop.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -24,7 +24,7 @@\n           _3 = std::ptr::drop_in_place::<Vec<A>>(move _4) -> bb1; // scope 1 at $DIR/inline-shims.rs:11:14: 11:40\n                                            // mir::Constant\n                                            // + span: $DIR/inline-shims.rs:11:14: 11:37\n-                                           // + literal: Const { ty: unsafe fn(*mut Vec<A>) {std::ptr::drop_in_place::<Vec<A>>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe fn(*mut Vec<A>) {std::ptr::drop_in_place::<Vec<A>>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -35,7 +35,7 @@\n -         _0 = std::ptr::drop_in_place::<Option<B>>(move _5) -> bb2; // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-shims.rs:12:14: 12:37\n--                                          // + literal: Const { ty: unsafe fn(*mut Option<B>) {std::ptr::drop_in_place::<Option<B>>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: unsafe fn(*mut Option<B>) {std::ptr::drop_in_place::<Option<B>>}, val: Value(<ZST>) }\n +         StorageLive(_6);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n +         StorageLive(_7);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n +         _6 = discriminant((*_5));        // scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL"}, {"sha": "747eeb9845073cec1954911e72df9703ee4d6241", "filename": "src/test/mir-opt/inline/inline_specialization.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -15,7 +15,7 @@\n -         _1 = <Vec<()> as Foo>::bar() -> bb1; // scope 0 at $DIR/inline-specialization.rs:5:13: 5:38\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-specialization.rs:5:13: 5:36\n--                                          // + literal: Const { ty: fn() -> u32 {<Vec<()> as Foo>::bar}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn() -> u32 {<Vec<()> as Foo>::bar}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {"}, {"sha": "1646de9289a81201380bd255c5938327cb43caa6", "filename": "src/test/mir-opt/inline/inline_trait_method.test.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -11,7 +11,7 @@ fn test(_1: &dyn X) -> u32 {\n         _0 = <dyn X as X>::y(move _2) -> bb1; // scope 0 at $DIR/inline-trait-method.rs:9:5: 9:10\n                                          // mir::Constant\n                                          // + span: $DIR/inline-trait-method.rs:9:7: 9:8\n-                                         // + literal: Const { ty: for<'r> fn(&'r dyn X) -> u32 {<dyn X as X>::y}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: for<'r> fn(&'r dyn X) -> u32 {<dyn X as X>::y}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "eb6c09c1cd79848a1e9997e36531ff97f3c1e019", "filename": "src/test/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -21,7 +21,7 @@ fn test2(_1: &dyn X) -> bool {\n         _0 = <dyn X as X>::y(move _4) -> bb1; // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n                                          // mir::Constant\n                                          // + span: $DIR/inline-trait-method_2.rs:10:7: 10:8\n-                                         // + literal: Const { ty: for<'r> fn(&'r dyn X) -> bool {<dyn X as X>::y}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: for<'r> fn(&'r dyn X) -> bool {<dyn X as X>::y}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "f91d3526226269415c9e68597e59897ce2ea0ff6", "filename": "src/test/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -19,7 +19,7 @@\n +         _4 = hide_foo() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:13\n-                                           // + literal: Const { ty: fn() -> impl Fn() {hide_foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> impl Fn() {hide_foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -29,7 +29,7 @@\n -         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n -                                          // mir::Constant\n -                                          // + span: $DIR/issue-78442.rs:11:5: 11:15\n--                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r fn() {foo}, ()) -> <fn() {foo} as FnOnce<()>>::Output {<fn() {foo} as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r fn() {foo}, ()) -> <fn() {foo} as FnOnce<()>>::Output {<fn() {foo} as Fn<()>>::call}, val: Value(<ZST>) }\n +         _2 = move (*_3)() -> [return: bb5, unwind: bb3]; // scope 1 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   "}, {"sha": "4446280e72004af36292f0cd6b146160c4ce8d59", "filename": "src/test/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -18,7 +18,7 @@\n           _4 = hide_foo() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:13\n-                                           // + literal: Const { ty: fn() -> impl Fn() {hide_foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> impl Fn() {hide_foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -29,8 +29,8 @@\n +         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:15\n--                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n-+                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r fn() {foo}, ()) -> <fn() {foo} as FnOnce<()>>::Output {<fn() {foo} as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(<ZST>) }\n++                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r fn() {foo}, ()) -> <fn() {foo} as FnOnce<()>>::Output {<fn() {foo} as Fn<()>>::call}, val: Value(<ZST>) }\n       }\n   \n       bb2: {"}, {"sha": "9384ce52cc825e00e73628f4eb9ec8aad6f7e5d5", "filename": "src/test/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -22,7 +22,7 @@\n           _2 = bar() -> [return: bb3, unwind: bb6]; // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n                                            // mir::Constant\n                                            // + span: /the/src/instrument_coverage.rs:12:12: 12:15\n-                                           // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> bool {bar}, val: Value(<ZST>) }\n       }\n   \n       bb3: {"}, {"sha": "19110894dc720e4b993a3805f6f4e535ea42d3dc", "filename": "src/test/mir-opt/issue_41110.main.ElaborateDrops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -23,7 +23,7 @@ fn main() -> () {\n         _3 = S::id(move _4) -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:23: 8:25\n-                                         // + literal: Const { ty: fn(S) -> S {S::id}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(S) -> S {S::id}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n@@ -32,7 +32,7 @@ fn main() -> () {\n         _1 = S::other(move _2, move _3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:15: 8:20\n-                                         // + literal: Const { ty: fn(S, S) {S::other}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(S, S) {S::other}, val: Value(<ZST>) }\n     }\n \n     bb2: {"}, {"sha": "1901ea1747ed2fbde2ab6b39aa9ee6d92bac88a3", "filename": "src/test/mir-opt/issue_41110.test.ElaborateDrops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -28,7 +28,7 @@ fn test() -> () {\n         _3 = std::mem::drop::<S>(move _4) -> [return: bb1, unwind: bb7]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:17:5: 17:9\n-                                         // + literal: Const { ty: fn(S) {std::mem::drop::<S>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(S) {std::mem::drop::<S>}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "a4ff718f42258efae5cc806700d11f7a3f8d41ad", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -29,7 +29,7 @@ fn main() -> () {\n         _2 = cond() -> [return: bb1, unwind: bb11]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:8:8: 8:12\n-                                         // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "6301763449b90161a2230544742ace256f1c3b41", "filename": "src/test/mir-opt/issue_49232.main.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -59,7 +59,7 @@ fn main() -> () {\n         _5 = std::mem::drop::<&i32>(move _6) -> [return: bb9, unwind: bb11]; // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n                                          // mir::Constant\n                                          // + span: $DIR/issue-49232.rs:13:9: 13:13\n-                                         // + literal: Const { ty: fn(&i32) {std::mem::drop::<&i32>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(&i32) {std::mem::drop::<&i32>}, val: Value(<ZST>) }\n     }\n \n     bb9: {"}, {"sha": "f21e9bbd270a28688630f8fc74631936984fd27d", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -34,7 +34,7 @@ fn test() -> Option<Box<u32>> {\n         _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at $DIR/issue-62289.rs:9:10: 9:21\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:10: 9:21\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n@@ -46,7 +46,7 @@ fn test() -> Option<Box<u32>> {\n         _6 = <Option<u32> as Try>::branch(move _7) -> [return: bb2, unwind: bb12]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n-                                         // + literal: Const { ty: fn(Option<u32>) -> ControlFlow<<Option<u32> as Try>::Residual, <Option<u32> as Try>::Output> {<Option<u32> as Try>::branch}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(Option<u32>) -> ControlFlow<<Option<u32> as Try>::Residual, <Option<u32> as Try>::Output> {<Option<u32> as Try>::branch}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n@@ -76,7 +76,7 @@ fn test() -> Option<Box<u32>> {\n         _0 = <Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual(move _11) -> [return: bb6, unwind: bb12]; // scope 3 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:19: 9:20\n-                                         // + literal: Const { ty: fn(Option<Infallible>) -> Option<Box<u32>> {<Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(Option<Infallible>) -> Option<Box<u32>> {<Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual}, val: Value(<ZST>) }\n     }\n \n     bb6: {"}, {"sha": "f4602d147c947c8b68310b9ee21e213f8d6432a6", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -25,7 +25,7 @@ fn main() -> () {\n         _1 = std::mem::size_of::<Foo>() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181.rs:24:13: 24:32\n-                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "f4602d147c947c8b68310b9ee21e213f8d6432a6", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -25,7 +25,7 @@ fn main() -> () {\n         _1 = std::mem::size_of::<Foo>() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181.rs:24:13: 24:32\n-                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "9842e26ab69938f5742fe5d36d6c10038f71c33b", "filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -24,7 +24,7 @@ fn main() -> () {\n         _2 = transmute::<(), Void>(move _3) -> bb4; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181-1.rs:17:9: 17:40\n-                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {transmute::<(), Void>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {transmute::<(), Void>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n@@ -37,7 +37,7 @@ fn main() -> () {\n         _4 = f(move _5) -> bb4;          // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181-1.rs:20:5: 20:6\n-                                         // + literal: Const { ty: fn(Void) -> ! {f}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(Void) -> ! {f}, val: Value(<ZST>) }\n     }\n \n     bb2: {"}, {"sha": "929526515442416e5b5bcedeb18abbaf163c3b80", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -98,7 +98,7 @@\n           _14 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }"}, {"sha": "929526515442416e5b5bcedeb18abbaf163c3b80", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -98,7 +98,7 @@\n           _14 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }"}, {"sha": "f52b1a953c12058ac70b4862be865eb266f4212d", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -135,7 +135,7 @@\n           _21 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }"}, {"sha": "f52b1a953c12058ac70b4862be865eb266f4212d", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -135,7 +135,7 @@\n           _21 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }"}, {"sha": "14bb66910fe3cf644ba87fe738996c958ed82603", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -70,7 +70,7 @@\n           _22 = core::panicking::panic(const \"internal error: entered unreachable code\"); // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }"}, {"sha": "dd85434d879c3ac4044d1d7a8cda519dca913b40", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -39,7 +39,7 @@ fn num_to_digit(_1: char) -> u32 {\n         _7 = char::methods::<impl char>::to_digit(move _8, const 8_u32) -> bb5; // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/char/methods.rs:LL:COL\n-                                         // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n@@ -50,7 +50,7 @@ fn num_to_digit(_1: char) -> u32 {\n         _3 = char::methods::<impl char>::to_digit(move _4, const 8_u32) -> bb2; // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n                                          // mir::Constant\n                                          // + span: $DIR/issue-59352.rs:14:30: 14:38\n-                                         // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n@@ -90,7 +90,7 @@ fn num_to_digit(_1: char) -> u32 {\n         _11 = core::panicking::panic(const \"called `Option::unwrap()` on a `None` value\"); // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/option.rs:LL:COL\n-                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/option.rs:LL:COL\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }"}, {"sha": "08ff3b67655cedfafa8c4a77d300e6ce0504381b", "filename": "src/test/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -27,7 +27,7 @@\n           _2 = transmute::<[u8; 16], [u32; 4]>(move _3) -> bb1; // scope 2 at $DIR/issue-75439.rs:7:37: 7:53\n                                            // mir::Constant\n                                            // + span: $DIR/issue-75439.rs:7:37: 7:46\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn([u8; 16]) -> [u32; 4] {transmute::<[u8; 16], [u32; 4]>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn([u8; 16]) -> [u32; 4] {transmute::<[u8; 16], [u32; 4]>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -50,7 +50,7 @@\n           _5 = transmute::<u32, [u8; 4]>(move _6) -> bb7; // scope 4 at $DIR/issue-75439.rs:10:23: 10:36\n                                            // mir::Constant\n                                            // + span: $DIR/issue-75439.rs:10:23: 10:32\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32) -> [u8; 4] {transmute::<u32, [u8; 4]>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32) -> [u8; 4] {transmute::<u32, [u8; 4]>}, val: Value(<ZST>) }\n       }\n   \n       bb5: {"}, {"sha": "1b9e46c6a6d0aec5b2128e7fcbaf93a63ffc32ca", "filename": "src/test/mir-opt/lower_intrinsics.align_of.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -8,7 +8,7 @@\n -         _0 = std::intrinsics::min_align_of::<T>() -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:19:5: 19:42\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:19:5: 19:40\n--                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::min_align_of::<T>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::min_align_of::<T>}, val: Value(<ZST>) }\n +         _0 = AlignOf(T);                 // scope 0 at $DIR/lower_intrinsics.rs:19:5: 19:42\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:19:5: 19:42\n       }"}, {"sha": "9bda88ce2c7e8a2de1968ba0e8b1eb61aaefa436", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -32,7 +32,7 @@\n -         _2 = discriminant_value::<T>(move _3) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:74:5: 74:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:74:5: 74:41\n--                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r T) -> <T as DiscriminantKind>::Discriminant {discriminant_value::<T>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r T) -> <T as DiscriminantKind>::Discriminant {discriminant_value::<T>}, val: Value(<ZST>) }\n +         _2 = discriminant((*_3));        // scope 0 at $DIR/lower_intrinsics.rs:74:5: 74:45\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:74:5: 74:45\n       }\n@@ -53,7 +53,7 @@\n -         _5 = discriminant_value::<i32>(move _6) -> bb2; // scope 0 at $DIR/lower_intrinsics.rs:75:5: 75:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:75:5: 75:41\n--                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r i32) -> <i32 as DiscriminantKind>::Discriminant {discriminant_value::<i32>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r i32) -> <i32 as DiscriminantKind>::Discriminant {discriminant_value::<i32>}, val: Value(<ZST>) }\n +         _5 = discriminant((*_6));        // scope 0 at $DIR/lower_intrinsics.rs:75:5: 75:45\n +         goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:75:5: 75:45\n       }\n@@ -74,7 +74,7 @@\n -         _9 = discriminant_value::<()>(move _10) -> bb3; // scope 0 at $DIR/lower_intrinsics.rs:76:5: 76:46\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:76:5: 76:41\n--                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r ()) -> <() as DiscriminantKind>::Discriminant {discriminant_value::<()>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r ()) -> <() as DiscriminantKind>::Discriminant {discriminant_value::<()>}, val: Value(<ZST>) }\n +         _9 = discriminant((*_10));       // scope 0 at $DIR/lower_intrinsics.rs:76:5: 76:46\n +         goto -> bb3;                     // scope 0 at $DIR/lower_intrinsics.rs:76:5: 76:46\n       }\n@@ -95,7 +95,7 @@\n -         _13 = discriminant_value::<E>(move _14) -> bb4; // scope 0 at $DIR/lower_intrinsics.rs:77:5: 77:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:77:5: 77:41\n--                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r E) -> <E as DiscriminantKind>::Discriminant {discriminant_value::<E>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r E) -> <E as DiscriminantKind>::Discriminant {discriminant_value::<E>}, val: Value(<ZST>) }\n +         _13 = discriminant((*_14));      // scope 0 at $DIR/lower_intrinsics.rs:77:5: 77:48\n +         goto -> bb4;                     // scope 0 at $DIR/lower_intrinsics.rs:77:5: 77:48\n       }"}, {"sha": "a12aa1d6686a9b4a600cd6c06d86c632f222049c", "filename": "src/test/mir-opt/lower_intrinsics.f_u64.PreCodegen.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -20,7 +20,7 @@ fn f_u64() -> () {\n         _2 = f_non_zst::<u64>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:48:9: 48:21\n                                          // mir::Constant\n                                          // + span: $DIR/lower_intrinsics.rs:48:9: 48:18\n-                                         // + literal: Const { ty: fn(u64) {f_non_zst::<u64>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(u64) {f_non_zst::<u64>}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "49e3b9144a59aa925f51bb8d64c6f4d062e0c38b", "filename": "src/test/mir-opt/lower_intrinsics.f_unit.PreCodegen.before.mir", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -6,20 +6,23 @@ fn f_unit() -> () {\n     scope 1 (inlined f_dispatch::<()>) { // at $DIR/lower_intrinsics.rs:34:5: 34:19\n         debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:44:22: 44:23\n         let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n+        let mut _3: ();                  // in scope 1 at $DIR/lower_intrinsics.rs:46:15: 46:16\n         scope 2 (inlined std::mem::size_of::<()>) { // at $DIR/lower_intrinsics.rs:45:8: 45:32\n         }\n     }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:34:16: 34:18\n         StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n-        _2 = f_zst::<()>(const ()) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n+        StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:46:15: 46:16\n+        _2 = f_zst::<()>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n                                          // mir::Constant\n                                          // + span: $DIR/lower_intrinsics.rs:46:9: 46:14\n-                                         // + literal: Const { ty: fn(()) {f_zst::<()>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(()) {f_zst::<()>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n+        StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:46:16: 46:17\n         StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:46:17: 46:18\n         StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:34:18: 34:19\n         return;                          // scope 0 at $DIR/lower_intrinsics.rs:35:2: 35:2"}, {"sha": "6c99e1b7ca6cb1ed48b718414d052f43020a2e74", "filename": "src/test/mir-opt/lower_intrinsics.forget.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -12,7 +12,7 @@\n -         _0 = std::intrinsics::forget::<T>(move _2) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:24:5: 24:32\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:24:5: 24:29\n--                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T) {std::intrinsics::forget::<T>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T) {std::intrinsics::forget::<T>}, val: Value(<ZST>) }\n +         _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:24:5: 24:32\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:24:5: 24:32\n       }"}, {"sha": "41dac17dcb6400037cbd3134f6a82b8aa683e672", "filename": "src/test/mir-opt/lower_intrinsics.non_const.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -14,7 +14,7 @@\n           _1 = std::intrinsics::size_of::<T>; // scope 0 at $DIR/lower_intrinsics.rs:62:21: 62:51\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:62:21: 62:51\n-                                           // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(<ZST>) }\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:63:5: 63:14\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:63:5: 63:14\n -         _0 = move _2() -> bb1;           // scope 1 at $DIR/lower_intrinsics.rs:63:5: 63:16"}, {"sha": "cd6da6f1dc745a62c16c985d324ca670f47a567d", "filename": "src/test/mir-opt/lower_intrinsics.size_of.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -8,7 +8,7 @@\n -         _0 = std::intrinsics::size_of::<T>() -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:14:5: 14:37\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:14:5: 14:35\n--                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(<ZST>) }\n +         _0 = SizeOf(T);                  // scope 0 at $DIR/lower_intrinsics.rs:14:5: 14:37\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:14:5: 14:37\n       }"}, {"sha": "0ce8d85070c70723a9d3f63b26a42aec607be638", "filename": "src/test/mir-opt/lower_intrinsics.unreachable.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -15,7 +15,7 @@\n -         _3 = std::intrinsics::unreachable(); // scope 1 at $DIR/lower_intrinsics.rs:29:14: 29:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:29:14: 29:43\n--                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn() -> ! {std::intrinsics::unreachable}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn() -> ! {std::intrinsics::unreachable}, val: Value(<ZST>) }\n +         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:29:14: 29:45\n       }\n   "}, {"sha": "ebe240121cc5fcb76c4337145ed6ad09bb0ea877", "filename": "src/test/mir-opt/lower_intrinsics.wrapping.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -33,7 +33,7 @@\n -         _3 = wrapping_add::<i32>(move _4, move _5) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:7:14: 7:50\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:7:14: 7:44\n--                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> i32 {wrapping_add::<i32>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> i32 {wrapping_add::<i32>}, val: Value(<ZST>) }\n +         _3 = Add(move _4, move _5);      // scope 0 at $DIR/lower_intrinsics.rs:7:14: 7:50\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:7:14: 7:50\n       }\n@@ -49,7 +49,7 @@\n -         _6 = wrapping_sub::<i32>(move _7, move _8) -> bb2; // scope 1 at $DIR/lower_intrinsics.rs:8:14: 8:50\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:8:14: 8:44\n--                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> i32 {wrapping_sub::<i32>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> i32 {wrapping_sub::<i32>}, val: Value(<ZST>) }\n +         _6 = Sub(move _7, move _8);      // scope 1 at $DIR/lower_intrinsics.rs:8:14: 8:50\n +         goto -> bb2;                     // scope 1 at $DIR/lower_intrinsics.rs:8:14: 8:50\n       }\n@@ -65,7 +65,7 @@\n -         _9 = wrapping_mul::<i32>(move _10, move _11) -> bb3; // scope 2 at $DIR/lower_intrinsics.rs:9:14: 9:50\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:9:14: 9:44\n--                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> i32 {wrapping_mul::<i32>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> i32 {wrapping_mul::<i32>}, val: Value(<ZST>) }\n +         _9 = Mul(move _10, move _11);    // scope 2 at $DIR/lower_intrinsics.rs:9:14: 9:50\n +         goto -> bb3;                     // scope 2 at $DIR/lower_intrinsics.rs:9:14: 9:50\n       }"}, {"sha": "96404f0506cf266d5ffe4c8e4987172fec3b41ad", "filename": "src/test/mir-opt/lower_slice_len.bound.LowerSliceLenCalls.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -23,7 +23,7 @@\n -         _5 = core::slice::<impl [u8]>::len(move _6) -> bb1; // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_slice_len.rs:5:22: 5:25\n--                                          // + literal: Const { ty: for<'r> fn(&'r [u8]) -> usize {core::slice::<impl [u8]>::len}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> fn(&'r [u8]) -> usize {core::slice::<impl [u8]>::len}, val: Value(<ZST>) }\n +         _5 = Len((*_6));                 // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n +         goto -> bb1;                     // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n       }"}, {"sha": "722097630f79b7a0abf8756f849429d4f3e2c225", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -61,7 +61,7 @@ fn full_tested_match() -> () {\n         _7 = guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:14:20: 14:27\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:14:20: 14:25\n-                                         // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() -> bool {guard}, val: Value(<ZST>) }\n     }\n \n     bb6: {"}, {"sha": "df052e32157db38cde62363611df9cf53bb26fc5", "filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -62,7 +62,7 @@ fn full_tested_match2() -> () {\n         _7 = guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:25:20: 25:27\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:25:20: 25:25\n-                                         // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() -> bool {guard}, val: Value(<ZST>) }\n     }\n \n     bb6: {"}, {"sha": "fc50db397fdcf1ea7c1072107b3144504886a58d", "filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -70,7 +70,7 @@ fn main() -> () {\n         _8 = guard() -> [return: bb6, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:34:21: 34:28\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:34:21: 34:26\n-                                         // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() -> bool {guard}, val: Value(<ZST>) }\n     }\n \n     bb6: {\n@@ -113,7 +113,7 @@ fn main() -> () {\n         _12 = guard2(move _13) -> [return: bb11, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:36:20: 36:29\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:36:20: 36:26\n-                                         // + literal: Const { ty: fn(i32) -> bool {guard2}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(i32) -> bool {guard2}, val: Value(<ZST>) }\n     }\n \n     bb11: {"}, {"sha": "e1d870ef9a4e97362a6f22b5554dcd31a5ed16c5", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -70,30 +70,30 @@ fn main() -> () {\n         StorageLive(_8);                 // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n         StorageLive(_9);                 // bb2[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n         _9 = (*_6);                      // bb2[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = ConstValue(Scalar(<ZST>): fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        _8 = ConstValue(ZeroSized: fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n-                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n         StorageDead(_9);                 // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n         StorageDead(_8);                 // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const ConstValue(Scalar(<ZST>): ()); // bb3[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+        _0 = const ConstValue(ZeroSized: ()); // bb3[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n         goto -> bb6;                     // bb3[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb4: {\n         StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = ConstValue(Scalar(<ZST>): fn(usize) -> bool {use_x})(const ConstValue(Scalar(0x00000016): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = ConstValue(ZeroSized: fn(usize) -> bool {use_x})(const ConstValue(Scalar(0x00000016): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n-                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(<ZST>) }\n     }\n \n     bb5: {\n         StorageDead(_10);                // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n-        _0 = const ConstValue(Scalar(<ZST>): ()); // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n+        _0 = const ConstValue(ZeroSized: ()); // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n         goto -> bb6;                     // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n "}, {"sha": "2f9dff00b631b4b79b83fd72f2d4b869e194c9eb", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -70,30 +70,30 @@ fn main() -> () {\n         StorageLive(_8);                 // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n         StorageLive(_9);                 // bb2[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n         _9 = (*_6);                      // bb2[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = ConstValue(Scalar(<ZST>): fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        _8 = ConstValue(ZeroSized: fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n-                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n         StorageDead(_9);                 // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n         StorageDead(_8);                 // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const ConstValue(Scalar(<ZST>): ()); // bb3[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+        _0 = const ConstValue(ZeroSized: ()); // bb3[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n         goto -> bb6;                     // bb3[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb4: {\n         StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = ConstValue(Scalar(<ZST>): fn(usize) -> bool {use_x})(const ConstValue(Scalar(0x0000000000000016): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = ConstValue(ZeroSized: fn(usize) -> bool {use_x})(const ConstValue(Scalar(0x0000000000000016): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n-                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(<ZST>) }\n     }\n \n     bb5: {\n         StorageDead(_10);                // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n-        _0 = const ConstValue(Scalar(<ZST>): ()); // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n+        _0 = const ConstValue(ZeroSized: ()); // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n         goto -> bb6;                     // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n "}, {"sha": "fda6cd6120771b3f1913636db8cedfdbbc617288", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -23,7 +23,7 @@ fn unwrap(_1: Option<T>) -> T {\n         _4 = begin_panic::<&str>(const \"explicit panic\") -> bb4; // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }"}, {"sha": "0c814fd9d8dda43d7cfe0a44879dc6061bb98092", "filename": "src/test/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -20,15 +20,15 @@ fn main() -> () {\n         _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:23: 9:32\n-                                         // + literal: Const { ty: for<'r> fn(&'r str) -> String {<str as ToString>::to_string}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: for<'r> fn(&'r str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n         StorageDead(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:33: 9:34\n         _1 = std::mem::drop::<String>(move _2) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:5: 9:19\n-                                         // + literal: Const { ty: fn(String) {std::mem::drop::<String>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(String) {std::mem::drop::<String>}, val: Value(<ZST>) }\n     }\n \n     bb2: {"}, {"sha": "8ee81e679ec47bc442eb79d91950f9f395e44894", "filename": "src/test/mir-opt/receiver_ptr_mutability.main.mir_map.0.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -32,7 +32,7 @@ fn main() -> () {\n         _1 = null_mut::<Test>() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/receiver-ptr-mutability.rs:14:26: 14:46\n                                          // mir::Constant\n                                          // + span: $DIR/receiver-ptr-mutability.rs:14:26: 14:44\n-                                         // + literal: Const { ty: fn() -> *mut Test {null_mut::<Test>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() -> *mut Test {null_mut::<Test>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n@@ -47,7 +47,7 @@ fn main() -> () {\n         _2 = Test::x(move _3) -> [return: bb2, unwind: bb4]; // scope 1 at $DIR/receiver-ptr-mutability.rs:15:5: 15:12\n                                          // mir::Constant\n                                          // + span: $DIR/receiver-ptr-mutability.rs:15:9: 15:10\n-                                         // + literal: Const { ty: fn(*const Test) {Test::x}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(*const Test) {Test::x}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n@@ -75,7 +75,7 @@ fn main() -> () {\n         _10 = Test::x(move _11) -> [return: bb3, unwind: bb4]; // scope 2 at $DIR/receiver-ptr-mutability.rs:19:5: 19:16\n                                          // mir::Constant\n                                          // + span: $DIR/receiver-ptr-mutability.rs:19:13: 19:14\n-                                         // + literal: Const { ty: fn(*const Test) {Test::x}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(*const Test) {Test::x}, val: Value(<ZST>) }\n     }\n \n     bb3: {"}, {"sha": "b2bfe4280b0afa48d9271ad5b0ea64f6335cb4f6", "filename": "src/test/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -60,7 +60,7 @@\n           _7 = <std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next(move _14) -> bb4; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }\n       }\n   \n       bb2: {"}, {"sha": "05e83b13a50c464753bfdad70bd041c3660a6ab9", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -81,7 +81,7 @@ fn array_casts() -> () {\n         _6 = ptr::mut_ptr::<impl *mut usize>::add(move _7, const 1_usize) -> bb1; // scope 3 at $DIR/retag.rs:60:15: 60:23\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:60:17: 60:20\n-                                         // + literal: Const { ty: unsafe fn(*mut usize, usize) -> *mut usize {ptr::mut_ptr::<impl *mut usize>::add}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: unsafe fn(*mut usize, usize) -> *mut usize {ptr::mut_ptr::<impl *mut usize>::add}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n@@ -112,7 +112,7 @@ fn array_casts() -> () {\n         _16 = ptr::const_ptr::<impl *const usize>::add(move _17, const 1_usize) -> bb2; // scope 6 at $DIR/retag.rs:64:26: 64:34\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:64:28: 64:31\n-                                         // + literal: Const { ty: unsafe fn(*const usize, usize) -> *const usize {ptr::const_ptr::<impl *const usize>::add}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: unsafe fn(*const usize, usize) -> *const usize {ptr::const_ptr::<impl *const usize>::add}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n@@ -176,7 +176,7 @@ fn array_casts() -> () {\n         _28 = core::panicking::assert_failed::<usize, usize>(move _29, move _30, move _32, move _34); // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }\n     }\n \n     bb4: {"}, {"sha": "8057aa13a9ffbf7d1aaaa5165bdd22b8a93a1b12", "filename": "src/test/mir-opt/retag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -11,7 +11,7 @@ fn std::ptr::drop_in_place(_1: *mut Test) -> () {\n         _3 = <Test as Drop>::drop(move _2) -> bb1; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r> fn(&'r mut Test) {<Test as Drop>::drop}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: for<'r> fn(&'r mut Test) {<Test as Drop>::drop}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "a3490d460ec547586ce86fe139f1172b0ad1fa5e", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -74,7 +74,7 @@ fn main() -> () {\n         _3 = Test::foo(move _4, move _6) -> [return: bb1, unwind: bb8]; // scope 1 at $DIR/retag.rs:32:17: 32:36\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:32:25: 32:28\n-                                         // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n@@ -159,7 +159,7 @@ fn main() -> () {\n         _19 = Test::foo_shr(move _20, move _22) -> [return: bb4, unwind: bb7]; // scope 7 at $DIR/retag.rs:47:5: 47:24\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:13: 47:20\n-                                         // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n@@ -183,7 +183,7 @@ fn main() -> () {\n         _27 = array_casts() -> bb6;      // scope 8 at $DIR/retag.rs:52:5: 52:18\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:52:5: 52:16\n-                                         // + literal: Const { ty: fn() {array_casts}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() {array_casts}, val: Value(<ZST>) }\n     }\n \n     bb6: {"}, {"sha": "6d41d5b7437f5450b0b22b1cdd1b2fb0eca00fb8", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-early-opt.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -21,7 +21,7 @@\n +         _2 = bar() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:9:12: 9:15\n-                                           // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> bool {bar}, val: Value(<ZST>) }\n       }\n   \n -     bb3: {"}, {"sha": "78841d28b85b18f690d09b9c922c5ec54123158f", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -22,7 +22,7 @@\n +         _2 = bar() -> [return: bb3, unwind: bb6]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:9:12: 9:15\n-                                           // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> bool {bar}, val: Value(<ZST>) }\n       }\n   \n       bb3: {"}, {"sha": "f729b53b20410959f8e93bfe82c2881e9aacc452", "filename": "src/test/mir-opt/simplify_if.main.SimplifyConstCondition-after-const-prop.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -18,7 +18,7 @@\n           _2 = noop() -> bb2;              // scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_if.rs:7:9: 7:13\n-                                           // + literal: Const { ty: fn() {noop}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() {noop}, val: Value(<ZST>) }\n       }\n   \n       bb2: {"}, {"sha": "f4f1b9d4eb87e564a761df6cc590ce56fc00058f", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -15,7 +15,8 @@\n -     let mut _10: u8;                     // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -     let mut _11: Temp;                   // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n +     let _1: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n-+     let _2: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n++     let mut _2: ((), ());                // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n++     let _3: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n       scope 1 {\n       }\n   \n@@ -32,12 +33,13 @@\n -         StorageLive(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n -         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n -         StorageDead(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n--         _4 = use_zst(const ((), ())) -> bb1; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n+-         _4 = use_zst(move _5) -> bb1;    // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n +         StorageLive(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n-+         _1 = use_zst(const ((), ())) -> bb1; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n++         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n++         _1 = use_zst(move _2) -> bb1;    // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:12\n-                                           // + literal: Const { ty: fn(((), ())) {use_zst}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(((), ())) {use_zst}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -49,19 +51,20 @@\n -         StorageLive(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n -         StorageDead(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:33: 16:34\n -         _8 = use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n++         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:21: 14:22\n +         StorageDead(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n-+         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n-+         _2 = use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n++         StorageLive(_3);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n++         _3 = use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:11\n-                                           // + literal: Const { ty: fn(u8) {use_u8}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn(u8) {use_u8}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n -         StorageDead(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:34: 16:35\n -         StorageDead(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n -         StorageDead(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n-+         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n++         StorageDead(_3);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:17:2: 17:2\n       }\n   }"}, {"sha": "6314abe6f39db7a6297f8d5496cdf31656d94b2f", "filename": "src/test/mir-opt/simplify_match.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -29,7 +29,7 @@\n           _0 = noop() -> bb3;              // scope 0 at $DIR/simplify_match.rs:7:17: 7:23\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_match.rs:7:17: 7:21\n-                                           // + literal: Const { ty: fn() {noop}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() {noop}, val: Value(<ZST>) }\n       }\n   \n       bb3: {"}, {"sha": "d36d369003a63954fd1cb9f0aba499b627446827", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -33,7 +33,7 @@ fn move_out_by_subslice() -> () {\n         _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:11:14: 11:19\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n@@ -52,7 +52,7 @@ fn move_out_by_subslice() -> () {\n         _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:11:21: 11:26\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n     }\n \n     bb3: {"}, {"sha": "e6c8b66c25af0c2a87d2fca3fd7eb068a8c0db30", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -33,7 +33,7 @@ fn move_out_from_end() -> () {\n         _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:5:14: 5:19\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n@@ -52,7 +52,7 @@ fn move_out_from_end() -> () {\n         _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:5:21: 5:26\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n     }\n \n     bb3: {"}, {"sha": "5aa4f1b3432496f5cc3ff3061b413626e889c742", "filename": "src/test/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -22,7 +22,7 @@\n           _1 = empty() -> bb1;             // scope 1 at $DIR/unreachable.rs:9:23: 9:30\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable.rs:9:23: 9:28\n-                                           // + literal: Const { ty: fn() -> Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> Option<Empty> {empty}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "b95ab881ef05de423cecf780cbf79d22b96689f6", "filename": "src/test/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -24,7 +24,7 @@\n           _2 = empty() -> bb1;             // scope 2 at $DIR/unreachable_diverging.rs:14:25: 14:32\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:14:25: 14:30\n-                                           // + literal: Const { ty: fn() -> Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> Option<Empty> {empty}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -48,7 +48,7 @@\n +         _5 = loop_forever() -> bb4;      // scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:16:13: 16:25\n-                                           // + literal: Const { ty: fn() {loop_forever}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() {loop_forever}, val: Value(<ZST>) }\n       }\n   \n       bb4: {"}, {"sha": "54ecaccdb4fb8d4e30576ae0db8cb35f8c641517", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -34,6 +34,6 @@ fn std::ptr::drop_in_place(_1: *mut Vec<i32>) -> () {\n         _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r> fn(&'r mut Vec<i32>) {<Vec<i32> as Drop>::drop}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: for<'r> fn(&'r mut Vec<i32>) {<Vec<i32> as Drop>::drop}, val: Value(<ZST>) }\n     }\n }"}, {"sha": "54ecaccdb4fb8d4e30576ae0db8cb35f8c641517", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -34,6 +34,6 @@ fn std::ptr::drop_in_place(_1: *mut Vec<i32>) -> () {\n         _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r> fn(&'r mut Vec<i32>) {<Vec<i32> as Drop>::drop}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: for<'r> fn(&'r mut Vec<i32>) {<Vec<i32> as Drop>::drop}, val: Value(<ZST>) }\n     }\n }"}, {"sha": "f1c5d95df1903044727aac04da74309544ef33a0", "filename": "src/test/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -19,7 +19,7 @@ fn while_loop(_1: bool) -> () {\n         _2 = get_bool(move _3) -> bb2;   // scope 0 at $DIR/while-storage.rs:10:11: 10:22\n                                          // mir::Constant\n                                          // + span: $DIR/while-storage.rs:10:11: 10:19\n-                                         // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n@@ -34,7 +34,7 @@ fn while_loop(_1: bool) -> () {\n         _4 = get_bool(move _5) -> bb4;   // scope 0 at $DIR/while-storage.rs:11:12: 11:23\n                                          // mir::Constant\n                                          // + span: $DIR/while-storage.rs:11:12: 11:20\n-                                         // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(<ZST>) }\n     }\n \n     bb4: {"}, {"sha": "ab4084c952a3d69df656e581d8f132520ac16815", "filename": "src/test/run-make/const_fn_mir/dump.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aaf1f448dd9808a94e98dffe4c1176c388e0d/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir?ref=4e7aaf1f448dd9808a94e98dffe4c1176c388e0d", "patch": "@@ -33,7 +33,7 @@ fn main() -> () {\n         _1 = foo() -> bb1;               // scope 0 at main.rs:9:5: 9:10\n                                          // mir::Constant\n                                          // + span: main.rs:9:5: 9:8\n-                                         // + literal: Const { ty: fn() -> i32 {foo}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() -> i32 {foo}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}]}