{"sha": "59af2ac098ae6bb927799dfec03e9bb9934ccb8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YWYyYWMwOThhZTZiYjkyNzc5OWRmZWMwM2U5YmI5OTM0Y2NiOGY=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-05-22T06:11:59Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-08-07T07:36:48Z"}, "message": "typeck: suggest (x.field)(...) to call struct fields even when x is a reference\n\nFixes: #33784", "tree": {"sha": "4b6aace7e68a42528832fdff3621aba7151b90e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b6aace7e68a42528832fdff3621aba7151b90e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59af2ac098ae6bb927799dfec03e9bb9934ccb8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59af2ac098ae6bb927799dfec03e9bb9934ccb8f", "html_url": "https://github.com/rust-lang/rust/commit/59af2ac098ae6bb927799dfec03e9bb9934ccb8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59af2ac098ae6bb927799dfec03e9bb9934ccb8f/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "877dfeb572e330026fc4b4114f16a411c44dc328", "url": "https://api.github.com/repos/rust-lang/rust/commits/877dfeb572e330026fc4b4114f16a411c44dc328", "html_url": "https://github.com/rust-lang/rust/commit/877dfeb572e330026fc4b4114f16a411c44dc328"}], "stats": {"total": 94, "additions": 74, "deletions": 20}, "files": [{"sha": "54521782474fe05ac1e8b15ae5e0fec19a193def", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/59af2ac098ae6bb927799dfec03e9bb9934ccb8f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59af2ac098ae6bb927799dfec03e9bb9934ccb8f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=59af2ac098ae6bb927799dfec03e9bb9934ccb8f", "patch": "@@ -162,26 +162,34 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     },\n                     rcvr_ty);\n \n-                // If the item has the name of a field, give a help note\n-                if let (&ty::TyStruct(def, substs), Some(expr)) = (&rcvr_ty.sty, rcvr_expr) {\n-                    if let Some(field) = def.struct_variant().find_field_named(item_name) {\n-                        let expr_string = match tcx.sess.codemap().span_to_snippet(expr.span) {\n-                            Ok(expr_string) => expr_string,\n-                            _ => \"s\".into() // Default to a generic placeholder for the\n-                                            // expression when we can't generate a string\n-                                            // snippet\n-                        };\n-\n-                        let field_ty = field.ty(tcx, substs);\n-\n-                        if self.is_fn_ty(&field_ty, span) {\n-                            err.span_note(span,\n-                                          &format!(\"use `({0}.{1})(...)` if you meant to call \\\n-                                                   the function stored in the `{1}` field\",\n-                                                   expr_string, item_name));\n-                        } else {\n-                            err.span_note(span, &format!(\"did you mean to write `{0}.{1}`?\",\n-                                                         expr_string, item_name));\n+                // If the method name is the name of a field with a function or closure type,\n+                // give a helping note that it has to be called as (x.f)(...).\n+                if let Some(expr) = rcvr_expr {\n+                    for (ty, _) in self.autoderef(span, rcvr_ty) {\n+                        if let ty::TyStruct(def, substs) = ty.sty {\n+                            if let Some(field) = def.struct_variant().find_field_named(item_name) {\n+                                let snippet = tcx.sess.codemap().span_to_snippet(expr.span);\n+                                let expr_string = match snippet {\n+                                    Ok(expr_string) => expr_string,\n+                                    _ => \"s\".into() // Default to a generic placeholder for the\n+                                                    // expression when we can't generate a\n+                                                    // string snippet\n+                                };\n+\n+                                let field_ty = field.ty(tcx, substs);\n+\n+                                if self.is_fn_ty(&field_ty, span) {\n+                                    err.span_note(span, &format!(\n+                                        \"use `({0}.{1})(...)` if you meant to call the function \\\n+                                         stored in the `{1}` field\",\n+                                        expr_string, item_name));\n+                                } else {\n+                                    err.span_note(span, &format!(\n+                                        \"did you mean to write `{0}.{1}`?\",\n+                                        expr_string, item_name));\n+                                }\n+                                break;\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "4229be29473dbc1dd229e8eb278d43905356009b", "filename": "src/test/compile-fail/issue-33784.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/59af2ac098ae6bb927799dfec03e9bb9934ccb8f/src%2Ftest%2Fcompile-fail%2Fissue-33784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59af2ac098ae6bb927799dfec03e9bb9934ccb8f/src%2Ftest%2Fcompile-fail%2Fissue-33784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-33784.rs?ref=59af2ac098ae6bb927799dfec03e9bb9934ccb8f", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::Deref;\n+\n+struct Obj<F> where F: FnMut() -> u32 {\n+    fn_ptr: fn() -> (),\n+    closure: F,\n+}\n+\n+struct C {\n+    c_fn_ptr: fn() -> (),\n+}\n+\n+struct D(C);\n+\n+impl Deref for D {\n+    type Target = C;\n+    fn deref(&self) -> &C {\n+        &self.0\n+    }\n+}\n+\n+\n+fn empty() {}\n+\n+fn main() {\n+    let o = Obj { fn_ptr: empty, closure: || 42 };\n+    let p = &o;\n+    p.closure(); //~ ERROR no method named `closure` found\n+    //~^ NOTE use `(p.closure)(...)` if you meant to call the function stored in the `closure` field\n+    let q = &p;\n+    q.fn_ptr(); //~ ERROR no method named `fn_ptr` found\n+    //~^ NOTE use `(q.fn_ptr)(...)` if you meant to call the function stored in the `fn_ptr` field\n+    let r = D(C { c_fn_ptr: empty });\n+    let s = &r;\n+    s.c_fn_ptr(); //~ ERROR no method named `c_fn_ptr` found\n+    //~^ NOTE use `(s.c_fn_ptr)(...)` if you meant to call the function stored in the `c_fn_ptr`\n+}"}]}