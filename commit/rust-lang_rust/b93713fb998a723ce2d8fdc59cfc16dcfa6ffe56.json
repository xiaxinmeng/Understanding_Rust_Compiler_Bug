{"sha": "b93713fb998a723ce2d8fdc59cfc16dcfa6ffe56", "node_id": "C_kwDOAAsO6NoAKGI5MzcxM2ZiOTk4YTcyM2NlMmQ4ZmRjNTljZmMxNmRjZmE2ZmZlNTY", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-10-19T08:10:02Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-10-19T08:15:46Z"}, "message": "manually inline and rm `visit_abstract_const_expr`", "tree": {"sha": "7720defd93d6994e4fba2a17c2e2c3cb79ebc392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7720defd93d6994e4fba2a17c2e2c3cb79ebc392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b93713fb998a723ce2d8fdc59cfc16dcfa6ffe56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b93713fb998a723ce2d8fdc59cfc16dcfa6ffe56", "html_url": "https://github.com/rust-lang/rust/commit/b93713fb998a723ce2d8fdc59cfc16dcfa6ffe56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b93713fb998a723ce2d8fdc59cfc16dcfa6ffe56/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5c6ef702978d880decf14d9e7ed319e5b005537", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c6ef702978d880decf14d9e7ed319e5b005537", "html_url": "https://github.com/rust-lang/rust/commit/c5c6ef702978d880decf14d9e7ed319e5b005537"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "2636db6dbe1a77b6113089c778029a22e9c1ca81", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b93713fb998a723ce2d8fdc59cfc16dcfa6ffe56/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b93713fb998a723ce2d8fdc59cfc16dcfa6ffe56/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=b93713fb998a723ce2d8fdc59cfc16dcfa6ffe56", "patch": "@@ -165,20 +165,6 @@ where\n         }\n     }\n \n-    fn visit_abstract_const_expr(\n-        &mut self,\n-        tcx: TyCtxt<'tcx>,\n-        ct: AbstractConst<'tcx>,\n-    ) -> ControlFlow<V::BreakTy> {\n-        walk_abstract_const(tcx, ct, |node| match node.root(tcx) {\n-            ACNode::Leaf(leaf) => self.visit_const(leaf),\n-            ACNode::Cast(_, _, ty) => self.visit_ty(ty),\n-            ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {\n-                ControlFlow::CONTINUE\n-            }\n-        })\n-    }\n-\n     fn visit_predicates(\n         &mut self,\n         predicates: ty::GenericPredicates<'tcx>,\n@@ -301,9 +287,16 @@ where\n         self.visit_ty(c.ty())?;\n         let tcx = self.def_id_visitor.tcx();\n         if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {\n-            self.visit_abstract_const_expr(tcx, ct)?;\n+            walk_abstract_const(tcx, ct, |node| match node.root(tcx) {\n+                ACNode::Leaf(leaf) => self.visit_const(leaf),\n+                ACNode::Cast(_, _, ty) => self.visit_ty(ty),\n+                ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {\n+                    ControlFlow::CONTINUE\n+                }\n+            })\n+        } else {\n+            ControlFlow::CONTINUE\n         }\n-        ControlFlow::CONTINUE\n     }\n }\n "}]}