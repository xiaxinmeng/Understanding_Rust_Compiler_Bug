{"sha": "4bbaa72dc92ca385b2595f6a072b96f36fa4a1ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYmFhNzJkYzkyY2EzODViMjU5NWY2YTA3MmI5NmYzNmZhNGExZWY=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-11-07T19:50:16Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-11-07T19:50:16Z"}, "message": "Use TryFrom instead", "tree": {"sha": "d46584480c8e2d6110226a6394c6e9cb71ed73a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d46584480c8e2d6110226a6394c6e9cb71ed73a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bbaa72dc92ca385b2595f6a072b96f36fa4a1ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbaa72dc92ca385b2595f6a072b96f36fa4a1ef", "html_url": "https://github.com/rust-lang/rust/commit/4bbaa72dc92ca385b2595f6a072b96f36fa4a1ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bbaa72dc92ca385b2595f6a072b96f36fa4a1ef/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f910ea135c0cbfec4dd10adf2a79163e1b8935f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f910ea135c0cbfec4dd10adf2a79163e1b8935f3", "html_url": "https://github.com/rust-lang/rust/commit/f910ea135c0cbfec4dd10adf2a79163e1b8935f3"}], "stats": {"total": 33, "additions": 11, "deletions": 22}, "files": [{"sha": "dd0530cf48b4e7970dbed0f3fdb681ca004879b9", "filename": "src/helpers.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4bbaa72dc92ca385b2595f6a072b96f36fa4a1ef/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbaa72dc92ca385b2595f6a072b96f36fa4a1ef/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=4bbaa72dc92ca385b2595f6a072b96f36fa4a1ef", "patch": "@@ -1,6 +1,5 @@\n use std::{mem, iter};\n use std::ffi::{OsStr, OsString};\n-use std::convert::TryFrom;\n \n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::mir;\n@@ -460,16 +459,3 @@ fn bytes_to_os_str<'tcx, 'a>(bytes: &'a[u8]) -> InterpResult<'tcx, &'a OsStr> {\n         .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n     Ok(&OsStr::new(s))\n }\n-\n-pub fn try_into_host_usize(i: impl Into<u128>) -> Option<usize> {\n-    let i: u128 = i.into();\n-    if i > usize::max_value() as u128 {\n-        None\n-    } else {\n-        Some(i as usize)\n-    }\n-}\n-\n-pub fn try_from_host_usize<T: TryFrom<u128>>(i: usize) -> Option<T> {\n-    T::try_from(i as u128).ok()\n-}"}, {"sha": "8b2452d33d476c31d5d7fe030de4c186c2604fbe", "filename": "src/shims/fs.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4bbaa72dc92ca385b2595f6a072b96f36fa4a1ef/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbaa72dc92ca385b2595f6a072b96f36fa4a1ef/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=4bbaa72dc92ca385b2595f6a072b96f36fa4a1ef", "patch": "@@ -1,6 +1,7 @@\n use std::collections::HashMap;\n use std::fs::{remove_file, File, OpenOptions};\n use std::io::{Read, Write};\n+use std::convert::TryFrom;\n \n use rustc::ty::layout::Size;\n \n@@ -174,16 +175,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let buf = this.read_scalar(buf_op)?.not_undef()?;\n \n         if let Some(handle) = this.machine.file_handler.handles.get_mut(&fd) {\n-            let count = helpers::try_into_host_usize(count)\n-                .ok_or_else(|| err_unsup_format!(\"Program tries to read into buffer too big for this host platform\"))?;\n-            // We want to read at most `count` bytes\n-            let mut bytes = vec![0; count];\n+            let count = isize::try_from(count)\n+                .map_err(|_| err_unsup_format!(\"Program tries to read into buffer too big for this host platform\"))?;\n+            // We want to read at most `count` bytes. We are sure that `count` is not negative\n+            // because it was a target's `usize`. Also we are sure that its smaller than\n+            // `usize::max_value()` because it is a host's `isize`.\n+            let mut bytes = vec![0; count as usize];\n             let result = handle.file.read(&mut bytes);\n \n             match result {\n                 Ok(c) => {\n-                    let read_bytes = helpers::try_from_host_usize::<i64>(c)\n-                        .ok_or_else(|| err_unsup_format!(\"Number of read bytes {} cannot be transformed to i64\", c))?;\n+                    let read_bytes = i64::try_from(c)\n+                        .map_err(|_| err_unsup_format!(\"Number of read bytes {} cannot be transformed to i64\", c))?;\n                     // If reading to `bytes` did not fail, we write those bytes to the buffer.\n                     this.memory.write_bytes(buf, bytes)?;\n                     Ok(read_bytes)\n@@ -221,8 +224,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let result = handle.file.write(&bytes);\n \n             match result {\n-                Ok(c) => helpers::try_from_host_usize::<i64>(c)\n-                    .ok_or_else(|| err_unsup_format!(\"Number of written bytes {} cannot be transformed to i64\", c).into()),\n+                Ok(c) => i64::try_from(c)\n+                    .map_err(|_| err_unsup_format!(\"Number of written bytes {} cannot be transformed to i64\", c).into()),\n                 Err(e) => {\n                     this.set_last_error_from_io_error(e)?;\n                     Ok(-1)"}]}