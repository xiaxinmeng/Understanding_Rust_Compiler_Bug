{"sha": "8a62bb1a1d2ab3f937192c80794252716920c4f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNjJiYjFhMWQyYWIzZjkzNzE5MmM4MDc5NDI1MjcxNjkyMGM0ZjA=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-25T03:02:24Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-29T19:23:07Z"}, "message": "Rename `nodes_len` and use it in a few more places.", "tree": {"sha": "fe9714fc1e9baa8bb844f5b7494c7225545fd17d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe9714fc1e9baa8bb844f5b7494c7225545fd17d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a62bb1a1d2ab3f937192c80794252716920c4f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a62bb1a1d2ab3f937192c80794252716920c4f0", "html_url": "https://github.com/rust-lang/rust/commit/8a62bb1a1d2ab3f937192c80794252716920c4f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a62bb1a1d2ab3f937192c80794252716920c4f0/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e67f19eee97e9afb4d030b1949dc8084da64067", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e67f19eee97e9afb4d030b1949dc8084da64067", "html_url": "https://github.com/rust-lang/rust/commit/9e67f19eee97e9afb4d030b1949dc8084da64067"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "1aac3ef314b23c0234bf91fda81054f10682add1", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a62bb1a1d2ab3f937192c80794252716920c4f0/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a62bb1a1d2ab3f937192c80794252716920c4f0/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=8a62bb1a1d2ab3f937192c80794252716920c4f0", "patch": "@@ -599,9 +599,9 @@ impl<O: ForestObligation> ObligationForest<O> {\n     /// on these nodes may be present. This is done by e.g., `process_cycles`.\n     #[inline(never)]\n     fn compress(&mut self, do_completed: DoCompleted) -> Option<Vec<O>> {\n-        let nodes_len = self.nodes.len();\n+        let orig_nodes_len = self.nodes.len();\n         let mut node_rewrites: Vec<_> = self.node_rewrites.replace(vec![]);\n-        node_rewrites.extend(0..nodes_len);\n+        node_rewrites.extend(0..orig_nodes_len);\n         let mut dead_nodes = 0;\n \n         // Now move all popped nodes to the end. Try to keep the order.\n@@ -610,7 +610,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n         //     self.nodes[0..index - dead_nodes] are the first remaining nodes\n         //     self.nodes[index - dead_nodes..index] are all dead\n         //     self.nodes[index..] are unchanged\n-        for index in 0..self.nodes.len() {\n+        for index in 0..orig_nodes_len {\n             let node = &self.nodes[index];\n             match node.state.get() {\n                 NodeState::Pending | NodeState::Waiting => {\n@@ -631,15 +631,15 @@ impl<O: ForestObligation> ObligationForest<O> {\n                     } else {\n                         self.done_cache.insert(node.obligation.as_predicate().clone());\n                     }\n-                    node_rewrites[index] = nodes_len;\n+                    node_rewrites[index] = orig_nodes_len;\n                     dead_nodes += 1;\n                 }\n                 NodeState::Error => {\n                     // We *intentionally* remove the node from the cache at this point. Otherwise\n                     // tests must come up with a different type on every type error they\n                     // check against.\n                     self.active_cache.remove(node.obligation.as_predicate());\n-                    node_rewrites[index] = nodes_len;\n+                    node_rewrites[index] = orig_nodes_len;\n                     dead_nodes += 1;\n                     self.insert_into_error_cache(index);\n                 }\n@@ -667,7 +667,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n                 })\n                 .collect())\n         } else {\n-            self.nodes.truncate(self.nodes.len() - dead_nodes);\n+            self.nodes.truncate(orig_nodes_len - dead_nodes);\n             None\n         };\n         self.apply_rewrites(&node_rewrites);\n@@ -679,13 +679,13 @@ impl<O: ForestObligation> ObligationForest<O> {\n     }\n \n     fn apply_rewrites(&mut self, node_rewrites: &[usize]) {\n-        let nodes_len = node_rewrites.len();\n+        let orig_nodes_len = node_rewrites.len();\n \n         for node in &mut self.nodes {\n             let mut i = 0;\n             while i < node.dependents.len() {\n                 let new_index = node_rewrites[node.dependents[i]];\n-                if new_index >= nodes_len {\n+                if new_index >= orig_nodes_len {\n                     node.dependents.swap_remove(i);\n                     if i == 0 && node.has_parent {\n                         // We just removed the parent.\n@@ -702,7 +702,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n         // removal of nodes within `compress` can fail. See above.\n         self.active_cache.retain(|_predicate, index| {\n             let new_index = node_rewrites[*index];\n-            if new_index >= nodes_len {\n+            if new_index >= orig_nodes_len {\n                 false\n             } else {\n                 *index = new_index;"}]}