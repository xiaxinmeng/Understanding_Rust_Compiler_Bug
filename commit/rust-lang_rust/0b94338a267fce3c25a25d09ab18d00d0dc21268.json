{"sha": "0b94338a267fce3c25a25d09ab18d00d0dc21268", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOTQzMzhhMjY3ZmNlM2MyNWEyNWQwOWFiMThkMDBkMGRjMjEyNjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-04T11:43:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-04T11:56:31Z"}, "message": "CTFE engine: rename copy \u2192 copy_intrinsic, move to intrinsics.rs", "tree": {"sha": "9c809e14a9c7c0ee50ab00127a6ab52d393789bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c809e14a9c7c0ee50ab00127a6ab52d393789bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b94338a267fce3c25a25d09ab18d00d0dc21268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b94338a267fce3c25a25d09ab18d00d0dc21268", "html_url": "https://github.com/rust-lang/rust/commit/0b94338a267fce3c25a25d09ab18d00d0dc21268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b94338a267fce3c25a25d09ab18d00d0dc21268/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a0f1781d04662041db5deaef89598a8edd53717", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0f1781d04662041db5deaef89598a8edd53717", "html_url": "https://github.com/rust-lang/rust/commit/7a0f1781d04662041db5deaef89598a8edd53717"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "292306f6cde6ee5c1df7eb03753cdd6575bc582f", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0b94338a267fce3c25a25d09ab18d00d0dc21268/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b94338a267fce3c25a25d09ab18d00d0dc21268/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=0b94338a267fce3c25a25d09ab18d00d0dc21268", "patch": "@@ -323,7 +323,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_scalar(result, dest)?;\n             }\n             sym::copy => {\n-                self.copy(&args[0], &args[1], &args[2], /*nonoverlapping*/ false)?;\n+                self.copy_intrinsic(&args[0], &args[1], &args[2], /*nonoverlapping*/ false)?;\n             }\n             sym::offset => {\n                 let ptr = self.read_scalar(&args[0])?.check_init()?;\n@@ -530,4 +530,36 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         )?;\n         Ok(offset_ptr)\n     }\n+\n+    /// Copy `count*size_of::<T>()` many bytes from `*src` to `*dst`.\n+    pub(crate) fn copy_intrinsic(\n+        &mut self,\n+        src: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        dst: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        count: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        nonoverlapping: bool,\n+    ) -> InterpResult<'tcx> {\n+        let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n+        let layout = self.layout_of(src.layout.ty.builtin_deref(true).unwrap().ty)?;\n+        let (size, align) = (layout.size, layout.align.abi);\n+        let size = size.checked_mul(count, self).ok_or_else(|| {\n+            err_ub_format!(\n+                \"overflow computing total size of `{}`\",\n+                if nonoverlapping { \"copy_nonoverlapping\" } else { \"copy\" }\n+            )\n+        })?;\n+\n+        // Make sure we check both pointers for an access of the total size and aligment,\n+        // *even if* the total size is 0.\n+        let src =\n+            self.memory.check_ptr_access(self.read_scalar(&src)?.check_init()?, size, align)?;\n+\n+        let dst =\n+            self.memory.check_ptr_access(self.read_scalar(&dst)?.check_init()?, size, align)?;\n+\n+        if let (Some(src), Some(dst)) = (src, dst) {\n+            self.memory.copy(src, dst, size, nonoverlapping)?;\n+        }\n+        Ok(())\n+    }\n }"}, {"sha": "5a10ffe6d6199c92032cf5ed3884147b19324352", "filename": "compiler/rustc_mir/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0b94338a267fce3c25a25d09ab18d00d0dc21268/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b94338a267fce3c25a25d09ab18d00d0dc21268/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs?ref=0b94338a267fce3c25a25d09ab18d00d0dc21268", "patch": "@@ -2,7 +2,6 @@\n //!\n //! The main entry point is the `step` method.\n \n-use crate::interpret::OpTy;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n use rustc_target::abi::LayoutOf;\n@@ -119,7 +118,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let src = self.eval_operand(src, None)?;\n                 let dst = self.eval_operand(dst, None)?;\n                 let count = self.eval_operand(count, None)?;\n-                self.copy(&src, &dst, &count, /* nonoverlapping */ true)?;\n+                self.copy_intrinsic(&src, &dst, &count, /* nonoverlapping */ true)?;\n             }\n \n             // Statements we do not track.\n@@ -149,37 +148,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    pub(crate) fn copy(\n-        &mut self,\n-        src: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n-        dst: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n-        count: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n-        nonoverlapping: bool,\n-    ) -> InterpResult<'tcx> {\n-        let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n-        let layout = self.layout_of(src.layout.ty.builtin_deref(true).unwrap().ty)?;\n-        let (size, align) = (layout.size, layout.align.abi);\n-        let size = size.checked_mul(count, self).ok_or_else(|| {\n-            err_ub_format!(\n-                \"overflow computing total size of `{}`\",\n-                if nonoverlapping { \"copy_nonoverlapping\" } else { \"copy\" }\n-            )\n-        })?;\n-\n-        // Make sure we check both pointers for an access of the total size and aligment,\n-        // *even if* the total size is 0.\n-        let src =\n-            self.memory.check_ptr_access(self.read_scalar(&src)?.check_init()?, size, align)?;\n-\n-        let dst =\n-            self.memory.check_ptr_access(self.read_scalar(&dst)?.check_init()?, size, align)?;\n-\n-        if let (Some(src), Some(dst)) = (src, dst) {\n-            self.memory.copy(src, dst, size, nonoverlapping)?;\n-        }\n-        Ok(())\n-    }\n-\n     /// Evaluate an assignment statement.\n     ///\n     /// There is no separate `eval_rvalue` function. Instead, the code for handling each rvalue"}]}