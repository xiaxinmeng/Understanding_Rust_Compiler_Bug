{"sha": "c7f45a9458967f9acec23c40941c285b58790c0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZjQ1YTk0NTg5NjdmOWFjZWMyM2M0MDk0MWMyODViNTg3OTBjMGI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-07-09T12:46:09Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-07-16T07:46:31Z"}, "message": "debuginfo: Add LLDB autotests to debuginfo test suite.\n\nThis commit adds LLDB autotests to the test suite but does not activate them by default yet.", "tree": {"sha": "f777a945d0e650c308fa38f63478f6ebcad62d8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f777a945d0e650c308fa38f63478f6ebcad62d8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7f45a9458967f9acec23c40941c285b58790c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7f45a9458967f9acec23c40941c285b58790c0b", "html_url": "https://github.com/rust-lang/rust/commit/c7f45a9458967f9acec23c40941c285b58790c0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7f45a9458967f9acec23c40941c285b58790c0b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b56ef794a0690d29757d3934d3611018bb4f7b66", "url": "https://api.github.com/repos/rust-lang/rust/commits/b56ef794a0690d29757d3934d3611018bb4f7b66", "html_url": "https://github.com/rust-lang/rust/commit/b56ef794a0690d29757d3934d3611018bb4f7b66"}], "stats": {"total": 3577, "additions": 3316, "deletions": 261}, "files": [{"sha": "67f77014c9fa98ac3d1a3be2612add364097aff0", "filename": "src/test/debuginfo/basic-types.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -17,6 +17,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -49,6 +52,42 @@\n // gdb-command:print f64\n // gdb-check:$14 = 3.5\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+// lldb-command:print b\n+// lldb-check:[...]$0 = false\n+// lldb-command:print i\n+// lldb-check:[...]$1 = -1\n+\n+// NOTE: LLDB does not support 32bit chars\n+// d ebugger:print (uint)(c)\n+// c heck:$3 = 97\n+\n+// lldb-command:print i8\n+// lldb-check:[...]$2 = 'D'\n+// lldb-command:print i16\n+// lldb-check:[...]$3 = -16\n+// lldb-command:print i32\n+// lldb-check:[...]$4 = -32\n+// lldb-command:print i64\n+// lldb-check:[...]$5 = -64\n+// lldb-command:print u\n+// lldb-check:[...]$6 = 1\n+// lldb-command:print u8\n+// lldb-check:[...]$7 = 'd'\n+// lldb-command:print u16\n+// lldb-check:[...]$8 = 16\n+// lldb-command:print u32\n+// lldb-check:[...]$9 = 32\n+// lldb-command:print u64\n+// lldb-check:[...]$10 = 64\n+// lldb-command:print f32\n+// lldb-check:[...]$11 = 2.5\n+// lldb-command:print f64\n+// lldb-check:[...]$12 = 3.5\n+\n #![allow(unused_variable)]\n \n fn main() {\n@@ -66,7 +105,7 @@ fn main() {\n     let u64: u64 = 64;\n     let f32: f32 = 2.5;\n     let f64: f64 = 3.5;\n-    _zzz();\n+    _zzz(); // #break\n }\n \n fn _zzz() {()}"}, {"sha": "84610b3c740517985ccc26b59eeafb29be0fa468", "filename": "src/test/debuginfo/borrowed-basic.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fborrowed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fborrowed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-basic.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -14,6 +14,9 @@\n // its numerical value.\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -59,6 +62,53 @@\n // gdb-command:print *f64_ref\n // gdb-check:$14 = 3.5\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+// lldb-command:print *bool_ref\n+// lldb-check:[...]$0 = true\n+\n+// lldb-command:print *int_ref\n+// lldb-check:[...]$1 = -1\n+\n+// NOTE: lldb doesn't support 32bit chars at the moment\n+// d ebugger:print *char_ref\n+// c heck:[...]$x = 97\n+\n+// lldb-command:print *i8_ref\n+// lldb-check:[...]$2 = 'D'\n+\n+// lldb-command:print *i16_ref\n+// lldb-check:[...]$3 = -16\n+\n+// lldb-command:print *i32_ref\n+// lldb-check:[...]$4 = -32\n+\n+// lldb-command:print *i64_ref\n+// lldb-check:[...]$5 = -64\n+\n+// lldb-command:print *uint_ref\n+// lldb-check:[...]$6 = 1\n+\n+// lldb-command:print *u8_ref\n+// lldb-check:[...]$7 = 'd'\n+\n+// lldb-command:print *u16_ref\n+// lldb-check:[...]$8 = 16\n+\n+// lldb-command:print *u32_ref\n+// lldb-check:[...]$9 = 32\n+\n+// lldb-command:print *u64_ref\n+// lldb-check:[...]$10 = 64\n+\n+// lldb-command:print *f32_ref\n+// lldb-check:[...]$11 = 2.5\n+\n+// lldb-command:print *f64_ref\n+// lldb-check:[...]$12 = 3.5\n+\n #![allow(unused_variable)]\n \n fn main() {\n@@ -103,7 +153,8 @@ fn main() {\n \n     let f64_val: f64 = 3.5;\n     let f64_ref: &f64 = &f64_val;\n-    zzz();\n+\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "2270cfb6d215da80f8a18958cccb3a1d13cd163f", "filename": "src/test/debuginfo/borrowed-c-style-enum.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fborrowed-c-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fborrowed-c-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-c-style-enum.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -24,6 +27,20 @@\n // gdb-command:print *the_c_ref\n // gdb-check:$3 = TheC\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print *the_a_ref\n+// lldb-check:[...]$0 = TheA\n+\n+// lldb-command:print *the_b_ref\n+// lldb-check:[...]$1 = TheB\n+\n+// lldb-command:print *the_c_ref\n+// lldb-check:[...]$2 = TheC\n+\n #![allow(unused_variable)]\n \n enum ABC { TheA, TheB, TheC }\n@@ -38,7 +55,7 @@ fn main() {\n     let the_c = TheC;\n     let the_c_ref: &ABC = &the_c;\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "b6f5096c726a5ec172cea6d922e298b6f7c0ffd8", "filename": "src/test/debuginfo/borrowed-enum.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -24,6 +27,18 @@\n // gdb-command:print *univariant_ref\n // gdb-check:$3 = {{4820353753753434}}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print *the_a_ref\n+// lldb-check:[...]$0 = TheA { x: 0, y: 8970181431921507452 }\n+// lldb-command:print *the_b_ref\n+// lldb-check:[...]$1 = TheB(0, 286331153, 286331153)\n+// lldb-command:print *univariant_ref\n+// lldb-check:[...]$2 = TheOnlyCase(4820353753753434)\n+\n #![allow(unused_variable)]\n #![feature(struct_variant)]\n \n@@ -59,7 +74,7 @@ fn main() {\n     let univariant = TheOnlyCase(4820353753753434);\n     let univariant_ref: &Univariant = &univariant;\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "82e44b46d3c8c10e183851b0cf6c2b7883475c8f", "filename": "src/test/debuginfo/borrowed-managed-basic.rs", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fborrowed-managed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fborrowed-managed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-managed-basic.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -16,6 +16,9 @@\n // its numerical value.\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -61,6 +64,56 @@\n // gdb-command:print *f64_ref\n // gdb-check:$14 = 3.5\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:type format add -f decimal char\n+// lldb-command:type format add -f decimal 'unsigned char'\n+// lldb-command:run\n+\n+// lldb-command:print *bool_ref\n+// lldb-check:[...]$0 = true\n+\n+// lldb-command:print *int_ref\n+// lldb-check:[...]$1 = -1\n+\n+// LLDB can't handle 32bit chars yet\n+// d ebugger:print *char_ref\n+// c heck:[...]$x = 97\n+\n+// lldb-command:print *i8_ref\n+// lldb-check:[...]$2 = 68\n+\n+// lldb-command:print *i16_ref\n+// lldb-check:[...]$3 = -16\n+\n+// lldb-command:print *i32_ref\n+// lldb-check:[...]$4 = -32\n+\n+// lldb-command:print *i64_ref\n+// lldb-check:[...]$5 = -64\n+\n+// lldb-command:print *uint_ref\n+// lldb-check:[...]$6 = 1\n+\n+// lldb-command:print *u8_ref\n+// lldb-check:[...]$7 = 100\n+\n+// lldb-command:print *u16_ref\n+// lldb-check:[...]$8 = 16\n+\n+// lldb-command:print *u32_ref\n+// lldb-check:[...]$9 = 32\n+\n+// lldb-command:print *u64_ref\n+// lldb-check:[...]$10 = 64\n+\n+// lldb-command:print *f32_ref\n+// lldb-check:[...]$11 = 2.5\n+\n+// lldb-command:print *f64_ref\n+// lldb-check:[...]$12 = 3.5\n+\n #![allow(unused_variable)]\n \n use std::gc::{Gc, GC};\n@@ -107,7 +160,8 @@ fn main() {\n \n     let f64_box: Gc<f64> = box(GC) 3.5;\n     let f64_ref: &f64 = f64_box;\n-    zzz();\n+\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "5ad0fe89d2cdfefd7916d0fd6e2de4ed0f22a2b1", "filename": "src/test/debuginfo/borrowed-struct.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -9,8 +9,10 @@\n // except according to those terms.\n \n // ignore-android: FIXME(#10381)\n-\n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -45,6 +47,41 @@\n // gdb-command:print *unique_val_interior_ref_2\n // gdb-check:$10 = 26.5\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print *stack_val_ref\n+// lldb-check:[...]$0 = SomeStruct { x: 10, y: 23.5 }\n+\n+// lldb-command:print *stack_val_interior_ref_1\n+// lldb-check:[...]$1 = 10\n+\n+// lldb-command:print *stack_val_interior_ref_2\n+// lldb-check:[...]$2 = 23.5\n+\n+// lldb-command:print *ref_to_unnamed\n+// lldb-check:[...]$3 = SomeStruct { x: 11, y: 24.5 }\n+\n+// lldb-command:print *managed_val_ref\n+// lldb-check:[...]$4 = SomeStruct { x: 12, y: 25.5 }\n+\n+// lldb-command:print *managed_val_interior_ref_1\n+// lldb-check:[...]$5 = 12\n+\n+// lldb-command:print *managed_val_interior_ref_2\n+// lldb-check:[...]$6 = 25.5\n+\n+// lldb-command:print *unique_val_ref\n+// lldb-check:[...]$7 = SomeStruct { x: 13, y: 26.5 }\n+\n+// lldb-command:print *unique_val_interior_ref_1\n+// lldb-check:[...]$8 = 13\n+\n+// lldb-command:print *unique_val_interior_ref_2\n+// lldb-check:[...]$9 = 26.5\n+\n #![feature(managed_boxes)]\n #![allow(unused_variable)]\n \n@@ -72,7 +109,7 @@ fn main() {\n     let unique_val_interior_ref_1: &int = &unique_val.x;\n     let unique_val_interior_ref_2: &f64 = &unique_val.y;\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "5c20c7471ec26a012f64cc7455109fb4100527ac", "filename": "src/test/debuginfo/borrowed-tuple.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -13,6 +13,9 @@\n #![feature(managed_boxes)]\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -29,6 +32,24 @@\n // gdb-command:print *unique_val_ref\n // gdb-check:$4 = {-17, -22}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print *stack_val_ref\n+// lldb-check:[...]$0 = (-14, -19)\n+\n+// lldb-command:print *ref_to_unnamed\n+// lldb-check:[...]$1 = (-15, -20)\n+\n+// lldb-command:print *managed_val_ref\n+// lldb-check:[...]$2 = (-16, -21)\n+\n+// lldb-command:print *unique_val_ref\n+// lldb-check:[...]$3 = (-17, -22)\n+\n+\n #![allow(unused_variable)]\n \n use std::gc::{Gc, GC};\n@@ -44,7 +65,7 @@ fn main() {\n     let unique_val: Box<(i16, f32)> = box() (-17, -22f32);\n     let unique_val_ref: &(i16, f32) = unique_val;\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "821c85fdcf3a06e54415014cdc1e9e3bc45d313a", "filename": "src/test/debuginfo/borrowed-unique-basic.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -14,6 +14,9 @@\n // its numerical value.\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -59,6 +62,55 @@\n // gdb-command:print *f64_ref\n // gdb-check:$14 = 3.5\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:type format add -f decimal char\n+// lldb-command:type format add -f decimal 'unsigned char'\n+// lldb-command:run\n+\n+// lldb-command:print *bool_ref\n+// lldb-check:[...]$0 = true\n+\n+// lldb-command:print *int_ref\n+// lldb-check:[...]$1 = -1\n+\n+// d ebugger:print *char_ref\n+// c heck:[...]$3 = 97\n+\n+// lldb-command:print *i8_ref\n+// lldb-check:[...]$2 = 68\n+\n+// lldb-command:print *i16_ref\n+// lldb-check:[...]$3 = -16\n+\n+// lldb-command:print *i32_ref\n+// lldb-check:[...]$4 = -32\n+\n+// lldb-command:print *i64_ref\n+// lldb-check:[...]$5 = -64\n+\n+// lldb-command:print *uint_ref\n+// lldb-check:[...]$6 = 1\n+\n+// lldb-command:print *u8_ref\n+// lldb-check:[...]$7 = 100\n+\n+// lldb-command:print *u16_ref\n+// lldb-check:[...]$8 = 16\n+\n+// lldb-command:print *u32_ref\n+// lldb-check:[...]$9 = 32\n+\n+// lldb-command:print *u64_ref\n+// lldb-check:[...]$10 = 64\n+\n+// lldb-command:print *f32_ref\n+// lldb-check:[...]$11 = 2.5\n+\n+// lldb-command:print *f64_ref\n+// lldb-check:[...]$12 = 3.5\n+\n #![allow(unused_variable)]\n \n \n@@ -104,7 +156,8 @@ fn main() {\n \n     let f64_box: Box<f64> = box 3.5;\n     let f64_ref: &f64 = f64_box;\n-    zzz();\n+\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "5b799b25bbfc4dc287b3fe4f3714da46358be990", "filename": "src/test/debuginfo/box.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbox.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print pretty off\n // gdb-command:rbreak zzz\n // gdb-command:run\n@@ -24,6 +27,19 @@\n // gdb-command:print d->val\n // gdb-check:$4 = false\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+// lldb-command:print *a\n+// lldb-check:[...]$0 = 1\n+// lldb-command:print *b\n+// lldb-check:[...]$1 = (2, 3.5)\n+// lldb-command:print c->val\n+// lldb-check:[...]$2 = 4\n+// lldb-command:print d->val\n+// lldb-check:[...]$3 = false\n+\n #![feature(managed_boxes)]\n #![allow(unused_variable)]\n \n@@ -34,7 +50,8 @@ fn main() {\n     let b = box() (2i, 3.5f64);\n     let c = box(GC) 4i;\n     let d = box(GC) false;\n-    _zzz();\n+\n+    zzz(); // #break\n }\n \n-fn _zzz() {()}\n+fn zzz() { () }"}, {"sha": "0e958545fb3c09105c6cf068a7ab4b4c39685a0d", "filename": "src/test/debuginfo/boxed-struct.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -27,6 +30,23 @@\n // gdb-command:print managed_dtor->val\n // gdb-check:$4 = {x = 33, y = 333, z = 3333, w = 33333}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print *unique\n+// lldb-check:[...]$0 = StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 }\n+\n+// lldb-command:print managed->val\n+// lldb-check:[...]$1 = StructWithSomePadding { x: 88, y: 888, z: 8888, w: 88888 }\n+\n+// lldb-command:print *unique_dtor\n+// lldb-check:[...]$2 = StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 }\n+\n+// lldb-command:print managed_dtor->val\n+// lldb-check:[...]$3 = StructWithDestructor { x: 33, y: 333, z: 3333, w: 33333 }\n+\n #![feature(managed_boxes)]\n #![allow(unused_variable)]\n \n@@ -58,7 +78,7 @@ fn main() {\n     let unique_dtor = box StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 };\n     let managed_dtor = box(GC) StructWithDestructor { x: 33, y: 333, z: 3333, w: 33333 };\n \n-    zzz();\n+    zzz(); // #break\n }\n \n-fn zzz() {()}\n+fn zzz() { () }"}, {"sha": "2e1c4c79af0b336887a6f964fd5f84ba3122f535", "filename": "src/test/debuginfo/by-value-non-immediate-argument.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -43,6 +46,35 @@\n // gdb-check:$7 = {{Case1, x = 0, y = 8970181431921507452}, {Case1, 0, 2088533116, 2088533116}}\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print s\n+// lldb-check:[...]$0 = Struct { a: 1, b: 2.5 }\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$1 = Struct { a: 3, b: 4.5 }\n+// lldb-command:print y\n+// lldb-check:[...]$2 = 5\n+// lldb-command:print z\n+// lldb-check:[...]$3 = 6.5\n+// lldb-command:continue\n+\n+// lldb-command:print a\n+// lldb-check:[...]$4 = (7, 8, 9.5, 10.5)\n+// lldb-command:continue\n+\n+// lldb-command:print a\n+// lldb-check:[...]$5 = Newtype(11.5, 12.5, 13, 14)\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$6 = Case1 { x: 0, y: 8970181431921507452 }\n+// lldb-command:continue\n+\n #![feature(struct_variant)]\n \n #[deriving(Clone)]\n@@ -58,21 +90,21 @@ struct StructStruct {\n }\n \n fn fun(s: Struct) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn fun_fun(StructStruct { a: x, b: Struct { a: y, b: z } }: StructStruct) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn tup(a: (int, uint, f64, f64)) {\n-    zzz();\n+    zzz(); // #break\n }\n \n struct Newtype(f64, f64, int, uint);\n \n fn new_type(a: Newtype) {\n-    zzz();\n+    zzz(); // #break\n }\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n@@ -84,7 +116,7 @@ enum Enum {\n }\n \n fn by_val_enum(x: Enum) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn main() {\n@@ -100,4 +132,4 @@ fn main() {\n     by_val_enum(Case1 { x: 0, y: 8970181431921507452 });\n }\n \n-fn zzz() {()}\n+fn zzz() { () }"}, {"sha": "4d6064c185b4c97cf15abec9ce5d982dea313623", "filename": "src/test/debuginfo/by-value-self-argument-in-trait-impl.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -13,6 +13,9 @@\n #![feature(managed_boxes)]\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -36,6 +39,27 @@\n // gdb-check:$4 = 8888\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print self\n+// lldb-check:[...]$0 = 1111\n+// lldb-command:continue\n+\n+// lldb-command:print self\n+// lldb-check:[...]$1 = Struct { x: 2222, y: 3333 }\n+// lldb-command:continue\n+\n+// lldb-command:print self\n+// lldb-check:[...]$2 = (4444.5, 5555, 6666, 7777.5)\n+// lldb-command:continue\n+\n+// lldb-command:print self->val\n+// lldb-check:[...]$3 = 8888\n+// lldb-command:continue\n+\n use std::gc::{Gc, GC};\n \n trait Trait {\n@@ -44,7 +68,7 @@ trait Trait {\n \n impl Trait for int {\n     fn method(self) -> int {\n-        zzz();\n+        zzz(); // #break\n         self\n     }\n }\n@@ -56,21 +80,21 @@ struct Struct {\n \n impl Trait for Struct {\n     fn method(self) -> Struct {\n-        zzz();\n+        zzz(); // #break\n         self\n     }\n }\n \n impl Trait for (f64, int, int, f64) {\n     fn method(self) -> (f64, int, int, f64) {\n-        zzz();\n+        zzz(); // #break\n         self\n     }\n }\n \n impl Trait for Gc<int> {\n     fn method(self) -> Gc<int> {\n-        zzz();\n+        zzz(); // #break\n         self\n     }\n }\n@@ -82,4 +106,4 @@ fn main() {\n     let _ = (box(GC) 8888).method();\n }\n \n-fn zzz() {()}\n+fn zzz() { () }"}, {"sha": "f73517282907f87f4614ba5f6ce122a5f8157e9a", "filename": "src/test/debuginfo/c-style-enum-in-composite.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -8,9 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -36,6 +40,31 @@\n // gdb-command:print struct_with_drop\n // gdb-check:$7 = {{a = OneHundred, b = Vienna}, 9}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print tuple_interior_padding\n+// lldb-check:[...]$0 = (0, OneHundred)\n+\n+// lldb-command:print tuple_padding_at_end\n+// lldb-check:[...]$1 = ((1, OneThousand), 2)\n+// lldb-command:print tuple_different_enums\n+// lldb-check:[...]$2 = (OneThousand, MountainView, OneMillion, Vienna)\n+\n+// lldb-command:print padded_struct\n+// lldb-check:[...]$3 = PaddedStruct { a: 3, b: OneMillion, c: 4, d: Toronto, e: 5 }\n+\n+// lldb-command:print packed_struct\n+// lldb-check:[...]$4 = PackedStruct { a: 6, b: OneHundred, c: 7, d: Vienna, e: 8 }\n+\n+// lldb-command:print non_padded_struct\n+// lldb-check:[...]$5 = NonPaddedStruct { a: OneMillion, b: MountainView, c: OneThousand, d: Toronto }\n+\n+// lldb-command:print struct_with_drop\n+// lldb-check:[...]$6 = (StructWithDrop { a: OneHundred, b: Vienna }, 9)\n+\n #![allow(unused_variable)]\n \n enum AnEnum {\n@@ -115,7 +144,7 @@ fn main() {\n \n     let struct_with_drop = (StructWithDrop { a: OneHundred, b: Vienna }, 9_i64);\n \n-    zzz();\n+    zzz(); // #break\n }\n \n-fn zzz() {()}\n+fn zzz() { () }"}, {"sha": "da30363f271d07bf878657746d4329fe30c981c1", "filename": "src/test/debuginfo/c-style-enum.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -12,6 +12,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n \n // gdb-command:print 'c-style-enum::SINGLE_VARIANT'\n@@ -71,6 +74,32 @@\n // gdb-command:print 'c-style-enum::MANUAL_THREE'\n // gdb-check:$18 = OneMillion\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print auto_one\n+// lldb-check:[...]$0 = One\n+\n+// lldb-command:print auto_two\n+// lldb-check:[...]$1 = Two\n+\n+// lldb-command:print auto_three\n+// lldb-check:[...]$2 = Three\n+\n+// lldb-command:print manual_one_hundred\n+// lldb-check:[...]$3 = OneHundred\n+\n+// lldb-command:print manual_one_thousand\n+// lldb-check:[...]$4 = OneThousand\n+\n+// lldb-command:print manual_one_million\n+// lldb-check:[...]$5 = OneMillion\n+\n+// lldb-command:print single_variant\n+// lldb-check:[...]$6 = TheOnlyVariant\n+\n #![allow(unused_variable)]\n #![allow(dead_code)]\n \n@@ -120,11 +149,11 @@ fn main() {\n         MANUAL_THREE = OneMillion;\n     };\n \n-    zzz();\n+    zzz(); // #break\n \n     let a = SINGLE_VARIANT;\n     let a = unsafe { AUTO_ONE };\n     let a = unsafe { MANUAL_ONE };\n }\n \n-fn zzz() {()}\n+fn zzz() { () }"}, {"sha": "67601221e7a46debb0990b80d20b1efe2fb835f7", "filename": "src/test/debuginfo/closure-in-generic-function.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -28,10 +31,27 @@\n // gdb-check:$4 = 110\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print x\n+// lldb-check:[...]$0 = 0.5\n+// lldb-command:print y\n+// lldb-check:[...]$1 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print *x\n+// lldb-check:[...]$2 = 29\n+// lldb-command:print *y\n+// lldb-check:[...]$3 = 110\n+// lldb-command:continue\n+\n fn some_generic_fun<T1, T2>(a: T1, b: T2) -> (T2, T1) {\n \n     let closure = |x, y| {\n-        zzz();\n+        zzz(); // #break\n         (y, x)\n     };\n \n@@ -43,4 +63,4 @@ fn main() {\n     some_generic_fun(&29i, box 110i);\n }\n \n-fn zzz() {()}\n+fn zzz() { () }"}, {"sha": "48d14a46c83f1d136846300a9c075009e2eaa8e1", "filename": "src/test/debuginfo/destructured-fn-argument.rs", "status": "modified", "additions": 175, "deletions": 25, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -181,6 +184,154 @@\n // gdb-check:$49 = 62\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+// lldb-command:run\n+\n+// lldb-command:print a\n+// lldb-check:[...]$0 = 1\n+// lldb-command:print b\n+// lldb-check:[...]$1 = false\n+// lldb-command:continue\n+\n+// lldb-command:print a\n+// lldb-check:[...]$2 = 2\n+// lldb-command:print b\n+// lldb-check:[...]$3 = 3\n+// lldb-command:print c\n+// lldb-check:[...]$4 = 4\n+// lldb-command:continue\n+\n+// lldb-command:print a\n+// lldb-check:[...]$5 = 5\n+// lldb-command:print b\n+// lldb-check:[...]$6 = (6, 7)\n+// lldb-command:continue\n+\n+// lldb-command:print h\n+// lldb-check:[...]$7 = 8\n+// lldb-command:print i\n+// lldb-check:[...]$8 = Struct { a: 9, b: 10 }\n+// lldb-command:print j\n+// lldb-check:[...]$9 = 11\n+// lldb-command:continue\n+\n+// lldb-command:print k\n+// lldb-check:[...]$10 = 12\n+// lldb-command:print l\n+// lldb-check:[...]$11 = 13\n+// lldb-command:continue\n+\n+// lldb-command:print m\n+// lldb-check:[...]$12 = 14\n+// lldb-command:print n\n+// lldb-check:[...]$13 = 16\n+// lldb-command:continue\n+\n+// lldb-command:print o\n+// lldb-check:[...]$14 = 18\n+// lldb-command:continue\n+\n+// lldb-command:print p\n+// lldb-check:[...]$15 = 19\n+// lldb-command:print q\n+// lldb-check:[...]$16 = 20\n+// lldb-command:print r\n+// lldb-check:[...]$17 = Struct { a: 21, b: 22 }\n+// lldb-command:continue\n+\n+// lldb-command:print s\n+// lldb-check:[...]$18 = 24\n+// lldb-command:print t\n+// lldb-check:[...]$19 = 23\n+// lldb-command:continue\n+\n+// lldb-command:print u\n+// lldb-check:[...]$20 = 25\n+// lldb-command:print v\n+// lldb-check:[...]$21 = 26\n+// lldb-command:print w\n+// lldb-check:[...]$22 = 27\n+// lldb-command:print x\n+// lldb-check:[...]$23 = 28\n+// lldb-command:print y\n+// lldb-check:[...]$24 = 29\n+// lldb-command:print z\n+// lldb-check:[...]$25 = 30\n+// lldb-command:print ae\n+// lldb-check:[...]$26 = 31\n+// lldb-command:print oe\n+// lldb-check:[...]$27 = 32\n+// lldb-command:print ue\n+// lldb-check:[...]$28 = 33\n+// lldb-command:continue\n+\n+// lldb-command:print aa\n+// lldb-check:[...]$29 = (34, 35)\n+// lldb-command:continue\n+\n+// lldb-command:print bb\n+// lldb-check:[...]$30 = (36, 37)\n+// lldb-command:continue\n+\n+// lldb-command:print cc\n+// lldb-check:[...]$31 = 38\n+// lldb-command:continue\n+\n+// lldb-command:print dd\n+// lldb-check:[...]$32 = (40, 41, 42)\n+// lldb-command:continue\n+\n+// lldb-command:print *ee\n+// lldb-check:[...]$33 = (43, 44, 45)\n+// lldb-command:continue\n+\n+// lldb-command:print *ff\n+// lldb-check:[...]$34 = 46\n+// lldb-command:print gg\n+// lldb-check:[...]$35 = (47, 48)\n+// lldb-command:continue\n+\n+// lldb-command:print *hh\n+// lldb-check:[...]$36 = 50\n+// lldb-command:continue\n+\n+// lldb-command:print ii\n+// lldb-check:[...]$37 = 51\n+// lldb-command:continue\n+\n+// lldb-command:print *jj\n+// lldb-check:[...]$38 = 52\n+// lldb-command:continue\n+\n+// lldb-command:print kk\n+// lldb-check:[...]$39 = 53\n+// lldb-command:print ll\n+// lldb-check:[...]$40 = 54\n+// lldb-command:continue\n+\n+// lldb-command:print mm\n+// lldb-check:[...]$41 = 55\n+// lldb-command:print *nn\n+// lldb-check:[...]$42 = 56\n+// lldb-command:continue\n+\n+// lldb-command:print oo\n+// lldb-check:[...]$43 = 57\n+// lldb-command:print pp\n+// lldb-check:[...]$44 = 58\n+// lldb-command:print qq\n+// lldb-check:[...]$45 = 59\n+// lldb-command:continue\n+\n+// lldb-command:print rr\n+// lldb-check:[...]$46 = 60\n+// lldb-command:print ss\n+// lldb-check:[...]$47 = 61\n+// lldb-command:print tt\n+// lldb-check:[...]$48 = 62\n+// lldb-command:continue\n+\n #![allow(unused_variable)]\n \n \n@@ -197,93 +348,93 @@ struct TupleStruct (f64, int);\n \n \n fn simple_tuple((a, b): (int, bool)) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn nested_tuple((a, (b, c)): (int, (u16, u16))) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn destructure_only_first_level((a, b): (int, (u32, u32))) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn struct_as_tuple_element((h, i, j): (i16, Struct, i16)) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn struct_pattern(Struct { a: k, b: l }: Struct) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn ignored_tuple_element((m, _, n): (int, u16, i32)) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn ignored_struct_field(Struct { b: o, .. }: Struct) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn one_struct_destructured_one_not((Struct { a: p, b: q }, r): (Struct, Struct)) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn different_order_of_struct_fields(Struct { b: s, a: t }: Struct ) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn complex_nesting(((u,   v  ), ((w,   (x,   Struct { a: y, b: z})), Struct { a: ae, b: oe }), ue ):\n                    ((i16, i32), ((i64, (i32, Struct,             )), Struct                 ), u16))\n {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn managed_box(&aa: &(int, int)) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn borrowed_pointer(&bb: &(int, int)) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn contained_borrowed_pointer((&cc, _): (&int, int)) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn unique_pointer(box dd: Box<(int, int, int)>) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn ref_binding(ref ee: (int, int, int)) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn ref_binding_in_tuple((ref ff, gg): (int, (int, int))) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn ref_binding_in_struct(Struct { b: ref hh, .. }: Struct) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn univariant_enum(Unit(ii): Univariant) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn univariant_enum_with_ref_binding(Unit(ref jj): Univariant) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn tuple_struct(TupleStruct(kk, ll): TupleStruct) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn tuple_struct_with_ref_binding(TupleStruct(mm, ref nn): TupleStruct) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn multiple_arguments((oo, pp): (int, int), qq : int) {\n-    zzz();\n+    zzz(); // #break\n }\n \n fn main() {\n@@ -311,11 +462,10 @@ fn main() {\n     multiple_arguments((57, 58), 59);\n \n     fn nested_function(rr: int, (ss, tt): (int, int)) {\n-        zzz();\n+        zzz(); // #break\n     }\n \n     nested_function(60, (61, 62));\n }\n \n-\n-fn zzz() {()}\n+fn zzz() { () }"}, {"sha": "837a6dc062227632972db27d1cfc08476b7ac537", "filename": "src/test/debuginfo/destructured-local.rs", "status": "modified", "additions": 121, "deletions": 2, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -125,6 +128,122 @@\n // gdb-command:print *nn\n // gdb-check:$43 = 56\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print a\n+// lldb-check:[...]$0 = 1\n+// lldb-command:print b\n+// lldb-check:[...]$1 = false\n+\n+// lldb-command:print c\n+// lldb-check:[...]$2 = 2\n+// lldb-command:print d\n+// lldb-check:[...]$3 = 3\n+// lldb-command:print e\n+// lldb-check:[...]$4 = 4\n+\n+// lldb-command:print f\n+// lldb-check:[...]$5 = 5\n+// lldb-command:print g\n+// lldb-check:[...]$6 = (6, 7)\n+\n+// lldb-command:print h\n+// lldb-check:[...]$7 = 8\n+// lldb-command:print i\n+// lldb-check:[...]$8 = Struct { a: 9, b: 10 }\n+// lldb-command:print j\n+// lldb-check:[...]$9 = 11\n+\n+// lldb-command:print k\n+// lldb-check:[...]$10 = 12\n+// lldb-command:print l\n+// lldb-check:[...]$11 = 13\n+\n+// lldb-command:print m\n+// lldb-check:[...]$12 = 14\n+// lldb-command:print n\n+// lldb-check:[...]$13 = 16\n+\n+// lldb-command:print o\n+// lldb-check:[...]$14 = 18\n+\n+// lldb-command:print p\n+// lldb-check:[...]$15 = 19\n+// lldb-command:print q\n+// lldb-check:[...]$16 = 20\n+// lldb-command:print r\n+// lldb-check:[...]$17 = Struct { a: 21, b: 22 }\n+\n+// lldb-command:print s\n+// lldb-check:[...]$18 = 24\n+// lldb-command:print t\n+// lldb-check:[...]$19 = 23\n+\n+// lldb-command:print u\n+// lldb-check:[...]$20 = 25\n+// lldb-command:print v\n+// lldb-check:[...]$21 = 26\n+// lldb-command:print w\n+// lldb-check:[...]$22 = 27\n+// lldb-command:print x\n+// lldb-check:[...]$23 = 28\n+// lldb-command:print y\n+// lldb-check:[...]$24 = 29\n+// lldb-command:print z\n+// lldb-check:[...]$25 = 30\n+// lldb-command:print ae\n+// lldb-check:[...]$26 = 31\n+// lldb-command:print oe\n+// lldb-check:[...]$27 = 32\n+// lldb-command:print ue\n+// lldb-check:[...]$28 = 33\n+\n+// lldb-command:print aa\n+// lldb-check:[...]$29 = (34, 35)\n+\n+// lldb-command:print bb\n+// lldb-check:[...]$30 = (36, 37)\n+\n+// lldb-command:print cc\n+// lldb-check:[...]$31 = 38\n+\n+// lldb-command:print dd\n+// lldb-check:[...]$32 = (40, 41, 42)\n+\n+// lldb-command:print *ee\n+// lldb-check:[...]$33 = (43, 44, 45)\n+\n+// lldb-command:print *ff\n+// lldb-check:[...]$34 = 46\n+\n+// lldb-command:print gg\n+// lldb-check:[...]$35 = (47, 48)\n+\n+// lldb-command:print *hh\n+// lldb-check:[...]$36 = 50\n+\n+// lldb-command:print ii\n+// lldb-check:[...]$37 = 51\n+\n+// lldb-command:print *jj\n+// lldb-check:[...]$38 = 52\n+\n+// lldb-command:print kk\n+// lldb-check:[...]$39 = 53\n+\n+// lldb-command:print ll\n+// lldb-check:[...]$40 = 54\n+\n+// lldb-command:print mm\n+// lldb-check:[...]$41 = 55\n+\n+// lldb-command:print *nn\n+// lldb-check:[...]$42 = 56\n+\n+\n #![allow(unused_variable)]\n \n struct Struct {\n@@ -204,7 +323,7 @@ fn main() {\n     // tuple struct with ref binding\n     let &TupleStruct(mm, ref nn) = &TupleStruct(55.0, 56);\n \n-    zzz();\n+    zzz(); // #break\n }\n \n-fn zzz() {()}\n+fn zzz() { () }"}, {"sha": "b5ce865a4aaa2a4f37b4a6bc7c1cc9e0f48e0cb1", "filename": "src/test/debuginfo/evec-in-struct.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print pretty off\n // gdb-command:rbreak zzz\n // gdb-command:run\n@@ -30,6 +33,25 @@\n // gdb-command:print struct_padded_at_end\n // gdb-check:$5 = {x = {22, 23}, y = {24, 25}}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print no_padding1\n+// lldb-check:[...]$0 = NoPadding1 { x: [0, 1, 2], y: -3, z: [4.5, 5.5] }\n+// lldb-command:print no_padding2\n+// lldb-check:[...]$1 = NoPadding2 { x: [6, 7, 8], y: [[9, 10], [11, 12]] }\n+\n+// lldb-command:print struct_internal_padding\n+// lldb-check:[...]$2 = StructInternalPadding { x: [13, 14], y: [15, 16] }\n+\n+// lldb-command:print single_vec\n+// lldb-check:[...]$3 = SingleVec { x: [17, 18, 19, 20, 21] }\n+\n+// lldb-command:print struct_padded_at_end\n+// lldb-check:[...]$4 = StructPaddedAtEnd { x: [22, 23], y: [24, 25] }\n+\n #![allow(unused_variable)]\n \n struct NoPadding1 {\n@@ -84,7 +106,7 @@ fn main() {\n         y: [24, 25]\n     };\n \n-    zzz();\n+    zzz(); // #break\n }\n \n-fn zzz() {()}\n+fn zzz() { () }"}, {"sha": "640e04cf71c11f1f72e3491bd1f8dbe3309fd774", "filename": "src/test/debuginfo/function-arg-initialization.rs", "status": "modified", "additions": 128, "deletions": 24, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -18,18 +18,19 @@\n \n // compile-flags:-g\n // gdb-command:set print pretty off\n-// gdb-command:break function-arg-initialization.rs:139\n-// gdb-command:break function-arg-initialization.rs:154\n-// gdb-command:break function-arg-initialization.rs:158\n-// gdb-command:break function-arg-initialization.rs:162\n-// gdb-command:break function-arg-initialization.rs:166\n-// gdb-command:break function-arg-initialization.rs:170\n-// gdb-command:break function-arg-initialization.rs:174\n-// gdb-command:break function-arg-initialization.rs:178\n-// gdb-command:break function-arg-initialization.rs:182\n-// gdb-command:break function-arg-initialization.rs:190\n-// gdb-command:break function-arg-initialization.rs:197\n-\n+// gdb-command:break function-arg-initialization.rs:243\n+// gdb-command:break function-arg-initialization.rs:258\n+// gdb-command:break function-arg-initialization.rs:262\n+// gdb-command:break function-arg-initialization.rs:266\n+// gdb-command:break function-arg-initialization.rs:270\n+// gdb-command:break function-arg-initialization.rs:274\n+// gdb-command:break function-arg-initialization.rs:278\n+// gdb-command:break function-arg-initialization.rs:282\n+// gdb-command:break function-arg-initialization.rs:286\n+// gdb-command:break function-arg-initialization.rs:294\n+// gdb-command:break function-arg-initialization.rs:301\n+\n+// === GDB TESTS ===================================================================================\n \n // gdb-command:run\n \n@@ -130,13 +131,116 @@\n // gdb-check:$32 = 45\n // gdb-command:continue\n \n-#![allow(unused_variable)]\n \n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// IMMEDIATE ARGS\n+// lldb-command:print a\n+// lldb-check:[...]$0 = 1\n+// lldb-command:print b\n+// lldb-check:[...]$1 = true\n+// lldb-command:print c\n+// lldb-check:[...]$2 = 2.5\n+// lldb-command:continue\n+\n+// NON IMMEDIATE ARGS\n+// lldb-command:print a\n+// lldb-check:[...]$3 = BigStruct { a: 3, b: 4, c: 5, d: 6, e: 7, f: 8, g: 9, h: 10 }\n+// lldb-command:print b\n+// lldb-check:[...]$4 = BigStruct { a: 11, b: 12, c: 13, d: 14, e: 15, f: 16, g: 17, h: 18 }\n+// lldb-command:continue\n+\n+// BINDING\n+// lldb-command:print a\n+// lldb-check:[...]$5 = 19\n+// lldb-command:print b\n+// lldb-check:[...]$6 = 20\n+// lldb-command:print c\n+// lldb-check:[...]$7 = 21.5\n+// lldb-command:continue\n+\n+// ASSIGNMENT\n+// lldb-command:print a\n+// lldb-check:[...]$8 = 22\n+// lldb-command:print b\n+// lldb-check:[...]$9 = 23\n+// lldb-command:print c\n+// lldb-check:[...]$10 = 24.5\n+// lldb-command:continue\n+\n+// FUNCTION CALL\n+// lldb-command:print x\n+// lldb-check:[...]$11 = 25\n+// lldb-command:print y\n+// lldb-check:[...]$12 = 26\n+// lldb-command:print z\n+// lldb-check:[...]$13 = 27.5\n+// lldb-command:continue\n+\n+// EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$14 = 28\n+// lldb-command:print y\n+// lldb-check:[...]$15 = 29\n+// lldb-command:print z\n+// lldb-check:[...]$16 = 30.5\n+// lldb-command:continue\n+\n+// RETURN EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$17 = 31\n+// lldb-command:print y\n+// lldb-check:[...]$18 = 32\n+// lldb-command:print z\n+// lldb-check:[...]$19 = 33.5\n+// lldb-command:continue\n+\n+// ARITHMETIC EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$20 = 34\n+// lldb-command:print y\n+// lldb-check:[...]$21 = 35\n+// lldb-command:print z\n+// lldb-check:[...]$22 = 36.5\n+// lldb-command:continue\n+\n+// IF EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$23 = 37\n+// lldb-command:print y\n+// lldb-check:[...]$24 = 38\n+// lldb-command:print z\n+// lldb-check:[...]$25 = 39.5\n+// lldb-command:continue\n+\n+// WHILE EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$26 = 40\n+// lldb-command:print y\n+// lldb-check:[...]$27 = 41\n+// lldb-command:print z\n+// lldb-check:[...]$28 = 42\n+// lldb-command:continue\n+\n+// LOOP EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$29 = 43\n+// lldb-command:print y\n+// lldb-check:[...]$30 = 44\n+// lldb-command:print z\n+// lldb-check:[...]$31 = 45\n+// lldb-command:continue\n+\n+\n+\n+#![allow(unused_variable)]\n \n \n \n fn immediate_args(a: int, b: bool, c: f64) {\n-    ()\n+    () // #break\n }\n \n struct BigStruct {\n@@ -151,50 +255,50 @@ struct BigStruct {\n }\n \n fn non_immediate_args(a: BigStruct, b: BigStruct) {\n-    ()\n+    () // #break\n }\n \n fn binding(a: i64, b: u64, c: f64) {\n-    let x = 0i;\n+    let x = 0i; // #break\n }\n \n fn assignment(mut a: u64, b: u64, c: f64) {\n-    a = b;\n+    a = b; // #break\n }\n \n fn function_call(x: u64, y: u64, z: f64) {\n-    std::io::stdio::print(\"Hi!\")\n+    std::io::stdio::print(\"Hi!\") // #break\n }\n \n fn identifier(x: u64, y: u64, z: f64) -> u64 {\n-    x\n+    x // #break\n }\n \n fn return_expr(x: u64, y: u64, z: f64) -> u64 {\n-    return x;\n+    return x; // #break\n }\n \n fn arithmetic_expr(x: u64, y: u64, z: f64) -> u64 {\n-    x + y\n+    x + y // #break\n }\n \n fn if_expr(x: u64, y: u64, z: f64) -> u64 {\n-    if x + y < 1000 {\n+    if x + y < 1000 { // #break\n         x\n     } else {\n         y\n     }\n }\n \n fn while_expr(mut x: u64, y: u64, z: u64) -> u64 {\n-    while x + y < 1000 {\n+    while x + y > 1000 { // #break\n         x += z\n     }\n     return x;\n }\n \n fn loop_expr(mut x: u64, y: u64, z: u64) -> u64 {\n-    loop {\n+    loop { // #break\n         x += z;\n \n         if x + y > 1000 {"}, {"sha": "69bd5ae1d6c30af43d4eca3bea296775ffd151e4", "filename": "src/test/debuginfo/function-arguments.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arguments.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -28,21 +31,38 @@\n // gdb-command:print b\n // gdb-check:$4 = 3000\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print x\n+// lldb-check:[...]$0 = 111102\n+// lldb-command:print y\n+// lldb-check:[...]$1 = true\n+// lldb-command:continue\n+\n+// lldb-command:print a\n+// lldb-check:[...]$2 = 2000\n+// lldb-command:print b\n+// lldb-check:[...]$3 = 3000\n+// lldb-command:continue\n+\n fn main() {\n \n     fun(111102, true);\n     nested(2000, 3000);\n \n     fn nested(a: i32, b: i64) -> (i32, i64) {\n-        zzz();\n+        zzz(); // #break\n         (a, b)\n     }\n }\n \n fn fun(x: int, y: bool) -> (int, bool) {\n-    zzz();\n+    zzz(); // #break\n \n     (x, y)\n }\n \n-fn zzz() {()}\n+fn zzz() { () }"}, {"sha": "05e2c5eb6c7ca84ad916494998331a4039479d7a", "filename": "src/test/debuginfo/function-prologue-stepping-no-split-stack.rs", "status": "modified", "additions": 118, "deletions": 1, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-split-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-split-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-split-stack.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -14,9 +14,13 @@\n // beginning of a function. Functions with the #[no_split_stack] attribute have the same prologue as\n // regular C functions compiled with GCC or Clang and therefore are better handled by GDB. As a\n // consequence, and as opposed to regular Rust functions, we can set the breakpoints via the\n-// function name (and don't have to fall back on using line numbers).\n+// function name (and don't have to fall back on using line numbers). For LLDB this shouldn't make\n+// a difference because it can handle both cases.\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print pretty off\n // gdb-command:rbreak immediate_args\n // gdb-command:rbreak binding\n@@ -127,6 +131,119 @@\n // gdb-check:$32 = 45\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:breakpoint set --name immediate_args\n+// lldb-command:breakpoint set --name non_immediate_args\n+// lldb-command:breakpoint set --name binding\n+// lldb-command:breakpoint set --name assignment\n+// lldb-command:breakpoint set --name function_call\n+// lldb-command:breakpoint set --name identifier\n+// lldb-command:breakpoint set --name return_expr\n+// lldb-command:breakpoint set --name arithmetic_expr\n+// lldb-command:breakpoint set --name if_expr\n+// lldb-command:breakpoint set --name while_expr\n+// lldb-command:breakpoint set --name loop_expr\n+// lldb-command:run\n+\n+// IMMEDIATE ARGS\n+// lldb-command:print a\n+// lldb-check:[...]$0 = 1\n+// lldb-command:print b\n+// lldb-check:[...]$1 = true\n+// lldb-command:print c\n+// lldb-check:[...]$2 = 2.5\n+// lldb-command:continue\n+\n+// NON IMMEDIATE ARGS\n+// lldb-command:print a\n+// lldb-check:[...]$3 = BigStruct { a: 3, b: 4, c: 5, d: 6, e: 7, f: 8, g: 9, h: 10 }\n+// lldb-command:print b\n+// lldb-check:[...]$4 = BigStruct { a: 11, b: 12, c: 13, d: 14, e: 15, f: 16, g: 17, h: 18 }\n+// lldb-command:continue\n+\n+// BINDING\n+// lldb-command:print a\n+// lldb-check:[...]$5 = 19\n+// lldb-command:print b\n+// lldb-check:[...]$6 = 20\n+// lldb-command:print c\n+// lldb-check:[...]$7 = 21.5\n+// lldb-command:continue\n+\n+// ASSIGNMENT\n+// lldb-command:print a\n+// lldb-check:[...]$8 = 22\n+// lldb-command:print b\n+// lldb-check:[...]$9 = 23\n+// lldb-command:print c\n+// lldb-check:[...]$10 = 24.5\n+// lldb-command:continue\n+\n+// FUNCTION CALL\n+// lldb-command:print x\n+// lldb-check:[...]$11 = 25\n+// lldb-command:print y\n+// lldb-check:[...]$12 = 26\n+// lldb-command:print z\n+// lldb-check:[...]$13 = 27.5\n+// lldb-command:continue\n+\n+// EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$14 = 28\n+// lldb-command:print y\n+// lldb-check:[...]$15 = 29\n+// lldb-command:print z\n+// lldb-check:[...]$16 = 30.5\n+// lldb-command:continue\n+\n+// RETURN EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$17 = 31\n+// lldb-command:print y\n+// lldb-check:[...]$18 = 32\n+// lldb-command:print z\n+// lldb-check:[...]$19 = 33.5\n+// lldb-command:continue\n+\n+// ARITHMETIC EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$20 = 34\n+// lldb-command:print y\n+// lldb-check:[...]$21 = 35\n+// lldb-command:print z\n+// lldb-check:[...]$22 = 36.5\n+// lldb-command:continue\n+\n+// IF EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$23 = 37\n+// lldb-command:print y\n+// lldb-check:[...]$24 = 38\n+// lldb-command:print z\n+// lldb-check:[...]$25 = 39.5\n+// lldb-command:continue\n+\n+// WHILE EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$26 = 40\n+// lldb-command:print y\n+// lldb-check:[...]$27 = 41\n+// lldb-command:print z\n+// lldb-check:[...]$28 = 42\n+// lldb-command:continue\n+\n+// LOOP EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$29 = 43\n+// lldb-command:print y\n+// lldb-check:[...]$30 = 44\n+// lldb-command:print z\n+// lldb-check:[...]$31 = 45\n+// lldb-command:continue\n+\n #![allow(unused_variable)]\n \n #[no_split_stack]"}, {"sha": "7cb9c6bba5227caddeadb5ba678b72c0e03d58f2", "filename": "src/test/debuginfo/function-prologue-stepping-regular.rs", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-regular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-regular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-regular.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -0,0 +1,232 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test case checks if function arguments already have the correct value when breaking at the\n+// beginning of a function.\n+\n+// ignore-gdb\n+// compile-flags:-g\n+\n+// lldb-command:breakpoint set --name immediate_args\n+// lldb-command:breakpoint set --name non_immediate_args\n+// lldb-command:breakpoint set --name binding\n+// lldb-command:breakpoint set --name assignment\n+// lldb-command:breakpoint set --name function_call\n+// lldb-command:breakpoint set --name identifier\n+// lldb-command:breakpoint set --name return_expr\n+// lldb-command:breakpoint set --name arithmetic_expr\n+// lldb-command:breakpoint set --name if_expr\n+// lldb-command:breakpoint set --name while_expr\n+// lldb-command:breakpoint set --name loop_expr\n+// lldb-command:run\n+\n+// IMMEDIATE ARGS\n+// lldb-command:print a\n+// lldb-check:[...]$0 = 1\n+// lldb-command:print b\n+// lldb-check:[...]$1 = true\n+// lldb-command:print c\n+// lldb-check:[...]$2 = 2.5\n+// lldb-command:continue\n+\n+// NON IMMEDIATE ARGS\n+// lldb-command:print a\n+// lldb-check:[...]$3 = BigStruct { a: 3, b: 4, c: 5, d: 6, e: 7, f: 8, g: 9, h: 10 }\n+// lldb-command:print b\n+// lldb-check:[...]$4 = BigStruct { a: 11, b: 12, c: 13, d: 14, e: 15, f: 16, g: 17, h: 18 }\n+// lldb-command:continue\n+\n+// BINDING\n+// lldb-command:print a\n+// lldb-check:[...]$5 = 19\n+// lldb-command:print b\n+// lldb-check:[...]$6 = 20\n+// lldb-command:print c\n+// lldb-check:[...]$7 = 21.5\n+// lldb-command:continue\n+\n+// ASSIGNMENT\n+// lldb-command:print a\n+// lldb-check:[...]$8 = 22\n+// lldb-command:print b\n+// lldb-check:[...]$9 = 23\n+// lldb-command:print c\n+// lldb-check:[...]$10 = 24.5\n+// lldb-command:continue\n+\n+// FUNCTION CALL\n+// lldb-command:print x\n+// lldb-check:[...]$11 = 25\n+// lldb-command:print y\n+// lldb-check:[...]$12 = 26\n+// lldb-command:print z\n+// lldb-check:[...]$13 = 27.5\n+// lldb-command:continue\n+\n+// EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$14 = 28\n+// lldb-command:print y\n+// lldb-check:[...]$15 = 29\n+// lldb-command:print z\n+// lldb-check:[...]$16 = 30.5\n+// lldb-command:continue\n+\n+// RETURN EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$17 = 31\n+// lldb-command:print y\n+// lldb-check:[...]$18 = 32\n+// lldb-command:print z\n+// lldb-check:[...]$19 = 33.5\n+// lldb-command:continue\n+\n+// ARITHMETIC EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$20 = 34\n+// lldb-command:print y\n+// lldb-check:[...]$21 = 35\n+// lldb-command:print z\n+// lldb-check:[...]$22 = 36.5\n+// lldb-command:continue\n+\n+// IF EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$23 = 37\n+// lldb-command:print y\n+// lldb-check:[...]$24 = 38\n+// lldb-command:print z\n+// lldb-check:[...]$25 = 39.5\n+// lldb-command:continue\n+\n+// WHILE EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$26 = 40\n+// lldb-command:print y\n+// lldb-check:[...]$27 = 41\n+// lldb-command:print z\n+// lldb-check:[...]$28 = 42\n+// lldb-command:continue\n+\n+// LOOP EXPR\n+// lldb-command:print x\n+// lldb-check:[...]$29 = 43\n+// lldb-command:print y\n+// lldb-check:[...]$30 = 44\n+// lldb-command:print z\n+// lldb-check:[...]$31 = 45\n+// lldb-command:continue\n+\n+#![allow(unused_variable)]\n+\n+fn immediate_args(a: int, b: bool, c: f64) {\n+    ()\n+}\n+\n+struct BigStruct {\n+    a: u64,\n+    b: u64,\n+    c: u64,\n+    d: u64,\n+    e: u64,\n+    f: u64,\n+    g: u64,\n+    h: u64\n+}\n+\n+fn non_immediate_args(a: BigStruct, b: BigStruct) {\n+    ()\n+}\n+\n+fn binding(a: i64, b: u64, c: f64) {\n+    let x = 0i;\n+}\n+\n+fn assignment(mut a: u64, b: u64, c: f64) {\n+    a = b;\n+}\n+\n+fn function_call(x: u64, y: u64, z: f64) {\n+    std::io::stdio::print(\"Hi!\")\n+}\n+\n+fn identifier(x: u64, y: u64, z: f64) -> u64 {\n+    x\n+}\n+\n+fn return_expr(x: u64, y: u64, z: f64) -> u64 {\n+    return x;\n+}\n+\n+fn arithmetic_expr(x: u64, y: u64, z: f64) -> u64 {\n+    x + y\n+}\n+\n+fn if_expr(x: u64, y: u64, z: f64) -> u64 {\n+    if x + y < 1000 {\n+        x\n+    } else {\n+        y\n+    }\n+}\n+\n+fn while_expr(mut x: u64, y: u64, z: u64) -> u64 {\n+    while x + y < 1000 {\n+        x += z\n+    }\n+    return x;\n+}\n+\n+fn loop_expr(mut x: u64, y: u64, z: u64) -> u64 {\n+    loop {\n+        x += z;\n+\n+        if x + y > 1000 {\n+            return x;\n+        }\n+    }\n+}\n+\n+fn main() {\n+    immediate_args(1, true, 2.5);\n+\n+    non_immediate_args(\n+        BigStruct {\n+            a: 3,\n+            b: 4,\n+            c: 5,\n+            d: 6,\n+            e: 7,\n+            f: 8,\n+            g: 9,\n+            h: 10\n+        },\n+        BigStruct {\n+            a: 11,\n+            b: 12,\n+            c: 13,\n+            d: 14,\n+            e: 15,\n+            f: 16,\n+            g: 17,\n+            h: 18\n+        }\n+    );\n+\n+    binding(19, 20, 21.5);\n+    assignment(22, 23, 24.5);\n+    function_call(25, 26, 27.5);\n+    identifier(28, 29, 30.5);\n+    return_expr(31, 32, 33.5);\n+    arithmetic_expr(34, 35, 36.5);\n+    if_expr(37, 38, 39.5);\n+    while_expr(40, 41, 42);\n+    loop_expr(43, 44, 45);\n+}"}, {"sha": "c3996929e7c79ae748b0451c977c2893eea7ebeb", "filename": "src/test/debuginfo/generic-function.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fgeneric-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fgeneric-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-function.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -41,6 +44,36 @@\n // gdb-check:$9 = {{5, {a = 6, b = 7.5}}, {{a = 6, b = 7.5}, 5}}\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print *t0\n+// lldb-check:[...]$0 = 1\n+// lldb-command:print *t1\n+// lldb-check:[...]$1 = 2.5\n+// lldb-command:print ret\n+// lldb-check:[...]$2 = ((1, 2.5), (2.5, 1))\n+// lldb-command:continue\n+\n+// lldb-command:print *t0\n+// lldb-check:[...]$3 = 3.5\n+// lldb-command:print *t1\n+// lldb-check:[...]$4 = 4\n+// lldb-command:print ret\n+// lldb-check:[...]$5 = ((3.5, 4), (4, 3.5))\n+// lldb-command:continue\n+\n+// lldb-command:print *t0\n+// lldb-check:[...]$6 = 5\n+// lldb-command:print *t1\n+// lldb-check:[...]$7 = Struct { a: 6, b: 7.5 }\n+// lldb-command:print ret\n+// lldb-check:[...]$8 = ((5, Struct { a: 6, b: 7.5 }), (Struct { a: 6, b: 7.5 }, 5))\n+// lldb-command:continue\n+\n+\n #[deriving(Clone)]\n struct Struct {\n     a: int,\n@@ -49,7 +82,7 @@ struct Struct {\n \n fn dup_tup<T0: Clone, T1: Clone>(t0: &T0, t1: &T1) -> ((T0, T1), (T1, T0)) {\n     let ret = ((t0.clone(), t1.clone()), (t1.clone(), t0.clone()));\n-    zzz();\n+    zzz(); // #break\n     ret\n }\n "}, {"sha": "2546c2c233954b881f39a20d582e626d1b83cc51", "filename": "src/test/debuginfo/generic-functions-nested.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fgeneric-functions-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fgeneric-functions-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-functions-nested.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -42,12 +45,41 @@\n // gdb-check:$8 = 2.5\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print x\n+// lldb-check:[...]$0 = -1\n+// lldb-command:print y\n+// lldb-check:[...]$1 = 1\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$2 = -1\n+// lldb-command:print y\n+// lldb-check:[...]$3 = 2.5\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$4 = -2.5\n+// lldb-command:print y\n+// lldb-check:[...]$5 = 1\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$6 = -2.5\n+// lldb-command:print y\n+// lldb-check:[...]$7 = 2.5\n+// lldb-command:continue\n+\n fn outer<TA: Clone>(a: TA) {\n     inner(a.clone(), 1i);\n     inner(a.clone(), 2.5f64);\n \n     fn inner<TX, TY>(x: TX, y: TY) {\n-        zzz();\n+        zzz(); // #break\n     }\n }\n \n@@ -56,4 +88,4 @@ fn main() {\n     outer(-2.5f64);\n }\n \n-fn zzz() {()}\n+fn zzz() { () }"}, {"sha": "0f05eea62821318510363eb4f2580b5ff326f38b", "filename": "src/test/debuginfo/generic-method-on-generic-struct.rs", "status": "modified", "additions": 60, "deletions": 6, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -20,8 +23,8 @@\n // gdb-check:$1 = {x = {8888, -8888}}\n // gdb-command:print arg1\n // gdb-check:$2 = -1\n-// gdb-command:print/d arg2\n-// gdb-check:$3 = -2\n+// gdb-command:print arg2\n+// gdb-check:$3 = 2\n // gdb-command:continue\n \n // STACK BY VAL\n@@ -64,31 +67,82 @@\n // gdb-check:$15 = -10.5\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// STACK BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$0 = Struct<(u32, i32)> { x: (8888, -8888) }\n+// lldb-command:print arg1\n+// lldb-check:[...]$1 = -1\n+// lldb-command:print arg2\n+// lldb-check:[...]$2 = 2\n+// lldb-command:continue\n+\n+// STACK BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$3 = Struct<(u32, i32)> { x: (8888, -8888) }\n+// lldb-command:print arg1\n+// lldb-check:[...]$4 = -3\n+// lldb-command:print arg2\n+// lldb-check:[...]$5 = -4\n+// lldb-command:continue\n+\n+// OWNED BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$6 = Struct<f64> { x: 1234.5 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$7 = -5\n+// lldb-command:print arg2\n+// lldb-check:[...]$8 = -6\n+// lldb-command:continue\n+\n+// OWNED BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$9 = Struct<f64> { x: 1234.5 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$10 = -7\n+// lldb-command:print arg2\n+// lldb-check:[...]$11 = -8\n+// lldb-command:continue\n+\n+// OWNED MOVED\n+// lldb-command:print *self\n+// lldb-check:[...]$12 = Struct<f64> { x: 1234.5 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$13 = -9\n+// lldb-command:print arg2\n+// lldb-check:[...]$14 = -10.5\n+// lldb-command:continue\n+\n+\n struct Struct<T> {\n     x: T\n }\n \n impl<T1> Struct<T1> {\n \n     fn self_by_ref<T2>(&self, arg1: int, arg2: T2) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1\n     }\n \n     fn self_by_val<T2>(self, arg1: int, arg2: T2) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1\n     }\n \n     fn self_owned<T2>(~self, arg1: int, arg2: T2) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1\n     }\n }\n \n fn main() {\n     let stack = Struct { x: (8888_u32, -8888_i32) };\n-    let _ = stack.self_by_ref(-1, -2_i8);\n+    let _ = stack.self_by_ref(-1, 2_u16);\n     let _ = stack.self_by_val(-3, -4_i16);\n \n     let owned = box Struct { x: 1234.5f64 };"}, {"sha": "65ccb1314add3647c50eed75f2f989c6128737f8", "filename": "src/test/debuginfo/generic-struct.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -8,9 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -24,6 +28,20 @@\n // gdb-command:print float_int_float\n // gdb-check:$4 = {key = 6.5, value = {key = 7, value = 8.5}}\n \n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print int_int\n+// lldb-check:[...]$0 = AGenericStruct<int, int> { key: 0, value: 1 }\n+// lldb-command:print int_float\n+// lldb-check:[...]$1 = AGenericStruct<int, f64> { key: 2, value: 3.5 }\n+// lldb-command:print float_int\n+// lldb-check:[...]$2 = AGenericStruct<f64, int> { key: 4.5, value: 5 }\n+\n+// lldb-command:print float_int_float\n+// lldb-check:[...]$3 = AGenericStruct<f64, generic-struct::AGenericStruct<int, f64>> { key: 6.5, value: AGenericStruct<int, f64> { key: 7, value: 8.5 } }\n+\n struct AGenericStruct<TKey, TValue> {\n     key: TKey,\n     value: TValue\n@@ -39,7 +57,7 @@ fn main() {\n         value: AGenericStruct { key: 7i, value: 8.5f64 },\n     };\n \n-    zzz();\n+    zzz(); // #break\n }\n \n-fn zzz() {()}\n+fn zzz() { () }"}, {"sha": "8638ae3b49d890c58bfb5571ed3ad73c323c8063", "filename": "src/test/debuginfo/generic-tuple-style-enum.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -12,6 +12,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print union on\n // gdb-command:rbreak zzz\n // gdb-command:run\n@@ -30,6 +33,23 @@\n // gdb-check:$4 = {{-1}}\n \n \n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print case1\n+// lldb-check:[...]$0 = Case1(0, 31868, 31868, 31868, 31868)\n+\n+// lldb-command:print case2\n+// lldb-check:[...]$1 = Case2(0, 286331153, 286331153)\n+\n+// lldb-command:print case3\n+// lldb-check:[...]$2 = Case3(0, 6438275382588823897)\n+\n+// lldb-command:print univariant\n+// lldb-check:[...]$3 = TheOnlyCase(-1)\n+\n+\n // NOTE: This is a copy of the non-generic test case. The `Txx` type parameters have to be\n // substituted with something of size `xx` bits and the same alignment as an integer type of the\n // same size.\n@@ -73,7 +93,7 @@ fn main() {\n \n     let univariant = TheOnlyCase(-1_i64);\n \n-    zzz();\n+    zzz(); // #break\n }\n \n-fn zzz() {()}\n+fn zzz() { () }"}, {"sha": "ed9767c78f3f609e415e6504caacf32ac2f11bad", "filename": "src/test/debuginfo/include_string.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Finclude_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Finclude_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Finclude_string.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -15,13 +15,27 @@\n // gdb-command:run\n // gdb-command:finish\n // gdb-command:print string1.length\n-// gdb-check:$1 = 49\n+// gdb-check:$1 = 48\n // gdb-command:print string2.length\n // gdb-check:$2 = 49\n // gdb-command:print string3.length\n-// gdb-check:$3 = 49\n+// gdb-check:$3 = 50\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print string1.length\n+// lldb-check:[...]$0 = 48\n+// lldb-command:print string2.length\n+// lldb-check:[...]$1 = 49\n+// lldb-command:print string3.length\n+// lldb-check:[...]$2 = 50\n+\n+// lldb-command:continue\n+\n #![allow(unused_variable)]\n \n // This test case makes sure that debug info does not ICE when include_str is\n@@ -31,7 +45,8 @@ fn main() {\n     let string1 = include_str!(\"text-to-include-1.txt\");\n     let string2 = include_str!(\"text-to-include-2.txt\");\n     let string3 = include_str!(\"text-to-include-3.txt\");\n-    zzz();\n+\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "13cae3252d804e90762baf4c0cdce002d090ca60", "filename": "src/test/debuginfo/lexical-scope-in-for-loop.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-for-loop.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -53,23 +56,60 @@\n // gdb-check:$7 = 1000000\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// FIRST ITERATION\n+// lldb-command:print x\n+// lldb-check:[...]$0 = 1\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$1 = -1\n+// lldb-command:continue\n+\n+// SECOND ITERATION\n+// lldb-command:print x\n+// lldb-check:[...]$2 = 2\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$3 = -2\n+// lldb-command:continue\n+\n+// THIRD ITERATION\n+// lldb-command:print x\n+// lldb-check:[...]$4 = 3\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$5 = -3\n+// lldb-command:continue\n+\n+// AFTER LOOP\n+// lldb-command:print x\n+// lldb-check:[...]$6 = 1000000\n+// lldb-command:continue\n+\n fn main() {\n \n     let range = [1i, 2, 3];\n \n     let x = 1000000i; // wan meeeljen doollaars!\n \n     for &x in range.iter() {\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let x = -1i * x;\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n     }\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n }\n "}, {"sha": "ce30886c7d375aa4aa1cc3eaac0f164708d657fe", "filename": "src/test/debuginfo/lexical-scope-in-if.rs", "status": "modified", "additions": 73, "deletions": 8, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-if.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -78,47 +81,109 @@\n // gdb-check:$16 = -1\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// BEFORE if\n+// lldb-command:print x\n+// lldb-check:[...]$0 = 999\n+// lldb-command:print y\n+// lldb-check:[...]$1 = -1\n+// lldb-command:continue\n+\n+// AT BEGINNING of 'then' block\n+// lldb-command:print x\n+// lldb-check:[...]$2 = 999\n+// lldb-command:print y\n+// lldb-check:[...]$3 = -1\n+// lldb-command:continue\n+\n+// AFTER 1st redeclaration of 'x'\n+// lldb-command:print x\n+// lldb-check:[...]$4 = 1001\n+// lldb-command:print y\n+// lldb-check:[...]$5 = -1\n+// lldb-command:continue\n+\n+// AFTER 2st redeclaration of 'x'\n+// lldb-command:print x\n+// lldb-check:[...]$6 = 1002\n+// lldb-command:print y\n+// lldb-check:[...]$7 = 1003\n+// lldb-command:continue\n+\n+// AFTER 1st if expression\n+// lldb-command:print x\n+// lldb-check:[...]$8 = 999\n+// lldb-command:print y\n+// lldb-check:[...]$9 = -1\n+// lldb-command:continue\n+\n+// BEGINNING of else branch\n+// lldb-command:print x\n+// lldb-check:[...]$10 = 999\n+// lldb-command:print y\n+// lldb-check:[...]$11 = -1\n+// lldb-command:continue\n+\n+// BEGINNING of else branch\n+// lldb-command:print x\n+// lldb-check:[...]$12 = 1004\n+// lldb-command:print y\n+// lldb-check:[...]$13 = 1005\n+// lldb-command:continue\n+\n+// BEGINNING of else branch\n+// lldb-command:print x\n+// lldb-check:[...]$14 = 999\n+// lldb-command:print y\n+// lldb-check:[...]$15 = -1\n+// lldb-command:continue\n+\n+\n fn main() {\n \n     let x = 999i;\n     let y = -1i;\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     if x < 1000 {\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let x = 1001i;\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let x = 1002i;\n         let y = 1003i;\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n     } else {\n         unreachable!();\n     }\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     if x > 1000 {\n         unreachable!();\n     } else {\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let x = 1004i;\n         let y = 1005i;\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n     }\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n }\n "}, {"sha": "78e9b278e53a9c1c701157b6d20341eefd327528", "filename": "src/test/debuginfo/lexical-scope-in-match.rs", "status": "modified", "additions": 69, "deletions": 8, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-match.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -74,6 +77,64 @@\n // gdb-check:$18 = 232\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print shadowed\n+// lldb-check:[...]$0 = 231\n+// lldb-command:print not_shadowed\n+// lldb-check:[...]$1 = 232\n+// lldb-command:continue\n+\n+// lldb-command:print shadowed\n+// lldb-check:[...]$2 = 233\n+// lldb-command:print not_shadowed\n+// lldb-check:[...]$3 = 232\n+// lldb-command:print local_to_arm\n+// lldb-check:[...]$4 = 234\n+// lldb-command:continue\n+\n+// lldb-command:print shadowed\n+// lldb-check:[...]$5 = 236\n+// lldb-command:print not_shadowed\n+// lldb-check:[...]$6 = 232\n+// lldb-command:continue\n+\n+// lldb-command:print shadowed\n+// lldb-check:[...]$7 = 237\n+// lldb-command:print not_shadowed\n+// lldb-check:[...]$8 = 232\n+// lldb-command:print local_to_arm\n+// lldb-check:[...]$9 = 238\n+// lldb-command:continue\n+\n+// lldb-command:print shadowed\n+// lldb-check:[...]$10 = 239\n+// lldb-command:print not_shadowed\n+// lldb-check:[...]$11 = 232\n+// lldb-command:continue\n+\n+// lldb-command:print shadowed\n+// lldb-check:[...]$12 = 241\n+// lldb-command:print not_shadowed\n+// lldb-check:[...]$13 = 232\n+// lldb-command:continue\n+\n+// lldb-command:print shadowed\n+// lldb-check:[...]$14 = 243\n+// lldb-command:print *local_to_arm\n+// lldb-check:[...]$15 = 244\n+// lldb-command:continue\n+\n+// lldb-command:print shadowed\n+// lldb-check:[...]$16 = 231\n+// lldb-command:print not_shadowed\n+// lldb-check:[...]$17 = 232\n+// lldb-command:continue\n+\n+\n struct Struct {\n     x: int,\n     y: int\n@@ -84,13 +145,13 @@ fn main() {\n     let shadowed = 231i;\n     let not_shadowed = 232i;\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     match (233i, 234i) {\n         (shadowed, local_to_arm) => {\n \n-            zzz();\n+            zzz(); // #break\n             sentinel();\n         }\n     }\n@@ -99,7 +160,7 @@ fn main() {\n         // with literal\n         (235, shadowed) => {\n \n-            zzz();\n+            zzz(); // #break\n             sentinel();\n         }\n         _ => {}\n@@ -108,7 +169,7 @@ fn main() {\n     match (Struct { x: 237, y: 238 }) {\n         Struct { x: shadowed, y: local_to_arm } => {\n \n-            zzz();\n+            zzz(); // #break\n             sentinel();\n         }\n     }\n@@ -117,7 +178,7 @@ fn main() {\n         // ignored field\n         Struct { x: shadowed, .. } => {\n \n-            zzz();\n+            zzz(); // #break\n             sentinel();\n         }\n     }\n@@ -126,7 +187,7 @@ fn main() {\n         // with literal\n         Struct { x: shadowed, y: 242 } => {\n \n-            zzz();\n+            zzz(); // #break\n             sentinel();\n         }\n         _ => {}\n@@ -135,12 +196,12 @@ fn main() {\n     match (243i, 244i) {\n         (shadowed, ref local_to_arm) => {\n \n-            zzz();\n+            zzz(); // #break\n             sentinel();\n         }\n     }\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n }\n "}, {"sha": "aca6cc06abddb6f55d48bce5eec64e1d16bdf3e7", "filename": "src/test/debuginfo/lexical-scope-in-stack-closure.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -44,34 +47,63 @@\n // gdb-check:$6 = false\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print x\n+// lldb-check:[...]$0 = false\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$1 = false\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$2 = 1000\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$3 = 2.5\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$4 = true\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$5 = false\n+// lldb-command:continue\n+\n fn main() {\n \n     let x = false;\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     let stack_closure: |int| = |x| {\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let x = 2.5f64;\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let x = true;\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n     };\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     stack_closure(1000);\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n }\n "}, {"sha": "3096dfbd2a6e201c357bbd4c611108beb864223b", "filename": "src/test/debuginfo/lexical-scope-in-unconditional-loop.rs", "status": "modified", "additions": 70, "deletions": 7, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unconditional-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unconditional-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unconditional-loop.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -82,6 +85,66 @@\n // gdb-check:$13 = 2\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// FIRST ITERATION\n+// lldb-command:print x\n+// lldb-check:[...]$0 = 0\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$1 = 1\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$2 = 101\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$3 = 101\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$4 = -987\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$5 = 101\n+// lldb-command:continue\n+\n+\n+// SECOND ITERATION\n+// lldb-command:print x\n+// lldb-check:[...]$6 = 1\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$7 = 2\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$8 = 102\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$9 = 102\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$10 = -987\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$11 = 102\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$12 = 2\n+// lldb-command:continue\n+\n fn main() {\n \n     let mut x = 0i;\n@@ -91,35 +154,35 @@ fn main() {\n             break;\n         }\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         x += 1;\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         // Shadow x\n         let x = x + 100;\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         // open scope within loop's top level scope\n         {\n-            zzz();\n+            zzz(); // #break\n             sentinel();\n \n             let x = -987i;\n \n-            zzz();\n+            zzz(); // #break\n             sentinel();\n         }\n \n         // Check that we get the x before the inner scope again\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n     }\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n }\n "}, {"sha": "590b7238c123a0a5f0e1f9e500c127d0c9ecfe2a", "filename": "src/test/debuginfo/lexical-scope-in-unique-closure.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unique-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unique-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unique-closure.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -44,34 +47,63 @@\n // gdb-check:$6 = false\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print x\n+// lldb-check:[...]$0 = false\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$1 = false\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$2 = 1000\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$3 = 2.5\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$4 = true\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$5 = false\n+// lldb-command:continue\n+\n fn main() {\n \n     let x = false;\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     let unique_closure: proc(int) = proc(x) {\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let x = 2.5f64;\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let x = true;\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n     };\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     unique_closure(1000);\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n }\n "}, {"sha": "b211c11128a7ce9f680aa9832bdf531683fe01c3", "filename": "src/test/debuginfo/lexical-scope-in-while.rs", "status": "modified", "additions": 71, "deletions": 7, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-while.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -82,40 +85,101 @@\n // gdb-check:$13 = 2\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// FIRST ITERATION\n+// lldb-command:print x\n+// lldb-check:[...]$0 = 0\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$1 = 1\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$2 = 101\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$3 = 101\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$4 = -987\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$5 = 101\n+// lldb-command:continue\n+\n+\n+// SECOND ITERATION\n+// lldb-command:print x\n+// lldb-check:[...]$6 = 1\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$7 = 2\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$8 = 102\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$9 = 102\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$10 = -987\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$11 = 102\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$12 = 2\n+// lldb-command:continue\n+\n+\n fn main() {\n \n     let mut x = 0i;\n \n     while x < 2 {\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         x += 1;\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         // Shadow x\n         let x = x + 100;\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         // open scope within loop's top level scope\n         {\n-            zzz();\n+            zzz(); // #break\n             sentinel();\n \n             let x = -987i;\n \n-            zzz();\n+            zzz(); // #break\n             sentinel();\n         }\n \n         // Check that we get the x before the inner scope again\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n     }\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n }\n "}, {"sha": "27070dd867d0e40458ff6d3812271cc77820fb4d", "filename": "src/test/debuginfo/lexical-scope-with-macro.rs", "status": "modified", "additions": 60, "deletions": 7, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-with-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scope-with-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-with-macro.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -65,6 +68,56 @@\n // gdb-check:$15 = 400\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print a\n+// lldb-check:[...]$0 = 10\n+// lldb-command:print b\n+// lldb-check:[...]$1 = 34\n+// lldb-command:continue\n+\n+// lldb-command:print a\n+// lldb-check:[...]$2 = 890242\n+// lldb-command:print b\n+// lldb-check:[...]$3 = 34\n+// lldb-command:continue\n+\n+// lldb-command:print a\n+// lldb-check:[...]$4 = 10\n+// lldb-command:print b\n+// lldb-check:[...]$5 = 34\n+// lldb-command:continue\n+\n+// lldb-command:print a\n+// lldb-check:[...]$6 = 102\n+// lldb-command:print b\n+// lldb-check:[...]$7 = 34\n+// lldb-command:continue\n+\n+// lldb-command:print a\n+// lldb-check:[...]$8 = 110\n+// lldb-command:print b\n+// lldb-check:[...]$9 = 34\n+// lldb-command:continue\n+\n+// lldb-command:print a\n+// lldb-check:[...]$10 = 10\n+// lldb-command:print b\n+// lldb-check:[...]$11 = 34\n+// lldb-command:continue\n+\n+// lldb-command:print a\n+// lldb-check:[...]$12 = 10\n+// lldb-command:print b\n+// lldb-check:[...]$13 = 34\n+// lldb-command:print c\n+// lldb-check:[...]$14 = 400\n+// lldb-command:continue\n+\n+\n #![feature(macro_rules)]\n \n macro_rules! trivial(\n@@ -78,7 +131,7 @@ macro_rules! no_new_scope(\n macro_rules! new_scope(\n     () => ({\n         let a = 890242i;\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n     })\n )\n@@ -87,12 +140,12 @@ macro_rules! shadow_within_macro(\n     ($e1:expr) => ({\n         let a = $e1 + 2;\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let a = $e1 + 10;\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n     })\n )\n@@ -108,22 +161,22 @@ fn main() {\n     let a = trivial!(10i);\n     let b = no_new_scope!(33i);\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     new_scope!();\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     shadow_within_macro!(100i);\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     let c = dup_expr!(10i * 20);\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n }\n "}, {"sha": "b5f9622e79a7bd977aaab5e63ee4c0e41bca8f8a", "filename": "src/test/debuginfo/lexical-scopes-in-block-expression.rs", "status": "modified", "additions": 185, "deletions": 24, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -12,6 +12,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -211,6 +214,164 @@\n // gdb-check:$57 = 10\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// STRUCT EXPRESSION\n+// lldb-command:print val\n+// lldb-check:[...]$0 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$1 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$2 = 11\n+// lldb-command:print ten\n+// lldb-check:[...]$3 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$4 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$5 = 10\n+// lldb-command:continue\n+\n+// FUNCTION CALL\n+// lldb-command:print val\n+// lldb-check:[...]$6 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$7 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$8 = 12\n+// lldb-command:print ten\n+// lldb-check:[...]$9 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$10 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$11 = 10\n+// lldb-command:continue\n+\n+// TUPLE EXPRESSION\n+// lldb-command:print val\n+// lldb-check:[...]$12 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$13 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$14 = 13\n+// lldb-command:print ten\n+// lldb-check:[...]$15 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$16 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$17 = 10\n+// lldb-command:continue\n+\n+// VEC EXPRESSION\n+// lldb-command:print val\n+// lldb-check:[...]$18 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$19 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$20 = 14\n+// lldb-command:print ten\n+// lldb-check:[...]$21 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$22 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$23 = 10\n+// lldb-command:continue\n+\n+// REPEAT VEC EXPRESSION\n+// lldb-command:print val\n+// lldb-check:[...]$24 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$25 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$26 = 15\n+// lldb-command:print ten\n+// lldb-check:[...]$27 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$28 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$29 = 10\n+// lldb-command:continue\n+\n+// ASSIGNMENT EXPRESSION\n+// lldb-command:print val\n+// lldb-check:[...]$30 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$31 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$32 = 16\n+// lldb-command:print ten\n+// lldb-check:[...]$33 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$34 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$35 = 10\n+// lldb-command:continue\n+\n+\n+// ARITHMETIC EXPRESSION\n+// lldb-command:print val\n+// lldb-check:[...]$36 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$37 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$38 = 17\n+// lldb-command:print ten\n+// lldb-check:[...]$39 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$40 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$41 = 10\n+// lldb-command:continue\n+\n+// INDEX EXPRESSION\n+// lldb-command:print val\n+// lldb-check:[...]$42 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$43 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$44 = 18\n+// lldb-command:print ten\n+// lldb-check:[...]$45 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print val\n+// lldb-check:[...]$46 = -1\n+// lldb-command:print ten\n+// lldb-check:[...]$47 = 10\n+// lldb-command:continue\n+\n #![allow(unused_variable)]\n #![allow(dead_assignment)]\n \n@@ -233,143 +394,143 @@ fn main() {\n     // surrounded by struct expression\n     let point = Point {\n         x: {\n-            zzz();\n+            zzz(); // #break\n             sentinel();\n \n             let val = ten + 1;\n             unsafe {MUT_INT = 1;};\n \n-            zzz();\n+            zzz(); // #break\n             sentinel();\n \n             val\n         },\n         y: 10\n     };\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     // surrounded by function call\n     let _ = a_function({\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let val = ten + 2;\n         unsafe {MUT_INT = 2;};\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         val\n     });\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n \n     // surrounded by tup\n     let _ = ({\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let val = ten + 3;\n         unsafe {MUT_INT = 3;};\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         val\n     }, 0i);\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     // surrounded by vec\n     let _ = [{\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let val = ten + 4;\n         unsafe {MUT_INT = 4;};\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         val\n     }, 0, 0];\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     // surrounded by repeat vec\n     let _ = [{\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let val = ten + 5;\n         unsafe {MUT_INT = 5;};\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         val\n     }, ..10];\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     // assignment expression\n     let mut var = 0;\n     var = {\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let val = ten + 6;\n         unsafe {MUT_INT = 6;};\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         val\n     };\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     // arithmetic expression\n     var = 10 + -{\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let val = ten + 7;\n         unsafe {MUT_INT = 7;};\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         val\n     } * 5;\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     // index expression\n     let a_vector = [10i, ..20];\n     let _ = a_vector[{\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let val = ten + 8;\n         unsafe {MUT_INT = 8;};\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         val as uint\n     }];\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n }\n "}, {"sha": "6c71971a0f82406525053b0c874d698da3958135", "filename": "src/test/debuginfo/limited-debuginfo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -10,6 +10,8 @@\n \n // ignore-android: FIXME(#10381)\n \n+// ignore-lldb\n+\n // compile-flags:--debuginfo=1\n \n // Make sure functions have proper names"}, {"sha": "2fd43d3e9ca67a1e36b53bae229697373e96401e", "filename": "src/test/debuginfo/managed-enum.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmanaged-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmanaged-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmanaged-enum.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -24,6 +27,20 @@\n // gdb-command:print univariant->val\n // gdb-check:$3 = {{-9747455}}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print the_a->val\n+// lldb-check:[...]$0 = TheA { x: 0, y: 8970181431921507452 }\n+\n+// lldb-command:print the_b->val\n+// lldb-check:[...]$1 = TheB(0, 286331153, 286331153)\n+\n+// lldb-command:print univariant->val\n+// lldb-check:[...]$2 = TheOnlyCase(-9747455)\n+\n #![allow(unused_variable)]\n #![feature(struct_variant, managed_boxes)]\n \n@@ -62,7 +79,7 @@ fn main() {\n \n     let univariant = box(GC) TheOnlyCase(-9747455);\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "6abd174b1aa67e164c8517bd3f799363e5d4da71", "filename": "src/test/debuginfo/managed-pointer-within-unique-vec.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique-vec.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -13,6 +13,9 @@\n #![feature(managed_boxes)]\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -29,6 +32,24 @@\n // gdb-command:print unique.ptr[3]->val\n // gdb-check:$4 = 13\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print unique.ptr[0]->val\n+// lldb-check:[...]$0 = 10\n+\n+// lldb-command:print unique.ptr[1]->val\n+// lldb-check:[...]$1 = 11\n+\n+// lldb-command:print unique.ptr[2]->val\n+// lldb-check:[...]$2 = 12\n+\n+// lldb-command:print unique.ptr[3]->val\n+// lldb-check:[...]$3 = 13\n+\n+\n #![allow(unused_variable)]\n \n use std::gc::{Gc, GC};\n@@ -37,7 +58,7 @@ fn main() {\n \n     let unique: Vec<Gc<i64>> = vec!(box(GC) 10, box(GC) 11, box(GC) 12, box(GC) 13);\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "7f1b32936c8197c8fcfe7065cf2e6bab72f5cc64", "filename": "src/test/debuginfo/managed-pointer-within-unique.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -13,6 +13,9 @@\n #![feature(managed_boxes)]\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print pretty off\n // gdb-command:rbreak zzz\n // gdb-command:run\n@@ -27,6 +30,19 @@\n // gdb-command:print managed_within_unique->y->val\n // gdb-check:$3 = -4\n \n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print *ordinary_unique\n+// lldb-check:[...]$0 = (-1, -2)\n+\n+// lldb-command:print managed_within_unique->x\n+// lldb-check:[...]$1 = -3\n+\n+// lldb-command:print managed_within_unique->y->val\n+// lldb-check:[...]$2 = -4\n+\n #![allow(unused_variable)]\n \n use std::gc::{GC, Gc};\n@@ -41,7 +57,7 @@ fn main() {\n \n     let managed_within_unique = box ContainsManaged { x: -3, y: box(GC) -4i };\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "f3d723e88bc515d6bc0f11d3ffd15835247b7048", "filename": "src/test/debuginfo/method-on-enum.rs", "status": "modified", "additions": 56, "deletions": 3, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -64,6 +67,56 @@\n // gdb-check:$15 = -10\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// STACK BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$0 = Variant2(117901063)\n+// lldb-command:print arg1\n+// lldb-check:[...]$1 = -1\n+// lldb-command:print arg2\n+// lldb-check:[...]$2 = -2\n+// lldb-command:continue\n+\n+// STACK BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$3 = Variant2(117901063)\n+// lldb-command:print arg1\n+// lldb-check:[...]$4 = -3\n+// lldb-command:print arg2\n+// lldb-check:[...]$5 = -4\n+// lldb-command:continue\n+\n+// OWNED BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$6 = Variant1 { x: 1799, y: 1799 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$7 = -5\n+// lldb-command:print arg2\n+// lldb-check:[...]$8 = -6\n+// lldb-command:continue\n+\n+// OWNED BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$9 = Variant1 { x: 1799, y: 1799 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$10 = -7\n+// lldb-command:print arg2\n+// lldb-check:[...]$11 = -8\n+// lldb-command:continue\n+\n+// OWNED MOVED\n+// lldb-command:print *self\n+// lldb-check:[...]$12 = Variant1 { x: 1799, y: 1799 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$13 = -9\n+// lldb-command:print arg2\n+// lldb-check:[...]$14 = -10\n+// lldb-command:continue\n+\n #![feature(struct_variant)]\n \n enum Enum {\n@@ -74,17 +127,17 @@ enum Enum {\n impl Enum {\n \n     fn self_by_ref(&self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1 + arg2\n     }\n \n     fn self_by_val(self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1 + arg2\n     }\n \n     fn self_owned(~self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1 + arg2\n     }\n }"}, {"sha": "489ea114e1f598766f708016e67baac5bd292e8c", "filename": "src/test/debuginfo/method-on-generic-struct.rs", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -64,24 +67,75 @@\n // gdb-check:$15 = -10\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// STACK BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$0 = Struct<(u32, i32)> { x: (8888, -8888) }\n+// lldb-command:print arg1\n+// lldb-check:[...]$1 = -1\n+// lldb-command:print arg2\n+// lldb-check:[...]$2 = -2\n+// lldb-command:continue\n+\n+// STACK BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$3 = Struct<(u32, i32)> { x: (8888, -8888) }\n+// lldb-command:print arg1\n+// lldb-check:[...]$4 = -3\n+// lldb-command:print arg2\n+// lldb-check:[...]$5 = -4\n+// lldb-command:continue\n+\n+// OWNED BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$6 = Struct<f64> { x: 1234.5 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$7 = -5\n+// lldb-command:print arg2\n+// lldb-check:[...]$8 = -6\n+// lldb-command:continue\n+\n+// OWNED BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$9 = Struct<f64> { x: 1234.5 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$10 = -7\n+// lldb-command:print arg2\n+// lldb-check:[...]$11 = -8\n+// lldb-command:continue\n+\n+// OWNED MOVED\n+// lldb-command:print *self\n+// lldb-check:[...]$12 = Struct<f64> { x: 1234.5 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$13 = -9\n+// lldb-command:print arg2\n+// lldb-check:[...]$14 = -10\n+// lldb-command:continue\n+\n+\n struct Struct<T> {\n     x: T\n }\n \n impl<T> Struct<T> {\n \n     fn self_by_ref(&self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1 + arg2\n     }\n \n     fn self_by_val(self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1 + arg2\n     }\n \n     fn self_owned(~self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1 + arg2\n     }\n }"}, {"sha": "f2db6e3af471e2d6bcb33a42724f5fd97b35c207", "filename": "src/test/debuginfo/method-on-struct.rs", "status": "modified", "additions": 56, "deletions": 3, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -64,24 +67,74 @@\n // gdb-check:$15 = -10\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// STACK BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$0 = Struct { x: 100 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$1 = -1\n+// lldb-command:print arg2\n+// lldb-check:[...]$2 = -2\n+// lldb-command:continue\n+\n+// STACK BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$3 = Struct { x: 100 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$4 = -3\n+// lldb-command:print arg2\n+// lldb-check:[...]$5 = -4\n+// lldb-command:continue\n+\n+// OWNED BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$6 = Struct { x: 200 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$7 = -5\n+// lldb-command:print arg2\n+// lldb-check:[...]$8 = -6\n+// lldb-command:continue\n+\n+// OWNED BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$9 = Struct { x: 200 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$10 = -7\n+// lldb-command:print arg2\n+// lldb-check:[...]$11 = -8\n+// lldb-command:continue\n+\n+// OWNED MOVED\n+// lldb-command:print *self\n+// lldb-check:[...]$12 = Struct { x: 200 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$13 = -9\n+// lldb-command:print arg2\n+// lldb-check:[...]$14 = -10\n+// lldb-command:continue\n+\n struct Struct {\n     x: int\n }\n \n impl Struct {\n \n     fn self_by_ref(&self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         self.x + arg1 + arg2\n     }\n \n     fn self_by_val(self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         self.x + arg1 + arg2\n     }\n \n     fn self_owned(~self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         self.x + arg1 + arg2\n     }\n }"}, {"sha": "e38aace11b93bf334c9fab100296495e5a31b427", "filename": "src/test/debuginfo/method-on-trait.rs", "status": "modified", "additions": 56, "deletions": 3, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -64,6 +67,56 @@\n // gdb-check:$15 = -10\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// STACK BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$0 = Struct { x: 100 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$1 = -1\n+// lldb-command:print arg2\n+// lldb-check:[...]$2 = -2\n+// lldb-command:continue\n+\n+// STACK BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$3 = Struct { x: 100 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$4 = -3\n+// lldb-command:print arg2\n+// lldb-check:[...]$5 = -4\n+// lldb-command:continue\n+\n+// OWNED BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$6 = Struct { x: 200 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$7 = -5\n+// lldb-command:print arg2\n+// lldb-check:[...]$8 = -6\n+// lldb-command:continue\n+\n+// OWNED BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$9 = Struct { x: 200 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$10 = -7\n+// lldb-command:print arg2\n+// lldb-check:[...]$11 = -8\n+// lldb-command:continue\n+\n+// OWNED MOVED\n+// lldb-command:print *self\n+// lldb-check:[...]$12 = Struct { x: 200 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$13 = -9\n+// lldb-command:print arg2\n+// lldb-check:[...]$14 = -10\n+// lldb-command:continue\n+\n struct Struct {\n     x: int\n }\n@@ -77,17 +130,17 @@ trait Trait {\n impl Trait for Struct {\n \n     fn self_by_ref(&self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         self.x + arg1 + arg2\n     }\n \n     fn self_by_val(self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         self.x + arg1 + arg2\n     }\n \n     fn self_owned(~self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         self.x + arg1 + arg2\n     }\n }"}, {"sha": "6f8a6182063b7ccab0fe531851c357e0e6d352bd", "filename": "src/test/debuginfo/method-on-tuple-struct.rs", "status": "modified", "additions": 56, "deletions": 3, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -64,22 +67,72 @@\n // gdb-check:$15 = -10\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// STACK BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$0 = TupleStruct(100, -100.5)\n+// lldb-command:print arg1\n+// lldb-check:[...]$1 = -1\n+// lldb-command:print arg2\n+// lldb-check:[...]$2 = -2\n+// lldb-command:continue\n+\n+// STACK BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$3 = TupleStruct(100, -100.5)\n+// lldb-command:print arg1\n+// lldb-check:[...]$4 = -3\n+// lldb-command:print arg2\n+// lldb-check:[...]$5 = -4\n+// lldb-command:continue\n+\n+// OWNED BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$6 = TupleStruct(200, -200.5)\n+// lldb-command:print arg1\n+// lldb-check:[...]$7 = -5\n+// lldb-command:print arg2\n+// lldb-check:[...]$8 = -6\n+// lldb-command:continue\n+\n+// OWNED BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$9 = TupleStruct(200, -200.5)\n+// lldb-command:print arg1\n+// lldb-check:[...]$10 = -7\n+// lldb-command:print arg2\n+// lldb-check:[...]$11 = -8\n+// lldb-command:continue\n+\n+// OWNED MOVED\n+// lldb-command:print *self\n+// lldb-check:[...]$12 = TupleStruct(200, -200.5)\n+// lldb-command:print arg1\n+// lldb-check:[...]$13 = -9\n+// lldb-command:print arg2\n+// lldb-check:[...]$14 = -10\n+// lldb-command:continue\n+\n struct TupleStruct(int, f64);\n \n impl TupleStruct {\n \n     fn self_by_ref(&self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1 + arg2\n     }\n \n     fn self_by_val(self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1 + arg2\n     }\n \n     fn self_owned(~self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1 + arg2\n     }\n }"}, {"sha": "1d9427a3bfe68174e606bdce7b6b054a27ec6b9d", "filename": "src/test/debuginfo/multiple-functions-equal-var-names.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmultiple-functions-equal-var-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmultiple-functions-equal-var-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmultiple-functions-equal-var-names.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -28,22 +31,38 @@\n // gdb-command:print abc\n // gdb-check:$3 = 30303\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print abc\n+// lldb-check:[...]$0 = 10101\n+// lldb-command:continue\n+\n+// lldb-command:print abc\n+// lldb-check:[...]$1 = 20202\n+// lldb-command:continue\n+\n+// lldb-command:print abc\n+// lldb-check:[...]$2 = 30303\n+\n #![allow(unused_variable)]\n \n fn function_one() {\n     let abc = 10101i;\n-    zzz();\n+    zzz(); // #break\n }\n \n fn function_two() {\n     let abc = 20202i;\n-    zzz();\n+    zzz(); // #break\n }\n \n \n fn function_three() {\n     let abc = 30303i;\n-    zzz();\n+    zzz(); // #break\n }\n \n "}, {"sha": "25d9dc02404338491f43a1fe1dc05c114bb31376", "filename": "src/test/debuginfo/multiple-functions.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmultiple-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fmultiple-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmultiple-functions.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -28,22 +31,38 @@\n // gdb-command:print c\n // gdb-check:$3 = 30303\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print a\n+// lldb-check:[...]$0 = 10101\n+// lldb-command:continue\n+\n+// lldb-command:print b\n+// lldb-check:[...]$1 = 20202\n+// lldb-command:continue\n+\n+// lldb-command:print c\n+// lldb-check:[...]$2 = 30303\n+\n #![allow(unused_variable)]\n \n fn function_one() {\n     let a = 10101i;\n-    zzz();\n+    zzz(); // #break\n }\n \n fn function_two() {\n     let b = 20202i;\n-    zzz();\n+    zzz(); // #break\n }\n \n \n fn function_three() {\n     let c = 30303i;\n-    zzz();\n+    zzz(); // #break\n }\n \n "}, {"sha": "3462735f6d1093695c3e0e7eb333f1c967589eaa", "filename": "src/test/debuginfo/name-shadowing-and-scope-nesting.rs", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fname-shadowing-and-scope-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fname-shadowing-and-scope-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fname-shadowing-and-scope-nesting.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -56,38 +59,79 @@\n // gdb-check:$12 = 20\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print x\n+// lldb-check:[...]$0 = false\n+// lldb-command:print y\n+// lldb-check:[...]$1 = true\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$2 = 10\n+// lldb-command:print y\n+// lldb-check:[...]$3 = true\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$4 = 10.5\n+// lldb-command:print y\n+// lldb-check:[...]$5 = 20\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$6 = true\n+// lldb-command:print y\n+// lldb-check:[...]$7 = 2220\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$8 = 203203.5\n+// lldb-command:print y\n+// lldb-check:[...]$9 = 2220\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$10 = 10.5\n+// lldb-command:print y\n+// lldb-check:[...]$11 = 20\n+// lldb-command:continue\n+\n fn main() {\n     let x = false;\n     let y = true;\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     let x = 10i;\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     let x = 10.5f64;\n     let y = 20i;\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     {\n         let x = true;\n         let y = 2220i;\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let x = 203203.5f64;\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n     }\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n }\n "}, {"sha": "511786999abf34404c3157af71aef0ccc2225ed4", "filename": "src/test/debuginfo/nil-enum.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fnil-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fnil-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fnil-enum.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// LLDB can't handle zero-sized values\n+// ignore-lldb\n+\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g"}, {"sha": "f9e2f61564bee93c00eea8a1f5f78c2b6a805ae7", "filename": "src/test/debuginfo/option-like-enum.rs", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -12,6 +12,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -25,17 +28,41 @@\n // gdb-command:print full\n // gdb-check:$3 = {RUST$ENCODED$ENUM$1$Empty = {454545, 0x87654321, 9988}}\n \n-// gdb-command:print empty->discr\n+// gdb-command:print empty_gdb->discr\n // gdb-check:$4 = (int *) 0x0\n \n // gdb-command:print droid\n // gdb-check:$5 = {RUST$ENCODED$ENUM$2$Void = {id = 675675, range = 10000001, internals = 0x43218765}}\n \n-// gdb-command:print void_droid->internals\n+// gdb-command:print void_droid_gdb->internals\n // gdb-check:$6 = (int *) 0x0\n \n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print some\n+// lldb-check:[...]$0 = Some(&0x12345678)\n+\n+// lldb-command:print none\n+// lldb-check:[...]$1 = None\n+\n+// lldb-command:print full\n+// lldb-check:[...]$2 = Full(454545, &0x87654321, 9988)\n+\n+// lldb-command:print empty\n+// lldb-check:[...]$3 = Empty\n+\n+// lldb-command:print droid\n+// lldb-check:[...]$4 = Droid { id: 675675, range: 10000001, internals: &0x43218765 }\n+\n+// lldb-command:print void_droid\n+// lldb-check:[...]$5 = Void\n+\n+\n #![feature(struct_variant)]\n \n // If a struct has exactly two variants, one of them is empty, and the other one\n@@ -77,18 +104,19 @@ fn main() {\n \n     let full = Full(454545, unsafe { std::mem::transmute(0x87654321u) }, 9988);\n \n-    let int_val = 0i;\n-    let empty: &MoreFieldsRepr = unsafe { std::mem::transmute(&Empty) };\n+    let empty = Empty;\n+    let empty_gdb: &MoreFieldsRepr = unsafe { std::mem::transmute(&Empty) };\n \n     let droid = Droid {\n         id: 675675,\n         range: 10000001,\n         internals: unsafe { std::mem::transmute(0x43218765u) }\n     };\n \n-    let void_droid: &NamedFieldsRepr = unsafe { std::mem::transmute(&Void) };\n+    let void_droid = Void;\n+    let void_droid_gdb: &NamedFieldsRepr = unsafe { std::mem::transmute(&Void) };\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "215d961b71b0eb132be35f85acdaf3cf7e3b5466", "filename": "src/test/debuginfo/packed-struct-with-destructor.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fpacked-struct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fpacked-struct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpacked-struct-with-destructor.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -12,6 +12,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print pretty off\n // gdb-command:rbreak zzz\n // gdb-command:run\n@@ -42,6 +45,36 @@\n // gdb-command:print deeplyNested\n // gdb-check:$8 = {a = {a = 1, b = {x = 2, y = 3, z = 4}, c = 5, d = {x = 6, y = 7, z = 8}}, b = {a = 9, b = {x = 10, y = 11, z = 12}, c = {x = 13, y = 14, z = 15}, d = 16}, c = {a = 17, b = {x = 18, y = 19, z = 20}, c = 21, d = {x = 22, y = 23, z = 24}}, d = {a = 25, b = {x = 26, y = 27, z = 28}, c = 29, d = {x = 30, y = 31, z = 32}}, e = {a = 33, b = {x = 34, y = 35, z = 36}, c = {x = 37, y = 38, z = 39}, d = 40}, f = {a = 41, b = {x = 42, y = 43, z = 44}, c = 45, d = {x = 46, y = 47, z = 48}}}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print packed\n+// lldb-check:[...]$0 = Packed { x: 123, y: 234, z: 345 }\n+\n+// lldb-command:print packedInPacked\n+// lldb-check:[...]$1 = PackedInPacked { a: 1111, b: Packed { x: 2222, y: 3333, z: 4444 }, c: 5555, d: Packed { x: 6666, y: 7777, z: 8888 } }\n+\n+// lldb-command:print packedInUnpacked\n+// lldb-check:[...]$2 = PackedInUnpacked { a: -1111, b: Packed { x: -2222, y: -3333, z: -4444 }, c: -5555, d: Packed { x: -6666, y: -7777, z: -8888 } }\n+\n+// lldb-command:print unpackedInPacked\n+// lldb-check:[...]$3 = UnpackedInPacked { a: 987, b: Unpacked { x: 876, y: 765, z: 654 }, c: Unpacked { x: 543, y: 432, z: 321 }, d: 210 }\n+\n+// lldb-command:print packedInPackedWithDrop\n+// lldb-check:[...]$4 = PackedInPackedWithDrop { a: 11, b: Packed { x: 22, y: 33, z: 44 }, c: 55, d: Packed { x: 66, y: 77, z: 88 } }\n+\n+// lldb-command:print packedInUnpackedWithDrop\n+// lldb-check:[...]$5 = PackedInUnpackedWithDrop { a: -11, b: Packed { x: -22, y: -33, z: -44 }, c: -55, d: Packed { x: -66, y: -77, z: -88 } }\n+\n+// lldb-command:print unpackedInPackedWithDrop\n+// lldb-check:[...]$6 = UnpackedInPackedWithDrop { a: 98, b: Unpacked { x: 87, y: 76, z: 65 }, c: Unpacked { x: 54, y: 43, z: 32 }, d: 21 }\n+\n+// lldb-command:print deeplyNested\n+// lldb-check:[...]$7 = DeeplyNested { a: PackedInPacked { a: 1, b: Packed { x: 2, y: 3, z: 4 }, c: 5, d: Packed { x: 6, y: 7, z: 8 } }, b: UnpackedInPackedWithDrop { a: 9, b: Unpacked { x: 10, y: 11, z: 12 }, c: Unpacked { x: 13, y: 14, z: 15 }, d: 16 }, c: PackedInUnpacked { a: 17, b: Packed { x: 18, y: 19, z: 20 }, c: 21, d: Packed { x: 22, y: 23, z: 24 } }, d: PackedInUnpackedWithDrop { a: 25, b: Packed { x: 26, y: 27, z: 28 }, c: 29, d: Packed { x: 30, y: 31, z: 32 } }, e: UnpackedInPacked { a: 33, b: Unpacked { x: 34, y: 35, z: 36 }, c: Unpacked { x: 37, y: 38, z: 39 }, d: 40 }, f: PackedInPackedWithDrop { a: 41, b: Packed { x: 42, y: 43, z: 44 }, c: 45, d: Packed { x: 46, y: 47, z: 48 } } }\n+\n+\n #![allow(unused_variable)]\n \n #[packed]\n@@ -216,7 +249,7 @@ fn main() {\n         }\n     };\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "8201afe3a016463229a8dafc705c19db8ed8921c", "filename": "src/test/debuginfo/packed-struct.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -12,6 +12,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print pretty off\n // gdb-command:rbreak zzz\n // gdb-command:run\n@@ -35,6 +38,29 @@\n // gdb-command:print sizeof(packedInPacked)\n // gdb-check:$6 = 40\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print packed\n+// lldb-check:[...]$0 = Packed { x: 123, y: 234, z: 345 }\n+\n+// lldb-command:print packedInPacked\n+// lldb-check:[...]$1 = PackedInPacked { a: 1111, b: Packed { x: 2222, y: 3333, z: 4444 }, c: 5555, d: Packed { x: 6666, y: 7777, z: 8888 } }\n+\n+// lldb-command:print packedInUnpacked\n+// lldb-check:[...]$2 = PackedInUnpacked { a: -1111, b: Packed { x: -2222, y: -3333, z: -4444 }, c: -5555, d: Packed { x: -6666, y: -7777, z: -8888 } }\n+\n+// lldb-command:print unpackedInPacked\n+// lldb-check:[...]$3 = UnpackedInPacked { a: 987, b: Unpacked { x: 876, y: 765, z: 654, w: 543 }, c: Unpacked { x: 432, y: 321, z: 210, w: 109 }, d: -98 }\n+\n+// lldb-command:print sizeof(packed)\n+// lldb-check:[...]$4 = 14\n+\n+// lldb-command:print sizeof(packedInPacked)\n+// lldb-check:[...]$5 = 40\n+\n #![allow(unused_variable)]\n \n #[packed]\n@@ -101,7 +127,7 @@ fn main() {\n         d: -98\n     };\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "4eb251c60841a8ebc8e8d998a46f75ff80bc9937", "filename": "src/test/debuginfo/recursive-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Frecursive-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Frecursive-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-enum.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -10,6 +10,8 @@\n \n // ignore-android: FIXME(#10381)\n \n+// ignore-lldb\n+\n // compile-flags:-g\n // gdb-command:run\n "}, {"sha": "931955ec31738b699efc17e70b6fe84e432db3f2", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // ignore-android: FIXME(#10381)\n+// ignore-lldb\n \n #![feature(managed_boxes)]\n "}, {"sha": "ddca9bf0792f22199244aa9de271e99eb74e3bd9", "filename": "src/test/debuginfo/self-in-default-method.rs", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -64,23 +67,74 @@\n // gdb-check:$15 = -10\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// STACK BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$0 = Struct { x: 100 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$1 = -1\n+// lldb-command:print arg2\n+// lldb-check:[...]$2 = -2\n+// lldb-command:continue\n+\n+// STACK BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$3 = Struct { x: 100 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$4 = -3\n+// lldb-command:print arg2\n+// lldb-check:[...]$5 = -4\n+// lldb-command:continue\n+\n+// OWNED BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$6 = Struct { x: 200 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$7 = -5\n+// lldb-command:print arg2\n+// lldb-check:[...]$8 = -6\n+// lldb-command:continue\n+\n+// OWNED BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$9 = Struct { x: 200 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$10 = -7\n+// lldb-command:print arg2\n+// lldb-check:[...]$11 = -8\n+// lldb-command:continue\n+\n+// OWNED MOVED\n+// lldb-command:print *self\n+// lldb-check:[...]$12 = Struct { x: 200 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$13 = -9\n+// lldb-command:print arg2\n+// lldb-check:[...]$14 = -10\n+// lldb-command:continue\n+\n+\n struct Struct {\n     x: int\n }\n \n trait Trait {\n     fn self_by_ref(&self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1 + arg2\n     }\n \n     fn self_by_val(self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1 + arg2\n     }\n \n     fn self_owned(~self, arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1 + arg2\n     }\n }"}, {"sha": "57ffc4a2e19d68129b66805ff0c2f88a60fa9d70", "filename": "src/test/debuginfo/self-in-generic-default-method.rs", "status": "modified", "additions": 60, "deletions": 6, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -20,8 +23,8 @@\n // gdb-check:$1 = {x = 987}\n // gdb-command:print arg1\n // gdb-check:$2 = -1\n-// gdb-command:print/d arg2\n-// gdb-check:$3 = -2\n+// gdb-command:print arg2\n+// gdb-check:$3 = 2\n // gdb-command:continue\n \n // STACK BY VAL\n@@ -64,24 +67,75 @@\n // gdb-check:$15 = -10.5\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// STACK BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$0 = Struct { x: 987 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$1 = -1\n+// lldb-command:print arg2\n+// lldb-check:[...]$2 = 2\n+// lldb-command:continue\n+\n+// STACK BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$3 = Struct { x: 987 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$4 = -3\n+// lldb-command:print arg2\n+// lldb-check:[...]$5 = -4\n+// lldb-command:continue\n+\n+// OWNED BY REF\n+// lldb-command:print *self\n+// lldb-check:[...]$6 = Struct { x: 879 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$7 = -5\n+// lldb-command:print arg2\n+// lldb-check:[...]$8 = -6\n+// lldb-command:continue\n+\n+// OWNED BY VAL\n+// lldb-command:print self\n+// lldb-check:[...]$9 = Struct { x: 879 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$10 = -7\n+// lldb-command:print arg2\n+// lldb-check:[...]$11 = -8\n+// lldb-command:continue\n+\n+// OWNED MOVED\n+// lldb-command:print *self\n+// lldb-check:[...]$12 = Struct { x: 879 }\n+// lldb-command:print arg1\n+// lldb-check:[...]$13 = -9\n+// lldb-command:print arg2\n+// lldb-check:[...]$14 = -10.5\n+// lldb-command:continue\n+\n+\n struct Struct {\n     x: int\n }\n \n trait Trait {\n \n     fn self_by_ref<T>(&self, arg1: int, arg2: T) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1\n     }\n \n     fn self_by_val<T>(self, arg1: int, arg2: T) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1\n     }\n \n     fn self_owned<T>(~self, arg1: int, arg2: T) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1\n     }\n }\n@@ -90,7 +144,7 @@ impl Trait for Struct {}\n \n fn main() {\n     let stack = Struct { x: 987 };\n-    let _ = stack.self_by_ref(-1, -2_i8);\n+    let _ = stack.self_by_ref(-1, 2_u16);\n     let _ = stack.self_by_val(-3, -4_i16);\n \n     let owned = box Struct { x: 879 };"}, {"sha": "7a9c7c3b372f4f549a24caf2400cdf74a7abcdba", "filename": "src/test/debuginfo/shadowed-argument.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fshadowed-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fshadowed-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fshadowed-argument.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -35,19 +38,42 @@\n // gdb-check:$6 = 20\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print x\n+// lldb-check:[...]$0 = false\n+// lldb-command:print y\n+// lldb-check:[...]$1 = true\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$2 = 10\n+// lldb-command:print y\n+// lldb-check:[...]$3 = true\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$4 = 10.5\n+// lldb-command:print y\n+// lldb-check:[...]$5 = 20\n+// lldb-command:continue\n+\n fn a_function(x: bool, y: bool) {\n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     let x = 10i;\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     let x = 10.5f64;\n     let y = 20i;\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n }\n "}, {"sha": "a43bb5e4017309bb28c01d27306320d48e90e851", "filename": "src/test/debuginfo/shadowed-variable.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -35,22 +38,45 @@\n // gdb-check:$6 = 20\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print x\n+// lldb-check:[...]$0 = false\n+// lldb-command:print y\n+// lldb-check:[...]$1 = true\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$2 = 10\n+// lldb-command:print y\n+// lldb-check:[...]$3 = true\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$4 = 10.5\n+// lldb-command:print y\n+// lldb-check:[...]$5 = 20\n+// lldb-command:continue\n+\n fn main() {\n     let x = false;\n     let y = true;\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     let x = 10i;\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     let x = 10.5f64;\n     let y = 20i;\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n }\n "}, {"sha": "eee1d0e70ca5fd693c488f6d45e4321c0e2fd38c", "filename": "src/test/debuginfo/simd.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimd.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Need a fix for LLDB first...\n+// ignore-lldb\n+\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g"}, {"sha": "a012ee265d4a90661e79ab97e64a4befa7da94be", "filename": "src/test/debuginfo/simple-lexical-scope.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fsimple-lexical-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fsimple-lexical-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-lexical-scope.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -50,36 +53,68 @@\n // gdb-command:continue\n \n \n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print x\n+// lldb-check:[...]$0 = false\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$1 = false\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$2 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$3 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$4 = 10.5\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$5 = 10\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$6 = false\n+// lldb-command:continue\n+\n fn main() {\n     let x = false;\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n \n     {\n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         let x = 10i;\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n \n         {\n-            zzz();\n+            zzz(); // #break\n             sentinel();\n \n             let x = 10.5f64;\n \n-            zzz();\n+            zzz(); // #break\n             sentinel();\n         }\n \n-        zzz();\n+        zzz(); // #break\n         sentinel();\n     }\n \n-    zzz();\n+    zzz(); // #break\n     sentinel();\n }\n "}, {"sha": "5076673c3a512c897fae9608400927eb858253e7", "filename": "src/test/debuginfo/simple-struct.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -12,6 +12,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print pretty off\n // gdb-command:rbreak zzz\n \n@@ -76,6 +79,28 @@\n // gdb-check:$19 = {a = 10019, b = -10020, x = -10016, y = -10017.5, z = 10018}\n \n \n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print no_padding16\n+// lldb-check:[...]$0 = NoPadding16 { x: 10000, y: -10001 }\n+\n+// lldb-command:print no_padding32\n+// lldb-check:[...]$1 = NoPadding32 { x: -10002, y: -10003.5, z: 10004 }\n+\n+// lldb-command:print no_padding64\n+// lldb-check:[...]$2 = NoPadding64 { x: -10005.5, y: 10006, z: 10007 }\n+\n+// lldb-command:print no_padding163264\n+// lldb-check:[...]$3 = NoPadding163264 { a: -10008, b: 10009, c: 10010, d: 10011 }\n+\n+// lldb-command:print internal_padding\n+// lldb-check:[...]$4 = InternalPadding { x: 10012, y: -10013 }\n+\n+// lldb-command:print padding_at_end\n+// lldb-check:[...]$5 = PaddingAtEnd { x: -10014, y: 10015 }\n+\n #![feature(struct_inherit)];\n #![allow(unused_variable)];\n #![allow(dead_code)];\n@@ -188,7 +213,7 @@ fn main() {\n         PADDING_AT_END.y = 28;\n     }\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "29d739d7f183abce044f55edc83ef0ea726fb676", "filename": "src/test/debuginfo/simple-tuple.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -12,6 +12,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print pretty off\n // gdb-command:rbreak zzz\n \n@@ -69,6 +72,28 @@\n // gdb-command:print 'simple-tuple::PADDING_AT_END'\n // gdb-check:$21 = {116, 117}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print/d noPadding8\n+// lldb-check:[...]$0 = (-100, 100)\n+// lldb-command:print noPadding16\n+// lldb-check:[...]$1 = (0, 1, 2)\n+// lldb-command:print noPadding32\n+// lldb-check:[...]$2 = (3, 4.5, 5)\n+// lldb-command:print noPadding64\n+// lldb-check:[...]$3 = (6, 7.5, 8)\n+\n+// lldb-command:print internalPadding1\n+// lldb-check:[...]$4 = (9, 10)\n+// lldb-command:print internalPadding2\n+// lldb-check:[...]$5 = (11, 12, 13, 14)\n+\n+// lldb-command:print paddingAtEnd\n+// lldb-check:[...]$6 = (15, 16)\n+\n #![allow(unused_variable)]\n #![allow(dead_code)]\n \n@@ -107,7 +132,7 @@ fn main() {\n         PADDING_AT_END = (116, 117);\n     }\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "e5f9651bb8bcf1b294b60837b42358cc7b3ac5a1", "filename": "src/test/debuginfo/static-method-on-struct-and-enum.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fstatic-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fstatic-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstatic-method-on-struct-and-enum.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -32,6 +35,27 @@\n // gdb-check:$5 = 5\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// STRUCT\n+// lldb-command:print arg1\n+// lldb-check:[...]$0 = 1\n+// lldb-command:print arg2\n+// lldb-check:[...]$1 = 2\n+// lldb-command:continue\n+\n+// ENUM\n+// lldb-command:print arg1\n+// lldb-check:[...]$2 = -3\n+// lldb-command:print arg2\n+// lldb-check:[...]$3 = 4.5\n+// lldb-command:print arg3\n+// lldb-check:[...]$4 = 5\n+// lldb-command:continue\n+\n #![feature(struct_variant)]\n \n struct Struct {\n@@ -41,7 +65,7 @@ struct Struct {\n impl Struct {\n \n     fn static_method(arg1: int, arg2: int) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1 + arg2\n     }\n }\n@@ -55,7 +79,7 @@ enum Enum {\n impl Enum {\n \n     fn static_method(arg1: int, arg2: f64, arg3: uint) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1\n     }\n }"}, {"sha": "d01119bce05338ce3c618c8d8feddd3f8259b671", "filename": "src/test/debuginfo/struct-in-enum.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -12,6 +12,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print union on\n // gdb-command:rbreak zzz\n // gdb-command:run\n@@ -26,6 +29,19 @@\n // gdb-command:print univariant\n // gdb-check:$3 = {{{x = 123, y = 456, z = 789}}}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print case1\n+// lldb-check:[...]$0 = Case1(0, Struct { x: 2088533116, y: 2088533116, z: 31868 })\n+// lldb-command:print case2\n+// lldb-check:[...]$1 = Case2(0, 1229782938247303441, 4369)\n+\n+// lldb-command:print univariant\n+// lldb-check:[...]$2 = TheOnlyCase(Struct { x: 123, y: 456, z: 789 })\n+\n #![allow(unused_variable)]\n \n struct Struct {\n@@ -66,7 +82,7 @@ fn main() {\n \n     let univariant = TheOnlyCase(Struct { x: 123, y: 456, z: 789 });\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "3822b80e8650feac36b189a33cc7019f9b1a10ca", "filename": "src/test/debuginfo/struct-in-struct.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fstruct-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fstruct-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-in-struct.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -8,9 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print pretty off\n // gdb-command:rbreak zzz\n // gdb-command:run\n@@ -25,6 +29,35 @@\n // gdb-command:print padding_at_end_parent\n // gdb-check:$3 = {x = {x = 10, y = 11}, y = {x = 12, y = 13}, z = {x = 14, y = 15}}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print three_simple_structs\n+// lldb-check:[...]$0 = ThreeSimpleStructs { x: Simple { x: 1 }, y: Simple { x: 2 }, z: Simple { x: 3 } }\n+\n+// lldb-command:print internal_padding_parent\n+// lldb-check:[...]$1 = InternalPaddingParent { x: InternalPadding { x: 4, y: 5 }, y: InternalPadding { x: 6, y: 7 }, z: InternalPadding { x: 8, y: 9 } }\n+\n+// lldb-command:print padding_at_end_parent\n+// lldb-check:[...]$2 = PaddingAtEndParent { x: PaddingAtEnd { x: 10, y: 11 }, y: PaddingAtEnd { x: 12, y: 13 }, z: PaddingAtEnd { x: 14, y: 15 } }\n+\n+// lldb-command:print mixed\n+// lldb-check:[...]$3 = Mixed { x: PaddingAtEnd { x: 16, y: 17 }, y: InternalPadding { x: 18, y: 19 }, z: Simple { x: 20 }, w: 21 }\n+\n+// lldb-command:print bag\n+// lldb-check:[...]$4 = Bag { x: Simple { x: 22 } }\n+\n+// lldb-command:print bag_in_bag\n+// lldb-check:[...]$5 = BagInBag { x: Bag { x: Simple { x: 23 } } }\n+\n+// lldb-command:print tjo\n+// lldb-check:[...]$6 = ThatsJustOverkill { x: BagInBag { x: Bag { x: Simple { x: 24 } } } }\n+\n+// lldb-command:print tree\n+// lldb-check:[...]$7 = Tree { x: Simple { x: 25 }, y: InternalPaddingParent { x: InternalPadding { x: 26, y: 27 }, y: InternalPadding { x: 28, y: 29 }, z: InternalPadding { x: 30, y: 31 } }, z: BagInBag { x: Bag { x: Simple { x: 32 } } } }\n+\n #![allow(unused_variable)]\n \n struct Simple {\n@@ -140,7 +173,7 @@ fn main() {\n         }\n     };\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "c3a5abf2d389a67e25c5b431938c885d2a7e5fe0", "filename": "src/test/debuginfo/struct-style-enum.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -12,6 +12,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print union on\n // gdb-command:rbreak zzz\n // gdb-command:run\n@@ -29,6 +32,23 @@\n // gdb-command:print univariant\n // gdb-check:$4 = {{a = -1}}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print case1\n+// lldb-check:[...]$0 = Case1 { a: 0, b: 31868, c: 31868, d: 31868, e: 31868 }\n+\n+// lldb-command:print case2\n+// lldb-check:[...]$1 = Case2 { a: 0, b: 286331153, c: 286331153 }\n+\n+// lldb-command:print case3\n+// lldb-check:[...]$2 = Case3 { a: 0, b: 6438275382588823897 }\n+\n+// lldb-command:print univariant\n+// lldb-check:[...]$3 = TheOnlyCase { a: -1 }\n+\n #![allow(unused_variable)]\n #![feature(struct_variant)]\n \n@@ -71,7 +91,7 @@ fn main() {\n \n     let univariant = TheOnlyCase { a: -1 };\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "525fcd45cfb06cbeed3d2c53be09f0aa20651c74", "filename": "src/test/debuginfo/struct-with-destructor.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fstruct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fstruct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-with-destructor.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -26,6 +29,22 @@\n // gdb-command:print nested\n // gdb-check:$4 = {a = {a = {x = 7890, y = 9870}}}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+// lldb-command:print simple\n+// lldb-check:[...]$0 = WithDestructor { x: 10, y: 20 }\n+\n+// lldb-command:print noDestructor\n+// lldb-check:[...]$1 = NoDestructorGuarded { a: NoDestructor { x: 10, y: 20 }, guard: -1 }\n+\n+// lldb-command:print withDestructor\n+// lldb-check:[...]$2 = WithDestructorGuarded { a: WithDestructor { x: 10, y: 20 }, guard: -1 }\n+\n+// lldb-command:print nested\n+// lldb-check:[...]$3 = NestedOuter { a: NestedInner { a: WithDestructor { x: 7890, y: 9870 } } }\n+\n #![allow(unused_variable)]\n \n struct NoDestructor {\n@@ -121,7 +140,7 @@ fn main() {\n     //                            <-------NestedOuter-------->\n     let nested = NestedOuter { a: NestedInner { a: WithDestructor { x: 7890, y: 9870 } } };\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "ba055272a3fa78f94978f2d0818bb777616cdab8", "filename": "src/test/debuginfo/text-to-include-1.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftext-to-include-1.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftext-to-include-1.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftext-to-include-1.txt?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -1 +1 @@\n-some text to include in another file as string 1\n+some text to include in another file as string 1\n\\ No newline at end of file"}, {"sha": "a59d2057eb46b013c86bcda3feec70488790abf1", "filename": "src/test/debuginfo/text-to-include-2.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftext-to-include-2.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftext-to-include-2.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftext-to-include-2.txt?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -1 +1 @@\n-some text to include in another file as string 2\n+some text to include in another file as string 2.\n\\ No newline at end of file"}, {"sha": "6163f7dd48cd496a445ee85a703fb328eb6d9d79", "filename": "src/test/debuginfo/text-to-include-3.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftext-to-include-3.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftext-to-include-3.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftext-to-include-3.txt?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -1 +1 @@\n-some text to include in another file as string 3\n+some text to include in another file as string 3..\n\\ No newline at end of file"}, {"sha": "20747681b6ffaf39fb927bb66d536dbc423a6a4c", "filename": "src/test/debuginfo/trait-generic-static-default-method.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftrait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftrait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftrait-generic-static-default-method.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // except according to those terms.\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n \n@@ -29,13 +32,42 @@\n // gdb-command:continue\n \n \n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print no_padding1\n+// lldb-check:[...]$0 = { x = (0, 1) y = 2 z = (3, 4, 5) }\n+// lldb-command:print no_padding2\n+// lldb-check:[...]$1 = { x = (6, 7) y = { = (8, 9) = 10 } }\n+\n+// lldb-command:print tuple_internal_padding\n+// lldb-check:[...]$2 = { x = (11, 12) y = (13, 14) }\n+// lldb-command:print struct_internal_padding\n+// lldb-check:[...]$3 = { x = (15, 16) y = (17, 18) }\n+// lldb-command:print both_internally_padded\n+// lldb-check:[...]$4 = { x = (19, 20, 21) y = (22, 23) }\n+\n+// lldb-command:print single_tuple\n+// lldb-check:[...]$5 = { x = (24, 25, 26) }\n+\n+// lldb-command:print tuple_padded_at_end\n+// lldb-check:[...]$6 = { x = (27, 28) y = (29, 30) }\n+// lldb-command:print struct_padded_at_end\n+// lldb-check:[...]$7 = { x = (31, 32) y = (33, 34) }\n+// lldb-command:print both_padded_at_end\n+// lldb-check:[...]$8 = { x = (35, 36, 37) y = (38, 39) }\n+\n+// lldb-command:print mixed_padding\n+// lldb-check:[...]$9 = { x = { = (40, 41, 42) = (43, 44) } y = (45, 46, 47, 48) }\n+\n struct Struct {\n     x: int\n }\n \n trait Trait {\n     fn generic_static_default_method<T>(arg1: int, arg2: T) -> int {\n-        zzz();\n+        zzz(); // #break\n         arg1\n     }\n }"}, {"sha": "ca407aef1a45e8bd4cd67cfe040da74124c29037", "filename": "src/test/debuginfo/trait-pointers.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftrait-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftrait-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftrait-pointers.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -10,6 +10,8 @@\n \n // ignore-android: FIXME(#10381)\n \n+// ignore-lldb\n+\n // compile-flags:-g\n // gdb-command:run\n "}, {"sha": "4c4ad51c70bb026e5ff9b66082ff540ce9eccb97", "filename": "src/test/debuginfo/tuple-in-tuple.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print pretty off\n // gdb-command:rbreak zzz\n // gdb-command:run\n@@ -33,6 +36,28 @@\n // gdb-command:print padding_at_end2\n // gdb-check:$7 = {{21, 22}, 23}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print no_padding1\n+// lldb-check:[...]$0 = ((0, 1), 2, 3)\n+// lldb-command:print no_padding2\n+// lldb-check:[...]$1 = (4, (5, 6), 7)\n+// lldb-command:print no_padding3\n+// lldb-check:[...]$2 = (8, 9, (10, 11))\n+\n+// lldb-command:print internal_padding1\n+// lldb-check:[...]$3 = (12, (13, 14))\n+// lldb-command:print internal_padding2\n+// lldb-check:[...]$4 = (15, (16, 17))\n+\n+// lldb-command:print padding_at_end1\n+// lldb-check:[...]$5 = (18, (19, 20))\n+// lldb-command:print padding_at_end2\n+// lldb-check:[...]$6 = ((21, 22), 23)\n+\n #![allow(unused_variable)]\n \n fn main() {\n@@ -46,7 +71,7 @@ fn main() {\n     let padding_at_end1: (i32, (i32, i16)) = (18, (19, 20));\n     let padding_at_end2: ((i32, i16), i32) = ((21, 22), 23);\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "afcacd46e6653a258d2b9e59328293378957a89e", "filename": "src/test/debuginfo/tuple-struct.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-struct.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print pretty off\n // gdb-command:rbreak zzz\n // gdb-command:run\n@@ -35,6 +38,28 @@\n // gdb-check:$6 = {-10014, 10015}\n \n \n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print no_padding16\n+// lldb-check:[...]$0 = NoPadding16(10000, -10001)\n+\n+// lldb-command:print no_padding32\n+// lldb-check:[...]$1 = NoPadding32(-10002, -10003.5, 10004)\n+\n+// lldb-command:print no_padding64\n+// lldb-check:[...]$2 = NoPadding64(-10005.5, 10006, 10007)\n+\n+// lldb-command:print no_padding163264\n+// lldb-check:[...]$3 = NoPadding163264(-10008, 10009, 10010, 10011)\n+\n+// lldb-command:print internal_padding\n+// lldb-check:[...]$4 = InternalPadding(10012, -10013)\n+\n+// lldb-command:print padding_at_end\n+// lldb-check:[...]$5 = PaddingAtEnd(-10014, 10015)\n+\n // This test case mainly makes sure that no field names are generated for tuple structs (as opposed\n // to all fields having the name \"<unnamed_field>\"). Otherwise they are handled the same a normal\n // structs.\n@@ -55,7 +80,7 @@ fn main() {\n     let internal_padding = InternalPadding(10012, -10013);\n     let padding_at_end = PaddingAtEnd(-10014, 10015);\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "7cd0a8f6164e8102816c3951a09dd3feb99a386f", "filename": "src/test/debuginfo/tuple-style-enum.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -12,6 +12,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print union on\n // gdb-command:rbreak zzz\n // gdb-command:run\n@@ -29,6 +32,23 @@\n // gdb-command:print univariant\n // gdb-check:$4 = {{-1}}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print case1\n+// lldb-check:[...]$0 = Case1(0, 31868, 31868, 31868, 31868)\n+\n+// lldb-command:print case2\n+// lldb-check:[...]$1 = Case2(0, 286331153, 286331153)\n+\n+// lldb-command:print case3\n+// lldb-check:[...]$2 = Case3(0, 6438275382588823897)\n+\n+// lldb-command:print univariant\n+// lldb-check:[...]$3 = TheOnlyCase(-1)\n+\n #![allow(unused_variable)]\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n@@ -70,7 +90,7 @@ fn main() {\n \n     let univariant = TheOnlyCase(-1);\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "4c945e62abcd8cb057b1848c57d968d446c484c8", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -24,6 +27,20 @@\n // gdb-command:print *univariant\n // gdb-check:$3 = {{123234}}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print *the_a\n+// lldb-check:[...]$0 = TheA { x: 0, y: 8970181431921507452 }\n+\n+// lldb-command:print *the_b\n+// lldb-check:[...]$1 = TheB(0, 286331153, 286331153)\n+\n+// lldb-command:print *univariant\n+// lldb-check:[...]$2 = TheOnlyCase(123234)\n+\n #![allow(unused_variable)]\n #![feature(struct_variant)]\n \n@@ -60,7 +77,7 @@ fn main() {\n \n     let univariant = box TheOnlyCase(123234);\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "b538fcd7d76b83a858c03378485ada6e62db6c67", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -48,6 +51,43 @@\n // gdb-check:$14 = 8\n // gdb-command:continue\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print variable\n+// lldb-check:[...]$0 = 1\n+// lldb-command:print constant\n+// lldb-check:[...]$1 = 2\n+// lldb-command:print a_struct\n+// lldb-check:[...]$2 = Struct { a: -3, b: 4.5, c: 5 }\n+// lldb-command:print *struct_ref\n+// lldb-check:[...]$3 = Struct { a: -3, b: 4.5, c: 5 }\n+// lldb-command:print *owned\n+// lldb-check:[...]$4 = 6\n+// lldb-command:print managed->val\n+// lldb-check:[...]$5 = 7\n+// lldb-command:print closure_local\n+// lldb-check:[...]$6 = 8\n+// lldb-command:continue\n+\n+// lldb-command:print variable\n+// lldb-check:[...]$7 = 1\n+// lldb-command:print constant\n+// lldb-check:[...]$8 = 2\n+// lldb-command:print a_struct\n+// lldb-check:[...]$9 = Struct { a: -3, b: 4.5, c: 5 }\n+// lldb-command:print *struct_ref\n+// lldb-check:[...]$10 = Struct { a: -3, b: 4.5, c: 5 }\n+// lldb-command:print *owned\n+// lldb-check:[...]$11 = 6\n+// lldb-command:print managed->val\n+// lldb-check:[...]$12 = 7\n+// lldb-command:print closure_local\n+// lldb-check:[...]$13 = 8\n+// lldb-command:continue\n+\n #![feature(managed_boxes)]\n #![allow(unused_variable)]\n \n@@ -77,11 +117,11 @@ fn main() {\n         let closure_local = 8;\n \n         let nested_closure = || {\n-            zzz();\n+            zzz(); // #break\n             variable = constant + a_struct.a + struct_ref.a + *owned + *managed + closure_local;\n         };\n \n-        zzz();\n+        zzz(); // #break\n \n         nested_closure();\n     };"}, {"sha": "cd100415cbec6bc753983261ae900b6ae3ce3e6d", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -22,6 +25,18 @@\n // gdb-command:print *owned\n // gdb-check:$3 = 5\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print constant\n+// lldb-check:[...]$0 = 1\n+// lldb-command:print a_struct\n+// lldb-check:[...]$1 = Struct { a: -2, b: 3.5, c: 4 }\n+// lldb-command:print *owned\n+// lldb-check:[...]$2 = 5\n+\n #![allow(unused_variable)]\n \n struct Struct {\n@@ -42,7 +57,7 @@ fn main() {\n     let owned = box 5;\n \n     let closure: proc() = proc() {\n-        zzz();\n+        zzz(); // #break\n         do_something(&constant, &a_struct.a, owned);\n     };\n "}, {"sha": "3fe17dc83e76591839d55b00b18b49ba99f7a3d7", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -11,6 +11,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:rbreak zzz\n // gdb-command:run\n // gdb-command:finish\n@@ -28,6 +31,24 @@\n // gdb-command:print managed->val\n // gdb-check:$6 = 7\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print variable\n+// lldb-check:[...]$0 = 1\n+// lldb-command:print constant\n+// lldb-check:[...]$1 = 2\n+// lldb-command:print a_struct\n+// lldb-check:[...]$2 = Struct { a: -3, b: 4.5, c: 5 }\n+// lldb-command:print *struct_ref\n+// lldb-check:[...]$3 = Struct { a: -3, b: 4.5, c: 5 }\n+// lldb-command:print *owned\n+// lldb-check:[...]$4 = 6\n+// lldb-command:print managed->val\n+// lldb-check:[...]$5 = 7\n+\n #![feature(managed_boxes)]\n #![allow(unused_variable)]\n \n@@ -54,7 +75,7 @@ fn main() {\n     let managed = box(GC) 7;\n \n     let closure = || {\n-        zzz();\n+        zzz(); // #break\n         variable = constant + a_struct.a + struct_ref.a + *owned + *managed;\n     };\n "}, {"sha": "00398fd5c8234fbb2d059c3eee3361643b554454", "filename": "src/test/debuginfo/vec-slices.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -12,6 +12,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print pretty off\n // gdb-command:rbreak zzz\n // gdb-command:run\n@@ -53,6 +56,29 @@\n // gdb-command:print *((int64_t[2]*)('vec-slices::MUT_VECT_SLICE'.data_ptr))\n // gdb-check:$15 = {64, 65}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print empty\n+// lldb-check:[...]$0 = &[]\n+\n+// lldb-command:print singleton\n+// lldb-check:[...]$1 = &[1]\n+\n+// lldb-command:print multiple\n+// lldb-check:[...]$2 = &[2, 3, 4, 5]\n+\n+// lldb-command:print slice_of_slice\n+// lldb-check:[...]$3 = &[3, 4]\n+\n+// lldb-command:print padded_tuple\n+// lldb-check:[...]$4 = &[(6, 7), (8, 9)]\n+\n+// lldb-command:print padded_struct\n+// lldb-check:[...]$5 = &[AStruct { x: 10, y: 11, z: 12 }, AStruct { x: 13, y: 14, z: 15 }]\n+\n #![allow(unused_variable)]\n \n struct AStruct {\n@@ -81,7 +107,7 @@ fn main() {\n         MUT_VECT_SLICE = VECT_SLICE;\n     }\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "7372a6e7ca019bc6e27bc424e7850f4dac134c9a", "filename": "src/test/debuginfo/vec.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f45a9458967f9acec23c40941c285b58790c0b/src%2Ftest%2Fdebuginfo%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec.rs?ref=c7f45a9458967f9acec23c40941c285b58790c0b", "patch": "@@ -12,6 +12,9 @@\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:set print pretty off\n // gdb-command:rbreak zzz\n // gdb-command:run\n@@ -21,6 +24,13 @@\n // gdb-command:print vec::VECT\n // gdb-check:$2 = {4, 5, 6}\n \n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+// lldb-command:print a\n+// lldb-check:[...]$0 = [1, 2, 3]\n+\n #![allow(unused_variable)]\n \n static mut VECT: [i32, ..3] = [1, 2, 3];\n@@ -34,7 +44,7 @@ fn main() {\n         VECT[2] = 6;\n     }\n \n-    zzz();\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}]}