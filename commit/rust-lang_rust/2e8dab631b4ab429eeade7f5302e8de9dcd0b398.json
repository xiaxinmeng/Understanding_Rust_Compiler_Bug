{"sha": "2e8dab631b4ab429eeade7f5302e8de9dcd0b398", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlOGRhYjYzMWI0YWI0MjllZWFkZTdmNTMwMmU4ZGU5ZGNkMGIzOTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-14T10:18:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-14T14:45:17Z"}, "message": "internal: prepare to move assist definitions", "tree": {"sha": "0f75dd26d6c1b370dcb53da5bb868f1799e2203c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f75dd26d6c1b370dcb53da5bb868f1799e2203c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e8dab631b4ab429eeade7f5302e8de9dcd0b398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8dab631b4ab429eeade7f5302e8de9dcd0b398", "html_url": "https://github.com/rust-lang/rust/commit/2e8dab631b4ab429eeade7f5302e8de9dcd0b398", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e8dab631b4ab429eeade7f5302e8de9dcd0b398/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d2772c2c7dc0a42d8a9429d24ea41412add61b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d2772c2c7dc0a42d8a9429d24ea41412add61b3", "html_url": "https://github.com/rust-lang/rust/commit/1d2772c2c7dc0a42d8a9429d24ea41412add61b3"}], "stats": {"total": 63, "additions": 30, "deletions": 33}, "files": [{"sha": "98d01f0ced4f80f07131e1764a34d43e425153cb", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e8dab631b4ab429eeade7f5302e8de9dcd0b398/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e8dab631b4ab429eeade7f5302e8de9dcd0b398/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=2e8dab631b4ab429eeade7f5302e8de9dcd0b398", "patch": "@@ -535,7 +535,7 @@ impl Analysis {\n     ) -> Cancellable<Vec<Assist>> {\n         self.with_db(|db| {\n             let ssr_assists = ssr::ssr_assists(db, &resolve, frange);\n-            let mut acc = Assist::get(db, config, resolve, frange);\n+            let mut acc = ide_assists::assists(db, config, resolve, frange);\n             acc.extend(ssr_assists.into_iter());\n             acc\n         })\n@@ -576,7 +576,7 @@ impl Analysis {\n                 Vec::new()\n             };\n \n-            let mut res = Assist::get(db, assist_config, resolve, frange);\n+            let mut res = ide_assists::assists(db, assist_config, resolve, frange);\n             res.extend(ssr_assists.into_iter());\n             res.extend(diagnostic_assists.into_iter());\n "}, {"sha": "8049182843b5bd259f1eddca6a31a6740b9e1f47", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2e8dab631b4ab429eeade7f5302e8de9dcd0b398/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e8dab631b4ab429eeade7f5302e8de9dcd0b398/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=2e8dab631b4ab429eeade7f5302e8de9dcd0b398", "patch": "@@ -151,22 +151,20 @@ pub struct Assist {\n     pub source_change: Option<SourceChange>,\n }\n \n-impl Assist {\n-    /// Return all the assists applicable at the given position.\n-    pub fn get(\n-        db: &RootDatabase,\n-        config: &AssistConfig,\n-        resolve: AssistResolveStrategy,\n-        range: FileRange,\n-    ) -> Vec<Assist> {\n-        let sema = Semantics::new(db);\n-        let ctx = AssistContext::new(sema, config, range);\n-        let mut acc = Assists::new(&ctx, resolve);\n-        handlers::all().iter().for_each(|handler| {\n-            handler(&mut acc, &ctx);\n-        });\n-        acc.finish()\n-    }\n+/// Return all the assists applicable at the given position.\n+pub fn assists(\n+    db: &RootDatabase,\n+    config: &AssistConfig,\n+    resolve: AssistResolveStrategy,\n+    range: FileRange,\n+) -> Vec<Assist> {\n+    let sema = Semantics::new(db);\n+    let ctx = AssistContext::new(sema, config, range);\n+    let mut acc = Assists::new(&ctx, resolve);\n+    handlers::all().iter().for_each(|handler| {\n+        handler(&mut acc, &ctx);\n+    });\n+    acc.finish()\n }\n \n mod handlers {"}, {"sha": "60cecd94c8bafbeb4dfb6c0713d1ba1da4db44d9", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2e8dab631b4ab429eeade7f5302e8de9dcd0b398/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e8dab631b4ab429eeade7f5302e8de9dcd0b398/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=2e8dab631b4ab429eeade7f5302e8de9dcd0b398", "patch": "@@ -16,8 +16,8 @@ use syntax::TextRange;\n use test_utils::{assert_eq_text, extract_offset};\n \n use crate::{\n-    handlers::Handler, Assist, AssistConfig, AssistContext, AssistKind, AssistResolveStrategy,\n-    Assists, SingleResolve,\n+    assists, handlers::Handler, Assist, AssistConfig, AssistContext, AssistKind,\n+    AssistResolveStrategy, Assists, SingleResolve,\n };\n \n pub(crate) const TEST_CONFIG: AssistConfig = AssistConfig {\n@@ -78,14 +78,14 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n     let before = db.file_text(file_id).to_string();\n     let frange = FileRange { file_id, range: selection.into() };\n \n-    let assist = Assist::get(&db, &TEST_CONFIG, AssistResolveStrategy::All, frange)\n+    let assist = assists(&db, &TEST_CONFIG, AssistResolveStrategy::All, frange)\n         .into_iter()\n         .find(|assist| assist.id.0 == assist_id)\n         .unwrap_or_else(|| {\n             panic!(\n                 \"\\n\\nAssist is not applicable: {}\\nAvailable assists: {}\",\n                 assist_id,\n-                Assist::get(&db, &TEST_CONFIG, AssistResolveStrategy::None, frange)\n+                assists(&db, &TEST_CONFIG, AssistResolveStrategy::None, frange)\n                     .into_iter()\n                     .map(|assist| assist.id.0)\n                     .collect::<Vec<_>>()\n@@ -210,7 +210,7 @@ fn assist_order_field_struct() {\n     let (before_cursor_pos, before) = extract_offset(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range: TextRange::empty(before_cursor_pos) };\n-    let assists = Assist::get(&db, &TEST_CONFIG, AssistResolveStrategy::None, frange);\n+    let assists = assists(&db, &TEST_CONFIG, AssistResolveStrategy::None, frange);\n     let mut assists = assists.iter();\n \n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Change visibility to pub(crate)\");\n@@ -235,7 +235,7 @@ pub fn test_some_range(a: int) -> bool {\n \"#,\n     );\n \n-    let assists = Assist::get(&db, &TEST_CONFIG, AssistResolveStrategy::None, frange);\n+    let assists = assists(&db, &TEST_CONFIG, AssistResolveStrategy::None, frange);\n     let expected = labels(&assists);\n \n     expect![[r#\"\n@@ -264,7 +264,7 @@ pub fn test_some_range(a: int) -> bool {\n         let mut cfg = TEST_CONFIG;\n         cfg.allowed = Some(vec![AssistKind::Refactor]);\n \n-        let assists = Assist::get(&db, &cfg, AssistResolveStrategy::None, frange);\n+        let assists = assists(&db, &cfg, AssistResolveStrategy::None, frange);\n         let expected = labels(&assists);\n \n         expect![[r#\"\n@@ -279,7 +279,7 @@ pub fn test_some_range(a: int) -> bool {\n     {\n         let mut cfg = TEST_CONFIG;\n         cfg.allowed = Some(vec![AssistKind::RefactorExtract]);\n-        let assists = Assist::get(&db, &cfg, AssistResolveStrategy::None, frange);\n+        let assists = assists(&db, &cfg, AssistResolveStrategy::None, frange);\n         let expected = labels(&assists);\n \n         expect![[r#\"\n@@ -292,7 +292,7 @@ pub fn test_some_range(a: int) -> bool {\n     {\n         let mut cfg = TEST_CONFIG;\n         cfg.allowed = Some(vec![AssistKind::QuickFix]);\n-        let assists = Assist::get(&db, &cfg, AssistResolveStrategy::None, frange);\n+        let assists = assists(&db, &cfg, AssistResolveStrategy::None, frange);\n         let expected = labels(&assists);\n \n         expect![[r#\"\"#]].assert_eq(&expected);\n@@ -317,7 +317,7 @@ pub fn test_some_range(a: int) -> bool {\n     cfg.allowed = Some(vec![AssistKind::RefactorExtract]);\n \n     {\n-        let assists = Assist::get(&db, &cfg, AssistResolveStrategy::None, frange);\n+        let assists = assists(&db, &cfg, AssistResolveStrategy::None, frange);\n         assert_eq!(2, assists.len());\n         let mut assists = assists.into_iter();\n \n@@ -353,7 +353,7 @@ pub fn test_some_range(a: int) -> bool {\n     }\n \n     {\n-        let assists = Assist::get(\n+        let assists = assists(\n             &db,\n             &cfg,\n             AssistResolveStrategy::Single(SingleResolve {\n@@ -397,7 +397,7 @@ pub fn test_some_range(a: int) -> bool {\n     }\n \n     {\n-        let assists = Assist::get(\n+        let assists = assists(\n             &db,\n             &cfg,\n             AssistResolveStrategy::Single(SingleResolve {\n@@ -462,7 +462,7 @@ pub fn test_some_range(a: int) -> bool {\n     }\n \n     {\n-        let assists = Assist::get(&db, &cfg, AssistResolveStrategy::All, frange);\n+        let assists = assists(&db, &cfg, AssistResolveStrategy::All, frange);\n         assert_eq!(2, assists.len());\n         let mut assists = assists.into_iter();\n "}, {"sha": "0d98307a26081b3b79acf203f8c8e557cdbf5bcc", "filename": "crates/ide_diagnostics/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e8dab631b4ab429eeade7f5302e8de9dcd0b398/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e8dab631b4ab429eeade7f5302e8de9dcd0b398/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Flib.rs?ref=2e8dab631b4ab429eeade7f5302e8de9dcd0b398", "patch": "@@ -27,7 +27,6 @@ mod unresolved_proc_macro;\n mod field_shorthand;\n \n use hir::{diagnostics::AnyDiagnostic, Semantics};\n-use ide_assists::AssistResolveStrategy;\n use ide_db::{\n     base_db::{FileId, SourceDatabase},\n     label::Label,\n@@ -43,7 +42,7 @@ use syntax::{\n use text_edit::TextEdit;\n use unlinked_file::UnlinkedFile;\n \n-use ide_assists::{Assist, AssistId, AssistKind};\n+use ide_assists::{Assist, AssistId, AssistKind, AssistResolveStrategy};\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n pub struct DiagnosticCode(pub &'static str);"}]}