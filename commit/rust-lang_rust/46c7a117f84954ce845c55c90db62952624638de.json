{"sha": "46c7a117f84954ce845c55c90db62952624638de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YzdhMTE3Zjg0OTU0Y2U4NDVjNTVjOTBkYjYyOTUyNjI0NjM4ZGU=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-11-12T22:46:16Z"}, "committer": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-11-28T13:37:08Z"}, "message": "Privatize TraitObject.principal and add a method accessor, returning Option.", "tree": {"sha": "18f6b6124eeda1df92c1bb8d276892c33b91c02a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18f6b6124eeda1df92c1bb8d276892c33b91c02a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46c7a117f84954ce845c55c90db62952624638de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46c7a117f84954ce845c55c90db62952624638de", "html_url": "https://github.com/rust-lang/rust/commit/46c7a117f84954ce845c55c90db62952624638de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46c7a117f84954ce845c55c90db62952624638de/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b399e5e99a44cf44d3860d353a8b7619d466410", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b399e5e99a44cf44d3860d353a8b7619d466410", "html_url": "https://github.com/rust-lang/rust/commit/0b399e5e99a44cf44d3860d353a8b7619d466410"}], "stats": {"total": 245, "additions": 142, "deletions": 103}, "files": [{"sha": "d4e217fb710cc06caae5426700ff72de01b4fe2e", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -225,14 +225,12 @@ fn ty_is_local(tcx: TyCtxt, ty: Ty, infer_is_local: InferIsLocal) -> bool {\n \n fn fundamental_ty(tcx: TyCtxt, ty: Ty) -> bool {\n     match ty.sty {\n-        ty::TyBox(..) | ty::TyRef(..) =>\n-            true,\n-        ty::TyAdt(def, _) =>\n-            def.is_fundamental(),\n-        ty::TyTrait(ref data) =>\n-            tcx.has_attr(data.principal.def_id(), \"fundamental\"),\n-        _ =>\n-            false\n+        ty::TyBox(..) | ty::TyRef(..) => true,\n+        ty::TyAdt(def, _) => def.is_fundamental(),\n+        ty::TyTrait(ref data) => {\n+            data.principal().map_or(false, |p| tcx.has_attr(p.def_id(), \"fundamental\"))\n+        }\n+        _ => false\n     }\n }\n \n@@ -273,7 +271,7 @@ fn ty_is_local_constructor(tcx: TyCtxt, ty: Ty, infer_is_local: InferIsLocal)->\n         }\n \n         ty::TyTrait(ref tt) => {\n-            tt.principal.def_id().is_local()\n+            tt.principal().map_or(false, |p| p.def_id().is_local())\n         }\n \n         ty::TyError => {"}, {"sha": "f79a212a473cd6389fe5e195fde1936cf1571970", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -1528,7 +1528,10 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                         _ => {}\n                     }\n \n-                    data.principal.with_self_ty(this.tcx(), self_ty)\n+                    match data.principal() {\n+                        Some(ref p) => p.with_self_ty(this.tcx(), self_ty),\n+                        None => return,\n+                    }\n                 }\n                 ty::TyInfer(ty::TyVar(_)) => {\n                     debug!(\"assemble_candidates_from_object_ty: ambiguous\");\n@@ -1611,8 +1614,11 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 //\n                 // We always upcast when we can because of reason\n                 // #2 (region bounds).\n-                data_a.principal.def_id() == data_b.principal.def_id() &&\n-                data_a.builtin_bounds.is_superset(&data_b.builtin_bounds)\n+                match (data_a.principal(), data_b.principal()) {\n+                    (Some(ref a), Some(ref b)) => a.def_id() == b.def_id() &&\n+                        data_a.builtin_bounds.is_superset(&data_b.builtin_bounds),\n+                    _ => false\n+                }\n             }\n \n             // T -> Trait.\n@@ -2167,7 +2173,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         match self_ty.sty {\n             ty::TyTrait(ref data) => {\n                 // OK to skip the binder, it is reintroduced below\n-                let input_types = data.principal.input_types();\n+                let principal = data.principal().unwrap();\n+                let input_types = principal.input_types();\n                 let assoc_types = data.projection_bounds.iter()\n                                       .map(|pb| pb.skip_binder().ty);\n                 let all_types: Vec<_> = input_types.chain(assoc_types)\n@@ -2301,7 +2308,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         let self_ty = self.infcx.shallow_resolve(*obligation.self_ty().skip_binder());\n         let poly_trait_ref = match self_ty.sty {\n             ty::TyTrait(ref data) => {\n-                data.principal.with_self_ty(self.tcx(), self_ty)\n+                data.principal().unwrap().with_self_ty(self.tcx(), self_ty)\n             }\n             _ => {\n                 span_bug!(obligation.cause.span,\n@@ -2471,12 +2478,13 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             // Trait+Kx+'a -> Trait+Ky+'b (upcasts).\n             (&ty::TyTrait(ref data_a), &ty::TyTrait(ref data_b)) => {\n                 // See assemble_candidates_for_unsizing for more info.\n-                let new_trait = tcx.mk_trait(ty::TraitObject {\n-                    principal: data_a.principal,\n-                    region_bound: data_b.region_bound,\n-                    builtin_bounds: data_b.builtin_bounds,\n-                    projection_bounds: data_a.projection_bounds.clone(),\n-                });\n+                let new_trait = tcx.mk_trait(ty::TraitObject::new(\n+                    data_a.principal(),\n+                    data_b.region_bound,\n+                    data_b.builtin_bounds,\n+                    data_a.projection_bounds.clone(),\n+                ));\n+                let origin = TypeOrigin::Misc(obligation.cause.span);\n                 let InferOk { obligations, .. } =\n                     self.infcx.sub_types(false, &obligation.cause, new_trait, target)\n                     .map_err(|_| Unimplemented)?;\n@@ -2499,7 +2507,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     data.builtin_bounds.iter().flat_map(|bound| {\n                         tcx.lang_items.from_builtin_kind(bound).ok()\n                     })\n-                    .chain(Some(data.principal.def_id()));\n+                    .chain(data.principal().map(|ref p| p.def_id()));\n                 if let Some(did) = object_dids.find(|did| {\n                     !tcx.is_object_safe(*did)\n                 }) {\n@@ -2516,7 +2524,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 };\n \n                 // Create the obligation for casting from T to Trait.\n-                push(data.principal.with_self_ty(tcx, source).to_predicate());\n+                push(data.principal().unwrap().with_self_ty(tcx, source).to_predicate());\n \n                 // We can only make objects from sized types.\n                 let mut builtin_bounds = data.builtin_bounds;"}, {"sha": "8bdcc93fa2114d342c7450d20624db666c7606c0", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -215,7 +215,8 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::TyFnDef(..) => format!(\"fn item\"),\n             ty::TyFnPtr(_) => \"fn pointer\".to_string(),\n             ty::TyTrait(ref inner) => {\n-                format!(\"trait {}\", tcx.item_path_str(inner.principal.def_id()))\n+                inner.principal().map_or_else(|| \"trait\".to_string(),\n+                    |p| format!(\"trait {}\", tcx.item_path_str(p.def_id())))\n             }\n             ty::TyClosure(..) => \"closure\".to_string(),\n             ty::TyTuple(_) => \"tuple\".to_string(),"}, {"sha": "3eab06dc674bf8c2b92af3871a5fd9c91a5058d2", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -60,7 +60,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::TyArray(..) | ty::TySlice(_) => Some(ArraySimplifiedType),\n         ty::TyRawPtr(_) => Some(PtrSimplifiedType),\n         ty::TyTrait(ref trait_info) => {\n-            Some(TraitSimplifiedType(trait_info.principal.def_id()))\n+            trait_info.principal().map(|p| TraitSimplifiedType(p.def_id()))\n         }\n         ty::TyRef(_, mt) => {\n             // since we introduce auto-refs during method lookup, we"}, {"sha": "026bf64533c882e3b70c7eea311f87257f8e72c3", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -123,7 +123,7 @@ impl FlagComputation {\n \n             &ty::TyTrait(ref obj) => {\n                 let mut computation = FlagComputation::new();\n-                computation.add_substs(obj.principal.skip_binder().substs);\n+                computation.add_substs(obj.principal().unwrap().skip_binder().substs);\n                 for projection_bound in &obj.projection_bounds {\n                     let mut proj_computation = FlagComputation::new();\n                     proj_computation.add_existential_projection(&projection_bound.0);"}, {"sha": "d1e6f5b8cd12e5799b28633d28e671a356cb267b", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -316,7 +316,7 @@ pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n     match ty.sty {\n         ty::TyAdt(adt_def, _) => Some(adt_def.did),\n \n-        ty::TyTrait(ref data) => Some(data.principal.def_id()),\n+        ty::TyTrait(ref data) => data.principal().map(|ref p| p.def_id()),\n \n         ty::TyArray(subty, _) |\n         ty::TySlice(subty) |"}, {"sha": "a70cfabac873838a4e1b5b49e9246437a33ca814", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -417,7 +417,11 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n \n         (&ty::TyTrait(ref a_obj), &ty::TyTrait(ref b_obj)) =>\n         {\n-            let principal = relation.relate(&a_obj.principal, &b_obj.principal)?;\n+            let principal = match (a_obj.principal(), b_obj.principal()) {\n+                (Some(ref a_p), Some(ref b_p)) => Some(relation.relate(a_p, b_p)?),\n+                (None, None) => None,\n+                _ => return Err(TypeError::Sorts(expected_found(relation, &a, &b))),\n+            };\n             let r =\n                 relation.with_cause(\n                     Cause::ExistentialRegionBound,\n@@ -426,12 +430,7 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n                                                              &b_obj.region_bound))?;\n             let nb = relation.relate(&a_obj.builtin_bounds, &b_obj.builtin_bounds)?;\n             let pb = relation.relate(&a_obj.projection_bounds, &b_obj.projection_bounds)?;\n-            Ok(tcx.mk_trait(ty::TraitObject {\n-                principal: principal,\n-                region_bound: r,\n-                builtin_bounds: nb,\n-                projection_bounds: pb\n-            }))\n+            Ok(tcx.mk_trait(ty::TraitObject::new(principal, r, nb, pb)))\n         }\n \n         (&ty::TyClosure(a_id, a_substs),"}, {"sha": "883f43258d89980210f46d5911bc13e5ac5d436f", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -429,16 +429,16 @@ impl<'tcx, T:TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n \n impl<'tcx> TypeFoldable<'tcx> for ty::TraitObject<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        ty::TraitObject {\n-            principal: self.principal.fold_with(folder),\n-            region_bound: self.region_bound.fold_with(folder),\n-            builtin_bounds: self.builtin_bounds,\n-            projection_bounds: self.projection_bounds.fold_with(folder),\n-        }\n+        ty::TraitObject::new(\n+            self.principal().map(|p| p.fold_with(folder)),\n+            self.region_bound.fold_with(folder),\n+            self.builtin_bounds,\n+            self.projection_bounds.fold_with(folder),\n+        )\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.principal.visit_with(visitor) ||\n+        self.principal().map(|p| p.visit_with(visitor)).unwrap_or(true) ||\n         self.region_bound.visit_with(visitor) ||\n         self.projection_bounds.visit_with(visitor)\n     }"}, {"sha": "454dedd937b7adb185f59cca11329f15a9a9a447", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -277,12 +277,29 @@ impl<'a, 'gcx, 'acx, 'tcx> ClosureSubsts<'tcx> {\n \n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct TraitObject<'tcx> {\n-    pub principal: PolyExistentialTraitRef<'tcx>,\n+    principal: Option<PolyExistentialTraitRef<'tcx>>,\n     pub region_bound: &'tcx ty::Region,\n     pub builtin_bounds: BuiltinBounds,\n     pub projection_bounds: Vec<PolyExistentialProjection<'tcx>>,\n }\n \n+impl<'tcx> TraitObject<'tcx> {\n+    pub fn new(principal: Option<PolyExistentialTraitRef<'tcx>>, region_bound: &'tcx ty::Region,\n+               builtin_bounds: BuiltinBounds, projection_bounds: Vec<PolyExistentialProjection<'tcx>>)\n+        -> Self {\n+        TraitObject {\n+            principal: principal,\n+            region_bound: region_bound,\n+            builtin_bounds: builtin_bounds,\n+            projection_bounds: projection_bounds,\n+        }\n+    }\n+\n+    pub fn principal(&self) -> Option<PolyExistentialTraitRef<'tcx>> {\n+        self.principal\n+    }\n+}\n+\n /// A complete reference to a trait. These take numerous guises in syntax,\n /// but perhaps the most recognizable form is in a where clause:\n ///\n@@ -1221,7 +1238,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn ty_to_def_id(&self) -> Option<DefId> {\n         match self.sty {\n-            TyTrait(ref tt) => Some(tt.principal.def_id()),\n+            TyTrait(ref tt) => tt.principal().map(|p| p.def_id()),\n             TyAdt(def, _) => Some(def.did),\n             TyClosure(id, _) => Some(id),\n             _ => None\n@@ -1245,7 +1262,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             }\n             TyTrait(ref obj) => {\n                 let mut v = vec![obj.region_bound];\n-                v.extend(obj.principal.skip_binder().substs.regions());\n+                v.extend(obj.principal().unwrap().skip_binder().substs.regions());\n                 v\n             }\n             TyAdt(_, substs) | TyAnon(_, substs) => {"}, {"sha": "bd7d72d3ef3988f7d9cde944164c0bf3aa739d7b", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -532,7 +532,9 @@ impl<'a, 'gcx, 'tcx, H: Hasher> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tc\n                 self.hash(f.sig.inputs().skip_binder().len());\n             }\n             TyTrait(ref data) => {\n-                self.def_id(data.principal.def_id());\n+                if let Some(ref p) = data.principal() {\n+                    self.def_id(p.def_id());\n+                }\n                 self.hash(data.builtin_bounds);\n             }\n             TyTuple(tys) => {"}, {"sha": "02f55c6e340823d611c7394cda03f9eb4a110041", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -93,7 +93,10 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n             stack.extend(data.trait_ref.substs.types().rev());\n         }\n         ty::TyTrait(ref obj) => {\n-            stack.extend(obj.principal.input_types().rev());\n+            match obj.principal() {\n+                Some(ref p) => stack.extend(p.input_types().rev()),\n+                None => {}\n+            }\n             stack.extend(obj.projection_bounds.iter().map(|pred| {\n                 pred.0.ty\n             }).rev());"}, {"sha": "25015557ad4df74602016f2e7ff9dd0ad861917e", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -394,7 +394,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                         data.builtin_bounds.iter().flat_map(|bound| {\n                             tcx.lang_items.from_builtin_kind(bound).ok()\n                         })\n-                        .chain(Some(data.principal.def_id()));\n+                        .chain(data.principal().map(|ref p| p.def_id()));\n                     self.out.extend(\n                         component_traits.map(|did| { traits::Obligation::new(\n                             cause.clone(),\n@@ -492,7 +492,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n         if !data.has_escaping_regions() {\n             let implicit_bounds =\n                 object_region_bounds(self.infcx.tcx,\n-                                     data.principal,\n+                                     data.principal().unwrap(),\n                                      data.builtin_bounds);\n \n             let explicit_bound = data.region_bound;"}, {"sha": "c87f3ba0a59a57c5e9dd4e3aa7ae41fe1485ee00", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -339,7 +339,7 @@ impl<'tcx> fmt::Display for ty::TraitObject<'tcx> {\n             // Use a type that can't appear in defaults of type parameters.\n             let dummy_self = tcx.mk_infer(ty::FreshTy(0));\n \n-            let principal = tcx.lift(&self.principal)\n+            let principal = self.principal().and_then(|ref p| tcx.lift(p))\n                                .expect(\"could not lift TraitRef for printing\")\n                                .with_self_ty(tcx, dummy_self).0;\n             let projections = self.projection_bounds.iter().map(|p| {\n@@ -466,7 +466,7 @@ impl<'tcx> fmt::Debug for ty::TraitObject<'tcx> {\n         };\n \n         maybe_continue(f)?;\n-        write!(f, \"{:?}\", self.principal)?;\n+        write!(f, \"{:?}\", self.principal())?;\n \n         let region_str = format!(\"{:?}\", self.region_bound);\n         if !region_str.is_empty() {"}, {"sha": "a79f7e1733c26f703858303e52b12e71ad8c0f7a", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -302,7 +302,7 @@ pub fn unsized_info<'ccx, 'tcx>(ccx: &CrateContext<'ccx, 'tcx>,\n             old_info.expect(\"unsized_info: missing old info for trait upcast\")\n         }\n         (_, &ty::TyTrait(ref data)) => {\n-            let trait_ref = data.principal.with_self_ty(ccx.tcx(), source);\n+            let trait_ref = data.principal().unwrap().with_self_ty(ccx.tcx(), source);\n             let trait_ref = ccx.tcx().erase_regions(&trait_ref);\n             consts::ptrcast(meth::get_vtable(ccx, trait_ref),\n                             Type::vtable_ptr(ccx))"}, {"sha": "ac8793c47e726edac4d56276859361ae778dd325", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -1004,7 +1004,7 @@ fn create_trans_items_for_vtable_methods<'a, 'tcx>(scx: &SharedCrateContext<'a,\n     assert!(!trait_ty.needs_subst() && !impl_ty.needs_subst());\n \n     if let ty::TyTrait(ref trait_ty) = trait_ty.sty {\n-        let poly_trait_ref = trait_ty.principal.with_self_ty(scx.tcx(), impl_ty);\n+        let poly_trait_ref = trait_ty.principal().unwrap().with_self_ty(scx.tcx(), impl_ty);\n         let param_substs = scx.tcx().intern_substs(&[]);\n \n         // Walk all methods of the trait, including those of its supertraits"}, {"sha": "5af1b0faebc4a4d013becbe489a25ad77ca30e06", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -431,8 +431,13 @@ fn trait_pointer_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     // type is assigned the correct name, size, namespace, and source location.\n     // But it does not describe the trait's methods.\n \n-    let def_id = match trait_type.sty {\n-        ty::TyTrait(ref data) => data.principal.def_id(),\n+    let containing_scope = match trait_type.sty {\n+        ty::TyTrait(ref data) => if let Some(principal) = data.principal() {\n+            let def_id = principal.def_id();\n+            get_namespace_and_span_for_item(cx, def_id).0\n+        } else {\n+            NO_SCOPE_METADATA\n+        },\n         _ => {\n             bug!(\"debuginfo: Unexpected trait-object type in \\\n                   trait_pointer_metadata(): {:?}\",\n@@ -444,8 +449,6 @@ fn trait_pointer_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let trait_type_name =\n         compute_debuginfo_type_name(cx, trait_object_type, false);\n \n-    let (containing_scope, _) = get_namespace_and_span_for_item(cx, def_id);\n-\n     let trait_llvm_type = type_of::type_of(cx, trait_object_type);\n     let file_metadata = unknown_file_metadata(cx);\n "}, {"sha": "1831125e8eb9ef51cce3ab7312a5a22c3c492b6d", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -94,10 +94,12 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             output.push(']');\n         },\n         ty::TyTrait(ref trait_data) => {\n-            let principal = cx.tcx().erase_late_bound_regions_and_normalize(\n-                &trait_data.principal);\n-            push_item_name(cx, principal.def_id, false, output);\n-            push_type_params(cx, principal.substs, output);\n+            if let Some(principal) = trait_data.principal() {\n+                let principal = cx.tcx().erase_late_bound_regions_and_normalize(\n+                    &principal);\n+                push_item_name(cx, principal.def_id, false, output);\n+                push_type_params(cx, principal.substs, output);\n+            }\n         },\n         ty::TyFnDef(.., &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n         ty::TyFnPtr(&ty::BareFnTy{ unsafety, abi, ref sig } ) => {"}, {"sha": "c46c6e6f769affc2e6ee67373abef00af28cabac", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -458,10 +458,12 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                 output.push(']');\n             },\n             ty::TyTrait(ref trait_data) => {\n-                self.push_def_path(trait_data.principal.def_id(), output);\n-                self.push_type_params(trait_data.principal.skip_binder().substs,\n-                                      &trait_data.projection_bounds,\n-                                      output);\n+                if let Some(principal) = trait_data.principal() {\n+                    self.push_def_path(principal.def_id(), output);\n+                    self.push_type_params(principal.skip_binder().substs,\n+                        &trait_data.projection_bounds,\n+                        output);\n+                }\n             },\n             ty::TyFnDef(.., &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n             ty::TyFnPtr(&ty::BareFnTy{ unsafety, abi, ref sig } ) => {"}, {"sha": "9cf6f555744c183596f8190c427d94de0cd892d2", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -1135,12 +1135,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                         .emit();\n         }\n \n-        let ty = tcx.mk_trait(ty::TraitObject {\n-            principal: existential_principal,\n-            region_bound: region_bound,\n-            builtin_bounds: builtin_bounds,\n-            projection_bounds: existential_projections\n-        });\n+        let ty = tcx.mk_trait(ty::TraitObject::new(\n+            Some(existential_principal),\n+            region_bound,\n+            builtin_bounds,\n+            existential_projections\n+        ));\n         debug!(\"trait_object_type: {:?}\", ty);\n         ty\n     }"}, {"sha": "3e1a3c870ca0d2b219cca462d159bb2369f695de", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn unsize_kind(&self, t: Ty<'tcx>) -> Option<UnsizeKind<'tcx>> {\n         match t.sty {\n             ty::TySlice(_) | ty::TyStr => Some(UnsizeKind::Length),\n-            ty::TyTrait(ref tty) => Some(UnsizeKind::Vtable(tty.principal.def_id())),\n+            ty::TyTrait(ref tty) => Some(UnsizeKind::Vtable(tty.principal().unwrap().def_id())),\n             ty::TyAdt(def, substs) if def.is_struct() => {\n                 // FIXME(arielb1): do some kind of normalization\n                 match def.struct_variant().fields.last() {"}, {"sha": "4627c166fc6f309447933fb9a7e25d450f1ff853", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -119,7 +119,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         self.deduce_sig_from_projection(&pb)\n                     })\n                     .next();\n-                let kind = self.tcx.lang_items.fn_trait_kind(object_type.principal.def_id());\n+                let kind = self.tcx.lang_items.fn_trait_kind(object_type.principal().unwrap().def_id());\n                 (sig, kind)\n             }\n             ty::TyInfer(ty::TyVar(vid)) => self.deduce_expectations_from_obligations(vid),"}, {"sha": "4c19ea46e5a7f21a564a1a985e18105ad3a514c2", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -255,7 +255,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             .autoderef(self.span, self_ty)\n             .filter_map(|(ty, _)| {\n                 match ty.sty {\n-                    ty::TyTrait(ref data) => Some(closure(self, ty, data.principal)),\n+                    ty::TyTrait(ref data) => data.principal().map(|p| closure(self, ty, p)),\n                     _ => None,\n                 }\n             })"}, {"sha": "b76d13125b474fff432c1302b10684a819e24f33", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -296,8 +296,8 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n         match self_ty.sty {\n             ty::TyTrait(box ref data) => {\n-                self.assemble_inherent_candidates_from_object(self_ty, data.principal);\n-                self.assemble_inherent_impl_candidates_for_type(data.principal.def_id());\n+                self.assemble_inherent_candidates_from_object(self_ty, data.principal().unwrap());\n+                self.assemble_inherent_impl_candidates_for_type(data.principal().unwrap().def_id());\n             }\n             ty::TyAdt(def, _) => {\n                 self.assemble_inherent_impl_candidates_for_type(def.did);"}, {"sha": "eb6e84c7922cee4306f0b8a0725f402f50547885", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -379,7 +379,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             match ty.sty {\n                 ty::TyAdt(def, _) => def.did.is_local(),\n \n-                ty::TyTrait(ref tr) => tr.principal.def_id().is_local(),\n+                ty::TyTrait(ref tr) => tr.principal().map(|p| p.def_id().is_local()).unwrap_or(false),\n \n                 ty::TyParam(_) => true,\n "}, {"sha": "0b6f2f554a17787ce6f574569ba2414d5d0378b3", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -68,7 +68,7 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n         match ty.sty {\n             TyAdt(def, _) => Some(def.did),\n \n-            TyTrait(ref t) => Some(t.principal.def_id()),\n+            TyTrait(ref t) => t.principal().map(|p| p.def_id()),\n \n             TyBox(_) => self.inference_context.tcx.lang_items.owned_box(),\n "}, {"sha": "f949a8796c7e0de4c00976c4d58e979c2e25d484", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -86,8 +86,8 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                     ty::TyAdt(def, _) => {\n                         self.check_def_id(item, def.did);\n                     }\n-                    ty::TyTrait(ref data) => {\n-                        self.check_def_id(item, data.principal.def_id());\n+                    ty::TyTrait(ref data) if data.principal().is_some() => {\n+                        self.check_def_id(item, data.principal().unwrap().def_id());\n                     }\n                     ty::TyBox(..) => {\n                         match self.tcx.lang_items.require_owned_box() {"}, {"sha": "305b15caa69a1903febb482dc429433402eab595", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -182,14 +182,14 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OverlapChecker<'cx, 'tcx> {\n                     // This is something like impl Trait1 for Trait2. Illegal\n                     // if Trait1 is a supertrait of Trait2 or Trait2 is not object safe.\n \n-                    if !self.tcx.is_object_safe(data.principal.def_id()) {\n+                    if data.principal().is_none() || !self.tcx.is_object_safe(data.principal().unwrap().def_id()) {\n                         // This is an error, but it will be\n                         // reported by wfcheck.  Ignore it\n                         // here. This is tested by\n                         // `coherence-impl-trait-for-trait-object-safe.rs`.\n                     } else {\n                         let mut supertrait_def_ids =\n-                            traits::supertrait_def_ids(self.tcx, data.principal.def_id());\n+                            traits::supertrait_def_ids(self.tcx, data.principal().unwrap().def_id());\n                         if supertrait_def_ids.any(|d| d == trait_def_id) {\n                             span_err!(self.tcx.sess,\n                                       item.span,"}, {"sha": "77ade4660693a6fe0218cb47305bac72e1dcff6a", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -376,7 +376,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 let contra = self.contravariant(variance);\n                 self.add_constraints_from_region(generics, data.region_bound, contra);\n \n-                let poly_trait_ref = data.principal.with_self_ty(self.tcx(), self.tcx().types.err);\n+                let poly_trait_ref = data.principal().unwrap().with_self_ty(self.tcx(), self.tcx().types.err);\n                 self.add_constraints_from_trait_ref(generics, poly_trait_ref.0, variance);\n \n                 for projection in &data.projection_bounds {"}, {"sha": "f32ee29c0a0be4870dd5d9b10e21d4e10508d0e5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c7a117f84954ce845c55c90db62952624638de/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=46c7a117f84954ce845c55c90db62952624638de", "patch": "@@ -1877,30 +1877,34 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 }\n             }\n             ty::TyTrait(ref obj) => {\n-                let did = obj.principal.def_id();\n-                inline::record_extern_fqn(cx, did, TypeKind::Trait);\n-\n-                let mut typarams = vec![];\n-                obj.region_bound.clean(cx).map(|b| typarams.push(RegionBound(b)));\n-                for bb in &obj.builtin_bounds {\n-                    typarams.push(bb.clean(cx));\n-                }\n+                if let Some(principal) = obj.principal() {\n+                    let did = principal.def_id();\n+                    inline::record_extern_fqn(cx, did, TypeKind::Trait);\n+\n+                    let mut typarams = vec![];\n+                    obj.region_bound.clean(cx).map(|b| typarams.push(RegionBound(b)));\n+                    for bb in &obj.builtin_bounds {\n+                        typarams.push(bb.clean(cx));\n+                    }\n \n-                let mut bindings = vec![];\n-                for &ty::Binder(ref pb) in &obj.projection_bounds {\n-                    bindings.push(TypeBinding {\n-                        name: pb.item_name.clean(cx),\n-                        ty: pb.ty.clean(cx)\n-                    });\n-                }\n+                    let mut bindings = vec![];\n+                    for &ty::Binder(ref pb) in &obj.projection_bounds {\n+                        bindings.push(TypeBinding {\n+                            name: pb.item_name.clean(cx),\n+                            ty: pb.ty.clean(cx)\n+                        });\n+                    }\n \n-                let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n-                                         Some(did), false, bindings, obj.principal.0.substs);\n-                ResolvedPath {\n-                    path: path,\n-                    typarams: Some(typarams),\n-                    did: did,\n-                    is_generic: false,\n+                    let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n+                                             Some(did), false, bindings, obj.principal.0.substs);\n+                    ResolvedPath {\n+                        path: path,\n+                        typarams: Some(typarams),\n+                        did: did,\n+                        is_generic: false,\n+                    }\n+                } else {\n+                    Never\n                 }\n             }\n             ty::TyTuple(ref t) => Tuple(t.clean(cx)),"}]}