{"sha": "9abcfa55c31881a3f72becd5bca9504b46c3ed8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYmNmYTU1YzMxODgxYTNmNzJiZWNkNWJjYTk1MDRiNDZjM2VkOGY=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-01-21T23:58:50Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-01-22T00:13:43Z"}, "message": "Don't link with --export-dynamic on wasm32-wasi\n\nRemove --export-dynamic from the link arguments on the wasm32-wasi\ntarget, as it emits spurious exports and increases code size.\n\nLeave it in place for wasm32-unknown-unknown and\nwasm32-unknown-emscripten. Even though it isn't a great solution\nthere, users are likely depending on its behavior there.", "tree": {"sha": "b6e56acccda10255370d2f91fb4eb8eee517b6b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6e56acccda10255370d2f91fb4eb8eee517b6b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9abcfa55c31881a3f72becd5bca9504b46c3ed8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9abcfa55c31881a3f72becd5bca9504b46c3ed8f", "html_url": "https://github.com/rust-lang/rust/commit/9abcfa55c31881a3f72becd5bca9504b46c3ed8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9abcfa55c31881a3f72becd5bca9504b46c3ed8f/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65767e56537e20903b54ecde7c371cbfb1b201b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/65767e56537e20903b54ecde7c371cbfb1b201b0", "html_url": "https://github.com/rust-lang/rust/commit/65767e56537e20903b54ecde7c371cbfb1b201b0"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "bfef3d37228f020683eadcda0b62843b392a479b", "filename": "compiler/rustc_target/src/spec/wasm32_base.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9abcfa55c31881a3f72becd5bca9504b46c3ed8f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abcfa55c31881a3f72becd5bca9504b46c3ed8f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_base.rs?ref=9abcfa55c31881a3f72becd5bca9504b46c3ed8f", "patch": "@@ -55,15 +55,6 @@ pub fn options() -> TargetOptions {\n     // to do so.\n     arg(\"--no-demangle\");\n \n-    // The symbol visibility story is a bit in flux right now with LLD.\n-    // It's... not entirely clear to me what's going on, but this looks to\n-    // make everything work when `export_symbols` isn't otherwise called for\n-    // things like executables.\n-    //\n-    // This is really only here to get things working. If it can be removed and\n-    // basic tests still work, then sounds like it should be removed!\n-    arg(\"--export-dynamic\");\n-\n     let mut pre_link_args = BTreeMap::new();\n     pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Wasm), lld_args);\n     pre_link_args.insert(LinkerFlavor::Gcc, clang_args);"}, {"sha": "9f69ce16c215d35cae28f636bbf8684dce253fee", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9abcfa55c31881a3f72becd5bca9504b46c3ed8f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abcfa55c31881a3f72becd5bca9504b46c3ed8f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=9abcfa55c31881a3f72becd5bca9504b46c3ed8f", "patch": "@@ -2,6 +2,17 @@ use super::wasm32_base;\n use super::{LinkArgs, LinkerFlavor, PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Target {\n+    let mut options = wasm32_base::options();\n+\n+    let clang_args = options.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n+\n+    // Rust really needs a way for users to specify exports and imports in\n+    // the source code. --export-dynamic isn't the right tool for this job,\n+    // however it does have the side effect of automatically exporting a lot\n+    // of symbols, which approximates what people want when compiling for\n+    // wasm32-unknown-unknown expect, so use it for now.\n+    clang_args.push(\"--export-dynamic\".to_string());\n+\n     let mut post_link_args = LinkArgs::new();\n     post_link_args.insert(\n         LinkerFlavor::Em,\n@@ -28,7 +39,7 @@ pub fn target() -> Target {\n         panic_strategy: PanicStrategy::Unwind,\n         post_link_args,\n         os_family: Some(\"unix\".to_string()),\n-        ..wasm32_base::options()\n+        ..options\n     };\n     Target {\n         llvm_target: \"wasm32-unknown-emscripten\".to_string(),"}, {"sha": "5e89ba2520bdd703348df19279128ff57b93f460", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9abcfa55c31881a3f72becd5bca9504b46c3ed8f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abcfa55c31881a3f72becd5bca9504b46c3ed8f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs?ref=9abcfa55c31881a3f72becd5bca9504b46c3ed8f", "patch": "@@ -26,11 +26,18 @@ pub fn target() -> Target {\n     // For now this target just never has an entry symbol no matter the output\n     // type, so unconditionally pass this.\n     clang_args.push(\"-Wl,--no-entry\".to_string());\n-    options\n-        .pre_link_args\n-        .get_mut(&LinkerFlavor::Lld(LldFlavor::Wasm))\n-        .unwrap()\n-        .push(\"--no-entry\".to_string());\n+\n+    // Rust really needs a way for users to specify exports and imports in\n+    // the source code. --export-dynamic isn't the right tool for this job,\n+    // however it does have the side effect of automatically exporting a lot\n+    // of symbols, which approximates what people want when compiling for\n+    // wasm32-unknown-unknown expect, so use it for now.\n+    clang_args.push(\"-Wl,--export-dynamic\".to_string());\n+\n+    // Add the flags to wasm-ld's args too.\n+    let lld_args = options.pre_link_args.get_mut(&LinkerFlavor::Lld(LldFlavor::Wasm)).unwrap();\n+    lld_args.push(\"--no-entry\".to_string());\n+    lld_args.push(\"--export-dynamic\".to_string());\n \n     Target {\n         llvm_target: \"wasm32-unknown-unknown\".to_string(),"}]}