{"sha": "1f034f77bc7cd5814cb341a1028f8955dc4262a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMDM0Zjc3YmM3Y2Q1ODE0Y2IzNDFhMTAyOGY4OTU1ZGM0MjYyYTU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-08T12:35:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-08T12:35:54Z"}, "message": "Rollup merge of #76097 - pickfire:stabilize-spin-loop, r=KodrAus\n\nStabilize hint::spin_loop\n\nPartially fix #55002, deprecate in another release\n\nr? ``````@KodrAus``````", "tree": {"sha": "c271c36ddd44db9c16cc023eedf61935881f73df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c271c36ddd44db9c16cc023eedf61935881f73df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f034f77bc7cd5814cb341a1028f8955dc4262a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfp+YrCRBK7hj4Ov3rIwAAdHIIAFgU2D/2UXbbURRi8ILMFD6/\nbOd+gK073b/U7jY00UA/W2pqSAY1ymyUtVTlTCIh+b0TOH5m9CpVQniXM3iYDwCW\nJSR+4y2qJppAGMxyqtjxpeGPWCiJsHC7Yg80NEngmbIub1/Qv/R8YFnY5IViIpxg\n+Z/2Bs/QQkhD8rVg0WP80EcUex1Ii6x0abBrTa6H2BwxaHLee+++GVnM/3Xi/+4d\n34cQ+0La8SlKvZ3J47WY0ypO9yp/N74c5PsirMCbcVIbZLfuwkSHoMb7VRo66C55\nKhftLpK5B+B3NPr6e0L809gkBis8cBVecpHAbuG/fpAyOSok9OtJSWsqZxawizY=\n=L9ip\n-----END PGP SIGNATURE-----\n", "payload": "tree c271c36ddd44db9c16cc023eedf61935881f73df\nparent f2ea2f648e117013b0217f001088ae89e0f163ca\nparent e8b5be5dffef9ef6a15a085e4b06c4a0471f360d\nauthor Mara Bos <m-ou.se@m-ou.se> 1604838954 +0100\ncommitter GitHub <noreply@github.com> 1604838954 +0100\n\nRollup merge of #76097 - pickfire:stabilize-spin-loop, r=KodrAus\n\nStabilize hint::spin_loop\n\nPartially fix #55002, deprecate in another release\n\nr? ``````@KodrAus``````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f034f77bc7cd5814cb341a1028f8955dc4262a5", "html_url": "https://github.com/rust-lang/rust/commit/1f034f77bc7cd5814cb341a1028f8955dc4262a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f034f77bc7cd5814cb341a1028f8955dc4262a5/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2ea2f648e117013b0217f001088ae89e0f163ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ea2f648e117013b0217f001088ae89e0f163ca", "html_url": "https://github.com/rust-lang/rust/commit/f2ea2f648e117013b0217f001088ae89e0f163ca"}, {"sha": "e8b5be5dffef9ef6a15a085e4b06c4a0471f360d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8b5be5dffef9ef6a15a085e4b06c4a0471f360d", "html_url": "https://github.com/rust-lang/rust/commit/e8b5be5dffef9ef6a15a085e4b06c4a0471f360d"}], "stats": {"total": 80, "additions": 56, "deletions": 24}, "files": [{"sha": "15092d463ec448c496ef38560ca6056ff84e8d35", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f034f77bc7cd5814cb341a1028f8955dc4262a5/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f034f77bc7cd5814cb341a1028f8955dc4262a5/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=1f034f77bc7cd5814cb341a1028f8955dc4262a5", "patch": "@@ -119,7 +119,6 @@\n #![feature(raw_ref_op)]\n #![feature(rustc_attrs)]\n #![feature(receiver_trait)]\n-#![feature(renamed_spin_loop)]\n #![feature(min_specialization)]\n #![feature(slice_ptr_get)]\n #![feature(slice_ptr_len)]"}, {"sha": "979a5f8cf507534aaa2ede05bea73df603f4fd3b", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 53, "deletions": 9, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/1f034f77bc7cd5814cb341a1028f8955dc4262a5/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f034f77bc7cd5814cb341a1028f8955dc4262a5/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=1f034f77bc7cd5814cb341a1028f8955dc4262a5", "patch": "@@ -1,6 +1,7 @@\n #![stable(feature = \"core_hint\", since = \"1.27.0\")]\n \n //! Hints to compiler that affects how code should be emitted or optimized.\n+//! Hints may be compile time or runtime.\n \n use crate::intrinsics;\n \n@@ -24,7 +25,6 @@ use crate::intrinsics;\n /// Otherwise, consider using the [`unreachable!`] macro, which does not allow\n /// optimizations but will panic when executed.\n ///\n-///\n /// # Example\n ///\n /// ```\n@@ -51,18 +51,62 @@ pub const unsafe fn unreachable_unchecked() -> ! {\n     unsafe { intrinsics::unreachable() }\n }\n \n-/// Emits a machine instruction hinting to the processor that it is running in busy-wait\n-/// spin-loop (\"spin lock\").\n+/// Emits a machine instruction to signal the processor that it is running in\n+/// a busy-wait spin-loop (\"spin lock\").\n+///\n+/// Upon receiving the spin-loop signal the processor can optimize its behavior by,\n+/// for example, saving power or switching hyper-threads.\n+///\n+/// This function is different from [`thread::yield_now`] which directly\n+/// yields to the system's scheduler, whereas `spin_loop` does not interact\n+/// with the operating system.\n+///\n+/// A common use case for `spin_loop` is implementing bounded optimistic\n+/// spinning in a CAS loop in synchronization primitives. To avoid problems\n+/// like priority inversion, it is strongly recommended that the spin loop is\n+/// terminated after a finite amount of iterations and an appropriate blocking\n+/// syscall is made.\n+///\n+/// **Note**: On platforms that do not support receiving spin-loop hints this\n+/// function does not do anything at all.\n+///\n+/// # Examples\n ///\n-/// For a discussion of different locking strategies and their trade-offs, see\n-/// [`core::sync::atomic::spin_loop_hint`].\n+/// ```\n+/// use std::sync::atomic::{AtomicBool, Ordering};\n+/// use std::sync::Arc;\n+/// use std::{hint, thread};\n+///\n+/// // A shared atomic value that threads will use to coordinate\n+/// let live = Arc::new(AtomicBool::new(false));\n+///\n+/// // In a background thread we'll eventually set the value\n+/// let bg_work = {\n+///     let live = live.clone();\n+///     thread::spawn(move || {\n+///         // Do some work, then make the value live\n+///         do_some_work();\n+///         live.store(true, Ordering::Release);\n+///     })\n+/// };\n ///\n-/// **Note**: On platforms that do not support receiving spin-loop hints this function does not\n-/// do anything at all.\n+/// // Back on our current thread, we wait for the value to be set\n+/// while live.load(Ordering::Acquire) {\n+///     // The spin loop is a hint to the CPU that we're waiting, but probably\n+///     // not for very long\n+///     hint::spin_loop();\n+/// }\n+///\n+/// // The value is now set\n+/// # fn do_some_work() {}\n+/// do_some_work();\n+/// bg_work.join()?;\n+/// # Ok::<(), Box<dyn core::any::Any + Send + 'static>>(())\n+/// ```\n ///\n-/// [`core::sync::atomic::spin_loop_hint`]: crate::sync::atomic::spin_loop_hint\n+/// [`thread::yield_now`]: ../../std/thread/fn.yield_now.html\n #[inline]\n-#[unstable(feature = \"renamed_spin_loop\", issue = \"55002\")]\n+#[stable(feature = \"renamed_spin_loop\", since = \"1.49.0\")]\n pub fn spin_loop() {\n     #[cfg(all(any(target_arch = \"x86\", target_arch = \"x86_64\"), target_feature = \"sse2\"))]\n     {"}, {"sha": "b81bf822ecddd47739623d9d56379880e9473a9e", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f034f77bc7cd5814cb341a1028f8955dc4262a5/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f034f77bc7cd5814cb341a1028f8955dc4262a5/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=1f034f77bc7cd5814cb341a1028f8955dc4262a5", "patch": "@@ -115,23 +115,13 @@ use crate::hint::spin_loop;\n \n /// Signals the processor that it is inside a busy-wait spin-loop (\"spin lock\").\n ///\n-/// Upon receiving spin-loop signal the processor can optimize its behavior by, for example, saving\n-/// power or switching hyper-threads.\n-///\n-/// This function is different from [`std::thread::yield_now`] which directly yields to the\n-/// system's scheduler, whereas `spin_loop_hint` does not interact with the operating system.\n-///\n-/// A common use case for `spin_loop_hint` is implementing bounded optimistic spinning in a CAS\n-/// loop in synchronization primitives. To avoid problems like priority inversion, it is strongly\n-/// recommended that the spin loop is terminated after a finite amount of iterations and an\n-/// appropriate blocking syscall is made.\n+/// This function is expected to be deprecated in favor of\n+/// [`hint::spin_loop`].\n ///\n /// **Note**: On platforms that do not support receiving spin-loop hints this function does not\n /// do anything at all.\n ///\n-/// [`std::thread::yield_now`]: ../../../std/thread/fn.yield_now.html\n-/// [`std::thread::sleep`]: ../../../std/thread/fn.sleep.html\n-/// [`std::sync::Mutex`]: ../../../std/sync/struct.Mutex.html\n+/// [`hint::spin_loop`]: crate::hint::spin_loop\n #[inline]\n #[stable(feature = \"spin_loop_hint\", since = \"1.24.0\")]\n pub fn spin_loop_hint() {"}, {"sha": "1636fe5e2575af02bc8b027ced0c00b9ba4bd2ac", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f034f77bc7cd5814cb341a1028f8955dc4262a5/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f034f77bc7cd5814cb341a1028f8955dc4262a5/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=1f034f77bc7cd5814cb341a1028f8955dc4262a5", "patch": "@@ -296,7 +296,6 @@\n #![feature(raw)]\n #![feature(raw_ref_macros)]\n #![feature(ready_macro)]\n-#![feature(renamed_spin_loop)]\n #![feature(rustc_attrs)]\n #![feature(rustc_private)]\n #![feature(shrink_to)]"}]}