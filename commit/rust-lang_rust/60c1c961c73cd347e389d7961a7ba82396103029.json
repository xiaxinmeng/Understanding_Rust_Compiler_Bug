{"sha": "60c1c961c73cd347e389d7961a7ba82396103029", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYzFjOTYxYzczY2QzNDdlMzg5ZDc5NjFhN2JhODIzOTYxMDMwMjk=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-03-18T03:38:32Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-03-18T03:38:32Z"}, "message": "Make priv in pub hard error for crates using pub(restricted)", "tree": {"sha": "df03d7a946f4b4c3a1792e7e64118dc0527d128c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df03d7a946f4b4c3a1792e7e64118dc0527d128c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60c1c961c73cd347e389d7961a7ba82396103029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60c1c961c73cd347e389d7961a7ba82396103029", "html_url": "https://github.com/rust-lang/rust/commit/60c1c961c73cd347e389d7961a7ba82396103029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60c1c961c73cd347e389d7961a7ba82396103029/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28626ca5b1228f283fbc7c85d88cf897c7750267", "url": "https://api.github.com/repos/rust-lang/rust/commits/28626ca5b1228f283fbc7c85d88cf897c7750267", "html_url": "https://github.com/rust-lang/rust/commit/28626ca5b1228f283fbc7c85d88cf897c7750267"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "7a9468cf7d2e19f39a741a3f6206404c0df71880", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/60c1c961c73cd347e389d7961a7ba82396103029/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c1c961c73cd347e389d7961a7ba82396103029/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=60c1c961c73cd347e389d7961a7ba82396103029", "patch": "@@ -1468,6 +1468,18 @@ pub enum Visibility {\n     Inherited,\n }\n \n+impl Visibility {\n+    pub fn is_pub_restricted(&self) -> bool {\n+        use self::Visibility::*;\n+        match self {\n+            &Public |\n+            &Inherited => false,\n+            &Crate |\n+            &Restricted { .. } => true,\n+        }\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct StructField {\n     pub span: Span,"}, {"sha": "e32ec25a7e8f77857f40bf5242a5529ad17096e2", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/60c1c961c73cd347e389d7961a7ba82396103029/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c1c961c73cd347e389d7961a7ba82396103029/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=60c1c961c73cd347e389d7961a7ba82396103029", "patch": "@@ -45,6 +45,26 @@ use std::mem::replace;\n \n pub mod diagnostics;\n \n+////////////////////////////////////////////////////////////////////////////////\n+/// Visitor used to determine if pub(restricted) is used anywhere in the crate.\n+///\n+/// This is done so that `private_in_public` warnings can be turned into hard errors\n+/// in crates that have been updated to use pub(restricted).\n+////////////////////////////////////////////////////////////////////////////////\n+struct PubRestrictedVisitor<'a, 'tcx: 'a> {\n+    tcx:  TyCtxt<'a, 'tcx, 'tcx>,\n+    has_pub_restricted: bool,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for PubRestrictedVisitor<'a, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::All(&self.tcx.hir)\n+    }\n+    fn visit_vis(&mut self, vis: &'tcx hir::Visibility) {\n+        self.has_pub_restricted = self.has_pub_restricted || vis.is_pub_restricted();\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n /// The embargo visitor, used to determine the exports of the ast\n ////////////////////////////////////////////////////////////////////////////////\n@@ -891,6 +911,7 @@ struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n     required_visibility: ty::Visibility,\n     /// The visibility of the least visible component that has been visited\n     min_visibility: ty::Visibility,\n+    has_pub_restricted: bool,\n     has_old_errors: bool,\n }\n \n@@ -951,7 +972,7 @@ impl<'a, 'tcx: 'a> TypeVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'\n                     self.min_visibility = vis;\n                 }\n                 if !vis.is_at_least(self.required_visibility, self.tcx) {\n-                    if self.has_old_errors {\n+                    if self.has_pub_restricted || self.has_old_errors {\n                         let mut err = struct_span_err!(self.tcx.sess, self.span, E0446,\n                             \"private type `{}` in public interface\", ty);\n                         err.span_label(self.span, &format!(\"can't leak private type\"));\n@@ -986,7 +1007,7 @@ impl<'a, 'tcx: 'a> TypeVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'\n                 self.min_visibility = vis;\n             }\n             if !vis.is_at_least(self.required_visibility, self.tcx) {\n-                if self.has_old_errors {\n+                if self.has_pub_restricted || self.has_old_errors {\n                     struct_span_err!(self.tcx.sess, self.span, E0445,\n                                      \"private trait `{}` in public interface\", trait_ref)\n                         .span_label(self.span, &format!(\n@@ -1008,6 +1029,7 @@ impl<'a, 'tcx: 'a> TypeVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'\n \n struct PrivateItemsInPublicInterfacesVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    has_pub_restricted: bool,\n     old_error_set: &'a NodeSet,\n     inner_visibility: ty::Visibility,\n }\n@@ -1044,6 +1066,7 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n             span: self.tcx.hir.span(item_id),\n             min_visibility: ty::Visibility::Public,\n             required_visibility: required_visibility,\n+            has_pub_restricted: self.has_pub_restricted,\n             has_old_errors: has_old_errors,\n         }\n     }\n@@ -1227,9 +1250,20 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         };\n         intravisit::walk_crate(&mut visitor, krate);\n \n+\n+        let has_pub_restricted = {\n+            let mut pub_restricted_visitor = PubRestrictedVisitor {\n+                tcx: tcx,\n+                has_pub_restricted: false\n+            };\n+            intravisit::walk_crate(&mut pub_restricted_visitor, krate);\n+            pub_restricted_visitor.has_pub_restricted\n+        };\n+\n         // Check for private types and traits in public interfaces\n         let mut visitor = PrivateItemsInPublicInterfacesVisitor {\n             tcx: tcx,\n+            has_pub_restricted: has_pub_restricted,\n             old_error_set: &visitor.old_error_set,\n             inner_visibility: ty::Visibility::Public,\n         };"}, {"sha": "0fdfbaa84bb5a425a0e8d7b4108cc17098efdc74", "filename": "src/test/compile-fail/privacy/restricted/private-in-public.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60c1c961c73cd347e389d7961a7ba82396103029/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fprivate-in-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c1c961c73cd347e389d7961a7ba82396103029/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fprivate-in-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fprivate-in-public.rs?ref=60c1c961c73cd347e389d7961a7ba82396103029", "patch": "@@ -8,16 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(warnings)]\n-#![allow(unused)]\n-\n mod foo {\n     struct Priv;\n     mod bar {\n         use foo::Priv;\n         pub(super) fn f(_: Priv) {}\n         pub(crate) fn g(_: Priv) {} //~ ERROR E0446\n-        //~^ this was previously accepted\n     }\n }\n "}]}