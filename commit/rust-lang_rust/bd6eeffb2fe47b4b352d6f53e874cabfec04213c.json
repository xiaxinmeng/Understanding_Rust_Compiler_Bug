{"sha": "bd6eeffb2fe47b4b352d6f53e874cabfec04213c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNmVlZmZiMmZlNDdiNGIzNTJkNmY1M2U4NzRjYWJmZWMwNDIxM2M=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-04T12:37:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-04T12:37:29Z"}, "message": "Merge #6456\n\n6456: Support record variants in extract_struct_from_enum_variant r=matklad a=Veykril\n\nAs requested :)\r\n\r\nThis also prevents the assist from being disabled if a definition in the value namespace exists with the same name as our new struct since that won't cause a collision\r\n\r\n#4468\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "962bbdba89c8cf199bb946f40b2ac703706881aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/962bbdba89c8cf199bb946f40b2ac703706881aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd6eeffb2fe47b4b352d6f53e874cabfec04213c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfoqCJCRBK7hj4Ov3rIwAAdHIIAH5btIMrFI/bs3Y1ceVpxE8L\nrPhOQc04NlaZUwy/AWey9F8YuKyXqiww7vepbZmIg73Pcgg6BTpv5rNuTm+uMHwS\nqZEkGk50/dNSZCPNX6ImA/7To5+sBYeyxAb843i/q1fgN6zGxuly/ZxNmXwqqDVz\nMuATYS/PP5WE5kvgmu4nLN6YX5nKOIn9rGEz8N9CKgLy4XKfYsOW9bf5H12rtoec\nlvw3ryCzdBtyr8wRSd5a92GrRgj3jX6K+YumQTJl0PeAddxw3vppkXGyCweZu/1w\nU5NBuYXQOUGaf5bZNHtuzPW4wZ81pmUuSI1dtjIl1gOiUl5Yf+GllQQBv9vIg8Y=\n=4X+S\n-----END PGP SIGNATURE-----\n", "payload": "tree 962bbdba89c8cf199bb946f40b2ac703706881aa\nparent 99a8e59f68db7d66a8b5f83c3566f67028ed2675\nparent 6145234450cc3e8d79c7f4e2105e36ccd96ee3b4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604493449 +0000\ncommitter GitHub <noreply@github.com> 1604493449 +0000\n\nMerge #6456\n\n6456: Support record variants in extract_struct_from_enum_variant r=matklad a=Veykril\n\nAs requested :)\r\n\r\nThis also prevents the assist from being disabled if a definition in the value namespace exists with the same name as our new struct since that won't cause a collision\r\n\r\n#4468\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6eeffb2fe47b4b352d6f53e874cabfec04213c", "html_url": "https://github.com/rust-lang/rust/commit/bd6eeffb2fe47b4b352d6f53e874cabfec04213c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd6eeffb2fe47b4b352d6f53e874cabfec04213c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99a8e59f68db7d66a8b5f83c3566f67028ed2675", "url": "https://api.github.com/repos/rust-lang/rust/commits/99a8e59f68db7d66a8b5f83c3566f67028ed2675", "html_url": "https://github.com/rust-lang/rust/commit/99a8e59f68db7d66a8b5f83c3566f67028ed2675"}, {"sha": "6145234450cc3e8d79c7f4e2105e36ccd96ee3b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6145234450cc3e8d79c7f4e2105e36ccd96ee3b4", "html_url": "https://github.com/rust-lang/rust/commit/6145234450cc3e8d79c7f4e2105e36ccd96ee3b4"}], "stats": {"total": 178, "additions": 137, "deletions": 41}, "files": [{"sha": "14209b7714f26d0efbae55795c9f84df7c0e2182", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 110, "deletions": 38, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/bd6eeffb2fe47b4b352d6f53e874cabfec04213c/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6eeffb2fe47b4b352d6f53e874cabfec04213c/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=bd6eeffb2fe47b4b352d6f53e874cabfec04213c", "patch": "@@ -1,3 +1,6 @@\n+use std::iter;\n+\n+use either::Either;\n use hir::{AsName, EnumVariant, Module, ModuleDef, Name};\n use ide_db::{defs::Definition, search::Reference, RootDatabase};\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -31,40 +34,32 @@ pub(crate) fn extract_struct_from_enum_variant(\n     ctx: &AssistContext,\n ) -> Option<()> {\n     let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n-    let field_list = match variant.kind() {\n-        ast::StructKind::Tuple(field_list) => field_list,\n-        _ => return None,\n-    };\n-\n-    // skip 1-tuple variants\n-    if field_list.fields().count() == 1 {\n-        return None;\n-    }\n+    let field_list = extract_field_list_if_applicable(&variant)?;\n \n     let variant_name = variant.name()?;\n     let variant_hir = ctx.sema.to_def(&variant)?;\n-    if existing_struct_def(ctx.db(), &variant_name, &variant_hir) {\n+    if existing_definition(ctx.db(), &variant_name, &variant_hir) {\n         return None;\n     }\n+\n     let enum_ast = variant.parent_enum();\n-    let visibility = enum_ast.visibility();\n     let enum_hir = ctx.sema.to_def(&enum_ast)?;\n-    let variant_hir_name = variant_hir.name(ctx.db());\n-    let enum_module_def = ModuleDef::from(enum_hir);\n-    let current_module = enum_hir.module(ctx.db());\n     let target = variant.syntax().text_range();\n     acc.add(\n         AssistId(\"extract_struct_from_enum_variant\", AssistKind::RefactorRewrite),\n         \"Extract struct from enum variant\",\n         target,\n         |builder| {\n-            let definition = Definition::ModuleDef(ModuleDef::EnumVariant(variant_hir));\n-            let res = definition.usages(&ctx.sema).all();\n+            let variant_hir_name = variant_hir.name(ctx.db());\n+            let enum_module_def = ModuleDef::from(enum_hir);\n+            let usages =\n+                Definition::ModuleDef(ModuleDef::EnumVariant(variant_hir)).usages(&ctx.sema).all();\n \n             let mut visited_modules_set = FxHashSet::default();\n+            let current_module = enum_hir.module(ctx.db());\n             visited_modules_set.insert(current_module);\n             let mut rewriters = FxHashMap::default();\n-            for reference in res {\n+            for reference in usages {\n                 let rewriter = rewriters\n                     .entry(reference.file_range.file_id)\n                     .or_insert_with(SyntaxRewriter::default);\n@@ -86,26 +81,49 @@ pub(crate) fn extract_struct_from_enum_variant(\n                 builder.rewrite(rewriter);\n             }\n             builder.edit_file(ctx.frange.file_id);\n-            update_variant(&mut rewriter, &variant_name, &field_list);\n+            update_variant(&mut rewriter, &variant);\n             extract_struct_def(\n                 &mut rewriter,\n                 &enum_ast,\n                 variant_name.clone(),\n                 &field_list,\n                 &variant.parent_enum().syntax().clone().into(),\n-                visibility,\n+                enum_ast.visibility(),\n             );\n             builder.rewrite(rewriter);\n         },\n     )\n }\n \n-fn existing_struct_def(db: &RootDatabase, variant_name: &ast::Name, variant: &EnumVariant) -> bool {\n+fn extract_field_list_if_applicable(\n+    variant: &ast::Variant,\n+) -> Option<Either<ast::RecordFieldList, ast::TupleFieldList>> {\n+    match variant.kind() {\n+        ast::StructKind::Record(field_list) if field_list.fields().next().is_some() => {\n+            Some(Either::Left(field_list))\n+        }\n+        ast::StructKind::Tuple(field_list) if field_list.fields().count() > 1 => {\n+            Some(Either::Right(field_list))\n+        }\n+        _ => None,\n+    }\n+}\n+\n+fn existing_definition(db: &RootDatabase, variant_name: &ast::Name, variant: &EnumVariant) -> bool {\n     variant\n         .parent_enum(db)\n         .module(db)\n         .scope(db, None)\n         .into_iter()\n+        .filter(|(_, def)| match def {\n+            // only check type-namespace\n+            hir::ScopeDef::ModuleDef(def) => matches!(def,\n+                ModuleDef::Module(_) | ModuleDef::Adt(_) |\n+                ModuleDef::EnumVariant(_) | ModuleDef::Trait(_) |\n+                ModuleDef::TypeAlias(_) | ModuleDef::BuiltinType(_)\n+            ),\n+            _ => false,\n+        })\n         .any(|(name, _)| name == variant_name.as_name())\n }\n \n@@ -133,19 +151,29 @@ fn extract_struct_def(\n     rewriter: &mut SyntaxRewriter,\n     enum_: &ast::Enum,\n     variant_name: ast::Name,\n-    variant_list: &ast::TupleFieldList,\n+    field_list: &Either<ast::RecordFieldList, ast::TupleFieldList>,\n     start_offset: &SyntaxElement,\n     visibility: Option<ast::Visibility>,\n ) -> Option<()> {\n-    let variant_list = make::tuple_field_list(\n-        variant_list\n-            .fields()\n-            .flat_map(|field| Some(make::tuple_field(Some(make::visibility_pub()), field.ty()?))),\n-    );\n+    let pub_vis = Some(make::visibility_pub());\n+    let field_list = match field_list {\n+        Either::Left(field_list) => {\n+            make::record_field_list(field_list.fields().flat_map(|field| {\n+                Some(make::record_field(pub_vis.clone(), field.name()?, field.ty()?))\n+            }))\n+            .into()\n+        }\n+        Either::Right(field_list) => make::tuple_field_list(\n+            field_list\n+                .fields()\n+                .flat_map(|field| Some(make::tuple_field(pub_vis.clone(), field.ty()?))),\n+        )\n+        .into(),\n+    };\n \n     rewriter.insert_before(\n         start_offset,\n-        make::struct_(visibility, variant_name, None, variant_list.into()).syntax(),\n+        make::struct_(visibility, variant_name, None, field_list).syntax(),\n     );\n     rewriter.insert_before(start_offset, &make::tokens::blank_line());\n \n@@ -156,15 +184,14 @@ fn extract_struct_def(\n     Some(())\n }\n \n-fn update_variant(\n-    rewriter: &mut SyntaxRewriter,\n-    variant_name: &ast::Name,\n-    field_list: &ast::TupleFieldList,\n-) -> Option<()> {\n-    let (l, r): (SyntaxElement, SyntaxElement) =\n-        (field_list.l_paren_token()?.into(), field_list.r_paren_token()?.into());\n-    let replacement = vec![l, variant_name.syntax().clone().into(), r];\n-    rewriter.replace_with_many(field_list.syntax(), replacement);\n+fn update_variant(rewriter: &mut SyntaxRewriter, variant: &ast::Variant) -> Option<()> {\n+    let name = variant.name()?;\n+    let tuple_field = make::tuple_field(None, make::ty(name.text()));\n+    let replacement = make::variant(\n+        name,\n+        Some(ast::FieldList::TupleFieldList(make::tuple_field_list(iter::once(tuple_field)))),\n+    );\n+    rewriter.replace(variant.syntax(), replacement.syntax());\n     Some(())\n }\n \n@@ -211,12 +238,47 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn test_extract_struct_several_fields() {\n+    fn test_extract_struct_several_fields_tuple() {\n         check_assist(\n             extract_struct_from_enum_variant,\n             \"enum A { <|>One(u32, u32) }\",\n             r#\"struct One(pub u32, pub u32);\n \n+enum A { One(One) }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_several_fields_named() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            \"enum A { <|>One { foo: u32, bar: u32 } }\",\n+            r#\"struct One{ pub foo: u32, pub bar: u32 }\n+\n+enum A { One(One) }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_one_field_named() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            \"enum A { <|>One { foo: u32 } }\",\n+            r#\"struct One{ pub foo: u32 }\n+\n+enum A { One(One) }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_enum_variant_name_value_namespace() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"const One: () = ();\n+enum A { <|>One(u32, u32) }\"#,\n+            r#\"const One: () = ();\n+struct One(pub u32, pub u32);\n+\n enum A { One(One) }\"#,\n         );\n     }\n@@ -298,12 +360,22 @@ fn another_fn() {\n     fn test_extract_enum_not_applicable_if_struct_exists() {\n         check_not_applicable(\n             r#\"struct One;\n-        enum A { <|>One(u8) }\"#,\n+        enum A { <|>One(u8, u32) }\"#,\n         );\n     }\n \n     #[test]\n     fn test_extract_not_applicable_one_field() {\n         check_not_applicable(r\"enum A { <|>One(u32) }\");\n     }\n+\n+    #[test]\n+    fn test_extract_not_applicable_no_field_tuple() {\n+        check_not_applicable(r\"enum A { <|>None() }\");\n+    }\n+\n+    #[test]\n+    fn test_extract_not_applicable_no_field_named() {\n+        check_not_applicable(r\"enum A { <|>None {} }\");\n+    }\n }"}, {"sha": "d275dd75ba7e83ef8769d290255c9cdd53ef9cbc", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd6eeffb2fe47b4b352d6f53e874cabfec04213c/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6eeffb2fe47b4b352d6f53e874cabfec04213c/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=bd6eeffb2fe47b4b352d6f53e874cabfec04213c", "patch": "@@ -157,7 +157,8 @@ fn missing_record_expr_field_fix(\n         return None;\n     }\n     let new_field = make::record_field(\n-        record_expr_field.field_name()?,\n+        None,\n+        make::name(record_expr_field.field_name()?.text()),\n         make::ty(&new_field_type.display_source_code(sema.db, module.into()).ok()?),\n     );\n "}, {"sha": "b1578820fe350fbcb39062160638a89886131aee", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bd6eeffb2fe47b4b352d6f53e874cabfec04213c/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6eeffb2fe47b4b352d6f53e874cabfec04213c/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=bd6eeffb2fe47b4b352d6f53e874cabfec04213c", "patch": "@@ -110,8 +110,16 @@ pub fn record_expr_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::Re\n     }\n }\n \n-pub fn record_field(name: ast::NameRef, ty: ast::Type) -> ast::RecordField {\n-    ast_from_text(&format!(\"struct S {{ {}: {}, }}\", name, ty))\n+pub fn record_field(\n+    visibility: Option<ast::Visibility>,\n+    name: ast::Name,\n+    ty: ast::Type,\n+) -> ast::RecordField {\n+    let visibility = match visibility {\n+        None => String::new(),\n+        Some(it) => format!(\"{} \", it),\n+    };\n+    ast_from_text(&format!(\"struct S {{ {}{}: {}, }}\", visibility, name, ty))\n }\n \n pub fn block_expr(\n@@ -360,6 +368,13 @@ pub fn tuple_field_list(fields: impl IntoIterator<Item = ast::TupleField>) -> as\n     ast_from_text(&format!(\"struct f({});\", fields))\n }\n \n+pub fn record_field_list(\n+    fields: impl IntoIterator<Item = ast::RecordField>,\n+) -> ast::RecordFieldList {\n+    let fields = fields.into_iter().join(\", \");\n+    ast_from_text(&format!(\"struct f {{ {} }}\", fields))\n+}\n+\n pub fn tuple_field(visibility: Option<ast::Visibility>, ty: ast::Type) -> ast::TupleField {\n     let visibility = match visibility {\n         None => String::new(),\n@@ -368,6 +383,14 @@ pub fn tuple_field(visibility: Option<ast::Visibility>, ty: ast::Type) -> ast::T\n     ast_from_text(&format!(\"struct f({}{});\", visibility, ty))\n }\n \n+pub fn variant(name: ast::Name, field_list: Option<ast::FieldList>) -> ast::Variant {\n+    let field_list = match field_list {\n+        None => String::new(),\n+        Some(it) => format!(\"{}\", it),\n+    };\n+    ast_from_text(&format!(\"enum f {{ {}{} }}\", name, field_list))\n+}\n+\n pub fn fn_(\n     visibility: Option<ast::Visibility>,\n     fn_name: ast::Name,"}]}