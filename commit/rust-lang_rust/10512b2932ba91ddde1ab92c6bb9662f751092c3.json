{"sha": "10512b2932ba91ddde1ab92c6bb9662f751092c3", "node_id": "C_kwDOAAsO6NoAKDEwNTEyYjI5MzJiYTkxZGRkZTFhYjkyYzZiYjk2NjJmNzUxMDkyYzM", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-03-14T15:40:09Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-05-01T08:15:17Z"}, "message": "remove current_type_ascription from DiagnosticMetadata", "tree": {"sha": "a788679f63ce823f4c1cc778eb2044a91aa6bbd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a788679f63ce823f4c1cc778eb2044a91aa6bbd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10512b2932ba91ddde1ab92c6bb9662f751092c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10512b2932ba91ddde1ab92c6bb9662f751092c3", "html_url": "https://github.com/rust-lang/rust/commit/10512b2932ba91ddde1ab92c6bb9662f751092c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10512b2932ba91ddde1ab92c6bb9662f751092c3/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f65b875e830b00ccf4d37461890c2afaccc92067", "url": "https://api.github.com/repos/rust-lang/rust/commits/f65b875e830b00ccf4d37461890c2afaccc92067", "html_url": "https://github.com/rust-lang/rust/commit/f65b875e830b00ccf4d37461890c2afaccc92067"}], "stats": {"total": 14, "additions": 1, "deletions": 13}, "files": [{"sha": "ba4fe20703fab5c40e6d79778593c1cea4d7ac0f", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10512b2932ba91ddde1ab92c6bb9662f751092c3/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10512b2932ba91ddde1ab92c6bb9662f751092c3/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=10512b2932ba91ddde1ab92c6bb9662f751092c3", "patch": "@@ -548,9 +548,6 @@ struct DiagnosticMetadata<'ast> {\n     /// they are used (in a `break` or `continue` statement)\n     unused_labels: FxHashMap<NodeId, Span>,\n \n-    /// Only used for better errors on `fn(): fn()`.\n-    current_type_ascription: Vec<Span>,\n-\n     /// Only used for better errors on `let x = { foo: bar };`.\n     /// In the case of a parse error with `let x = { foo: bar, };`, this isn't needed, it's only\n     /// needed for cases where this parses as a correct type ascription.\n@@ -4057,17 +4054,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                     }\n                 }\n             }\n-            ExprKind::Type(ref type_expr, ref ty) => {\n-                // `ParseSess::type_ascription_path_suggestions` keeps spans of colon tokens in\n-                // type ascription. Here we are trying to retrieve the span of the colon token as\n-                // well, but only if it's written without spaces `expr:Ty` and therefore confusable\n-                // with `expr::Ty`, only in this case it will match the span from\n-                // `type_ascription_path_suggestions`.\n-                self.diagnostic_metadata\n-                    .current_type_ascription\n-                    .push(type_expr.span.between(ty.span));\n+            ExprKind::Type(ref _type_expr, ref _ty) => {\n                 visit::walk_expr(self, expr);\n-                self.diagnostic_metadata.current_type_ascription.pop();\n             }\n             // `async |x| ...` gets desugared to `|x| async {...}`, so we need to\n             // resolve the arguments within the proper scopes so that usages of them inside the"}]}