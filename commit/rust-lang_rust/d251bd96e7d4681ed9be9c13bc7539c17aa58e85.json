{"sha": "d251bd96e7d4681ed9be9c13bc7539c17aa58e85", "node_id": "C_kwDOAAsO6NoAKGQyNTFiZDk2ZTdkNDY4MWVkOWJlOWMxM2JjNzUzOWMxN2FhNThlODU", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-07-08T16:54:20Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-07-08T16:54:20Z"}, "message": "Add `for_each_expr`", "tree": {"sha": "e336599b9ce5bc28673f69e2a5bed8991a11a193", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e336599b9ce5bc28673f69e2a5bed8991a11a193"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d251bd96e7d4681ed9be9c13bc7539c17aa58e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d251bd96e7d4681ed9be9c13bc7539c17aa58e85", "html_url": "https://github.com/rust-lang/rust/commit/d251bd96e7d4681ed9be9c13bc7539c17aa58e85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d251bd96e7d4681ed9be9c13bc7539c17aa58e85/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54feac18d1ad9cc5af1f71dfb34baa32f99630ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/54feac18d1ad9cc5af1f71dfb34baa32f99630ae", "html_url": "https://github.com/rust-lang/rust/commit/54feac18d1ad9cc5af1f71dfb34baa32f99630ae"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "3c8a678c439b5aa2b2ae3bdfc1d4f4caec2ee818", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d251bd96e7d4681ed9be9c13bc7539c17aa58e85/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d251bd96e7d4681ed9be9c13bc7539c17aa58e85/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=d251bd96e7d4681ed9be9c13bc7539c17aa58e85", "patch": "@@ -5,14 +5,82 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::intravisit::{self, walk_block, walk_expr, Visitor};\n use rustc_hir::{\n-    Arm, Block, BlockCheckMode, Body, BodyId, Expr, ExprKind, HirId, ItemId, ItemKind, Let, QPath, Stmt, UnOp,\n+    Arm, Block, BlockCheckMode, Body, BodyId, Expr, ExprKind, HirId, ItemId, ItemKind, Let, Pat, QPath, Stmt, UnOp,\n     UnsafeSource, Unsafety,\n };\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::adjustment::Adjust;\n use rustc_middle::ty::{self, Ty, TypeckResults};\n+use rustc_span::Span;\n+\n+mod internal {\n+    /// Trait for visitor functions to control whether or not to descend to child nodes. Implemented\n+    /// for only two types. `()` always descends. `Descend` allows controlled descent.\n+    pub trait Continue {\n+        fn descend(&self) -> bool;\n+    }\n+}\n+use internal::Continue;\n+\n+impl Continue for () {\n+    fn descend(&self) -> bool {\n+        true\n+    }\n+}\n+\n+/// Allows for controlled descent whe using visitor functions. Use `()` instead when always\n+/// descending into child nodes.\n+#[derive(Clone, Copy)]\n+pub enum Descend {\n+    Yes,\n+    No,\n+}\n+impl From<bool> for Descend {\n+    fn from(from: bool) -> Self {\n+        if from { Self::Yes } else { Self::No }\n+    }\n+}\n+impl Continue for Descend {\n+    fn descend(&self) -> bool {\n+        matches!(self, Self::Yes)\n+    }\n+}\n+\n+/// Calls the given function once for each expression contained. This does not enter any bodies or\n+/// nested items.\n+pub fn for_each_expr<'tcx, B, C: Continue>(\n+    node: impl Visitable<'tcx>,\n+    f: impl FnMut(&'tcx Expr<'tcx>) -> ControlFlow<B, C>,\n+) -> Option<B> {\n+    struct V<B, F> {\n+        f: F,\n+        res: Option<B>,\n+    }\n+    impl<'tcx, B, C: Continue, F: FnMut(&'tcx Expr<'tcx>) -> ControlFlow<B, C>> Visitor<'tcx> for V<B, F> {\n+        fn visit_expr(&mut self, e: &'tcx Expr<'tcx>) {\n+            if self.res.is_some() {\n+                return;\n+            }\n+            match (self.f)(e) {\n+                ControlFlow::Continue(c) if c.descend() => walk_expr(self, e),\n+                ControlFlow::Break(b) => self.res = Some(b),\n+                ControlFlow::Continue(_) => (),\n+            }\n+        }\n+\n+        // Avoid unnecessary `walk_*` calls.\n+        fn visit_ty(&mut self, _: &'tcx hir::Ty<'tcx>) {}\n+        fn visit_pat(&mut self, _: &'tcx Pat<'tcx>) {}\n+        fn visit_qpath(&mut self, _: &'tcx QPath<'tcx>, _: HirId, _: Span) {}\n+        // Avoid monomorphising all `visit_*` functions.\n+        fn visit_nested_item(&mut self, _: ItemId) {}\n+    }\n+    let mut v = V { f, res: None };\n+    node.visit(&mut v);\n+    v.res\n+}\n \n /// Convenience method for creating a `Visitor` with just `visit_expr` overridden and nested\n /// bodies (i.e. closures) are visited."}]}