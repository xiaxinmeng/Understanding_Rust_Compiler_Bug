{"sha": "807c1a0935d4acbf637601e81fc078d7d7098650", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwN2MxYTA5MzVkNGFjYmY2Mzc2MDFlODFmYzA3OGQ3ZDcwOTg2NTA=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-02-15T09:52:26Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-12T19:53:56Z"}, "message": "Make OnDiskCache thread-safer", "tree": {"sha": "c6142f3cf0043587d4ebecd2cb93d1e9cfebc6d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6142f3cf0043587d4ebecd2cb93d1e9cfebc6d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/807c1a0935d4acbf637601e81fc078d7d7098650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/807c1a0935d4acbf637601e81fc078d7d7098650", "html_url": "https://github.com/rust-lang/rust/commit/807c1a0935d4acbf637601e81fc078d7d7098650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/807c1a0935d4acbf637601e81fc078d7d7098650/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c537493d01694cc6e0a614dff12c475055aa2b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c537493d01694cc6e0a614dff12c475055aa2b4", "html_url": "https://github.com/rust-lang/rust/commit/6c537493d01694cc6e0a614dff12c475055aa2b4"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "6e7b070378e28ff7a39e38b95263909cfd6d9a31", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/807c1a0935d4acbf637601e81fc078d7d7098650/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/807c1a0935d4acbf637601e81fc078d7d7098650/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=807c1a0935d4acbf637601e81fc078d7d7098650", "patch": "@@ -61,7 +61,7 @@ use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::{Lrc, Lock};\n use std::any::Any;\n use std::borrow::Borrow;\n-use std::cell::{Cell, RefCell};\n+use std::cell::Cell;\n use std::cmp::Ordering;\n use std::collections::hash_map::{self, Entry};\n use std::hash::{Hash, Hasher};\n@@ -867,7 +867,7 @@ pub struct GlobalCtxt<'tcx> {\n     maybe_unused_extern_crates: Vec<(DefId, Span)>,\n \n     // Internal cache for metadata decoding. No need to track deps on this.\n-    pub rcache: RefCell<FxHashMap<ty::CReaderCacheKey, Ty<'tcx>>>,\n+    pub rcache: Lock<FxHashMap<ty::CReaderCacheKey, Ty<'tcx>>>,\n \n     /// Caches the results of trait selection. This cache is used\n     /// for things that do not have to do with the parameters in scope.\n@@ -1263,7 +1263,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             hir,\n             def_path_hash_to_def_id,\n             maps: maps::Maps::new(providers),\n-            rcache: RefCell::new(FxHashMap()),\n+            rcache: Lock::new(FxHashMap()),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n             crate_name: Symbol::intern(crate_name),"}, {"sha": "9ea4b21c552218dc785bf7a8a57189fd1b8af681", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/807c1a0935d4acbf637601e81fc078d7d7098650/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/807c1a0935d4acbf637601e81fc078d7d7098650/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=807c1a0935d4acbf637601e81fc078d7d7098650", "patch": "@@ -17,7 +17,7 @@ use hir::map::definitions::DefPathHash;\n use ich::{CachingCodemapView, Fingerprint};\n use mir::{self, interpret};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{Lrc, Lock, HashMapExt, Once};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n                       SpecializedDecoder, SpecializedEncoder,\n@@ -57,17 +57,17 @@ pub struct OnDiskCache<'sess> {\n \n     // This field collects all Diagnostics emitted during the current\n     // compilation session.\n-    current_diagnostics: RefCell<FxHashMap<DepNodeIndex, Vec<Diagnostic>>>,\n+    current_diagnostics: Lock<FxHashMap<DepNodeIndex, Vec<Diagnostic>>>,\n \n     prev_cnums: Vec<(u32, String, CrateDisambiguator)>,\n-    cnum_map: RefCell<Option<IndexVec<CrateNum, Option<CrateNum>>>>,\n+    cnum_map: Once<IndexVec<CrateNum, Option<CrateNum>>>,\n \n     codemap: &'sess CodeMap,\n     file_index_to_stable_id: FxHashMap<FileMapIndex, StableFilemapId>,\n \n     // These two fields caches that are populated lazily during decoding.\n-    file_index_to_file: RefCell<FxHashMap<FileMapIndex, Lrc<FileMap>>>,\n-    synthetic_expansion_infos: RefCell<FxHashMap<AbsoluteBytePos, SyntaxContext>>,\n+    file_index_to_file: Lock<FxHashMap<FileMapIndex, Lrc<FileMap>>>,\n+    synthetic_expansion_infos: Lock<FxHashMap<AbsoluteBytePos, SyntaxContext>>,\n \n     // A map from dep-node to the position of the cached query result in\n     // `serialized_data`.\n@@ -140,14 +140,14 @@ impl<'sess> OnDiskCache<'sess> {\n         OnDiskCache {\n             serialized_data: data,\n             file_index_to_stable_id: footer.file_index_to_stable_id,\n-            file_index_to_file: RefCell::new(FxHashMap()),\n+            file_index_to_file: Lock::new(FxHashMap()),\n             prev_cnums: footer.prev_cnums,\n-            cnum_map: RefCell::new(None),\n+            cnum_map: Once::new(),\n             codemap: sess.codemap(),\n-            current_diagnostics: RefCell::new(FxHashMap()),\n+            current_diagnostics: Lock::new(FxHashMap()),\n             query_result_index: footer.query_result_index.into_iter().collect(),\n             prev_diagnostics_index: footer.diagnostics_index.into_iter().collect(),\n-            synthetic_expansion_infos: RefCell::new(FxHashMap()),\n+            synthetic_expansion_infos: Lock::new(FxHashMap()),\n             interpret_alloc_cache: RefCell::new(FxHashMap::default()),\n             interpret_alloc_size: RefCell::new(FxHashMap::default()),\n         }\n@@ -157,14 +157,14 @@ impl<'sess> OnDiskCache<'sess> {\n         OnDiskCache {\n             serialized_data: Vec::new(),\n             file_index_to_stable_id: FxHashMap(),\n-            file_index_to_file: RefCell::new(FxHashMap()),\n+            file_index_to_file: Lock::new(FxHashMap()),\n             prev_cnums: vec![],\n-            cnum_map: RefCell::new(None),\n+            cnum_map: Once::new(),\n             codemap,\n-            current_diagnostics: RefCell::new(FxHashMap()),\n+            current_diagnostics: Lock::new(FxHashMap()),\n             query_result_index: FxHashMap(),\n             prev_diagnostics_index: FxHashMap(),\n-            synthetic_expansion_infos: RefCell::new(FxHashMap()),\n+            synthetic_expansion_infos: Lock::new(FxHashMap()),\n             interpret_alloc_cache: RefCell::new(FxHashMap::default()),\n             interpret_alloc_size: RefCell::new(FxHashMap::default()),\n         }\n@@ -383,18 +383,16 @@ impl<'sess> OnDiskCache<'sess> {\n             return None\n         };\n \n-        // Initialize the cnum_map if it is not initialized yet.\n-        if self.cnum_map.borrow().is_none() {\n-            let mut cnum_map = self.cnum_map.borrow_mut();\n-            *cnum_map = Some(Self::compute_cnum_map(tcx, &self.prev_cnums[..]));\n-        }\n-        let cnum_map = self.cnum_map.borrow();\n+        // Initialize the cnum_map using the value from the thread which finishes the closure first\n+        self.cnum_map.init_nonlocking_same(|| {\n+            Self::compute_cnum_map(tcx, &self.prev_cnums[..])\n+        });\n \n         let mut decoder = CacheDecoder {\n             tcx,\n             opaque: opaque::Decoder::new(&self.serialized_data[..], pos.to_usize()),\n             codemap: self.codemap,\n-            cnum_map: cnum_map.as_ref().unwrap(),\n+            cnum_map: self.cnum_map.get(),\n             file_index_to_file: &self.file_index_to_file,\n             file_index_to_stable_id: &self.file_index_to_stable_id,\n             synthetic_expansion_infos: &self.synthetic_expansion_infos,\n@@ -458,8 +456,8 @@ struct CacheDecoder<'a, 'tcx: 'a, 'x> {\n     opaque: opaque::Decoder<'x>,\n     codemap: &'x CodeMap,\n     cnum_map: &'x IndexVec<CrateNum, Option<CrateNum>>,\n-    synthetic_expansion_infos: &'x RefCell<FxHashMap<AbsoluteBytePos, SyntaxContext>>,\n-    file_index_to_file: &'x RefCell<FxHashMap<FileMapIndex, Lrc<FileMap>>>,\n+    synthetic_expansion_infos: &'x Lock<FxHashMap<AbsoluteBytePos, SyntaxContext>>,\n+    file_index_to_file: &'x Lock<FxHashMap<FileMapIndex, Lrc<FileMap>>>,\n     file_index_to_stable_id: &'x FxHashMap<FileMapIndex, StableFilemapId>,\n     interpret_alloc_cache: &'x RefCell<FxHashMap<usize, interpret::AllocId>>,\n     interpret_alloc_size: &'x RefCell<FxHashMap<usize, usize>>,\n@@ -557,7 +555,8 @@ impl<'a, 'tcx: 'a, 'x> ty_codec::TyDecoder<'a, 'tcx> for CacheDecoder<'a, 'tcx,\n         }\n \n         let ty = or_insert_with(self)?;\n-        tcx.rcache.borrow_mut().insert(cache_key, ty);\n+        // This may overwrite the entry, but it should overwrite with the same value\n+        tcx.rcache.borrow_mut().insert_same(cache_key, ty);\n         Ok(ty)\n     }\n "}]}