{"sha": "379d3365fd16a9faf90c98a74f5e7d7b5c0ede23", "node_id": "C_kwDOAAsO6NoAKDM3OWQzMzY1ZmQxNmE5ZmFmOTBjOThhNzRmNWU3ZDdiNWMwZWRlMjM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-20T17:21:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-20T17:21:47Z"}, "message": "Rollup merge of #104558 - thomcc:unalign-diriter, r=ChrisDenton\n\nDon't assume `FILE_ID_BOTH_DIR_INFO` will be aligned\n\nFixes #104530. See that issue for info.\n\nr? `@ChrisDenton`", "tree": {"sha": "29f45fdec2a2132f1a75c3d19e45b591a1ddfcea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29f45fdec2a2132f1a75c3d19e45b591a1ddfcea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/379d3365fd16a9faf90c98a74f5e7d7b5c0ede23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjemIrCRBK7hj4Ov3rIwAAcNEIAGEr8lcO2tw2e5ov1mIkk25E\nmz2xK9sUDeioXI91cXW2+tUnDPEysjy0s/Np3K0aPJvGsiLdIuCFVDa1L83iL8ZG\nldX9YvYPKGzbRl2vpGj5r97kVo01/r7a1ERfZi4Xf4t11RF1EwGiGsfoQMi1tl6D\nzSWsVCy7raFe2m8oRBFiSSfjbwJKNvaVeAh90qWx6F1edDFcr75guugsGGlHl4qm\nTcBPyvkzh73oGvb/ROhcbWRFbizFnoORy0y5HQ4QdtFG1ETeutEL8fw6UQHMxXB1\nM55S6vAgbLeovghdGnJrsXLHmGc1fURuTLiQd4wjIfsyXYtUlTjtxWq3ppgckk0=\n=jmzA\n-----END PGP SIGNATURE-----\n", "payload": "tree 29f45fdec2a2132f1a75c3d19e45b591a1ddfcea\nparent ddb12348cab204cc68d6b8c634f77d070ba0cbfe\nparent 56888c1e9b4135b511abd2d8e907099003d12281\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668964907 +0100\ncommitter GitHub <noreply@github.com> 1668964907 +0100\n\nRollup merge of #104558 - thomcc:unalign-diriter, r=ChrisDenton\n\nDon't assume `FILE_ID_BOTH_DIR_INFO` will be aligned\n\nFixes #104530. See that issue for info.\n\nr? `@ChrisDenton`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/379d3365fd16a9faf90c98a74f5e7d7b5c0ede23", "html_url": "https://github.com/rust-lang/rust/commit/379d3365fd16a9faf90c98a74f5e7d7b5c0ede23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/379d3365fd16a9faf90c98a74f5e7d7b5c0ede23/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddb12348cab204cc68d6b8c634f77d070ba0cbfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb12348cab204cc68d6b8c634f77d070ba0cbfe", "html_url": "https://github.com/rust-lang/rust/commit/ddb12348cab204cc68d6b8c634f77d070ba0cbfe"}, {"sha": "56888c1e9b4135b511abd2d8e907099003d12281", "url": "https://api.github.com/repos/rust-lang/rust/commits/56888c1e9b4135b511abd2d8e907099003d12281", "html_url": "https://github.com/rust-lang/rust/commit/56888c1e9b4135b511abd2d8e907099003d12281"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "3780980382879cf0e5199cd3c052721798a7a42b", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/379d3365fd16a9faf90c98a74f5e7d7b5c0ede23/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379d3365fd16a9faf90c98a74f5e7d7b5c0ede23/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=379d3365fd16a9faf90c98a74f5e7d7b5c0ede23", "patch": "@@ -1,5 +1,6 @@\n use crate::os::windows::prelude::*;\n \n+use crate::borrow::Cow;\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::io::{self, BorrowedCursor, Error, IoSlice, IoSliceMut, SeekFrom};\n@@ -719,7 +720,7 @@ impl<'a> DirBuffIter<'a> {\n     }\n }\n impl<'a> Iterator for DirBuffIter<'a> {\n-    type Item = (&'a [u16], bool);\n+    type Item = (Cow<'a, [u16]>, bool);\n     fn next(&mut self) -> Option<Self::Item> {\n         use crate::mem::size_of;\n         let buffer = &self.buffer?[self.cursor..];\n@@ -734,15 +735,19 @@ impl<'a> Iterator for DirBuffIter<'a> {\n         //   `FileNameLength` bytes)\n         let (name, is_directory, next_entry) = unsafe {\n             let info = buffer.as_ptr().cast::<c::FILE_ID_BOTH_DIR_INFO>();\n-            // Guaranteed to be aligned in documentation for\n+            // While this is guaranteed to be aligned in documentation for\n             // https://docs.microsoft.com/en-us/windows/win32/api/winbase/ns-winbase-file_id_both_dir_info\n-            assert!(info.is_aligned());\n-            let next_entry = (*info).NextEntryOffset as usize;\n-            let name = crate::slice::from_raw_parts(\n+            // it does not seem that reality is so kind, and assuming this\n+            // caused crashes in some cases (https://github.com/rust-lang/rust/issues/104530)\n+            // presumably, this can be blamed on buggy filesystem drivers, but who knows.\n+            let next_entry = ptr::addr_of!((*info).NextEntryOffset).read_unaligned() as usize;\n+            let length = ptr::addr_of!((*info).FileNameLength).read_unaligned() as usize;\n+            let attrs = ptr::addr_of!((*info).FileAttributes).read_unaligned();\n+            let name = from_maybe_unaligned(\n                 ptr::addr_of!((*info).FileName).cast::<u16>(),\n-                (*info).FileNameLength as usize / size_of::<u16>(),\n+                length / size_of::<u16>(),\n             );\n-            let is_directory = ((*info).FileAttributes & c::FILE_ATTRIBUTE_DIRECTORY) != 0;\n+            let is_directory = (attrs & c::FILE_ATTRIBUTE_DIRECTORY) != 0;\n \n             (name, is_directory, next_entry)\n         };\n@@ -755,13 +760,21 @@ impl<'a> Iterator for DirBuffIter<'a> {\n \n         // Skip `.` and `..` pseudo entries.\n         const DOT: u16 = b'.' as u16;\n-        match name {\n+        match &name[..] {\n             [DOT] | [DOT, DOT] => self.next(),\n             _ => Some((name, is_directory)),\n         }\n     }\n }\n \n+unsafe fn from_maybe_unaligned<'a>(p: *const u16, len: usize) -> Cow<'a, [u16]> {\n+    if p.is_aligned() {\n+        Cow::Borrowed(crate::slice::from_raw_parts(p, len))\n+    } else {\n+        Cow::Owned((0..len).map(|i| p.add(i).read_unaligned()).collect())\n+    }\n+}\n+\n /// Open a link relative to the parent directory, ensure no symlinks are followed.\n fn open_link_no_reparse(parent: &File, name: &[u16], access: u32) -> io::Result<File> {\n     // This is implemented using the lower level `NtCreateFile` function as\n@@ -1117,13 +1130,13 @@ fn remove_dir_all_iterative(f: &File, delete: fn(&File) -> io::Result<()>) -> io\n             if is_directory {\n                 let child_dir = open_link_no_reparse(\n                     &dir,\n-                    name,\n+                    &name,\n                     c::SYNCHRONIZE | c::DELETE | c::FILE_LIST_DIRECTORY,\n                 )?;\n                 dirlist.push(child_dir);\n             } else {\n                 for i in 1..=MAX_RETRIES {\n-                    let result = open_link_no_reparse(&dir, name, c::SYNCHRONIZE | c::DELETE);\n+                    let result = open_link_no_reparse(&dir, &name, c::SYNCHRONIZE | c::DELETE);\n                     match result {\n                         Ok(f) => delete(&f)?,\n                         // Already deleted, so skip."}]}