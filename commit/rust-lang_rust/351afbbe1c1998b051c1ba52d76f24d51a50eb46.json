{"sha": "351afbbe1c1998b051c1ba52d76f24d51a50eb46", "node_id": "C_kwDOAAsO6NoAKDM1MWFmYmJlMWMxOTk4YjA1MWMxYmE1MmQ3NmYyNGQ1MWE1MGViNDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-21T12:49:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-21T12:49:24Z"}, "message": "Auto merge of #2555 - oli-obk:libffi-is-unhappy, r=RalfJung\n\nOnly support libffi on unix for now", "tree": {"sha": "0a34204ec6bd3f47c29708a6a4295c29704b9a49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a34204ec6bd3f47c29708a6a4295c29704b9a49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/351afbbe1c1998b051c1ba52d76f24d51a50eb46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/351afbbe1c1998b051c1ba52d76f24d51a50eb46", "html_url": "https://github.com/rust-lang/rust/commit/351afbbe1c1998b051c1ba52d76f24d51a50eb46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/351afbbe1c1998b051c1ba52d76f24d51a50eb46/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb84c8b6211c540bb88f4a5f279988725021f486", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb84c8b6211c540bb88f4a5f279988725021f486", "html_url": "https://github.com/rust-lang/rust/commit/eb84c8b6211c540bb88f4a5f279988725021f486"}, {"sha": "4f357956b868cd5d6c1a9ff0608dfcd7d5bbe2a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f357956b868cd5d6c1a9ff0608dfcd7d5bbe2a3", "html_url": "https://github.com/rust-lang/rust/commit/4f357956b868cd5d6c1a9ff0608dfcd7d5bbe2a3"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "0c547d585d198eec1c01f787f290dfd29a307114", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/351afbbe1c1998b051c1ba52d76f24d51a50eb46/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/351afbbe1c1998b051c1ba52d76f24d51a50eb46/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=351afbbe1c1998b051c1ba52d76f24d51a50eb46", "patch": "@@ -20,8 +20,6 @@ doctest = false # and no doc tests\n [dependencies]\n getrandom = { version = \"0.2\", features = [\"std\"] }\n env_logger = \"0.9\"\n-libffi = \"3.0.0\"\n-libloading = \"0.7\"\n log = \"0.4\"\n shell-escape = \"0.1.4\"\n rand = \"0.8\"\n@@ -33,10 +31,10 @@ smallvec = \"1.7\"\n rustc-workspace-hack = \"1.0.0\"\n measureme = \"10.0.0\"\n \n-# Enable some feature flags that dev-dependencies need but dependencies\n-# do not.  This makes `./miri install` after `./miri build` faster.\n [target.\"cfg(unix)\".dependencies]\n libc = \"0.2\"\n+libffi = \"3.0.0\"\n+libloading = \"0.7\"\n \n [dev-dependencies]\n colored = \"2\""}, {"sha": "1f4c52d5b85075dc6b7c780c8089129c0275833b", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/351afbbe1c1998b051c1ba52d76f24d51a50eb46/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/351afbbe1c1998b051c1ba52d76f24d51a50eb46/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=351afbbe1c1998b051c1ba52d76f24d51a50eb46", "patch": "@@ -360,7 +360,7 @@ to Miri failing to detect cases of undefined behavior in a program.\n   file descriptors will be mixed up.\n   This is **work in progress**; currently, only integer arguments and return values are\n   supported (and no, pointer/integer casts to work around this limitation will not work;\n-  they will fail horribly).\n+  they will fail horribly). It also only works on unix hosts for now.\n   Follow [the discussion on supporting other types](https://github.com/rust-lang/miri/issues/2365). \n * `-Zmiri-measureme=<name>` enables `measureme` profiling for the interpreted program.\n    This can be used to find which parts of your program are executing slowly under Miri."}, {"sha": "7d32ee42573268ed8d6d6b513ae07f8c31d266d5", "filename": "src/bin/miri.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/351afbbe1c1998b051c1ba52d76f24d51a50eb46/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351afbbe1c1998b051c1ba52d76f24d51a50eb46/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=351afbbe1c1998b051c1ba52d76f24d51a50eb46", "patch": "@@ -7,7 +7,6 @@\n \n extern crate rustc_data_structures;\n extern crate rustc_driver;\n-extern crate rustc_errors;\n extern crate rustc_hir;\n extern crate rustc_interface;\n extern crate rustc_metadata;"}, {"sha": "464f452ca76962b6d068939581665964e599b454", "filename": "src/concurrency/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/351afbbe1c1998b051c1ba52d76f24d51a50eb46/src%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351afbbe1c1998b051c1ba52d76f24d51a50eb46/src%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fsync.rs?ref=351afbbe1c1998b051c1ba52d76f24d51a50eb46", "patch": "@@ -44,7 +44,7 @@ macro_rules! declare_id {\n         }\n \n         impl $name {\n-            pub fn to_u32_scalar<'tcx>(&self) -> Scalar<Provenance> {\n+            pub fn to_u32_scalar(&self) -> Scalar<Provenance> {\n                 Scalar::from_u32(self.0.get())\n             }\n         }"}, {"sha": "f11771911fa0828fc12a5847736a42916cc094c9", "filename": "src/machine.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/351afbbe1c1998b051c1ba52d76f24d51a50eb46/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351afbbe1c1998b051c1ba52d76f24d51a50eb46/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=351afbbe1c1998b051c1ba52d76f24d51a50eb46", "patch": "@@ -400,6 +400,7 @@ pub struct MiriMachine<'mir, 'tcx> {\n     pub(crate) basic_block_count: u64,\n \n     /// Handle of the optional shared object file for external functions.\n+    #[cfg(unix)]\n     pub external_so_lib: Option<(libloading::Library, std::path::PathBuf)>,\n \n     /// Run a garbage collector for SbTags every N basic blocks.\n@@ -410,7 +411,6 @@ pub struct MiriMachine<'mir, 'tcx> {\n \n impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n     pub(crate) fn new(config: &MiriConfig, layout_cx: LayoutCx<'tcx, TyCtxt<'tcx>>) -> Self {\n-        let target_triple = &layout_cx.tcx.sess.opts.target_triple.to_string();\n         let local_crates = helpers::get_local_crates(layout_cx.tcx);\n         let layouts =\n             PrimitiveLayouts::new(layout_cx).expect(\"Couldn't get layouts of primitive types\");\n@@ -462,7 +462,9 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n             report_progress: config.report_progress,\n             basic_block_count: 0,\n             clock: Clock::new(config.isolated_op == IsolatedOp::Allow),\n+            #[cfg(unix)]\n             external_so_lib: config.external_so_file.as_ref().map(|lib_file_path| {\n+                let target_triple = &layout_cx.tcx.sess.opts.target_triple.to_string();\n                 // Check if host target == the session target.\n                 if env!(\"TARGET\") != target_triple {\n                     panic!("}, {"sha": "bb62a2a7ec1b597dddd32ddb299dfda7b22d11db", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/351afbbe1c1998b051c1ba52d76f24d51a50eb46/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351afbbe1c1998b051c1ba52d76f24d51a50eb46/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=351afbbe1c1998b051c1ba52d76f24d51a50eb46", "patch": "@@ -23,6 +23,7 @@ use rustc_target::{\n \n use super::backtrace::EvalContextExt as _;\n use crate::helpers::{convert::Truncate, target_os_is_unix};\n+#[cfg(unix)]\n use crate::shims::ffi_support::EvalContextExt as _;\n use crate::*;\n \n@@ -371,6 +372,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let this = self.eval_context_mut();\n \n         // First deal with any external C functions in linked .so file.\n+        #[cfg(unix)]\n         if this.machine.external_so_lib.as_ref().is_some() {\n             // An Ok(false) here means that the function being called was not exported\n             // by the specified `.so` file; we should continue and check if it corresponds to"}, {"sha": "8cb648e51732851ba39950edc6873050436edc38", "filename": "src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/351afbbe1c1998b051c1ba52d76f24d51a50eb46/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351afbbe1c1998b051c1ba52d76f24d51a50eb46/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=351afbbe1c1998b051c1ba52d76f24d51a50eb46", "patch": "@@ -1,6 +1,7 @@\n #![warn(clippy::integer_arithmetic)]\n \n mod backtrace;\n+#[cfg(unix)]\n pub mod ffi_support;\n pub mod foreign_items;\n pub mod intrinsics;"}, {"sha": "8464c4589ed5d5a6242aa4201f281582c360cb59", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/351afbbe1c1998b051c1ba52d76f24d51a50eb46/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351afbbe1c1998b051c1ba52d76f24d51a50eb46/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=351afbbe1c1998b051c1ba52d76f24d51a50eb46", "patch": "@@ -246,7 +246,7 @@ impl FileDescriptor for DummyOutput {\n         Ok(Ok(bytes.len()))\n     }\n \n-    fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n+    fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(DummyOutput))\n     }\n }"}]}