{"sha": "701496384fd2d46557b3f013b50860c69c9848cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMTQ5NjM4NGZkMmQ0NjU1N2IzZjAxM2I1MDg2MGM2OWM5ODQ4Y2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-03T07:24:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-03T07:24:24Z"}, "message": "Auto merge of #86571 - fee1-dead:const-trait-impl-fix, r=jackh726\n\ndeny using default function in impl const Trait\n\nFixes #79450.\n\nI don't know if my implementation is correct:\n\n - The check is in `rustc_passes::check_const`, should I put it somewhere else instead?\n - Is my approach (to checking the impl) optimal? It works for the current tests, but it might have some issues or there might be a better way of doing this.", "tree": {"sha": "b93a1be018014080bb5086d5d8818624cd918e3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b93a1be018014080bb5086d5d8818624cd918e3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/701496384fd2d46557b3f013b50860c69c9848cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/701496384fd2d46557b3f013b50860c69c9848cc", "html_url": "https://github.com/rust-lang/rust/commit/701496384fd2d46557b3f013b50860c69c9848cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/701496384fd2d46557b3f013b50860c69c9848cc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd9a071474d898556891d5146fd9e8d1a10a077", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd9a071474d898556891d5146fd9e8d1a10a077", "html_url": "https://github.com/rust-lang/rust/commit/fdd9a071474d898556891d5146fd9e8d1a10a077"}, {"sha": "5e178b29b43adbd3313fbc70037cf7aba0c98a56", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e178b29b43adbd3313fbc70037cf7aba0c98a56", "html_url": "https://github.com/rust-lang/rust/commit/5e178b29b43adbd3313fbc70037cf7aba0c98a56"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "d783852aacadd205294ff5584939f70e454d668f", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/701496384fd2d46557b3f013b50860c69c9848cc/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/701496384fd2d46557b3f013b50860c69c9848cc/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=701496384fd2d46557b3f013b50860c69c9848cc", "patch": "@@ -13,6 +13,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_middle::hir::map::Map;\n+use rustc_middle::ty;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::parse::feature_err;\n@@ -59,12 +60,73 @@ impl NonConstExpr {\n fn check_mod_const_bodies(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let mut vis = CheckConstVisitor::new(tcx);\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut vis.as_deep_visitor());\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckConstTraitVisitor::new(tcx));\n }\n \n pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_const_bodies, ..*providers };\n }\n \n+struct CheckConstTraitVisitor<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> CheckConstTraitVisitor<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx>) -> Self {\n+        CheckConstTraitVisitor { tcx }\n+    }\n+}\n+\n+impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<'tcx> {\n+    /// check for const trait impls, and errors if the impl uses provided/default functions\n+    /// of the trait being implemented; as those provided functions can be non-const.\n+    fn visit_item(&mut self, item: &'hir hir::Item<'hir>) {\n+        let _: Option<_> = try {\n+            if let hir::ItemKind::Impl(ref imp) = item.kind {\n+                if let hir::Constness::Const = imp.constness {\n+                    let did = imp.of_trait.as_ref()?.trait_def_id()?;\n+                    let trait_fn_cnt = self\n+                        .tcx\n+                        .associated_item_def_ids(did)\n+                        .iter()\n+                        .filter(|did| {\n+                            matches!(\n+                                self.tcx.associated_item(**did),\n+                                ty::AssocItem { kind: ty::AssocKind::Fn, .. }\n+                            )\n+                        })\n+                        .count();\n+\n+                    let impl_fn_cnt = imp\n+                        .items\n+                        .iter()\n+                        .filter(|it| matches!(it.kind, hir::AssocItemKind::Fn { .. }))\n+                        .count();\n+\n+                    // number of trait functions unequal to functions in impl,\n+                    // meaning that one or more provided/default functions of the\n+                    // trait are used.\n+                    if trait_fn_cnt != impl_fn_cnt {\n+                        self.tcx\n+                            .sess\n+                            .struct_span_err(\n+                                item.span,\n+                                \"const trait implementations may not use default functions\",\n+                            )\n+                            .emit();\n+                    }\n+                }\n+            }\n+        };\n+    }\n+\n+    fn visit_trait_item(&mut self, _: &'hir hir::TraitItem<'hir>) {}\n+\n+    fn visit_impl_item(&mut self, _: &'hir hir::ImplItem<'hir>) {}\n+\n+    fn visit_foreign_item(&mut self, _: &'hir hir::ForeignItem<'hir>) {}\n+}\n+\n #[derive(Copy, Clone)]\n struct CheckConstVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,"}, {"sha": "cadb8d235806082692de97bf4df7d872dd1e2293", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/701496384fd2d46557b3f013b50860c69c9848cc/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/701496384fd2d46557b3f013b50860c69c9848cc/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=701496384fd2d46557b3f013b50860c69c9848cc", "patch": "@@ -10,6 +10,7 @@\n #![feature(iter_zip)]\n #![feature(nll)]\n #![feature(min_specialization)]\n+#![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "95e7f9e9c837ad6abb2ffe093327d7ea576a5396", "filename": "src/test/ui/consts/const-float-classify.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/701496384fd2d46557b3f013b50860c69c9848cc/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/701496384fd2d46557b3f013b50860c69c9848cc/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs?ref=701496384fd2d46557b3f013b50860c69c9848cc", "patch": "@@ -53,6 +53,9 @@ impl const PartialEq<NonDet> for bool {\n     fn eq(&self, _: &NonDet) -> bool {\n         true\n     }\n+    fn ne(&self, _: &NonDet) -> bool {\n+        false\n+    }\n }\n \n // The result of the `is_sign` methods are not checked for correctness, since LLVM does not"}, {"sha": "44814b0654e91f12d5b868c9f016f67085fc566a", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-const-trait-method-pass.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/701496384fd2d46557b3f013b50860c69c9848cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/701496384fd2d46557b3f013b50860c69c9848cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs?ref=701496384fd2d46557b3f013b50860c69c9848cc", "patch": "@@ -17,6 +17,9 @@ impl const PartialEq for Int {\n     fn eq(&self, rhs: &Self) -> bool {\n         self.0 == rhs.0\n     }\n+    fn ne(&self, other: &Self) -> bool {\n+        !self.eq(other)\n+    }\n }\n \n pub trait Plus {"}, {"sha": "47eed89d03d2dc81d5b35bee1df3c8e7c541a36e", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-chain.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/701496384fd2d46557b3f013b50860c69c9848cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/701496384fd2d46557b3f013b50860c69c9848cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs?ref=701496384fd2d46557b3f013b50860c69c9848cc", "patch": "@@ -12,6 +12,9 @@ impl const PartialEq for S {\n     fn eq(&self, _: &S) -> bool {\n         true\n     }\n+    fn ne(&self, other: &S) -> bool {\n+        !self.eq(other)\n+    }\n }\n \n const fn equals_self<T: PartialEq>(t: &T) -> bool {"}, {"sha": "00a3c7f51fe90df88eeedf1b1aa9cbc2654d83db", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-dup-bound.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/701496384fd2d46557b3f013b50860c69c9848cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/701496384fd2d46557b3f013b50860c69c9848cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs?ref=701496384fd2d46557b3f013b50860c69c9848cc", "patch": "@@ -11,6 +11,9 @@ impl const PartialEq for S {\n     fn eq(&self, _: &S) -> bool {\n         true\n     }\n+    fn ne(&self, other: &S) -> bool {\n+        !self.eq(other)\n+    }\n }\n \n // This duplicate bound should not result in ambiguities. It should be equivalent to a single const"}, {"sha": "953a65111990e96a787214cd3300f48ca680bace", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-pass.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/701496384fd2d46557b3f013b50860c69c9848cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/701496384fd2d46557b3f013b50860c69c9848cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs?ref=701496384fd2d46557b3f013b50860c69c9848cc", "patch": "@@ -12,6 +12,9 @@ impl const PartialEq for S {\n     fn eq(&self, _: &S) -> bool {\n         true\n     }\n+    fn ne(&self, other: &S) -> bool {\n+        !self.eq(other)\n+    }\n }\n \n const fn equals_self<T: PartialEq>(t: &T) -> bool {"}, {"sha": "4ff4fa0d83b2c41c92e4b13b54d1b681d131166b", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/701496384fd2d46557b3f013b50860c69c9848cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/701496384fd2d46557b3f013b50860c69c9848cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.rs?ref=701496384fd2d46557b3f013b50860c69c9848cc", "patch": "@@ -0,0 +1,20 @@\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+trait Tr {\n+    fn req(&self);\n+\n+    fn prov(&self) {\n+        println!(\"lul\");\n+        self.req();\n+    }\n+}\n+\n+struct S;\n+\n+impl const Tr for S {\n+    fn req(&self) {}\n+}\n+//~^^^ ERROR const trait implementations may not use default functions\n+\n+fn main() {}"}, {"sha": "51a7b18fa8d550d68b2bb323590bc0a5d4c89434", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/701496384fd2d46557b3f013b50860c69c9848cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/701496384fd2d46557b3f013b50860c69c9848cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.stderr?ref=701496384fd2d46557b3f013b50860c69c9848cc", "patch": "@@ -0,0 +1,10 @@\n+error: const trait implementations may not use default functions\n+  --> $DIR/impl-with-default-fn.rs:15:1\n+   |\n+LL | / impl const Tr for S {\n+LL | |     fn req(&self) {}\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}]}