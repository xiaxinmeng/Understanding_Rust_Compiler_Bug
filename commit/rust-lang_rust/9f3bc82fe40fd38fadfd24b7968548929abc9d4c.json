{"sha": "9f3bc82fe40fd38fadfd24b7968548929abc9d4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmM2JjODJmZTQwZmQzOGZhZGZkMjRiNzk2ODU0ODkyOWFiYzlkNGM=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-02-19T12:59:21Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-02-19T23:28:37Z"}, "message": "Check `RUSTC_CTFE_BACKTRACE` much less by generating fewer errors\n\nBefore this change, `get_size_and_align()`  calls `get_fn_alloc()` *a\nlot* in CTFE heavy code. This previously returned an `Error` which would\ncheck if `RUSTC_CTFE_BACKTRACE` was set on construction. Doing this\nturned out to be a performance hotspot as @nnethercote discovered in\n#68792.\n\nThis is an alternate take on that PR which resolves the performance\nissue by generating *many* fewer errors. Previously, `ctfe-stress-4`\nwould generate over 5,000,000 errors each of which would check for the\npresence of the environment variable. With these changes, that number is\nreduced to 30.", "tree": {"sha": "b3e01662a61cb256a36713f5fed3c15068a8afea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3e01662a61cb256a36713f5fed3c15068a8afea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f3bc82fe40fd38fadfd24b7968548929abc9d4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3bc82fe40fd38fadfd24b7968548929abc9d4c", "html_url": "https://github.com/rust-lang/rust/commit/9f3bc82fe40fd38fadfd24b7968548929abc9d4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f3bc82fe40fd38fadfd24b7968548929abc9d4c/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae5467826d1e677aff4662fc0481ace33761fc90", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae5467826d1e677aff4662fc0481ace33761fc90", "html_url": "https://github.com/rust-lang/rust/commit/ae5467826d1e677aff4662fc0481ace33761fc90"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "1df389d9c8beeeb645f991cc5af6f03ba60a2483", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f3bc82fe40fd38fadfd24b7968548929abc9d4c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3bc82fe40fd38fadfd24b7968548929abc9d4c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=9f3bc82fe40fd38fadfd24b7968548929abc9d4c", "patch": "@@ -560,7 +560,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n         // # Function pointers\n         // (both global from `alloc_map` and local from `extra_fn_ptr_map`)\n-        if let Ok(_) = self.get_fn_alloc(id) {\n+        if let Some(_) = self.get_fn_alloc(id) {\n             return if let AllocCheck::Dereferenceable = liveness {\n                 // The caller requested no function pointers.\n                 throw_unsup!(DerefFunctionPointer)\n@@ -602,14 +602,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         }\n     }\n \n-    fn get_fn_alloc(&self, id: AllocId) -> InterpResult<'tcx, FnVal<'tcx, M::ExtraFnVal>> {\n+    fn get_fn_alloc(&self, id: AllocId) -> Option<FnVal<'tcx, M::ExtraFnVal>> {\n         trace!(\"reading fn ptr: {}\", id);\n         if let Some(extra) = self.extra_fn_ptr_map.get(&id) {\n-            Ok(FnVal::Other(*extra))\n+            Some(FnVal::Other(*extra))\n         } else {\n             match self.tcx.alloc_map.lock().get(id) {\n-                Some(GlobalAlloc::Function(instance)) => Ok(FnVal::Instance(instance)),\n-                _ => throw_unsup!(ExecuteMemory),\n+                Some(GlobalAlloc::Function(instance)) => Some(FnVal::Instance(instance)),\n+                _ => None,\n             }\n         }\n     }\n@@ -622,7 +622,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         if ptr.offset.bytes() != 0 {\n             throw_unsup!(InvalidFunctionPointer)\n         }\n-        self.get_fn_alloc(ptr.alloc_id)\n+        self.get_fn_alloc(ptr.alloc_id).ok_or_else(|| err_unsup!(ExecuteMemory).into())\n     }\n \n     pub fn mark_immutable(&mut self, id: AllocId) -> InterpResult<'tcx> {"}]}