{"sha": "d7dc3502f9ad8f8ab0cc7f22388b92b2216f57fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZGMzNTAyZjlhZDhmOGFiMGNjN2YyMjM4OGI5MmIyMjE2ZjU3ZmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:05:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-20T21:05:33Z"}, "message": "Rollup merge of #67392 - csmoe:async-typeinfo, r=estebank\n\nFix unresolved type span inside async object\n\nCloses #65180\nr? @estebank\nIt's hard to create a minimal repro for that issue, [decided](https://rust-lang.zulipchat.com/#narrow/stream/187312-wg-async-foundations/topic/meeting.202019.2E12.2E17/near/183675659) to give up finding mcve.\ncc [previous take](https://github.com/rust-lang/rust/pull/65668)", "tree": {"sha": "970db129863bb632270db2d3a3590f0ec2c8db0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/970db129863bb632270db2d3a3590f0ec2c8db0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7dc3502f9ad8f8ab0cc7f22388b92b2216f57fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/TedCRBK7hj4Ov3rIwAAdHIIADBPaHTCRrf87t6bh/w9InvO\njYk1miBwRfb76KvaZIxEdAfghtjPZ7//+D9sVV1anSaZXyNsdfOfzym7fPT1G2sx\nJscgWpyH52mRe4j3wDt3WimG6q9RGw0sCg6GbbFEi9nNZNRIzKpH9HrnZfH8YxrM\nFwqrkVF7bK7U5Mavunq0YVFYVB4F4gB+yRGeJKqkc3SA89gXMQZ6C6GaA4ViG9eK\nZscSRuNbrMQgNJa4wBXjJqeTkMioixiMNOLs3GBRH1523B8ozV1xWR3RWQq9yBWi\nFOVebeyFuw68Ky0R9IuCFrvkUMzAg2RNxcNxYgAxSp4xQABKnN1WN8bnwM0Fbqk=\n=A9Fc\n-----END PGP SIGNATURE-----\n", "payload": "tree 970db129863bb632270db2d3a3590f0ec2c8db0e\nparent 86282d0b0f7a4a7083579ade68a9cd69410531c5\nparent ff4f6a125891b3474fac1cfd2e86784d4ec073a9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576875933 +0100\ncommitter GitHub <noreply@github.com> 1576875933 +0100\n\nRollup merge of #67392 - csmoe:async-typeinfo, r=estebank\n\nFix unresolved type span inside async object\n\nCloses #65180\nr? @estebank\nIt's hard to create a minimal repro for that issue, [decided](https://rust-lang.zulipchat.com/#narrow/stream/187312-wg-async-foundations/topic/meeting.202019.2E12.2E17/near/183675659) to give up finding mcve.\ncc [previous take](https://github.com/rust-lang/rust/pull/65668)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7dc3502f9ad8f8ab0cc7f22388b92b2216f57fe", "html_url": "https://github.com/rust-lang/rust/commit/d7dc3502f9ad8f8ab0cc7f22388b92b2216f57fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7dc3502f9ad8f8ab0cc7f22388b92b2216f57fe/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86282d0b0f7a4a7083579ade68a9cd69410531c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/86282d0b0f7a4a7083579ade68a9cd69410531c5", "html_url": "https://github.com/rust-lang/rust/commit/86282d0b0f7a4a7083579ade68a9cd69410531c5"}, {"sha": "ff4f6a125891b3474fac1cfd2e86784d4ec073a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4f6a125891b3474fac1cfd2e86784d4ec073a9", "html_url": "https://github.com/rust-lang/rust/commit/ff4f6a125891b3474fac1cfd2e86784d4ec073a9"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "2cffcc5bfade8a72175bc91d2322093e6bb33b4c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7dc3502f9ad8f8ab0cc7f22388b92b2216f57fe/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7dc3502f9ad8f8ab0cc7f22388b92b2216f57fe/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=d7dc3502f9ad8f8ab0cc7f22388b92b2216f57fe", "patch": "@@ -1857,6 +1857,16 @@ impl fmt::Display for YieldSource {\n     }\n }\n \n+impl From<GeneratorKind> for YieldSource {\n+    fn from(kind: GeneratorKind) -> Self {\n+        match kind {\n+            // Guess based on the kind of the current generator.\n+            GeneratorKind::Gen => Self::Yield,\n+            GeneratorKind::Async(_) => Self::Await,\n+        }\n+    }\n+}\n+\n // N.B., if you change this, you'll probably want to change the corresponding\n // type structure in middle/ty.rs as well.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]"}, {"sha": "607efca88dd704379a3d35f3ad2155569d055050", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d7dc3502f9ad8f8ab0cc7f22388b92b2216f57fe/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7dc3502f9ad8f8ab0cc7f22388b92b2216f57fe/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=d7dc3502f9ad8f8ab0cc7f22388b92b2216f57fe", "patch": "@@ -19,6 +19,7 @@ struct InteriorVisitor<'a, 'tcx> {\n     region_scope_tree: &'tcx region::ScopeTree,\n     expr_count: usize,\n     kind: hir::GeneratorKind,\n+    prev_unresolved_span: Option<Span>,\n }\n \n impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n@@ -32,7 +33,6 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n         debug!(\"generator_interior: attempting to record type {:?} {:?} {:?} {:?}\",\n                ty, scope, expr, source_span);\n \n-\n         let live_across_yield = scope.map(|s| {\n             self.region_scope_tree.yield_in_scope(s).and_then(|yield_data| {\n                 // If we are recording an expression that is the last yield\n@@ -54,15 +54,11 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n         }).unwrap_or_else(|| Some(YieldData {\n             span: DUMMY_SP,\n             expr_and_pat_count: 0,\n-            source: match self.kind { // Guess based on the kind of the current generator.\n-                hir::GeneratorKind::Gen => hir::YieldSource::Yield,\n-                hir::GeneratorKind::Async(_) => hir::YieldSource::Await,\n-            },\n+            source: self.kind.into(),\n         }));\n \n         if let Some(yield_data) = live_across_yield {\n             let ty = self.fcx.resolve_vars_if_possible(&ty);\n-\n             debug!(\"type in expr = {:?}, scope = {:?}, type = {:?}, count = {}, yield_span = {:?}\",\n                    expr, scope, ty, self.expr_count, yield_data.span);\n \n@@ -74,9 +70,12 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                                    yield_data.source);\n \n                 // If unresolved type isn't a ty_var then unresolved_type_span is None\n+                let span = self.prev_unresolved_span.unwrap_or_else(\n+                    || unresolved_type_span.unwrap_or(source_span)\n+                );\n                 self.fcx.need_type_info_err_in_generator(\n                     self.kind,\n-                    unresolved_type_span.unwrap_or(source_span),\n+                    span,\n                     unresolved_type,\n                 )\n                     .span_note(yield_data.span, &*note)\n@@ -94,6 +93,13 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n         } else {\n             debug!(\"no type in expr = {:?}, count = {:?}, span = {:?}\",\n                    expr, self.expr_count, expr.map(|e| e.span));\n+            let ty = self.fcx.resolve_vars_if_possible(&ty);\n+            if let Some((unresolved_type, unresolved_type_span))\n+                = self.fcx.unresolved_type_vars(&ty) {\n+                debug!(\"remained unresolved_type = {:?}, unresolved_type_span: {:?}\",\n+                    unresolved_type, unresolved_type_span);\n+                self.prev_unresolved_span = unresolved_type_span;\n+            }\n         }\n     }\n }\n@@ -112,6 +118,7 @@ pub fn resolve_interior<'a, 'tcx>(\n         region_scope_tree: fcx.tcx.region_scope_tree(def_id),\n         expr_count: 0,\n         kind,\n+        prev_unresolved_span: None,\n     };\n     intravisit::walk_body(&mut visitor, body);\n "}]}