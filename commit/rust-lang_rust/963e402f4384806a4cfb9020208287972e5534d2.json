{"sha": "963e402f4384806a4cfb9020208287972e5534d2", "node_id": "C_kwDOAAsO6NoAKDk2M2U0MDJmNDM4NDgwNmE0Y2ZiOTAyMDIwODI4Nzk3MmU1NTM0ZDI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-31T12:29:31Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-31T12:29:31Z"}, "message": "Don't track parent body stability (it wasn't used anyway)", "tree": {"sha": "fc97f2476fb9901811c19ac6c5c04432c7264bb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc97f2476fb9901811c19ac6c5c04432c7264bb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/963e402f4384806a4cfb9020208287972e5534d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/963e402f4384806a4cfb9020208287972e5534d2", "html_url": "https://github.com/rust-lang/rust/commit/963e402f4384806a4cfb9020208287972e5534d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/963e402f4384806a4cfb9020208287972e5534d2/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e11b4b8e02495e9753df983de7bcec9ef2b8ae31", "url": "https://api.github.com/repos/rust-lang/rust/commits/e11b4b8e02495e9753df983de7bcec9ef2b8ae31", "html_url": "https://github.com/rust-lang/rust/commit/e11b4b8e02495e9753df983de7bcec9ef2b8ae31"}], "stats": {"total": 21, "additions": 3, "deletions": 18}, "files": [{"sha": "be920601ee43f2c19d6b9cd43731a6ae4ec0c098", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/963e402f4384806a4cfb9020208287972e5534d2/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963e402f4384806a4cfb9020208287972e5534d2/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=963e402f4384806a4cfb9020208287972e5534d2", "patch": "@@ -2,8 +2,7 @@\n //! propagating default levels lexically from parent to children ast nodes.\n \n use rustc_attr::{\n-    self as attr, ConstStability, DefaultBodyStability, Stability, StabilityLevel, Unstable,\n-    UnstableReason,\n+    self as attr, ConstStability, Stability, StabilityLevel, Unstable, UnstableReason,\n };\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_errors::{struct_span_err, Applicability};\n@@ -91,7 +90,6 @@ struct Annotator<'a, 'tcx> {\n     index: &'a mut Index,\n     parent_stab: Option<Stability>,\n     parent_const_stab: Option<ConstStability>,\n-    parent_body_stab: Option<DefaultBodyStability>,\n     parent_depr: Option<DeprecationEntry>,\n     in_trait_impl: bool,\n }\n@@ -159,7 +157,6 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                 depr.map(|(d, _)| DeprecationEntry::local(d, def_id)),\n                 None,\n                 None,\n-                None,\n                 visit_children,\n             );\n             return;\n@@ -213,14 +210,12 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             }\n         }\n \n-        let body_stab = body_stab.map(|(body_stab, _span)| {\n+        if let Some((body_stab, _span)) = body_stab {\n             // FIXME: check that this item can have body stability\n \n             self.index.default_body_stab_map.insert(def_id, body_stab);\n             debug!(?self.index.default_body_stab_map);\n-\n-            body_stab\n-        });\n+        }\n \n         let stab = stab.map(|(stab, span)| {\n             // Error if prohibited, or can't inherit anything from a container.\n@@ -299,7 +294,6 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             depr.map(|(d, _)| DeprecationEntry::local(d, def_id)),\n             stab,\n             if inherit_const_stability.yes() { const_stab } else { None },\n-            body_stab,\n             visit_children,\n         );\n     }\n@@ -309,14 +303,12 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         depr: Option<DeprecationEntry>,\n         stab: Option<Stability>,\n         const_stab: Option<ConstStability>,\n-        body_stab: Option<DefaultBodyStability>,\n         f: impl FnOnce(&mut Self),\n     ) {\n         // These will be `Some` if this item changes the corresponding stability attribute.\n         let mut replaced_parent_depr = None;\n         let mut replaced_parent_stab = None;\n         let mut replaced_parent_const_stab = None;\n-        let mut replaced_parent_body_stab = None;\n \n         if let Some(depr) = depr {\n             replaced_parent_depr = Some(replace(&mut self.parent_depr, Some(depr)));\n@@ -328,9 +320,6 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             replaced_parent_const_stab =\n                 Some(replace(&mut self.parent_const_stab, Some(const_stab)));\n         }\n-        if let Some(body_stab) = body_stab {\n-            replaced_parent_body_stab = Some(self.parent_body_stab.replace(body_stab));\n-        }\n \n         f(self);\n \n@@ -343,9 +332,6 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         if let Some(orig_parent_const_stab) = replaced_parent_const_stab {\n             self.parent_const_stab = orig_parent_const_stab;\n         }\n-        if let Some(orig_parent_body_stab) = replaced_parent_body_stab {\n-            self.parent_body_stab = orig_parent_body_stab;\n-        }\n     }\n }\n \n@@ -646,7 +632,6 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n             index: &mut index,\n             parent_stab: None,\n             parent_const_stab: None,\n-            parent_body_stab: None,\n             parent_depr: None,\n             in_trait_impl: false,\n         };"}]}