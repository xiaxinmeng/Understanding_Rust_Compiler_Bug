{"sha": "b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZGI2YmI1YWY4MTg3Y2NiOWJlMTA3NmRkOTlkM2NiYjdmZDhmYTU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-10T23:05:35Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-14T17:50:24Z"}, "message": "Remove `Sized` `on_unimplemented` note", "tree": {"sha": "948c584ddebe707a794fa28f477006d00ba5d317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/948c584ddebe707a794fa28f477006d00ba5d317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "html_url": "https://github.com/rust-lang/rust/commit/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28e6f1f5b9370334271042638e7e368319152d55", "url": "https://api.github.com/repos/rust-lang/rust/commits/28e6f1f5b9370334271042638e7e368319152d55", "html_url": "https://github.com/rust-lang/rust/commit/28e6f1f5b9370334271042638e7e368319152d55"}], "stats": {"total": 172, "additions": 3, "deletions": 169}, "files": [{"sha": "6ddd41a26f122e7562b0fb11e24bcc97220890b0", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -84,11 +84,8 @@ impl<T: ?Sized> !Send for *mut T {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"sized\"]\n #[rustc_on_unimplemented(\n-    on(parent_trait = \"std::path::Path\", label = \"borrow the `Path` instead\"),\n     message = \"the size for values of type `{Self}` cannot be known at compilation time\",\n-    label = \"doesn't have a size known at compile-time\",\n-    note = \"to learn more, visit <https://doc.rust-lang.org/book/\\\n-            ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\"\n+    label = \"doesn't have a size known at compile-time\"\n )]\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n #[rustc_specialization_trait]"}, {"sha": "1f11d19c70ea2c12cc633b317285d4592e031a5a", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -17,7 +17,6 @@ LL |         asm!(\"{}\", in(reg) v[..]);\n    |                            ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u64]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all inline asm arguments must have a statically known size\n \n error[E0277]: the size for values of type `[u64]` cannot be known at compilation time\n@@ -27,7 +26,6 @@ LL |         asm!(\"{}\", out(reg) v[..]);\n    |                             ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u64]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all inline asm arguments must have a statically known size\n \n error[E0277]: the size for values of type `[u64]` cannot be known at compilation time\n@@ -37,7 +35,6 @@ LL |         asm!(\"{}\", inout(reg) v[..]);\n    |                               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u64]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all inline asm arguments must have a statically known size\n \n error: aborting due to 5 previous errors"}, {"sha": "e96d0e0eff7192bab34e361fb513b0f52ed6419f", "filename": "src/test/ui/associated-types/associated-types-unsized.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     let x = t.get();\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<T as Get>::Value`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n help: consider further restricting the associated type"}, {"sha": "de0acc88324a582d489727b4719bf5c8f18feef4", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -139,7 +139,6 @@ LL | pub struct Vec<T> {\n    |                - required by this bound in `std::vec::Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 11 previous errors\n "}, {"sha": "c3db950c75844839824c15feeb475b4a71bfaf54", "filename": "src/test/ui/associated-types/issue-63593.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -7,7 +7,6 @@ LL |     type This = Self;\n    |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider further restricting `Self`\n    |\n LL | trait MyTrait: std::marker::Sized {"}, {"sha": "f2ed2d32bd1e071b3555bd268a70675fb42d6092", "filename": "src/test/ui/associated-types/trait-with-supertraits-needing-sized-self.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -10,7 +10,6 @@ LL | pub trait Add<Rhs = Self> {\n    |               --- required by this bound in `std::ops::Add`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider further restricting `Self`\n    |\n LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> + std::marker::Sized {}"}, {"sha": "95ed9513f357b2da7f86137ab9c9ac3be9af7279", "filename": "src/test/ui/async-await/issue-72590-type-error-sized.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -17,7 +17,6 @@ LL |     async fn frob(self) {}\n    |                   ^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Foo`, the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Foo`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature"}, {"sha": "47d8cc1f06fd1b557402e86705709f8fd31ee60f", "filename": "src/test/ui/bad/bad-sized.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -21,7 +21,6 @@ LL | pub struct Vec<T> {\n    |                - required by this bound in `std::vec::Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn Trait`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n   --> $DIR/bad-sized.rs:4:37\n@@ -30,7 +29,6 @@ LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    |                                     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn Trait`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::vec::Vec::<T>::new`\n \n error: aborting due to 3 previous errors"}, {"sha": "b3e7b5b4feea4b6c446a14ed799e0e95ed1ef0d3", "filename": "src/test/ui/box-into-boxed-slice-fail.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     let _ = Box::into_boxed_slice(boxed_slice);\n    |                                   ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::boxed::Box::<T>::into_boxed_slice`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n@@ -15,7 +14,6 @@ LL |     let _ = Box::into_boxed_slice(boxed_slice);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: slice and array elements must have `Sized` type\n \n error[E0277]: the size for values of type `dyn std::fmt::Debug` cannot be known at compilation time\n@@ -25,7 +23,6 @@ LL |     let _ = Box::into_boxed_slice(boxed_trait);\n    |                                   ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn std::fmt::Debug`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::boxed::Box::<T>::into_boxed_slice`\n \n error[E0277]: the size for values of type `dyn std::fmt::Debug` cannot be known at compilation time\n@@ -35,7 +32,6 @@ LL |     let _ = Box::into_boxed_slice(boxed_trait);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn std::fmt::Debug`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: slice and array elements must have `Sized` type\n \n error: aborting due to 4 previous errors"}, {"sha": "fb2e0fc1a61699016c5f6e92189f861a47927b75", "filename": "src/test/ui/chalkify/impl_wf.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -8,7 +8,6 @@ LL | impl Foo for str { }\n    |      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the trait bound `f32: Foo` is not satisfied\n   --> $DIR/impl_wf.rs:27:17"}, {"sha": "bf2844cfb70d6db23fc61845f350db0117586ea3", "filename": "src/test/ui/consts/const-unsized.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL | const CONST_0: dyn Debug + Sync = *(&0 as &(dyn Debug + Sync));\n    |                ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:6:18\n@@ -14,7 +13,6 @@ LL | const CONST_FOO: str = *\"foo\";\n    |                  ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:9:18\n@@ -23,7 +21,6 @@ LL | static STATIC_1: dyn Debug + Sync = *(&1 as &(dyn Debug + Sync));\n    |                  ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:12:20\n@@ -32,7 +29,6 @@ LL | static STATIC_BAR: str = *\"bar\";\n    |                    ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a5374aedab86bf505c4b575fdf0c1c3659230adb", "filename": "src/test/ui/dst/dst-bad-assign-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     f5.ptr = *z;\n    |     ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn ToBar`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error: aborting due to previous error"}, {"sha": "f8d9300f11a310dc9ac357ceef2dc5f4e5522b85", "filename": "src/test/ui/dst/dst-bad-assign-3.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -14,7 +14,6 @@ LL |     f5.2 = Bar1 {f: 36};\n    |     ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn ToBar`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error: aborting due to 2 previous errors"}, {"sha": "8e3eeefb9ea66c178416a21c6da4426fffae60ff", "filename": "src/test/ui/dst/dst-bad-assign.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -14,7 +14,6 @@ LL |     f5.ptr = Bar1 {f: 36};\n    |     ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn ToBar`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error: aborting due to 2 previous errors"}, {"sha": "d9d6ca3292311a243ab9c7d2e730db04e38f2ce8", "filename": "src/test/ui/dst/dst-bad-deep-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep-2.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     let h: &(([isize],),) = &(*g,);\n    |                              ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `(([isize],),)`, the trait `std::marker::Sized` is not implemented for `[isize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `([isize],)`\n    = note: required because it appears within the type `(([isize],),)`\n    = note: tuples must have a statically known size to be initialized"}, {"sha": "1304f04f82062d30af80ea882abd4ef75d7644bf", "filename": "src/test/ui/dst/dst-bad-deep.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n    |                                  ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Fat<Fat<[isize]>>`, the trait `std::marker::Sized` is not implemented for `[isize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Fat<[isize]>`\n    = note: required because it appears within the type `Fat<Fat<[isize]>>`\n    = note: structs must have a statically known size to be initialized"}, {"sha": "d6e9aaab7cf39d1697fc67a09febe277c589e058", "filename": "src/test/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -7,7 +7,6 @@ LL |     let u: &dyn Foo = t;\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n@@ -19,7 +18,6 @@ LL |     let v: &dyn Foo = t as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -29,7 +27,6 @@ LL |     let _: &[&dyn Foo] = &[\"hi\"];\n    |                            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n@@ -39,7 +36,6 @@ LL |     let _: &dyn Foo = x as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error: aborting due to 4 previous errors"}, {"sha": "7e90e9ce1792dae953b7ac2a9dd6dae121de6728", "filename": "src/test/ui/dst/dst-sized-trait-param.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -8,7 +8,6 @@ LL | impl Foo<[isize]> for usize { }\n    |      ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[isize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Foo<T: ?Sized> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n@@ -24,7 +23,6 @@ LL | impl Foo<isize> for [usize] { }\n    |      ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[usize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8789bb9609bd4753c3a83cbabcfab630e2245af3", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -2,10 +2,9 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n   --> $DIR/E0277.rs:13:6\n    |\n LL | fn f(p: Path) { }\n-   |      ^ borrow the `Path` instead\n+   |      ^ doesn't have a size known at compile-time\n    |\n    = help: within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `std::path::Path`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature"}, {"sha": "8938afd33ffde90c3d9c55e6cf46deafc7723cef", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -8,7 +8,6 @@ LL |     assert_sized::<A>();\n    |                    ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn assert_sized<T: ?Sized>() { }\n@@ -24,7 +23,6 @@ LL |     assert_sized::<Foo>();\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Foo`, the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Foo`\n help: consider relaxing the implicit `Sized` restriction\n    |\n@@ -41,7 +39,6 @@ LL |     assert_sized::<Bar<A>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<A>`, the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Bar<A>`\n help: consider relaxing the implicit `Sized` restriction\n    |\n@@ -58,7 +55,6 @@ LL |     assert_sized::<Bar<Bar<A>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<Bar<A>>`, the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Bar<A>`\n    = note: required because it appears within the type `Bar<Bar<A>>`\n help: consider relaxing the implicit `Sized` restriction"}, {"sha": "5a58e57d36c706ba98983a40a8939ea86f183bb9", "filename": "src/test/ui/extern/issue-36122-accessing-externed-dst.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fextern%2Fissue-36122-accessing-externed-dst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fextern%2Fissue-36122-accessing-externed-dst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fissue-36122-accessing-externed-dst.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |         static symbol: [usize];\n    |                        ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[usize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "d4c09ec40fd926154140e23c0a2fe9486ea01fec", "filename": "src/test/ui/feature-gates/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -95,7 +95,6 @@ LL | struct TwoStrs(str, str) where str: Sized;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n@@ -108,7 +107,6 @@ LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n    = help: within `Dst<(dyn A + 'static)>`, the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Dst<(dyn A + 'static)>`\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n@@ -122,7 +120,6 @@ LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n "}, {"sha": "0775431a9d350269da9fa573b6d772d1d935afb0", "filename": "src/test/ui/feature-gates/feature-gate-unsized_locals.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL | fn f(f: dyn FnOnce()) {}\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::FnOnce() + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "379bd8ebd1cada3db5a4af9ab753152f12d673d1", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -9,7 +9,6 @@ LL | |    };\n    | |____^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the yield type of a generator must have a statically known size\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -19,7 +18,6 @@ LL |    Pin::new(&mut gen).resume(());\n    |                       ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7a6c07d4e082e0f5b013861be53e27f712452a0e", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -8,7 +8,6 @@ LL | impl Tsized for () {}\n    |      ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[()]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "96f961a2aaf6bd19c1029f3f7a6f8cf816ba8f34", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -16,7 +16,6 @@ LL | fn fuz() -> (usize, Trait) { (42, Struct) }\n    |             doesn't have a size known at compile-time\n    |\n    = help: within `(usize, (dyn Trait + 'static))`, the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `(usize, (dyn Trait + 'static))`\n    = note: the return type of a function must have a statically known size\n \n@@ -38,7 +37,6 @@ LL | fn bar() -> (usize, dyn Trait) { (42, Struct) }\n    |             doesn't have a size known at compile-time\n    |\n    = help: within `(usize, (dyn Trait + 'static))`, the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `(usize, (dyn Trait + 'static))`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "d241e6406d579080e67cfc6792716150a766c509", "filename": "src/test/ui/issues/issue-10412.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -56,7 +56,6 @@ LL | impl<'self> Serializable<str> for &'self str {\n    |             ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Serializable<'self, T: ?Sized> {"}, {"sha": "4e41acf433e599889fd76c95814411db40293920", "filename": "src/test/ui/issues/issue-14366.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     let _x = \"test\" as &dyn (::std::any::Any);\n    |              ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn std::any::Any`\n \n error: aborting due to previous error"}, {"sha": "68ceebc5b651d2e334378a738a2924a41515c259", "filename": "src/test/ui/issues/issue-15756.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-15756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-15756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15756.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     &mut something\n    |          ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[T]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "812778911a865fde362eac5e410c57cbf3b11002", "filename": "src/test/ui/issues/issue-17651.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     (|| Box::new(*(&[0][..])))();\n    |                  ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[{integer}]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::boxed::Box::<T>::new`\n \n error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n@@ -15,7 +14,6 @@ LL |     (|| Box::new(*(&[0][..])))();\n    |         ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[{integer}]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "3b5dfd1ad158c27660af7b02c325e7a2d1d58f0e", "filename": "src/test/ui/issues/issue-18919.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -8,7 +8,6 @@ LL | enum Option<T> {\n    |             - required by this bound in `Option`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn for<'r> std::ops::Fn(&'r isize) -> isize`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/issue-18919.rs:7:13\n    |"}, {"sha": "7bd2578344458d037ccad9fa2f12419a6f280a98", "filename": "src/test/ui/issues/issue-20005.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -8,7 +8,6 @@ LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n    |                                                 ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider further restricting `Self`\n    |\n LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self>, Self: std::marker::Sized {"}, {"sha": "0e96b12066937aa43679beb3806910ec90b31e23", "filename": "src/test/ui/issues/issue-20433.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -10,7 +10,6 @@ LL | pub struct Vec<T> {\n    |                - required by this bound in `std::vec::Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "5e06e3bc95c3655f9bb5f94e34604a52e05298b9", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     for item in *things { *item = 0 }\n    |                 ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn std::iter::Iterator<Item = &'a mut u8>`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error: aborting due to previous error"}, {"sha": "6f22fe6a99717be6140539dfa6eded3bbd97b138", "filename": "src/test/ui/issues/issue-22874.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-22874.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-22874.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22874.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     rows: [[String]],\n    |           ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[std::string::String]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: slice and array elements must have `Sized` type\n \n error: aborting due to previous error"}, {"sha": "46b4be6fd36496adbb5719a647920f9f481d675e", "filename": "src/test/ui/issues/issue-23281.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -8,7 +8,6 @@ LL | struct Vec<T> {\n    |            - required by this bound in `Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/issue-23281.rs:8:12\n    |"}, {"sha": "d2714408d8a39629cf0114d4072a64c9750f05bb", "filename": "src/test/ui/issues/issue-24446.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     static foo: dyn Fn() -> u32 = || -> u32 {\n    |                 ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() -> u32 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "881fae1942335333c9aab9e06cba0fb5c6bc4f05", "filename": "src/test/ui/issues/issue-27060-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -7,7 +7,6 @@ LL |     data: T,\n    |           ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the last field of a packed struct may only have a dynamically sized type if it does not need drop to be run\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size"}, {"sha": "313c294e8a1a56687ce12bc9287c693cefc34c30", "filename": "src/test/ui/issues/issue-27078.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     fn foo(self) -> &'static i32 {\n    |            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n help: consider further restricting `Self`"}, {"sha": "98de768a5a819af9a6442ee541631ca90eb96e6d", "filename": "src/test/ui/issues/issue-30355.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     &X(*Y)\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "a137549693844b8169ee4fc77b5a88efdc6b836e", "filename": "src/test/ui/issues/issue-35988.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     V([Box<E>]),\n    |       ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[std::boxed::Box<E>]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size"}, {"sha": "e96bbe1a99312d369b30b3b1b0d810cdeaf4cda3", "filename": "src/test/ui/issues/issue-38954.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL | fn _test(ref _p: str) {}\n    |          ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: unsized locals are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |"}, {"sha": "35aa1acdc1c9b04305d465eb88ba788ef9d002d8", "filename": "src/test/ui/issues/issue-41229-ref-str.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL | pub fn example(ref s: str) {}\n    |                ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: unsized locals are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |"}, {"sha": "fbe87aa2dbee592a94511c0d05741462362b9b41", "filename": "src/test/ui/issues/issue-42312.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     fn baz(_: Self::Target) where Self: Deref {}\n    |            ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<Self as std::ops::Deref>::Target`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: unsized locals are gated as an unstable feature\n help: consider further restricting the associated type\n    |\n@@ -23,7 +22,6 @@ LL | pub fn f(_: dyn ToString) {}\n    |          ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::string::ToString + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: unsized locals are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |"}, {"sha": "9205a518c8c3a59d296d166f3da0298505b6f110", "filename": "src/test/ui/issues/issue-54410.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-54410.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-54410.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54410.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     pub static mut symbol: [i8];\n    |                            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "149d882af78ffd8632488454fc4cff4fc30e4653", "filename": "src/test/ui/issues/issue-5883.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL | fn new_struct(r: dyn A + 'static)\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -19,7 +18,6 @@ LL |     Struct { r: r }\n    |     --------------- this returned value is of type `Struct`\n    |\n    = help: within `Struct`, the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Struct`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "fef64ebf2d365ebe7d463e2096faea63f0344437", "filename": "src/test/ui/issues/issue-65673.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -10,7 +10,6 @@ LL |     type Ctx = dyn Alias<T>;\n    |                ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "97c741783982507361de1da6a59b5c4ebad32357", "filename": "src/test/ui/lazy_normalization_consts/feature-gate-lazy_normalization_consts.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -10,7 +10,6 @@ LL |     let _: [u8; sof::<T>()];\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | pub const fn sof<T: ?Sized>() -> usize {"}, {"sha": "71abda520653e56b14eed5bbf1356b582530580a", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -209,7 +209,6 @@ LL |     let _ = fat_v as *const dyn Foo;\n    |             ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -219,7 +218,6 @@ LL |     let _ = a as *const dyn Foo;\n    |             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0606]: casting `&{float}` as `f32` is invalid"}, {"sha": "e179feba7a799e59e279c003c8cff34d3573d990", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -19,7 +19,6 @@ LL |     let range = *arr..;\n    |                 ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[{integer}]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::ops::RangeFrom`\n \n error: aborting due to 3 previous errors"}, {"sha": "ec2882d6c6d7366fef76173819cdc24a8ff055b3", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL | fn foo(_x: K) {}\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn I + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "0b1832d70ff860b7dbc4c21debdd2fee94ee3a22", "filename": "src/test/ui/str/str-array-assignment.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -24,7 +24,6 @@ LL |   let v = s[..2];\n    |       doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "7c834165e7f1c1c96abe76392e7ff059e7bb02b1", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -8,7 +8,6 @@ LL |     s[1..2] = bot();\n    |               ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn bot<T: ?Sized>() -> T { loop {} }\n@@ -21,7 +20,6 @@ LL |     s[1..2] = bot();\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error[E0277]: the type `str` cannot be indexed by `usize`"}, {"sha": "8dab8add80b8ab0b12dcd9428aacc4ad0b648cfd", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -80,7 +80,6 @@ LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because of the requirements on the impl of `Foo<'_, '_, u8>` for `str`\n \n error: aborting due to 5 previous errors"}, {"sha": "a40d5e4bf7ba13a2f7c21eb5001aff0cedc5a212", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -80,7 +80,6 @@ LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because of the requirements on the impl of `Foo<'_#0r, '_#1r, u8>` for `str`\n \n error: aborting due to 5 previous errors"}, {"sha": "0b08b4a16a6923b2799eed58da4ddbd2e6e201e0", "filename": "src/test/ui/suggestions/adt-param-with-implicit-sized-bound.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -10,7 +10,6 @@ LL |     _t: X<T>,\n    |         ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/adt-param-with-implicit-sized-bound.rs:18:10\n    |\n@@ -29,7 +28,6 @@ LL | struct Struct1<T>{\n    |                - required by this bound in `Struct1`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider further restricting `Self`\n    |\n LL |     fn func1() -> Struct1<Self> where Self: std::marker::Sized;\n@@ -49,7 +47,6 @@ LL | struct Struct2<'a, T>{\n    |                    - required by this bound in `Struct2`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider further restricting `Self`\n    |\n LL |     fn func2<'a>() -> Struct2<'a, Self> where Self: std::marker::Sized;\n@@ -69,7 +66,6 @@ LL | struct Struct3<T>{\n    |                - required by this bound in `Struct3`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/adt-param-with-implicit-sized-bound.rs:14:16\n    |\n@@ -92,7 +88,6 @@ LL | struct Struct4<T>{\n    |                - required by this bound in `Struct4`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider further restricting `Self`\n    |\n LL |     fn func4() -> Struct4<Self> where Self: std::marker::Sized;"}, {"sha": "5bd50fea1cb6c19957b5da94e0e4152811d0a508", "filename": "src/test/ui/suggestions/path-by-value.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -2,10 +2,9 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n   --> $DIR/path-by-value.rs:3:6\n    |\n LL | fn f(p: Path) { }\n-   |      ^ borrow the `Path` instead\n+   |      ^ doesn't have a size known at compile-time\n    |\n    = help: within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `std::path::Path`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature"}, {"sha": "082d787fb0b7bcb2ec7d1e61243b9408f4f5a876", "filename": "src/test/ui/traits/trait-bounds-not-on-bare-trait.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -13,7 +13,6 @@ LL | fn foo(_x: Foo + Send) {\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Foo + std::marker::Send + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "b8069f9ddb0f626775951c0d18121b1489029d82", "filename": "src/test/ui/traits/trait-suggest-where-clause.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -13,7 +13,6 @@ LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `U`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `U` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:10:5\n@@ -30,7 +29,6 @@ LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n    |\n    = help: within `Misc<U>`, the trait `std::marker::Sized` is not implemented for `U`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Misc<U>`\n \n error[E0277]: the trait bound `u64: std::convert::From<T>` is not satisfied\n@@ -69,7 +67,6 @@ LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[T]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:31:5\n@@ -83,7 +80,6 @@ LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[&U]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 7 previous errors\n "}, {"sha": "4f4695612de0b9dea8c73400ed097b1a1de3df77", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL | fn cant_return_str() -> str {\n    |                         ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the return type of a function must have a statically known size\n \n error[E0599]: no method named `test` found for type `i32` in the current scope"}, {"sha": "eb169987ccdb98a9ae7fa54b5e6177da82071e64", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -7,7 +7,6 @@ LL |     value: T,\n    |            ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -28,7 +27,6 @@ LL |     value: T,\n    |            ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -49,7 +47,6 @@ LL |     Value(T),\n    |           ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size"}, {"sha": "574f182ecc68726396183515669c4f07fce7b245", "filename": "src/test/ui/union/union-unsized.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     a: str,\n    |        ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -24,7 +23,6 @@ LL |     b: str,\n    |        ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size"}, {"sha": "2ed35dc0e2c12202403cccaecbab212b7814e00b", "filename": "src/test/ui/unsized-locals/issue-30276-feature-flagged.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     let _x: fn(_) -> Test = Test;\n    |                             ^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Test`, the trait `std::marker::Sized` is not implemented for `[i32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Test`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "461efcf3dbf292d5c6014fc6b36eaff73aad8bee", "filename": "src/test/ui/unsized-locals/issue-30276.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     let _x: fn(_) -> Test = Test;\n    |                             ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "04a8de1b5dc5b4ccfc9fdacc528f8f82a02923d1", "filename": "src/test/ui/unsized-locals/issue-50940-with-feature.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     A as fn(str) -> A<str>;\n    |     ^ doesn't have a size known at compile-time\n    |\n    = help: within `main::A<str>`, the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `main::A<str>`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "8e5f753082734ee55df4a3293c7c703a62de06da", "filename": "src/test/ui/unsized-locals/issue-50940.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     A as fn(str) -> A<str>;\n    |     ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "0a9b43dac334494c4ef9cee3a87d20cf018f59b4", "filename": "src/test/ui/unsized-locals/unsized-exprs.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     udrop::<(i32, [u8])>((42, *foo()));\n    |                          ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `({integer}, [u8])`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `({integer}, [u8])`\n    = note: tuples must have a statically known size to be initialized\n \n@@ -16,7 +15,6 @@ LL |     udrop::<A<[u8]>>(A { 0: *foo() });\n    |                      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `A<[u8]>`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `A<[u8]>`\n    = note: structs must have a statically known size to be initialized\n \n@@ -27,7 +25,6 @@ LL |     udrop::<A<[u8]>>(A(*foo()));\n    |                      ^ doesn't have a size known at compile-time\n    |\n    = help: within `A<[u8]>`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `A<[u8]>`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "11435ec0353bc68ae6b35a3374c2cdf6cd9d1255", "filename": "src/test/ui/unsized-locals/unsized-exprs3.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     udrop as fn([u8]);\n    |     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "998cd7a527c9be9ec37628e05c71a7f2dc9cfbc5", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -9,7 +9,6 @@ LL | fn foo<T: ?Sized>() { bar::<T>() }\n    |        this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "cb06e707dcaa89dd3d5be8a79c6af5b63bff3f0b", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -10,7 +10,6 @@ LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `U` if it were used through indirection like `&U` or `Box<U>`\n   --> $DIR/unsized-enum.rs:4:10\n    |"}, {"sha": "82f395740d5adeb6fddd6d271520d9e483782f73", "filename": "src/test/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -8,7 +8,6 @@ LL |     VA(W),\n    |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `W`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -30,7 +29,6 @@ LL |     VB{x: X},\n    |           ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -52,7 +50,6 @@ LL |     VC(isize, Y),\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -74,7 +71,6 @@ LL |     VD{u: isize, x: Z},\n    |                     ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Z`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -93,7 +89,6 @@ LL |     VE([u8]),\n    |        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -112,7 +107,6 @@ LL |     VF{x: str},\n    |           ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -131,7 +125,6 @@ LL |     VG(isize, [f32]),\n    |               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -150,7 +143,6 @@ LL |     VH{u: isize, x: [u32]},\n    |                     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -169,7 +161,6 @@ LL |     VM(dyn Foo),\n    |        ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Foo + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -188,7 +179,6 @@ LL |     VN{x: dyn Bar},\n    |           ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Bar + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -207,7 +197,6 @@ LL |     VO(isize, dyn FooBar),\n    |               ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn FooBar + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -226,7 +215,6 @@ LL |     VP{u: isize, x: dyn BarFoo},\n    |                     ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn BarFoo + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -245,7 +233,6 @@ LL |     VQ(<&'static [i8] as Deref>::Target),\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -264,7 +251,6 @@ LL |     VR{x: <&'static [char] as Deref>::Target},\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[char]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -283,7 +269,6 @@ LL |     VS(isize, <&'static [f64] as Deref>::Target),\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f64]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -302,7 +287,6 @@ LL |     VT{u: isize, x: <&'static [i32] as Deref>::Target},\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -321,7 +305,6 @@ LL |     VI(Path1),\n    |        ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path1`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper1 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path1`\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n@@ -341,7 +324,6 @@ LL |     VJ{x: Path2},\n    |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path2`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper2 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path2`\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n@@ -361,7 +343,6 @@ LL |     VK(isize, Path3),\n    |               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path3`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper3 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path3`\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n@@ -381,7 +362,6 @@ LL |     VL{u: isize, x: Path4},\n    |                     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path4`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper4 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path4`\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size"}, {"sha": "6b54db7148a749cb81b5f298a20de9bb35f53c42", "filename": "src/test/ui/unsized/unsized-fn-param.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     foo11(\"bar\", &\"baz\");\n    |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn std::convert::AsRef<std::path::Path>`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -15,7 +14,6 @@ LL |     foo12(&\"bar\", \"baz\");\n    |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn std::convert::AsRef<std::path::Path>`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -25,7 +23,6 @@ LL |     foo21(\"bar\", &\"baz\");\n    |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn std::convert::AsRef<str>`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -35,7 +32,6 @@ LL |     foo22(&\"bar\", \"baz\");\n    |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn std::convert::AsRef<str>`\n \n error: aborting due to 4 previous errors"}, {"sha": "0d08f70c558bea14242fc39b504e6fd6800b121a", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -10,7 +10,6 @@ LL | impl<X: ?Sized> S5<X> {\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `Y` if it were used through indirection like `&Y` or `Box<Y>`\n   --> $DIR/unsized-inherent-impl-self-type.rs:5:11\n    |"}, {"sha": "d796fcd1a6b64a4b7cd703f7d17084946cd9555b", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -10,7 +10,6 @@ LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/unsized-struct.rs:4:12\n    |\n@@ -31,7 +30,6 @@ LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n    = help: within `Bar<T>`, the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Bar<T>`\n \n error: aborting due to 2 previous errors"}, {"sha": "623c83c4d6f0724e5fd64a00e4990fc5e5f1602b", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -10,7 +10,6 @@ LL | impl<X: ?Sized> T3<X> for S5<X> {\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `Y` if it were used through indirection like `&Y` or `Box<Y>`\n   --> $DIR/unsized-trait-impl-self-type.rs:8:11\n    |"}, {"sha": "1dc9e313d91a6f12d334f052183a674efab68c14", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -10,7 +10,6 @@ LL | impl<X: ?Sized> T2<X> for S4<X> {\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait T2<Z: ?Sized> {"}, {"sha": "d5c79c71a23495ee5fb51afc63f3e1b46d33974c", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -10,7 +10,6 @@ LL | fn f2<X>(x: &X) {\n    |       - required by this bound in `f2`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn f2<X: ?Sized>(x: &X) {\n@@ -28,7 +27,6 @@ LL | fn f4<X: T>(x: &X) {\n    |       - required by this bound in `f4`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn f4<X: T + ?Sized>(x: &X) {\n@@ -46,7 +44,6 @@ LL |     f5(x1);\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `S<X>`\n help: consider relaxing the implicit `Sized` restriction\n    |\n@@ -62,7 +59,6 @@ LL |     f5(&(*x1, 34));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `S<X>`\n    = note: only the last element of a tuple may have a dynamically sized type\n \n@@ -75,7 +71,6 @@ LL |     f5(&(32, *x1));\n    |         ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `({integer}, S<X>)`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `S<X>`\n    = note: required because it appears within the type `({integer}, S<X>)`\n    = note: tuples must have a statically known size to be initialized\n@@ -92,7 +87,6 @@ LL |     f5(&(32, *x1));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `({integer}, S<X>)`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `S<X>`\n    = note: required because it appears within the type `({integer}, S<X>)`\n help: consider relaxing the implicit `Sized` restriction"}, {"sha": "9bdcc0399b833d7ca5864aa419acd26b63aab8b5", "filename": "src/test/ui/unsized5.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized5.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -7,7 +7,6 @@ LL |     f1: X,\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -29,7 +28,6 @@ LL |     g: X,\n    |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -48,7 +46,6 @@ LL |     f: str,\n    |        ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -67,7 +64,6 @@ LL |     f: [u8],\n    |        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -88,7 +84,6 @@ LL |     V1(X, isize),\n    |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -109,7 +104,6 @@ LL |     V2{f1: X, f: isize},\n    |            ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size"}, {"sha": "d566399e5ba0044b25c5b814bde4e9e17bc27cc5", "filename": "src/test/ui/unsized6.stderr", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized6.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -8,7 +8,6 @@ LL |     let y: Y;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -22,7 +21,6 @@ LL |     let _: (isize, (X, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `Z` cannot be known at compilation time\n@@ -35,7 +33,6 @@ LL |     let y: (isize, (Z, usize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Z`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n@@ -47,7 +44,6 @@ LL |     let y: X;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -61,7 +57,6 @@ LL |     let y: (isize, (Y, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n@@ -73,7 +68,6 @@ LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -87,7 +81,6 @@ LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -101,7 +94,6 @@ LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -114,7 +106,6 @@ LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -128,7 +119,6 @@ LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -142,7 +132,6 @@ LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -155,7 +144,6 @@ LL | fn g1<X: ?Sized>(x: X) {}\n    |       this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -168,7 +156,6 @@ LL | fn g2<X: ?Sized + T>(x: X) {}\n    |       this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "868c9ea429e24b3aa59e120f7b5095878b69cd52", "filename": "src/test/ui/unsized7.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized7.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -10,7 +10,6 @@ LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait T1<Z: T + ?Sized> {"}, {"sha": "fedec1909fd3374e38132e42dd4c26d6ea5dabd5", "filename": "src/test/ui/wf/wf-array-elem-sized.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -5,7 +5,6 @@ LL |     foo: [[u8]],\n    |          ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: slice and array elements must have `Sized` type\n \n error: aborting due to previous error"}, {"sha": "938336d3ace76f769d954888bfcb70395c95002c", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "patch": "@@ -22,7 +22,6 @@ LL | struct Vec<T> {\n    |            - required by this bound in `Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::marker::Copy + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/wf-fn-where-clause.rs:16:12\n    |"}]}