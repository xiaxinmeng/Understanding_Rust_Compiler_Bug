{"sha": "2c7f2c105bb52d83409fc29bd181af442b8ba43d", "node_id": "C_kwDOAAsO6NoAKDJjN2YyYzEwNWJiNTJkODM0MDlmYzI5YmQxODFhZjQ0MmI4YmE0M2Q", "commit": {"author": {"name": "Nika Layzell", "email": "nika@thelayzells.com", "date": "2022-07-25T04:43:33Z"}, "committer": {"name": "Nika Layzell", "email": "nika@thelayzells.com", "date": "2022-08-06T19:49:43Z"}, "message": "proc_macro/bridge: send diagnostics over the bridge as a struct\n\nThis removes some RPC when creating and emitting diagnostics, and\nsimplifies the bridge slightly.\n\nAfter this change, there are no remaining methods which take advantage\nof the support for `&mut` references to objects in the store as\narguments, meaning that support for them could technically be removed if\nwe wanted. The only remaining uses of immutable references into the\nstore are `TokenStream` and `SourceFile`.", "tree": {"sha": "fc905f0f61c4c06538fa5eb4bc7cc6f3eec34c11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc905f0f61c4c06538fa5eb4bc7cc6f3eec34c11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c7f2c105bb52d83409fc29bd181af442b8ba43d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7f2c105bb52d83409fc29bd181af442b8ba43d", "html_url": "https://github.com/rust-lang/rust/commit/2c7f2c105bb52d83409fc29bd181af442b8ba43d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c7f2c105bb52d83409fc29bd181af442b8ba43d/comments", "author": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d2cb42a413e51deb50b36794a2e1605381878fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d2cb42a413e51deb50b36794a2e1605381878fc", "html_url": "https://github.com/rust-lang/rust/commit/9d2cb42a413e51deb50b36794a2e1605381878fc"}], "stats": {"total": 59, "additions": 4, "deletions": 55}, "files": [{"sha": "c1f8615aaf2027f1699ea9bc1a7d5b8ab04ea5d5", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server.rs", "status": "modified", "additions": 4, "deletions": 55, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2c7f2c105bb52d83409fc29bd181af442b8ba43d/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7f2c105bb52d83409fc29bd181af442b8ba43d/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs?ref=2c7f2c105bb52d83409fc29bd181af442b8ba43d", "patch": "@@ -37,23 +37,6 @@ pub struct SourceFile {\n type Level = super::proc_macro::Level;\n type LineColumn = super::proc_macro::LineColumn;\n \n-/// A structure representing a diagnostic message and associated children\n-/// messages.\n-#[derive(Clone, Debug)]\n-pub struct Diagnostic {\n-    level: Level,\n-    message: String,\n-    spans: Vec<Span>,\n-    children: Vec<Diagnostic>,\n-}\n-\n-impl Diagnostic {\n-    /// Creates a new diagnostic with the given `level` and `message`.\n-    pub fn new<T: Into<String>>(level: Level, message: T) -> Diagnostic {\n-        Diagnostic { level, message: message.into(), spans: vec![], children: vec![] }\n-    }\n-}\n-\n pub struct FreeFunctions;\n \n #[derive(Default)]\n@@ -65,8 +48,6 @@ impl server::Types for RustAnalyzer {\n     type FreeFunctions = FreeFunctions;\n     type TokenStream = TokenStream;\n     type SourceFile = SourceFile;\n-    type MultiSpan = Vec<Span>;\n-    type Diagnostic = Diagnostic;\n     type Span = Span;\n     type Symbol = Symbol;\n }\n@@ -90,6 +71,10 @@ impl server::FreeFunctions for RustAnalyzer {\n             span: tt::TokenId::unspecified(),\n         })\n     }\n+\n+    fn emit_diagnostic(&mut self, _: bridge::Diagnostic<Self::Span>) {\n+        // FIXME handle diagnostic\n+    }\n }\n \n impl server::TokenStream for RustAnalyzer {\n@@ -282,30 +267,6 @@ impl server::SourceFile for RustAnalyzer {\n     }\n }\n \n-impl server::Diagnostic for RustAnalyzer {\n-    fn new(&mut self, level: Level, msg: &str, spans: Self::MultiSpan) -> Self::Diagnostic {\n-        let mut diag = Diagnostic::new(level, msg);\n-        diag.spans = spans;\n-        diag\n-    }\n-\n-    fn sub(\n-        &mut self,\n-        _diag: &mut Self::Diagnostic,\n-        _level: Level,\n-        _msg: &str,\n-        _spans: Self::MultiSpan,\n-    ) {\n-        // FIXME handle diagnostic\n-        //\n-    }\n-\n-    fn emit(&mut self, _diag: Self::Diagnostic) {\n-        // FIXME handle diagnostic\n-        // diag.emit()\n-    }\n-}\n-\n impl server::Span for RustAnalyzer {\n     fn debug(&mut self, span: Self::Span) -> String {\n         format!(\"{:?}\", span.0)\n@@ -372,18 +333,6 @@ impl server::Span for RustAnalyzer {\n     }\n }\n \n-impl server::MultiSpan for RustAnalyzer {\n-    fn new(&mut self) -> Self::MultiSpan {\n-        // FIXME handle span\n-        vec![]\n-    }\n-\n-    fn push(&mut self, other: &mut Self::MultiSpan, span: Self::Span) {\n-        //TODP\n-        other.push(span)\n-    }\n-}\n-\n impl server::Symbol for RustAnalyzer {\n     fn normalize_and_validate_ident(&mut self, string: &str) -> Result<Self::Symbol, ()> {\n         // FIXME: nfc-normalize and validate idents"}]}