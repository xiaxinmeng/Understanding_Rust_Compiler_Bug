{"sha": "d5985bc9ecbdc792d514cf531107d33f85644fdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1OTg1YmM5ZWNiZGM3OTJkNTE0Y2Y1MzExMDdkMzNmODU2NDRmZGM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-04-04T20:05:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-04-05T15:10:18Z"}, "message": "rustc: Start implementing compat with LLVM 9\n\nThis commit doesn't actually migrate to LLVM 9, but it brings our own\nC++ bindings in line with LLVM 9 and able to compile against tip of\ntree. The changes made were:\n\n* The `MainSubprogram` flag for debuginfo moved between flag types.\n* Iteration of archive members was tweaked slightly and we have to\n  construct the two iterators before constructing the returned\n  `RustArchiveIterator` value.\n* The `getOrInsertFunction` binding now returns a wrapper which we use\n  `getCallee()` on to get the value we're interested in.", "tree": {"sha": "89cb51166488b16ff7d5ee64f1c3fb3087b20559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89cb51166488b16ff7d5ee64f1c3fb3087b20559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5985bc9ecbdc792d514cf531107d33f85644fdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5985bc9ecbdc792d514cf531107d33f85644fdc", "html_url": "https://github.com/rust-lang/rust/commit/d5985bc9ecbdc792d514cf531107d33f85644fdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5985bc9ecbdc792d514cf531107d33f85644fdc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52980d0fb39134a26f73b39b384407e010fc3af5", "url": "https://api.github.com/repos/rust-lang/rust/commits/52980d0fb39134a26f73b39b384407e010fc3af5", "html_url": "https://github.com/rust-lang/rust/commit/52980d0fb39134a26f73b39b384407e010fc3af5"}], "stats": {"total": 72, "additions": 45, "deletions": 27}, "files": [{"sha": "57e4ac07d5e28739521be205713546bd1dd30f56", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d5985bc9ecbdc792d514cf531107d33f85644fdc/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5985bc9ecbdc792d514cf531107d33f85644fdc/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=d5985bc9ecbdc792d514cf531107d33f85644fdc", "patch": "@@ -296,12 +296,6 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         let mut flags = DIFlags::FlagPrototyped;\n \n-        if let Some((id, _)) = self.tcx.entry_fn(LOCAL_CRATE) {\n-            if id == def_id {\n-                flags |= DIFlags::FlagMainSubprogram;\n-            }\n-        }\n-\n         if self.layout_of(sig.output()).abi.is_uninhabited() {\n             flags |= DIFlags::FlagNoReturn;\n         }\n@@ -313,6 +307,11 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         if self.sess().opts.optimize != config::OptLevel::No {\n             spflags |= DISPFlags::SPFlagOptimized;\n         }\n+        if let Some((id, _)) = self.tcx.entry_fn(LOCAL_CRATE) {\n+            if id == def_id {\n+                spflags |= DISPFlags::SPFlagMainSubprogram;\n+            }\n+        }\n \n         let fn_metadata = unsafe {\n             llvm::LLVMRustDIBuilderCreateFunction("}, {"sha": "72184cb1e107e8926db8de8623266d7a74230e77", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5985bc9ecbdc792d514cf531107d33f85644fdc/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5985bc9ecbdc792d514cf531107d33f85644fdc/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=d5985bc9ecbdc792d514cf531107d33f85644fdc", "patch": "@@ -588,7 +588,6 @@ pub mod debuginfo {\n             const FlagIntroducedVirtual   = (1 << 18);\n             const FlagBitField            = (1 << 19);\n             const FlagNoReturn            = (1 << 20);\n-            const FlagMainSubprogram      = (1 << 21);\n         }\n     }\n \n@@ -603,6 +602,7 @@ pub mod debuginfo {\n             const SPFlagLocalToUnit       = (1 << 2);\n             const SPFlagDefinition        = (1 << 3);\n             const SPFlagOptimized         = (1 << 4);\n+            const SPFlagMainSubprogram    = (1 << 5);\n         }\n     }\n "}, {"sha": "dd0111d3f2c83ea92285818a8bed609977810ffd", "filename": "src/rustllvm/ArchiveWrapper.cpp", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d5985bc9ecbdc792d514cf531107d33f85644fdc/src%2Frustllvm%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d5985bc9ecbdc792d514cf531107d33f85644fdc/src%2Frustllvm%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FArchiveWrapper.cpp?ref=d5985bc9ecbdc792d514cf531107d33f85644fdc", "patch": "@@ -24,9 +24,14 @@ struct RustArchiveIterator {\n   bool First;\n   Archive::child_iterator Cur;\n   Archive::child_iterator End;\n-  Error Err;\n-\n-  RustArchiveIterator() : First(true), Err(Error::success()) {}\n+  std::unique_ptr<Error> Err;\n+\n+  RustArchiveIterator(Archive::child_iterator Cur, Archive::child_iterator End,\n+      std::unique_ptr<Error> Err)\n+    : First(true),\n+      Cur(Cur),\n+      End(End),\n+      Err(std::move(Err)) {}\n };\n \n enum class LLVMRustArchiveKind {\n@@ -84,15 +89,14 @@ extern \"C\" void LLVMRustDestroyArchive(LLVMRustArchiveRef RustArchive) {\n extern \"C\" LLVMRustArchiveIteratorRef\n LLVMRustArchiveIteratorNew(LLVMRustArchiveRef RustArchive) {\n   Archive *Archive = RustArchive->getBinary();\n-  RustArchiveIterator *RAI = new RustArchiveIterator();\n-  RAI->Cur = Archive->child_begin(RAI->Err);\n-  if (RAI->Err) {\n-    LLVMRustSetLastError(toString(std::move(RAI->Err)).c_str());\n-    delete RAI;\n+  std::unique_ptr<Error> Err = llvm::make_unique<Error>(Error::success());\n+  auto Cur = Archive->child_begin(*Err);\n+  if (*Err) {\n+    LLVMRustSetLastError(toString(std::move(*Err)).c_str());\n     return nullptr;\n   }\n-  RAI->End = Archive->child_end();\n-  return RAI;\n+  auto End = Archive->child_end();\n+  return new RustArchiveIterator(Cur, End, std::move(Err));\n }\n \n extern \"C\" LLVMRustArchiveChildConstRef\n@@ -108,8 +112,8 @@ LLVMRustArchiveIteratorNext(LLVMRustArchiveIteratorRef RAI) {\n   // but instead advance it *before* fetching the child in all later calls.\n   if (!RAI->First) {\n     ++RAI->Cur;\n-    if (RAI->Err) {\n-      LLVMRustSetLastError(toString(std::move(RAI->Err)).c_str());\n+    if (*RAI->Err) {\n+      LLVMRustSetLastError(toString(std::move(*RAI->Err)).c_str());\n       return nullptr;\n     }\n   } else {"}, {"sha": "437e2d482efd6bf74f5103ac089583efed02bc7a", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d5985bc9ecbdc792d514cf531107d33f85644fdc/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d5985bc9ecbdc792d514cf531107d33f85644fdc/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=d5985bc9ecbdc792d514cf531107d33f85644fdc", "patch": "@@ -117,7 +117,11 @@ extern \"C\" LLVMValueRef LLVMRustGetOrInsertFunction(LLVMModuleRef M,\n                                                     const char *Name,\n                                                     LLVMTypeRef FunctionTy) {\n   return wrap(\n-      unwrap(M)->getOrInsertFunction(Name, unwrap<FunctionType>(FunctionTy)));\n+      unwrap(M)->getOrInsertFunction(Name, unwrap<FunctionType>(FunctionTy))\n+#if LLVM_VERSION_GE(9, 0)\n+      .getCallee()\n+#endif\n+      );\n }\n \n extern \"C\" LLVMValueRef\n@@ -417,7 +421,6 @@ enum class LLVMRustDIFlags : uint32_t {\n   FlagIntroducedVirtual = (1 << 18),\n   FlagBitField = (1 << 19),\n   FlagNoReturn = (1 << 20),\n-  FlagMainSubprogram = (1 << 21),\n   // Do not add values that are not supported by the minimum LLVM\n   // version we support! see llvm/include/llvm/IR/DebugInfoFlags.def\n };\n@@ -508,9 +511,6 @@ static DINode::DIFlags fromRust(LLVMRustDIFlags Flags) {\n   if (isSet(Flags & LLVMRustDIFlags::FlagNoReturn)) {\n     Result |= DINode::DIFlags::FlagNoReturn;\n   }\n-  if (isSet(Flags & LLVMRustDIFlags::FlagMainSubprogram)) {\n-    Result |= DINode::DIFlags::FlagMainSubprogram;\n-  }\n \n   return Result;\n }\n@@ -525,6 +525,7 @@ enum class LLVMRustDISPFlags : uint32_t {\n   SPFlagLocalToUnit = (1 << 2),\n   SPFlagDefinition = (1 << 3),\n   SPFlagOptimized = (1 << 4),\n+  SPFlagMainSubprogram = (1 << 5),\n   // Do not add values that are not supported by the minimum LLVM\n   // version we support! see llvm/include/llvm/IR/DebugInfoFlags.def\n   // (In LLVM < 8, createFunction supported these as separate bool arguments.)\n@@ -575,6 +576,11 @@ static DISubprogram::DISPFlags fromRust(LLVMRustDISPFlags SPFlags) {\n   if (isSet(SPFlags & LLVMRustDISPFlags::SPFlagOptimized)) {\n     Result |= DISubprogram::DISPFlags::SPFlagOptimized;\n   }\n+#if LLVM_VERSION_GE(9, 0)\n+  if (isSet(SPFlags & LLVMRustDISPFlags::SPFlagMainSubprogram)) {\n+    Result |= DISubprogram::DISPFlags::SPFlagMainSubprogram;\n+  }\n+#endif\n \n   return Result;\n }\n@@ -671,18 +677,27 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFunction(\n   DITemplateParameterArray TParams =\n       DITemplateParameterArray(unwrap<MDTuple>(TParam));\n #if LLVM_VERSION_GE(8, 0)\n+  DISubprogram::DISPFlags llvmSPFlags = fromRust(SPFlags);\n+  DINode::DIFlags llvmFlags = fromRust(Flags);\n+#if LLVM_VERSION_LT(9, 0)\n+  if (isSet(SPFlags & LLVMRustDISPFlags::SPFlagMainSubprogram))\n+    llvmFlags |= DINode::DIFlags::FlagMainSubprogram;\n+#endif\n   DISubprogram *Sub = Builder->createFunction(\n       unwrapDI<DIScope>(Scope), Name, LinkageName, unwrapDI<DIFile>(File),\n-      LineNo, unwrapDI<DISubroutineType>(Ty), ScopeLine, fromRust(Flags),\n-      fromRust(SPFlags), TParams, unwrapDIPtr<DISubprogram>(Decl));\n+      LineNo, unwrapDI<DISubroutineType>(Ty), ScopeLine, llvmFlags,\n+      llvmSPFlags, TParams, unwrapDIPtr<DISubprogram>(Decl));\n #else\n   bool IsLocalToUnit = isSet(SPFlags & LLVMRustDISPFlags::SPFlagLocalToUnit);\n   bool IsDefinition = isSet(SPFlags & LLVMRustDISPFlags::SPFlagDefinition);\n   bool IsOptimized = isSet(SPFlags & LLVMRustDISPFlags::SPFlagOptimized);\n+  DINode::DIFlags llvmFlags = fromRust(Flags);\n+  if (isSet(SPFlags & LLVMRustDISPFlags::SPFlagMainSubprogram))\n+    llvmFlags |= DINode::DIFlags::FlagMainSubprogram;\n   DISubprogram *Sub = Builder->createFunction(\n       unwrapDI<DIScope>(Scope), Name, LinkageName, unwrapDI<DIFile>(File),\n       LineNo, unwrapDI<DISubroutineType>(Ty), IsLocalToUnit, IsDefinition,\n-      ScopeLine, fromRust(Flags), IsOptimized, TParams,\n+      ScopeLine, llvmFlags, IsOptimized, TParams,\n       unwrapDIPtr<DISubprogram>(Decl));\n #endif\n   unwrap<Function>(Fn)->setSubprogram(Sub);"}]}