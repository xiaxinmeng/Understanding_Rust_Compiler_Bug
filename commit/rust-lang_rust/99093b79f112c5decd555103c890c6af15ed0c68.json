{"sha": "99093b79f112c5decd555103c890c6af15ed0c68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MDkzYjc5ZjExMmM1ZGVjZDU1NTEwM2M4OTBjNmFmMTVlZDBjNjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-16T19:06:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-16T19:06:52Z"}, "message": "Auto merge of #29580 - alexbool:smart-pointer-conversion, r=alexcrichton\n\nSometimes when writing generic code you want to abstract over\nowning/pointer type so that calling code isn't restricted by one\nconcrete owning/pointer type. This commit makes possible such code:\n```rust\nfn i_will_work_with_arc<T: Into<Arc<MyTy>>>(t: T) {\n    let the_arc = t.into();\n    // Do something\n}\n\ni_will_work_with_arc(MyTy::new());\n\ni_will_work_with_arc(Box::new(MyTy::new()));\n\nlet arc_that_i_already_have = Arc::new(MyTy::new());\ni_will_work_with_arc(arc_that_i_already_have);\n```\n\nPlease note that this patch doesn't work with DSTs.\nAlso to mention, I made those impls stable, and I don't know whether they should be actually stable from the beginning. Please tell me if this should be feature-gated.", "tree": {"sha": "e45f6f59025ce39c6192da138fe9a40c62f342f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e45f6f59025ce39c6192da138fe9a40c62f342f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99093b79f112c5decd555103c890c6af15ed0c68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99093b79f112c5decd555103c890c6af15ed0c68", "html_url": "https://github.com/rust-lang/rust/commit/99093b79f112c5decd555103c890c6af15ed0c68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99093b79f112c5decd555103c890c6af15ed0c68/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3042fedb4f50640e2c9a02297c5ce9a1f3ffaa5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3042fedb4f50640e2c9a02297c5ce9a1f3ffaa5a", "html_url": "https://github.com/rust-lang/rust/commit/3042fedb4f50640e2c9a02297c5ce9a1f3ffaa5a"}, {"sha": "67c07d445036e8db7782f3c661a8eb4a70fbe417", "url": "https://api.github.com/repos/rust-lang/rust/commits/67c07d445036e8db7782f3c661a8eb4a70fbe417", "html_url": "https://github.com/rust-lang/rust/commit/67c07d445036e8db7782f3c661a8eb4a70fbe417"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "8205e13205ff8e421454cefd5a1767a12f2b5532", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99093b79f112c5decd555103c890c6af15ed0c68/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99093b79f112c5decd555103c890c6af15ed0c68/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=99093b79f112c5decd555103c890c6af15ed0c68", "patch": "@@ -87,6 +87,7 @@ use core::ptr::{self, Shared};\n use core::marker::Unsize;\n use core::hash::{Hash, Hasher};\n use core::{usize, isize};\n+use core::convert::From;\n use heap::deallocate;\n \n const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n@@ -896,6 +897,13 @@ impl<T: ?Sized + Hash> Hash for Arc<T> {\n     }\n }\n \n+#[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]\n+impl<T> From<T> for Arc<T> {\n+    fn from(t: T) -> Self {\n+        Arc::new(t)\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use std::clone::Clone;\n@@ -910,6 +918,7 @@ mod tests {\n     use std::vec::Vec;\n     use super::{Arc, Weak};\n     use std::sync::Mutex;\n+    use std::convert::From;\n \n     struct Canary(*mut atomic::AtomicUsize);\n \n@@ -1139,6 +1148,13 @@ mod tests {\n         drop(x);\n         assert!(y.upgrade().is_none());\n     }\n+\n+    #[test]\n+    fn test_from_owned() {\n+        let foo = 123;\n+        let foo_arc = Arc::from(foo);\n+        assert!(123 == *foo_arc);\n+    }\n }\n \n impl<T: ?Sized> borrow::Borrow<T> for Arc<T> {"}, {"sha": "b5c6cdff119d66e8b5247d502c53fc236c130253", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99093b79f112c5decd555103c890c6af15ed0c68/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99093b79f112c5decd555103c890c6af15ed0c68/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=99093b79f112c5decd555103c890c6af15ed0c68", "patch": "@@ -67,6 +67,7 @@ use core::ops::{CoerceUnsized, Deref, DerefMut};\n use core::ops::{Placer, Boxed, Place, InPlace, BoxPlace};\n use core::ptr::{self, Unique};\n use core::raw::TraitObject;\n+use core::convert::From;\n \n /// A value that represents the heap. This is the default place that the `box`\n /// keyword allocates into when no place is supplied.\n@@ -373,6 +374,13 @@ impl<T: ?Sized + Hash> Hash for Box<T> {\n     }\n }\n \n+#[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]\n+impl<T> From<T> for Box<T> {\n+    fn from(t: T) -> Self {\n+        Box::new(t)\n+    }\n+}\n+\n impl Box<Any> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "88db3cfe4b612a086aae43a62dce90a62904723e", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99093b79f112c5decd555103c890c6af15ed0c68/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99093b79f112c5decd555103c890c6af15ed0c68/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=99093b79f112c5decd555103c890c6af15ed0c68", "patch": "@@ -169,6 +169,7 @@ use core::ops::Deref;\n #[cfg(not(stage0))]\n use core::ops::CoerceUnsized;\n use core::ptr::{self, Shared};\n+use core::convert::From;\n \n use heap::deallocate;\n \n@@ -701,6 +702,13 @@ impl<T> fmt::Pointer for Rc<T> {\n     }\n }\n \n+#[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]\n+impl<T> From<T> for Rc<T> {\n+    fn from(t: T) -> Self {\n+        Rc::new(t)\n+    }\n+}\n+\n /// A weak version of `Rc<T>`.\n ///\n /// Weak references do not count when determining if the inner value should be\n@@ -906,6 +914,7 @@ mod tests {\n     use std::result::Result::{Err, Ok};\n     use std::mem::drop;\n     use std::clone::Clone;\n+    use std::convert::From;\n \n     #[test]\n     fn test_clone() {\n@@ -1108,6 +1117,13 @@ mod tests {\n         let foo: Rc<[i32]> = Rc::new([1, 2, 3]);\n         assert_eq!(foo, foo.clone());\n     }\n+\n+    #[test]\n+    fn test_from_owned() {\n+        let foo = 123;\n+        let foo_rc = Rc::from(foo);\n+        assert!(123 == *foo_rc);\n+    }\n }\n \n impl<T: ?Sized> borrow::Borrow<T> for Rc<T> {"}]}