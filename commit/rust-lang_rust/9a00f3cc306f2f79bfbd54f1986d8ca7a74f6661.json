{"sha": "9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMDBmM2NjMzA2ZjJmNzliZmJkNTRmMTk4NmQ4Y2E3YTc0ZjY2NjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-19T04:20:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-19T04:20:56Z"}, "message": "Auto merge of #44026 - QuietMisdreavus:trimmed-std, r=steveklabnik\n\nhide internal types/traits from std docs via new #[doc(masked)] attribute\n\nFixes #43701 (hopefully for good this time)\n\nThis PR introduces a new parameter to the `#[doc]` attribute that rustdoc looks for on `extern crate` statements. When it sees `#[doc(masked)]` on such a statement, it hides traits and types from that crate from appearing in either the \"Trait Implementations\" section of many type pages, or the \"Implementors\" section of trait pages. This is then applied to the `libc`/`rand`/`compiler_builtins` imports in libstd to prevent those crates from creating broken links in the std docs.\n\nLike in #43348, this also introduces a feature gate, `doc_masked`, that controls the use of this parameter.\n\nTo view the std docs generated with this change, head to https://tonberry.quietmisdreavus.net/std-43701/std/index.html.", "tree": {"sha": "f1ce101bf0f70075ec37e492104a6a4ed62e7baa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1ce101bf0f70075ec37e492104a6a4ed62e7baa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661", "html_url": "https://github.com/rust-lang/rust/commit/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06bb0e01be7e6774caff3dccf7e60a8f321cc586", "url": "https://api.github.com/repos/rust-lang/rust/commits/06bb0e01be7e6774caff3dccf7e60a8f321cc586", "html_url": "https://github.com/rust-lang/rust/commit/06bb0e01be7e6774caff3dccf7e60a8f321cc586"}, {"sha": "64f61113ebdc32ba5f9898fe191ca84fba6eeb94", "url": "https://api.github.com/repos/rust-lang/rust/commits/64f61113ebdc32ba5f9898fe191ca84fba6eeb94", "html_url": "https://github.com/rust-lang/rust/commit/64f61113ebdc32ba5f9898fe191ca84fba6eeb94"}], "stats": {"total": 129, "additions": 111, "deletions": 18}, "files": [{"sha": "609939bfc22f6afac1925a2c6a5f7b4e45b46a15", "filename": "src/doc/unstable-book/src/language-features/doc-masked.md", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-masked.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-masked.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-masked.md?ref=9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661", "patch": "@@ -0,0 +1,24 @@\n+# `doc_masked`\n+\n+The tracking issue for this feature is: [#44027]\n+\n+-----\n+\n+The `doc_masked` feature allows a crate to exclude types from a given crate from appearing in lists\n+of trait implementations. The specifics of the feature are as follows:\n+\n+1. When rustdoc encounters an `extern crate` statement annotated with a `#[doc(masked)]` attribute,\n+   it marks the crate as being masked.\n+\n+2. When listing traits a given type implements, rustdoc ensures that traits from masked crates are\n+   not emitted into the documentation.\n+\n+3. When listing types that implement a given trait, rustdoc ensures that types from masked crates\n+   are not emitted into the documentation.\n+\n+This feature was introduced in PR [#44026] to ensure that compiler-internal and\n+implementation-specific types and traits were not included in the standard library's documentation.\n+Such types would introduce broken links into the documentation.\n+\n+[#44026]: https://github.com/rust-lang/rust/pull/44026\n+[#44027]: https://github.com/rust-lang/rust/pull/44027"}, {"sha": "095eb7797d4578f8d434fa4663a9642a04f7d71d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661", "patch": "@@ -120,6 +120,7 @@ pub struct Crate {\n     // These are later on moved into `CACHEKEY`, leaving the map empty.\n     // Only here so that they can be filtered through the rustdoc passes.\n     pub external_traits: FxHashMap<DefId, Trait>,\n+    pub masked_crates: FxHashSet<CrateNum>,\n }\n \n impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n@@ -144,6 +145,18 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n         // Clean the crate, translating the entire libsyntax AST to one that is\n         // understood by rustdoc.\n         let mut module = self.module.clean(cx);\n+        let mut masked_crates = FxHashSet();\n+\n+        match module.inner {\n+            ModuleItem(ref module) => {\n+                for it in &module.items {\n+                    if it.is_extern_crate() && it.attrs.has_doc_masked() {\n+                        masked_crates.insert(it.def_id.krate);\n+                    }\n+                }\n+            }\n+            _ => unreachable!(),\n+        }\n \n         let ExternalCrate { name, src, primitives, .. } = LOCAL_CRATE.clean(cx);\n         {\n@@ -176,6 +189,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n             primitives,\n             access_levels: Arc::new(mem::replace(&mut access_levels, Default::default())),\n             external_traits: mem::replace(&mut external_traits, Default::default()),\n+            masked_crates,\n         }\n     }\n }\n@@ -329,6 +343,9 @@ impl Item {\n     pub fn is_import(&self) -> bool {\n         self.type_() == ItemType::Import\n     }\n+    pub fn is_extern_crate(&self) -> bool {\n+        self.type_() == ItemType::ExternCrate\n+    }\n \n     pub fn is_stripped(&self) -> bool {\n         match self.inner { StrippedItem(..) => true, _ => false }\n@@ -574,6 +591,20 @@ impl Attributes {\n         None\n     }\n \n+    pub fn has_doc_masked(&self) -> bool {\n+        for attr in &self.other_attrs {\n+            if !attr.check_name(\"doc\") { continue; }\n+\n+            if let Some(items) = attr.meta_item_list() {\n+                if items.iter().filter_map(|i| i.meta_item()).any(|it| it.check_name(\"masked\")) {\n+                    return true;\n+                }\n+            }\n+        }\n+\n+        false\n+    }\n+\n     pub fn from_ast(diagnostic: &::errors::Handler, attrs: &[ast::Attribute]) -> Attributes {\n         let mut doc_strings = vec![];\n         let mut sp = None;"}, {"sha": "bac847590e2db158d6951b20c281c9a17c06699d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661", "patch": "@@ -266,6 +266,7 @@ pub struct Cache {\n     deref_trait_did: Option<DefId>,\n     deref_mut_trait_did: Option<DefId>,\n     owned_box_did: Option<DefId>,\n+    masked_crates: FxHashSet<CrateNum>,\n \n     // In rare case where a structure is defined in one module but implemented\n     // in another, if the implementing module is parsed before defining module,\n@@ -538,6 +539,7 @@ pub fn run(mut krate: clean::Crate,\n         deref_trait_did,\n         deref_mut_trait_did,\n         owned_box_did,\n+        masked_crates: mem::replace(&mut krate.masked_crates, FxHashSet()),\n         typarams: external_typarams,\n     };\n \n@@ -1114,12 +1116,16 @@ impl DocFolder for Cache {\n \n         // Collect all the implementors of traits.\n         if let clean::ImplItem(ref i) = item.inner {\n-            if let Some(did) = i.trait_.def_id() {\n-                self.implementors.entry(did).or_insert(vec![]).push(Implementor {\n-                    def_id: item.def_id,\n-                    stability: item.stability.clone(),\n-                    impl_: i.clone(),\n-                });\n+            if !self.masked_crates.contains(&item.def_id.krate) {\n+                if let Some(did) = i.trait_.def_id() {\n+                    if i.for_.def_id().map_or(true, |d| !self.masked_crates.contains(&d.krate)) {\n+                        self.implementors.entry(did).or_insert(vec![]).push(Implementor {\n+                            def_id: item.def_id,\n+                            stability: item.stability.clone(),\n+                            impl_: i.clone(),\n+                        });\n+                    }\n+                }\n             }\n         }\n \n@@ -1281,18 +1287,24 @@ impl DocFolder for Cache {\n                 // primitive rather than always to a struct/enum.\n                 // Note: matching twice to restrict the lifetime of the `i` borrow.\n                 let did = if let clean::Item { inner: clean::ImplItem(ref i), .. } = item {\n-                    match i.for_ {\n-                        clean::ResolvedPath { did, .. } |\n-                        clean::BorrowedRef {\n-                            type_: box clean::ResolvedPath { did, .. }, ..\n-                        } => {\n-                            Some(did)\n-                        }\n-                        ref t => {\n-                            t.primitive_type().and_then(|t| {\n-                                self.primitive_locations.get(&t).cloned()\n-                            })\n+                    let masked_trait = i.trait_.def_id().map_or(false,\n+                        |d| self.masked_crates.contains(&d.krate));\n+                    if !masked_trait {\n+                        match i.for_ {\n+                            clean::ResolvedPath { did, .. } |\n+                            clean::BorrowedRef {\n+                                type_: box clean::ResolvedPath { did, .. }, ..\n+                            } => {\n+                                Some(did)\n+                            }\n+                            ref t => {\n+                                t.primitive_type().and_then(|t| {\n+                                    self.primitive_locations.get(&t).cloned()\n+                                })\n+                            }\n                         }\n+                    } else {\n+                        None\n                     }\n                 } else {\n                     unreachable!()"}, {"sha": "9fc7e2c01aa196fda52b851e2ce7a0ab310b9ee9", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661", "patch": "@@ -314,6 +314,7 @@\n #![feature(unwind_attributes)]\n #![feature(vec_push_all)]\n #![feature(doc_cfg)]\n+#![feature(doc_masked)]\n #![cfg_attr(test, feature(update_panic_count))]\n \n #![cfg_attr(not(stage0), feature(const_max_value))]\n@@ -359,19 +360,24 @@ use prelude::v1::*;\n                  debug_assert_ne, unreachable, unimplemented, write, writeln, try)]\n extern crate core as __core;\n \n-#[allow(deprecated)] extern crate rand as core_rand;\n+#[doc(masked)]\n+#[allow(deprecated)]\n+extern crate rand as core_rand;\n #[macro_use]\n #[macro_reexport(vec, format)]\n extern crate alloc;\n extern crate alloc_system;\n extern crate std_unicode;\n+#[doc(masked)]\n extern crate libc;\n \n // We always need an unwinder currently for backtraces\n+#[doc(masked)]\n #[allow(unused_extern_crates)]\n extern crate unwind;\n \n // compiler-rt intrinsics\n+#[doc(masked)]\n extern crate compiler_builtins;\n \n // During testing, this crate is not actually the \"real\" std library, but rather"}, {"sha": "ae0dd872963aae2aa0e2269bc763191de605991a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661", "patch": "@@ -377,6 +377,8 @@ declare_features! (\n \n     // #[doc(cfg(...))]\n     (active, doc_cfg, \"1.21.0\", Some(43781)),\n+    // #[doc(masked)]\n+    (active, doc_masked, \"1.21.0\", None),\n \n     // allow `#[must_use]` on functions (RFC 1940)\n     (active, fn_must_use, \"1.21.0\", Some(43302)),\n@@ -1237,6 +1239,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(&self, doc_cfg, attr.span,\n                         \"#[doc(cfg(...))] is experimental\"\n                     );\n+                } else if content.iter().any(|c| c.check_name(\"masked\")) {\n+                    gate_feature_post!(&self, doc_masked, attr.span,\n+                        \"#[doc(masked)] is experimental\"\n+                    );\n                 }\n             }\n         }"}, {"sha": "bb5be9d69710f947844ab4118e92a0e0176bdf32", "filename": "src/test/compile-fail/feature-gate-doc_masked.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661/src%2Ftest%2Fcompile-fail%2Ffeature-gate-doc_masked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661/src%2Ftest%2Fcompile-fail%2Ffeature-gate-doc_masked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-doc_masked.rs?ref=9a00f3cc306f2f79bfbd54f1986d8ca7a74f6661", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[doc(masked)] //~ ERROR: #[doc(masked)] is experimental\n+extern crate std as realstd;\n+\n+fn main() {}"}]}