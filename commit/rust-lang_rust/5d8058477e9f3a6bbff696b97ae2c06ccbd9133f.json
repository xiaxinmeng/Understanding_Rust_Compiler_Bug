{"sha": "5d8058477e9f3a6bbff696b97ae2c06ccbd9133f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkODA1ODQ3N2U5ZjNhNmJiZmY2OTZiOTdhZTJjMDZjY2JkOTEzM2Y=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2019-02-12T07:00:01Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2019-02-12T07:00:01Z"}, "message": "Use less explicit shifting in std::net::ip\n\nNow that we have {to|from}_be_bytes the code can be simpler.\n\n(Inspired by PR #57740)", "tree": {"sha": "eb70aba0884f3979c0daae6c815edfccbf0dece5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb70aba0884f3979c0daae6c815edfccbf0dece5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d8058477e9f3a6bbff696b97ae2c06ccbd9133f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8058477e9f3a6bbff696b97ae2c06ccbd9133f", "html_url": "https://github.com/rust-lang/rust/commit/5d8058477e9f3a6bbff696b97ae2c06ccbd9133f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d8058477e9f3a6bbff696b97ae2c06ccbd9133f/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ca0b9f6335db824e44629be1cafb6e3fcc4628", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ca0b9f6335db824e44629be1cafb6e3fcc4628", "html_url": "https://github.com/rust-lang/rust/commit/16ca0b9f6335db824e44629be1cafb6e3fcc4628"}], "stats": {"total": 83, "additions": 58, "deletions": 25}, "files": [{"sha": "df92462bd0804815b1885b0876a689f105815495", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 58, "deletions": 25, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/5d8058477e9f3a6bbff696b97ae2c06ccbd9133f/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8058477e9f3a6bbff696b97ae2c06ccbd9133f/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=5d8058477e9f3a6bbff696b97ae2c06ccbd9133f", "patch": "@@ -329,6 +329,8 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n+        // FIXME: should just be u32::from_be_bytes([a, b, c, d]),\n+        // once that method is no longer rustc_const_unstable\n         Ipv4Addr {\n             inner: c::in_addr {\n                 s_addr: u32::to_be(\n@@ -392,6 +394,7 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn octets(&self) -> [u8; 4] {\n+        // This returns the order we want because s_addr is stored in big-endian.\n         self.inner.s_addr.to_ne_bytes()\n     }\n \n@@ -618,9 +621,13 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv6_compatible(&self) -> Ipv6Addr {\n-        Ipv6Addr::new(0, 0, 0, 0, 0, 0,\n-                      ((self.octets()[0] as u16) << 8) | self.octets()[1] as u16,\n-                      ((self.octets()[2] as u16) << 8) | self.octets()[3] as u16)\n+        let octets = self.octets();\n+        Ipv6Addr::from([\n+            0, 0, 0, 0,\n+            0, 0, 0, 0,\n+            0, 0, 0, 0,\n+            octets[0], octets[1], octets[2], octets[3],\n+        ])\n     }\n \n     /// Converts this address to an IPv4-mapped [IPv6 address].\n@@ -639,9 +646,13 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv6_mapped(&self) -> Ipv6Addr {\n-        Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff,\n-                      ((self.octets()[0] as u16) << 8) | self.octets()[1] as u16,\n-                      ((self.octets()[2] as u16) << 8) | self.octets()[3] as u16)\n+        let octets = self.octets();\n+        Ipv6Addr::from([\n+            0, 0, 0, 0,\n+            0, 0, 0, 0,\n+            0, 0, 0xFF, 0xFF,\n+            octets[0], octets[1], octets[2], octets[3],\n+        ])\n     }\n }\n \n@@ -784,7 +795,7 @@ impl From<Ipv4Addr> for u32 {\n     /// ```\n     fn from(ip: Ipv4Addr) -> u32 {\n         let ip = ip.octets();\n-        ((ip[0] as u32) << 24) + ((ip[1] as u32) << 16) + ((ip[2] as u32) << 8) + (ip[3] as u32)\n+        u32::from_be_bytes(ip)\n     }\n }\n \n@@ -801,7 +812,7 @@ impl From<u32> for Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(13, 12, 11, 10), addr);\n     /// ```\n     fn from(ip: u32) -> Ipv4Addr {\n-        Ipv4Addr::new((ip >> 24) as u8, (ip >> 16) as u8, (ip >> 8) as u8, ip as u8)\n+        Ipv4Addr::from(ip.to_be_bytes())\n     }\n }\n \n@@ -909,14 +920,14 @@ impl Ipv6Addr {\n     pub fn segments(&self) -> [u16; 8] {\n         let arr = &self.inner.s6_addr;\n         [\n-            (arr[0] as u16) << 8 | (arr[1] as u16),\n-            (arr[2] as u16) << 8 | (arr[3] as u16),\n-            (arr[4] as u16) << 8 | (arr[5] as u16),\n-            (arr[6] as u16) << 8 | (arr[7] as u16),\n-            (arr[8] as u16) << 8 | (arr[9] as u16),\n-            (arr[10] as u16) << 8 | (arr[11] as u16),\n-            (arr[12] as u16) << 8 | (arr[13] as u16),\n-            (arr[14] as u16) << 8 | (arr[15] as u16),\n+            u16::from_be_bytes([arr[0], arr[1]]),\n+            u16::from_be_bytes([arr[2], arr[3]]),\n+            u16::from_be_bytes([arr[4], arr[5]]),\n+            u16::from_be_bytes([arr[6], arr[7]]),\n+            u16::from_be_bytes([arr[8], arr[9]]),\n+            u16::from_be_bytes([arr[10], arr[11]]),\n+            u16::from_be_bytes([arr[12], arr[13]]),\n+            u16::from_be_bytes([arr[14], arr[15]]),\n         ]\n     }\n \n@@ -1382,21 +1393,43 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n \n #[stable(feature = \"i128\", since = \"1.26.0\")]\n impl From<Ipv6Addr> for u128 {\n+    /// Convert an `Ipv6Addr` into a host byte order `u128`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// let addr = Ipv6Addr::new(\n+    ///     0x1020, 0x3040, 0x5060, 0x7080,\n+    ///     0x90A0, 0xB0C0, 0xD0E0, 0xF00D,\n+    /// );\n+    /// assert_eq!(0x102030405060708090A0B0C0D0E0F00D_u128, u128::from(addr));\n+    /// ```\n     fn from(ip: Ipv6Addr) -> u128 {\n-        let ip = ip.segments();\n-        ((ip[0] as u128) << 112) + ((ip[1] as u128) << 96) + ((ip[2] as u128) << 80) +\n-            ((ip[3] as u128) << 64) + ((ip[4] as u128) << 48) + ((ip[5] as u128) << 32) +\n-            ((ip[6] as u128) << 16) + (ip[7] as u128)\n+        let ip = ip.octets();\n+        u128::from_be_bytes(ip)\n     }\n }\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n impl From<u128> for Ipv6Addr {\n+    /// Convert a host byte order `u128` into an `Ipv6Addr`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// let addr = Ipv6Addr::from(0x102030405060708090A0B0C0D0E0F00D_u128);\n+    /// assert_eq!(\n+    ///     Ipv6Addr::new(\n+    ///         0x1020, 0x3040, 0x5060, 0x7080,\n+    ///         0x90A0, 0xB0C0, 0xD0E0, 0xF00D,\n+    ///     ),\n+    ///     addr);\n+    /// ```\n     fn from(ip: u128) -> Ipv6Addr {\n-        Ipv6Addr::new(\n-            (ip >> 112) as u16, (ip >> 96) as u16, (ip >> 80) as u16,\n-            (ip >> 64) as u16, (ip >> 48) as u16, (ip >> 32) as u16,\n-            (ip >> 16) as u16, ip as u16,\n-        )\n+        Ipv6Addr::from(ip.to_be_bytes())\n     }\n }\n "}]}