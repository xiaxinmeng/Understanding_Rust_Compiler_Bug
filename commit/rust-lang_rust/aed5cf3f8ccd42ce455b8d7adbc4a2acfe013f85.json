{"sha": "aed5cf3f8ccd42ce455b8d7adbc4a2acfe013f85", "node_id": "C_kwDOAAsO6NoAKGFlZDVjZjNmOGNjZDQyY2U0NTViOGQ3YWRiYzRhMmFjZmUwMTNmODU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-23T12:14:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-23T12:16:55Z"}, "message": "say some more things about how transmute is UB", "tree": {"sha": "2e1d53efeb43701763cdd18e53812c1588d32fdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e1d53efeb43701763cdd18e53812c1588d32fdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aed5cf3f8ccd42ce455b8d7adbc4a2acfe013f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aed5cf3f8ccd42ce455b8d7adbc4a2acfe013f85", "html_url": "https://github.com/rust-lang/rust/commit/aed5cf3f8ccd42ce455b8d7adbc4a2acfe013f85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aed5cf3f8ccd42ce455b8d7adbc4a2acfe013f85/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d95a36244f60bbbc5134310460e7597e82e41b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d95a36244f60bbbc5134310460e7597e82e41b1", "html_url": "https://github.com/rust-lang/rust/commit/5d95a36244f60bbbc5134310460e7597e82e41b1"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "d043c61a47a3901bb0fec93a145c87defcd3946e", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aed5cf3f8ccd42ce455b8d7adbc4a2acfe013f85/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed5cf3f8ccd42ce455b8d7adbc4a2acfe013f85/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=aed5cf3f8ccd42ce455b8d7adbc4a2acfe013f85", "patch": "@@ -1207,30 +1207,32 @@ extern \"rust-intrinsic\" {\n \n     /// Reinterprets the bits of a value of one type as another type.\n     ///\n-    /// Both types must have the same size. Neither the original, nor the result,\n-    /// may be an [invalid value](../../nomicon/what-unsafe-does.html).\n+    /// Both types must have the same size. Compilation will fail if this is not guaranteed.\n     ///\n     /// `transmute` is semantically equivalent to a bitwise move of one type\n     /// into another. It copies the bits from the source value into the\n     /// destination value, then forgets the original. Note that source and destination\n     /// are passed by-value, which means if `T` or `U` contains padding, that padding\n     /// might *not* be preserved by `transmute`.\n     ///\n+    /// Both the argument and the result must be [valid](../../nomicon/what-unsafe-does.html) at\n+    /// their given type. Violating this condition leads to [undefined behavior][ub]. The compiler\n+    /// will generate code *assuming that you, the programmer, ensure that there will never be\n+    /// undefined behavior*. It is therefore your responsibility to guarantee that every value\n+    /// passed to `transmute` is valid at both types `T` and `U`. Failing to uphold this condition\n+    /// may lead to unexpeced and unstable compilation results. This makes `transmute` **incredibly\n+    /// unsafe**. `transmute` should be the absolute last resort.\n+    ///\n+    /// Transmuting pointers to integers in a `const` context is [undefined behavior][ub].\n+    /// Any attempt to use the resulting value for integer operations will abort const-evaluation.\n+    ///\n     /// Because `transmute` is a by-value operation, alignment of the *transmuted values\n     /// themselves* is not a concern. As with any other function, the compiler already ensures\n     /// both `T` and `U` are properly aligned. However, when transmuting values that *point\n     /// elsewhere* (such as pointers, references, boxes\u2026), the caller has to ensure proper\n     /// alignment of the pointed-to values.\n     ///\n-    /// `transmute` is **incredibly** unsafe. There are a vast number of ways to\n-    /// cause [undefined behavior][ub] with this function. `transmute` should be\n-    /// the absolute last resort.\n-    ///\n-    /// Transmuting pointers to integers in a `const` context is [undefined behavior][ub].\n-    /// Any attempt to use the resulting value for integer operations will abort const-evaluation.\n-    ///\n-    /// The [nomicon](../../nomicon/transmutes.html) has additional\n-    /// documentation.\n+    /// The [nomicon](../../nomicon/transmutes.html) has additional documentation.\n     ///\n     /// [ub]: ../../reference/behavior-considered-undefined.html\n     ///"}]}