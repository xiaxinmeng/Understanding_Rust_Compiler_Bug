{"sha": "83925dd453ca67c611e45cbd6c17d7a4d3041bde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzOTI1ZGQ0NTNjYTY3YzYxMWU0NWNiZDZjMTdkN2E0ZDMwNDFiZGU=", "commit": {"author": {"name": "Michael Spector", "email": "spektom@gmail.com", "date": "2021-09-11T15:40:04Z"}, "committer": {"name": "Michael Spector", "email": "spektom@gmail.com", "date": "2021-09-11T15:40:04Z"}, "message": "Allow reverse iteration of lowercase'd/uppercase'd chars", "tree": {"sha": "584957021fc240a1d0f23e1c2dc457eef2b84b25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/584957021fc240a1d0f23e1c2dc457eef2b84b25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83925dd453ca67c611e45cbd6c17d7a4d3041bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83925dd453ca67c611e45cbd6c17d7a4d3041bde", "html_url": "https://github.com/rust-lang/rust/commit/83925dd453ca67c611e45cbd6c17d7a4d3041bde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83925dd453ca67c611e45cbd6c17d7a4d3041bde/comments", "author": null, "committer": null, "parents": [{"sha": "7bf0736e130e2203c58654f7353dbf9575e49d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf0736e130e2203c58654f7353dbf9575e49d5c", "html_url": "https://github.com/rust-lang/rust/commit/7bf0736e130e2203c58654f7353dbf9575e49d5c"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "9ec57d7e6447621a691a14a830856a09a9919699", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/83925dd453ca67c611e45cbd6c17d7a4d3041bde/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83925dd453ca67c611e45cbd6c17d7a4d3041bde/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=83925dd453ca67c611e45cbd6c17d7a4d3041bde", "patch": "@@ -1125,6 +1125,37 @@ fn test_rev_iterator() {\n     assert_eq!(pos, v.len());\n }\n \n+#[test]\n+fn test_to_lowercase_rev_iterator() {\n+    let s = \"A\u00d6\u00df\u00dc\ud83d\udca9\u03a3\u03a4\u0399\u0393\u039c\u0391\u03a3\u01c5\ufb01\u0130\";\n+    let v = ['\\u{307}', 'i', '\ufb01', '\u01c6', '\u03c3', '\u03b1', '\u03bc', '\u03b3', '\u03b9', '\u03c4', '\u03c3', '\ud83d\udca9', '\u00fc', '\u00df', '\u00f6', 'a'];\n+\n+    let mut pos = 0;\n+    let it = s.chars().flat_map(|c| c.to_lowercase()).rev();\n+\n+    for c in it {\n+        assert_eq!(c, v[pos]);\n+        pos += 1;\n+    }\n+    assert_eq!(pos, v.len());\n+}\n+\n+#[test]\n+fn test_to_uppercase_rev_iterator() {\n+    let s = \"a\u00f6\u00df\u00fc\ud83d\udca9\u03c3\u03c4\u03b9\u03b3\u03bc\u03b1\u03c2\u01c5\ufb01\u1f80\";\n+    let v =\n+        ['\u0399', '\u1f08', 'I', 'F', '\u01c4', '\u03a3', '\u0391', '\u039c', '\u0393', '\u0399', '\u03a4', '\u03a3', '\ud83d\udca9', '\u00dc', 'S', 'S', '\u00d6', 'A'];\n+\n+    let mut pos = 0;\n+    let it = s.chars().flat_map(|c| c.to_uppercase()).rev();\n+\n+    for c in it {\n+        assert_eq!(c, v[pos]);\n+        pos += 1;\n+    }\n+    assert_eq!(pos, v.len());\n+}\n+\n #[test]\n #[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_chars_decoding() {"}, {"sha": "a9e7144eb64cd911ceabb2db628257c456664331", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/83925dd453ca67c611e45cbd6c17d7a4d3041bde/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83925dd453ca67c611e45cbd6c17d7a4d3041bde/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=83925dd453ca67c611e45cbd6c17d7a4d3041bde", "patch": "@@ -393,6 +393,13 @@ impl Iterator for ToLowercase {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl DoubleEndedIterator for ToLowercase {\n+    fn next_back(&mut self) -> Option<char> {\n+        self.0.next_back()\n+    }\n+}\n+\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for ToLowercase {}\n \n@@ -420,6 +427,13 @@ impl Iterator for ToUppercase {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl DoubleEndedIterator for ToUppercase {\n+    fn next_back(&mut self) -> Option<char> {\n+        self.0.next_back()\n+    }\n+}\n+\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for ToUppercase {}\n \n@@ -479,6 +493,26 @@ impl Iterator for CaseMappingIter {\n     }\n }\n \n+impl DoubleEndedIterator for CaseMappingIter {\n+    fn next_back(&mut self) -> Option<char> {\n+        match *self {\n+            CaseMappingIter::Three(a, b, c) => {\n+                *self = CaseMappingIter::Two(a, b);\n+                Some(c)\n+            }\n+            CaseMappingIter::Two(b, c) => {\n+                *self = CaseMappingIter::One(b);\n+                Some(c)\n+            }\n+            CaseMappingIter::One(c) => {\n+                *self = CaseMappingIter::Zero;\n+                Some(c)\n+            }\n+            CaseMappingIter::Zero => None,\n+        }\n+    }\n+}\n+\n impl fmt::Display for CaseMappingIter {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {"}, {"sha": "ee196db5363bea5a446680176fb4f5575279cc83", "filename": "library/core/tests/char.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83925dd453ca67c611e45cbd6c17d7a4d3041bde/library%2Fcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83925dd453ca67c611e45cbd6c17d7a4d3041bde/library%2Fcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fchar.rs?ref=83925dd453ca67c611e45cbd6c17d7a4d3041bde", "patch": "@@ -91,6 +91,9 @@ fn test_to_lowercase() {\n         let iter: String = c.to_lowercase().collect();\n         let disp: String = c.to_lowercase().to_string();\n         assert_eq!(iter, disp);\n+        let iter_rev: String = c.to_lowercase().rev().collect();\n+        let disp_rev: String = disp.chars().rev().collect();\n+        assert_eq!(iter_rev, disp_rev);\n         iter\n     }\n     assert_eq!(lower('A'), \"a\");\n@@ -118,6 +121,9 @@ fn test_to_uppercase() {\n         let iter: String = c.to_uppercase().collect();\n         let disp: String = c.to_uppercase().to_string();\n         assert_eq!(iter, disp);\n+        let iter_rev: String = c.to_uppercase().rev().collect();\n+        let disp_rev: String = disp.chars().rev().collect();\n+        assert_eq!(iter_rev, disp_rev);\n         iter\n     }\n     assert_eq!(upper('a'), \"A\");"}]}