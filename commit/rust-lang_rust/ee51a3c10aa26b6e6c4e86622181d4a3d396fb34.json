{"sha": "ee51a3c10aa26b6e6c4e86622181d4a3d396fb34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNTFhM2MxMGFhMjZiNmU2YzRlODY2MjIxODFkNGEzZDM5NmZiMzQ=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-06-22T18:36:01Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-06-22T18:36:01Z"}, "message": "Review nits and updates\n\nMove future_from_generator out of raw\nUpdate await to use $crate\nRenumber errors", "tree": {"sha": "5e2ca9e0e1b58ecd90511330fc08b266a0390101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e2ca9e0e1b58ecd90511330fc08b266a0390101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34", "html_url": "https://github.com/rust-lang/rust/commit/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85e4866320e992126e73d1c640f16a4c755a66b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/85e4866320e992126e73d1c640f16a4c755a66b3", "html_url": "https://github.com/rust-lang/rust/commit/85e4866320e992126e73d1c640f16a4c755a66b3"}], "stats": {"total": 104, "additions": 51, "deletions": 53}, "files": [{"sha": "09153c144ae805d29a29ca3b713375cb88f33426", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=ee51a3c10aa26b6e6c4e86622181d4a3d396fb34", "patch": "@@ -2134,7 +2134,7 @@ register_diagnostics! {\n \n     E0906, // closures cannot be static\n \n-    E0703, // multiple different lifetimes used in arguments of `async fn`\n-    E0704, // multiple elided lifetimes used in arguments of `async fn`\n-    E0705, // `async` non-`move` closures with arguments are not currently supported\n+    E0725, // multiple different lifetimes used in arguments of `async fn`\n+    E0726, // multiple elided lifetimes used in arguments of `async fn`\n+    E0727, // `async` non-`move` closures with arguments are not currently supported\n }"}, {"sha": "aeef93a17402905db3a9c34e9849c865685114a2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=ee51a3c10aa26b6e6c4e86622181d4a3d396fb34", "patch": "@@ -877,7 +877,7 @@ impl<'a> LoweringContext<'a> {\n \n         let unstable_span = self.allow_internal_unstable(CompilerDesugaringKind::Async, span);\n         let gen_future = self.expr_std_path(\n-            unstable_span, &[\"raw\", \"future_from_generator\"], None, ThinVec::new());\n+            unstable_span, &[\"future\", \"future_from_generator\"], None, ThinVec::new());\n         hir::ExprCall(P(gen_future), hir_vec![generator])\n     }\n \n@@ -2049,7 +2049,7 @@ impl<'a> LoweringContext<'a> {\n                             struct_span_err!(\n                                 self.context.sess,\n                                 current_lt_span.between(lifetime.span),\n-                                E0703,\n+                                E0725,\n                                 \"multiple different lifetimes used in arguments of `async fn`\",\n                             )\n                                 .span_label(current_lt_span, \"first lifetime here\")\n@@ -2061,7 +2061,7 @@ impl<'a> LoweringContext<'a> {\n                             struct_span_err!(\n                                 self.context.sess,\n                                 current_lt_span.between(lifetime.span),\n-                                E0704,\n+                                E0726,\n                                 \"multiple elided lifetimes used in arguments of `async fn`\",\n                             )\n                                 .span_label(current_lt_span, \"first lifetime here\")\n@@ -2582,9 +2582,10 @@ impl<'a> LoweringContext<'a> {\n                 let fn_def_id = self.resolver.definitions().local_def_id(id);\n \n                 self.with_new_scopes(|this| {\n-                    // Note: we can use non-async decl here because lower_body\n-                    // only cares about the input argument patterns,\n-                    // not the return types.\n+                    // Note: we don't need to change the return type from `T` to\n+                    // `impl Future<Output = T>` here because lower_body\n+                    // only cares about the input argument patterns in the function\n+                    // declaration (decl), not the return types.\n                     let body_id = this.lower_body(Some(decl), |this| {\n                         if let IsAsync::Async(async_node_id) = header.asyncness {\n                             let async_expr = this.make_async_expr(\n@@ -3560,7 +3561,7 @@ impl<'a> LoweringContext<'a> {\n                             struct_span_err!(\n                                 this.sess,\n                                 fn_decl_span,\n-                                E0705,\n+                                E0727,\n                                 \"`async` non-`move` closures with arguments \\\n                                 are not currently supported\",\n                             )"}, {"sha": "abacb8626566dd6e916a4ed81191db220375220f", "filename": "src/libstd/future.rs", "status": "renamed", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=ee51a3c10aa26b6e6c4e86622181d4a3d396fb34", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,27 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(missing_docs)]\n-#![unstable(feature = \"raw\", issue = \"27751\")]\n-\n-//! Contains struct definitions for the layout of compiler built-in types.\n-//!\n-//! They can be used as targets of transmutes in unsafe code for manipulating\n-//! the raw representations directly.\n-//!\n-//! Their definition should always match the ABI defined in `rustc::back::abi`.\n+//! Asynchronous values.\n \n use core::cell::Cell;\n-use core::future::Future;\n use core::marker::Unpin;\n use core::mem::PinMut;\n use core::option::Option;\n use core::ptr::NonNull;\n use core::task::{self, Poll};\n use core::ops::{Drop, Generator, GeneratorState};\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::raw::*;\n+#[doc(inline)]\n+pub use core::future::*;\n \n /// Wrap a future in a generator.\n ///\n@@ -52,7 +43,7 @@ impl<T: Generator<Yield = ()>> !Unpin for GenFuture<T> {}\n impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n     type Output = T::Return;\n     fn poll(self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n-        with_set_cx(cx, || match unsafe { PinMut::get_mut(self).0.resume() } {\n+        set_task_cx(cx, || match unsafe { PinMut::get_mut(self).0.resume() } {\n             GeneratorState::Yielded(()) => Poll::Pending,\n             GeneratorState::Complete(x) => Poll::Ready(x),\n         })\n@@ -74,7 +65,8 @@ impl Drop for SetOnDrop {\n }\n \n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n-pub fn with_set_cx<F, R>(cx: &mut task::Context, f: F) -> R\n+/// Sets the thread-local task context used by async/await futures.\n+pub fn set_task_cx<F, R>(cx: &mut task::Context, f: F) -> R\n where\n     F: FnOnce() -> R\n {\n@@ -90,7 +82,11 @@ where\n }\n \n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n-pub fn with_get_cx<F, R>(f: F) -> R\n+/// Retrieves the thread-local task context used by async/await futures.\n+///\n+/// Panics if no task has been set or if the task context has already been\n+/// retrived by a surrounding call to get_task_cx.\n+pub fn get_task_cx<F, R>(f: F) -> R\n where\n     F: FnOnce(&mut task::Context) -> R\n {", "previous_filename": "src/libstd/raw.rs"}, {"sha": "caad924ea5b5f0af581e0db5a1041bd99c811df5", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ee51a3c10aa26b6e6c4e86622181d4a3d396fb34", "patch": "@@ -411,6 +411,8 @@ pub use core::ops;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::ptr;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core::raw;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::result;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::option;\n@@ -461,22 +463,6 @@ pub use core::u128;\n #[stable(feature = \"core_hint\", since = \"1.27.0\")]\n pub use core::hint;\n \n-#[unstable(feature = \"futures_api\",\n-           reason = \"futures in libcore are unstable\",\n-           issue = \"50547\")]\n-pub mod task {\n-    //! Types and Traits for working with asynchronous tasks.\n-    #[doc(inline)]\n-    pub use core::task::*;\n-    #[doc(inline)]\n-    pub use alloc_crate::task::*;\n-}\n-\n-#[unstable(feature = \"futures_api\",\n-           reason = \"futures in libcore are unstable\",\n-           issue = \"50547\")]\n-pub use core::future;\n-\n pub mod f32;\n pub mod f64;\n \n@@ -495,10 +481,25 @@ pub mod os;\n pub mod panic;\n pub mod path;\n pub mod process;\n-pub mod raw;\n pub mod sync;\n pub mod time;\n \n+#[unstable(feature = \"futures_api\",\n+           reason = \"futures in libcore are unstable\",\n+           issue = \"50547\")]\n+pub mod task {\n+    //! Types and Traits for working with asynchronous tasks.\n+    #[doc(inline)]\n+    pub use core::task::*;\n+    #[doc(inline)]\n+    pub use alloc_crate::task::*;\n+}\n+\n+#[unstable(feature = \"futures_api\",\n+           reason = \"futures in libcore are unstable\",\n+           issue = \"50547\")]\n+pub mod future;\n+\n // Platform-abstraction modules\n #[macro_use]\n mod sys_common;"}, {"sha": "1e9da42d40d9e81dfa51f089ca29d8f56e18eb48", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=ee51a3c10aa26b6e6c4e86622181d4a3d396fb34", "patch": "@@ -220,15 +220,15 @@ macro_rules! eprintln {\n macro_rules! await {\n     ($e:expr) => { {\n         let mut pinned = $e;\n-        let mut pinned = unsafe { ::core::mem::PinMut::new_unchecked(&mut pinned) };\n+        let mut pinned = unsafe { $crate::mem::PinMut::new_unchecked(&mut pinned) };\n         loop {\n-            match ::std::raw::with_get_cx(|cx|\n-                      ::core::future::Future::poll(pinned.reborrow(), cx))\n+            match $crate::future::get_task_cx(|cx|\n+                $crate::future::Future::poll(pinned.reborrow(), cx))\n             {\n                 // FIXME(cramertj) prior to stabilizing await, we have to ensure that this\n                 // can't be used to create a generator on stable via `|| await!()`.\n-                ::core::task::Poll::Pending => yield,\n-                ::core::task::Poll::Ready(x) => break x,\n+                $crate::task::Poll::Pending => yield,\n+                $crate::task::Poll::Ready(x) => break x,\n             }\n         }\n     } }"}, {"sha": "d76bfc5d0e1abb810e9c74225750351a92c203a2", "filename": "src/test/ui/async-fn-multiple-lifetimes.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34/src%2Ftest%2Fui%2Fasync-fn-multiple-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34/src%2Ftest%2Fui%2Fasync-fn-multiple-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-fn-multiple-lifetimes.stderr?ref=ee51a3c10aa26b6e6c4e86622181d4a3d396fb34", "patch": "@@ -1,4 +1,4 @@\n-error[E0703]: multiple different lifetimes used in arguments of `async fn`\n+error[E0725]: multiple different lifetimes used in arguments of `async fn`\n   --> $DIR/async-fn-multiple-lifetimes.rs:17:49\n    |\n LL | async fn multiple_named_lifetimes<'a, 'b>(_: &'a u8, _: &'b u8) {}\n@@ -8,7 +8,7 @@ LL | async fn multiple_named_lifetimes<'a, 'b>(_: &'a u8, _: &'b u8) {}\n    |\n    = help: `async fn` can only accept borrowed values with identical lifetimes\n \n-error[E0704]: multiple elided lifetimes used in arguments of `async fn`\n+error[E0726]: multiple elided lifetimes used in arguments of `async fn`\n   --> $DIR/async-fn-multiple-lifetimes.rs:26:39\n    |\n LL | async fn multiple_elided_lifetimes(_: &u8, _: &u8) {}\n@@ -28,5 +28,5 @@ LL | async fn multiple_elided_lifetimes(_: &u8, _: &u8) {}\n \n error: aborting due to 3 previous errors\n \n-Some errors occurred: E0106, E0703, E0704.\n+Some errors occurred: E0106, E0725, E0726.\n For more information about an error, try `rustc --explain E0106`."}, {"sha": "34cd0069c041dfa470d367e63818ede22e186a41", "filename": "src/test/ui/no-args-non-move-async-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34/src%2Ftest%2Fui%2Fno-args-non-move-async-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee51a3c10aa26b6e6c4e86622181d4a3d396fb34/src%2Ftest%2Fui%2Fno-args-non-move-async-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-args-non-move-async-closure.stderr?ref=ee51a3c10aa26b6e6c4e86622181d4a3d396fb34", "patch": "@@ -1,4 +1,4 @@\n-error[E0705]: `async` non-`move` closures with arguments are not currently supported\n+error[E0727]: `async` non-`move` closures with arguments are not currently supported\n   --> $DIR/no-args-non-move-async-closure.rs:16:13\n    |\n LL |     let _ = async |x: u8| {};\n@@ -8,4 +8,4 @@ LL |     let _ = async |x: u8| {};\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0705`.\n+For more information about this error, try `rustc --explain E0727`."}]}