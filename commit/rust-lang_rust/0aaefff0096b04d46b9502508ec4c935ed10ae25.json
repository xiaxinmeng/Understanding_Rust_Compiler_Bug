{"sha": "0aaefff0096b04d46b9502508ec4c935ed10ae25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYWVmZmYwMDk2YjA0ZDQ2Yjk1MDI1MDhlYzRjOTM1ZWQxMGFlMjU=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-06-22T03:16:59Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-06-22T03:16:59Z"}, "message": "Account for more cases", "tree": {"sha": "6523ee15495df3da4402c6c1466ddf37d3659735", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6523ee15495df3da4402c6c1466ddf37d3659735"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aaefff0096b04d46b9502508ec4c935ed10ae25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEjbeLZzPb62/vY3smZSV3NIU3bZIFAmDRVjEACgkQZSV3NIU3\nbZLltg/+I5sDwayDpEypdhUOOzZjwCBds4XjCSvxIkT+33Gx2G3a8zWZN1GIf8jS\nlbofptkLmSOn2FHaIIGGczZyRDTNZGUiBiin/dxtp2GQ7QeyRqxp2LorcQGcFLpU\ndPggYL3jz8b5XzizGnkzp5uKDLgFvbhp1jrAAJidwmXj1ULsmIWIgOXfMV6vIAzN\n70pcXEfthL8l8d57hbMhIykF4/ZoHS16hs25fJ7fZKupZ1C4ke7rlVtrmil+r+sM\nLe0l9j87c0UBk0YBRcJyJlAvVpAi6Z/RekjgcFBgrxf1aPRObNYZaTSV/kBuqjdI\nLnbeU3TvKL+PUW1P5flqNcX2r1xJ6/5hyHX4ezUJ8rpjFldRuY/NrjT8hBxwyxHc\nnPJxuawhNqGpUwfeQfUX+lht7SV8b7RiXaecfpMCLY2iDSpnSreZOfUN5dpLWN0n\ndAFiDfvQJX2eIFO1o0a9JoHmEgeUecWosiZNAlZJDt+69kir5kNZFS9r30y2vRTp\nxOZrzLPgTAimxwIQmY/EgpFdw7iOi9CLQ0Y7zK2+DvU1FPjZXHNdHjShlLhQsvo9\nzNVGF2nRA57i6Bz277Bkc/6rWf1wb0iXHYwRt6GVMbVeqkOUADav8yfLXSQvAoeZ\nAaIUb4Vwkq6+uSW61PhZ2yEKLX9aJxzRpsRt5NgB9rv7kNjOi4w=\n=qKPx\n-----END PGP SIGNATURE-----", "payload": "tree 6523ee15495df3da4402c6c1466ddf37d3659735\nparent bd7caf477c8e77f0db286c3fd59d7708b3176fdc\nauthor Deadbeef <ent3rm4n@gmail.com> 1624331819 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1624331819 +0800\n\nAccount for more cases\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aaefff0096b04d46b9502508ec4c935ed10ae25", "html_url": "https://github.com/rust-lang/rust/commit/0aaefff0096b04d46b9502508ec4c935ed10ae25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aaefff0096b04d46b9502508ec4c935ed10ae25/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd7caf477c8e77f0db286c3fd59d7708b3176fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7caf477c8e77f0db286c3fd59d7708b3176fdc", "html_url": "https://github.com/rust-lang/rust/commit/bd7caf477c8e77f0db286c3fd59d7708b3176fdc"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "ab6254dcf10b57d8a269222ebab992c45c857714", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0aaefff0096b04d46b9502508ec4c935ed10ae25/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aaefff0096b04d46b9502508ec4c935ed10ae25/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=0aaefff0096b04d46b9502508ec4c935ed10ae25", "patch": "@@ -1,6 +1,5 @@\n //! Support for inlining external documentation into the current AST.\n \n-use std::collections::VecDeque;\n use std::iter::once;\n use std::sync::Arc;\n \n@@ -425,15 +424,16 @@ crate fn build_impl(\n     }\n \n     // Return if the trait itself or any types of the generic parameters are doc(hidden).\n-    let mut deque: VecDeque<&Type> = trait_.iter().collect();\n-    while let Some(ty) = deque.pop_back() {\n+    let mut stack: Vec<&Type> = trait_.iter().collect();\n+    stack.push(&for_);\n+    while let Some(ty) = stack.pop() {\n         if let Some(did) = ty.def_id() {\n             if cx.tcx.get_attrs(did).lists(sym::doc).has_word(sym::hidden) {\n                 return;\n             }\n         }\n         if let Some(generics) = ty.generics() {\n-            deque.extend(generics);\n+            stack.extend(generics);\n         }\n     }\n "}, {"sha": "15953122280f37a7bfe0f3eda33cd9793f011dd0", "filename": "src/test/rustdoc/auxiliary/cross-crate-hidden.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aaefff0096b04d46b9502508ec4c935ed10ae25/src%2Ftest%2Frustdoc%2Fauxiliary%2Fcross-crate-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aaefff0096b04d46b9502508ec4c935ed10ae25/src%2Ftest%2Frustdoc%2Fauxiliary%2Fcross-crate-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fcross-crate-hidden.rs?ref=0aaefff0096b04d46b9502508ec4c935ed10ae25", "patch": "@@ -1,2 +1,5 @@\n #[doc(hidden)]\n pub enum HiddenType {}\n+\n+#[doc(hidden)]\n+pub trait HiddenTrait {}"}, {"sha": "e3e7506d9d37498d17be0ec3dfbedf058f4195e0", "filename": "src/test/rustdoc/cross-crate-hidden.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0aaefff0096b04d46b9502508ec4c935ed10ae25/src%2Ftest%2Frustdoc%2Fcross-crate-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aaefff0096b04d46b9502508ec4c935ed10ae25/src%2Ftest%2Frustdoc%2Fcross-crate-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcross-crate-hidden.rs?ref=0aaefff0096b04d46b9502508ec4c935ed10ae25", "patch": "@@ -4,7 +4,7 @@\n // aux-build:cross-crate-hidden.rs\n extern crate cross_crate_hidden;\n \n-pub use ::cross_crate_hidden::HiddenType; // OK, not re-exported\n+pub use ::cross_crate_hidden::{HiddenType, HiddenTrait}; // OK, not re-exported\n \n pub enum MyLibType {}\n \n@@ -15,9 +15,21 @@ impl From<HiddenType> for MyLibType {\n     }\n }\n \n-// @!has foo/enum.MyLibType.html '//*[@id=\"impl-From%3COption%3COption%3COption%3COption%3CHiddenType%3E%3E%3E%3E%3E\"]' 'impl From<Option<Option<Option<Option<HiddenType>>>>> for MyLibType'\n-impl From<Option<Option<Option<Option<HiddenType>>>>> for MyLibType {\n-    fn from(it: Option<Option<Option<Option<HiddenType>>>>) -> MyLibType {\n+pub struct T<T>(T);\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-From%3CT%3CT%3CT%3CT%3CHiddenType%3E%3E%3E%3E%3E\"]' 'impl From<T<T<T<T<HiddenType>>>>> for MyLibType'\n+impl From<T<T<T<T<HiddenType>>>>> for MyLibType {\n+    fn from(it: T<T<T<T<HiddenType>>>>) -> MyLibType {\n         todo!()\n     }\n }\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-HiddenTrait\"]' 'impl HiddenTrait for MyLibType'\n+impl HiddenTrait for MyLibType {}\n+\n+// @!has foo/struct.T.html '//*[@id=\"impl-From%3CMyLibType%3E\"]' 'impl From<MyLibType> for T<T<T<T<HiddenType>>>>'\n+impl From<MyLibType> for T<T<T<T<HiddenType>>>> {\n+    fn from(it: MyLibType) -> T<T<T<T<HiddenType>>>> {\n+        match it {}\n+    }\n+}"}]}