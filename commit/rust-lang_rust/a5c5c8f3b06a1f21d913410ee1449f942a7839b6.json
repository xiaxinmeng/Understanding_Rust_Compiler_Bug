{"sha": "a5c5c8f3b06a1f21d913410ee1449f942a7839b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YzVjOGYzYjA2YTFmMjFkOTEzNDEwZWUxNDQ5Zjk0MmE3ODM5YjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-23T12:05:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-23T12:05:24Z"}, "message": "Auto merge of #6781 - matthiaskrgr:lintcheck_fix, r=matthiaskrgr\n\nlintcheck fix build (forgot to pass function parameter) and runtime (\u2026\n\n\u2026don't check metadata of directory if it does not exist)\n\nAccidentally broke lintcheck in my previous commit.\n\nchangelog: None", "tree": {"sha": "7562a3e4c547aa7e3350679b0dec1496d5ec37f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7562a3e4c547aa7e3350679b0dec1496d5ec37f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5c5c8f3b06a1f21d913410ee1449f942a7839b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c5c8f3b06a1f21d913410ee1449f942a7839b6", "html_url": "https://github.com/rust-lang/rust/commit/a5c5c8f3b06a1f21d913410ee1449f942a7839b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5c5c8f3b06a1f21d913410ee1449f942a7839b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f02df27f0484b5b7b05dcb674d4233727bb46e82", "url": "https://api.github.com/repos/rust-lang/rust/commits/f02df27f0484b5b7b05dcb674d4233727bb46e82", "html_url": "https://github.com/rust-lang/rust/commit/f02df27f0484b5b7b05dcb674d4233727bb46e82"}, {"sha": "eaae95b613c9b466b98a13d7af474597cc0e62b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaae95b613c9b466b98a13d7af474597cc0e62b1", "html_url": "https://github.com/rust-lang/rust/commit/eaae95b613c9b466b98a13d7af474597cc0e62b1"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "b806f5452846505b94b9a00e8666e7752a7a795a", "filename": "clippy_dev/src/lintcheck.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5c8f3b06a1f21d913410ee1449f942a7839b6/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5c8f3b06a1f21d913410ee1449f942a7839b6/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=a5c5c8f3b06a1f21d913410ee1449f942a7839b6", "patch": "@@ -312,9 +312,14 @@ fn filter_clippy_warnings(line: &str) -> bool {\n \n /// get the path to lintchecks crate sources .toml file, check LINTCHECK_TOML first but if it's\n /// empty use the default path\n-fn lintcheck_config_toml() -> PathBuf {\n+fn lintcheck_config_toml(toml_path: Option<&str>) -> PathBuf {\n     PathBuf::from(\n-        env::var(\"LINTCHECK_TOML\").unwrap_or(toml_path.unwrap_or(\"clippy_dev/lintcheck_crates.toml\").to_string()),\n+        env::var(\"LINTCHECK_TOML\").unwrap_or(\n+            toml_path\n+                .clone()\n+                .unwrap_or(\"clippy_dev/lintcheck_crates.toml\")\n+                .to_string(),\n+        ),\n     )\n }\n \n@@ -332,7 +337,7 @@ fn build_clippy() {\n \n /// Read a `toml` file and return a list of `CrateSources` that we want to check with clippy\n fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n-    let toml_path = lintcheck_config_toml();\n+    let toml_path = lintcheck_config_toml(toml_path);\n     // save it so that we can use the name of the sources.toml as name for the logfile later.\n     let toml_filename = toml_path.file_stem().unwrap().to_str().unwrap().to_string();\n     let toml_content: String =\n@@ -444,10 +449,10 @@ fn gather_stats(clippy_warnings: &[ClippyWarning]) -> String {\n \n /// check if the latest modification of the logfile is older than the modification date of the\n /// clippy binary, if this is true, we should clean the lintchec shared target directory and recheck\n-fn lintcheck_needs_rerun() -> bool {\n+fn lintcheck_needs_rerun(toml_path: Option<&str>) -> bool {\n     let clippy_modified: std::time::SystemTime = {\n         let mut times = [\"target/debug/clippy-driver\", \"target/debug/cargo-clippy\"]\n-            .into_iter()\n+            .iter()\n             .map(|p| {\n                 std::fs::metadata(p)\n                     .expect(\"failed to get metadata of file\")\n@@ -458,7 +463,7 @@ fn lintcheck_needs_rerun() -> bool {\n         std::cmp::max(times.next().unwrap(), times.next().unwrap())\n     };\n \n-    let logs_modified: std::time::SystemTime = std::fs::metadata(lintcheck_config_toml())\n+    let logs_modified: std::time::SystemTime = std::fs::metadata(lintcheck_config_toml(toml_path))\n         .expect(\"failed to get metadata of file\")\n         .modified()\n         .expect(\"failed to get modification date\");\n@@ -473,16 +478,22 @@ pub fn run(clap_config: &ArgMatches) {\n     build_clippy();\n     println!(\"Done compiling\");\n \n+    let clap_toml_path = clap_config.value_of(\"crates-toml\");\n+\n     // if the clippy bin is newer than our logs, throw away target dirs to force clippy to\n     // refresh the logs\n-    if lintcheck_needs_rerun() {\n+    if lintcheck_needs_rerun(clap_toml_path) {\n         let shared_target_dir = \"target/lintcheck/shared_target_dir\";\n-        if std::fs::metadata(&shared_target_dir)\n-            .expect(\"failed to get metadata of shared target dir\")\n-            .is_dir()\n-        {\n-            println!(\"Clippy is newer than lint check logs, clearing lintcheck shared target dir...\");\n-            std::fs::remove_dir_all(&shared_target_dir).expect(\"failed to remove target/lintcheck/shared_target_dir\");\n+        match std::fs::metadata(&shared_target_dir) {\n+            Ok(metadata) => {\n+                if metadata.is_dir() {\n+                    println!(\"Clippy is newer than lint check logs, clearing lintcheck shared target dir...\");\n+                    std::fs::remove_dir_all(&shared_target_dir)\n+                        .expect(\"failed to remove target/lintcheck/shared_target_dir\");\n+                }\n+            },\n+            Err(_) => { // dir probably does not exist, don't remove anything\n+            },\n         }\n     }\n \n@@ -506,7 +517,7 @@ pub fn run(clap_config: &ArgMatches) {\n     // download and extract the crates, then run clippy on them and collect clippys warnings\n     // flatten into one big list of warnings\n \n-    let (filename, crates) = read_crates(clap_config.value_of(\"crates-toml\"));\n+    let (filename, crates) = read_crates(clap_toml_path);\n \n     let clippy_warnings: Vec<ClippyWarning> = if let Some(only_one_crate) = clap_config.value_of(\"only\") {\n         // if we don't have the specified crate in the .toml, throw an error"}]}