{"sha": "a10974da2db2e483f21e337f0c9a8a1e1c4c81ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMDk3NGRhMmRiMmU0ODNmMjFlMzM3ZjBjOWE4YTFlMWM0YzgxZWQ=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-18T05:02:58Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-18T07:29:07Z"}, "message": "Use cond! macro where appropriate", "tree": {"sha": "8f8bf9bc9ae05e9970ffeb2cd357257ac341e803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f8bf9bc9ae05e9970ffeb2cd357257ac341e803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed", "html_url": "https://github.com/rust-lang/rust/commit/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8badea49b0291d5ea0979a8edfb1ebb4f01b043d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8badea49b0291d5ea0979a8edfb1ebb4f01b043d", "html_url": "https://github.com/rust-lang/rust/commit/8badea49b0291d5ea0979a8edfb1ebb4f01b043d"}], "stats": {"total": 84, "additions": 78, "deletions": 6}, "files": [{"sha": "d580f7aa26c99bc4bc12d9ee579c8f8f0e9ca2d8", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=a10974da2db2e483f21e337f0c9a8a1e1c4c81ed", "patch": "@@ -248,15 +248,27 @@ impl Orderable for f32 {\n         if self.is_NaN() || other.is_NaN() { Float::NaN() } else { fmax(*self, *other) }\n     }\n \n-    /// Returns the number constrained within the range `mn <= self <= mx`.\n-    /// If any of the numbers are `NaN` then `NaN` is returned.\n+    #[cfg(stage0)]\n     #[inline(always)]\n     fn clamp(&self, mn: &f32, mx: &f32) -> f32 {\n         if self.is_NaN() { *self }\n         else if !(*self <= *mx) { *mx }\n         else if !(*self >= *mn) { *mn }\n         else { *self }\n     }\n+\n+    /// Returns the number constrained within the range `mn <= self <= mx`.\n+    /// If any of the numbers are `NaN` then `NaN` is returned.\n+    #[cfg(not(stage0))]\n+    #[inline(always)]\n+    fn clamp(&self, mn: &f32, mx: &f32) -> f32 {\n+        cond!(\n+            (self.is_NaN())   { *self }\n+            (!(*self <= *mx)) { *mx   }\n+            (!(*self >= *mn)) { *mn   }\n+            _                 { *self }\n+        )\n+    }\n }\n \n impl Zero for f32 {"}, {"sha": "d140df30c4273c1448b5469e905a40b0abb34ee8", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=a10974da2db2e483f21e337f0c9a8a1e1c4c81ed", "patch": "@@ -270,15 +270,27 @@ impl Orderable for f64 {\n         if self.is_NaN() || other.is_NaN() { Float::NaN() } else { fmax(*self, *other) }\n     }\n \n-    /// Returns the number constrained within the range `mn <= self <= mx`.\n-    /// If any of the numbers are `NaN` then `NaN` is returned.\n+    #[cfg(stage0)]\n     #[inline(always)]\n     fn clamp(&self, mn: &f64, mx: &f64) -> f64 {\n         if self.is_NaN() { *self }\n         else if !(*self <= *mx) { *mx }\n         else if !(*self >= *mn) { *mn }\n         else { *self }\n     }\n+\n+    /// Returns the number constrained within the range `mn <= self <= mx`.\n+    /// If any of the numbers are `NaN` then `NaN` is returned.\n+    #[cfg(not(stage0))]\n+    #[inline(always)]\n+    fn clamp(&self, mn: &f64, mx: &f64) -> f64 {\n+        cond!(\n+            (self.is_NaN())   { *self }\n+            (!(*self <= *mx)) { *mx   }\n+            (!(*self >= *mn)) { *mn   }\n+            _                 { *self }\n+        )\n+    }\n }\n \n impl Zero for f64 {"}, {"sha": "d0e6174ec637d75828117d6726c61d7a4de287d7", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=a10974da2db2e483f21e337f0c9a8a1e1c4c81ed", "patch": "@@ -187,11 +187,23 @@ impl Orderable for T {\n         if *self > *other { *self } else { *other }\n     }\n \n+    #[cfg(stage0)]\n     #[inline(always)]\n     fn clamp(&self, mn: &T, mx: &T) -> T {\n         if *self > *mx { *mx } else\n         if *self < *mn { *mn } else { *self }\n     }\n+\n+    /// Returns the number constrained within the range `mn <= self <= mx`.\n+    #[cfg(not(stage0))]\n+    #[inline(always)]\n+    fn clamp(&self, mn: &T, mx: &T) -> T {\n+        cond!(\n+            (*self > *mx) { *mx   }\n+            (*self < *mn) { *mn   }\n+            _             { *self }\n+        )\n+    }\n }\n \n impl Zero for T {"}, {"sha": "f3e140945057cc630725c93dc287062d2e0e199f", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=a10974da2db2e483f21e337f0c9a8a1e1c4c81ed", "patch": "@@ -153,11 +153,23 @@ impl Orderable for T {\n         if *self > *other { *self } else { *other }\n     }\n \n+    #[cfg(stage0)]\n     #[inline(always)]\n     fn clamp(&self, mn: &T, mx: &T) -> T {\n         if *self > *mx { *mx } else\n         if *self < *mn { *mn } else { *self }\n     }\n+\n+    /// Returns the number constrained within the range `mn <= self <= mx`.\n+    #[cfg(not(stage0))]\n+    #[inline(always)]\n+    fn clamp(&self, mn: &T, mx: &T) -> T {\n+        cond!(\n+            (*self > *mx) { *mx   }\n+            (*self < *mn) { *mn   }\n+            _             { *self }\n+        )\n+    }\n }\n \n impl Zero for T {"}, {"sha": "3b7fdcc85be2f38425eb293715a0b17521315d27", "filename": "src/libcore/unicode.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed/src%2Flibcore%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed/src%2Flibcore%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode.rs?ref=a10974da2db2e483f21e337f0c9a8a1e1c4c81ed", "patch": "@@ -14,6 +14,7 @@\n \n pub mod general_category {\n \n+    #[cfg(stage0)]\n     fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n         use cmp::{Equal, Less, Greater};\n         use vec::bsearch;\n@@ -25,6 +26,18 @@ pub mod general_category {\n         }) != None\n     }\n \n+    #[cfg(not(stage0))]\n+    fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n+        use cmp::{Equal, Less, Greater};\n+        use vec::bsearch;\n+        use option::None;\n+        (do bsearch(r) |&(lo,hi)| { cond!(\n+            (lo <= c && c <= hi) { Equal   }\n+            (hi < c)             { Less    }\n+            _                    { Greater }\n+        )}) != None\n+    }\n+\n \n     static Cc_table : &'static [(char,char)] = &[\n         ('\\x00', '\\x1f'), ('\\x7f', '\\x9f')\n@@ -1449,8 +1462,7 @@ pub mod general_category {\n }\n \n pub mod derived_property {\n-\n-\n+    #[cfg(stage0)]\n     fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n         use cmp::{Equal, Less, Greater};\n         use vec::bsearch;\n@@ -1462,6 +1474,18 @@ pub mod derived_property {\n         }) != None\n     }\n \n+    #[cfg(not(stage0))]\n+    fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n+        use cmp::{Equal, Less, Greater};\n+        use vec::bsearch;\n+        use option::None;\n+        (do bsearch(r) |&(lo,hi)| { cond!(\n+            (lo <= c && c <= hi) { Equal   }\n+            (hi < c)             { Less    }\n+            _                    { Greater }\n+        )}) != None\n+    }\n+\n \n     static Alphabetic_table : &'static [(char,char)] = &[\n         ('\\x41', '\\x5a'), ('\\x61', '\\x7a'),"}]}