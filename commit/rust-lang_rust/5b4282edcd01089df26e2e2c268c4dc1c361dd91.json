{"sha": "5b4282edcd01089df26e2e2c268c4dc1c361dd91", "node_id": "C_kwDOAAsO6NoAKDViNDI4MmVkY2QwMTA4OWRmMjZlMmUyYzI2OGM0ZGMxYzM2MWRkOTE", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-10-07T21:43:53Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-11T20:18:59Z"}, "message": "Improve docs", "tree": {"sha": "fb1bc969e73da2f046e8d77ab696e1b1ede6bd83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb1bc969e73da2f046e8d77ab696e1b1ede6bd83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b4282edcd01089df26e2e2c268c4dc1c361dd91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4282edcd01089df26e2e2c268c4dc1c361dd91", "html_url": "https://github.com/rust-lang/rust/commit/5b4282edcd01089df26e2e2c268c4dc1c361dd91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b4282edcd01089df26e2e2c268c4dc1c361dd91/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "765bee6362371185159cc68fbb708c64a621ae3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/765bee6362371185159cc68fbb708c64a621ae3c", "html_url": "https://github.com/rust-lang/rust/commit/765bee6362371185159cc68fbb708c64a621ae3c"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "d4d171d570e62be49d00098a3df94416eedf17f1", "filename": "crates/core_simd/src/swizzle.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b4282edcd01089df26e2e2c268c4dc1c361dd91/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4282edcd01089df26e2e2c268c4dc1c361dd91/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs?ref=5b4282edcd01089df26e2e2c268c4dc1c361dd91", "patch": "@@ -47,23 +47,23 @@ macro_rules! simd_swizzle {\n     } => {\n         {\n             use $crate::simd::Swizzle;\n-            struct SwizzleImpl;\n-            impl<const LANES: usize> Swizzle<LANES, {$index.len()}> for SwizzleImpl {\n+            struct Impl;\n+            impl<const LANES: usize> Swizzle<LANES, {$index.len()}> for Impl {\n                 const INDEX: [usize; {$index.len()}] = $index;\n             }\n-            SwizzleImpl::swizzle($vector)\n+            Impl::swizzle($vector)\n         }\n     };\n     {\n         $first:expr, $second:expr, $index:expr $(,)?\n     } => {\n         {\n             use $crate::simd::{Which, Swizzle2};\n-            struct SwizzleImpl;\n-            impl<const LANES: usize> Swizzle2<LANES, {$index.len()}> for SwizzleImpl {\n+            struct Impl;\n+            impl<const LANES: usize> Swizzle2<LANES, {$index.len()}> for Impl {\n                 const INDEX: [Which; {$index.len()}] = $index;\n             }\n-            SwizzleImpl::swizzle2($first, $second)\n+            Impl::swizzle2($first, $second)\n         }\n     }\n }\n@@ -118,6 +118,7 @@ pub trait Swizzle2<const INPUT_LANES: usize, const OUTPUT_LANES: usize> {\n }\n \n /// The `simd_shuffle` intrinsic expects `u32`, so do error checking and conversion here.\n+/// This trait hides `INDEX_IMPL` from the public API.\n trait SwizzleImpl<const INPUT_LANES: usize, const OUTPUT_LANES: usize> {\n     const INDEX_IMPL: [u32; OUTPUT_LANES];\n }\n@@ -142,6 +143,7 @@ where\n }\n \n /// The `simd_shuffle` intrinsic expects `u32`, so do error checking and conversion here.\n+/// This trait hides `INDEX_IMPL` from the public API.\n trait Swizzle2Impl<const INPUT_LANES: usize, const OUTPUT_LANES: usize> {\n     const INDEX_IMPL: [u32; OUTPUT_LANES];\n }\n@@ -258,8 +260,6 @@ where\n     /// The second result contains the last `LANES / 2` lanes from `self` and `other`,\n     /// alternating, starting with the lane `LANES / 2` from the start of `self`.\n     ///\n-    /// This particular permutation is efficient on many architectures.\n-    ///\n     /// ```\n     /// #![feature(portable_simd)]\n     /// # use core_simd::Simd;\n@@ -322,8 +322,6 @@ where\n     /// The second result takes every other lane of `self` and then `other`, starting with\n     /// the second lane.\n     ///\n-    /// This particular permutation is efficient on many architectures.\n-    ///\n     /// ```\n     /// #![feature(portable_simd)]\n     /// # use core_simd::Simd;"}]}