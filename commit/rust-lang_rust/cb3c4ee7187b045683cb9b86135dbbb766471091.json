{"sha": "cb3c4ee7187b045683cb9b86135dbbb766471091", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiM2M0ZWU3MTg3YjA0NTY4M2NiOWI4NjEzNWRiYmI3NjY0NzEwOTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-17T06:34:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-17T06:34:12Z"}, "message": "Auto merge of #86164 - FabianWolff:issue-86053, r=davidtwco\n\nHandle C-variadic arguments properly when reporting region errors\n\nThis pull request fixes #86053. The issue is that for a C-variadic function\n```rust\n#![feature(c_variadic)]\nunsafe extern \"C\" fn foo(_: (), ...) {}\n```\n`foo`'s signature will contain only the first parameter (and have `c_variadic` set to `true`), whereas its body has a second argument (a `hir::Pat` for the `...`).\n\nThe code for reporting region errors iterates over the body's parameters and tries to fetch the corresponding parameter from the signature; this causes an out-of-bounds ICE for the `...` (though not in the example above, because there are no region errors to report).\n\nI have simply restricted the iteration over the body parameters to exclude `...`, which is fine because `...` cannot cause a region error.", "tree": {"sha": "0228ef60b25278fbda7c1159daec94fc96fb963a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0228ef60b25278fbda7c1159daec94fc96fb963a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb3c4ee7187b045683cb9b86135dbbb766471091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3c4ee7187b045683cb9b86135dbbb766471091", "html_url": "https://github.com/rust-lang/rust/commit/cb3c4ee7187b045683cb9b86135dbbb766471091", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb3c4ee7187b045683cb9b86135dbbb766471091/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a407200b970d8a48e4e58de37c94df355f5472", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a407200b970d8a48e4e58de37c94df355f5472", "html_url": "https://github.com/rust-lang/rust/commit/50a407200b970d8a48e4e58de37c94df355f5472"}, {"sha": "7dccce07066ea58d7f8d1dd8462347e91e51c67a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dccce07066ea58d7f8d1dd8462347e91e51c67a", "html_url": "https://github.com/rust-lang/rust/commit/7dccce07066ea58d7f8d1dd8462347e91e51c67a"}], "stats": {"total": 285, "additions": 217, "deletions": 68}, "files": [{"sha": "acc41d9f6443cf66a46fadbd897274d71d5e4608", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb3c4ee7187b045683cb9b86135dbbb766471091/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3c4ee7187b045683cb9b86135dbbb766471091/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=cb3c4ee7187b045683cb9b86135dbbb766471091", "patch": "@@ -652,7 +652,7 @@ impl<'a> AstValidator<'a> {\n                 self.err_handler()\n                     .struct_span_err(\n                         *span,\n-                        \"only foreign or `unsafe extern \\\"C\\\" functions may be C-variadic\",\n+                        \"only foreign or `unsafe extern \\\"C\\\"` functions may be C-variadic\",\n                     )\n                     .emit();\n             }"}, {"sha": "8dcdd4b149ea6c23ebe17f76468726dc4ed92ae2", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cb3c4ee7187b045683cb9b86135dbbb766471091/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3c4ee7187b045683cb9b86135dbbb766471091/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=cb3c4ee7187b045683cb9b86135dbbb766471091", "patch": "@@ -56,33 +56,42 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let fn_decl = hir.fn_decl_by_hir_id(owner_id).unwrap();\n         let poly_fn_sig = self.tcx().fn_sig(id);\n         let fn_sig = self.tcx().liberate_late_bound_regions(id, poly_fn_sig);\n-        body.params.iter().enumerate().find_map(|(index, param)| {\n-            // May return None; sometimes the tables are not yet populated.\n-            let ty = fn_sig.inputs()[index];\n-            let mut found_anon_region = false;\n-            let new_param_ty = self.tcx().fold_regions(ty, &mut false, |r, _| {\n-                if *r == *anon_region {\n-                    found_anon_region = true;\n-                    replace_region\n+        body.params\n+            .iter()\n+            .take(if fn_sig.c_variadic {\n+                fn_sig.inputs().len()\n+            } else {\n+                assert_eq!(fn_sig.inputs().len(), body.params.len());\n+                body.params.len()\n+            })\n+            .enumerate()\n+            .find_map(|(index, param)| {\n+                // May return None; sometimes the tables are not yet populated.\n+                let ty = fn_sig.inputs()[index];\n+                let mut found_anon_region = false;\n+                let new_param_ty = self.tcx().fold_regions(ty, &mut false, |r, _| {\n+                    if *r == *anon_region {\n+                        found_anon_region = true;\n+                        replace_region\n+                    } else {\n+                        r\n+                    }\n+                });\n+                if found_anon_region {\n+                    let ty_hir_id = fn_decl.inputs[index].hir_id;\n+                    let param_ty_span = hir.span(ty_hir_id);\n+                    let is_first = index == 0;\n+                    Some(AnonymousParamInfo {\n+                        param,\n+                        param_ty: new_param_ty,\n+                        param_ty_span,\n+                        bound_region,\n+                        is_first,\n+                    })\n                 } else {\n-                    r\n+                    None\n                 }\n-            });\n-            if found_anon_region {\n-                let ty_hir_id = fn_decl.inputs[index].hir_id;\n-                let param_ty_span = hir.span(ty_hir_id);\n-                let is_first = index == 0;\n-                Some(AnonymousParamInfo {\n-                    param,\n-                    param_ty: new_param_ty,\n-                    param_ty_span,\n-                    bound_region,\n-                    is_first,\n-                })\n-            } else {\n-                None\n-            }\n-        })\n+            })\n     }\n \n     pub(super) fn future_return_type("}, {"sha": "b30548e19f9ffb2bd14fe1ae8db29a3007bacfe5", "filename": "src/test/ui/c-variadic/issue-86053-1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.rs?ref=cb3c4ee7187b045683cb9b86135dbbb766471091", "patch": "@@ -0,0 +1,12 @@\n+// Regression test for the ICE described in issue #86053.\n+// error-pattern:unexpected `self` parameter in function\n+// error-pattern:`...` must be the last argument of a C-variadic function\n+// error-pattern:cannot find type `F` in this scope\n+// error-pattern:in type `&'a &'b usize`, reference has a longer lifetime than the data it references\n+\n+#![feature(c_variadic)]\n+#![crate_type=\"lib\"]\n+\n+fn ordering4 < 'a , 'b     > ( a :            ,   self , self ,   self ,\n+    self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize ) {\n+}"}, {"sha": "ec7ee74aef29adc21b6df7ff11039e2bc5d54d65", "filename": "src/test/ui/c-variadic/issue-86053-1.stderr", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr?ref=cb3c4ee7187b045683cb9b86135dbbb766471091", "patch": "@@ -0,0 +1,101 @@\n+error: expected type, found `,`\n+  --> $DIR/issue-86053-1.rs:10:47\n+   |\n+LL | fn ordering4 < 'a , 'b     > ( a :            ,   self , self ,   self ,\n+   |                                               ^ expected type\n+\n+error: unexpected `self` parameter in function\n+  --> $DIR/issue-86053-1.rs:10:51\n+   |\n+LL | fn ordering4 < 'a , 'b     > ( a :            ,   self , self ,   self ,\n+   |                                                   ^^^^ must be the first parameter of an associated function\n+\n+error: unexpected `self` parameter in function\n+  --> $DIR/issue-86053-1.rs:10:58\n+   |\n+LL | fn ordering4 < 'a , 'b     > ( a :            ,   self , self ,   self ,\n+   |                                                          ^^^^ must be the first parameter of an associated function\n+\n+error: unexpected `self` parameter in function\n+  --> $DIR/issue-86053-1.rs:10:67\n+   |\n+LL | fn ordering4 < 'a , 'b     > ( a :            ,   self , self ,   self ,\n+   |                                                                   ^^^^ must be the first parameter of an associated function\n+\n+error: unexpected `self` parameter in function\n+  --> $DIR/issue-86053-1.rs:11:5\n+   |\n+LL |     self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize ) {\n+   |     ^^^^ must be the first parameter of an associated function\n+\n+error: unexpected `self` parameter in function\n+  --> $DIR/issue-86053-1.rs:11:20\n+   |\n+LL |     self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize ) {\n+   |                    ^^^^ must be the first parameter of an associated function\n+\n+error: unexpected `self` parameter in function\n+  --> $DIR/issue-86053-1.rs:11:29\n+   |\n+LL |     self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize ) {\n+   |                             ^^^^ must be the first parameter of an associated function\n+\n+error: `...` must be the last argument of a C-variadic function\n+  --> $DIR/issue-86053-1.rs:11:12\n+   |\n+LL |     self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize ) {\n+   |            ^^^^\n+\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n+  --> $DIR/issue-86053-1.rs:11:12\n+   |\n+LL |     self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize ) {\n+   |            ^^^^\n+\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n+  --> $DIR/issue-86053-1.rs:11:36\n+   |\n+LL |     self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize ) {\n+   |                                    ^^^^\n+\n+error[E0412]: cannot find type `F` in this scope\n+  --> $DIR/issue-86053-1.rs:11:48\n+   |\n+LL |     self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize ) {\n+   |                                                ^\n+   | \n+  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait Fn<Args>: FnMut<Args> {\n+   | ------------------------------- similarly named trait `Fn` defined here\n+   |\n+help: a trait with a similar name exists\n+   |\n+LL |     self , ... ,   self ,   self , ... ) where Fn : FnOnce ( & 'a & 'b usize ) {\n+   |                                                ^^\n+help: you might be missing a type parameter\n+   |\n+LL | fn ordering4 < 'a , 'b, F     > ( a :            ,   self , self ,   self ,\n+   |                       ^^^\n+\n+error[E0491]: in type `&'a &'b usize`, reference has a longer lifetime than the data it references\n+  --> $DIR/issue-86053-1.rs:11:52\n+   |\n+LL |     self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize ) {\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime `'a` as defined on the function body at 10:16\n+  --> $DIR/issue-86053-1.rs:10:16\n+   |\n+LL | fn ordering4 < 'a , 'b     > ( a :            ,   self , self ,   self ,\n+   |                ^^\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 10:21\n+  --> $DIR/issue-86053-1.rs:10:21\n+   |\n+LL | fn ordering4 < 'a , 'b     > ( a :            ,   self , self ,   self ,\n+   |                     ^^\n+\n+error: aborting due to 12 previous errors\n+\n+Some errors have detailed explanations: E0412, E0491.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "c545831f7171a93a17aae23f6fc9472b2b4abd06", "filename": "src/test/ui/c-variadic/issue-86053-2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-2.rs?ref=cb3c4ee7187b045683cb9b86135dbbb766471091", "patch": "@@ -0,0 +1,11 @@\n+// Regression test for the ICE caused by the example in\n+// https://github.com/rust-lang/rust/issues/86053#issuecomment-855672258\n+\n+#![feature(c_variadic)]\n+\n+trait H<T> {}\n+\n+unsafe extern \"C\" fn ordering4<'a, F: H<&'static &'a ()>>(_: (), ...) {}\n+//~^ ERROR: in type `&'static &'a ()`, reference has a longer lifetime than the data it references [E0491]\n+\n+fn main() {}"}, {"sha": "4fc5e6315e45b8ef69652f9f20f9d5590c2e9ade", "filename": "src/test/ui/c-variadic/issue-86053-2.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-2.stderr?ref=cb3c4ee7187b045683cb9b86135dbbb766471091", "patch": "@@ -0,0 +1,16 @@\n+error[E0491]: in type `&'static &'a ()`, reference has a longer lifetime than the data it references\n+  --> $DIR/issue-86053-2.rs:8:39\n+   |\n+LL | unsafe extern \"C\" fn ordering4<'a, F: H<&'static &'a ()>>(_: (), ...) {}\n+   |                                       ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the pointer is valid for the static lifetime\n+note: but the referenced data is only valid for the lifetime `'a` as defined on the function body at 8:32\n+  --> $DIR/issue-86053-2.rs:8:32\n+   |\n+LL | unsafe extern \"C\" fn ordering4<'a, F: H<&'static &'a ()>>(_: (), ...) {}\n+   |                                ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0491`."}, {"sha": "0086d2ec18cfad98d05f8a9f1603749d00c8ea28", "filename": "src/test/ui/mir/issue-83499-input-output-iteration-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fmir%2Fissue-83499-input-output-iteration-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fmir%2Fissue-83499-input-output-iteration-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-83499-input-output-iteration-ice.rs?ref=cb3c4ee7187b045683cb9b86135dbbb766471091", "patch": "@@ -5,6 +5,6 @@\n fn main() {}\n \n fn foo(_: Bar, ...) -> impl {}\n-//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+//~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n //~| ERROR cannot find type `Bar` in this scope\n //~| ERROR at least one trait must be specified"}, {"sha": "4eb3adc8b4f1c88e9212869c1bf7e537f7349fa3", "filename": "src/test/ui/mir/issue-83499-input-output-iteration-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fmir%2Fissue-83499-input-output-iteration-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fmir%2Fissue-83499-input-output-iteration-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-83499-input-output-iteration-ice.stderr?ref=cb3c4ee7187b045683cb9b86135dbbb766471091", "patch": "@@ -1,4 +1,4 @@\n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/issue-83499-input-output-iteration-ice.rs:7:16\n    |\n LL | fn foo(_: Bar, ...) -> impl {}"}, {"sha": "0b61e267da80b6529fbcedfc014a51b8135f727f", "filename": "src/test/ui/parser/variadic-ffi-semantic-restrictions.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.rs?ref=cb3c4ee7187b045683cb9b86135dbbb766471091", "patch": "@@ -4,32 +4,32 @@\n fn main() {}\n \n fn f1_1(x: isize, ...) {}\n-//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+//~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n \n fn f1_2(...) {}\n-//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+//~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n //~| ERROR C-variadic function must be declared with at least one named argument\n \n extern \"C\" fn f2_1(x: isize, ...) {}\n-//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+//~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n \n extern \"C\" fn f2_2(...) {}\n-//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+//~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n //~| ERROR C-variadic function must be declared with at least one named argument\n \n extern \"C\" fn f2_3(..., x: isize) {}\n-//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+//~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n //~| ERROR `...` must be the last argument of a C-variadic function\n \n extern \"C\" fn f3_1(x: isize, ...) {}\n-//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+//~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n \n extern \"C\" fn f3_2(...) {}\n-//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+//~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n //~| ERROR C-variadic function must be declared with at least one named argument\n \n extern \"C\" fn f3_3(..., x: isize) {}\n-//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+//~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n //~| ERROR `...` must be the last argument of a C-variadic function\n \n extern \"C\" {\n@@ -43,35 +43,35 @@ struct X;\n \n impl X {\n     fn i_f1(x: isize, ...) {}\n-    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n     fn i_f2(...) {}\n-    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n     //~| ERROR C-variadic function must be declared with at least one named argument\n     fn i_f3(..., x: isize, ...) {}\n-    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n-    //~| ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n+    //~| ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n     //~| ERROR `...` must be the last argument of a C-variadic function\n     fn i_f4(..., x: isize, ...) {}\n-    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n-    //~| ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n+    //~| ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n     //~| ERROR `...` must be the last argument of a C-variadic function\n }\n \n trait T {\n     fn t_f1(x: isize, ...) {}\n-    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n     fn t_f2(x: isize, ...);\n-    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n     fn t_f3(...) {}\n-    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n     //~| ERROR C-variadic function must be declared with at least one named argument\n     fn t_f4(...);\n-    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n     //~| ERROR C-variadic function must be declared with at least one named argument\n     fn t_f5(..., x: isize) {}\n-    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n     //~| ERROR `...` must be the last argument of a C-variadic function\n     fn t_f6(..., x: isize);\n-    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~^ ERROR only foreign or `unsafe extern \"C\"` functions may be C-variadic\n     //~| ERROR `...` must be the last argument of a C-variadic function\n }"}, {"sha": "f1cbbb279c8492f19725ce44690aeeb88e386d8d", "filename": "src/test/ui/parser/variadic-ffi-semantic-restrictions.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb3c4ee7187b045683cb9b86135dbbb766471091/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.stderr?ref=cb3c4ee7187b045683cb9b86135dbbb766471091", "patch": "@@ -1,4 +1,4 @@\n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:6:19\n    |\n LL | fn f1_1(x: isize, ...) {}\n@@ -10,13 +10,13 @@ error: C-variadic function must be declared with at least one named argument\n LL | fn f1_2(...) {}\n    |         ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:9:9\n    |\n LL | fn f1_2(...) {}\n    |         ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:13:30\n    |\n LL | extern \"C\" fn f2_1(x: isize, ...) {}\n@@ -28,7 +28,7 @@ error: C-variadic function must be declared with at least one named argument\n LL | extern \"C\" fn f2_2(...) {}\n    |                    ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:16:20\n    |\n LL | extern \"C\" fn f2_2(...) {}\n@@ -40,13 +40,13 @@ error: `...` must be the last argument of a C-variadic function\n LL | extern \"C\" fn f2_3(..., x: isize) {}\n    |                    ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:20:20\n    |\n LL | extern \"C\" fn f2_3(..., x: isize) {}\n    |                    ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:24:30\n    |\n LL | extern \"C\" fn f3_1(x: isize, ...) {}\n@@ -58,7 +58,7 @@ error: C-variadic function must be declared with at least one named argument\n LL | extern \"C\" fn f3_2(...) {}\n    |                    ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:27:20\n    |\n LL | extern \"C\" fn f3_2(...) {}\n@@ -70,7 +70,7 @@ error: `...` must be the last argument of a C-variadic function\n LL | extern \"C\" fn f3_3(..., x: isize) {}\n    |                    ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:31:20\n    |\n LL | extern \"C\" fn f3_3(..., x: isize) {}\n@@ -88,7 +88,7 @@ error: `...` must be the last argument of a C-variadic function\n LL |     fn e_f2(..., x: isize);\n    |             ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:45:23\n    |\n LL |     fn i_f1(x: isize, ...) {}\n@@ -100,7 +100,7 @@ error: C-variadic function must be declared with at least one named argument\n LL |     fn i_f2(...) {}\n    |             ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:47:13\n    |\n LL |     fn i_f2(...) {}\n@@ -112,13 +112,13 @@ error: `...` must be the last argument of a C-variadic function\n LL |     fn i_f3(..., x: isize, ...) {}\n    |             ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:50:13\n    |\n LL |     fn i_f3(..., x: isize, ...) {}\n    |             ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:50:28\n    |\n LL |     fn i_f3(..., x: isize, ...) {}\n@@ -130,25 +130,25 @@ error: `...` must be the last argument of a C-variadic function\n LL |     fn i_f4(..., x: isize, ...) {}\n    |             ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:54:13\n    |\n LL |     fn i_f4(..., x: isize, ...) {}\n    |             ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:54:28\n    |\n LL |     fn i_f4(..., x: isize, ...) {}\n    |                            ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:61:23\n    |\n LL |     fn t_f1(x: isize, ...) {}\n    |                       ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:63:23\n    |\n LL |     fn t_f2(x: isize, ...);\n@@ -160,7 +160,7 @@ error: C-variadic function must be declared with at least one named argument\n LL |     fn t_f3(...) {}\n    |             ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:65:13\n    |\n LL |     fn t_f3(...) {}\n@@ -172,7 +172,7 @@ error: C-variadic function must be declared with at least one named argument\n LL |     fn t_f4(...);\n    |             ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:68:13\n    |\n LL |     fn t_f4(...);\n@@ -184,7 +184,7 @@ error: `...` must be the last argument of a C-variadic function\n LL |     fn t_f5(..., x: isize) {}\n    |             ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:71:13\n    |\n LL |     fn t_f5(..., x: isize) {}\n@@ -196,7 +196,7 @@ error: `...` must be the last argument of a C-variadic function\n LL |     fn t_f6(..., x: isize);\n    |             ^^^\n \n-error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+error: only foreign or `unsafe extern \"C\"` functions may be C-variadic\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:74:13\n    |\n LL |     fn t_f6(..., x: isize);"}]}