{"sha": "856185dbb2f4a57dc865c6dc3c856268c7efa79a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NjE4NWRiYjJmNGE1N2RjODY1YzZkYzNjODU2MjY4YzdlZmE3OWE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-09T20:17:02Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T19:51:55Z"}, "message": "hir, mir: Separate HIR expressions / MIR operands from InlineAsm.", "tree": {"sha": "878a7f06c139ce67a657e0f47eea406d7a126b21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/878a7f06c139ce67a657e0f47eea406d7a126b21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/856185dbb2f4a57dc865c6dc3c856268c7efa79a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/856185dbb2f4a57dc865c6dc3c856268c7efa79a", "html_url": "https://github.com/rust-lang/rust/commit/856185dbb2f4a57dc865c6dc3c856268c7efa79a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/856185dbb2f4a57dc865c6dc3c856268c7efa79a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "415d95fbeb5cd37b6681413b537854b5617d9609", "url": "https://api.github.com/repos/rust-lang/rust/commits/415d95fbeb5cd37b6681413b537854b5617d9609", "html_url": "https://github.com/rust-lang/rust/commit/415d95fbeb5cd37b6681413b537854b5617d9609"}], "stats": {"total": 385, "additions": 176, "deletions": 209}, "files": [{"sha": "dcfa8d1e36a21f39aaac5069bf282f28b074dde8", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -354,19 +354,10 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.straightline(expr, pred, Some(&**e).into_iter())\n             }\n \n-            hir::ExprInlineAsm(ref inline_asm) => {\n-                let inputs = inline_asm.inputs.iter();\n-                let outputs = inline_asm.outputs.iter();\n-                let post_inputs = self.exprs(inputs.map(|a| {\n-                    debug!(\"cfg::construct InlineAsm id:{} input:{:?}\", expr.id, a);\n-                    let &(_, ref expr) = a;\n-                    &**expr\n-                }), pred);\n-                let post_outputs = self.exprs(outputs.map(|a| {\n-                    debug!(\"cfg::construct InlineAsm id:{} output:{:?}\", expr.id, a);\n-                    &*a.expr\n-                }), post_inputs);\n-                self.add_ast_node(expr.id, &[post_outputs])\n+            hir::ExprInlineAsm(_, ref outputs, ref inputs) => {\n+                let post_outputs = self.exprs(outputs.iter().map(|e| &**e), pred);\n+                let post_inputs = self.exprs(inputs.iter().map(|e| &**e), post_outputs);\n+                self.add_ast_node(expr.id, &[post_inputs])\n             }\n \n             hir::ExprClosure(..) |"}, {"sha": "91ffef2aa599d97c4c342b2834c20df87b0e38f1", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -449,23 +449,20 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                 }\n             }\n \n-            hir::ExprInlineAsm(ref ia) => {\n-                for &(_, ref input) in &ia.inputs {\n-                    self.consume_expr(&input);\n-                }\n-\n-                for output in &ia.outputs {\n-                    if output.is_indirect {\n-                        self.consume_expr(&output.expr);\n+            hir::ExprInlineAsm(ref ia, ref outputs, ref inputs) => {\n+                for (o, output) in ia.outputs.iter().zip(outputs) {\n+                    if o.is_indirect {\n+                        self.consume_expr(output);\n                     } else {\n-                        self.mutate_expr(expr, &output.expr,\n-                                         if output.is_rw {\n+                        self.mutate_expr(expr, output,\n+                                         if o.is_rw {\n                                              MutateMode::WriteAndRead\n                                          } else {\n                                              MutateMode::JustWrite\n                                          });\n                     }\n                 }\n+                self.consume_exprs(inputs);\n             }\n \n             hir::ExprBreak(..) |"}, {"sha": "d78e0ca79aa82650790190b79a4ae7da37a2dfea", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -1170,25 +1170,21 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             self.propagate_through_expr(&e, succ)\n           }\n \n-          hir::ExprInlineAsm(ref ia) => {\n-\n-            let succ = ia.outputs.iter().rev().fold(succ,\n-                |succ, out| {\n-                    // see comment on lvalues\n-                    // in propagate_through_lvalue_components()\n-                    if out.is_indirect {\n-                        self.propagate_through_expr(&out.expr, succ)\n-                    } else {\n-                        let acc = if out.is_rw { ACC_WRITE|ACC_READ } else { ACC_WRITE };\n-                        let succ = self.write_lvalue(&out.expr, succ, acc);\n-                        self.propagate_through_lvalue_components(&out.expr, succ)\n-                    }\n+          hir::ExprInlineAsm(ref ia, ref outputs, ref inputs) => {\n+            let succ = ia.outputs.iter().zip(outputs).rev().fold(succ, |succ, (o, output)| {\n+                // see comment on lvalues\n+                // in propagate_through_lvalue_components()\n+                if o.is_indirect {\n+                    self.propagate_through_expr(output, succ)\n+                } else {\n+                    let acc = if o.is_rw { ACC_WRITE|ACC_READ } else { ACC_WRITE };\n+                    let succ = self.write_lvalue(output, succ, acc);\n+                    self.propagate_through_lvalue_components(output, succ)\n                 }\n-            );\n+            });\n+\n             // Inputs are executed first. Propagate last because of rev order\n-            ia.inputs.iter().rev().fold(succ, |succ, &(_, ref expr)| {\n-                self.propagate_through_expr(&expr, succ)\n-            })\n+            self.propagate_through_exprs(inputs, succ)\n           }\n \n           hir::ExprLit(..) => {\n@@ -1425,17 +1421,17 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n         intravisit::walk_expr(this, expr);\n       }\n \n-      hir::ExprInlineAsm(ref ia) => {\n-        for &(_, ref input) in &ia.inputs {\n-          this.visit_expr(&input);\n+      hir::ExprInlineAsm(ref ia, ref outputs, ref inputs) => {\n+        for input in inputs {\n+          this.visit_expr(input);\n         }\n \n         // Output operands must be lvalues\n-        for out in &ia.outputs {\n-          if !out.is_indirect {\n-            this.check_lvalue(&out.expr);\n+        for (o, output) in ia.outputs.iter().zip(outputs) {\n+          if !o.is_indirect {\n+            this.check_lvalue(output);\n           }\n-          this.visit_expr(&out.expr);\n+          this.visit_expr(output);\n         }\n \n         intravisit::walk_expr(this, expr);"}, {"sha": "06d68af8838994aec797c5d3efca6aef22797f68", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -680,7 +680,11 @@ pub enum Rvalue<'tcx> {\n         from_end: usize,\n     },\n \n-    InlineAsm(InlineAsm),\n+    InlineAsm {\n+        asm: InlineAsm,\n+        outputs: Vec<Lvalue<'tcx>>,\n+        inputs: Vec<Operand<'tcx>>\n+    }\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n@@ -765,7 +769,9 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n             BinaryOp(ref op, ref a, ref b) => write!(fmt, \"{:?}({:?}, {:?})\", op, a, b),\n             UnaryOp(ref op, ref a) => write!(fmt, \"{:?}({:?})\", op, a),\n             Box(ref t) => write!(fmt, \"Box({:?})\", t),\n-            InlineAsm(ref asm) => write!(fmt, \"InlineAsm({:?})\", asm),\n+            InlineAsm { ref asm, ref outputs, ref inputs } => {\n+                write!(fmt, \"asm!({:?} : {:?} : {:?})\", asm, outputs, inputs)\n+            }\n             Slice { ref input, from_start, from_end } =>\n                 write!(fmt, \"{:?}[{:?}..-{:?}]\", input, from_start, from_end),\n "}, {"sha": "c8a2bc440ce1d79ae5cda6de1021bfcf94c8b35f", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -220,7 +220,7 @@ impl<'tcx> Mir<'tcx> {\n                 }\n             }\n             Rvalue::Slice { .. } => None,\n-            Rvalue::InlineAsm(..) => None\n+            Rvalue::InlineAsm { .. } => None\n         }\n     }\n }"}, {"sha": "36d45f0a51ec22fda19aa31c8ef09a9a0d1e5913", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -261,7 +261,14 @@ macro_rules! make_mir_visitor {\n                         });\n                     }\n \n-                    Rvalue::InlineAsm(_) => {\n+                    Rvalue::InlineAsm { ref $($mutability)* outputs,\n+                                        ref $($mutability)* inputs, .. } => {\n+                        for output in & $($mutability)* outputs[..] {\n+                            self.visit_lvalue(output, LvalueContext::Store);\n+                        }\n+                        for input in & $($mutability)* inputs[..] {\n+                            self.visit_operand(input);\n+                        }\n                     }\n                 }\n             }"}, {"sha": "3507a119e5455ebbf12dc79509b01b063001b170", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -279,7 +279,7 @@ mod svh_visitor {\n             ExprBreak(id)            => SawExprBreak(id.map(|id| id.node.name.as_str())),\n             ExprAgain(id)            => SawExprAgain(id.map(|id| id.node.name.as_str())),\n             ExprRet(..)              => SawExprRet,\n-            ExprInlineAsm(ref asm)   => SawExprInlineAsm(asm),\n+            ExprInlineAsm(ref a,_,_) => SawExprInlineAsm(a),\n             ExprStruct(..)           => SawExprStruct,\n             ExprRepeat(..)           => SawExprRepeat,\n         }"}, {"sha": "e65f2fc37debfa813c63f982711ffd7236d4b9e7", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -1107,34 +1107,11 @@ pub fn noop_fold_expr<T: Folder>(Expr { id, node, span, attrs }: Expr, folder: &\n                 respan(folder.new_span(label.span), folder.fold_ident(label.node))\n             })),\n             ExprRet(e) => ExprRet(e.map(|x| folder.fold_expr(x))),\n-            ExprInlineAsm(InlineAsm {\n-                inputs,\n-                outputs,\n-                asm,\n-                asm_str_style,\n-                clobbers,\n-                volatile,\n-                alignstack,\n-                dialect,\n-                expn_id,\n-            }) => ExprInlineAsm(InlineAsm {\n-                inputs: inputs.move_map(|(c, input)| (c, folder.fold_expr(input))),\n-                outputs: outputs.move_map(|out| {\n-                    InlineAsmOutput {\n-                        constraint: out.constraint,\n-                        expr: folder.fold_expr(out.expr),\n-                        is_rw: out.is_rw,\n-                        is_indirect: out.is_indirect,\n-                    }\n-                }),\n-                asm: asm,\n-                asm_str_style: asm_str_style,\n-                clobbers: clobbers,\n-                volatile: volatile,\n-                alignstack: alignstack,\n-                dialect: dialect,\n-                expn_id: expn_id,\n-            }),\n+            ExprInlineAsm(asm, outputs, inputs) => {\n+                ExprInlineAsm(asm,\n+                              outputs.move_map(|x| folder.fold_expr(x)),\n+                              inputs.move_map(|x| folder.fold_expr(x)))\n+            }\n             ExprStruct(path, fields, maybe_expr) => {\n                 ExprStruct(folder.fold_path(path),\n                            fields.move_map(|x| folder.fold_field(x)),"}, {"sha": "43a9ac23a95ed2f0ebb8333150b92d0b2ab6692a", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -793,8 +793,8 @@ pub enum Expr_ {\n     /// A `return`, with an optional value to be returned\n     ExprRet(Option<P<Expr>>),\n \n-    /// Output of the `asm!()` macro\n-    ExprInlineAsm(InlineAsm),\n+    /// Inline assembly (from `asm!`), with its outputs and inputs.\n+    ExprInlineAsm(InlineAsm, Vec<P<Expr>>, Vec<P<Expr>>),\n \n     /// A struct literal expression.\n     ///\n@@ -978,7 +978,6 @@ pub enum Ty_ {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct InlineAsmOutput {\n     pub constraint: InternedString,\n-    pub expr: P<Expr>,\n     pub is_rw: bool,\n     pub is_indirect: bool,\n }\n@@ -988,7 +987,7 @@ pub struct InlineAsm {\n     pub asm: InternedString,\n     pub asm_str_style: StrStyle,\n     pub outputs: HirVec<InlineAsmOutput>,\n-    pub inputs: HirVec<(InternedString, P<Expr>)>,\n+    pub inputs: HirVec<InternedString>,\n     pub clobbers: HirVec<InternedString>,\n     pub volatile: bool,\n     pub alignstack: bool,"}, {"sha": "e031dfc5b161dd9e4c564350fea5329f20b8542f", "filename": "src/librustc_front/intravisit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_front%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_front%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fintravisit.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -798,12 +798,12 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         ExprRet(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);\n         }\n-        ExprInlineAsm(ref ia) => {\n-            for &(_, ref input) in &ia.inputs {\n-                visitor.visit_expr(&input)\n+        ExprInlineAsm(_, ref outputs, ref inputs) => {\n+            for output in outputs {\n+                visitor.visit_expr(output)\n             }\n-            for output in &ia.outputs {\n-                visitor.visit_expr(&output.expr)\n+            for input in inputs {\n+                visitor.visit_expr(input)\n             }\n         }\n     }"}, {"sha": "8aac6356f9d3bf0f30ffceb50a7493012997e2ea", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -1320,14 +1320,11 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                     dialect,\n                     expn_id,\n                 }) => hir::ExprInlineAsm(hir::InlineAsm {\n-                inputs: inputs.iter()\n-                              .map(|&(ref c, ref input)| (c.clone(), lower_expr(lctx, input)))\n-                              .collect(),\n+                inputs: inputs.iter().map(|&(ref c, _)| c.clone()).collect(),\n                 outputs: outputs.iter()\n                                 .map(|out| {\n                                     hir::InlineAsmOutput {\n                                         constraint: out.constraint.clone(),\n-                                        expr: lower_expr(lctx, &out.expr),\n                                         is_rw: out.is_rw,\n                                         is_indirect: out.is_indirect,\n                                     }\n@@ -1340,7 +1337,8 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                 alignstack: alignstack,\n                 dialect: dialect,\n                 expn_id: expn_id,\n-            }),\n+            }, outputs.iter().map(|out| lower_expr(lctx, &out.expr)).collect(),\n+               inputs.iter().map(|&(_, ref input)| lower_expr(lctx, input)).collect()),\n             ExprKind::Struct(ref path, ref fields, ref maybe_expr) => {\n                 hir::ExprStruct(lower_path(lctx, path),\n                                 fields.iter().map(|x| lower_field(lctx, x)).collect(),"}, {"sha": "1ebbbb73e8c994897c2ef09c697341abfd0f03d6", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -1486,12 +1486,13 @@ impl<'a> State<'a> {\n                     _ => (),\n                 }\n             }\n-            hir::ExprInlineAsm(ref a) => {\n+            hir::ExprInlineAsm(ref a, ref outputs, ref inputs) => {\n                 try!(word(&mut self.s, \"asm!\"));\n                 try!(self.popen());\n                 try!(self.print_string(&a.asm, a.asm_str_style));\n                 try!(self.word_space(\":\"));\n \n+                let mut out_idx = 0;\n                 try!(self.commasep(Inconsistent, &a.outputs, |s, out| {\n                     match out.constraint.slice_shift_char() {\n                         Some(('=', operand)) if out.is_rw => {\n@@ -1500,18 +1501,21 @@ impl<'a> State<'a> {\n                         _ => try!(s.print_string(&out.constraint, ast::StrStyle::Cooked)),\n                     }\n                     try!(s.popen());\n-                    try!(s.print_expr(&out.expr));\n+                    try!(s.print_expr(&outputs[out_idx]));\n                     try!(s.pclose());\n+                    out_idx += 1;\n                     Ok(())\n                 }));\n                 try!(space(&mut self.s));\n                 try!(self.word_space(\":\"));\n \n-                try!(self.commasep(Inconsistent, &a.inputs, |s, &(ref co, ref o)| {\n+                let mut in_idx = 0;\n+                try!(self.commasep(Inconsistent, &a.inputs, |s, co| {\n                     try!(s.print_string(&co, ast::StrStyle::Cooked));\n                     try!(s.popen());\n-                    try!(s.print_expr(&o));\n+                    try!(s.print_expr(&inputs[in_idx]));\n                     try!(s.pclose());\n+                    in_idx += 1;\n                     Ok(())\n                 }));\n                 try!(space(&mut self.s));"}, {"sha": "4c0e9b98d9a6e324bebd8e4f9de0a90d0a9a2107", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -39,8 +39,20 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             ExprKind::Scope { extent, value } => {\n                 this.in_scope(extent, block, |this| this.as_rvalue(block, value))\n             }\n-            ExprKind::InlineAsm { asm } => {\n-                block.and(Rvalue::InlineAsm(asm.clone()))\n+            ExprKind::InlineAsm { asm, outputs, inputs } => {\n+                let outputs = outputs.into_iter().map(|output| {\n+                    unpack!(block = this.as_lvalue(block, output))\n+                }).collect();\n+\n+                let inputs = inputs.into_iter().map(|input| {\n+                    unpack!(block = this.as_operand(block, input))\n+                }).collect();\n+\n+                block.and(Rvalue::InlineAsm {\n+                    asm: asm.clone(),\n+                    outputs: outputs,\n+                    inputs: inputs\n+                })\n             }\n             ExprKind::Repeat { value, count } => {\n                 let value_operand = unpack!(block = this.as_operand(block, value));"}, {"sha": "204b1c1d1e0c043ba7c3869d6c8653f12891567c", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -337,8 +337,12 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                 convert_path_expr(cx, self)\n             }\n \n-            hir::ExprInlineAsm(ref asm) => {\n-                ExprKind::InlineAsm { asm: asm }\n+            hir::ExprInlineAsm(ref asm, ref outputs, ref inputs) => {\n+                ExprKind::InlineAsm {\n+                    asm: asm,\n+                    outputs: outputs.to_ref(),\n+                    inputs: inputs.to_ref()\n+                }\n             }\n \n             // Now comes the rote stuff:"}, {"sha": "78c438df6f87adac858c6e0d93e6c69d3aff42b4", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -230,6 +230,8 @@ pub enum ExprKind<'tcx> {\n     },\n     InlineAsm {\n         asm: &'tcx hir::InlineAsm,\n+        outputs: Vec<ExprRef<'tcx>>,\n+        inputs: Vec<ExprRef<'tcx>>\n     },\n }\n "}, {"sha": "9ac3749589e90df0a9989ea73ea918afa9524551", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -82,7 +82,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n             Rvalue::BinaryOp(_, _, _) |\n             Rvalue::UnaryOp(_, _) |\n             Rvalue::Slice { input: _, from_start: _, from_end: _ } |\n-            Rvalue::InlineAsm(_) => {},\n+            Rvalue::InlineAsm {..} => {},\n \n             Rvalue::Repeat(_, ref mut value) => value.ty = self.tcx.erase_regions(&value.ty),\n             Rvalue::Ref(ref mut region, _, _) => *region = ty::ReStatic,"}, {"sha": "74ede89be556221ede4dbcffb2a34483823b90cc", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -756,7 +756,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n         // Expressions with side-effects.\n         hir::ExprAssign(..) |\n         hir::ExprAssignOp(..) |\n-        hir::ExprInlineAsm(_) => {\n+        hir::ExprInlineAsm(..) => {\n             v.add_qualif(ConstQualif::NOT_CONST);\n             if v.mode != Mode::Var {\n                 span_err!(v.tcx.sess, e.span, E0019,"}, {"sha": "4d0c55131f765c2a26e7f971d5ba82c4536798ef", "filename": "src/librustc_trans/trans/asm.rs", "status": "modified", "additions": 35, "deletions": 84, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fasm.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -11,12 +11,10 @@\n //! # Translation of inline assembly.\n \n use llvm::{self, ValueRef};\n+use trans::base;\n use trans::build::*;\n use trans::common::*;\n-use trans::cleanup;\n-use trans::cleanup::CleanupMethods;\n-use trans::datum::{Datum, Expr};\n-use trans::expr;\n+use trans::datum::{Datum, Lvalue};\n use trans::type_of;\n use trans::type_::Type;\n \n@@ -26,75 +24,35 @@ use syntax::ast::AsmDialect;\n use libc::{c_uint, c_char};\n \n // Take an inline assembly expression and splat it out via LLVM\n-pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n-                                    -> Block<'blk, 'tcx> {\n-    let fcx = bcx.fcx;\n-    let mut bcx = bcx;\n-    let mut constraints = Vec::new();\n-    let mut output_types = Vec::new();\n-\n-    let temp_scope = fcx.push_custom_cleanup_scope();\n-\n-    let take_datum = |mut bcx: Block<'blk, 'tcx>,\n-                      arg_datum: Datum<'tcx, Expr>,\n-                      llargs: &mut Vec<ValueRef>|\n-                      -> Block<'blk, 'tcx> {\n-        // Make this an rvalue, since we are going to be\n-        // passing ownership.\n-        let arg_datum = unpack_datum!(\n-            bcx, arg_datum.to_rvalue_datum(bcx, \"arg\"));\n-\n-        // Now that arg_datum is owned, get it into the appropriate\n-        // mode (ref vs value).\n-        let arg_datum = unpack_datum!(\n-            bcx, arg_datum.to_appropriate_datum(bcx));\n-\n-        // Technically, ownership of val passes to the callee.\n-        // However, we must cleanup should we panic before the\n-        // callee is actually invoked.\n-        let val = arg_datum.add_clean(bcx.fcx,\n-            cleanup::CustomScope(temp_scope));\n-        llargs.push(val);\n-        bcx\n-    };\n-\n-    let mut ext_inputs = Vec::new();\n-    let mut ext_constraints = Vec::new();\n+pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n+                                    ia: &ast::InlineAsm,\n+                                    outputs: Vec<Datum<'tcx, Lvalue>>,\n+                                    mut inputs: Vec<ValueRef>) {\n+    let mut ext_constraints = vec![];\n+    let mut output_types = vec![];\n \n     // Prepare the output operands\n-    let mut outputs = Vec::new();\n-    let mut inputs = Vec::new();\n-    for (i, out) in ia.outputs.iter().enumerate() {\n-        constraints.push(out.constraint.clone());\n-\n-        let out_datum = unpack_datum!(bcx, expr::trans(bcx, &out.expr));\n+    let mut indirect_outputs = vec![];\n+    for (i, (out, out_datum)) in ia.outputs.iter().zip(&outputs).enumerate() {\n+        let val = if out.is_rw || out.is_indirect {\n+            Some(base::load_ty(bcx, out_datum.val, out_datum.ty))\n+        } else {\n+            None\n+        };\n+        if out.is_rw {\n+            inputs.push(val.unwrap());\n+            ext_constraints.push(i.to_string());\n+        }\n         if out.is_indirect {\n-            bcx = take_datum(bcx, out_datum, &mut inputs);\n-            if out.is_rw {\n-                ext_inputs.push(*inputs.last().unwrap());\n-                ext_constraints.push(i.to_string());\n-            }\n+            indirect_outputs.push(val.unwrap());\n         } else {\n             output_types.push(type_of::type_of(bcx.ccx(), out_datum.ty));\n-            outputs.push(out_datum.val);\n-            if out.is_rw {\n-                bcx = take_datum(bcx, out_datum, &mut ext_inputs);\n-                ext_constraints.push(i.to_string());\n-            }\n         }\n     }\n-\n-    // Now the input operands\n-    for &(ref c, ref input) in &ia.inputs {\n-        constraints.push((*c).clone());\n-\n-        let in_datum = unpack_datum!(bcx, expr::trans(bcx, &input));\n-        bcx = take_datum(bcx, in_datum, &mut inputs);\n+    if !indirect_outputs.is_empty() {\n+        indirect_outputs.extend_from_slice(&inputs);\n+        inputs = indirect_outputs;\n     }\n-    inputs.extend_from_slice(&ext_inputs[..]);\n-\n-    // no failure occurred preparing operands, no need to cleanup\n-    fcx.pop_custom_cleanup_scope(temp_scope);\n \n     let clobbers = ia.clobbers.iter()\n                               .map(|s| format!(\"~{{{}}}\", &s));\n@@ -106,19 +64,18 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n         _                => Vec::new()\n     };\n \n-    let all_constraints= constraints.iter()\n-                                    .map(|s| s.to_string())\n-                                    .chain(ext_constraints)\n-                                    .chain(clobbers)\n-                                    .chain(arch_clobbers.iter()\n-                                               .map(|s| s.to_string()))\n-                                    .collect::<Vec<String>>()\n-                                    .join(\",\");\n+    let all_constraints =\n+        ia.outputs.iter().map(|out| out.constraint.to_string())\n+          .chain(ia.inputs.iter().map(|s| s.to_string()))\n+          .chain(ext_constraints)\n+          .chain(clobbers)\n+          .chain(arch_clobbers.iter().map(|s| s.to_string()))\n+          .collect::<Vec<String>>().join(\",\");\n \n     debug!(\"Asm Constraints: {}\", &all_constraints[..]);\n \n     // Depending on how many outputs we have, the return type is different\n-    let num_outputs = outputs.len();\n+    let num_outputs = output_types.len();\n     let output_type = match num_outputs {\n         0 => Type::void(bcx.ccx()),\n         1 => output_types[0],\n@@ -142,13 +99,10 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n                           dialect);\n \n     // Again, based on how many outputs we have\n-    if num_outputs == 1 {\n-        Store(bcx, r, outputs[0]);\n-    } else {\n-        for (i, o) in outputs.iter().enumerate() {\n-            let v = ExtractValue(bcx, r, i);\n-            Store(bcx, v, *o);\n-        }\n+    let outputs = ia.outputs.iter().zip(&outputs).filter(|&(ref o, _)| !o.is_indirect);\n+    for (i, (_, datum)) in outputs.enumerate() {\n+        let v = if num_outputs == 1 { r } else { ExtractValue(bcx, r, i) };\n+        Store(bcx, v, datum.val);\n     }\n \n     // Store expn_id in a metadata node so we can map LLVM errors\n@@ -163,7 +117,4 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n         llvm::LLVMSetMetadata(r, kind,\n             llvm::LLVMMDNodeInContext(bcx.ccx().llcx(), &val, 1));\n     }\n-\n-    return bcx;\n-\n }"}, {"sha": "41fed12e7bf3cc7bd847434ab206041f5875c5fe", "filename": "src/librustc_trans/trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -468,16 +468,13 @@ fn walk_expr(cx: &CrateContext,\n             }\n         }\n \n-        hir::ExprInlineAsm(hir::InlineAsm { ref inputs,\n-                                            ref outputs,\n-                                            .. }) => {\n-            // inputs, outputs: Vec<(String, P<Expr>)>\n-            for &(_, ref exp) in inputs {\n-                walk_expr(cx, &exp, scope_stack, scope_map);\n+        hir::ExprInlineAsm(_, ref outputs, ref inputs) => {\n+            for output in outputs {\n+                walk_expr(cx, output, scope_stack, scope_map);\n             }\n \n-            for out in outputs {\n-                walk_expr(cx, &out.expr, scope_stack, scope_map);\n+            for input in inputs {\n+                walk_expr(cx, input, scope_stack, scope_map);\n             }\n         }\n     }"}, {"sha": "abcd703f33ba39f626de0e780e328c899e5dc96b", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -1037,8 +1037,18 @@ fn trans_rvalue_stmt_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 trans_assign_op(bcx, expr, op, &dst, &src)\n             }\n         }\n-        hir::ExprInlineAsm(ref a) => {\n-            asm::trans_inline_asm(bcx, a)\n+        hir::ExprInlineAsm(ref a, ref outputs, ref inputs) => {\n+            let outputs = outputs.iter().map(|output| {\n+                let out_datum = unpack_datum!(bcx, trans(bcx, output));\n+                unpack_datum!(bcx, out_datum.to_lvalue_datum(bcx, \"out\", expr.id))\n+            }).collect();\n+            let inputs = inputs.iter().map(|input| {\n+                let input = unpack_datum!(bcx, trans(bcx, input));\n+                let input = unpack_datum!(bcx, input.to_rvalue_datum(bcx, \"in\"));\n+                input.to_llscalarish(bcx)\n+            }).collect();\n+            asm::trans_inline_asm(bcx, a, outputs, inputs);\n+            bcx\n         }\n         _ => {\n             bcx.tcx().sess.span_bug("}, {"sha": "17c8aef244bb95c04a8c6d2d3505864698bda25d", "filename": "src/librustc_trans/trans/mir/rvalue.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -19,6 +19,7 @@ use trans::asm;\n use trans::base;\n use trans::callee::Callee;\n use trans::common::{self, C_uint, BlockAndBuilder, Result};\n+use trans::datum::{Datum, Lvalue};\n use trans::debuginfo::DebugLoc;\n use trans::declare;\n use trans::adt;\n@@ -193,10 +194,25 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 bcx\n             }\n \n-            mir::Rvalue::InlineAsm(ref inline_asm) => {\n-                bcx.map_block(|bcx| {\n-                    asm::trans_inline_asm(bcx, inline_asm)\n-                })\n+            mir::Rvalue::InlineAsm { ref asm, ref outputs, ref inputs } => {\n+                let outputs = outputs.iter().map(|output| {\n+                    let lvalue = self.trans_lvalue(&bcx, output);\n+                    Datum::new(lvalue.llval, lvalue.ty.to_ty(bcx.tcx()),\n+                               Lvalue::new(\"out\"))\n+                }).collect();\n+\n+                let input_vals = inputs.iter().map(|input| {\n+                    self.trans_operand(&bcx, input).immediate()\n+                }).collect();\n+\n+                bcx.with_block(|bcx| {\n+                    asm::trans_inline_asm(bcx, asm, outputs, input_vals);\n+                });\n+\n+                for input in inputs {\n+                    self.set_operand_dropped(&bcx, input);\n+                }\n+                bcx\n             }\n \n             _ => {\n@@ -472,7 +488,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n             mir::Rvalue::Repeat(..) |\n             mir::Rvalue::Aggregate(..) |\n             mir::Rvalue::Slice { .. } |\n-            mir::Rvalue::InlineAsm(..) => {\n+            mir::Rvalue::InlineAsm { .. } => {\n                 bcx.tcx().sess.bug(&format!(\"cannot generate operand from rvalue {:?}\", rvalue));\n             }\n         }\n@@ -596,7 +612,7 @@ pub fn rvalue_creates_operand<'tcx>(rvalue: &mir::Rvalue<'tcx>) -> bool {\n         mir::Rvalue::Repeat(..) |\n         mir::Rvalue::Aggregate(..) |\n         mir::Rvalue::Slice { .. } |\n-        mir::Rvalue::InlineAsm(..) =>\n+        mir::Rvalue::InlineAsm { .. } =>\n             false,\n     }\n "}, {"sha": "903fc458d818564c891688938095021698c30b94", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856185dbb2f4a57dc865c6dc3c856268c7efa79a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=856185dbb2f4a57dc865c6dc3c856268c7efa79a", "patch": "@@ -3416,12 +3416,12 @@ fn check_expr_with_expectation_and_lvalue_pref<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n               fcx.add_wf_bounds(&item_substs.substs, expr);\n           });\n       }\n-      hir::ExprInlineAsm(ref ia) => {\n-          for &(_, ref input) in &ia.inputs {\n-              check_expr(fcx, &input);\n+      hir::ExprInlineAsm(_, ref outputs, ref inputs) => {\n+          for output in outputs {\n+              check_expr(fcx, output);\n           }\n-          for out in &ia.outputs {\n-              check_expr(fcx, &out.expr);\n+          for input in inputs {\n+              check_expr(fcx, input);\n           }\n           fcx.write_nil(id);\n       }"}]}