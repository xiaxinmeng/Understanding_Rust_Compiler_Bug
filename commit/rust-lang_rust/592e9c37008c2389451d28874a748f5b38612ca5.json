{"sha": "592e9c37008c2389451d28874a748f5b38612ca5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MmU5YzM3MDA4YzIzODk0NTFkMjg4NzRhNzQ4ZjViMzg2MTJjYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-03T23:26:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-03T23:26:38Z"}, "message": "Auto merge of #69678 - Dylan-DPC:rollup-yoaueud, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #69565 (miri engine: turn some debug_assert into assert)\n - #69621 (use question mark operator in a few places.)\n - #69650 (cleanup more iterator usages (and other things))\n - #69653 (use conditions directly)\n - #69665 (Invoke OptimizerLastEPCallbacks in PreLinkThinLTO)\n - #69670 (Add explanation for E0379)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "f1e9821969ab5becd7b7f5ffc0539f35384ea960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1e9821969ab5becd7b7f5ffc0539f35384ea960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/592e9c37008c2389451d28874a748f5b38612ca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/592e9c37008c2389451d28874a748f5b38612ca5", "html_url": "https://github.com/rust-lang/rust/commit/592e9c37008c2389451d28874a748f5b38612ca5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/592e9c37008c2389451d28874a748f5b38612ca5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ad62488258972bdb0e2df225d100f99ef58dbad", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad62488258972bdb0e2df225d100f99ef58dbad", "html_url": "https://github.com/rust-lang/rust/commit/4ad62488258972bdb0e2df225d100f99ef58dbad"}, {"sha": "f8c026b47925b8cf004cc67819e2f1091470faee", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8c026b47925b8cf004cc67819e2f1091470faee", "html_url": "https://github.com/rust-lang/rust/commit/f8c026b47925b8cf004cc67819e2f1091470faee"}], "stats": {"total": 156, "additions": 100, "deletions": 56}, "files": [{"sha": "362755f8b7f63d36b16ef1627e4ec81909f80234", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -1191,7 +1191,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n         let right_len = right_node.len();\n \n         // necessary for correctness, but in a private module\n-        assert!(left_len + right_len + 1 <= CAPACITY);\n+        assert!(left_len + right_len < CAPACITY);\n \n         unsafe {\n             ptr::write("}, {"sha": "02dc9b8f82ed22dd290a911c60401f11bcdda3f0", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -1894,9 +1894,7 @@ where\n             let to_skip = self.n;\n             self.n = 0;\n             // nth(n) skips n+1\n-            if self.iter.nth(to_skip - 1).is_none() {\n-                return None;\n-            }\n+            self.iter.nth(to_skip - 1)?;\n         }\n         self.iter.nth(n)\n     }\n@@ -1916,9 +1914,7 @@ where\n     fn last(mut self) -> Option<I::Item> {\n         if self.n > 0 {\n             // nth(n) skips n+1\n-            if self.iter.nth(self.n - 1).is_none() {\n-                return None;\n-            }\n+            self.iter.nth(self.n - 1)?;\n         }\n         self.iter.last()\n     }"}, {"sha": "bd26e02efb749dcada1e53d9a15ae72a7a58df30", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -338,9 +338,8 @@ impl<'hir> Map<'hir> {\n             Node::Variant(_) => DefKind::Variant,\n             Node::Ctor(variant_data) => {\n                 // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?\n-                if variant_data.ctor_hir_id().is_none() {\n-                    return None;\n-                }\n+                variant_data.ctor_hir_id()?;\n+\n                 let ctor_of = match self.find(self.get_parent_node(hir_id)) {\n                     Some(Node::Item(..)) => def::CtorOf::Struct,\n                     Some(Node::Variant(..)) => def::CtorOf::Variant,"}, {"sha": "36818020569b0455e184e44425b9f549632cbbd4", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -189,7 +189,7 @@ impl<'tcx> Body<'tcx> {\n     ) -> Self {\n         // We need `arg_count` locals, and one for the return place.\n         assert!(\n-            local_decls.len() >= arg_count + 1,\n+            local_decls.len() > arg_count,\n             \"expected at least {} locals, got {}\",\n             arg_count + 1,\n             local_decls.len()"}, {"sha": "4014d1d8ae2501c8c798c5722b2fd20f45014604", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -115,9 +115,7 @@ impl<'tcx> Instance<'tcx> {\n         }\n \n         // If this a non-generic instance, it cannot be a shared monomorphization.\n-        if self.substs.non_erasable_generics().next().is_none() {\n-            return None;\n-        }\n+        self.substs.non_erasable_generics().next()?;\n \n         match self.def {\n             InstanceDef::Item(def_id) => tcx"}, {"sha": "a552f2cdb78aaf268a4d11bdfc0f909dc9632e67", "filename": "src/librustc_codegen_llvm/va_arg.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fva_arg.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -117,8 +117,7 @@ pub(super) fn emit_va_arg(\n         // Windows x86_64\n         (\"x86_64\", true) => {\n             let target_ty_size = bx.cx.size_of(target_ty).bytes();\n-            let indirect =\n-                if target_ty_size > 8 || !target_ty_size.is_power_of_two() { true } else { false };\n+            let indirect: bool = target_ty_size > 8 || !target_ty_size.is_power_of_two();\n             emit_ptr_va_arg(bx, addr, target_ty, indirect, Align::from_bytes(8).unwrap(), false)\n         }\n         // For all other architecture/OS combinations fall back to using"}, {"sha": "0dd2f029e8d32ac30ac35c9e6f47d8be73f5f4bc", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -186,7 +186,7 @@ pub fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> (PathB\n     if flavor == LinkerFlavor::Msvc && t.target_vendor == \"uwp\" {\n         if let Some(ref tool) = msvc_tool {\n             let original_path = tool.path();\n-            if let Some(ref root_lib_path) = original_path.ancestors().skip(4).next() {\n+            if let Some(ref root_lib_path) = original_path.ancestors().nth(4) {\n                 let arch = match t.arch.as_str() {\n                     \"x86_64\" => Some(\"x64\".to_string()),\n                     \"x86\" => Some(\"x86\".to_string()),"}, {"sha": "930204847ecd872347c7d34077848ebf52f70288", "filename": "src/librustc_error_codes/error_codes/E0379.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_error_codes%2Ferror_codes%2FE0379.md", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_error_codes%2Ferror_codes%2FE0379.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0379.md?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -1,3 +1,15 @@\n+A trait method was declared const.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0379\n+#![feature(const_fn)]\n+\n+trait Foo {\n+    const fn bar() -> u32; // error!\n+}\n+```\n+\n Trait methods cannot be declared `const` by design. For more information, see\n [RFC 911].\n "}, {"sha": "d12dedf9e0c7aff343f6f8aceb147a2b526a3f97", "filename": "src/librustc_expand/mbe/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -119,9 +119,9 @@ pub(super) fn transcribe(\n         let tree = if let Some(tree) = stack.last_mut().unwrap().next() {\n             // If it still has a TokenTree we have not looked at yet, use that tree.\n             tree\n-        }\n-        // The else-case never produces a value for `tree` (it `continue`s or `return`s).\n-        else {\n+        } else {\n+            // This else-case never produces a value for `tree` (it `continue`s or `return`s).\n+\n             // Otherwise, if we have just reached the end of a sequence and we can keep repeating,\n             // go back to the beginning of the sequence.\n             if let Frame::Sequence { idx, sep, .. } = stack.last_mut().unwrap() {"}, {"sha": "b1861acec04263fc5c71cab32ec3d2a4d5e4f1b1", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -13,9 +13,7 @@ pub fn copy_cgu_workproducts_to_incr_comp_cache_dir(\n     files: &[(WorkProductFileKind, PathBuf)],\n ) -> Option<(WorkProductId, WorkProduct)> {\n     debug!(\"copy_cgu_workproducts_to_incr_comp_cache_dir({:?},{:?})\", cgu_name, files);\n-    if sess.opts.incremental.is_none() {\n-        return None;\n-    }\n+    sess.opts.incremental.as_ref()?;\n \n     let saved_files = files\n         .iter()"}, {"sha": "d05955fb858c0c3eda3c309f5a80a1527db5a94d", "filename": "src/librustc_infer/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -401,9 +401,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n             let refs_number =\n                 snippet.chars().filter(|c| !c.is_whitespace()).take_while(|c| *c == '&').count();\n-            if let Some('\\'') =\n-                snippet.chars().filter(|c| !c.is_whitespace()).skip(refs_number).next()\n-            {\n+            if let Some('\\'') = snippet.chars().filter(|c| !c.is_whitespace()).nth(refs_number) {\n                 // Do not suggest removal of borrow from type arguments.\n                 return;\n             }\n@@ -464,9 +462,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n             let refs_number =\n                 snippet.chars().filter(|c| !c.is_whitespace()).take_while(|c| *c == '&').count();\n-            if let Some('\\'') =\n-                snippet.chars().filter(|c| !c.is_whitespace()).skip(refs_number).next()\n-            {\n+            if let Some('\\'') = snippet.chars().filter(|c| !c.is_whitespace()).nth(refs_number) {\n                 // Do not suggest removal of borrow from type arguments.\n                 return;\n             }"}, {"sha": "3cbb0667ff3923f051c45ac051c2eb995b5e0254", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -202,7 +202,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Char => {\n                 // `u8` to `char` cast\n-                debug_assert_eq!(v as u8 as u128, v);\n+                assert_eq!(v as u8 as u128, v);\n                 Ok(Scalar::from_uint(v, Size::from_bytes(4)))\n             }\n "}, {"sha": "f2ee5e047a88e5b3366f93dcbcd2cec366c094d2", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -234,7 +234,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             BitXor => (Scalar::from_uint(l ^ r, size), left_layout.ty),\n \n             Add | Sub | Mul | Rem | Div => {\n-                debug_assert!(!left_layout.abi.is_signed());\n+                assert!(!left_layout.abi.is_signed());\n                 let op: fn(u128, u128) -> (u128, bool) = match bin_op {\n                     Add => u128::overflowing_add,\n                     Sub => u128::overflowing_sub,"}, {"sha": "f298a6677d6dcada8beb1a87844ac8c0497b98fd", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -287,7 +287,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.eval_terminator(terminator)?;\n         if !self.stack.is_empty() {\n             // This should change *something*\n-            debug_assert!(self.cur_frame() != old_stack || self.frame().block != old_bb);\n+            assert!(self.cur_frame() != old_stack || self.frame().block != old_bb);\n             if let Some(block) = self.frame().block {\n                 info!(\"// executing {:?}\", block);\n             }"}, {"sha": "08d4ae34afbfa3dc8a65b045d4ebc003599d259d", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -172,7 +172,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n         let caller_arg = caller_arg.next().ok_or_else(|| err_unsup!(FunctionArgCountMismatch))?;\n         if rust_abi {\n-            debug_assert!(!caller_arg.layout.is_zst(), \"ZSTs must have been already filtered out\");\n+            assert!(!caller_arg.layout.is_zst(), \"ZSTs must have been already filtered out\");\n         }\n         // Now, check\n         if !Self::check_argument_compat(rust_abi, caller_arg.layout, callee_arg.layout) {"}, {"sha": "50ba3e938957a8145b594dfdd029f1520f966977", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -144,16 +144,16 @@ fn wrapping_range_contains(r: &RangeInclusive<u128>, test: u128) -> bool {\n // \"expected something <in the given range>\" makes sense.\n fn wrapping_range_format(r: &RangeInclusive<u128>, max_hi: u128) -> String {\n     let (lo, hi) = r.clone().into_inner();\n-    debug_assert!(hi <= max_hi);\n+    assert!(hi <= max_hi);\n     if lo > hi {\n         format!(\"less or equal to {}, or greater or equal to {}\", hi, lo)\n     } else if lo == hi {\n         format!(\"equal to {}\", lo)\n     } else if lo == 0 {\n-        debug_assert!(hi < max_hi, \"should not be printing if the range covers everything\");\n+        assert!(hi < max_hi, \"should not be printing if the range covers everything\");\n         format!(\"less or equal to {}\", hi)\n     } else if hi == max_hi {\n-        debug_assert!(lo > 0, \"should not be printing if the range covers everything\");\n+        assert!(lo > 0, \"should not be printing if the range covers everything\");\n         format!(\"greater or equal to {}\", lo)\n     } else {\n         format!(\"in the range {:?}\", r)"}, {"sha": "862a7ef1e73c091a58f5c2dc1b494f1b08f0ad13", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -824,11 +824,8 @@ fn find_vtable_types_for_unsizing<'tcx>(\n         (&ty::Adt(source_adt_def, source_substs), &ty::Adt(target_adt_def, target_substs)) => {\n             assert_eq!(source_adt_def, target_adt_def);\n \n-            let kind = monomorphize::custom_coerce_unsize_info(tcx, source_ty, target_ty);\n-\n-            let coerce_index = match kind {\n-                CustomCoerceUnsized::Struct(i) => i,\n-            };\n+            let CustomCoerceUnsized::Struct(coerce_index) =\n+                monomorphize::custom_coerce_unsize_info(tcx, source_ty, target_ty);\n \n             let source_fields = &source_adt_def.non_enum_variant().fields;\n             let target_fields = &target_adt_def.non_enum_variant().fields;"}, {"sha": "e0bbaf730a537605fee25682b3a45cd0b9a1643b", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -689,7 +689,7 @@ impl SourceMap {\n                 whitespace_found = true;\n             }\n \n-            if whitespace_found && !c.is_whitespace() { false } else { true }\n+            !whitespace_found || c.is_whitespace()\n         })\n     }\n "}, {"sha": "3a2a315a1027dc6b7999095804f7379e761425f5", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -236,8 +236,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     //\n                     // FIXME? Other potential candidate methods: `as_ref` and\n                     // `as_mut`?\n-                    .find(|a| a.check_name(sym::rustc_conversion_suggestion))\n-                    .is_some()\n+                    .any(|a| a.check_name(sym::rustc_conversion_suggestion))\n         });\n \n         methods"}, {"sha": "778eee3586b4bc69644280bb3911e3ce01c1b971", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -23,14 +23,11 @@ impl InherentOverlapChecker<'tcx> {\n         let impl_items2 = self.tcx.associated_items(impl2);\n \n         for item1 in impl_items1.in_definition_order() {\n-            let collision = impl_items2\n-                .filter_by_name_unhygienic(item1.ident.name)\n-                .find(|item2| {\n-                    // Symbols and namespace match, compare hygienically.\n-                    item1.kind.namespace() == item2.kind.namespace()\n-                        && item1.ident.modern() == item2.ident.modern()\n-                })\n-                .is_some();\n+            let collision = impl_items2.filter_by_name_unhygienic(item1.ident.name).any(|item2| {\n+                // Symbols and namespace match, compare hygienically.\n+                item1.kind.namespace() == item2.kind.namespace()\n+                    && item1.ident.modern() == item2.ident.modern()\n+            });\n \n             if collision {\n                 return true;"}, {"sha": "90d24d20737db3b1fb7bafeae97f61acd9b1e70d", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -868,15 +868,23 @@ LLVMRustOptimizeWithNewPassManager(\n     } else {\n       for (const auto &C : PipelineStartEPCallbacks)\n         PB.registerPipelineStartEPCallback(C);\n-      for (const auto &C : OptimizerLastEPCallbacks)\n-        PB.registerOptimizerLastEPCallback(C);\n+      if (OptStage != LLVMRustOptStage::PreLinkThinLTO) {\n+        for (const auto &C : OptimizerLastEPCallbacks)\n+          PB.registerOptimizerLastEPCallback(C);\n+      }\n \n       switch (OptStage) {\n       case LLVMRustOptStage::PreLinkNoLTO:\n         MPM = PB.buildPerModuleDefaultPipeline(OptLevel, DebugPassManager);\n         break;\n       case LLVMRustOptStage::PreLinkThinLTO:\n         MPM = PB.buildThinLTOPreLinkDefaultPipeline(OptLevel, DebugPassManager);\n+        if (!OptimizerLastEPCallbacks.empty()) {\n+          FunctionPassManager FPM(DebugPassManager);\n+          for (const auto &C : OptimizerLastEPCallbacks)\n+            C(FPM, OptLevel);\n+          MPM.addPass(createModuleToFunctionPassAdaptor(std::move(FPM)));\n+        }\n         break;\n       case LLVMRustOptStage::PreLinkFatLTO:\n         MPM = PB.buildLTOPreLinkDefaultPipeline(OptLevel, DebugPassManager);"}, {"sha": "05b4ab5653cc843e897838430312200385829ccb", "filename": "src/test/codegen/sanitizer-recover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -14,8 +14,8 @@\n //[MSAN-RECOVER-LTO] compile-flags: -Zsanitizer=memory  -Zsanitizer-recover=memory -C lto=fat\n //\n // MSAN-NOT:         @__msan_keep_going\n-// MSAN-RECOVER:     @__msan_keep_going = weak_odr {{.*}} constant i32 1\n-// MSAN-RECOVER-LTO: @__msan_keep_going = weak_odr {{.*}} constant i32 1\n+// MSAN-RECOVER:     @__msan_keep_going = weak_odr {{.*}}constant i32 1\n+// MSAN-RECOVER-LTO: @__msan_keep_going = weak_odr {{.*}}constant i32 1\n \n // ASAN-LABEL: define i32 @penguin(\n // ASAN:         call void @__asan_report_load4(i64 %0)"}, {"sha": "61d5d51cfd2483720c81de0fdf36235b153501f4", "filename": "src/test/ui/sanitize/new-llvm-pass-manager-thin-lto.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -0,0 +1,27 @@\n+// Regression test for sanitizer function instrumentation passes not\n+// being run when compiling with new LLVM pass manager and ThinLTO.\n+// Note: The issue occured only on non-zero opt-level.\n+//\n+// min-llvm-version 9.0\n+// needs-sanitizer-support\n+// only-x86_64\n+//\n+// no-prefer-dynamic\n+// revisions: opt0 opt1\n+// compile-flags: -Znew-llvm-pass-manager=yes -Zsanitizer=address -Clto=thin\n+//[opt0]compile-flags: -Copt-level=0\n+//[opt1]compile-flags: -Copt-level=1\n+// run-fail\n+// error-pattern: ERROR: AddressSanitizer: stack-use-after-scope\n+\n+static mut P: *mut usize = std::ptr::null_mut();\n+\n+fn main() {\n+    unsafe {\n+        {\n+            let mut x = 0;\n+            P = &mut x;\n+        }\n+        std::ptr::write_volatile(P, 123);\n+    }\n+}"}, {"sha": "6c478f7e29da479e2078f3c995ca2c0c45710372", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/592e9c37008c2389451d28874a748f5b38612ca5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e9c37008c2389451d28874a748f5b38612ca5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=592e9c37008c2389451d28874a748f5b38612ca5", "patch": "@@ -109,6 +109,24 @@ fn no_system_llvm() {\n     assert!(parse_rs(&config, \"// no-system-llvm\").ignore);\n }\n \n+#[test]\n+fn llvm_version() {\n+    let mut config = config();\n+\n+    config.llvm_version = Some(\"8.1.2-rust\".to_owned());\n+    assert!(parse_rs(&config, \"// min-llvm-version 9.0\").ignore);\n+\n+    config.llvm_version = Some(\"9.0.1-rust-1.43.0-dev\".to_owned());\n+    assert!(parse_rs(&config, \"// min-llvm-version 9.2\").ignore);\n+\n+    config.llvm_version = Some(\"9.3.1-rust-1.43.0-dev\".to_owned());\n+    assert!(!parse_rs(&config, \"// min-llvm-version 9.2\").ignore);\n+\n+    // FIXME.\n+    // config.llvm_version = Some(\"10.0.0-rust\".to_owned());\n+    // assert!(!parse_rs(&config, \"// min-llvm-version 9.0\").ignore);\n+}\n+\n #[test]\n fn ignore_target() {\n     let mut config = config();"}]}