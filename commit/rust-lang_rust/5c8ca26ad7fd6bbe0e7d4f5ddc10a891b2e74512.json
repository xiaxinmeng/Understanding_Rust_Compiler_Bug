{"sha": "5c8ca26ad7fd6bbe0e7d4f5ddc10a891b2e74512", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjOGNhMjZhZDdmZDZiYmUwZTdkNGY1ZGRjMTBhODkxYjJlNzQ1MTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-30T23:37:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-30T23:37:41Z"}, "message": "std: Always check for EDEADLK in rwlocks on unix\n\nApparently implementations are allowed to return EDEADLK instead of blocking\nforever, in which case this can lead to unsafety in the `RwLock` primitive\nexposed by the standard library. A debug-build of the standard library would\nhave caught this error (due to the debug assert), but we don't ship debug\nbuilds right now.\n\nThis commit adds explicit checks for the EDEADLK error code and triggers a panic\nto ensure the call does not succeed.\n\nCloses #25012", "tree": {"sha": "35071476a6b4e6b2d4d7899b300cc61d46715bf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35071476a6b4e6b2d4d7899b300cc61d46715bf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c8ca26ad7fd6bbe0e7d4f5ddc10a891b2e74512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c8ca26ad7fd6bbe0e7d4f5ddc10a891b2e74512", "html_url": "https://github.com/rust-lang/rust/commit/5c8ca26ad7fd6bbe0e7d4f5ddc10a891b2e74512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c8ca26ad7fd6bbe0e7d4f5ddc10a891b2e74512/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4288a08e9a640e2b24d2f5974f6785f0ab82694b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4288a08e9a640e2b24d2f5974f6785f0ab82694b", "html_url": "https://github.com/rust-lang/rust/commit/4288a08e9a640e2b24d2f5974f6785f0ab82694b"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "7bb9fb68c14f0a4217ca2da3c6c590f65608d838", "filename": "src/libstd/sys/unix/rwlock.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5c8ca26ad7fd6bbe0e7d4f5ddc10a891b2e74512/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8ca26ad7fd6bbe0e7d4f5ddc10a891b2e74512/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs?ref=5c8ca26ad7fd6bbe0e7d4f5ddc10a891b2e74512", "patch": "@@ -10,6 +10,7 @@\n \n use prelude::v1::*;\n \n+use libc;\n use cell::UnsafeCell;\n use sys::sync as ffi;\n \n@@ -26,7 +27,23 @@ impl RWLock {\n     #[inline]\n     pub unsafe fn read(&self) {\n         let r = ffi::pthread_rwlock_rdlock(self.inner.get());\n-        debug_assert_eq!(r, 0);\n+\n+        // According to the pthread_rwlock_rdlock spec, this function **may**\n+        // fail with EDEADLK if a deadlock is detected. On the other hand\n+        // pthread mutexes will *never* return EDEADLK if they are initialized\n+        // as the \"fast\" kind (which ours always are). As a result, a deadlock\n+        // situation may actually return from the call to pthread_rwlock_rdlock\n+        // instead of blocking forever (as mutexes and Windows rwlocks do). Note\n+        // that not all unix implementations, however, will return EDEADLK for\n+        // their rwlocks.\n+        //\n+        // We roughly maintain the deadlocking behavior by panicking to ensure\n+        // that this lock acquisition does not succeed.\n+        if r == libc::EDEADLK {\n+            panic!(\"rwlock read lock would result in deadlock\");\n+        } else {\n+            debug_assert_eq!(r, 0);\n+        }\n     }\n     #[inline]\n     pub unsafe fn try_read(&self) -> bool {\n@@ -35,7 +52,12 @@ impl RWLock {\n     #[inline]\n     pub unsafe fn write(&self) {\n         let r = ffi::pthread_rwlock_wrlock(self.inner.get());\n-        debug_assert_eq!(r, 0);\n+        // see comments above for why we check for EDEADLK\n+        if r == libc::EDEADLK {\n+            panic!(\"rwlock write lock would result in deadlock\");\n+        } else {\n+            debug_assert_eq!(r, 0);\n+        }\n     }\n     #[inline]\n     pub unsafe fn try_write(&self) -> bool {"}]}