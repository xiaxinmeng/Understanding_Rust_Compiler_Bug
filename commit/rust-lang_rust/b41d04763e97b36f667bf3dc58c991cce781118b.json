{"sha": "b41d04763e97b36f667bf3dc58c991cce781118b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MWQwNDc2M2U5N2IzNmY2NjdiZjNkYzU4Yzk5MWNjZTc4MTExOGI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-03T03:20:22Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-03T07:00:42Z"}, "message": "make `for` parse as `foreach` does\n\nCloses #6997", "tree": {"sha": "30040f2d3fffd93f750629b514e5332da184702a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30040f2d3fffd93f750629b514e5332da184702a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b41d04763e97b36f667bf3dc58c991cce781118b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b41d04763e97b36f667bf3dc58c991cce781118b", "html_url": "https://github.com/rust-lang/rust/commit/b41d04763e97b36f667bf3dc58c991cce781118b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b41d04763e97b36f667bf3dc58c991cce781118b/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3ad685f7f0e7a9a747dbd5407c60160bd0a3c53", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ad685f7f0e7a9a747dbd5407c60160bd0a3c53", "html_url": "https://github.com/rust-lang/rust/commit/b3ad685f7f0e7a9a747dbd5407c60160bd0a3c53"}], "stats": {"total": 57, "additions": 15, "deletions": 42}, "files": [{"sha": "19cd58bd3b403e03bf8d7aa46b01f45636ca12cb", "filename": "doc/tutorial-container.md", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b41d04763e97b36f667bf3dc58c991cce781118b/doc%2Ftutorial-container.md", "raw_url": "https://github.com/rust-lang/rust/raw/b41d04763e97b36f667bf3dc58c991cce781118b/doc%2Ftutorial-container.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-container.md?ref=b41d04763e97b36f667bf3dc58c991cce781118b", "patch": "@@ -164,19 +164,18 @@ dropped when they become unnecessary.\n \n ## For loops\n \n-The `foreach` keyword is transitional, and is going to replace the current\n-obsolete `for` loop.\n+The `for` keyword can be used as sugar for iterating through any iterator:\n \n ~~~\n let xs = [2, 3, 5, 7, 11, 13, 17];\n \n // print out all the elements in the vector\n-foreach x in xs.iter() {\n+for x in xs.iter() {\n     println(x.to_str())\n }\n \n // print out all but the first 3 elements in the vector\n-foreach x in xs.iter().skip(3) {\n+for x in xs.iter().skip(3) {\n     println(x.to_str())\n }\n ~~~\n@@ -192,7 +191,7 @@ let ys = [\"foo\", \"bar\", \"baz\", \"foobar\"];\n let mut it = xs.iter().zip(ys.iter());\n \n // print out the pairs of elements up to (&3, &\"baz\")\n-foreach (x, y) in it {\n+for (x, y) in it {\n     printfln!(\"%d %s\", *x, *y);\n \n     if *x == 3 {\n@@ -229,7 +228,7 @@ impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n     pub fn from_iterator(iterator: &mut T) -> ~[A] {\n         let (lower, _) = iterator.size_hint();\n         let mut xs = with_capacity(lower);\n-        foreach x in iterator {\n+        for x in iterator {\n             xs.push(x);\n         }\n         xs\n@@ -300,7 +299,7 @@ printfln!(\"%?\", it.next()); // prints `Some(&2)`\n printfln!(\"%?\", it.next_back()); // prints `Some(&6)`\n \n // prints `5`, `4` and `3`\n-foreach &x in it.invert() {\n+for &x in it.invert() {\n     printfln!(\"%?\", x)\n }\n ~~~\n@@ -319,7 +318,7 @@ let mut it = xs.iter().chain_(ys.iter()).transform(|&x| x * 2);\n printfln!(\"%?\", it.next()); // prints `Some(2)`\n \n // prints `16`, `14`, `12`, `10`, `8`, `6`, `4`\n-foreach x in it.invert() {\n+for x in it.invert() {\n     printfln!(\"%?\", x);\n }\n ~~~"}, {"sha": "f867790ca13d9b0f3088a451bcb82a2fb7541054", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b41d04763e97b36f667bf3dc58c991cce781118b/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41d04763e97b36f667bf3dc58c991cce781118b/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=b41d04763e97b36f667bf3dc58c991cce781118b", "patch": "@@ -76,7 +76,6 @@ pub enum lint {\n     unused_imports,\n     unnecessary_qualification,\n     while_true,\n-    deprecated_for_loop,\n     path_statement,\n     unrecognized_lint,\n     non_camel_case_types,\n@@ -168,13 +167,6 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         default: warn\n      }),\n \n-    (\"deprecated_for_loop\",\n-     LintSpec {\n-         lint: deprecated_for_loop,\n-         desc: \"recommend using `foreach` or `do` instead of `for`\",\n-         default: deny\n-     }),\n-\n     (\"path_statement\",\n      LintSpec {\n         lint: path_statement,\n@@ -613,24 +605,6 @@ fn lint_while_true() -> oldvisit::vt<@mut Context> {\n     })\n }\n \n-fn lint_deprecated_for_loop() -> oldvisit::vt<@mut Context> {\n-    oldvisit::mk_vt(@oldvisit::Visitor {\n-        visit_expr: |e, (cx, vt): (@mut Context, oldvisit::vt<@mut Context>)| {\n-            match e.node {\n-                ast::expr_call(_, _, ast::ForSugar) |\n-                ast::expr_method_call(_, _, _, _, _, ast::ForSugar) => {\n-                    cx.span_lint(deprecated_for_loop, e.span,\n-                                \"`for` is deprecated; use `foreach <pat> in \\\n-                                 <iterator>` or `do`\")\n-                }\n-                _ => {}\n-            }\n-            oldvisit::visit_expr(e, (cx, vt));\n-        },\n-        .. *oldvisit::default_visitor()\n-    })\n-}\n-\n fn lint_type_limits() -> oldvisit::vt<@mut Context> {\n     fn is_valid<T:cmp::Ord>(binop: ast::binop, v: T,\n             min: T, max: T) -> bool {\n@@ -1174,7 +1148,6 @@ pub fn check_crate(tcx: ty::ctxt, crate: @ast::Crate) {\n \n     // Register each of the lint passes with the context\n     cx.add_oldvisit_lint(lint_while_true());\n-    cx.add_oldvisit_lint(lint_deprecated_for_loop());\n     cx.add_oldvisit_lint(lint_path_statement());\n     cx.add_oldvisit_lint(lint_heap());\n     cx.add_oldvisit_lint(lint_type_limits());"}, {"sha": "abb04e637ca9de99088fbb56d8bbce9fb82974f2", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b41d04763e97b36f667bf3dc58c991cce781118b/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41d04763e97b36f667bf3dc58c991cce781118b/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=b41d04763e97b36f667bf3dc58c991cce781118b", "patch": "@@ -236,7 +236,9 @@ mod test {\n         fn t(o1: Ordering, o2: Ordering, e: Ordering) {\n             assert_eq!(lexical_ordering(o1, o2), e);\n         }\n-        for [Less, Equal, Greater].each |&o| {\n+\n+        let xs = [Less, Equal, Greater];\n+        foreach &o in xs.iter() {\n             t(Less, o, Less);\n             t(Equal, o, o);\n             t(Greater, o, Greater);"}, {"sha": "ac3c50a53defb230491ed8c1d7f22022f9173cd3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b41d04763e97b36f667bf3dc58c991cce781118b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41d04763e97b36f667bf3dc58c991cce781118b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b41d04763e97b36f667bf3dc58c991cce781118b", "patch": "@@ -11,7 +11,7 @@\n use abi;\n use abi::AbiSet;\n use ast::{Sigil, BorrowedSigil, ManagedSigil, OwnedSigil};\n-use ast::{CallSugar, NoSugar, DoSugar, ForSugar};\n+use ast::{CallSugar, NoSugar, DoSugar};\n use ast::{TyBareFn, TyClosure};\n use ast::{RegionTyParamBound, TraitTyParamBound};\n use ast::{provided, public, purity};\n@@ -24,7 +24,7 @@ use ast::{expr, expr_, expr_addr_of, expr_match, expr_again};\n use ast::{expr_assign, expr_assign_op, expr_binary, expr_block};\n use ast::{expr_break, expr_call, expr_cast, expr_do_body};\n use ast::{expr_field, expr_fn_block, expr_if, expr_index};\n-use ast::{expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac};\n+use ast::{expr_lit, expr_log, expr_loop, expr_mac};\n use ast::{expr_method_call, expr_paren, expr_path, expr_repeat};\n use ast::{expr_ret, expr_self, expr_struct, expr_tup, expr_unary};\n use ast::{expr_vec, expr_vstore, expr_vstore_mut_box};\n@@ -1626,8 +1626,7 @@ impl Parser {\n         } else if self.eat_keyword(keywords::ForEach) {\n             return self.parse_for_expr();\n         } else if self.eat_keyword(keywords::For) {\n-            return self.parse_sugary_call_expr(lo, ~\"for\", ForSugar,\n-                                               expr_loop_body);\n+            return self.parse_for_expr();\n         } else if self.eat_keyword(keywords::Do) {\n             return self.parse_sugary_call_expr(lo, ~\"do\", DoSugar,\n                                                expr_do_body);\n@@ -2326,9 +2325,9 @@ impl Parser {\n         }\n     }\n \n-    // parse a 'foreach' .. 'in' expression ('foreach' token already eaten)\n+    // parse a 'for' .. 'in' expression ('for' token already eaten)\n     pub fn parse_for_expr(&self) -> @expr {\n-        // Parse: `foreach <src_pat> in <src_expr> <src_loop_block>`\n+        // Parse: `for <src_pat> in <src_expr> <src_loop_block>`\n \n         let lo = self.last_span.lo;\n         let pat = self.parse_pat();"}]}