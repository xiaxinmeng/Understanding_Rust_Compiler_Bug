{"sha": "4153fa82ff8403bde877b52d35bf1ef99e54a4a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNTNmYTgyZmY4NDAzYmRlODc3YjUyZDM1YmYxZWY5OWU1NGE0YTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-23T09:25:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-23T09:25:11Z"}, "message": "Auto merge of #80715 - JulianKnodt:skip_opt, r=nagisa\n\nChange branching in `iter.skip()`\n\nOptimize branching in `Skip`, which was brought up in #80416.\nThis assumes that if `next` is called, it's likely that there will be more calls to `next`, and the branch for skip will only be hit once thus it's unlikely to take that path. Even w/o the `unlikely` intrinsic, it compiles more efficiently, I believe because the path where `next` is called is always taken.\n\nIt should be noted there are very few places in the compiler where `Skip` is used, so probably won't have a noticeable perf impact.\n\n[New impl](https://godbolt.org/z/85rdj4)\n[Old impl](https://godbolt.org/z/Wc74rh)\n\n[Some additional asm examples](https://godbolt.org/z/feKzoz) although they really don't have a ton of difference between them.", "tree": {"sha": "3aa8af47a3752a6945cea30ac28876a1257f172a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aa8af47a3752a6945cea30ac28876a1257f172a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4153fa82ff8403bde877b52d35bf1ef99e54a4a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4153fa82ff8403bde877b52d35bf1ef99e54a4a2", "html_url": "https://github.com/rust-lang/rust/commit/4153fa82ff8403bde877b52d35bf1ef99e54a4a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4153fa82ff8403bde877b52d35bf1ef99e54a4a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "html_url": "https://github.com/rust-lang/rust/commit/1986b58c646a9523d0a8a0fa8a0bd20492e7795d"}, {"sha": "e5094a28514f25654f9096601bd1df75657f16ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5094a28514f25654f9096601bd1df75657f16ba", "html_url": "https://github.com/rust-lang/rust/commit/e5094a28514f25654f9096601bd1df75657f16ba"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "f2169914ac9dad16a355c8aebd7113c2f7e9c85f", "filename": "library/core/benches/iter.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4153fa82ff8403bde877b52d35bf1ef99e54a4a2/library%2Fcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4153fa82ff8403bde877b52d35bf1ef99e54a4a2/library%2Fcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fiter.rs?ref=4153fa82ff8403bde877b52d35bf1ef99e54a4a2", "patch": "@@ -276,7 +276,29 @@ bench_sums! {\n bench_sums! {\n     bench_cycle_take_sum,\n     bench_cycle_take_ref_sum,\n-    (0i64..10000).cycle().take(1000000)\n+    (0..10000).cycle().take(1000000)\n+}\n+\n+bench_sums! {\n+    bench_cycle_skip_take_sum,\n+    bench_cycle_skip_take_ref_sum,\n+    (0..100000).cycle().skip(1000000).take(1000000)\n+}\n+\n+bench_sums! {\n+    bench_cycle_take_skip_sum,\n+    bench_cycle_take_skip_ref_sum,\n+    (0..100000).cycle().take(1000000).skip(100000)\n+}\n+\n+bench_sums! {\n+    bench_skip_cycle_skip_zip_add_sum,\n+    bench_skip_cycle_skip_zip_add_ref_sum,\n+    (0..100000).skip(100).cycle().skip(100)\n+      .zip((0..100000).cycle().skip(10))\n+      .map(|(a,b)| a+b)\n+      .skip(100000)\n+      .take(1000000)\n }\n \n // Checks whether Skip<Zip<A,B>> is as fast as Zip<Skip<A>, Skip<B>>, from"}, {"sha": "e55c7a6bf5df10652f21a85e544e8d165a956bea", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4153fa82ff8403bde877b52d35bf1ef99e54a4a2/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4153fa82ff8403bde877b52d35bf1ef99e54a4a2/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=4153fa82ff8403bde877b52d35bf1ef99e54a4a2", "patch": "@@ -1,3 +1,4 @@\n+use crate::intrinsics::unlikely;\n use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable};\n use crate::ops::{ControlFlow, Try};\n \n@@ -31,13 +32,10 @@ where\n \n     #[inline]\n     fn next(&mut self) -> Option<I::Item> {\n-        if self.n == 0 {\n-            self.iter.next()\n-        } else {\n-            let old_n = self.n;\n-            self.n = 0;\n-            self.iter.nth(old_n)\n+        if unlikely(self.n > 0) {\n+            self.iter.nth(crate::mem::take(&mut self.n) - 1);\n         }\n+        self.iter.next()\n     }\n \n     #[inline]"}]}