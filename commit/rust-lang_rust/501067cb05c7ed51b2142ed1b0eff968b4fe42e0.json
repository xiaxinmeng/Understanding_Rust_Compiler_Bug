{"sha": "501067cb05c7ed51b2142ed1b0eff968b4fe42e0", "node_id": "C_kwDOAAsO6NoAKDUwMTA2N2NiMDVjN2VkNTFiMjE0MmVkMWIwZWZmOTY4YjRmZTQyZTA", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-04-27T08:44:00Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-09T14:48:30Z"}, "message": "move `panic-in-drop=abort` check for `drop_in_place`\n\nWhether `drop_in_place` can abort does depend on the\n`panic-in-drop` option while compiling the current crate,\nnot `core`", "tree": {"sha": "a72719c7658189dafba35b7aea7d806915dab1de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a72719c7658189dafba35b7aea7d806915dab1de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/501067cb05c7ed51b2142ed1b0eff968b4fe42e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/501067cb05c7ed51b2142ed1b0eff968b4fe42e0", "html_url": "https://github.com/rust-lang/rust/commit/501067cb05c7ed51b2142ed1b0eff968b4fe42e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/501067cb05c7ed51b2142ed1b0eff968b4fe42e0/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd1d18660b37f31ebc83bb8afd06b5d07df377c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1d18660b37f31ebc83bb8afd06b5d07df377c2", "html_url": "https://github.com/rust-lang/rust/commit/bd1d18660b37f31ebc83bb8afd06b5d07df377c2"}], "stats": {"total": 66, "additions": 29, "deletions": 37}, "files": [{"sha": "61f6dab1b2145332322fd174384672a3deb59f43", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/501067cb05c7ed51b2142ed1b0eff968b4fe42e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501067cb05c7ed51b2142ed1b0eff968b4fe42e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=501067cb05c7ed51b2142ed1b0eff968b4fe42e0", "patch": "@@ -6,6 +6,7 @@ use crate::ty::{self, subst::SubstsRef, ReprOptions, Ty, TyCtxt, TypeFoldable};\n use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -2762,14 +2763,22 @@ impl<'tcx> ty::Instance<'tcx> {\n /// with `-Cpanic=abort` will look like they can't unwind when in fact they\n /// might (from a foreign exception or similar).\n #[inline]\n-pub fn fn_can_unwind<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    codegen_fn_attr_flags: CodegenFnAttrFlags,\n-    abi: SpecAbi,\n-) -> bool {\n-    // Special attribute for functions which can't unwind.\n-    if codegen_fn_attr_flags.contains(CodegenFnAttrFlags::NEVER_UNWIND) {\n-        return false;\n+pub fn fn_can_unwind<'tcx>(tcx: TyCtxt<'tcx>, fn_def_id: Option<DefId>, abi: SpecAbi) -> bool {\n+    if let Some(did) = fn_def_id {\n+        // Special attribute for functions which can't unwind.\n+        if tcx.codegen_fn_attrs(did).flags.contains(CodegenFnAttrFlags::NEVER_UNWIND) {\n+            return false;\n+        }\n+\n+        // With -Z panic-in-drop=abort, drop_in_place never unwinds.\n+        //\n+        // This is not part of `codegen_fn_attrs` as it can differ between crates\n+        // and therefore cannot be computed in core.\n+        if tcx.sess.opts.debugging_opts.panic_in_drop == PanicStrategy::Abort {\n+            if Some(did) == tcx.lang_items().drop_in_place_fn() {\n+                return false;\n+            }\n+        }\n     }\n \n     // Otherwise if this isn't special then unwinding is generally determined by\n@@ -2991,13 +3000,7 @@ fn fn_abi_of_fn_ptr<'tcx>(\n ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {\n     let (param_env, (sig, extra_args)) = query.into_parts();\n \n-    LayoutCx { tcx, param_env }.fn_abi_new_uncached(\n-        sig,\n-        extra_args,\n-        None,\n-        CodegenFnAttrFlags::empty(),\n-        false,\n-    )\n+    LayoutCx { tcx, param_env }.fn_abi_new_uncached(sig, extra_args, None, None, false)\n }\n \n fn fn_abi_of_instance<'tcx>(\n@@ -3014,13 +3017,11 @@ fn fn_abi_of_instance<'tcx>(\n         None\n     };\n \n-    let attrs = tcx.codegen_fn_attrs(instance.def_id()).flags;\n-\n     LayoutCx { tcx, param_env }.fn_abi_new_uncached(\n         sig,\n         extra_args,\n         caller_location,\n-        attrs,\n+        Some(instance.def_id()),\n         matches!(instance.def, ty::InstanceDef::Virtual(..)),\n     )\n }\n@@ -3033,7 +3034,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         sig: ty::PolyFnSig<'tcx>,\n         extra_args: &[Ty<'tcx>],\n         caller_location: Option<Ty<'tcx>>,\n-        codegen_fn_attr_flags: CodegenFnAttrFlags,\n+        fn_def_id: Option<DefId>,\n         // FIXME(eddyb) replace this with something typed, like an `enum`.\n         force_thin_self_ptr: bool,\n     ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {\n@@ -3205,7 +3206,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             c_variadic: sig.c_variadic,\n             fixed_count: inputs.len(),\n             conv,\n-            can_unwind: fn_can_unwind(self.tcx(), codegen_fn_attr_flags, sig.abi),\n+            can_unwind: fn_can_unwind(self.tcx(), fn_def_id, sig.abi),\n         };\n         self.fn_abi_adjust_for_abi(&mut fn_abi, sig.abi)?;\n         debug!(\"fn_abi_new_uncached = {:?}\", fn_abi);"}, {"sha": "ade6555f4d2c1c7c6a31791164340c77755e3cef", "filename": "compiler/rustc_mir_transform/src/abort_unwinding_calls.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/501067cb05c7ed51b2142ed1b0eff968b4fe42e0/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501067cb05c7ed51b2142ed1b0eff968b4fe42e0/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs?ref=501067cb05c7ed51b2142ed1b0eff968b4fe42e0", "patch": "@@ -1,6 +1,5 @@\n use crate::MirPass;\n use rustc_hir::def::DefKind;\n-use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::*;\n use rustc_middle::ty::layout;\n use rustc_middle::ty::{self, TyCtxt};\n@@ -46,15 +45,14 @@ impl<'tcx> MirPass<'tcx> for AbortUnwindingCalls {\n         //\n         // Here we test for this function itself whether its ABI allows\n         // unwinding or not.\n-        let body_flags = tcx.codegen_fn_attrs(def_id).flags;\n         let body_ty = tcx.type_of(def_id);\n         let body_abi = match body_ty.kind() {\n             ty::FnDef(..) => body_ty.fn_sig(tcx).abi(),\n             ty::Closure(..) => Abi::RustCall,\n             ty::Generator(..) => Abi::Rust,\n             _ => span_bug!(body.span, \"unexpected body ty: {:?}\", body_ty),\n         };\n-        let body_can_unwind = layout::fn_can_unwind(tcx, body_flags, body_abi);\n+        let body_can_unwind = layout::fn_can_unwind(tcx, Some(def_id), body_abi);\n \n         // Look in this function body for any basic blocks which are terminated\n         // with a function call, and whose function we're calling may unwind.\n@@ -73,19 +71,19 @@ impl<'tcx> MirPass<'tcx> for AbortUnwindingCalls {\n                 TerminatorKind::Call { func, .. } => {\n                     let ty = func.ty(body, tcx);\n                     let sig = ty.fn_sig(tcx);\n-                    let flags = match ty.kind() {\n-                        ty::FnPtr(_) => CodegenFnAttrFlags::empty(),\n-                        ty::FnDef(def_id, _) => tcx.codegen_fn_attrs(*def_id).flags,\n+                    let fn_def_id = match ty.kind() {\n+                        ty::FnPtr(_) => None,\n+                        &ty::FnDef(def_id, _) => Some(def_id),\n                         _ => span_bug!(span, \"invalid callee of type {:?}\", ty),\n                     };\n-                    layout::fn_can_unwind(tcx, flags, sig.abi())\n+                    layout::fn_can_unwind(tcx, fn_def_id, sig.abi())\n                 }\n                 TerminatorKind::Drop { .. } | TerminatorKind::DropAndReplace { .. } => {\n                     tcx.sess.opts.debugging_opts.panic_in_drop == PanicStrategy::Unwind\n-                        && layout::fn_can_unwind(tcx, CodegenFnAttrFlags::empty(), Abi::Rust)\n+                        && layout::fn_can_unwind(tcx, None, Abi::Rust)\n                 }\n                 TerminatorKind::Assert { .. } | TerminatorKind::FalseUnwind { .. } => {\n-                    layout::fn_can_unwind(tcx, CodegenFnAttrFlags::empty(), Abi::Rust)\n+                    layout::fn_can_unwind(tcx, None, Abi::Rust)\n                 }\n                 _ => continue,\n             };"}, {"sha": "b2aaaaa235c2580e08758fe2f529ca5e6c33f245", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/501067cb05c7ed51b2142ed1b0eff968b4fe42e0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501067cb05c7ed51b2142ed1b0eff968b4fe42e0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=501067cb05c7ed51b2142ed1b0eff968b4fe42e0", "patch": "@@ -45,7 +45,7 @@ use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::spec::{abi, PanicStrategy, SanitizerSet};\n+use rustc_target::spec::{abi, SanitizerSet};\n use rustc_trait_selection::traits::error_reporting::suggestions::NextTypeParamName;\n use std::iter;\n \n@@ -2726,13 +2726,6 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n         codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;\n     }\n \n-    // With -Z panic-in-drop=abort, drop_in_place never unwinds.\n-    if tcx.sess.opts.debugging_opts.panic_in_drop == PanicStrategy::Abort {\n-        if Some(did.to_def_id()) == tcx.lang_items().drop_in_place_fn() {\n-            codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND;\n-        }\n-    }\n-\n     // The panic_no_unwind function called by TerminatorKind::Abort will never\n     // unwind. If the panic handler that it invokes unwind then it will simply\n     // call the panic handler again."}]}