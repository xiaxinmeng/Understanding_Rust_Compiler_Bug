{"sha": "9b793702fe425b5ffe7d7c458b25ebfc8db1aa18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNzkzNzAyZmU0MjViNWZmZTdkN2M0NThiMjVlYmZjOGRiMWFhMTg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-07T05:57:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-07T05:57:35Z"}, "message": "Rollup merge of #58118 - h-michael:libtest-theme-2018, r=Centril\n\nTransition libtest to 2018 edition\n\nTransitions libtest to Rust 2018; cc #58099\nr? @Centril", "tree": {"sha": "dec2ace2e4984a111749f732f5d44e37a9bd478d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dec2ace2e4984a111749f732f5d44e37a9bd478d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b793702fe425b5ffe7d7c458b25ebfc8db1aa18", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcW8jPCRBK7hj4Ov3rIwAAdHIIAJIy1iU7YWlsWbopXV6Brv8R\nkt1ly8XLihJenF5FPmM65T5G28PnahZuIGnaQ4hmKDTZWutNy+b4Jew6lsWueNCt\npIhG0lxTiz5WZVyPluwVGR8Eo+8YXxCjqBTNTLR/8emZ7fLgnsC1ibG/m4KXiMU0\nv1XsD5Z4y/XvvYsxljMn1I/7Pn5TDQR7TjHIQvNCd72SEt7t1BNEJNEt9ey9ANKP\nl9R74dZqhtbh2lQIxXQB2vzGMDOwlNBHdsStBlf5ICjHwealIn3DgoOq13RX7GRp\n8Yan9aYYyOoYrGmsh+ikHFvQe8U5LNON0MUCUB1I9fEOC9As/1Z2q7G1gQZ0ACg=\n=90jH\n-----END PGP SIGNATURE-----\n", "payload": "tree dec2ace2e4984a111749f732f5d44e37a9bd478d\nparent 1efdda10cdde386ea3e470ba2b482fdc73c12001\nparent 3c6787306d6b7a45e3b76f18ce543be700fb3c00\nauthor kennytm <kennytm@gmail.com> 1549519055 +0800\ncommitter GitHub <noreply@github.com> 1549519055 +0800\n\nRollup merge of #58118 - h-michael:libtest-theme-2018, r=Centril\n\nTransition libtest to 2018 edition\n\nTransitions libtest to Rust 2018; cc #58099\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b793702fe425b5ffe7d7c458b25ebfc8db1aa18", "html_url": "https://github.com/rust-lang/rust/commit/9b793702fe425b5ffe7d7c458b25ebfc8db1aa18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b793702fe425b5ffe7d7c458b25ebfc8db1aa18/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1efdda10cdde386ea3e470ba2b482fdc73c12001", "url": "https://api.github.com/repos/rust-lang/rust/commits/1efdda10cdde386ea3e470ba2b482fdc73c12001", "html_url": "https://github.com/rust-lang/rust/commit/1efdda10cdde386ea3e470ba2b482fdc73c12001"}, {"sha": "3c6787306d6b7a45e3b76f18ce543be700fb3c00", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6787306d6b7a45e3b76f18ce543be700fb3c00", "html_url": "https://github.com/rust-lang/rust/commit/3c6787306d6b7a45e3b76f18ce543be700fb3c00"}], "stats": {"total": 175, "additions": 104, "deletions": 71}, "files": [{"sha": "10bdd6e877c4f2da1c17c9044cbae0d0da46dfd2", "filename": "src/libtest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b793702fe425b5ffe7d7c458b25ebfc8db1aa18/src%2Flibtest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9b793702fe425b5ffe7d7c458b25ebfc8db1aa18/src%2Flibtest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2FCargo.toml?ref=9b793702fe425b5ffe7d7c458b25ebfc8db1aa18", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"test\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"test\""}, {"sha": "a06497f98626aa9f03bc406b6450c2b8856222aa", "filename": "src/libtest/formatters/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b793702fe425b5ffe7d7c458b25ebfc8db1aa18/src%2Flibtest%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b793702fe425b5ffe7d7c458b25ebfc8db1aa18/src%2Flibtest%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fformatters%2Fjson.rs?ref=9b793702fe425b5ffe7d7c458b25ebfc8db1aa18", "patch": "@@ -145,7 +145,7 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n struct EscapedString<S: AsRef<str>>(S);\n \n impl<S: AsRef<str>> ::std::fmt::Display for EscapedString<S> {\n-    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n         let mut start = 0;\n \n         for (i, byte) in self.0.as_ref().bytes().enumerate() {"}, {"sha": "cced66f4a22bdc0ae7970c6728005ae4e8be916f", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 99, "deletions": 67, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/9b793702fe425b5ffe7d7c458b25ebfc8db1aa18/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b793702fe425b5ffe7d7c458b25ebfc8db1aa18/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=9b793702fe425b5ffe7d7c458b25ebfc8db1aa18", "patch": "@@ -17,11 +17,15 @@\n // this crate, which relies on this attribute (rather than the value of `--crate-name` passed by\n // cargo) to detect this crate.\n \n+#![deny(rust_2018_idioms)]\n #![crate_name = \"test\"]\n #![unstable(feature = \"test\", issue = \"27812\")]\n-#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"https://doc.rust-lang.org/nightly/\", test(attr(deny(warnings))))]\n+#![doc(\n+    html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+    html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+    html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+    test(attr(deny(warnings)))\n+)]\n #![feature(asm)]\n #![feature(fnbox)]\n #![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc, rustc_private))]\n@@ -32,10 +36,10 @@\n #![feature(termination_trait_lib)]\n #![feature(test)]\n \n-extern crate getopts;\n+use getopts;\n #[cfg(any(unix, target_os = \"cloudabi\"))]\n extern crate libc;\n-extern crate term;\n+use term;\n \n // FIXME(#54291): rustc and/or LLVM don't yet support building with panic-unwind\n //                on aarch64-pc-windows-msvc, so we don't link libtest against\n@@ -46,52 +50,57 @@ extern crate term;\n #[cfg(not(all(windows, target_arch = \"aarch64\")))]\n extern crate panic_unwind;\n \n-pub use self::TestFn::*;\n pub use self::ColorConfig::*;\n-pub use self::TestResult::*;\n-pub use self::TestName::*;\n-use self::TestEvent::*;\n use self::NamePadding::*;\n use self::OutputLocation::*;\n+use self::TestEvent::*;\n+pub use self::TestFn::*;\n+pub use self::TestName::*;\n+pub use self::TestResult::*;\n \n-use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::any::Any;\n+use std::borrow::Cow;\n use std::boxed::FnBox;\n use std::cmp;\n use std::collections::BTreeMap;\n use std::env;\n use std::fmt;\n use std::fs::File;\n-use std::io::prelude::*;\n use std::io;\n+use std::io::prelude::*;\n+use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::path::PathBuf;\n+use std::process;\n use std::process::Termination;\n use std::sync::mpsc::{channel, Sender};\n use std::sync::{Arc, Mutex};\n use std::thread;\n use std::time::{Duration, Instant};\n-use std::borrow::Cow;\n-use std::process;\n \n const TEST_WARN_TIMEOUT_S: u64 = 60;\n const QUIET_MODE_MAX_COLUMN: usize = 100; // insert a '\\n' after 100 tests in quiet mode\n \n // to be used by rustc to compile tests in libtest\n pub mod test {\n-    pub use {assert_test_result, filter_tests, parse_opts, run_test, test_main, test_main_static,\n-             Bencher, DynTestFn, DynTestName, Metric, MetricMap, Options, RunIgnored, ShouldPanic,\n-             StaticBenchFn, StaticTestFn, StaticTestName, TestDesc, TestDescAndFn, TestName,\n-             TestOpts, TestResult, TrFailed, TrFailedMsg, TrIgnored, TrOk};\n+    pub use crate::{\n+        assert_test_result, filter_tests, parse_opts, run_test, test_main, test_main_static,\n+        Bencher, DynTestFn, DynTestName, Metric, MetricMap, Options, RunIgnored, ShouldPanic,\n+        StaticBenchFn, StaticTestFn, StaticTestName, TestDesc, TestDescAndFn, TestName, TestOpts,\n+        TestResult, TrFailed, TrFailedMsg, TrIgnored, TrOk,\n+    };\n }\n \n-pub mod stats;\n mod formatters;\n+pub mod stats;\n \n-use formatters::{JsonFormatter, OutputFormatter, PrettyFormatter, TerseFormatter};\n+use crate::formatters::{JsonFormatter, OutputFormatter, PrettyFormatter, TerseFormatter};\n \n /// Whether to execute tests concurrently or not\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum Concurrent { Yes, No }\n+pub enum Concurrent {\n+    Yes,\n+    No,\n+}\n \n // The name of a test. By convention this follows the rules for rust\n // paths; i.e., it should be a series of identifiers separated by double\n@@ -131,7 +140,7 @@ impl TestName {\n     }\n }\n impl fmt::Display for TestName {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self.as_slice(), f)\n     }\n }\n@@ -185,7 +194,7 @@ impl TestFn {\n }\n \n impl fmt::Debug for TestFn {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(match *self {\n             StaticTestFn(..) => \"StaticTestFn(..)\",\n             StaticBenchFn(..) => \"StaticBenchFn(..)\",\n@@ -329,8 +338,7 @@ pub fn test_main_static(tests: &[&TestDescAndFn]) {\n pub fn assert_test_result<T: Termination>(result: T) {\n     let code = result.report();\n     assert_eq!(\n-        code,\n-        0,\n+        code, 0,\n         \"the test returned a termination value with a non-zero status code ({}) \\\n          which indicates a failure\",\n         code\n@@ -558,14 +566,16 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n     let include_ignored = matches.opt_present(\"include-ignored\");\n     if !allow_unstable && include_ignored {\n         return Some(Err(\n-            \"The \\\"include-ignored\\\" flag is only accepted on the nightly compiler\".into()\n+            \"The \\\"include-ignored\\\" flag is only accepted on the nightly compiler\".into(),\n         ));\n     }\n \n     let run_ignored = match (include_ignored, matches.opt_present(\"ignored\")) {\n-        (true, true) => return Some(Err(\n-            \"the options --include-ignored and --ignored are mutually exclusive\".into()\n-        )),\n+        (true, true) => {\n+            return Some(Err(\n+                \"the options --include-ignored and --ignored are mutually exclusive\".into(),\n+            ));\n+        }\n         (true, false) => RunIgnored::Yes,\n         (false, true) => RunIgnored::Only,\n         (false, false) => RunIgnored::No,\n@@ -597,7 +607,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n                     \"argument for --test-threads must be a number > 0 \\\n                      (error: {})\",\n                     e\n-                )))\n+                )));\n             }\n         },\n         None => None,\n@@ -613,7 +623,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n                 \"argument for --color must be auto, always, or never (was \\\n                  {})\",\n                 v\n-            )))\n+            )));\n         }\n     };\n \n@@ -635,7 +645,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n                 \"argument for --format must be pretty, terse, or json (was \\\n                  {})\",\n                 v\n-            )))\n+            )));\n         }\n     };\n \n@@ -823,7 +833,7 @@ pub fn list_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Res\n     let mut nbench = 0;\n \n     for test in filter_tests(&opts, tests) {\n-        use TestFn::*;\n+        use crate::TestFn::*;\n \n         let TestDescAndFn {\n             desc: TestDesc { name, .. },\n@@ -1012,10 +1022,12 @@ fn use_color(opts: &TestOpts) -> bool {\n     }\n }\n \n-#[cfg(any(target_os = \"cloudabi\",\n-          target_os = \"redox\",\n-          all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n-          all(target_vendor = \"fortanix\", target_env = \"sgx\")))]\n+#[cfg(any(\n+    target_os = \"cloudabi\",\n+    target_os = \"redox\",\n+    all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n+    all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+))]\n fn stdout_isatty() -> bool {\n     // FIXME: Implement isatty on Redox and SGX\n     false\n@@ -1246,21 +1258,34 @@ fn get_concurrency() -> usize {\n         1\n     }\n \n-    #[cfg(any(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n-              all(target_vendor = \"fortanix\", target_env = \"sgx\")))]\n+    #[cfg(any(\n+        all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+    ))]\n     fn num_cpus() -> usize {\n         1\n     }\n \n-    #[cfg(any(target_os = \"android\", target_os = \"cloudabi\", target_os = \"emscripten\",\n-              target_os = \"fuchsia\", target_os = \"ios\", target_os = \"linux\",\n-              target_os = \"macos\", target_os = \"solaris\"))]\n+    #[cfg(any(\n+        target_os = \"android\",\n+        target_os = \"cloudabi\",\n+        target_os = \"emscripten\",\n+        target_os = \"fuchsia\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"solaris\"\n+    ))]\n     fn num_cpus() -> usize {\n         unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as usize }\n     }\n \n-    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"bitrig\",\n-              target_os = \"netbsd\"))]\n+    #[cfg(any(\n+        target_os = \"freebsd\",\n+        target_os = \"dragonfly\",\n+        target_os = \"bitrig\",\n+        target_os = \"netbsd\"\n+    ))]\n     fn num_cpus() -> usize {\n         use std::ptr;\n \n@@ -1343,18 +1368,20 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n     }\n \n     // Skip tests that match any of the skip filters\n-    filtered.retain(|test| {\n-        !opts.skip.iter().any(|sf| matches_filter(test, sf))\n-    });\n+    filtered.retain(|test| !opts.skip.iter().any(|sf| matches_filter(test, sf)));\n \n     // maybe unignore tests\n     match opts.run_ignored {\n         RunIgnored::Yes => {\n-            filtered.iter_mut().for_each(|test| test.desc.ignore = false);\n-        },\n+            filtered\n+                .iter_mut()\n+                .for_each(|test| test.desc.ignore = false);\n+        }\n         RunIgnored::Only => {\n             filtered.retain(|test| test.desc.ignore);\n-            filtered.iter_mut().for_each(|test| test.desc.ignore = false);\n+            filtered\n+                .iter_mut()\n+                .for_each(|test| test.desc.ignore = false);\n         }\n         RunIgnored::No => {}\n     }\n@@ -1396,7 +1423,8 @@ pub fn run_test(\n ) {\n     let TestDescAndFn { desc, testfn } = test;\n \n-    let ignore_because_panic_abort = cfg!(target_arch = \"wasm32\") && !cfg!(target_os = \"emscripten\")\n+    let ignore_because_panic_abort = cfg!(target_arch = \"wasm32\")\n+        && !cfg!(target_os = \"emscripten\")\n         && desc.should_panic != ShouldPanic::No;\n \n     if force_ignore || desc.ignore || ignore_because_panic_abort {\n@@ -1454,12 +1482,12 @@ pub fn run_test(\n \n     match testfn {\n         DynBenchFn(bencher) => {\n-            ::bench::benchmark(desc, monitor_ch, opts.nocapture, |harness| {\n+            crate::bench::benchmark(desc, monitor_ch, opts.nocapture, |harness| {\n                 bencher.run(harness)\n             });\n         }\n         StaticBenchFn(benchfn) => {\n-            ::bench::benchmark(desc, monitor_ch, opts.nocapture, |harness| {\n+            crate::bench::benchmark(desc, monitor_ch, opts.nocapture, |harness| {\n                 (benchfn.clone())(harness)\n             });\n         }\n@@ -1487,7 +1515,8 @@ fn calc_result(desc: &TestDesc, task_result: Result<(), Box<dyn Any + Send>>) ->\n     match (&desc.should_panic, task_result) {\n         (&ShouldPanic::No, Ok(())) | (&ShouldPanic::Yes, Err(_)) => TrOk,\n         (&ShouldPanic::YesWithMessage(msg), Err(ref err)) => {\n-            if err.downcast_ref::<String>()\n+            if err\n+                .downcast_ref::<String>()\n                 .map(|e| &**e)\n                 .or_else(|| err.downcast_ref::<&'static str>().map(|e| *e))\n                 .map(|e| e.contains(msg))\n@@ -1534,7 +1563,8 @@ impl MetricMap {\n     }\n \n     pub fn fmt_metrics(&self) -> String {\n-        let v = self.0\n+        let v = self\n+            .0\n             .iter()\n             .map(|(k, v)| format!(\"{}: {} (+/- {})\", *k, v.value, v.noise))\n             .collect::<Vec<_>>();\n@@ -1643,7 +1673,8 @@ where\n \n         // If we've run for 100ms and seem to have converged to a\n         // stable median.\n-        if loop_run > Duration::from_millis(100) && summ.median_abs_dev_pct < 1.0\n+        if loop_run > Duration::from_millis(100)\n+            && summ.median_abs_dev_pct < 1.0\n             && summ.median - summ5.median < summ5.median_abs_dev\n         {\n             return summ5;\n@@ -1669,12 +1700,12 @@ where\n }\n \n pub mod bench {\n-    use std::panic::{catch_unwind, AssertUnwindSafe};\n+    use super::{BenchMode, BenchSamples, Bencher, MonitorMsg, Sender, Sink, TestDesc, TestResult};\n+    use crate::stats;\n     use std::cmp;\n     use std::io;\n+    use std::panic::{catch_unwind, AssertUnwindSafe};\n     use std::sync::{Arc, Mutex};\n-    use stats;\n-    use super::{BenchMode, BenchSamples, Bencher, MonitorMsg, Sender, Sink, TestDesc, TestResult};\n \n     pub fn benchmark<F>(desc: TestDesc, monitor_ch: Sender<MonitorMsg>, nocapture: bool, f: F)\n     where\n@@ -1749,14 +1780,15 @@ pub mod bench {\n \n #[cfg(test)]\n mod tests {\n-    use test::{filter_tests, parse_opts, run_test, DynTestFn, DynTestName, MetricMap, RunIgnored,\n-               ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts, TrFailed,\n-               TrFailedMsg, TrIgnored, TrOk};\n+    use crate::bench;\n+    use crate::test::{\n+        filter_tests, parse_opts, run_test, DynTestFn, DynTestName, MetricMap, RunIgnored,\n+        ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts, TrFailed, TrFailedMsg,\n+        TrIgnored, TrOk,\n+    };\n+    use crate::Bencher;\n+    use crate::Concurrent;\n     use std::sync::mpsc::channel;\n-    use bench;\n-    use Bencher;\n-    use Concurrent;\n-\n \n     fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n         vec![\n@@ -2156,7 +2188,7 @@ mod tests {\n             allow_fail: false,\n         };\n \n-        ::bench::benchmark(desc, tx, true, f);\n+        crate::bench::benchmark(desc, tx, true, f);\n         rx.recv().unwrap();\n     }\n \n@@ -2175,7 +2207,7 @@ mod tests {\n             allow_fail: false,\n         };\n \n-        ::bench::benchmark(desc, tx, true, f);\n+        crate::bench::benchmark(desc, tx, true, f);\n         rx.recv().unwrap();\n     }\n }"}, {"sha": "5c9421d5ea4b023089049f6e23529af7a2ddf165", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b793702fe425b5ffe7d7c458b25ebfc8db1aa18/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b793702fe425b5ffe7d7c458b25ebfc8db1aa18/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=9b793702fe425b5ffe7d7c458b25ebfc8db1aa18", "patch": "@@ -319,8 +319,8 @@ pub fn winsorize(samples: &mut [f64], pct: f64) {\n \n #[cfg(test)]\n mod tests {\n-    use stats::Stats;\n-    use stats::Summary;\n+    use crate::stats::Stats;\n+    use crate::stats::Summary;\n     use std::f64;\n     use std::io::prelude::*;\n     use std::io;\n@@ -899,7 +899,7 @@ mod tests {\n mod bench {\n     extern crate test;\n     use self::test::Bencher;\n-    use stats::Stats;\n+    use crate::stats::Stats;\n \n     #[bench]\n     pub fn sum_three_items(b: &mut Bencher) {"}]}