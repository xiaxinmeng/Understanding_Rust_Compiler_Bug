{"sha": "f6741d0a7a434ea108e2f26b7e50e028f1302604", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NzQxZDBhN2E0MzRlYTEwOGUyZjI2YjdlNTBlMDI4ZjEzMDI2MDQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-06T22:13:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-20T19:04:50Z"}, "message": "region_infer/values.rs: rustfmt", "tree": {"sha": "87a1f22dbd018b0ecc5e8285434babe61ccc186f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87a1f22dbd018b0ecc5e8285434babe61ccc186f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6741d0a7a434ea108e2f26b7e50e028f1302604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6741d0a7a434ea108e2f26b7e50e028f1302604", "html_url": "https://github.com/rust-lang/rust/commit/f6741d0a7a434ea108e2f26b7e50e028f1302604", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6741d0a7a434ea108e2f26b7e50e028f1302604/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3335c61693135cb92ec659e04e4a542eabef874", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3335c61693135cb92ec659e04e4a542eabef874", "html_url": "https://github.com/rust-lang/rust/commit/f3335c61693135cb92ec659e04e4a542eabef874"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "b1397c23988a3bfc3961fe26887e9e96b10a26ae", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f6741d0a7a434ea108e2f26b7e50e028f1302604/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6741d0a7a434ea108e2f26b7e50e028f1302604/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=f6741d0a7a434ea108e2f26b7e50e028f1302604", "patch": "@@ -27,18 +27,23 @@ pub(super) struct RegionValueElements {\n impl RegionValueElements {\n     pub(super) fn new(mir: &Mir<'_>, num_universal_regions: usize) -> Self {\n         let mut num_points = 0;\n-        let statements_before_block =\n-            mir.basic_blocks()\n-               .iter()\n-               .map(|block_data| {\n-                   let v = num_points;\n-                   num_points += block_data.statements.len() + 1;\n-                   v\n-               })\n-               .collect();\n-\n-        debug!(\"RegionValueElements(num_universal_regions={:?})\", num_universal_regions);\n-        debug!(\"RegionValueElements: statements_before_block={:#?}\", statements_before_block);\n+        let statements_before_block = mir.basic_blocks()\n+            .iter()\n+            .map(|block_data| {\n+                let v = num_points;\n+                num_points += block_data.statements.len() + 1;\n+                v\n+            })\n+            .collect();\n+\n+        debug!(\n+            \"RegionValueElements(num_universal_regions={:?})\",\n+            num_universal_regions\n+        );\n+        debug!(\n+            \"RegionValueElements: statements_before_block={:#?}\",\n+            statements_before_block\n+        );\n         debug!(\"RegionValueElements: num_points={:#?}\", num_points);\n \n         Self {\n@@ -60,7 +65,9 @@ impl RegionValueElements {\n \n     /// Iterates over the `RegionElementIndex` for all points in the CFG.\n     pub(super) fn all_point_indices<'a>(&'a self) -> impl Iterator<Item = RegionElementIndex> + 'a {\n-        (0..self.num_points).map(move |i| RegionElementIndex::new(i + self.num_universal_regions))\n+        (0..self.num_points).map(move |i| {\n+            RegionElementIndex::new(i + self.num_universal_regions)\n+        })\n     }\n \n     /// Iterates over the `RegionElementIndex` for all points in the CFG.\n@@ -95,12 +102,11 @@ impl RegionValueElements {\n             // be (BB2, 20).\n             //\n             // Nit: we could do a binary search here but I'm too lazy.\n-            let (block, &first_index) =\n-                self.statements_before_block\n-                    .iter_enumerated()\n-                    .filter(|(_, first_index)| **first_index <= point_index)\n-                    .last()\n-                    .unwrap();\n+            let (block, &first_index) = self.statements_before_block\n+                .iter_enumerated()\n+                .filter(|(_, first_index)| **first_index <= point_index)\n+                .last()\n+                .unwrap();\n \n             RegionElement::Location(Location {\n                 block,\n@@ -151,7 +157,10 @@ pub(super) trait ToElementIndex {\n \n impl ToElementIndex for Location {\n     fn to_element_index(self, elements: &RegionValueElements) -> RegionElementIndex {\n-        let Location { block, statement_index } = self;\n+        let Location {\n+            block,\n+            statement_index,\n+        } = self;\n         let start_index = elements.statements_before_block[block];\n         RegionElementIndex::new(elements.num_universal_regions + start_index + statement_index)\n     }"}]}