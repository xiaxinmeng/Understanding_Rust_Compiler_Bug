{"sha": "d135217db26bd9a2643e57170c3f459aa42e08e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMzUyMTdkYjI2YmQ5YTI2NDNlNTcxNzBjM2Y0NTlhYTQyZTA4ZTQ=", "commit": {"author": {"name": "Ravi Shankar", "email": "wafflespeanut@gmail.com", "date": "2015-10-21T07:26:24Z"}, "committer": {"name": "Ravi Shankar", "email": "wafflespeanut@gmail.com", "date": "2015-10-24T09:52:37Z"}, "message": "show rustfmt coverage!", "tree": {"sha": "a6bda1db1cc06a7dd3eecf61d657528a3e61dc1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6bda1db1cc06a7dd3eecf61d657528a3e61dc1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d135217db26bd9a2643e57170c3f459aa42e08e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d135217db26bd9a2643e57170c3f459aa42e08e4", "html_url": "https://github.com/rust-lang/rust/commit/d135217db26bd9a2643e57170c3f459aa42e08e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d135217db26bd9a2643e57170c3f459aa42e08e4/comments", "author": {"login": "wafflespeanut", "id": 6691262, "node_id": "MDQ6VXNlcjY2OTEyNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6691262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wafflespeanut", "html_url": "https://github.com/wafflespeanut", "followers_url": "https://api.github.com/users/wafflespeanut/followers", "following_url": "https://api.github.com/users/wafflespeanut/following{/other_user}", "gists_url": "https://api.github.com/users/wafflespeanut/gists{/gist_id}", "starred_url": "https://api.github.com/users/wafflespeanut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wafflespeanut/subscriptions", "organizations_url": "https://api.github.com/users/wafflespeanut/orgs", "repos_url": "https://api.github.com/users/wafflespeanut/repos", "events_url": "https://api.github.com/users/wafflespeanut/events{/privacy}", "received_events_url": "https://api.github.com/users/wafflespeanut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wafflespeanut", "id": 6691262, "node_id": "MDQ6VXNlcjY2OTEyNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6691262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wafflespeanut", "html_url": "https://github.com/wafflespeanut", "followers_url": "https://api.github.com/users/wafflespeanut/followers", "following_url": "https://api.github.com/users/wafflespeanut/following{/other_user}", "gists_url": "https://api.github.com/users/wafflespeanut/gists{/gist_id}", "starred_url": "https://api.github.com/users/wafflespeanut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wafflespeanut/subscriptions", "organizations_url": "https://api.github.com/users/wafflespeanut/orgs", "repos_url": "https://api.github.com/users/wafflespeanut/repos", "events_url": "https://api.github.com/users/wafflespeanut/events{/privacy}", "received_events_url": "https://api.github.com/users/wafflespeanut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b244b67ed6708b42507067d029a56614c1c484", "url": "https://api.github.com/repos/rust-lang/rust/commits/29b244b67ed6708b42507067d029a56614c1c484", "html_url": "https://github.com/rust-lang/rust/commit/29b244b67ed6708b42507067d029a56614c1c484"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "60c1312b6c64ef061cbcea16ee511e9cda92eaa4", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d135217db26bd9a2643e57170c3f459aa42e08e4/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d135217db26bd9a2643e57170c3f459aa42e08e4/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=d135217db26bd9a2643e57170c3f459aa42e08e4", "patch": "@@ -108,7 +108,7 @@ fn determine_params<I>(args: I) -> Option<(PathBuf, WriteMode)>\n     opts.optopt(\"\",\n                 \"write-mode\",\n                 \"mode to write in\",\n-                \"[replace|overwrite|display|diff]\");\n+                \"[replace|overwrite|display|diff|coverage]\");\n     let matches = match opts.parse(args) {\n         Ok(m) => m,\n         Err(e) => {"}, {"sha": "20a637bffcade36a5d182e9fcb75fa4133944ea4", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d135217db26bd9a2643e57170c3f459aa42e08e4/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d135217db26bd9a2643e57170c3f459aa42e08e4/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d135217db26bd9a2643e57170c3f459aa42e08e4", "patch": "@@ -422,7 +422,7 @@ impl Rewrite for ast::Block {\n             return Some(user_str);\n         }\n \n-        let mut visitor = FmtVisitor::from_codemap(context.codemap, context.config);\n+        let mut visitor = FmtVisitor::from_codemap(context.codemap, context.config, None);\n         visitor.block_indent = context.block_indent;\n \n         let prefix = match self.rules {\n@@ -833,7 +833,7 @@ impl Rewrite for ast::Arm {\n         let attr_str = if !attrs.is_empty() {\n             // We only use this visitor for the attributes, should we use it for\n             // more?\n-            let mut attr_visitor = FmtVisitor::from_codemap(context.codemap, context.config);\n+            let mut attr_visitor = FmtVisitor::from_codemap(context.codemap, context.config, None);\n             attr_visitor.block_indent = context.block_indent;\n             attr_visitor.last_pos = attrs[0].span.lo;\n             if attr_visitor.visit_attrs(attrs) {"}, {"sha": "72174679386cdad24aa2eb17827af81aa43e547b", "filename": "src/filemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d135217db26bd9a2643e57170c3f459aa42e08e4/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d135217db26bd9a2643e57170c3f459aa42e08e4/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=d135217db26bd9a2643e57170c3f459aa42e08e4", "patch": "@@ -100,7 +100,7 @@ fn write_file(text: &StringBuffer,\n             let file = try!(File::create(&filename));\n             try!(write_system_newlines(file, text, config));\n         }\n-        WriteMode::Display => {\n+        WriteMode::Display | WriteMode::Coverage => {\n             println!(\"{}:\\n\", filename);\n             let stdout = stdout();\n             let stdout_lock = stdout.lock();"}, {"sha": "337535243487965ee7f64acc71e292034df5aec0", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d135217db26bd9a2643e57170c3f459aa42e08e4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d135217db26bd9a2643e57170c3f459aa42e08e4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d135217db26bd9a2643e57170c3f459aa42e08e4", "patch": "@@ -182,6 +182,8 @@ pub enum WriteMode {\n     Diff,\n     // Return the result as a mapping from filenames to Strings.\n     Return,\n+    // Display how much of the input file was processed\n+    Coverage,\n }\n \n impl FromStr for WriteMode {\n@@ -193,6 +195,7 @@ impl FromStr for WriteMode {\n             \"display\" => Ok(WriteMode::Display),\n             \"overwrite\" => Ok(WriteMode::Overwrite),\n             \"diff\" => Ok(WriteMode::Diff),\n+            \"coverage\" => Ok(WriteMode::Coverage),\n             _ => Err(()),\n         }\n     }\n@@ -277,11 +280,11 @@ impl fmt::Display for FormatReport {\n }\n \n // Formatting which depends on the AST.\n-fn fmt_ast(krate: &ast::Crate, codemap: &CodeMap, config: &Config) -> FileMap {\n+fn fmt_ast(krate: &ast::Crate, codemap: &CodeMap, config: &Config, mode: WriteMode) -> FileMap {\n     let mut file_map = FileMap::new();\n     for (path, module) in modules::list_files(krate, codemap) {\n         let path = path.to_str().unwrap();\n-        let mut visitor = FmtVisitor::from_codemap(codemap, config);\n+        let mut visitor = FmtVisitor::from_codemap(codemap, config, Some(mode));\n         visitor.format_separate_mod(module, path);\n         file_map.insert(path.to_owned(), visitor.buffer);\n     }\n@@ -370,10 +373,10 @@ pub fn fmt_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n     report\n }\n \n-pub fn format(file: &Path, config: &Config) -> FileMap {\n+pub fn format(file: &Path, config: &Config, mode: WriteMode) -> FileMap {\n     let parse_session = ParseSess::new();\n     let krate = parse::parse_crate_from_file(file, Vec::new(), &parse_session);\n-    let mut file_map = fmt_ast(&krate, parse_session.codemap(), config);\n+    let mut file_map = fmt_ast(&krate, parse_session.codemap(), config, mode);\n \n     // For some reason, the codemap does not include terminating\n     // newlines so we must add one on for each file. This is sad.\n@@ -387,7 +390,7 @@ pub fn format(file: &Path, config: &Config) -> FileMap {\n // write_mode determines what happens to the result of running rustfmt, see\n // WriteMode.\n pub fn run(file: &Path, write_mode: WriteMode, config: &Config) {\n-    let mut result = format(file, config);\n+    let mut result = format(file, config, write_mode);\n \n     println!(\"{}\", fmt_lines(&mut result, config));\n "}, {"sha": "b83f07e05d768de1c921b998e815445809191153", "filename": "src/missed_spans.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d135217db26bd9a2643e57170c3f459aa42e08e4/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d135217db26bd9a2643e57170c3f459aa42e08e4/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=d135217db26bd9a2643e57170c3f459aa42e08e4", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use WriteMode;\n use visitor::FmtVisitor;\n-\n use syntax::codemap::{self, BytePos, Span, Pos};\n use comment::{CodeCharKind, CommentCodeSlices, rewrite_comment};\n \n@@ -80,7 +80,7 @@ impl<'a> FmtVisitor<'a> {\n     fn write_snippet_inner<F>(&mut self,\n                               big_snippet: &str,\n                               big_diff: usize,\n-                              snippet: &str,\n+                              old_snippet: &str,\n                               process_last_snippet: F)\n         where F: Fn(&mut FmtVisitor, &str, &str)\n     {\n@@ -91,6 +91,26 @@ impl<'a> FmtVisitor<'a> {\n         let mut last_wspace = None;\n         let mut rewrite_next_comment = true;\n \n+        fn replace_chars(string: &str) -> String {\n+            string.chars()\n+                  .map(|ch| {\n+                      match ch.is_whitespace() {\n+                          true => ch,\n+                          false => 'X',\n+                      }\n+                  })\n+                  .collect()\n+        }\n+\n+        let replaced = match self.write_mode {\n+            Some(mode) => match mode {\n+                WriteMode::Coverage => replace_chars(old_snippet),\n+                _ => old_snippet.to_owned(),\n+            },\n+            None => old_snippet.to_owned(),\n+        };\n+        let snippet = &*replaced;\n+\n         for (kind, offset, subslice) in CommentCodeSlices::new(snippet) {\n             if let CodeCharKind::Comment = kind {\n                 let last_char = big_snippet[..(offset + big_diff)]"}, {"sha": "9a33fdae02446494e68450e373d364011cde520b", "filename": "src/visitor.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d135217db26bd9a2643e57170c3f459aa42e08e4/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d135217db26bd9a2643e57170c3f459aa42e08e4/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=d135217db26bd9a2643e57170c3f459aa42e08e4", "patch": "@@ -14,7 +14,7 @@ use syntax::visit;\n \n use strings::string_buffer::StringBuffer;\n \n-use Indent;\n+use {Indent, WriteMode};\n use utils;\n use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n@@ -29,6 +29,7 @@ pub struct FmtVisitor<'a> {\n     // TODO: RAII util for indenting\n     pub block_indent: Indent,\n     pub config: &'a Config,\n+    pub write_mode: Option<WriteMode>,\n }\n \n impl<'a> FmtVisitor<'a> {\n@@ -356,7 +357,10 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    pub fn from_codemap(codemap: &'a CodeMap, config: &'a Config) -> FmtVisitor<'a> {\n+    pub fn from_codemap(codemap: &'a CodeMap,\n+                        config: &'a Config,\n+                        mode: Option<WriteMode>)\n+                        -> FmtVisitor<'a> {\n         FmtVisitor {\n             codemap: codemap,\n             buffer: StringBuffer::new(),\n@@ -366,6 +370,7 @@ impl<'a> FmtVisitor<'a> {\n                 alignment: 0,\n             },\n             config: config,\n+            write_mode: mode,\n         }\n     }\n "}, {"sha": "6e9a4efe406f877d793f8d8ad2e4bb8131c9a3fa", "filename": "tests/system.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d135217db26bd9a2643e57170c3f459aa42e08e4/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d135217db26bd9a2643e57170c3f459aa42e08e4/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=d135217db26bd9a2643e57170c3f459aa42e08e4", "patch": "@@ -145,7 +145,7 @@ pub fn idempotent_check(filename: String) -> Result<FormatReport, HashMap<String\n     // Don't generate warnings for to-do items.\n     config.report_todo = ReportTactic::Never;\n \n-    let mut file_map = format(Path::new(&filename), &config);\n+    let mut file_map = format(Path::new(&filename), &config, WriteMode::Return);\n     let format_report = fmt_lines(&mut file_map, &config);\n \n     // Won't panic, as we're not doing any IO."}]}