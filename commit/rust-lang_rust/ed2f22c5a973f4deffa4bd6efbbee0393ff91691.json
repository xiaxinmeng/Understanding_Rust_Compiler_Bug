{"sha": "ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMmYyMmM1YTk3M2Y0ZGVmZmE0YmQ2ZWZiYmVlMDM5M2ZmOTE2OTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-12T18:40:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-13T10:04:49Z"}, "message": "rename PanicInfo -> AssertKind", "tree": {"sha": "e648d02dc43fed955e3e444793c8a61d8b3f3951", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e648d02dc43fed955e3e444793c8a61d8b3f3951"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "html_url": "https://github.com/rust-lang/rust/commit/ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e7d1c39edafcbce55ba08449689566e335545b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7d1c39edafcbce55ba08449689566e335545b7", "html_url": "https://github.com/rust-lang/rust/commit/7e7d1c39edafcbce55ba08449689566e335545b7"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "4520d3a333316599fec2759e519e51fb002c6ba8", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "patch": "@@ -1155,7 +1155,7 @@ pub enum TerminatorKind<'tcx> {\n \n /// Information about an assertion failure.\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable, PartialEq)]\n-pub enum PanicInfo<O> {\n+pub enum AssertKind<O> {\n     BoundsCheck { len: O, index: O },\n     Overflow(BinOp),\n     OverflowNeg,\n@@ -1166,7 +1166,7 @@ pub enum PanicInfo<O> {\n }\n \n /// Type for MIR `Assert` terminator error messages.\n-pub type AssertMessage<'tcx> = PanicInfo<Operand<'tcx>>;\n+pub type AssertMessage<'tcx> = AssertKind<Operand<'tcx>>;\n \n pub type Successors<'a> =\n     iter::Chain<option::IntoIter<&'a BasicBlock>, slice::Iter<'a, BasicBlock>>;\n@@ -1397,12 +1397,12 @@ impl<'tcx> BasicBlockData<'tcx> {\n     }\n }\n \n-impl<O> PanicInfo<O> {\n+impl<O> AssertKind<O> {\n     /// Getting a description does not require `O` to be printable, and does not\n     /// require allocation.\n     /// The caller is expected to handle `BoundsCheck` separately.\n     pub fn description(&self) -> &'static str {\n-        use PanicInfo::*;\n+        use AssertKind::*;\n         match self {\n             Overflow(BinOp::Add) => \"attempt to add with overflow\",\n             Overflow(BinOp::Sub) => \"attempt to subtract with overflow\",\n@@ -1419,14 +1419,14 @@ impl<O> PanicInfo<O> {\n             ResumedAfterReturn(GeneratorKind::Async(_)) => \"`async fn` resumed after completion\",\n             ResumedAfterPanic(GeneratorKind::Gen) => \"generator resumed after panicking\",\n             ResumedAfterPanic(GeneratorKind::Async(_)) => \"`async fn` resumed after panicking\",\n-            BoundsCheck { .. } => bug!(\"Unexpected PanicInfo\"),\n+            BoundsCheck { .. } => bug!(\"Unexpected AssertKind\"),\n         }\n     }\n }\n \n-impl<O: fmt::Debug> fmt::Debug for PanicInfo<O> {\n+impl<O: fmt::Debug> fmt::Debug for AssertKind<O> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use PanicInfo::*;\n+        use AssertKind::*;\n         match self {\n             BoundsCheck { ref len, ref index } => {\n                 write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index)\n@@ -2719,7 +2719,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 }\n             }\n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n-                use PanicInfo::*;\n+                use AssertKind::*;\n                 let msg = match msg {\n                     BoundsCheck { ref len, ref index } => {\n                         BoundsCheck { len: len.fold_with(folder), index: index.fold_with(folder) }\n@@ -2768,7 +2768,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             }\n             Assert { ref cond, ref msg, .. } => {\n                 if cond.visit_with(visitor) {\n-                    use PanicInfo::*;\n+                    use AssertKind::*;\n                     match msg {\n                         BoundsCheck { ref len, ref index } => {\n                             len.visit_with(visitor) || index.visit_with(visitor)"}, {"sha": "8330bbe0834326b2844d49aec5dbf5509e86cf16", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "patch": "@@ -533,7 +533,7 @@ macro_rules! make_mir_visitor {\n             fn super_assert_message(&mut self,\n                                     msg: & $($mutability)? AssertMessage<'tcx>,\n                                     location: Location) {\n-                use crate::mir::PanicInfo::*;\n+                use crate::mir::AssertKind::*;\n                 match msg {\n                     BoundsCheck { len, index } => {\n                         self.visit_operand(len, location);"}, {"sha": "916c15eb1b6eaa6446d373ff3bf9cb8d1101b107", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "patch": "@@ -11,7 +11,7 @@ use crate::MemFlags;\n \n use rustc::middle::lang_items;\n use rustc::mir;\n-use rustc::mir::PanicInfo;\n+use rustc::mir::AssertKind;\n use rustc::ty::layout::{self, FnAbiExt, HasTyCtxt, LayoutOf};\n use rustc::ty::{self, Instance, Ty, TypeFoldable};\n use rustc_index::vec::Idx;\n@@ -378,7 +378,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // checked operation, just a comparison with the minimum\n         // value, so we have to check for the assert message.\n         if !bx.check_overflow() {\n-            if let PanicInfo::OverflowNeg = *msg {\n+            if let AssertKind::OverflowNeg = *msg {\n                 const_cond = Some(expected);\n             }\n         }\n@@ -412,7 +412,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Put together the arguments to the panic entry point.\n         let (lang_item, args) = match msg {\n-            PanicInfo::BoundsCheck { ref len, ref index } => {\n+            AssertKind::BoundsCheck { ref len, ref index } => {\n                 let len = self.codegen_operand(&mut bx, len).immediate();\n                 let index = self.codegen_operand(&mut bx, index).immediate();\n                 (lang_items::PanicBoundsCheckFnLangItem, vec![location, index, len])"}, {"sha": "0bead27050ce642cb6830199f7e8e41db7a5fee4", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "patch": "@@ -153,8 +153,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             }\n             TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {\n                 self.consume_operand(location, cond);\n-                use rustc::mir::PanicInfo;\n-                if let PanicInfo::BoundsCheck { ref len, ref index } = *msg {\n+                use rustc::mir::AssertKind;\n+                if let AssertKind::BoundsCheck { ref len, ref index } = *msg {\n                     self.consume_operand(location, len);\n                     self.consume_operand(location, index);\n                 }"}, {"sha": "941534e68fcad75c5a4cf4decdf36e27004f149b", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "patch": "@@ -654,8 +654,8 @@ impl<'cx, 'tcx> dataflow::generic::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt\n             }\n             TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {\n                 self.consume_operand(loc, (cond, span), flow_state);\n-                use rustc::mir::PanicInfo;\n-                if let PanicInfo::BoundsCheck { ref len, ref index } = *msg {\n+                use rustc::mir::AssertKind;\n+                if let AssertKind::BoundsCheck { ref len, ref index } = *msg {\n                     self.consume_operand(loc, (len, span), flow_state);\n                     self.consume_operand(loc, (index, span), flow_state);\n                 }"}, {"sha": "5f7bf148e331daac3f5adfc9e753b834915b8623", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "patch": "@@ -11,7 +11,7 @@ use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n-use rustc::mir::PanicInfo;\n+use rustc::mir::AssertKind;\n use rustc::mir::*;\n use rustc::traits::query::type_op;\n use rustc::traits::query::type_op::custom::CustomTypeOp;\n@@ -1563,7 +1563,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     span_mirbug!(self, term, \"bad Assert ({:?}, not bool\", cond_ty);\n                 }\n \n-                if let PanicInfo::BoundsCheck { ref len, ref index } = *msg {\n+                if let AssertKind::BoundsCheck { ref len, ref index } = *msg {\n                     if len.ty(body, tcx) != tcx.types.usize {\n                         span_mirbug!(self, len, \"bounds-check length non-usize {:?}\", len)\n                     }"}, {"sha": "63ad9ec8cae9eec3481de3ef66ae11488dec4f92", "filename": "src/librustc_mir/const_eval/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs?ref=ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "patch": "@@ -1,7 +1,7 @@\n use std::error::Error;\n use std::fmt;\n \n-use rustc::mir::PanicInfo;\n+use rustc::mir::AssertKind;\n use rustc_span::Symbol;\n \n use super::InterpCx;\n@@ -12,7 +12,7 @@ use crate::interpret::{ConstEvalErr, InterpError, InterpErrorInfo, Machine};\n pub enum ConstEvalErrKind {\n     NeedsRfc(String),\n     ConstAccessesStatic,\n-    AssertFailure(PanicInfo<u64>),\n+    AssertFailure(AssertKind<u64>),\n     Panic { msg: Symbol, line: u32, col: u32, file: Symbol },\n }\n "}, {"sha": "e40436ccf0b4b546e37a8ae616b0774df8ecbe99", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "patch": "@@ -281,8 +281,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         msg: &AssertMessage<'tcx>,\n         _unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        use rustc::mir::PanicInfo::*;\n-        // Convert `PanicInfo<Operand>` to `PanicInfo<u64>`.\n+        use rustc::mir::AssertKind::*;\n+        // Convert `AssertKind<Operand>` to `AssertKind<u64>`.\n         let err = match msg {\n             BoundsCheck { ref len, ref index } => {\n                 let len = ecx"}, {"sha": "09eb6e952add6afff6fb22ecdb54b23edf48c47b", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "patch": "@@ -9,8 +9,8 @@ use rustc::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };\n use rustc::mir::{\n-    read_only, AggregateKind, BasicBlock, BinOp, Body, BodyAndCache, ClearCrossCrate, Constant,\n-    Local, LocalDecl, LocalKind, Location, Operand, PanicInfo, Place, ReadOnlyBodyAndCache, Rvalue,\n+    read_only, AggregateKind, AssertKind, BasicBlock, BinOp, Body, BodyAndCache, ClearCrossCrate,\n+    Constant, Local, LocalDecl, LocalKind, Location, Operand, Place, ReadOnlyBodyAndCache, Rvalue,\n     SourceInfo, SourceScope, SourceScopeData, Statement, StatementKind, Terminator, TerminatorKind,\n     UnOp, RETURN_PLACE,\n };\n@@ -501,7 +501,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n-    fn report_panic_as_lint(&self, source_info: SourceInfo, panic: PanicInfo<u64>) -> Option<()> {\n+    fn report_panic_as_lint(&self, source_info: SourceInfo, panic: AssertKind<u64>) -> Option<()> {\n         // Somewhat convoluted way to re-use the CTFE error reporting code.\n         let lint_root = self.lint_root(source_info)?;\n         let error = InterpError::MachineStop(Box::new(format!(\"{:?}\", panic)));\n@@ -530,7 +530,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             // `AssertKind` only has an `OverflowNeg` variant, to make sure that is\n             // appropriate to use.\n             assert_eq!(op, UnOp::Neg, \"Neg is the only UnOp that can overflow\");\n-            self.report_panic_as_lint(source_info, PanicInfo::OverflowNeg)?;\n+            self.report_panic_as_lint(source_info, AssertKind::OverflowNeg)?;\n         }\n \n         Some(())\n@@ -572,7 +572,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             let (_res, overflow, _ty) = this.ecx.overflowing_binary_op(op, l, r)?;\n             Ok(overflow)\n         })? {\n-            self.report_panic_as_lint(source_info, PanicInfo::Overflow(op))?;\n+            self.report_panic_as_lint(source_info, AssertKind::Overflow(op))?;\n         }\n \n         Some(())\n@@ -910,11 +910,11 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                             span,\n                             |lint| {\n                                 let msg = match msg {\n-                                    PanicInfo::Overflow(_)\n-                                    | PanicInfo::OverflowNeg\n-                                    | PanicInfo::DivisionByZero\n-                                    | PanicInfo::RemainderByZero => msg.description().to_owned(),\n-                                    PanicInfo::BoundsCheck { ref len, ref index } => {\n+                                    AssertKind::Overflow(_)\n+                                    | AssertKind::OverflowNeg\n+                                    | AssertKind::DivisionByZero\n+                                    | AssertKind::RemainderByZero => msg.description().to_owned(),\n+                                    AssertKind::BoundsCheck { ref len, ref index } => {\n                                         let len = self\n                                             .eval_operand(len, source_info)\n                                             .expect(\"len must be const\");"}, {"sha": "d5d9a8c83cd37a79467713e1a13e68f34fa61991", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "patch": "@@ -1022,7 +1022,7 @@ fn create_generator_resume_function<'tcx>(\n \n     let mut cases = create_cases(body, &transform, Operation::Resume);\n \n-    use rustc::mir::PanicInfo::{ResumedAfterPanic, ResumedAfterReturn};\n+    use rustc::mir::AssertKind::{ResumedAfterPanic, ResumedAfterReturn};\n \n     // Jump to the entry point on the unresumed\n     cases.insert(0, (UNRESUMED, BasicBlock::new(0)));"}, {"sha": "d77cc49c94f6732cc3a2d7397c6b1b8d8407eae5", "filename": "src/librustc_mir_build/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs?ref=ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "patch": "@@ -5,7 +5,7 @@ use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n use rustc::middle::region;\n-use rustc::mir::PanicInfo::BoundsCheck;\n+use rustc::mir::AssertKind::BoundsCheck;\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty, TyCtxt, Variance};\n use rustc_span::Span;"}, {"sha": "dc97f321a36ad66eef7407c108b0f82e663a6dc5", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2f22c5a973f4deffa4bd6efbbee0393ff91691/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=ed2f22c5a973f4deffa4bd6efbbee0393ff91691", "patch": "@@ -6,7 +6,7 @@ use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n use rustc::middle::region;\n-use rustc::mir::PanicInfo;\n+use rustc::mir::AssertKind;\n use rustc::mir::*;\n use rustc::ty::{self, Ty, UpvarSubsts};\n use rustc_span::Span;\n@@ -86,7 +86,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         Operand::Move(is_min),\n                         false,\n-                        PanicInfo::OverflowNeg,\n+                        AssertKind::OverflowNeg,\n                         expr_span,\n                     );\n                 }\n@@ -294,7 +294,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let val = tcx.mk_place_field(result_value.clone(), val_fld, ty);\n             let of = tcx.mk_place_field(result_value, of_fld, bool_ty);\n \n-            let err = PanicInfo::Overflow(op);\n+            let err = AssertKind::Overflow(op);\n \n             block = self.assert(block, Operand::Move(of), false, err, span);\n \n@@ -305,11 +305,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // and 2. there are two possible failure cases, divide-by-zero and overflow.\n \n                 let zero_err = if op == BinOp::Div {\n-                    PanicInfo::DivisionByZero\n+                    AssertKind::DivisionByZero\n                 } else {\n-                    PanicInfo::RemainderByZero\n+                    AssertKind::RemainderByZero\n                 };\n-                let overflow_err = PanicInfo::Overflow(op);\n+                let overflow_err = AssertKind::Overflow(op);\n \n                 // Check for / 0\n                 let is_zero = self.temp(bool_ty, span);"}]}