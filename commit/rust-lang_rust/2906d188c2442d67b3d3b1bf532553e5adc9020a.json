{"sha": "2906d188c2442d67b3d3b1bf532553e5adc9020a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MDZkMTg4YzI0NDJkNjdiM2QzYjFiZjUzMjU1M2U1YWRjOTAyMGE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-30T22:08:40Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-11T22:33:04Z"}, "message": "Cleanup", "tree": {"sha": "568737db99c30e7c0fc62f5d0f36e0abb340a573", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/568737db99c30e7c0fc62f5d0f36e0abb340a573"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2906d188c2442d67b3d3b1bf532553e5adc9020a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2906d188c2442d67b3d3b1bf532553e5adc9020a", "html_url": "https://github.com/rust-lang/rust/commit/2906d188c2442d67b3d3b1bf532553e5adc9020a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2906d188c2442d67b3d3b1bf532553e5adc9020a/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38cd9f0c947981388af652c8691574675673c768", "url": "https://api.github.com/repos/rust-lang/rust/commits/38cd9f0c947981388af652c8691574675673c768", "html_url": "https://github.com/rust-lang/rust/commit/38cd9f0c947981388af652c8691574675673c768"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "166728153c5b49daaf783f265024fd8e67d6327e", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2906d188c2442d67b3d3b1bf532553e5adc9020a/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2906d188c2442d67b3d3b1bf532553e5adc9020a/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=2906d188c2442d67b3d3b1bf532553e5adc9020a", "patch": "@@ -9,17 +9,24 @@ use crate::{\n };\n use hir_expand::name::Name;\n \n+const MAX_PATH_LEN: usize = 15;\n+\n pub fn find_path(db: &impl DefDatabase, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n-    find_path_inner(db, item, from, 15)\n+    find_path_inner(db, item, from, MAX_PATH_LEN)\n }\n \n-fn find_path_inner(db: &impl DefDatabase, item: ItemInNs, from: ModuleId, max_len: usize) -> Option<ModPath> {\n-    // Base cases:\n-\n+fn find_path_inner(\n+    db: &impl DefDatabase,\n+    item: ItemInNs,\n+    from: ModuleId,\n+    max_len: usize,\n+) -> Option<ModPath> {\n     if max_len == 0 {\n         return None;\n     }\n \n+    // Base cases:\n+\n     // - if the item is already in scope, return the name under which it is\n     let def_map = db.crate_def_map(from.krate);\n     let from_scope: &crate::item_scope::ItemScope = &def_map.modules[from.local_id].scope;\n@@ -86,8 +93,12 @@ fn find_path_inner(db: &impl DefDatabase, item: ItemInNs, from: ModuleId, max_le\n     let mut best_path = None;\n     let mut best_path_len = max_len;\n     for (module_id, name) in importable_locations {\n-        let mut path = match find_path_inner(db, ItemInNs::Types(ModuleDefId::ModuleId(module_id)), from, best_path_len - 1)\n-        {\n+        let mut path = match find_path_inner(\n+            db,\n+            ItemInNs::Types(ModuleDefId::ModuleId(module_id)),\n+            from,\n+            best_path_len - 1,\n+        ) {\n             None => continue,\n             Some(path) => path,\n         };\n@@ -101,13 +112,14 @@ fn find_path_inner(db: &impl DefDatabase, item: ItemInNs, from: ModuleId, max_le\n }\n \n fn path_len(path: &ModPath) -> usize {\n-    path.segments.len() + match path.kind {\n-        PathKind::Plain => 0,\n-        PathKind::Super(i) => i as usize,\n-        PathKind::Crate => 1,\n-        PathKind::Abs => 0,\n-        PathKind::DollarCrate(_) => 1,\n-    }\n+    path.segments.len()\n+        + match path.kind {\n+            PathKind::Plain => 0,\n+            PathKind::Super(i) => i as usize,\n+            PathKind::Crate => 1,\n+            PathKind::Abs => 0,\n+            PathKind::DollarCrate(_) => 1,\n+        }\n }\n \n fn find_importable_locations("}]}