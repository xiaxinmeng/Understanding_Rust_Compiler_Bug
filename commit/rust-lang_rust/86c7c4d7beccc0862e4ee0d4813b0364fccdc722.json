{"sha": "86c7c4d7beccc0862e4ee0d4813b0364fccdc722", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YzdjNGQ3YmVjY2MwODYyZTRlZTBkNDgxM2IwMzY0ZmNjZGM3MjI=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-06T01:06:57Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-28T00:11:12Z"}, "message": "[const-prop] Replace `Use` handling with use of `InterpCx`", "tree": {"sha": "8e59633de5f15e62ca962a91ea6e62c3bf63428a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e59633de5f15e62ca962a91ea6e62c3bf63428a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86c7c4d7beccc0862e4ee0d4813b0364fccdc722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86c7c4d7beccc0862e4ee0d4813b0364fccdc722", "html_url": "https://github.com/rust-lang/rust/commit/86c7c4d7beccc0862e4ee0d4813b0364fccdc722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86c7c4d7beccc0862e4ee0d4813b0364fccdc722/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc17936c8a466e56d472b811e0aca0cf8ffdf9a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1", "html_url": "https://github.com/rust-lang/rust/commit/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "daca7a25787ca5d734bb137b3efe93fc5fa17e3b", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c7c4d7beccc0862e4ee0d4813b0364fccdc722/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c7c4d7beccc0862e4ee0d4813b0364fccdc722/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=86c7c4d7beccc0862e4ee0d4813b0364fccdc722", "patch": "@@ -132,7 +132,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ///\n     /// There is no separate `eval_rvalue` function. Instead, the code for handling each rvalue\n     /// type writes its results directly into the memory specified by the place.\n-    fn eval_rvalue_into_place(\n+    pub fn eval_rvalue_into_place(\n         &mut self,\n         rvalue: &mir::Rvalue<'tcx>,\n         place: &mir::Place<'tcx>,"}, {"sha": "d92eb4706bb28374d0e4b04409b0457d84545394", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/86c7c4d7beccc0862e4ee0d4813b0364fccdc722/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c7c4d7beccc0862e4ee0d4813b0364fccdc722/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=86c7c4d7beccc0862e4ee0d4813b0364fccdc722", "patch": "@@ -300,11 +300,16 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         rvalue: &Rvalue<'tcx>,\n         place_layout: TyLayout<'tcx>,\n         source_info: SourceInfo,\n+        place: &Place<'tcx>,\n     ) -> Option<Const<'tcx>> {\n         let span = source_info.span;\n         match *rvalue {\n-            Rvalue::Use(ref op) => {\n-                self.eval_operand(op, source_info)\n+            Rvalue::Use(_) |\n+            Rvalue::Len(_) => {\n+                self.use_ecx(source_info, |this| {\n+                    this.ecx.eval_rvalue_into_place(rvalue, place)?;\n+                    this.ecx.eval_place_to_op(place, Some(place_layout))\n+                })\n             },\n             Rvalue::Ref(_, _, ref place) => {\n                 let src = self.eval_place(place, source_info)?;\n@@ -324,22 +329,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     Ok(dest.into())\n                 })\n             },\n-            Rvalue::Len(ref place) => {\n-                let place = self.eval_place(&place, source_info)?;\n-                let mplace = place.try_as_mplace().ok()?;\n-\n-                if let ty::Slice(_) = mplace.layout.ty.kind {\n-                    let len = mplace.meta.unwrap().to_usize(&self.ecx).unwrap();\n-\n-                    Some(ImmTy::from_uint(\n-                        len,\n-                        self.tcx.layout_of(self.param_env.and(self.tcx.types.usize)).ok()?,\n-                    ).into())\n-                } else {\n-                    trace!(\"not slice: {:?}\", mplace.layout.ty.kind);\n-                    None\n-                }\n-            },\n             Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n                 type_size_of(self.tcx, self.param_env, ty).and_then(|n| Some(\n                     ImmTy::from_uint(\n@@ -626,15 +615,15 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                 .ty(&self.local_decls, self.tcx)\n                 .ty;\n             if let Ok(place_layout) = self.tcx.layout_of(self.param_env.and(place_ty)) {\n-                if let Some(value) = self.const_prop(rval, place_layout, statement.source_info) {\n-                    if let Place {\n-                        base: PlaceBase::Local(local),\n-                        projection: box [],\n-                    } = *place {\n+                if let Place {\n+                    base: PlaceBase::Local(local),\n+                    projection: box [],\n+                } = *place {\n+                    if let Some(value) = self.const_prop(rval, place_layout, statement.source_info, place) {\n                         trace!(\"checking whether {:?} can be stored to {:?}\", value, local);\n                         if self.can_const_prop[local] {\n                             trace!(\"storing {:?} to {:?}\", value, local);\n-                            assert!(self.get_const(local).is_none());\n+                            assert!(self.get_const(local).is_none() || self.get_const(local) == Some(value));\n                             self.set_const(local, value);\n \n                             if self.should_const_prop() {\n@@ -648,6 +637,18 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                     }\n                 }\n             }\n+        } else if let StatementKind::StorageLive(local) = statement.kind {\n+            if self.can_const_prop[local] {\n+                let frame = self.ecx.frame_mut();\n+\n+                frame.locals[local].value = LocalValue::Uninitialized;\n+            }\n+        } else if let StatementKind::StorageDead(local) = statement.kind {\n+            if self.can_const_prop[local] {\n+                let frame = self.ecx.frame_mut();\n+\n+                frame.locals[local].value = LocalValue::Dead;\n+            }\n         }\n         self.super_statement(statement, location);\n     }"}]}