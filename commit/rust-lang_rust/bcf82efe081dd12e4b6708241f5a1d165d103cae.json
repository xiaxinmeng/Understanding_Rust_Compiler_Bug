{"sha": "bcf82efe081dd12e4b6708241f5a1d165d103cae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZjgyZWZlMDgxZGQxMmU0YjY3MDgyNDFmNWExZDE2NWQxMDNjYWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T13:51:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T13:54:39Z"}, "message": "deallocate locals before validation, to catch dangling references", "tree": {"sha": "41855c29da6a1099d72d458fa5683f0203edfc51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41855c29da6a1099d72d458fa5683f0203edfc51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcf82efe081dd12e4b6708241f5a1d165d103cae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf82efe081dd12e4b6708241f5a1d165d103cae", "html_url": "https://github.com/rust-lang/rust/commit/bcf82efe081dd12e4b6708241f5a1d165d103cae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcf82efe081dd12e4b6708241f5a1d165d103cae/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d808d106bc88be89eba1354e5dd724bb5816726", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d808d106bc88be89eba1354e5dd724bb5816726", "html_url": "https://github.com/rust-lang/rust/commit/1d808d106bc88be89eba1354e5dd724bb5816726"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "148442deaad7e60154656c3060dfe71245062afe", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bcf82efe081dd12e4b6708241f5a1d165d103cae/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf82efe081dd12e4b6708241f5a1d165d103cae/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=bcf82efe081dd12e4b6708241f5a1d165d103cae", "patch": "@@ -492,7 +492,24 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         let frame = self.stack.pop().expect(\n             \"tried to pop a stack frame, but there were none\",\n         );\n-        // Validate the return value.\n+        // Abort early if we do not want to clean up: We also avoid validation in that case,\n+        // because this is CTFE and the final value will be thoroughly validated anyway.\n+        match frame.return_to_block {\n+            StackPopCleanup::Goto(_) => {},\n+            StackPopCleanup::None { cleanup } => {\n+                if !cleanup {\n+                    assert!(self.stack.is_empty(), \"only the topmost frame should ever be leaked\");\n+                    // Leak the locals, skip validation.\n+                    return Ok(());\n+                }\n+            }\n+        }\n+        // Deallocate all locals that are backed by an allocation.\n+        for local in frame.locals {\n+            self.deallocate_local(local)?;\n+        }\n+        // Validate the return value. Do this after deallocating so that we catch dangling\n+        // references.\n         if let Some(return_place) = frame.return_place {\n             if M::enforce_validity(self) {\n                 // Data got changed, better make sure it matches the type!\n@@ -518,16 +535,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             StackPopCleanup::Goto(block) => {\n                 self.goto_block(block)?;\n             }\n-            StackPopCleanup::None { cleanup } => {\n-                if !cleanup {\n-                    // Leak the locals.\n-                    return Ok(());\n-                }\n-            }\n-        }\n-        // Deallocate all locals that are backed by an allocation.\n-        for local in frame.locals {\n-            self.deallocate_local(local)?;\n+            StackPopCleanup::None { .. } => {}\n         }\n \n         if self.stack.len() > 1 { // FIXME should be \"> 0\", printing topmost frame crashes rustc..."}]}