{"sha": "0b81c2eb82c3663e691c568394455f80dd532fa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiODFjMmViODJjMzY2M2U2OTFjNTY4Mzk0NDU1ZjgwZGQ1MzJmYTE=", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2021-08-19T20:34:01Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2021-08-24T12:23:58Z"}, "message": "Move `named_asm_labels` to a HIR lint", "tree": {"sha": "67d8fb199e5c762dcdcec6ae074726075affdc6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67d8fb199e5c762dcdcec6ae074726075affdc6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b81c2eb82c3663e691c568394455f80dd532fa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b81c2eb82c3663e691c568394455f80dd532fa1", "html_url": "https://github.com/rust-lang/rust/commit/0b81c2eb82c3663e691c568394455f80dd532fa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b81c2eb82c3663e691c568394455f80dd532fa1/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f66e825f73d2bd7f8a763b723983850f891985b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f66e825f73d2bd7f8a763b723983850f891985b0", "html_url": "https://github.com/rust-lang/rust/commit/f66e825f73d2bd7f8a763b723983850f891985b0"}], "stats": {"total": 451, "additions": 304, "deletions": 147}, "files": [{"sha": "2c2d30d872e2023d38f4a61b054d6bcd59231533", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=0b81c2eb82c3663e691c568394455f80dd532fa1", "patch": "@@ -2028,6 +2028,7 @@ pub enum InlineAsmOperand {\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct InlineAsm {\n     pub template: Vec<InlineAsmTemplatePiece>,\n+    pub template_strs: Box<[(Symbol, Option<Symbol>, Span)]>,\n     pub operands: Vec<(InlineAsmOperand, Span)>,\n     pub clobber_abi: Option<(Symbol, Span)>,\n     pub options: InlineAsmOptions,"}, {"sha": "774d5cb2dda9d55660b6d451e55af3b456cde476", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=0b81c2eb82c3663e691c568394455f80dd532fa1", "patch": "@@ -19,20 +19,20 @@ use crate::token;\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n \n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub enum AssocCtxt {\n     Trait,\n     Impl,\n }\n \n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub enum FnCtxt {\n     Free,\n     Foreign,\n     Assoc(AssocCtxt),\n }\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n pub enum FnKind<'a> {\n     /// E.g., `fn foo()`, `fn foo(&self)`, or `extern \"Abi\" fn foo()`.\n     Fn(FnCtxt, Ident, &'a FnSig, &'a Visibility, Option<&'a Block>),"}, {"sha": "b9b27855a0b88cc7331ab0d3471158b8603e0a0d", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=0b81c2eb82c3663e691c568394455f80dd532fa1", "patch": "@@ -392,8 +392,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let operands = self.arena.alloc_from_iter(operands);\n         let template = self.arena.alloc_from_iter(asm.template.iter().cloned());\n+        let template_strs = self.arena.alloc_from_iter(asm.template_strs.iter().cloned());\n         let line_spans = self.arena.alloc_slice(&asm.line_spans[..]);\n-        let hir_asm = hir::InlineAsm { template, operands, options: asm.options, line_spans };\n+        let hir_asm =\n+            hir::InlineAsm { template, template_strs, operands, options: asm.options, line_spans };\n         self.arena.alloc(hir_asm)\n     }\n }"}, {"sha": "652165fb9b60b1f646c7827aaa07d17548a6e8a1", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 14, "deletions": 76, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=0b81c2eb82c3663e691c568394455f80dd532fa1", "patch": "@@ -7,10 +7,10 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::{self, *};\n use rustc_parse::parser::Parser;\n use rustc_parse_format as parse;\n-use rustc_session::lint::{self, BuiltinLintDiagnostics};\n+use rustc_session::lint;\n use rustc_span::symbol::Ident;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::{InnerSpan, MultiSpan, Span};\n+use rustc_span::{InnerSpan, Span};\n use rustc_target::asm::InlineAsmArch;\n use smallvec::smallvec;\n \n@@ -484,11 +484,7 @@ fn parse_reg<'a>(\n     Ok(result)\n }\n \n-fn expand_preparsed_asm(\n-    ecx: &mut ExtCtxt<'_>,\n-    args: AsmArgs,\n-    is_local_asm: bool,\n-) -> Option<ast::InlineAsm> {\n+fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::InlineAsm> {\n     let mut template = vec![];\n     // Register operands are implicitly used since they are not allowed to be\n     // referenced in the template string.\n@@ -501,6 +497,8 @@ fn expand_preparsed_asm(\n     let mut line_spans = Vec::with_capacity(args.templates.len());\n     let mut curarg = 0;\n \n+    let mut template_strs = Vec::with_capacity(args.templates.len());\n+\n     for template_expr in args.templates.into_iter() {\n         if !template.is_empty() {\n             template.push(ast::InlineAsmTemplatePiece::String(\"\\n\".to_string()));\n@@ -524,8 +522,13 @@ fn expand_preparsed_asm(\n             ast::StrStyle::Raw(raw) => Some(raw as usize),\n         };\n \n-        let template_str = &template_str.as_str();\n         let template_snippet = ecx.source_map().span_to_snippet(template_sp).ok();\n+        template_strs.push((\n+            template_str,\n+            template_snippet.as_ref().map(|s| Symbol::intern(s)),\n+            template_sp,\n+        ));\n+        let template_str = &template_str.as_str();\n \n         if let Some(InlineAsmArch::X86 | InlineAsmArch::X86_64) = ecx.sess.asm_arch {\n             let find_span = |needle: &str| -> Span {\n@@ -560,72 +563,6 @@ fn expand_preparsed_asm(\n             }\n         }\n \n-        // Lint against the use of named labels in inline `asm!` but not `global_asm!`\n-        if is_local_asm {\n-            let find_label_span = |needle: &str| -> Option<Span> {\n-                if let Some(snippet) = &template_snippet {\n-                    if let Some(pos) = snippet.find(needle) {\n-                        let end = pos\n-                            + &snippet[pos..]\n-                                .find(|c| c == ':')\n-                                .unwrap_or(snippet[pos..].len() - 1);\n-                        let inner = InnerSpan::new(pos, end);\n-                        return Some(template_sp.from_inner(inner));\n-                    }\n-                }\n-\n-                None\n-            };\n-\n-            let mut found_labels = Vec::new();\n-\n-            // A semicolon might not actually be specified as a separator for all targets, but it seems like LLVM accepts it always\n-            let statements = template_str.split(|c| matches!(c, '\\n' | ';'));\n-            for statement in statements {\n-                // If there's a comment, trim it from the statement\n-                let statement = statement.find(\"//\").map_or(statement, |idx| &statement[..idx]);\n-                let mut start_idx = 0;\n-                for (idx, _) in statement.match_indices(':') {\n-                    let possible_label = statement[start_idx..idx].trim();\n-                    let mut chars = possible_label.chars();\n-                    if let Some(c) = chars.next() {\n-                        // A label starts with an alphabetic character or . or _ and continues with alphanumeric characters, _, or $\n-                        if (c.is_alphabetic() || matches!(c, '.' | '_'))\n-                            && chars.all(|c| c.is_alphanumeric() || matches!(c, '_' | '$'))\n-                        {\n-                            found_labels.push(possible_label);\n-                        } else {\n-                            // If we encounter a non-label, there cannot be any further labels, so stop checking\n-                            break;\n-                        }\n-                    } else {\n-                        // Empty string means a leading ':' in this section, which is not a label\n-                        break;\n-                    }\n-\n-                    start_idx = idx + 1;\n-                }\n-            }\n-\n-            if found_labels.len() > 0 {\n-                let spans =\n-                    found_labels.into_iter().filter_map(find_label_span).collect::<Vec<Span>>();\n-                // If there were labels but we couldn't find a span, combine the warnings and use the template span\n-                let target_spans: MultiSpan =\n-                    if spans.len() > 0 { spans.into() } else { template_sp.into() };\n-                ecx.parse_sess().buffer_lint_with_diagnostic(\n-                    lint::builtin::NAMED_ASM_LABELS,\n-                    target_spans,\n-                    ecx.current_expansion.lint_node_id,\n-                    \"avoid using named labels in inline assembly\",\n-                    BuiltinLintDiagnostics::NamedAsmLabel(\n-                        \"only local labels of the form `<number>:` should be used in inline asm\"\n-                            .to_string(),\n-                    ),\n-                );\n-            }\n-        }\n-\n         // Don't treat raw asm as a format string.\n         if args.options.contains(ast::InlineAsmOptions::RAW) {\n             template.push(ast::InlineAsmTemplatePiece::String(template_str.to_string()));\n@@ -819,6 +756,7 @@ fn expand_preparsed_asm(\n \n     Some(ast::InlineAsm {\n         template,\n+        template_strs: template_strs.into_boxed_slice(),\n         operands: args.operands,\n         clobber_abi: args.clobber_abi,\n         options: args.options,\n@@ -833,7 +771,7 @@ pub fn expand_asm<'cx>(\n ) -> Box<dyn base::MacResult + 'cx> {\n     match parse_args(ecx, sp, tts, false) {\n         Ok(args) => {\n-            let expr = if let Some(inline_asm) = expand_preparsed_asm(ecx, args, true) {\n+            let expr = if let Some(inline_asm) = expand_preparsed_asm(ecx, args) {\n                 P(ast::Expr {\n                     id: ast::DUMMY_NODE_ID,\n                     kind: ast::ExprKind::InlineAsm(P(inline_asm)),\n@@ -860,7 +798,7 @@ pub fn expand_global_asm<'cx>(\n ) -> Box<dyn base::MacResult + 'cx> {\n     match parse_args(ecx, sp, tts, true) {\n         Ok(args) => {\n-            if let Some(inline_asm) = expand_preparsed_asm(ecx, args, false) {\n+            if let Some(inline_asm) = expand_preparsed_asm(ecx, args) {\n                 MacEager::items(smallvec![P(ast::Item {\n                     ident: Ident::invalid(),\n                     attrs: Vec::new(),"}, {"sha": "38deb8eaaae6b97a19685dbc5dc345726d5201f6", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=0b81c2eb82c3663e691c568394455f80dd532fa1", "patch": "@@ -2386,6 +2386,7 @@ impl<'hir> InlineAsmOperand<'hir> {\n #[derive(Debug, HashStable_Generic)]\n pub struct InlineAsm<'hir> {\n     pub template: &'hir [InlineAsmTemplatePiece],\n+    pub template_strs: &'hir [(Symbol, Option<Symbol>, Span)],\n     pub operands: &'hir [(InlineAsmOperand<'hir>, Span)],\n     pub options: InlineAsmOptions,\n     pub line_spans: &'hir [Span],"}, {"sha": "add0c0ff332f2574ba21cb2f374782f2884ef30b", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 122, "deletions": 2, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=0b81c2eb82c3663e691c568394455f80dd532fa1", "patch": "@@ -45,11 +45,11 @@ use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{self, layout::LayoutError, Ty, TyCtxt};\n-use rustc_session::lint::FutureIncompatibilityReason;\n+use rustc_session::lint::{BuiltinLintDiagnostics, FutureIncompatibilityReason};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, Span};\n+use rustc_span::{BytePos, InnerSpan, MultiSpan, Span};\n use rustc_target::abi::{LayoutOf, VariantIdx};\n use rustc_trait_selection::traits::misc::can_type_implement_copy;\n \n@@ -3140,3 +3140,123 @@ impl<'tcx> LateLintPass<'tcx> for DerefNullPtr {\n         }\n     }\n }\n+\n+declare_lint! {\n+    /// The `named_asm_labels` lint detects the use of named labels in the\n+    /// inline `asm!` macro.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![feature(asm)]\n+    /// fn main() {\n+    ///     unsafe {\n+    ///         asm!(\"foo: bar\");\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// LLVM is allowed to duplicate inline assembly blocks for any\n+    /// reason, for example when it is in a function that gets inlined. Because\n+    /// of this, GNU assembler [local labels] *must* be used instead of labels\n+    /// with a name. Using named labels might cause assembler or linker errors.\n+    ///\n+    /// See the [unstable book] for more details.\n+    ///\n+    /// [local labels]: https://sourceware.org/binutils/docs/as/Symbol-Names.html#Local-Labels\n+    /// [unstable book]: https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels\n+    pub NAMED_ASM_LABELS,\n+    Deny,\n+    \"named labels in inline assembly\",\n+}\n+\n+declare_lint_pass!(NamedAsmLabels => [NAMED_ASM_LABELS]);\n+\n+impl<'tcx> LateLintPass<'tcx> for NamedAsmLabels {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n+        if let hir::Expr {\n+            kind: hir::ExprKind::InlineAsm(hir::InlineAsm { template_strs, .. }),\n+            ..\n+        } = expr\n+        {\n+            for (template_sym, template_snippet, template_span) in template_strs.iter() {\n+                let template_str = &template_sym.as_str();\n+                let find_label_span = |needle: &str| -> Option<Span> {\n+                    if let Some(template_snippet) = template_snippet {\n+                        let snippet = template_snippet.as_str();\n+                        if let Some(pos) = snippet.find(needle) {\n+                            let end = pos\n+                                + &snippet[pos..]\n+                                    .find(|c| c == ':')\n+                                    .unwrap_or(snippet[pos..].len() - 1);\n+                            let inner = InnerSpan::new(pos, end);\n+                            return Some(template_span.from_inner(inner));\n+                        }\n+                    }\n+\n+                    None\n+                };\n+\n+                let mut found_labels = Vec::new();\n+\n+                // A semicolon might not actually be specified as a separator for all targets, but it seems like LLVM accepts it always\n+                let statements = template_str.split(|c| matches!(c, '\\n' | ';'));\n+                for statement in statements {\n+                    // If there's a comment, trim it from the statement\n+                    let statement = statement.find(\"//\").map_or(statement, |idx| &statement[..idx]);\n+                    let mut start_idx = 0;\n+                    for (idx, _) in statement.match_indices(':') {\n+                        let possible_label = statement[start_idx..idx].trim();\n+                        let mut chars = possible_label.chars();\n+                        if let Some(c) = chars.next() {\n+                            // A label starts with an alphabetic character or . or _ and continues with alphanumeric characters, _, or $\n+                            if (c.is_alphabetic() || matches!(c, '.' | '_'))\n+                                && chars.all(|c| c.is_alphanumeric() || matches!(c, '_' | '$'))\n+                            {\n+                                found_labels.push(possible_label);\n+                            } else {\n+                                // If we encounter a non-label, there cannot be any further labels, so stop checking\n+                                break;\n+                            }\n+                        } else {\n+                            // Empty string means a leading ':' in this section, which is not a label\n+                            break;\n+                        }\n+\n+                        start_idx = idx + 1;\n+                    }\n+                }\n+\n+                debug!(\"NamedAsmLabels::check_expr(): found_labels: {:#?}\", &found_labels);\n+\n+                if found_labels.len() > 0 {\n+                    let spans = found_labels\n+                        .into_iter()\n+                        .filter_map(|label| find_label_span(label))\n+                        .collect::<Vec<Span>>();\n+                    // If there were labels but we couldn't find a span, combine the warnings and use the template span\n+                    let target_spans: MultiSpan =\n+                        if spans.len() > 0 { spans.into() } else { (*template_span).into() };\n+\n+                    cx.lookup_with_diagnostics(\n+                            NAMED_ASM_LABELS,\n+                            Some(target_spans),\n+                            |diag| {\n+                                let mut err =\n+                                    diag.build(\"avoid using named labels in inline assembly\");\n+                                err.emit();\n+                            },\n+                            BuiltinLintDiagnostics::NamedAsmLabel(\n+                                \"only local labels of the form `<number>:` should be used in inline asm\"\n+                                    .to_string(),\n+                            ),\n+                        );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "24ac723f2c9132c5677fd2e0bc0e9d2b822931bf", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=0b81c2eb82c3663e691c568394455f80dd532fa1", "patch": "@@ -168,6 +168,7 @@ macro_rules! late_lint_passes {\n                 NonPanicFmt: NonPanicFmt,\n                 NoopMethodCall: NoopMethodCall,\n                 InvalidAtomicOrdering: InvalidAtomicOrdering,\n+                NamedAsmLabels: NamedAsmLabels,\n             ]\n         );\n     };"}, {"sha": "1d978b6c829239cace433aa057a8693bd5d063fb", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b81c2eb82c3663e691c568394455f80dd532fa1/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=0b81c2eb82c3663e691c568394455f80dd532fa1", "patch": "@@ -2468,38 +2468,6 @@ declare_lint! {\n     \"incorrect use of inline assembly\",\n }\n \n-declare_lint! {\n-    /// The `named_asm_labels` lint detects the use of named labels in the\n-    /// inline `asm!` macro.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,compile_fail\n-    /// fn main() {\n-    ///     unsafe {\n-    ///         asm!(\"foo: bar\");\n-    ///     }\n-    /// }\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// LLVM is allowed to duplicate inline assembly blocks for any\n-    /// reason, for example when it is in a function that gets inlined. Because\n-    /// of this, GNU assembler [local labels] *must* be used instead of labels\n-    /// with a name. Using named labels might cause assembler or linker errors.\n-    ///\n-    /// See the [unstable book] for more details.\n-    ///\n-    /// [local labels]: https://sourceware.org/binutils/docs/as/Symbol-Names.html#Local-Labels\n-    /// [unstable book]: https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels\n-    pub NAMED_ASM_LABELS,\n-    Deny,\n-    \"named labels in inline assembly\",\n-}\n-\n declare_lint! {\n     /// The `unsafe_op_in_unsafe_fn` lint detects unsafe operations in unsafe\n     /// functions without an explicit unsafe block.\n@@ -3020,7 +2988,6 @@ declare_lint_pass! {\n         INLINE_NO_SANITIZE,\n         BAD_ASM_STYLE,\n         ASM_SUB_REGISTER,\n-        NAMED_ASM_LABELS,\n         UNSAFE_OP_IN_UNSAFE_FN,\n         INCOMPLETE_INCLUDE,\n         CENUM_IMPL_DROP_CAST,"}, {"sha": "9f487bd8061fc5994d3c7cfed36dcaf91f3dcce0", "filename": "src/test/ui/asm/named-asm-labels.rs", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0b81c2eb82c3663e691c568394455f80dd532fa1/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b81c2eb82c3663e691c568394455f80dd532fa1/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.rs?ref=0b81c2eb82c3663e691c568394455f80dd532fa1", "patch": "@@ -1,6 +1,14 @@\n // only-x86_64\n \n-#![feature(asm, global_asm)]\n+// Tests that the use of named labels in the `asm!` macro are linted against\n+// except for in `#[naked]` fns.\n+// Using a named label is incorrect as per the RFC because for most cases\n+// the compiler cannot ensure that inline asm is emitted exactly once per\n+// codegen unit (except for naked fns) and so the label could be duplicated\n+// which causes less readable LLVM errors and in the worst cases causes ICEs\n+// or segfaults based on system dependent behavior and codegen flags.\n+\n+#![feature(asm, global_asm, naked_functions)]\n \n #[no_mangle]\n pub static FOO: usize = 42;\n@@ -126,5 +134,61 @@ fn main() {\n     }\n }\n \n+// Trigger on naked fns too, even though they can't be inlined, reusing a\n+// label or LTO can cause labels to break\n+#[naked]\n+pub extern \"C\" fn foo() -> i32 {\n+    unsafe { asm!(\".Lfoo: mov rax, {}; ret;\", \"nop\", const 1, options(noreturn)) } //~ ERROR avoid using named labels\n+}\n+\n+// Make sure that non-naked attributes *do* still let the lint happen\n+#[no_mangle]\n+pub extern \"C\" fn bar() {\n+    unsafe { asm!(\".Lbar: mov rax, {}; ret;\", \"nop\", const 1, options(noreturn)) }\n+    //~^ ERROR avoid using named labels\n+}\n+\n+#[naked]\n+pub extern \"C\" fn aaa() {\n+    fn _local() {}\n+\n+    unsafe { asm!(\".Laaa: nop; ret;\", options(noreturn)) } //~ ERROR avoid using named labels\n+}\n+\n+pub fn normal() {\n+    fn _local1() {}\n+\n+    #[naked]\n+    pub extern \"C\" fn bbb() {\n+        fn _very_local() {}\n+\n+        unsafe { asm!(\".Lbbb: nop; ret;\", options(noreturn)) } //~ ERROR avoid using named labels\n+    }\n+\n+    fn _local2() {}\n+}\n+\n+// Make sure that the lint happens within closures\n+fn closures() {\n+    || unsafe {\n+        asm!(\"closure1: nop\"); //~ ERROR avoid using named labels\n+    };\n+\n+    move || unsafe {\n+        asm!(\"closure2: nop\"); //~ ERROR avoid using named labels\n+    };\n+\n+    || {\n+        #[naked]\n+        unsafe extern \"C\" fn _nested() {\n+            asm!(\"ret;\", options(noreturn));\n+        }\n+\n+        unsafe {\n+            asm!(\"closure3: nop\"); //~ ERROR avoid using named labels\n+        }\n+    };\n+}\n+\n // Don't trigger on global asm\n global_asm!(\"aaaaaaaa: nop\");"}, {"sha": "396f0a1942428800f0e711f817b4332f941da732", "filename": "src/test/ui/asm/named-asm-labels.stderr", "status": "modified", "additions": 94, "deletions": 31, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/0b81c2eb82c3663e691c568394455f80dd532fa1/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b81c2eb82c3663e691c568394455f80dd532fa1/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr?ref=0b81c2eb82c3663e691c568394455f80dd532fa1", "patch": "@@ -1,5 +1,5 @@\n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:11:15\n+  --> $DIR/named-asm-labels.rs:19:15\n    |\n LL |         asm!(\"bar: nop\");\n    |               ^^^\n@@ -9,7 +9,7 @@ LL |         asm!(\"bar: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:14:15\n+  --> $DIR/named-asm-labels.rs:22:15\n    |\n LL |         asm!(\"abcd:\");\n    |               ^^^^\n@@ -18,7 +18,7 @@ LL |         asm!(\"abcd:\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:17:15\n+  --> $DIR/named-asm-labels.rs:25:15\n    |\n LL |         asm!(\"foo: bar1: nop\");\n    |               ^^^  ^^^^\n@@ -27,7 +27,7 @@ LL |         asm!(\"foo: bar1: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:21:15\n+  --> $DIR/named-asm-labels.rs:29:15\n    |\n LL |         asm!(\"foo1: nop\", \"nop\");\n    |               ^^^^\n@@ -36,7 +36,7 @@ LL |         asm!(\"foo1: nop\", \"nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:22:15\n+  --> $DIR/named-asm-labels.rs:30:15\n    |\n LL |         asm!(\"foo2: foo3: nop\", \"nop\");\n    |               ^^^^  ^^^^\n@@ -45,7 +45,7 @@ LL |         asm!(\"foo2: foo3: nop\", \"nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:24:22\n+  --> $DIR/named-asm-labels.rs:32:22\n    |\n LL |         asm!(\"nop\", \"foo4: nop\");\n    |                      ^^^^\n@@ -54,7 +54,7 @@ LL |         asm!(\"nop\", \"foo4: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:25:15\n+  --> $DIR/named-asm-labels.rs:33:15\n    |\n LL |         asm!(\"foo5: nop\", \"foo6: nop\");\n    |               ^^^^\n@@ -63,7 +63,7 @@ LL |         asm!(\"foo5: nop\", \"foo6: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:25:28\n+  --> $DIR/named-asm-labels.rs:33:28\n    |\n LL |         asm!(\"foo5: nop\", \"foo6: nop\");\n    |                            ^^^^\n@@ -72,7 +72,7 @@ LL |         asm!(\"foo5: nop\", \"foo6: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:30:15\n+  --> $DIR/named-asm-labels.rs:38:15\n    |\n LL |         asm!(\"foo7: nop; foo8: nop\");\n    |               ^^^^       ^^^^\n@@ -81,7 +81,7 @@ LL |         asm!(\"foo7: nop; foo8: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:32:15\n+  --> $DIR/named-asm-labels.rs:40:15\n    |\n LL |         asm!(\"foo9: nop; nop\");\n    |               ^^^^\n@@ -90,7 +90,7 @@ LL |         asm!(\"foo9: nop; nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:33:20\n+  --> $DIR/named-asm-labels.rs:41:20\n    |\n LL |         asm!(\"nop; foo10: nop\");\n    |                    ^^^^^\n@@ -99,7 +99,7 @@ LL |         asm!(\"nop; foo10: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:36:15\n+  --> $DIR/named-asm-labels.rs:44:15\n    |\n LL |         asm!(\"bar2: nop\\n bar3: nop\");\n    |               ^^^^        ^^^^\n@@ -108,7 +108,7 @@ LL |         asm!(\"bar2: nop\\n bar3: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:38:15\n+  --> $DIR/named-asm-labels.rs:46:15\n    |\n LL |         asm!(\"bar4: nop\\n nop\");\n    |               ^^^^\n@@ -117,7 +117,7 @@ LL |         asm!(\"bar4: nop\\n nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:39:21\n+  --> $DIR/named-asm-labels.rs:47:21\n    |\n LL |         asm!(\"nop\\n bar5: nop\");\n    |                     ^^^^\n@@ -126,7 +126,7 @@ LL |         asm!(\"nop\\n bar5: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:40:21\n+  --> $DIR/named-asm-labels.rs:48:21\n    |\n LL |         asm!(\"nop\\n bar6: bar7: nop\");\n    |                     ^^^^  ^^^^\n@@ -135,7 +135,7 @@ LL |         asm!(\"nop\\n bar6: bar7: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:46:13\n+  --> $DIR/named-asm-labels.rs:54:13\n    |\n LL |             blah2: nop\n    |             ^^^^^\n@@ -146,7 +146,7 @@ LL |             blah3: nop\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:55:19\n+  --> $DIR/named-asm-labels.rs:63:19\n    |\n LL |             nop ; blah4: nop\n    |                   ^^^^^\n@@ -155,7 +155,7 @@ LL |             nop ; blah4: nop\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:69:15\n+  --> $DIR/named-asm-labels.rs:77:15\n    |\n LL |         asm!(\"blah1: 2bar: nop\");\n    |               ^^^^^\n@@ -164,7 +164,7 @@ LL |         asm!(\"blah1: 2bar: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:72:15\n+  --> $DIR/named-asm-labels.rs:80:15\n    |\n LL |         asm!(\"def: def: nop\");\n    |               ^^^\n@@ -173,7 +173,7 @@ LL |         asm!(\"def: def: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:73:15\n+  --> $DIR/named-asm-labels.rs:81:15\n    |\n LL |         asm!(\"def: nop\\ndef: nop\");\n    |               ^^^\n@@ -182,7 +182,7 @@ LL |         asm!(\"def: nop\\ndef: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:74:15\n+  --> $DIR/named-asm-labels.rs:82:15\n    |\n LL |         asm!(\"def: nop; def: nop\");\n    |               ^^^\n@@ -191,7 +191,7 @@ LL |         asm!(\"def: nop; def: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:82:15\n+  --> $DIR/named-asm-labels.rs:90:15\n    |\n LL |         asm!(\"fooo\\u{003A} nop\");\n    |               ^^^^^^^^^^^^^^^^\n@@ -200,7 +200,7 @@ LL |         asm!(\"fooo\\u{003A} nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:83:15\n+  --> $DIR/named-asm-labels.rs:91:15\n    |\n LL |         asm!(\"foooo\\x3A nop\");\n    |               ^^^^^^^^^^^^^\n@@ -209,7 +209,7 @@ LL |         asm!(\"foooo\\x3A nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:86:15\n+  --> $DIR/named-asm-labels.rs:94:15\n    |\n LL |         asm!(\"fooooo:\\u{000A} nop\");\n    |               ^^^^^^\n@@ -218,7 +218,7 @@ LL |         asm!(\"fooooo:\\u{000A} nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:87:15\n+  --> $DIR/named-asm-labels.rs:95:15\n    |\n LL |         asm!(\"foooooo:\\x0A nop\");\n    |               ^^^^^^^\n@@ -227,7 +227,7 @@ LL |         asm!(\"foooooo:\\x0A nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:91:14\n+  --> $DIR/named-asm-labels.rs:99:14\n    |\n LL |         asm!(\"\\x41\\x42\\x43\\x3A\\x20\\x6E\\x6F\\x70\");\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -236,7 +236,7 @@ LL |         asm!(\"\\x41\\x42\\x43\\x3A\\x20\\x6E\\x6F\\x70\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:102:13\n+  --> $DIR/named-asm-labels.rs:110:13\n    |\n LL |             ab: nop // ab: does foo\n    |             ^^\n@@ -245,7 +245,7 @@ LL |             ab: nop // ab: does foo\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:114:14\n+  --> $DIR/named-asm-labels.rs:122:14\n    |\n LL |         asm!(include_str!(\"named-asm-labels.s\"));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -254,18 +254,81 @@ LL |         asm!(include_str!(\"named-asm-labels.s\"));\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n warning: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:124:19\n+  --> $DIR/named-asm-labels.rs:132:19\n    |\n LL |             asm!(\"warned: nop\");\n    |                   ^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/named-asm-labels.rs:122:16\n+  --> $DIR/named-asm-labels.rs:130:16\n    |\n LL |         #[warn(named_asm_labels)]\n    |                ^^^^^^^^^^^^^^^^\n    = help: only local labels of the form `<number>:` should be used in inline asm\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n-error: aborting due to 28 previous errors; 1 warning emitted\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:141:20\n+   |\n+LL |     unsafe { asm!(\".Lfoo: mov rax, {}; ret;\", \"nop\", const 1, options(noreturn)) }\n+   |                    ^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:147:20\n+   |\n+LL |     unsafe { asm!(\".Lbar: mov rax, {}; ret;\", \"nop\", const 1, options(noreturn)) }\n+   |                    ^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:155:20\n+   |\n+LL |     unsafe { asm!(\".Laaa: nop; ret;\", options(noreturn)) }\n+   |                    ^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:165:24\n+   |\n+LL |         unsafe { asm!(\".Lbbb: nop; ret;\", options(noreturn)) }\n+   |                        ^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:174:15\n+   |\n+LL |         asm!(\"closure1: nop\");\n+   |               ^^^^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:178:15\n+   |\n+LL |         asm!(\"closure2: nop\");\n+   |               ^^^^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:188:19\n+   |\n+LL |             asm!(\"closure3: nop\");\n+   |                   ^^^^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: aborting due to 35 previous errors; 1 warning emitted\n "}]}