{"sha": "d5798c9554670728412abbc688ab6123bf7895d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1Nzk4Yzk1NTQ2NzA3Mjg0MTJhYmJjNjg4YWI2MTIzYmY3ODk1ZDQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-29T23:25:09Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-29T23:25:09Z"}, "message": "Regression test for issue 55492.", "tree": {"sha": "c77165532f6ac7795dacb0786818dd0a1ded648a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c77165532f6ac7795dacb0786818dd0a1ded648a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5798c9554670728412abbc688ab6123bf7895d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5798c9554670728412abbc688ab6123bf7895d4", "html_url": "https://github.com/rust-lang/rust/commit/d5798c9554670728412abbc688ab6123bf7895d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5798c9554670728412abbc688ab6123bf7895d4/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c9a3e1e9c4f0862864690b9c12e225a19cbe8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c9a3e1e9c4f0862864690b9c12e225a19cbe8b", "html_url": "https://github.com/rust-lang/rust/commit/98c9a3e1e9c4f0862864690b9c12e225a19cbe8b"}], "stats": {"total": 224, "additions": 224, "deletions": 0}, "files": [{"sha": "3180823f64327b153df962041009e6ec37f39390", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.ast.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d5798c9554670728412abbc688ab6123bf7895d4/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5798c9554670728412abbc688ab6123bf7895d4/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.ast.stderr?ref=d5798c9554670728412abbc688ab6123bf7895d4", "patch": "@@ -0,0 +1,55 @@\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:21:22\n+   |\n+LL |         let mut c1 = |y: &'static mut isize| x = y;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow mutably\n+help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n+   |\n+LL |         x\n+   |\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:29:22\n+   |\n+LL |         let mut c1 = |z: &'static mut isize| {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow mutably\n+help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n+   |\n+LL |         x\n+   |\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:9\n+   |\n+LL |     pub fn capture_assign_whole(x: (i32,)) {\n+   |                                 - help: make this binding mutable: `mut x`\n+LL |         || { x = (1,); };\n+   |         ^^ cannot borrow mutably\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:43:9\n+   |\n+LL |     pub fn capture_assign_part(x: (i32,)) {\n+   |                                - help: make this binding mutable: `mut x`\n+LL |         || { x.0 = 1; };\n+   |         ^^ cannot borrow mutably\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:46:9\n+   |\n+LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n+   |                                   - help: make this binding mutable: `mut x`\n+LL |         || { &mut x; };\n+   |         ^^ cannot borrow mutably\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:49:9\n+   |\n+LL |     pub fn capture_reborrow_part(x: (i32,)) {\n+   |                                  - help: make this binding mutable: `mut x`\n+LL |         || { &mut x.0; };\n+   |         ^^ cannot borrow mutably\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0595`."}, {"sha": "0ccddf0a67d6fa0809861708cece0a573f3b51ae", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.migrate.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d5798c9554670728412abbc688ab6123bf7895d4/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5798c9554670728412abbc688ab6123bf7895d4/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr?ref=d5798c9554670728412abbc688ab6123bf7895d4", "patch": "@@ -0,0 +1,54 @@\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:21:46\n+   |\n+LL |     pub fn e(x: &'static mut isize) {\n+   |              - help: consider changing this to be mutable: `mut x`\n+LL |         static mut Y: isize = 3;\n+LL |         let mut c1 = |y: &'static mut isize| x = y;\n+   |                                              ^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:30:50\n+   |\n+LL |     pub fn ee(x: &'static mut isize) {\n+   |               - help: consider changing this to be mutable: `mut x`\n+...\n+LL |             let mut c2 = |y: &'static mut isize| x = y;\n+   |                                                  ^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:14\n+   |\n+LL |     pub fn capture_assign_whole(x: (i32,)) {\n+   |                                 - help: consider changing this to be mutable: `mut x`\n+LL |         || { x = (1,); };\n+   |              ^^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:43:14\n+   |\n+LL |     pub fn capture_assign_part(x: (i32,)) {\n+   |                                - help: consider changing this to be mutable: `mut x`\n+LL |         || { x.0 = 1; };\n+   |              ^^^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:46:14\n+   |\n+LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n+   |                                   - help: consider changing this to be mutable: `mut x`\n+LL |         || { &mut x; };\n+   |              ^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:49:14\n+   |\n+LL |     pub fn capture_reborrow_part(x: (i32,)) {\n+   |                                  - help: consider changing this to be mutable: `mut x`\n+LL |         || { &mut x.0; };\n+   |              ^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "0ccddf0a67d6fa0809861708cece0a573f3b51ae", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.nll.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d5798c9554670728412abbc688ab6123bf7895d4/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5798c9554670728412abbc688ab6123bf7895d4/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr?ref=d5798c9554670728412abbc688ab6123bf7895d4", "patch": "@@ -0,0 +1,54 @@\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:21:46\n+   |\n+LL |     pub fn e(x: &'static mut isize) {\n+   |              - help: consider changing this to be mutable: `mut x`\n+LL |         static mut Y: isize = 3;\n+LL |         let mut c1 = |y: &'static mut isize| x = y;\n+   |                                              ^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:30:50\n+   |\n+LL |     pub fn ee(x: &'static mut isize) {\n+   |               - help: consider changing this to be mutable: `mut x`\n+...\n+LL |             let mut c2 = |y: &'static mut isize| x = y;\n+   |                                                  ^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:14\n+   |\n+LL |     pub fn capture_assign_whole(x: (i32,)) {\n+   |                                 - help: consider changing this to be mutable: `mut x`\n+LL |         || { x = (1,); };\n+   |              ^^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:43:14\n+   |\n+LL |     pub fn capture_assign_part(x: (i32,)) {\n+   |                                - help: consider changing this to be mutable: `mut x`\n+LL |         || { x.0 = 1; };\n+   |              ^^^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:46:14\n+   |\n+LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n+   |                                   - help: consider changing this to be mutable: `mut x`\n+LL |         || { &mut x; };\n+   |              ^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:49:14\n+   |\n+LL |     pub fn capture_reborrow_part(x: (i32,)) {\n+   |                                  - help: consider changing this to be mutable: `mut x`\n+LL |         || { &mut x.0; };\n+   |              ^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "25ad66a5d9b4a6cb9367e5da03bc9f782bb2b2fd", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d5798c9554670728412abbc688ab6123bf7895d4/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5798c9554670728412abbc688ab6123bf7895d4/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs?ref=d5798c9554670728412abbc688ab6123bf7895d4", "patch": "@@ -0,0 +1,61 @@\n+// rust-lang/rust#55492: errors detected during MIR-borrowck's\n+// analysis of a closure body may only be caught when AST-borrowck\n+// looks at some parent.\n+\n+// revisions: ast migrate nll\n+\n+// Since we are testing nll (and migration) explicitly as a separate\n+// revisions, don't worry about the --compare-mode=nll on this test.\n+\n+// ignore-compare-mode-nll\n+\n+//[ast]compile-flags: -Z borrowck=ast\n+//[migrate]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+//[nll]compile-flags: -Z borrowck=mir -Z two-phase-borrows\n+\n+\n+// transcribed from borrowck-closures-unique.rs\n+mod borrowck_closures_unique {\n+    pub fn e(x: &'static mut isize) {\n+        static mut Y: isize = 3;\n+        let mut c1 = |y: &'static mut isize| x = y;\n+        unsafe { c1(&mut Y); }\n+    }\n+}\n+\n+mod borrowck_closures_unique_grandparent {\n+    pub fn ee(x: &'static mut isize) {\n+        static mut Z: isize = 3;\n+        let mut c1 = |z: &'static mut isize| {\n+            let mut c2 = |y: &'static mut isize| x = y;\n+            c2(z);\n+        };\n+        unsafe { c1(&mut Z); }\n+    }\n+}\n+\n+// adapted from mutability_errors.rs\n+mod mutability_errors {\n+    pub fn capture_assign_whole(x: (i32,)) {\n+        || { x = (1,); };\n+    }\n+    pub fn capture_assign_part(x: (i32,)) {\n+        || { x.0 = 1; };\n+    }\n+    pub fn capture_reborrow_whole(x: (i32,)) {\n+        || { &mut x; };\n+    }\n+    pub fn capture_reborrow_part(x: (i32,)) {\n+        || { &mut x.0; };\n+    }\n+}\n+\n+fn main() {\n+    static mut X: isize = 2;\n+    unsafe { borrowck_closures_unique::e(&mut X); }\n+\n+    mutability_errors::capture_assign_whole((1000,));\n+    mutability_errors::capture_assign_part((2000,));\n+    mutability_errors::capture_reborrow_whole((3000,));\n+    mutability_errors::capture_reborrow_part((4000,));\n+}"}]}