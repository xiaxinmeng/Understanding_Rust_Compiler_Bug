{"sha": "6289c57dc0ee8ebbe9e20fad808f85aed0afeceb", "node_id": "C_kwDOAAsO6NoAKDYyODljNTdkYzBlZThlYmJlOWUyMGZhZDgwOGY4NWFlZDBhZmVjZWI", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-05-14T14:24:11Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-05-14T14:24:11Z"}, "message": "Simplify find_width_of_character_at_span.", "tree": {"sha": "3ab89230f284d14b4089a316f5e74b1054484fee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ab89230f284d14b4089a316f5e74b1054484fee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6289c57dc0ee8ebbe9e20fad808f85aed0afeceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6289c57dc0ee8ebbe9e20fad808f85aed0afeceb", "html_url": "https://github.com/rust-lang/rust/commit/6289c57dc0ee8ebbe9e20fad808f85aed0afeceb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6289c57dc0ee8ebbe9e20fad808f85aed0afeceb/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "html_url": "https://github.com/rust-lang/rust/commit/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1"}], "stats": {"total": 32, "additions": 8, "deletions": 24}, "files": [{"sha": "97cb734619e3c79a481e4a20728dc7002106da97", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6289c57dc0ee8ebbe9e20fad808f85aed0afeceb/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6289c57dc0ee8ebbe9e20fad808f85aed0afeceb/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=6289c57dc0ee8ebbe9e20fad808f85aed0afeceb", "patch": "@@ -20,6 +20,7 @@\n #![feature(min_specialization)]\n #![feature(rustc_attrs)]\n #![feature(let_chains)]\n+#![feature(round_char_boundary)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n "}, {"sha": "11ea5fe4ddf9f8e89cc606d4016311d5d7eb3ed8", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6289c57dc0ee8ebbe9e20fad808f85aed0afeceb/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6289c57dc0ee8ebbe9e20fad808f85aed0afeceb/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=6289c57dc0ee8ebbe9e20fad808f85aed0afeceb", "patch": "@@ -1019,36 +1019,19 @@ impl SourceMap {\n \n         let src = local_begin.sf.external_src.borrow();\n \n-        // We need to extend the snippet to the end of the src rather than to end_index so when\n-        // searching forwards for boundaries we've got somewhere to search.\n-        let snippet = if let Some(ref src) = local_begin.sf.src {\n-            &src[start_index..]\n+        let snippet = if let Some(src) = &local_begin.sf.src {\n+            src\n         } else if let Some(src) = src.get_source() {\n-            &src[start_index..]\n+            src\n         } else {\n             return 1;\n         };\n-        debug!(\"snippet=`{:?}`\", snippet);\n \n-        let mut target = if forwards { end_index + 1 } else { end_index - 1 };\n-        debug!(\"initial target=`{:?}`\", target);\n-\n-        while !snippet.is_char_boundary(target - start_index) && target < source_len {\n-            target = if forwards {\n-                target + 1\n-            } else {\n-                match target.checked_sub(1) {\n-                    Some(target) => target,\n-                    None => {\n-                        break;\n-                    }\n-                }\n-            };\n-            debug!(\"target=`{:?}`\", target);\n+        if forwards {\n+            (snippet.ceil_char_boundary(end_index + 1) - end_index) as u32\n+        } else {\n+            (end_index - snippet.floor_char_boundary(end_index - 1)) as u32\n         }\n-        debug!(\"final target=`{:?}`\", target);\n-\n-        if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }\n     }\n \n     pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {"}]}