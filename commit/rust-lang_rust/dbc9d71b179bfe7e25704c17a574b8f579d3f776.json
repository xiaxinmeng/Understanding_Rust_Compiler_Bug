{"sha": "dbc9d71b179bfe7e25704c17a574b8f579d3f776", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYzlkNzFiMTc5YmZlN2UyNTcwNGMxN2E1NzRiOGY1NzlkM2Y3NzY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-06-01T04:09:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-01T04:09:20Z"}, "message": "Rollup merge of #42275 - scottmcm:try-trait, r=nikomatsakis\n\nLower `?` to `Try` instead of `Carrier`\n\nThe easy parts of https://github.com/rust-lang/rfcs/pull/1859, whose FCP completed without further comments.\n\nJust the trait and the lowering -- neither the error message improvements nor the insta-stable impl for Option nor exhaustive docs.\n\nBased on a [github search](https://github.com/search?l=rust&p=1&q=question_mark_carrier&type=Code&utf8=%E2%9C%93), this will break the following:\n\n- https://github.com/pfpacket/rust-9p/blob/00206e34c680198a0ac7c2f066cc2954187d4fac/src/serialize.rs#L38\n- https://github.com/peterdelevoryas/bufparse/blob/b1325898f4fc2c67658049196c12da82548af350/src/result.rs#L50\n\nThe other results appear to be files from libcore or its tests.  I could also leave Carrier around after stage0 and `impl<T:Carrier> Try for T` if that would be better.\n\nr? @nikomatsakis\n\nEdit: Oh, and it might accidentally improve perf, based on https://github.com/rust-lang/rust/issues/37939#issuecomment-265803670, since `Try::into_result` for `Result` is an obvious no-op, unlike `Carrier::translate`.", "tree": {"sha": "53da0dbc76d8f47915489c77401a362174ea5cbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53da0dbc76d8f47915489c77401a362174ea5cbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbc9d71b179bfe7e25704c17a574b8f579d3f776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc9d71b179bfe7e25704c17a574b8f579d3f776", "html_url": "https://github.com/rust-lang/rust/commit/dbc9d71b179bfe7e25704c17a574b8f579d3f776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbc9d71b179bfe7e25704c17a574b8f579d3f776/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "422faf7a6fbedd75653f1568e69858f62b5c0fe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/422faf7a6fbedd75653f1568e69858f62b5c0fe7", "html_url": "https://github.com/rust-lang/rust/commit/422faf7a6fbedd75653f1568e69858f62b5c0fe7"}, {"sha": "3119e634e178d8acaed4a2d4a9d52e3b76ae79cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3119e634e178d8acaed4a2d4a9d52e3b76ae79cf", "html_url": "https://github.com/rust-lang/rust/commit/3119e634e178d8acaed4a2d4a9d52e3b76ae79cf"}], "stats": {"total": 171, "additions": 138, "deletions": 33}, "files": [{"sha": "28bbcf734f8173de25288f84048483e1c41df57c", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbc9d71b179bfe7e25704c17a574b8f579d3f776/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/dbc9d71b179bfe7e25704c17a574b8f579d3f776/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=dbc9d71b179bfe7e25704c17a574b8f579d3f776", "patch": "@@ -208,6 +208,7 @@\n     - [toowned_clone_into](library-features/toowned-clone-into.md)\n     - [trusted_len](library-features/trusted-len.md)\n     - [try_from](library-features/try-from.md)\n+    - [try_trait](library-features/try-trait.md)\n     - [unicode](library-features/unicode.md)\n     - [unique](library-features/unique.md)\n     - [unsize](library-features/unsize.md)"}, {"sha": "a5e6965faec42151041a8ad48f65dda7a6769fd2", "filename": "src/doc/unstable-book/src/library-features/question-mark-carrier.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbc9d71b179bfe7e25704c17a574b8f579d3f776/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fquestion-mark-carrier.md", "raw_url": "https://github.com/rust-lang/rust/raw/dbc9d71b179bfe7e25704c17a574b8f579d3f776/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fquestion-mark-carrier.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fquestion-mark-carrier.md?ref=dbc9d71b179bfe7e25704c17a574b8f579d3f776", "patch": "@@ -5,3 +5,9 @@ The tracking issue for this feature is: [#31436]\n [#31436]: https://github.com/rust-lang/rust/issues/31436\n \n ------------------------\n+\n+This feature has been superseded by [`try_trait`][try_trait].\n+\n+It exists only in stage0 for bootstrapping.\n+\n+[try_trait]: library-features/try-trait.html"}, {"sha": "0c07329025bca002306d20758de81db54344d881", "filename": "src/doc/unstable-book/src/library-features/try-trait.md", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dbc9d71b179bfe7e25704c17a574b8f579d3f776/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ftry-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/dbc9d71b179bfe7e25704c17a574b8f579d3f776/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ftry-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ftry-trait.md?ref=dbc9d71b179bfe7e25704c17a574b8f579d3f776", "patch": "@@ -0,0 +1,50 @@\n+# `try_trait`\n+\n+The tracking issue for this feature is: [#42327]\n+\n+[#42327]: https://github.com/rust-lang/rust/issues/42327\n+\n+------------------------\n+\n+This introduces a new trait `Try` for extending the `?` operator to types\n+other than `Result` (a part of [RFC 1859]).  The trait provides the canonical\n+way to _view_ a type in terms of a success/failure dichotomy.  This will\n+allow `?` to supplant the `try_opt!` macro on `Option` and the `try_ready!`\n+macro on `Poll`, among other things.\n+\n+[RFC 1859]: https://github.com/rust-lang/rfcs/pull/1859\n+\n+Here's an example implementation of the trait:\n+\n+```rust,ignore\n+/// A distinct type to represent the `None` value of an `Option`.\n+///\n+/// This enables using the `?` operator on `Option`; it's rarely useful alone.\n+#[derive(Debug)]\n+#[unstable(feature = \"try_trait\", issue = \"42327\")]\n+pub struct None { _priv: () }\n+\n+#[unstable(feature = \"try_trait\", issue = \"42327\")]\n+impl<T> ops::Try for Option<T>  {\n+    type Ok = T;\n+    type Error = None;\n+\n+    fn into_result(self) -> Result<T, None> {\n+        self.ok_or(None { _priv: () })\n+    }\n+\n+    fn from_ok(v: T) -> Self {\n+        Some(v)\n+    }\n+\n+    fn from_error(_: None) -> Self {\n+        None\n+    }\n+}\n+```\n+\n+Note the `Error` associated type here is a new marker.  The `?` operator\n+allows interconversion between different `Try` implementers only when\n+the error type can be converted `Into` the error type of the enclosing\n+function (or catch block).  Having a distinct error type (as opposed to\n+just `()`, or similar) restricts this to where it's semantically meaningful."}, {"sha": "a1de8fe76e2580cb79d2fcf1b166ee8aff237935", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 48, "deletions": 17, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/dbc9d71b179bfe7e25704c17a574b8f579d3f776/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc9d71b179bfe7e25704c17a574b8f579d3f776/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=dbc9d71b179bfe7e25704c17a574b8f579d3f776", "patch": "@@ -2918,15 +2918,9 @@ pub trait BoxPlace<Data: ?Sized> : Place<Data> {\n     fn make_place() -> Self;\n }\n \n-/// A trait for types which have success and error states and are meant to work\n-/// with the question mark operator.\n-/// When the `?` operator is used with a value, whether the value is in the\n-/// success or error state is determined by calling `translate`.\n-///\n-/// This trait is **very** experimental, it will probably be iterated on heavily\n-/// before it is stabilised. Implementors should expect change. Users of `?`\n-/// should not rely on any implementations of `Carrier` other than `Result`,\n-/// i.e., you should not expect `?` to continue to work with `Option`, etc.\n+/// This trait has been superseded by the `Try` trait, but must remain\n+/// here as `?` is still lowered to it in stage0 .\n+#[cfg(stage0)]\n #[unstable(feature = \"question_mark_carrier\", issue = \"31436\")]\n pub trait Carrier {\n     /// The type of the value when computation succeeds.\n@@ -2945,6 +2939,7 @@ pub trait Carrier {\n     fn translate<T>(self) -> T where T: Carrier<Success=Self::Success, Error=Self::Error>;\n }\n \n+#[cfg(stage0)]\n #[unstable(feature = \"question_mark_carrier\", issue = \"31436\")]\n impl<U, V> Carrier for Result<U, V> {\n     type Success = U;\n@@ -2970,21 +2965,57 @@ impl<U, V> Carrier for Result<U, V> {\n \n struct _DummyErrorType;\n \n-impl Carrier for _DummyErrorType {\n-    type Success = ();\n+impl Try for _DummyErrorType {\n+    type Ok = ();\n     type Error = ();\n \n-    fn from_success(_: ()) -> _DummyErrorType {\n+    fn into_result(self) -> Result<Self::Ok, Self::Error> {\n+        Ok(())\n+    }\n+\n+    fn from_ok(_: ()) -> _DummyErrorType {\n         _DummyErrorType\n     }\n \n     fn from_error(_: ()) -> _DummyErrorType {\n         _DummyErrorType\n     }\n+}\n \n-    fn translate<T>(self) -> T\n-        where T: Carrier<Success=(), Error=()>\n-    {\n-        T::from_success(())\n-    }\n+/// A trait for customizing the behaviour of the `?` operator.\n+///\n+/// A type implementing `Try` is one that has a canonical way to view it\n+/// in terms of a success/failure dichotomy.  This trait allows both\n+/// extracting those success or failure values from an existing instance and\n+/// creating a new instance from a success or failure value.\n+#[unstable(feature = \"try_trait\", issue = \"42327\")]\n+pub trait Try {\n+    /// The type of this value when viewed as successful.\n+    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+    type Ok;\n+    /// The type of this value when viewed as failed.\n+    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+    type Error;\n+\n+    /// Applies the \"?\" operator. A return of `Ok(t)` means that the\n+    /// execution should continue normally, and the result of `?` is the\n+    /// value `t`. A return of `Err(e)` means that execution should branch\n+    /// to the innermost enclosing `catch`, or return from the function.\n+    ///\n+    /// If an `Err(e)` result is returned, the value `e` will be \"wrapped\"\n+    /// in the return type of the enclosing scope (which must itself implement\n+    /// `Try`). Specifically, the value `X::from_error(From::from(e))`\n+    /// is returned, where `X` is the return type of the enclosing function.\n+    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+    fn into_result(self) -> Result<Self::Ok, Self::Error>;\n+\n+    /// Wrap an error value to construct the composite result. For example,\n+    /// `Result::Err(x)` and `Result::from_error(x)` are equivalent.\n+    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+    fn from_error(v: Self::Error) -> Self;\n+\n+    /// Wrap an OK value to construct the composite result. For example,\n+    /// `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.\n+    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+    fn from_ok(v: Self::Ok) -> Self;\n }"}, {"sha": "df7fff0df927078140f9950e049cadd1265e6297", "filename": "src/libcore/result.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dbc9d71b179bfe7e25704c17a574b8f579d3f776/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc9d71b179bfe7e25704c17a574b8f579d3f776/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=dbc9d71b179bfe7e25704c17a574b8f579d3f776", "patch": "@@ -242,6 +242,7 @@\n \n use fmt;\n use iter::{FromIterator, FusedIterator, TrustedLen};\n+use ops;\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n ///\n@@ -1108,3 +1109,21 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n         }\n     }\n }\n+\n+#[unstable(feature = \"try_trait\", issue = \"42327\")]\n+impl<T,E> ops::Try for Result<T, E> {\n+    type Ok = T;\n+    type Error = E;\n+\n+    fn into_result(self) -> Self {\n+        self\n+    }\n+\n+    fn from_ok(v: T) -> Self {\n+        Ok(v)\n+    }\n+\n+    fn from_error(v: E) -> Self {\n+        Err(v)\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "df82fee80f23c4cb437a82dc6a3ab31b2010a1fb", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbc9d71b179bfe7e25704c17a574b8f579d3f776/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc9d71b179bfe7e25704c17a574b8f579d3f776/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=dbc9d71b179bfe7e25704c17a574b8f579d3f776", "patch": "@@ -2265,23 +2265,23 @@ impl<'a> LoweringContext<'a> {\n             ExprKind::Try(ref sub_expr) => {\n                 // to:\n                 //\n-                // match Carrier::translate(<expr>) {\n+                // match Try::into_result(<expr>) {\n                 //     Ok(val) => #[allow(unreachable_code)] val,\n                 //     Err(err) => #[allow(unreachable_code)]\n                 //                 // If there is an enclosing `catch {...}`\n-                //                 break 'catch_target Carrier::from_error(From::from(err)),\n+                //                 break 'catch_target Try::from_error(From::from(err)),\n                 //                 // Otherwise\n-                //                 return Carrier::from_error(From::from(err)),\n+                //                 return Try::from_error(From::from(err)),\n                 // }\n \n                 let unstable_span = self.allow_internal_unstable(\"?\", e.span);\n \n-                // Carrier::translate(<expr>)\n+                // Try::into_result(<expr>)\n                 let discr = {\n                     // expand <expr>\n                     let sub_expr = self.lower_expr(sub_expr);\n \n-                    let path = &[\"ops\", \"Carrier\", \"translate\"];\n+                    let path = &[\"ops\", \"Try\", \"into_result\"];\n                     let path = P(self.expr_std_path(unstable_span, path, ThinVec::new()));\n                     P(self.expr_call(e.span, path, hir_vec![sub_expr]))\n                 };\n@@ -2327,7 +2327,7 @@ impl<'a> LoweringContext<'a> {\n                         self.expr_call(e.span, from, hir_vec![err_expr])\n                     };\n                     let from_err_expr = {\n-                        let path = &[\"ops\", \"Carrier\", \"from_error\"];\n+                        let path = &[\"ops\", \"Try\", \"from_error\"];\n                         let from_err = P(self.expr_std_path(unstable_span, path,\n                                                             ThinVec::new()));\n                         P(self.expr_call(e.span, from_err, hir_vec![from_expr]))"}, {"sha": "82ba70c9459448832e45bdf8b1bd23df02edb958", "filename": "src/test/run-pass/try-operator-custom.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dbc9d71b179bfe7e25704c17a574b8f579d3f776/src%2Ftest%2Frun-pass%2Ftry-operator-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc9d71b179bfe7e25704c17a574b8f579d3f776/src%2Ftest%2Frun-pass%2Ftry-operator-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry-operator-custom.rs?ref=dbc9d71b179bfe7e25704c17a574b8f579d3f776", "patch": "@@ -8,33 +8,31 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(question_mark, question_mark_carrier)]\n+#![feature(try_trait)]\n \n-use std::ops::Carrier;\n+use std::ops::Try;\n \n enum MyResult<T, U> {\n     Awesome(T),\n     Terrible(U)\n }\n \n-impl<U, V> Carrier for MyResult<U, V> {\n-    type Success = U;\n+impl<U, V> Try for MyResult<U, V> {\n+    type Ok = U;\n     type Error = V;\n \n-    fn from_success(u: U) -> MyResult<U, V> {\n+    fn from_ok(u: U) -> MyResult<U, V> {\n         MyResult::Awesome(u)\n     }\n \n     fn from_error(e: V) -> MyResult<U, V> {\n         MyResult::Terrible(e)\n     }\n \n-    fn translate<T>(self) -> T\n-        where T: Carrier<Success=U, Error=V>\n-    {\n+    fn into_result(self) -> Result<U, V> {\n         match self {\n-            MyResult::Awesome(u) => T::from_success(u),\n-            MyResult::Terrible(e) => T::from_error(e),\n+            MyResult::Awesome(u) => Ok(u),\n+            MyResult::Terrible(e) => Err(e),\n         }\n     }\n }"}]}