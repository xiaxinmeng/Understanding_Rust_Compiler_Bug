{"sha": "50375139e2bc69920786411f7b1e05866898ed7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMzc1MTM5ZTJiYzY5OTIwNzg2NDExZjdiMWUwNTg2Njg5OGVkN2E=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-22T15:28:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-24T01:31:52Z"}, "message": "Deal with the fallout of string stabilization", "tree": {"sha": "0153201a61b77258b57c1abaf5ab6115d6624b54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0153201a61b77258b57c1abaf5ab6115d6624b54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50375139e2bc69920786411f7b1e05866898ed7a", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50375139e2bc69920786411f7b1e05866898ed7a", "html_url": "https://github.com/rust-lang/rust/commit/50375139e2bc69920786411f7b1e05866898ed7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50375139e2bc69920786411f7b1e05866898ed7a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31be3319bf5ef1a74ef1044f5bd52dd95947c959", "url": "https://api.github.com/repos/rust-lang/rust/commits/31be3319bf5ef1a74ef1044f5bd52dd95947c959", "html_url": "https://github.com/rust-lang/rust/commit/31be3319bf5ef1a74ef1044f5bd52dd95947c959"}], "stats": {"total": 162, "additions": 88, "deletions": 74}, "files": [{"sha": "268a6020a10a5f9cdc56911a20e1d3ee3e14b2d6", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50375139e2bc69920786411f7b1e05866898ed7a/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50375139e2bc69920786411f7b1e05866898ed7a/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=50375139e2bc69920786411f7b1e05866898ed7a", "patch": "@@ -444,7 +444,8 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                      \"-nx\".to_string(),\n                      format!(\"-command={}\", debugger_script.as_str().unwrap()));\n \n-            let gdb_path = tool_path.append(\"/bin/arm-linux-androideabi-gdb\");\n+            let mut gdb_path = tool_path;\n+            gdb_path.push_str(\"/bin/arm-linux-androideabi-gdb\");\n             let procsrv::Result {\n                 out,\n                 err,"}, {"sha": "d198e948ac83845837f2f04450714c371397f092", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=50375139e2bc69920786411f7b1e05866898ed7a", "patch": "@@ -698,7 +698,7 @@ pub trait StrAllocating: Str {\n         let me = self.as_slice();\n         let mut out = String::with_capacity(me.len());\n         for c in me.chars() {\n-            c.escape_default(|c| out.push_char(c));\n+            c.escape_default(|c| out.push(c));\n         }\n         out\n     }\n@@ -708,7 +708,7 @@ pub trait StrAllocating: Str {\n         let me = self.as_slice();\n         let mut out = String::with_capacity(me.len());\n         for c in me.chars() {\n-            c.escape_unicode(|c| out.push_char(c));\n+            c.escape_unicode(|c| out.push(c));\n         }\n         out\n     }"}, {"sha": "6843996a9e1454a746a3fc44b0a54d4e3e5d0baa", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=50375139e2bc69920786411f7b1e05866898ed7a", "patch": "@@ -159,7 +159,7 @@ impl String {\n \n         if i > 0 {\n             unsafe {\n-                res.push_bytes(v.slice_to(i))\n+                res.as_mut_vec().push_all(v.slice_to(i))\n             };\n         }\n \n@@ -176,10 +176,10 @@ impl String {\n             macro_rules! error(() => ({\n                 unsafe {\n                     if subseqidx != i_ {\n-                        res.push_bytes(v.slice(subseqidx, i_));\n+                        res.as_mut_vec().push_all(v.slice(subseqidx, i_));\n                     }\n                     subseqidx = i;\n-                    res.push_bytes(REPLACEMENT);\n+                    res.as_mut_vec().push_all(REPLACEMENT);\n                 }\n             }))\n \n@@ -245,7 +245,7 @@ impl String {\n         }\n         if subseqidx < total {\n             unsafe {\n-                res.push_bytes(v.slice(subseqidx, total))\n+                res.as_mut_vec().push_all(v.slice(subseqidx, total))\n             };\n         }\n         Owned(res.into_string())\n@@ -271,7 +271,7 @@ impl String {\n         let mut s = String::with_capacity(v.len() / 2);\n         for c in str::utf16_items(v) {\n             match c {\n-                str::ScalarValue(c) => s.push_char(c),\n+                str::ScalarValue(c) => s.push(c),\n                 str::LoneSurrogate(_) => return None\n             }\n         }\n@@ -332,6 +332,7 @@ impl String {\n     /// # Example\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// let s = String::from_str(\"hello\");\n     /// let big = s.append(\" \").append(\"world\").append(\"!\");\n     /// // s has now been moved and cannot be used\n@@ -362,11 +363,11 @@ impl String {\n         }\n \n         let mut buf = String::new();\n-        buf.push_char(ch);\n+        buf.push(ch);\n         let size = buf.len() * length;\n         buf.reserve(size);\n         for _ in range(1, length) {\n-            buf.push_char(ch)\n+            buf.push(ch)\n         }\n         buf\n     }\n@@ -380,6 +381,7 @@ impl String {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![allow(deprecated)]\n     /// let s = String::from_byte(104);\n     /// assert_eq!(s.as_slice(), \"h\");\n     /// ```\n@@ -417,7 +419,7 @@ impl String {\n     #[unstable = \"duplicate of iterator-based functionality\"]\n     pub fn grow(&mut self, count: uint, ch: char) {\n         for _ in range(0, count) {\n-            self.push_char(ch)\n+            self.push(ch)\n         }\n     }\n \n@@ -426,6 +428,7 @@ impl String {\n     /// # Example\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// let s = String::with_capacity(10);\n     /// assert!(s.byte_capacity() >= 10);\n     /// ```\n@@ -441,7 +444,7 @@ impl String {\n     ///\n     /// ```\n     /// let s = String::with_capacity(10);\n-    /// assert!(s.byte_capacity() >= 10);\n+    /// assert!(s.capacity() >= 10);\n     /// ```\n     #[inline]\n     #[unstable = \"just implemented, needs to prove itself\"]\n@@ -455,9 +458,9 @@ impl String {\n     ///\n     /// ```\n     /// let mut s = String::with_capacity(10);\n-    /// let before = s.byte_capacity();\n+    /// let before = s.capacity();\n     /// s.reserve_additional(100);\n-    /// assert!(s.byte_capacity() - before >= 100);\n+    /// assert!(s.capacity() - before >= 100);\n     /// ```\n     #[inline]\n     pub fn reserve_additional(&mut self, extra: uint) {\n@@ -471,7 +474,7 @@ impl String {\n     /// ```\n     /// let mut s = String::new();\n     /// s.reserve(10);\n-    /// assert!(s.byte_capacity() >= 10);\n+    /// assert!(s.capacity() >= 10);\n     /// ```\n     #[inline]\n     pub fn reserve(&mut self, capacity: uint) {\n@@ -485,7 +488,7 @@ impl String {\n     /// ```\n     /// let mut s = String::new();\n     /// s.reserve_exact(10);\n-    /// assert_eq!(s.byte_capacity(), 10);\n+    /// assert_eq!(s.capacity(), 10);\n     /// ```\n     #[inline]\n     pub fn reserve_exact(&mut self, capacity: uint) {\n@@ -499,9 +502,9 @@ impl String {\n     /// ```\n     /// let mut s = String::from_str(\"foo\");\n     /// s.reserve(100);\n-    /// assert!(s.byte_capacity() >= 100);\n+    /// assert!(s.capacity() >= 100);\n     /// s.shrink_to_fit();\n-    /// assert_eq!(s.byte_capacity(), 3);\n+    /// assert_eq!(s.capacity(), 3);\n     /// ```\n     #[inline]\n     pub fn shrink_to_fit(&mut self) {\n@@ -527,7 +530,7 @@ impl String {\n     /// assert_eq!(s.as_slice(), \"abc123\");\n     /// ```\n     #[inline]\n-    #[stable = \"function just renamed from push_char\"]\n+    #[stable = \"function just renamed from push\"]\n     pub fn push(&mut self, ch: char) {\n         let cur_len = self.len();\n         // This may use up to 4 bytes.\n@@ -552,6 +555,7 @@ impl String {\n     /// # Example\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// let mut s = String::new();\n     /// unsafe {\n     ///     s.push_bytes([104, 101, 108, 108, 111]);\n@@ -587,6 +591,7 @@ impl String {\n     /// # Example\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// let mut s = String::from_str(\"hello\");\n     /// unsafe {\n     ///     let bytes = s.as_mut_bytes();\n@@ -598,7 +603,7 @@ impl String {\n     /// assert_eq!(s.as_slice(), \"h3ll0\")\n     /// ```\n     #[inline]\n-    #[deprecated = \"call .as_mut_vec().as_slice() instead\"]\n+    #[deprecated = \"call .as_mut_vec().as_mut_slice() instead\"]\n     pub unsafe fn as_mut_bytes<'a>(&'a mut self) -> &'a mut [u8] {\n         self.vec.as_mut_slice()\n     }\n@@ -631,6 +636,7 @@ impl String {\n     /// # Example\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// let mut s = String::from_str(\"hell\");\n     /// unsafe {\n     ///     s.push_byte(111);\n@@ -652,6 +658,7 @@ impl String {\n     /// # Example\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// let mut s = String::from_str(\"foo\");\n     /// unsafe {\n     ///     assert_eq!(s.pop_byte(), Some(111));\n@@ -714,6 +721,7 @@ impl String {\n     /// # Example\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// let mut s = String::from_str(\"foo\");\n     /// unsafe {\n     ///     assert_eq!(s.shift_byte(), Some(102));\n@@ -722,7 +730,7 @@ impl String {\n     ///     assert_eq!(s.shift_byte(), None);\n     /// }\n     /// ```\n-    #[deprecated = \"call .as_mut_rev().remove(0)\"]\n+    #[deprecated = \"call .as_mut_vec().remove(0)\"]\n     pub unsafe fn shift_byte(&mut self) -> Option<u8> {\n         self.vec.remove(0)\n     }\n@@ -782,6 +790,7 @@ impl String {\n     ///\n     /// If `idx` does not lie on a character boundary or is out of bounds, then\n     /// this function will fail.\n+    #[unstable = \"the failure semantics of this function are uncertain\"]\n     pub fn insert(&mut self, idx: uint, ch: char) {\n         let len = self.len();\n         assert!(idx <= len);\n@@ -854,7 +863,7 @@ impl FromIterator<char> for String {\n impl Extendable<char> for String {\n     fn extend<I:Iterator<char>>(&mut self, mut iterator: I) {\n         for ch in iterator {\n-            self.push_char(ch)\n+            self.push(ch)\n         }\n     }\n }\n@@ -1171,13 +1180,13 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_push_char() {\n+    fn test_push() {\n         let mut data = String::from_str(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\");\n-        data.push_char('\u534e');\n-        data.push_char('b'); // 1 byte\n-        data.push_char('\u00a2'); // 2 byte\n-        data.push_char('\u20ac'); // 3 byte\n-        data.push_char('\ud852\udf62'); // 4 byte\n+        data.push('\u534e');\n+        data.push('b'); // 1 byte\n+        data.push('\u00a2'); // 2 byte\n+        data.push('\u20ac'); // 3 byte\n+        data.push('\ud852\udf62'); // 4 byte\n         assert_eq!(data.as_slice(), \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eb\u00a2\u20ac\ud852\udf62\");\n     }\n "}, {"sha": "cac67ef404149f9ed2b19b04fea0457a114cff90", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=50375139e2bc69920786411f7b1e05866898ed7a", "patch": "@@ -685,9 +685,9 @@ pub fn usage(brief: &str, opts: &[OptGroup]) -> String {\n         match short_name.len() {\n             0 => {}\n             1 => {\n-                row.push_char('-');\n+                row.push('-');\n                 row.push_str(short_name.as_slice());\n-                row.push_char(' ');\n+                row.push(' ');\n             }\n             _ => fail!(\"the short name should only be 1 ascii char long\"),\n         }\n@@ -698,7 +698,7 @@ pub fn usage(brief: &str, opts: &[OptGroup]) -> String {\n             _ => {\n                 row.push_str(\"--\");\n                 row.push_str(long_name.as_slice());\n-                row.push_char(' ');\n+                row.push(' ');\n             }\n         }\n \n@@ -707,9 +707,9 @@ pub fn usage(brief: &str, opts: &[OptGroup]) -> String {\n             No => {}\n             Yes => row.push_str(hint.as_slice()),\n             Maybe => {\n-                row.push_char('[');\n+                row.push('[');\n                 row.push_str(hint.as_slice());\n-                row.push_char(']');\n+                row.push(']');\n             }\n         }\n \n@@ -718,7 +718,7 @@ pub fn usage(brief: &str, opts: &[OptGroup]) -> String {\n         let rowlen = row.as_slice().char_len();\n         if rowlen < 24 {\n             for _ in range(0, 24 - rowlen) {\n-                row.push_char(' ');\n+                row.push(' ');\n             }\n         } else {\n             row.push_str(desc_sep.as_slice())\n@@ -728,7 +728,7 @@ pub fn usage(brief: &str, opts: &[OptGroup]) -> String {\n         let mut desc_normalized_whitespace = String::new();\n         for word in desc.as_slice().words() {\n             desc_normalized_whitespace.push_str(word);\n-            desc_normalized_whitespace.push_char(' ');\n+            desc_normalized_whitespace.push(' ');\n         }\n \n         // FIXME: #5516 should be graphemes not codepoints\n@@ -755,31 +755,31 @@ fn format_option(opt: &OptGroup) -> String {\n     let mut line = String::new();\n \n     if opt.occur != Req {\n-        line.push_char('[');\n+        line.push('[');\n     }\n \n     // Use short_name is possible, but fallback to long_name.\n     if opt.short_name.len() > 0 {\n-        line.push_char('-');\n+        line.push('-');\n         line.push_str(opt.short_name.as_slice());\n     } else {\n         line.push_str(\"--\");\n         line.push_str(opt.long_name.as_slice());\n     }\n \n     if opt.hasarg != No {\n-        line.push_char(' ');\n+        line.push(' ');\n         if opt.hasarg == Maybe {\n-            line.push_char('[');\n+            line.push('[');\n         }\n         line.push_str(opt.hint.as_slice());\n         if opt.hasarg == Maybe {\n-            line.push_char(']');\n+            line.push(']');\n         }\n     }\n \n     if opt.occur != Req {\n-        line.push_char(']');\n+        line.push(']');\n     }\n     if opt.occur == Multi {\n         line.push_str(\"..\");"}, {"sha": "4ae7f882212f012a1e3ad42d463ce3b40b9bf255", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=50375139e2bc69920786411f7b1e05866898ed7a", "patch": "@@ -426,7 +426,7 @@ impl<'a> LabelText<'a> {\n     fn escape_str(s: &str) -> String {\n         let mut out = String::with_capacity(s.len());\n         for c in s.chars() {\n-            LabelText::escape_char(c, |c| out.push_char(c));\n+            LabelText::escape_char(c, |c| out.push(c));\n         }\n         out\n     }\n@@ -461,9 +461,11 @@ impl<'a> LabelText<'a> {\n \n     /// Puts `suffix` on a line below this label, with a blank line separator.\n     pub fn suffix_line(self, suffix: LabelText) -> LabelText<'static> {\n-        let prefix = self.pre_escaped_content().into_string();\n+        let mut prefix = self.pre_escaped_content().into_string();\n         let suffix = suffix.pre_escaped_content();\n-        EscStr(str::Owned(prefix.append(r\"\\n\\n\").append(suffix.as_slice())))\n+        prefix.push_str(r\"\\n\\n\");\n+        prefix.push_str(suffix.as_slice());\n+        EscStr(str::Owned(prefix))\n     }\n }\n "}, {"sha": "a0fefd2421427ba92a80d8d17d370b602141020d", "filename": "src/libregex/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibregex%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibregex%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fcompile.rs?ref=50375139e2bc69920786411f7b1e05866898ed7a", "patch": "@@ -105,7 +105,7 @@ impl Program {\n         let mut pre = String::with_capacity(5);\n         for inst in c.insts.slice_from(1).iter() {\n             match *inst {\n-                OneChar(c, FLAG_EMPTY) => pre.push_char(c),\n+                OneChar(c, FLAG_EMPTY) => pre.push(c),\n                 _ => break\n             }\n         }"}, {"sha": "0c9b3a79bdf658f0a548c043dc79ffb42ef3c845", "filename": "src/libregex/re.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=50375139e2bc69920786411f7b1e05866898ed7a", "patch": "@@ -26,9 +26,9 @@ pub fn quote(text: &str) -> String {\n     let mut quoted = String::with_capacity(text.len());\n     for c in text.chars() {\n         if parse::is_punct(c) {\n-            quoted.push_char('\\\\')\n+            quoted.push('\\\\')\n         }\n-        quoted.push_char(c);\n+        quoted.push(c);\n     }\n     quoted\n }\n@@ -504,7 +504,8 @@ impl Regex {\n             new.push_str(rep.reg_replace(&cap).as_slice());\n             last_match = e;\n         }\n-        new.append(text.slice(last_match, text.len()))\n+        new.push_str(text.slice(last_match, text.len()));\n+        return new;\n     }\n \n     /// Returns the original string of this regex."}, {"sha": "5ac7baaa6d10a266f6230089e6ced9766a9ae2c4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=50375139e2bc69920786411f7b1e05866898ed7a", "patch": "@@ -1961,9 +1961,9 @@ fn lit_to_string(lit: &ast::Lit) -> String {\n         ast::LitByte(b) => {\n             let mut res = String::from_str(\"b'\");\n             (b as char).escape_default(|c| {\n-                res.push_char(c);\n+                res.push(c);\n             });\n-            res.push_char('\\'');\n+            res.push('\\'');\n             res\n         },\n         ast::LitChar(c) => format!(\"'{}'\", c),"}, {"sha": "08fb94a801c3e2e38ee2f96d27a4ed6f2add2b46", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=50375139e2bc69920786411f7b1e05866898ed7a", "patch": "@@ -64,7 +64,7 @@ pub fn load_external_files(names: &[String]) -> Option<String> {\n     let mut out = String::new();\n     for name in names.iter() {\n         out.push_str(load_or_return!(name.as_slice(), None, None).as_slice());\n-        out.push_char('\\n');\n+        out.push('\\n');\n     }\n     Some(out)\n }"}, {"sha": "fe7b1be3eca6837f08bf7aa3dcb40a08a3315cdb", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=50375139e2bc69920786411f7b1e05866898ed7a", "patch": "@@ -1080,7 +1080,8 @@ impl Context {\n             let mut json_out = BufferedWriter::new(try!(File::create(json_dst)));\n             try!(stability.encode(&mut json::Encoder::new(&mut json_out)));\n \n-            let title = stability.name.clone().append(\" - Stability dashboard\");\n+            let mut title = stability.name.clone();\n+            title.push_str(\" - Stability dashboard\");\n             let desc = format!(\"API stability overview for the Rust `{}` crate.\",\n                                this.layout.krate);\n             let page = layout::Page {"}, {"sha": "3c66a7c785094ff35440126918ef46f3079c3fea", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=50375139e2bc69920786411f7b1e05866898ed7a", "patch": "@@ -276,7 +276,7 @@ pub fn collapse_docs(krate: clean::Crate) -> plugins::PluginResult {\n                     clean::NameValue(ref x, ref s)\n                             if \"doc\" == x.as_slice() => {\n                         docstr.push_str(s.as_slice());\n-                        docstr.push_char('\\n');\n+                        docstr.push('\\n');\n                     },\n                     _ => ()\n                 }"}, {"sha": "4d9bb87d133a445a37324c6b8404de227adfbdd4", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=50375139e2bc69920786411f7b1e05866898ed7a", "patch": "@@ -1514,14 +1514,14 @@ impl<T: Iterator<char>> Parser<T> {\n \n             if escape {\n                 match self.ch_or_null() {\n-                    '\"' => res.push_char('\"'),\n-                    '\\\\' => res.push_char('\\\\'),\n-                    '/' => res.push_char('/'),\n-                    'b' => res.push_char('\\x08'),\n-                    'f' => res.push_char('\\x0c'),\n-                    'n' => res.push_char('\\n'),\n-                    'r' => res.push_char('\\r'),\n-                    't' => res.push_char('\\t'),\n+                    '\"' => res.push('\"'),\n+                    '\\\\' => res.push('\\\\'),\n+                    '/' => res.push('/'),\n+                    'b' => res.push('\\x08'),\n+                    'f' => res.push('\\x0c'),\n+                    'n' => res.push('\\n'),\n+                    'r' => res.push('\\r'),\n+                    't' => res.push('\\t'),\n                     'u' => match try!(self.decode_hex_escape()) {\n                         0xDC00 .. 0xDFFF => return self.error(LoneLeadingSurrogateInHexEscape),\n \n@@ -1535,13 +1535,13 @@ impl<T: Iterator<char>> Parser<T> {\n \n                             let buf = [n1, try!(self.decode_hex_escape())];\n                             match str::utf16_items(buf.as_slice()).next() {\n-                                Some(ScalarValue(c)) => res.push_char(c),\n+                                Some(ScalarValue(c)) => res.push(c),\n                                 _ => return self.error(LoneLeadingSurrogateInHexEscape),\n                             }\n                         }\n \n                         n => match char::from_u32(n as u32) {\n-                            Some(c) => res.push_char(c),\n+                            Some(c) => res.push(c),\n                             None => return self.error(InvalidUnicodeCodePoint),\n                         },\n                     },\n@@ -1556,7 +1556,7 @@ impl<T: Iterator<char>> Parser<T> {\n                         self.bump();\n                         return Ok(res);\n                     },\n-                    Some(c) => res.push_char(c),\n+                    Some(c) => res.push(c),\n                     None => unreachable!()\n                 }\n             }"}, {"sha": "803db4848ada522a0be704eabcdec69d8b9c354d", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50375139e2bc69920786411f7b1e05866898ed7a/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=50375139e2bc69920786411f7b1e05866898ed7a", "patch": "@@ -212,7 +212,7 @@ impl GenericPathUnsafe for Path {\n             None if \"..\" == self.repr.as_slice() => {\n                 let mut s = String::with_capacity(3 + filename.len());\n                 s.push_str(\"..\");\n-                s.push_char(SEP);\n+                s.push(SEP);\n                 s.push_str(filename);\n                 self.update_normalized(s);\n             }\n@@ -222,7 +222,7 @@ impl GenericPathUnsafe for Path {\n             Some((_,idxa,end)) if self.repr.as_slice().slice(idxa,end) == \"..\" => {\n                 let mut s = String::with_capacity(end + 1 + filename.len());\n                 s.push_str(self.repr.as_slice().slice_to(end));\n-                s.push_char(SEP);\n+                s.push(SEP);\n                 s.push_str(filename);\n                 self.update_normalized(s);\n             }\n@@ -235,7 +235,7 @@ impl GenericPathUnsafe for Path {\n             Some((idxb,_,_)) => {\n                 let mut s = String::with_capacity(idxb + 1 + filename.len());\n                 s.push_str(self.repr.as_slice().slice_to(idxb));\n-                s.push_char(SEP);\n+                s.push(SEP);\n                 s.push_str(filename);\n                 self.update_normalized(s);\n             }\n@@ -299,7 +299,7 @@ impl GenericPathUnsafe for Path {\n             match me.prefix {\n                 Some(DiskPrefix) if me.repr.len() == plen => (),\n                 _ if !(me.repr.len() > plen && me.repr.as_bytes()[me.repr.len()-1] == SEP_BYTE) => {\n-                    s.push_char(SEP);\n+                    s.push(SEP);\n                 }\n                 _ => ()\n             }\n@@ -745,7 +745,7 @@ impl Path {\n                 Some(VerbatimUNCPrefix(x, 0)) if s.len() == 8 + x => {\n                     // the server component has no trailing '\\'\n                     let mut s = String::from_str(s);\n-                    s.push_char(SEP);\n+                    s.push(SEP);\n                     Some(s)\n                 }\n                 _ => None\n@@ -815,20 +815,20 @@ impl Path {\n                         let mut s = String::with_capacity(n);\n                         match prefix {\n                             Some(DiskPrefix) => {\n-                                s.push_char(prefix_.as_bytes()[0].to_ascii()\n+                                s.push(prefix_.as_bytes()[0].to_ascii()\n                                                    .to_uppercase().to_char());\n-                                s.push_char(':');\n+                                s.push(':');\n                             }\n                             Some(VerbatimDiskPrefix) => {\n                                 s.push_str(prefix_.slice_to(4));\n-                                s.push_char(prefix_.as_bytes()[4].to_ascii()\n+                                s.push(prefix_.as_bytes()[4].to_ascii()\n                                                    .to_uppercase().to_char());\n                                 s.push_str(prefix_.slice_from(5));\n                             }\n                             Some(UNCPrefix(a,b)) => {\n                                 s.push_str(\"\\\\\\\\\");\n                                 s.push_str(prefix_.slice(2, a+2));\n-                                s.push_char(SEP);\n+                                s.push(SEP);\n                                 s.push_str(prefix_.slice(3+a, 3+a+b));\n                             }\n                             Some(_) => s.push_str(prefix_),\n@@ -842,7 +842,7 @@ impl Path {\n                             }\n                         }\n                         for comp in it {\n-                            s.push_char(SEP);\n+                            s.push(SEP);\n                             s.push_str(comp);\n                         }\n                         Some(s)"}]}