{"sha": "b13d0407d48e3380ec29d6c37fda0ecc488c79c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxM2QwNDA3ZDQ4ZTMzODBlYzI5ZDZjMzdmZGEwZWNjNDg4Yzc5YzI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-20T18:51:55Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-01T16:17:23Z"}, "message": "rustc: remove closure ID from Res::Upvar.", "tree": {"sha": "410533ff532de226b255f5af52df2c9dd85d0806", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/410533ff532de226b255f5af52df2c9dd85d0806"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b13d0407d48e3380ec29d6c37fda0ecc488c79c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b13d0407d48e3380ec29d6c37fda0ecc488c79c2", "html_url": "https://github.com/rust-lang/rust/commit/b13d0407d48e3380ec29d6c37fda0ecc488c79c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b13d0407d48e3380ec29d6c37fda0ecc488c79c2/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1768030791649c4baaa3413512061e20377936ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/1768030791649c4baaa3413512061e20377936ad", "html_url": "https://github.com/rust-lang/rust/commit/1768030791649c4baaa3413512061e20377936ad"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "2486f21ce42390345bf6017b1d9e26e6f53604ab", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b13d0407d48e3380ec29d6c37fda0ecc488c79c2/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b13d0407d48e3380ec29d6c37fda0ecc488c79c2/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=b13d0407d48e3380ec29d6c37fda0ecc488c79c2", "patch": "@@ -139,8 +139,7 @@ pub enum Res<Id = hir::HirId> {\n     // Value namespace\n     SelfCtor(DefId /* impl */),  // `DefId` refers to the impl\n     Local(Id),\n-    Upvar(Id,           // `HirId` of closed over local\n-          ast::NodeId), // expr node that creates the closure\n+    Upvar(Id),\n \n     // Macro namespace\n     NonMacroAttr(NonMacroAttrKind), // e.g., `#[inline]` or `#[rustfmt::skip]`\n@@ -396,7 +395,7 @@ impl<Id> Res<Id> {\n             Res::SelfCtor(id) => Res::SelfCtor(id),\n             Res::PrimTy(id) => Res::PrimTy(id),\n             Res::Local(id) => Res::Local(map(id)),\n-            Res::Upvar(id, closure) => Res::Upvar(map(id), closure),\n+            Res::Upvar(id) => Res::Upvar(map(id)),\n             Res::SelfTy(a, b) => Res::SelfTy(a, b),\n             Res::ToolMod => Res::ToolMod,\n             Res::NonMacroAttr(attr_kind) => Res::NonMacroAttr(attr_kind),"}, {"sha": "36b6ddf3432f819710d9b032df46cda7e01a0d10", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b13d0407d48e3380ec29d6c37fda0ecc488c79c2/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b13d0407d48e3380ec29d6c37fda0ecc488c79c2/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=b13d0407d48e3380ec29d6c37fda0ecc488c79c2", "patch": "@@ -971,15 +971,13 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                         -> mc::McResult<mc::cmt_<'tcx>> {\n         // Create the cmt for the variable being borrowed, from the\n         // caller's perspective\n-        if upvar.has_parent {\n-            let closure_def_id = self.tcx().hir().local_def_id_from_hir_id(closure_hir_id);\n-            assert_eq!(self.mc.body_owner, self.tcx().parent(closure_def_id).unwrap());\n-            let var_nid = self.tcx().hir().hir_to_node_id(var_id);\n-            self.mc.cat_upvar(closure_hir_id, closure_span, var_nid)\n+        let res = if upvar.has_parent {\n+            Res::Upvar(var_id)\n         } else {\n-            let var_ty = self.mc.node_ty(var_id)?;\n-            self.mc.cat_res(closure_hir_id, closure_span, var_ty, Res::Local(var_id))\n-        }\n+            Res::Local(var_id)\n+        };\n+        let var_ty = self.mc.node_ty(var_id)?;\n+        self.mc.cat_res(closure_hir_id, closure_span, var_ty, res)\n     }\n }\n "}, {"sha": "17ec2de2f3abff0b5bfb94441e177c3268a66b99", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b13d0407d48e3380ec29d6c37fda0ecc488c79c2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b13d0407d48e3380ec29d6c37fda0ecc488c79c2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=b13d0407d48e3380ec29d6c37fda0ecc488c79c2", "patch": "@@ -78,6 +78,7 @@ use syntax_pos::Span;\n use std::borrow::Cow;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::indexed_vec::Idx;\n use std::rc::Rc;\n use crate::util::nodemap::ItemLocalSet;\n@@ -289,6 +290,7 @@ impl HirNode for hir::Pat {\n pub struct MemCategorizationContext<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     pub body_owner: DefId,\n+    pub upvars: Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>>,\n     pub region_scope_tree: &'a region::ScopeTree,\n     pub tables: &'a ty::TypeckTables<'tcx>,\n     rvalue_promotable_map: Option<&'tcx ItemLocalSet>,\n@@ -407,6 +409,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx, 'tcx> {\n         MemCategorizationContext {\n             tcx,\n             body_owner,\n+            upvars: tcx.upvars(body_owner),\n             region_scope_tree,\n             tables,\n             rvalue_promotable_map,\n@@ -441,6 +444,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         MemCategorizationContext {\n             tcx,\n             body_owner,\n+            upvars: tcx.upvars(body_owner),\n             region_scope_tree,\n             tables,\n             rvalue_promotable_map,\n@@ -742,21 +746,20 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 })\n             }\n \n-            Res::Upvar(var_id, closure_node_id) => {\n+            Res::Upvar(var_id) => {\n+                assert!(self.upvars.map_or(false, |upvars| upvars.contains_key(&var_id)));\n                 let var_nid = self.tcx.hir().hir_to_node_id(var_id);\n-                let closure_def_id = self.tcx.hir().local_def_id(closure_node_id);\n-                assert_eq!(self.body_owner, closure_def_id);\n-\n                 self.cat_upvar(hir_id, span, var_nid)\n             }\n \n-            Res::Local(vid) => {\n-                let vnid = self.tcx.hir().hir_to_node_id(vid);\n+            Res::Local(var_id) => {\n+                assert!(!self.upvars.map_or(false, |upvars| upvars.contains_key(&var_id)));\n+                let var_nid = self.tcx.hir().hir_to_node_id(var_id);\n                 Ok(cmt_ {\n                     hir_id,\n                     span,\n-                    cat: Categorization::Local(vid),\n-                    mutbl: MutabilityCategory::from_local(self.tcx, self.tables, vnid),\n+                    cat: Categorization::Local(var_id),\n+                    mutbl: MutabilityCategory::from_local(self.tcx, self.tables, var_nid),\n                     ty: expr_ty,\n                     note: NoteNone\n                 })\n@@ -768,7 +771,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n     // Categorize an upvar, complete with invisible derefs of closure\n     // environment and upvar reference as appropriate.\n-    pub fn cat_upvar(\n+    fn cat_upvar(\n         &self,\n         hir_id: hir::HirId,\n         span: Span,"}, {"sha": "cb110061c0b876b3e5deb22489c332609bbc1469", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b13d0407d48e3380ec29d6c37fda0ecc488c79c2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b13d0407d48e3380ec29d6c37fda0ecc488c79c2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=b13d0407d48e3380ec29d6c37fda0ecc488c79c2", "patch": "@@ -960,11 +960,15 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n         Res::Def(DefKind::Static, id) => ExprKind::StaticRef { id },\n \n-        Res::Local(var_hir_id) => convert_var(cx, expr, var_hir_id),\n-        Res::Upvar(var_hir_id, closure_node_id) => {\n-            let closure_def_id = cx.tcx.hir().local_def_id(closure_node_id);\n-            assert_eq!(cx.body_owner, closure_def_id);\n-            assert!(cx.tables().upvar_list[&cx.body_owner].contains_key(&var_hir_id));\n+        Res::Local(var_hir_id) => {\n+            assert!(!cx.tables().upvar_list.get(&cx.body_owner)\n+                .map_or(false, |upvars| upvars.contains_key(&var_hir_id)));\n+\n+            convert_var(cx, expr, var_hir_id)\n+        }\n+        Res::Upvar(var_hir_id) => {\n+            assert!(cx.tables().upvar_list.get(&cx.body_owner)\n+                .map_or(false, |upvars| upvars.contains_key(&var_hir_id)));\n \n             convert_var(cx, expr, var_hir_id)\n         }"}, {"sha": "d5c85bde52ddd8c38c674ff69b5d3ed293b251ff", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b13d0407d48e3380ec29d6c37fda0ecc488c79c2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b13d0407d48e3380ec29d6c37fda0ecc488c79c2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b13d0407d48e3380ec29d6c37fda0ecc488c79c2", "patch": "@@ -4053,7 +4053,7 @@ impl<'a> Resolver<'a> {\n                                 Res::Upvar(..) => true,\n                                 _ => false,\n                             };\n-                            res = Res::Upvar(var_id, function_id);\n+                            res = Res::Upvar(var_id);\n \n                             match self.upvars.entry(function_id).or_default().entry(var_id) {\n                                 indexmap::map::Entry::Occupied(_) => continue,"}]}