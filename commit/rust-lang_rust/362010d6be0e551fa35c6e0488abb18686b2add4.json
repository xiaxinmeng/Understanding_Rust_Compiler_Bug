{"sha": "362010d6be0e551fa35c6e0488abb18686b2add4", "node_id": "C_kwDOAAsO6NoAKDM2MjAxMGQ2YmUwZTU1MWZhMzVjNmUwNDg4YWJiMTg2ODZiMmFkZDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-10T00:40:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-10T00:40:57Z"}, "message": "Auto merge of #96715 - cjgillot:trait-alias-loop, r=compiler-errors\n\nFortify handing of where bounds on trait & trait alias definitions\n\nCloses https://github.com/rust-lang/rust/issues/96664\nCloses https://github.com/rust-lang/rust/issues/96665\n\nSince https://github.com/rust-lang/rust/pull/93803, when listing all bounds and predicates we now need to account for the possible presence of predicates on any of the generic parameters.  Both bugs were hidden by the special handling of bounds at  the generic parameter declaration position.\n\nTrait alias expansion used to confuse predicates on `Self` and where predicates.\nExiting too late when listing all the bounds caused a cycle error.", "tree": {"sha": "ac3d6255176d0d119485e26d9b878cb685243511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac3d6255176d0d119485e26d9b878cb685243511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/362010d6be0e551fa35c6e0488abb18686b2add4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/362010d6be0e551fa35c6e0488abb18686b2add4", "html_url": "https://github.com/rust-lang/rust/commit/362010d6be0e551fa35c6e0488abb18686b2add4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/362010d6be0e551fa35c6e0488abb18686b2add4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb390735b03aa44229ff2858be8fedbd7b0ce7cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb390735b03aa44229ff2858be8fedbd7b0ce7cb", "html_url": "https://github.com/rust-lang/rust/commit/cb390735b03aa44229ff2858be8fedbd7b0ce7cb"}, {"sha": "e947fad68cc7dce9285364984931dc1f286b9fa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e947fad68cc7dce9285364984931dc1f286b9fa3", "html_url": "https://github.com/rust-lang/rust/commit/e947fad68cc7dce9285364984931dc1f286b9fa3"}], "stats": {"total": 89, "additions": 69, "deletions": 20}, "files": [{"sha": "9195d7a2b8f9248a1afd8e75be4bf67f7613d6eb", "filename": "compiler/rustc_error_messages/locales/en-US/typeck.ftl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/362010d6be0e551fa35c6e0488abb18686b2add4/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/362010d6be0e551fa35c6e0488abb18686b2add4/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl?ref=362010d6be0e551fa35c6e0488abb18686b2add4", "patch": "@@ -45,6 +45,7 @@ typeck-copy-impl-on-non-adt =\n \n typeck-trait-object-declared-with-no-traits =\n     at least one trait is required for an object type\n+    .alias-span = this alias does not contain a trait\n \n typeck-ambiguous-lifetime-bound =\n     ambiguous lifetime bound, explicit lifetime bound required"}, {"sha": "d101f69096fe8e013572d2c605c99dc54a1d938b", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/362010d6be0e551fa35c6e0488abb18686b2add4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362010d6be0e551fa35c6e0488abb18686b2add4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=362010d6be0e551fa35c6e0488abb18686b2add4", "patch": "@@ -118,13 +118,14 @@ impl<'tcx> TraitAliasExpander<'tcx> {\n \n         // Get components of trait alias.\n         let predicates = tcx.super_predicates_of(trait_ref.def_id());\n+        debug!(?predicates);\n \n         let items = predicates.predicates.iter().rev().filter_map(|(pred, span)| {\n             pred.subst_supertrait(tcx, &trait_ref)\n                 .to_opt_poly_trait_pred()\n                 .map(|trait_ref| item.clone_and_push(trait_ref.map_bound(|t| t.trait_ref), *span))\n         });\n-        debug!(\"expand_trait_aliases: items={:?}\", items.clone());\n+        debug!(\"expand_trait_aliases: items={:?}\", items.clone().collect::<Vec<_>>());\n \n         self.stack.extend(items);\n "}, {"sha": "e940d065a999400e1819149f2a3893144f852f16", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/362010d6be0e551fa35c6e0488abb18686b2add4/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362010d6be0e551fa35c6e0488abb18686b2add4/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=362010d6be0e551fa35c6e0488abb18686b2add4", "patch": "@@ -1064,6 +1064,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let mut bounds = Bounds::default();\n \n         self.add_bounds(param_ty, ast_bounds.iter(), &mut bounds, ty::List::empty());\n+        debug!(?bounds);\n \n         bounds\n     }\n@@ -1327,8 +1328,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // is used and no 'maybe' bounds are used.\n         let expanded_traits =\n             traits::expand_trait_aliases(tcx, bounds.trait_bounds.iter().map(|&(a, b, _)| (a, b)));\n-        let (mut auto_traits, regular_traits): (Vec<_>, Vec<_>) =\n-            expanded_traits.partition(|i| tcx.trait_is_auto(i.trait_ref().def_id()));\n+        let (mut auto_traits, regular_traits): (Vec<_>, Vec<_>) = expanded_traits\n+            .filter(|i| i.trait_ref().self_ty().skip_binder() == dummy_self)\n+            .partition(|i| tcx.trait_is_auto(i.trait_ref().def_id()));\n         if regular_traits.len() > 1 {\n             let first_trait = &regular_traits[0];\n             let additional_trait = &regular_traits[1];\n@@ -1362,7 +1364,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n \n         if regular_traits.is_empty() && auto_traits.is_empty() {\n-            tcx.sess.emit_err(TraitObjectDeclaredWithNoTraits { span });\n+            let trait_alias_span = bounds\n+                .trait_bounds\n+                .iter()\n+                .map(|&(trait_ref, _, _)| trait_ref.def_id())\n+                .find(|&trait_ref| tcx.is_trait_alias(trait_ref))\n+                .map(|trait_ref| tcx.def_span(trait_ref));\n+            tcx.sess.emit_err(TraitObjectDeclaredWithNoTraits { span, trait_alias_span });\n             return tcx.ty_error();\n         }\n "}, {"sha": "2e0e026631b5191bd3d5514e32f509d437ccdef9", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/362010d6be0e551fa35c6e0488abb18686b2add4/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362010d6be0e551fa35c6e0488abb18686b2add4/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=362010d6be0e551fa35c6e0488abb18686b2add4", "patch": "@@ -52,6 +52,7 @@ use std::iter;\n mod item_bounds;\n mod type_of;\n \n+#[derive(Debug)]\n struct OnlySelfBounds(bool);\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -650,6 +651,7 @@ impl<'tcx> ItemCtxt<'tcx> {\n     /// AST. We do this to avoid having to convert *all* the bounds, which\n     /// would create artificial cycles. Instead, we can only convert the\n     /// bounds for a type parameter `X` if `X::Foo` is used.\n+    #[instrument(level = \"trace\", skip(self, ast_generics))]\n     fn type_parameter_bounds_in_generics(\n         &self,\n         ast_generics: &'tcx hir::Generics<'tcx>,\n@@ -659,6 +661,7 @@ impl<'tcx> ItemCtxt<'tcx> {\n         assoc_name: Option<Ident>,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n         let param_def_id = self.tcx.hir().local_def_id(param_id).to_def_id();\n+        debug!(?param_def_id);\n         ast_generics\n             .predicates\n             .iter()\n@@ -676,13 +679,12 @@ impl<'tcx> ItemCtxt<'tcx> {\n                 };\n                 let bvars = self.tcx.late_bound_vars(bp.bounded_ty.hir_id);\n \n-                bp.bounds\n-                    .iter()\n-                    .filter(|b| match assoc_name {\n+                bp.bounds.iter().filter_map(move |b| bt.map(|bt| (bt, b, bvars))).filter(\n+                    |(_, b, _)| match assoc_name {\n                         Some(assoc_name) => self.bound_defines_assoc_item(b, assoc_name),\n                         None => true,\n-                    })\n-                    .filter_map(move |b| bt.map(|bt| (bt, b, bvars)))\n+                    },\n+                )\n             })\n             .flat_map(|(bt, b, bvars)| predicates_from_bound(self, bt, b, bvars))\n             .collect()\n@@ -1140,6 +1142,7 @@ fn super_predicates_that_define_assoc_type(\n \n         // Combine the two lists to form the complete set of superbounds:\n         let superbounds = &*tcx.arena.alloc_from_iter(superbounds1.into_iter().chain(superbounds2));\n+        debug!(?superbounds);\n \n         // Now require that immediate supertraits are converted,\n         // which will, in turn, reach indirect supertraits."}, {"sha": "81d4c9135ef243695b6b515a277805ec46579919", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/362010d6be0e551fa35c6e0488abb18686b2add4/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362010d6be0e551fa35c6e0488abb18686b2add4/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=362010d6be0e551fa35c6e0488abb18686b2add4", "patch": "@@ -103,6 +103,8 @@ pub struct CopyImplOnNonAdt {\n pub struct TraitObjectDeclaredWithNoTraits {\n     #[primary_span]\n     pub span: Span,\n+    #[label = \"alias-span\"]\n+    pub trait_alias_span: Option<Span>,\n }\n \n #[derive(SessionDiagnostic)]"}, {"sha": "e9e846c2ff39ab1d2eff75bfc24d7eb6cf4ddd4c", "filename": "src/test/ui/traits/alias/only-maybe-bound.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/362010d6be0e551fa35c6e0488abb18686b2add4/src%2Ftest%2Fui%2Ftraits%2Falias%2Fonly-maybe-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/362010d6be0e551fa35c6e0488abb18686b2add4/src%2Ftest%2Fui%2Ftraits%2Falias%2Fonly-maybe-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fonly-maybe-bound.stderr?ref=362010d6be0e551fa35c6e0488abb18686b2add4", "patch": "@@ -1,12 +1,18 @@\n error[E0224]: at least one trait is required for an object type\n   --> $DIR/only-maybe-bound.rs:13:12\n    |\n+LL | trait _1 = _0;\n+   | -------------- this alias does not contain a trait\n+...\n LL | type _T0 = dyn _1;\n    |            ^^^^^^\n \n error[E0224]: at least one trait is required for an object type\n   --> $DIR/only-maybe-bound.rs:19:12\n    |\n+LL | trait _2 = _1 + _1;\n+   | ------------------- this alias does not contain a trait\n+LL | \n LL | type _T1 = dyn _2;\n    |            ^^^^^^\n "}, {"sha": "e5c2fccb2b5dbabedfff2bc4a51670fa6fd9a143", "filename": "src/test/ui/traits/issue-65673.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/362010d6be0e551fa35c6e0488abb18686b2add4/src%2Ftest%2Fui%2Ftraits%2Fissue-65673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362010d6be0e551fa35c6e0488abb18686b2add4/src%2Ftest%2Fui%2Ftraits%2Fissue-65673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-65673.rs?ref=362010d6be0e551fa35c6e0488abb18686b2add4", "patch": "@@ -7,6 +7,6 @@ trait Alias<T> = where T: Trait;\n \n impl<T> WithType for T {\n     type Ctx = dyn Alias<T>;\n-//~^ ERROR the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n+    //~^ ERROR at least one trait is required for an object type [E0224]\n }\n fn main() {}"}, {"sha": "71f3a0e7c7caa115060fff02eb74a12a83092e23", "filename": "src/test/ui/traits/issue-65673.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/362010d6be0e551fa35c6e0488abb18686b2add4/src%2Ftest%2Fui%2Ftraits%2Fissue-65673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/362010d6be0e551fa35c6e0488abb18686b2add4/src%2Ftest%2Fui%2Ftraits%2Fissue-65673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-65673.stderr?ref=362010d6be0e551fa35c6e0488abb18686b2add4", "patch": "@@ -1,16 +1,12 @@\n-error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n+error[E0224]: at least one trait is required for an object type\n   --> $DIR/issue-65673.rs:9:16\n    |\n+LL | trait Alias<T> = where T: Trait;\n+   | -------------------------------- this alias does not contain a trait\n+...\n LL |     type Ctx = dyn Alias<T>;\n-   |                ^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `(dyn Trait + 'static)`\n-note: required by a bound in `WithType::Ctx`\n-  --> $DIR/issue-65673.rs:4:5\n-   |\n-LL |     type Ctx;\n-   |     ^^^^^^^^^ required by this bound in `WithType::Ctx`\n+   |                ^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0224`."}, {"sha": "3c5314af73e2d644b5f0e3ee8df9c0533476fbc0", "filename": "src/test/ui/traits/issue-96664.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/362010d6be0e551fa35c6e0488abb18686b2add4/src%2Ftest%2Fui%2Ftraits%2Fissue-96664.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362010d6be0e551fa35c6e0488abb18686b2add4/src%2Ftest%2Fui%2Ftraits%2Fissue-96664.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-96664.rs?ref=362010d6be0e551fa35c6e0488abb18686b2add4", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(trait_alias)]\n+\n+pub trait State = Clone + Send + Sync + PartialOrd + PartialEq + std::fmt::Display;\n+pub trait RandState<S: State> = FnMut() -> S + Send;\n+\n+pub trait Evaluator {\n+    type State;\n+}\n+\n+pub struct Evolver<E: Evaluator> {\n+    rand_state: Box<dyn RandState<E::State>>,\n+}\n+\n+fn main() {}"}, {"sha": "a571d48d97a220ef3eebe9588de8055e5446e53c", "filename": "src/test/ui/traits/issue-96665.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/362010d6be0e551fa35c6e0488abb18686b2add4/src%2Ftest%2Fui%2Ftraits%2Fissue-96665.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362010d6be0e551fa35c6e0488abb18686b2add4/src%2Ftest%2Fui%2Ftraits%2Fissue-96665.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-96665.rs?ref=362010d6be0e551fa35c6e0488abb18686b2add4", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+pub trait Sequence<Item, Subsequence: Sequence<Item, Subsequence>> {}\n+\n+pub trait NodeWalk<Graph: GraphBase, NodeSubwalk: NodeWalk<Graph, NodeSubwalk>>:\n+    Sequence<Graph::NodeIndex, NodeSubwalk>\n+{\n+}\n+\n+pub trait GraphBase {\n+    type NodeIndex;\n+}\n+\n+pub trait WalkableGraph: GraphBase {}\n+\n+fn main() {}"}]}