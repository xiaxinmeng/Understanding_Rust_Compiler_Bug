{"sha": "5ad507206fae81293cb07dfde5c94e6be3994160", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZDUwNzIwNmZhZTgxMjkzY2IwN2RmZGU1Yzk0ZTZiZTM5OTQxNjA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-07-13T16:30:28Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-07-12T07:07:01Z"}, "message": "tyencode: Make sure that projection bounds are handled in stable order.", "tree": {"sha": "2fd723e1fe3235569061510de7ed92d2209fb00a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fd723e1fe3235569061510de7ed92d2209fb00a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ad507206fae81293cb07dfde5c94e6be3994160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ad507206fae81293cb07dfde5c94e6be3994160", "html_url": "https://github.com/rust-lang/rust/commit/5ad507206fae81293cb07dfde5c94e6be3994160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ad507206fae81293cb07dfde5c94e6be3994160/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c03bfe3b43c06bc439c5369a180958eb4360361", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c03bfe3b43c06bc439c5369a180958eb4360361", "html_url": "https://github.com/rust-lang/rust/commit/1c03bfe3b43c06bc439c5369a180958eb4360361"}], "stats": {"total": 75, "additions": 74, "deletions": 1}, "files": [{"sha": "3484a8b75dded7105c12e44d98d5e3b11ad7ccd2", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ad507206fae81293cb07dfde5c94e6be3994160/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad507206fae81293cb07dfde5c94e6be3994160/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=5ad507206fae81293cb07dfde5c94e6be3994160", "patch": "@@ -407,7 +407,14 @@ pub fn enc_existential_bounds<'a,'tcx>(w: &mut Cursor<Vec<u8>>,\n \n     enc_region(w, cx, bs.region_bound);\n \n-    for tp in &bs.projection_bounds {\n+    // Encode projection_bounds in a stable order\n+    let mut projection_bounds: Vec<_> = bs.projection_bounds\n+                                          .iter()\n+                                          .map(|b| (b.item_name().as_str(), b))\n+                                          .collect();\n+    projection_bounds.sort_by_key(|&(ref name, _)| name.clone());\n+\n+    for tp in projection_bounds.iter().map(|&(_, tp)| tp) {\n         write!(w, \"P\");\n         enc_projection_predicate(w, cx, &tp.0);\n     }"}, {"sha": "9131b609c4ce1895d5f6787404f11e2340cf7075", "filename": "src/test/run-pass/auxiliary/issue34796aux.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5ad507206fae81293cb07dfde5c94e6be3994160/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue34796aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad507206fae81293cb07dfde5c94e6be3994160/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue34796aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue34796aux.rs?ref=5ad507206fae81293cb07dfde5c94e6be3994160", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+pub trait Future {\n+    type Item;\n+    type Error;\n+}\n+\n+impl Future for u32 {\n+    type Item = ();\n+    type Error = Box<()>;\n+}\n+\n+fn foo() -> Box<Future<Item=(), Error=Box<()>>> {\n+    Box::new(0u32)\n+}\n+\n+pub fn bar<F, A, B>(_s: F)\n+    where F: Fn(A) -> B,\n+{\n+    foo();\n+}"}, {"sha": "0fb6ccc0dc8bdd0963ab9d673e755fd267a6c3af", "filename": "src/test/run-pass/issue34796.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5ad507206fae81293cb07dfde5c94e6be3994160/src%2Ftest%2Frun-pass%2Fissue34796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad507206fae81293cb07dfde5c94e6be3994160/src%2Ftest%2Frun-pass%2Fissue34796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue34796.rs?ref=5ad507206fae81293cb07dfde5c94e6be3994160", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test case exposes conditions where the encoding of a trait object type\n+// with projection predicates would differ between this crate and the upstream\n+// crate, because the predicates were encoded in different order within each\n+// crate. This led to different symbol hashes of functions using these type,\n+// which in turn led to linker errors because the two crates would not agree on\n+// the symbol name.\n+// The fix was to make the order in which predicates get encoded stable.\n+\n+// aux-build:issue34796aux.rs\n+extern crate issue34796aux;\n+\n+fn mk<T>() -> T { loop {} }\n+\n+struct Data<T, E> {\n+    data: T,\n+    error: E,\n+}\n+\n+fn main() {\n+    issue34796aux::bar(|()| {\n+        Data::<(), std::io::Error> {\n+            data: mk(),\n+            error: mk(),\n+        }\n+    })\n+}"}]}