{"sha": "cb367602ff7878b02e91bac72178e70b305dda85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMzY3NjAyZmY3ODc4YjAyZTkxYmFjNzIxNzhlNzBiMzA1ZGRhODU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-01T18:39:44Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-01T18:39:44Z"}, "message": "Split the actual tests out into scripts/tests.sh", "tree": {"sha": "193727ac1f3e4aaa4ba0fcfea54826df04954fec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/193727ac1f3e4aaa4ba0fcfea54826df04954fec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb367602ff7878b02e91bac72178e70b305dda85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb367602ff7878b02e91bac72178e70b305dda85", "html_url": "https://github.com/rust-lang/rust/commit/cb367602ff7878b02e91bac72178e70b305dda85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb367602ff7878b02e91bac72178e70b305dda85/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "324e63de289e249481445a399fcbcad62b7ab71d", "url": "https://api.github.com/repos/rust-lang/rust/commits/324e63de289e249481445a399fcbcad62b7ab71d", "html_url": "https://github.com/rust-lang/rust/commit/324e63de289e249481445a399fcbcad62b7ab71d"}], "stats": {"total": 200, "additions": 106, "deletions": 94}, "files": [{"sha": "7d1e488ac3a064f23f33b1e57782086bb53e4ad2", "filename": "scripts/tests.sh", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/cb367602ff7878b02e91bac72178e70b305dda85/scripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/cb367602ff7878b02e91bac72178e70b305dda85/scripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftests.sh?ref=cb367602ff7878b02e91bac72178e70b305dda85", "patch": "@@ -0,0 +1,102 @@\n+function no_sysroot_tests() {\n+    RUSTC=$RUSTC\" \"$RUSTFLAGS\" -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n+\n+    echo \"[BUILD] mini_core\"\n+    $RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib --target $TARGET_TRIPLE\n+\n+    echo \"[BUILD] example\"\n+    $RUSTC example/example.rs --crate-type lib --target $TARGET_TRIPLE\n+\n+    if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n+        echo \"[JIT] mini_core_hello_world\"\n+        CG_CLIF_JIT_ARGS=\"abc bcd\" $RUSTC --jit example/mini_core_hello_world.rs --cfg jit --target $HOST_TRIPLE\n+    else\n+        echo \"[JIT] mini_core_hello_world (skipped)\"\n+    fi\n+\n+    echo \"[AOT] mini_core_hello_world\"\n+    $RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/mini_core_hello_world abc bcd\n+    # (echo \"break set -n main\"; echo \"run\"; sleep 1; echo \"si -c 10\"; sleep 1; echo \"frame variable\") | lldb -- ./target/out/mini_core_hello_world abc bcd\n+\n+    echo \"[AOT] arbitrary_self_types_pointers_and_wrappers\"\n+    $RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/arbitrary_self_types_pointers_and_wrappers\n+}\n+\n+function base_sysroot_tests() {\n+    echo \"[AOT] alloc_example\"\n+    $RUSTC example/alloc_example.rs --crate-type bin --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/alloc_example\n+\n+    if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n+        echo \"[JIT] std_example\"\n+        $RUSTC --jit example/std_example.rs --target $HOST_TRIPLE\n+    else\n+        echo \"[JIT] std_example (skipped)\"\n+    fi\n+\n+    echo \"[AOT] dst_field_align\"\n+    # FIXME Re-add -Zmir-opt-level=2 once rust-lang/rust#67529 is fixed.\n+    $RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/dst_field_align || (echo $?; false)\n+\n+    echo \"[AOT] std_example\"\n+    $RUSTC example/std_example.rs --crate-type bin --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/std_example arg\n+\n+    echo \"[AOT] subslice-patterns-const-eval\"\n+    $RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/subslice-patterns-const-eval\n+\n+    echo \"[AOT] track-caller-attribute\"\n+    $RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/track-caller-attribute\n+\n+    echo \"[AOT] mod_bench\"\n+    $RUSTC example/mod_bench.rs --crate-type bin --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/mod_bench\n+\n+    pushd rand\n+    rm -r ./target || true\n+    ../cargo.sh test --workspace\n+    popd\n+}\n+\n+function extended_sysroot_tests() {\n+    pushd simple-raytracer\n+    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n+        echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n+        hyperfine --runs ${RUN_RUNS:-10} --warmup 1 --prepare \"cargo clean\" \\\n+        \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n+        \"../cargo.sh build\"\n+\n+        echo \"[BENCH RUN] ebobby/simple-raytracer\"\n+        cp ./target/debug/main ./raytracer_cg_clif\n+        hyperfine --runs ${RUN_RUNS:-10} ./raytracer_cg_llvm ./raytracer_cg_clif\n+    else\n+        echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\"\n+        echo \"[COMPILE] ebobby/simple-raytracer\"\n+        ../cargo.sh build\n+        echo \"[BENCH RUN] ebobby/simple-raytracer (skipped)\"\n+    fi\n+    popd\n+\n+    pushd build_sysroot/sysroot_src/library/core/tests\n+    echo \"[TEST] libcore\"\n+    rm -r ./target || true\n+    ../../../../../cargo.sh test\n+    popd\n+\n+    pushd regex\n+    echo \"[TEST] rust-lang/regex example shootout-regex-dna\"\n+    ../cargo.sh clean\n+    # Make sure `[codegen mono items] start` doesn't poison the diff\n+    ../cargo.sh build --example shootout-regex-dna\n+    cat examples/regexdna-input.txt | ../cargo.sh run --example shootout-regex-dna | grep -v \"Spawned thread\" > res.txt\n+    diff -u res.txt examples/regexdna-output.txt\n+\n+    echo \"[TEST] rust-lang/regex tests\"\n+    ../cargo.sh test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options\n+    popd\n+}"}, {"sha": "c62ee8716bc20707a6a39126865a528a07acf63a", "filename": "test.sh", "status": "modified", "additions": 4, "deletions": 94, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/cb367602ff7878b02e91bac72178e70b305dda85/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/cb367602ff7878b02e91bac72178e70b305dda85/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=cb367602ff7878b02e91bac72178e70b305dda85", "patch": "@@ -13,107 +13,17 @@ fi\n \n # Config\n source scripts/config.sh\n+source scripts/tests.sh\n export CG_CLIF_INCR_CACHE_DISABLED=1\n-RUSTC=$RUSTC\" \"$RUSTFLAGS\" -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n \n # Cleanup\n rm -r target/out || true\n \n-# Perform all tests\n-echo \"[BUILD] mini_core\"\n-$RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib --target $TARGET_TRIPLE\n-\n-echo \"[BUILD] example\"\n-$RUSTC example/example.rs --crate-type lib --target $TARGET_TRIPLE\n-\n-if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n-    echo \"[JIT] mini_core_hello_world\"\n-    CG_CLIF_JIT_ARGS=\"abc bcd\" $RUSTC --jit example/mini_core_hello_world.rs --cfg jit --target $HOST_TRIPLE\n-else\n-    echo \"[JIT] mini_core_hello_world (skipped)\"\n-fi\n-\n-echo \"[AOT] mini_core_hello_world\"\n-$RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/mini_core_hello_world abc bcd\n-# (echo \"break set -n main\"; echo \"run\"; sleep 1; echo \"si -c 10\"; sleep 1; echo \"frame variable\") | lldb -- ./target/out/mini_core_hello_world abc bcd\n-\n-echo \"[AOT] arbitrary_self_types_pointers_and_wrappers\"\n-$RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/arbitrary_self_types_pointers_and_wrappers\n+no_sysroot_tests\n \n echo \"[BUILD] sysroot\"\n time ./build_sysroot/build_sysroot.sh --release\n \n-echo \"[AOT] alloc_example\"\n-$RUSTC example/alloc_example.rs --crate-type bin --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/alloc_example\n-\n-if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n-    echo \"[JIT] std_example\"\n-    $RUSTC --jit example/std_example.rs --target $HOST_TRIPLE\n-else\n-    echo \"[JIT] std_example (skipped)\"\n-fi\n-\n-echo \"[AOT] dst_field_align\"\n-# FIXME Re-add -Zmir-opt-level=2 once rust-lang/rust#67529 is fixed.\n-$RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/dst_field_align || (echo $?; false)\n-\n-echo \"[AOT] std_example\"\n-$RUSTC example/std_example.rs --crate-type bin --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/std_example arg\n-\n-echo \"[AOT] subslice-patterns-const-eval\"\n-$RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/subslice-patterns-const-eval\n-\n-echo \"[AOT] track-caller-attribute\"\n-$RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/track-caller-attribute\n-\n-echo \"[AOT] mod_bench\"\n-$RUSTC example/mod_bench.rs --crate-type bin --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/mod_bench\n-\n-pushd rand\n-rm -r ./target || true\n-../cargo.sh test --workspace\n-popd\n-\n-pushd simple-raytracer\n-if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n-    echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n-    hyperfine --runs ${RUN_RUNS:-10} --warmup 1 --prepare \"cargo clean\" \\\n-    \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n-    \"../cargo.sh build\"\n-\n-    echo \"[BENCH RUN] ebobby/simple-raytracer\"\n-    cp ./target/debug/main ./raytracer_cg_clif\n-    hyperfine --runs ${RUN_RUNS:-10} ./raytracer_cg_llvm ./raytracer_cg_clif\n-else\n-    echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\"\n-    echo \"[COMPILE] ebobby/simple-raytracer\"\n-    ../cargo.sh build\n-    echo \"[BENCH RUN] ebobby/simple-raytracer (skipped)\"\n-fi\n-popd\n-\n-pushd build_sysroot/sysroot_src/library/core/tests\n-echo \"[TEST] libcore\"\n-rm -r ./target || true\n-../../../../../cargo.sh test\n-popd\n-\n-pushd regex\n-echo \"[TEST] rust-lang/regex example shootout-regex-dna\"\n-../cargo.sh clean\n-# Make sure `[codegen mono items] start` doesn't poison the diff\n-../cargo.sh build --example shootout-regex-dna\n-cat examples/regexdna-input.txt | ../cargo.sh run --example shootout-regex-dna | grep -v \"Spawned thread\" > res.txt\n-diff -u res.txt examples/regexdna-output.txt\n+base_sysroot_tests\n \n-echo \"[TEST] rust-lang/regex tests\"\n-../cargo.sh test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options\n-popd\n+extended_sysroot_tests"}]}