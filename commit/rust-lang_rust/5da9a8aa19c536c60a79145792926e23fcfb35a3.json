{"sha": "5da9a8aa19c536c60a79145792926e23fcfb35a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYTlhOGFhMTljNTM2YzYwYTc5MTQ1NzkyOTI2ZTIzZmNmYjM1YTM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-20T03:17:07Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-28T13:47:14Z"}, "message": "Rename some variables in lowering.rs and add an error number for the error", "tree": {"sha": "b716395dc25d6d0414c8cf20657353afcdc0e16c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b716395dc25d6d0414c8cf20657353afcdc0e16c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da9a8aa19c536c60a79145792926e23fcfb35a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da9a8aa19c536c60a79145792926e23fcfb35a3", "html_url": "https://github.com/rust-lang/rust/commit/5da9a8aa19c536c60a79145792926e23fcfb35a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da9a8aa19c536c60a79145792926e23fcfb35a3/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df0496a620f1a6e322df9748c9843ee8d87a8bd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/df0496a620f1a6e322df9748c9843ee8d87a8bd6", "html_url": "https://github.com/rust-lang/rust/commit/df0496a620f1a6e322df9748c9843ee8d87a8bd6"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "056c331cf64f43c7a50bb64fbb37489c2275db90", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5da9a8aa19c536c60a79145792926e23fcfb35a3/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da9a8aa19c536c60a79145792926e23fcfb35a3/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=5da9a8aa19c536c60a79145792926e23fcfb35a3", "patch": "@@ -2025,4 +2025,5 @@ register_diagnostics! {\n     E0490, // a value of type `..` is borrowed for too long\n     E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n     E0566, // conflicting representation hints\n+    E0624, // generators cannot have explicit arguments\n }"}, {"sha": "38f8e291f54882bbca4f3cffb6e853d69937ea8d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5da9a8aa19c536c60a79145792926e23fcfb35a3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da9a8aa19c536c60a79145792926e23fcfb35a3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5da9a8aa19c536c60a79145792926e23fcfb35a3", "patch": "@@ -623,12 +623,12 @@ impl<'a> LoweringContext<'a> {\n                 })))\n             }\n             TyKind::Array(ref ty, ref length) => {\n-                let body = self.lower_body(None, |this| this.lower_expr(length));\n-                hir::TyArray(self.lower_ty(ty), body)\n+                let length = self.lower_body(None, |this| this.lower_expr(length));\n+                hir::TyArray(self.lower_ty(ty), length)\n             }\n             TyKind::Typeof(ref expr) => {\n-                let body = self.lower_body(None, |this| this.lower_expr(expr));\n-                hir::TyTypeof(body)\n+                let expr = self.lower_body(None, |this| this.lower_expr(expr));\n+                hir::TyTypeof(expr)\n             }\n             TyKind::TraitObject(ref bounds) => {\n                 let mut lifetime_bound = None;\n@@ -1299,14 +1299,14 @@ impl<'a> LoweringContext<'a> {\n                 hir::ItemUse(path, kind)\n             }\n             ItemKind::Static(ref t, m, ref e) => {\n-                let body = self.lower_body(None, |this| this.lower_expr(e));\n+                let value = self.lower_body(None, |this| this.lower_expr(e));\n                 hir::ItemStatic(self.lower_ty(t),\n                                 self.lower_mutability(m),\n-                                body)\n+                                value)\n             }\n             ItemKind::Const(ref t, ref e) => {\n-                let body = self.lower_body(None, |this| this.lower_expr(e));\n-                hir::ItemConst(self.lower_ty(t), body)\n+                let value = self.lower_body(None, |this| this.lower_expr(e));\n+                hir::ItemConst(self.lower_ty(t), value)\n             }\n             ItemKind::Fn(ref decl, unsafety, constness, abi, ref generics, ref body) => {\n                 self.with_new_scopes(|this| {\n@@ -1416,7 +1416,7 @@ impl<'a> LoweringContext<'a> {\n                     }\n                     TraitItemKind::Method(ref sig, Some(ref body)) => {\n                         let body_id = this.lower_body(Some(&sig.decl), |this| {\n-                        let body = this.lower_block(body, false);\n+                            let body = this.lower_block(body, false);\n                             this.expr_block(body, ThinVec::new())\n                         });\n                         hir::TraitItemKind::Method(this.lower_method_sig(sig),\n@@ -1472,7 +1472,7 @@ impl<'a> LoweringContext<'a> {\n                     }\n                     ImplItemKind::Method(ref sig, ref body) => {\n                         let body_id = this.lower_body(Some(&sig.decl), |this| {\n-                        let body = this.lower_block(body, false);\n+                            let body = this.lower_block(body, false);\n                             this.expr_block(body, ThinVec::new())\n                         });\n                         hir::ImplItemKind::Method(this.lower_method_sig(sig), body_id)\n@@ -1846,8 +1846,8 @@ impl<'a> LoweringContext<'a> {\n             }\n             ExprKind::Repeat(ref expr, ref count) => {\n                 let expr = P(self.lower_expr(expr));\n-                let body = self.lower_body(None, |this| this.lower_expr(count));\n-                hir::ExprRepeat(expr, body)\n+                let count = self.lower_body(None, |this| this.lower_expr(count));\n+                hir::ExprRepeat(expr, count)\n             }\n             ExprKind::Tup(ref elts) => {\n                 hir::ExprTup(elts.iter().map(|x| self.lower_expr(x)).collect())\n@@ -1947,9 +1947,9 @@ impl<'a> LoweringContext<'a> {\n                             e\n                         });\n                         if gen == hir::IsGenerator::Yes && !decl.inputs.is_empty() {\n-                            this.sess.span_fatal(\n-                                    fn_decl_span,\n-                                    &format!(\"generators cannot have explicit arguments\"));\n+                            span_err!(this.sess, fn_decl_span, E0624,\n+                                      \"yield statement outside of generator literal\");\n+                            this.sess.abort_if_errors();\n                         }\n                         hir::ExprClosure(this.lower_capture_clause(capture_clause),\n                                          this.lower_fn_decl(decl),"}]}