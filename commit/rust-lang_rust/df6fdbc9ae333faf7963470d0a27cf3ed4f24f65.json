{"sha": "df6fdbc9ae333faf7963470d0a27cf3ed4f24f65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNmZkYmM5YWUzMzNmYWY3OTYzNDcwZDBhMjdjZjNlZDRmMjRmNjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T23:02:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-19T10:36:56Z"}, "message": "fix closure inlining by spilling arguments to a temporary", "tree": {"sha": "62505c0b834e0b4efde88ff8c0b0d5c3431061c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62505c0b834e0b4efde88ff8c0b0d5c3431061c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df6fdbc9ae333faf7963470d0a27cf3ed4f24f65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df6fdbc9ae333faf7963470d0a27cf3ed4f24f65", "html_url": "https://github.com/rust-lang/rust/commit/df6fdbc9ae333faf7963470d0a27cf3ed4f24f65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df6fdbc9ae333faf7963470d0a27cf3ed4f24f65/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83f5a9605f5fc566c9d6e1477d879382c0b1b8dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f5a9605f5fc566c9d6e1477d879382c0b1b8dc", "html_url": "https://github.com/rust-lang/rust/commit/83f5a9605f5fc566c9d6e1477d879382c0b1b8dc"}], "stats": {"total": 103, "additions": 93, "deletions": 10}, "files": [{"sha": "0ad29f99accf4b482b4349696474ba269906b517", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/df6fdbc9ae333faf7963470d0a27cf3ed4f24f65/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6fdbc9ae333faf7963470d0a27cf3ed4f24f65/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=df6fdbc9ae333faf7963470d0a27cf3ed4f24f65", "patch": "@@ -22,6 +22,7 @@ use rustc::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::subst::{Subst,Substs};\n \n use std::collections::VecDeque;\n+use std::iter;\n use transform::{MirPass, MirSource};\n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n \n@@ -558,8 +559,29 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n     ) -> Vec<Operand<'tcx>> {\n         let tcx = self.tcx;\n \n-        // A closure is passed its self-type and a tuple like `(arg1, arg2, ...)`,\n-        // hence mappings to tuple fields are needed.\n+        // There is a bit of a mismatch between the *caller* of a closure and the *callee*.\n+        // The caller provides the arguments wrapped up in a tuple:\n+        //\n+        //     tuple_tmp = (a, b, c)\n+        //     Fn::call(closure_ref, tuple_tmp)\n+        //\n+        // meanwhile the closure body expects the arguments (here, `a`, `b`, and `c`)\n+        // as distinct arguments. (This is the \"rust-call\" ABI hack.) Normally, trans has\n+        // the job of unpacking this tuple. But here, we are trans. =) So we want to create\n+        // a vector like\n+        //\n+        //     [closure_ref, tuple_tmp.0, tuple_tmp.1, tuple_tmp.2]\n+        //\n+        // Except for one tiny wrinkle: we don't actually want `tuple_tmp.0`. It's more convenient\n+        // if we \"spill\" that into *another* temporary, so that we can map the argument\n+        // variable in the callee MIR directly to an argument variable on our side.\n+        // So we introduce temporaries like:\n+        //\n+        //     tmp0 = tuple_tmp.0\n+        //     tmp1 = tuple_tmp.1\n+        //     tmp2 = tuple_tmp.2\n+        //\n+        // and the vector is `[closure_ref, tmp0, tmp1, tmp2]`.\n         if tcx.is_closure(callsite.callee) {\n             let mut args = args.into_iter();\n             let self_ = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_mir);\n@@ -572,12 +594,21 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 bug!(\"Closure arguments are not passed as a tuple\");\n             };\n \n-            let mut res = Vec::with_capacity(1 + tuple_tys.len());\n-            res.push(Operand::Consume(self_));\n-            res.extend(tuple_tys.iter().enumerate().map(|(i, ty)| {\n-                Operand::Consume(tuple.clone().field(Field::new(i), ty))\n-            }));\n-            res\n+            // The `closure_ref` in our example above.\n+            let closure_ref_arg = iter::once(Operand::Consume(self_));\n+\n+            // The `tmp0`, `tmp1`, and `tmp2` in our example abonve.\n+            let tuple_tmp_args =\n+                tuple_tys.iter().enumerate().map(|(i, ty)| {\n+                    // This is e.g. `tuple_tmp.0` in our example above.\n+                    let tuple_field = Operand::Consume(tuple.clone().field(Field::new(i), ty));\n+\n+                    // Spill to a local to make e.g. `tmp0`.\n+                    let tmp = self.create_temp_if_necessary(tuple_field, callsite, caller_mir);\n+                    Operand::Consume(tmp)\n+                });\n+\n+            closure_ref_arg.chain(tuple_tmp_args).collect()\n         } else {\n             args.into_iter()\n                 .map(|a| Operand::Consume(self.create_temp_if_necessary(a, callsite, caller_mir)))"}, {"sha": "de7b38d5519567010beee75acc20adac18726c78", "filename": "src/test/mir-opt/inline-closure-borrows-arg.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/df6fdbc9ae333faf7963470d0a27cf3ed4f24f65/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6fdbc9ae333faf7963470d0a27cf3ed4f24f65/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs?ref=df6fdbc9ae333faf7963470d0a27cf3ed4f24f65", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z span_free_formats\n+\n+// Tests that MIR inliner can handle closure arguments,\n+// even when (#45894)\n+\n+fn main() {\n+    println!(\"{}\", foo(0, &14));\n+}\n+\n+fn foo<T: Copy>(_t: T, q: &i32) -> i32 {\n+    let x = |r: &i32, _s: &i32| {\n+        let variable = &*r;\n+        *variable\n+    };\n+    x(q, q)\n+}\n+\n+// END RUST SOURCE\n+// START rustc.foo.Inline.after.mir\n+// ...\n+// bb0: {\n+//     ...\n+//     _3 = [closure@NodeId(39)];\n+//     ...\n+//     _4 = &_3;\n+//     ...\n+//     _6 = &(*_2);\n+//     ...\n+//     _7 = &(*_2);\n+//     _5 = (_6, _7);\n+//     _9 = (_5.0: &i32);\n+//     _10 = (_5.1: &i32);\n+//     StorageLive(_8);\n+//     _8 = (*_9);\n+//     _0 = _8;\n+//     ...\n+//     return;\n+// }\n+// ...\n+// END rustc.foo.Inline.after.mir"}, {"sha": "9d3fb923f5b3a25bd9f33e4ec3c2db29d9659b14", "filename": "src/test/mir-opt/inline-closure.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df6fdbc9ae333faf7963470d0a27cf3ed4f24f65/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6fdbc9ae333faf7963470d0a27cf3ed4f24f65/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure.rs?ref=df6fdbc9ae333faf7963470d0a27cf3ed4f24f65", "patch": "@@ -34,9 +34,11 @@ fn foo<T: Copy>(_t: T, q: i32) -> i32 {\n //     ...\n //     _7 = _2;\n //     _5 = (_6, _7);\n-//     _0 = (_5.0: i32);\n+//     _8 = (_5.0: i32);\n+//     _9 = (_5.1: i32);\n+//     _0 = _8;\n //     ...\n //     return;\n // }\n // ...\n-// END rustc.foo.Inline.after.mir\n\\ No newline at end of file\n+// END rustc.foo.Inline.after.mir"}]}