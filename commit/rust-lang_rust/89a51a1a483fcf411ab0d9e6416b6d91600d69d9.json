{"sha": "89a51a1a483fcf411ab0d9e6416b6d91600d69d9", "node_id": "C_kwDOAAsO6NoAKDg5YTUxYTFhNDgzZmNmNDExYWIwZDllNjQxNmI2ZDkxNjAwZDY5ZDk", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-08-16T11:12:36Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-08-16T11:12:36Z"}, "message": "use proper words in help message for floating point", "tree": {"sha": "9bd912d9924c85c8193ad3b0ec0f96452aabd805", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bd912d9924c85c8193ad3b0ec0f96452aabd805"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89a51a1a483fcf411ab0d9e6416b6d91600d69d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89a51a1a483fcf411ab0d9e6416b6d91600d69d9", "html_url": "https://github.com/rust-lang/rust/commit/89a51a1a483fcf411ab0d9e6416b6d91600d69d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89a51a1a483fcf411ab0d9e6416b6d91600d69d9/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84629a5ab1b9e93c631c25a002b08c57ae8c1d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/84629a5ab1b9e93c631c25a002b08c57ae8c1d4e", "html_url": "https://github.com/rust-lang/rust/commit/84629a5ab1b9e93c631c25a002b08c57ae8c1d4e"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "51182d2a40d2844b5563d4930a5366c5d2e8b639", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/89a51a1a483fcf411ab0d9e6416b6d91600d69d9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a51a1a483fcf411ab0d9e6416b6d91600d69d9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=89a51a1a483fcf411ab0d9e6416b6d91600d69d9", "patch": "@@ -2184,10 +2184,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let suffix = chars.collect::<String>();\n                 suffix.is_empty() || suffix == \"f32\" || suffix == \"f64\"\n             };\n-            let is_likely_suffix = |fist_chars: &[char], field: &str| {\n-                field.len() >= 1\n-                    && field.to_lowercase().starts_with(fist_chars)\n+            let maybe_partial_suffix = |field: &str| -> Option<&str> {\n+                let first_chars = ['f', 'l'];\n+                if field.len() >= 1\n+                    && field.to_lowercase().starts_with(first_chars)\n                     && field[1..].chars().all(|c| c.is_ascii_digit())\n+                {\n+                    if field.to_lowercase().starts_with(['f']) { Some(\"f32\") } else { Some(\"f64\") }\n+                } else {\n+                    None\n+                }\n             };\n             if let ty::Infer(ty::IntVar(_)) = expr_t.kind()\n                 && let ExprKind::Lit(Spanned {\n@@ -2196,19 +2202,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }) = base.kind\n                 && !base.span.from_expansion()\n             {\n-                let msg = \"If the number is meant to be a floating point number, consider adding a `0` after the period\";\n                 if is_valid_suffix(&field_name) {\n                     err.span_suggestion_verbose(\n                         field.span.shrink_to_lo(),\n-                        msg,\n+                        \"if intended to be a floating point literal, consider adding a `0` after the period\",\n                         '0',\n                         Applicability::MaybeIncorrect,\n                     );\n-                } else if is_likely_suffix(&['f', 'l'], &field_name) {\n+                } else if let Some(correct_suffix) = maybe_partial_suffix(&field_name) {\n                     err.span_suggestion_verbose(\n                         field.span,\n-                        format!(\"{}, valid float format are `f32` and `f64`\", msg),\n-                        \"0f32\",\n+                        format!(\"if intended to be a floating point literal, consider adding a `0` after the period and a `{correct_suffix}` suffix\"),\n+                        format!(\"0{correct_suffix}\"),\n                         Applicability::MaybeIncorrect,\n                     );\n                 }"}, {"sha": "bff669727a1b8287d1389da5d6f6dc24f65f0206", "filename": "src/test/ui/attempted-access-non-fatal.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/89a51a1a483fcf411ab0d9e6416b6d91600d69d9/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89a51a1a483fcf411ab0d9e6416b6d91600d69d9/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr?ref=89a51a1a483fcf411ab0d9e6416b6d91600d69d9", "patch": "@@ -16,7 +16,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     let _ = 0.f;\n    |               ^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period, valid float format are `f32` and `f64`\n+help: if intended to be a floating point literal, consider adding a `0` after the period and a `f32` suffix\n    |\n LL |     let _ = 0.0f32;\n    |               ~~~~\n@@ -27,9 +27,9 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     let _ = 2.l;\n    |               ^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period, valid float format are `f32` and `f64`\n+help: if intended to be a floating point literal, consider adding a `0` after the period and a `f64` suffix\n    |\n-LL |     let _ = 2.0f32;\n+LL |     let _ = 2.0f64;\n    |               ~~~~\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n@@ -38,7 +38,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     let _ = 12.F;\n    |                ^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period, valid float format are `f32` and `f64`\n+help: if intended to be a floating point literal, consider adding a `0` after the period and a `f32` suffix\n    |\n LL |     let _ = 12.0f32;\n    |                ~~~~\n@@ -49,9 +49,9 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     let _ = 34.L;\n    |                ^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period, valid float format are `f32` and `f64`\n+help: if intended to be a floating point literal, consider adding a `0` after the period and a `f64` suffix\n    |\n-LL |     let _ = 34.0f32;\n+LL |     let _ = 34.0f64;\n    |                ~~~~\n \n error: aborting due to 6 previous errors"}, {"sha": "503015f3bec615cb33cf0ea4c9f7b05eae096668", "filename": "src/test/ui/typeck/suggest-adding-missing-zero-to-floating-point-number.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89a51a1a483fcf411ab0d9e6416b6d91600d69d9/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89a51a1a483fcf411ab0d9e6416b6d91600d69d9/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.stderr?ref=89a51a1a483fcf411ab0d9e6416b6d91600d69d9", "patch": "@@ -4,7 +4,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     2.e1;\n    |       ^^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+help: if intended to be a floating point literal, consider adding a `0` after the period\n    |\n LL |     2.0e1;\n    |       +\n@@ -15,7 +15,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     2.E1;\n    |       ^^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+help: if intended to be a floating point literal, consider adding a `0` after the period\n    |\n LL |     2.0E1;\n    |       +\n@@ -26,7 +26,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     2.f32;\n    |       ^^^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+help: if intended to be a floating point literal, consider adding a `0` after the period\n    |\n LL |     2.0f32;\n    |       +\n@@ -37,7 +37,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     2.f64;\n    |       ^^^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+help: if intended to be a floating point literal, consider adding a `0` after the period\n    |\n LL |     2.0f64;\n    |       +\n@@ -48,7 +48,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     2.e+12;\n    |       ^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+help: if intended to be a floating point literal, consider adding a `0` after the period\n    |\n LL |     2.0e+12;\n    |       +\n@@ -59,7 +59,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     2.e-12;\n    |       ^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+help: if intended to be a floating point literal, consider adding a `0` after the period\n    |\n LL |     2.0e-12;\n    |       +\n@@ -70,7 +70,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     2.e1f32;\n    |       ^^^^^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+help: if intended to be a floating point literal, consider adding a `0` after the period\n    |\n LL |     2.0e1f32;\n    |       +"}]}