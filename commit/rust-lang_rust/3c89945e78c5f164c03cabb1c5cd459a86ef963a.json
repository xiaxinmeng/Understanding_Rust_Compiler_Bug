{"sha": "3c89945e78c5f164c03cabb1c5cd459a86ef963a", "node_id": "C_kwDOAAsO6NoAKDNjODk5NDVlNzhjNWYxNjRjMDNjYWJiMWM1Y2Q0NTlhODZlZjk2M2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-08T09:14:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-08T09:14:01Z"}, "message": "Auto merge of #14098 - pascalkuthe:did_change_workspace_folder, r=Veykril\n\nSupport DidChangeWorkspaceFolders notifications\n\nThis PR enables the `WorkspaceFoldersServerCapabilities` capability for rust-analyzer and implemented support for the associated [`DidChangeWorkspaceFolders`](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_didChangeWorkspaceFolders) notification to allow clients to update the list of `workspaceFolders` sent during initialization.\n\n## Motivation\n\nThis allows clients which lazily autodiscover their workspace roots (like the [helix editor](https://github.com/helix-editor/helix) once [my PR](https://github.com/helix-editor/helix/pull/5748) lands) avoid spawning multiple instances of RA. Right now such clients are forced to either:\n\n* greedily discover all LSP roots in the workspace (precludes the ability to respond to new workspace roots)\n* spawn multiple instance of rust-analyzer (one for each root)\n* restart rust-analyzer whenever a new workspace is added\n\nSome example use-cases are shown [here](https://github.com/helix-editor/helix/pull/5748#issuecomment-1421012523).\n\nThis PR will also improve support for VSCode (and Atom) multi workspaces.\n\n## Implementation\n\nThe implementation was fairly straightforward as `rust-analyzer` already supports dynamically reloading workspaces, for example on configuration changes. Furthermore, rust-analyzer also already supports auto-discovering internal workspace from the `workspaceFolders` key in the initialization request. Therefore, the necessary logic just needed to be moved to a central place and reused.", "tree": {"sha": "abded1b3abec3865feca9598991653b361ba6807", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abded1b3abec3865feca9598991653b361ba6807"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c89945e78c5f164c03cabb1c5cd459a86ef963a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c89945e78c5f164c03cabb1c5cd459a86ef963a", "html_url": "https://github.com/rust-lang/rust/commit/3c89945e78c5f164c03cabb1c5cd459a86ef963a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c89945e78c5f164c03cabb1c5cd459a86ef963a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7836e44d3fb2bb46d21ca5077142341f983a838", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7836e44d3fb2bb46d21ca5077142341f983a838", "html_url": "https://github.com/rust-lang/rust/commit/b7836e44d3fb2bb46d21ca5077142341f983a838"}, {"sha": "c7010eda1ba4e619952be9fe87487c19ec924eaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7010eda1ba4e619952be9fe87487c19ec924eaa", "html_url": "https://github.com/rust-lang/rust/commit/c7010eda1ba4e619952be9fe87487c19ec924eaa"}], "stats": {"total": 92, "additions": 66, "deletions": 26}, "files": [{"sha": "4de022b6ed6076a522b866fd383ee71fa3c8ee28", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3c89945e78c5f164c03cabb1c5cd459a86ef963a/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c89945e78c5f164c03cabb1c5cd459a86ef963a/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=3c89945e78c5f164c03cabb1c5cd459a86ef963a", "patch": "@@ -10,7 +10,6 @@ mod rustc_wrapper;\n use std::{env, fs, path::Path, process};\n \n use lsp_server::Connection;\n-use project_model::ProjectManifest;\n use rust_analyzer::{cli::flags, config::Config, from_json, Result};\n use vfs::AbsPathBuf;\n \n@@ -168,7 +167,18 @@ fn run_server() -> Result<()> {\n         }\n     };\n \n-    let mut config = Config::new(root_path, initialize_params.capabilities);\n+    let workspace_roots = initialize_params\n+        .workspace_folders\n+        .map(|workspaces| {\n+            workspaces\n+                .into_iter()\n+                .filter_map(|it| it.uri.to_file_path().ok())\n+                .filter_map(|it| AbsPathBuf::try_from(it).ok())\n+                .collect::<Vec<_>>()\n+        })\n+        .filter(|workspaces| !workspaces.is_empty())\n+        .unwrap_or_else(|| vec![root_path.clone()]);\n+    let mut config = Config::new(root_path, initialize_params.capabilities, workspace_roots);\n     if let Some(json) = initialize_params.initialization_options {\n         if let Err(e) = config.update(json) {\n             use lsp_types::{\n@@ -202,25 +212,8 @@ fn run_server() -> Result<()> {\n         tracing::info!(\"Client '{}' {}\", client_info.name, client_info.version.unwrap_or_default());\n     }\n \n-    if config.linked_projects().is_empty() && config.detached_files().is_empty() {\n-        let workspace_roots = initialize_params\n-            .workspace_folders\n-            .map(|workspaces| {\n-                workspaces\n-                    .into_iter()\n-                    .filter_map(|it| it.uri.to_file_path().ok())\n-                    .filter_map(|it| AbsPathBuf::try_from(it).ok())\n-                    .collect::<Vec<_>>()\n-            })\n-            .filter(|workspaces| !workspaces.is_empty())\n-            .unwrap_or_else(|| vec![config.root_path().clone()]);\n-\n-        let discovered = ProjectManifest::discover_all(&workspace_roots);\n-        tracing::info!(\"discovered projects: {:?}\", discovered);\n-        if discovered.is_empty() {\n-            tracing::error!(\"failed to find any projects in {:?}\", workspace_roots);\n-        }\n-        config.discovered_projects = Some(discovered);\n+    if !config.has_linked_projects() && config.detached_files().is_empty() {\n+        config.rediscover_workspaces();\n     }\n \n     rust_analyzer::main_loop(config, connection)?;"}, {"sha": "841861635c6ee5b8e40ca8e87175430a5a8f309a", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c89945e78c5f164c03cabb1c5cd459a86ef963a/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c89945e78c5f164c03cabb1c5cd459a86ef963a/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=3c89945e78c5f164c03cabb1c5cd459a86ef963a", "patch": "@@ -10,7 +10,8 @@ use lsp_types::{\n     SemanticTokensFullOptions, SemanticTokensLegend, SemanticTokensOptions, ServerCapabilities,\n     SignatureHelpOptions, TextDocumentSyncCapability, TextDocumentSyncKind,\n     TextDocumentSyncOptions, TypeDefinitionProviderCapability, WorkDoneProgressOptions,\n-    WorkspaceFileOperationsServerCapabilities, WorkspaceServerCapabilities,\n+    WorkspaceFileOperationsServerCapabilities, WorkspaceFoldersServerCapabilities,\n+    WorkspaceServerCapabilities,\n };\n use serde_json::json;\n \n@@ -80,7 +81,10 @@ pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n         color_provider: None,\n         execute_command_provider: None,\n         workspace: Some(WorkspaceServerCapabilities {\n-            workspace_folders: None,\n+            workspace_folders: Some(WorkspaceFoldersServerCapabilities {\n+                supported: Some(true),\n+                change_notifications: Some(OneOf::Left(true)),\n+            }),\n             file_operations: Some(WorkspaceFileOperationsServerCapabilities {\n                 did_create: None,\n                 will_create: None,"}, {"sha": "67091dc7f2281ccfce5ae11815cf4757108301ab", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c89945e78c5f164c03cabb1c5cd459a86ef963a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c89945e78c5f164c03cabb1c5cd459a86ef963a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=3c89945e78c5f164c03cabb1c5cd459a86ef963a", "patch": "@@ -524,6 +524,7 @@ impl Default for ConfigData {\n #[derive(Debug, Clone)]\n pub struct Config {\n     pub discovered_projects: Option<Vec<ProjectManifest>>,\n+    pub workspace_roots: Vec<AbsPathBuf>,\n     caps: lsp_types::ClientCapabilities,\n     root_path: AbsPathBuf,\n     data: ConfigData,\n@@ -720,17 +721,31 @@ impl fmt::Display for ConfigUpdateError {\n }\n \n impl Config {\n-    pub fn new(root_path: AbsPathBuf, caps: ClientCapabilities) -> Self {\n+    pub fn new(\n+        root_path: AbsPathBuf,\n+        caps: ClientCapabilities,\n+        workspace_roots: Vec<AbsPathBuf>,\n+    ) -> Self {\n         Config {\n             caps,\n             data: ConfigData::default(),\n             detached_files: Vec::new(),\n             discovered_projects: None,\n             root_path,\n             snippets: Default::default(),\n+            workspace_roots,\n         }\n     }\n \n+    pub fn rediscover_workspaces(&mut self) {\n+        let discovered = ProjectManifest::discover_all(&self.workspace_roots);\n+        tracing::info!(\"discovered projects: {:?}\", discovered);\n+        if discovered.is_empty() {\n+            tracing::error!(\"failed to find any projects in {:?}\", &self.workspace_roots);\n+        }\n+        self.discovered_projects = Some(discovered);\n+    }\n+\n     pub fn update(&mut self, mut json: serde_json::Value) -> Result<(), ConfigUpdateError> {\n         tracing::info!(\"updating config from JSON: {:#}\", json);\n         if json.is_null() || json.as_object().map_or(false, |it| it.is_empty()) {\n@@ -827,6 +842,9 @@ macro_rules! try_or_def {\n }\n \n impl Config {\n+    pub fn has_linked_projects(&self) -> bool {\n+        !self.data.linkedProjects.is_empty()\n+    }\n     pub fn linked_projects(&self) -> Vec<LinkedProject> {\n         match self.data.linkedProjects.as_slice() {\n             [] => match self.discovered_projects.as_ref() {"}, {"sha": "55b89019b47a8f09d09246725ef661d03b0b8c6c", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c89945e78c5f164c03cabb1c5cd459a86ef963a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c89945e78c5f164c03cabb1c5cd459a86ef963a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=3c89945e78c5f164c03cabb1c5cd459a86ef963a", "patch": "@@ -534,7 +534,7 @@ mod tests {\n         let (sender, _) = crossbeam_channel::unbounded();\n         let state = GlobalState::new(\n             sender,\n-            Config::new(workspace_root.to_path_buf(), ClientCapabilities::default()),\n+            Config::new(workspace_root.to_path_buf(), ClientCapabilities::default(), Vec::new()),\n         );\n         let snap = state.snapshot();\n         let mut actual = map_rust_diagnostic_to_lsp(&config, &diagnostic, workspace_root, &snap);"}, {"sha": "346a74e270f99deeac63e031ea2d1b59ff0535e5", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3c89945e78c5f164c03cabb1c5cd459a86ef963a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c89945e78c5f164c03cabb1c5cd459a86ef963a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=3c89945e78c5f164c03cabb1c5cd459a86ef963a", "patch": "@@ -14,7 +14,7 @@ use ide_db::base_db::{SourceDatabaseExt, VfsPath};\n use itertools::Itertools;\n use lsp_server::{Connection, Notification, Request};\n use lsp_types::notification::Notification as _;\n-use vfs::{ChangeKind, FileId};\n+use vfs::{AbsPathBuf, ChangeKind, FileId};\n \n use crate::{\n     config::Config,\n@@ -933,6 +933,30 @@ impl GlobalState {\n \n                 Ok(())\n             })?\n+            .on::<lsp_types::notification::DidChangeWorkspaceFolders>(|this, params| {\n+                let config = Arc::make_mut(&mut this.config);\n+\n+                for workspace in params.event.removed {\n+                    let Ok(path) = workspace.uri.to_file_path() else { continue };\n+                    let Ok(path) = AbsPathBuf::try_from(path) else { continue };\n+                    let Some(position) = config.workspace_roots.iter().position(|it| it == &path) else { continue };\n+                    config.workspace_roots.remove(position);\n+                }\n+\n+                let added = params\n+                    .event\n+                    .added\n+                    .into_iter()\n+                    .filter_map(|it| it.uri.to_file_path().ok())\n+                    .filter_map(|it| AbsPathBuf::try_from(it).ok());\n+                config.workspace_roots.extend(added);\n+                    if !config.has_linked_projects() && config.detached_files().is_empty() {\n+                        config.rediscover_workspaces();\n+                        this.fetch_workspaces_queue.request_op(\"client workspaces changed\".to_string())\n+                    }\n+\n+                Ok(())\n+            })?\n             .on::<lsp_types::notification::DidChangeWatchedFiles>(|this, params| {\n                 for change in params.changes {\n                     if let Ok(path) = from_proto::abs_path(&change.uri) {"}, {"sha": "b7275df0f4019e67bafe70a4b4cd70d262206860", "filename": "crates/rust-analyzer/tests/slow-tests/support.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c89945e78c5f164c03cabb1c5cd459a86ef963a/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c89945e78c5f164c03cabb1c5cd459a86ef963a/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs?ref=3c89945e78c5f164c03cabb1c5cd459a86ef963a", "patch": "@@ -137,6 +137,7 @@ impl<'a> Project<'a> {\n                 })),\n                 ..Default::default()\n             },\n+            Vec::new(),\n         );\n         config.discovered_projects = Some(discovered_projects);\n         config.update(self.config).expect(\"invalid config\");"}]}