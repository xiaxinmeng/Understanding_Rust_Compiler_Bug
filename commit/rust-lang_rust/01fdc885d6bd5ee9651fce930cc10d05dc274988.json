{"sha": "01fdc885d6bd5ee9651fce930cc10d05dc274988", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZmRjODg1ZDZiZDVlZTk2NTFmY2U5MzBjYzEwZDA1ZGMyNzQ5ODg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-22T10:18:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-22T10:18:39Z"}, "message": "Rollup merge of #71414 - phansch:more-diagnostic-items, r=Manishearth\n\nMore diagnostic items for Clippy usage\n\nThis adds a couple of more diagnostic items to be used in Clippy.\nI chose these particular ones because they were the types which we seem\nto check for the most in Clippy. I'm not sure if the `cfg_attr(not(test))`\nis needed, but it was also used for `Vec` and a few other types.\n\ncc https://github.com/rust-lang/rust-clippy/issues/5393\n\nr? @Manishearth", "tree": {"sha": "722ec4987cf5b54446a89b0a276f0edf046fb51d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/722ec4987cf5b54446a89b0a276f0edf046fb51d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01fdc885d6bd5ee9651fce930cc10d05dc274988", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeoBoACRBK7hj4Ov3rIwAAdHIIAJYePTBMmm6chRxXoCcNTWcy\nCYLsImwgLxIoV6hPIhbhjCZE5KMj23EBo7W8cB5oc0F6XAvJus3JmVlkhAVOg/RA\nYn1tci/h21PggzU8yLLNbyEM/RnaCOnt585pCU1XMBdSquojjVntmj7mqOAxZNZq\nDgszD0FrWZ+xf7fMoI9cj2GyxxRa90QuJFfgGeba83OH39NkwQSibtdq49OiLrNu\nRLGVW8Y392Nlk8GoKJ1OOgslM39KnVXaxWFyzX0z3SIqPwcp38ZBFJVLsUvKy6Ps\nZYVgqoECW9BKZ8Pge6Gq47ij0Hq8WmE7/VBeBdWfvLDzgTTicK/f77dL4iWsTO8=\n=+7ZI\n-----END PGP SIGNATURE-----\n", "payload": "tree 722ec4987cf5b54446a89b0a276f0edf046fb51d\nparent 91ef66374bf403e1f0c3fe9c0f9db9941898c045\nparent 23b9f46fff4453fb90611c2fb554e004f1cec096\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587550719 +0200\ncommitter GitHub <noreply@github.com> 1587550719 +0200\n\nRollup merge of #71414 - phansch:more-diagnostic-items, r=Manishearth\n\nMore diagnostic items for Clippy usage\n\nThis adds a couple of more diagnostic items to be used in Clippy.\nI chose these particular ones because they were the types which we seem\nto check for the most in Clippy. I'm not sure if the `cfg_attr(not(test))`\nis needed, but it was also used for `Vec` and a few other types.\n\ncc https://github.com/rust-lang/rust-clippy/issues/5393\n\nr? @Manishearth\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01fdc885d6bd5ee9651fce930cc10d05dc274988", "html_url": "https://github.com/rust-lang/rust/commit/01fdc885d6bd5ee9651fce930cc10d05dc274988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01fdc885d6bd5ee9651fce930cc10d05dc274988/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91ef66374bf403e1f0c3fe9c0f9db9941898c045", "url": "https://api.github.com/repos/rust-lang/rust/commits/91ef66374bf403e1f0c3fe9c0f9db9941898c045", "html_url": "https://github.com/rust-lang/rust/commit/91ef66374bf403e1f0c3fe9c0f9db9941898c045"}, {"sha": "23b9f46fff4453fb90611c2fb554e004f1cec096", "url": "https://api.github.com/repos/rust-lang/rust/commits/23b9f46fff4453fb90611c2fb554e004f1cec096", "html_url": "https://github.com/rust-lang/rust/commit/23b9f46fff4453fb90611c2fb554e004f1cec096"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "a3b61f1f4a5892fa436fcde9d34d96a4b611a579", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01fdc885d6bd5ee9651fce930cc10d05dc274988/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fdc885d6bd5ee9651fce930cc10d05dc274988/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=01fdc885d6bd5ee9651fce930cc10d05dc274988", "patch": "@@ -50,6 +50,7 @@ const MAXIMUM_ZST_CAPACITY: usize = 1 << (64 - 1); // Largest possible power of\n /// [`pop_front`]: #method.pop_front\n /// [`extend`]: #method.extend\n /// [`append`]: #method.append\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"vecdeque_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct VecDeque<T> {\n     // tail and head are pointers into the buffer. Tail always points"}, {"sha": "f3fe1adebb141d4dd3c1b91b2c42e304825e3112", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01fdc885d6bd5ee9651fce930cc10d05dc274988/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fdc885d6bd5ee9651fce930cc10d05dc274988/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=01fdc885d6bd5ee9651fce930cc10d05dc274988", "patch": "@@ -278,6 +278,7 @@ use crate::vec::Vec;\n /// [`Deref`]: ../../std/ops/trait.Deref.html\n /// [`as_str()`]: struct.String.html#method.as_str\n #[derive(PartialOrd, Eq, Ord)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"string_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct String {\n     vec: Vec<u8>,"}, {"sha": "e6da7426eb4afc08a88d7a2d12572ef17986a367", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01fdc885d6bd5ee9651fce930cc10d05dc274988/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fdc885d6bd5ee9651fce930cc10d05dc274988/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=01fdc885d6bd5ee9651fce930cc10d05dc274988", "patch": "@@ -198,6 +198,7 @@ use crate::sys;\n /// ```\n \n #[derive(Clone)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"hashmap_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct HashMap<K, V, S = RandomState> {\n     base: base::HashMap<K, V, S>,"}, {"sha": "c1a57f2ce6129b27b74426136ee7afeee210ca4b", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01fdc885d6bd5ee9651fce930cc10d05dc274988/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fdc885d6bd5ee9651fce930cc10d05dc274988/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=01fdc885d6bd5ee9651fce930cc10d05dc274988", "patch": "@@ -105,6 +105,7 @@ use super::map::{self, HashMap, Keys, RandomState};\n /// [`PartialEq`]: ../../std/cmp/trait.PartialEq.html\n /// [`RefCell`]: ../../std/cell/struct.RefCell.html\n #[derive(Clone)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"hashset_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct HashSet<T, S = RandomState> {\n     map: HashMap<T, (), S>,"}, {"sha": "797b22fdd1279ca931234284192bac2e2e4ddc02", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01fdc885d6bd5ee9651fce930cc10d05dc274988/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fdc885d6bd5ee9651fce930cc10d05dc274988/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=01fdc885d6bd5ee9651fce930cc10d05dc274988", "patch": "@@ -108,6 +108,7 @@ use crate::sys_common::poison::{self, LockResult, TryLockError, TryLockResult};\n /// *guard += 1;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"mutex_type\")]\n pub struct Mutex<T: ?Sized> {\n     // Note that this mutex is in a *box*, not inlined into the struct itself.\n     // Once a native mutex has been used once, its address can never change (it"}]}