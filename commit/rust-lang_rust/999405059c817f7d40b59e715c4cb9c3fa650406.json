{"sha": "999405059c817f7d40b59e715c4cb9c3fa650406", "node_id": "C_kwDOAAsO6NoAKDk5OTQwNTA1OWM4MTdmN2Q0MGI1OWU3MTVjNGNiOWMzZmE2NTA0MDY", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-03-03T01:35:10Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-03-03T02:03:29Z"}, "message": "Match unmatched backticks in library/", "tree": {"sha": "eb4a62e13d10974ede99796e4a3297269bff2fe9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb4a62e13d10974ede99796e4a3297269bff2fe9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/999405059c817f7d40b59e715c4cb9c3fa650406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/999405059c817f7d40b59e715c4cb9c3fa650406", "html_url": "https://github.com/rust-lang/rust/commit/999405059c817f7d40b59e715c4cb9c3fa650406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/999405059c817f7d40b59e715c4cb9c3fa650406/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13471d3b2046cce78181dde6cfc146c09f55e29e", "url": "https://api.github.com/repos/rust-lang/rust/commits/13471d3b2046cce78181dde6cfc146c09f55e29e", "html_url": "https://github.com/rust-lang/rust/commit/13471d3b2046cce78181dde6cfc146c09f55e29e"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "932a537c598f2d4b6787e56126061e2b801368d5", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -2145,7 +2145,7 @@ impl<T, I: iter::TrustedLen<Item = T>> ToRcSlice<T> for I {\n                 Rc::from_iter_exact(self, low)\n             }\n         } else {\n-            // TrustedLen contract guarantees that `upper_bound == `None` implies an iterator\n+            // TrustedLen contract guarantees that `upper_bound == None` implies an iterator\n             // length exceeding `usize::MAX`.\n             // The default implementation would collect into a vec which would panic.\n             // Thus we panic here immediately without invoking `Vec` code."}, {"sha": "fdd341a06ef46ab22c325357a35eea59e24cdefc", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -2895,7 +2895,7 @@ impl<T, I: iter::TrustedLen<Item = T>> ToArcSlice<T> for I {\n                 Arc::from_iter_exact(self, low)\n             }\n         } else {\n-            // TrustedLen contract guarantees that `upper_bound == `None` implies an iterator\n+            // TrustedLen contract guarantees that `upper_bound == None` implies an iterator\n             // length exceeding `usize::MAX`.\n             // The default implementation would collect into a vec which would panic.\n             // Thus we panic here immediately without invoking `Vec` code."}, {"sha": "c27646b8f33dfb2eeeeb8b615cc8e080719fe867", "filename": "library/core/src/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -56,7 +56,7 @@\n //!     let value_any = value as &dyn Any;\n //!\n //!     // Try to convert our value to a `String`. If successful, we want to\n-//!     // output the String`'s length as well as its value. If not, it's a\n+//!     // output the `String`'s length as well as its value. If not, it's a\n //!     // different type: just print it out unadorned.\n //!     match value_any.downcast_ref::<String>() {\n //!         Some(as_string) => {"}, {"sha": "897d03595d748dcaf5bac03607956dd044899d20", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -632,7 +632,7 @@ pub struct RefCell<T: ?Sized> {\n     // Stores the location of the earliest currently active borrow.\n     // This gets updated whenever we go from having zero borrows\n     // to having a single borrow. When a borrow occurs, this gets included\n-    // in the generated `BorrowError/`BorrowMutError`\n+    // in the generated `BorrowError`/`BorrowMutError`\n     #[cfg(feature = \"debug_refcell\")]\n     borrowed_at: Cell<Option<&'static crate::panic::Location<'static>>>,\n     value: UnsafeCell<T>,"}, {"sha": "72db1d87ca3c0cf4e046f294ead1387678d4d533", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -42,7 +42,7 @@\n //! another function. The `dialect` and `phase` parameters indicate which [version of MIR][dialect\n //! docs] you are inserting here. Generally you'll want to use `#![custom_mir(dialect = \"built\")]`\n //! if you want your MIR to be modified by the full MIR pipeline, or `#![custom_mir(dialect =\n-//! \"runtime\", phase = \"optimized\")] if you don't.\n+//! \"runtime\", phase = \"optimized\")]` if you don't.\n //!\n //! [dialect docs]:\n //!     https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.MirPhase.html"}, {"sha": "efe6d4183e3ea808857cb83d1fe4f00a9db2fac5", "filename": "library/core/src/ptr/alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -41,7 +41,7 @@ impl Alignment {\n     /// Returns the alignment for a type.\n     ///\n     /// This provides the same numerical value as [`mem::align_of`],\n-    /// but in an `Alignment` instead of a `usize.\n+    /// but in an `Alignment` instead of a `usize`.\n     #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n     #[inline]\n     pub const fn of<T>() -> Self {"}, {"sha": "1cd86b445b0a478552cb4bbefe9b1561f95a7e81", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -2955,7 +2955,7 @@ impl<T> [T] {\n         // This operation is still `O(n)`.\n         //\n         // Example: We start in this state, where `r` represents \"next\n-        // read\" and `w` represents \"next_write`.\n+        // read\" and `w` represents \"next_write\".\n         //\n         //           r\n         //     +---+---+---+---+---+---+"}, {"sha": "2333f60a8889b8051f47c12aebfbf32b94277201", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -317,7 +317,7 @@ where\n     // 1. `block` - Number of elements in the block.\n     // 2. `start` - Start pointer into the `offsets` array.\n     // 3. `end` - End pointer into the `offsets` array.\n-    // 4. `offsets - Indices of out-of-order elements within the block.\n+    // 4. `offsets` - Indices of out-of-order elements within the block.\n \n     // The current block on the left side (from `l` to `l.add(block_l)`).\n     let mut l = v.as_mut_ptr();\n@@ -327,7 +327,7 @@ where\n     let mut offsets_l = [MaybeUninit::<u8>::uninit(); BLOCK];\n \n     // The current block on the right side (from `r.sub(block_r)` to `r`).\n-    // SAFETY: The documentation for .add() specifically mention that `vec.as_ptr().add(vec.len())` is always safe`\n+    // SAFETY: The documentation for .add() specifically mention that `vec.as_ptr().add(vec.len())` is always safe\n     let mut r = unsafe { l.add(v.len()) };\n     let mut block_r = BLOCK;\n     let mut start_r = ptr::null_mut();"}, {"sha": "ca3463aa7f782bcfa3b34b142885cc28fa4df6a2", "filename": "library/core/tests/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -24,7 +24,7 @@ mod zip;\n \n use core::cell::Cell;\n \n-/// An iterator that panics whenever `next` or next_back` is called\n+/// An iterator that panics whenever `next` or `next_back` is called\n /// after `None` has already been returned. This does not violate\n /// `Iterator`'s contract. Used to test that iterator adapters don't\n /// poll their inner iterators after exhausting them."}, {"sha": "d52d1ac4d3a0efe78db6ef1f976549a2baffd5f1", "filename": "library/portable-simd/crates/core_simd/src/vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -28,7 +28,7 @@ use crate::simd::{\n /// let zm_add = a0.zip(a1).map(|(lhs, rhs)| lhs + rhs);\n /// let zm_mul = a0.zip(a1).map(|(lhs, rhs)| lhs * rhs);\n ///\n-/// // `Simd<T, N>` implements `From<[T; N]>\n+/// // `Simd<T, N>` implements `From<[T; N]>`\n /// let (v0, v1) = (Simd::from(a0), Simd::from(a1));\n /// // Which means arrays implement `Into<Simd<T, N>>`.\n /// assert_eq!(v0 + v1, zm_add.into());"}, {"sha": "1952e19e60720f3fbc42f61374fa6a0ef45910c9", "filename": "library/std/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -1416,7 +1416,7 @@ impl From<fs::File> for Stdio {\n     /// use std::fs::File;\n     /// use std::process::Command;\n     ///\n-    /// // With the `foo.txt` file containing `Hello, world!\"\n+    /// // With the `foo.txt` file containing \"Hello, world!\"\n     /// let file = File::open(\"foo.txt\").unwrap();\n     ///\n     /// let reverse = Command::new(\"rev\")"}, {"sha": "ae0f718535b2694e83a2c03ebf911da00bf65478", "filename": "library/std/src/sys/itron/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -247,7 +247,7 @@ impl Thread {\n                 // [FINISHED \u2192 JOINED]\n                 // To synchronize with the child task's memory accesses to\n                 // `inner` up to the point of the assignment of `FINISHED`,\n-                // `Ordering::Acquire` must be used for the above `swap` call`.\n+                // `Ordering::Acquire` must be used for the above `swap` call.\n             }\n             _ => unsafe { hint::unreachable_unchecked() },\n         }"}, {"sha": "68c9520cc9eb4fd40a989063c12a550a1fa38140", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -329,7 +329,7 @@ pub fn cvt_nz(error: libc::c_int) -> crate::io::Result<()> {\n // do so.  In 1003.1-2004 this was fixed.\n //\n // glibc's implementation did the flush, unsafely, before glibc commit\n-// 91e7cf982d01 `abort: Do not flush stdio streams [BZ #15436]' by Florian\n+// 91e7cf982d01 `abort: Do not flush stdio streams [BZ #15436]` by Florian\n // Weimer.  According to glibc's NEWS:\n //\n //    The abort function terminates the process immediately, without flushing"}, {"sha": "fc236b8027b67c54a58ee70cf514ef89f0b69246", "filename": "library/std/src/sys_common/net/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fstd%2Fsrc%2Fsys_common%2Fnet%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fstd%2Fsrc%2Fsys_common%2Fnet%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet%2Ftests.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -6,7 +6,7 @@ fn no_lookup_host_duplicates() {\n     let mut addrs = HashMap::new();\n     let lh = match LookupHost::try_from((\"localhost\", 0)) {\n         Ok(lh) => lh,\n-        Err(e) => panic!(\"couldn't resolve `localhost': {e}\"),\n+        Err(e) => panic!(\"couldn't resolve `localhost`: {e}\"),\n     };\n     for sa in lh {\n         *addrs.entry(sa).or_insert(0) += 1;"}, {"sha": "bc588bdbb3ce623e47dfa409ba505d53c1c412fa", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -594,7 +594,7 @@ impl Wtf8 {\n     }\n \n     /// Returns the code point at `position` if it is in the ASCII range,\n-    /// or `b'\\xFF' otherwise.\n+    /// or `b'\\xFF'` otherwise.\n     ///\n     /// # Panics\n     ///"}, {"sha": "88d8e5fe97ad7168f92480340a21f189289f152f", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -204,7 +204,7 @@ fn make_owned_test(test: &&TestDescAndFn) -> TestDescAndFn {\n }\n \n /// Invoked when unit tests terminate. Returns `Result::Err` if the test is\n-/// considered a failure. By default, invokes `report() and checks for a `0`\n+/// considered a failure. By default, invokes `report()` and checks for a `0`\n /// result.\n pub fn assert_test_result<T: Termination>(result: T) -> Result<(), String> {\n     let code = result.report().to_i32();"}, {"sha": "eeeed3afcd30ca21eb5c84db001ef0103ab80dfd", "filename": "library/unwind/src/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Funwind%2Fsrc%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999405059c817f7d40b59e715c4cb9c3fa650406/library%2Funwind%2Fsrc%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flibunwind.rs?ref=999405059c817f7d40b59e715c4cb9c3fa650406", "patch": "@@ -89,7 +89,7 @@ pub type _Unwind_Exception_Cleanup_Fn =\n \n // FIXME: The `#[link]` attributes on `extern \"C\"` block marks those symbols declared in\n // the block are reexported in dylib build of std. This is needed when build rustc with\n-// feature `llvm-libunwind', as no other cdylib will provided those _Unwind_* symbols.\n+// feature `llvm-libunwind`, as no other cdylib will provided those _Unwind_* symbols.\n // However the `link` attribute is duplicated multiple times and does not just export symbol,\n // a better way to manually export symbol would be another attribute like `#[export]`.\n // See the logic in function rustc_codegen_ssa::src::back::exported_symbols, module"}]}