{"sha": "b83c7eedccea4c9cb35b1d1cc58231f07a5e3ba2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4M2M3ZWVkY2NlYTRjOWNiMzViMWQxY2M1ODIzMWYwN2E1ZTNiYTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-23T14:31:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-23T14:31:19Z"}, "message": "Tweak assits API to fit mutable syntax trees\n\nchangelog: skip", "tree": {"sha": "b6a237b53f65aaf96fc65707580ef41ab9a73d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6a237b53f65aaf96fc65707580ef41ab9a73d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b83c7eedccea4c9cb35b1d1cc58231f07a5e3ba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b83c7eedccea4c9cb35b1d1cc58231f07a5e3ba2", "html_url": "https://github.com/rust-lang/rust/commit/b83c7eedccea4c9cb35b1d1cc58231f07a5e3ba2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b83c7eedccea4c9cb35b1d1cc58231f07a5e3ba2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "258afb8fb8331e43a75e4f19df255d85d2430be7", "url": "https://api.github.com/repos/rust-lang/rust/commits/258afb8fb8331e43a75e4f19df255d85d2430be7", "html_url": "https://github.com/rust-lang/rust/commit/258afb8fb8331e43a75e4f19df255d85d2430be7"}], "stats": {"total": 76, "additions": 53, "deletions": 23}, "files": [{"sha": "1482d37f842c6b3bfd123d9c81331b859a6711f5", "filename": "crates/ide_assists/src/assist_context.rs", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b83c7eedccea4c9cb35b1d1cc58231f07a5e3ba2/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83c7eedccea4c9cb35b1d1cc58231f07a5e3ba2/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fassist_context.rs?ref=b83c7eedccea4c9cb35b1d1cc58231f07a5e3ba2", "patch": "@@ -14,8 +14,8 @@ use ide_db::{\n };\n use syntax::{\n     algo::{self, find_node_at_offset, SyntaxRewriter},\n-    AstNode, AstToken, SourceFile, SyntaxElement, SyntaxKind, SyntaxToken, TextRange, TextSize,\n-    TokenAtOffset,\n+    AstNode, AstToken, SourceFile, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxNodePtr,\n+    SyntaxToken, TextRange, TextSize, TokenAtOffset,\n };\n use text_edit::{TextEdit, TextEditBuilder};\n \n@@ -180,11 +180,19 @@ pub(crate) struct AssistBuilder {\n     edit: TextEditBuilder,\n     file_id: FileId,\n     source_change: SourceChange,\n+\n+    /// Maps the original, immutable `SyntaxNode` to a `clone_for_update` twin.\n+    mutated_tree: Option<(SyntaxNode, SyntaxNode)>,\n }\n \n impl AssistBuilder {\n     pub(crate) fn new(file_id: FileId) -> AssistBuilder {\n-        AssistBuilder { edit: TextEdit::builder(), file_id, source_change: SourceChange::default() }\n+        AssistBuilder {\n+            edit: TextEdit::builder(),\n+            file_id,\n+            source_change: SourceChange::default(),\n+            mutated_tree: None,\n+        }\n     }\n \n     pub(crate) fn edit_file(&mut self, file_id: FileId) {\n@@ -193,12 +201,42 @@ impl AssistBuilder {\n     }\n \n     fn commit(&mut self) {\n+        if let Some((old, new)) = self.mutated_tree.take() {\n+            algo::diff(&old, &new).into_text_edit(&mut self.edit)\n+        }\n+\n         let edit = mem::take(&mut self.edit).finish();\n         if !edit.is_empty() {\n             self.source_change.insert_source_edit(self.file_id, edit);\n         }\n     }\n \n+    pub(crate) fn make_ast_mut<N: AstNode>(&mut self, node: N) -> N {\n+        N::cast(self.make_mut(node.syntax().clone())).unwrap()\n+    }\n+    /// Returns a copy of the `node`, suitable for mutation.\n+    ///\n+    /// Syntax trees in rust-analyzer are typically immutable, and mutating\n+    /// operations panic at runtime. However, it is possible to make a copy of\n+    /// the tree and mutate the copy freely. Mutation is based on interior\n+    /// mutability, and different nodes in the same tree see the same mutations.\n+    ///\n+    /// The typical pattern for an assist is to find specific nodes in the read\n+    /// phase, and then get their mutable couterparts using `make_mut` in the\n+    /// mutable state.\n+    pub(crate) fn make_mut(&mut self, node: SyntaxNode) -> SyntaxNode {\n+        let root = &self\n+            .mutated_tree\n+            .get_or_insert_with(|| {\n+                let immutable = node.ancestors().last().unwrap();\n+                let mutable = immutable.clone_for_update();\n+                (immutable, mutable)\n+            })\n+            .1;\n+        let ptr = SyntaxNodePtr::new(&&node);\n+        ptr.to_node(root)\n+    }\n+\n     /// Remove specified `range` of text.\n     pub(crate) fn delete(&mut self, range: TextRange) {\n         self.edit.delete(range)"}, {"sha": "8e07942180edd7da4b3a42a2f1bb1e6b3dd3970b", "filename": "crates/ide_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b83c7eedccea4c9cb35b1d1cc58231f07a5e3ba2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83c7eedccea4c9cb35b1d1cc58231f07a5e3ba2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=b83c7eedccea4c9cb35b1d1cc58231f07a5e3ba2", "patch": "@@ -21,12 +21,6 @@ use crate::{\n // ```\n pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let tree: ast::UseTree = ctx.find_node_at_offset()?;\n-    let original_parent = tree.syntax().ancestors().last()?;\n-\n-    let tree = tree.clone_for_update();\n-    let new_parent = tree.syntax().ancestors().last()?;\n-\n-    let mut offset = ctx.offset();\n \n     let mut imports = None;\n     let mut uses = None;\n@@ -53,22 +47,20 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n         target,\n         |builder| {\n             if let Some((to_replace, replacement, to_remove)) = imports {\n-                if to_remove.syntax().text_range().end() < offset {\n-                    offset -= to_remove.syntax().text_range().len();\n-                }\n-                ted::replace(to_replace.syntax().clone(), replacement.syntax().clone());\n+                let to_replace = builder.make_ast_mut(to_replace);\n+                let to_remove = builder.make_ast_mut(to_remove);\n+\n+                ted::replace(to_replace.syntax(), replacement.syntax());\n                 to_remove.remove();\n             }\n \n             if let Some((to_replace, replacement, to_remove)) = uses {\n-                if to_remove.syntax().text_range().end() < offset {\n-                    offset -= to_remove.syntax().text_range().len();\n-                }\n-                ted::replace(to_replace.syntax().clone(), replacement.syntax().clone());\n+                let to_replace = builder.make_ast_mut(to_replace);\n+                let to_remove = builder.make_ast_mut(to_remove);\n+\n+                ted::replace(to_replace.syntax(), replacement.syntax());\n                 to_remove.remove()\n             }\n-\n-            builder.replace(original_parent.text_range(), new_parent.to_string())\n         },\n     )\n }"}, {"sha": "011a28d446e753926ab8784a0976ee27c3a8c445", "filename": "crates/ide_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b83c7eedccea4c9cb35b1d1cc58231f07a5e3ba2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83c7eedccea4c9cb35b1d1cc58231f07a5e3ba2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=b83c7eedccea4c9cb35b1d1cc58231f07a5e3ba2", "patch": "@@ -21,22 +21,24 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let type_param_list = ctx.find_node_at_offset::<ast::GenericParamList>()?.clone_for_update();\n+    let type_param_list = ctx.find_node_at_offset::<ast::GenericParamList>()?;\n \n     let mut type_params = type_param_list.type_params();\n     if type_params.all(|p| p.type_bound_list().is_none()) {\n         return None;\n     }\n \n     let parent = type_param_list.syntax().parent()?;\n-    let original_parent_range = parent.text_range();\n \n     let target = type_param_list.syntax().text_range();\n     acc.add(\n         AssistId(\"move_bounds_to_where_clause\", AssistKind::RefactorRewrite),\n         \"Move to where clause\",\n         target,\n         |edit| {\n+            let type_param_list = edit.make_ast_mut(type_param_list);\n+            let parent = edit.make_mut(parent);\n+\n             let where_clause: ast::WhereClause = match_ast! {\n                 match parent {\n                     ast::Fn(it) => it.get_or_create_where_clause(),\n@@ -56,8 +58,6 @@ pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext\n                     tbl.remove()\n                 }\n             }\n-\n-            edit.replace(original_parent_range, parent.to_string())\n         },\n     )\n }"}]}