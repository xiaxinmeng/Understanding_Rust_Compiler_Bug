{"sha": "f903c97959593e4612403989148f6116ab57611f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MDNjOTc5NTk1OTNlNDYxMjQwMzk4OTE0OGY2MTE2YWI1NzYxMWY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-06-11T15:47:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-06-20T20:39:02Z"}, "message": "Merge PatKind::QPath into PatKind::Path in AST", "tree": {"sha": "c6793c56383f0c64258bb896ff56b5b7c0f2f94f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6793c56383f0c64258bb896ff56b5b7c0f2f94f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f903c97959593e4612403989148f6116ab57611f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f903c97959593e4612403989148f6116ab57611f", "html_url": "https://github.com/rust-lang/rust/commit/f903c97959593e4612403989148f6116ab57611f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f903c97959593e4612403989148f6116ab57611f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d06f1dcd7d3b9d9d5e0dc32ea7207a07e3408200", "url": "https://api.github.com/repos/rust-lang/rust/commits/d06f1dcd7d3b9d9d5e0dc32ea7207a07e3408200", "html_url": "https://github.com/rust-lang/rust/commit/d06f1dcd7d3b9d9d5e0dc32ea7207a07e3408200"}], "stats": {"total": 70, "additions": 24, "deletions": 46}, "files": [{"sha": "4473f2ed06ca26a857f1e80e7b2457673dc05cb1", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f903c97959593e4612403989148f6116ab57611f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f903c97959593e4612403989148f6116ab57611f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f903c97959593e4612403989148f6116ab57611f", "patch": "@@ -866,10 +866,10 @@ impl<'a> LoweringContext<'a> {\n                                               pats.iter().map(|x| self.lower_pat(x)).collect(),\n                                               ddpos)\n                 }\n-                PatKind::Path(ref pth) => {\n+                PatKind::Path(None, ref pth) => {\n                     hir::PatKind::Path(self.lower_path(pth))\n                 }\n-                PatKind::QPath(ref qself, ref pth) => {\n+                PatKind::Path(Some(ref qself), ref pth) => {\n                     let qself = hir::QSelf {\n                         ty: self.lower_ty(&qself.ty),\n                         position: qself.position,"}, {"sha": "ba886509c5a3b2e79a9976264f875cbb4d882cf4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f903c97959593e4612403989148f6116ab57611f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f903c97959593e4612403989148f6116ab57611f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f903c97959593e4612403989148f6116ab57611f", "patch": "@@ -2332,8 +2332,8 @@ impl<'a> Resolver<'a> {\n                     }, \"variant or struct\");\n                 }\n \n-                PatKind::Path(ref path) => {\n-                    self.resolve_pattern_path(pat.id, None, path, ValueNS, |def| {\n+                PatKind::Path(ref qself, ref path) => {\n+                    self.resolve_pattern_path(pat.id, qself.as_ref(), path, ValueNS, |def| {\n                         match def {\n                             Def::Struct(..) | Def::Variant(..) |\n                             Def::Const(..) | Def::AssociatedConst(..) | Def::Err => true,\n@@ -2342,15 +2342,6 @@ impl<'a> Resolver<'a> {\n                     }, \"variant, struct or constant\");\n                 }\n \n-                PatKind::QPath(ref qself, ref path) => {\n-                    self.resolve_pattern_path(pat.id, Some(qself), path, ValueNS, |def| {\n-                        match def {\n-                            Def::AssociatedConst(..) | Def::Err => true,\n-                            _ => false,\n-                        }\n-                    }, \"associated constant\");\n-                }\n-\n                 PatKind::Struct(ref path, _, _) => {\n                     self.resolve_pattern_path(pat.id, None, path, TypeNS, |def| {\n                         match def {"}, {"sha": "c45aecd07e11e3e57109cb0492520a479002c63d", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f903c97959593e4612403989148f6116ab57611f/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f903c97959593e4612403989148f6116ab57611f/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=f903c97959593e4612403989148f6116ab57611f", "patch": "@@ -699,8 +699,7 @@ impl<'v> Visitor<'v> for PathCollector {\n                                            ast::Mutability::Mutable, recorder::TypeRef));\n             }\n             PatKind::TupleStruct(ref path, _, _) |\n-            PatKind::Path(ref path) |\n-            PatKind::QPath(_, ref path) => {\n+            PatKind::Path(_, ref path) => {\n                 self.collected_paths.push((p.id, path.clone(),\n                                            ast::Mutability::Mutable, recorder::VarRef));\n             }"}, {"sha": "28af65a87a3d239456db04ce3a3be6fd4e60f528", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f903c97959593e4612403989148f6116ab57611f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f903c97959593e4612403989148f6116ab57611f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f903c97959593e4612403989148f6116ab57611f", "patch": "@@ -579,7 +579,6 @@ impl Pat {\n             PatKind::Range(_, _) |\n             PatKind::Ident(_, _, _) |\n             PatKind::Path(..) |\n-            PatKind::QPath(_, _) |\n             PatKind::Mac(_) => {\n                 true\n             }\n@@ -627,15 +626,11 @@ pub enum PatKind {\n     /// 0 <= position <= subpats.len()\n     TupleStruct(Path, Vec<P<Pat>>, Option<usize>),\n \n-    /// A path pattern.\n-    /// Such pattern can be resolved to a unit struct/variant or a constant.\n-    Path(Path),\n-\n-    /// An associated const named using the qualified path `<T>::CONST` or\n-    /// `<T as Trait>::CONST`. Associated consts from inherent impls can be\n-    /// referred to as simply `T::CONST`, in which case they will end up as\n-    /// PatKind::Path, and the resolver will have to sort that out.\n-    QPath(QSelf, Path),\n+    /// A possibly qualified path pattern.\n+    /// Unquailfied path patterns `A::B::C` can legally refer to variants, structs, constants\n+    /// or associated constants. Quailfied path patterns `<A>::B::C`/`<A as Trait>::B::C` can\n+    /// only legally refer to associated constants.\n+    Path(Option<QSelf>, Path),\n \n     /// A tuple pattern `(a, b)`.\n     /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position."}, {"sha": "1d27cf5b0a19e07ca5a0be26e22597e221b0fe3d", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f903c97959593e4612403989148f6116ab57611f/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f903c97959593e4612403989148f6116ab57611f/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=f903c97959593e4612403989148f6116ab57611f", "patch": "@@ -830,7 +830,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n     fn pat_enum(&self, span: Span, path: ast::Path, subpats: Vec<P<ast::Pat>>) -> P<ast::Pat> {\n         let pat = if subpats.is_empty() {\n-            PatKind::Path(path)\n+            PatKind::Path(None, path)\n         } else {\n             PatKind::TupleStruct(path, subpats, None)\n         };"}, {"sha": "5979db15d8809d249d126c0917a12cf13209b768", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f903c97959593e4612403989148f6116ab57611f/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f903c97959593e4612403989148f6116ab57611f/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=f903c97959593e4612403989148f6116ab57611f", "patch": "@@ -1088,12 +1088,11 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n                 PatKind::TupleStruct(folder.fold_path(pth),\n                         pats.move_map(|x| folder.fold_pat(x)), ddpos)\n             }\n-            PatKind::Path(pth) => {\n-                PatKind::Path(folder.fold_path(pth))\n-            }\n-            PatKind::QPath(qself, pth) => {\n-                let qself = QSelf {ty: folder.fold_ty(qself.ty), .. qself};\n-                PatKind::QPath(qself, folder.fold_path(pth))\n+            PatKind::Path(opt_qself, pth) => {\n+                let opt_qself = opt_qself.map(|qself| {\n+                    QSelf { ty: folder.fold_ty(qself.ty), position: qself.position }\n+                });\n+                PatKind::Path(opt_qself, folder.fold_path(pth))\n             }\n             PatKind::Struct(pth, fields, etc) => {\n                 let pth = folder.fold_path(pth);"}, {"sha": "6704543e8808b804007dd0b7d6775b88fae0224f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f903c97959593e4612403989148f6116ab57611f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f903c97959593e4612403989148f6116ab57611f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f903c97959593e4612403989148f6116ab57611f", "patch": "@@ -3715,12 +3715,7 @@ impl<'a> Parser<'a> {\n                         pat = PatKind::TupleStruct(path, fields, ddpos)\n                       }\n                       _ => {\n-                        pat = match qself {\n-                            // Parse qualified path\n-                            Some(qself) => PatKind::QPath(qself, path),\n-                            // Parse nullary enum\n-                            None => PatKind::Path(path)\n-                        };\n+                        pat = PatKind::Path(qself, path);\n                       }\n                     }\n                 }"}, {"sha": "eece942e471cf8bac661000626d20c006e3e7998", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f903c97959593e4612403989148f6116ab57611f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f903c97959593e4612403989148f6116ab57611f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f903c97959593e4612403989148f6116ab57611f", "patch": "@@ -2483,10 +2483,10 @@ impl<'a> State<'a> {\n                 }\n                 try!(self.pclose());\n             }\n-            PatKind::Path(ref path) => {\n+            PatKind::Path(None, ref path) => {\n                 try!(self.print_path(path, true, 0));\n             }\n-            PatKind::QPath(ref qself, ref path) => {\n+            PatKind::Path(Some(ref qself), ref path) => {\n                 try!(self.print_qpath(path, qself, false));\n             }\n             PatKind::Struct(ref path, ref fields, etc) => {"}, {"sha": "f58304caaabab0da2470a61e41891f25d98165ed", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f903c97959593e4612403989148f6116ab57611f/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f903c97959593e4612403989148f6116ab57611f/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=f903c97959593e4612403989148f6116ab57611f", "patch": "@@ -409,11 +409,10 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n             visitor.visit_path(path, pattern.id);\n             walk_list!(visitor, visit_pat, children);\n         }\n-        PatKind::Path(ref path) => {\n-            visitor.visit_path(path, pattern.id);\n-        }\n-        PatKind::QPath(ref qself, ref path) => {\n-            visitor.visit_ty(&qself.ty);\n+        PatKind::Path(ref opt_qself, ref path) => {\n+            if let Some(ref qself) = *opt_qself {\n+                visitor.visit_ty(&qself.ty);\n+            }\n             visitor.visit_path(path, pattern.id)\n         }\n         PatKind::Struct(ref path, ref fields, _) => {"}, {"sha": "3ae792f9c0f3783985ccbcc0e1d44312ae4d1753", "filename": "src/test/compile-fail/method-resolvable-path-in-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f903c97959593e4612403989148f6116ab57611f/src%2Ftest%2Fcompile-fail%2Fmethod-resolvable-path-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f903c97959593e4612403989148f6116ab57611f/src%2Ftest%2Fcompile-fail%2Fmethod-resolvable-path-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-resolvable-path-in-pattern.rs?ref=f903c97959593e4612403989148f6116ab57611f", "patch": "@@ -19,6 +19,6 @@ impl MyTrait for Foo {}\n fn main() {\n     match 0u32 {\n         <Foo as MyTrait>::trait_bar => {}\n-        //~^ ERROR expected associated constant, found method `trait_bar`\n+        //~^ ERROR expected variant, struct or constant, found method `trait_bar`\n     }\n }"}]}