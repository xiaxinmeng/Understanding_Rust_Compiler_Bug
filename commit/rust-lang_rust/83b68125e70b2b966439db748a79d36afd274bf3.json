{"sha": "83b68125e70b2b966439db748a79d36afd274bf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYjY4MTI1ZTcwYjJiOTY2NDM5ZGI3NDhhNzlkMzZhZmQyNzRiZjM=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-08-03T22:06:20Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-08-13T00:15:43Z"}, "message": "Make the message for building rustdoc slightly nicer", "tree": {"sha": "03ec2d4d9865db9b9acf5c090827e34daeefb2de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03ec2d4d9865db9b9acf5c090827e34daeefb2de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83b68125e70b2b966439db748a79d36afd274bf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83b68125e70b2b966439db748a79d36afd274bf3", "html_url": "https://github.com/rust-lang/rust/commit/83b68125e70b2b966439db748a79d36afd274bf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83b68125e70b2b966439db748a79d36afd274bf3/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40dea65ec2675f776a27b67fcb2bb7f29e843da9", "url": "https://api.github.com/repos/rust-lang/rust/commits/40dea65ec2675f776a27b67fcb2bb7f29e843da9", "html_url": "https://github.com/rust-lang/rust/commit/40dea65ec2675f776a27b67fcb2bb7f29e843da9"}], "stats": {"total": 80, "additions": 48, "deletions": 32}, "files": [{"sha": "3043c95b5f07ed074478099ed5ff1f3421d81178", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 48, "deletions": 32, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/83b68125e70b2b966439db748a79d36afd274bf3/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b68125e70b2b966439db748a79d36afd274bf3/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=83b68125e70b2b966439db748a79d36afd274bf3", "patch": "@@ -93,36 +93,46 @@ impl Step for ToolBuild {\n         let _folder = build.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n         println!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target);\n \n-        let mut cargo = builder.cargo(compiler, Mode::Tool, target, \"build\");\n-        let dir = build.src.join(\"src/tools\").join(tool);\n-        cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n-\n-        // We don't want to build tools dynamically as they'll be running across\n-        // stages and such and it's just easier if they're not dynamically linked.\n-        cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n-\n-        if let Some(dir) = build.openssl_install_dir(target) {\n-            cargo.env(\"OPENSSL_STATIC\", \"1\");\n-            cargo.env(\"OPENSSL_DIR\", dir);\n-            cargo.env(\"LIBZ_SYS_STATIC\", \"1\");\n-        }\n+        let mut cargo = prepare_tool_cargo(builder, compiler, target, tool);\n+        build.run(&mut cargo);\n+        build.cargo_out(compiler, Mode::Tool, target).join(exe(tool, &compiler.host))\n+    }\n+}\n \n-        cargo.env(\"CFG_RELEASE_CHANNEL\", &build.config.channel);\n+fn prepare_tool_cargo(\n+    builder: &Builder,\n+    compiler: Compiler,\n+    target: Interned<String>,\n+    tool: &'static str,\n+) -> Command {\n+    let build = builder.build;\n+    let mut cargo = builder.cargo(compiler, Mode::Tool, target, \"build\");\n+    let dir = build.src.join(\"src/tools\").join(tool);\n+    cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n+\n+    // We don't want to build tools dynamically as they'll be running across\n+    // stages and such and it's just easier if they're not dynamically linked.\n+    cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n+\n+    if let Some(dir) = build.openssl_install_dir(target) {\n+        cargo.env(\"OPENSSL_STATIC\", \"1\");\n+        cargo.env(\"OPENSSL_DIR\", dir);\n+        cargo.env(\"LIBZ_SYS_STATIC\", \"1\");\n+    }\n \n-        let info = GitInfo::new(&build.config, &dir);\n-        if let Some(sha) = info.sha() {\n-            cargo.env(\"CFG_COMMIT_HASH\", sha);\n-        }\n-        if let Some(sha_short) = info.sha_short() {\n-            cargo.env(\"CFG_SHORT_COMMIT_HASH\", sha_short);\n-        }\n-        if let Some(date) = info.commit_date() {\n-            cargo.env(\"CFG_COMMIT_DATE\", date);\n-        }\n+    cargo.env(\"CFG_RELEASE_CHANNEL\", &build.config.channel);\n \n-        build.run(&mut cargo);\n-        build.cargo_out(compiler, Mode::Tool, target).join(exe(tool, &compiler.host))\n+    let info = GitInfo::new(&build.config, &dir);\n+    if let Some(sha) = info.sha() {\n+        cargo.env(\"CFG_COMMIT_HASH\", sha);\n     }\n+    if let Some(sha_short) = info.sha_short() {\n+        cargo.env(\"CFG_SHORT_COMMIT_HASH\", sha_short);\n+    }\n+    if let Some(date) = info.commit_date() {\n+        cargo.env(\"CFG_COMMIT_DATE\", date);\n+    }\n+    cargo\n }\n \n macro_rules! tool {\n@@ -245,7 +255,9 @@ impl Step for Rustdoc {\n     }\n \n     fn run(self, builder: &Builder) -> PathBuf {\n+        let build = builder.build;\n         let target_compiler = self.target_compiler;\n+        let target = target_compiler.host;\n         let build_compiler = if target_compiler.stage == 0 {\n             builder.compiler(0, builder.build.build)\n         } else {\n@@ -255,12 +267,16 @@ impl Step for Rustdoc {\n             builder.compiler(target_compiler.stage - 1, builder.build.build)\n         };\n \n-        let tool_rustdoc = builder.ensure(ToolBuild {\n-            compiler: build_compiler,\n-            target: target_compiler.host,\n-            tool: \"rustdoc\",\n-            mode: Mode::Librustc,\n-        });\n+        builder.ensure(CleanTools { compiler: build_compiler, target, mode: Mode::Librustc });\n+        builder.ensure(compile::Rustc { compiler: build_compiler, target });\n+\n+        let _folder = build.fold_output(|| format!(\"stage{}-rustdoc\", target_compiler.stage));\n+        println!(\"Building rustdoc for stage{} ({})\", target_compiler.stage, target_compiler.host);\n+\n+        let mut cargo = prepare_tool_cargo(builder, build_compiler, target, \"rustdoc\");\n+        build.run(&mut cargo);\n+        let tool_rustdoc = build.cargo_out(build_compiler, Mode::Tool, target)\n+            .join(exe(\"rustdoc\", &target_compiler.host));\n \n         // don't create a stage0-sysroot/bin directory.\n         if target_compiler.stage > 0 {"}]}