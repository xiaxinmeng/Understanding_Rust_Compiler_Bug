{"sha": "da622a3796f5488d89daaf3b32ceb509ce4d669b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNjIyYTM3OTZmNTQ4OGQ4OWRhYWYzYjMyY2ViNTA5Y2U0ZDY2OWI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-07-21T19:15:11Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-21T05:27:02Z"}, "message": "rustc: remove {FxHash,Node,DefId,HirId,ItemLocal}{Map,Set} \"constructor\" fns.", "tree": {"sha": "afca8de8ab015cc91d6de9931d093072ddbacc5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afca8de8ab015cc91d6de9931d093072ddbacc5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da622a3796f5488d89daaf3b32ceb509ce4d669b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da622a3796f5488d89daaf3b32ceb509ce4d669b", "html_url": "https://github.com/rust-lang/rust/commit/da622a3796f5488d89daaf3b32ceb509ce4d669b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da622a3796f5488d89daaf3b32ceb509ce4d669b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1e2fa8f0469aac1ea69dd5b6164e1d198d57934", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1e2fa8f0469aac1ea69dd5b6164e1d198d57934", "html_url": "https://github.com/rust-lang/rust/commit/f1e2fa8f0469aac1ea69dd5b6164e1d198d57934"}], "stats": {"total": 147, "additions": 72, "deletions": 75}, "files": [{"sha": "7ac3b033437fa733dd9e3bca7cc12aaf63fec233", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -244,9 +244,9 @@ pub fn lower_crate(\n         loop_scopes: Vec::new(),\n         is_in_loop_condition: false,\n         anonymous_lifetime_mode: AnonymousLifetimeMode::PassThrough,\n-        type_def_lifetime_params: DefIdMap(),\n+        type_def_lifetime_params: Default::default(),\n         current_hir_id_owner: vec![(CRATE_DEF_INDEX, 0)],\n-        item_local_id_counters: NodeMap(),\n+        item_local_id_counters: Default::default(),\n         node_id_to_hir_id: IndexVec::new(),\n         is_generator: false,\n         is_in_trait_impl: false,\n@@ -1168,7 +1168,7 @@ impl<'a> LoweringContext<'a> {\n                             hir::TyKind::BareFn(P(hir::BareFnTy {\n                                 generic_params: this.lower_generic_params(\n                                     &f.generic_params,\n-                                    &NodeMap(),\n+                                    &NodeMap::default(),\n                                     ImplTraitContext::disallowed(),\n                                 ),\n                                 unsafety: this.lower_unsafety(f.unsafety),\n@@ -2467,7 +2467,7 @@ impl<'a> LoweringContext<'a> {\n         // FIXME: This could probably be done with less rightward drift. Also looks like two control\n         //        paths where report_error is called are also the only paths that advance to after\n         //        the match statement, so the error reporting could probably just be moved there.\n-        let mut add_bounds: NodeMap<Vec<_>> = NodeMap();\n+        let mut add_bounds: NodeMap<Vec<_>> = Default::default();\n         for pred in &generics.where_clause.predicates {\n             if let WherePredicate::BoundPredicate(ref bound_pred) = *pred {\n                 'next_bound: for bound in &bound_pred.bounds {\n@@ -2552,7 +2552,7 @@ impl<'a> LoweringContext<'a> {\n                         hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n                             bound_generic_params: this.lower_generic_params(\n                                 bound_generic_params,\n-                                &NodeMap(),\n+                                &NodeMap::default(),\n                                 ImplTraitContext::disallowed(),\n                             ),\n                             bounded_ty: this.lower_ty(bounded_ty, ImplTraitContext::disallowed()),\n@@ -2636,8 +2636,11 @@ impl<'a> LoweringContext<'a> {\n         p: &PolyTraitRef,\n         mut itctx: ImplTraitContext<'_>,\n     ) -> hir::PolyTraitRef {\n-        let bound_generic_params =\n-            self.lower_generic_params(&p.bound_generic_params, &NodeMap(), itctx.reborrow());\n+        let bound_generic_params = self.lower_generic_params(\n+            &p.bound_generic_params,\n+            &NodeMap::default(),\n+            itctx.reborrow(),\n+        );\n         let trait_ref = self.with_parent_impl_lifetime_defs(\n             &bound_generic_params,\n             |this| this.lower_trait_ref(&p.trait_ref, itctx),"}, {"sha": "6be7444136e2e14fd0f9346b9f265191c0515df2", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -418,7 +418,7 @@ impl Definitions {\n                 index_to_key: [vec![], vec![]],\n                 def_path_hashes: [vec![], vec![]],\n             },\n-            node_to_def_index: NodeMap(),\n+            node_to_def_index: Default::default(),\n             def_index_to_node: [vec![], vec![]],\n             node_to_hir_id: IndexVec::new(),\n             parent_modules_of_macro_defs: Default::default(),"}, {"sha": "fda9817cc88ae0c621b681b844b15ccade8e6062", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             parent_def_id,\n             body_id,\n             param_env,\n-            opaque_types: DefIdMap(),\n+            opaque_types: Default::default(),\n             obligations: vec![],\n         };\n         let value = instantiator.instantiate_opaque_types_in_map(value);"}, {"sha": "c43cdb24c339792381bda85bbec514bdc08c1231", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -496,7 +496,7 @@ pub struct LintBuffer {\n \n impl LintBuffer {\n     pub fn new() -> LintBuffer {\n-        LintBuffer { map: NodeMap() }\n+        LintBuffer { map: ::std::default::Default::default() }\n     }\n \n     pub fn add_lint(&mut self,"}, {"sha": "54a0192d2e8a541376026c670de2d240ff04c01b", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -272,9 +272,9 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n             tcx,\n             num_live_nodes: 0,\n             num_vars: 0,\n-            live_node_map: HirIdMap(),\n-            variable_map: HirIdMap(),\n-            capture_info_map: NodeMap(),\n+            live_node_map: HirIdMap::default(),\n+            variable_map: HirIdMap::default(),\n+            capture_info_map: Default::default(),\n             var_kinds: Vec::new(),\n             lnks: Vec::new(),\n         }\n@@ -397,7 +397,7 @@ fn visit_fn<'a, 'tcx: 'a>(ir: &mut IrMaps<'a, 'tcx>,\n fn add_from_pat<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, pat: &P<hir::Pat>) {\n     // For struct patterns, take note of which fields used shorthand\n     // (`x` rather than `x: x`).\n-    let mut shorthand_field_ids = HirIdSet();\n+    let mut shorthand_field_ids = HirIdSet::default();\n     let mut pats = VecDeque::new();\n     pats.push_back(pat);\n     while let Some(pat) = pats.pop_front() {\n@@ -691,8 +691,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             s: specials,\n             successors: vec![invalid_node(); num_live_nodes],\n             rwu_table: RWUTable::new(num_live_nodes * num_vars),\n-            break_ln: NodeMap(),\n-            cont_ln: NodeMap(),\n+            break_ln: Default::default(),\n+            cont_ln: Default::default(),\n         }\n     }\n "}, {"sha": "0009a517dd1dba50232f940e451c42ed32c879b9", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -408,7 +408,7 @@ fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) ->\n     let mut reachable_context = ReachableContext {\n         tcx,\n         tables: &ty::TypeckTables::empty(None),\n-        reachable_symbols: NodeSet(),\n+        reachable_symbols: Default::default(),\n         worklist: Vec::new(),\n         any_library,\n     };"}, {"sha": "b7f4e380815903d26b6a8175f8aa331dbd81ab0e", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -425,8 +425,8 @@ fn resolve_lifetimes<'tcx>(\n fn krate<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) -> NamedRegionMap {\n     let krate = tcx.hir.krate();\n     let mut map = NamedRegionMap {\n-        defs: NodeMap(),\n-        late_bound: NodeSet(),\n+        defs: Default::default(),\n+        late_bound: Default::default(),\n         object_lifetime_defaults: compute_object_lifetime_defaults(tcx),\n     };\n     {\n@@ -437,8 +437,8 @@ fn krate<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) -> NamedRegionMap {\n             trait_ref_hack: false,\n             is_in_fn_syntax: false,\n             labels_in_fn: vec![],\n-            xcrate_object_lifetime_defaults: DefIdMap(),\n-            lifetime_uses: &mut DefIdMap(),\n+            xcrate_object_lifetime_defaults: Default::default(),\n+            lifetime_uses: &mut Default::default(),\n         };\n         for (_, item) in &krate.items {\n             visitor.visit_item(item);\n@@ -1278,7 +1278,7 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body) {\n fn compute_object_lifetime_defaults(\n     tcx: TyCtxt<'_, '_, '_>,\n ) -> NodeMap<Vec<ObjectLifetimeDefault>> {\n-    let mut map = NodeMap();\n+    let mut map = NodeMap::default();\n     for item in tcx.hir.krate().items.values() {\n         match item.node {\n             hir::ItemKind::Struct(_, ref generics)\n@@ -1432,7 +1432,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         } = self;\n         let labels_in_fn = replace(&mut self.labels_in_fn, vec![]);\n         let xcrate_object_lifetime_defaults =\n-            replace(&mut self.xcrate_object_lifetime_defaults, DefIdMap());\n+            replace(&mut self.xcrate_object_lifetime_defaults, DefIdMap::default());\n         let mut this = LifetimeContext {\n             tcx: *tcx,\n             map: map,"}, {"sha": "a8ce52a8e156ce676a49edb458295536eda9ec4e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -446,22 +446,22 @@ impl<'tcx> TypeckTables<'tcx> {\n     pub fn empty(local_id_root: Option<DefId>) -> TypeckTables<'tcx> {\n         TypeckTables {\n             local_id_root,\n-            type_dependent_defs: ItemLocalMap(),\n-            field_indices: ItemLocalMap(),\n-            user_provided_tys: ItemLocalMap(),\n+            type_dependent_defs: Default::default(),\n+            field_indices: Default::default(),\n+            user_provided_tys: Default::default(),\n             user_provided_sigs: Default::default(),\n-            node_types: ItemLocalMap(),\n-            node_substs: ItemLocalMap(),\n-            user_substs: ItemLocalMap(),\n-            adjustments: ItemLocalMap(),\n-            pat_binding_modes: ItemLocalMap(),\n-            pat_adjustments: ItemLocalMap(),\n+            node_types: Default::default(),\n+            node_substs: Default::default(),\n+            user_substs: Default::default(),\n+            adjustments: Default::default(),\n+            pat_binding_modes: Default::default(),\n+            pat_adjustments: Default::default(),\n             upvar_capture_map: Default::default(),\n-            closure_kind_origins: ItemLocalMap(),\n-            liberated_fn_sigs: ItemLocalMap(),\n-            fru_field_types: ItemLocalMap(),\n-            cast_kinds: ItemLocalMap(),\n-            used_trait_imports: Lrc::new(DefIdSet()),\n+            closure_kind_origins: Default::default(),\n+            liberated_fn_sigs: Default::default(),\n+            fru_field_types: Default::default(),\n+            cast_kinds: Default::default(),\n+            used_trait_imports: Lrc::new(Default::default()),\n             tainted_by_errors: false,\n             free_region_map: Default::default(),\n             concrete_existential_types: Default::default(),"}, {"sha": "6adfe2cde6c3b227078102eb45733f01046863a8", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -10,8 +10,6 @@\n \n //! An efficient hash map for node IDs\n \n-#![allow(non_snake_case)]\n-\n use hir::def_id::DefId;\n use hir::{HirId, ItemLocalId};\n use syntax::ast;\n@@ -22,9 +20,7 @@ pub use rustc_data_structures::fx::FxHashSet;\n macro_rules! define_id_collections {\n     ($map_name:ident, $set_name:ident, $key:ty) => {\n         pub type $map_name<T> = FxHashMap<$key, T>;\n-        pub fn $map_name<T>() -> $map_name<T> { Default::default() }\n         pub type $set_name = FxHashSet<$key>;\n-        pub fn $set_name() -> $set_name { Default::default() }\n     }\n }\n "}, {"sha": "6dd13447fb559fc8c6c31df5842c77305138f736", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> CrateDebugContext<'a, 'tcx> {\n             created_files: Default::default(),\n             created_enum_disr_types: Default::default(),\n             type_map: Default::default(),\n-            namespace_map: RefCell::new(DefIdMap()),\n+            namespace_map: RefCell::new(Default::default()),\n             composite_types_completed: Default::default(),\n         }\n     }"}, {"sha": "10dd1de8b784ea58ada75a320fe82248f890e1ab", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -64,7 +64,7 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n-        return Lrc::new(DefIdMap())\n+        return Lrc::new(Default::default())\n     }\n \n     // Check to see if this crate is a \"special runtime crate\". These\n@@ -299,7 +299,7 @@ fn upstream_monomorphizations_provider<'a, 'tcx>(\n \n     let cnums = tcx.all_crate_nums(LOCAL_CRATE);\n \n-    let mut instances: DefIdMap<FxHashMap<_, _>> = DefIdMap();\n+    let mut instances: DefIdMap<FxHashMap<_, _>> = Default::default();\n \n     let cnum_stable_ids: IndexVec<CrateNum, Fingerprint> = {\n         let mut cnum_stable_ids = IndexVec::from_elem_n(Fingerprint::ZERO,"}, {"sha": "7c7fc3a934620e15f216a2de8f5c8b87b9efa02b", "filename": "src/librustc_data_structures/fx.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_data_structures%2Ffx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_data_structures%2Ffx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffx.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -8,6 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use rustc_hash::FxHashMap;\n-pub use rustc_hash::FxHashSet;\n-pub use rustc_hash::FxHasher;\n+pub use rustc_hash::{FxHasher, FxHashMap, FxHashSet};"}, {"sha": "7dd1ca3493e9d12b9a656376b050c7c6e6861b97", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -603,7 +603,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n         };\n \n         if self.impling_types.is_none() {\n-            let mut impls = NodeSet();\n+            let mut impls = NodeSet::default();\n             cx.tcx.for_each_impl(debug, |d| {\n                 if let Some(ty_def) = cx.tcx.type_of(d).ty_adt_def() {\n                     if let Some(node_id) = cx.tcx.hir.as_local_node_id(ty_def.did) {"}, {"sha": "c7bd1744a3d6d53dfea9f4282c02bb8bf41f074d", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -316,7 +316,7 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n             use std::collections::hash_map::Entry;\n \n             assert_eq!(cnum, LOCAL_CRATE);\n-            let mut visible_parent_map: DefIdMap<DefId> = DefIdMap();\n+            let mut visible_parent_map: DefIdMap<DefId> = Default::default();\n \n             // Issue 46112: We want the map to prefer the shortest\n             // paths when reporting the path to an item. Therefore we"}, {"sha": "d95a74be77696018fffe42c381b30c9885af4e69", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -829,7 +829,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 1,\n             ),\n             upvar_decls,\n-            var_indices: NodeMap(),\n+            var_indices: Default::default(),\n             unit_temp: None,\n             cached_resume_block: None,\n             cached_return_block: None,"}, {"sha": "b4ffb39a2ebd6ae48b599c7ff2c0c03388233eca", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -314,7 +314,7 @@ pub fn collect_crate_mono_items<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         time(tcx.sess, \"collecting mono items\", || {\n             par_iter(roots).for_each(|root| {\n-                let mut recursion_depths = DefIdMap();\n+                let mut recursion_depths = DefIdMap::default();\n                 collect_items_rec(tcx,\n                                 root,\n                                 visited,"}, {"sha": "8d3a04f9f3c2c52b9866b31f054bf3709d72f9ef", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -72,7 +72,7 @@ fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, krate: CrateNum)\n                       -> Lrc<DefIdSet> {\n     assert_eq!(krate, LOCAL_CRATE);\n \n-    let mut set = DefIdSet();\n+    let mut set = DefIdSet::default();\n \n     // All body-owners have MIR associated with them.\n     set.extend(tcx.body_owners());"}, {"sha": "099c6df32ad18cc55e47d81e98b9cbc2863683a2", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -84,10 +84,10 @@ fn rvalue_promotable_map<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tables: &ty::TypeckTables::empty(None),\n         in_fn: false,\n         in_static: false,\n-        mut_rvalue_borrows: NodeSet(),\n+        mut_rvalue_borrows: Default::default(),\n         param_env: ty::ParamEnv::empty(),\n         identity_substs: Substs::empty(),\n-        result: ItemLocalSet(),\n+        result: ItemLocalSet::default(),\n     };\n \n     // `def_id` should be a `Body` owner"}, {"sha": "fbd6f6edd31c5af4bc6b1589e6e3a7c79b42fdd1", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -1761,7 +1761,7 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             tcx,\n             access_levels: &visitor.access_levels,\n             in_variant: false,\n-            old_error_set: NodeSet(),\n+            old_error_set: Default::default(),\n         };\n         intravisit::walk_crate(&mut visitor, krate);\n "}, {"sha": "659ca1f5b9f3123e4dadfb9373a2c18d92401415", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -162,7 +162,7 @@ pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) {\n \n     let mut visitor = UnusedImportCheckVisitor {\n         resolver,\n-        unused_imports: NodeMap(),\n+        unused_imports: Default::default(),\n         base_id: ast::DUMMY_NODE_ID,\n         item_span: DUMMY_SP,\n     };"}, {"sha": "5f4e9946e5018b2668edec4529e6b23df0963ba9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -1862,22 +1862,22 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n             primitive_type_table: PrimitiveTypeTable::new(),\n \n-            def_map: NodeMap(),\n-            import_map: NodeMap(),\n-            freevars: NodeMap(),\n-            freevars_seen: NodeMap(),\n+            def_map: Default::default(),\n+            import_map: Default::default(),\n+            freevars: Default::default(),\n+            freevars_seen: Default::default(),\n             export_map: FxHashMap::default(),\n-            trait_map: NodeMap(),\n+            trait_map: Default::default(),\n             module_map,\n-            block_map: NodeMap(),\n+            block_map: Default::default(),\n             extern_module_map: FxHashMap::default(),\n             binding_parent_modules: FxHashMap::default(),\n \n             make_glob_map: make_glob_map == MakeGlobMap::Yes,\n-            glob_map: NodeMap(),\n+            glob_map: Default::default(),\n \n             used_imports: FxHashSet::default(),\n-            maybe_unused_trait_imports: NodeSet(),\n+            maybe_unused_trait_imports: Default::default(),\n             maybe_unused_extern_crates: Vec::new(),\n \n             unused_labels: FxHashMap::default(),\n@@ -1907,7 +1907,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             name_already_seen: FxHashMap::default(),\n             whitelisted_legacy_custom_derives: Vec::new(),\n             potentially_unused_imports: Vec::new(),\n-            struct_constructors: DefIdMap(),\n+            struct_constructors: Default::default(),\n             found_unresolved_macro: false,\n             unused_macros: FxHashSet::default(),\n             current_type_ascription: Vec::new(),"}, {"sha": "aabef5c323483855fa2d9b327b8a5173f9d0addc", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -643,11 +643,11 @@ impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> {\n             },\n             infcx,\n             fulfillment_cx: RefCell::new(TraitEngine::new(tcx)),\n-            locals: RefCell::new(NodeMap()),\n-            deferred_call_resolutions: RefCell::new(DefIdMap()),\n+            locals: RefCell::new(Default::default()),\n+            deferred_call_resolutions: RefCell::new(Default::default()),\n             deferred_cast_checks: RefCell::new(Vec::new()),\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n-            opaque_types: RefCell::new(DefIdMap()),\n+            opaque_types: RefCell::new(Default::default()),\n             implicit_region_bound,\n             body_id,\n         }\n@@ -1986,7 +1986,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             has_errors: Cell::new(false),\n             enclosing_breakables: RefCell::new(EnclosingBreakables {\n                 stack: Vec::new(),\n-                by_id: NodeMap(),\n+                by_id: Default::default(),\n             }),\n             inh,\n         }"}, {"sha": "50f54bba3fd208a75f3be6314ccb84c8098dce84", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -56,7 +56,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let used_trait_imports = mem::replace(\n             &mut self.tables.borrow_mut().used_trait_imports,\n-            Lrc::new(DefIdSet()),\n+            Lrc::new(DefIdSet::default()),\n         );\n         debug!(\n             \"used_trait_imports({:?}) = {:?}\","}, {"sha": "22a96d4e908cae6f4e4a9e781d8e3364ad942b40", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -24,7 +24,7 @@ use rustc::util::nodemap::DefIdSet;\n use rustc_data_structures::fx::FxHashMap;\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut used_trait_imports = DefIdSet();\n+    let mut used_trait_imports = DefIdSet::default();\n     for &body_id in tcx.hir.krate().bodies.keys() {\n         let item_def_id = tcx.hir.body_owner_def_id(body_id);\n         let imports = tcx.used_trait_imports(item_def_id);"}, {"sha": "79e4abc4c0e2b9d78bf8776894e7b27b83258f1e", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -38,7 +38,7 @@ pub fn crate_inherent_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut collect = InherentCollect {\n         tcx,\n         impls_map: CrateInherentImpls {\n-            inherent_impls: DefIdMap()\n+            inherent_impls: DefIdMap::default()\n         }\n     };\n     krate.visit_all_item_likes(&mut collect);"}, {"sha": "087d53b92d4965d12f72586f86cd204ff15c2d2a", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -81,7 +81,7 @@ pub fn determine_parameters_to_be_inferred<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n     let mut terms_cx = TermsContext {\n         tcx,\n         arena,\n-        inferred_starts: NodeMap(),\n+        inferred_starts: Default::default(),\n         inferred_terms: vec![],\n \n         lang_items: lang_items(tcx),"}, {"sha": "946c5c5fa9bc2de4ce0e4c31cd3f6ba7cafb8662", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -25,7 +25,7 @@ pub const STRIP_HIDDEN: Pass =\n \n /// Strip items marked `#[doc(hidden)]`\n pub fn strip_hidden(krate: clean::Crate, _: &DocContext) -> clean::Crate {\n-    let mut retained = DefIdSet();\n+    let mut retained = DefIdSet::default();\n \n     // strip all #[doc(hidden)] items\n     let krate = {"}, {"sha": "e9d927398e44bd90bca4cb34fabcde852e2c57d1", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da622a3796f5488d89daaf3b32ceb509ce4d669b/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=da622a3796f5488d89daaf3b32ceb509ce4d669b", "patch": "@@ -24,7 +24,7 @@ pub const STRIP_PRIVATE: Pass =\n /// crate, specified by the `xcrate` flag.\n pub fn strip_private(mut krate: clean::Crate, cx: &DocContext) -> clean::Crate {\n     // This stripper collects all *retained* nodes.\n-    let mut retained = DefIdSet();\n+    let mut retained = DefIdSet::default();\n     let access_levels = cx.renderinfo.borrow().access_levels.clone();\n \n     // strip all private items"}]}