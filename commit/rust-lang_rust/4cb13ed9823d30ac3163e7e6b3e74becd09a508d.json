{"sha": "4cb13ed9823d30ac3163e7e6b3e74becd09a508d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYjEzZWQ5ODIzZDMwYWMzMTYzZTdlNmIzZTc0YmVjZDA5YTUwOGQ=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-01-01T22:36:03Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-01-02T15:05:09Z"}, "message": "Inject std libs with versions", "tree": {"sha": "a98e4ba1efde91ef5c268cdcc891bae5fb2f2785", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a98e4ba1efde91ef5c268cdcc891bae5fb2f2785"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cb13ed9823d30ac3163e7e6b3e74becd09a508d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb13ed9823d30ac3163e7e6b3e74becd09a508d", "html_url": "https://github.com/rust-lang/rust/commit/4cb13ed9823d30ac3163e7e6b3e74becd09a508d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cb13ed9823d30ac3163e7e6b3e74becd09a508d/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f42a36cded2ac71e36b2572c54da0fc623af2eca", "url": "https://api.github.com/repos/rust-lang/rust/commits/f42a36cded2ac71e36b2572c54da0fc623af2eca", "html_url": "https://github.com/rust-lang/rust/commit/f42a36cded2ac71e36b2572c54da0fc623af2eca"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "51b65bcce41ca85c0ae2b210c5046164489ec41a", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4cb13ed9823d30ac3163e7e6b3e74becd09a508d/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb13ed9823d30ac3163e7e6b3e74becd09a508d/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=4cb13ed9823d30ac3163e7e6b3e74becd09a508d", "patch": "@@ -21,6 +21,8 @@ use syntax::fold;\n use syntax::opt_vec;\n use syntax::util::small_vector::SmallVector;\n \n+pub static VERSION: &'static str = \"0.9-pre\";\n+\n pub fn maybe_inject_libstd_ref(sess: Session, crate: ast::Crate)\n                                -> ast::Crate {\n     if use_std(&crate) {\n@@ -57,7 +59,8 @@ impl fold::ast_fold for StandardLibraryInjector {\n     fn fold_crate(&mut self, crate: ast::Crate) -> ast::Crate {\n         let mut vis = ~[ast::view_item {\n             node: ast::view_item_extern_mod(self.sess.ident_of(\"std\"),\n-                                            None,\n+                                            Some((format!(\"std\\\\#{}\", VERSION).to_managed(),\n+                                                  ast::CookedStr)),\n                                             ast::DUMMY_NODE_ID),\n             attrs: ~[],\n             vis: ast::private,\n@@ -67,15 +70,17 @@ impl fold::ast_fold for StandardLibraryInjector {\n         if use_uv(&crate) && !self.sess.building_library.get() {\n             vis.push(ast::view_item {\n                 node: ast::view_item_extern_mod(self.sess.ident_of(\"green\"),\n-                                                None,\n+                                                Some((format!(\"green\\\\#{}\", VERSION).to_managed(),\n+                                                      ast::CookedStr)),\n                                                 ast::DUMMY_NODE_ID),\n                 attrs: ~[],\n                 vis: ast::private,\n                 span: dummy_sp()\n             });\n             vis.push(ast::view_item {\n                 node: ast::view_item_extern_mod(self.sess.ident_of(\"rustuv\"),\n-                                                None,\n+                                                Some((format!(\"rustuv\\\\#{}\", VERSION).to_managed(),\n+                                                      ast::CookedStr)),\n                                                 ast::DUMMY_NODE_ID),\n                 attrs: ~[],\n                 vis: ast::private,"}, {"sha": "fb19f20d12958a1c98ae3e0ef3f10eeaca6d46cb", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cb13ed9823d30ac3163e7e6b3e74becd09a508d/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb13ed9823d30ac3163e7e6b3e74becd09a508d/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=4cb13ed9823d30ac3163e7e6b3e74becd09a508d", "patch": "@@ -13,6 +13,7 @@\n \n use driver::session;\n use front::config;\n+use front::std_inject::VERSION;\n \n use std::cell::RefCell;\n use std::vec;\n@@ -291,7 +292,10 @@ fn mk_std(cx: &TestCtxt) -> ast::view_item {\n                                             path_node(~[id_extra]),\n                                             ast::DUMMY_NODE_ID))])\n     } else {\n-        ast::view_item_extern_mod(id_extra, None, ast::DUMMY_NODE_ID)\n+        ast::view_item_extern_mod(id_extra,\n+                                  Some((format!(\"extra\\\\#{}\", VERSION).to_managed(),\n+                                        ast::CookedStr)),\n+                                  ast::DUMMY_NODE_ID)\n     };\n     ast::view_item {\n         node: vi,"}, {"sha": "aaaf56af436b44a8fbbc0f718404ee8e3a05092d", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4cb13ed9823d30ac3163e7e6b3e74becd09a508d/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb13ed9823d30ac3163e7e6b3e74becd09a508d/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=4cb13ed9823d30ac3163e7e6b3e74becd09a508d", "patch": "@@ -14,7 +14,8 @@\n \n pub use crate_id::CrateId;\n pub use target::{OutputType, Main, Lib, Test, Bench, Target, Build, Install};\n-pub use version::{Version, NoVersion, split_version_general, try_parsing_version};\n+pub use version::{Version, ExactRevision, NoVersion, split_version, split_version_general,\n+    try_parsing_version};\n pub use rustc::metadata::filesearch::rust_path;\n use rustc::metadata::filesearch::libdir;\n use rustc::driver::driver::host_triple;\n@@ -213,8 +214,9 @@ pub fn library_in_workspace(path: &Path, short_name: &str, where: Target,\n }\n \n // rustc doesn't use target-specific subdirectories\n-pub fn system_library(sysroot: &Path, lib_name: &str) -> Option<Path> {\n-    library_in(lib_name, &NoVersion, &sysroot.join(libdir()))\n+pub fn system_library(sysroot: &Path, crate_id: &str) -> Option<Path> {\n+    let (lib_name, version) = split_crate_id(crate_id);\n+    library_in(lib_name, &version, &sysroot.join(libdir()))\n }\n \n fn library_in(short_name: &str, version: &Version, dir_to_search: &Path) -> Option<Path> {\n@@ -268,6 +270,7 @@ fn library_in(short_name: &str, version: &Version, dir_to_search: &Path) -> Opti\n                                }\n                                None => break\n                            }\n+\n                        }\n                        _ => { f_name = f_name.slice(0, i); }\n                  }\n@@ -293,6 +296,22 @@ fn library_in(short_name: &str, version: &Version, dir_to_search: &Path) -> Opti\n     abs_path\n }\n \n+fn split_crate_id<'a>(crate_id: &'a str) -> (&'a str, Version) {\n+    match split_version(crate_id) {\n+        Some((name, vers)) =>\n+            match vers {\n+                ExactRevision(ref v) => match v.find('-') {\n+                    Some(pos) => (name, ExactRevision(v.slice(0, pos).to_owned())),\n+                    None => (name, ExactRevision(v.to_owned()))\n+                },\n+                _ => (name, vers)\n+            },\n+        None => (crate_id, NoVersion)\n+    }\n+}\n+\n+\n+\n /// Returns the executable that would be installed for <crateid>\n /// in <workspace>\n /// As a side effect, creates the bin-dir if it doesn't exist"}]}