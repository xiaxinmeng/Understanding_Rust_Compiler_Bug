{"sha": "d5da94a3b1e635eeb9520b87f6414ff3c24c8602", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZGE5NGEzYjFlNjM1ZWViOTUyMGI4N2Y2NDE0ZmYzYzI0Yzg2MDI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-10T05:47:40Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-10T08:48:46Z"}, "message": "rustc_resolve: ignore uniform_paths canaries that resolve to an import of the same crate.", "tree": {"sha": "c9e575343cddd44f53592ab25da84cb40d727ffd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9e575343cddd44f53592ab25da84cb40d727ffd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5da94a3b1e635eeb9520b87f6414ff3c24c8602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5da94a3b1e635eeb9520b87f6414ff3c24c8602", "html_url": "https://github.com/rust-lang/rust/commit/d5da94a3b1e635eeb9520b87f6414ff3c24c8602", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5da94a3b1e635eeb9520b87f6414ff3c24c8602/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "html_url": "https://github.com/rust-lang/rust/commit/0a33de04cfcd961a8cd2a8391dbae00cc7328a49"}], "stats": {"total": 115, "additions": 72, "deletions": 43}, "files": [{"sha": "1fa9979edb8d3128e5dec763e5b1aef467ae3ae2", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5da94a3b1e635eeb9520b87f6414ff3c24c8602/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5da94a3b1e635eeb9520b87f6414ff3c24c8602/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d5da94a3b1e635eeb9520b87f6414ff3c24c8602", "patch": "@@ -199,22 +199,6 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         if emit_uniform_paths_canary {\n             let source = prefix_start.unwrap();\n \n-            // HACK(eddyb) For `use x::{self, ...};`, use the ID of the\n-            // `self` nested import for the canary. This allows the\n-            // ambiguity reporting scope to ignore false positives\n-            // in the same way it does for `use x;` (by comparing IDs).\n-            let mut canary_id = id;\n-            if let ast::UseTreeKind::Nested(ref items) = use_tree.kind {\n-                for &(ref use_tree, id) in items {\n-                    if let ast::UseTreeKind::Simple(..) = use_tree.kind {\n-                        if use_tree.ident().name == keywords::SelfValue.name() {\n-                            canary_id = id;\n-                            break;\n-                        }\n-                    }\n-                }\n-            }\n-\n             // Helper closure to emit a canary with the given base path.\n             let emit = |this: &mut Self, base: Option<Ident>| {\n                 let subclass = SingleImport {\n@@ -234,7 +218,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     base.into_iter().collect(),\n                     subclass.clone(),\n                     source.span,\n-                    canary_id,\n+                    id,\n                     root_use_tree.span,\n                     root_id,\n                     ty::Visibility::Invisible,"}, {"sha": "fc12d1683e85f733e4fb7ecd568b81b658b6f45b", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 38, "deletions": 26, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d5da94a3b1e635eeb9520b87f6414ff3c24c8602/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5da94a3b1e635eeb9520b87f6414ff3c24c8602/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d5da94a3b1e635eeb9520b87f6414ff3c24c8602", "patch": "@@ -620,9 +620,9 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         }\n \n         #[derive(Default)]\n-        struct UniformPathsCanaryResult {\n-            module_scope: Option<Span>,\n-            block_scopes: Vec<Span>,\n+        struct UniformPathsCanaryResult<'a> {\n+            module_scope: Option<&'a NameBinding<'a>>,\n+            block_scopes: Vec<&'a NameBinding<'a>>,\n         }\n         // Collect all tripped `uniform_paths` canaries separately.\n         let mut uniform_paths_canaries: BTreeMap<\n@@ -661,20 +661,12 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n \n                 self.per_ns(|_, ns| {\n                     if let Some(result) = result[ns].get().ok() {\n-                        if let NameBindingKind::Import { directive, .. } = result.kind {\n-                            // Skip canaries that resolve to the import itself.\n-                            // These come from `use crate_name;`, which isn't really\n-                            // ambiguous, as the import can't actually shadow itself.\n-                            if directive.id == import.id {\n-                                return;\n-                            }\n-                        }\n                         if has_explicit_self {\n                             // There should only be one `self::x` (module-scoped) canary.\n-                            assert_eq!(canary_results[ns].module_scope, None);\n-                            canary_results[ns].module_scope = Some(result.span);\n+                            assert!(canary_results[ns].module_scope.is_none());\n+                            canary_results[ns].module_scope = Some(result);\n                         } else {\n-                            canary_results[ns].block_scopes.push(result.span);\n+                            canary_results[ns].block_scopes.push(result);\n                         }\n                     }\n                 });\n@@ -708,16 +700,36 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         let uniform_paths_feature = self.session.features_untracked().uniform_paths;\n         for ((span, _), (name, results)) in uniform_paths_canaries {\n             self.per_ns(|this, ns| {\n-                let results = &results[ns];\n+                let external_crate = if ns == TypeNS && this.extern_prelude.contains(&name) {\n+                    let crate_id =\n+                        this.crate_loader.process_path_extern(name, span);\n+                    Some(DefId { krate: crate_id, index: CRATE_DEF_INDEX })\n+                } else {\n+                    None\n+                };\n+                let result_filter = |result: &&NameBinding| {\n+                    // Ignore canaries that resolve to an import of the same crate.\n+                    // That is, we allow `use crate_name; use crate_name::foo;`.\n+                    if let Some(def_id) = external_crate {\n+                        if let Some(module) = result.module() {\n+                            if module.normal_ancestor_id == def_id {\n+                                return false;\n+                            }\n+                        }\n+                    }\n \n-                let has_external_crate =\n-                    ns == TypeNS && this.extern_prelude.contains(&name);\n+                    true\n+                };\n+                let module_scope = results[ns].module_scope.filter(result_filter);\n+                let block_scopes = || {\n+                    results[ns].block_scopes.iter().cloned().filter(result_filter)\n+                };\n \n                 // An ambiguity requires more than one possible resolution.\n                 let possible_resultions =\n-                    (has_external_crate as usize) +\n-                    (results.module_scope.is_some() as usize) +\n-                    (!results.block_scopes.is_empty() as usize);\n+                    (external_crate.is_some() as usize) +\n+                    (module_scope.is_some() as usize) +\n+                    (block_scopes().next().is_some() as usize);\n                 if possible_resultions <= 1 {\n                     return;\n                 }\n@@ -727,26 +739,26 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 let msg = format!(\"`{}` import is ambiguous\", name);\n                 let mut err = this.session.struct_span_err(span, &msg);\n                 let mut suggestion_choices = String::new();\n-                if has_external_crate {\n+                if external_crate.is_some() {\n                     write!(suggestion_choices, \"`::{}`\", name);\n                     err.span_label(span,\n                         format!(\"can refer to external crate `::{}`\", name));\n                 }\n-                if let Some(span) = results.module_scope {\n+                if let Some(result) = module_scope {\n                     if !suggestion_choices.is_empty() {\n                         suggestion_choices.push_str(\" or \");\n                     }\n                     write!(suggestion_choices, \"`self::{}`\", name);\n                     if uniform_paths_feature {\n-                        err.span_label(span,\n+                        err.span_label(result.span,\n                             format!(\"can refer to `self::{}`\", name));\n                     } else {\n-                        err.span_label(span,\n+                        err.span_label(result.span,\n                             format!(\"may refer to `self::{}` in the future\", name));\n                     }\n                 }\n-                for &span in &results.block_scopes {\n-                    err.span_label(span,\n+                for result in block_scopes() {\n+                    err.span_label(result.span,\n                         format!(\"shadowed by block-scoped `{}`\", name));\n                 }\n                 err.help(&format!(\"write {} explicitly instead\", suggestion_choices));"}, {"sha": "05048cfd451050e39382c4bf39b22df15476c412", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/redundant.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d5da94a3b1e635eeb9520b87f6414ff3c24c8602/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fredundant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5da94a3b1e635eeb9520b87f6414ff3c24c8602/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fredundant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fredundant.rs?ref=d5da94a3b1e635eeb9520b87f6414ff3c24c8602", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// edition:2018\n+\n+use std;\n+use std::io;\n+\n+mod foo {\n+    pub use std as my_std;\n+}\n+\n+mod bar {\n+    pub use std::{self};\n+}\n+\n+fn main() {\n+    io::stdout();\n+    self::std::io::stdout();\n+    foo::my_std::io::stdout();\n+    bar::std::io::stdout();\n+}"}, {"sha": "745ac18e059b9c895a5261e52cdd0917fc18bbed", "filename": "src/test/ui/rust-2018/uniform-paths/redundant.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5da94a3b1e635eeb9520b87f6414ff3c24c8602/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5da94a3b1e635eeb9520b87f6414ff3c24c8602/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.rs?ref=d5da94a3b1e635eeb9520b87f6414ff3c24c8602", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // edition:2018\n \n #![feature(uniform_paths)]\n \n use std;\n+use std::io;\n \n mod foo {\n     pub use std as my_std;\n@@ -23,6 +25,7 @@ mod bar {\n }\n \n fn main() {\n+    io::stdout();\n     self::std::io::stdout();\n     foo::my_std::io::stdout();\n     bar::std::io::stdout();", "previous_filename": "src/test/run-pass/redundant.rs"}]}