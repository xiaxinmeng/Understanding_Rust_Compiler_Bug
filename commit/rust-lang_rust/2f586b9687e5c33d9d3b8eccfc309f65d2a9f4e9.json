{"sha": "2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNTg2Yjk2ODdlNWMzM2Q5ZDNiOGVjY2ZjMzA5ZjY1ZDJhOWY0ZTk=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-02-13T07:33:44Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-02-18T00:56:07Z"}, "message": "Opt for .cloned() over .map(|x| x.clone()) etc.", "tree": {"sha": "578e2d49b5c8b71d7c38142adcf6d10dba09d690", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/578e2d49b5c8b71d7c38142adcf6d10dba09d690"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "html_url": "https://github.com/rust-lang/rust/commit/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5705d48e280f8a0065c214edfb3dcdcecc323316", "url": "https://api.github.com/repos/rust-lang/rust/commits/5705d48e280f8a0065c214edfb3dcdcecc323316", "html_url": "https://github.com/rust-lang/rust/commit/5705d48e280f8a0065c214edfb3dcdcecc323316"}], "stats": {"total": 150, "additions": 68, "deletions": 82}, "files": [{"sha": "0cfaaae2009c95bd081b7bf59e32b0ddd5e6b979", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -21,6 +21,7 @@\n #![feature(test)]\n #![feature(unicode)]\n #![feature(env)]\n+#![feature(core)]\n \n #![deny(warnings)]\n "}, {"sha": "8da11a9a50d449e1c5c07351e8a6a38cdcbd7eee", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -1133,7 +1133,7 @@ fn compile_test_(config: &Config, props: &TestProps,\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     let mut link_args = vec!(\"-L\".to_string(),\n                              aux_dir.as_str().unwrap().to_string());\n-    link_args.extend(extra_args.iter().map(|s| s.clone()));\n+    link_args.extend(extra_args.iter().cloned());\n     let args = make_compile_args(config,\n                                  props,\n                                  link_args,"}, {"sha": "d6e5b3fe464a621bb017b389872e9aa5092183f4", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -2306,7 +2306,7 @@ mod tests {\n     #[test]\n     fn test_from_bools() {\n         let bools = vec![true, false, true, true];\n-        let bitv: Bitv = bools.iter().map(|n| *n).collect();\n+        let bitv: Bitv = bools.iter().cloned().collect();\n         assert_eq!(format!(\"{:?}\", bitv), \"1011\");\n     }\n \n@@ -2319,12 +2319,12 @@ mod tests {\n     #[test]\n     fn test_bitv_iterator() {\n         let bools = vec![true, false, true, true];\n-        let bitv: Bitv = bools.iter().map(|n| *n).collect();\n+        let bitv: Bitv = bools.iter().cloned().collect();\n \n         assert_eq!(bitv.iter().collect::<Vec<bool>>(), bools);\n \n         let long: Vec<_> = (0i32..10000).map(|i| i % 2 == 0).collect();\n-        let bitv: Bitv = long.iter().map(|n| *n).collect();\n+        let bitv: Bitv = long.iter().cloned().collect();\n         assert_eq!(bitv.iter().collect::<Vec<bool>>(), long)\n     }\n "}, {"sha": "4da6f96300679223f26bfa0712b753222a82c9b5", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -938,7 +938,7 @@ impl<A: Ord> Ord for DList<A> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: Clone> Clone for DList<A> {\n     fn clone(&self) -> DList<A> {\n-        self.iter().map(|x| x.clone()).collect()\n+        self.iter().cloned().collect()\n     }\n }\n \n@@ -1056,7 +1056,7 @@ mod tests {\n \n     #[cfg(test)]\n     fn list_from<T: Clone>(v: &[T]) -> DList<T> {\n-        v.iter().map(|x| (*x).clone()).collect()\n+        v.iter().cloned().collect()\n     }\n \n     #[test]"}, {"sha": "c5e0966720fd27ae643de6a13ebbf96f2af596c4", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -350,7 +350,7 @@ pub trait IteratorExt: Iterator + Sized {\n     ///\n     /// ```\n     /// let xs = [100, 200, 300];\n-    /// let mut it = xs.iter().map(|x| *x).peekable();\n+    /// let mut it = xs.iter().cloned().peekable();\n     /// assert_eq!(*it.peek().unwrap(), 100);\n     /// assert_eq!(it.next().unwrap(), 100);\n     /// assert_eq!(it.next().unwrap(), 200);"}, {"sha": "88777da0bcd35a660f7d0334b716308ce0e60b91", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -713,7 +713,7 @@ fn test_random_access_inspect() {\n fn test_random_access_map() {\n     let xs = [1, 2, 3, 4, 5];\n \n-    let mut it = xs.iter().map(|x| *x);\n+    let mut it = xs.iter().cloned();\n     assert_eq!(xs.len(), it.indexable());\n     for (i, elt) in xs.iter().enumerate() {\n         assert_eq!(Some(*elt), it.idx(i));"}, {"sha": "a3f7d57da67486b39a976a8289743612960ef5b4", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -139,8 +139,7 @@ impl CStore {\n     pub fn get_used_crate_source(&self, cnum: ast::CrateNum)\n                                      -> Option<CrateSource> {\n         self.used_crate_sources.borrow_mut()\n-            .iter().find(|source| source.cnum == cnum)\n-            .map(|source| source.clone())\n+            .iter().find(|source| source.cnum == cnum).cloned()\n     }\n \n     pub fn reset(&self) {\n@@ -218,7 +217,7 @@ impl CStore {\n \n     pub fn find_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId)\n                                      -> Option<ast::CrateNum> {\n-        self.extern_mod_crate_map.borrow().get(&emod_id).map(|x| *x)\n+        self.extern_mod_crate_map.borrow().get(&emod_id).cloned()\n     }\n }\n "}, {"sha": "4544f283e1cc2ccfceaedc2f27c114890fe9f0f1", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -76,7 +76,7 @@ impl<'a> fmt::Debug for Matrix<'a> {\n             pretty_printed_matrix.iter().map(|row| row[col].len()).max().unwrap_or(0)\n         }).collect();\n \n-        let total_width = column_widths.iter().map(|n| *n).sum() + column_count * 3 + 1;\n+        let total_width = column_widths.iter().cloned().sum() + column_count * 3 + 1;\n         let br = repeat('+').take(total_width).collect::<String>();\n         try!(write!(f, \"{}\\n\", br));\n         for row in pretty_printed_matrix {"}, {"sha": "456d4a3a86e39336f57bad24ba88dcbdd6fba1bd", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -501,7 +501,7 @@ fn lit_to_const(lit: &ast::Lit, ty_hint: Option<Ty>) -> const_val {\n     match lit.node {\n         ast::LitStr(ref s, _) => const_str((*s).clone()),\n         ast::LitBinary(ref data) => {\n-            const_binary(Rc::new(data.iter().map(|x| *x).collect()))\n+            const_binary(data.clone())\n         }\n         ast::LitByte(n) => const_uint(n as u64),\n         ast::LitChar(n) => const_uint(n as u64),"}, {"sha": "ad9f4eade5c90d25538240080640f300aace049a", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -158,7 +158,7 @@ fn calculate_type(sess: &session::Session,\n \n     // Collect what we've got so far in the return vector.\n     let mut ret = (1..sess.cstore.next_crate_num()).map(|i| {\n-        match formats.get(&i).map(|v| *v) {\n+        match formats.get(&i).cloned() {\n             v @ Some(cstore::RequireDynamic) => v,\n             _ => None,\n         }"}, {"sha": "49bd2e67a19181dfd45115e341488c7c58f45573", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -924,7 +924,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n \n     fn rebuild(&self)\n                -> (ast::FnDecl, Option<ast::ExplicitSelf_>, ast::Generics) {\n-        let mut expl_self_opt = self.expl_self_opt.map(|x| x.clone());\n+        let mut expl_self_opt = self.expl_self_opt.cloned();\n         let mut inputs = self.fn_decl.inputs.clone();\n         let mut output = self.fn_decl.output.clone();\n         let mut ty_params = self.generics.ty_params.clone();"}, {"sha": "ce8f0d87e564c24511c7a3a7cddbf0a8e7231a96", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -147,18 +147,12 @@ struct LanguageItemCollector<'a> {\n \n impl<'a, 'v> Visitor<'v> for LanguageItemCollector<'a> {\n     fn visit_item(&mut self, item: &ast::Item) {\n-        match extract(&item.attrs) {\n-            Some(value) => {\n-                let item_index = self.item_refs.get(&value[]).map(|x| *x);\n-\n-                match item_index {\n-                    Some(item_index) => {\n-                        self.collect_item(item_index, local_def(item.id), item.span)\n-                    }\n-                    None => {}\n-                }\n+        if let Some(value) = extract(&item.attrs) {\n+            let item_index = self.item_refs.get(&value[]).cloned();\n+\n+            if let Some(item_index) = item_index {\n+                self.collect_item(item_index, local_def(item.id), item.span)\n             }\n-            None => {}\n         }\n \n         visit::walk_item(self, item);"}, {"sha": "e539f6ae6cb9382898b2167093e91fe5b288e3db", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -407,7 +407,7 @@ impl RegionMaps {\n \n     pub fn opt_encl_scope(&self, id: CodeExtent) -> Option<CodeExtent> {\n         //! Returns the narrowest scope that encloses `id`, if any.\n-        self.scope_map.borrow().get(&id).map(|x| *x)\n+        self.scope_map.borrow().get(&id).cloned()\n     }\n \n     #[allow(dead_code)] // used in middle::cfg"}, {"sha": "3ba08c1032031075224aaa0dddcd1ac67902f5d4", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -562,7 +562,7 @@ pub fn early_bound_lifetimes<'a>(generics: &'a ast::Generics) -> Vec<ast::Lifeti\n \n     generics.lifetimes.iter()\n         .filter(|l| referenced_idents.iter().any(|&i| i == l.lifetime.name))\n-        .map(|l| (*l).clone())\n+        .cloned()\n         .collect()\n }\n "}, {"sha": "b21b42fdbfccebc7aef3b107a79af9a93e0c6de6", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -738,7 +738,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     {\n         let cache = self.pick_candidate_cache();\n         let hashmap = cache.hashmap.borrow();\n-        hashmap.get(&cache_fresh_trait_pred.0.trait_ref).map(|c| (*c).clone())\n+        hashmap.get(&cache_fresh_trait_pred.0.trait_ref).cloned()\n     }\n \n     fn insert_candidate_cache(&mut self,"}, {"sha": "8ca54cce8e3630aa77eceac6c3bee0dfd12bd06e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -2868,7 +2868,7 @@ pub fn mk_ctor_fn<'tcx>(cx: &ctxt<'tcx>,\n                         def_id: ast::DefId,\n                         input_tys: &[Ty<'tcx>],\n                         output: Ty<'tcx>) -> Ty<'tcx> {\n-    let input_args = input_tys.iter().map(|ty| *ty).collect();\n+    let input_args = input_tys.iter().cloned().collect();\n     mk_bare_fn(cx,\n                Some(def_id),\n                cx.mk_bare_fn(BareFnTy {\n@@ -3837,7 +3837,7 @@ pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n                                        -> Representability {\n         match ty.sty {\n             ty_tup(ref ts) => {\n-                find_nonrepresentable(cx, sp, seen, ts.iter().map(|ty| *ty))\n+                find_nonrepresentable(cx, sp, seen, ts.iter().cloned())\n             }\n             // Fixed-length vectors.\n             // FIXME(#11924) Behavior undecided for zero-length vectors.\n@@ -4965,7 +4965,7 @@ pub fn note_and_explain_type_err(cx: &ctxt, err: &type_err) {\n }\n \n pub fn provided_source(cx: &ctxt, id: ast::DefId) -> Option<ast::DefId> {\n-    cx.provided_method_sources.borrow().get(&id).map(|x| *x)\n+    cx.provided_method_sources.borrow().get(&id).cloned()\n }\n \n pub fn provided_trait_methods<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)"}, {"sha": "a6d8bc24da76f501eac9e2cd2a63ecaa35cd12a4", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -214,7 +214,7 @@ pub fn memoized<T, U, S, F>(cache: &RefCell<HashMap<T, U, S>>, arg: T, f: F) ->\n           F: FnOnce(T) -> U,\n {\n     let key = arg.clone();\n-    let result = cache.borrow().get(&key).map(|result| result.clone());\n+    let result = cache.borrow().get(&key).cloned();\n     match result {\n         Some(result) => result,\n         None => {"}, {"sha": "3de69bd72e1e43d87bfc55e6a0558ab2f8cb99f1", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -40,10 +40,7 @@ pub fn get_rpath_flags<F, G>(config: RPathConfig<F, G>) -> Vec<String> where\n     debug!(\"preparing the RPATH!\");\n \n     let libs = config.used_crates.clone();\n-    let libs = libs.into_iter().filter_map(|(_, l)| {\n-        l.map(|p| p.clone())\n-    }).collect::<Vec<_>>();\n-\n+    let libs = libs.into_iter().filter_map(|(_, l)| l).collect::<Vec<_>>();\n     let rpaths = get_rpaths(config, &libs[]);\n     flags.push_all(&rpaths_to_flags(&rpaths[])[]);\n     flags"}, {"sha": "e614f87c9809997afcb6d3f667f975f0e6ee8a4f", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -254,7 +254,7 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n                 output_ty: Ty<'tcx>)\n                 -> Ty<'tcx>\n     {\n-        let input_args = input_tys.iter().map(|ty| *ty).collect();\n+        let input_args = input_tys.iter().cloned().collect();\n         ty::mk_bare_fn(self.infcx.tcx,\n                        None,\n                        self.infcx.tcx.mk_bare_fn(ty::BareFnTy {"}, {"sha": "337ba77fe7fbb9a31c18755e5036f7c483a1ee1e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -1920,18 +1920,15 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 -> ResolveResult<(Rc<Module>, LastPrivate)> {\n         fn search_parent_externals(needle: Name, module: &Rc<Module>)\n                                 -> Option<Rc<Module>> {\n-            module.external_module_children.borrow()\n-                                            .get(&needle).cloned()\n-                                            .map(|_| module.clone())\n-                                            .or_else(|| {\n-                match module.parent_link.clone() {\n-                    ModuleParentLink(parent, _) => {\n-                        search_parent_externals(needle,\n-                                                &parent.upgrade().unwrap())\n+            match module.external_module_children.borrow().get(&needle) {\n+                Some(_) => Some(module.clone()),\n+                None => match module.parent_link {\n+                    ModuleParentLink(ref parent, _) => {\n+                        search_parent_externals(needle, &parent.upgrade().unwrap())\n                     }\n                    _ => None\n                 }\n-            })\n+            }\n         }\n \n         let mut search_module = module_;"}, {"sha": "62d4dbeb0ad0c94c659206b6b05f48657667724e", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -3211,7 +3211,7 @@ pub fn trans_crate<'tcx>(analysis: ty::CrateAnalysis<'tcx>)\n     reachable.push(\"rust_eh_personality_catch\".to_string());\n \n     if codegen_units > 1 {\n-        internalize_symbols(&shared_ccx, &reachable.iter().map(|x| x.clone()).collect());\n+        internalize_symbols(&shared_ccx, &reachable.iter().cloned().collect());\n     }\n \n     let metadata_module = ModuleTranslation {"}, {"sha": "306d0f610c6577dd3156ef8159d19052365920e5", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -1197,7 +1197,7 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 let trait_ref =\n                     bcx.tcx().object_cast_map.borrow()\n                                              .get(&expr.id)\n-                                             .map(|t| (*t).clone())\n+                                             .cloned()\n                                              .unwrap();\n                 let trait_ref = bcx.monomorphize(&trait_ref);\n                 let datum = unpack_datum!(bcx, trans(bcx, &**val));"}, {"sha": "546c62e5dd24743b3f6b108a6dec3eba67512096", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -67,7 +67,7 @@ pub fn untuple_arguments_if_necessary<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                                 abi: abi::Abi)\n                                                 -> Vec<Ty<'tcx>> {\n     if abi != abi::RustCall {\n-        return inputs.iter().map(|x| (*x).clone()).collect()\n+        return inputs.iter().cloned().collect()\n     }\n \n     if inputs.len() == 0 {"}, {"sha": "1ba2e38201c6320b315e69b629f30271e5df8f61", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -3220,7 +3220,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n         for field in ast_fields {\n             let mut expected_field_type = tcx.types.err;\n \n-            let pair = class_field_map.get(&field.ident.node.name).map(|x| *x);\n+            let pair = class_field_map.get(&field.ident.node.name).cloned();\n             match pair {\n                 None => {\n                     fcx.type_error_message(\n@@ -3852,7 +3852,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n       }\n       ast::ExprStruct(ref path, ref fields, ref base_expr) => {\n         // Resolve the path.\n-        let def = tcx.def_map.borrow().get(&id).map(|i| *i);\n+        let def = tcx.def_map.borrow().get(&id).cloned();\n         let struct_id = match def {\n             Some(def::DefVariant(enum_id, variant_id, true)) => {\n                 check_struct_enum_variant(fcx, id, expr.span, enum_id,"}, {"sha": "722f14fa6d4c7b0dcff44ad75f8d7f7bfa8686c2", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -293,7 +293,7 @@ pub fn collapse_docs(krate: clean::Crate) -> plugins::PluginResult {\n             let mut a: Vec<clean::Attribute> = i.attrs.iter().filter(|&a| match a {\n                 &clean::NameValue(ref x, _) if \"doc\" == *x => false,\n                 _ => true\n-            }).map(|x| x.clone()).collect();\n+            }).cloned().collect();\n             if docstr.len() > 0 {\n                 a.push(clean::NameValue(\"doc\".to_string(), docstr));\n             }"}, {"sha": "c52b0bab1fa8b800129e3688e7423bca40dba82d", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -333,7 +333,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     name: name,\n                     items: items.clone(),\n                     generics: gen.clone(),\n-                    bounds: b.iter().map(|x| (*x).clone()).collect(),\n+                    bounds: b.iter().cloned().collect(),\n                     id: item.id,\n                     attrs: item.attrs.clone(),\n                     whence: item.span,"}, {"sha": "bfc1afc6eb4f2b4d45c37519dc762d09a64c7b95", "filename": "src/libstd/env.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -918,7 +918,7 @@ mod tests {\n     #[cfg(unix)]\n     fn join_paths_unix() {\n         fn test_eq(input: &[&str], output: &str) -> bool {\n-            &*join_paths(input.iter().map(|s| *s)).unwrap() ==\n+            &*join_paths(input.iter().cloned()).unwrap() ==\n                 OsStr::from_str(output)\n         }\n \n@@ -927,14 +927,14 @@ mod tests {\n                          \"/bin:/usr/bin:/usr/local/bin\"));\n         assert!(test_eq(&[\"\", \"/bin\", \"\", \"\", \"/usr/bin\", \"\"],\n                          \":/bin:::/usr/bin:\"));\n-        assert!(join_paths([\"/te:st\"].iter().map(|s| *s)).is_err());\n+        assert!(join_paths([\"/te:st\"].iter().cloned()).is_err());\n     }\n \n     #[test]\n     #[cfg(windows)]\n     fn join_paths_windows() {\n         fn test_eq(input: &[&str], output: &str) -> bool {\n-            &*join_paths(input.iter().map(|s| *s)).unwrap() ==\n+            &*join_paths(input.iter().cloned()).unwrap() ==\n                 OsStr::from_str(output)\n         }\n \n@@ -945,6 +945,6 @@ mod tests {\n                         r\";c:\\windows;;;c:\\;\"));\n         assert!(test_eq(&[r\"c:\\te;st\", r\"c:\\\"],\n                         r#\"\"c:\\te;st\";c:\\\"#));\n-        assert!(join_paths([r#\"c:\\te\"st\"#].iter().map(|s| *s)).is_err());\n+        assert!(join_paths([r#\"c:\\te\"st\"#].iter().cloned()).is_err());\n     }\n     }"}, {"sha": "6535705388d0104437377181a351bd19ac87660a", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -251,7 +251,7 @@ impl<'ast> Map<'ast> {\n     }\n \n     fn find_entry(&self, id: NodeId) -> Option<MapEntry<'ast>> {\n-        self.map.borrow().get(id as usize).map(|e| *e)\n+        self.map.borrow().get(id as usize).cloned()\n     }\n \n     pub fn krate(&self) -> &'ast Crate {"}, {"sha": "968fceb6f6fd02f2d7c523fa6cefa34c58b4766f", "filename": "src/libsyntax/diagnostics/registry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fdiagnostics%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fdiagnostics%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fregistry.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -21,6 +21,6 @@ impl Registry {\n     }\n \n     pub fn find_description(&self, code: &str) -> Option<&'static str> {\n-        self.descriptions.get(code).map(|desc| *desc)\n+        self.descriptions.get(code).cloned()\n     }\n }"}, {"sha": "8fdc3c8447a32d227b596831eff589260bd84d38", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -639,7 +639,7 @@ impl<'a> ExtCtxt<'a> {\n     pub fn mod_path(&self) -> Vec<ast::Ident> {\n         let mut v = Vec::new();\n         v.push(token::str_to_ident(&self.ecfg.crate_name[]));\n-        v.extend(self.mod_path.iter().map(|a| *a));\n+        v.extend(self.mod_path.iter().cloned());\n         return v;\n     }\n     pub fn bt_push(&mut self, ei: ExpnInfo) {"}, {"sha": "8b4eaab386d007c867f57ee4e6014d765df44f6e", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -367,7 +367,7 @@ impl<'a> TraitDef<'a> {\n                 \"allow\" | \"warn\" | \"deny\" | \"forbid\" => true,\n                 _ => false,\n             }\n-        }).map(|a| a.clone()));\n+        }).cloned());\n         push(P(ast::Item {\n             attrs: attrs,\n             ..(*newitem).clone()\n@@ -410,7 +410,7 @@ impl<'a> TraitDef<'a> {\n         let mut ty_params = ty_params.into_vec();\n \n         // Copy the lifetimes\n-        lifetimes.extend(generics.lifetimes.iter().map(|l| (*l).clone()));\n+        lifetimes.extend(generics.lifetimes.iter().cloned());\n \n         // Create the type parameters.\n         ty_params.extend(generics.ty_params.iter().map(|ty_param| {\n@@ -445,14 +445,14 @@ impl<'a> TraitDef<'a> {\n                         span: self.span,\n                         bound_lifetimes: wb.bound_lifetimes.clone(),\n                         bounded_ty: wb.bounded_ty.clone(),\n-                        bounds: OwnedSlice::from_vec(wb.bounds.iter().map(|b| b.clone()).collect())\n+                        bounds: OwnedSlice::from_vec(wb.bounds.iter().cloned().collect())\n                     })\n                 }\n                 ast::WherePredicate::RegionPredicate(ref rb) => {\n                     ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n                         span: self.span,\n                         lifetime: rb.lifetime,\n-                        bounds: rb.bounds.iter().map(|b| b.clone()).collect()\n+                        bounds: rb.bounds.iter().cloned().collect()\n                     })\n                 }\n                 ast::WherePredicate::EqPredicate(ref we) => {\n@@ -500,7 +500,7 @@ impl<'a> TraitDef<'a> {\n         let opt_trait_ref = Some(trait_ref);\n         let ident = ast_util::impl_pretty_name(&opt_trait_ref, &*self_type);\n         let mut a = vec![attr];\n-        a.extend(self.attributes.iter().map(|a| a.clone()));\n+        a.extend(self.attributes.iter().cloned());\n         cx.item(\n             self.span,\n             ident,"}, {"sha": "d1dee115b6bcdf247054cb829dc21459c72b3246", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -179,7 +179,7 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             return DummyResult::expr(sp);\n         }\n         Ok(bytes) => {\n-            let bytes = bytes.iter().map(|x| *x).collect();\n+            let bytes = bytes.iter().cloned().collect();\n             base::MacExpr::new(cx.expr_lit(sp, ast::LitBinary(Rc::new(bytes))))\n         }\n     }"}, {"sha": "a3224c25d09579752e78d2642acb941d64fc1f60", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -283,7 +283,7 @@ pub fn parse(sess: &ParseSess,\n              -> ParseResult {\n     let mut cur_eis = Vec::new();\n     cur_eis.push(initial_matcher_pos(Rc::new(ms.iter()\n-                                                .map(|x| (*x).clone())\n+                                                .cloned()\n                                                 .collect()),\n                                      None,\n                                      rdr.peek().sp.lo));"}, {"sha": "1a6cf7d07f19da2820520a4b40334d33071c7e51", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -159,7 +159,7 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                                                       None,\n                                                       None,\n                                                       arg.iter()\n-                                                         .map(|x| (*x).clone())\n+                                                         .cloned()\n                                                          .collect(),\n                                                       true);\n             match parse(cx.parse_sess(), cx.cfg(), arg_rdr, lhs_tt) {"}, {"sha": "c0823e04288e31bb078dd6e66607bdd1fc00831b", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -61,7 +61,7 @@ pub fn doc_comment_style(comment: &str) -> ast::AttrStyle {\n \n pub fn strip_doc_comment_decoration(comment: &str) -> String {\n     /// remove whitespace-only lines from the start/end of lines\n-    fn vertical_trim(lines: Vec<String> ) -> Vec<String> {\n+    fn vertical_trim(lines: Vec<String>) -> Vec<String> {\n         let mut i = 0;\n         let mut j = lines.len();\n         // first line of all-stars should be omitted\n@@ -82,7 +82,7 @@ pub fn strip_doc_comment_decoration(comment: &str) -> String {\n         while j > i && lines[j - 1].trim().is_empty() {\n             j -= 1;\n         }\n-        return lines[i..j].iter().map(|x| (*x).clone()).collect();\n+        lines[i..j].iter().cloned().collect()\n     }\n \n     /// remove a \"[ \\t]*\\*\" block from each line, if possible"}, {"sha": "f14cd5247769d1ff420c7ac3749080ebbe87b947", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -240,9 +240,8 @@ macro_rules! maybe_whole {\n \n fn maybe_append(mut lhs: Vec<Attribute>, rhs: Option<Vec<Attribute>>)\n                 -> Vec<Attribute> {\n-    match rhs {\n-        Some(ref attrs) => lhs.extend(attrs.iter().map(|a| a.clone())),\n-        None => {}\n+    if let Some(ref attrs) = rhs {\n+        lhs.extend(attrs.iter().cloned())\n     }\n     lhs\n }\n@@ -467,7 +466,7 @@ impl<'a> Parser<'a> {\n         debug!(\"commit_expr {:?}\", e);\n         if let ExprPath(..) = e.node {\n             // might be unit-struct construction; check for recoverableinput error.\n-            let mut expected = edible.iter().map(|x| x.clone()).collect::<Vec<_>>();\n+            let mut expected = edible.iter().cloned().collect::<Vec<_>>();\n             expected.push_all(inedible);\n             self.check_for_erroneous_unit_struct_expecting(&expected[]);\n         }\n@@ -485,7 +484,7 @@ impl<'a> Parser<'a> {\n         if self.last_token\n                .as_ref()\n                .map_or(false, |t| t.is_ident() || t.is_path()) {\n-            let mut expected = edible.iter().map(|x| x.clone()).collect::<Vec<_>>();\n+            let mut expected = edible.iter().cloned().collect::<Vec<_>>();\n             expected.push_all(&inedible[]);\n             self.check_for_erroneous_unit_struct_expecting(\n                 &expected[]);"}, {"sha": "8f1acde15460cea4d771cfaf312a24c6d9cc3153", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -983,15 +983,14 @@ impl<'a> State<'a> {\n                 try!(self.word_nbsp(\"trait\"));\n                 try!(self.print_ident(item.ident));\n                 try!(self.print_generics(generics));\n-                let bounds: Vec<_> = bounds.iter().map(|b| b.clone()).collect();\n                 let mut real_bounds = Vec::with_capacity(bounds.len());\n-                for b in bounds {\n-                    if let TraitTyParamBound(ref ptr, ast::TraitBoundModifier::Maybe) = b {\n+                for b in bounds.iter() {\n+                    if let TraitTyParamBound(ref ptr, ast::TraitBoundModifier::Maybe) = *b {\n                         try!(space(&mut self.s));\n                         try!(self.word_space(\"for ?\"));\n                         try!(self.print_trait_ref(&ptr.trait_ref));\n                     } else {\n-                        real_bounds.push(b);\n+                        real_bounds.push(b.clone());\n                     }\n                 }\n                 try!(self.print_bounds(\":\", &real_bounds[]));"}, {"sha": "273b014011f055f063118b0bc45b80e278d6cf6d", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -134,7 +134,7 @@ fn run<W: Writer>(writer: &mut W) -> std::old_io::IoResult<()> {\n                         ('t', 0.3015094502008)];\n \n     try!(make_fasta(writer, \">ONE Homo sapiens alu\\n\",\n-                    alu.as_bytes().iter().cycle().map(|c| *c), n * 2));\n+                    alu.as_bytes().iter().cycle().cloned(), n * 2));\n     try!(make_fasta(writer, \">TWO IUB ambiguity codes\\n\",\n                     AAGen::new(rng, iub), n * 3));\n     try!(make_fasta(writer, \">THREE Homo sapiens frequency\\n\","}, {"sha": "59abd63e12d59ec4789204b3b5fef9e70fe2d728", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "patch": "@@ -270,7 +270,7 @@ fn handle_sol(raw_sol: &List<u64>, data: &mut Data) {\n     // reverse order, i.e. the board rotated by half a turn.\n     data.nb += 2;\n     let sol1 = to_vec(raw_sol);\n-    let sol2: Vec<u8> = sol1.iter().rev().map(|x| *x).collect();\n+    let sol2: Vec<u8> = sol1.iter().rev().cloned().collect();\n \n     if data.nb == 2 {\n         data.min = sol1.clone();"}]}