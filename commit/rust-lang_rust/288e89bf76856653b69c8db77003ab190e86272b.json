{"sha": "288e89bf76856653b69c8db77003ab190e86272b", "node_id": "C_kwDOAAsO6NoAKDI4OGU4OWJmNzY4NTY2NTNiNjljOGRiNzcwMDNhYjE5MGU4NjI3MmI", "commit": {"author": {"name": "Kevin Reid", "email": "kpreid@google.com", "date": "2023-01-07T23:56:36Z"}, "committer": {"name": "Kevin Reid", "email": "kpreid@google.com", "date": "2023-01-07T23:56:36Z"}, "message": "Document that `Vec::from_raw_parts[_in]` must be given a pointer from the correct allocator.", "tree": {"sha": "644faa51571b111ca707fa9feec3cade2f559348", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/644faa51571b111ca707fa9feec3cade2f559348"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/288e89bf76856653b69c8db77003ab190e86272b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/288e89bf76856653b69c8db77003ab190e86272b", "html_url": "https://github.com/rust-lang/rust/commit/288e89bf76856653b69c8db77003ab190e86272b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/288e89bf76856653b69c8db77003ab190e86272b/comments", "author": {"login": "kpreid", "id": 779501, "node_id": "MDQ6VXNlcjc3OTUwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/779501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpreid", "html_url": "https://github.com/kpreid", "followers_url": "https://api.github.com/users/kpreid/followers", "following_url": "https://api.github.com/users/kpreid/following{/other_user}", "gists_url": "https://api.github.com/users/kpreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpreid/subscriptions", "organizations_url": "https://api.github.com/users/kpreid/orgs", "repos_url": "https://api.github.com/users/kpreid/repos", "events_url": "https://api.github.com/users/kpreid/events{/privacy}", "received_events_url": "https://api.github.com/users/kpreid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kpreid", "id": 779501, "node_id": "MDQ6VXNlcjc3OTUwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/779501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpreid", "html_url": "https://github.com/kpreid", "followers_url": "https://api.github.com/users/kpreid/followers", "following_url": "https://api.github.com/users/kpreid/following{/other_user}", "gists_url": "https://api.github.com/users/kpreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpreid/subscriptions", "organizations_url": "https://api.github.com/users/kpreid/orgs", "repos_url": "https://api.github.com/users/kpreid/repos", "events_url": "https://api.github.com/users/kpreid/events{/privacy}", "received_events_url": "https://api.github.com/users/kpreid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee0412d1ef81efcfabe7f66cd21476ca85d618b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0412d1ef81efcfabe7f66cd21476ca85d618b1", "html_url": "https://github.com/rust-lang/rust/commit/ee0412d1ef81efcfabe7f66cd21476ca85d618b1"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "36cfac8ee9e17da0dde403e785c0a09efd324898", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/288e89bf76856653b69c8db77003ab190e86272b/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/288e89bf76856653b69c8db77003ab190e86272b/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=288e89bf76856653b69c8db77003ab190e86272b", "patch": "@@ -490,6 +490,8 @@ impl<T> Vec<T> {\n     /// This is highly unsafe, due to the number of invariants that aren't\n     /// checked:\n     ///\n+    /// * `ptr` must have been allocated using the global allocator, such as via\n+    ///   the [`alloc::alloc`] function.\n     /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n     ///   (`T` having a less strict alignment is not sufficient, the alignment really\n     ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n@@ -526,6 +528,7 @@ impl<T> Vec<T> {\n     /// function.\n     ///\n     /// [`String`]: crate::string::String\n+    /// [`alloc::alloc`]: crate::alloc::alloc\n     /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n     ///\n     /// # Examples\n@@ -681,6 +684,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// This is highly unsafe, due to the number of invariants that aren't\n     /// checked:\n     ///\n+    /// * `ptr` must be [*currently allocated*] via the given allocator `alloc`.\n     /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n     ///   (`T` having a less strict alignment is not sufficient, the alignment really\n     ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n@@ -714,6 +718,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// [`String`]: crate::string::String\n     /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n+    /// [*currently allocated*]: crate::alloc::Allocator#currently-allocated-memory\n     /// [*fit*]: crate::alloc::Allocator#memory-fitting\n     ///\n     /// # Examples"}]}