{"sha": "f5fbefa3af48ed44b002a7423d6cbd74e4018c9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZmJlZmEzYWY0OGVkNDRiMDAyYTc0MjNkNmNiZDc0ZTQwMThjOWM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-11-20T15:46:39Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-11-26T16:21:17Z"}, "message": "remove csearch from resolve and typeck", "tree": {"sha": "2e01a6e883cac98fa17f1bc1aa2b7bd0d64c7d6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e01a6e883cac98fa17f1bc1aa2b7bd0d64c7d6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5fbefa3af48ed44b002a7423d6cbd74e4018c9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5fbefa3af48ed44b002a7423d6cbd74e4018c9c", "html_url": "https://github.com/rust-lang/rust/commit/f5fbefa3af48ed44b002a7423d6cbd74e4018c9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5fbefa3af48ed44b002a7423d6cbd74e4018c9c/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3877664b5671a3c7dab9a670419144bca758bf50", "url": "https://api.github.com/repos/rust-lang/rust/commits/3877664b5671a3c7dab9a670419144bca758bf50", "html_url": "https://github.com/rust-lang/rust/commit/3877664b5671a3c7dab9a670419144bca758bf50"}], "stats": {"total": 204, "additions": 130, "deletions": 74}, "files": [{"sha": "d78d580daa0d0b82344185dd6bca2c6f330c9f83", "filename": "src/librustc/metadata/util.rs", "status": "modified", "additions": 82, "deletions": 7, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/f5fbefa3af48ed44b002a7423d6cbd74e4018c9c/src%2Flibrustc%2Fmetadata%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5fbefa3af48ed44b002a7423d6cbd74e4018c9c/src%2Flibrustc%2Fmetadata%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Futil.rs?ref=f5fbefa3af48ed44b002a7423d6cbd74e4018c9c", "patch": "@@ -16,6 +16,7 @@ use middle::lang_items;\n use middle::ty;\n use middle::def_id::{DefId, DefIndex};\n \n+use std::any::Any;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::attr;\n@@ -24,9 +25,18 @@ use rustc_front::hir;\n pub use metadata::csearch::FoundAst;\n pub use metadata::cstore::LinkagePreference;\n pub use metadata::decoder::DecodeInlinedItem;\n+pub use metadata::decoder::DefLike;\n pub use metadata::inline::InlinedItem;\n \n-pub trait CrateStore<'tcx> {\n+pub use self::DefLike::{DlDef, DlField, DlImpl};\n+\n+pub struct ChildItem {\n+    pub def: DefLike,\n+    pub name: ast::Name,\n+    pub vis: hir::Visibility\n+}\n+\n+pub trait CrateStore<'tcx> : Any {\n     // item info\n     fn stability(&self, def: DefId) -> Option<attr::Stability>;\n     fn closure_kind(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n@@ -75,17 +85,24 @@ pub trait CrateStore<'tcx> {\n     fn is_const_fn(&self, did: DefId) -> bool;\n     fn is_defaulted_trait(&self, did: DefId) -> bool;\n     fn is_impl(&self, did: DefId) -> bool;\n+    fn is_static_method(&self, did: DefId) -> bool;\n \n     // metadata\n     fn dylib_dependency_formats(&self, cnum: ast::CrateNum)\n-                                    -> Vec<(ast::CrateNum, cstore::LinkagePreference)>;\n+                                    -> Vec<(ast::CrateNum, LinkagePreference)>;\n     fn lang_items(&self, cnum: ast::CrateNum) -> Vec<(DefIndex, usize)>;\n-    fn missing_lang_items(&self, cnum: ast::CrateNum)\n-                          -> Vec<lang_items::LangItem>;\n+    fn missing_lang_items(&self, cnum: ast::CrateNum) -> Vec<lang_items::LangItem>;\n     fn is_staged_api(&self, cnum: ast::CrateNum) -> bool;\n+    fn plugin_registrar_fn(&self, cnum: ast::CrateNum) -> Option<DefId>;\n \n-    // misc.\n+    // resolve\n     fn def_path(&self, def: DefId) -> ast_map::DefPath;\n+    fn tuple_struct_definition_if_ctor(&self, did: DefId) -> Option<DefId>;\n+    fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n+    fn item_children(&self, did: DefId) -> Vec<ChildItem>;\n+    fn crate_top_level_items(&self, cnum: ast::CrateNum) -> Vec<ChildItem>;\n+\n+    // misc.\n     fn maybe_get_item_ast(&'tcx self, tcx: &ty::ctxt<'tcx>, def: DefId)\n                           -> FoundAst<'tcx>;\n }\n@@ -278,8 +295,13 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::is_impl(&*cdata, did.index)\n     }\n \n+    fn is_static_method(&self, def: DefId) -> bool {\n+        let cdata = self.get_crate_data(def.krate);\n+        decoder::is_static_method(&*cdata, def.index)\n+    }\n+\n     fn dylib_dependency_formats(&self, cnum: ast::CrateNum)\n-                                -> Vec<(ast::CrateNum, cstore::LinkagePreference)>\n+                                -> Vec<(ast::CrateNum, LinkagePreference)>\n     {\n         let cdata = self.get_crate_data(cnum);\n         decoder::get_dylib_dependency_formats(&cdata)\n@@ -307,13 +329,66 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(cnum).staged_api\n     }\n \n-    fn def_path(&self, def: DefId) -> ast_map::DefPath {\n+    fn plugin_registrar_fn(&self, cnum: ast::CrateNum) -> Option<DefId>\n+    {\n+        let cdata = self.get_crate_data(cnum);\n+        decoder::get_plugin_registrar_fn(cdata.data()).map(|index| DefId {\n+            krate: cnum,\n+            index: index\n+        })\n+    }\n+\n+    fn def_path(&self, def: DefId) -> ast_map::DefPath\n+    {\n         let cdata = self.get_crate_data(def.krate);\n         let path = decoder::def_path(&*cdata, def.index);\n         let local_path = cdata.local_def_path();\n         local_path.into_iter().chain(path).collect()\n     }\n \n+    fn tuple_struct_definition_if_ctor(&self, did: DefId) -> Option<DefId>\n+    {\n+        let cdata = self.get_crate_data(did.krate);\n+        decoder::get_tuple_struct_definition_if_ctor(&*cdata, did.index)\n+    }\n+\n+    fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>\n+    {\n+        let cdata = self.get_crate_data(def.krate);\n+        decoder::get_struct_field_names(&self.intr, &*cdata, def.index)\n+    }\n+\n+    fn item_children(&self, def_id: DefId) -> Vec<ChildItem>\n+    {\n+        let mut result = vec![];\n+        let crate_data = self.get_crate_data(def_id.krate);\n+        let get_crate_data = |cnum| self.get_crate_data(cnum);\n+        decoder::each_child_of_item(\n+            self.intr.clone(), &*crate_data,\n+            def_id.index, get_crate_data,\n+            |def, name, vis| result.push(ChildItem {\n+                def: def,\n+                name: name,\n+                vis: vis\n+            }));\n+        result\n+    }\n+\n+    fn crate_top_level_items(&self, cnum: ast::CrateNum) -> Vec<ChildItem>\n+    {\n+        let mut result = vec![];\n+        let crate_data = self.get_crate_data(cnum);\n+        let get_crate_data = |cnum| self.get_crate_data(cnum);\n+        decoder::each_top_level_item_of_crate(\n+            self.intr.clone(), &*crate_data, get_crate_data,\n+            |def, name, vis| result.push(ChildItem {\n+                def: def,\n+                name: name,\n+                vis: vis\n+            }));\n+        result\n+    }\n+\n     fn maybe_get_item_ast(&'tcx self, tcx: &ty::ctxt<'tcx>, def: DefId)\n                           -> FoundAst<'tcx>\n     {"}, {"sha": "3fd35e04fbc887957649932b449e8ff5094dc910", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5fbefa3af48ed44b002a7423d6cbd74e4018c9c/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5fbefa3af48ed44b002a7423d6cbd74e4018c9c/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=f5fbefa3af48ed44b002a7423d6cbd74e4018c9c", "patch": "@@ -28,12 +28,12 @@\n //! Use the former for unit-like structs and the latter for structs with\n //! a `pub fn new()`.\n \n-use metadata::decoder;\n use middle::{cfg, def, infer, stability, traits};\n use middle::def_id::DefId;\n use middle::subst::Substs;\n use middle::ty::{self, Ty};\n use middle::ty::adjustment;\n+use rustc::metadata::util::CrateStore;\n use rustc::front::map as hir_map;\n use util::nodemap::{NodeSet};\n use lint::{Level, LateContext, LintContext, LintArray, Lint};\n@@ -936,8 +936,8 @@ impl LateLintPass for PluginAsLibrary {\n             _ => return,\n         };\n \n-        let md = match cx.sess().cstore.find_extern_mod_stmt_cnum(it.id) {\n-            Some(cnum) => cx.sess().cstore.get_crate_data(cnum),\n+        let prfn = match cx.sess().cstore.find_extern_mod_stmt_cnum(it.id) {\n+            Some(cnum) => cx.sess().cstore.plugin_registrar_fn(cnum),\n             None => {\n                 // Probably means we aren't linking the crate for some reason.\n                 //\n@@ -946,7 +946,7 @@ impl LateLintPass for PluginAsLibrary {\n             }\n         };\n \n-        if decoder::get_plugin_registrar_fn(md.data()).is_some() {\n+        if prfn.is_some() {\n             cx.span_lint(PLUGIN_AS_LIBRARY, it.span,\n                          \"compiler plugin used as an ordinary library\");\n         }"}, {"sha": "2740c81e34a3445b2719c5421ae4ce85e94c97dc", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 25, "deletions": 44, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/f5fbefa3af48ed44b002a7423d6cbd74e4018c9c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5fbefa3af48ed44b002a7423d6cbd74e4018c9c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=f5fbefa3af48ed44b002a7423d6cbd74e4018c9c", "patch": "@@ -28,8 +28,7 @@ use {resolve_error, ResolutionError};\n \n use self::DuplicateCheckingMode::*;\n \n-use rustc::metadata::csearch;\n-use rustc::metadata::decoder::{DefLike, DlDef, DlField, DlImpl};\n+use rustc::metadata::util::{CrateStore, ChildItem, DlDef, DlField, DlImpl};\n use rustc::middle::def::*;\n use rustc::middle::def_id::{CRATE_DEF_INDEX, DefId};\n \n@@ -625,7 +624,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             }\n             DefFn(ctor_id, true) => {\n                 child_name_bindings.define_value(\n-                csearch::get_tuple_struct_definition_if_ctor(&self.session.cstore, ctor_id)\n+                self.session.cstore.tuple_struct_definition_if_ctor(ctor_id)\n                     .map_or(def, |_| DefStruct(ctor_id)), DUMMY_SP, modifiers);\n             }\n             DefFn(..) |\n@@ -654,11 +653,10 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 // If this is a trait, add all the trait item names to the trait\n                 // info.\n \n-                let trait_item_def_ids = csearch::get_trait_item_def_ids(&self.session.cstore,\n-                                                                         def_id);\n+                let trait_item_def_ids = self.session.cstore.trait_item_def_ids(def_id);\n                 for trait_item_def in &trait_item_def_ids {\n-                    let trait_item_name = csearch::get_trait_name(&self.session.cstore,\n-                                                                  trait_item_def.def_id());\n+                    let trait_item_name =\n+                        self.session.cstore.item_name(trait_item_def.def_id());\n \n                     debug!(\"(building reduced graph for external crate) ... adding trait item \\\n                             '{}'\",\n@@ -695,7 +693,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 debug!(\"(building reduced graph for external crate) building type and value for \\\n                         {}\",\n                        final_ident);\n-                let fields = csearch::get_struct_field_names(&self.session.cstore, def_id);\n+                child_name_bindings.define_type(def, DUMMY_SP, modifiers);\n+                let fields = self.session.cstore.struct_field_names(def_id);\n \n                 if fields.is_empty() {\n                     child_name_bindings.define_value(def, DUMMY_SP, modifiers);\n@@ -719,39 +718,29 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     /// Builds the reduced graph for a single item in an external crate.\n     fn build_reduced_graph_for_external_crate_def(&mut self,\n                                                   root: &Rc<Module>,\n-                                                  def_like: DefLike,\n-                                                  name: Name,\n-                                                  def_visibility: Visibility) {\n-        match def_like {\n+                                                  xcdef: ChildItem) {\n+        match xcdef.def {\n             DlDef(def) => {\n                 // Add the new child item, if necessary.\n                 match def {\n                     DefForeignMod(def_id) => {\n                         // Foreign modules have no names. Recur and populate\n                         // eagerly.\n-                        csearch::each_child_of_item(&self.session.cstore,\n-                                                    def_id,\n-                                                    |def_like,\n-                                                     child_name,\n-                                                     vis| {\n-                            self.build_reduced_graph_for_external_crate_def(\n-                                root,\n-                                def_like,\n-                                child_name,\n-                                vis)\n-                        });\n+                        for child in self.session.cstore.item_children(def_id) {\n+                            self.build_reduced_graph_for_external_crate_def(root, child)\n+                        }\n                     }\n                     _ => {\n-                        let child_name_bindings = self.add_child(name,\n+                        let child_name_bindings = self.add_child(xcdef.name,\n                                                                  root,\n                                                                  OverwriteDuplicates,\n                                                                  DUMMY_SP);\n \n                         self.handle_external_def(def,\n-                                                 def_visibility,\n+                                                 xcdef.vis,\n                                                  &child_name_bindings,\n-                                                 &name.as_str(),\n-                                                 name,\n+                                                 &xcdef.name.as_str(),\n+                                                 xcdef.name,\n                                                  root);\n                     }\n                 }\n@@ -778,16 +767,11 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             Some(def_id) => def_id,\n         };\n \n-        csearch::each_child_of_item(&self.session.cstore,\n-                                    def_id,\n-                                    |def_like, child_name, visibility| {\n-                                        debug!(\"(populating external module) ... found ident: {}\",\n-                                               child_name);\n-                                        self.build_reduced_graph_for_external_crate_def(module,\n-                                                                                        def_like,\n-                                                                                        child_name,\n-                                                                                        visibility)\n-                                    });\n+        for child in self.session.cstore.item_children(def_id) {\n+            debug!(\"(populating external module) ... found ident: {}\",\n+                   child.name);\n+            self.build_reduced_graph_for_external_crate_def(module, child);\n+        }\n         module.populated.set(true)\n     }\n \n@@ -803,13 +787,10 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     /// Builds the reduced graph rooted at the 'use' directive for an external\n     /// crate.\n     fn build_reduced_graph_for_external_crate(&mut self, root: &Rc<Module>) {\n-        csearch::each_top_level_item_of_crate(&self.session.cstore,\n-                                              root.def_id()\n-                                                  .unwrap()\n-                                                  .krate,\n-                                              |def_like, name, visibility| {\n-            self.build_reduced_graph_for_external_crate_def(root, def_like, name, visibility)\n-        });\n+        let root_cnum = root.def_id().unwrap().krate;\n+        for child in self.session.cstore.crate_top_level_items(root_cnum) {\n+            self.build_reduced_graph_for_external_crate_def(root, child);\n+        }\n     }\n \n     /// Creates and adds an import directive to the given module."}, {"sha": "6bfe9cd393e7166817c5db2d1d62861a64730584", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f5fbefa3af48ed44b002a7423d6cbd74e4018c9c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5fbefa3af48ed44b002a7423d6cbd74e4018c9c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f5fbefa3af48ed44b002a7423d6cbd74e4018c9c", "patch": "@@ -54,8 +54,7 @@ use self::FallbackChecks::*;\n use rustc::front::map as hir_map;\n use rustc::session::Session;\n use rustc::lint;\n-use rustc::metadata::csearch;\n-use rustc::metadata::decoder::{DefLike, DlDef};\n+use rustc::metadata::util::{CrateStore, DefLike, DlDef};\n use rustc::middle::def::*;\n use rustc::middle::def_id::DefId;\n use rustc::middle::pat_util::pat_bindings_hygienic;\n@@ -1235,7 +1234,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         if let Some(node_id) = self.ast_map.as_local_node_id(did) {\n             self.ast_map.expect_item(node_id).name\n         } else {\n-            csearch::get_trait_name(&self.session.cstore, did)\n+            self.session.cstore.item_name(did)\n         }\n     }\n \n@@ -3298,7 +3297,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 };\n                 sig.explicit_self.node == hir::SelfStatic\n             } else {\n-                csearch::is_static_method(&this.session.cstore, did)\n+                this.session.cstore.is_static_method(did)\n             }\n         }\n "}, {"sha": "6050e8bd95b2dd46ee034e51381cf00681cb4ba2", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f5fbefa3af48ed44b002a7423d6cbd74e4018c9c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5fbefa3af48ed44b002a7423d6cbd74e4018c9c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f5fbefa3af48ed44b002a7423d6cbd74e4018c9c", "patch": "@@ -22,7 +22,7 @@ use middle::def_id::DefId;\n use middle::lang_items::FnOnceTraitLangItem;\n use middle::subst::Substs;\n use middle::traits::{Obligation, SelectionContext};\n-use metadata::{csearch, cstore, decoder};\n+use metadata::util::{self as mdutil, CrateStore, DefLike};\n use util::nodemap::{FnvHashSet};\n \n use syntax::ast;\n@@ -418,31 +418,32 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n         fn handle_external_def(traits: &mut AllTraitsVec,\n                                external_mods: &mut FnvHashSet<DefId>,\n                                ccx: &CrateCtxt,\n-                               cstore: &cstore::CStore,\n-                               dl: decoder::DefLike) {\n+                               cstore: &mdutil::CrateStore,\n+                               dl: mdutil::DefLike) {\n             match dl {\n-                decoder::DlDef(def::DefTrait(did)) => {\n+                mdutil::DlDef(def::DefTrait(did)) => {\n                     traits.push(TraitInfo::new(did));\n                 }\n-                decoder::DlDef(def::DefMod(did)) => {\n+                mdutil::DlDef(def::DefMod(did)) => {\n                     if !external_mods.insert(did) {\n                         return;\n                     }\n-                    csearch::each_child_of_item(cstore, did, |dl, _, _| {\n+                    for child in cstore.item_children(did) {\n                         handle_external_def(traits, external_mods,\n-                                            ccx, cstore, dl)\n-                    })\n+                                            ccx, cstore, child.def)\n+                    }\n                 }\n                 _ => {}\n             }\n         }\n-        let cstore = &ccx.tcx.sess.cstore;\n-        cstore.iter_crate_data(|cnum, _| {\n-            csearch::each_top_level_item_of_crate(cstore, cnum, |dl, _, _| {\n-                handle_external_def(&mut traits,\n-                                    &mut external_mods,\n-                                    ccx, cstore, dl)\n-            })\n+        let cstore: &mdutil::CrateStore = &ccx.tcx.sess.cstore;\n+\n+        // FIXME: privatize this\n+        ccx.tcx.sess.cstore.iter_crate_data(|cnum, _| {\n+            for child in cstore.crate_top_level_items(cnum) {\n+                handle_external_def(&mut traits, &mut external_mods,\n+                                    ccx, cstore, child.def)\n+            }\n         });\n \n         *ccx.all_traits.borrow_mut() = Some(traits);"}]}