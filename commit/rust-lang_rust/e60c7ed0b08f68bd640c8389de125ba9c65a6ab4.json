{"sha": "e60c7ed0b08f68bd640c8389de125ba9c65a6ab4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MGM3ZWQwYjA4ZjY4YmQ2NDBjODM4OWRlMTI1YmE5YzY1YTZhYjQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-07-01T16:14:29Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-07-11T17:02:10Z"}, "message": "rustc_codegen_ssa: try to make codegen_get_discr more readable.", "tree": {"sha": "479e81f46def0a6165d07bb8bdec27273f4d948a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/479e81f46def0a6165d07bb8bdec27273f4d948a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e60c7ed0b08f68bd640c8389de125ba9c65a6ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e60c7ed0b08f68bd640c8389de125ba9c65a6ab4", "html_url": "https://github.com/rust-lang/rust/commit/e60c7ed0b08f68bd640c8389de125ba9c65a6ab4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e60c7ed0b08f68bd640c8389de125ba9c65a6ab4/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb6b4a5ed1cd377c5cfd97721ad12f52e63dd41", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb6b4a5ed1cd377c5cfd97721ad12f52e63dd41", "html_url": "https://github.com/rust-lang/rust/commit/4bb6b4a5ed1cd377c5cfd97721ad12f52e63dd41"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "6b33b6c5cbb80439af114f1b58c61e7cd64f5f58", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e60c7ed0b08f68bd640c8389de125ba9c65a6ab4/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60c7ed0b08f68bd640c8389de125ba9c65a6ab4/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=e60c7ed0b08f68bd640c8389de125ba9c65a6ab4", "patch": "@@ -228,8 +228,11 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n             }\n         };\n \n-        let discr = self.project_field(bx, discr_index);\n-        let lldiscr = bx.load_operand(discr).immediate();\n+        // Read the tag/niche-encoded discriminant from memory.\n+        let encoded_discr = self.project_field(bx, discr_index);\n+        let encoded_discr = bx.load_operand(encoded_discr);\n+\n+        // Decode the discriminant (specifically if it's niche-encoded).\n         match *discr_kind {\n             layout::DiscriminantKind::Tag => {\n                 let signed = match discr_scalar.value {\n@@ -240,38 +243,49 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                     layout::Int(_, signed) => !discr_scalar.is_bool() && signed,\n                     _ => false\n                 };\n-                bx.intcast(lldiscr, cast_to, signed)\n+                bx.intcast(encoded_discr.immediate(), cast_to, signed)\n             }\n             layout::DiscriminantKind::Niche {\n                 dataful_variant,\n                 ref niche_variants,\n                 niche_start,\n             } => {\n-                let niche_llty = bx.cx().immediate_backend_type(discr.layout);\n-                if niche_variants.start() == niche_variants.end() {\n+                let niche_llty = bx.cx().immediate_backend_type(encoded_discr.layout);\n+                let encoded_discr = encoded_discr.immediate();\n+                let (is_niche, niche_discr) = if niche_variants.start() == niche_variants.end() {\n+                    // Special case for when we can use a simple equality check,\n+                    // which covers null pointers, and needs simpler codegen.\n                     // FIXME(eddyb): check the actual primitive type here.\n-                    let niche_llval = if niche_start == 0 {\n+                    let encoded_niche = if niche_start == 0 {\n                         // HACK(eddyb): using `c_null` as it works on all types.\n                         bx.cx().const_null(niche_llty)\n                     } else {\n                         bx.cx().const_uint_big(niche_llty, niche_start)\n                     };\n-                    let select_arg = bx.icmp(IntPredicate::IntEQ, lldiscr, niche_llval);\n-                    bx.select(select_arg,\n+                    (\n+                        bx.icmp(IntPredicate::IntEQ, encoded_discr, encoded_niche),\n                         bx.cx().const_uint(cast_to, niche_variants.start().as_u32() as u64),\n-                        bx.cx().const_uint(cast_to, dataful_variant.as_u32() as u64))\n+                    )\n                 } else {\n-                    // Rebase from niche values to discriminant values.\n+                    // Rebase from niche values to discriminants, and check\n+                    // whether the result is in range for the niche variants.\n+                    // FIXME(#61696) the range check is sometimes incorrect.\n                     let delta = niche_start.wrapping_sub(niche_variants.start().as_u32() as u128);\n-                    let lldiscr = bx.sub(lldiscr, bx.cx().const_uint_big(niche_llty, delta));\n-                    let lldiscr_max =\n+                    let niche_discr =\n+                        bx.sub(encoded_discr, bx.cx().const_uint_big(niche_llty, delta));\n+                    let niche_discr_max =\n                         bx.cx().const_uint(niche_llty, niche_variants.end().as_u32() as u64);\n-                    let select_arg = bx.icmp(IntPredicate::IntULE, lldiscr, lldiscr_max);\n-                    let cast = bx.intcast(lldiscr, cast_to, false);\n-                    bx.select(select_arg,\n-                        cast,\n-                        bx.cx().const_uint(cast_to, dataful_variant.as_u32() as u64))\n-                }\n+                    (\n+                        bx.icmp(IntPredicate::IntULE, niche_discr, niche_discr_max),\n+                        niche_discr,\n+                    )\n+                };\n+                let niche_discr = bx.intcast(niche_discr, cast_to, false);\n+                bx.select(\n+                    is_niche,\n+                    niche_discr,\n+                    bx.cx().const_uint(cast_to, dataful_variant.as_u32() as u64),\n+                )\n             }\n         }\n     }"}]}