{"sha": "b42562b5dee4f4ce23094c7bab6406e3b00f90ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MjU2MmI1ZGVlNGY0Y2UyMzA5NGM3YmFiNjQwNmUzYjAwZjkwYWQ=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-04T04:39:35Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-12T08:05:00Z"}, "message": "Make incorrect case diagnostic work inside of functions", "tree": {"sha": "8711713d749b19f22a534bb3dd1925063d1baade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8711713d749b19f22a534bb3dd1925063d1baade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b42562b5dee4f4ce23094c7bab6406e3b00f90ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b42562b5dee4f4ce23094c7bab6406e3b00f90ad", "html_url": "https://github.com/rust-lang/rust/commit/b42562b5dee4f4ce23094c7bab6406e3b00f90ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b42562b5dee4f4ce23094c7bab6406e3b00f90ad/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ec1741b651bd13e4e5e6224f2e2c5c503846a6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec1741b651bd13e4e5e6224f2e2c5c503846a6b", "html_url": "https://github.com/rust-lang/rust/commit/9ec1741b651bd13e4e5e6224f2e2c5c503846a6b"}], "stats": {"total": 313, "additions": 280, "deletions": 33}, "files": [{"sha": "a8b3fe844a5324a3777be38330d51e49a688e0de", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b42562b5dee4f4ce23094c7bab6406e3b00f90ad/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42562b5dee4f4ce23094c7bab6406e3b00f90ad/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=b42562b5dee4f4ce23094c7bab6406e3b00f90ad", "patch": "@@ -95,6 +95,12 @@ impl ItemScope {\n         self.impls.iter().copied()\n     }\n \n+    pub fn values(\n+        &self,\n+    ) -> impl Iterator<Item = (ModuleDefId, Visibility)> + ExactSizeIterator + '_ {\n+        self.values.values().copied()\n+    }\n+\n     pub fn visibility_of(&self, def: ModuleDefId) -> Option<Visibility> {\n         self.name_of(ItemInNs::Types(def))\n             .or_else(|| self.name_of(ItemInNs::Values(def)))"}, {"sha": "40f8c8ba2d7f5bc5306fcfa1ce969f5afd63c7c1", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b42562b5dee4f4ce23094c7bab6406e3b00f90ad/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42562b5dee4f4ce23094c7bab6406e3b00f90ad/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=b42562b5dee4f4ce23094c7bab6406e3b00f90ad", "patch": "@@ -281,7 +281,7 @@ impl Diagnostic for IncorrectCase {\n \n     fn message(&self) -> String {\n         format!(\n-            \"{} `{}` should have a {} name, e.g. `{}`\",\n+            \"{} `{}` should have {} name, e.g. `{}`\",\n             self.ident_type,\n             self.ident_text,\n             self.expected_case.to_string(),\n@@ -339,6 +339,8 @@ mod tests {\n                         let impl_data = self.impl_data(impl_id);\n                         for item in impl_data.items.iter() {\n                             if let AssocItemId::FunctionId(f) = item {\n+                                let mut sink = DiagnosticSinkBuilder::new().build(&mut cb);\n+                                validate_module_item(self, ModuleDefId::FunctionId(*f), &mut sink);\n                                 fns.push(*f)\n                             }\n                         }"}, {"sha": "d1c51849a3ae7de050b19d6e6640ab073bc7bdea", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 245, "deletions": 32, "changes": 277, "blob_url": "https://github.com/rust-lang/rust/blob/b42562b5dee4f4ce23094c7bab6406e3b00f90ad/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42562b5dee4f4ce23094c7bab6406e3b00f90ad/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=b42562b5dee4f4ce23094c7bab6406e3b00f90ad", "patch": "@@ -5,23 +5,13 @@\n //! - enum fields (e.g. `enum Foo { Variant { field: u8 } }`)\n //! - function/method arguments (e.g. `fn foo(arg: u8)`)\n \n-// TODO: Temporary, to not see warnings until module is somewhat complete.\n-// If you see these lines in the pull request, feel free to call me stupid :P.\n-#![allow(dead_code, unused_imports, unused_variables)]\n-\n mod str_helpers;\n \n-use std::sync::Arc;\n-\n use hir_def::{\n     adt::VariantData,\n-    body::Body,\n-    db::DefDatabase,\n-    expr::{Expr, ExprId, UnaryOp},\n-    item_tree::ItemTreeNode,\n-    resolver::{resolver_for_expr, ResolveValueResult, ValueNs},\n+    expr::{Pat, PatId},\n     src::HasSource,\n-    AdtId, EnumId, FunctionId, Lookup, ModuleDefId, StructId,\n+    AdtId, ConstId, EnumId, FunctionId, Lookup, ModuleDefId, StaticId, StructId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -35,8 +25,6 @@ use syntax::{\n use crate::{\n     db::HirDatabase,\n     diagnostics::{decl_check::str_helpers::*, CaseType, IncorrectCase},\n-    lower::CallableDefId,\n-    ApplicationTy, InferenceResult, Ty, TypeCtor,\n };\n \n pub(super) struct DeclValidator<'a, 'b: 'a> {\n@@ -64,12 +52,25 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         match self.owner {\n             ModuleDefId::FunctionId(func) => self.validate_func(db, func),\n             ModuleDefId::AdtId(adt) => self.validate_adt(db, adt),\n+            ModuleDefId::ConstId(const_id) => self.validate_const(db, const_id),\n+            ModuleDefId::StaticId(static_id) => self.validate_static(db, static_id),\n             _ => return,\n         }\n     }\n \n+    fn validate_adt(&mut self, db: &dyn HirDatabase, adt: AdtId) {\n+        match adt {\n+            AdtId::StructId(struct_id) => self.validate_struct(db, struct_id),\n+            AdtId::EnumId(enum_id) => self.validate_enum(db, enum_id),\n+            AdtId::UnionId(_) => {\n+                // Unions aren't yet supported by this validator.\n+            }\n+        }\n+    }\n+\n     fn validate_func(&mut self, db: &dyn HirDatabase, func: FunctionId) {\n         let data = db.function_data(func);\n+        let body = db.body(func.into());\n \n         // 1. Check the function name.\n         let function_name = data.name.to_string();\n@@ -87,25 +88,64 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         // 2. Check the param names.\n         let mut fn_param_replacements = Vec::new();\n \n-        for param_name in data.param_names.iter().cloned().filter_map(|i| i) {\n+        for pat_id in body.params.iter().cloned() {\n+            let pat = &body[pat_id];\n+\n+            let param_name = match pat {\n+                Pat::Bind { name, .. } => name,\n+                _ => continue,\n+            };\n+\n             let name = param_name.to_string();\n             if let Some(new_name) = to_lower_snake_case(&name) {\n                 let replacement = Replacement {\n-                    current_name: param_name,\n+                    current_name: param_name.clone(),\n                     suggested_text: new_name,\n                     expected_case: CaseType::LowerSnakeCase,\n                 };\n                 fn_param_replacements.push(replacement);\n             }\n         }\n \n-        // 3. If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n+        // 3. Check the patterns inside the function body.\n+        let mut pats_replacements = Vec::new();\n+\n+        for (pat_idx, pat) in body.pats.iter() {\n+            if body.params.contains(&pat_idx) {\n+                // We aren't interested in function parameters, we've processed them above.\n+                continue;\n+            }\n+\n+            let bind_name = match pat {\n+                Pat::Bind { name, .. } => name,\n+                _ => continue,\n+            };\n+\n+            let name = bind_name.to_string();\n+            if let Some(new_name) = to_lower_snake_case(&name) {\n+                let replacement = Replacement {\n+                    current_name: bind_name.clone(),\n+                    suggested_text: new_name,\n+                    expected_case: CaseType::LowerSnakeCase,\n+                };\n+                pats_replacements.push((pat_idx, replacement));\n+            }\n+        }\n+\n+        // 4. If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n         self.create_incorrect_case_diagnostic_for_func(\n             func,\n             db,\n             fn_name_replacement,\n             fn_param_replacements,\n-        )\n+        );\n+        self.create_incorrect_case_diagnostic_for_variables(func, db, pats_replacements);\n+\n+        // 5. Recursively validate inner scope items, such as static variables and constants.\n+        for (item_id, _) in body.item_scope.values() {\n+            let mut validator = DeclValidator::new(item_id, self.sink);\n+            validator.validate_item(db);\n+        }\n     }\n \n     /// Given the information about incorrect names in the function declaration, looks up into the source code\n@@ -125,6 +165,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         let fn_loc = func.lookup(db.upcast());\n         let fn_src = fn_loc.source(db.upcast());\n \n+        // 1. Diagnostic for function name.\n         if let Some(replacement) = fn_name_replacement {\n             let ast_ptr = if let Some(name) = fn_src.value.name() {\n                 name\n@@ -150,6 +191,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             self.sink.push(diagnostic);\n         }\n \n+        // 2. Diagnostics for function params.\n         let fn_params_list = match fn_src.value.param_list() {\n             Some(params) => params,\n             None => {\n@@ -197,12 +239,38 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         }\n     }\n \n-    fn validate_adt(&mut self, db: &dyn HirDatabase, adt: AdtId) {\n-        match adt {\n-            AdtId::StructId(struct_id) => self.validate_struct(db, struct_id),\n-            AdtId::EnumId(enum_id) => self.validate_enum(db, enum_id),\n-            AdtId::UnionId(_) => {\n-                // Unions aren't yet supported by this validator.\n+    /// Given the information about incorrect variable names, looks up into the source code\n+    /// for exact locations and adds diagnostics into the sink.\n+    fn create_incorrect_case_diagnostic_for_variables(\n+        &mut self,\n+        func: FunctionId,\n+        db: &dyn HirDatabase,\n+        pats_replacements: Vec<(PatId, Replacement)>,\n+    ) {\n+        // XXX: only look at source_map if we do have missing fields\n+        if pats_replacements.is_empty() {\n+            return;\n+        }\n+\n+        let (_, source_map) = db.body_with_source_map(func.into());\n+\n+        for (id, replacement) in pats_replacements {\n+            if let Ok(source_ptr) = source_map.pat_syntax(id) {\n+                if let Some(expr) = source_ptr.value.as_ref().left() {\n+                    let root = source_ptr.file_syntax(db.upcast());\n+                    if let ast::Pat::IdentPat(ident_pat) = expr.to_node(&root) {\n+                        let diagnostic = IncorrectCase {\n+                            file: source_ptr.file_id,\n+                            ident_type: \"Variable\".to_string(),\n+                            ident: AstPtr::new(&ident_pat).into(),\n+                            expected_case: replacement.expected_case,\n+                            ident_text: replacement.current_name.to_string(),\n+                            suggested_text: replacement.suggested_text,\n+                        };\n+\n+                        self.sink.push(diagnostic);\n+                    }\n+                }\n             }\n         }\n     }\n@@ -246,7 +314,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             db,\n             struct_name_replacement,\n             struct_fields_replacements,\n-        )\n+        );\n     }\n \n     /// Given the information about incorrect names in the struct declaration, looks up into the source code\n@@ -464,6 +532,86 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             self.sink.push(diagnostic);\n         }\n     }\n+\n+    fn validate_const(&mut self, db: &dyn HirDatabase, const_id: ConstId) {\n+        let data = db.const_data(const_id);\n+\n+        let name = match &data.name {\n+            Some(name) => name,\n+            None => return,\n+        };\n+\n+        let const_name = name.to_string();\n+        let replacement = if let Some(new_name) = to_upper_snake_case(&const_name) {\n+            Replacement {\n+                current_name: name.clone(),\n+                suggested_text: new_name,\n+                expected_case: CaseType::UpperSnakeCase,\n+            }\n+        } else {\n+            // Nothing to do here.\n+            return;\n+        };\n+\n+        let const_loc = const_id.lookup(db.upcast());\n+        let const_src = const_loc.source(db.upcast());\n+\n+        let ast_ptr = match const_src.value.name() {\n+            Some(name) => name,\n+            None => return,\n+        };\n+\n+        let diagnostic = IncorrectCase {\n+            file: const_src.file_id,\n+            ident_type: \"Constant\".to_string(),\n+            ident: AstPtr::new(&ast_ptr).into(),\n+            expected_case: replacement.expected_case,\n+            ident_text: replacement.current_name.to_string(),\n+            suggested_text: replacement.suggested_text,\n+        };\n+\n+        self.sink.push(diagnostic);\n+    }\n+\n+    fn validate_static(&mut self, db: &dyn HirDatabase, static_id: StaticId) {\n+        let data = db.static_data(static_id);\n+\n+        let name = match &data.name {\n+            Some(name) => name,\n+            None => return,\n+        };\n+\n+        let static_name = name.to_string();\n+        let replacement = if let Some(new_name) = to_upper_snake_case(&static_name) {\n+            Replacement {\n+                current_name: name.clone(),\n+                suggested_text: new_name,\n+                expected_case: CaseType::UpperSnakeCase,\n+            }\n+        } else {\n+            // Nothing to do here.\n+            return;\n+        };\n+\n+        let static_loc = static_id.lookup(db.upcast());\n+        let static_src = static_loc.source(db.upcast());\n+\n+        let ast_ptr = match static_src.value.name() {\n+            Some(name) => name,\n+            None => return,\n+        };\n+\n+        let diagnostic = IncorrectCase {\n+            file: static_src.file_id,\n+            ident_type: \"Static variable\".to_string(),\n+            ident: AstPtr::new(&ast_ptr).into(),\n+            expected_case: replacement.expected_case,\n+            ident_text: replacement.current_name.to_string(),\n+            suggested_text: replacement.suggested_text,\n+        };\n+\n+        self.sink.push(diagnostic);\n+    }\n }\n \n fn names_equal(left: Option<ast::Name>, right: &Name) -> bool {\n@@ -491,7 +639,7 @@ mod tests {\n         check_diagnostics(\n             r#\"\n fn NonSnakeCaseName() {}\n-// ^^^^^^^^^^^^^^^^ Function `NonSnakeCaseName` should have a snake_case name, e.g. `non_snake_case_name`\n+// ^^^^^^^^^^^^^^^^ Function `NonSnakeCaseName` should have snake_case name, e.g. `non_snake_case_name`\n \"#,\n         );\n     }\n@@ -501,10 +649,24 @@ fn NonSnakeCaseName() {}\n         check_diagnostics(\n             r#\"\n fn foo(SomeParam: u8) {}\n-    // ^^^^^^^^^ Argument `SomeParam` should have a snake_case name, e.g. `some_param`\n+    // ^^^^^^^^^ Argument `SomeParam` should have snake_case name, e.g. `some_param`\n \n fn foo2(ok_param: &str, CAPS_PARAM: u8) {}\n-                     // ^^^^^^^^^^ Argument `CAPS_PARAM` should have a snake_case name, e.g. `caps_param`\n+                     // ^^^^^^^^^^ Argument `CAPS_PARAM` should have snake_case name, e.g. `caps_param`\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn incorrect_variable_names() {\n+        check_diagnostics(\n+            r#\"\n+fn foo() {\n+    let SOME_VALUE = 10;\n+     // ^^^^^^^^^^ Variable `SOME_VALUE` should have a snake_case name, e.g. `some_value`\n+    let AnotherValue = 20;\n+     // ^^^^^^^^^^^^ Variable `AnotherValue` should have snake_case name, e.g. `another_value`\n+}\n \"#,\n         );\n     }\n@@ -514,7 +676,7 @@ fn foo2(ok_param: &str, CAPS_PARAM: u8) {}\n         check_diagnostics(\n             r#\"\n struct non_camel_case_name {}\n-    // ^^^^^^^^^^^^^^^^^^^ Structure `non_camel_case_name` should have a CamelCase name, e.g. `NonCamelCaseName`\n+    // ^^^^^^^^^^^^^^^^^^^ Structure `non_camel_case_name` should have CamelCase name, e.g. `NonCamelCaseName`\n \"#,\n         );\n     }\n@@ -524,7 +686,7 @@ struct non_camel_case_name {}\n         check_diagnostics(\n             r#\"\n struct SomeStruct { SomeField: u8 }\n-                 // ^^^^^^^^^ Field `SomeField` should have a snake_case name, e.g. `some_field`\n+                 // ^^^^^^^^^ Field `SomeField` should have snake_case name, e.g. `some_field`\n \"#,\n         );\n     }\n@@ -534,7 +696,7 @@ struct SomeStruct { SomeField: u8 }\n         check_diagnostics(\n             r#\"\n enum some_enum { Val(u8) }\n-  // ^^^^^^^^^ Enum `some_enum` should have a CamelCase name, e.g. `SomeEnum`\n+  // ^^^^^^^^^ Enum `some_enum` should have CamelCase name, e.g. `SomeEnum`\n \"#,\n         );\n     }\n@@ -544,7 +706,58 @@ enum some_enum { Val(u8) }\n         check_diagnostics(\n             r#\"\n enum SomeEnum { SOME_VARIANT(u8) }\n-             // ^^^^^^^^^^^^ Variant `SOME_VARIANT` should have a CamelCase name, e.g. `SomeVariant`\n+             // ^^^^^^^^^^^^ Variant `SOME_VARIANT` should have CamelCase name, e.g. `SomeVariant`\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn incorrect_const_name() {\n+        check_diagnostics(\n+            r#\"\n+const some_weird_const: u8 = 10;\n+   // ^^^^^^^^^^^^^^^^ Constant `some_weird_const` should have UPPER_SNAKE_CASE name, e.g. `SOME_WEIRD_CONST`\n+\n+fn func() {\n+    const someConstInFunc: &str = \"hi there\";\n+       // ^^^^^^^^^^^^^^^ Constant `someConstInFunc` should have UPPER_SNAKE_CASE name, e.g. `SOME_CONST_IN_FUNC`\n+\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn incorrect_static_name() {\n+        check_diagnostics(\n+            r#\"\n+static some_weird_const: u8 = 10;\n+    // ^^^^^^^^^^^^^^^^ Static variable `some_weird_const` should have UPPER_SNAKE_CASE name, e.g. `SOME_WEIRD_CONST`\n+\n+fn func() {\n+    static someConstInFunc: &str = \"hi there\";\n+        // ^^^^^^^^^^^^^^^ Static variable `someConstInFunc` should have UPPER_SNAKE_CASE name, e.g. `SOME_CONST_IN_FUNC`\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn fn_inside_impl_struct() {\n+        check_diagnostics(\n+            r#\"\n+struct someStruct;\n+    // ^^^^^^^^^^ Structure `someStruct` should have CamelCase name, e.g. `SomeStruct`\n+\n+impl someStruct {\n+    fn SomeFunc(&self) {\n+    // ^^^^^^^^ Function `SomeFunc` should have snake_case name, e.g. `some_func`\n+        static someConstInFunc: &str = \"hi there\";\n+            // ^^^^^^^^^^^^^^^ Static variable `someConstInFunc` should have UPPER_SNAKE_CASE name, e.g. `SOME_CONST_IN_FUNC`\n+        let WHY_VAR_IS_CAPS = 10;\n+         // ^^^^^^^^^^^^^^^ Variable `WHY_VAR_IS_CAPS` should have snake_case name, e.g. `why_var_is_caps`\n+    }\n+}\n \"#,\n         );\n     }"}, {"sha": "70d5cbd3831c30a7e82068022e291a54be34f403", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b42562b5dee4f4ce23094c7bab6406e3b00f90ad/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42562b5dee4f4ce23094c7bab6406e3b00f90ad/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=b42562b5dee4f4ce23094c7bab6406e3b00f90ad", "patch": "@@ -877,6 +877,32 @@ pub fn SomeFn<|>(val: u8) -> u8 {\n pub fn some_fn(val: u8) -> u8 {\n     if val != 0 { some_fn(val - 1) } else { val }\n }\n+\"#,\n+        );\n+\n+        check_fixes(\n+            r#\"\n+fn some_fn() {\n+    let whatAWeird_Formatting<|> = 10;\n+    another_func(whatAWeird_Formatting);\n+}\n+\"#,\n+            r#\"\n+fn some_fn() {\n+    let what_a_weird_formatting = 10;\n+    another_func(what_a_weird_formatting);\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_uppercase_const_no_diagnostics() {\n+        check_no_diagnostics(\n+            r#\"\n+fn foo() {\n+    const ANOTHER_ITEM<|>: &str = \"some_item\";\n+}\n \"#,\n         );\n     }"}]}