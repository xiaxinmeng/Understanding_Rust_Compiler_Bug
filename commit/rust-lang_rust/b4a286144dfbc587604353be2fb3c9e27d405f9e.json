{"sha": "b4a286144dfbc587604353be2fb3c9e27d405f9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YTI4NjE0NGRmYmM1ODc2MDQzNTNiZTJmYjNjOWUyN2Q0MDVmOWU=", "commit": {"author": {"name": "Chris Wong", "email": "lambda.fairy@gmail.com", "date": "2015-02-13T06:23:28Z"}, "committer": {"name": "Chris Wong", "email": "lambda.fairy@gmail.com", "date": "2015-02-13T06:40:22Z"}, "message": "Rename the \"unsafe\" lang item to \"unsafe_cell\"", "tree": {"sha": "1ec273c698a9aca695a6a929f80ae58ec72d5b3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ec273c698a9aca695a6a929f80ae58ec72d5b3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4a286144dfbc587604353be2fb3c9e27d405f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a286144dfbc587604353be2fb3c9e27d405f9e", "html_url": "https://github.com/rust-lang/rust/commit/b4a286144dfbc587604353be2fb3c9e27d405f9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4a286144dfbc587604353be2fb3c9e27d405f9e/comments", "author": {"login": "lambda-fairy", "id": 1572323, "node_id": "MDQ6VXNlcjE1NzIzMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1572323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda-fairy", "html_url": "https://github.com/lambda-fairy", "followers_url": "https://api.github.com/users/lambda-fairy/followers", "following_url": "https://api.github.com/users/lambda-fairy/following{/other_user}", "gists_url": "https://api.github.com/users/lambda-fairy/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda-fairy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda-fairy/subscriptions", "organizations_url": "https://api.github.com/users/lambda-fairy/orgs", "repos_url": "https://api.github.com/users/lambda-fairy/repos", "events_url": "https://api.github.com/users/lambda-fairy/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda-fairy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lambda-fairy", "id": 1572323, "node_id": "MDQ6VXNlcjE1NzIzMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1572323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda-fairy", "html_url": "https://github.com/lambda-fairy", "followers_url": "https://api.github.com/users/lambda-fairy/followers", "following_url": "https://api.github.com/users/lambda-fairy/following{/other_user}", "gists_url": "https://api.github.com/users/lambda-fairy/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda-fairy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda-fairy/subscriptions", "organizations_url": "https://api.github.com/users/lambda-fairy/orgs", "repos_url": "https://api.github.com/users/lambda-fairy/repos", "events_url": "https://api.github.com/users/lambda-fairy/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda-fairy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2efe96aeada34c1e2dc267a1a35948bdda91f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2efe96aeada34c1e2dc267a1a35948bdda91f8", "html_url": "https://github.com/rust-lang/rust/commit/ba2efe96aeada34c1e2dc267a1a35948bdda91f8"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "cf293ded13f00b9dc5f99e55797d257915ba2ffc", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4a286144dfbc587604353be2fb3c9e27d405f9e/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a286144dfbc587604353be2fb3c9e27d405f9e/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=b4a286144dfbc587604353be2fb3c9e27d405f9e", "patch": "@@ -649,7 +649,8 @@ impl<'b, T> DerefMut for RefMut<'b, T> {\n ///\n /// **NOTE:** `UnsafeCell<T>`'s fields are public to allow static initializers. It is not\n /// recommended to access its fields directly, `get` should be used instead.\n-#[lang=\"unsafe\"]\n+#[cfg_attr(stage0, lang=\"unsafe\")]  // NOTE: remove after next snapshot\n+#[cfg_attr(not(stage0), lang=\"unsafe_cell\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct UnsafeCell<T> {\n     /// Wrapped value"}, {"sha": "e13a5672778e24da1a4a88980b21fc01eacff0ce", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a286144dfbc587604353be2fb3c9e27d405f9e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a286144dfbc587604353be2fb3c9e27d405f9e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=b4a286144dfbc587604353be2fb3c9e27d405f9e", "patch": "@@ -271,7 +271,7 @@ lets_do_this! {\n     RangeToStructLangItem,           \"range_to\",                range_to_struct;\n     RangeFullStructLangItem,         \"range_full\",              range_full_struct;\n \n-    UnsafeTypeLangItem,              \"unsafe\",                  unsafe_type;\n+    UnsafeCellTypeLangItem,          \"unsafe_cell\",             unsafe_cell_type;\n \n     DerefTraitLangItem,              \"deref\",                   deref_trait;\n     DerefMutTraitLangItem,           \"deref_mut\",               deref_mut_trait;"}, {"sha": "6f58f4655fed1ed944805e58485c9525a98b1e8d", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a286144dfbc587604353be2fb3c9e27d405f9e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a286144dfbc587604353be2fb3c9e27d405f9e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=b4a286144dfbc587604353be2fb3c9e27d405f9e", "patch": "@@ -1654,7 +1654,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ty::BoundSync => {\n                     if\n                         Some(def_id) == tcx.lang_items.managed_bound() ||\n-                        Some(def_id) == tcx.lang_items.unsafe_type()\n+                        Some(def_id) == tcx.lang_items.unsafe_cell_type()\n                     {\n                         return Err(Unimplemented)\n                     }"}, {"sha": "e276683236f866a67efc7a75488d7641c25c233f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a286144dfbc587604353be2fb3c9e27d405f9e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a286144dfbc587604353be2fb3c9e27d405f9e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b4a286144dfbc587604353be2fb3c9e27d405f9e", "patch": "@@ -3577,7 +3577,7 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n                         -> TypeContents {\n         if Some(did) == cx.lang_items.managed_bound() {\n             tc | TC::Managed\n-        } else if Some(did) == cx.lang_items.unsafe_type() {\n+        } else if Some(did) == cx.lang_items.unsafe_cell_type() {\n             tc | TC::InteriorUnsafe\n         } else {\n             tc"}, {"sha": "66fce6dded34f88281801336cd13527deb20f106", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a286144dfbc587604353be2fb3c9e27d405f9e/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a286144dfbc587604353be2fb3c9e27d405f9e/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=b4a286144dfbc587604353be2fb3c9e27d405f9e", "patch": "@@ -453,7 +453,7 @@ fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>,\n     invariant_lang_items[RegionParam as uint] =\n         terms_cx.tcx.lang_items.invariant_lifetime();\n \n-    let unsafe_lang_item = terms_cx.tcx.lang_items.unsafe_type();\n+    let unsafe_lang_item = terms_cx.tcx.lang_items.unsafe_cell_type();\n \n     let covariant = terms_cx.arena.alloc(ConstantTerm(ty::Covariant));\n     let contravariant = terms_cx.arena.alloc(ConstantTerm(ty::Contravariant));"}]}