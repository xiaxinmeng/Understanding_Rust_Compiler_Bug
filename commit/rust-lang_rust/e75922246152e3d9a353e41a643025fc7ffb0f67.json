{"sha": "e75922246152e3d9a353e41a643025fc7ffb0f67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NTkyMjI0NjE1MmUzZDlhMzUzZTQxYTY0MzAyNWZjN2ZmYjBmNjc=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-07T10:14:47Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-07T20:15:57Z"}, "message": "Use `LocalDefId` directly in `Resolver::export_map` and `module_exports` query\n\nThis is to avoid the final conversion from `NodeId` to `HirId`\nduring call to `Resolver::(clone|into)_outputs`.", "tree": {"sha": "0838643f83ddbf8990ab8465d0bd769feff62824", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0838643f83ddbf8990ab8465d0bd769feff62824"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e75922246152e3d9a353e41a643025fc7ffb0f67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e75922246152e3d9a353e41a643025fc7ffb0f67", "html_url": "https://github.com/rust-lang/rust/commit/e75922246152e3d9a353e41a643025fc7ffb0f67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e75922246152e3d9a353e41a643025fc7ffb0f67/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2fc33e0c87a258542cd12d6ffae52c43aa3785a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fc33e0c87a258542cd12d6ffae52c43aa3785a", "html_url": "https://github.com/rust-lang/rust/commit/a2fc33e0c87a258542cd12d6ffae52c43aa3785a"}], "stats": {"total": 64, "additions": 27, "deletions": 37}, "files": [{"sha": "64ccd46a744f503b110212acad386e1768c6c605", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e75922246152e3d9a353e41a643025fc7ffb0f67/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75922246152e3d9a353e41a643025fc7ffb0f67/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=e75922246152e3d9a353e41a643025fc7ffb0f67", "patch": "@@ -693,16 +693,25 @@ impl EncodeContext<'tcx> {\n         vis: &hir::Visibility<'_>,\n     ) {\n         let tcx = self.tcx;\n-        let def_id = tcx.hir().local_def_id(id).to_def_id();\n+        let def_id = tcx.hir().local_def_id(id);\n         debug!(\"EncodeContext::encode_info_for_mod({:?})\", def_id);\n \n         let data = ModData {\n             reexports: match tcx.module_exports(def_id) {\n-                Some(exports) => self.lazy(exports),\n+                Some(exports) => {\n+                    let hir_map = self.tcx.hir();\n+                    self.lazy(\n+                        exports\n+                            .iter()\n+                            .map(|export| export.map_id(|id| hir_map.as_local_hir_id(id))),\n+                    )\n+                }\n                 _ => Lazy::empty(),\n             },\n         };\n \n+        let def_id = def_id.to_def_id();\n+\n         record!(self.tables.kind[def_id] <- EntryKind::Mod(self.lazy(data)));\n         record!(self.tables.visibility[def_id] <- ty::Visibility::from_hir(vis, id, self.tcx));\n         record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));"}, {"sha": "af48c9e94ff82a0167a8478ab18200311a7d22af", "filename": "src/librustc_middle/hir/exports.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e75922246152e3d9a353e41a643025fc7ffb0f67/src%2Flibrustc_middle%2Fhir%2Fexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75922246152e3d9a353e41a643025fc7ffb0f67/src%2Flibrustc_middle%2Fhir%2Fexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fexports.rs?ref=e75922246152e3d9a353e41a643025fc7ffb0f67", "patch": "@@ -1,7 +1,8 @@\n use crate::ty;\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::Res;\n-use rustc_hir::def_id::DefIdMap;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_macros::HashStable;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n@@ -10,7 +11,7 @@ use std::fmt::Debug;\n \n /// This is the replacement export map. It maps a module to all of the exports\n /// within.\n-pub type ExportMap<Id> = DefIdMap<Vec<Export<Id>>>;\n+pub type ExportMap<Id> = FxHashMap<LocalDefId, Vec<Export<Id>>>;\n \n #[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct Export<Id> {"}, {"sha": "16ed9aff8f2a6945524eb8bbaebeeb90a821168b", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e75922246152e3d9a353e41a643025fc7ffb0f67/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75922246152e3d9a353e41a643025fc7ffb0f67/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=e75922246152e3d9a353e41a643025fc7ffb0f67", "patch": "@@ -865,8 +865,8 @@ rustc_queries! {\n     }\n \n     Other {\n-        query module_exports(def_id: DefId) -> Option<&'tcx [Export<hir::HirId>]> {\n-            desc { |tcx| \"looking up items exported by `{}`\", tcx.def_path_str(def_id) }\n+        query module_exports(def_id: LocalDefId) -> Option<&'tcx [Export<LocalDefId>]> {\n+            desc { |tcx| \"looking up items exported by `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n             eval_always\n         }\n     }"}, {"sha": "d5be3508d2d803c14462d5a15cea751461117aee", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e75922246152e3d9a353e41a643025fc7ffb0f67/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75922246152e3d9a353e41a643025fc7ffb0f67/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=e75922246152e3d9a353e41a643025fc7ffb0f67", "patch": "@@ -2,7 +2,7 @@\n \n use crate::arena::Arena;\n use crate::dep_graph::{self, DepConstructor, DepGraph};\n-use crate::hir::exports::Export;\n+use crate::hir::exports::ExportMap;\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintSource};\n@@ -919,7 +919,7 @@ pub struct GlobalCtxt<'tcx> {\n     trait_map: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, StableVec<TraitCandidate>>>,\n \n     /// Export map produced by name resolution.\n-    export_map: FxHashMap<DefId, Vec<Export<hir::HirId>>>,\n+    export_map: ExportMap<LocalDefId>,\n \n     pub(crate) untracked_crate: &'tcx hir::Crate<'tcx>,\n     pub(crate) definitions: &'tcx Definitions,"}, {"sha": "ffbe3a40297c172a3d4ee9e8510d35f44e64bcb2", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75922246152e3d9a353e41a643025fc7ffb0f67/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75922246152e3d9a353e41a643025fc7ffb0f67/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=e75922246152e3d9a353e41a643025fc7ffb0f67", "patch": "@@ -124,7 +124,7 @@ pub struct ResolverOutputs {\n     pub trait_map: FxHashMap<hir::HirId, Vec<hir::TraitCandidate<hir::HirId>>>,\n     pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n     pub maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n-    pub export_map: ExportMap<hir::HirId>,\n+    pub export_map: ExportMap<LocalDefId>,\n     pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in."}, {"sha": "74a8b7e2f556d3c05310419d84cd5ffb32cb07c5", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e75922246152e3d9a353e41a643025fc7ffb0f67/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75922246152e3d9a353e41a643025fc7ffb0f67/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=e75922246152e3d9a353e41a643025fc7ffb0f67", "patch": "@@ -1393,8 +1393,8 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             let is_good_import =\n                 binding.is_import() && !binding.is_ambiguity() && !ident.span.from_expansion();\n             if is_good_import || binding.is_macro_def() {\n-                let res = binding.res();\n-                if res != Res::Err {\n+                let res = binding.res().map_id(|id| this.definitions.local_def_id(id));\n+                if res != def::Res::Err {\n                     reexports.push(Export { ident, res, span: binding.span, vis: binding.vis });\n                 }\n             }\n@@ -1467,7 +1467,9 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n         if !reexports.is_empty() {\n             if let Some(def_id) = module.def_id() {\n-                self.r.export_map.insert(def_id, reexports);\n+                // Call to `expect_local` should be fine because current\n+                // code is only called for local modules.\n+                self.r.export_map.insert(def_id.expect_local(), reexports);\n             }\n         }\n     }"}, {"sha": "6bd73877fab75ae8844b4c63cf80b4bc29623d08", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e75922246152e3d9a353e41a643025fc7ffb0f67/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75922246152e3d9a353e41a643025fc7ffb0f67/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e75922246152e3d9a353e41a643025fc7ffb0f67", "patch": "@@ -878,7 +878,7 @@ pub struct Resolver<'a> {\n \n     /// `CrateNum` resolutions of `extern crate` items.\n     extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n-    export_map: ExportMap<NodeId>,\n+    export_map: ExportMap<LocalDefId>,\n     trait_map: TraitMap<NodeId>,\n \n     /// A map from nodes to anonymous modules.\n@@ -1281,18 +1281,7 @@ impl<'a> Resolver<'a> {\n     pub fn into_outputs(self) -> ResolverOutputs {\n         let definitions = self.definitions;\n         let extern_crate_map = self.extern_crate_map;\n-        let export_map = self\n-            .export_map\n-            .into_iter()\n-            .map(|(k, v)| {\n-                (\n-                    k,\n-                    v.into_iter()\n-                        .map(|e| e.map_id(|id| definitions.node_id_to_hir_id(id)))\n-                        .collect(),\n-                )\n-            })\n-            .collect();\n+        let export_map = self.export_map;\n         let trait_map = self\n             .trait_map\n             .into_iter()\n@@ -1330,18 +1319,7 @@ impl<'a> Resolver<'a> {\n             definitions: self.definitions.clone(),\n             cstore: Box::new(self.cstore().clone()),\n             extern_crate_map: self.extern_crate_map.clone(),\n-            export_map: self\n-                .export_map\n-                .iter()\n-                .map(|(&k, v)| {\n-                    (\n-                        k,\n-                        v.iter()\n-                            .map(|e| e.map_id(|id| self.definitions.node_id_to_hir_id(id)))\n-                            .collect(),\n-                    )\n-                })\n-                .collect(),\n+            export_map: self.export_map.clone(),\n             trait_map: self\n                 .trait_map\n                 .iter()"}]}