{"sha": "ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhOTg4YWZjZGE4ZmMwZTRkOTFiMzk0YzU3YjVmMmI5YWM1N2FkYjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-27T16:24:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-27T16:24:45Z"}, "message": "Auto merge of #83484 - JulianKnodt:infer, r=oli-obk,lcnr\n\nAdd hir::GenericArg::Infer\n\nIn order to extend inference to consts, make an Infer type on hir::GenericArg.", "tree": {"sha": "579e2fddc0218b58758bab9232b4206b2afd505b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/579e2fddc0218b58758bab9232b4206b2afd505b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8", "html_url": "https://github.com/rust-lang/rust/commit/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1270ed0aafe4167ef39103dfc8d74596e9a812fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1270ed0aafe4167ef39103dfc8d74596e9a812fe", "html_url": "https://github.com/rust-lang/rust/commit/1270ed0aafe4167ef39103dfc8d74596e9a812fe"}, {"sha": "74379d4d85ad522f68ce2cb37a6a4c061b37ef82", "url": "https://api.github.com/repos/rust-lang/rust/commits/74379d4d85ad522f68ce2cb37a6a4c061b37ef82", "html_url": "https://github.com/rust-lang/rust/commit/74379d4d85ad522f68ce2cb37a6a4c061b37ef82"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "ad4898d1ccbb5575676414ac158934ed12f7c201", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8", "patch": "@@ -5,7 +5,7 @@ use std::collections::BTreeMap;\n \n use rustc_errors::DiagnosticBuilder;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, walk_inf, NestedVisitorMap, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, GenericArg, Item, ItemKind, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -295,6 +295,14 @@ impl<'a, 'tcx> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n         walk_ty(self, t);\n     }\n \n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+        if let Some(target) = ImplicitHasherType::new(self.cx, &inf.to_ty()) {\n+            self.found.push(target);\n+        }\n+\n+        walk_inf(self, inf);\n+    }\n+\n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }"}, {"sha": "b438d680d2cbded0f1c99b8c2ed210da86147722", "filename": "clippy_lints/src/types/type_complexity.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs?ref=ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_ty, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_ty, walk_inf, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericParamKind, TyKind};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n@@ -39,6 +39,11 @@ struct TypeComplexityVisitor {\n impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n     type Map = Map<'tcx>;\n \n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+      self.score += 1;\n+      walk_inf(self, inf);\n+    }\n+\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'_>) {\n         let (add_score, sub_nest) = match ty.kind {\n             // _, &x and *x have only small overhead; don't mess with nesting level"}, {"sha": "d5ee717accd26461c728990ce8a69465985580fc", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8", "patch": "@@ -8,8 +8,9 @@ use rustc_hir::{\n     self as hir,\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n-    intravisit::{walk_ty, NestedVisitorMap, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Path, QPath, TyKind,\n+    intravisit::{walk_ty, walk_inf, NestedVisitorMap, Visitor},\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Path,\n+    QPath, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -263,6 +264,11 @@ struct SkipTyCollector {\n impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n     type Map = Map<'tcx>;\n \n+    fn visit_infer(&mut self, inf: &hir::InferArg) {\n+      self.types_to_skip.push(inf.hir_id);\n+\n+      walk_inf(self, inf)\n+    }\n     fn visit_ty(&mut self, hir_ty: &hir::Ty<'_>) {\n         self.types_to_skip.push(hir_ty.hir_id);\n "}, {"sha": "6ea360a88a63e3c5169b14ac41571190fc61b0c1", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8", "patch": "@@ -288,6 +288,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (GenericArg::Const(l), GenericArg::Const(r)) => self.eq_body(l.value.body, r.value.body),\n             (GenericArg::Lifetime(l_lt), GenericArg::Lifetime(r_lt)) => Self::eq_lifetime(l_lt, r_lt),\n             (GenericArg::Type(l_ty), GenericArg::Type(r_ty)) => self.eq_ty(l_ty, r_ty),\n+            (GenericArg::Infer(l_inf), GenericArg::Infer(r_inf)) =>\n+              self.eq_ty(&l_inf.to_ty(), &r_inf.to_ty()),\n             _ => false,\n         }\n     }\n@@ -885,7 +887,11 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n \n     pub fn hash_ty(&mut self, ty: &Ty<'_>) {\n         std::mem::discriminant(&ty.kind).hash(&mut self.s);\n-        match ty.kind {\n+        self.hash_tykind(&ty.kind);\n+    }\n+\n+    pub fn hash_tykind(&mut self, ty: &TyKind<'_>) {\n+        match ty {\n             TyKind::Slice(ty) => {\n                 self.hash_ty(ty);\n             },\n@@ -898,7 +904,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n             TyKind::Rptr(lifetime, ref mut_ty) => {\n-                self.hash_lifetime(lifetime);\n+                self.hash_lifetime(*lifetime);\n                 self.hash_ty(mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n@@ -918,7 +924,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 bfn.decl.c_variadic.hash(&mut self.s);\n             },\n             TyKind::Tup(ty_list) => {\n-                for ty in ty_list {\n+                for ty in *ty_list {\n                     self.hash_ty(ty);\n                 }\n             },\n@@ -927,7 +933,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_generic_args(arg_list);\n             },\n             TyKind::TraitObject(_, lifetime, _) => {\n-                self.hash_lifetime(lifetime);\n+                self.hash_lifetime(*lifetime);\n             },\n             TyKind::Typeof(anon_const) => {\n                 self.hash_body(anon_const.body);\n@@ -949,6 +955,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 GenericArg::Lifetime(l) => self.hash_lifetime(l),\n                 GenericArg::Type(ref ty) => self.hash_ty(ty),\n                 GenericArg::Const(ref ca) => self.hash_body(ca.value.body),\n+                GenericArg::Infer(ref inf) => self.hash_ty(&inf.to_ty()),\n             }\n         }\n     }"}, {"sha": "e914dc1c222f681549855fd75bbbd2b6ccbb3202", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8", "patch": "@@ -180,7 +180,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n }\n \n // FIXME: Per https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/infer/at/struct.At.html#method.normalize\n-// this function can be removed once the `normalizie` method does not panic when normalization does\n+// this function can be removed once the `normalize` method does not panic when normalization does\n // not succeed\n /// Checks if `Ty` is normalizable. This function is useful\n /// to avoid crashes on `layout_of`."}]}