{"sha": "3fa95b847be64342562bccd55abb7e55c8daa3f2", "node_id": "C_kwDOAAsO6NoAKDNmYTk1Yjg0N2JlNjQzNDI1NjJiY2NkNTVhYmI3ZTU1YzhkYWEzZjI", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-06T00:53:31Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-30T20:12:21Z"}, "message": "review comments", "tree": {"sha": "9ebf94adf346df1733c28d27b0113c12f89bcc9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ebf94adf346df1733c28d27b0113c12f89bcc9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fa95b847be64342562bccd55abb7e55c8daa3f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fa95b847be64342562bccd55abb7e55c8daa3f2", "html_url": "https://github.com/rust-lang/rust/commit/3fa95b847be64342562bccd55abb7e55c8daa3f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fa95b847be64342562bccd55abb7e55c8daa3f2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "html_url": "https://github.com/rust-lang/rust/commit/62ba3e70a1f01d801d068b84a097e38bd82a8c6e"}], "stats": {"total": 87, "additions": 46, "deletions": 41}, "files": [{"sha": "f7ebacaa8546f4155dbf4e11be18a39499f6f2f8", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fa95b847be64342562bccd55abb7e55c8daa3f2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa95b847be64342562bccd55abb7e55c8daa3f2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=3fa95b847be64342562bccd55abb7e55c8daa3f2", "patch": "@@ -442,12 +442,10 @@ fn check_opaque_meets_bounds<'tcx>(\n     match ocx.eq(&misc_cause, param_env, opaque_ty, hidden_ty) {\n         Ok(()) => {}\n         Err(ty_err) => {\n+            let ty_err = ty_err.to_string(tcx);\n             tcx.sess.delay_span_bug(\n                 span,\n-                &format!(\n-                    \"could not unify `{hidden_ty}` with revealed type:\\n{}\",\n-                    ty_err.to_string(tcx)\n-                ),\n+                &format!(\"could not unify `{hidden_ty}` with revealed type:\\n{ty_err}\"),\n             );\n         }\n     }"}, {"sha": "8ebcd3d54aa7ff7827b9980813a41b9f2d49f5ed", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fa95b847be64342562bccd55abb7e55c8daa3f2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa95b847be64342562bccd55abb7e55c8daa3f2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=3fa95b847be64342562bccd55abb7e55c8daa3f2", "patch": "@@ -1613,7 +1613,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 {\n                     format!(\"expected this to be `{}`\", expected)\n                 } else {\n-                    terr.to_string(self.tcx)\n+                    terr.to_string(self.tcx).to_string()\n                 };\n                 label_or_note(sp, &terr);\n                 label_or_note(span, &msg);"}, {"sha": "6229c0072f2a79f5397e7d869468e2852db5d2de", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 43, "deletions": 36, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/3fa95b847be64342562bccd55abb7e55c8daa3f2/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa95b847be64342562bccd55abb7e55c8daa3f2/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=3fa95b847be64342562bccd55abb7e55c8daa3f2", "patch": "@@ -86,7 +86,7 @@ impl TypeError<'_> {\n /// afterwards to present additional details, particularly when it comes to lifetime-related\n /// errors.\n impl<'tcx> TypeError<'tcx> {\n-    pub fn to_string(self, tcx: TyCtxt<'tcx>) -> String {\n+    pub fn to_string(self, tcx: TyCtxt<'tcx>) -> Cow<'static, str> {\n         use self::TypeError::*;\n         fn report_maybe_different(expected: &str, found: &str) -> String {\n             // A naive approach to making sure that we're not reporting silly errors such as:\n@@ -104,56 +104,60 @@ impl<'tcx> TypeError<'tcx> {\n         };\n \n         match self {\n-            CyclicTy(_) => format!(\"cyclic type of infinite size\"),\n-            CyclicConst(_) => format!(\"encountered a self-referencing constant\"),\n-            Mismatch => format!(\"types differ\"),\n+            CyclicTy(_) => \"cyclic type of infinite size\".into(),\n+            CyclicConst(_) => \"encountered a self-referencing constant\".into(),\n+            Mismatch => \"types differ\".into(),\n             ConstnessMismatch(values) => {\n-                format!(\"expected {} bound, found {} bound\", values.expected, values.found)\n+                format!(\"expected {} bound, found {} bound\", values.expected, values.found).into()\n             }\n             PolarityMismatch(values) => {\n                 format!(\"expected {} polarity, found {} polarity\", values.expected, values.found)\n+                    .into()\n             }\n             UnsafetyMismatch(values) => {\n-                format!(\"expected {} fn, found {} fn\", values.expected, values.found)\n+                format!(\"expected {} fn, found {} fn\", values.expected, values.found).into()\n             }\n             AbiMismatch(values) => {\n-                format!(\"expected {} fn, found {} fn\", values.expected, values.found)\n+                format!(\"expected {} fn, found {} fn\", values.expected, values.found).into()\n             }\n-            ArgumentMutability(_) | Mutability => format!(\"types differ in mutability\"),\n+            ArgumentMutability(_) | Mutability => \"types differ in mutability\".into(),\n             TupleSize(values) => format!(\n                 \"expected a tuple with {} element{}, found one with {} element{}\",\n                 values.expected,\n                 pluralize!(values.expected),\n                 values.found,\n                 pluralize!(values.found)\n-            ),\n+            )\n+            .into(),\n             FixedArraySize(values) => format!(\n                 \"expected an array with a fixed size of {} element{}, found one with {} element{}\",\n                 values.expected,\n                 pluralize!(values.expected),\n                 values.found,\n                 pluralize!(values.found)\n-            ),\n-            ArgCount => format!(\"incorrect number of function parameters\"),\n-            FieldMisMatch(adt, field) => format!(\"field type mismatch: {}.{}\", adt, field),\n-            RegionsDoesNotOutlive(..) => format!(\"lifetime mismatch\"),\n+            )\n+            .into(),\n+            ArgCount => \"incorrect number of function parameters\".into(),\n+            FieldMisMatch(adt, field) => format!(\"field type mismatch: {}.{}\", adt, field).into(),\n+            RegionsDoesNotOutlive(..) => \"lifetime mismatch\".into(),\n             // Actually naming the region here is a bit confusing because context is lacking\n             RegionsInsufficientlyPolymorphic(..) => {\n-                format!(\"one type is more general than the other\")\n+                \"one type is more general than the other\".into()\n             }\n             RegionsOverlyPolymorphic(br, _) => format!(\n                 \"expected concrete lifetime, found bound lifetime parameter{}\",\n                 br_string(br)\n-            ),\n-            RegionsPlaceholderMismatch => format!(\"one type is more general than the other\"),\n+            )\n+            .into(),\n+            RegionsPlaceholderMismatch => \"one type is more general than the other\".into(),\n             ArgumentSorts(values, _) | Sorts(values) => {\n                 let mut expected = values.expected.sort_string(tcx);\n                 let mut found = values.found.sort_string(tcx);\n                 if expected == found {\n                     expected = values.expected.sort_string(tcx);\n                     found = values.found.sort_string(tcx);\n                 }\n-                report_maybe_different(&expected, &found)\n+                report_maybe_different(&expected, &found).into()\n             }\n             Traits(values) => {\n                 let (mut expected, mut found) = with_forced_trimmed_paths!((\n@@ -165,6 +169,7 @@ impl<'tcx> TypeError<'tcx> {\n                     found = tcx.def_path_str(values.found);\n                 }\n                 report_maybe_different(&format!(\"trait `{expected}`\"), &format!(\"trait `{found}`\"))\n+                    .into()\n             }\n             IntMismatch(ref values) => {\n                 let expected = match values.expected {\n@@ -175,36 +180,38 @@ impl<'tcx> TypeError<'tcx> {\n                     ty::IntVarValue::IntType(ty) => ty.name_str(),\n                     ty::IntVarValue::UintType(ty) => ty.name_str(),\n                 };\n-                format!(\"expected `{}`, found `{}`\", expected, found)\n-            }\n-            FloatMismatch(ref values) => {\n-                format!(\n-                    \"expected `{}`, found `{}`\",\n-                    values.expected.name_str(),\n-                    values.found.name_str()\n-                )\n+                format!(\"expected `{}`, found `{}`\", expected, found).into()\n             }\n+            FloatMismatch(ref values) => format!(\n+                \"expected `{}`, found `{}`\",\n+                values.expected.name_str(),\n+                values.found.name_str()\n+            )\n+            .into(),\n             VariadicMismatch(ref values) => format!(\n                 \"expected {} fn, found {} function\",\n                 if values.expected { \"variadic\" } else { \"non-variadic\" },\n                 if values.found { \"variadic\" } else { \"non-variadic\" }\n-            ),\n+            )\n+            .into(),\n             ProjectionMismatched(ref values) => format!(\n                 \"expected {}, found {}\",\n                 tcx.def_path_str(values.expected),\n                 tcx.def_path_str(values.found)\n-            ),\n+            )\n+            .into(),\n             ExistentialMismatch(ref values) => report_maybe_different(\n                 &format!(\"trait `{}`\", values.expected),\n                 &format!(\"trait `{}`\", values.found),\n-            ),\n+            )\n+            .into(),\n             ConstMismatch(ref values) => {\n-                format!(\"expected `{}`, found `{}`\", values.expected, values.found)\n+                format!(\"expected `{}`, found `{}`\", values.expected, values.found).into()\n+            }\n+            IntrinsicCast => \"cannot coerce intrinsics to function pointers\".into(),\n+            TargetFeatureCast(_) => {\n+                \"cannot coerce functions with `#[target_feature]` to safe function pointers\".into()\n             }\n-            IntrinsicCast => format!(\"cannot coerce intrinsics to function pointers\"),\n-            TargetFeatureCast(_) => format!(\n-                \"cannot coerce functions with `#[target_feature]` to safe function pointers\"\n-            ),\n         }\n     }\n }\n@@ -237,7 +244,7 @@ impl<'tcx> TypeError<'tcx> {\n }\n \n impl<'tcx> Ty<'tcx> {\n-    pub fn sort_string(self, tcx: TyCtxt<'tcx>) -> String {\n+    pub fn sort_string(self, tcx: TyCtxt<'tcx>) -> Cow<'static, str> {\n         match *self.kind() {\n             ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.def_path_str(def_id)).into(),\n             ty::FnDef(def_id, ..) => match tcx.def_kind(def_id) {\n@@ -247,7 +254,7 @@ impl<'tcx> Ty<'tcx> {\n             },\n             ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(ref inner, ..) if let Some(principal) = inner.principal() => {\n-                format!(\"`dyn {}`\", tcx.def_path_str(principal.def_id()))\n+                format!(\"`dyn {}`\", tcx.def_path_str(principal.def_id())).into()\n             }\n             ty::Dynamic(..) => \"trait object\".into(),\n             ty::Closure(..) => \"closure\".into(),\n@@ -269,7 +276,7 @@ impl<'tcx> Ty<'tcx> {\n             _ => {\n                 let width = tcx.sess.diagnostic_width();\n                 let length_limit = std::cmp::max(width / 4, 15);\n-                format!(\"`{}`\", tcx.ty_string_with_limit(self, length_limit))\n+                format!(\"`{}`\", tcx.ty_string_with_limit(self, length_limit)).into()\n             }\n         }\n     }"}]}