{"sha": "416b010f4087d055febe2d55919f74e261ca8cd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNmIwMTBmNDA4N2QwNTVmZWJlMmQ1NTkxOWY3NGUyNjFjYThjZDY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-11T07:25:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-12T07:41:27Z"}, "message": "x.py: do not build Miri by default", "tree": {"sha": "e0e9a167a167e8d3b1e3e5e95b4df2361f458cbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0e9a167a167e8d3b1e3e5e95b4df2361f458cbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/416b010f4087d055febe2d55919f74e261ca8cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/416b010f4087d055febe2d55919f74e261ca8cd6", "html_url": "https://github.com/rust-lang/rust/commit/416b010f4087d055febe2d55919f74e261ca8cd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/416b010f4087d055febe2d55919f74e261ca8cd6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e93cb961ba67c73815401291ab42b81e3e5733ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/e93cb961ba67c73815401291ab42b81e3e5733ae", "html_url": "https://github.com/rust-lang/rust/commit/e93cb961ba67c73815401291ab42b81e3e5733ae"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "c4f29927cf4a8d9c644c999f0a3401db05291067", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/416b010f4087d055febe2d55919f74e261ca8cd6/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/416b010f4087d055febe2d55919f74e261ca8cd6/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=416b010f4087d055febe2d55919f74e261ca8cd6", "patch": "@@ -52,6 +52,8 @@ pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {\n     /// it's been assembled.\n     type Output: Clone;\n \n+    /// Whether this step is run by default as part of its respective phase.\n+    /// `true` here can still be overwritten by `should_run` calling `default_condition`.\n     const DEFAULT: bool = false;\n \n     /// If true, then this rule should be skipped if --target was specified, but --host was not"}, {"sha": "9c95de0a81eae7ff53db0368a960e0eb9f9a6041", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/416b010f4087d055febe2d55919f74e261ca8cd6/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/416b010f4087d055febe2d55919f74e261ca8cd6/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=416b010f4087d055febe2d55919f74e261ca8cd6", "patch": "@@ -595,6 +595,7 @@ macro_rules! tool_extended {\n        $toolstate:ident,\n        $path:expr,\n        $tool_name:expr,\n+       stable = $stable:expr,\n        $extra_deps:block;)+) => {\n         $(\n             #[derive(Debug, Clone, Hash, PartialEq, Eq)]\n@@ -606,17 +607,22 @@ macro_rules! tool_extended {\n \n         impl Step for $name {\n             type Output = Option<PathBuf>;\n-            const DEFAULT: bool = true;\n+            const DEFAULT: bool = true; // Overwritten below\n             const ONLY_HOSTS: bool = true;\n \n             fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n                 let builder = run.builder;\n                 run.path($path).default_condition(\n                     builder.config.extended\n-                        && builder.config.tools.as_ref().map_or(true, |tools| {\n-                            tools.iter().any(|tool| match tool.as_ref() {\n-                                \"clippy\" => $tool_name == \"clippy-driver\",\n-                                x => $tool_name == x,\n+                        && builder.config.tools.as_ref().map_or(\n+                            // By default, on nightly/dev enable all tools, else only\n+                            // build stable tools.\n+                            $stable || builder.build.unstable_features(),\n+                            // If `tools` is set, search list for this tool.\n+                            |tools| {\n+                                tools.iter().any(|tool| match tool.as_ref() {\n+                                    \"clippy\" => $tool_name == \"clippy-driver\",\n+                                    x => $tool_name == x,\n                             })\n                         }),\n                 )\n@@ -652,20 +658,20 @@ macro_rules! tool_extended {\n // Note: tools need to be also added to `Builder::get_step_descriptions` in `build.rs`\n // to make `./x.py build <tool>` work.\n tool_extended!((self, builder),\n-    Cargofmt, rustfmt, \"src/tools/rustfmt\", \"cargo-fmt\", {};\n-    CargoClippy, clippy, \"src/tools/clippy\", \"cargo-clippy\", {};\n-    Clippy, clippy, \"src/tools/clippy\", \"clippy-driver\", {};\n-    Miri, miri, \"src/tools/miri\", \"miri\", {};\n-    CargoMiri, miri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", {};\n-    Rls, rls, \"src/tools/rls\", \"rls\", {\n+    Cargofmt, rustfmt, \"src/tools/rustfmt\", \"cargo-fmt\", stable=true, {};\n+    CargoClippy, clippy, \"src/tools/clippy\", \"cargo-clippy\", stable=true, {};\n+    Clippy, clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true, {};\n+    Miri, miri, \"src/tools/miri\", \"miri\", stable=false, {};\n+    CargoMiri, miri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=false, {};\n+    Rls, rls, \"src/tools/rls\", \"rls\", stable=true, {\n         builder.ensure(Clippy {\n             compiler: self.compiler,\n             target: self.target,\n             extra_features: Vec::new(),\n         });\n         self.extra_features.push(\"clippy\".to_owned());\n     };\n-    Rustfmt, rustfmt, \"src/tools/rustfmt\", \"rustfmt\", {};\n+    Rustfmt, rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true, {};\n );\n \n impl<'a> Builder<'a> {"}]}