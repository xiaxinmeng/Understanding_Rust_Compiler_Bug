{"sha": "0db70ca26313b847738fd9405c67e9c43e9ee21b", "node_id": "C_kwDOAAsO6NoAKDBkYjcwY2EyNjMxM2I4NDc3MzhmZDk0MDVjNjdlOWM0M2U5ZWUyMWI", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-04-10T22:09:56Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-04-16T18:13:39Z"}, "message": "Require all paths passed to `ShouldRun::paths` to exist on disk\n\nThis has two benefits:\n1. There is a clearer mental model of how bootstrap works. Steps correspond to paths on disk unless it's strictly impossible for them to do so (e.g. dist components).\n2. Bootstrap has better checks for internal consistency. This caught several issues:\n  - `src/sanitizers` doesn't exist; I changed it to just be a `sanitizers` alias.\n  - `src/tools/lld` doesn't exist; I removed it, since `lld` alone already works.\n  - `src/llvm` doesn't exist; removed it since `llvm` and `src/llvm-project` both work.\n  - `src/lldb_batchmode.py` doesn't exist, it was moved to `src/etc`.\n  - `install` was still using `src/librustc` instead of `compiler/rustc`.\n  - None of the tools in `dist` / `install` allowed using `src/tools/X` to build them. This might be intentional - I can change them to aliases if you like.", "tree": {"sha": "cd502ae08a568acac85f781b966778914f8d0dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd502ae08a568acac85f781b966778914f8d0dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0db70ca26313b847738fd9405c67e9c43e9ee21b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0db70ca26313b847738fd9405c67e9c43e9ee21b", "html_url": "https://github.com/rust-lang/rust/commit/0db70ca26313b847738fd9405c67e9c43e9ee21b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0db70ca26313b847738fd9405c67e9c43e9ee21b/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c1438332be229ee1d1e1dbc02181a03678e04f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c1438332be229ee1d1e1dbc02181a03678e04f9", "html_url": "https://github.com/rust-lang/rust/commit/4c1438332be229ee1d1e1dbc02181a03678e04f9"}], "stats": {"total": 108, "additions": 66, "deletions": 42}, "files": [{"sha": "cfcc807d29387bb864963168bf989856a5d31695", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0db70ca26313b847738fd9405c67e9c43e9ee21b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db70ca26313b847738fd9405c67e9c43e9ee21b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0db70ca26313b847738fd9405c67e9c43e9ee21b", "patch": "@@ -364,6 +364,19 @@ impl<'a> ShouldRun<'a> {\n         self\n     }\n \n+    // single alias, which does not correspond to any on-disk path\n+    pub fn alias(mut self, alias: &str) -> Self {\n+        assert!(\n+            !self.builder.src.join(alias).exists(),\n+            \"use `builder.path()` for real paths: {}\",\n+            alias\n+        );\n+        self.paths.insert(PathSet::Set(\n+            std::iter::once(TaskPath { path: alias.into(), kind: Some(self.kind) }).collect(),\n+        ));\n+        self\n+    }\n+\n     // single, non-aliased path\n     pub fn path(self, path: &str) -> Self {\n         self.paths(&[path])\n@@ -372,7 +385,17 @@ impl<'a> ShouldRun<'a> {\n     // multiple aliases for the same job\n     pub fn paths(mut self, paths: &[&str]) -> Self {\n         self.paths.insert(PathSet::Set(\n-            paths.iter().map(|p| TaskPath { path: p.into(), kind: Some(self.kind) }).collect(),\n+            paths\n+                .iter()\n+                .map(|p| {\n+                    assert!(\n+                        self.builder.src.join(p).exists(),\n+                        \"`should_run.paths` should correspond to real on-disk paths - use `alias` if there is no relevant path: {}\",\n+                        p\n+                    );\n+                    TaskPath { path: p.into(), kind: Some(self.kind) }\n+                })\n+                .collect(),\n         ));\n         self\n     }"}, {"sha": "e3287e35227b9915cb1825f21e0dcdfb78bd15a9", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0db70ca26313b847738fd9405c67e9c43e9ee21b/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db70ca26313b847738fd9405c67e9c43e9ee21b/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=0db70ca26313b847738fd9405c67e9c43e9ee21b", "patch": "@@ -61,7 +61,7 @@ impl Step for Docs {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let default = run.builder.config.docs;\n-        run.path(\"rust-docs\").default_condition(default)\n+        run.alias(\"rust-docs\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -94,7 +94,7 @@ impl Step for RustcDocs {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.path(\"rustc-docs\").default_condition(builder.config.compiler_docs)\n+        run.alias(\"rustc-docs\").default_condition(builder.config.compiler_docs)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -272,7 +272,7 @@ impl Step for Mingw {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"rust-mingw\")\n+        run.alias(\"rust-mingw\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -313,7 +313,7 @@ impl Step for Rustc {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"rustc\")\n+        run.alias(\"rustc\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -456,7 +456,7 @@ impl Step for DebuggerScripts {\n     type Output = ();\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/lldb_batchmode.py\")\n+        run.path(\"src/etc/lldb_batchmode.py\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -547,7 +547,7 @@ impl Step for Std {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"rust-std\")\n+        run.alias(\"rust-std\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -594,7 +594,7 @@ impl Step for RustcDev {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"rustc-dev\")\n+        run.alias(\"rustc-dev\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -653,7 +653,7 @@ impl Step for Analysis {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let default = should_build_extended_tool(&run.builder, \"analysis\");\n-        run.path(\"rust-analysis\").default_condition(default)\n+        run.alias(\"rust-analysis\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -790,7 +790,7 @@ impl Step for Src {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"rust-src\")\n+        run.alias(\"rust-src\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -848,7 +848,7 @@ impl Step for PlainSourceTarball {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.path(\"rustc-src\").default_condition(builder.config.rust_dist_src)\n+        run.alias(\"rustc-src\").default_condition(builder.config.rust_dist_src)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -942,7 +942,7 @@ impl Step for Cargo {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let default = should_build_extended_tool(&run.builder, \"cargo\");\n-        run.path(\"cargo\").default_condition(default)\n+        run.alias(\"cargo\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -998,7 +998,7 @@ impl Step for Rls {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let default = should_build_extended_tool(&run.builder, \"rls\");\n-        run.path(\"rls\").default_condition(default)\n+        run.alias(\"rls\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1045,7 +1045,7 @@ impl Step for RustAnalyzer {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let default = should_build_extended_tool(&run.builder, \"rust-analyzer\");\n-        run.path(\"rust-analyzer\").default_condition(default)\n+        run.alias(\"rust-analyzer\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1101,7 +1101,7 @@ impl Step for Clippy {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let default = should_build_extended_tool(&run.builder, \"clippy\");\n-        run.path(\"clippy\").default_condition(default)\n+        run.alias(\"clippy\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1152,7 +1152,7 @@ impl Step for Miri {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let default = should_build_extended_tool(&run.builder, \"miri\");\n-        run.path(\"miri\").default_condition(default)\n+        run.alias(\"miri\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1212,7 +1212,7 @@ impl Step for Rustfmt {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let default = should_build_extended_tool(&run.builder, \"rustfmt\");\n-        run.path(\"rustfmt\").default_condition(default)\n+        run.alias(\"rustfmt\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1271,7 +1271,7 @@ impl Step for RustDemangler {\n         // we run the step by default when only `extended = true`, and decide whether to actually\n         // run it or not later.\n         let default = run.builder.config.extended;\n-        run.path(\"rust-demangler\").default_condition(default)\n+        run.alias(\"rust-demangler\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1324,7 +1324,7 @@ impl Step for Extended {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.path(\"extended\").default_condition(builder.config.extended)\n+        run.alias(\"extended\").default_condition(builder.config.extended)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1968,7 +1968,8 @@ impl Step for LlvmTools {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let default = should_build_extended_tool(&run.builder, \"llvm-tools\");\n-        run.path(\"llvm-tools\").default_condition(default)\n+        // FIXME: allow using the names of the tools themselves?\n+        run.alias(\"llvm-tools\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -2022,7 +2023,7 @@ impl Step for RustDev {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"rust-dev\")\n+        run.alias(\"rust-dev\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -2098,7 +2099,7 @@ impl Step for BuildManifest {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"build-manifest\")\n+        run.alias(\"build-manifest\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -2130,7 +2131,7 @@ impl Step for ReproducibleArtifacts {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"reproducible-artifacts\")\n+        run.alias(\"reproducible-artifacts\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "08e37a16279903a8a7f080cf7f6bcdcdab1826f4", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0db70ca26313b847738fd9405c67e9c43e9ee21b/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db70ca26313b847738fd9405c67e9c43e9ee21b/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=0db70ca26313b847738fd9405c67e9c43e9ee21b", "patch": "@@ -93,7 +93,7 @@ fn prepare_dir(mut path: PathBuf) -> String {\n macro_rules! install {\n     (($sel:ident, $builder:ident, $_config:ident),\n        $($name:ident,\n-       $path:expr,\n+       $condition_name: ident = $path_or_alias: literal,\n        $default_cond:expr,\n        only_hosts: $only_hosts:expr,\n        $run_item:block $(, $c:ident)*;)+) => {\n@@ -108,7 +108,7 @@ macro_rules! install {\n             #[allow(dead_code)]\n             fn should_build(config: &Config) -> bool {\n                 config.extended && config.tools.as_ref()\n-                    .map_or(true, |t| t.contains($path))\n+                    .map_or(true, |t| t.contains($path_or_alias))\n             }\n         }\n \n@@ -120,7 +120,7 @@ macro_rules! install {\n \n             fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n                 let $_config = &run.builder.config;\n-                run.path($path).default_condition($default_cond)\n+                run.$condition_name($path_or_alias).default_condition($default_cond)\n             }\n \n             fn make_run(run: RunConfig<'_>) {\n@@ -138,11 +138,11 @@ macro_rules! install {\n }\n \n install!((self, builder, _config),\n-    Docs, \"src/doc\", _config.docs, only_hosts: false, {\n+    Docs, path = \"src/doc\", _config.docs, only_hosts: false, {\n         let tarball = builder.ensure(dist::Docs { host: self.target }).expect(\"missing docs\");\n         install_sh(builder, \"docs\", self.compiler.stage, Some(self.target), &tarball);\n     };\n-    Std, \"library/std\", true, only_hosts: false, {\n+    Std, path = \"library/std\", true, only_hosts: false, {\n         for target in &builder.targets {\n             // `expect` should be safe, only None when host != build, but this\n             // only runs when host == build\n@@ -153,13 +153,13 @@ install!((self, builder, _config),\n             install_sh(builder, \"std\", self.compiler.stage, Some(*target), &tarball);\n         }\n     };\n-    Cargo, \"cargo\", Self::should_build(_config), only_hosts: true, {\n+    Cargo, alias = \"cargo\", Self::should_build(_config), only_hosts: true, {\n         let tarball = builder\n             .ensure(dist::Cargo { compiler: self.compiler, target: self.target })\n             .expect(\"missing cargo\");\n         install_sh(builder, \"cargo\", self.compiler.stage, Some(self.target), &tarball);\n     };\n-    Rls, \"rls\", Self::should_build(_config), only_hosts: true, {\n+    Rls, alias = \"rls\", Self::should_build(_config), only_hosts: true, {\n         if let Some(tarball) = builder.ensure(dist::Rls { compiler: self.compiler, target: self.target }) {\n             install_sh(builder, \"rls\", self.compiler.stage, Some(self.target), &tarball);\n         } else {\n@@ -168,7 +168,7 @@ install!((self, builder, _config),\n             );\n         }\n     };\n-    RustAnalyzer, \"rust-analyzer\", Self::should_build(_config), only_hosts: true, {\n+    RustAnalyzer, alias = \"rust-analyzer\", Self::should_build(_config), only_hosts: true, {\n         if let Some(tarball) =\n             builder.ensure(dist::RustAnalyzer { compiler: self.compiler, target: self.target })\n         {\n@@ -179,13 +179,13 @@ install!((self, builder, _config),\n             );\n         }\n     };\n-    Clippy, \"clippy\", Self::should_build(_config), only_hosts: true, {\n+    Clippy, alias = \"clippy\", Self::should_build(_config), only_hosts: true, {\n         let tarball = builder\n             .ensure(dist::Clippy { compiler: self.compiler, target: self.target })\n             .expect(\"missing clippy\");\n         install_sh(builder, \"clippy\", self.compiler.stage, Some(self.target), &tarball);\n     };\n-    Miri, \"miri\", Self::should_build(_config), only_hosts: true, {\n+    Miri, alias = \"miri\", Self::should_build(_config), only_hosts: true, {\n         if let Some(tarball) = builder.ensure(dist::Miri { compiler: self.compiler, target: self.target }) {\n             install_sh(builder, \"miri\", self.compiler.stage, Some(self.target), &tarball);\n         } else {\n@@ -194,7 +194,7 @@ install!((self, builder, _config),\n             );\n         }\n     };\n-    Rustfmt, \"rustfmt\", Self::should_build(_config), only_hosts: true, {\n+    Rustfmt, alias = \"rustfmt\", Self::should_build(_config), only_hosts: true, {\n         if let Some(tarball) = builder.ensure(dist::Rustfmt {\n             compiler: self.compiler,\n             target: self.target\n@@ -206,7 +206,7 @@ install!((self, builder, _config),\n             );\n         }\n     };\n-    RustDemangler, \"rust-demangler\", Self::should_build(_config), only_hosts: true, {\n+    RustDemangler, alias = \"rust-demangler\", Self::should_build(_config), only_hosts: true, {\n         // Note: Even though `should_build` may return true for `extended` default tools,\n         // dist::RustDemangler may still return None, unless the target-dependent `profiler` config\n         // is also true, or the `tools` array explicitly includes \"rust-demangler\".\n@@ -222,7 +222,7 @@ install!((self, builder, _config),\n             );\n         }\n     };\n-    Analysis, \"analysis\", Self::should_build(_config), only_hosts: false, {\n+    Analysis, alias = \"analysis\", Self::should_build(_config), only_hosts: false, {\n         // `expect` should be safe, only None with host != build, but this\n         // only uses the `build` compiler\n         let tarball = builder.ensure(dist::Analysis {\n@@ -234,7 +234,7 @@ install!((self, builder, _config),\n         }).expect(\"missing analysis\");\n         install_sh(builder, \"analysis\", self.compiler.stage, Some(self.target), &tarball);\n     };\n-    Rustc, \"src/librustc\", true, only_hosts: true, {\n+    Rustc, path = \"compiler/rustc\", true, only_hosts: true, {\n         let tarball = builder.ensure(dist::Rustc {\n             compiler: builder.compiler(builder.top_stage, self.target),\n         });"}, {"sha": "73fb2dad1e3c23ea3d39cbba0d68dd3169054d7b", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0db70ca26313b847738fd9405c67e9c43e9ee21b/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db70ca26313b847738fd9405c67e9c43e9ee21b/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=0db70ca26313b847738fd9405c67e9c43e9ee21b", "patch": "@@ -122,7 +122,7 @@ impl Step for Llvm {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/llvm-project\").path(\"src/llvm-project/llvm\").path(\"src/llvm\")\n+        run.path(\"src/llvm-project\").path(\"src/llvm-project/llvm\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -605,7 +605,7 @@ impl Step for Lld {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/llvm-project/lld\").path(\"src/tools/lld\")\n+        run.path(\"src/llvm-project/lld\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -771,7 +771,7 @@ impl Step for Sanitizers {\n     type Output = Vec<SanitizerRuntime>;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/llvm-project/compiler-rt\").path(\"src/sanitizers\")\n+        run.alias(\"sanitizers\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "703b876f301a0f35886d3dab2e89ac87b775bfa4", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db70ca26313b847738fd9405c67e9c43e9ee21b/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db70ca26313b847738fd9405c67e9c43e9ee21b/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=0db70ca26313b847738fd9405c67e9c43e9ee21b", "patch": "@@ -2295,7 +2295,7 @@ impl Step for Distcheck {\n     type Output = ();\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"distcheck\")\n+        run.alias(\"distcheck\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "3ee6a42d987a05385ee1f9156ea86e36ae668384", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db70ca26313b847738fd9405c67e9c43e9ee21b/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db70ca26313b847738fd9405c67e9c43e9ee21b/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=0db70ca26313b847738fd9405c67e9c43e9ee21b", "patch": "@@ -234,7 +234,7 @@ impl Step for ToolStateCheck {\n     }\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"check-tools\")\n+        run.alias(\"check-tools\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}]}