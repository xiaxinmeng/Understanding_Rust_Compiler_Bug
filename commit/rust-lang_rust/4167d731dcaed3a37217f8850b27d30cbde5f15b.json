{"sha": "4167d731dcaed3a37217f8850b27d30cbde5f15b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNjdkNzMxZGNhZWQzYTM3MjE3Zjg4NTBiMjdkMzBjYmRlNWYxNWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-24T03:12:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-24T03:12:20Z"}, "message": "Auto merge of #78953 - mzohreva:mz/from_raw_fd, r=Mark-Simulacrum\n\nAdd Metadata in std::os::fortanix_sgx::io::FromRawFd\n\nNeeded for https://github.com/fortanix/rust-sgx/pull/291\n\ncc `@jethrogb`", "tree": {"sha": "75f87e5793b3e36e33f3a1d2932e12f0fa92ed21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75f87e5793b3e36e33f3a1d2932e12f0fa92ed21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4167d731dcaed3a37217f8850b27d30cbde5f15b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4167d731dcaed3a37217f8850b27d30cbde5f15b", "html_url": "https://github.com/rust-lang/rust/commit/4167d731dcaed3a37217f8850b27d30cbde5f15b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4167d731dcaed3a37217f8850b27d30cbde5f15b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb5b87133a9b1d4489c1326a5cc3942e4345fcf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb5b87133a9b1d4489c1326a5cc3942e4345fcf9", "html_url": "https://github.com/rust-lang/rust/commit/cb5b87133a9b1d4489c1326a5cc3942e4345fcf9"}, {"sha": "084b0da933c2430e2ef80ae0e00ddf76e2bc5f10", "url": "https://api.github.com/repos/rust-lang/rust/commits/084b0da933c2430e2ef80ae0e00ddf76e2bc5f10", "html_url": "https://github.com/rust-lang/rust/commit/084b0da933c2430e2ef80ae0e00ddf76e2bc5f10"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "795a4d190cf4ebab7c060b53fa323a7079f5ad28", "filename": "library/std/src/sys/sgx/ext/io.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4167d731dcaed3a37217f8850b27d30cbde5f15b/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4167d731dcaed3a37217f8850b27d30cbde5f15b/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fio.rs?ref=4167d731dcaed3a37217f8850b27d30cbde5f15b", "patch": "@@ -25,8 +25,11 @@ pub trait AsRawFd {\n /// descriptor.\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n pub trait FromRawFd {\n+    /// An associated type that contains relevant metadata for `Self`.\n+    type Metadata: Default;\n+\n     /// Constructs a new instance of `Self` from the given raw file\n-    /// descriptor.\n+    /// descriptor and metadata.\n     ///\n     /// This function **consumes ownership** of the specified file\n     /// descriptor. The returned object will take responsibility for closing\n@@ -38,7 +41,7 @@ pub trait FromRawFd {\n     /// accidentally allow violating this contract which can cause memory\n     /// unsafety in code that relies on it being true.\n     #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n-    unsafe fn from_raw_fd(fd: RawFd) -> Self;\n+    unsafe fn from_raw_fd(fd: RawFd, metadata: Self::Metadata) -> Self;\n }\n \n /// A trait to express the ability to consume an object and acquire ownership of\n@@ -71,18 +74,40 @@ impl AsRawFd for net::TcpListener {\n     }\n }\n \n+/// Metadata for `TcpStream`.\n+#[derive(Debug, Clone, Default)]\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub struct TcpStreamMetadata {\n+    /// Local address of the TCP stream\n+    pub local_addr: Option<String>,\n+    /// Peer address of the TCP stream\n+    pub peer_addr: Option<String>,\n+}\n+\n impl FromRawFd for net::TcpStream {\n-    unsafe fn from_raw_fd(fd: RawFd) -> net::TcpStream {\n+    type Metadata = TcpStreamMetadata;\n+\n+    unsafe fn from_raw_fd(fd: RawFd, metadata: Self::Metadata) -> net::TcpStream {\n         let fd = sys::fd::FileDesc::from_inner(fd);\n-        let socket = sys::net::Socket::from_inner(fd);\n-        net::TcpStream::from_inner(sys::net::TcpStream::from_inner((socket, None)))\n+        let socket = sys::net::Socket::from_inner((fd, metadata.local_addr));\n+        net::TcpStream::from_inner(sys::net::TcpStream::from_inner((socket, metadata.peer_addr)))\n     }\n }\n \n+/// Metadata for `TcpListener`.\n+#[derive(Debug, Clone, Default)]\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub struct TcpListenerMetadata {\n+    /// Local address of the TCP listener\n+    pub local_addr: Option<String>,\n+}\n+\n impl FromRawFd for net::TcpListener {\n-    unsafe fn from_raw_fd(fd: RawFd) -> net::TcpListener {\n+    type Metadata = TcpListenerMetadata;\n+\n+    unsafe fn from_raw_fd(fd: RawFd, metadata: Self::Metadata) -> net::TcpListener {\n         let fd = sys::fd::FileDesc::from_inner(fd);\n-        let socket = sys::net::Socket::from_inner(fd);\n+        let socket = sys::net::Socket::from_inner((fd, metadata.local_addr));\n         net::TcpListener::from_inner(sys::net::TcpListener::from_inner(socket))\n     }\n }"}, {"sha": "3dd8267921e5e3153d0000f6592202e187677d9a", "filename": "library/std/src/sys/sgx/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4167d731dcaed3a37217f8850b27d30cbde5f15b/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4167d731dcaed3a37217f8850b27d30cbde5f15b/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs?ref=4167d731dcaed3a37217f8850b27d30cbde5f15b", "patch": "@@ -37,9 +37,9 @@ impl TryIntoInner<FileDesc> for Socket {\n     }\n }\n \n-impl FromInner<FileDesc> for Socket {\n-    fn from_inner(inner: FileDesc) -> Socket {\n-        Socket { inner: Arc::new(inner), local_addr: None }\n+impl FromInner<(FileDesc, Option<String>)> for Socket {\n+    fn from_inner((inner, local_addr): (FileDesc, Option<String>)) -> Socket {\n+        Socket { inner: Arc::new(inner), local_addr }\n     }\n }\n "}]}