{"sha": "244b05db12e47efef4695036974bc25fde13b828", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NGIwNWRiMTJlNDdlZmVmNDY5NTAzNjk3NGJjMjVmZGUxM2I4Mjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-05T00:49:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-05T00:49:12Z"}, "message": "Auto merge of #56145 - weiznich:re_rebalance_coherence, r=nikomatsakis\n\nImplement the Re-rebalance coherence RFC\n\nThis is the first time I touch anything in the compiler so just tell me if I got something wrong.\n\nBig thanks to @sgrif for the pointers where to look for those things.\ncc #55437", "tree": {"sha": "3cfddf52e2f53aea3f34500ae4d05b11e4e8f559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cfddf52e2f53aea3f34500ae4d05b11e4e8f559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/244b05db12e47efef4695036974bc25fde13b828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/244b05db12e47efef4695036974bc25fde13b828", "html_url": "https://github.com/rust-lang/rust/commit/244b05db12e47efef4695036974bc25fde13b828", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/244b05db12e47efef4695036974bc25fde13b828/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf6bb141bbc77bfb7d9bc79f2db6d986aafc01cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf6bb141bbc77bfb7d9bc79f2db6d986aafc01cc", "html_url": "https://github.com/rust-lang/rust/commit/bf6bb141bbc77bfb7d9bc79f2db6d986aafc01cc"}, {"sha": "d758e4db783618daef974d067fdf6cfb285f48d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d758e4db783618daef974d067fdf6cfb285f48d5", "html_url": "https://github.com/rust-lang/rust/commit/d758e4db783618daef974d067fdf6cfb285f48d5"}], "stats": {"total": 1915, "additions": 1648, "deletions": 267}, "files": [{"sha": "1e74652a890f6e48b73aa4016d341921e430fcde", "filename": "src/doc/unstable-book/src/language-features/re-rebalance-coherence.md", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fre-rebalance-coherence.md", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fre-rebalance-coherence.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fre-rebalance-coherence.md?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,23 @@\n+# `re_rebalance_coherence`\n+\n+The tracking issue for this feature is: [#55437]\n+\n+[#55437]: https://github.com/rust-lang/rust/issues/55437\n+\n+------------------------\n+\n+The `re_rebalance_coherence` feature tweaks the rules regarding which trait\n+impls are allowed in crates.\n+The following rule is used:\n+\n+Given `impl<P1..=Pn> Trait<T1..=Tn> for T0`, an impl is valid only if at\n+least one of the following is true:\n+- `Trait` is a local trait\n+- All of\n+  - At least one of the types `T0..=Tn` must be a local type. Let `Ti` be the\n+    first such type.\n+  - No uncovered type parameters `P1..=Pn` may appear in `T0..Ti` (excluding\n+    `Ti`)\n+\n+\n+See the [RFC](https://github.com/rust-lang/rfcs/blob/master/text/2451-re-rebalancing-coherence.md) for details."}, {"sha": "c9cb823ebb3c0bbff5778b8a0ef885b63fb1af42", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 57, "deletions": 32, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -371,43 +371,68 @@ fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt<'_, '_, '_>,\n              trait_ref);\n     }\n \n-    // First, create an ordered iterator over all the type parameters to the trait, with the self\n-    // type appearing first.\n-    // Find the first input type that either references a type parameter OR\n-    // some local type.\n-    for input_ty in trait_ref.input_types() {\n-        if ty_is_local(tcx, input_ty, in_crate) {\n-            debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);\n-\n-            // First local input type. Check that there are no\n-            // uncovered type parameters.\n-            let uncovered_tys = uncovered_tys(tcx, input_ty, in_crate);\n-            for uncovered_ty in uncovered_tys {\n-                if let Some(param) = uncovered_ty.walk()\n-                    .find(|t| is_possibly_remote_type(t, in_crate))\n-                {\n-                    debug!(\"orphan_check_trait_ref: uncovered type `{:?}`\", param);\n-                    return Err(OrphanCheckErr::UncoveredTy(param));\n-                }\n+    if tcx.features().re_rebalance_coherence {\n+        // Given impl<P1..=Pn> Trait<T1..=Tn> for T0, an impl is valid only\n+        // if at least one of the following is true:\n+        //\n+        // - Trait is a local trait\n+        // (already checked in orphan_check prior to calling this function)\n+        // - All of\n+        //     - At least one of the types T0..=Tn must be a local type.\n+        //      Let Ti be the first such type.\n+        //     - No uncovered type parameters P1..=Pn may appear in T0..Ti (excluding Ti)\n+        //\n+        for input_ty in trait_ref.input_types() {\n+            debug!(\"orphan_check_trait_ref: check ty `{:?}`\", input_ty);\n+            if ty_is_local(tcx, input_ty, in_crate) {\n+                debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);\n+                return Ok(());\n+            } else if let ty::Param(_) = input_ty.sty {\n+                debug!(\"orphan_check_trait_ref: uncovered ty: `{:?}`\", input_ty);\n+                return Err(OrphanCheckErr::UncoveredTy(input_ty))\n             }\n-\n-            // OK, found local type, all prior types upheld invariant.\n-            return Ok(());\n         }\n+        // If we exit above loop, never found a local type.\n+        debug!(\"orphan_check_trait_ref: no local type\");\n+        Err(OrphanCheckErr::NoLocalInputType)\n+    } else {\n+        // First, create an ordered iterator over all the type\n+        // parameters to the trait, with the self type appearing\n+        // first.  Find the first input type that either references a\n+        // type parameter OR some local type.\n+        for input_ty in trait_ref.input_types() {\n+            if ty_is_local(tcx, input_ty, in_crate) {\n+                debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);\n+\n+                // First local input type. Check that there are no\n+                // uncovered type parameters.\n+                let uncovered_tys = uncovered_tys(tcx, input_ty, in_crate);\n+                for uncovered_ty in uncovered_tys {\n+                    if let Some(param) = uncovered_ty.walk()\n+                        .find(|t| is_possibly_remote_type(t, in_crate))\n+                    {\n+                        debug!(\"orphan_check_trait_ref: uncovered type `{:?}`\", param);\n+                        return Err(OrphanCheckErr::UncoveredTy(param));\n+                    }\n+                }\n \n-        // Otherwise, enforce invariant that there are no type\n-        // parameters reachable.\n-        if let Some(param) = input_ty.walk()\n-            .find(|t| is_possibly_remote_type(t, in_crate))\n-        {\n-            debug!(\"orphan_check_trait_ref: uncovered type `{:?}`\", param);\n-            return Err(OrphanCheckErr::UncoveredTy(param));\n+                // OK, found local type, all prior types upheld invariant.\n+                return Ok(());\n+            }\n+\n+            // Otherwise, enforce invariant that there are no type\n+            // parameters reachable.\n+            if let Some(param) = input_ty.walk()\n+                .find(|t| is_possibly_remote_type(t, in_crate))\n+            {\n+                debug!(\"orphan_check_trait_ref: uncovered type `{:?}`\", param);\n+                return Err(OrphanCheckErr::UncoveredTy(param));\n+            }\n         }\n+        // If we exit above loop, never found a local type.\n+        debug!(\"orphan_check_trait_ref: no local type\");\n+        Err(OrphanCheckErr::NoLocalInputType)\n     }\n-\n-    // If we exit above loop, never found a local type.\n-    debug!(\"orphan_check_trait_ref: no local type\");\n-    return Err(OrphanCheckErr::NoLocalInputType);\n }\n \n fn uncovered_tys<'tcx>(tcx: TyCtxt<'_, '_, '_>, ty: Ty<'tcx>, in_crate: InCrate)"}, {"sha": "8362c86f8bab9c7b16119d9adf98c2b4cb8dda02", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -479,6 +479,9 @@ declare_features! (\n \n     // Allows paths to enum variants on type aliases.\n     (active, type_alias_enum_variants, \"1.31.0\", Some(49683), None),\n+\n+    // Re-Rebalance coherence\n+    (active, re_rebalance_coherence, \"1.32.0\", Some(55437), None),\n );\n \n declare_features! ("}, {"sha": "c8d027b25c7486dedf9ca2aec24f832d8def828b", "filename": "src/test/run-pass/coherence/auxiliary/re_rebalance_coherence_lib.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fauxiliary%2Fre_rebalance_coherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fauxiliary%2Fre_rebalance_coherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fauxiliary%2Fre_rebalance_coherence_lib.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,23 @@\n+\n+pub trait Backend{}\n+pub trait SupportsDefaultKeyword {}\n+\n+impl SupportsDefaultKeyword for Postgres {}\n+\n+pub struct Postgres;\n+\n+impl Backend for Postgres {}\n+\n+pub struct AstPass<DB>(::std::marker::PhantomData<DB>);\n+\n+pub trait QueryFragment<DB: Backend> {}\n+\n+\n+#[derive(Debug, Clone, Copy)]\n+pub struct BatchInsert<'a, T: 'a, Tab> {\n+    _marker: ::std::marker::PhantomData<(&'a T, Tab)>,\n+}\n+\n+impl<'a, T:'a, Tab, DB> QueryFragment<DB> for BatchInsert<'a, T, Tab>\n+where DB: SupportsDefaultKeyword + Backend,\n+{}"}, {"sha": "0c9abdc15e620dd7c3ace7094ed4b3f8c17e4412", "filename": "src/test/run-pass/coherence/coherence-bigint-int.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-bigint-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-bigint-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-bigint-int.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,8 @@\n // run-pass\n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "38e0be0aa9ab9c4df057962bfebc8a1757b67daf", "filename": "src/test/run-pass/coherence/coherence-bigint-vecint.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-bigint-vecint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-bigint-vecint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-bigint-vecint.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,8 @@\n // run-pass\n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "5d310cc2c6ac5126f83822f24592cbc5c34bc8f5", "filename": "src/test/run-pass/coherence/coherence-blanket.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-blanket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-blanket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-blanket.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,6 +1,9 @@\n // run-pass\n #![allow(unused_imports)]\n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "1cf039f0831f53b077b1ddee61fc6b26a31d74e3", "filename": "src/test/run-pass/coherence/coherence-covered-type-parameter.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-covered-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-covered-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-covered-type-parameter.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,6 +1,9 @@\n // run-pass\n #![allow(dead_code)]\n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "09e2c1e5a4edd3faf2b176f971d1eef0eefbb2c3", "filename": "src/test/run-pass/coherence/coherence-impl-in-fn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-impl-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-impl-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-impl-in-fn.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n "}, {"sha": "051cc280b2d1262018a42743e13eb75eb058f2a0", "filename": "src/test/run-pass/coherence/coherence-iterator-vec-any-elem.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec-any-elem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec-any-elem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec-any-elem.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n // aux-build:coherence_lib.rs\n "}, {"sha": "df6e808f7dec594dab2258e13f2e80c7dfdf8876", "filename": "src/test/run-pass/coherence/coherence-iterator-vec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n // aux-build:coherence_lib.rs\n "}, {"sha": "6a816664c4832b0e3511336a2dc909261357311a", "filename": "src/test/run-pass/coherence/coherence-multidispatch-tuple.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-multidispatch-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-multidispatch-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-multidispatch-tuple.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(unused_imports)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "98b04489ac4de8063e5c18af82ff48afca7339f4", "filename": "src/test/run-pass/coherence/coherence-negative-impls-safe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-negative-impls-safe.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "4da54d386fd35438da341f4a6f54f073461ac1df", "filename": "src/test/run-pass/coherence/coherence-rfc447-constrained.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-rfc447-constrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-rfc447-constrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-rfc447-constrained.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n // check that trait matching can handle impls whose types are only\n // constrained by a projection.\n "}, {"sha": "283974203858d85ffd5205a8799edd667d2d6bb9", "filename": "src/test/run-pass/coherence/coherence-where-clause.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-where-clause.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,4 +1,8 @@\n // run-pass\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n use std::fmt::Debug;\n use std::default::Default;\n "}, {"sha": "653f76264c1108bdf3db8aaa648e4b37a22e70b4", "filename": "src/test/run-pass/coherence/coherence_copy_like.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence_copy_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence_copy_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence_copy_like.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n // Test that we are able to introduce a negative constraint that\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers."}, {"sha": "bacd3b89fad29333a04f65de99c86f0b8b75abb6", "filename": "src/test/run-pass/coherence/re-rebalance-coherence.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fre-rebalance-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Frun-pass%2Fcoherence%2Fre-rebalance-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fre-rebalance-coherence.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,14 @@\n+#![allow(dead_code)]\n+#![feature(re_rebalance_coherence)]\n+\n+// run-pass\n+// aux-build:re_rebalance_coherence_lib.rs\n+\n+extern crate re_rebalance_coherence_lib as lib;\n+use lib::*;\n+\n+struct Oracle;\n+impl Backend for Oracle {}\n+impl<'a, T:'a, Tab> QueryFragment<Oracle> for BatchInsert<'a, T, Tab> {}\n+\n+fn main() {}"}, {"sha": "c8d027b25c7486dedf9ca2aec24f832d8def828b", "filename": "src/test/ui/coherence/auxiliary/re_rebalance_coherence_lib.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Fre_rebalance_coherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Fre_rebalance_coherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Fre_rebalance_coherence_lib.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,23 @@\n+\n+pub trait Backend{}\n+pub trait SupportsDefaultKeyword {}\n+\n+impl SupportsDefaultKeyword for Postgres {}\n+\n+pub struct Postgres;\n+\n+impl Backend for Postgres {}\n+\n+pub struct AstPass<DB>(::std::marker::PhantomData<DB>);\n+\n+pub trait QueryFragment<DB: Backend> {}\n+\n+\n+#[derive(Debug, Clone, Copy)]\n+pub struct BatchInsert<'a, T: 'a, Tab> {\n+    _marker: ::std::marker::PhantomData<(&'a T, Tab)>,\n+}\n+\n+impl<'a, T:'a, Tab, DB> QueryFragment<DB> for BatchInsert<'a, T, Tab>\n+where DB: SupportsDefaultKeyword + Backend,\n+{}"}, {"sha": "0389a6228efcd5f2ad69f52bf985a1591304496d", "filename": "src/test/ui/coherence/coherence-all-remote.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-all-remote.rs:6:1\n+  --> $DIR/coherence-all-remote.rs:9:1\n    |\n LL | impl<T> Remote1<T> for isize { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-all-remote.stderr"}, {"sha": "0389a6228efcd5f2ad69f52bf985a1591304496d", "filename": "src/test/ui/coherence/coherence-all-remote.re.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,11 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+  --> $DIR/coherence-all-remote.rs:9:1\n+   |\n+LL | impl<T> Remote1<T> for isize { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0210`."}, {"sha": "68c924ee274034be7214d18649a2402632ef9a01", "filename": "src/test/ui/coherence/coherence-all-remote.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,9 +1,13 @@\n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote1;\n \n impl<T> Remote1<T> for isize { }\n-//~^ ERROR E0210\n+//[old]~^ ERROR E0210\n+//[re]~^^ ERROR E0210\n \n fn main() { }"}, {"sha": "54fec07e65a0deced9a656af192adbae9db14035", "filename": "src/test/ui/coherence/coherence-bigint-param.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-bigint-param.rs:8:1\n+  --> $DIR/coherence-bigint-param.rs:11:1\n    |\n LL | impl<T> Remote1<BigInt> for T { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-bigint-param.stderr"}, {"sha": "54fec07e65a0deced9a656af192adbae9db14035", "filename": "src/test/ui/coherence/coherence-bigint-param.re.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,11 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+  --> $DIR/coherence-bigint-param.rs:11:1\n+   |\n+LL | impl<T> Remote1<BigInt> for T { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0210`."}, {"sha": "24106b4b348d4f149a08deccb6236998689defb8", "filename": "src/test/ui/coherence/coherence-bigint-param.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,11 +1,15 @@\n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote1;\n \n pub struct BigInt;\n \n impl<T> Remote1<BigInt> for T { }\n-//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[old]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[re]~^^ ERROR E0210\n \n fn main() { }"}, {"sha": "a6d29048b4d8ccbfa8dc287599dd7057470a13b1", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-implemented.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/coherence-blanket-conflicts-with-blanket-implemented.rs:24:1\n+  --> $DIR/coherence-blanket-conflicts-with-blanket-implemented.rs:28:1\n    |\n LL | impl<T:Even> MyTrait for T {\n    | -------------------------- first implementation here\n ...\n-LL | impl<T:Odd> MyTrait for T { //~ ERROR E0119\n+LL | impl<T:Odd> MyTrait for T {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-implemented.stderr"}, {"sha": "a6d29048b4d8ccbfa8dc287599dd7057470a13b1", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-implemented.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait`:\n+  --> $DIR/coherence-blanket-conflicts-with-blanket-implemented.rs:28:1\n+   |\n+LL | impl<T:Even> MyTrait for T {\n+   | -------------------------- first implementation here\n+...\n+LL | impl<T:Odd> MyTrait for T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "098a13e54bfb4a199eac6219cd79c87151e0beb9", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-implemented.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,3 +1,7 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n use std::fmt::Debug;\n use std::default::Default;\n \n@@ -21,7 +25,10 @@ impl<T:Even> MyTrait for T {\n     fn get(&self) -> usize { 0 }\n }\n \n-impl<T:Odd> MyTrait for T { //~ ERROR E0119\n+impl<T:Odd> MyTrait for T {\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n+\n     fn get(&self) -> usize { 0 }\n }\n "}, {"sha": "1f3ddd1dc42c6d2b114da853807a8777c59515b4", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-unimplemented.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/coherence-blanket-conflicts-with-blanket-unimplemented.rs:20:1\n+  --> $DIR/coherence-blanket-conflicts-with-blanket-unimplemented.rs:24:1\n    |\n LL | impl<T:Even> MyTrait for T {\n    | -------------------------- first implementation here\n ...\n-LL | impl<T:Odd> MyTrait for T { //~ ERROR E0119\n+LL | impl<T:Odd> MyTrait for T {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-unimplemented.stderr"}, {"sha": "1f3ddd1dc42c6d2b114da853807a8777c59515b4", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-unimplemented.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait`:\n+  --> $DIR/coherence-blanket-conflicts-with-blanket-unimplemented.rs:24:1\n+   |\n+LL | impl<T:Even> MyTrait for T {\n+   | -------------------------- first implementation here\n+...\n+LL | impl<T:Odd> MyTrait for T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "5b76fc0174b3031e821f32db370ba98a10c86d41", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-unimplemented.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,3 +1,7 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n use std::fmt::Debug;\n use std::default::Default;\n \n@@ -17,7 +21,9 @@ impl<T:Even> MyTrait for T {\n     fn get(&self) -> usize { 0 }\n }\n \n-impl<T:Odd> MyTrait for T { //~ ERROR E0119\n+impl<T:Odd> MyTrait for T {\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n     fn get(&self) -> usize { 0 }\n }\n "}, {"sha": "298ac6d1f21694b892cf3cc7266e5dae2316a2cc", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,7 +1,7 @@\n error[E0119]: conflicting implementations of trait `go_trait::GoMut` for type `MyThingy`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific-cross-crate.rs:15:1\n+  --> $DIR/coherence-blanket-conflicts-with-specific-cross-crate.rs:18:1\n    |\n-LL | impl GoMut for MyThingy { //~ ERROR conflicting implementations\n+LL | impl GoMut for MyThingy {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `go_trait`:", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.stderr"}, {"sha": "298ac6d1f21694b892cf3cc7266e5dae2316a2cc", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.re.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,13 @@\n+error[E0119]: conflicting implementations of trait `go_trait::GoMut` for type `MyThingy`:\n+  --> $DIR/coherence-blanket-conflicts-with-specific-cross-crate.rs:18:1\n+   |\n+LL | impl GoMut for MyThingy {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `go_trait`:\n+           - impl<G> go_trait::GoMut for G\n+             where G: go_trait::Go;\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "b0aaf57e2a9421932c6c5864e43347d5722849f8", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,4 +1,7 @@\n // aux-build:go_trait.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate go_trait;\n \n@@ -12,7 +15,9 @@ impl Go for MyThingy {\n     fn go(&self, arg: isize) { }\n }\n \n-impl GoMut for MyThingy { //~ ERROR conflicting implementations\n+impl GoMut for MyThingy {\n+//[old]~^ ERROR conflicting implementations\n+//[re]~^^ ERROR E0119\n     fn go_mut(&mut self, arg: isize) { }\n }\n "}, {"sha": "94bbbdbe0a404ad0ae7d8dbdc32df885418206d8", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-multidispatch.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait<MyType>` for type `MyType`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific-multidispatch.rs:22:1\n+  --> $DIR/coherence-blanket-conflicts-with-specific-multidispatch.rs:26:1\n    |\n LL | impl<T> MyTrait<T> for T {\n    | ------------------------ first implementation here\n ...\n-LL | impl MyTrait<MyType> for MyType { //~ ERROR E0119\n+LL | impl MyTrait<MyType> for MyType {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-multidispatch.stderr"}, {"sha": "94bbbdbe0a404ad0ae7d8dbdc32df885418206d8", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-multidispatch.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait<MyType>` for type `MyType`:\n+  --> $DIR/coherence-blanket-conflicts-with-specific-multidispatch.rs:26:1\n+   |\n+LL | impl<T> MyTrait<T> for T {\n+   | ------------------------ first implementation here\n+...\n+LL | impl MyTrait<MyType> for MyType {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "9192d123514ab191b3f94b6b2d6d4db7eed75c4d", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-multidispatch.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,3 +1,7 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n use std::fmt::Debug;\n use std::default::Default;\n \n@@ -19,7 +23,9 @@ struct MyType {\n     dummy: usize\n }\n \n-impl MyTrait<MyType> for MyType { //~ ERROR E0119\n+impl MyTrait<MyType> for MyType {\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n     fn get(&self) -> usize { (*self).clone() }\n }\n "}, {"sha": "cf799c20cb49cff6afd4d187e4110b3391552074", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-trait.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific-trait.rs:20:1\n+  --> $DIR/coherence-blanket-conflicts-with-specific-trait.rs:24:1\n    |\n LL | impl<T:OtherTrait> MyTrait for T {\n    | -------------------------------- first implementation here\n ...\n-LL | impl MyTrait for MyType { //~ ERROR E0119\n+LL | impl MyTrait for MyType {\n    | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-trait.stderr"}, {"sha": "cf799c20cb49cff6afd4d187e4110b3391552074", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-trait.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n+  --> $DIR/coherence-blanket-conflicts-with-specific-trait.rs:24:1\n+   |\n+LL | impl<T:OtherTrait> MyTrait for T {\n+   | -------------------------------- first implementation here\n+...\n+LL | impl MyTrait for MyType {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "51cb10e6185565177f34c329dabc76605f023d1b", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-trait.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,6 +1,10 @@\n // Test that a blank impl for all T:PartialEq conflicts with an impl for some\n // specific T when T:PartialEq.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n trait OtherTrait {\n     fn noop(&self);\n }\n@@ -17,7 +21,9 @@ struct MyType {\n     dummy: usize\n }\n \n-impl MyTrait for MyType { //~ ERROR E0119\n+impl MyTrait for MyType {\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n     fn get(&self) -> usize { self.dummy }\n }\n "}, {"sha": "0807b11a434f98fa5a6d950bf0ae0ca8be8285e5", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific.rs:19:1\n+  --> $DIR/coherence-blanket-conflicts-with-specific.rs:23:1\n    |\n LL | impl<T> MyTrait for T {\n    | --------------------- first implementation here\n ...\n-LL | impl MyTrait for MyType { //~ ERROR E0119\n+LL | impl MyTrait for MyType {\n    | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific.stderr"}, {"sha": "0807b11a434f98fa5a6d950bf0ae0ca8be8285e5", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n+  --> $DIR/coherence-blanket-conflicts-with-specific.rs:23:1\n+   |\n+LL | impl<T> MyTrait for T {\n+   | --------------------- first implementation here\n+...\n+LL | impl MyTrait for MyType {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "3ecb613188ae45b3f0178d2e835c758e2def6cde", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,3 +1,7 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n use std::fmt::Debug;\n use std::default::Default;\n \n@@ -16,7 +20,9 @@ struct MyType {\n     dummy: usize\n }\n \n-impl MyTrait for MyType { //~ ERROR E0119\n+impl MyTrait for MyType {\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n     fn get(&self) -> usize { self.dummy }\n }\n "}, {"sha": "bb3641f224780f045d9a2addb1ddb1fd03fe6e24", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n-  --> $DIR/coherence-conflicting-negative-trait-impl.rs:10:1\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:13:1\n    |\n LL | unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n    | ---------------------------------------------------- first implementation here\n@@ -8,7 +8,7 @@ LL | impl<T: MyTrait> !Send for TestType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n \n error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<i32>`:\n-  --> $DIR/coherence-conflicting-negative-trait-impl.rs:15:1\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:19:1\n    |\n LL | unsafe impl<T:'static> Send for TestType<T> {}\n    | ------------------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.stderr"}, {"sha": "bb3641f224780f045d9a2addb1ddb1fd03fe6e24", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.re.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,21 @@\n+error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:13:1\n+   |\n+LL | unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n+   | ---------------------------------------------------- first implementation here\n+LL | \n+LL | impl<T: MyTrait> !Send for TestType<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n+\n+error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<i32>`:\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:19:1\n+   |\n+LL | unsafe impl<T:'static> Send for TestType<T> {}\n+   | ------------------------------------------- first implementation here\n+LL | \n+LL | impl !Send for TestType<i32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<i32>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "e05fecb11ed4ba95d658acddf787f5d059809ab3", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,3 +1,6 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n #![feature(overlapping_marker_traits)]\n \n@@ -8,11 +11,13 @@ struct TestType<T>(::std::marker::PhantomData<T>);\n unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n \n impl<T: MyTrait> !Send for TestType<T> {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Send`\n+//[old]~^ ERROR conflicting implementations of trait `std::marker::Send`\n+//[re]~^^ ERROR E0119\n \n unsafe impl<T:'static> Send for TestType<T> {}\n \n impl !Send for TestType<i32> {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Send`\n+//[old]~^ ERROR conflicting implementations of trait `std::marker::Send`\n+//[re]~^^ ERROR E0119\n \n fn main() {}"}, {"sha": "dd9cfab503f72f174c8cab1d66ce7e23bdda120b", "filename": "src/test/ui/coherence/coherence-cow.a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,7 +1,7 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:16:1\n+  --> $DIR/coherence-cow.rs:18:1\n    |\n-LL | impl<T> Remote for Pair<T,Cover<T>> { } //[a]~ ERROR E0210\n+LL | impl<T> Remote for Pair<T,Cover<T>> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter"}, {"sha": "fb3ca3fc6b777b84f0063ddc4f9da6be1bd02fa4", "filename": "src/test/ui/coherence/coherence-cow.b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,7 +1,7 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:19:1\n+  --> $DIR/coherence-cow.rs:23:1\n    |\n-LL | impl<T> Remote for Pair<Cover<T>,T> { } //[b]~ ERROR E0210\n+LL | impl<T> Remote for Pair<Cover<T>,T> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter"}, {"sha": "f17823b7f8954609a5dcde537095c024bdaf6e16", "filename": "src/test/ui/coherence/coherence-cow.c.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:22:1\n+  --> $DIR/coherence-cow.rs:28:1\n    |\n LL | impl<T,U> Remote for Pair<Cover<T>,U> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "ed627600b0f5d39bdc2794d8a50d9ce10e5e2b84", "filename": "src/test/ui/coherence/coherence-cow.re_a.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-cow.rs:18:1\n+   |\n+LL | impl<T> Remote for Pair<T,Cover<T>> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "1a85887ae7bc47ece6da6c5e3a97a64a529a3813", "filename": "src/test/ui/coherence/coherence-cow.re_b.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-cow.rs:23:1\n+   |\n+LL | impl<T> Remote for Pair<Cover<T>,T> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "8043b6702b07efb983cd4aa758be1b8a8b76591e", "filename": "src/test/ui/coherence/coherence-cow.re_c.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-cow.rs:28:1\n+   |\n+LL | impl<T,U> Remote for Pair<Cover<T>,U> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "956b073414861aa9763ec5d1a49976176bceb603", "filename": "src/test/ui/coherence/coherence-cow.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,4 +1,6 @@\n-// revisions: a b c\n+// revisions: a b c re_a re_b re_c\n+\n+#![cfg_attr(any(re_a, re_b, re_c), feature(re_rebalance_coherence))]\n \n // aux-build:coherence_lib.rs\n \n@@ -12,14 +14,19 @@ use lib::{Remote,Pair};\n \n pub struct Cover<T>(T);\n \n-#[cfg(a)]\n-impl<T> Remote for Pair<T,Cover<T>> { } //[a]~ ERROR E0210\n+#[cfg(any(a, re_a))]\n+impl<T> Remote for Pair<T,Cover<T>> { }\n+//[a]~^ ERROR E0210\n+//[re_a]~^^ ERROR E0117\n \n-#[cfg(b)]\n-impl<T> Remote for Pair<Cover<T>,T> { } //[b]~ ERROR E0210\n+#[cfg(any(b, re_b))]\n+impl<T> Remote for Pair<Cover<T>,T> { }\n+//[b]~^ ERROR E0210\n+//[re_b]~^^ ERROR E0117\n \n-#[cfg(c)]\n+#[cfg(any(c, re_c))]\n impl<T,U> Remote for Pair<Cover<T>,U> { }\n //[c]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[re_c]~^^ ERROR E0117\n \n fn main() { }"}, {"sha": "3ba32a528354ef23db71e39f26b172afb6be7f60", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`:\n-  --> $DIR/coherence-cross-crate-conflict.rs:8:1\n+  --> $DIR/coherence-cross-crate-conflict.rs:12:1\n    |\n LL | impl<A> Foo for A {\n    | ^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | impl<A> Foo for A {\n            - impl trait_impl_conflict::Foo for isize;\n \n error[E0210]: type parameter `A` must be used as the type parameter for some local type (e.g., `MyStruct<A>`)\n-  --> $DIR/coherence-cross-crate-conflict.rs:8:1\n+  --> $DIR/coherence-cross-crate-conflict.rs:12:1\n    |\n LL | impl<A> Foo for A {\n    | ^^^^^^^^^^^^^^^^^ type parameter `A` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-cross-crate-conflict.stderr"}, {"sha": "3ba32a528354ef23db71e39f26b172afb6be7f60", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.re.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,21 @@\n+error[E0119]: conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`:\n+  --> $DIR/coherence-cross-crate-conflict.rs:12:1\n+   |\n+LL | impl<A> Foo for A {\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `trait_impl_conflict`:\n+           - impl trait_impl_conflict::Foo for isize;\n+\n+error[E0210]: type parameter `A` must be used as the type parameter for some local type (e.g., `MyStruct<A>`)\n+  --> $DIR/coherence-cross-crate-conflict.rs:12:1\n+   |\n+LL | impl<A> Foo for A {\n+   | ^^^^^^^^^^^^^^^^^ type parameter `A` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0119, E0210.\n+For more information about an error, try `rustc --explain E0119`."}, {"sha": "9643ab643dfe5321cbec24de7c30a04316d42b0a", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -2,12 +2,18 @@\n // generalizes the one upstream\n \n // aux-build:trait_impl_conflict.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n extern crate trait_impl_conflict;\n use trait_impl_conflict::Foo;\n \n impl<A> Foo for A {\n-    //~^ ERROR type parameter `A` must be used as the type parameter for some local type\n-    //~| ERROR conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`\n+    //[old]~^ ERROR type parameter `A` must be used as the type parameter for some local type\n+    //[old]~| ERROR conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`\n+    //[re]~^^^ ERROR E0119\n+    //[re]~| ERROR E0210\n }\n \n fn main() {"}, {"sha": "534f4b0dcdb3c988d6323dfc06ce2f8b7cfdc326", "filename": "src/test/ui/coherence/coherence-default-trait-impl.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,11 +1,11 @@\n error[E0199]: implementing the trait `MySafeTrait` is not unsafe\n-  --> $DIR/coherence-default-trait-impl.rs:7:1\n+  --> $DIR/coherence-default-trait-impl.rs:10:1\n    |\n LL | unsafe impl MySafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0200]: the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n-  --> $DIR/coherence-default-trait-impl.rs:12:1\n+  --> $DIR/coherence-default-trait-impl.rs:16:1\n    |\n LL | impl MyUnsafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/coherence/coherence-default-trait-impl.stderr"}, {"sha": "534f4b0dcdb3c988d6323dfc06ce2f8b7cfdc326", "filename": "src/test/ui/coherence/coherence-default-trait-impl.re.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,16 @@\n+error[E0199]: implementing the trait `MySafeTrait` is not unsafe\n+  --> $DIR/coherence-default-trait-impl.rs:10:1\n+   |\n+LL | unsafe impl MySafeTrait for Foo {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0200]: the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n+  --> $DIR/coherence-default-trait-impl.rs:16:1\n+   |\n+LL | impl MyUnsafeTrait for Foo {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0199, E0200.\n+For more information about an error, try `rustc --explain E0199`."}, {"sha": "606b4947b5f09c70e886f7dcb47518f06d06af57", "filename": "src/test/ui/coherence/coherence-default-trait-impl.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,15 +1,20 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n \n auto trait MySafeTrait {}\n \n struct Foo;\n \n unsafe impl MySafeTrait for Foo {}\n-//~^ ERROR implementing the trait `MySafeTrait` is not unsafe\n+//[old]~^ ERROR implementing the trait `MySafeTrait` is not unsafe\n+//[re]~^^ ERROR E0199\n \n unsafe auto trait MyUnsafeTrait {}\n \n impl MyUnsafeTrait for Foo {}\n-//~^ ERROR the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n+//[old]~^ ERROR the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n+//[re]~^^ ERROR E0200\n \n fn main() {}"}, {"sha": "b81f75533176f086af77d297a803d1e05ffc8733", "filename": "src/test/ui/coherence/coherence-error-suppression.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,7 +1,7 @@\n error[E0412]: cannot find type `DoesNotExist` in this scope\n-  --> $DIR/coherence-error-suppression.rs:9:14\n+  --> $DIR/coherence-error-suppression.rs:13:14\n    |\n-LL | impl Foo for DoesNotExist {} //~ ERROR cannot find type `DoesNotExist` in this scope\n+LL | impl Foo for DoesNotExist {}\n    |              ^^^^^^^^^^^^ not found in this scope\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-error-suppression.stderr"}, {"sha": "b81f75533176f086af77d297a803d1e05ffc8733", "filename": "src/test/ui/coherence/coherence-error-suppression.re.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `DoesNotExist` in this scope\n+  --> $DIR/coherence-error-suppression.rs:13:14\n+   |\n+LL | impl Foo for DoesNotExist {}\n+   |              ^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "60b88fb80e44f2677e7c5daf0e389aba42b8c13c", "filename": "src/test/ui/coherence/coherence-error-suppression.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,12 +1,18 @@\n // check that error types in coherence do not cause error cascades.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n trait Foo {}\n \n impl Foo for i8 {}\n impl Foo for i16 {}\n impl Foo for i32 {}\n impl Foo for i64 {}\n-impl Foo for DoesNotExist {} //~ ERROR cannot find type `DoesNotExist` in this scope\n+impl Foo for DoesNotExist {}\n+//[old]~^ ERROR cannot find type `DoesNotExist` in this scope\n+//[re]~^^ ERROR E0412\n impl Foo for u8 {}\n impl Foo for u16 {}\n impl Foo for u32 {}"}, {"sha": "756ab2b102b56d819d514fb90a2ead200bb3ff8b", "filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-fundamental-trait-objects.rs:12:1\n+  --> $DIR/coherence-fundamental-trait-objects.rs:15:1\n    |\n LL | impl Misc for dyn Fundamental<Local> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate", "previous_filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.stderr"}, {"sha": "756ab2b102b56d819d514fb90a2ead200bb3ff8b", "filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-fundamental-trait-objects.rs:15:1\n+   |\n+LL | impl Misc for dyn Fundamental<Local> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "0c7d54425ddc43351da038737efe058ba1c8562c", "filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -3,13 +3,17 @@\n // are distinct.\n \n // aux-build:coherence_fundamental_trait_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_fundamental_trait_lib;\n \n use coherence_fundamental_trait_lib::{Fundamental, Misc};\n \n pub struct Local;\n impl Misc for dyn Fundamental<Local> {}\n-//~^ ERROR E0117\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n fn main() {}"}, {"sha": "b48f6bbfb94173b5014619501417e84bc9081ea7", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,7 +1,7 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n-  --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:7:6\n+  --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n-LL | impl NotObjectSafe for NotObjectSafe { } //~ ERROR E0038\n+LL | impl NotObjectSafe for NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n    |\n    = note: method `eq` references the `Self` type in its arguments or return type", "previous_filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.stderr"}, {"sha": "b48f6bbfb94173b5014619501417e84bc9081ea7", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.re.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,11 @@\n+error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n+  --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n+   |\n+LL | impl NotObjectSafe for NotObjectSafe { }\n+   |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |\n+   = note: method `eq` references the `Self` type in its arguments or return type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "803e8fc6bca64c558a1de5cd95a6f01f8431ef8b", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,9 +1,15 @@\n // Test that we give suitable error messages when the user attempts to\n // impl a trait `Trait` for its own object type.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n // If the trait is not object-safe, we give a more tailored message\n // because we're such schnuckels:\n trait NotObjectSafe { fn eq(&self, other: Self); }\n-impl NotObjectSafe for NotObjectSafe { } //~ ERROR E0038\n+impl NotObjectSafe for NotObjectSafe { }\n+//[old]~^ ERROR E0038\n+//[re]~^^ ERROR E0038\n \n fn main() { }"}, {"sha": "324747603f91128fbaf2e6f519f686abacab4d2d", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.old.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,19 +1,19 @@\n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Foo`\n-  --> $DIR/coherence-impl-trait-for-trait.rs:9:1\n+  --> $DIR/coherence-impl-trait-for-trait.rs:13:1\n    |\n-LL | impl Foo for Baz { }   //~ ERROR E0371\n+LL | impl Foo for Baz { }\n    | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n \n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Bar`\n-  --> $DIR/coherence-impl-trait-for-trait.rs:10:1\n+  --> $DIR/coherence-impl-trait-for-trait.rs:16:1\n    |\n-LL | impl Bar for Baz { }   //~ ERROR E0371\n+LL | impl Bar for Baz { }\n    | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n \n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Baz`\n-  --> $DIR/coherence-impl-trait-for-trait.rs:11:1\n+  --> $DIR/coherence-impl-trait-for-trait.rs:19:1\n    |\n-LL | impl Baz for Baz { }   //~ ERROR E0371\n+LL | impl Baz for Baz { }\n    | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`\n \n error: aborting due to 3 previous errors", "previous_filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.stderr"}, {"sha": "324747603f91128fbaf2e6f519f686abacab4d2d", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.re.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,21 @@\n+error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Foo`\n+  --> $DIR/coherence-impl-trait-for-trait.rs:13:1\n+   |\n+LL | impl Foo for Baz { }\n+   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n+\n+error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Bar`\n+  --> $DIR/coherence-impl-trait-for-trait.rs:16:1\n+   |\n+LL | impl Bar for Baz { }\n+   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n+\n+error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Baz`\n+  --> $DIR/coherence-impl-trait-for-trait.rs:19:1\n+   |\n+LL | impl Baz for Baz { }\n+   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0371`."}, {"sha": "dcaf564fdecfed1fb4be5b77d75dc4dccc82823e", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,14 +1,24 @@\n // Test that we give suitable error messages when the user attempts to\n // impl a trait `Trait` for its own object type.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n trait Foo { fn dummy(&self) { } }\n trait Bar: Foo { }\n trait Baz: Bar { }\n \n // Supertraits of Baz are not legal:\n-impl Foo for Baz { }   //~ ERROR E0371\n-impl Bar for Baz { }   //~ ERROR E0371\n-impl Baz for Baz { }   //~ ERROR E0371\n+impl Foo for Baz { }\n+//[old]~^ ERROR E0371\n+//[re]~^^ ERROR E0371\n+impl Bar for Baz { }\n+//[old]~^ ERROR E0371\n+//[re]~^^ ERROR E0371\n+impl Baz for Baz { }\n+//[old]~^ ERROR E0371\n+//[re]~^^ ERROR E0371\n \n // But other random traits are:\n trait Other { }"}, {"sha": "defbbbadd5598461f3be680663469a6edc8322a7", "filename": "src/test/ui/coherence/coherence-impls-copy.old.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `i32`:\n-  --> $DIR/coherence-impls-copy.rs:5:1\n+  --> $DIR/coherence-impls-copy.rs:8:1\n    |\n LL | impl Copy for i32 {}\n    | ^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | impl Copy for i32 {}\n            - impl std::marker::Copy for i32;\n \n error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n-  --> $DIR/coherence-impls-copy.rs:31:1\n+  --> $DIR/coherence-impls-copy.rs:37:1\n    |\n LL | impl Copy for &'static NotSync {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL | impl Copy for &'static NotSync {}\n              where T: ?Sized;\n \n error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n-  --> $DIR/coherence-impls-copy.rs:38:1\n+  --> $DIR/coherence-impls-copy.rs:45:1\n    |\n LL | impl Copy for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -28,25 +28,25 @@ LL | impl Copy for &'static [NotSync] {}\n              where T: ?Sized;\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:23:15\n+  --> $DIR/coherence-impls-copy.rs:27:15\n    |\n LL | impl Copy for &'static mut MyType {}\n    |               ^^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:27:15\n+  --> $DIR/coherence-impls-copy.rs:32:15\n    |\n LL | impl Copy for (MyType, MyType) {}\n    |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:34:15\n+  --> $DIR/coherence-impls-copy.rs:40:15\n    |\n LL | impl Copy for [MyType] {}\n    |               ^^^^^^^^ type is not a structure or enumeration\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:5:1\n+  --> $DIR/coherence-impls-copy.rs:8:1\n    |\n LL | impl Copy for i32 {}\n    | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n@@ -55,7 +55,7 @@ LL | impl Copy for i32 {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:27:1\n+  --> $DIR/coherence-impls-copy.rs:32:1\n    |\n LL | impl Copy for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n@@ -64,7 +64,7 @@ LL | impl Copy for (MyType, MyType) {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:34:1\n+  --> $DIR/coherence-impls-copy.rs:40:1\n    |\n LL | impl Copy for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n@@ -73,7 +73,7 @@ LL | impl Copy for [MyType] {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:38:1\n+  --> $DIR/coherence-impls-copy.rs:45:1\n    |\n LL | impl Copy for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate", "previous_filename": "src/test/ui/coherence/coherence-impls-copy.stderr"}, {"sha": "defbbbadd5598461f3be680663469a6edc8322a7", "filename": "src/test/ui/coherence/coherence-impls-copy.re.stderr", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,87 @@\n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `i32`:\n+  --> $DIR/coherence-impls-copy.rs:8:1\n+   |\n+LL | impl Copy for i32 {}\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl std::marker::Copy for i32;\n+\n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n+  --> $DIR/coherence-impls-copy.rs:37:1\n+   |\n+LL | impl Copy for &'static NotSync {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<T> std::marker::Copy for &T\n+             where T: ?Sized;\n+\n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n+  --> $DIR/coherence-impls-copy.rs:45:1\n+   |\n+LL | impl Copy for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<T> std::marker::Copy for &T\n+             where T: ?Sized;\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:27:15\n+   |\n+LL | impl Copy for &'static mut MyType {}\n+   |               ^^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:32:15\n+   |\n+LL | impl Copy for (MyType, MyType) {}\n+   |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:40:15\n+   |\n+LL | impl Copy for [MyType] {}\n+   |               ^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:8:1\n+   |\n+LL | impl Copy for i32 {}\n+   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:32:1\n+   |\n+LL | impl Copy for (MyType, MyType) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:40:1\n+   |\n+LL | impl Copy for [MyType] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:45:1\n+   |\n+LL | impl Copy for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 10 previous errors\n+\n+Some errors occurred: E0117, E0119, E0206.\n+For more information about an error, try `rustc --explain E0117`."}, {"sha": "97133bc33ce0deb46f2c3778b34f2cbf639bd39f", "filename": "src/test/ui/coherence/coherence-impls-copy.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,11 +1,15 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n \n use std::marker::Copy;\n \n impl Copy for i32 {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `i32`:\n-//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-\n+//[old]~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `i32`:\n+//[old]~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+//[re]~^^^ ERROR E0119\n+//[re]~| ERROR E0117\n enum TestE {\n   A\n }\n@@ -21,23 +25,27 @@ impl Clone for TestE { fn clone(&self) -> Self { *self } }\n impl Copy for MyType {}\n \n impl Copy for &'static mut MyType {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n+//[old]~^ ERROR the trait `Copy` may not be implemented for this type\n+//[re]~^^ ERROR E0206\n impl Clone for MyType { fn clone(&self) -> Self { *self } }\n \n impl Copy for (MyType, MyType) {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-\n+//[old]~^ ERROR the trait `Copy` may not be implemented for this type\n+//[old]~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+//[re]~^^^ ERROR E0206\n+//[re]~| ERROR E0117\n impl Copy for &'static NotSync {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n-\n+//[old]~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n+//[re]~^^  ERROR E0119\n impl Copy for [MyType] {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-\n+//[old]~^ ERROR the trait `Copy` may not be implemented for this type\n+//[old]~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+//[re]~^^^ ERROR E0206\n+//[re]~| ERROR E0117\n impl Copy for &'static [NotSync] {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n-//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-\n+//[old]~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n+//[old]~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+//[re]~^^^ ERROR E0119\n+//[re]~| ERROR E0117\n fn main() {\n }"}, {"sha": "ca45c28ec2d7484393b95d6efedaa96474007c57", "filename": "src/test/ui/coherence/coherence-impls-send.old.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:17:1\n+  --> $DIR/coherence-impls-send.rs:20:1\n    |\n LL | unsafe impl Send for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n@@ -8,13 +8,13 @@ LL | unsafe impl Send for (MyType, MyType) {}\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n-  --> $DIR/coherence-impls-send.rs:20:1\n+  --> $DIR/coherence-impls-send.rs:24:1\n    |\n LL | unsafe impl Send for &'static NotSync {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:23:1\n+  --> $DIR/coherence-impls-send.rs:28:1\n    |\n LL | unsafe impl Send for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n@@ -23,7 +23,7 @@ LL | unsafe impl Send for [MyType] {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:26:1\n+  --> $DIR/coherence-impls-send.rs:32:1\n    |\n LL | unsafe impl Send for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate", "previous_filename": "src/test/ui/coherence/coherence-impls-send.stderr"}, {"sha": "ca45c28ec2d7484393b95d6efedaa96474007c57", "filename": "src/test/ui/coherence/coherence-impls-send.re.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,37 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-send.rs:20:1\n+   |\n+LL | unsafe impl Send for (MyType, MyType) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n+  --> $DIR/coherence-impls-send.rs:24:1\n+   |\n+LL | unsafe impl Send for &'static NotSync {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-send.rs:28:1\n+   |\n+LL | unsafe impl Send for [MyType] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-send.rs:32:1\n+   |\n+LL | unsafe impl Send for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0117, E0321.\n+For more information about an error, try `rustc --explain E0117`."}, {"sha": "ef13e9caa66783f79e452efda49ab4f3d4c87f20", "filename": "src/test/ui/coherence/coherence-impls-send.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,3 +1,6 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n #![feature(overlapping_marker_traits)]\n \n@@ -15,16 +18,20 @@ impl !Sync for NotSync {}\n unsafe impl Send for TestE {}\n unsafe impl Send for MyType {}\n unsafe impl Send for (MyType, MyType) {}\n-//~^ ERROR E0117\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n unsafe impl Send for &'static NotSync {}\n-//~^ ERROR E0321\n+//[old]~^ ERROR E0321\n+//[re]~^^ ERROR E0321\n \n unsafe impl Send for [MyType] {}\n-//~^ ERROR E0117\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n unsafe impl Send for &'static [NotSync] {}\n-//~^ ERROR E0117\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n fn main() {\n }"}, {"sha": "c9c7dd0ed66887edfcb537efc4c818e4705f5cf0", "filename": "src/test/ui/coherence/coherence-impls-sized.old.stderr", "status": "renamed", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,61 +1,61 @@\n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:14:1\n+  --> $DIR/coherence-impls-sized.rs:17:1\n    |\n-LL | impl Sized for TestE {} //~ ERROR E0322\n+LL | impl Sized for TestE {}\n    | ^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:17:1\n+  --> $DIR/coherence-impls-sized.rs:22:1\n    |\n-LL | impl Sized for MyType {} //~ ERROR E0322\n+LL | impl Sized for MyType {}\n    | ^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:20:1\n+  --> $DIR/coherence-impls-sized.rs:27:1\n    |\n-LL | impl Sized for (MyType, MyType) {} //~ ERROR E0322\n+LL | impl Sized for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:24:1\n+  --> $DIR/coherence-impls-sized.rs:34:1\n    |\n-LL | impl Sized for &'static NotSync {} //~ ERROR E0322\n+LL | impl Sized for &'static NotSync {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:27:1\n+  --> $DIR/coherence-impls-sized.rs:39:1\n    |\n-LL | impl Sized for [MyType] {} //~ ERROR E0322\n+LL | impl Sized for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:31:1\n+  --> $DIR/coherence-impls-sized.rs:46:1\n    |\n-LL | impl Sized for &'static [NotSync] {} //~ ERROR E0322\n+LL | impl Sized for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:20:1\n+  --> $DIR/coherence-impls-sized.rs:27:1\n    |\n-LL | impl Sized for (MyType, MyType) {} //~ ERROR E0322\n+LL | impl Sized for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:27:1\n+  --> $DIR/coherence-impls-sized.rs:39:1\n    |\n-LL | impl Sized for [MyType] {} //~ ERROR E0322\n+LL | impl Sized for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:31:1\n+  --> $DIR/coherence-impls-sized.rs:46:1\n    |\n-LL | impl Sized for &'static [NotSync] {} //~ ERROR E0322\n+LL | impl Sized for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate", "previous_filename": "src/test/ui/coherence/coherence-impls-sized.stderr"}, {"sha": "c9c7dd0ed66887edfcb537efc4c818e4705f5cf0", "filename": "src/test/ui/coherence/coherence-impls-sized.re.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,67 @@\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:17:1\n+   |\n+LL | impl Sized for TestE {}\n+   | ^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:22:1\n+   |\n+LL | impl Sized for MyType {}\n+   | ^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:27:1\n+   |\n+LL | impl Sized for (MyType, MyType) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:34:1\n+   |\n+LL | impl Sized for &'static NotSync {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:39:1\n+   |\n+LL | impl Sized for [MyType] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:46:1\n+   |\n+LL | impl Sized for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-sized.rs:27:1\n+   |\n+LL | impl Sized for (MyType, MyType) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-sized.rs:39:1\n+   |\n+LL | impl Sized for [MyType] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-sized.rs:46:1\n+   |\n+LL | impl Sized for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors occurred: E0117, E0322.\n+For more information about an error, try `rustc --explain E0117`."}, {"sha": "84ae2dd291b60dbec52730082cc22b000e4f9a9f", "filename": "src/test/ui/coherence/coherence-impls-sized.rs", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,3 +1,6 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n \n use std::marker::Copy;\n@@ -11,26 +14,41 @@ struct MyType;\n struct NotSync;\n impl !Sync for NotSync {}\n \n-impl Sized for TestE {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-\n-impl Sized for MyType {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-\n-impl Sized for (MyType, MyType) {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-//~| ERROR E0117\n-\n-impl Sized for &'static NotSync {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-\n-impl Sized for [MyType] {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-//~| ERROR E0117\n-\n-impl Sized for &'static [NotSync] {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-//~| ERROR E0117\n+impl Sized for TestE {}\n+//[old]~^ ERROR E0322\n+//[old]~| impl of 'Sized' not allowed\n+//[re]~^^^ ERROR E0322\n+\n+impl Sized for MyType {}\n+//[old]~^ ERROR E0322\n+//[old]~| impl of 'Sized' not allowed\n+//[re]~^^^ ERROR E0322\n+\n+impl Sized for (MyType, MyType) {}\n+//[old]~^ ERROR E0322\n+//[old]~| impl of 'Sized' not allowed\n+//[old]~| ERROR E0117\n+//[re]~^^^^ ERROR E0322\n+//[re]~| ERROR E0117\n+\n+impl Sized for &'static NotSync {}\n+//[old]~^ ERROR E0322\n+//[old]~| impl of 'Sized' not allowed\n+//[re]~^^^ ERROR E0322\n+\n+impl Sized for [MyType] {}\n+//[old]~^ ERROR E0322\n+//[old]~| impl of 'Sized' not allowed\n+//[old]~| ERROR E0117\n+//[re]~^^^^ ERROR E0322\n+//[re]~| ERROR E0117\n+\n+impl Sized for &'static [NotSync] {}\n+//[old]~^ ERROR E0322\n+//[old]~| impl of 'Sized' not allowed\n+//[old]~| ERROR E0117\n+//[re]~^^^^ ERROR E0322\n+//[re]~| ERROR E0117\n \n fn main() {\n }"}, {"sha": "a2fa49acd2c906404a6f8d27961a86e177eaf946", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,12 +1,12 @@\n error[E0391]: cycle detected when processing `Trait`\n-  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:9:1\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:12:1\n    |\n LL | trait Trait<T> { type Assoc; }\n    | ^^^^^^^^^^^^^^\n    |\n    = note: ...which again requires processing `Trait`, completing the cycle\n note: cycle used when coherence checking all impls of trait `Trait`\n-  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:9:1\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:12:1\n    |\n LL | trait Trait<T> { type Assoc; }\n    | ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.stderr"}, {"sha": "a2fa49acd2c906404a6f8d27961a86e177eaf946", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.re.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,16 @@\n+error[E0391]: cycle detected when processing `Trait`\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:12:1\n+   |\n+LL | trait Trait<T> { type Assoc; }\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = note: ...which again requires processing `Trait`, completing the cycle\n+note: cycle used when coherence checking all impls of trait `Trait`\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:12:1\n+   |\n+LL | trait Trait<T> { type Assoc; }\n+   | ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "5a6b8fb7316d8181f98339496372c8d7d0f5b582", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -4,10 +4,14 @@\n //\n // No we expect to run into a more user-friendly cycle error instead.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(specialization)]\n \n trait Trait<T> { type Assoc; }\n-//~^ cycle detected\n+//[old]~^ cycle detected\n+//[re]~^^ ERROR E0391\n \n impl<T> Trait<T> for Vec<T> {\n     type Assoc = ();"}, {"sha": "ac77241e9e7918ee00bf356e0d0eddbc4be70757", "filename": "src/test/ui/coherence/coherence-lone-type-parameter.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-lone-type-parameter.rs:6:1\n+  --> $DIR/coherence-lone-type-parameter.rs:9:1\n    |\n LL | impl<T> Remote for T { }\n    | ^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-lone-type-parameter.stderr"}, {"sha": "ac77241e9e7918ee00bf356e0d0eddbc4be70757", "filename": "src/test/ui/coherence/coherence-lone-type-parameter.re.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,11 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+  --> $DIR/coherence-lone-type-parameter.rs:9:1\n+   |\n+LL | impl<T> Remote for T { }\n+   | ^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0210`."}, {"sha": "63b38bf1cc1383db16cbc7de49cab910ca6e508c", "filename": "src/test/ui/coherence/coherence-lone-type-parameter.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,9 +1,14 @@\n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote;\n \n impl<T> Remote for T { }\n-//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[old]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[re]~^^ ERROR E0210\n+\n \n fn main() { }"}, {"sha": "7ed47dca4972de3c16fb636e6c61d16dfc78f107", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/coherence-negative-impls-safe.rs:7:1\n+  --> $DIR/coherence-negative-impls-safe.rs:10:1\n    |\n LL | unsafe impl !Send for TestType {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/coherence/coherence-negative-impls-safe.stderr"}, {"sha": "7ed47dca4972de3c16fb636e6c61d16dfc78f107", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.re.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,9 @@\n+error[E0198]: negative impls cannot be unsafe\n+  --> $DIR/coherence-negative-impls-safe.rs:10:1\n+   |\n+LL | unsafe impl !Send for TestType {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0198`."}, {"sha": "b6658d5bfa4147cde64d8c5f895e647d48c4ffad", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,10 +1,14 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n \n use std::marker::Send;\n \n struct TestType;\n \n unsafe impl !Send for TestType {}\n-//~^ ERROR negative impls cannot be unsafe\n+//[old]~^ ERROR negative impls cannot be unsafe\n+//[re]~^^ ERROR E0198\n \n fn main() {}"}, {"sha": "81465e718567669dfca3ced49a27b7769e88838a", "filename": "src/test/ui/coherence/coherence-no-direct-lifetime-dispatch.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,9 +1,9 @@\n error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/coherence-no-direct-lifetime-dispatch.rs:6:1\n+  --> $DIR/coherence-no-direct-lifetime-dispatch.rs:10:1\n    |\n LL | impl<T> MyTrait for T {}\n    | --------------------- first implementation here\n-LL | impl<T: 'static> MyTrait for T {} //~ ERROR E0119\n+LL | impl<T: 'static> MyTrait for T {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-no-direct-lifetime-dispatch.stderr"}, {"sha": "81465e718567669dfca3ced49a27b7769e88838a", "filename": "src/test/ui/coherence/coherence-no-direct-lifetime-dispatch.re.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,11 @@\n+error[E0119]: conflicting implementations of trait `MyTrait`:\n+  --> $DIR/coherence-no-direct-lifetime-dispatch.rs:10:1\n+   |\n+LL | impl<T> MyTrait for T {}\n+   | --------------------- first implementation here\n+LL | impl<T: 'static> MyTrait for T {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "9717f1ed0510e5684740b1ad6746bd0b472dbdca", "filename": "src/test/ui/coherence/coherence-no-direct-lifetime-dispatch.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,8 +1,14 @@\n // Test that you cannot *directly* dispatch on lifetime requirements\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n trait MyTrait { fn foo() {} }\n \n impl<T> MyTrait for T {}\n-impl<T: 'static> MyTrait for T {} //~ ERROR E0119\n+impl<T: 'static> MyTrait for T {}\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() {}"}, {"sha": "da5de461bf41b62df8ad37ac8035c2e47c69a0ca", "filename": "src/test/ui/coherence/coherence-orphan.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-orphan.rs:11:1\n+  --> $DIR/coherence-orphan.rs:13:1\n    |\n LL | impl TheTrait<usize> for isize { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n@@ -8,7 +8,7 @@ LL | impl TheTrait<usize> for isize { }\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-orphan.rs:18:1\n+  --> $DIR/coherence-orphan.rs:21:1\n    |\n LL | impl !Send for Vec<isize> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate", "previous_filename": "src/test/ui/coherence/coherence-orphan.stderr"}, {"sha": "da5de461bf41b62df8ad37ac8035c2e47c69a0ca", "filename": "src/test/ui/coherence/coherence-orphan.re.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,21 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-orphan.rs:13:1\n+   |\n+LL | impl TheTrait<usize> for isize { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-orphan.rs:21:1\n+   |\n+LL | impl !Send for Vec<isize> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "18f50e46021f9b3bf4998fc50bc935f6596eda38", "filename": "src/test/ui/coherence/coherence-orphan.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,7 @@\n // aux-build:coherence_orphan_lib.rs\n+// revisions: old re\n \n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n \n extern crate coherence_orphan_lib as lib;\n@@ -9,13 +11,15 @@ use lib::TheTrait;\n struct TheType;\n \n impl TheTrait<usize> for isize { }\n-//~^ ERROR E0117\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n impl TheTrait<TheType> for isize { }\n \n impl TheTrait<isize> for TheType { }\n \n impl !Send for Vec<isize> { }\n-//~^ ERROR E0117\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n fn main() { }"}, {"sha": "c7f85b0b59078517b12fa348e9eb84f09bf3bf52", "filename": "src/test/ui/coherence/coherence-overlap-all-t-and-tuple.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `From<(_,)>` for type `(_,)`:\n-  --> $DIR/coherence-overlap-all-t-and-tuple.rs:16:1\n+  --> $DIR/coherence-overlap-all-t-and-tuple.rs:20:1\n    |\n LL | impl <T> From<T> for T {\n    | ---------------------- first implementation here\n ...\n-LL | impl <T11, U11> From<(U11,)> for (T11,) { //~ ERROR E0119\n+LL | impl <T11, U11> From<(U11,)> for (T11,) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(_,)`\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-overlap-all-t-and-tuple.stderr"}, {"sha": "c7f85b0b59078517b12fa348e9eb84f09bf3bf52", "filename": "src/test/ui/coherence/coherence-overlap-all-t-and-tuple.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `From<(_,)>` for type `(_,)`:\n+  --> $DIR/coherence-overlap-all-t-and-tuple.rs:20:1\n+   |\n+LL | impl <T> From<T> for T {\n+   | ---------------------- first implementation here\n+...\n+LL | impl <T11, U11> From<(U11,)> for (T11,) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(_,)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "bf3ce89f70bbaa3abcc20b7ca49533756c22505c", "filename": "src/test/ui/coherence/coherence-overlap-all-t-and-tuple.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -6,14 +6,20 @@\n //\n // Seems pretty basic, but then there was issue #24241. :)\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n trait From<U> {\n     fn foo() {}\n }\n \n impl <T> From<T> for T {\n }\n \n-impl <T11, U11> From<(U11,)> for (T11,) { //~ ERROR E0119\n+impl <T11, U11> From<(U11,)> for (T11,) {\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n }\n \n fn main() { }"}, {"sha": "dcfc017f1b0387a620a9125175545a7bedffb2af", "filename": "src/test/ui/coherence/coherence-overlap-downstream-inherent.old.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,18 +1,18 @@\n error[E0592]: duplicate definitions with name `dummy`\n-  --> $DIR/coherence-overlap-downstream-inherent.rs:7:26\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:11:26\n    |\n LL | impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n    |                          ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-LL | //~^ ERROR E0592\n+...\n LL | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n    |                          ------------------- other definition for `dummy`\n \n error[E0592]: duplicate definitions with name `f`\n-  --> $DIR/coherence-overlap-downstream-inherent.rs:13:38\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:18:38\n    |\n LL | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n    |                                      ^^^^^^^^^^^^^^ duplicate definitions for `f`\n-LL | //~^ ERROR E0592\n+...\n LL | impl<X> A<i32, X> { fn f(&self) {} }\n    |                     -------------- other definition for `f`\n    |", "previous_filename": "src/test/ui/coherence/coherence-overlap-downstream-inherent.stderr"}, {"sha": "dcfc017f1b0387a620a9125175545a7bedffb2af", "filename": "src/test/ui/coherence/coherence-overlap-downstream-inherent.re.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,23 @@\n+error[E0592]: duplicate definitions with name `dummy`\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:11:26\n+   |\n+LL | impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n+   |                          ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+...\n+LL | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n+   |                          ------------------- other definition for `dummy`\n+\n+error[E0592]: duplicate definitions with name `f`\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:18:38\n+   |\n+LL | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n+   |                                      ^^^^^^^^^^^^^^ duplicate definitions for `f`\n+...\n+LL | impl<X> A<i32, X> { fn f(&self) {} }\n+   |                     -------------- other definition for `f`\n+   |\n+   = note: downstream crates may implement trait `Bar<_>` for type `i32`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "ad54d247f918d0386a21937cb14eecd04ea29470", "filename": "src/test/ui/coherence/coherence-overlap-downstream-inherent.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,17 +1,23 @@\n // Tests that we consider `T: Sugar + Fruit` to be ambiguous, even\n // though no impls are found.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n struct Sweet<X>(X);\n pub trait Sugar {}\n pub trait Fruit {}\n impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n-//~^ ERROR E0592\n+//[old]~^ ERROR E0592\n+//[re]~^^ ERROR E0592\n impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n \n trait Bar<X> {}\n struct A<T, X>(T, X);\n impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n-//~^ ERROR E0592\n+//[old]~^ ERROR E0592\n+//[re]~^^ ERROR E0592\n impl<X> A<i32, X> { fn f(&self) {} }\n \n fn main() {}"}, {"sha": "b4847c03d417990e1ef3743cd795db486cac7138", "filename": "src/test/ui/coherence/coherence-overlap-downstream.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,13 +1,13 @@\n error[E0119]: conflicting implementations of trait `Sweet`:\n-  --> $DIR/coherence-overlap-downstream.rs:8:1\n+  --> $DIR/coherence-overlap-downstream.rs:12:1\n    |\n LL | impl<T:Sugar> Sweet for T { }\n    | ------------------------- first implementation here\n LL | impl<T:Fruit> Sweet for T { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`:\n-  --> $DIR/coherence-overlap-downstream.rs:14:1\n+  --> $DIR/coherence-overlap-downstream.rs:19:1\n    |\n LL | impl<X, T> Foo<X> for T where T: Bar<X> {}\n    | --------------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-overlap-downstream.stderr"}, {"sha": "b4847c03d417990e1ef3743cd795db486cac7138", "filename": "src/test/ui/coherence/coherence-overlap-downstream.re.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,21 @@\n+error[E0119]: conflicting implementations of trait `Sweet`:\n+  --> $DIR/coherence-overlap-downstream.rs:12:1\n+   |\n+LL | impl<T:Sugar> Sweet for T { }\n+   | ------------------------- first implementation here\n+LL | impl<T:Fruit> Sweet for T { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`:\n+  --> $DIR/coherence-overlap-downstream.rs:19:1\n+   |\n+LL | impl<X, T> Foo<X> for T where T: Bar<X> {}\n+   | --------------------------------------- first implementation here\n+LL | impl<X> Foo<X> for i32 {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n+   |\n+   = note: downstream crates may implement trait `Bar<_>` for type `i32`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "c6ced7b80fd9d221cf4e900b371058363c7611ea", "filename": "src/test/ui/coherence/coherence-overlap-downstream.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,17 +1,23 @@\n // Tests that we consider `T: Sugar + Fruit` to be ambiguous, even\n // though no impls are found.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n pub trait Sugar {}\n pub trait Fruit {}\n pub trait Sweet {}\n impl<T:Sugar> Sweet for T { }\n impl<T:Fruit> Sweet for T { }\n-//~^ ERROR E0119\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n pub trait Foo<X> {}\n pub trait Bar<X> {}\n impl<X, T> Foo<X> for T where T: Bar<X> {}\n impl<X> Foo<X> for i32 {}\n-//~^ ERROR E0119\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() { }"}, {"sha": "6fd9307754033b1aba0efd541986c7eed51b451f", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516-inherent.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,9 +1,9 @@\n error[E0592]: duplicate definitions with name `dummy`\n-  --> $DIR/coherence-overlap-issue-23516-inherent.rs:9:25\n+  --> $DIR/coherence-overlap-issue-23516-inherent.rs:13:25\n    |\n LL | impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n    |                         ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-LL | //~^ ERROR E0592\n+...\n LL | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n    |                              ------------------- other definition for `dummy`\n    |", "previous_filename": "src/test/ui/coherence/coherence-overlap-issue-23516-inherent.stderr"}, {"sha": "6fd9307754033b1aba0efd541986c7eed51b451f", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516-inherent.re.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,14 @@\n+error[E0592]: duplicate definitions with name `dummy`\n+  --> $DIR/coherence-overlap-issue-23516-inherent.rs:13:25\n+   |\n+LL | impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n+   |                         ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+...\n+LL | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n+   |                              ------------------- other definition for `dummy`\n+   |\n+   = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "969366e29cc350cadfd5427a2886838aeaa4857e", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516-inherent.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -2,12 +2,17 @@\n // though we see no impl of `Sugar` for `Box`. Therefore, an overlap\n // error is reported for the following pair of impls (#23516).\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n pub trait Sugar {}\n \n struct Cake<X>(X);\n \n impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n-//~^ ERROR E0592\n+//[old]~^ ERROR E0592\n+//[re]~^^ ERROR E0592\n impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n \n fn main() { }"}, {"sha": "d17d67adf0eae97c0a5d72d94ce1dcb4f5368a29", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`:\n-  --> $DIR/coherence-overlap-issue-23516.rs:8:1\n+  --> $DIR/coherence-overlap-issue-23516.rs:12:1\n    |\n LL | impl<T:Sugar> Sweet for T { }\n    | ------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-overlap-issue-23516.stderr"}, {"sha": "d17d67adf0eae97c0a5d72d94ce1dcb4f5368a29", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516.re.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,13 @@\n+error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`:\n+  --> $DIR/coherence-overlap-issue-23516.rs:12:1\n+   |\n+LL | impl<T:Sugar> Sweet for T { }\n+   | ------------------------- first implementation here\n+LL | impl<U:Sugar> Sweet for Box<U> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::boxed::Box<_>`\n+   |\n+   = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "e3c15e149f8b54bde0d46b9b128c184e7cb7c8cf", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -2,10 +2,15 @@\n // though we see no impl of `Sugar` for `Box`. Therefore, an overlap\n // error is reported for the following pair of impls (#23516).\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n pub trait Sugar { fn dummy(&self) { } }\n pub trait Sweet { fn dummy(&self) { } }\n impl<T:Sugar> Sweet for T { }\n impl<U:Sugar> Sweet for Box<U> { }\n-//~^ ERROR E0119\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() { }"}, {"sha": "429e67573b59befec12b3cd68c4e5f5de79091ad", "filename": "src/test/ui/coherence/coherence-overlap-messages.old.stderr", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,42 +1,42 @@\n error[E0119]: conflicting implementations of trait `Foo`:\n-  --> $DIR/coherence-overlap-messages.rs:4:1\n+  --> $DIR/coherence-overlap-messages.rs:8:1\n    |\n LL | impl<T> Foo for T {}\n    | ----------------- first implementation here\n-LL | impl<U> Foo for U {} //~ ERROR conflicting implementations of trait `Foo`:\n+LL | impl<U> Foo for U {}\n    | ^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error[E0119]: conflicting implementations of trait `Bar` for type `(u8, u8)`:\n-  --> $DIR/coherence-overlap-messages.rs:9:1\n+  --> $DIR/coherence-overlap-messages.rs:16:1\n    |\n LL | impl<T> Bar for (T, u8) {}\n    | ----------------------- first implementation here\n-LL | impl<T> Bar for (u8, T) {} //~ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n+LL | impl<T> Bar for (u8, T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(u8, u8)`\n \n error[E0119]: conflicting implementations of trait `Baz<u8>` for type `u8`:\n-  --> $DIR/coherence-overlap-messages.rs:14:1\n+  --> $DIR/coherence-overlap-messages.rs:23:1\n    |\n LL | impl<T> Baz<u8> for T {}\n    | --------------------- first implementation here\n-LL | impl<T> Baz<T> for u8 {} //~ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n+LL | impl<T> Baz<T> for u8 {}\n    | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n \n error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n-  --> $DIR/coherence-overlap-messages.rs:19:1\n+  --> $DIR/coherence-overlap-messages.rs:30:1\n    |\n LL | impl<T, U, V> Quux<U, V> for T {}\n    | ------------------------------ first implementation here\n-LL | impl<T, U> Quux<U, U> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n+LL | impl<T, U> Quux<U, U> for T {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n-  --> $DIR/coherence-overlap-messages.rs:20:1\n+  --> $DIR/coherence-overlap-messages.rs:33:1\n    |\n LL | impl<T, U, V> Quux<U, V> for T {}\n    | ------------------------------ first implementation here\n-LL | impl<T, U> Quux<U, U> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n-LL | impl<T, V> Quux<T, V> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n+...\n+LL | impl<T, V> Quux<T, V> for T {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error: aborting due to 5 previous errors", "previous_filename": "src/test/ui/coherence/coherence-overlap-messages.stderr"}, {"sha": "429e67573b59befec12b3cd68c4e5f5de79091ad", "filename": "src/test/ui/coherence/coherence-overlap-messages.re.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,44 @@\n+error[E0119]: conflicting implementations of trait `Foo`:\n+  --> $DIR/coherence-overlap-messages.rs:8:1\n+   |\n+LL | impl<T> Foo for T {}\n+   | ----------------- first implementation here\n+LL | impl<U> Foo for U {}\n+   | ^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error[E0119]: conflicting implementations of trait `Bar` for type `(u8, u8)`:\n+  --> $DIR/coherence-overlap-messages.rs:16:1\n+   |\n+LL | impl<T> Bar for (T, u8) {}\n+   | ----------------------- first implementation here\n+LL | impl<T> Bar for (u8, T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(u8, u8)`\n+\n+error[E0119]: conflicting implementations of trait `Baz<u8>` for type `u8`:\n+  --> $DIR/coherence-overlap-messages.rs:23:1\n+   |\n+LL | impl<T> Baz<u8> for T {}\n+   | --------------------- first implementation here\n+LL | impl<T> Baz<T> for u8 {}\n+   | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n+\n+error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n+  --> $DIR/coherence-overlap-messages.rs:30:1\n+   |\n+LL | impl<T, U, V> Quux<U, V> for T {}\n+   | ------------------------------ first implementation here\n+LL | impl<T, U> Quux<U, U> for T {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n+  --> $DIR/coherence-overlap-messages.rs:33:1\n+   |\n+LL | impl<T, U, V> Quux<U, V> for T {}\n+   | ------------------------------ first implementation here\n+...\n+LL | impl<T, V> Quux<T, V> for T {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "e0e2e672e98ddfa4ba9be05f0f000b3fbf227cc3", "filename": "src/test/ui/coherence/coherence-overlap-messages.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,22 +1,37 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n trait Foo { fn foo() {} }\n \n impl<T> Foo for T {}\n-impl<U> Foo for U {} //~ ERROR conflicting implementations of trait `Foo`:\n+impl<U> Foo for U {}\n+//[old]~^ ERROR conflicting implementations of trait `Foo`:\n+//[re]~^^ ERROR E0119\n+\n \n trait Bar { fn bar() {} }\n \n impl<T> Bar for (T, u8) {}\n-impl<T> Bar for (u8, T) {} //~ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n+impl<T> Bar for (u8, T) {}\n+//[old]~^ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n+//[re]~^^ ERROR E0119\n \n trait Baz<T> { fn baz() {} }\n \n impl<T> Baz<u8> for T {}\n-impl<T> Baz<T> for u8 {} //~ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n+impl<T> Baz<T> for u8 {}\n+//[old]~^ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n+//[re]~^^ ERROR E0119\n \n trait Quux<U, V> { fn quux() {} }\n \n impl<T, U, V> Quux<U, V> for T {}\n-impl<T, U> Quux<U, U> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n-impl<T, V> Quux<T, V> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n+impl<T, U> Quux<U, U> for T {}\n+//[old]~^ ERROR conflicting implementations of trait `Quux<_, _>`:\n+//[re]~^^ ERROR E0119\n+impl<T, V> Quux<T, V> for T {}\n+//[old]~^ ERROR conflicting implementations of trait `Quux<_, _>`:\n+//[re]~^^ ERROR E0119\n \n fn main() {}"}, {"sha": "928b65e003918323b570ea07e61f43c316115872", "filename": "src/test/ui/coherence/coherence-overlap-upstream-inherent.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,9 +1,9 @@\n error[E0592]: duplicate definitions with name `dummy`\n-  --> $DIR/coherence-overlap-upstream-inherent.rs:11:32\n+  --> $DIR/coherence-overlap-upstream-inherent.rs:15:32\n    |\n LL | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n    |                                ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-LL | //~^ ERROR E0592\n+...\n LL | impl A<i16> { fn dummy(&self) { } }\n    |               ------------------- other definition for `dummy`\n    |", "previous_filename": "src/test/ui/coherence/coherence-overlap-upstream-inherent.stderr"}, {"sha": "928b65e003918323b570ea07e61f43c316115872", "filename": "src/test/ui/coherence/coherence-overlap-upstream-inherent.re.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,14 @@\n+error[E0592]: duplicate definitions with name `dummy`\n+  --> $DIR/coherence-overlap-upstream-inherent.rs:15:32\n+   |\n+LL | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n+   |                                ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+...\n+LL | impl A<i16> { fn dummy(&self) { } }\n+   |               ------------------- other definition for `dummy`\n+   |\n+   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "92b619af076b97fd619d5a389a8e9ed135eb5eca", "filename": "src/test/ui/coherence/coherence-overlap-upstream-inherent.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -2,14 +2,19 @@\n // though the upstream crate doesn't implement it for now.\n \n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n \n extern crate coherence_lib;\n \n use coherence_lib::Remote;\n \n struct A<X>(X);\n impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n-//~^ ERROR E0592\n+//[old]~^ ERROR E0592\n+//[re]~^^ ERROR E0592\n impl A<i16> { fn dummy(&self) { } }\n \n fn main() {}"}, {"sha": "6c3484c2d8c4df3ca0ac3d9deee704c982ea70dc", "filename": "src/test/ui/coherence/coherence-overlap-upstream.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `Foo` for type `i16`:\n-  --> $DIR/coherence-overlap-upstream.rs:12:1\n+  --> $DIR/coherence-overlap-upstream.rs:16:1\n    |\n LL | impl<T> Foo for T where T: Remote {}\n    | --------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-overlap-upstream.stderr"}, {"sha": "6c3484c2d8c4df3ca0ac3d9deee704c982ea70dc", "filename": "src/test/ui/coherence/coherence-overlap-upstream.re.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,13 @@\n+error[E0119]: conflicting implementations of trait `Foo` for type `i16`:\n+  --> $DIR/coherence-overlap-upstream.rs:16:1\n+   |\n+LL | impl<T> Foo for T where T: Remote {}\n+   | --------------------------------- first implementation here\n+LL | impl Foo for i16 {}\n+   | ^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n+   |\n+   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "62f675003f9c4003d40028526354de0e4e891b1a", "filename": "src/test/ui/coherence/coherence-overlap-upstream.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -2,6 +2,10 @@\n // though the upstream crate doesn't implement it for now.\n \n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n \n extern crate coherence_lib;\n \n@@ -10,6 +14,7 @@ use coherence_lib::Remote;\n trait Foo {}\n impl<T> Foo for T where T: Remote {}\n impl Foo for i16 {}\n-//~^ ERROR E0119\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() {}"}, {"sha": "b275af9668d16124b04687bc1f9f288e313ea8ba", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-overlapping-pairs.rs:8:1\n+  --> $DIR/coherence-overlapping-pairs.rs:11:1\n    |\n LL | impl<T> Remote for lib::Pair<T,Foo> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-overlapping-pairs.stderr"}, {"sha": "0f2ec6f4ce0699d079c518744333b87abc9c2eca", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-overlapping-pairs.rs:11:1\n+   |\n+LL | impl<T> Remote for lib::Pair<T,Foo> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "de31a0839405dcc20e6e296f7aed0da2cfa7986e", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,11 +1,15 @@\n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote;\n \n struct Foo;\n \n impl<T> Remote for lib::Pair<T,Foo> { }\n-//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[old]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[re]~^^ ERROR E0117\n \n fn main() { }"}, {"sha": "8b25bee6e2f82a148a15c118e2d109908f8c0356", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-pair-covered-uncovered-1.rs:11:1\n+  --> $DIR/coherence-pair-covered-uncovered-1.rs:15:1\n    |\n LL | impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.stderr"}, {"sha": "0c654ca41835d5f1c81a55eea2b38605d1395b00", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-pair-covered-uncovered-1.rs:15:1\n+   |\n+LL | impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "91794b7999b1c3f35385e9e53e9ce50ff4633936", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -2,13 +2,18 @@\n // list of type parameters, not the self type.\n \n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n \n extern crate coherence_lib as lib;\n use lib::{Remote1, Pair};\n \n pub struct Local<T>(T);\n \n impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n-//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[old]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[re]~^^ ERROR E0117\n \n fn main() { }"}, {"sha": "39558d8dcc03797c442d2a0a8f48ee5abb7c19f7", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-pair-covered-uncovered.rs:8:1\n+  --> $DIR/coherence-pair-covered-uncovered.rs:11:1\n    |\n LL | impl<T,U> Remote for Pair<T,Local<U>> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.stderr"}, {"sha": "9bddc15390212cb4b2674c9d049daae3aeca4d30", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-pair-covered-uncovered.rs:11:1\n+   |\n+LL | impl<T,U> Remote for Pair<T,Local<U>> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "49a91412bec71f22307fc1c3eb4c080b7e131bbf", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,11 +1,15 @@\n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::{Remote, Pair};\n \n struct Local<T>(T);\n \n impl<T,U> Remote for Pair<T,Local<U>> { }\n-//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[old]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[re]~^^ ERROR E0117\n \n fn main() { }"}, {"sha": "cde9360ddf2c8f92b56611fc39c694df9a4b533e", "filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n-  --> $DIR/coherence-projection-conflict-orphan.rs:16:1\n+  --> $DIR/coherence-projection-conflict-orphan.rs:19:1\n    |\n LL | impl Foo<i32> for i32 { }\n    | --------------------- first implementation here\n LL | \n-LL | impl<A:Iterator> Foo<A::Item> for A { }  //~ ERROR E0119\n+LL | impl<A:Iterator> Foo<A::Item> for A { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n    |\n    = note: upstream crates may add new impl of trait `std::iter::Iterator` for type `i32` in future versions", "previous_filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.stderr"}, {"sha": "cde9360ddf2c8f92b56611fc39c694df9a4b533e", "filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.re.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n+  --> $DIR/coherence-projection-conflict-orphan.rs:19:1\n+   |\n+LL | impl Foo<i32> for i32 { }\n+   | --------------------- first implementation here\n+LL | \n+LL | impl<A:Iterator> Foo<A::Item> for A { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n+   |\n+   = note: upstream crates may add new impl of trait `std::iter::Iterator` for type `i32` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "4f7fc71536ba81b95da0009f69b2b394965bf961", "filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,3 +1,6 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(rustc_attrs)]\n \n // Here we expect a coherence conflict because, even though `i32` does\n@@ -13,6 +16,8 @@ pub trait Bar {\n \n impl Foo<i32> for i32 { }\n \n-impl<A:Iterator> Foo<A::Item> for A { }  //~ ERROR E0119\n+impl<A:Iterator> Foo<A::Item> for A { }\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() {}"}, {"sha": "b53a4c973edac4a660b08bb853e0982cfcec06b9", "filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `Foo<_>` for type `std::option::Option<_>`:\n-  --> $DIR/coherence-projection-conflict-ty-param.rs:10:1\n+  --> $DIR/coherence-projection-conflict-ty-param.rs:14:1\n    |\n LL | impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n    | ---------------------------------------- first implementation here\n LL | \n-LL | impl<T, U> Foo<T> for Option<U> { } //~ ERROR E0119\n+LL | impl<T, U> Foo<T> for Option<U> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::option::Option<_>`\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.stderr"}, {"sha": "b53a4c973edac4a660b08bb853e0982cfcec06b9", "filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `Foo<_>` for type `std::option::Option<_>`:\n+  --> $DIR/coherence-projection-conflict-ty-param.rs:14:1\n+   |\n+LL | impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n+   | ---------------------------------------- first implementation here\n+LL | \n+LL | impl<T, U> Foo<T> for Option<U> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::option::Option<_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "819947fa547567a4d15485c304bd882f797098f8", "filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,12 +1,18 @@\n // Coherence error results because we do not know whether `T: Foo<P>` or not\n // for the second impl.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n use std::marker::PhantomData;\n \n pub trait Foo<P> { fn foo() {} }\n \n impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n \n-impl<T, U> Foo<T> for Option<U> { } //~ ERROR E0119\n+impl<T, U> Foo<T> for Option<U> { }\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() {}"}, {"sha": "c2e5fc86175126dc4f9a69f8b0de444c0f1b6cfa", "filename": "src/test/ui/coherence/coherence-projection-conflict.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n-  --> $DIR/coherence-projection-conflict.rs:11:1\n+  --> $DIR/coherence-projection-conflict.rs:15:1\n    |\n LL | impl Foo<i32> for i32 { }\n    | --------------------- first implementation here\n LL | \n-LL | impl<A:Bar> Foo<A::Output> for A { } //~ ERROR E0119\n+LL | impl<A:Bar> Foo<A::Output> for A { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-projection-conflict.stderr"}, {"sha": "c2e5fc86175126dc4f9a69f8b0de444c0f1b6cfa", "filename": "src/test/ui/coherence/coherence-projection-conflict.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n+  --> $DIR/coherence-projection-conflict.rs:15:1\n+   |\n+LL | impl Foo<i32> for i32 { }\n+   | --------------------- first implementation here\n+LL | \n+LL | impl<A:Bar> Foo<A::Output> for A { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "4086aeef8c03a2f06472102273bffb5117ac7bd5", "filename": "src/test/ui/coherence/coherence-projection-conflict.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,3 +1,7 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n use std::marker::PhantomData;\n \n pub trait Foo<P> { fn foo() {} }\n@@ -8,7 +12,9 @@ pub trait Bar {\n \n impl Foo<i32> for i32 { }\n \n-impl<A:Bar> Foo<A::Output> for A { } //~ ERROR E0119\n+impl<A:Bar> Foo<A::Output> for A { }\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n impl Bar for i32 {\n     type Output = i32;"}, {"sha": "652b438feb13791b7a082cbec98b5bb114740314", "filename": "src/test/ui/coherence/coherence-projection-ok-orphan.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,8 @@\n // compile-pass\n // skip-codegen\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n // Here we do not get a coherence conflict because `Baz: Iterator`\n // does not hold and (due to the orphan rules), we can rely on that."}, {"sha": "f759a9e1b45085baa77a16764440444ae2e238da", "filename": "src/test/ui/coherence/coherence-projection-ok.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,8 @@\n // compile-pass\n // skip-codegen\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n pub trait Foo<P> {}\n \n pub trait Bar {"}, {"sha": "db9f9f7665374ce3f0fe00f2dcad8690311fe356", "filename": "src/test/ui/coherence/coherence-subtyping.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `TheTrait` for type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`:\n-  --> $DIR/coherence-subtyping.rs:11:1\n+  --> $DIR/coherence-subtyping.rs:15:1\n    |\n LL | impl TheTrait for for<'a,'b> fn(&'a u8, &'b u8) -> &'a u8 {\n    | --------------------------------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-subtyping.stderr"}, {"sha": "db9f9f7665374ce3f0fe00f2dcad8690311fe356", "filename": "src/test/ui/coherence/coherence-subtyping.re.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `TheTrait` for type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`:\n+  --> $DIR/coherence-subtyping.rs:15:1\n+   |\n+LL | impl TheTrait for for<'a,'b> fn(&'a u8, &'b u8) -> &'a u8 {\n+   | --------------------------------------------------------- first implementation here\n+...\n+LL | impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n+   |\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "f27e14eab63da96951ee661229ce3f467393bd29", "filename": "src/test/ui/coherence/coherence-subtyping.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,6 +1,10 @@\n // Test that two distinct impls which match subtypes of one another\n // yield coherence errors (or not) depending on the variance.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n trait TheTrait {\n     fn foo(&self) { }\n }\n@@ -9,7 +13,8 @@ impl TheTrait for for<'a,'b> fn(&'a u8, &'b u8) -> &'a u8 {\n }\n \n impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n-    //~^ ERROR\n+    //[old]~^ ERROR\n+    //[re]~^^ ERROR\n }\n \n fn main() { }"}, {"sha": "e832bdebbddebfd80a561872a702e4e526c8345f", "filename": "src/test/ui/coherence/coherence-tuple-conflict.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `(_, _)`:\n-  --> $DIR/coherence-tuple-conflict.rs:15:1\n+  --> $DIR/coherence-tuple-conflict.rs:19:1\n    |\n LL | impl<T> MyTrait for (T,T) {\n    | ------------------------- first implementation here\n ...\n-LL | impl<A,B> MyTrait for (A,B) { //~ ERROR E0119\n+LL | impl<A,B> MyTrait for (A,B) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(_, _)`\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-tuple-conflict.stderr"}, {"sha": "e832bdebbddebfd80a561872a702e4e526c8345f", "filename": "src/test/ui/coherence/coherence-tuple-conflict.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `(_, _)`:\n+  --> $DIR/coherence-tuple-conflict.rs:19:1\n+   |\n+LL | impl<T> MyTrait for (T,T) {\n+   | ------------------------- first implementation here\n+...\n+LL | impl<A,B> MyTrait for (A,B) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(_, _)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "130867b22428b918988d4f9a7e8fd25970d9a906", "filename": "src/test/ui/coherence/coherence-tuple-conflict.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,3 +1,7 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n use std::fmt::Debug;\n use std::default::Default;\n \n@@ -12,7 +16,9 @@ impl<T> MyTrait for (T,T) {\n     fn get(&self) -> usize { 0 }\n }\n \n-impl<A,B> MyTrait for (A,B) { //~ ERROR E0119\n+impl<A,B> MyTrait for (A,B) {\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n     fn get(&self) -> usize { self.dummy }\n }\n "}, {"sha": "1c1118a58c6f0eb0778b65642447a2dc7c1ba64f", "filename": "src/test/ui/coherence/coherence-vec-local-2.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,7 +1,7 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-vec-local-2.rs:11:1\n+  --> $DIR/coherence-vec-local-2.rs:14:1\n    |\n-LL | impl<T> Remote for Vec<Local<T>> { } //~ ERROR E0210\n+LL | impl<T> Remote for Vec<Local<T>> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter", "previous_filename": "src/test/ui/coherence/coherence-vec-local-2.stderr"}, {"sha": "37859f7cfa285f4f413fc76295f0d65970344a47", "filename": "src/test/ui/coherence/coherence-vec-local-2.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-vec-local-2.rs:14:1\n+   |\n+LL | impl<T> Remote for Vec<Local<T>> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "423543964c20bdd921f8b0becc51be687630df05", "filename": "src/test/ui/coherence/coherence-vec-local-2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -2,12 +2,17 @@\n // *non-fundamental* remote type like `Vec` is not considered local.\n \n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote;\n \n struct Local<T>(T);\n \n-impl<T> Remote for Vec<Local<T>> { } //~ ERROR E0210\n+impl<T> Remote for Vec<Local<T>> { }\n+//[old]~^ ERROR E0210\n+//[re]~^^ ERROR E0117\n \n fn main() { }"}, {"sha": "304aaaf36875ccd67327bbff67c991b571bd2e13", "filename": "src/test/ui/coherence/coherence-vec-local.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,7 +1,7 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-vec-local.rs:11:1\n+  --> $DIR/coherence-vec-local.rs:14:1\n    |\n-LL | impl Remote for Vec<Local> { } //~ ERROR E0117\n+LL | impl Remote for Vec<Local> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate", "previous_filename": "src/test/ui/coherence/coherence-vec-local.stderr"}, {"sha": "304aaaf36875ccd67327bbff67c991b571bd2e13", "filename": "src/test/ui/coherence/coherence-vec-local.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-vec-local.rs:14:1\n+   |\n+LL | impl Remote for Vec<Local> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "351ddd2aa6744505e57d7d5432361fe1fc0dfc24", "filename": "src/test/ui/coherence/coherence-vec-local.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -2,12 +2,17 @@\n // *non-fundamental* remote type like `Vec` is not considered local.\n \n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote;\n \n struct Local;\n \n-impl Remote for Vec<Local> { } //~ ERROR E0117\n+impl Remote for Vec<Local> { }\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n fn main() { }"}, {"sha": "a030314262270ec4cbdcc8d5f9ebd0d64ff031d8", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -4,6 +4,9 @@\n // aux-build:coherence_copy_like_lib.rs\n // compile-pass\n // skip-codgen\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;"}, {"sha": "bd8317e224699fc4e10534fd8fedfa26c676878c", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_ref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -4,6 +4,9 @@\n // aux-build:coherence_copy_like_lib.rs\n // compile-pass\n // skip-codegen\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;"}, {"sha": "12c7a1f977c3fefdd878d8b73309af7ee6b1077a", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyFundamentalStruct<(MyType,)>`:\n-  --> $DIR/coherence_copy_like_err_fundamental_struct_tuple.rs:17:1\n+  --> $DIR/coherence_copy_like_err_fundamental_struct_tuple.rs:19:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }\n    | ---------------------------------- first implementation here\n ...\n-LL | impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { } //~ ERROR E0119\n+LL | impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyFundamentalStruct<(MyType,)>`\n    |\n    = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyFundamentalStruct<(MyType,)>` in future versions", "previous_filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.stderr"}, {"sha": "12c7a1f977c3fefdd878d8b73309af7ee6b1077a", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.re.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyFundamentalStruct<(MyType,)>`:\n+  --> $DIR/coherence_copy_like_err_fundamental_struct_tuple.rs:19:1\n+   |\n+LL | impl<T: lib::MyCopy> MyTrait for T { }\n+   | ---------------------------------- first implementation here\n+...\n+LL | impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyFundamentalStruct<(MyType,)>`\n+   |\n+   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyFundamentalStruct<(MyType,)>` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "2a61042c6a03a7489a7354e313a3a7e80c368da0", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -2,7 +2,9 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n+// revisions: old re\n \n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n \n extern crate coherence_copy_like_lib as lib;\n@@ -14,7 +16,9 @@ trait MyTrait { fn foo() {} }\n impl<T: lib::MyCopy> MyTrait for T { }\n \n // Tuples are not fundamental.\n-impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { } //~ ERROR E0119\n+impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n \n fn main() { }"}, {"sha": "1b6c62e9bf3a802b7c21b36102200be6eec0d172", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyStruct<MyType>`:\n-  --> $DIR/coherence_copy_like_err_struct.rs:19:1\n+  --> $DIR/coherence_copy_like_err_struct.rs:22:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }\n    | ---------------------------------- first implementation here\n ...\n-LL | impl MyTrait for lib::MyStruct<MyType> { } //~ ERROR E0119\n+LL | impl MyTrait for lib::MyStruct<MyType> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyStruct<MyType>`\n    |\n    = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyStruct<MyType>` in future versions", "previous_filename": "src/test/ui/coherence/coherence_copy_like_err_struct.stderr"}, {"sha": "1b6c62e9bf3a802b7c21b36102200be6eec0d172", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.re.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyStruct<MyType>`:\n+  --> $DIR/coherence_copy_like_err_struct.rs:22:1\n+   |\n+LL | impl<T: lib::MyCopy> MyTrait for T { }\n+   | ---------------------------------- first implementation here\n+...\n+LL | impl MyTrait for lib::MyStruct<MyType> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyStruct<MyType>`\n+   |\n+   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyStruct<MyType>` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "38fc2e662d71e91aae66bbec006fb03346af4ed8", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,4 +1,7 @@\n // aux-build:coherence_copy_like_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n // Test that we are able to introduce a negative constraint that\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n@@ -16,6 +19,8 @@ impl<T: lib::MyCopy> MyTrait for T { }\n //     MyStruct<MyType>: !MyTrait\n //\n // which we cannot approve.\n-impl MyTrait for lib::MyStruct<MyType> { } //~ ERROR E0119\n+impl MyTrait for lib::MyStruct<MyType> { }\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() { }"}, {"sha": "11bd788c761530cdedc7182762d1d4414e167a1e", "filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `(MyType,)`:\n-  --> $DIR/coherence_copy_like_err_tuple.rs:18:1\n+  --> $DIR/coherence_copy_like_err_tuple.rs:21:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }\n    | ---------------------------------- first implementation here\n ...\n-LL | impl MyTrait for (MyType,) { } //~ ERROR E0119\n+LL | impl MyTrait for (MyType,) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(MyType,)`\n    |\n    = note: upstream crates may add new impl of trait `lib::MyCopy` for type `(MyType,)` in future versions", "previous_filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.stderr"}, {"sha": "11bd788c761530cdedc7182762d1d4414e167a1e", "filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.re.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `(MyType,)`:\n+  --> $DIR/coherence_copy_like_err_tuple.rs:21:1\n+   |\n+LL | impl<T: lib::MyCopy> MyTrait for T { }\n+   | ---------------------------------- first implementation here\n+...\n+LL | impl MyTrait for (MyType,) { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(MyType,)`\n+   |\n+   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `(MyType,)` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "7234bed1ba0d0d3b4e5d323810cd35758228582f", "filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -2,6 +2,9 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_copy_like_lib as lib;\n \n@@ -15,6 +18,8 @@ impl<T: lib::MyCopy> MyTrait for T { }\n //     (MyType,): !MyTrait\n //\n // which we cannot approve.\n-impl MyTrait for (MyType,) { } //~ ERROR E0119\n+impl MyTrait for (MyType,) { }\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() { }"}, {"sha": "fa564459b21334faf795a35ce3dfd7a5ad0592da", "filename": "src/test/ui/coherence/coherence_inherent.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,7 +1,7 @@\n error[E0599]: no method named `the_fn` found for type `&Lib::TheStruct` in the current scope\n-  --> $DIR/coherence_inherent.rs:31:11\n+  --> $DIR/coherence_inherent.rs:35:11\n    |\n-LL |         s.the_fn(); //~ ERROR no method named `the_fn` found\n+LL |         s.the_fn();\n    |           ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope", "previous_filename": "src/test/ui/coherence/coherence_inherent.stderr"}, {"sha": "fa564459b21334faf795a35ce3dfd7a5ad0592da", "filename": "src/test/ui/coherence/coherence_inherent.re.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,13 @@\n+error[E0599]: no method named `the_fn` found for type `&Lib::TheStruct` in the current scope\n+  --> $DIR/coherence_inherent.rs:35:11\n+   |\n+LL |         s.the_fn();\n+   |           ^^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+           `use Lib::TheTrait;`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "f0d3682adb8ca1bde0455512cd629787b2a1b7fb", "filename": "src/test/ui/coherence/coherence_inherent.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,6 +1,10 @@\n // Tests that methods that implement a trait cannot be invoked\n // unless the trait is imported.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n mod Lib {\n     pub trait TheTrait {\n         fn the_fn(&self);\n@@ -28,7 +32,9 @@ mod NoImport {\n     use Lib::TheStruct;\n \n     fn call_the_fn(s: &TheStruct) {\n-        s.the_fn(); //~ ERROR no method named `the_fn` found\n+        s.the_fn();\n+        //[old]~^ ERROR no method named `the_fn` found\n+        //[re]~^^ ERROR E0599\n     }\n }\n "}, {"sha": "4d93e699031f37896c917b8e2f132ae680a389cc", "filename": "src/test/ui/coherence/coherence_inherent_cc.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,7 +1,7 @@\n error[E0599]: no method named `the_fn` found for type `&coherence_inherent_cc_lib::TheStruct` in the current scope\n-  --> $DIR/coherence_inherent_cc.rs:23:11\n+  --> $DIR/coherence_inherent_cc.rs:26:11\n    |\n-LL |         s.the_fn(); //~ ERROR no method named `the_fn` found\n+LL |         s.the_fn();\n    |           ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope", "previous_filename": "src/test/ui/coherence/coherence_inherent_cc.stderr"}, {"sha": "4d93e699031f37896c917b8e2f132ae680a389cc", "filename": "src/test/ui/coherence/coherence_inherent_cc.re.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,13 @@\n+error[E0599]: no method named `the_fn` found for type `&coherence_inherent_cc_lib::TheStruct` in the current scope\n+  --> $DIR/coherence_inherent_cc.rs:26:11\n+   |\n+LL |         s.the_fn();\n+   |           ^^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+           `use coherence_inherent_cc_lib::TheTrait;`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "2c980d839b94be8dd656b405076dfdaff5ecfbff", "filename": "src/test/ui/coherence/coherence_inherent_cc.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,4 +1,7 @@\n // aux-build:coherence_inherent_cc_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n // Tests that methods that implement a trait cannot be invoked\n // unless the trait is imported.\n@@ -20,7 +23,9 @@ mod NoImport {\n     use coherence_inherent_cc_lib::TheStruct;\n \n     fn call_the_fn(s: &TheStruct) {\n-        s.the_fn(); //~ ERROR no method named `the_fn` found\n+        s.the_fn();\n+        //[old]~^ ERROR no method named `the_fn` found\n+        //[re]~^^ ERROR E0599\n     }\n }\n "}, {"sha": "cac45b0b9edffcc049fd76b1bf36d1eeaa4d94c1", "filename": "src/test/ui/coherence/coherence_local.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -4,6 +4,9 @@\n // aux-build:coherence_copy_like_lib.rs\n // compile-pass\n // skip-codegen\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;"}, {"sha": "61c94c1c7cad78e0af42701e84080719377d7a62", "filename": "src/test/ui/coherence/coherence_local_err_struct.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,7 +1,7 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence_local_err_struct.rs:16:1\n+  --> $DIR/coherence_local_err_struct.rs:17:1\n    |\n-LL | impl lib::MyCopy for lib::MyStruct<MyType> { } //~ ERROR E0117\n+LL | impl lib::MyCopy for lib::MyStruct<MyType> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate", "previous_filename": "src/test/ui/coherence/coherence_local_err_struct.stderr"}, {"sha": "61c94c1c7cad78e0af42701e84080719377d7a62", "filename": "src/test/ui/coherence/coherence_local_err_struct.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence_local_err_struct.rs:17:1\n+   |\n+LL | impl lib::MyCopy for lib::MyStruct<MyType> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "d6faaf2977a76834651c69fe0278dca98e415a96", "filename": "src/test/ui/coherence/coherence_local_err_struct.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -2,8 +2,9 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n+// revisions: old re\n \n-\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n@@ -13,7 +14,9 @@ struct MyType { x: i32 }\n // These are all legal because they are all fundamental types:\n \n // MyStruct is not fundamental.\n-impl lib::MyCopy for lib::MyStruct<MyType> { } //~ ERROR E0117\n+impl lib::MyCopy for lib::MyStruct<MyType> { }\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n \n fn main() { }"}, {"sha": "934e2fcb890e35b99f0b184210cf913c877f4ca4", "filename": "src/test/ui/coherence/coherence_local_err_tuple.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -1,7 +1,7 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence_local_err_tuple.rs:16:1\n+  --> $DIR/coherence_local_err_tuple.rs:17:1\n    |\n-LL | impl lib::MyCopy for (MyType,) { } //~ ERROR E0117\n+LL | impl lib::MyCopy for (MyType,) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate", "previous_filename": "src/test/ui/coherence/coherence_local_err_tuple.stderr"}, {"sha": "934e2fcb890e35b99f0b184210cf913c877f4ca4", "filename": "src/test/ui/coherence/coherence_local_err_tuple.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.re.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence_local_err_tuple.rs:17:1\n+   |\n+LL | impl lib::MyCopy for (MyType,) { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "2685b2df8cb655773878d7a6d60416dd1dd8c392", "filename": "src/test/ui/coherence/coherence_local_err_tuple.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -2,8 +2,9 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n+// revisions: old re\n \n-\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n@@ -13,7 +14,9 @@ struct MyType { x: i32 }\n // These are all legal because they are all fundamental types:\n \n // Tuples are not fundamental, so this is not a local impl.\n-impl lib::MyCopy for (MyType,) { } //~ ERROR E0117\n+impl lib::MyCopy for (MyType,) { }\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n \n fn main() { }"}, {"sha": "a52510b8ea9ca63eb87b8063e72e193507117c91", "filename": "src/test/ui/coherence/coherence_local_ref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -4,6 +4,9 @@\n // aux-build:coherence_copy_like_lib.rs\n // compile-pass\n // skip-codegen\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;"}, {"sha": "33ad4e9753661e43a751da07236968fe7d21cb06", "filename": "src/test/ui/coherence/re-rebalance-coherence.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fre-rebalance-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Fcoherence%2Fre-rebalance-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fre-rebalance-coherence.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,13 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// run-pass\n+// aux-build:re_rebalance_coherence_lib.rs\n+\n+extern crate re_rebalance_coherence_lib as lib;\n+use lib::*;\n+\n+struct Oracle;\n+impl Backend for Oracle {}\n+impl<'a, T:'a, Tab> QueryFragment<Oracle> for BatchInsert<'a, T, Tab> {}\n+\n+fn main() {}"}, {"sha": "c8d027b25c7486dedf9ca2aec24f832d8def828b", "filename": "src/test/ui/feature-gates/auxiliary/re_rebalance_coherence_lib.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Ffeature-gates%2Fauxiliary%2Fre_rebalance_coherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Ffeature-gates%2Fauxiliary%2Fre_rebalance_coherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fauxiliary%2Fre_rebalance_coherence_lib.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,23 @@\n+\n+pub trait Backend{}\n+pub trait SupportsDefaultKeyword {}\n+\n+impl SupportsDefaultKeyword for Postgres {}\n+\n+pub struct Postgres;\n+\n+impl Backend for Postgres {}\n+\n+pub struct AstPass<DB>(::std::marker::PhantomData<DB>);\n+\n+pub trait QueryFragment<DB: Backend> {}\n+\n+\n+#[derive(Debug, Clone, Copy)]\n+pub struct BatchInsert<'a, T: 'a, Tab> {\n+    _marker: ::std::marker::PhantomData<(&'a T, Tab)>,\n+}\n+\n+impl<'a, T:'a, Tab, DB> QueryFragment<DB> for BatchInsert<'a, T, Tab>\n+where DB: SupportsDefaultKeyword + Backend,\n+{}"}, {"sha": "505a45379cdca1391e8fa9dfd7d3d93877b2e75c", "filename": "src/test/ui/feature-gates/feature-gate-re-rebalance-coherence.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.rs?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,13 @@\n+// Test that the use of the box syntax is gated by `re-rebalance-coherence` feature gate.\n+\n+// aux-build:re_rebalance_coherence_lib.rs\n+\n+extern crate re_rebalance_coherence_lib as lib;\n+use lib::*;\n+\n+struct Oracle;\n+impl Backend for Oracle {}\n+impl<'a, T:'a, Tab> QueryFragment<Oracle> for BatchInsert<'a, T, Tab> {}\n+//~^ ERROR E0210\n+\n+fn main() {}"}, {"sha": "5972e610e47d6c7f1c456d3d00f481df1f3cda9c", "filename": "src/test/ui/feature-gates/feature-gate-re-rebalance-coherence.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244b05db12e47efef4695036974bc25fde13b828/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.stderr?ref=244b05db12e47efef4695036974bc25fde13b828", "patch": "@@ -0,0 +1,11 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+  --> $DIR/feature-gate-re-rebalance-coherence.rs:10:1\n+   |\n+LL | impl<'a, T:'a, Tab> QueryFragment<Oracle> for BatchInsert<'a, T, Tab> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0210`."}]}