{"sha": "06b2affa7879e609bcef70d726f900d8430f6e0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YjJhZmZhNzg3OWU2MDliY2VmNzBkNzI2ZjkwMGQ4NDMwZjZlMGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-20T17:28:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-20T17:28:12Z"}, "message": "tweak pinning projections", "tree": {"sha": "fd0ef047cb01cc74789b41e38b5958ed783b2ea9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd0ef047cb01cc74789b41e38b5958ed783b2ea9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06b2affa7879e609bcef70d726f900d8430f6e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06b2affa7879e609bcef70d726f900d8430f6e0a", "html_url": "https://github.com/rust-lang/rust/commit/06b2affa7879e609bcef70d726f900d8430f6e0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06b2affa7879e609bcef70d726f900d8430f6e0a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c52560d788e69677826964f9f25f28687ef5c70c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c52560d788e69677826964f9f25f28687ef5c70c", "html_url": "https://github.com/rust-lang/rust/commit/c52560d788e69677826964f9f25f28687ef5c70c"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "01d384f3e1938139fbdf04729ea2c2cef8e4cfeb", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/06b2affa7879e609bcef70d726f900d8430f6e0a/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b2affa7879e609bcef70d726f900d8430f6e0a/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=06b2affa7879e609bcef70d726f900d8430f6e0a", "patch": "@@ -174,37 +174,39 @@\n //! One interesting question arises when considering the interaction of pinning and\n //! the fields of a struct. When can a struct have a \"pinning projection\", i.e.,\n //! an operation with type `fn(Pin<&[mut] Struct>) -> Pin<&[mut] Field>`?\n-//! In a similar vein, when can a container type (such as `Vec`, `Box`, or `RefCell`)\n-//! have an operation with type `fn(Pin<&[mut] Container<T>>) -> Pin<&[mut] T>`?\n+//! In a similar vein, when can a generic wrapper type (such as `Vec`, `Box`, or `RefCell`)\n+//! have an operation with type `fn(Pin<&[mut] Wrapper<T>>) -> Pin<&[mut] T>`?\n //!\n //! This question is closely related to the question of whether pinning is \"structural\":\n //! when you have pinned a wrapper type, have you pinned its contents? Deciding this\n-//! is entirely up to the author of any given type. However, adding a\n-//! projection to the API answers that question with a \"yes\" by offering pinned access\n-//! to the contents. In that case, there are a couple requirements to be upheld:\n+//! is entirely up to the author of any given type. For many types, both answers are reasonable\n+//! (e.g., there could be a version of `Vec` with structural pinning and another\n+//! version where the contents remain movable even when the `Vec` is pinned).\n+//! If pinning is not structural, the wrapper can `impl<T> Unpin for Wrapper<T>`.\n+//! If pinning is structural, the wrapper type can offer pinning projections.\n+//! However, structural pinning comes with a few extra requirements:\n //!\n //! 1. The wrapper must only be [`Unpin`] if all the fields one can project to are\n //!    `Unpin`. This is the default, but `Unpin` is a safe trait, so as the author of\n //!    the wrapper it is your responsibility *not* to add something like\n-//!    `impl<T> Unpin for Container<T>`. (Notice that adding a projection operation\n+//!    `impl<T> Unpin for Wrapper<T>`. (Notice that adding a projection operation\n //!    requires unsafe code, so the fact that `Unpin` is a safe trait  does not break\n //!    the principle that you only have to worry about any of this if you use `unsafe`.)\n //! 2. The destructor of the wrapper must not move out of its argument. This is the exact\n //!    point that was raised in the [previous section][drop-impl]: `drop` takes `&mut self`,\n //!    but the wrapper (and hence its fields) might have been pinned before.\n //!    You have to guarantee that you do not move a field inside your `Drop` implementation.\n-//! 3. Your wrapper type must *not* be `#[repr(packed)]`. Packed structs have their fields\n-//!    moved around when they are dropped to properly align them, which is in conflict with\n-//!    claiming that the fields are pinned when your struct is.\n-//! 4. You must make sure that you uphold the [`Drop` guarantee][drop-guarantee]:\n+//!    In particular, as explained previously, this means that your wrapper type must *not*\n+//!    be `#[repr(packed)]`.\n+//! 3. You must make sure that you uphold the [`Drop` guarantee][drop-guarantee]:\n //!    once your wrapper is pinned, the memory that contains the\n //!    content is not overwritten or deallocated without calling the content's destructors.\n //!    This can be tricky, as witnessed by `VecDeque`: the destructor of `VecDeque` can fail\n //!    to call `drop` on all elements if one of the destructors panics. This violates the\n //!    `Drop` guarantee, because it can lead to elements being deallocated without\n //!    their destructor being called. (`VecDeque` has no pinning projections, so this\n //!    does not cause unsoundness.)\n-//! 5. You must not offer any other operations that could lead to data being moved out of\n+//! 4. You must not offer any other operations that could lead to data being moved out of\n //!    the fields when your type is pinned. This is usually not a concern, but can become\n //!    tricky when interior mutability is involved. For example, imagine if `RefCell`\n //!    had a method `fn get_pin_mut(self: Pin<&mut Self>) -> Pin<&mut T>`.\n@@ -222,13 +224,20 @@\n //!    reference we got later.\n //!\n //! On the other hand, if you decide *not* to offer any pinning projections, you\n-//! are free to `impl<T> Unpin for Container<T>`. In the standard library,\n+//! do not have to do anything. If your type also does not do any pinning itself,\n+//! you are free to `impl<T> Unpin for Wrapper<T>`. In the standard library,\n //! this is done for all pointer types: `Box<T>: Unpin` holds for all `T`.\n //! It makes sense to do this for pointer types, because moving the `Box<T>`\n //! does not actually move the `T`: the `Box<T>` can be freely movable even if the `T`\n //! is not. In fact, even `Pin<Box<T>>` and `Pin<&mut T>` are always `Unpin` themselves,\n //! for the same reason.\n //!\n+//! Another case where you might want to have a wrapper without structural pinning is when even\n+//! a pinned wrapper lets its contents move, e.g. with a `take`-like operation. And, finally,\n+//! if it is not possible to satisfy the requirements for structural pinning, it makes sense\n+//! to add the `impl<T> Unpin for Wrapper<T>` to explicitly document this fact, and to let\n+//! library clients benefit from the easier interaction with [`Pin`] that [`Unpin`] types enjoy.\n+//!\n //! [`Pin`]: struct.Pin.html\n //! [`Unpin`]: ../../std/marker/trait.Unpin.html\n //! [`Deref`]: ../../std/ops/trait.Deref.html"}]}