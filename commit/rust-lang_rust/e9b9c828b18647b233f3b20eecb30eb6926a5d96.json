{"sha": "e9b9c828b18647b233f3b20eecb30eb6926a5d96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YjljODI4YjE4NjQ3YjIzM2YzYjIwZWVjYjMwZWI2OTI2YTVkOTY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T00:41:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:32Z"}, "message": "librustc: De-`@mut` the various glues in the type descriptor info", "tree": {"sha": "6602743bdef687004f2f5ac2dfb5a1d125130de7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6602743bdef687004f2f5ac2dfb5a1d125130de7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9b9c828b18647b233f3b20eecb30eb6926a5d96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b9c828b18647b233f3b20eecb30eb6926a5d96", "html_url": "https://github.com/rust-lang/rust/commit/e9b9c828b18647b233f3b20eecb30eb6926a5d96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9b9c828b18647b233f3b20eecb30eb6926a5d96/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abbee6decdfd0cf69428c5964738bb7526e18dd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/abbee6decdfd0cf69428c5964738bb7526e18dd1", "html_url": "https://github.com/rust-lang/rust/commit/abbee6decdfd0cf69428c5964738bb7526e18dd1"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "c40aae53c0cfb95a59f5ddc5ca9d3d9d77a0d690", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9b9c828b18647b233f3b20eecb30eb6926a5d96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b9c828b18647b233f3b20eecb30eb6926a5d96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=e9b9c828b18647b233f3b20eecb30eb6926a5d96", "patch": "@@ -93,10 +93,10 @@ pub struct tydesc_info {\n     align: ValueRef,\n     borrow_offset: ValueRef,\n     name: ValueRef,\n-    take_glue: Option<ValueRef>,\n-    drop_glue: Option<ValueRef>,\n-    free_glue: Option<ValueRef>,\n-    visit_glue: Option<ValueRef>\n+    take_glue: Cell<Option<ValueRef>>,\n+    drop_glue: Cell<Option<ValueRef>>,\n+    free_glue: Cell<Option<ValueRef>>,\n+    visit_glue: Cell<Option<ValueRef>>,\n }\n \n /*"}, {"sha": "a9337fa0609c758b400debb1d1564c9fd48b06d0", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e9b9c828b18647b233f3b20eecb30eb6926a5d96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b9c828b18647b233f3b20eecb30eb6926a5d96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=e9b9c828b18647b233f3b20eecb30eb6926a5d96", "patch": "@@ -37,6 +37,7 @@ use util::ppaux::ty_to_short_str;\n use middle::trans::type_::Type;\n \n use std::c_str::ToCStr;\n+use std::cell::Cell;\n use std::libc::c_uint;\n use syntax::ast;\n \n@@ -183,13 +184,13 @@ pub fn lazily_emit_simplified_tydesc_glue(ccx: @CrateContext,\n         lazily_emit_tydesc_glue(ccx, field, simpl_ti);\n         {\n             if field == abi::tydesc_field_take_glue {\n-                ti.take_glue = simpl_ti.take_glue;\n+                ti.take_glue.set(simpl_ti.take_glue.get());\n             } else if field == abi::tydesc_field_drop_glue {\n-                ti.drop_glue = simpl_ti.drop_glue;\n+                ti.drop_glue.set(simpl_ti.drop_glue.get());\n             } else if field == abi::tydesc_field_free_glue {\n-                ti.free_glue = simpl_ti.free_glue;\n+                ti.free_glue.set(simpl_ti.free_glue.get());\n             } else if field == abi::tydesc_field_visit_glue {\n-                ti.visit_glue = simpl_ti.visit_glue;\n+                ti.visit_glue.set(simpl_ti.visit_glue.get());\n             }\n         }\n         return true;\n@@ -209,52 +210,52 @@ pub fn lazily_emit_tydesc_glue(ccx: @CrateContext,\n     }\n \n     if field == abi::tydesc_field_take_glue {\n-        match ti.take_glue {\n+        match ti.take_glue.get() {\n           Some(_) => (),\n           None => {\n             debug!(\"+++ lazily_emit_tydesc_glue TAKE {}\",\n                    ppaux::ty_to_str(ccx.tcx, ti.ty));\n             let glue_fn = declare_generic_glue(ccx, ti.ty, llfnty, \"take\");\n-            ti.take_glue = Some(glue_fn);\n+            ti.take_glue.set(Some(glue_fn));\n             make_generic_glue(ccx, ti.ty, glue_fn, make_take_glue, \"take\");\n             debug!(\"--- lazily_emit_tydesc_glue TAKE {}\",\n                    ppaux::ty_to_str(ccx.tcx, ti.ty));\n           }\n         }\n     } else if field == abi::tydesc_field_drop_glue {\n-        match ti.drop_glue {\n+        match ti.drop_glue.get() {\n           Some(_) => (),\n           None => {\n             debug!(\"+++ lazily_emit_tydesc_glue DROP {}\",\n                    ppaux::ty_to_str(ccx.tcx, ti.ty));\n             let glue_fn = declare_generic_glue(ccx, ti.ty, llfnty, \"drop\");\n-            ti.drop_glue = Some(glue_fn);\n+            ti.drop_glue.set(Some(glue_fn));\n             make_generic_glue(ccx, ti.ty, glue_fn, make_drop_glue, \"drop\");\n             debug!(\"--- lazily_emit_tydesc_glue DROP {}\",\n                    ppaux::ty_to_str(ccx.tcx, ti.ty));\n           }\n         }\n     } else if field == abi::tydesc_field_free_glue {\n-        match ti.free_glue {\n+        match ti.free_glue.get() {\n           Some(_) => (),\n           None => {\n             debug!(\"+++ lazily_emit_tydesc_glue FREE {}\",\n                    ppaux::ty_to_str(ccx.tcx, ti.ty));\n             let glue_fn = declare_generic_glue(ccx, ti.ty, llfnty, \"free\");\n-            ti.free_glue = Some(glue_fn);\n+            ti.free_glue.set(Some(glue_fn));\n             make_generic_glue(ccx, ti.ty, glue_fn, make_free_glue, \"free\");\n             debug!(\"--- lazily_emit_tydesc_glue FREE {}\",\n                    ppaux::ty_to_str(ccx.tcx, ti.ty));\n           }\n         }\n     } else if field == abi::tydesc_field_visit_glue {\n-        match ti.visit_glue {\n+        match ti.visit_glue.get() {\n           Some(_) => (),\n           None => {\n             debug!(\"+++ lazily_emit_tydesc_glue VISIT {}\",\n                    ppaux::ty_to_str(ccx.tcx, ti.ty));\n             let glue_fn = declare_generic_glue(ccx, ti.ty, llfnty, \"visit\");\n-            ti.visit_glue = Some(glue_fn);\n+            ti.visit_glue.set(Some(glue_fn));\n             make_generic_glue(ccx, ti.ty, glue_fn, make_visit_glue, \"visit\");\n             debug!(\"--- lazily_emit_tydesc_glue VISIT {}\",\n                    ppaux::ty_to_str(ccx.tcx, ti.ty));\n@@ -280,13 +281,13 @@ pub fn call_tydesc_glue_full(bcx: @Block,\n       Some(sti) => {\n         lazily_emit_tydesc_glue(ccx, field, sti);\n         if field == abi::tydesc_field_take_glue {\n-            sti.take_glue\n+            sti.take_glue.get()\n         } else if field == abi::tydesc_field_drop_glue {\n-            sti.drop_glue\n+            sti.drop_glue.get()\n         } else if field == abi::tydesc_field_free_glue {\n-            sti.free_glue\n+            sti.free_glue.get()\n         } else if field == abi::tydesc_field_visit_glue {\n-            sti.visit_glue\n+            sti.visit_glue.get()\n         } else {\n             None\n         }\n@@ -630,10 +631,10 @@ pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> @mut tydesc_info {\n         align: llalign,\n         borrow_offset: borrow_offset,\n         name: ty_name,\n-        take_glue: None,\n-        drop_glue: None,\n-        free_glue: None,\n-        visit_glue: None\n+        take_glue: Cell::new(None),\n+        drop_glue: Cell::new(None),\n+        free_glue: Cell::new(None),\n+        visit_glue: Cell::new(None),\n     };\n     debug!(\"--- declare_tydesc {}\", ppaux::ty_to_str(ccx.tcx, t));\n     return inf;\n@@ -705,7 +706,7 @@ pub fn emit_tydescs(ccx: &CrateContext) {\n         // tydesc type. Then we'll recast each function to its real type when\n         // calling it.\n         let take_glue =\n-            match ti.take_glue {\n+            match ti.take_glue.get() {\n               None => { ccx.stats.n_null_glues += 1u; C_null(glue_fn_ty) }\n               Some(v) => {\n                 unsafe {\n@@ -715,7 +716,7 @@ pub fn emit_tydescs(ccx: &CrateContext) {\n               }\n             };\n         let drop_glue =\n-            match ti.drop_glue {\n+            match ti.drop_glue.get() {\n               None => { ccx.stats.n_null_glues += 1u; C_null(glue_fn_ty) }\n               Some(v) => {\n                 unsafe {\n@@ -725,7 +726,7 @@ pub fn emit_tydescs(ccx: &CrateContext) {\n               }\n             };\n         let free_glue =\n-            match ti.free_glue {\n+            match ti.free_glue.get() {\n               None => { ccx.stats.n_null_glues += 1u; C_null(glue_fn_ty) }\n               Some(v) => {\n                 unsafe {\n@@ -735,7 +736,7 @@ pub fn emit_tydescs(ccx: &CrateContext) {\n               }\n             };\n         let visit_glue =\n-            match ti.visit_glue {\n+            match ti.visit_glue.get() {\n               None => { ccx.stats.n_null_glues += 1u; C_null(glue_fn_ty) }\n               Some(v) => {\n                 unsafe {"}]}