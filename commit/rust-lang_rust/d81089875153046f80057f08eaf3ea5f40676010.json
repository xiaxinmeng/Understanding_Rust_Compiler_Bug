{"sha": "d81089875153046f80057f08eaf3ea5f40676010", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MTA4OTg3NTE1MzA0NmY4MDA1N2YwOGVhZjNlYTVmNDA2NzYwMTA=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-06-12T13:06:12Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-06-14T02:59:07Z"}, "message": "Librarify tidy\n\nConvert tidy into a library so that the data it creates\ncan be used by external tools.", "tree": {"sha": "7fbb8b56acbd8739faf745c9023baf4ac0d5582e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fbb8b56acbd8739faf745c9023baf4ac0d5582e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d81089875153046f80057f08eaf3ea5f40676010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d81089875153046f80057f08eaf3ea5f40676010", "html_url": "https://github.com/rust-lang/rust/commit/d81089875153046f80057f08eaf3ea5f40676010", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d81089875153046f80057f08eaf3ea5f40676010/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e40ef964fe491b19c22dfb8dd36d1eab14223c36", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40ef964fe491b19c22dfb8dd36d1eab14223c36", "html_url": "https://github.com/rust-lang/rust/commit/e40ef964fe491b19c22dfb8dd36d1eab14223c36"}], "stats": {"total": 168, "additions": 96, "deletions": 72}, "files": [{"sha": "bcf86e4489be3c157413435ab06bff53a93e9c8f", "filename": "src/tools/tidy/src/lib.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d81089875153046f80057f08eaf3ea5f40676010/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81089875153046f80057f08eaf3ea5f40676010/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=d81089875153046f80057f08eaf3ea5f40676010", "patch": "@@ -0,0 +1,88 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Library used by tidy and other tools\n+//!\n+//! This library contains the tidy lints and exposes it\n+//! to be used by tools.\n+\n+#![deny(warnings)]\n+\n+use std::fs;\n+\n+use std::path::Path;\n+\n+macro_rules! t {\n+    ($e:expr, $p:expr) => (match $e {\n+        Ok(e) => e,\n+        Err(e) => panic!(\"{} failed on {} with {}\", stringify!($e), ($p).display(), e),\n+    });\n+\n+    ($e:expr) => (match $e {\n+        Ok(e) => e,\n+        Err(e) => panic!(\"{} failed with {}\", stringify!($e), e),\n+    })\n+}\n+\n+macro_rules! tidy_error {\n+    ($bad:expr, $fmt:expr, $($arg:tt)*) => ({\n+        use std::io::Write;\n+        *$bad = true;\n+        write!(::std::io::stderr(), \"tidy error: \").expect(\"could not write to stderr\");\n+        writeln!(::std::io::stderr(), $fmt, $($arg)*).expect(\"could not write to stderr\");\n+    });\n+}\n+\n+pub mod bins;\n+pub mod style;\n+pub mod errors;\n+pub mod features;\n+pub mod cargo;\n+pub mod pal;\n+pub mod deps;\n+pub mod unstable_book;\n+\n+fn filter_dirs(path: &Path) -> bool {\n+    let skip = [\n+        \"src/jemalloc\",\n+        \"src/llvm\",\n+        \"src/libbacktrace\",\n+        \"src/compiler-rt\",\n+        \"src/rustllvm\",\n+        \"src/liblibc\",\n+        \"src/vendor\",\n+        \"src/rt/hoedown\",\n+        \"src/tools/cargo\",\n+        \"src/tools/rls\",\n+        \"src/tools/rust-installer\",\n+    ];\n+    skip.iter().any(|p| path.ends_with(p))\n+}\n+\n+fn walk_many(paths: &[&Path], skip: &mut FnMut(&Path) -> bool, f: &mut FnMut(&Path)) {\n+    for path in paths {\n+        walk(path, skip, f);\n+    }\n+}\n+\n+fn walk(path: &Path, skip: &mut FnMut(&Path) -> bool, f: &mut FnMut(&Path)) {\n+    for entry in t!(fs::read_dir(path), path) {\n+        let entry = t!(entry);\n+        let kind = t!(entry.file_type());\n+        let path = entry.path();\n+        if kind.is_dir() {\n+            if !skip(&path) {\n+                walk(&path, skip, f);\n+            }\n+        } else {\n+            f(&path);\n+        }\n+    }\n+}"}, {"sha": "433192a21ec9caa45a7514742828d3e3ef928b61", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 8, "deletions": 72, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d81089875153046f80057f08eaf3ea5f40676010/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81089875153046f80057f08eaf3ea5f40676010/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=d81089875153046f80057f08eaf3ea5f40676010", "patch": "@@ -8,47 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Tidy checks for source code in this repository\n+//! Tidy checks source code in this repository\n //!\n //! This program runs all of the various tidy checks for style, cleanliness,\n //! etc. This is run by default on `make check` and as part of the auto\n //! builders.\n \n-use std::env;\n-use std::fs;\n-use std::io::{self, Write};\n-use std::path::{PathBuf, Path};\n-use std::process;\n+#![deny(warnings)]\n \n-macro_rules! t {\n-    ($e:expr, $p:expr) => (match $e {\n-        Ok(e) => e,\n-        Err(e) => panic!(\"{} failed on {} with {}\", stringify!($e), ($p).display(), e),\n-    });\n-\n-    ($e:expr) => (match $e {\n-        Ok(e) => e,\n-        Err(e) => panic!(\"{} failed with {}\", stringify!($e), e),\n-    })\n-}\n+extern crate tidy;\n+use tidy::*;\n \n-macro_rules! tidy_error {\n-    ($bad:expr, $fmt:expr, $($arg:tt)*) => ({\n-        use std::io::Write;\n-        *$bad = true;\n-        write!(::std::io::stderr(), \"tidy error: \").expect(\"could not write to stderr\");\n-        writeln!(::std::io::stderr(), $fmt, $($arg)*).expect(\"could not write to stderr\");\n-    });\n-}\n-\n-mod bins;\n-mod style;\n-mod errors;\n-mod features;\n-mod cargo;\n-mod pal;\n-mod deps;\n-mod unstable_book;\n+use std::process;\n+use std::path::PathBuf;\n+use std::env;\n+use std::io::{self, Write};\n \n fn main() {\n     let path = env::args_os().skip(1).next().expect(\"need an argument\");\n@@ -74,41 +48,3 @@ fn main() {\n         process::exit(1);\n     }\n }\n-\n-fn filter_dirs(path: &Path) -> bool {\n-    let skip = [\n-        \"src/jemalloc\",\n-        \"src/llvm\",\n-        \"src/libbacktrace\",\n-        \"src/compiler-rt\",\n-        \"src/rustllvm\",\n-        \"src/liblibc\",\n-        \"src/vendor\",\n-        \"src/rt/hoedown\",\n-        \"src/tools/cargo\",\n-        \"src/tools/rls\",\n-        \"src/tools/rust-installer\",\n-    ];\n-    skip.iter().any(|p| path.ends_with(p))\n-}\n-\n-fn walk_many(paths: &[&Path], skip: &mut FnMut(&Path) -> bool, f: &mut FnMut(&Path)) {\n-    for path in paths {\n-        walk(path, skip, f);\n-    }\n-}\n-\n-fn walk(path: &Path, skip: &mut FnMut(&Path) -> bool, f: &mut FnMut(&Path)) {\n-    for entry in t!(fs::read_dir(path), path) {\n-        let entry = t!(entry);\n-        let kind = t!(entry.file_type());\n-        let path = entry.path();\n-        if kind.is_dir() {\n-            if !skip(&path) {\n-                walk(&path, skip, f);\n-            }\n-        } else {\n-            f(&path);\n-        }\n-    }\n-}"}]}