{"sha": "84c9970db5056738995b0979cda8249c2314c6ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0Yzk5NzBkYjUwNTY3Mzg5OTViMDk3OWNkYTgyNDljMjMxNGM2ZWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-13T21:37:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-13T21:37:35Z"}, "message": "Merge #7664\n\n7664: refactor impl generation in assists r=Veykril a=jDomantas\n\nFollow-up to #7659: all impl generation in assists (at least what I found) is now done through `utils::{generate_impl_text, generate_trait_impl_text}`.\n\nCo-authored-by: Domantas Jadenkus <djadenkus@gmail.com>", "tree": {"sha": "30e71296bfdc89448256cc4987ac06f18c32758f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30e71296bfdc89448256cc4987ac06f18c32758f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84c9970db5056738995b0979cda8249c2314c6ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgKEafCRBK7hj4Ov3rIwAAdHIIADY+WJEh6dTeZ+jB7dTBQfRU\ndjL8x0i0pHtrp+L2767LQHD4aYonb/aDKqip5w/2r3KQui9qY7JLf9zSeWUTb1Zx\nyrIGLPD9iRKwCljCmcqSXatFP4wgTGMGS/VIg0o67cKyNIqJQqrCovkKLZecUlde\nggkCmObIlFfHVBwKLJWRB0F7msVfAse+neaccr+WK5q/8XNaUKoIFgLQu8xRClVJ\nfwyRzQFJSXkVvgWlTC41p/EM3GF6JJsPemziwme4LakfkUIrp7EtIwy87Algg65X\ngPIyrwq56UaHesJOim+sy2UdqR57LvRmk/trUKqJO6veoTPGiwGSRlcW1ptm1ck=\n=ocr2\n-----END PGP SIGNATURE-----\n", "payload": "tree 30e71296bfdc89448256cc4987ac06f18c32758f\nparent 7f751d6413aaaf7b36c02a76ac99077da529db75\nparent 7f100fff92ab4944f3d49cf7ffdcd91fc3578936\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1613252255 +0000\ncommitter GitHub <noreply@github.com> 1613252255 +0000\n\nMerge #7664\n\n7664: refactor impl generation in assists r=Veykril a=jDomantas\n\nFollow-up to #7659: all impl generation in assists (at least what I found) is now done through `utils::{generate_impl_text, generate_trait_impl_text}`.\n\nCo-authored-by: Domantas Jadenkus <djadenkus@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84c9970db5056738995b0979cda8249c2314c6ee", "html_url": "https://github.com/rust-lang/rust/commit/84c9970db5056738995b0979cda8249c2314c6ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84c9970db5056738995b0979cda8249c2314c6ee/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f751d6413aaaf7b36c02a76ac99077da529db75", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f751d6413aaaf7b36c02a76ac99077da529db75", "html_url": "https://github.com/rust-lang/rust/commit/7f751d6413aaaf7b36c02a76ac99077da529db75"}, {"sha": "7f100fff92ab4944f3d49cf7ffdcd91fc3578936", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f100fff92ab4944f3d49cf7ffdcd91fc3578936", "html_url": "https://github.com/rust-lang/rust/commit/7f100fff92ab4944f3d49cf7ffdcd91fc3578936"}], "stats": {"total": 153, "additions": 55, "deletions": 98}, "files": [{"sha": "d9388a737829dc55435d4230e07da7ddba6876b2", "filename": "crates/assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 16, "deletions": 45, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/84c9970db5056738995b0979cda8249c2314c6ee/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c9970db5056738995b0979cda8249c2314c6ee/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=84c9970db5056738995b0979cda8249c2314c6ee", "patch": "@@ -1,15 +1,9 @@\n-use ast::GenericParamsOwner;\n use ide_db::helpers::FamousDefs;\n use ide_db::RootDatabase;\n-use itertools::Itertools;\n-use stdx::format_to;\n-use syntax::{\n-    ast::{self, AstNode, NameOwner},\n-    SmolStr,\n-};\n+use syntax::ast::{self, AstNode, NameOwner};\n use test_utils::mark;\n \n-use crate::{AssistContext, AssistId, AssistKind, Assists};\n+use crate::{utils::generate_trait_impl_text, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: generate_from_impl_for_enum\n //\n@@ -31,8 +25,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n     let variant_name = variant.name()?;\n-    let enum_name = variant.parent_enum().name()?;\n-    let enum_type_params = variant.parent_enum().generic_param_list();\n+    let enum_ = ast::Adt::Enum(variant.parent_enum());\n     let (field_name, field_type) = match variant.kind() {\n         ast::StructKind::Tuple(field_list) => {\n             if field_list.fields().count() != 1 {\n@@ -62,49 +55,27 @@ pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext\n         target,\n         |edit| {\n             let start_offset = variant.parent_enum().syntax().text_range().end();\n-            let mut buf = String::from(\"\\n\\nimpl\");\n-            if let Some(type_params) = &enum_type_params {\n-                format_to!(buf, \"{}\", type_params.syntax());\n-            }\n-            format_to!(buf, \" From<{}> for {}\", field_type.syntax(), enum_name);\n-            if let Some(type_params) = enum_type_params {\n-                let lifetime_params = type_params\n-                    .lifetime_params()\n-                    .filter_map(|it| it.lifetime())\n-                    .map(|it| SmolStr::from(it.text()));\n-                let type_params = type_params\n-                    .type_params()\n-                    .filter_map(|it| it.name())\n-                    .map(|it| SmolStr::from(it.text()));\n-\n-                let generic_params = lifetime_params.chain(type_params).format(\", \");\n-                format_to!(buf, \"<{}>\", generic_params)\n-            }\n-            if let Some(name) = field_name {\n-                format_to!(\n-                    buf,\n-                    r#\" {{\n-    fn from({0}: {1}) -> Self {{\n+            let from_trait = format!(\"From<{}>\", field_type.syntax());\n+            let impl_code = if let Some(name) = field_name {\n+                format!(\n+                    r#\"    fn from({0}: {1}) -> Self {{\n         Self::{2} {{ {0} }}\n-    }}\n-}}\"#,\n+    }}\"#,\n                     name.text(),\n                     field_type.syntax(),\n                     variant_name,\n-                );\n+                )\n             } else {\n-                format_to!(\n-                    buf,\n-                    r#\" {{\n-    fn from(v: {}) -> Self {{\n+                format!(\n+                    r#\"    fn from(v: {}) -> Self {{\n         Self::{}(v)\n-    }}\n-}}\"#,\n+    }}\"#,\n                     field_type.syntax(),\n                     variant_name,\n-                );\n-            }\n-            edit.insert(start_offset, buf);\n+                )\n+            };\n+            let from_impl = generate_trait_impl_text(&enum_, &from_trait, &impl_code);\n+            edit.insert(start_offset, from_impl);\n         },\n     )\n }"}, {"sha": "050bcd4e29b374fdf9562b7be80243251fed9f29", "filename": "crates/assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 6, "deletions": 40, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/84c9970db5056738995b0979cda8249c2314c6ee/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c9970db5056738995b0979cda8249c2314c6ee/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=84c9970db5056738995b0979cda8249c2314c6ee", "patch": "@@ -1,11 +1,6 @@\n-use itertools::Itertools;\n-use stdx::format_to;\n-use syntax::{\n-    ast::{self, AstNode, AttrsOwner, GenericParamsOwner, NameOwner},\n-    SmolStr,\n-};\n+use syntax::ast::{self, AstNode, NameOwner};\n \n-use crate::{AssistContext, AssistId, AssistKind, Assists};\n+use crate::{utils::generate_impl_text, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: generate_impl\n //\n@@ -36,44 +31,15 @@ pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n         format!(\"Generate impl for `{}`\", name),\n         target,\n         |edit| {\n-            let type_params = nominal.generic_param_list();\n             let start_offset = nominal.syntax().text_range().end();\n-            let mut buf = String::new();\n-            buf.push_str(\"\\n\\n\");\n-            nominal\n-                .attrs()\n-                .filter(|attr| {\n-                    attr.as_simple_call().map(|(name, _arg)| name == \"cfg\").unwrap_or(false)\n-                })\n-                .for_each(|attr| buf.push_str(format!(\"{}\\n\", attr.to_string()).as_str()));\n-\n-            buf.push_str(\"impl\");\n-            if let Some(type_params) = &type_params {\n-                format_to!(buf, \"{}\", type_params.syntax());\n-            }\n-            buf.push_str(\" \");\n-            buf.push_str(name.text());\n-            if let Some(type_params) = type_params {\n-                let lifetime_params = type_params\n-                    .lifetime_params()\n-                    .filter_map(|it| it.lifetime())\n-                    .map(|it| SmolStr::from(it.text()));\n-                let type_params = type_params\n-                    .type_params()\n-                    .filter_map(|it| it.name())\n-                    .map(|it| SmolStr::from(it.text()));\n-\n-                let generic_params = lifetime_params.chain(type_params).format(\", \");\n-                format_to!(buf, \"<{}>\", generic_params)\n-            }\n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n-                    buf.push_str(\" {\\n    $0\\n}\");\n-                    edit.insert_snippet(cap, start_offset, buf);\n+                    let snippet = generate_impl_text(&nominal, \"    $0\");\n+                    edit.insert_snippet(cap, start_offset, snippet);\n                 }\n                 None => {\n-                    buf.push_str(\" {\\n}\");\n-                    edit.insert(start_offset, buf);\n+                    let snippet = generate_impl_text(&nominal, \"\");\n+                    edit.insert(start_offset, snippet);\n                 }\n             }\n         },"}, {"sha": "c69bc5cacd404bb8a6d16fa3862616f59fa228d3", "filename": "crates/assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/84c9970db5056738995b0979cda8249c2314c6ee/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c9970db5056738995b0979cda8249c2314c6ee/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=84c9970db5056738995b0979cda8249c2314c6ee", "patch": "@@ -2,16 +2,16 @@ use ide_db::helpers::mod_path_to_ast;\n use ide_db::imports_locator;\n use itertools::Itertools;\n use syntax::{\n-    ast::{self, make, AstNode},\n-    Direction,\n+    ast::{self, make, AstNode, NameOwner},\n     SyntaxKind::{IDENT, WHITESPACE},\n     TextSize,\n };\n \n use crate::{\n     assist_context::{AssistBuilder, AssistContext, Assists},\n     utils::{\n-        add_trait_assoc_items_to_impl, filter_assoc_items, render_snippet, Cursor, DefaultMethods,\n+        add_trait_assoc_items_to_impl, filter_assoc_items, generate_trait_impl_text,\n+        render_snippet, Cursor, DefaultMethods,\n     },\n     AssistId, AssistKind,\n };\n@@ -57,8 +57,9 @@ pub(crate) fn replace_derive_with_manual_impl(\n     let trait_token = ctx.token_at_offset().find(|t| t.kind() == IDENT && t.text() != \"derive\")?;\n     let trait_path = make::path_unqualified(make::path_segment(make::name_ref(trait_token.text())));\n \n-    let annotated_name = attr.syntax().siblings(Direction::Next).find_map(ast::Name::cast)?;\n-    let insert_pos = annotated_name.syntax().parent()?.text_range().end();\n+    let adt = attr.syntax().parent().and_then(ast::Adt::cast)?;\n+    let annotated_name = adt.name()?;\n+    let insert_pos = adt.syntax().text_range().end();\n \n     let current_module = ctx.sema.scope(annotated_name.syntax()).module()?;\n     let current_crate = current_module.krate();\n@@ -82,10 +83,10 @@ pub(crate) fn replace_derive_with_manual_impl(\n \n     let mut no_traits_found = true;\n     for (trait_path, trait_) in found_traits.inspect(|_| no_traits_found = false) {\n-        add_assist(acc, ctx, &attr, &trait_path, Some(trait_), &annotated_name, insert_pos)?;\n+        add_assist(acc, ctx, &attr, &trait_path, Some(trait_), &adt, &annotated_name, insert_pos)?;\n     }\n     if no_traits_found {\n-        add_assist(acc, ctx, &attr, &trait_path, None, &annotated_name, insert_pos)?;\n+        add_assist(acc, ctx, &attr, &trait_path, None, &adt, &annotated_name, insert_pos)?;\n     }\n     Some(())\n }\n@@ -96,6 +97,7 @@ fn add_assist(\n     attr: &ast::Attr,\n     trait_path: &ast::Path,\n     trait_: Option<hir::Trait>,\n+    adt: &ast::Adt,\n     annotated_name: &ast::Name,\n     insert_pos: TextSize,\n ) -> Option<()> {\n@@ -112,15 +114,15 @@ fn add_assist(\n             let impl_def_with_items =\n                 impl_def_from_trait(&ctx.sema, annotated_name, trait_, trait_path);\n             update_attribute(builder, &input, &trait_name, &attr);\n+            let trait_path = format!(\"{}\", trait_path);\n             match (ctx.config.snippet_cap, impl_def_with_items) {\n-                (None, _) => builder.insert(\n-                    insert_pos,\n-                    format!(\"\\n\\nimpl {} for {} {{\\n\\n}}\", trait_path, annotated_name),\n-                ),\n+                (None, _) => {\n+                    builder.insert(insert_pos, generate_trait_impl_text(adt, &trait_path, \"\"))\n+                }\n                 (Some(cap), None) => builder.insert_snippet(\n                     cap,\n                     insert_pos,\n-                    format!(\"\\n\\nimpl {} for {} {{\\n    $0\\n}}\", trait_path, annotated_name),\n+                    generate_trait_impl_text(adt, &trait_path, \"    $0\"),\n                 ),\n                 (Some(cap), Some((impl_def, first_assoc_item))) => {\n                     let mut cursor = Cursor::Before(first_assoc_item.syntax());"}, {"sha": "98c4462bbc34fe03bd3f975f5b5bb93516cde2d0", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/84c9970db5056738995b0979cda8249c2314c6ee/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c9970db5056738995b0979cda8249c2314c6ee/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=84c9970db5056738995b0979cda8249c2314c6ee", "patch": "@@ -367,13 +367,31 @@ pub(crate) fn find_impl_block_end(impl_def: ast::Impl, buf: &mut String) -> Opti\n // Generates the surrounding `impl Type { <code> }` including type and lifetime\n // parameters\n pub(crate) fn generate_impl_text(adt: &ast::Adt, code: &str) -> String {\n+    generate_impl_text_inner(adt, None, code)\n+}\n+\n+// Generates the surrounding `impl <trait> for Type { <code> }` including type\n+// and lifetime parameters\n+pub(crate) fn generate_trait_impl_text(adt: &ast::Adt, trait_text: &str, code: &str) -> String {\n+    generate_impl_text_inner(adt, Some(trait_text), code)\n+}\n+\n+fn generate_impl_text_inner(adt: &ast::Adt, trait_text: Option<&str>, code: &str) -> String {\n     let type_params = adt.generic_param_list();\n     let mut buf = String::with_capacity(code.len());\n-    buf.push_str(\"\\n\\nimpl\");\n+    buf.push_str(\"\\n\\n\");\n+    adt.attrs()\n+        .filter(|attr| attr.as_simple_call().map(|(name, _arg)| name == \"cfg\").unwrap_or(false))\n+        .for_each(|attr| buf.push_str(format!(\"{}\\n\", attr.to_string()).as_str()));\n+    buf.push_str(\"impl\");\n     if let Some(type_params) = &type_params {\n         format_to!(buf, \"{}\", type_params.syntax());\n     }\n     buf.push(' ');\n+    if let Some(trait_text) = trait_text {\n+        buf.push_str(trait_text);\n+        buf.push_str(\" for \");\n+    }\n     buf.push_str(adt.name().unwrap().text());\n     if let Some(type_params) = type_params {\n         let lifetime_params = type_params"}]}