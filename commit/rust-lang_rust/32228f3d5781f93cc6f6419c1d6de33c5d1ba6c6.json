{"sha": "32228f3d5781f93cc6f6419c1d6de33c5d1ba6c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMjI4ZjNkNTc4MWY5M2NjNmY2NDE5YzFkNmRlMzNjNWQxYmE2YzY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-06T06:39:25Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-06T06:40:12Z"}, "message": "std: work-around for take/skip type inference (#6967)", "tree": {"sha": "6ca6557ee80929dd2dd0fe6581e9c73b95472b00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ca6557ee80929dd2dd0fe6581e9c73b95472b00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32228f3d5781f93cc6f6419c1d6de33c5d1ba6c6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32228f3d5781f93cc6f6419c1d6de33c5d1ba6c6", "html_url": "https://github.com/rust-lang/rust/commit/32228f3d5781f93cc6f6419c1d6de33c5d1ba6c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32228f3d5781f93cc6f6419c1d6de33c5d1ba6c6/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e62ad6876550e9a7de7f5e6039707f4a8e15f9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e62ad6876550e9a7de7f5e6039707f4a8e15f9b", "html_url": "https://github.com/rust-lang/rust/commit/7e62ad6876550e9a7de7f5e6039707f4a8e15f9b"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "780a5a827d10cbf53588efaa7717a63afb3a4a65", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32228f3d5781f93cc6f6419c1d6de33c5d1ba6c6/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32228f3d5781f93cc6f6419c1d6de33c5d1ba6c6/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=32228f3d5781f93cc6f6419c1d6de33c5d1ba6c6", "patch": "@@ -186,7 +186,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), &5);\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn skip(self, n: uint) -> SkipIterator<Self>;\n+    fn skip(self, n: uint) -> SkipIterator<A, Self>;\n \n     /// Creates an iterator which yields the first `n` elements of this\n     /// iterator, and then it will always return None.\n@@ -203,7 +203,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), &3);\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn take(self, n: uint) -> TakeIterator<Self>;\n+    fn take(self, n: uint) -> TakeIterator<A, Self>;\n \n     /// Creates a new iterator which behaves in a similar fashion to foldl.\n     /// There is a state which is passed between each iteration and can be\n@@ -386,12 +386,12 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     }\n \n     #[inline(always)]\n-    fn skip(self, n: uint) -> SkipIterator<T> {\n+    fn skip(self, n: uint) -> SkipIterator<A, T> {\n         SkipIterator{iter: self, n: n}\n     }\n \n     #[inline(always)]\n-    fn take(self, n: uint) -> TakeIterator<T> {\n+    fn take(self, n: uint) -> TakeIterator<A, T> {\n         TakeIterator{iter: self, n: n}\n     }\n \n@@ -739,13 +739,14 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for TakeWhileIterator<'self, A, T> {\n     }\n }\n \n-/// An iterator which skips over `n` elements of `iter`\n-pub struct SkipIterator<T> {\n+/// An iterator which skips over `n` elements of `iter`.\n+// FIXME #6967: Dummy A parameter to get around type inference bug\n+pub struct SkipIterator<A, T> {\n     priv iter: T,\n     priv n: uint\n }\n \n-impl<A, T: Iterator<A>> Iterator<A> for SkipIterator<T> {\n+impl<A, T: Iterator<A>> Iterator<A> for SkipIterator<A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         let mut next = self.iter.next();\n@@ -772,12 +773,13 @@ impl<A, T: Iterator<A>> Iterator<A> for SkipIterator<T> {\n }\n \n /// An iterator which only iterates over the first `n` iterations of `iter`.\n-pub struct TakeIterator<T> {\n+// FIXME #6967: Dummy A parameter to get around type inference bug\n+pub struct TakeIterator<A, T> {\n     priv iter: T,\n     priv n: uint\n }\n \n-impl<A, T: Iterator<A>> Iterator<A> for TakeIterator<T> {\n+impl<A, T: Iterator<A>> Iterator<A> for TakeIterator<A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         let next = self.iter.next();\n@@ -945,7 +947,7 @@ mod tests {\n         let ys = [13, 15, 16, 17, 19, 20, 30];\n         let mut it = xs.iter().skip(5);\n         let mut i = 0;\n-        for it.advance |&x: &uint| {\n+        for it.advance |&x| {\n             assert_eq!(x, ys[i]);\n             i += 1;\n         }\n@@ -958,7 +960,7 @@ mod tests {\n         let ys = [0u, 1, 2, 3, 5];\n         let mut it = xs.iter().take(5);\n         let mut i = 0;\n-        for it.advance |&x: &uint| {\n+        for it.advance |&x| {\n             assert_eq!(x, ys[i]);\n             i += 1;\n         }"}]}