{"sha": "402f863d8ac2e69abf415d9ed9c1b9984e037700", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMmY4NjNkOGFjMmU2OWFiZjQxNWQ5ZWQ5YzFiOTk4NGUwMzc3MDA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-12T13:10:38Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-18T19:23:00Z"}, "message": "perf: walk liveness backwards in Conflicts::build", "tree": {"sha": "947a67462b9ab910194e7074058392f0df0a2a26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/947a67462b9ab910194e7074058392f0df0a2a26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/402f863d8ac2e69abf415d9ed9c1b9984e037700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/402f863d8ac2e69abf415d9ed9c1b9984e037700", "html_url": "https://github.com/rust-lang/rust/commit/402f863d8ac2e69abf415d9ed9c1b9984e037700", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/402f863d8ac2e69abf415d9ed9c1b9984e037700/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dbc7f76e1a0f1d054655f6fa5786b700745b66e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dbc7f76e1a0f1d054655f6fa5786b700745b66e", "html_url": "https://github.com/rust-lang/rust/commit/7dbc7f76e1a0f1d054655f6fa5786b700745b66e"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "8e174ce277a9c7067cfb3b2166edad0ff616fe19", "filename": "compiler/rustc_mir/src/transform/dest_prop.rs", "status": "modified", "additions": 39, "deletions": 24, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/402f863d8ac2e69abf415d9ed9c1b9984e037700/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402f863d8ac2e69abf415d9ed9c1b9984e037700/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs?ref=402f863d8ac2e69abf415d9ed9c1b9984e037700", "patch": "@@ -100,10 +100,7 @@ use crate::{\n     transform::{MirPass, MirSource},\n     util::{dump_mir, PassWhere},\n };\n-use dataflow::{\n-    impls::{MaybeInitializedLocals, MaybeLiveLocals},\n-    ResultsCursor,\n-};\n+use dataflow::impls::{MaybeInitializedLocals, MaybeLiveLocals};\n use rustc_data_structures::unify::{InPlaceUnificationTable, UnifyKey};\n use rustc_index::{\n     bit_set::{BitMatrix, BitSet},\n@@ -382,16 +379,11 @@ impl Conflicts {\n             body.local_decls.len(),\n         );\n \n-        let mut record_conflicts =\n-            |init: &ResultsCursor<'_, '_, MaybeInitializedLocals>,\n-             live: &ResultsCursor<'_, '_, MaybeLiveLocals>| {\n-                let mut requires_storage = init.get().clone();\n-                requires_storage.intersect(live.get());\n-\n-                for local in requires_storage.iter() {\n-                    conflicts.union_row_with(&requires_storage, local);\n-                }\n-            };\n+        let mut record_conflicts = |new_conflicts: &BitSet<_>| {\n+            for local in new_conflicts.iter() {\n+                conflicts.union_row_with(&new_conflicts, local);\n+            }\n+        };\n \n         let def_id = source.def_id();\n         let mut init = MaybeInitializedLocals\n@@ -457,27 +449,50 @@ impl Conflicts {\n             },\n         );\n \n+        let mut relevant_locals = Vec::new();\n+\n         // Visit only reachable basic blocks. The exact order is not important.\n         for (block, data) in traversal::preorder(body) {\n-            // Observe the dataflow state *before* all possible locations (statement or terminator) in\n-            // each basic block...\n+            // We need to observe the dataflow state *before* all possible locations (statement or\n+            // terminator) in each basic block, and then observe the state *after* the terminator\n+            // effect is applied. As long as neither `init` nor `borrowed` has a \"before\" effect,\n+            // we will observe all possible dataflow states.\n+\n+            // Since liveness is a backwards analysis, we need to walk the results backwards. To do\n+            // that, we first collect in the `MaybeInitializedLocals` results in a forwards\n+            // traversal.\n+\n+            relevant_locals.resize_with(data.statements.len() + 1, || {\n+                BitSet::new_empty(body.local_decls.len())\n+            });\n+\n+            // First, go forwards for `MaybeInitializedLocals`.\n             for statement_index in 0..=data.statements.len() {\n                 let loc = Location { block, statement_index };\n-                trace!(\"record conflicts at {:?}\", loc);\n                 init.seek_before_primary_effect(loc);\n+\n+                relevant_locals[statement_index].clone_from(init.get());\n+            }\n+\n+            // Now, go backwards and union with the liveness results.\n+            for statement_index in (0..=data.statements.len()).rev() {\n+                let loc = Location { block, statement_index };\n                 live.seek_after_primary_effect(loc);\n-                // FIXME: liveness is backwards, so this is slow\n \n-                record_conflicts(&init, &live);\n+                relevant_locals[statement_index].intersect(live.get());\n+\n+                trace!(\"record conflicts at {:?}\", loc);\n+\n+                record_conflicts(&relevant_locals[statement_index]);\n             }\n \n-            // ...and then observe the state *after* the terminator effect is applied. As long as\n-            // neither `init` nor `borrowed` has a \"before\" effect, we will observe all possible\n-            // dataflow states here or in the loop above.\n-            trace!(\"record conflicts at end of {:?}\", block);\n             init.seek_to_block_end(block);\n             live.seek_to_block_end(block);\n-            record_conflicts(&init, &live);\n+            let mut conflicts = init.get().clone();\n+            conflicts.intersect(live.get());\n+            trace!(\"record conflicts at end of {:?}\", block);\n+\n+            record_conflicts(&conflicts);\n         }\n \n         Self { matrix: conflicts, unify_cache: BitSet::new_empty(body.local_decls.len()) }"}]}