{"sha": "d50ca3cbeef4204ec7f163813f3ff7253c44b5c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MGNhM2NiZWVmNDIwNGVjN2YxNjM4MTNmM2ZmNzI1M2M0NGI1YzI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-05-19T10:05:19Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T17:51:36Z"}, "message": "Introduce HirIdVec.", "tree": {"sha": "59846c39b38b5c1cdc403e12846d03a32a4b814b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59846c39b38b5c1cdc403e12846d03a32a4b814b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d50ca3cbeef4204ec7f163813f3ff7253c44b5c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d50ca3cbeef4204ec7f163813f3ff7253c44b5c2", "html_url": "https://github.com/rust-lang/rust/commit/d50ca3cbeef4204ec7f163813f3ff7253c44b5c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d50ca3cbeef4204ec7f163813f3ff7253c44b5c2/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "736fc96ff361e2014af439f277f9ec3e8e7cd20f", "url": "https://api.github.com/repos/rust-lang/rust/commits/736fc96ff361e2014af439f277f9ec3e8e7cd20f", "html_url": "https://github.com/rust-lang/rust/commit/736fc96ff361e2014af439f277f9ec3e8e7cd20f"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "dc7cf40bd90f3af1970b16ed465b6f560b16c77c", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d50ca3cbeef4204ec7f163813f3ff7253c44b5c2/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50ca3cbeef4204ec7f163813f3ff7253c44b5c2/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=d50ca3cbeef4204ec7f163813f3ff7253c44b5c2", "patch": "@@ -1,4 +1,5 @@\n use crate::def_id::{LocalDefId, CRATE_DEF_INDEX};\n+use rustc_index::vec::IndexVec;\n use std::fmt;\n \n /// Uniquely identifies a node in the HIR of the current crate. It is\n@@ -61,3 +62,55 @@ pub const CRATE_HIR_ID: HirId = HirId {\n     owner: LocalDefId { local_def_index: CRATE_DEF_INDEX },\n     local_id: ItemLocalId::from_u32(0),\n };\n+\n+#[derive(Clone, Default, Debug, Encodable, Decodable)]\n+pub struct HirIdVec<T> {\n+    map: IndexVec<LocalDefId, IndexVec<ItemLocalId, T>>,\n+}\n+\n+impl<T> HirIdVec<T> {\n+    pub fn push_owner(&mut self, id: LocalDefId) {\n+        self.map.ensure_contains_elem(id, IndexVec::new);\n+    }\n+\n+    pub fn push(&mut self, id: HirId, value: T) {\n+        if id.local_id == ItemLocalId::from_u32(0) {\n+            self.push_owner(id.owner);\n+        }\n+        let submap = &mut self.map[id.owner];\n+        let _ret_id = submap.push(value);\n+        debug_assert_eq!(_ret_id, id.local_id);\n+    }\n+\n+    pub fn get(&self, id: HirId) -> Option<&T> {\n+        self.map.get(id.owner)?.get(id.local_id)\n+    }\n+\n+    pub fn get_owner(&self, id: LocalDefId) -> &IndexVec<ItemLocalId, T> {\n+        &self.map[id]\n+    }\n+\n+    pub fn iter(&self) -> impl Iterator<Item = &T> {\n+        self.map.iter().flat_map(|la| la.iter())\n+    }\n+\n+    pub fn iter_enumerated(&self) -> impl Iterator<Item = (HirId, &T)> {\n+        self.map.iter_enumerated().flat_map(|(owner, la)| {\n+            la.iter_enumerated().map(move |(local_id, attr)| (HirId { owner, local_id }, attr))\n+        })\n+    }\n+}\n+\n+impl<T> std::ops::Index<HirId> for HirIdVec<T> {\n+    type Output = T;\n+\n+    fn index(&self, id: HirId) -> &T {\n+        &self.map[id.owner][id.local_id]\n+    }\n+}\n+\n+impl<T> std::ops::IndexMut<HirId> for HirIdVec<T> {\n+    fn index_mut(&mut self, id: HirId) -> &mut T {\n+        &mut self.map[id.owner][id.local_id]\n+    }\n+}"}]}