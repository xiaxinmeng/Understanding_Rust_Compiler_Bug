{"sha": "0d01ee95583479b5cbcffe183075c7943099192a", "node_id": "C_kwDOAAsO6NoAKDBkMDFlZTk1NTgzNDc5YjVjYmNmZmUxODMwNzVjNzk0MzA5OTE5MmE", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-04-07T16:29:57Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-04-08T16:00:23Z"}, "message": "remove ItemLikeVisitor impls in incremental, interface, metadata and symbol_mangling crates\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "13a361720b86f526d0b6376f210dc23a4839d5f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13a361720b86f526d0b6376f210dc23a4839d5f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d01ee95583479b5cbcffe183075c7943099192a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d01ee95583479b5cbcffe183075c7943099192a", "html_url": "https://github.com/rust-lang/rust/commit/0d01ee95583479b5cbcffe183075c7943099192a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d01ee95583479b5cbcffe183075c7943099192a/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28aa2dd3b4295c64b8c38a7863bfaefd6790e6ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/28aa2dd3b4295c64b8c38a7863bfaefd6790e6ef", "html_url": "https://github.com/rust-lang/rust/commit/28aa2dd3b4295c64b8c38a7863bfaefd6790e6ef"}], "stats": {"total": 127, "additions": 24, "deletions": 103}, "files": [{"sha": "f6ff3477ff7772e67d2a5b278059a7b451a54c84", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0d01ee95583479b5cbcffe183075c7943099192a/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d01ee95583479b5cbcffe183075c7943099192a/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=0d01ee95583479b5cbcffe183075c7943099192a", "patch": "@@ -24,7 +24,6 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit;\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::Node as HirNode;\n use rustc_hir::{ImplItemKind, ItemKind as HirItem, TraitItemKind};\n use rustc_middle::dep_graph::{label_strs, DepNode, DepNodeExt};\n@@ -409,24 +408,6 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n     }\n }\n \n-impl<'tcx> ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n-    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        self.check_item(item.def_id, item.span);\n-    }\n-\n-    fn visit_trait_item(&mut self, item: &hir::TraitItem<'_>) {\n-        self.check_item(item.def_id, item.span);\n-    }\n-\n-    fn visit_impl_item(&mut self, item: &hir::ImplItem<'_>) {\n-        self.check_item(item.def_id, item.span);\n-    }\n-\n-    fn visit_foreign_item(&mut self, item: &hir::ForeignItem<'_>) {\n-        self.check_item(item.def_id, item.span);\n-    }\n-}\n-\n /// Given a `#[rustc_clean]` attribute, scan for a `cfg=\"foo\"` attribute and check whether we have\n /// a cfg flag called `foo`.\n fn check_config(tcx: TyCtxt<'_>, attr: &Attribute) -> bool {"}, {"sha": "8652bd00fb7892ed3841094877e367171d2b1a3b", "filename": "compiler/rustc_interface/src/proc_macro_decls.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0d01ee95583479b5cbcffe183075c7943099192a/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d01ee95583479b5cbcffe183075c7943099192a/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs?ref=0d01ee95583479b5cbcffe183075c7943099192a", "patch": "@@ -1,6 +1,5 @@\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n@@ -9,10 +8,9 @@ fn proc_macro_decls_static(tcx: TyCtxt<'_>, (): ()) -> Option<LocalDefId> {\n     let mut finder = Finder { tcx, decls: None };\n \n     for id in tcx.hir().items() {\n-        let item = tcx.hir().item(id);\n-        let attrs = finder.tcx.hir().attrs(item.hir_id());\n+        let attrs = finder.tcx.hir().attrs(id.hir_id());\n         if finder.tcx.sess.contains_name(attrs, sym::rustc_proc_macro_decls) {\n-            finder.decls = Some(item.hir_id());\n+            finder.decls = Some(id.hir_id());\n         }\n     }\n \n@@ -24,21 +22,6 @@ struct Finder<'tcx> {\n     decls: Option<hir::HirId>,\n }\n \n-impl<'v> ItemLikeVisitor<'v> for Finder<'_> {\n-    fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        let attrs = self.tcx.hir().attrs(item.hir_id());\n-        if self.tcx.sess.contains_name(attrs, sym::rustc_proc_macro_decls) {\n-            self.decls = Some(item.hir_id());\n-        }\n-    }\n-\n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n-\n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n-\n-    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n-}\n-\n pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { proc_macro_decls_static, ..*providers };\n }"}, {"sha": "97fcbeb4ccc59962f6517c9da9973a4023b66835", "filename": "compiler/rustc_metadata/src/foreign_modules.rs", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0d01ee95583479b5cbcffe183075c7943099192a/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d01ee95583479b5cbcffe183075c7943099192a/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs?ref=0d01ee95583479b5cbcffe183075c7943099192a", "patch": "@@ -1,36 +1,19 @@\n use rustc_hir as hir;\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::def::DefKind;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::cstore::ForeignModule;\n \n crate fn collect(tcx: TyCtxt<'_>) -> Vec<ForeignModule> {\n     let mut modules = Vec::new();\n     for id in tcx.hir().items() {\n-        let item = tcx.hir().item(id);\n-        let hir::ItemKind::ForeignMod { items, .. } = item.kind else {\n+        if !matches!(tcx.hir().def_kind(id.def_id), DefKind::ForeignMod) {\n             continue;\n-        };\n-        let foreign_items = items.iter().map(|it| it.id.def_id.to_def_id()).collect();\n-        modules.push(ForeignModule { foreign_items, def_id: id.def_id.to_def_id() });\n+        }\n+        let item = tcx.hir().item(id);\n+        if let hir::ItemKind::ForeignMod { items, .. } = item.kind {\n+            let foreign_items = items.iter().map(|it| it.id.def_id.to_def_id()).collect();\n+            modules.push(ForeignModule { foreign_items, def_id: id.def_id.to_def_id() });\n+        }\n     }\n     modules\n }\n-\n-struct Collector {\n-    modules: Vec<ForeignModule>,\n-}\n-\n-impl<'tcx> ItemLikeVisitor<'tcx> for Collector {\n-    fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n-        let hir::ItemKind::ForeignMod { items, .. } = it.kind else {\n-            return;\n-        };\n-\n-        let foreign_items = items.iter().map(|it| it.id.def_id.to_def_id()).collect();\n-        self.modules.push(ForeignModule { foreign_items, def_id: it.def_id.to_def_id() });\n-    }\n-\n-    fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem<'tcx>) {}\n-    fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem<'tcx>) {}\n-    fn visit_foreign_item(&mut self, _it: &'tcx hir::ForeignItem<'tcx>) {}\n-}"}, {"sha": "43b6ecee794cd73cfca5a74488638e72f085616b", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0d01ee95583479b5cbcffe183075c7943099192a/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d01ee95583479b5cbcffe183075c7943099192a/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=0d01ee95583479b5cbcffe183075c7943099192a", "patch": "@@ -3,7 +3,7 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::def::DefKind;\n use rustc_middle::ty::{List, ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n use rustc_session::cstore::{DllCallingConvention, DllImport, NativeLib};\n use rustc_session::parse::feature_err;\n@@ -16,8 +16,7 @@ use rustc_target::spec::abi::Abi;\n crate fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLib> {\n     let mut collector = Collector { tcx, libs: Vec::new() };\n     for id in tcx.hir().items() {\n-        let item = tcx.hir().item(id);\n-        collector.visit_item(item);\n+        collector.process_item(id);\n     }\n     collector.process_command_line();\n     collector.libs\n@@ -35,8 +34,13 @@ struct Collector<'tcx> {\n     libs: Vec<NativeLib>,\n }\n \n-impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n-    fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n+impl<'tcx> Collector<'tcx> {\n+    fn process_item(&mut self, id: rustc_hir::ItemId) {\n+        if !matches!(self.tcx.hir().def_kind(id.def_id), DefKind::ForeignMod) {\n+            return;\n+        }\n+\n+        let it = self.tcx.hir().item(id);\n         let hir::ItemKind::ForeignMod { abi, items: foreign_mod_items } = it.kind else {\n             return;\n         };\n@@ -255,12 +259,6 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem<'tcx>) {}\n-    fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem<'tcx>) {}\n-    fn visit_foreign_item(&mut self, _it: &'tcx hir::ForeignItem<'tcx>) {}\n-}\n-\n-impl Collector<'_> {\n     fn register_native_lib(&mut self, span: Option<Span>, lib: NativeLib) {\n         if lib.name.as_ref().map_or(false, |&s| s == kw::Empty) {\n             match span {"}, {"sha": "37d1cffa2a52b9e1f6cc482a1208df1c52a53b4f", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0d01ee95583479b5cbcffe183075c7943099192a/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d01ee95583479b5cbcffe183075c7943099192a/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=0d01ee95583479b5cbcffe183075c7943099192a", "patch": "@@ -4,9 +4,7 @@\n //! def-path. This is used for unit testing the code that generates\n //! paths etc in all kinds of annoying scenarios.\n \n-use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{subst::InternalSubsts, Instance, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n@@ -23,27 +21,23 @@ pub fn report_symbol_names(tcx: TyCtxt<'_>) {\n     }\n \n     tcx.dep_graph.with_ignore(|| {\n-        let mut visitor = SymbolNamesTest { tcx };\n+        let mut symbol_names = SymbolNamesTest { tcx };\n         let crate_items = tcx.hir_crate_items(());\n \n         for id in crate_items.items() {\n-            let item = tcx.hir().item(id);\n-            visitor.visit_item(item);\n+            symbol_names.process_attrs(id.def_id);\n         }\n \n         for id in crate_items.trait_items() {\n-            let item = tcx.hir().trait_item(id);\n-            visitor.visit_trait_item(item);\n+            symbol_names.process_attrs(id.def_id);\n         }\n \n         for id in crate_items.impl_items() {\n-            let item = tcx.hir().impl_item(id);\n-            visitor.visit_impl_item(item);\n+            symbol_names.process_attrs(id.def_id);\n         }\n \n         for id in crate_items.foreign_items() {\n-            let item = tcx.hir().foreign_item(id);\n-            visitor.visit_foreign_item(item);\n+            symbol_names.process_attrs(id.def_id);\n         }\n     })\n }\n@@ -79,21 +73,3 @@ impl SymbolNamesTest<'_> {\n         }\n     }\n }\n-\n-impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for SymbolNamesTest<'tcx> {\n-    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        self.process_attrs(item.def_id);\n-    }\n-\n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n-        self.process_attrs(trait_item.def_id);\n-    }\n-\n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n-        self.process_attrs(impl_item.def_id);\n-    }\n-\n-    fn visit_foreign_item(&mut self, foreign_item: &'tcx hir::ForeignItem<'tcx>) {\n-        self.process_attrs(foreign_item.def_id);\n-    }\n-}"}]}