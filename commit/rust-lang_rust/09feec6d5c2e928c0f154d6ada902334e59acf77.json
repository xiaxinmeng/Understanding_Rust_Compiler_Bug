{"sha": "09feec6d5c2e928c0f154d6ada902334e59acf77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZmVlYzZkNWMyZTkyOGMwZjE1NGQ2YWRhOTAyMzM0ZTU5YWNmNzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-22T11:41:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-27T17:57:55Z"}, "message": "make `to_location` O(1)", "tree": {"sha": "0f68973478bc3e4af2dcde1d0cae74ec4f361d8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f68973478bc3e4af2dcde1d0cae74ec4f361d8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09feec6d5c2e928c0f154d6ada902334e59acf77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09feec6d5c2e928c0f154d6ada902334e59acf77", "html_url": "https://github.com/rust-lang/rust/commit/09feec6d5c2e928c0f154d6ada902334e59acf77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09feec6d5c2e928c0f154d6ada902334e59acf77/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eec37b2f94206f40f554266e26f2441a266285a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eec37b2f94206f40f554266e26f2441a266285a", "html_url": "https://github.com/rust-lang/rust/commit/7eec37b2f94206f40f554266e26f2441a266285a"}], "stats": {"total": 65, "additions": 23, "deletions": 42}, "files": [{"sha": "ae5d57906739bd8b0be2f684ef993e247a56be40", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 23, "deletions": 42, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/09feec6d5c2e928c0f154d6ada902334e59acf77/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09feec6d5c2e928c0f154d6ada902334e59acf77/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=09feec6d5c2e928c0f154d6ada902334e59acf77", "patch": "@@ -21,14 +21,9 @@ crate struct RegionValueElements {\n     /// For each basic block, how many points are contained within?\n     statements_before_block: IndexVec<BasicBlock, usize>,\n \n-    /// Map backward from each point into to one of two possible values:\n-    ///\n-    /// - `None`: if this point index represents a Location with non-zero index\n-    /// - `Some(bb)`: if this point index represents a Location with zero index\n-    ///\n-    /// NB. It may be better to just map back to a full `Location`. We\n-    /// should probably try that.\n-    basic_block_heads: IndexVec<PointIndex, Option<BasicBlock>>,\n+    /// Map backward from each point to the basic block that it\n+    /// belongs to.\n+    basic_blocks: IndexVec<PointIndex, BasicBlock>,\n \n     num_points: usize,\n }\n@@ -51,16 +46,14 @@ impl RegionValueElements {\n         );\n         debug!(\"RegionValueElements: num_points={:#?}\", num_points);\n \n-        let mut basic_block_heads: IndexVec<PointIndex, Option<BasicBlock>> =\n-            (0..num_points).map(|_| None).collect();\n-        for (bb, &first_point) in statements_before_block.iter_enumerated() {\n-            let first_point = PointIndex::new(first_point);\n-            basic_block_heads[first_point] = Some(bb);\n+        let mut basic_blocks = IndexVec::with_capacity(num_points);\n+        for (bb, bb_data) in mir.basic_blocks().iter_enumerated() {\n+            basic_blocks.extend((0 .. bb_data.statements.len() + 1).map(|_| bb));\n         }\n \n         Self {\n             statements_before_block,\n-            basic_block_heads,\n+            basic_blocks,\n             num_points,\n         }\n     }\n@@ -86,22 +79,13 @@ impl RegionValueElements {\n         PointIndex::new(start_index)\n     }\n \n-    /// Converts a `PointIndex` back to a location. O(N) where N is\n-    /// the number of blocks; could be faster if we ever cared.\n+    /// Converts a `PointIndex` back to a location. O(1).\n     crate fn to_location(&self, index: PointIndex) -> Location {\n         assert!(index.index() < self.num_points);\n-\n-        let mut statement_index = 0;\n-\n-        for opt_bb in self.basic_block_heads.raw[..= index.index()].iter().rev() {\n-            if let &Some(block) = opt_bb {\n-                return Location { block, statement_index };\n-            }\n-\n-            statement_index += 1;\n-        }\n-\n-        bug!(\"did not find basic block as expected for index = {:?}\", index)\n+        let block = self.basic_blocks[index];\n+        let start_index = self.statements_before_block[block];\n+        let statement_index = index.index() - start_index;\n+        Location { block, statement_index }\n     }\n \n     /// Sometimes we get point-indices back from bitsets that may be\n@@ -119,23 +103,20 @@ impl RegionValueElements {\n         index: PointIndex,\n         stack: &mut Vec<PointIndex>,\n     ) {\n-        match self.basic_block_heads[index] {\n+        let Location { block, statement_index } = self.to_location(index);\n+        if statement_index == 0 {\n             // If this is a basic block head, then the predecessors are\n             // the the terminators of other basic blocks\n-            Some(bb_head) => {\n-                stack.extend(\n-                    mir\n-                        .predecessors_for(bb_head)\n-                        .iter()\n-                        .map(|&pred_bb| mir.terminator_loc(pred_bb))\n-                        .map(|pred_loc| self.point_from_location(pred_loc)),\n-                );\n-            }\n-\n+            stack.extend(\n+                mir\n+                    .predecessors_for(block)\n+                    .iter()\n+                    .map(|&pred_bb| mir.terminator_loc(pred_bb))\n+                    .map(|pred_loc| self.point_from_location(pred_loc)),\n+            );\n+        } else {\n             // Otherwise, the pred is just the previous statement\n-            None => {\n-                stack.push(PointIndex::new(index.index() - 1));\n-            }\n+            stack.push(PointIndex::new(index.index() - 1));\n         }\n     }\n }"}]}