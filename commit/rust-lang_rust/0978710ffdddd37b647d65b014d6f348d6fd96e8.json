{"sha": "0978710ffdddd37b647d65b014d6f348d6fd96e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5Nzg3MTBmZmRkZGQzN2I2NDdkNjViMDE0ZDZmMzQ4ZDZmZDk2ZTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-14T10:13:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-14T10:13:07Z"}, "message": "Codegen minicore", "tree": {"sha": "df5cc681a5863f3c35f528e5fc2bea4fb6923e95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df5cc681a5863f3c35f528e5fc2bea4fb6923e95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0978710ffdddd37b647d65b014d6f348d6fd96e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0978710ffdddd37b647d65b014d6f348d6fd96e8", "html_url": "https://github.com/rust-lang/rust/commit/0978710ffdddd37b647d65b014d6f348d6fd96e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0978710ffdddd37b647d65b014d6f348d6fd96e8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b10e6e613270f98d39892ab6afcce6e8992765a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b10e6e613270f98d39892ab6afcce6e8992765a", "html_url": "https://github.com/rust-lang/rust/commit/4b10e6e613270f98d39892ab6afcce6e8992765a"}], "stats": {"total": 99, "additions": 62, "deletions": 37}, "files": [{"sha": "59922bb7399e19450ab048e47bfecae646e300b8", "filename": "build.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978710ffdddd37b647d65b014d6f348d6fd96e8/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0978710ffdddd37b647d65b014d6f348d6fd96e8/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=0978710ffdddd37b647d65b014d6f348d6fd96e8", "patch": "@@ -14,7 +14,7 @@ fi\n \n RUSTC=\"rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.$dylib_ext -L crate=.\"\n \n-$RUSTC examples/mini_core.rs --crate-name mini_core --crate-type lib &&\n+SHOULD_CODEGEN=1 $RUSTC examples/mini_core.rs --crate-name mini_core --crate-type lib &&\n $RUSTC examples/example.rs --crate-type lib &&\n $RUSTC examples/mini_core_hello_world.rs --crate-type bin &&\n "}, {"sha": "da28dc04c4b45ffb26917d384554d8f63a1ed9c9", "filename": "src/abi.rs", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0978710ffdddd37b647d65b014d6f348d6fd96e8/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978710ffdddd37b647d65b014d6f348d6fd96e8/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=0978710ffdddd37b647d65b014d6f348d6fd96e8", "patch": "@@ -278,33 +278,42 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n         Spread(Vec<Value>),\n     }\n \n-    let func_params = fx.mir.args_iter().map(|local| {\n-        let arg_ty = fx.monomorphize(&fx.mir.local_decls[local].ty);\n-\n-        // Adapted from https://github.com/rust-lang/rust/blob/145155dc96757002c7b2e9de8489416e2fdbbd57/src/librustc_codegen_llvm/mir/mod.rs#L442-L482\n-        if Some(local) == fx.mir.spread_arg {\n-            // This argument (e.g. the last argument in the \"rust-call\" ABI)\n-            // is a tuple that was spread at the ABI level and now we have\n-            // to reconstruct it into a tuple local variable, from multiple\n-            // individual function arguments.\n-\n-            let tupled_arg_tys = match arg_ty.sty {\n-                ty::TyTuple(ref tys) => tys,\n-                _ => bug!(\"spread argument isn't a tuple?! but {:?}\", arg_ty),\n-            };\n+    let func_params = fx\n+        .mir\n+        .args_iter()\n+        .map(|local| {\n+            let arg_ty = fx.monomorphize(&fx.mir.local_decls[local].ty);\n+\n+            // Adapted from https://github.com/rust-lang/rust/blob/145155dc96757002c7b2e9de8489416e2fdbbd57/src/librustc_codegen_llvm/mir/mod.rs#L442-L482\n+            if Some(local) == fx.mir.spread_arg {\n+                // This argument (e.g. the last argument in the \"rust-call\" ABI)\n+                // is a tuple that was spread at the ABI level and now we have\n+                // to reconstruct it into a tuple local variable, from multiple\n+                // individual function arguments.\n+\n+                let tupled_arg_tys = match arg_ty.sty {\n+                    ty::TyTuple(ref tys) => tys,\n+                    _ => bug!(\"spread argument isn't a tuple?! but {:?}\", arg_ty),\n+                };\n+\n+                let mut ebb_params = Vec::new();\n+                for arg_ty in tupled_arg_tys.iter() {\n+                    let cton_type =\n+                        get_pass_mode(fx.tcx, fx.self_sig().abi, arg_ty, false).get_param_ty(fx);\n+                    ebb_params.push(fx.bcx.append_ebb_param(start_ebb, cton_type));\n+                }\n \n-            let mut ebb_params = Vec::new();\n-            for arg_ty in tupled_arg_tys.iter() {\n-                let cton_type = get_pass_mode(fx.tcx, fx.self_sig().abi, arg_ty, false).get_param_ty(fx);\n-                ebb_params.push(fx.bcx.append_ebb_param(start_ebb, cton_type));\n+                (local, ArgKind::Spread(ebb_params), arg_ty)\n+            } else {\n+                let cton_type =\n+                    get_pass_mode(fx.tcx, fx.self_sig().abi, arg_ty, false).get_param_ty(fx);\n+                (\n+                    local,\n+                    ArgKind::Normal(fx.bcx.append_ebb_param(start_ebb, cton_type)),\n+                    arg_ty,\n+                )\n             }\n-\n-            (local, ArgKind::Spread(ebb_params), arg_ty)\n-        } else {\n-            let cton_type = get_pass_mode(fx.tcx, fx.self_sig().abi, arg_ty, false).get_param_ty(fx);\n-            (local, ArgKind::Normal(fx.bcx.append_ebb_param(start_ebb, cton_type)), arg_ty)\n-        }\n-    }).collect::<Vec<(Local, ArgKind, Ty)>>();\n+        }).collect::<Vec<(Local, ArgKind, Ty)>>();\n \n     match output_pass_mode {\n         PassMode::NoPass => {"}, {"sha": "40c858508d317c78adf82dcc0baa7396dbf0ecff", "filename": "src/base.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0978710ffdddd37b647d65b014d6f348d6fd96e8/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978710ffdddd37b647d65b014d6f348d6fd96e8/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=0978710ffdddd37b647d65b014d6f348d6fd96e8", "patch": "@@ -50,13 +50,7 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n \n                 context.func = func;\n                 // TODO: cranelift doesn't yet support some of the things needed\n-                if cx\n-                    .tcx\n-                    .sess\n-                    .crate_types\n-                    .get()\n-                    .contains(&CrateType::Executable)\n-                {\n+                if should_codegen(cx.tcx) {\n                     cx.module.define_function(func_id, context).unwrap();\n                     cx.defined_functions.push(func_id);\n                 }\n@@ -171,7 +165,7 @@ pub fn trans_fn<'a, 'tcx: 'a>(\n             } => {\n                 fx.bcx.ins().trap(TrapCode::User(0));\n                 // TODO: prevent panics on large and negative disciminants\n-                if false {\n+                if should_codegen(fx.tcx) {\n                     let discr = trans_operand(fx, discr).load_value(fx);\n                     let mut jt_data = JumpTableData::new();\n                     for (i, value) in values.iter().enumerate() {\n@@ -382,13 +376,23 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, cur_ebb: Ebb, stmt: &\n                         | (TypeVariants::TyUint(_), TypeVariants::TyInt(_))\n                         | (TypeVariants::TyUint(_), TypeVariants::TyUint(_)) => {\n                             let from = operand.load_value(fx);\n-                            let res = crate::common::cton_intcast(fx, from, fx.cton_type(to_ty).unwrap(), false);\n+                            let res = crate::common::cton_intcast(\n+                                fx,\n+                                from,\n+                                fx.cton_type(to_ty).unwrap(),\n+                                false,\n+                            );\n                             lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n                         }\n                         (TypeVariants::TyInt(_), TypeVariants::TyInt(_))\n                         | (TypeVariants::TyInt(_), TypeVariants::TyUint(_)) => {\n                             let from = operand.load_value(fx);\n-                            let res = crate::common::cton_intcast(fx, from, fx.cton_type(to_ty).unwrap(), true);\n+                            let res = crate::common::cton_intcast(\n+                                fx,\n+                                from,\n+                                fx.cton_type(to_ty).unwrap(),\n+                                true,\n+                            );\n                             lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n                         }\n                         (TypeVariants::TyFloat(from_flt), TypeVariants::TyFloat(to_flt)) => {\n@@ -552,7 +556,8 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n                     lldiscr,\n                     *niche_variants.end() as u64 as i64,\n                 );\n-                let if_true = cton_intcast(fx, lldiscr, fx.cton_type(dest_layout.ty).unwrap(), false);\n+                let if_true =\n+                    cton_intcast(fx, lldiscr, fx.cton_type(dest_layout.ty).unwrap(), false);\n                 let if_false = fx\n                     .bcx\n                     .ins()"}, {"sha": "b89586c9415a18a831fd78940f1bfff621cbfd7a", "filename": "src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0978710ffdddd37b647d65b014d6f348d6fd96e8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978710ffdddd37b647d65b014d6f348d6fd96e8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0978710ffdddd37b647d65b014d6f348d6fd96e8", "patch": "@@ -89,6 +89,11 @@ mod prelude {\n     pub use crate::common::*;\n \n     pub use crate::CodegenCx;\n+\n+    pub fn should_codegen(tcx: TyCtxt) -> bool {\n+        ::std::env::var(\"SHOULD_CODEGEN\").is_ok()\n+            || tcx.sess.crate_types.get().contains(&CrateType::Executable)\n+    }\n }\n \n use crate::prelude::*;\n@@ -317,6 +322,12 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             tcx.sess.warn(&format!(\"main returned {}\", res));\n \n             module.finish();\n+        } else if should_codegen(tcx) {\n+            for func_id in defined_functions {\n+                module.finalize_function(func_id);\n+            }\n+\n+            tcx.sess.warn(\"Finalized everything\");\n         }\n \n         let mut translated_module: Module<FaerieBackend> = Module::new("}]}