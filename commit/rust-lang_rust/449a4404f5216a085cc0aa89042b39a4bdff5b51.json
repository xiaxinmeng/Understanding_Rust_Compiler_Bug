{"sha": "449a4404f5216a085cc0aa89042b39a4bdff5b51", "node_id": "C_kwDOAAsO6NoAKDQ0OWE0NDA0ZjUyMTZhMDg1Y2MwYWE4OTA0MmIzOWE0YmRmZjViNTE", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-10-23T17:12:23Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-10-23T17:30:35Z"}, "message": "test attr: point at return type if Termination bound unsatisfied", "tree": {"sha": "d4627c573bf77fff524ec0b779a1cdf56ac229b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4627c573bf77fff524ec0b779a1cdf56ac229b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/449a4404f5216a085cc0aa89042b39a4bdff5b51", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE/neO4LLiv/pSFQJbzXXjHOLP19kFAmNVekYACgkQzXXjHOLP\n19kiURAAiyy9v3W55bXxFVRs7F0cuCUIGXy4oIEOsKN+7nTI3kmzsbxoFteMorqL\nirjpcTwUnoyOkHHuQw2UuDN8pBO9t+TKeLuBrsrahX5vQqEki9TcYrjxQ0gDXkbH\nLC+IMA0IepL0alVTJhUNUW818n8IZ/SqXvjc29uwgrK3KANAEBMhVzHpVDq2dKYN\n9sEoYQcGWnmjn/R/CxCzCXhOrzj8tI5dyj1Nlib/TzZxkIn0HN07naYVICQNmdCK\nrHa8aQXdWRGlEHZd6ifhE12o6MvjN6md029QkaRA0ms8O+N/Rs8VD4LUDZfd2BUu\nMr2n0wtNzr/DfPsqEzI0V99gyNYSmpuCCiAzhp5YLoJ16oPtpm4/clrAxIEaA0cw\ngx33GCcz9n7GS+OsBN64JiAufWxLhwd0SfifL0ReyVW0lmlU5LrEV1bfrks0WgCR\nabVvuBEt+Bac0XJoHyHSJtuaTZ/XWW6vT0h2KCwh1HFQJ32ig0d776GL4+yZPhc8\npnolYiJYX7JMsUCOpMfzo2FYn2/U4WvBWVcOFZdDIVsZfR/qVdDNS7A/aE8Nj244\nVo41Sukt2RO3C6cv60WjOAkl35CUBz9wvw6Wv42kmecGu39K2ovvpzS+8MpnlMsq\nOfOhYtpXfuZjfhRfJH7+pS4ZuUSQZyrhRBIIPPexmkv33+/krfs=\n=dFoW\n-----END PGP SIGNATURE-----", "payload": "tree d4627c573bf77fff524ec0b779a1cdf56ac229b1\nparent 9be2f35a4c1ed1b04aa4a6945b64763f599259ff\nauthor Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net> 1666545143 +0200\ncommitter Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net> 1666546235 +0200\n\ntest attr: point at return type if Termination bound unsatisfied\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/449a4404f5216a085cc0aa89042b39a4bdff5b51", "html_url": "https://github.com/rust-lang/rust/commit/449a4404f5216a085cc0aa89042b39a4bdff5b51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/449a4404f5216a085cc0aa89042b39a4bdff5b51/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9be2f35a4c1ed1b04aa4a6945b64763f599259ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be2f35a4c1ed1b04aa4a6945b64763f599259ff", "html_url": "https://github.com/rust-lang/rust/commit/9be2f35a4c1ed1b04aa4a6945b64763f599259ff"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "ad4c844307106005aed7ac0984b0ccbf3df5a4e1", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/449a4404f5216a085cc0aa89042b39a4bdff5b51/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a4404f5216a085cc0aa89042b39a4bdff5b51/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=449a4404f5216a085cc0aa89042b39a4bdff5b51", "patch": "@@ -103,7 +103,7 @@ pub fn expand_test_or_bench(\n     };\n \n     // Note: non-associated fn items are already handled by `expand_test_or_bench`\n-    if !matches!(item.kind, ast::ItemKind::Fn(_)) {\n+    let ast::ItemKind::Fn(fn_) = &item.kind else {\n         let diag = &cx.sess.parse_sess.span_diagnostic;\n         let msg = \"the `#[test]` attribute may only be used on a non-associated function\";\n         let mut err = match item.kind {\n@@ -121,7 +121,7 @@ pub fn expand_test_or_bench(\n             .emit();\n \n         return vec![Annotatable::Item(item)];\n-    }\n+    };\n \n     // has_*_signature will report any errors in the type so compilation\n     // will fail. We shouldn't try to expand in this case because the errors\n@@ -132,12 +132,14 @@ pub fn expand_test_or_bench(\n         return vec![Annotatable::Item(item)];\n     }\n \n-    let (sp, attr_sp) = (cx.with_def_site_ctxt(item.span), cx.with_def_site_ctxt(attr_sp));\n+    let sp = cx.with_def_site_ctxt(item.span);\n+    let ret_ty_sp = cx.with_def_site_ctxt(fn_.sig.decl.output.span());\n+    let attr_sp = cx.with_def_site_ctxt(attr_sp);\n \n     let test_id = Ident::new(sym::test, attr_sp);\n \n     // creates test::$name\n-    let test_path = |name| cx.path(sp, vec![test_id, Ident::from_str_and_span(name, sp)]);\n+    let test_path = |name| cx.path(ret_ty_sp, vec![test_id, Ident::from_str_and_span(name, sp)]);\n \n     // creates test::ShouldPanic::$name\n     let should_panic_path = |name| {\n@@ -183,7 +185,7 @@ pub fn expand_test_or_bench(\n                         vec![\n                             // super::$test_fn(b)\n                             cx.expr_call(\n-                                sp,\n+                                ret_ty_sp,\n                                 cx.expr_path(cx.path(sp, vec![item.ident])),\n                                 vec![cx.expr_ident(sp, b)],\n                             ),\n@@ -207,7 +209,11 @@ pub fn expand_test_or_bench(\n                         cx.expr_path(test_path(\"assert_test_result\")),\n                         vec![\n                             // $test_fn()\n-                            cx.expr_call(sp, cx.expr_path(cx.path(sp, vec![item.ident])), vec![]), // )\n+                            cx.expr_call(\n+                                ret_ty_sp,\n+                                cx.expr_path(cx.path(sp, vec![item.ident])),\n+                                vec![],\n+                            ), // )\n                         ],\n                     ), // }\n                 ), // )"}, {"sha": "9577952119adb2c480bc9b2caf5731574304da51", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/449a4404f5216a085cc0aa89042b39a4bdff5b51/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/449a4404f5216a085cc0aa89042b39a4bdff5b51/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=449a4404f5216a085cc0aa89042b39a4bdff5b51", "patch": "@@ -1,12 +1,10 @@\n error[E0277]: the trait bound `f32: Termination` is not satisfied\n-  --> $DIR/termination-trait-test-wrong-type.rs:6:1\n+  --> $DIR/termination-trait-test-wrong-type.rs:6:31\n    |\n-LL |   #[test]\n-   |   ------- in this procedural macro expansion\n-LL | / fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n-LL | |     \"0\".parse()\n-LL | | }\n-   | |_^ the trait `Termination` is not implemented for `f32`\n+LL | #[test]\n+   | ------- in this procedural macro expansion\n+LL | fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Termination` is not implemented for `f32`\n    |\n    = note: required for `Result<f32, ParseFloatError>` to implement `Termination`\n note: required by a bound in `assert_test_result`"}]}