{"sha": "70eca998d73c52f7b5f2d1528e1501ec4f4f1162", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZWNhOTk4ZDczYzUyZjdiNWYyZDE1MjhlMTUwMWVjNGY0ZjExNjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-24T02:52:56Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-31T16:57:17Z"}, "message": "nix `lower_label` identity function.", "tree": {"sha": "1728cd2d8594f76ed72a74adac06d11787db9a35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1728cd2d8594f76ed72a74adac06d11787db9a35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70eca998d73c52f7b5f2d1528e1501ec4f4f1162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70eca998d73c52f7b5f2d1528e1501ec4f4f1162", "html_url": "https://github.com/rust-lang/rust/commit/70eca998d73c52f7b5f2d1528e1501ec4f4f1162", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70eca998d73c52f7b5f2d1528e1501ec4f4f1162/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52179c56be0df07d817a143577d3e082e0a7cfa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/52179c56be0df07d817a143577d3e082e0a7cfa5", "html_url": "https://github.com/rust-lang/rust/commit/52179c56be0df07d817a143577d3e082e0a7cfa5"}], "stats": {"total": 28, "additions": 7, "deletions": 21}, "files": [{"sha": "a3e2bc04bd5fbbe270f51875c6026e61aef20b5b", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/70eca998d73c52f7b5f2d1528e1501ec4f4f1162/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70eca998d73c52f7b5f2d1528e1501ec4f4f1162/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=70eca998d73c52f7b5f2d1528e1501ec4f4f1162", "patch": "@@ -82,11 +82,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 this.lower_expr_while_in_loop_scope(e.span, cond, body, opt_label)\n             }),\n             ExprKind::Loop(ref body, opt_label) => self.with_loop_scope(e.id, |this| {\n-                hir::ExprKind::Loop(\n-                    this.lower_block(body, false),\n-                    this.lower_label(opt_label),\n-                    hir::LoopSource::Loop,\n-                )\n+                hir::ExprKind::Loop(this.lower_block(body, false), opt_label, hir::LoopSource::Loop)\n             }),\n             ExprKind::TryBlock(ref body) => self.lower_expr_try_block(body),\n             ExprKind::Match(ref expr, ref arms) => hir::ExprKind::Match(\n@@ -123,10 +119,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     self.lower_expr_closure(capture_clause, movability, decl, body, fn_decl_span)\n                 }\n             }\n-            ExprKind::Block(ref blk, opt_label) => hir::ExprKind::Block(\n-                self.lower_block(blk, opt_label.is_some()),\n-                self.lower_label(opt_label),\n-            ),\n+            ExprKind::Block(ref blk, opt_label) => {\n+                hir::ExprKind::Block(self.lower_block(blk, opt_label.is_some()), opt_label)\n+            }\n             ExprKind::Assign(ref el, ref er, span) => {\n                 hir::ExprKind::Assign(self.lower_expr(el), self.lower_expr(er), span)\n             }\n@@ -407,11 +402,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         );\n \n         // `[opt_ident]: loop { ... }`\n-        hir::ExprKind::Loop(\n-            self.block_expr(self.arena.alloc(match_expr)),\n-            self.lower_label(opt_label),\n-            source,\n-        )\n+        hir::ExprKind::Loop(self.block_expr(self.arena.alloc(match_expr)), opt_label, source)\n     }\n \n     /// Desugar `try { <stmts>; <expr> }` into `{ <stmts>; ::std::ops::Try::from_ok(<expr>) }`,\n@@ -836,10 +827,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    fn lower_label(&mut self, label: Option<Label>) -> Option<Label> {\n-        label.map(|label| Label { ident: label.ident })\n-    }\n-\n     fn lower_loop_destination(&mut self, destination: Option<(NodeId, Label)>) -> hir::Destination {\n         let target_id = match destination {\n             Some((id, _)) => {\n@@ -857,7 +844,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n                 .into(),\n         };\n-        hir::Destination { label: self.lower_label(destination.map(|(_, label)| label)), target_id }\n+        hir::Destination { label: destination.map(|(_, label)| label), target_id }\n     }\n \n     fn lower_jump_destination(&mut self, id: NodeId, opt_label: Option<Label>) -> hir::Destination {\n@@ -1100,8 +1087,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         );\n \n         // `[opt_ident]: loop { ... }`\n-        let kind =\n-            hir::ExprKind::Loop(loop_block, self.lower_label(opt_label), hir::LoopSource::ForLoop);\n+        let kind = hir::ExprKind::Loop(loop_block, opt_label, hir::LoopSource::ForLoop);\n         let loop_expr = self.arena.alloc(hir::Expr {\n             hir_id: self.lower_node_id(e.id),\n             kind,"}]}