{"sha": "84fc5516648e34f15d17b2ca0b892adb3743a5c0", "node_id": "C_kwDOAAsO6NoAKDg0ZmM1NTE2NjQ4ZTM0ZjE1ZDE3YjJjYTBiODkyYWRiMzc0M2E1YzA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-06-30T14:23:31Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-06-30T14:23:31Z"}, "message": "Make `evaluate_obligation` not succeed unconditionally if it registered new hidden types for opaque types", "tree": {"sha": "a37e079c8b631d1c056be3e9a617cd9f15f3519b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a37e079c8b631d1c056be3e9a617cd9f15f3519b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84fc5516648e34f15d17b2ca0b892adb3743a5c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84fc5516648e34f15d17b2ca0b892adb3743a5c0", "html_url": "https://github.com/rust-lang/rust/commit/84fc5516648e34f15d17b2ca0b892adb3743a5c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84fc5516648e34f15d17b2ca0b892adb3743a5c0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ade2a96ff1e2c3d434f57b8fa07da66969bceaae", "url": "https://api.github.com/repos/rust-lang/rust/commits/ade2a96ff1e2c3d434f57b8fa07da66969bceaae", "html_url": "https://github.com/rust-lang/rust/commit/ade2a96ff1e2c3d434f57b8fa07da66969bceaae"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "3ff14a10b9044569d44160b3c8f08d76595dcb9e", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84fc5516648e34f15d17b2ca0b892adb3743a5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fc5516648e34f15d17b2ca0b892adb3743a5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=84fc5516648e34f15d17b2ca0b892adb3743a5c0", "patch": "@@ -891,6 +891,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)\n     }\n \n+    pub fn opaque_types_added_in_snapshot(&self, snapshot: &CombinedSnapshot<'a, 'tcx>) -> bool {\n+        self.inner.borrow().undo_log.opaque_types_in_snapshot(&snapshot.undo_snapshot)\n+    }\n+\n     pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {\n         self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);\n     }"}, {"sha": "74a26ebc39f817c0673c1e86e9595312c4d9d8b1", "filename": "compiler/rustc_infer/src/infer/undo_log.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84fc5516648e34f15d17b2ca0b892adb3743a5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fc5516648e34f15d17b2ca0b892adb3743a5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs?ref=84fc5516648e34f15d17b2ca0b892adb3743a5c0", "patch": "@@ -185,6 +185,10 @@ impl<'tcx> InferCtxtUndoLogs<'tcx> {\n         })\n     }\n \n+    pub(crate) fn opaque_types_in_snapshot(&self, s: &Snapshot<'tcx>) -> bool {\n+        self.logs[s.undo_len..].iter().any(|log| matches!(log, UndoLog::OpaqueTypes(..)))\n+    }\n+\n     pub(crate) fn region_constraints(\n         &self,\n     ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {"}, {"sha": "025059fcbcfb82d71c23cfd39a2b46ec9700e35a", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/84fc5516648e34f15d17b2ca0b892adb3743a5c0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fc5516648e34f15d17b2ca0b892adb3743a5c0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=84fc5516648e34f15d17b2ca0b892adb3743a5c0", "patch": "@@ -174,6 +174,10 @@ pub enum SelectionCandidate<'tcx> {\n pub enum EvaluationResult {\n     /// Evaluation successful.\n     EvaluatedToOk,\n+    /// Evaluation successful, but need to rerun because opaque types got\n+    /// hidden types assigned without it being known whether the opaque types\n+    /// are within their defining scope\n+    EvaluatedToOkModuloOpaqueTypes,\n     /// Evaluation successful, but there were unevaluated region obligations.\n     EvaluatedToOkModuloRegions,\n     /// Evaluation is known to be ambiguous -- it *might* hold for some\n@@ -252,9 +256,11 @@ impl EvaluationResult {\n \n     pub fn may_apply(self) -> bool {\n         match self {\n-            EvaluatedToOk | EvaluatedToOkModuloRegions | EvaluatedToAmbig | EvaluatedToUnknown => {\n-                true\n-            }\n+            EvaluatedToOkModuloOpaqueTypes\n+            | EvaluatedToOk\n+            | EvaluatedToOkModuloRegions\n+            | EvaluatedToAmbig\n+            | EvaluatedToUnknown => true,\n \n             EvaluatedToErr | EvaluatedToRecur => false,\n         }\n@@ -264,7 +270,11 @@ impl EvaluationResult {\n         match self {\n             EvaluatedToUnknown | EvaluatedToRecur => true,\n \n-            EvaluatedToOk | EvaluatedToOkModuloRegions | EvaluatedToAmbig | EvaluatedToErr => false,\n+            EvaluatedToOkModuloOpaqueTypes\n+            | EvaluatedToOk\n+            | EvaluatedToOkModuloRegions\n+            | EvaluatedToAmbig\n+            | EvaluatedToErr => false,\n         }\n     }\n }"}, {"sha": "ea6bb8a7abd4b8941a7d57c4dedae0fbb093e8a7", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/84fc5516648e34f15d17b2ca0b892adb3743a5c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fc5516648e34f15d17b2ca0b892adb3743a5c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=84fc5516648e34f15d17b2ca0b892adb3743a5c0", "patch": "@@ -207,11 +207,6 @@ impl FlagComputation {\n \n             &ty::FnDef(_, substs) => {\n                 self.add_substs(substs);\n-                // HACK(#98608, oli-obk): Function items with opaque types in their signature will\n-                // end up not having the HAS_TY_OPAQUE flag set, causing `evaluate_obligation` to\n-                // optimistically assume the function item matches any signature. See documentation\n-                // on `HAS_FREE_LOCAL_NAMES` for details.\n-                self.add_flags(TypeFlags::HAS_TY_OPAQUE);\n             }\n \n             &ty::FnPtr(fn_sig) => self.bound_computation(fn_sig, |computation, fn_sig| {"}, {"sha": "45f7a890e01a072f04e1fad339dbf534437161bf", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84fc5516648e34f15d17b2ca0b892adb3743a5c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fc5516648e34f15d17b2ca0b892adb3743a5c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=84fc5516648e34f15d17b2ca0b892adb3743a5c0", "patch": "@@ -777,6 +777,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             Ok(\n                 EvaluationResult::EvaluatedToOk\n                 | EvaluationResult::EvaluatedToOkModuloRegions\n+                | EvaluationResult::EvaluatedToOkModuloOpaqueTypes\n                 | EvaluationResult::EvaluatedToAmbig,\n             ) => {}\n             _ => return false,"}, {"sha": "32856915662098ec9912684d32e669b49874ee5e", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84fc5516648e34f15d17b2ca0b892adb3743a5c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fc5516648e34f15d17b2ca0b892adb3743a5c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=84fc5516648e34f15d17b2ca0b892adb3743a5c0", "patch": "@@ -394,6 +394,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Err(_) => return Ok(EvaluatedToErr),\n             }\n \n+            if self.infcx.opaque_types_added_in_snapshot(snapshot) {\n+                return Ok(result.max(EvaluatedToOkModuloOpaqueTypes));\n+            }\n+\n             match self.infcx.region_constraints_added_in_snapshot(snapshot) {\n                 None => Ok(result),\n                 Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),"}, {"sha": "6c838f410036ab33db6ef0405a437e4173acdc84", "filename": "src/test/ui/type-alias-impl-trait/issue-53398-cyclic-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84fc5516648e34f15d17b2ca0b892adb3743a5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fc5516648e34f15d17b2ca0b892adb3743a5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.rs?ref=84fc5516648e34f15d17b2ca0b892adb3743a5c0", "patch": "@@ -3,7 +3,7 @@\n type Foo = impl Fn() -> Foo;\n \n fn foo() -> Foo {\n-    foo //~ ERROR: overflow evaluating the requirement `<fn() -> Foo {foo} as FnOnce<()>>::Output == fn() -> Foo {foo}`\n+    foo //~ ERROR: overflow evaluating the requirement `fn() -> Foo {foo}: Sized`\n }\n \n fn main() {}"}, {"sha": "a9c2c18630c01cd478517d80c381b9df68bddf4e", "filename": "src/test/ui/type-alias-impl-trait/issue-53398-cyclic-types.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84fc5516648e34f15d17b2ca0b892adb3743a5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84fc5516648e34f15d17b2ca0b892adb3743a5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr?ref=84fc5516648e34f15d17b2ca0b892adb3743a5c0", "patch": "@@ -1,8 +1,10 @@\n-error[E0275]: overflow evaluating the requirement `<fn() -> Foo {foo} as FnOnce<()>>::Output == fn() -> Foo {foo}`\n+error[E0275]: overflow evaluating the requirement `fn() -> Foo {foo}: Sized`\n   --> $DIR/issue-53398-cyclic-types.rs:6:5\n    |\n LL |     foo\n    |     ^^^\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_53398_cyclic_types`)\n \n error: aborting due to previous error\n "}]}