{"sha": "8035796b9aabf1aa2a711694e40f00fe8a822f40", "node_id": "C_kwDOAAsO6NoAKDgwMzU3OTZiOWFhYmYxYWEyYTcxMTY5NGU0MGYwMGZlOGE4MjJmNDA", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-03-26T22:23:32Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-03-26T22:23:54Z"}, "message": "Stablize `const_extern_fn` for \"Rust\" and \"C\"\n\nAll other ABIs are left unstable for now.\n\ncc #64926", "tree": {"sha": "d823ec54314b617293efb6654f9b240f305da8f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d823ec54314b617293efb6654f9b240f305da8f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8035796b9aabf1aa2a711694e40f00fe8a822f40", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmI/kp4ACgkQtAh+UQ6Y\nsWQ2RBAAq4KzKd+Nt1+6fDYh3vmNauB72f7Zt9XJTrgrr3R1wekjPArPrduw7U9q\nWfnB8yb4pEVvIMTUDssflCDRxaXabqd/0G+AJEcCBmm+kpSdazaUUhEMZWnkQyCo\no2S/v/RpxfIAou6XRBjMQiN0lKdQEfiBRF0s7vDgkws3ft2ceMeE3nsO6Z7zsw1M\nBDZ4vpk0TX3vhC2LrgjsTHGIjQ6ldh5y9Q0nuXPMBO314X05hIKBAq4I5/c0twsP\nSh5SEsKr81tLv8cMLr+jn5iJi/FGozYzWzhoo15L1SddBljmU5ksK4clkKuXdlOq\nf4IElVHDqugLPANC9dzmi5MdetdBQ+7tfVaY0Kofi8GZfaoasdoDksd77ajR6QQn\nubbJAzpKbyiOr6Au3o5981IFJm4fFL7fWWEjBgGPd9lBwd+9dlXxAIF5OwLH/Jts\nqsbSJGm6mVmDg3BuOwvXsb0zrkkJwPcoGN+6kdEiyZLnrqMlWLK+gLO8trLzjKwp\nzwfuNnCBIe+7d0hC3qjUFA+WZsuUThWM4A5l2gJx6lKhfp4tKmEDaIzoyQMWgy4r\n4mQKycWjKwL97E8U68KhUvQFpamkK2CUwrAxY8fOHvGdS0VNsqw+E0S+Sgwn0r5f\nViE0u0+lPpN807GJIXqZGRxS2n5E4LRxadXBP4v1+GA7RJBwzac=\n=kBQe\n-----END PGP SIGNATURE-----", "payload": "tree d823ec54314b617293efb6654f9b240f305da8f4\nparent 1fca19c8ca4ae5e71e8b17a82c3acfeb78c48891\nauthor Aaron Hill <aa1ronham@gmail.com> 1648333412 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1648333434 -0400\n\nStablize `const_extern_fn` for \"Rust\" and \"C\"\n\nAll other ABIs are left unstable for now.\n\ncc #64926\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8035796b9aabf1aa2a711694e40f00fe8a822f40", "html_url": "https://github.com/rust-lang/rust/commit/8035796b9aabf1aa2a711694e40f00fe8a822f40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8035796b9aabf1aa2a711694e40f00fe8a822f40/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fca19c8ca4ae5e71e8b17a82c3acfeb78c48891", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fca19c8ca4ae5e71e8b17a82c3acfeb78c48891", "html_url": "https://github.com/rust-lang/rust/commit/1fca19c8ca4ae5e71e8b17a82c3acfeb78c48891"}], "stats": {"total": 111, "additions": 42, "deletions": 69}, "files": [{"sha": "5b2716b2dd088d405e9fd1b46356d3d488291968", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8035796b9aabf1aa2a711694e40f00fe8a822f40/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8035796b9aabf1aa2a711694e40f00fe8a822f40/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=8035796b9aabf1aa2a711694e40f00fe8a822f40", "patch": "@@ -58,9 +58,22 @@ struct PostExpansionVisitor<'a> {\n }\n \n impl<'a> PostExpansionVisitor<'a> {\n-    fn check_abi(&self, abi: ast::StrLit) {\n+    fn check_abi(&self, abi: ast::StrLit, constness: ast::Const) {\n         let ast::StrLit { symbol_unescaped, span, .. } = abi;\n \n+        if let ast::Const::Yes(_) = constness {\n+            match symbol_unescaped.as_str() {\n+                // Stable\n+                \"Rust\" | \"C\" => {}\n+                abi => gate_feature_post!(\n+                    &self,\n+                    const_extern_fn,\n+                    span,\n+                    &format!(\"`{}` as a `const fn` ABI is unstable\", abi)\n+                ),\n+            }\n+        }\n+\n         match symbol_unescaped.as_str() {\n             // Stable\n             \"Rust\" | \"C\" | \"cdecl\" | \"stdcall\" | \"fastcall\" | \"aapcs\" | \"win64\" | \"sysv64\"\n@@ -261,9 +274,9 @@ impl<'a> PostExpansionVisitor<'a> {\n         }\n     }\n \n-    fn check_extern(&self, ext: ast::Extern) {\n+    fn check_extern(&self, ext: ast::Extern, constness: ast::Const) {\n         if let ast::Extern::Explicit(abi) = ext {\n-            self.check_abi(abi);\n+            self.check_abi(abi, constness);\n         }\n     }\n \n@@ -445,7 +458,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         match i.kind {\n             ast::ItemKind::ForeignMod(ref foreign_module) => {\n                 if let Some(abi) = foreign_module.abi {\n-                    self.check_abi(abi);\n+                    self.check_abi(abi, ast::Const::No);\n                 }\n             }\n \n@@ -568,7 +581,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_ty(&mut self, ty: &'a ast::Ty) {\n         match ty.kind {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n-                self.check_extern(bare_fn_ty.ext);\n+                // Function pointers cannot be `const`\n+                self.check_extern(bare_fn_ty.ext, ast::Const::No);\n             }\n             ast::TyKind::Never => {\n                 gate_feature_post!(&self, never_type, ty.span, \"the `!` type is experimental\");\n@@ -668,18 +682,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_fn(&mut self, fn_kind: FnKind<'a>, span: Span, _: NodeId) {\n         if let Some(header) = fn_kind.header() {\n             // Stability of const fn methods are covered in `visit_assoc_item` below.\n-            self.check_extern(header.ext);\n-\n-            if let (ast::Const::Yes(_), ast::Extern::Implicit)\n-            | (ast::Const::Yes(_), ast::Extern::Explicit(_)) = (header.constness, header.ext)\n-            {\n-                gate_feature_post!(\n-                    &self,\n-                    const_extern_fn,\n-                    span,\n-                    \"`const extern fn` definitions are unstable\"\n-                );\n-            }\n+            self.check_extern(header.ext, header.constness);\n         }\n \n         if fn_kind.ctxt() != Some(FnCtxt::Foreign) && fn_kind.decl().c_variadic() {"}, {"sha": "bb387064e27fe0e583c16f63a565cf8e96d94383", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8035796b9aabf1aa2a711694e40f00fe8a822f40/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8035796b9aabf1aa2a711694e40f00fe8a822f40/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=8035796b9aabf1aa2a711694e40f00fe8a822f40", "patch": "@@ -523,6 +523,9 @@ impl<'a> Parser<'a> {\n         let decl = self.parse_fn_decl(|_| false, AllowPlus::No, recover_return_sign)?;\n         let whole_span = lo.to(self.prev_token.span);\n         if let ast::Const::Yes(span) = constness {\n+            // If we ever start to allow `const fn()`, then update\n+            // feature gating for `#![feature(const_extern_fn)]` to\n+            // cover it.\n             self.error_fn_ptr_bad_qualifier(whole_span, span, \"const\");\n         }\n         if let ast::Async::Yes { span, .. } = asyncness {"}, {"sha": "f7bed91b03787bd899c01c2189ae16f28f7e31e1", "filename": "src/test/ui/consts/const-extern-fn/feature-gate-const_extern_fn.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8035796b9aabf1aa2a711694e40f00fe8a822f40/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8035796b9aabf1aa2a711694e40f00fe8a822f40/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs?ref=8035796b9aabf1aa2a711694e40f00fe8a822f40", "patch": "@@ -1,10 +1,13 @@\n-// Check that `const extern fn` and `const unsafe extern fn` are feature-gated.\n+// Check that `const extern fn` and `const unsafe extern fn` are feature-gated\n+// for certain ABIs.\n \n-const extern fn foo1() {} //~ ERROR `const extern fn` definitions are unstable\n-const extern \"C\" fn foo2() {} //~ ERROR `const extern fn` definitions are unstable\n-const extern \"Rust\" fn foo3() {} //~ ERROR `const extern fn` definitions are unstable\n-const unsafe extern fn bar1() {} //~ ERROR `const extern fn` definitions are unstable\n-const unsafe extern \"C\" fn bar2() {} //~ ERROR `const extern fn` definitions are unstable\n-const unsafe extern \"Rust\" fn bar3() {} //~ ERROR `const extern fn` definitions are unstable\n+const extern fn foo1() {}\n+const extern \"C\" fn foo2() {}\n+const extern \"Rust\" fn foo3() {}\n+const extern \"cdecl\" fn foo4() {} //~ ERROR `cdecl` as a `const fn` ABI is unstable\n+const unsafe extern fn bar1() {}\n+const unsafe extern \"C\" fn bar2() {}\n+const unsafe extern \"Rust\" fn bar3() {}\n+const unsafe extern \"cdecl\" fn bar4() {} //~ ERROR `cdecl` as a `const fn` ABI is unstable\n \n fn main() {}"}, {"sha": "f8c3107bd221aa40b2f56682e3a871748b60ecb0", "filename": "src/test/ui/consts/const-extern-fn/feature-gate-const_extern_fn.stderr", "status": "modified", "additions": 9, "deletions": 45, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8035796b9aabf1aa2a711694e40f00fe8a822f40/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8035796b9aabf1aa2a711694e40f00fe8a822f40/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr?ref=8035796b9aabf1aa2a711694e40f00fe8a822f40", "patch": "@@ -1,57 +1,21 @@\n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:3:1\n+error[E0658]: `cdecl` as a `const fn` ABI is unstable\n+  --> $DIR/feature-gate-const_extern_fn.rs:7:14\n    |\n-LL | const extern fn foo1() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const extern \"cdecl\" fn foo4() {}\n+   |              ^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:4:1\n+error[E0658]: `cdecl` as a `const fn` ABI is unstable\n+  --> $DIR/feature-gate-const_extern_fn.rs:11:21\n    |\n-LL | const extern \"C\" fn foo2() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const unsafe extern \"cdecl\" fn bar4() {}\n+   |                     ^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:5:1\n-   |\n-LL | const extern \"Rust\" fn foo3() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n-   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n-\n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:6:1\n-   |\n-LL | const unsafe extern fn bar1() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n-   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n-\n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:7:1\n-   |\n-LL | const unsafe extern \"C\" fn bar2() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n-   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n-\n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:8:1\n-   |\n-LL | const unsafe extern \"Rust\" fn bar3() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n-   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}