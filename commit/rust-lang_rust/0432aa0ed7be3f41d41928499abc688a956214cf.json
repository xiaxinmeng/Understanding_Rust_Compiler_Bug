{"sha": "0432aa0ed7be3f41d41928499abc688a956214cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MzJhYTBlZDdiZTNmNDFkNDE5Mjg0OTlhYmM2ODhhOTU2MjE0Y2Y=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-26T19:09:54Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-27T12:50:22Z"}, "message": "Publish diagnostics for macro expansion errors", "tree": {"sha": "64df76e5182412d9a95bc5e63ef3b1db03a5d430", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64df76e5182412d9a95bc5e63ef3b1db03a5d430"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0432aa0ed7be3f41d41928499abc688a956214cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0432aa0ed7be3f41d41928499abc688a956214cf", "html_url": "https://github.com/rust-lang/rust/commit/0432aa0ed7be3f41d41928499abc688a956214cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0432aa0ed7be3f41d41928499abc688a956214cf/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b2652097183b0a285891c02eea8a7d2af03e4b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b2652097183b0a285891c02eea8a7d2af03e4b3", "html_url": "https://github.com/rust-lang/rust/commit/1b2652097183b0a285891c02eea8a7d2af03e4b3"}], "stats": {"total": 175, "additions": 168, "deletions": 7}, "files": [{"sha": "eaf1a14ec348020f712a09082153d1cee8833c12", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0432aa0ed7be3f41d41928499abc688a956214cf/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0432aa0ed7be3f41d41928499abc688a956214cf/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=0432aa0ed7be3f41d41928499abc688a956214cf", "patch": "@@ -1,5 +1,5 @@\n //! FIXME: write short doc here\n-pub use hir_def::diagnostics::{InactiveCode, UnresolvedModule};\n+pub use hir_def::diagnostics::{InactiveCode, UnresolvedModule, UnresolvedProcMacro};\n pub use hir_expand::diagnostics::{\n     Diagnostic, DiagnosticCode, DiagnosticSink, DiagnosticSinkBuilder,\n };"}, {"sha": "dd06e3f2005ced453791c793bea24df4b77aadf3", "filename": "crates/hir_def/src/diagnostics.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0432aa0ed7be3f41d41928499abc688a956214cf/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0432aa0ed7be3f41d41928499abc688a956214cf/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs?ref=0432aa0ed7be3f41d41928499abc688a956214cf", "patch": "@@ -127,3 +127,65 @@ impl Diagnostic for InactiveCode {\n         self\n     }\n }\n+\n+// Diagnostic: unresolved-proc-macro\n+//\n+// This diagnostic is shown when a procedural macro can not be found. This usually means that\n+// procedural macro support is simply disabled (and hence is only a weak hint instead of an error),\n+// but can also indicate project setup problems.\n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct UnresolvedProcMacro {\n+    pub file: HirFileId,\n+    pub node: SyntaxNodePtr,\n+    pub macro_name: Option<String>,\n+}\n+\n+impl Diagnostic for UnresolvedProcMacro {\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"unresolved-proc-macro\")\n+    }\n+\n+    fn message(&self) -> String {\n+        match &self.macro_name {\n+            Some(name) => format!(\"proc macro `{}` not expanded\", name),\n+            None => \"proc macro not expanded\".to_string(),\n+        }\n+    }\n+\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile::new(self.file, self.node.clone())\n+    }\n+\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}\n+\n+// Diagnostic: macro-error\n+//\n+// This diagnostic is shown for macro expansion errors.\n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct MacroError {\n+    pub file: HirFileId,\n+    pub node: SyntaxNodePtr,\n+    pub message: String,\n+}\n+\n+impl Diagnostic for MacroError {\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"macro-error\")\n+    }\n+    fn message(&self) -> String {\n+        self.message.clone()\n+    }\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile::new(self.file, self.node.clone())\n+    }\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+    fn is_experimental(&self) -> bool {\n+        // Newly added and not very well-tested, might contain false positives.\n+        true\n+    }\n+}"}, {"sha": "3d65a46bf792ae7c1c2b7c4bc9105419a1a36f48", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0432aa0ed7be3f41d41928499abc688a956214cf/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0432aa0ed7be3f41d41928499abc688a956214cf/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=0432aa0ed7be3f41d41928499abc688a956214cf", "patch": "@@ -286,8 +286,8 @@ mod diagnostics {\n     use cfg::{CfgExpr, CfgOptions};\n     use hir_expand::diagnostics::DiagnosticSink;\n     use hir_expand::hygiene::Hygiene;\n-    use hir_expand::InFile;\n-    use syntax::{ast, AstPtr};\n+    use hir_expand::{InFile, MacroCallKind};\n+    use syntax::{ast, AstPtr, SyntaxNodePtr};\n \n     use crate::path::ModPath;\n     use crate::{db::DefDatabase, diagnostics::*, nameres::LocalModuleId, AstId};\n@@ -301,6 +301,10 @@ mod diagnostics {\n         UnresolvedImport { ast: AstId<ast::Use>, index: usize },\n \n         UnconfiguredCode { ast: AstId<ast::Item>, cfg: CfgExpr, opts: CfgOptions },\n+\n+        UnresolvedProcMacro { ast: MacroCallKind },\n+\n+        MacroError { ast: MacroCallKind, message: String },\n     }\n \n     #[derive(Debug, PartialEq, Eq)]\n@@ -348,6 +352,18 @@ mod diagnostics {\n             Self { in_module: container, kind: DiagnosticKind::UnconfiguredCode { ast, cfg, opts } }\n         }\n \n+        pub(super) fn unresolved_proc_macro(container: LocalModuleId, ast: MacroCallKind) -> Self {\n+            Self { in_module: container, kind: DiagnosticKind::UnresolvedProcMacro { ast } }\n+        }\n+\n+        pub(super) fn macro_error(\n+            container: LocalModuleId,\n+            ast: MacroCallKind,\n+            message: String,\n+        ) -> Self {\n+            Self { in_module: container, kind: DiagnosticKind::MacroError { ast, message } }\n+        }\n+\n         pub(super) fn add_to(\n             &self,\n             db: &dyn DefDatabase,\n@@ -407,6 +423,38 @@ mod diagnostics {\n                         opts: opts.clone(),\n                     });\n                 }\n+\n+                DiagnosticKind::UnresolvedProcMacro { ast } => {\n+                    let (file, ast, name) = match ast {\n+                        MacroCallKind::FnLike(ast) => {\n+                            let node = ast.to_node(db.upcast());\n+                            (ast.file_id, SyntaxNodePtr::from(AstPtr::new(&node)), None)\n+                        }\n+                        MacroCallKind::Attr(ast, name) => {\n+                            let node = ast.to_node(db.upcast());\n+                            (\n+                                ast.file_id,\n+                                SyntaxNodePtr::from(AstPtr::new(&node)),\n+                                Some(name.to_string()),\n+                            )\n+                        }\n+                    };\n+                    sink.push(UnresolvedProcMacro { file, node: ast, macro_name: name });\n+                }\n+\n+                DiagnosticKind::MacroError { ast, message } => {\n+                    let (file, ast) = match ast {\n+                        MacroCallKind::FnLike(ast) => {\n+                            let node = ast.to_node(db.upcast());\n+                            (ast.file_id, SyntaxNodePtr::from(AstPtr::new(&node)))\n+                        }\n+                        MacroCallKind::Attr(ast, _) => {\n+                            let node = ast.to_node(db.upcast());\n+                            (ast.file_id, SyntaxNodePtr::from(AstPtr::new(&node)))\n+                        }\n+                    };\n+                    sink.push(MacroError { file, node: ast, message: message.clone() });\n+                }\n             }\n         }\n     }"}, {"sha": "19cd713ba0497a72194e6f2e74d3a6e152ee0591", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0432aa0ed7be3f41d41928499abc688a956214cf/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0432aa0ed7be3f41d41928499abc688a956214cf/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=0432aa0ed7be3f41d41928499abc688a956214cf", "patch": "@@ -7,7 +7,6 @@ use std::iter;\n \n use base_db::{CrateId, FileId, ProcMacroId};\n use cfg::{CfgExpr, CfgOptions};\n-use hir_expand::InFile;\n use hir_expand::{\n     ast_id_map::FileAstId,\n     builtin_derive::find_builtin_derive,\n@@ -16,6 +15,7 @@ use hir_expand::{\n     proc_macro::ProcMacroExpander,\n     HirFileId, MacroCallId, MacroDefId, MacroDefKind,\n };\n+use hir_expand::{InFile, MacroCallLoc};\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::ast;\n use test_utils::mark;\n@@ -812,7 +812,30 @@ impl DefCollector<'_> {\n             log::warn!(\"macro expansion is too deep\");\n             return;\n         }\n-        let file_id: HirFileId = macro_call_id.as_file();\n+        let file_id = macro_call_id.as_file();\n+\n+        // First, fetch the raw expansion result for purposes of error reporting. This goes through\n+        // `macro_expand_error` to avoid depending on the full expansion result (to improve\n+        // incrementality).\n+        let err = self.db.macro_expand_error(macro_call_id);\n+        if let Some(err) = err {\n+            if let MacroCallId::LazyMacro(id) = macro_call_id {\n+                let loc: MacroCallLoc = self.db.lookup_intern_macro(id);\n+\n+                let diag = match err {\n+                    hir_expand::ExpandError::UnresolvedProcMacro => {\n+                        // Missing proc macros are non-fatal, so they are handled specially.\n+                        DefDiagnostic::unresolved_proc_macro(module_id, loc.kind)\n+                    }\n+                    _ => DefDiagnostic::macro_error(module_id, loc.kind, err.to_string()),\n+                };\n+\n+                self.def_map.diagnostics.push(diag);\n+            }\n+            // FIXME: Handle eager macros.\n+        }\n+\n+        // Then, fetch and process the item tree. This will reuse the expansion result from above.\n         let item_tree = self.db.item_tree(file_id);\n         let mod_dir = self.mod_dirs[&module_id].clone();\n         ModCollector {"}, {"sha": "7ea1c63013b5a82995cf0e2ce6cb027a5fc88d4a", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0432aa0ed7be3f41d41928499abc688a956214cf/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0432aa0ed7be3f41d41928499abc688a956214cf/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=0432aa0ed7be3f41d41928499abc688a956214cf", "patch": "@@ -3,7 +3,7 @@\n use std::sync::Arc;\n \n use base_db::{salsa, SourceDatabase};\n-use mbe::{ExpandResult, MacroRules};\n+use mbe::{ExpandError, ExpandResult, MacroRules};\n use parser::FragmentKind;\n use syntax::{algo::diff, AstNode, GreenNode, Parse, SyntaxKind::*, SyntaxNode};\n \n@@ -81,6 +81,9 @@ pub trait AstDatabase: SourceDatabase {\n     ) -> ExpandResult<Option<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)>>;\n     fn macro_expand(&self, macro_call: MacroCallId) -> ExpandResult<Option<Arc<tt::Subtree>>>;\n \n+    /// Firewall query that returns the error from the `macro_expand` query.\n+    fn macro_expand_error(&self, macro_call: MacroCallId) -> Option<ExpandError>;\n+\n     #[salsa::interned]\n     fn intern_eager_expansion(&self, eager: EagerCallLoc) -> EagerMacroId;\n \n@@ -171,6 +174,10 @@ fn macro_expand(db: &dyn AstDatabase, id: MacroCallId) -> ExpandResult<Option<Ar\n     macro_expand_with_arg(db, id, None)\n }\n \n+fn macro_expand_error(db: &dyn AstDatabase, macro_call: MacroCallId) -> Option<ExpandError> {\n+    db.macro_expand(macro_call).err\n+}\n+\n fn expander(db: &dyn AstDatabase, id: MacroCallId) -> Option<Arc<(TokenExpander, mbe::TokenMap)>> {\n     let lazy_id = match id {\n         MacroCallId::LazyMacro(id) => id,"}, {"sha": "6dad2507bf3b2ab82bfc2d056c413755871666e9", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0432aa0ed7be3f41d41928499abc688a956214cf/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0432aa0ed7be3f41d41928499abc688a956214cf/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=0432aa0ed7be3f41d41928499abc688a956214cf", "patch": "@@ -255,7 +255,7 @@ pub enum MacroDefKind {\n pub struct MacroCallLoc {\n     pub(crate) def: MacroDefId,\n     pub(crate) krate: CrateId,\n-    pub(crate) kind: MacroCallKind,\n+    pub kind: MacroCallKind,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}, {"sha": "8b4ceb9a102dac25cf4c795a3335badd8228945e", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0432aa0ed7be3f41d41928499abc688a956214cf/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0432aa0ed7be3f41d41928499abc688a956214cf/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=0432aa0ed7be3f41d41928499abc688a956214cf", "patch": "@@ -142,6 +142,13 @@ pub(crate) fn diagnostics(\n                     .with_code(Some(d.code())),\n             );\n         })\n+        .on::<hir::diagnostics::UnresolvedProcMacro, _>(|d| {\n+            // FIXME: it would be nice to tell the user whether proc macros are currently disabled\n+            res.borrow_mut().push(\n+                Diagnostic::hint(sema.diagnostics_display_range(d).range, d.message())\n+                    .with_code(Some(d.code())),\n+            );\n+        })\n         // Only collect experimental diagnostics when they're enabled.\n         .filter(|diag| !(diag.is_experimental() && config.disable_experimental))\n         .filter(|diag| !config.disabled.contains(diag.code().as_str()));"}, {"sha": "1dfba6670388a2577f7166de799af29f7bb0f30c", "filename": "docs/user/generated_diagnostic.adoc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0432aa0ed7be3f41d41928499abc688a956214cf/docs%2Fuser%2Fgenerated_diagnostic.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/0432aa0ed7be3f41d41928499abc688a956214cf/docs%2Fuser%2Fgenerated_diagnostic.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_diagnostic.adoc?ref=0432aa0ed7be3f41d41928499abc688a956214cf", "patch": "@@ -17,6 +17,12 @@ This diagnostic is shown for code with inactive `#[cfg]` attributes.\n This diagnostic is triggered if item name doesn't follow https://doc.rust-lang.org/1.0.0/style/style/naming/README.html[Rust naming convention].\n \n \n+=== macro-error\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/diagnostics.rs#L164[diagnostics.rs]\n+\n+This diagnostic is shown for macro expansion errors.\n+\n+\n === mismatched-arg-count\n **Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L267[diagnostics.rs]\n \n@@ -103,3 +109,11 @@ This diagnostic is triggered if rust-analyzer is unable to discover imported mod\n **Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/diagnostics.rs#L18[diagnostics.rs]\n \n This diagnostic is triggered if rust-analyzer is unable to discover referred module.\n+\n+\n+=== unresolved-proc-macro\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/diagnostics.rs#L131[diagnostics.rs]\n+\n+This diagnostic is shown when a procedural macro can not be found. This usually means that\n+procedural macro support is simply disabled (and hence is only a weak hint instead of an error),\n+but can also indicate project setup problems."}]}