{"sha": "9e19f3a27f61596a45103c815ab4fe3f38e71272", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMTlmM2EyN2Y2MTU5NmE0NTEwM2M4MTVhYjRmZTNmMzhlNzEyNzI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-02T12:18:31Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-03T12:21:40Z"}, "message": "Correctly check comparison operators in MIR typeck", "tree": {"sha": "bb8b7c0fda2498702332e6635846f44ed9034f03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb8b7c0fda2498702332e6635846f44ed9034f03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e19f3a27f61596a45103c815ab4fe3f38e71272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e19f3a27f61596a45103c815ab4fe3f38e71272", "html_url": "https://github.com/rust-lang/rust/commit/9e19f3a27f61596a45103c815ab4fe3f38e71272", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e19f3a27f61596a45103c815ab4fe3f38e71272/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08dfbfb61871a83f720c6e97a3b737076e89fe3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/08dfbfb61871a83f720c6e97a3b737076e89fe3e", "html_url": "https://github.com/rust-lang/rust/commit/08dfbfb61871a83f720c6e97a3b737076e89fe3e"}], "stats": {"total": 94, "additions": 50, "deletions": 44}, "files": [{"sha": "36ccc0aaa8bb490544e6e3f2cf22f5a006f5f659", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 45, "deletions": 27, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9e19f3a27f61596a45103c815ab4fe3f38e71272/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e19f3a27f61596a45103c815ab4fe3f38e71272/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=9e19f3a27f61596a45103c815ab4fe3f38e71272", "patch": "@@ -2290,36 +2290,54 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 right,\n             ) => {\n                 let ty_left = left.ty(body, tcx);\n-                if let ty::RawPtr(_) | ty::FnPtr(_) = ty_left.kind {\n-                    let ty_right = right.ty(body, tcx);\n-                    let common_ty = self.infcx.next_ty_var(TypeVariableOrigin {\n-                        kind: TypeVariableOriginKind::MiscVariable,\n-                        span: body.source_info(location).span,\n-                    });\n-                    self.sub_types(\n-                        common_ty,\n-                        ty_left,\n-                        location.to_locations(),\n-                        ConstraintCategory::Boring,\n-                    )\n-                    .unwrap_or_else(|err| {\n-                        bug!(\"Could not equate type variable with {:?}: {:?}\", ty_left, err)\n-                    });\n-                    if let Err(terr) = self.sub_types(\n-                        common_ty,\n-                        ty_right,\n-                        location.to_locations(),\n-                        ConstraintCategory::Boring,\n-                    ) {\n-                        span_mirbug!(\n-                            self,\n-                            rvalue,\n-                            \"unexpected comparison types {:?} and {:?} yields {:?}\",\n+                match ty_left.kind {\n+                    // Types with regions are comparable if they have a common super-type.\n+                    ty::RawPtr(_) | ty::FnPtr(_) => {\n+                        let ty_right = right.ty(body, tcx);\n+                        let common_ty = self.infcx.next_ty_var(TypeVariableOrigin {\n+                            kind: TypeVariableOriginKind::MiscVariable,\n+                            span: body.source_info(location).span,\n+                        });\n+                        self.relate_types(\n+                            common_ty,\n+                            ty::Variance::Contravariant,\n                             ty_left,\n-                            ty_right,\n-                            terr\n+                            location.to_locations(),\n+                            ConstraintCategory::Boring,\n                         )\n+                        .unwrap_or_else(|err| {\n+                            bug!(\"Could not equate type variable with {:?}: {:?}\", ty_left, err)\n+                        });\n+                        if let Err(terr) = self.relate_types(\n+                            common_ty,\n+                            ty::Variance::Contravariant,\n+                            ty_right,\n+                            location.to_locations(),\n+                            ConstraintCategory::Boring,\n+                        ) {\n+                            span_mirbug!(\n+                                self,\n+                                rvalue,\n+                                \"unexpected comparison types {:?} and {:?} yields {:?}\",\n+                                ty_left,\n+                                ty_right,\n+                                terr\n+                            )\n+                        }\n                     }\n+                    // For types with no regions we can just check that the\n+                    // both operands have the same type.\n+                    ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_)\n+                        if ty_left == right.ty(body, tcx) => {}\n+                    // Other types are compared by trait methods, not by\n+                    // `Rvalue::BinaryOp`.\n+                    _ => span_mirbug!(\n+                        self,\n+                        rvalue,\n+                        \"unexpected comparison types {:?} and {:?}\",\n+                        ty_left,\n+                        right.ty(body, tcx)\n+                    ),\n                 }\n             }\n "}, {"sha": "3c900356fab3b0bba2ab44f20d367bb0a83e28d9", "filename": "src/test/ui/nll/type-check-pointer-comparisons.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e19f3a27f61596a45103c815ab4fe3f38e71272/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e19f3a27f61596a45103c815ab4fe3f38e71272/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.rs?ref=9e19f3a27f61596a45103c815ab4fe3f38e71272", "patch": "@@ -21,13 +21,13 @@ fn compare_fn_ptr<'a, 'b, 'c>(f: fn(&'c mut &'a i32), g: fn(&'c mut &'b i32)) {\n }\n \n fn compare_hr_fn_ptr<'a>(f: fn(&'a i32), g: fn(&i32)) {\n-    f == g;\n-    //~^ ERROR higher-ranked subtype error\n+    // Ideally this should compile with the operands swapped as well, but HIR\n+    // type checking prevents it (and stops compilation) for now.\n+    f == g; // OK\n }\n \n fn compare_const_fn_ptr<'a>(f: *const fn(&'a i32), g: *const fn(&i32)) {\n-    f == g;\n-    //~^ ERROR higher-ranked subtype error\n+    f == g; // OK\n }\n \n fn main() {}"}, {"sha": "f350b861eb6d2447c690d0852f9d4df910fc75ba", "filename": "src/test/ui/nll/type-check-pointer-comparisons.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e19f3a27f61596a45103c815ab4fe3f38e71272/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e19f3a27f61596a45103c815ab4fe3f38e71272/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr?ref=9e19f3a27f61596a45103c815ab4fe3f38e71272", "patch": "@@ -76,17 +76,5 @@ LL |     f == g;\n \n help: `'a` and `'b` must be the same: replace one with the other\n \n-error: higher-ranked subtype error\n-  --> $DIR/type-check-pointer-comparisons.rs:24:5\n-   |\n-LL |     f == g;\n-   |     ^^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/type-check-pointer-comparisons.rs:29:5\n-   |\n-LL |     f == g;\n-   |     ^^^^^^\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n "}]}