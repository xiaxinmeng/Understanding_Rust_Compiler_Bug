{"sha": "731ea85f215f03fc33a92147d6cc51a01dee589f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMWVhODVmMjE1ZjAzZmMzM2E5MjE0N2Q2Y2M1MWEwMWRlZTU4OWY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-27T00:20:08Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-30T17:22:26Z"}, "message": "review comment: tweak wording and account for span overlap", "tree": {"sha": "e17520c5a38a3477fd223f93945fbb8e6d610f88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e17520c5a38a3477fd223f93945fbb8e6d610f88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/731ea85f215f03fc33a92147d6cc51a01dee589f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/731ea85f215f03fc33a92147d6cc51a01dee589f", "html_url": "https://github.com/rust-lang/rust/commit/731ea85f215f03fc33a92147d6cc51a01dee589f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/731ea85f215f03fc33a92147d6cc51a01dee589f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65f492be121ee9901d8c4305629cf4f2ad88f6d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/65f492be121ee9901d8c4305629cf4f2ad88f6d8", "html_url": "https://github.com/rust-lang/rust/commit/65f492be121ee9901d8c4305629cf4f2ad88f6d8"}], "stats": {"total": 63, "additions": 38, "deletions": 25}, "files": [{"sha": "d00c90d06e4c11e39bd1c7c1766623168c2c18a2", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=731ea85f215f03fc33a92147d6cc51a01dee589f", "patch": "@@ -1806,8 +1806,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             |err: &mut DiagnosticBuilder<'tcx>,\n              type_param_span: Option<(Span, bool, bool)>,\n              bound_kind: GenericKind<'tcx>| {\n-                let msg = \"consider introducing an explicit lifetime bound to unify the type \\\n-                    parameter and the output\";\n+                let msg = \"consider introducing an explicit lifetime bound\";\n                 if let Some((sp, has_lifetimes, is_impl_trait)) = type_param_span {\n                     let suggestion = if is_impl_trait {\n                         (sp.shrink_to_hi(), format!(\" + {}\", new_lt))"}, {"sha": "5c5c86a4fb11857734739218892413b13e6159ee", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=731ea85f215f03fc33a92147d6cc51a01dee589f", "patch": "@@ -27,8 +27,23 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     let return_sp = sub_origin.span();\n                     let mut err =\n                         self.tcx().sess.struct_span_err(sp, \"cannot infer an appropriate lifetime\");\n-                    err.span_label(return_sp, \"this evaluates to the `'static` lifetime...\");\n-                    err.span_label(sup_origin.span(), \"...but this borrow...\");\n+                    if sp == sup_origin.span() && return_sp == sp {\n+                        // Example: `ui/object-lifetime/object-lifetime-default-from-box-error.rs`\n+                        err.span_label(\n+                            sup_origin.span(),\n+                            \"this needs to be `'static` but the borrow...\",\n+                        );\n+                    } else {\n+                        err.span_label(return_sp, \"this is `'static`...\");\n+                        // We try to make the output have fewer overlapping spans if possible.\n+                        if sp == sup_origin.span() || !return_sp.overlaps(sup_origin.span()) {\n+                            // When `sp == sup_origin` we already have overlapping spans in the\n+                            // main diagnostic output, so we don't split this into its own note.\n+                            err.span_label(sup_origin.span(), \"...but this borrow...\");\n+                        } else {\n+                            err.span_note(sup_origin.span(), \"...but this borrow...\");\n+                        }\n+                    }\n \n                     let (lifetime, lt_sp_opt) = msg_span_from_free_region(self.tcx(), sup_r);\n                     if let Some(lifetime_sp) = lt_sp_opt {"}, {"sha": "161b2565c3dfca1e57cd7f89486ed321ac59372c", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=731ea85f215f03fc33a92147d6cc51a01dee589f", "patch": "@@ -4,7 +4,7 @@ error: cannot infer an appropriate lifetime\n LL |     pub async fn run_dummy_fn(&self) {\n    |                               ^^^^^ ...but this borrow...\n LL |         foo(|| self.bar()).await;\n-   |         --- this evaluates to the `'static` lifetime...\n+   |         --- this is `'static`...\n    |\n note: ...can't outlive the lifetime `'_` as defined on the method body at 12:31\n   --> $DIR/issue-62097.rs:12:31"}, {"sha": "9d068d70bd4885d174dea85c4266f19ee55daffd", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=731ea85f215f03fc33a92147d6cc51a01dee589f", "patch": "@@ -4,7 +4,7 @@ error: cannot infer an appropriate lifetime\n LL | fn elided(x: &i32) -> impl Copy { x }\n    |                       ---------   ^ ...but this borrow...\n    |                       |\n-   |                       this evaluates to the `'static` lifetime...\n+   |                       this is `'static`...\n    |\n note: ...can't outlive the anonymous lifetime #1 defined on the function body at 3:1\n   --> $DIR/must_outlive_least_region_or_bound.rs:3:1\n@@ -22,7 +22,7 @@ error: cannot infer an appropriate lifetime\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |                                ---------   ^ ...but this borrow...\n    |                                |\n-   |                                this evaluates to the `'static` lifetime...\n+   |                                this is `'static`...\n    |\n note: ...can't outlive the lifetime `'a` as defined on the function body at 6:13\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:13\n@@ -40,7 +40,7 @@ error: cannot infer an appropriate lifetime\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                                  --------------------------------   ^ ...but this borrow...\n    |                                  |\n-   |                                  this evaluates to the `'static` lifetime...\n+   |                                  this is `'static`...\n    |\n note: ...can't outlive the lifetime `'a` as defined on the function body at 12:15\n   --> $DIR/must_outlive_least_region_or_bound.rs:12:15"}, {"sha": "645c7e1e1954c61794eb5e9fa226679789908c10", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=731ea85f215f03fc33a92147d6cc51a01dee589f", "patch": "@@ -2,7 +2,7 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:7:16\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                                   ----------------------- this evaluates to the `'static` lifetime...\n+   |                                   ----------------------- this is `'static`...\n LL |         self.x.iter().map(|a| a.0)\n    |         ------ ^^^^\n    |         |\n@@ -24,7 +24,7 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:11:16\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                                     ----------------------- this evaluates to the `'static` lifetime...\n+   |                                     ----------------------- this is `'static`...\n LL |         self.x.iter().map(|a| a.0)\n    |         ------ ^^^^\n    |         |"}, {"sha": "20a6b287429f9b835eb741f620428675b614ca33", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=731ea85f215f03fc33a92147d6cc51a01dee589f", "patch": "@@ -5,7 +5,7 @@ LL |     Box::new(value) as Box<dyn Any>\n    |     ---------^^^^^-\n    |     |        |\n    |     |        ...but this borrow...\n-   |     this evaluates to the `'static` lifetime...\n+   |     this is `'static`...\n    |\n note: ...can't outlive the anonymous lifetime #1 defined on the function body at 3:1\n   --> $DIR/issue-16922.rs:3:1"}, {"sha": "465409c6398919a61c81e06a7efcdf1545b49e85", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr?ref=731ea85f215f03fc33a92147d6cc51a01dee589f", "patch": "@@ -2,10 +2,7 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/object-lifetime-default-from-box-error.rs:18:5\n    |\n LL |     ss.r\n-   |     ^^^^\n-   |     |\n-   |     this evaluates to the `'static` lifetime...\n-   |     ...but this borrow...\n+   |     ^^^^ this needs to be `'static` but the borrow...\n    |\n note: ...can't outlive the anonymous lifetime #2 defined on the function body at 14:1\n   --> $DIR/object-lifetime-default-from-box-error.rs:14:1"}, {"sha": "5a414c477a69fcc4ba10481a273dcb5f41cf9bcb", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=731ea85f215f03fc33a92147d6cc51a01dee589f", "patch": "@@ -21,7 +21,7 @@ LL |     Box::new(v)\n    |     ---------^-\n    |     |        |\n    |     |        ...but this borrow...\n-   |     this evaluates to the `'static` lifetime...\n+   |     this is `'static`...\n    |\n note: ...can't outlive the anonymous lifetime #1 defined on the function body at 17:1\n   --> $DIR/region-object-lifetime-in-coercion.rs:17:1"}, {"sha": "21775539cea76c1ef7f02fb09de8563d800a7839", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=731ea85f215f03fc33a92147d6cc51a01dee589f", "patch": "@@ -2,7 +2,7 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:16\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                ^^^^                 ---------- this evaluates to the `'static` lifetime...\n+   |                ^^^^                 ---------- this is `'static`...\n    |                |\n    |                ...but this borrow...\n    |"}, {"sha": "e931cec8a2a84ff2d158900aee940201e1acab14", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=731ea85f215f03fc33a92147d6cc51a01dee589f", "patch": "@@ -4,7 +4,7 @@ error: cannot infer an appropriate lifetime\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                               ----------   ^^^^ ...but this borrow...\n    |                               |\n-   |                               this evaluates to the `'static` lifetime...\n+   |                               this is `'static`...\n    |\n note: ...can't outlive the anonymous lifetime #1 defined on the method body at 6:5\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:5"}, {"sha": "d6d2a0c4d2b634ff3176a50213b22b8bd15af34f", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=731ea85f215f03fc33a92147d6cc51a01dee589f", "patch": "@@ -10,7 +10,7 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/missing-lifetimes-in-signature.rs:19:5\n    |\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n-   |                                       ------------- this evaluates to the `'static` lifetime...\n+   |                                       ------------- this is `'static`...\n ...\n LL | /     move || {\n LL | |         *dest = g.get();\n@@ -55,7 +55,7 @@ note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:30:5:\n    |\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                     ^^^^^^^^^^^^^^^^^^\n-help: consider introducing an explicit lifetime bound to unify the type parameter and the output\n+help: consider introducing an explicit lifetime bound\n    |\n LL | fn bar<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |        ^^^^^                                                   ^^^^\n@@ -82,7 +82,7 @@ note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:52:5:\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                             ^^^^^^^^^^^^^^^^^^\n-help: consider introducing an explicit lifetime bound to unify the type parameter and the output\n+help: consider introducing an explicit lifetime bound\n    |\n LL | fn qux<'b, 'a, G: 'b + 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'b\n    |        ^^^     ^^^^^^^                                                  ^^^^"}, {"sha": "bcbdec4f306d9da79f513bef31bb4d507b31e89f", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/731ea85f215f03fc33a92147d6cc51a01dee589f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=731ea85f215f03fc33a92147d6cc51a01dee589f", "patch": "@@ -2,11 +2,13 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/dyn-trait-underscore.rs:8:20\n    |\n LL |     Box::new(items.iter())\n-   |     ---------------^^^^---\n-   |     |        |\n-   |     |        ...but this borrow...\n-   |     this evaluates to the `'static` lifetime...\n+   |     ---------------^^^^--- this is `'static`...\n    |\n+note: ...but this borrow...\n+  --> $DIR/dyn-trait-underscore.rs:8:14\n+   |\n+LL |     Box::new(items.iter())\n+   |              ^^^^^\n note: ...can't outlive the anonymous lifetime #1 defined on the function body at 6:1\n   --> $DIR/dyn-trait-underscore.rs:6:1\n    |"}]}