{"sha": "046c85ef0c56d9c484291b22241a51fa7d2f3a51", "node_id": "C_kwDOAAsO6NoAKDA0NmM4NWVmMGM1NmQ5YzQ4NDI5MWIyMjI0MWE1MWZhN2QyZjNhNTE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-04T17:22:41Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-04T17:22:41Z"}, "message": "Add custom non-postfix snippets", "tree": {"sha": "f1065f274dd05be40a82fdfcbd92c372664beb17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1065f274dd05be40a82fdfcbd92c372664beb17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/046c85ef0c56d9c484291b22241a51fa7d2f3a51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/046c85ef0c56d9c484291b22241a51fa7d2f3a51", "html_url": "https://github.com/rust-lang/rust/commit/046c85ef0c56d9c484291b22241a51fa7d2f3a51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/046c85ef0c56d9c484291b22241a51fa7d2f3a51/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88f213eaddf811dd7616b330eaa14d1dc1060a92", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f213eaddf811dd7616b330eaa14d1dc1060a92", "html_url": "https://github.com/rust-lang/rust/commit/88f213eaddf811dd7616b330eaa14d1dc1060a92"}], "stats": {"total": 398, "additions": 315, "deletions": 83}, "files": [{"sha": "2c7e1837c3fb1c8fca7a4dde219f1a30df1476bd", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=046c85ef0c56d9c484291b22241a51fa7d2f3a51", "patch": "@@ -99,7 +99,7 @@ pub use ide_assists::{\n };\n pub use ide_completion::{\n     CompletionConfig, CompletionItem, CompletionItemKind, CompletionRelevance, ImportEdit,\n-    PostfixSnippet,\n+    PostfixSnippet, PostfixSnippetScope, Snippet, SnippetScope,\n };\n pub use ide_db::{\n     base_db::{"}, {"sha": "f83001c22d2f00c2826c360b1791f98d8b0f378d", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=046c85ef0c56d9c484291b22241a51fa7d2f3a51", "patch": "@@ -3,7 +3,7 @@\n mod format_like;\n \n use ide_db::{\n-    helpers::{import_assets::LocatedImport, insert_use::ImportScope, FamousDefs, SnippetCap},\n+    helpers::{insert_use::ImportScope, FamousDefs, SnippetCap},\n     ty_filter::TryEnum,\n };\n use syntax::{\n@@ -18,7 +18,7 @@ use crate::{\n     context::CompletionContext,\n     item::{Builder, CompletionKind},\n     patterns::ImmediateLocation,\n-    CompletionItem, CompletionItemKind, CompletionRelevance, Completions, ImportEdit,\n+    CompletionItem, CompletionItemKind, CompletionRelevance, Completions,\n };\n \n pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -232,33 +232,9 @@ fn add_custom_postfix_completions(\n         ImportScope::find_insert_use_container_with_macros(&ctx.token.parent()?, &ctx.sema)?;\n     ctx.config.postfix_snippets.iter().for_each(|snippet| {\n         // FIXME: Support multiple imports\n-        let import = match snippet.requires.get(0) {\n-            Some(import) => {\n-                let res = (|| {\n-                    let path = ast::Path::parse(import).ok()?;\n-                    match ctx.scope.speculative_resolve(&path)? {\n-                        hir::PathResolution::Macro(_) => None,\n-                        hir::PathResolution::Def(def) => {\n-                            let item = def.into();\n-                            let path = ctx.scope.module()?.find_use_path_prefixed(\n-                                ctx.db,\n-                                item,\n-                                ctx.config.insert_use.prefix_kind,\n-                            )?;\n-                            Some((path.len() > 1).then(|| ImportEdit {\n-                                import: LocatedImport::new(path.clone(), item, item, None),\n-                                scope: import_scope.clone(),\n-                            }))\n-                        }\n-                        _ => None,\n-                    }\n-                })();\n-                match res {\n-                    Some(it) => it,\n-                    None => return,\n-                }\n-            }\n-            None => None,\n+        let import = match snippet.imports(ctx, &import_scope) {\n+            Ok(mut imports) => imports.pop(),\n+            Err(_) => return,\n         };\n         let mut builder = postfix_snippet(\n             &snippet.label,\n@@ -501,9 +477,10 @@ fn main() {\n             CompletionConfig {\n                 postfix_snippets: vec![PostfixSnippet::new(\n                     \"break\".into(),\n-                    &[\"ControlFlow::Break($target)\".into()],\n+                    &[\"ControlFlow::Break($receiver)\".into()],\n                     &[],\n                     &[\"core::ops::ControlFlow\".into()],\n+                    None,\n                 )\n                 .unwrap()],\n                 ..TEST_CONFIG"}, {"sha": "9812f25b4027c4fb1ab942a488feba4ed8c8028a", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=046c85ef0c56d9c484291b22241a51fa7d2f3a51", "patch": "@@ -1,11 +1,11 @@\n //! This file provides snippet completions, like `pd` => `eprintln!(...)`.\n \n-use ide_db::helpers::SnippetCap;\n+use ide_db::helpers::{insert_use::ImportScope, SnippetCap};\n use syntax::T;\n \n use crate::{\n     context::PathCompletionContext, item::Builder, CompletionContext, CompletionItem,\n-    CompletionItemKind, CompletionKind, Completions,\n+    CompletionItemKind, CompletionKind, Completions, SnippetScope,\n };\n \n fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str) -> Builder {\n@@ -29,6 +29,10 @@ pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionConte\n         None => return,\n     };\n \n+    if !ctx.config.snippets.is_empty() {\n+        add_custom_completions(acc, ctx, cap, SnippetScope::Expr);\n+    }\n+\n     if can_be_stmt {\n         snippet(ctx, cap, \"pd\", \"eprintln!(\\\"$0 = {:?}\\\", $0);\").add_to(acc);\n         snippet(ctx, cap, \"ppd\", \"eprintln!(\\\"$0 = {:#?}\\\", $0);\").add_to(acc);\n@@ -52,6 +56,10 @@ pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionConte\n         None => return,\n     };\n \n+    if !ctx.config.snippets.is_empty() {\n+        add_custom_completions(acc, ctx, cap, SnippetScope::Item);\n+    }\n+\n     let mut item = snippet(\n         ctx,\n         cap,\n@@ -86,3 +94,59 @@ fn ${1:feature}() {\n     let item = snippet(ctx, cap, \"macro_rules\", \"macro_rules! $1 {\\n\\t($2) => {\\n\\t\\t$0\\n\\t};\\n}\");\n     item.add_to(acc);\n }\n+\n+fn add_custom_completions(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    cap: SnippetCap,\n+    scope: SnippetScope,\n+) -> Option<()> {\n+    let import_scope =\n+        ImportScope::find_insert_use_container_with_macros(&ctx.token.parent()?, &ctx.sema)?;\n+    ctx.config.snippets.iter().filter(|snip| snip.scope == scope).for_each(|snip| {\n+        // FIXME: Support multiple imports\n+        let import = match snip.imports(ctx, &import_scope) {\n+            Ok(mut imports) => imports.pop(),\n+            Err(_) => return,\n+        };\n+        let mut builder = snippet(ctx, cap, &snip.label, &snip.snippet);\n+        builder.add_import(import).detail(snip.description.as_deref().unwrap_or_default());\n+        builder.add_to(acc);\n+    });\n+    None\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::{\n+        tests::{check_edit_with_config, TEST_CONFIG},\n+        CompletionConfig, Snippet,\n+    };\n+\n+    #[test]\n+    fn custom_snippet_completion() {\n+        check_edit_with_config(\n+            CompletionConfig {\n+                snippets: vec![Snippet::new(\n+                    \"break\".into(),\n+                    &[\"ControlFlow::Break(())\".into()],\n+                    &[],\n+                    &[\"core::ops::ControlFlow\".into()],\n+                    None,\n+                )\n+                .unwrap()],\n+                ..TEST_CONFIG\n+            },\n+            \"break\",\n+            r#\"\n+//- minicore: try\n+fn main() { $0 }\n+\"#,\n+            r#\"\n+use core::ops::ControlFlow;\n+\n+fn main() { ControlFlow::Break(()) }\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "bf1dc125c7e043886b35a72de508fe5491f0de0d", "filename": "crates/ide_completion/src/config.rs", "status": "modified", "additions": 3, "deletions": 43, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Fide_completion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Fide_completion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fconfig.rs?ref=046c85ef0c56d9c484291b22241a51fa7d2f3a51", "patch": "@@ -5,8 +5,8 @@\n //! completions if we are allowed to.\n \n use ide_db::helpers::{insert_use::InsertUseConfig, SnippetCap};\n-use itertools::Itertools;\n-use syntax::ast;\n+\n+use crate::snippet::{PostfixSnippet, Snippet};\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct CompletionConfig {\n@@ -18,45 +18,5 @@ pub struct CompletionConfig {\n     pub snippet_cap: Option<SnippetCap>,\n     pub insert_use: InsertUseConfig,\n     pub postfix_snippets: Vec<PostfixSnippet>,\n-}\n-\n-#[derive(Clone, Debug, PartialEq, Eq)]\n-pub struct PostfixSnippet {\n-    pub label: String,\n-    snippet: String,\n-    pub description: Option<String>,\n-    pub requires: Box<[String]>,\n-}\n-\n-impl PostfixSnippet {\n-    pub fn new(\n-        label: String,\n-        snippet: &[String],\n-        description: &[String],\n-        requires: &[String],\n-    ) -> Option<Self> {\n-        // validate that these are indeed simple paths\n-        if requires.iter().any(|path| match ast::Path::parse(path) {\n-            Ok(path) => path.segments().any(|seg| {\n-                !matches!(seg.kind(), Some(ast::PathSegmentKind::Name(_)))\n-                    || seg.generic_arg_list().is_some()\n-            }),\n-            Err(_) => true,\n-        }) {\n-            return None;\n-        }\n-        let snippet = snippet.iter().join(\"\\n\");\n-        let description = description.iter().join(\"\\n\");\n-        let description = if description.is_empty() { None } else { Some(description) };\n-        Some(PostfixSnippet {\n-            label,\n-            snippet,\n-            description,\n-            requires: requires.iter().cloned().collect(), // Box::into doesn't work as that has a Copy bound \ud83d\ude12\n-        })\n-    }\n-\n-    pub fn snippet(&self, receiver: &str) -> String {\n-        self.snippet.replace(\"$receiver\", receiver)\n-    }\n+    pub snippets: Vec<Snippet>,\n }"}, {"sha": "56464c07ce2d4614360997bca5a42f834b4fc827", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=046c85ef0c56d9c484291b22241a51fa7d2f3a51", "patch": "@@ -9,6 +9,7 @@ mod render;\n \n #[cfg(test)]\n mod tests;\n+mod snippet;\n \n use completions::flyimport::position_for_import;\n use ide_db::{\n@@ -24,8 +25,9 @@ use text_edit::TextEdit;\n use crate::{completions::Completions, context::CompletionContext, item::CompletionKind};\n \n pub use crate::{\n-    config::{CompletionConfig, PostfixSnippet},\n+    config::CompletionConfig,\n     item::{CompletionItem, CompletionItemKind, CompletionRelevance, ImportEdit},\n+    snippet::{PostfixSnippet, PostfixSnippetScope, Snippet, SnippetScope},\n };\n \n //FIXME: split the following feature into fine-grained features."}, {"sha": "1bcb128fa9c390393c1d70596234384ab778ce88", "filename": "crates/ide_completion/src/snippet.rs", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fsnippet.rs?ref=046c85ef0c56d9c484291b22241a51fa7d2f3a51", "patch": "@@ -0,0 +1,170 @@\n+use ide_db::helpers::{import_assets::LocatedImport, insert_use::ImportScope};\n+use itertools::Itertools;\n+use syntax::ast;\n+\n+use crate::{context::CompletionContext, ImportEdit};\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub enum PostfixSnippetScope {\n+    Expr,\n+    Type,\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub enum SnippetScope {\n+    Item,\n+    Expr,\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct PostfixSnippet {\n+    pub scope: PostfixSnippetScope,\n+    pub label: String,\n+    snippet: String,\n+    pub description: Option<String>,\n+    pub requires: Box<[String]>,\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+#[non_exhaustive]\n+pub struct Snippet {\n+    pub scope: SnippetScope,\n+    pub label: String,\n+    pub snippet: String,\n+    pub description: Option<String>,\n+    pub requires: Box<[String]>,\n+}\n+\n+impl Snippet {\n+    pub fn new(\n+        label: String,\n+        snippet: &[String],\n+        description: &[String],\n+        requires: &[String],\n+        scope: Option<SnippetScope>,\n+    ) -> Option<Self> {\n+        // validate that these are indeed simple paths\n+        if requires.iter().any(|path| match ast::Path::parse(path) {\n+            Ok(path) => path.segments().any(|seg| {\n+                !matches!(seg.kind(), Some(ast::PathSegmentKind::Name(_)))\n+                    || seg.generic_arg_list().is_some()\n+            }),\n+            Err(_) => true,\n+        }) {\n+            return None;\n+        }\n+        let snippet = snippet.iter().join(\"\\n\");\n+        let description = description.iter().join(\"\\n\");\n+        let description = if description.is_empty() { None } else { Some(description) };\n+        Some(Snippet {\n+            scope: scope.unwrap_or(SnippetScope::Expr),\n+            label,\n+            snippet,\n+            description,\n+            requires: requires.iter().cloned().collect(), // Box::into doesn't work as that has a Copy bound \ud83d\ude12\n+        })\n+    }\n+\n+    // FIXME: This shouldn't be fallible\n+    pub(crate) fn imports(\n+        &self,\n+        ctx: &CompletionContext,\n+        import_scope: &ImportScope,\n+    ) -> Result<Vec<ImportEdit>, ()> {\n+        import_edits(ctx, import_scope, &self.requires)\n+    }\n+\n+    pub fn is_item(&self) -> bool {\n+        self.scope == SnippetScope::Item\n+    }\n+\n+    pub fn is_expr(&self) -> bool {\n+        self.scope == SnippetScope::Expr\n+    }\n+}\n+\n+impl PostfixSnippet {\n+    pub fn new(\n+        label: String,\n+        snippet: &[String],\n+        description: &[String],\n+        requires: &[String],\n+        scope: Option<PostfixSnippetScope>,\n+    ) -> Option<Self> {\n+        // validate that these are indeed simple paths\n+        if requires.iter().any(|path| match ast::Path::parse(path) {\n+            Ok(path) => path.segments().any(|seg| {\n+                !matches!(seg.kind(), Some(ast::PathSegmentKind::Name(_)))\n+                    || seg.generic_arg_list().is_some()\n+            }),\n+            Err(_) => true,\n+        }) {\n+            return None;\n+        }\n+        let snippet = snippet.iter().join(\"\\n\");\n+        let description = description.iter().join(\"\\n\");\n+        let description = if description.is_empty() { None } else { Some(description) };\n+        Some(PostfixSnippet {\n+            scope: scope.unwrap_or(PostfixSnippetScope::Expr),\n+            label,\n+            snippet,\n+            description,\n+            requires: requires.iter().cloned().collect(), // Box::into doesn't work as that has a Copy bound \ud83d\ude12\n+        })\n+    }\n+\n+    // FIXME: This shouldn't be fallible\n+    pub(crate) fn imports(\n+        &self,\n+        ctx: &CompletionContext,\n+        import_scope: &ImportScope,\n+    ) -> Result<Vec<ImportEdit>, ()> {\n+        import_edits(ctx, import_scope, &self.requires)\n+    }\n+\n+    pub fn snippet(&self, receiver: &str) -> String {\n+        self.snippet.replace(\"$receiver\", receiver)\n+    }\n+\n+    pub fn is_item(&self) -> bool {\n+        self.scope == PostfixSnippetScope::Type\n+    }\n+\n+    pub fn is_expr(&self) -> bool {\n+        self.scope == PostfixSnippetScope::Expr\n+    }\n+}\n+\n+fn import_edits(\n+    ctx: &CompletionContext,\n+    import_scope: &ImportScope,\n+    requires: &[String],\n+) -> Result<Vec<ImportEdit>, ()> {\n+    let resolve = |import| {\n+        let path = ast::Path::parse(import).ok()?;\n+        match ctx.scope.speculative_resolve(&path)? {\n+            hir::PathResolution::Macro(_) => None,\n+            hir::PathResolution::Def(def) => {\n+                let item = def.into();\n+                let path = ctx.scope.module()?.find_use_path_prefixed(\n+                    ctx.db,\n+                    item,\n+                    ctx.config.insert_use.prefix_kind,\n+                )?;\n+                Some((path.len() > 1).then(|| ImportEdit {\n+                    import: LocatedImport::new(path.clone(), item, item, None),\n+                    scope: import_scope.clone(),\n+                }))\n+            }\n+            _ => None,\n+        }\n+    };\n+    let mut res = Vec::with_capacity(requires.len());\n+    for import in requires {\n+        match resolve(import) {\n+            Some(first) => res.extend(first),\n+            None => return Err(()),\n+        }\n+    }\n+    Ok(res)\n+}"}, {"sha": "9f5ef2a9aa7c53ab66f7325b3a8479ed07de8b5b", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=046c85ef0c56d9c484291b22241a51fa7d2f3a51", "patch": "@@ -75,6 +75,7 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n         skip_glob_imports: true,\n     },\n     postfix_snippets: Vec::new(),\n+    snippets: Vec::new(),\n };\n \n pub(crate) fn completion_list(ra_fixture: &str) -> String {"}, {"sha": "58539543ee81c39a7e88aff5eca22b4be2e92bb1", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 62, "deletions": 6, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=046c85ef0c56d9c484291b22241a51fa7d2f3a51", "patch": "@@ -12,7 +12,8 @@ use std::{ffi::OsString, iter, path::PathBuf};\n use flycheck::FlycheckConfig;\n use ide::{\n     AssistConfig, CompletionConfig, DiagnosticsConfig, HighlightRelatedConfig, HoverConfig,\n-    HoverDocFormat, InlayHintsConfig, JoinLinesConfig, PostfixSnippet,\n+    HoverDocFormat, InlayHintsConfig, JoinLinesConfig, PostfixSnippet, PostfixSnippetScope,\n+    Snippet, SnippetScope,\n };\n use ide_db::helpers::{\n     insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n@@ -112,10 +113,12 @@ config_data! {\n         completion_addCallArgumentSnippets: bool = \"true\",\n         /// Whether to add parenthesis when completing functions.\n         completion_addCallParenthesis: bool      = \"true\",\n+        /// Custom completion snippets.\n+        completion_snippets: FxHashMap<String, SnippetDef> = \"{}\",\n         /// Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n         completion_postfix_enable: bool          = \"true\",\n-        /// Custom postfix completions to show.\n-        completion_postfix_snippets: FxHashMap<String, PostfixSnippetDesc> = \"{}\",\n+        /// Custom postfix completion snippets.\n+        completion_postfix_snippets: FxHashMap<String, PostfixSnippetDef> = \"{}\",\n         /// Toggles the additional completions that automatically add imports when completed.\n         /// Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n         completion_autoimport_enable: bool       = \"true\",\n@@ -298,7 +301,8 @@ pub struct Config {\n     detached_files: Vec<AbsPathBuf>,\n     pub discovered_projects: Option<Vec<ProjectManifest>>,\n     pub root_path: AbsPathBuf,\n-    postfix_snippets: Vec<ide::PostfixSnippet>,\n+    postfix_snippets: Vec<PostfixSnippet>,\n+    snippets: Vec<Snippet>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -435,6 +439,7 @@ impl Config {\n             discovered_projects: None,\n             root_path,\n             postfix_snippets: Default::default(),\n+            snippets: Default::default(),\n         }\n     }\n     pub fn update(&mut self, mut json: serde_json::Value) {\n@@ -452,7 +457,33 @@ impl Config {\n             .completion_postfix_snippets\n             .iter()\n             .flat_map(|(label, desc)| {\n-                PostfixSnippet::new(label.clone(), &desc.snippet, &desc.description, &desc.requires)\n+                PostfixSnippet::new(\n+                    label.clone(),\n+                    &desc.snippet,\n+                    &desc.description,\n+                    &desc.requires,\n+                    desc.scope.map(|scope| match scope {\n+                        PostfixSnippetScopeDef::Expr => PostfixSnippetScope::Expr,\n+                        PostfixSnippetScopeDef::Type => PostfixSnippetScope::Type,\n+                    }),\n+                )\n+            })\n+            .collect();\n+        self.snippets = self\n+            .data\n+            .completion_snippets\n+            .iter()\n+            .flat_map(|(label, desc)| {\n+                Snippet::new(\n+                    label.clone(),\n+                    &desc.snippet,\n+                    &desc.description,\n+                    &desc.requires,\n+                    desc.scope.map(|scope| match scope {\n+                        SnippetScopeDef::Expr => SnippetScope::Expr,\n+                        SnippetScopeDef::Item => SnippetScope::Item,\n+                    }),\n+                )\n             })\n             .collect();\n     }\n@@ -791,6 +822,7 @@ impl Config {\n                 false\n             )),\n             postfix_snippets: self.postfix_snippets.clone(),\n+            snippets: self.snippets.clone(),\n         }\n     }\n     pub fn assist(&self) -> AssistConfig {\n@@ -921,14 +953,38 @@ impl Config {\n     }\n }\n \n+#[derive(Deserialize, Debug, Clone, Copy)]\n+enum PostfixSnippetScopeDef {\n+    Expr,\n+    Type,\n+}\n+\n+#[derive(Deserialize, Debug, Clone, Copy)]\n+enum SnippetScopeDef {\n+    Expr,\n+    Item,\n+}\n+\n+#[derive(Deserialize, Debug, Clone)]\n+struct PostfixSnippetDef {\n+    #[serde(deserialize_with = \"single_or_array\")]\n+    description: Vec<String>,\n+    #[serde(deserialize_with = \"single_or_array\")]\n+    snippet: Vec<String>,\n+    #[serde(deserialize_with = \"single_or_array\")]\n+    requires: Vec<String>,\n+    scope: Option<PostfixSnippetScopeDef>,\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n-struct PostfixSnippetDesc {\n+struct SnippetDef {\n     #[serde(deserialize_with = \"single_or_array\")]\n     description: Vec<String>,\n     #[serde(deserialize_with = \"single_or_array\")]\n     snippet: Vec<String>,\n     #[serde(deserialize_with = \"single_or_array\")]\n     requires: Vec<String>,\n+    scope: Option<SnippetScopeDef>,\n }\n \n fn single_or_array<'de, D>(deserializer: D) -> Result<Vec<String>, D::Error>"}, {"sha": "4b3c83c241b665fd534a2d295c1fc1f68e2d9c46", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046c85ef0c56d9c484291b22241a51fa7d2f3a51/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=046c85ef0c56d9c484291b22241a51fa7d2f3a51", "patch": "@@ -145,6 +145,7 @@ fn integrated_completion_benchmark() {\n                 skip_glob_imports: true,\n             },\n             postfix_snippets: Vec::new(),\n+            snippets: Vec::new(),\n         };\n         let position =\n             FilePosition { file_id, offset: TextSize::try_from(completion_offset).unwrap() };\n@@ -182,6 +183,7 @@ fn integrated_completion_benchmark() {\n                 skip_glob_imports: true,\n             },\n             postfix_snippets: Vec::new(),\n+            snippets: Vec::new(),\n         };\n         let position =\n             FilePosition { file_id, offset: TextSize::try_from(completion_offset).unwrap() };"}]}