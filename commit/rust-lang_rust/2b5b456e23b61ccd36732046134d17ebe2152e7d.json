{"sha": "2b5b456e23b61ccd36732046134d17ebe2152e7d", "node_id": "C_kwDOAAsO6NoAKDJiNWI0NTZlMjNiNjFjY2QzNjczMjA0NjEzNGQxN2ViZTIxNTJlN2Q", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-10-15T15:31:22Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-10-15T16:14:19Z"}, "message": "Move some outlives bounds things from rustc_trait_selection to rustc_typeck", "tree": {"sha": "eea2b22bb0cf1c7e845266d30da6342535196e0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eea2b22bb0cf1c7e845266d30da6342535196e0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b5b456e23b61ccd36732046134d17ebe2152e7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5b456e23b61ccd36732046134d17ebe2152e7d", "html_url": "https://github.com/rust-lang/rust/commit/2b5b456e23b61ccd36732046134d17ebe2152e7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b5b456e23b61ccd36732046134d17ebe2152e7d/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3fa07c72e079e8a72fcb55a792d2f855e80722b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3fa07c72e079e8a72fcb55a792d2f855e80722b", "html_url": "https://github.com/rust-lang/rust/commit/d3fa07c72e079e8a72fcb55a792d2f855e80722b"}], "stats": {"total": 114, "additions": 55, "deletions": 59}, "files": [{"sha": "70816b5722b2d4ae88a62170692238d8ef54adfa", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2b5b456e23b61ccd36732046134d17ebe2152e7d/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5b456e23b61ccd36732046134d17ebe2152e7d/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=2b5b456e23b61ccd36732046134d17ebe2152e7d", "patch": "@@ -1,12 +1,8 @@\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n-use crate::traits::query::outlives_bounds::InferCtxtExt as _;\n use crate::traits::{self, TraitEngine, TraitEngineExt};\n \n-use rustc_data_structures::stable_set::FxHashSet;\n-use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::infer::canonical::{Canonical, CanonicalizedQueryResponse, QueryResponse};\n@@ -180,48 +176,3 @@ impl<'tcx> InferCtxtBuilderExt<'tcx> for InferCtxtBuilder<'tcx> {\n         )\n     }\n }\n-\n-pub trait OutlivesEnvironmentExt<'tcx> {\n-    fn add_implied_bounds(\n-        &mut self,\n-        infcx: &InferCtxt<'a, 'tcx>,\n-        fn_sig_tys: FxHashSet<Ty<'tcx>>,\n-        body_id: hir::HirId,\n-        span: Span,\n-    );\n-}\n-\n-impl<'tcx> OutlivesEnvironmentExt<'tcx> for OutlivesEnvironment<'tcx> {\n-    /// This method adds \"implied bounds\" into the outlives environment.\n-    /// Implied bounds are outlives relationships that we can deduce\n-    /// on the basis that certain types must be well-formed -- these are\n-    /// either the types that appear in the function signature or else\n-    /// the input types to an impl. For example, if you have a function\n-    /// like\n-    ///\n-    /// ```\n-    /// fn foo<'a, 'b, T>(x: &'a &'b [T]) { }\n-    /// ```\n-    ///\n-    /// we can assume in the caller's body that `'b: 'a` and that `T:\n-    /// 'b` (and hence, transitively, that `T: 'a`). This method would\n-    /// add those assumptions into the outlives-environment.\n-    ///\n-    /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`\n-    fn add_implied_bounds(\n-        &mut self,\n-        infcx: &InferCtxt<'a, 'tcx>,\n-        fn_sig_tys: FxHashSet<Ty<'tcx>>,\n-        body_id: hir::HirId,\n-        span: Span,\n-    ) {\n-        debug!(\"add_implied_bounds()\");\n-\n-        for ty in fn_sig_tys {\n-            let ty = infcx.resolve_vars_if_possible(ty);\n-            debug!(\"add_implied_bounds: ty = {}\", ty);\n-            let implied_bounds = infcx.implied_outlives_bounds(self.param_env, body_id, ty, span);\n-            self.add_outlives_bounds(Some(infcx), implied_bounds)\n-        }\n-    }\n-}"}, {"sha": "ef3493678131f438497731b16d6ed2a2cafd69bd", "filename": "compiler/rustc_trait_selection/src/traits/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b5b456e23b61ccd36732046134d17ebe2152e7d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5b456e23b61ccd36732046134d17ebe2152e7d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fmod.rs?ref=2b5b456e23b61ccd36732046134d17ebe2152e7d", "patch": "@@ -9,7 +9,6 @@ pub mod dropck_outlives;\n pub mod evaluate_obligation;\n pub mod method_autoderef;\n pub mod normalize;\n-pub mod outlives_bounds;\n pub mod type_op;\n \n pub use rustc_middle::traits::query::*;"}, {"sha": "04c382d439d4c0d88d39402d621bb8b2cc3ed17c", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5b456e23b61ccd36732046134d17ebe2152e7d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5b456e23b61ccd36732046134d17ebe2152e7d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=2b5b456e23b61ccd36732046134d17ebe2152e7d", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n-use crate::traits::query::outlives_bounds::OutlivesBound;\n use crate::traits::query::Fallible;\n+use rustc_infer::traits::query::OutlivesBound;\n use rustc_middle::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, HashStable, TypeFoldable, Lift)]"}, {"sha": "37e007337374fd2553af77fcff1f307c2062e2c1", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5b456e23b61ccd36732046134d17ebe2152e7d/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5b456e23b61ccd36732046134d17ebe2152e7d/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=2b5b456e23b61ccd36732046134d17ebe2152e7d", "patch": "@@ -6,12 +6,12 @@ use rustc_hir as hir;\n use rustc_infer::infer::canonical::{self, Canonical};\n use rustc_infer::infer::outlives::components::{push_outlives_components, Component};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_infer::traits::query::OutlivesBound;\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map::DUMMY_SP;\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n-use rustc_trait_selection::traits::query::outlives_bounds::OutlivesBound;\n use rustc_trait_selection::traits::query::{CanonicalTyGoal, Fallible, NoSolution};\n use rustc_trait_selection::traits::wf;\n use rustc_trait_selection::traits::FulfillmentContext;"}, {"sha": "7c8b75271871a9a1275ba4cece3796abdfcbf81a", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2b5b456e23b61ccd36732046134d17ebe2152e7d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5b456e23b61ccd36732046134d17ebe2152e7d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=2b5b456e23b61ccd36732046134d17ebe2152e7d", "patch": "@@ -76,19 +76,19 @@ use crate::check::dropck;\n use crate::check::FnCtxt;\n use crate::mem_categorization as mc;\n use crate::middle::region;\n+use crate::outlives::outlives_bounds::InferCtxtExt as _;\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::PatKind;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n-use rustc_infer::infer::{self, RegionObligation, RegionckMode};\n+use rustc_infer::infer::{self, InferCtxt, RegionObligation, RegionckMode};\n use rustc_middle::hir::place::{PlaceBase, PlaceWithHirId};\n use rustc_middle::ty::adjustment;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::Span;\n-use rustc_trait_selection::infer::OutlivesEnvironmentExt;\n-use rustc_trait_selection::opaque_types::InferCtxtExt;\n+use rustc_trait_selection::opaque_types::InferCtxtExt as _;\n use std::ops::Deref;\n \n // a variation on try that just returns unit\n@@ -104,6 +104,51 @@ macro_rules! ignore_err {\n     };\n }\n \n+trait OutlivesEnvironmentExt<'tcx> {\n+    fn add_implied_bounds(\n+        &mut self,\n+        infcx: &InferCtxt<'a, 'tcx>,\n+        fn_sig_tys: FxHashSet<Ty<'tcx>>,\n+        body_id: hir::HirId,\n+        span: Span,\n+    );\n+}\n+\n+impl<'tcx> OutlivesEnvironmentExt<'tcx> for OutlivesEnvironment<'tcx> {\n+    /// This method adds \"implied bounds\" into the outlives environment.\n+    /// Implied bounds are outlives relationships that we can deduce\n+    /// on the basis that certain types must be well-formed -- these are\n+    /// either the types that appear in the function signature or else\n+    /// the input types to an impl. For example, if you have a function\n+    /// like\n+    ///\n+    /// ```\n+    /// fn foo<'a, 'b, T>(x: &'a &'b [T]) { }\n+    /// ```\n+    ///\n+    /// we can assume in the caller's body that `'b: 'a` and that `T:\n+    /// 'b` (and hence, transitively, that `T: 'a`). This method would\n+    /// add those assumptions into the outlives-environment.\n+    ///\n+    /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`\n+    fn add_implied_bounds(\n+        &mut self,\n+        infcx: &InferCtxt<'a, 'tcx>,\n+        fn_sig_tys: FxHashSet<Ty<'tcx>>,\n+        body_id: hir::HirId,\n+        span: Span,\n+    ) {\n+        debug!(\"add_implied_bounds()\");\n+\n+        for ty in fn_sig_tys {\n+            let ty = infcx.resolve_vars_if_possible(ty);\n+            debug!(\"add_implied_bounds: ty = {}\", ty);\n+            let implied_bounds = infcx.implied_outlives_bounds(self.param_env, body_id, ty, span);\n+            self.add_outlives_bounds(Some(infcx), implied_bounds)\n+        }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // PUBLIC ENTRY POINTS\n "}, {"sha": "eb3853b6b3dee9e85eb26a08318607b5e008babb", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b5b456e23b61ccd36732046134d17ebe2152e7d/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5b456e23b61ccd36732046134d17ebe2152e7d/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=2b5b456e23b61ccd36732046134d17ebe2152e7d", "patch": "@@ -9,6 +9,7 @@ use rustc_span::Span;\n \n mod explicit;\n mod implicit_infer;\n+crate mod outlives_bounds;\n /// Code to write unit test for outlives.\n pub mod test;\n mod utils;"}, {"sha": "4ab5fe26abe56098cc4210db94e1c804cd90afbc", "filename": "compiler/rustc_typeck/src/outlives/outlives_bounds.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b5b456e23b61ccd36732046134d17ebe2152e7d/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5b456e23b61ccd36732046134d17ebe2152e7d/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs?ref=2b5b456e23b61ccd36732046134d17ebe2152e7d", "patch": "@@ -1,11 +1,11 @@\n-use crate::infer::canonical::OriginalQueryValues;\n-use crate::infer::InferCtxt;\n-use crate::traits::query::NoSolution;\n-use crate::traits::{FulfillmentContext, ObligationCause, TraitEngine};\n use rustc_hir as hir;\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::source_map::Span;\n+use rustc_trait_selection::infer::canonical::OriginalQueryValues;\n+use rustc_trait_selection::infer::InferCtxt;\n+use rustc_trait_selection::traits::query::NoSolution;\n+use rustc_trait_selection::traits::{FulfillmentContext, ObligationCause, TraitEngine};\n \n pub use rustc_middle::traits::query::OutlivesBound;\n ", "previous_filename": "compiler/rustc_trait_selection/src/traits/query/outlives_bounds.rs"}]}