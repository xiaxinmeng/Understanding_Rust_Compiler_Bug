{"sha": "4038b5b3eee3d26e07ec49b2e697975307488d67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMzhiNWIzZWVlM2QyNmUwN2VjNDliMmU2OTc5NzUzMDc0ODhkNjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-28T01:19:11Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-31T23:59:57Z"}, "message": "add def-ids from nominal types into TraitSelect\n\nThis way we distinguish, in particular, `Foo: Sized`\nand `Bar: Sized`, which fixes #33850.", "tree": {"sha": "216df0247f29f7278fb125a456e7d0d1e0d76af1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/216df0247f29f7278fb125a456e7d0d1e0d76af1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4038b5b3eee3d26e07ec49b2e697975307488d67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4038b5b3eee3d26e07ec49b2e697975307488d67", "html_url": "https://github.com/rust-lang/rust/commit/4038b5b3eee3d26e07ec49b2e697975307488d67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4038b5b3eee3d26e07ec49b2e697975307488d67/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63bb0847bdf58d7d021735184a9dfd48138ad8ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/63bb0847bdf58d7d021735184a9dfd48138ad8ab", "html_url": "https://github.com/rust-lang/rust/commit/63bb0847bdf58d7d021735184a9dfd48138ad8ab"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "2a22e13d31ec4d6a99ba572d0d129e26b22fc1fd", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4038b5b3eee3d26e07ec49b2e697975307488d67/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4038b5b3eee3d26e07ec49b2e697975307488d67/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4038b5b3eee3d26e07ec49b2e697975307488d67", "patch": "@@ -946,7 +946,28 @@ impl<'tcx> TraitPredicate<'tcx> {\n \n     /// Creates the dep-node for selecting/evaluating this trait reference.\n     fn dep_node(&self) -> DepNode<DefId> {\n-        DepNode::TraitSelect(self.def_id(), vec![])\n+        // Ideally, the dep-node would just have all the input types\n+        // in it.  But they are limited to including def-ids. So as an\n+        // approximation we include the def-ids for all nominal types\n+        // found somewhere. This means that we will e.g. conflate the\n+        // dep-nodes for `u32: SomeTrait` and `u64: SomeTrait`, but we\n+        // would have distinct dep-nodes for `Vec<u32>: SomeTrait`,\n+        // `Rc<u32>: SomeTrait`, and `(Vec<u32>, Rc<u32>): SomeTrait`.\n+        // Note that it's always sound to conflate dep-nodes, it jus\n+        // leads to more recompilation.\n+        let def_ids: Vec<_> =\n+            self.input_types()\n+                .iter()\n+                .flat_map(|t| t.walk())\n+                .filter_map(|t| match t.sty {\n+                    ty::TyStruct(adt_def, _) |\n+                    ty::TyEnum(adt_def, _) =>\n+                        Some(adt_def.did),\n+                    _ =>\n+                        None\n+                })\n+                .collect();\n+        DepNode::TraitSelect(self.def_id(), def_ids)\n     }\n \n     pub fn input_types(&self) -> &[Ty<'tcx>] {"}, {"sha": "cc8ef8aedd77bbcf4472c882ba6f45a9f830e525", "filename": "src/test/incremental/struct_add_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4038b5b3eee3d26e07ec49b2e697975307488d67/src%2Ftest%2Fincremental%2Fstruct_add_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4038b5b3eee3d26e07ec49b2e697975307488d67/src%2Ftest%2Fincremental%2Fstruct_add_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_add_field.rs?ref=4038b5b3eee3d26e07ec49b2e697975307488d67", "patch": "@@ -40,7 +40,7 @@ pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")] // FIXME(#33850) should be clean\n+#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "fe29ad66b5fd8da5b8f4ee5621ef99cbfa251b17", "filename": "src/test/incremental/struct_change_field_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4038b5b3eee3d26e07ec49b2e697975307488d67/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4038b5b3eee3d26e07ec49b2e697975307488d67/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs?ref=4038b5b3eee3d26e07ec49b2e697975307488d67", "patch": "@@ -47,7 +47,7 @@ pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     //[cfail2]~^ ERROR attempted access of field `x`\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"cfail2\")] // FIXME(#33850) should be clean\n+#[rustc_clean(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "1a50d515db6d07c08d568c23494b7279e2f9a19c", "filename": "src/test/incremental/struct_change_field_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4038b5b3eee3d26e07ec49b2e697975307488d67/src%2Ftest%2Fincremental%2Fstruct_change_field_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4038b5b3eee3d26e07ec49b2e697975307488d67/src%2Ftest%2Fincremental%2Fstruct_change_field_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_type.rs?ref=4038b5b3eee3d26e07ec49b2e697975307488d67", "patch": "@@ -45,7 +45,7 @@ pub fn use_EmbedX(x: EmbedX) -> u32 {\n     x.x as u32\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")] // FIXME(#33850) should be clean\n+#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "7a4900d1d9a903c5aedcd996ae4a13bdebaf87f6", "filename": "src/test/incremental/struct_change_field_type_cross_crate/b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4038b5b3eee3d26e07ec49b2e697975307488d67/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4038b5b3eee3d26e07ec49b2e697975307488d67/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fb.rs?ref=4038b5b3eee3d26e07ec49b2e697975307488d67", "patch": "@@ -28,7 +28,7 @@ pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")] // FIXME(#33850) should be clean\n+#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "ae6399463b81b138ebb25adb4221b9875aaa48da", "filename": "src/test/incremental/struct_remove_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4038b5b3eee3d26e07ec49b2e697975307488d67/src%2Ftest%2Fincremental%2Fstruct_remove_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4038b5b3eee3d26e07ec49b2e697975307488d67/src%2Ftest%2Fincremental%2Fstruct_remove_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_remove_field.rs?ref=4038b5b3eee3d26e07ec49b2e697975307488d67", "patch": "@@ -44,7 +44,7 @@ pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")] // FIXME(#33850) should be clean\n+#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}]}