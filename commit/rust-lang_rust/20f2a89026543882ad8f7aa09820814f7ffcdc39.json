{"sha": "20f2a89026543882ad8f7aa09820814f7ffcdc39", "node_id": "C_kwDOAAsO6NoAKDIwZjJhODkwMjY1NDM4ODJhZDhmN2FhMDk4MjA4MTRmN2ZmY2RjMzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-05T01:05:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-05T01:05:18Z"}, "message": "Auto merge of #8224 - Jarcho:type_repetition_in_bounds_8162, r=llogiq\n\nFix `type_repetition_in_bounds`\n\nfixes #7360\nfixes #8162\nfixes #8056\n\nchangelog: Check for full equality in `type_repetition_in_bounds` rather than just equal hashes", "tree": {"sha": "82a4f8315b2fa528bbba51ff236c715022daa24f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82a4f8315b2fa528bbba51ff236c715022daa24f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20f2a89026543882ad8f7aa09820814f7ffcdc39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20f2a89026543882ad8f7aa09820814f7ffcdc39", "html_url": "https://github.com/rust-lang/rust/commit/20f2a89026543882ad8f7aa09820814f7ffcdc39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20f2a89026543882ad8f7aa09820814f7ffcdc39/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5dcda2f42cf398df3e3fb486a1b54ee8eba5bf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5dcda2f42cf398df3e3fb486a1b54ee8eba5bf2", "html_url": "https://github.com/rust-lang/rust/commit/d5dcda2f42cf398df3e3fb486a1b54ee8eba5bf2"}, {"sha": "2dd216a186bc3b0cea9b2afe889f99aa9f0a5d9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd216a186bc3b0cea9b2afe889f99aa9f0a5d9f", "html_url": "https://github.com/rust-lang/rust/commit/2dd216a186bc3b0cea9b2afe889f99aa9f0a5d9f"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "f2848ad3790936672f49ab70d02740b9036f02ec", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/20f2a89026543882ad8f7aa09820814f7ffcdc39/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f2a89026543882ad8f7aa09820814f7ffcdc39/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=20f2a89026543882ad8f7aa09820814f7ffcdc39", "patch": "@@ -1,11 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::source::{snippet, snippet_with_applicability};\n-use clippy_utils::SpanlessHash;\n+use clippy_utils::{SpanlessEq, SpanlessHash};\n+use core::hash::{Hash, Hasher};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::Applicability;\n-use rustc_hir::{def::Res, GenericBound, Generics, ParamName, Path, QPath, TyKind, WherePredicate};\n+use rustc_hir::{def::Res, GenericBound, Generics, ParamName, Path, QPath, Ty, TyKind, WherePredicate};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -94,24 +95,40 @@ fn get_trait_res_span_from_bound(bound: &GenericBound<'_>) -> Option<(Res, Span)\n }\n \n impl TraitBounds {\n-    fn check_type_repetition(self, cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n+    fn check_type_repetition<'tcx>(self, cx: &LateContext<'tcx>, gen: &'tcx Generics<'_>) {\n+        struct SpanlessTy<'cx, 'tcx> {\n+            ty: &'tcx Ty<'tcx>,\n+            cx: &'cx LateContext<'tcx>,\n+        }\n+        impl PartialEq for SpanlessTy<'_, '_> {\n+            fn eq(&self, other: &Self) -> bool {\n+                let mut eq = SpanlessEq::new(self.cx);\n+                eq.inter_expr().eq_ty(self.ty, other.ty)\n+            }\n+        }\n+        impl Hash for SpanlessTy<'_, '_> {\n+            fn hash<H: Hasher>(&self, h: &mut H) {\n+                let mut t = SpanlessHash::new(self.cx);\n+                t.hash_ty(self.ty);\n+                h.write_u64(t.finish());\n+            }\n+        }\n+        impl Eq for SpanlessTy<'_, '_> {}\n+\n         if gen.span.from_expansion() {\n             return;\n         }\n-        let hash = |ty| -> u64 {\n-            let mut hasher = SpanlessHash::new(cx);\n-            hasher.hash_ty(ty);\n-            hasher.finish()\n-        };\n-        let mut map: UnhashMap<u64, Vec<&GenericBound<'_>>> = UnhashMap::default();\n+        let mut map: UnhashMap<SpanlessTy<'_, '_>, Vec<&GenericBound<'_>>> = UnhashMap::default();\n         let mut applicability = Applicability::MaybeIncorrect;\n         for bound in gen.where_clause.predicates {\n             if_chain! {\n                 if let WherePredicate::BoundPredicate(ref p) = bound;\n                 if p.bounds.len() as u64 <= self.max_trait_bounds;\n                 if !p.span.from_expansion();\n-                let h = hash(p.bounded_ty);\n-                if let Some(ref v) = map.insert(h, p.bounds.iter().collect::<Vec<_>>());\n+                if let Some(ref v) = map.insert(\n+                    SpanlessTy { ty: p.bounded_ty, cx },\n+                    p.bounds.iter().collect::<Vec<_>>()\n+                );\n \n                 then {\n                     let mut hint_string = format!("}, {"sha": "9df296beb60c98734707551a24803a6f43da73ab", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20f2a89026543882ad8f7aa09820814f7ffcdc39/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f2a89026543882ad8f7aa09820814f7ffcdc39/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=20f2a89026543882ad8f7aa09820814f7ffcdc39", "patch": "@@ -388,7 +388,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n     }\n \n     #[allow(clippy::similar_names)]\n-    fn eq_ty(&mut self, left: &Ty<'_>, right: &Ty<'_>) -> bool {\n+    pub fn eq_ty(&mut self, left: &Ty<'_>, right: &Ty<'_>) -> bool {\n         match (&left.kind, &right.kind) {\n             (&TyKind::Slice(l_vec), &TyKind::Slice(r_vec)) => self.eq_ty(l_vec, r_vec),\n             (&TyKind::Array(lt, ref ll_id), &TyKind::Array(rt, ref rl_id)) => {\n@@ -845,6 +845,8 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n     pub fn hash_path(&mut self, path: &Path<'_>) {\n         match path.res {\n             // constant hash since equality is dependant on inter-expression context\n+            // e.g. The expressions `if let Some(x) = foo() {}` and `if let Some(y) = foo() {}` are considered equal\n+            // even though the binding names are different and they have different `HirId`s.\n             Res::Local(_) => 1_usize.hash(&mut self.s),\n             _ => {\n                 for seg in path.segments {"}, {"sha": "fc740ee11d6ab7b815ab274dd283c76b44055da6", "filename": "tests/ui/type_repetition_in_bounds.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20f2a89026543882ad8f7aa09820814f7ffcdc39/tests%2Fui%2Ftype_repetition_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f2a89026543882ad8f7aa09820814f7ffcdc39/tests%2Fui%2Ftype_repetition_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.rs?ref=20f2a89026543882ad8f7aa09820814f7ffcdc39", "patch": "@@ -69,4 +69,14 @@ mod issue4326 {\n     }\n }\n \n+// Issue #7360\n+struct Foo<T, U>\n+where\n+    T: Clone,\n+    U: Clone,\n+{\n+    t: T,\n+    u: U,\n+}\n+\n fn main() {}"}]}