{"sha": "43bb507d128dc1ea0618ee678245c6bdab561dcf", "node_id": "C_kwDOAAsO6NoAKDQzYmI1MDdkMTI4ZGMxZWEwNjE4ZWU2NzgyNDVjNmJkYWI1NjFkY2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-14T18:26:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-14T18:26:17Z"}, "message": "Rollup merge of #104332 - Elarcis:maybe_uninit_doc_fix, r=m-ou-se\n\nFixed some `_i32` notation in `maybe_uninit`\u2019s doc\n\nThis PR just changed two lines in the documentation for `MaybeUninit`:\n\n```rs\nlet val = 0x12345678i32;\n```\nwas changed to:\n```rs\nlet val = 0x12345678_i32;\n```\nin two doctests, making the values a tad easier to read.\n\nIt does not seem like there are other literals needing this change in the file.", "tree": {"sha": "38873b2e78dacacab4e9f4f3b2c257594e944aa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38873b2e78dacacab4e9f4f3b2c257594e944aa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43bb507d128dc1ea0618ee678245c6bdab561dcf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjcohJCRBK7hj4Ov3rIwAAn8wIABtq1q9oJ55ssCRpoYDq0Yr0\nAEQBNnboUhcVHRjfgRavAq1NqO0vAdHBjfK8/V45JoW5YqQaRstF7aiOaCOslUMh\noKUqEnR2RyAPAzixRBZnAolvx46AnpuNQmnTRIGzriigvT/2ordvg7bLJCOi+imJ\neTBW1XexMfAOK1Uexlkl9YIENclxmjXFktGdw+U+fI34WLMHUmHBTAiNuLOyl6Qr\n+1Ga22fEwg0e7DFAYdxmRWl82Qnp/If6DSWHUbRne7744QYQqKqDytXiNgrIzQiz\nFrt0JLDocs40buXVZMFvmFfsqtPGStfYOJC5OcNJFzftUueJ0mj2U/fhcEGtBe4=\n=b5Gg\n-----END PGP SIGNATURE-----\n", "payload": "tree 38873b2e78dacacab4e9f4f3b2c257594e944aa2\nparent f8e5b1ce9edc94bc2d242a399cf2759e2e2a5c42\nparent d8c0fef18822ae64623ff5ccfe1a0f9661569b0c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668450377 +0100\ncommitter GitHub <noreply@github.com> 1668450377 +0100\n\nRollup merge of #104332 - Elarcis:maybe_uninit_doc_fix, r=m-ou-se\n\nFixed some `_i32` notation in `maybe_uninit`\u2019s doc\n\nThis PR just changed two lines in the documentation for `MaybeUninit`:\n\n```rs\nlet val = 0x12345678i32;\n```\nwas changed to:\n```rs\nlet val = 0x12345678_i32;\n```\nin two doctests, making the values a tad easier to read.\n\nIt does not seem like there are other literals needing this change in the file.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43bb507d128dc1ea0618ee678245c6bdab561dcf", "html_url": "https://github.com/rust-lang/rust/commit/43bb507d128dc1ea0618ee678245c6bdab561dcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43bb507d128dc1ea0618ee678245c6bdab561dcf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8e5b1ce9edc94bc2d242a399cf2759e2e2a5c42", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e5b1ce9edc94bc2d242a399cf2759e2e2a5c42", "html_url": "https://github.com/rust-lang/rust/commit/f8e5b1ce9edc94bc2d242a399cf2759e2e2a5c42"}, {"sha": "d8c0fef18822ae64623ff5ccfe1a0f9661569b0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8c0fef18822ae64623ff5ccfe1a0f9661569b0c", "html_url": "https://github.com/rust-lang/rust/commit/d8c0fef18822ae64623ff5ccfe1a0f9661569b0c"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "3f491836551dc25e07cc4cd15a15402001b69506", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43bb507d128dc1ea0618ee678245c6bdab561dcf/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43bb507d128dc1ea0618ee678245c6bdab561dcf/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=43bb507d128dc1ea0618ee678245c6bdab561dcf", "patch": "@@ -1172,7 +1172,7 @@ impl<T> MaybeUninit<T> {\n     /// #![feature(maybe_uninit_as_bytes, maybe_uninit_slice)]\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// let val = 0x12345678i32;\n+    /// let val = 0x12345678_i32;\n     /// let uninit = MaybeUninit::new(val);\n     /// let uninit_bytes = uninit.as_bytes();\n     /// let bytes = unsafe { MaybeUninit::slice_assume_init_ref(uninit_bytes) };\n@@ -1198,7 +1198,7 @@ impl<T> MaybeUninit<T> {\n     /// #![feature(maybe_uninit_as_bytes)]\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// let val = 0x12345678i32;\n+    /// let val = 0x12345678_i32;\n     /// let mut uninit = MaybeUninit::new(val);\n     /// let uninit_bytes = uninit.as_bytes_mut();\n     /// if cfg!(target_endian = \"little\") {"}]}