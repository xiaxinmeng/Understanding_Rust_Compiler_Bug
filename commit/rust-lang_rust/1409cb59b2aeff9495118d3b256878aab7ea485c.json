{"sha": "1409cb59b2aeff9495118d3b256878aab7ea485c", "node_id": "C_kwDOAAsO6NoAKDE0MDljYjU5YjJhZWZmOTQ5NTExOGQzYjI1Njg3OGFhYjdlYTQ4NWM", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-12-03T05:57:33Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-02-16T12:51:23Z"}, "message": "Enable instcombine for mutable reborrows", "tree": {"sha": "5eefd949ef628a5457d7b50b831ddc3d38972558", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eefd949ef628a5457d7b50b831ddc3d38972558"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1409cb59b2aeff9495118d3b256878aab7ea485c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1409cb59b2aeff9495118d3b256878aab7ea485c", "html_url": "https://github.com/rust-lang/rust/commit/1409cb59b2aeff9495118d3b256878aab7ea485c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1409cb59b2aeff9495118d3b256878aab7ea485c/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b34c7b766a3d64d3f2a9bff06d0e53648a11013", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b34c7b766a3d64d3f2a9bff06d0e53648a11013", "html_url": "https://github.com/rust-lang/rust/commit/4b34c7b766a3d64d3f2a9bff06d0e53648a11013"}], "stats": {"total": 40, "additions": 9, "deletions": 31}, "files": [{"sha": "0534e688703e53bfe165f8a258c5b739d03b55c9", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1409cb59b2aeff9495118d3b256878aab7ea485c/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1409cb59b2aeff9495118d3b256878aab7ea485c/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=1409cb59b2aeff9495118d3b256878aab7ea485c", "patch": "@@ -110,11 +110,7 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n     fn combine_ref_deref(&self, source_info: &SourceInfo, rvalue: &mut Rvalue<'tcx>) {\n         if let Rvalue::Ref(_, _, place) = rvalue {\n             if let Some((base, ProjectionElem::Deref)) = place.as_ref().last_projection() {\n-                if let ty::Ref(_, _, Mutability::Not) =\n-                    base.ty(self.local_decls, self.tcx).ty.kind()\n-                {\n-                    // The dereferenced place must have type `&_`, so that we don't copy `&mut _`.\n-                } else {\n+                if rvalue.ty(self.local_decls, self.tcx) != base.ty(self.local_decls, self.tcx).ty {\n                     return;\n                 }\n "}, {"sha": "1f5c533815d709313cd255171697f3c4aeac27d6", "filename": "tests/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1409cb59b2aeff9495118d3b256878aab7ea485c/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1409cb59b2aeff9495118d3b256878aab7ea485c/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=1409cb59b2aeff9495118d3b256878aab7ea485c", "patch": "@@ -86,16 +86,14 @@\n   \n       bb6: {\n           _10 = ((_7 as Some).0: usize);   // scope 3 at $DIR/funky_arms.rs:+13:17: +13:26\n-          StorageLive(_11);                // scope 3 at $DIR/funky_arms.rs:+15:43: +15:46\n-          _11 = &mut (*_1);                // scope 3 at $DIR/funky_arms.rs:+15:43: +15:46\n           StorageLive(_13);                // scope 3 at $DIR/funky_arms.rs:+15:53: +15:57\n           _13 = _6;                        // scope 3 at $DIR/funky_arms.rs:+15:53: +15:57\n           StorageLive(_14);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:79\n           StorageLive(_15);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n           _15 = _10 as u32 (IntToInt);     // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n           _14 = Add(move _15, const 1_u32); // scope 3 at $DIR/funky_arms.rs:+15:59: +15:79\n           StorageDead(_15);                // scope 3 at $DIR/funky_arms.rs:+15:78: +15:79\n-          _0 = float_to_exponential_common_exact::<T>(move _11, _2, move _13, move _14, _3) -> bb7; // scope 3 at $DIR/funky_arms.rs:+15:9: +15:87\n+          _0 = float_to_exponential_common_exact::<T>(_1, _2, move _13, move _14, _3) -> bb7; // scope 3 at $DIR/funky_arms.rs:+15:9: +15:87\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:26:9: 26:42\n                                            // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Formatter<'b>, &'c T, Sign, u32, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(<ZST>) }\n@@ -104,24 +102,20 @@\n       bb7: {\n           StorageDead(_14);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n           StorageDead(_13);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n-          StorageDead(_11);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n           goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:+13:5: +18:6\n       }\n   \n       bb8: {\n-          StorageLive(_18);                // scope 2 at $DIR/funky_arms.rs:+17:46: +17:49\n-          _18 = &mut (*_1);                // scope 2 at $DIR/funky_arms.rs:+17:46: +17:49\n           StorageLive(_20);                // scope 2 at $DIR/funky_arms.rs:+17:56: +17:60\n           _20 = _6;                        // scope 2 at $DIR/funky_arms.rs:+17:56: +17:60\n-          _0 = float_to_exponential_common_shortest::<T>(move _18, _2, move _20, _3) -> bb9; // scope 2 at $DIR/funky_arms.rs:+17:9: +17:68\n+          _0 = float_to_exponential_common_shortest::<T>(_1, _2, move _20, _3) -> bb9; // scope 2 at $DIR/funky_arms.rs:+17:9: +17:68\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:28:9: 28:45\n                                            // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Formatter<'b>, &'c T, Sign, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb9: {\n           StorageDead(_20);                // scope 2 at $DIR/funky_arms.rs:+17:67: +17:68\n-          StorageDead(_18);                // scope 2 at $DIR/funky_arms.rs:+17:67: +17:68\n           goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:+13:5: +18:6\n       }\n   "}, {"sha": "6441a9668de660764a77b4036b8f405f2407f597", "filename": "tests/mir-opt/inline/issue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1409cb59b2aeff9495118d3b256878aab7ea485c/tests%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1409cb59b2aeff9495118d3b256878aab7ea485c/tests%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir?ref=1409cb59b2aeff9495118d3b256878aab7ea485c", "patch": "@@ -8,18 +8,14 @@ fn a(_1: &mut [T]) -> &mut [T] {\n     let mut _4: &mut [T];                // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n     scope 1 (inlined <[T] as AsMut<[T]>>::as_mut) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:3:7: 3:15\n         debug self => _4;                // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        let mut _5: &mut [T];            // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         StorageLive(_4);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n-        StorageLive(_5);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        _5 = &mut (*_4);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        StorageDead(_5);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        _3 = _4;                         // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         _2 = &mut (*_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:14: +1:15\n         _0 = &mut (*_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15"}, {"sha": "21570a88a6be075325727438e7e93229734edcf3", "filename": "tests/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1409cb59b2aeff9495118d3b256878aab7ea485c/tests%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1409cb59b2aeff9495118d3b256878aab7ea485c/tests%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=1409cb59b2aeff9495118d3b256878aab7ea485c", "patch": "@@ -8,26 +8,18 @@ fn b(_1: &mut Box<T>) -> &mut T {\n     let mut _4: &mut std::boxed::Box<T>; // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n     scope 1 (inlined <Box<T> as AsMut<T>>::as_mut) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:8:7: 8:15\n         debug self => _4;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _5: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _6: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _7: std::boxed::Box<T>;  // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _8: *const T;            // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _5: std::boxed::Box<T>;  // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _6: *const T;            // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         StorageLive(_4);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n-        StorageLive(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageLive(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _7 = deref_copy (*_4);           // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _8 = (((_7.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T); // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _6 = &mut (*_8);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _5 = &mut (*_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageDead(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageDead(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _5 = deref_copy (*_4);           // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _6 = (((_5.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T); // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _3 = &mut (*_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _2 = &mut (*_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:14: +1:15\n         _0 = &mut (*_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15"}]}