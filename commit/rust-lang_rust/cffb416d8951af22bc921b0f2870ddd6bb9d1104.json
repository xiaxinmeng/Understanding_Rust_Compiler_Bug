{"sha": "cffb416d8951af22bc921b0f2870ddd6bb9d1104", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZmI0MTZkODk1MWFmMjJiYzkyMWIwZjI4NzBkZGQ2YmI5ZDExMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-07T20:41:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-07T20:41:39Z"}, "message": "Auto merge of #3927 - rust-lang:rustup, r=Manishearth\n\nRevert compiletest hacks, use latest compiletest\n\nThe libtest changes have been reverted, see https://github.com/rust-lang/rust/pull/59766,  https://github.com/laumann/compiletest-rs/pull/174", "tree": {"sha": "56afdf4ccf89ae471211bf7d90a2d8bc62b08265", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56afdf4ccf89ae471211bf7d90a2d8bc62b08265"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cffb416d8951af22bc921b0f2870ddd6bb9d1104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cffb416d8951af22bc921b0f2870ddd6bb9d1104", "html_url": "https://github.com/rust-lang/rust/commit/cffb416d8951af22bc921b0f2870ddd6bb9d1104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cffb416d8951af22bc921b0f2870ddd6bb9d1104/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e455b046668778b16d3ed41cd2e701951337d72", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e455b046668778b16d3ed41cd2e701951337d72", "html_url": "https://github.com/rust-lang/rust/commit/0e455b046668778b16d3ed41cd2e701951337d72"}, {"sha": "4c7c39acbca50f20454349216746a1cdda46035f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c7c39acbca50f20454349216746a1cdda46035f", "html_url": "https://github.com/rust-lang/rust/commit/4c7c39acbca50f20454349216746a1cdda46035f"}], "stats": {"total": 51, "additions": 11, "deletions": 40}, "files": [{"sha": "896b9660ea74ba02c7d2ef819314d68a5058d1df", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cffb416d8951af22bc921b0f2870ddd6bb9d1104/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cffb416d8951af22bc921b0f2870ddd6bb9d1104/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=cffb416d8951af22bc921b0f2870ddd6bb9d1104", "patch": "@@ -47,8 +47,7 @@ rustc_tools_util = { version = \"0.1.1\", path = \"rustc_tools_util\"}\n [dev-dependencies]\n clippy_dev = { version = \"0.0.1\", path = \"clippy_dev\" }\n cargo_metadata = \"0.7.1\"\n-compiletest_rs = { version = \"=0.3.19\", features = [\"tmp\", \"stable\"] }\n-libtest = \"0.0.1\"\n+compiletest_rs = { version = \"0.3.21\" }\n lazy_static = \"1.0\"\n serde_derive = \"1.0\"\n clippy-mini-macro-test = { version = \"0.2\", path = \"mini-macro\" }"}, {"sha": "bafd64e934f3ae26fcc12f4e468d27c010c07d43", "filename": "tests/compile-test.rs", "status": "modified", "additions": 10, "deletions": 38, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cffb416d8951af22bc921b0f2870ddd6bb9d1104/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cffb416d8951af22bc921b0f2870ddd6bb9d1104/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=cffb416d8951af22bc921b0f2870ddd6bb9d1104", "patch": "@@ -1,7 +1,7 @@\n #![feature(test)]\n \n use compiletest_rs as compiletest;\n-use libtest::TestDescAndFn;\n+extern crate test;\n \n use std::env::{set_var, var};\n use std::ffi::OsStr;\n@@ -74,12 +74,16 @@ fn run_mode(mode: &str, dir: PathBuf) {\n     compiletest::run_tests(&cfg);\n }\n \n-#[warn(clippy::identity_conversion)]\n-fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<TestDescAndFn>) -> Result<bool, io::Error> {\n+#[allow(clippy::identity_conversion)]\n+fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<test::TestDescAndFn>) -> Result<bool, io::Error> {\n     let mut result = true;\n     let opts = compiletest::test_opts(config);\n     for dir in fs::read_dir(&config.src_base)? {\n-        let dir_path = dir.unwrap().path();\n+        let dir = dir?;\n+        if !dir.file_type()?.is_dir() {\n+            continue;\n+        }\n+        let dir_path = dir.path();\n         set_var(\"CARGO_MANIFEST_DIR\", &dir_path);\n         for file in fs::read_dir(&dir_path)? {\n             let file = file?;\n@@ -98,25 +102,9 @@ fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<TestDescAndFn>\n             let test_name = compiletest::make_test_name(&config, &paths);\n             let index = tests\n                 .iter()\n-                .position(|test| test.desc.name.to_string() == test_name.to_string())\n+                .position(|test| test.desc.name == test_name)\n                 .expect(\"The test should be in there\");\n-            let opts = libtest::TestOpts {\n-                list: opts.list,\n-                filter: opts.filter.clone(),\n-                filter_exact: opts.filter_exact,\n-                exclude_should_panic: Default::default(),\n-                run_ignored: libtest::RunIgnored::No,\n-                run_tests: opts.run_tests,\n-                bench_benchmarks: opts.bench_benchmarks,\n-                logfile: opts.logfile.clone(),\n-                nocapture: opts.nocapture,\n-                color: libtest::ColorConfig::AutoColor,\n-                format: libtest::OutputFormat::Pretty,\n-                test_threads: opts.test_threads,\n-                skip: opts.skip.clone(),\n-                options: libtest::Options::new(),\n-            };\n-            result &= libtest::run_tests_console(&opts, vec![tests.swap_remove(index)])?;\n+            result &= test::run_tests_console(&opts, vec![tests.swap_remove(index)])?;\n         }\n     }\n     Ok(result)\n@@ -127,22 +115,6 @@ fn run_ui_toml() {\n     let config = config(\"ui\", path);\n     let tests = compiletest::make_tests(&config);\n \n-    let tests = tests\n-        .into_iter()\n-        .map(|test| {\n-            libtest::TestDescAndFn {\n-                desc: libtest::TestDesc {\n-                    name: libtest::TestName::DynTestName(test.desc.name.to_string()),\n-                    ignore: test.desc.ignore,\n-                    allow_fail: test.desc.allow_fail,\n-                    should_panic: libtest::ShouldPanic::No,\n-                },\n-                // oli obk giving up\n-                testfn: unsafe { std::mem::transmute(test.testfn) },\n-            }\n-        })\n-        .collect();\n-\n     let res = run_ui_toml_tests(&config, tests);\n     match res {\n         Ok(true) => {},"}]}