{"sha": "a3b6e5705cff9c69362b7ed2d273ffc148b564db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYjZlNTcwNWNmZjljNjkzNjJiN2VkMmQyNzNmZmMxNDhiNTY0ZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-10T12:18:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-10T12:18:53Z"}, "message": "Auto merge of #65324 - Centril:organize-syntax, r=petrochenkov\n\nSplit libsyntax apart\n\nIn this PR the general idea is to separate the AST, parser, and friends by a more data / logic structure (tho not fully realized!) by separating out the parser and macro expansion code from libsyntax. Specifically have now three crates instead of one (libsyntax):\n\n- libsyntax:\n\n   - concrete syntax tree (`syntax::ast`)\n\n   - definition of tokens and token-streams (`syntax::{token, tokenstream}`) -- used by `syntax::ast`\n\n   - visitors (`syntax::visit`, `syntax::mut_visit`)\n\n   - shared definitions between `libsyntax_expand`\n\n   - feature gating (`syntax::feature_gate`) -- we could possibly move this out to its own crater later.\n\n   - attribute and meta item utilities, including used-marking (`syntax::attr`)\n\n   - pretty printer (`syntax::print`) -- this should possibly be moved out later. For now I've reduced down the dependencies to a single essential one which could be broken via `ParseSess`. This entails that e.g. `Debug` impls for `Path` cannot reference the pretty printer.\n\n   - definition of `ParseSess` (`syntax::sess`) -- this is used by `syntax::{attr, print, feature_gate}` and is a common definition used by the parser and other things like librustc.\n\n   - the `syntax::source_map` -- this includes definitions used by `syntax::ast` and other things but could ostensibly be moved `syntax_pos` since that is more related to this module.\n\n   - a smattering of misc utilities not sufficiently important to itemize -- some of these could be moved to where they are used (often a single place) but I wanted to limit the scope of this PR.\n\n- librustc_parse:\n\n   - parser (`rustc_parse::parser`) -- reading a file and such are defined in the crate root tho.\n\n   - lexer (`rustc_parse::lexer`)\n\n   - validation of meta grammar (post-expansion) in (`rustc_parse::validate_attr`)\n\n- libsyntax_expand -- this defines the infra for macro expansion and conditional compilation but this is not libsyntax_ext; we might want to merge them later but currently libsyntax_expand is depended on by librustc_metadata which libsyntax_ext is not.\n\n   - conditional compilation (`syntax_expand::config`) -- moved from `syntax::config` to here\n\n   - the bulk of this crate is made up of the old `syntax::ext`\n\nr? @estebank", "tree": {"sha": "a35b1a91d6a3c92e9c6d9f8bb5b2384044dd975d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a35b1a91d6a3c92e9c6d9f8bb5b2384044dd975d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3b6e5705cff9c69362b7ed2d273ffc148b564db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b6e5705cff9c69362b7ed2d273ffc148b564db", "html_url": "https://github.com/rust-lang/rust/commit/a3b6e5705cff9c69362b7ed2d273ffc148b564db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3b6e5705cff9c69362b7ed2d273ffc148b564db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86c28325ff813e5cf4d0cab320a7c9f6fb0766b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/86c28325ff813e5cf4d0cab320a7c9f6fb0766b8", "html_url": "https://github.com/rust-lang/rust/commit/86c28325ff813e5cf4d0cab320a7c9f6fb0766b8"}, {"sha": "4ae2728fa8052915414127dce28245eb8f70842a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae2728fa8052915414127dce28245eb8f70842a", "html_url": "https://github.com/rust-lang/rust/commit/4ae2728fa8052915414127dce28245eb8f70842a"}], "stats": {"total": 1560, "additions": 859, "deletions": 701}, "files": [{"sha": "4ccbe752eb0483f0d935eef923d59de9661287d4", "filename": "Cargo.lock", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -3504,6 +3504,7 @@ dependencies = [\n  \"rustc_lint\",\n  \"rustc_metadata\",\n  \"rustc_mir\",\n+ \"rustc_parse\",\n  \"rustc_plugin\",\n  \"rustc_plugin_impl\",\n  \"rustc_resolve\",\n@@ -3572,6 +3573,7 @@ dependencies = [\n  \"rustc_lint\",\n  \"rustc_metadata\",\n  \"rustc_mir\",\n+ \"rustc_parse\",\n  \"rustc_passes\",\n  \"rustc_plugin_impl\",\n  \"rustc_privacy\",\n@@ -3649,6 +3651,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_index\",\n+ \"rustc_parse\",\n  \"rustc_target\",\n  \"serialize\",\n  \"smallvec 1.0.0\",\n@@ -3692,6 +3695,21 @@ dependencies = [\n  \"core\",\n ]\n \n+[[package]]\n+name = \"rustc_parse\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"bitflags\",\n+ \"log\",\n+ \"rustc_data_structures\",\n+ \"rustc_errors\",\n+ \"rustc_lexer\",\n+ \"rustc_target\",\n+ \"smallvec 1.0.0\",\n+ \"syntax\",\n+ \"syntax_pos\",\n+]\n+\n [[package]]\n name = \"rustc_passes\"\n version = \"0.0.0\"\n@@ -3701,6 +3719,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_index\",\n+ \"rustc_parse\",\n  \"rustc_target\",\n  \"syntax\",\n  \"syntax_pos\",\n@@ -3763,6 +3782,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n+ \"rustc_parse\",\n  \"serde_json\",\n  \"syntax\",\n  \"syntax_pos\",\n@@ -4372,14 +4392,11 @@ dependencies = [\n name = \"syntax_expand\"\n version = \"0.0.0\"\n dependencies = [\n- \"bitflags\",\n- \"lazy_static 1.3.0\",\n  \"log\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n- \"rustc_index\",\n  \"rustc_lexer\",\n- \"scoped-tls\",\n+ \"rustc_parse\",\n  \"serialize\",\n  \"smallvec 1.0.0\",\n  \"syntax\",\n@@ -4394,6 +4411,7 @@ dependencies = [\n  \"log\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_parse\",\n  \"rustc_target\",\n  \"smallvec 1.0.0\",\n  \"syntax\","}, {"sha": "92e8e92d02a74e4cb737b5ba96c1998343307c2e", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -26,7 +26,7 @@ use syntax::expand::allocator::AllocatorKind;\n use syntax::feature_gate::{self, AttributeType};\n use syntax::json::JsonEmitter;\n use syntax::source_map;\n-use syntax::sess::ParseSess;\n+use syntax::sess::{ParseSess, ProcessCfgMod};\n use syntax::symbol::Symbol;\n use syntax_pos::{MultiSpan, Span};\n use crate::util::profiling::{SelfProfiler, SelfProfilerRef};\n@@ -934,6 +934,7 @@ pub fn build_session(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n     registry: errors::registry::Registry,\n+    process_cfg_mod: ProcessCfgMod,\n ) -> Session {\n     let file_path_mapping = sopts.file_path_mapping();\n \n@@ -944,6 +945,7 @@ pub fn build_session(\n         Lrc::new(source_map::SourceMap::new(file_path_mapping)),\n         DiagnosticOutput::Default,\n         Default::default(),\n+        process_cfg_mod,\n     )\n }\n \n@@ -1022,6 +1024,7 @@ pub fn build_session_with_source_map(\n     source_map: Lrc<source_map::SourceMap>,\n     diagnostics_output: DiagnosticOutput,\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n+    process_cfg_mod: ProcessCfgMod,\n ) -> Session {\n     // FIXME: This is not general enough to make the warning lint completely override\n     // normal diagnostic warnings, since the warning lint can also be denied and changed\n@@ -1062,7 +1065,14 @@ pub fn build_session_with_source_map(\n         },\n     );\n \n-    build_session_(sopts, local_crate_source_file, diagnostic_handler, source_map, lint_caps)\n+    build_session_(\n+        sopts,\n+        local_crate_source_file,\n+        diagnostic_handler,\n+        source_map,\n+        lint_caps,\n+        process_cfg_mod,\n+    )\n }\n \n fn build_session_(\n@@ -1071,6 +1081,7 @@ fn build_session_(\n     span_diagnostic: errors::Handler,\n     source_map: Lrc<source_map::SourceMap>,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n+    process_cfg_mod: ProcessCfgMod,\n ) -> Session {\n     let self_profiler =\n         if let SwitchWithOptPath::Enabled(ref d) = sopts.debugging_opts.self_profile {\n@@ -1109,6 +1120,7 @@ fn build_session_(\n     let parse_sess = ParseSess::with_span_handler(\n         span_diagnostic,\n         source_map,\n+        process_cfg_mod,\n     );\n     let sysroot = match &sopts.maybe_sysroot {\n         Some(sysroot) => sysroot.clone(),"}, {"sha": "f1565a2bd0a5f16d514e74bd8e4648d23af58bb2", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -21,6 +21,7 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_mir = { path = \"../librustc_mir\" }\n+rustc_parse = { path = \"../librustc_parse\" }\n rustc_plugin = { path = \"../librustc_plugin/deprecated\" } # To get this in the sysroot\n rustc_plugin_impl = { path = \"../librustc_plugin\" }\n rustc_save_analysis = { path = \"../librustc_save_analysis\" }"}, {"sha": "f2da4ae71f56aa63f80dd536ae9df143c08d1d48", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -63,7 +63,6 @@ use std::time::Instant;\n use syntax::ast;\n use syntax::source_map::FileLoader;\n use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n-use syntax::parse;\n use syntax::symbol::sym;\n use syntax_pos::{DUMMY_SP, FileName};\n \n@@ -1062,14 +1061,16 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n }\n \n fn parse_crate_attrs<'a>(sess: &'a Session, input: &Input) -> PResult<'a, Vec<ast::Attribute>> {\n-    match *input {\n-        Input::File(ref ifile) => {\n-            parse::parse_crate_attrs_from_file(ifile, &sess.parse_sess)\n+    match input {\n+        Input::File(ifile) => {\n+            rustc_parse::parse_crate_attrs_from_file(ifile, &sess.parse_sess)\n         }\n-        Input::Str { ref name, ref input } => {\n-            parse::parse_crate_attrs_from_source_str(name.clone(),\n-                                                     input.clone(),\n-                                                     &sess.parse_sess)\n+        Input::Str { name, input } => {\n+            rustc_parse::parse_crate_attrs_from_source_str(\n+                name.clone(),\n+                input.clone(),\n+                &sess.parse_sess,\n+            )\n         }\n     }\n }"}, {"sha": "de59882bbdf957f851818b73de4ea98d2c97962c", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -16,6 +16,7 @@ smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }\n syntax_expand = { path = \"../libsyntax_expand\" }\n+rustc_parse = { path = \"../librustc_parse\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc = { path = \"../librustc\" }"}, {"sha": "02068b2ce388d6a70f21c606cdfc02465c5c6123", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -11,14 +11,15 @@ use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::OnDrop;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n+use rustc_parse::new_parser_from_source_str;\n use std::path::PathBuf;\n use std::result;\n use std::sync::{Arc, Mutex};\n-use syntax::{self, parse};\n use syntax::ast::{self, MetaItemKind};\n use syntax::token;\n use syntax::source_map::{FileName, FileLoader, SourceMap};\n use syntax::sess::ParseSess;\n+use syntax_expand::config::process_configure_mod;\n use syntax_pos::edition;\n \n pub type Result<T> = result::Result<T, ErrorReported>;\n@@ -64,9 +65,9 @@ impl Compiler {\n pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String>)> {\n     syntax::with_default_globals(move || {\n         let cfg = cfgspecs.into_iter().map(|s| {\n-            let sess = ParseSess::with_silent_emitter();\n+            let sess = ParseSess::with_silent_emitter(process_configure_mod);\n             let filename = FileName::cfg_spec_source_code(&s);\n-            let mut parser = parse::new_parser_from_source_str(&sess, filename, s.to_string());\n+            let mut parser = new_parser_from_source_str(&sess, filename, s.to_string());\n \n             macro_rules! error {($reason: expr) => {\n                 early_error(ErrorOutputType::default(),"}, {"sha": "453007c564246b8aee68be8d92c845c04f021bd6", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -27,6 +27,7 @@ use rustc_errors::PResult;\n use rustc_incremental;\n use rustc_metadata::cstore;\n use rustc_mir as mir;\n+use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n use rustc_passes::{self, ast_validation, hir_stats, layout_test};\n use rustc_plugin as plugin;\n use rustc_plugin::registry::Registry;\n@@ -38,7 +39,6 @@ use syntax::{self, ast, visit};\n use syntax::early_buffered_lints::BufferedEarlyLint;\n use syntax_expand::base::{NamedSyntaxExtension, ExtCtxt};\n use syntax::mut_visit::MutVisitor;\n-use syntax::parse;\n use syntax::util::node_count::NodeCounter;\n use syntax::symbol::Symbol;\n use syntax_pos::FileName;\n@@ -61,12 +61,11 @@ pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n     let krate = time(sess, \"parsing\", || {\n         let _prof_timer = sess.prof.generic_activity(\"parse_crate\");\n \n-        match *input {\n-            Input::File(ref file) => parse::parse_crate_from_file(file, &sess.parse_sess),\n-            Input::Str {\n-                ref input,\n-                ref name,\n-            } => parse::parse_crate_from_source_str(name.clone(), input.clone(), &sess.parse_sess),\n+        match input {\n+            Input::File(file) => parse_crate_from_file(file, &sess.parse_sess),\n+            Input::Str { input, name } => {\n+                parse_crate_from_source_str(name.clone(), input.clone(), &sess.parse_sess)\n+            }\n         }\n     })?;\n \n@@ -182,7 +181,7 @@ pub fn register_plugins<'a>(\n         )\n     });\n \n-    let (krate, features) = syntax::config::features(\n+    let (krate, features) = syntax_expand::config::features(\n         krate,\n         &sess.parse_sess,\n         sess.edition(),\n@@ -489,7 +488,7 @@ pub fn lower_to_hir(\n ) -> Result<hir::map::Forest> {\n     // Lower AST to HIR.\n     let hir_forest = time(sess, \"lowering AST -> HIR\", || {\n-        let nt_to_tokenstream = syntax::parse::nt_to_tokenstream;\n+        let nt_to_tokenstream = rustc_parse::nt_to_tokenstream;\n         let hir_crate = lower_crate(sess, &dep_graph, &krate, resolver, nt_to_tokenstream);\n \n         if sess.opts.debugging_opts.hir_stats {"}, {"sha": "8c1dac21576f7b9f2ffaf856161499af8fdaeb3e", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 24, "deletions": 35, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -8,7 +8,7 @@ use rustc::session::config::{build_configuration, build_session_options, to_crat\n use rustc::session::config::{LtoCli, LinkerPluginLto, SwitchWithOptPath, ExternEntry};\n use rustc::session::config::{Externs, OutputType, OutputTypes, SymbolManglingVersion};\n use rustc::session::config::{rustc_optgroups, Options, ErrorOutputType, Passes};\n-use rustc::session::build_session;\n+use rustc::session::{build_session, Session};\n use rustc::session::search_paths::SearchPath;\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n@@ -17,16 +17,23 @@ use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel};\n use syntax::symbol::sym;\n use syntax::edition::{Edition, DEFAULT_EDITION};\n use syntax;\n+use syntax_expand::config::process_configure_mod;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{ColorConfig, emitter::HumanReadableErrorType, registry};\n \n-pub fn build_session_options_and_crate_config(\n-    matches: &getopts::Matches,\n-) -> (Options, FxHashSet<(String, Option<String>)>) {\n-    (\n-        build_session_options(matches),\n-        parse_cfgspecs(matches.opt_strs(\"cfg\")),\n-    )\n+type CfgSpecs = FxHashSet<(String, Option<String>)>;\n+\n+fn build_session_options_and_crate_config(matches: getopts::Matches) -> (Options, CfgSpecs) {\n+    let sessopts = build_session_options(&matches);\n+    let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"));\n+    (sessopts, cfg)\n+}\n+\n+fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n+    let registry = registry::Registry::new(&[]);\n+    let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n+    let sess = build_session(sessopts, None, registry, process_configure_mod);\n+    (sess, cfg)\n }\n \n fn new_public_extern_entry<S, I>(locations: I) -> ExternEntry\n@@ -59,31 +66,19 @@ fn mk_map<K: Ord, V>(entries: Vec<(K, V)>) -> BTreeMap<K, V> {\n #[test]\n fn test_switch_implies_cfg_test() {\n     syntax::with_default_globals(|| {\n-        let matches = &match optgroups().parse(&[\"--test\".to_string()]) {\n-            Ok(m) => m,\n-            Err(f) => panic!(\"test_switch_implies_cfg_test: {}\", f),\n-        };\n-        let registry = registry::Registry::new(&[]);\n-        let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n-        let sess = build_session(sessopts, None, registry);\n+        let matches = optgroups().parse(&[\"--test\".to_string()]).unwrap();\n+        let (sess, cfg) = mk_session(matches);\n         let cfg = build_configuration(&sess, to_crate_config(cfg));\n         assert!(cfg.contains(&(sym::test, None)));\n     });\n }\n \n-// When the user supplies --test and --cfg test, don't implicitly add\n-// another --cfg test\n+// When the user supplies --test and --cfg test, don't implicitly add another --cfg test\n #[test]\n fn test_switch_implies_cfg_test_unless_cfg_test() {\n     syntax::with_default_globals(|| {\n-        let matches = &match optgroups().parse(&[\"--test\".to_string(),\n-                                                 \"--cfg=test\".to_string()]) {\n-            Ok(m) => m,\n-            Err(f) => panic!(\"test_switch_implies_cfg_test_unless_cfg_test: {}\", f),\n-        };\n-        let registry = registry::Registry::new(&[]);\n-        let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n-        let sess = build_session(sessopts, None, registry);\n+        let matches = optgroups().parse(&[\"--test\".to_string(), \"--cfg=test\".to_string()]).unwrap();\n+        let (sess, cfg) = mk_session(matches);\n         let cfg = build_configuration(&sess, to_crate_config(cfg));\n         let mut test_items = cfg.iter().filter(|&&(name, _)| name == sym::test);\n         assert!(test_items.next().is_some());\n@@ -95,27 +90,21 @@ fn test_switch_implies_cfg_test_unless_cfg_test() {\n fn test_can_print_warnings() {\n     syntax::with_default_globals(|| {\n         let matches = optgroups().parse(&[\"-Awarnings\".to_string()]).unwrap();\n-        let registry = registry::Registry::new(&[]);\n-        let (sessopts, _) = build_session_options_and_crate_config(&matches);\n-        let sess = build_session(sessopts, None, registry);\n+        let (sess, _) = mk_session(matches);\n         assert!(!sess.diagnostic().can_emit_warnings());\n     });\n \n     syntax::with_default_globals(|| {\n         let matches = optgroups()\n             .parse(&[\"-Awarnings\".to_string(), \"-Dwarnings\".to_string()])\n             .unwrap();\n-        let registry = registry::Registry::new(&[]);\n-        let (sessopts, _) = build_session_options_and_crate_config(&matches);\n-        let sess = build_session(sessopts, None, registry);\n+        let (sess, _) = mk_session(matches);\n         assert!(sess.diagnostic().can_emit_warnings());\n     });\n \n     syntax::with_default_globals(|| {\n         let matches = optgroups().parse(&[\"-Adead_code\".to_string()]).unwrap();\n-        let registry = registry::Registry::new(&[]);\n-        let (sessopts, _) = build_session_options_and_crate_config(&matches);\n-        let sess = build_session(sessopts, None, registry);\n+        let (sess, _) = mk_session(matches);\n         assert!(sess.diagnostic().can_emit_warnings());\n     });\n }\n@@ -704,6 +693,6 @@ fn test_edition_parsing() {\n     let matches = optgroups()\n         .parse(&[\"--edition=2018\".to_string()])\n         .unwrap();\n-    let (sessopts, _) = build_session_options_and_crate_config(&matches);\n+    let (sessopts, _) = build_session_options_and_crate_config(matches);\n     assert!(sessopts.edition == Edition::Edition2018)\n }"}, {"sha": "115345955aea330824320de10f86a357ec8ffb71", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -36,6 +36,7 @@ use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::source_map::{FileLoader, RealFileLoader, SourceMap};\n use syntax::symbol::{Symbol, sym};\n use syntax::{self, ast, attr};\n+use syntax_expand::config::process_configure_mod;\n use syntax_pos::edition::Edition;\n #[cfg(not(parallel_compiler))]\n use std::{thread, panic};\n@@ -49,6 +50,7 @@ pub fn diagnostics_registry() -> Registry {\n     // FIXME: need to figure out a way to get these back in here\n     // all_errors.extend_from_slice(get_codegen_backend(sess).diagnostics());\n     all_errors.extend_from_slice(&rustc_metadata::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_parse::error_codes::DIAGNOSTICS);\n     all_errors.extend_from_slice(&rustc_passes::error_codes::DIAGNOSTICS);\n     all_errors.extend_from_slice(&rustc_plugin::error_codes::DIAGNOSTICS);\n     all_errors.extend_from_slice(&rustc_mir::error_codes::DIAGNOSTICS);\n@@ -103,6 +105,7 @@ pub fn create_session(\n         source_map.clone(),\n         diagnostic_output,\n         lint_caps,\n+        process_configure_mod,\n     );\n \n     let codegen_backend = get_codegen_backend(&sess);"}, {"sha": "3cecb4317b19a5f660875ab8dad86fec8797a063", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,7 +1,7 @@\n //! Low-level Rust lexer.\n //!\n //! Tokens produced by this lexer are not yet ready for parsing the Rust syntax,\n-//! for that see `libsyntax::parse::lexer`, which converts this basic token stream\n+//! for that see `librustc_parse::lexer`, which converts this basic token stream\n //! into wide tokens used by actual parser.\n //!\n //! The purpose of this crate is to convert raw sources into a labeled sequence"}, {"sha": "b1431563f21cbc90461246548710103beb1c2b7f", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -23,4 +23,5 @@ rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n stable_deref_trait = \"1.0.0\"\n syntax = { path = \"../libsyntax\" }\n syntax_expand = { path = \"../libsyntax_expand\" }\n+rustc_parse = { path = \"../librustc_parse\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "015866548cd3846d3c3e191b647fc7113ab50c83", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -18,6 +18,8 @@ use rustc::hir::map::{DefKey, DefPath, DefPathHash};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::util::nodemap::DefIdMap;\n use rustc_data_structures::svh::Svh;\n+use rustc_parse::source_file_to_stream;\n+use rustc_parse::parser::emit_unclosed_delims;\n \n use smallvec::SmallVec;\n use std::any::Any;\n@@ -27,8 +29,6 @@ use std::sync::Arc;\n use syntax::ast;\n use syntax::attr;\n use syntax::source_map;\n-use syntax::parse::source_file_to_stream;\n-use syntax::parse::parser::emit_unclosed_delims;\n use syntax::source_map::Spanned;\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, FileName};"}, {"sha": "4579f9d472d81fb1d0d7b76a1b3d9cfd2a4b53a3", "filename": "src/librustc_parse/Cargo.toml", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2FCargo.toml?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -0,0 +1,21 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_parse\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+name = \"rustc_parse\"\n+path = \"lib.rs\"\n+doctest = false\n+\n+[dependencies]\n+bitflags = \"1.0\"\n+log = \"0.4\"\n+syntax_pos = { path = \"../libsyntax_pos\" }\n+syntax = { path = \"../libsyntax\" }\n+errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_lexer = { path = \"../librustc_lexer\" }\n+rustc_target = { path = \"../librustc_target\" }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "cf74e09a3772d3d567108cf67bbe89671934f2f4", "filename": "src/librustc_parse/error_codes.rs", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Ferror_codes.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -0,0 +1,174 @@\n+// Error messages for EXXXX errors.\n+// Each message should start and end with a new line, and be wrapped to 80\n+// characters.  In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use\n+// `:set tw=0` to disable.\n+syntax::register_diagnostics! {\n+\n+E0178: r##\"\n+In types, the `+` type operator has low precedence, so it is often necessary\n+to use parentheses.\n+\n+For example:\n+\n+```compile_fail,E0178\n+trait Foo {}\n+\n+struct Bar<'a> {\n+    w: &'a Foo + Copy,   // error, use &'a (Foo + Copy)\n+    x: &'a Foo + 'a,     // error, use &'a (Foo + 'a)\n+    y: &'a mut Foo + 'a, // error, use &'a mut (Foo + 'a)\n+    z: fn() -> Foo + 'a, // error, use fn() -> (Foo + 'a)\n+}\n+```\n+\n+More details can be found in [RFC 438].\n+\n+[RFC 438]: https://github.com/rust-lang/rfcs/pull/438\n+\"##,\n+\n+E0583: r##\"\n+A file wasn't found for an out-of-line module.\n+\n+Erroneous code example:\n+\n+```ignore (compile_fail not working here; see Issue #43707)\n+mod file_that_doesnt_exist; // error: file not found for module\n+\n+fn main() {}\n+```\n+\n+Please be sure that a file corresponding to the module exists. If you\n+want to use a module named `file_that_doesnt_exist`, you need to have a file\n+named `file_that_doesnt_exist.rs` or `file_that_doesnt_exist/mod.rs` in the\n+same directory.\n+\"##,\n+\n+E0584: r##\"\n+A doc comment that is not attached to anything has been encountered.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0584\n+trait Island {\n+    fn lost();\n+\n+    /// I'm lost!\n+}\n+```\n+\n+A little reminder: a doc comment has to be placed before the item it's supposed\n+to document. So if you want to document the `Island` trait, you need to put a\n+doc comment before it, not inside it. Same goes for the `lost` method: the doc\n+comment needs to be before it:\n+\n+```\n+/// I'm THE island!\n+trait Island {\n+    /// I'm lost!\n+    fn lost();\n+}\n+```\n+\"##,\n+\n+E0585: r##\"\n+A documentation comment that doesn't document anything was found.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0585\n+fn main() {\n+    // The following doc comment will fail:\n+    /// This is a useless doc comment!\n+}\n+```\n+\n+Documentation comments need to be followed by items, including functions,\n+types, modules, etc. Examples:\n+\n+```\n+/// I'm documenting the following struct:\n+struct Foo;\n+\n+/// I'm documenting the following function:\n+fn foo() {}\n+```\n+\"##,\n+\n+E0586: r##\"\n+An inclusive range was used with no end.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0586\n+fn main() {\n+    let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n+    let x = &tmp[1..=]; // error: inclusive range was used with no end\n+}\n+```\n+\n+An inclusive range needs an end in order to *include* it. If you just need a\n+start and no end, use a non-inclusive range (with `..`):\n+\n+```\n+fn main() {\n+    let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n+    let x = &tmp[1..]; // ok!\n+}\n+```\n+\n+Or put an end to your inclusive range:\n+\n+```\n+fn main() {\n+    let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n+    let x = &tmp[1..=3]; // ok!\n+}\n+```\n+\"##,\n+\n+E0704: r##\"\n+This error indicates that a incorrect visibility restriction was specified.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0704\n+mod foo {\n+    pub(foo) struct Bar {\n+        x: i32\n+    }\n+}\n+```\n+\n+To make struct `Bar` only visible in module `foo` the `in` keyword should be\n+used:\n+```\n+mod foo {\n+    pub(in crate::foo) struct Bar {\n+        x: i32\n+    }\n+}\n+# fn main() {}\n+```\n+\n+For more information see the Rust Reference on [Visibility].\n+\n+[Visibility]: https://doc.rust-lang.org/reference/visibility-and-privacy.html\n+\"##,\n+\n+E0743: r##\"\n+C-variadic has been used on a non-foreign function.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0743\n+fn foo2(x: u8, ...) {} // error!\n+```\n+\n+Only foreign functions can use C-variadic (`...`). It is used to give an\n+undefined number of parameters to a given function (like `printf` in C). The\n+equivalent in Rust would be to use macros directly.\n+\"##,\n+\n+;\n+\n+}"}, {"sha": "5de63cb39d16b1555ab377dfad440b6caeb3d1a6", "filename": "src/librustc_parse/lexer/mod.rs", "status": "renamed", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,7 +1,7 @@\n-use crate::token::{self, Token, TokenKind};\n-use crate::sess::ParseSess;\n-use crate::symbol::{sym, Symbol};\n-use crate::util::comments;\n+use syntax::token::{self, Token, TokenKind};\n+use syntax::sess::ParseSess;\n+use syntax::symbol::{sym, Symbol};\n+use syntax::util::comments;\n \n use errors::{FatalError, DiagnosticBuilder};\n use syntax_pos::{BytePos, Pos, Span};\n@@ -13,9 +13,6 @@ use std::convert::TryInto;\n use rustc_data_structures::sync::Lrc;\n use log::debug;\n \n-#[cfg(test)]\n-mod tests;\n-\n mod tokentrees;\n mod unicode_chars;\n mod unescape_error_reporting;\n@@ -35,7 +32,8 @@ pub struct StringReader<'a> {\n     /// Initial position, read-only.\n     start_pos: BytePos,\n     /// The absolute offset within the source_map of the current character.\n-    pos: BytePos,\n+    // FIXME(#64197): `pub` is needed by tests for now.\n+    pub pos: BytePos,\n     /// Stop reading src at this index.\n     end_src_index: usize,\n     /// Source text to tokenize.", "previous_filename": "src/libsyntax/parse/lexer/mod.rs"}, {"sha": "1353591308b2e9446a10a99c26b59ae31cdceeb0", "filename": "src/librustc_parse/lexer/tokentrees.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -3,9 +3,9 @@ use syntax_pos::Span;\n \n use super::{StringReader, UnmatchedBrace};\n \n-use crate::print::pprust::token_to_string;\n-use crate::token::{self, Token};\n-use crate::tokenstream::{DelimSpan, IsJoint::{self, *}, TokenStream, TokenTree, TreeAndJoint};\n+use syntax::print::pprust::token_to_string;\n+use syntax::token::{self, Token};\n+use syntax::tokenstream::{DelimSpan, IsJoint::{self, *}, TokenStream, TokenTree, TreeAndJoint};\n \n use errors::PResult;\n ", "previous_filename": "src/libsyntax/parse/lexer/tokentrees.rs"}, {"sha": "a5749d07e62b5c25fa2195cc369b19c39735032c", "filename": "src/librustc_parse/lexer/unescape_error_reporting.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Funescape_error_reporting.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -6,7 +6,7 @@ use std::iter::once;\n use rustc_lexer::unescape::{EscapeError, Mode};\n use syntax_pos::{Span, BytePos};\n \n-use crate::errors::{Handler, Applicability};\n+use syntax::errors::{Handler, Applicability};\n \n pub(crate) fn emit_unescape_error(\n     handler: &Handler,", "previous_filename": "src/libsyntax/parse/lexer/unescape_error_reporting.rs"}, {"sha": "6eb995b61d3feeeb062f7388e61900d8e20f6f4c", "filename": "src/librustc_parse/lexer/unicode_chars.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Funicode_chars.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "previous_filename": "src/libsyntax/parse/lexer/unicode_chars.rs"}, {"sha": "9f507d5319edbcccf073ed55ea3857d9f636c59a", "filename": "src/librustc_parse/lib.rs", "status": "renamed", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,11 +1,12 @@\n //! The main parser interface.\n \n-use crate::ast;\n-use crate::parse::parser::{Parser, emit_unclosed_delims, make_unclosed_delims_error};\n-use crate::token::{self, Nonterminal};\n-use crate::tokenstream::{self, TokenStream, TokenTree};\n-use crate::print::pprust;\n-use crate::sess::ParseSess;\n+#![feature(crate_visibility_modifier)]\n+\n+use syntax::ast;\n+use syntax::print::pprust;\n+use syntax::sess::ParseSess;\n+use syntax::token::{self, Nonterminal};\n+use syntax::tokenstream::{self, TokenStream, TokenTree};\n \n use errors::{PResult, FatalError, Level, Diagnostic};\n use rustc_data_structures::sync::Lrc;\n@@ -17,12 +18,14 @@ use std::str;\n \n use log::info;\n \n-#[cfg(test)]\n-mod tests;\n+pub const MACRO_ARGUMENTS: Option<&'static str> = Some(\"macro arguments\");\n \n #[macro_use]\n pub mod parser;\n+use parser::{Parser, emit_unclosed_delims, make_unclosed_delims_error};\n pub mod lexer;\n+pub mod validate_attr;\n+pub mod error_codes;\n \n #[derive(Clone)]\n pub struct Directory<'a> {", "previous_filename": "src/libsyntax/parse/mod.rs"}, {"sha": "524b551e54cb3b51fccbce148c6582f107626ec2", "filename": "src/librustc_parse/parser/attr.rs", "status": "renamed", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,12 +1,10 @@\n use super::{SeqSep, Parser, TokenType, PathStyle};\n-use crate::attr;\n-use crate::ast;\n-use crate::util::comments;\n-use crate::token::{self, Nonterminal, DelimToken};\n-use crate::tokenstream::{TokenStream, TokenTree};\n-use crate::source_map::Span;\n-\n-use syntax_pos::Symbol;\n+use syntax::attr;\n+use syntax::ast;\n+use syntax::util::comments;\n+use syntax::token::{self, Nonterminal, DelimToken};\n+use syntax::tokenstream::{TokenStream, TokenTree};\n+use syntax_pos::{Span, Symbol};\n use errors::PResult;\n \n use log::debug;\n@@ -158,12 +156,7 @@ impl<'a> Parser<'a> {\n             }\n         };\n \n-        Ok(ast::Attribute {\n-            kind: ast::AttrKind::Normal(item),\n-            id: attr::mk_attr_id(),\n-            style,\n-            span,\n-        })\n+        Ok(attr::mk_attr_from_item(style, item, span))\n     }\n \n     /// Parses an inner part of an attribute (the path and following tokens).\n@@ -268,7 +261,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses `cfg_attr(pred, attr_item_list)` where `attr_item_list` is comma-delimited.\n-    crate fn parse_cfg_attr(&mut self) -> PResult<'a, (ast::MetaItem, Vec<(ast::AttrItem, Span)>)> {\n+    pub fn parse_cfg_attr(&mut self) -> PResult<'a, (ast::MetaItem, Vec<(ast::AttrItem, Span)>)> {\n         self.expect(&token::OpenDelim(token::Paren))?;\n \n         let cfg_predicate = self.parse_meta_item()?;", "previous_filename": "src/libsyntax/parse/parser/attr.rs"}, {"sha": "38eae008537d728acf9fa0344aa83afb1bb3f637", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "renamed", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,14 +1,16 @@\n use super::{BlockMode, PathStyle, SemiColonMode, TokenType, TokenExpectType, SeqSep, Parser};\n-use crate::ast::{\n+\n+use syntax::ast::{\n     self, Param, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, ItemKind,\n     Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind,\n };\n-use crate::token::{self, TokenKind, token_can_begin_expr};\n-use crate::print::pprust;\n-use crate::ptr::P;\n-use crate::symbol::{kw, sym};\n-use crate::ThinVec;\n-use crate::util::parser::AssocOp;\n+use syntax::token::{self, TokenKind, token_can_begin_expr};\n+use syntax::print::pprust;\n+use syntax::ptr::P;\n+use syntax::symbol::{kw, sym};\n+use syntax::ThinVec;\n+use syntax::util::parser::AssocOp;\n+use syntax::struct_span_err;\n \n use errors::{PResult, Applicability, DiagnosticBuilder, DiagnosticId, pluralize};\n use rustc_data_structures::fx::FxHashSet;", "previous_filename": "src/libsyntax/parse/parser/diagnostics.rs"}, {"sha": "dadb91f8b3c16b52db036800022ef9205067cefe", "filename": "src/librustc_parse/parser/expr.rs", "status": "renamed", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -2,24 +2,23 @@ use super::{Parser, Restrictions, PrevTokenKind, TokenType, PathStyle, BlockMode\n use super::{SemiColonMode, SeqSep, TokenExpectType};\n use super::pat::{GateOr, PARAM_EXPECTED};\n use super::diagnostics::Error;\n+use crate::maybe_recover_from_interpolated_ty_qpath;\n \n-use crate::ast::{\n+use syntax::ast::{\n     self, DUMMY_NODE_ID, Attribute, AttrStyle, Ident, CaptureBy, BlockCheckMode,\n     Expr, ExprKind, RangeLimits, Label, Movability, IsAsync, Arm, Ty, TyKind,\n     FunctionRetTy, Param, FnDecl, BinOpKind, BinOp, UnOp, Mac, AnonConst, Field, Lit,\n };\n-use crate::maybe_recover_from_interpolated_ty_qpath;\n-use crate::token::{self, Token, TokenKind};\n-use crate::print::pprust;\n-use crate::ptr::P;\n-use crate::source_map::{self, Span};\n-use crate::util::classify;\n-use crate::util::literal::LitError;\n-use crate::util::parser::{AssocOp, Fixity, prec_let_scrutinee_needs_par};\n-\n-use errors::{PResult, Applicability};\n+use syntax::token::{self, Token, TokenKind};\n+use syntax::print::pprust;\n+use syntax::ptr::P;\n+use syntax::source_map::{self, Span};\n+use syntax::util::classify;\n+use syntax::util::literal::LitError;\n+use syntax::util::parser::{AssocOp, Fixity, prec_let_scrutinee_needs_par};\n use syntax_pos::symbol::{kw, sym};\n use syntax_pos::Symbol;\n+use errors::{PResult, Applicability};\n use std::mem;\n use rustc_data_structures::thin_vec::ThinVec;\n ", "previous_filename": "src/libsyntax/parse/parser/expr.rs"}, {"sha": "ba5eafc0ed722b200582e0d0332097701370459c", "filename": "src/librustc_parse/parser/generics.rs", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,9 +1,8 @@\n use super::Parser;\n \n-use crate::ast::{self, WhereClause, GenericParam, GenericParamKind, GenericBounds, Attribute};\n-use crate::token;\n-use crate::source_map::DUMMY_SP;\n-\n+use syntax::ast::{self, WhereClause, GenericParam, GenericParamKind, GenericBounds, Attribute};\n+use syntax::token;\n+use syntax::source_map::DUMMY_SP;\n use syntax_pos::symbol::{kw, sym};\n \n use errors::PResult;", "previous_filename": "src/libsyntax/parse/parser/generics.rs"}, {"sha": "3e21436d3136e36d0ade4371757f6a19747ee09c", "filename": "src/librustc_parse/parser/item.rs", "status": "renamed", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -2,23 +2,24 @@ use super::{Parser, PathStyle};\n use super::diagnostics::{Error, dummy_arg, ConsumeClosingDelim};\n \n use crate::maybe_whole;\n-use crate::ptr::P;\n-use crate::ast::{self, Abi, DUMMY_NODE_ID, Ident, Attribute, AttrKind, AttrStyle, AnonConst, Item};\n-use crate::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, UseTree, UseTreeKind};\n-use crate::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness};\n-use crate::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n-use crate::ast::{Ty, TyKind, Generics, GenericBounds, TraitRef, EnumDef, VariantData, StructField};\n-use crate::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, FnSig, SelfKind, Param};\n-use crate::parse::token;\n-use crate::tokenstream::{TokenTree, TokenStream};\n-use crate::symbol::{kw, sym};\n-use crate::source_map::{self, respan, Span};\n-use crate::ThinVec;\n+\n+use syntax::ast::{self, Abi, DUMMY_NODE_ID, Ident, Attribute, AttrKind, AttrStyle, AnonConst, Item};\n+use syntax::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, UseTree, UseTreeKind};\n+use syntax::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness};\n+use syntax::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n+use syntax::ast::{Ty, TyKind, Generics, GenericBounds, TraitRef, EnumDef, VariantData, StructField};\n+use syntax::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, FnSig, SelfKind, Param};\n+use syntax::ptr::P;\n+use syntax::ThinVec;\n+use syntax::token;\n+use syntax::tokenstream::{TokenTree, TokenStream};\n+use syntax::source_map::{self, respan, Span};\n+use syntax_pos::BytePos;\n+use syntax_pos::symbol::{kw, sym};\n \n use log::debug;\n use std::mem;\n use errors::{PResult, Applicability, DiagnosticBuilder, DiagnosticId, StashKey};\n-use syntax_pos::BytePos;\n \n /// Whether the type alias or associated type is a concrete type or an opaque type.\n #[derive(Debug)]", "previous_filename": "src/libsyntax/parse/parser/item.rs"}, {"sha": "a491d91e20fb23ecdd4def6449993e651671d31e", "filename": "src/librustc_parse/parser/mod.rs", "status": "renamed", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -11,24 +11,26 @@ mod generics;\n mod diagnostics;\n use diagnostics::Error;\n \n-use crate::ast::{\n+use crate::{Directory, DirectoryOwnership};\n+use crate::lexer::UnmatchedBrace;\n+\n+use syntax::ast::{\n     self, Abi, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Ident,\n     IsAsync, MacDelimiter, Mutability, StrStyle, Visibility, VisibilityKind, Unsafety,\n };\n-use crate::parse::{Directory, DirectoryOwnership};\n-use crate::parse::lexer::UnmatchedBrace;\n-use crate::util::comments::{doc_comment_style, strip_doc_comment_decoration};\n-use crate::token::{self, Token, TokenKind, DelimToken};\n-use crate::print::pprust;\n-use crate::ptr::P;\n-use crate::sess::ParseSess;\n-use crate::source_map::respan;\n-use crate::symbol::{kw, sym, Symbol};\n-use crate::tokenstream::{self, DelimSpan, TokenTree, TokenStream, TreeAndJoint};\n-use crate::ThinVec;\n \n-use errors::{PResult, Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n+use syntax::print::pprust;\n+use syntax::ptr::P;\n+use syntax::token::{self, Token, TokenKind, DelimToken};\n+use syntax::tokenstream::{self, DelimSpan, TokenTree, TokenStream, TreeAndJoint};\n+use syntax::sess::ParseSess;\n+use syntax::source_map::respan;\n+use syntax::struct_span_err;\n+use syntax::util::comments::{doc_comment_style, strip_doc_comment_decoration};\n+use syntax_pos::symbol::{kw, sym, Symbol};\n use syntax_pos::{Span, BytePos, DUMMY_SP, FileName};\n+use rustc_data_structures::thin_vec::ThinVec;\n+use errors::{PResult, Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n use log::debug;\n \n use std::borrow::Cow;", "previous_filename": "src/libsyntax/parse/parser/mod.rs"}, {"sha": "3110f15e80b6ed80a49693dbc14b6ca66f99855c", "filename": "src/librustc_parse/parser/module.rs", "status": "renamed", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -2,13 +2,14 @@ use super::Parser;\n use super::item::ItemInfo;\n use super::diagnostics::Error;\n \n-use crate::attr;\n-use crate::ast::{self, Ident, Attribute, ItemKind, Mod, Crate};\n-use crate::parse::{new_sub_parser_from_file, DirectoryOwnership};\n-use crate::token::{self, TokenKind};\n-use crate::source_map::{SourceMap, Span, DUMMY_SP, FileName};\n-use crate::symbol::sym;\n+use crate::{new_sub_parser_from_file, DirectoryOwnership};\n \n+use syntax::attr;\n+use syntax::ast::{self, Ident, Attribute, ItemKind, Mod, Crate};\n+use syntax::token::{self, TokenKind};\n+use syntax::source_map::{SourceMap, Span, DUMMY_SP, FileName};\n+\n+use syntax_pos::symbol::sym;\n use errors::PResult;\n \n use std::path::{self, Path, PathBuf};\n@@ -39,17 +40,12 @@ impl<'a> Parser<'a> {\n \n     /// Parses a `mod <foo> { ... }` or `mod <foo>;` item.\n     pub(super) fn parse_item_mod(&mut self, outer_attrs: &[Attribute]) -> PResult<'a, ItemInfo> {\n-        let (in_cfg, outer_attrs) = {\n-            // FIXME(Centril): This results in a cycle between config and parsing.\n-            // Consider using dynamic dispatch via `self.sess` to disentangle the knot.\n-            let mut strip_unconfigured = crate::config::StripUnconfigured {\n-                sess: self.sess,\n-                features: None, // Don't perform gated feature checking.\n-            };\n-            let mut outer_attrs = outer_attrs.to_owned();\n-            strip_unconfigured.process_cfg_attrs(&mut outer_attrs);\n-            (!self.cfg_mods || strip_unconfigured.in_cfg(&outer_attrs), outer_attrs)\n-        };\n+        // HACK(Centril): See documentation on `ParseSess::process_cfg_mod`.\n+        let (in_cfg, outer_attrs) = (self.sess.process_cfg_mod)(\n+            self.sess,\n+            self.cfg_mods,\n+            outer_attrs,\n+        );\n \n         let id_span = self.token.span;\n         let id = self.parse_ident()?;", "previous_filename": "src/libsyntax/parse/parser/module.rs"}, {"sha": "b068a4f16a533dde86713a99675d0a8f30bb3a2c", "filename": "src/librustc_parse/parser/pat.rs", "status": "renamed", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,14 +1,13 @@\n use super::{Parser, PathStyle};\n-\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n-use crate::ptr::P;\n-use crate::ast::{self, Attribute, Pat, PatKind, FieldPat, RangeEnd, RangeSyntax, Mac};\n-use crate::ast::{BindingMode, Ident, Mutability, Path, QSelf, Expr, ExprKind};\n-use crate::mut_visit::{noop_visit_pat, noop_visit_mac, MutVisitor};\n-use crate::token;\n-use crate::print::pprust;\n-use crate::source_map::{respan, Span, Spanned};\n-use crate::ThinVec;\n+use syntax::ast::{self, Attribute, Pat, PatKind, FieldPat, RangeEnd, RangeSyntax, Mac};\n+use syntax::ast::{BindingMode, Ident, Mutability, Path, QSelf, Expr, ExprKind};\n+use syntax::mut_visit::{noop_visit_pat, noop_visit_mac, MutVisitor};\n+use syntax::ptr::P;\n+use syntax::print::pprust;\n+use syntax::ThinVec;\n+use syntax::token;\n+use syntax::source_map::{respan, Span, Spanned};\n use syntax_pos::symbol::{kw, sym};\n use errors::{PResult, Applicability, DiagnosticBuilder};\n ", "previous_filename": "src/libsyntax/parse/parser/pat.rs"}, {"sha": "68307440712a870f9b07bb07494e2c1aa6eaafe7", "filename": "src/librustc_parse/parser/path.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,10 +1,10 @@\n use super::{Parser, TokenType};\n-\n-use crate::{maybe_whole, ThinVec};\n-use crate::ast::{self, QSelf, Path, PathSegment, Ident, ParenthesizedArgs, AngleBracketedArgs};\n-use crate::ast::{AnonConst, GenericArg, AssocTyConstraint, AssocTyConstraintKind, BlockCheckMode};\n-use crate::token::{self, Token};\n-use crate::source_map::{Span, BytePos};\n+use crate::maybe_whole;\n+use syntax::ast::{self, QSelf, Path, PathSegment, Ident, ParenthesizedArgs, AngleBracketedArgs};\n+use syntax::ast::{AnonConst, GenericArg, AssocTyConstraint, AssocTyConstraintKind, BlockCheckMode};\n+use syntax::ThinVec;\n+use syntax::token::{self, Token};\n+use syntax::source_map::{Span, BytePos};\n use syntax_pos::symbol::{kw, sym};\n \n use std::mem;", "previous_filename": "src/libsyntax/parse/parser/path.rs"}, {"sha": "a5f20691d077c761859dea833492ccbda4eab8f9", "filename": "src/librustc_parse/parser/stmt.rs", "status": "renamed", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -3,16 +3,18 @@ use super::expr::LhsExpr;\n use super::path::PathStyle;\n use super::pat::GateOr;\n use super::diagnostics::Error;\n-\n-use crate::ptr::P;\n-use crate::{maybe_whole, ThinVec};\n-use crate::ast::{self, DUMMY_NODE_ID, Stmt, StmtKind, Local, Block, BlockCheckMode, Expr, ExprKind};\n-use crate::ast::{Attribute, AttrStyle, VisibilityKind, MacStmtStyle, Mac, MacDelimiter};\n-use crate::parse::DirectoryOwnership;\n-use crate::util::classify;\n-use crate::token;\n-use crate::source_map::{respan, Span};\n-use crate::symbol::{kw, sym};\n+use crate::maybe_whole;\n+use crate::DirectoryOwnership;\n+\n+use syntax::ThinVec;\n+use syntax::ptr::P;\n+use syntax::ast;\n+use syntax::ast::{DUMMY_NODE_ID, Stmt, StmtKind, Local, Block, BlockCheckMode, Expr, ExprKind};\n+use syntax::ast::{Attribute, AttrStyle, VisibilityKind, MacStmtStyle, Mac, MacDelimiter};\n+use syntax::util::classify;\n+use syntax::token;\n+use syntax::source_map::{respan, Span};\n+use syntax::symbol::{kw, sym};\n \n use std::mem;\n use errors::{PResult, Applicability};", "previous_filename": "src/libsyntax/parse/parser/stmt.rs"}, {"sha": "fccabee24047f638b4e0f30b2e0f16b50746ba46", "filename": "src/librustc_parse/parser/ty.rs", "status": "renamed", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -2,13 +2,15 @@ use super::{Parser, PathStyle, PrevTokenKind, TokenType};\n use super::item::ParamCfg;\n \n use crate::{maybe_whole, maybe_recover_from_interpolated_ty_qpath};\n-use crate::ptr::P;\n-use crate::ast::{self, Ty, TyKind, MutTy, BareFnTy, FunctionRetTy, GenericParam, Lifetime, Ident};\n-use crate::ast::{TraitBoundModifier, TraitObjectSyntax, GenericBound, GenericBounds, PolyTraitRef};\n-use crate::ast::{Mutability, AnonConst, Mac};\n-use crate::token::{self, Token};\n-use crate::source_map::Span;\n-use crate::symbol::{kw};\n+\n+use syntax::ptr::P;\n+use syntax::ast::{self, Ty, TyKind, MutTy, BareFnTy, FunctionRetTy, GenericParam, Lifetime, Ident};\n+use syntax::ast::{TraitBoundModifier, TraitObjectSyntax, GenericBound, GenericBounds, PolyTraitRef};\n+use syntax::ast::{Mutability, AnonConst, Mac};\n+use syntax::token::{self, Token};\n+use syntax::source_map::Span;\n+use syntax::struct_span_fatal;\n+use syntax_pos::symbol::kw;\n \n use errors::{PResult, Applicability, pluralize};\n ", "previous_filename": "src/libsyntax/parse/parser/ty.rs"}, {"sha": "bbe0dc1c35f1b8407113785e4bd7fb736bf50cf1", "filename": "src/librustc_parse/validate_attr.rs", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -0,0 +1,111 @@\n+//! Meta-syntax validation logic of attributes for post-expansion.\n+\n+use errors::{PResult, Applicability};\n+use syntax::ast::{self, Attribute, AttrKind, Ident, MetaItem};\n+use syntax::attr::{AttributeTemplate, mk_name_value_item_str};\n+use syntax::early_buffered_lints::BufferedEarlyLintId;\n+use syntax::feature_gate::BUILTIN_ATTRIBUTE_MAP;\n+use syntax::token;\n+use syntax::tokenstream::TokenTree;\n+use syntax::sess::ParseSess;\n+use syntax_pos::{Symbol, sym};\n+\n+pub fn check_meta(sess: &ParseSess, attr: &Attribute) {\n+    let attr_info =\n+        attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name)).map(|a| **a);\n+\n+    // Check input tokens for built-in and key-value attributes.\n+    match attr_info {\n+        // `rustc_dummy` doesn't have any restrictions specific to built-in attributes.\n+        Some((name, _, template, _)) if name != sym::rustc_dummy =>\n+            check_builtin_attribute(sess, attr, name, template),\n+        _ => if let Some(TokenTree::Token(token)) = attr.get_normal_item().tokens.trees().next() {\n+            if token == token::Eq {\n+                // All key-value attributes are restricted to meta-item syntax.\n+                parse_meta(sess, attr).map_err(|mut err| err.emit()).ok();\n+            }\n+        }\n+    }\n+}\n+\n+pub fn parse_meta<'a>(sess: &'a ParseSess, attr: &Attribute) -> PResult<'a, MetaItem> {\n+    Ok(match attr.kind {\n+        AttrKind::Normal(ref item) => MetaItem {\n+            path: item.path.clone(),\n+            kind: super::parse_in_attr(sess, attr, |p| p.parse_meta_item_kind())?,\n+            span: attr.span,\n+        },\n+        AttrKind::DocComment(comment) => {\n+            mk_name_value_item_str(Ident::new(sym::doc, attr.span), comment, attr.span)\n+        }\n+    })\n+}\n+\n+pub fn check_builtin_attribute(\n+    sess: &ParseSess,\n+    attr: &Attribute,\n+    name: Symbol,\n+    template: AttributeTemplate,\n+) {\n+    // Some special attributes like `cfg` must be checked\n+    // before the generic check, so we skip them here.\n+    let should_skip = |name| name == sym::cfg;\n+    // Some of previously accepted forms were used in practice,\n+    // report them as warnings for now.\n+    let should_warn = |name| name == sym::doc || name == sym::ignore ||\n+                             name == sym::inline || name == sym::link ||\n+                             name == sym::test || name == sym::bench;\n+\n+    match parse_meta(sess, attr) {\n+        Ok(meta) => if !should_skip(name) && !template.compatible(&meta.kind) {\n+            let error_msg = format!(\"malformed `{}` attribute input\", name);\n+            let mut msg = \"attribute must be of the form \".to_owned();\n+            let mut suggestions = vec![];\n+            let mut first = true;\n+            if template.word {\n+                first = false;\n+                let code = format!(\"#[{}]\", name);\n+                msg.push_str(&format!(\"`{}`\", &code));\n+                suggestions.push(code);\n+            }\n+            if let Some(descr) = template.list {\n+                if !first {\n+                    msg.push_str(\" or \");\n+                }\n+                first = false;\n+                let code = format!(\"#[{}({})]\", name, descr);\n+                msg.push_str(&format!(\"`{}`\", &code));\n+                suggestions.push(code);\n+            }\n+            if let Some(descr) = template.name_value_str {\n+                if !first {\n+                    msg.push_str(\" or \");\n+                }\n+                let code = format!(\"#[{} = \\\"{}\\\"]\", name, descr);\n+                msg.push_str(&format!(\"`{}`\", &code));\n+                suggestions.push(code);\n+            }\n+            if should_warn(name) {\n+                sess.buffer_lint(\n+                    BufferedEarlyLintId::IllFormedAttributeInput,\n+                    meta.span,\n+                    ast::CRATE_NODE_ID,\n+                    &msg,\n+                );\n+            } else {\n+                sess.span_diagnostic.struct_span_err(meta.span, &error_msg)\n+                    .span_suggestions(\n+                        meta.span,\n+                        if suggestions.len() == 1 {\n+                            \"must be of the form\"\n+                        } else {\n+                            \"the following are the possible correct uses\"\n+                        },\n+                        suggestions.into_iter(),\n+                        Applicability::HasPlaceholders,\n+                    ).emit();\n+            }\n+        }\n+        Err(mut err) => err.emit(),\n+    }\n+}"}, {"sha": "556189208f1c25d848fe320079fc6db08dcbde71", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -12,8 +12,9 @@ path = \"lib.rs\"\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_index = { path = \"../librustc_index\" }\n+rustc_parse = { path = \"../librustc_parse\" }\n+rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n-rustc_target = { path = \"../librustc_target\" }\n-rustc_index = { path = \"../librustc_index\" }"}, {"sha": "ec5572914d8ee55968822588322a7839aada1fd6", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -7,14 +7,15 @@\n // or type checking or some other kind of complex analysis.\n \n use std::mem;\n-use syntax::print::pprust;\n use rustc::lint;\n use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_parse::validate_attr;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::expand::is_proc_macro_attr;\n use syntax::feature_gate::is_builtin_attr;\n+use syntax::print::pprust;\n use syntax::source_map::Spanned;\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n@@ -369,6 +370,10 @@ fn validate_generics_order<'a>(\n }\n \n impl<'a> Visitor<'a> for AstValidator<'a> {\n+    fn visit_attribute(&mut self, attr: &Attribute) {\n+        validate_attr::check_meta(&self.session.parse_sess, attr);\n+    }\n+\n     fn visit_expr(&mut self, expr: &'a Expr) {\n         match &expr.kind {\n             ExprKind::Closure(_, _, _, fn_decl, _, _) => {"}, {"sha": "50b3be6dca1c3d1ee208b3aa36b230653945895e", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -13,6 +13,7 @@ log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n+rustc_parse = { path = \"../librustc_parse\" }\n serde_json = \"1\"\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "f2f512bc8e5ab0f378ea71ee446f812f789c05e0", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,8 +1,6 @@\n-use rustc::session::Session;\n-\n use crate::generated_code;\n-\n-use syntax::parse::lexer::{self, StringReader};\n+use rustc::session::Session;\n+use rustc_parse::lexer::{self, StringReader};\n use syntax::token::{self, TokenKind};\n use syntax_pos::*;\n "}, {"sha": "bf4a1440e1bf12fcf6f956c9bc3a892ee7be1b44", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -11,11 +11,12 @@ use std::fmt::Display;\n use std::io;\n use std::io::prelude::*;\n \n-use syntax::source_map::SourceMap;\n-use syntax::parse::lexer;\n+use rustc_parse::lexer;\n use syntax::token::{self, Token};\n use syntax::sess::ParseSess;\n+use syntax::source_map::SourceMap;\n use syntax::symbol::{kw, sym};\n+use syntax_expand::config::process_configure_mod;\n use syntax_pos::{Span, FileName};\n \n /// Highlights `src`, returning the HTML output.\n@@ -33,7 +34,7 @@ pub fn render_with_highlighting(\n                class, tooltip).unwrap();\n     }\n \n-    let sess = ParseSess::with_silent_emitter();\n+    let sess = ParseSess::with_silent_emitter(process_configure_mod);\n     let fm = sess.source_map().new_source_file(\n         FileName::Custom(String::from(\"rustdoc-highlighting\")),\n         src.to_owned(),"}, {"sha": "86e0f22db50cdde7c01cf7abc74571423ee329f8", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -29,6 +29,7 @@ extern crate rustc_resolve;\n extern crate rustc_lint;\n extern crate rustc_interface;\n extern crate rustc_metadata;\n+extern crate rustc_parse;\n extern crate rustc_target;\n extern crate rustc_typeck;\n extern crate rustc_lexer;"}, {"sha": "5c4c975cec051b1c91a2e8b46541ede12fa3bf5b", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,8 +1,9 @@\n use errors::Applicability;\n-use syntax::parse::lexer::{StringReader as Lexer};\n+use rustc_parse::lexer::{StringReader as Lexer};\n use syntax::token;\n use syntax::sess::ParseSess;\n use syntax::source_map::FilePathMapping;\n+use syntax_expand::config::process_configure_mod;\n use syntax_pos::{InnerSpan, FileName};\n \n use crate::clean;\n@@ -27,7 +28,7 @@ struct SyntaxChecker<'a, 'tcx> {\n \n impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n     fn check_rust_syntax(&self, item: &clean::Item, dox: &str, code_block: RustCodeBlock) {\n-        let sess = ParseSess::new(FilePathMapping::empty());\n+        let sess = ParseSess::new(FilePathMapping::empty(), process_configure_mod);\n         let source_file = sess.source_map().new_source_file(\n             FileName::Custom(String::from(\"doctest\")),\n             dox[code_block.code].to_owned(),"}, {"sha": "553ef6a9c4788d1f30d84e2bbb3f448d2e331369", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -17,6 +17,7 @@ use std::path::PathBuf;\n use std::process::{self, Command, Stdio};\n use std::str;\n use syntax::symbol::sym;\n+use syntax_expand::config::process_configure_mod;\n use syntax_pos::{BytePos, DUMMY_SP, Pos, Span, FileName};\n use tempfile::Builder as TempFileBuilder;\n use testing;\n@@ -398,7 +399,8 @@ pub fn make_test(s: &str,\n     // Uses libsyntax to parse the doctest and find if there's a main fn and the extern\n     // crate already is included.\n     let (already_has_main, already_has_extern_crate, found_macro) = with_globals(edition, || {\n-        use crate::syntax::{parse, sess::ParseSess, source_map::FilePathMapping};\n+        use crate::syntax::{sess::ParseSess, source_map::FilePathMapping};\n+        use rustc_parse::maybe_new_parser_from_source_str;\n         use errors::emitter::EmitterWriter;\n         use errors::Handler;\n \n@@ -411,13 +413,13 @@ pub fn make_test(s: &str,\n         let emitter = EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n         // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n         let handler = Handler::with_emitter(false, None, box emitter);\n-        let sess = ParseSess::with_span_handler(handler, cm);\n+        let sess = ParseSess::with_span_handler(handler, cm, process_configure_mod);\n \n         let mut found_main = false;\n         let mut found_extern_crate = cratename.is_none();\n         let mut found_macro = false;\n \n-        let mut parser = match parse::maybe_new_parser_from_source_str(&sess, filename, source) {\n+        let mut parser = match maybe_new_parser_from_source_str(&sess, filename, source) {\n             Ok(p) => p,\n             Err(errs) => {\n                 for mut err in errs {"}, {"sha": "170d089d4bb8d1e3b3e99eef6ab9e84371ece7ab", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -537,7 +537,7 @@ pub struct Pat {\n impl Pat {\n     /// Attempt reparsing the pattern as a type.\n     /// This is intended for use by diagnostics.\n-    pub(super) fn to_ty(&self) -> Option<P<Ty>> {\n+    pub fn to_ty(&self) -> Option<P<Ty>> {\n         let kind = match &self.kind {\n             // In a type expression `_` is an inference variable.\n             PatKind::Wild => TyKind::Infer,\n@@ -1031,7 +1031,7 @@ impl Expr {\n         }\n     }\n \n-    fn to_bound(&self) -> Option<GenericBound> {\n+    pub fn to_bound(&self) -> Option<GenericBound> {\n         match &self.kind {\n             ExprKind::Path(None, path) => Some(GenericBound::Trait(\n                 PolyTraitRef::new(Vec::new(), path.clone(), self.span),\n@@ -1042,7 +1042,7 @@ impl Expr {\n     }\n \n     /// Attempts to reparse as `Ty` (for diagnostic purposes).\n-    pub(super) fn to_ty(&self) -> Option<P<Ty>> {\n+    pub fn to_ty(&self) -> Option<P<Ty>> {\n         let kind = match &self.kind {\n             // Trivial conversions.\n             ExprKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),"}, {"sha": "d0a31b330ab3942029e6d29f3b8e58e331793120", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 4, "deletions": 71, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,7 +1,6 @@\n //! Parsing and validation of builtin attributes\n \n use crate::ast::{self, Attribute, MetaItem, NestedMetaItem};\n-use crate::early_buffered_lints::BufferedEarlyLintId;\n use crate::feature_gate::{Features, GatedCfg};\n use crate::print::pprust;\n use crate::sess::ParseSess;\n@@ -25,9 +24,9 @@ enum AttrError {\n /// Only top-level shape (`#[attr]` vs `#[attr(...)]` vs `#[attr = ...]`) is considered now.\n #[derive(Clone, Copy)]\n pub struct AttributeTemplate {\n-    crate word: bool,\n-    crate list: Option<&'static str>,\n-    crate name_value_str: Option<&'static str>,\n+    pub word: bool,\n+    pub list: Option<&'static str>,\n+    pub name_value_str: Option<&'static str>,\n }\n \n impl AttributeTemplate {\n@@ -36,7 +35,7 @@ impl AttributeTemplate {\n     }\n \n     /// Checks that the given meta-item is compatible with this template.\n-    fn compatible(&self, meta_item_kind: &ast::MetaItemKind) -> bool {\n+    pub fn compatible(&self, meta_item_kind: &ast::MetaItemKind) -> bool {\n         match meta_item_kind {\n             ast::MetaItemKind::Word => self.word,\n             ast::MetaItemKind::List(..) => self.list.is_some(),\n@@ -938,69 +937,3 @@ pub fn find_transparency(\n     let fallback = if is_legacy { Transparency::SemiTransparent } else { Transparency::Opaque };\n     (transparency.map_or(fallback, |t| t.0), error)\n }\n-\n-pub fn check_builtin_attribute(\n-    sess: &ParseSess, attr: &ast::Attribute, name: Symbol, template: AttributeTemplate\n-) {\n-    // Some special attributes like `cfg` must be checked\n-    // before the generic check, so we skip them here.\n-    let should_skip = |name| name == sym::cfg;\n-    // Some of previously accepted forms were used in practice,\n-    // report them as warnings for now.\n-    let should_warn = |name| name == sym::doc || name == sym::ignore ||\n-                             name == sym::inline || name == sym::link ||\n-                             name == sym::test || name == sym::bench;\n-\n-    match attr.parse_meta(sess) {\n-        Ok(meta) => if !should_skip(name) && !template.compatible(&meta.kind) {\n-            let error_msg = format!(\"malformed `{}` attribute input\", name);\n-            let mut msg = \"attribute must be of the form \".to_owned();\n-            let mut suggestions = vec![];\n-            let mut first = true;\n-            if template.word {\n-                first = false;\n-                let code = format!(\"#[{}]\", name);\n-                msg.push_str(&format!(\"`{}`\", &code));\n-                suggestions.push(code);\n-            }\n-            if let Some(descr) = template.list {\n-                if !first {\n-                    msg.push_str(\" or \");\n-                }\n-                first = false;\n-                let code = format!(\"#[{}({})]\", name, descr);\n-                msg.push_str(&format!(\"`{}`\", &code));\n-                suggestions.push(code);\n-            }\n-            if let Some(descr) = template.name_value_str {\n-                if !first {\n-                    msg.push_str(\" or \");\n-                }\n-                let code = format!(\"#[{} = \\\"{}\\\"]\", name, descr);\n-                msg.push_str(&format!(\"`{}`\", &code));\n-                suggestions.push(code);\n-            }\n-            if should_warn(name) {\n-                sess.buffer_lint(\n-                    BufferedEarlyLintId::IllFormedAttributeInput,\n-                    meta.span,\n-                    ast::CRATE_NODE_ID,\n-                    &msg,\n-                );\n-            } else {\n-                sess.span_diagnostic.struct_span_err(meta.span, &error_msg)\n-                    .span_suggestions(\n-                        meta.span,\n-                        if suggestions.len() == 1 {\n-                            \"must be of the form\"\n-                        } else {\n-                            \"the following are the possible correct uses\"\n-                        },\n-                        suggestions.into_iter(),\n-                        Applicability::HasPlaceholders,\n-                    ).emit();\n-            }\n-        }\n-        Err(mut err) => err.emit(),\n-    }\n-}"}, {"sha": "29eff5c298169c2d77731885236e9c33e75b467c", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -14,17 +14,13 @@ use crate::ast::{MetaItem, MetaItemKind, NestedMetaItem};\n use crate::ast::{Lit, LitKind, Expr, Item, Local, Stmt, StmtKind, GenericParam};\n use crate::mut_visit::visit_clobber;\n use crate::source_map::{BytePos, Spanned};\n-use crate::parse;\n use crate::token::{self, Token};\n use crate::ptr::P;\n-use crate::sess::ParseSess;\n use crate::symbol::{sym, Symbol};\n use crate::ThinVec;\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n use crate::GLOBALS;\n \n-use errors::PResult;\n-\n use log::debug;\n use syntax_pos::Span;\n \n@@ -281,7 +277,7 @@ impl MetaItem {\n }\n \n impl AttrItem {\n-    crate fn meta(&self, span: Span) -> Option<MetaItem> {\n+    pub fn meta(&self, span: Span) -> Option<MetaItem> {\n         let mut tokens = self.tokens.trees().peekable();\n         Some(MetaItem {\n             path: self.path.clone(),\n@@ -328,21 +324,6 @@ impl Attribute {\n                 Some(mk_name_value_item_str(Ident::new(sym::doc, self.span), comment, self.span)),\n         }\n     }\n-\n-    pub fn parse_meta<'a>(&self, sess: &'a ParseSess) -> PResult<'a, MetaItem> {\n-        match self.kind {\n-            AttrKind::Normal(ref item) => {\n-                Ok(MetaItem {\n-                    path: item.path.clone(),\n-                    kind: parse::parse_in_attr(sess, self, |parser| parser.parse_meta_item_kind())?,\n-                    span: self.span,\n-                })\n-            }\n-            AttrKind::DocComment(comment) => {\n-                Ok(mk_name_value_item_str(Ident::new(sym::doc, self.span), comment, self.span))\n-            }\n-        }\n-    }\n }\n \n /* Constructors */\n@@ -382,8 +363,12 @@ crate fn mk_attr_id() -> AttrId {\n }\n \n pub fn mk_attr(style: AttrStyle, path: Path, tokens: TokenStream, span: Span) -> Attribute {\n+    mk_attr_from_item(style, AttrItem { path, tokens }, span)\n+}\n+\n+pub fn mk_attr_from_item(style: AttrStyle, item: AttrItem, span: Span) -> Attribute {\n     Attribute {\n-        kind: AttrKind::Normal(AttrItem { path, tokens }),\n+        kind: AttrKind::Normal(item),\n         id: mk_attr_id(),\n         style,\n         span,"}, {"sha": "0e81de7d4a770621e80d9e0e8a3a5046e8682191", "filename": "src/libsyntax/error_codes.rs", "status": "modified", "additions": 0, "deletions": 165, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferror_codes.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -4,28 +4,6 @@\n // `:set tw=0` to disable.\n register_diagnostics! {\n \n-E0178: r##\"\n-In types, the `+` type operator has low precedence, so it is often necessary\n-to use parentheses.\n-\n-For example:\n-\n-```compile_fail,E0178\n-trait Foo {}\n-\n-struct Bar<'a> {\n-    w: &'a Foo + Copy,   // error, use &'a (Foo + Copy)\n-    x: &'a Foo + 'a,     // error, use &'a (Foo + 'a)\n-    y: &'a mut Foo + 'a, // error, use &'a mut (Foo + 'a)\n-    z: fn() -> Foo + 'a, // error, use fn() -> (Foo + 'a)\n-}\n-```\n-\n-More details can be found in [RFC 438].\n-\n-[RFC 438]: https://github.com/rust-lang/rfcs/pull/438\n-\"##,\n-\n E0536: r##\"\n The `not` cfg-predicate was malformed.\n \n@@ -278,106 +256,6 @@ pub fn something() {}\n ```\n \"##,\n \n-E0583: r##\"\n-A file wasn't found for an out-of-line module.\n-\n-Erroneous code example:\n-\n-```ignore (compile_fail not working here; see Issue #43707)\n-mod file_that_doesnt_exist; // error: file not found for module\n-\n-fn main() {}\n-```\n-\n-Please be sure that a file corresponding to the module exists. If you\n-want to use a module named `file_that_doesnt_exist`, you need to have a file\n-named `file_that_doesnt_exist.rs` or `file_that_doesnt_exist/mod.rs` in the\n-same directory.\n-\"##,\n-\n-E0584: r##\"\n-A doc comment that is not attached to anything has been encountered.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0584\n-trait Island {\n-    fn lost();\n-\n-    /// I'm lost!\n-}\n-```\n-\n-A little reminder: a doc comment has to be placed before the item it's supposed\n-to document. So if you want to document the `Island` trait, you need to put a\n-doc comment before it, not inside it. Same goes for the `lost` method: the doc\n-comment needs to be before it:\n-\n-```\n-/// I'm THE island!\n-trait Island {\n-    /// I'm lost!\n-    fn lost();\n-}\n-```\n-\"##,\n-\n-E0585: r##\"\n-A documentation comment that doesn't document anything was found.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0585\n-fn main() {\n-    // The following doc comment will fail:\n-    /// This is a useless doc comment!\n-}\n-```\n-\n-Documentation comments need to be followed by items, including functions,\n-types, modules, etc. Examples:\n-\n-```\n-/// I'm documenting the following struct:\n-struct Foo;\n-\n-/// I'm documenting the following function:\n-fn foo() {}\n-```\n-\"##,\n-\n-E0586: r##\"\n-An inclusive range was used with no end.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0586\n-fn main() {\n-    let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n-    let x = &tmp[1..=]; // error: inclusive range was used with no end\n-}\n-```\n-\n-An inclusive range needs an end in order to *include* it. If you just need a\n-start and no end, use a non-inclusive range (with `..`):\n-\n-```\n-fn main() {\n-    let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n-    let x = &tmp[1..]; // ok!\n-}\n-```\n-\n-Or put an end to your inclusive range:\n-\n-```\n-fn main() {\n-    let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n-    let x = &tmp[1..=3]; // ok!\n-}\n-```\n-\"##,\n-\n E0589: r##\"\n The value of `N` that was specified for `repr(align(N))` was not a power\n of two, or was greater than 2^29.\n@@ -446,35 +324,6 @@ and likely to change in the future.\n \n \"##,\n \n-E0704: r##\"\n-This error indicates that a incorrect visibility restriction was specified.\n-\n-Example of erroneous code:\n-\n-```compile_fail,E0704\n-mod foo {\n-    pub(foo) struct Bar {\n-        x: i32\n-    }\n-}\n-```\n-\n-To make struct `Bar` only visible in module `foo` the `in` keyword should be\n-used:\n-```\n-mod foo {\n-    pub(in crate::foo) struct Bar {\n-        x: i32\n-    }\n-}\n-# fn main() {}\n-```\n-\n-For more information see the Rust Reference on [Visibility].\n-\n-[Visibility]: https://doc.rust-lang.org/reference/visibility-and-privacy.html\n-\"##,\n-\n E0705: r##\"\n A `#![feature]` attribute was declared for a feature that is stable in\n the current edition, but not in all editions.\n@@ -504,20 +353,6 @@ Delete the offending feature attribute, or add it to the list of allowed\n features in the `-Z allow_features` flag.\n \"##,\n \n-E0743: r##\"\n-C-variadic has been used on a non-foreign function.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0743\n-fn foo2(x: u8, ...) {} // error!\n-```\n-\n-Only foreign functions can use C-variadic (`...`). It is used to give an\n-undefined number of parameters to a given function (like `printf` in C). The\n-equivalent in Rust would be to use macros directly.\n-\"##,\n-\n ;\n \n     E0539, // incorrect meta item"}, {"sha": "4742e01d7f4eac2e3005bd266234d306e126dbbe", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -3,18 +3,14 @@ use super::accepted::ACCEPTED_FEATURES;\n use super::removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n use super::builtin_attrs::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n \n-use crate::ast::{\n-    self, AssocTyConstraint, AssocTyConstraintKind, NodeId, GenericParam, GenericParamKind,\n-    PatKind, RangeEnd, VariantData,\n-};\n-use crate::attr::{self, check_builtin_attribute};\n+use crate::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};\n+use crate::ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n+use crate::attr;\n use crate::source_map::Spanned;\n use crate::edition::{ALL_EDITIONS, Edition};\n use crate::visit::{self, FnKind, Visitor};\n-use crate::token;\n use crate::sess::ParseSess;\n use crate::symbol::{Symbol, sym};\n-use crate::tokenstream::TokenTree;\n \n use errors::{Applicability, DiagnosticBuilder, Handler};\n use rustc_data_structures::fx::FxHashMap;\n@@ -331,19 +327,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         if let Some((.., AttributeGate::Gated(_, name, descr, has_feature))) = attr_info {\n             gate_feature_fn!(self, has_feature, attr.span, name, descr, GateStrength::Hard);\n         }\n-        // Check input tokens for built-in and key-value attributes.\n-        match attr_info {\n-            // `rustc_dummy` doesn't have any restrictions specific to built-in attributes.\n-            Some((name, _, template, _)) if name != sym::rustc_dummy =>\n-                check_builtin_attribute(self.parse_sess, attr, name, template),\n-            _ => if let Some(TokenTree::Token(token)) =\n-                    attr.get_normal_item().tokens.trees().next() {\n-                if token == token::Eq {\n-                    // All key-value attributes are restricted to meta-item syntax.\n-                    attr.parse_meta(self.parse_sess).map_err(|mut err| err.emit()).ok();\n-                }\n-            }\n-        }\n         // Check unstable flavors of the `#[doc]` attribute.\n         if attr.check_name(sym::doc) {\n             for nested_meta in attr.meta_item_list().unwrap_or_default() {"}, {"sha": "1edefd5bc4bd84f03fef234a385bb5d6741b2082", "filename": "src/libsyntax/json/tests.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson%2Ftests.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -2,7 +2,6 @@ use super::*;\n \n use crate::json::JsonEmitter;\n use crate::source_map::{FilePathMapping, SourceMap};\n-use crate::tests::Shared;\n use crate::with_default_globals;\n \n use errors::emitter::{ColorConfig, HumanReadableErrorType};\n@@ -27,6 +26,20 @@ struct SpanTestData {\n     pub column_end: u32,\n }\n \n+struct Shared<T> {\n+    data: Arc<Mutex<T>>,\n+}\n+\n+impl<T: Write> Write for Shared<T> {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        self.data.lock().unwrap().write(buf)\n+    }\n+\n+    fn flush(&mut self) -> io::Result<()> {\n+        self.data.lock().unwrap().flush()\n+    }\n+}\n+\n /// Test the span yields correct positions in JSON.\n fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n     let expected_output = TestData { spans: vec![expected_output] };"}, {"sha": "317fcf29389769678d3ab57e4e6c51f160d6de5f", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -26,11 +26,6 @@ pub use rustc_data_structures::thin_vec::ThinVec;\n use ast::AttrId;\n use syntax_pos::edition::Edition;\n \n-#[cfg(test)]\n-mod tests;\n-\n-pub const MACRO_ARGUMENTS: Option<&'static str> = Some(\"macro arguments\");\n-\n #[macro_export]\n macro_rules! unwrap_or {\n     ($opt:expr, $default:expr) => {\n@@ -85,10 +80,10 @@ pub mod diagnostics {\n pub mod error_codes;\n \n pub mod util {\n-    crate mod classify;\n+    pub mod classify;\n     pub mod comments;\n     pub mod lev_distance;\n-    crate mod literal;\n+    pub mod literal;\n     pub mod node_count;\n     pub mod parser;\n     pub mod map_in_place;\n@@ -100,11 +95,9 @@ pub mod ast;\n pub mod attr;\n pub mod expand;\n pub mod source_map;\n-#[macro_use] pub mod config;\n pub mod entry;\n pub mod feature_gate;\n pub mod mut_visit;\n-pub mod parse;\n pub mod ptr;\n pub mod show_span;\n pub use syntax_pos::edition;"}, {"sha": "376323a83eacc03c959522262ce9ef3619cc4297", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -22,9 +22,6 @@ use rustc_data_structures::sync::Lrc;\n use std::ops::DerefMut;\n use std::{panic, process, ptr};\n \n-#[cfg(test)]\n-mod tests;\n-\n pub trait ExpectOne<A: Array> {\n     fn expect_one(self, err: &'static str) -> A::Item;\n }"}, {"sha": "f154b7bde9821ca5af501021a5cb36756849cc57", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -321,7 +321,7 @@ fn token_to_string_ext(token: &Token, convert_dollar_crate: bool) -> String {\n     token_kind_to_string_ext(&token.kind, convert_dollar_crate)\n }\n \n-crate fn nonterminal_to_string(nt: &Nonterminal) -> String {\n+pub fn nonterminal_to_string(nt: &Nonterminal) -> String {\n     match *nt {\n         token::NtExpr(ref e)        => expr_to_string(e),\n         token::NtMeta(ref e)        => attr_item_to_string(e),\n@@ -939,8 +939,11 @@ impl<'a> State<'a> {\n         self.commasep_cmnt(b, exprs, |s, e| s.print_expr(e), |e| e.span)\n     }\n \n-    crate fn print_mod(&mut self, _mod: &ast::Mod,\n-                       attrs: &[ast::Attribute]) {\n+    pub fn print_mod(\n+        &mut self,\n+        _mod: &ast::Mod,\n+        attrs: &[ast::Attribute],\n+    ) {\n         self.print_inner_attributes(attrs);\n         for item in &_mod.items {\n             self.print_item(item);\n@@ -955,7 +958,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    crate fn print_opt_lifetime(&mut self, lifetime: &Option<ast::Lifetime>) {\n+    pub fn print_opt_lifetime(&mut self, lifetime: &Option<ast::Lifetime>) {\n         if let Some(lt) = *lifetime {\n             self.print_lifetime(lt);\n             self.nbsp();\n@@ -970,7 +973,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    crate fn print_type(&mut self, ty: &ast::Ty) {\n+    pub fn print_type(&mut self, ty: &ast::Ty) {\n         self.maybe_print_comment(ty.span.lo());\n         self.ibox(0);\n         match ty.kind {\n@@ -1995,7 +1998,7 @@ impl<'a> State<'a> {\n         self.print_expr_maybe_paren(expr, parser::PREC_PREFIX)\n     }\n \n-    crate fn print_expr(&mut self, expr: &ast::Expr) {\n+    pub fn print_expr(&mut self, expr: &ast::Expr) {\n         self.print_expr_outer_attr_style(expr, true)\n     }\n \n@@ -2332,7 +2335,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    crate fn print_usize(&mut self, i: usize) {\n+    pub fn print_usize(&mut self, i: usize) {\n         self.s.word(i.to_string())\n     }\n \n@@ -2601,7 +2604,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    crate fn print_type_bounds(&mut self, prefix: &'static str, bounds: &[ast::GenericBound]) {\n+    pub fn print_type_bounds(&mut self, prefix: &'static str, bounds: &[ast::GenericBound]) {\n         if !bounds.is_empty() {\n             self.s.word(prefix);\n             let mut first = true;\n@@ -2760,7 +2763,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    crate fn print_mutability(&mut self, mutbl: ast::Mutability) {\n+    pub fn print_mutability(&mut self, mutbl: ast::Mutability) {\n         match mutbl {\n             ast::Mutability::Mutable => self.word_nbsp(\"mut\"),\n             ast::Mutability::Immutable => {},"}, {"sha": "953f0d1d190bbb3bbd5229b30d4bbc1ec87c9c94", "filename": "src/libsyntax/sess.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Fsess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Fsess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsess.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,7 +1,7 @@\n //! Contains `ParseSess` which holds state living beyond what one `Parser` might.\n //! It also serves as an input to the parser itself.\n \n-use crate::ast::{CrateConfig, NodeId};\n+use crate::ast::{CrateConfig, NodeId, Attribute};\n use crate::early_buffered_lints::{BufferedEarlyLint, BufferedEarlyLintId};\n use crate::source_map::{SourceMap, FilePathMapping};\n use crate::feature_gate::UnstableFeatures;\n@@ -71,14 +71,14 @@ impl GatedSpans {\n /// Info about a parsing session.\n pub struct ParseSess {\n     pub span_diagnostic: Handler,\n-    crate unstable_features: UnstableFeatures,\n+    pub unstable_features: UnstableFeatures,\n     pub config: CrateConfig,\n     pub edition: Edition,\n     pub missing_fragment_specifiers: Lock<FxHashSet<Span>>,\n     /// Places where raw identifiers were used. This is used for feature-gating raw identifiers.\n     pub raw_identifier_spans: Lock<Vec<Span>>,\n     /// Used to determine and report recursive module inclusions.\n-    pub(super) included_mod_stack: Lock<Vec<PathBuf>>,\n+    pub included_mod_stack: Lock<Vec<PathBuf>>,\n     source_map: Lrc<SourceMap>,\n     pub buffered_lints: Lock<Vec<BufferedEarlyLint>>,\n     /// Contains the spans of block expressions that could have been incomplete based on the\n@@ -89,23 +89,40 @@ pub struct ParseSess {\n     pub gated_spans: GatedSpans,\n     /// The parser has reached `Eof` due to an unclosed brace. Used to silence unnecessary errors.\n     pub reached_eof: Lock<bool>,\n+    /// Process the potential `cfg` attributes on a module.\n+    /// Also determine if the module should be included in this configuration.\n+    ///\n+    /// HACK(Centril): This is used to break a cyclic dependency between\n+    /// the parser and cfg-stripping as defined in `syntax_expand::config`.\n+    /// The dependency edge from the parser comes from `parse_item_mod`.\n+    /// A principled solution to this hack would be to implement [#64197].\n+    ///\n+    /// [#64197]: https://github.com/rust-lang/rust/issues/64197\n+    pub process_cfg_mod: ProcessCfgMod,\n }\n \n+pub type ProcessCfgMod = fn(&ParseSess, bool, &[Attribute]) -> (bool, Vec<Attribute>);\n+\n impl ParseSess {\n-    pub fn new(file_path_mapping: FilePathMapping) -> Self {\n+    pub fn new(file_path_mapping: FilePathMapping, process_cfg_mod: ProcessCfgMod) -> Self {\n         let cm = Lrc::new(SourceMap::new(file_path_mapping));\n         let handler = Handler::with_tty_emitter(\n             ColorConfig::Auto,\n             true,\n             None,\n             Some(cm.clone()),\n         );\n-        ParseSess::with_span_handler(handler, cm)\n+        ParseSess::with_span_handler(handler, cm, process_cfg_mod)\n     }\n \n-    pub fn with_span_handler(handler: Handler, source_map: Lrc<SourceMap>) -> Self {\n+    pub fn with_span_handler(\n+        handler: Handler,\n+        source_map: Lrc<SourceMap>,\n+        process_cfg_mod: ProcessCfgMod,\n+    ) -> Self {\n         Self {\n             span_diagnostic: handler,\n+            process_cfg_mod,\n             unstable_features: UnstableFeatures::from_environment(),\n             config: FxHashSet::default(),\n             edition: ExpnId::root().expn_data().edition,\n@@ -121,10 +138,10 @@ impl ParseSess {\n         }\n     }\n \n-    pub fn with_silent_emitter() -> Self {\n+    pub fn with_silent_emitter(process_cfg_mod: ProcessCfgMod) -> Self {\n         let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let handler = Handler::with_emitter(false, None, Box::new(SilentEmitter));\n-        ParseSess::with_span_handler(handler, cm)\n+        ParseSess::with_span_handler(handler, cm, process_cfg_mod)\n     }\n \n     #[inline]"}, {"sha": "c70e34427037c3287c74a2c5d3533b584cc983b2", "filename": "src/libsyntax/token.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftoken.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -107,14 +107,14 @@ impl fmt::Display for Lit {\n \n impl LitKind {\n     /// An English article for the literal token kind.\n-    crate fn article(self) -> &'static str {\n+    pub fn article(self) -> &'static str {\n         match self {\n             Integer | Err => \"an\",\n             _ => \"a\",\n         }\n     }\n \n-    crate fn descr(self) -> &'static str {\n+    pub fn descr(self) -> &'static str {\n         match self {\n             Bool => panic!(\"literal token contains `Lit::Bool`\"),\n             Byte => \"byte\",\n@@ -141,12 +141,12 @@ impl Lit {\n     }\n }\n \n-pub(crate) fn ident_can_begin_expr(name: ast::Name, span: Span, is_raw: bool) -> bool {\n+pub fn ident_can_begin_expr(name: ast::Name, span: Span, is_raw: bool) -> bool {\n     let ident_token = Token::new(Ident(name, is_raw), span);\n     token_can_begin_expr(&ident_token)\n }\n \n-pub(crate) fn token_can_begin_expr(ident_token: &Token) -> bool {\n+pub fn token_can_begin_expr(ident_token: &Token) -> bool {\n     !ident_token.is_reserved_ident() ||\n     ident_token.is_path_segment_keyword() ||\n     match ident_token.kind {\n@@ -276,7 +276,7 @@ impl TokenKind {\n \n     /// Returns tokens that are likely to be typed accidentally instead of the current token.\n     /// Enables better error recovery when the wrong token is found.\n-    crate fn similar_tokens(&self) -> Option<Vec<TokenKind>> {\n+    pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {\n         match *self {\n             Comma => Some(vec![Dot, Lt, Semi]),\n             Semi => Some(vec![Colon, Comma]),\n@@ -291,7 +291,7 @@ impl Token {\n     }\n \n     /// Some token that will be thrown away later.\n-    crate fn dummy() -> Self {\n+    pub fn dummy() -> Self {\n         Token::new(TokenKind::Whitespace, DUMMY_SP)\n     }\n \n@@ -305,7 +305,7 @@ impl Token {\n         mem::replace(self, Token::dummy())\n     }\n \n-    crate fn is_op(&self) -> bool {\n+    pub fn is_op(&self) -> bool {\n         match self.kind {\n             OpenDelim(..) | CloseDelim(..) | Literal(..) | DocComment(..) |\n             Ident(..) | Lifetime(..) | Interpolated(..) |\n@@ -314,7 +314,7 @@ impl Token {\n         }\n     }\n \n-    crate fn is_like_plus(&self) -> bool {\n+    pub fn is_like_plus(&self) -> bool {\n         match self.kind {\n             BinOp(Plus) | BinOpEq(Plus) => true,\n             _ => false,\n@@ -377,7 +377,7 @@ impl Token {\n     }\n \n     /// Returns `true` if the token can appear at the start of a const param.\n-    crate fn can_begin_const_arg(&self) -> bool {\n+    pub fn can_begin_const_arg(&self) -> bool {\n         match self.kind {\n             OpenDelim(Brace) => true,\n             Interpolated(ref nt) => match **nt {\n@@ -389,7 +389,7 @@ impl Token {\n     }\n \n     /// Returns `true` if the token can appear at the start of a generic bound.\n-    crate fn can_begin_bound(&self) -> bool {\n+    pub fn can_begin_bound(&self) -> bool {\n         self.is_path_start() || self.is_lifetime() || self.is_keyword(kw::For) ||\n         self == &Question || self == &OpenDelim(Paren)\n     }\n@@ -446,13 +446,13 @@ impl Token {\n     }\n \n     /// Returns `true` if the token is a lifetime.\n-    crate fn is_lifetime(&self) -> bool {\n+    pub fn is_lifetime(&self) -> bool {\n         self.lifetime().is_some()\n     }\n \n     /// Returns `true` if the token is a identifier whose name is the given\n     /// string slice.\n-    crate fn is_ident_named(&self, name: Symbol) -> bool {\n+    pub fn is_ident_named(&self, name: Symbol) -> bool {\n         self.ident().map_or(false, |(ident, _)| ident.name == name)\n     }\n \n@@ -469,7 +469,7 @@ impl Token {\n     /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?\n     /// That is, is this a pre-parsed expression dropped into the token stream\n     /// (which happens while parsing the result of macro expansion)?\n-    crate fn is_whole_expr(&self) -> bool {\n+    pub fn is_whole_expr(&self) -> bool {\n         if let Interpolated(ref nt) = self.kind {\n             if let NtExpr(_) | NtLiteral(_) | NtPath(_) | NtIdent(..) | NtBlock(_) = **nt {\n                 return true;\n@@ -480,16 +480,16 @@ impl Token {\n     }\n \n     /// Returns `true` if the token is either the `mut` or `const` keyword.\n-    crate fn is_mutability(&self) -> bool {\n+    pub fn is_mutability(&self) -> bool {\n         self.is_keyword(kw::Mut) ||\n         self.is_keyword(kw::Const)\n     }\n \n-    crate fn is_qpath_start(&self) -> bool {\n+    pub fn is_qpath_start(&self) -> bool {\n         self == &Lt || self == &BinOp(Shl)\n     }\n \n-    crate fn is_path_start(&self) -> bool {\n+    pub fn is_path_start(&self) -> bool {\n         self == &ModSep || self.is_qpath_start() || self.is_path() ||\n         self.is_path_segment_keyword() || self.is_ident() && !self.is_reserved_ident()\n     }\n@@ -499,23 +499,23 @@ impl Token {\n         self.is_non_raw_ident_where(|id| id.name == kw)\n     }\n \n-    crate fn is_path_segment_keyword(&self) -> bool {\n+    pub fn is_path_segment_keyword(&self) -> bool {\n         self.is_non_raw_ident_where(ast::Ident::is_path_segment_keyword)\n     }\n \n     // Returns true for reserved identifiers used internally for elided lifetimes,\n     // unnamed method parameters, crate root module, error recovery etc.\n-    crate fn is_special_ident(&self) -> bool {\n+    pub fn is_special_ident(&self) -> bool {\n         self.is_non_raw_ident_where(ast::Ident::is_special)\n     }\n \n     /// Returns `true` if the token is a keyword used in the language.\n-    crate fn is_used_keyword(&self) -> bool {\n+    pub fn is_used_keyword(&self) -> bool {\n         self.is_non_raw_ident_where(ast::Ident::is_used_keyword)\n     }\n \n     /// Returns `true` if the token is a keyword reserved for possible future use.\n-    crate fn is_unused_keyword(&self) -> bool {\n+    pub fn is_unused_keyword(&self) -> bool {\n         self.is_non_raw_ident_where(ast::Ident::is_unused_keyword)\n     }\n \n@@ -525,7 +525,7 @@ impl Token {\n     }\n \n     /// Returns `true` if the token is the identifier `true` or `false`.\n-    crate fn is_bool_lit(&self) -> bool {\n+    pub fn is_bool_lit(&self) -> bool {\n         self.is_non_raw_ident_where(|id| id.name.is_bool_lit())\n     }\n \n@@ -537,7 +537,7 @@ impl Token {\n         }\n     }\n \n-    crate fn glue(&self, joint: &Token) -> Option<Token> {\n+    pub fn glue(&self, joint: &Token) -> Option<Token> {\n         let kind = match self.kind {\n             Eq => match joint.kind {\n                 Eq => EqEq,"}, {"sha": "4d08d0974c133a3965139b0d435ab8431ac6f0ba", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -23,9 +23,6 @@ use smallvec::{SmallVec, smallvec};\n \n use std::{iter, mem};\n \n-#[cfg(test)]\n-mod tests;\n-\n /// When the main rust parser encounters a syntax-extension invocation, it\n /// parses the arguments to the invocation as a token-tree. This is a very\n /// loose structure, such that all sorts of different AST-fragments can\n@@ -218,7 +215,7 @@ impl TokenStream {\n         self.0.len()\n     }\n \n-    pub(crate) fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {\n+    pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {\n         match streams.len() {\n             0 => TokenStream::default(),\n             1 => streams.pop().unwrap(),"}, {"sha": "5e9b7bf8322db66edd446befd5c42a2b4878e223", "filename": "src/libsyntax/util/comments.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fcomments.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -32,22 +32,23 @@ pub struct Comment {\n     pub pos: BytePos,\n }\n \n-crate fn is_line_doc_comment(s: &str) -> bool {\n+pub fn is_line_doc_comment(s: &str) -> bool {\n     let res = (s.starts_with(\"///\") && *s.as_bytes().get(3).unwrap_or(&b' ') != b'/') ||\n               s.starts_with(\"//!\");\n     debug!(\"is {:?} a doc comment? {}\", s, res);\n     res\n }\n \n-crate fn is_block_doc_comment(s: &str) -> bool {\n+pub fn is_block_doc_comment(s: &str) -> bool {\n     // Prevent `/**/` from being parsed as a doc comment\n     let res = ((s.starts_with(\"/**\") && *s.as_bytes().get(3).unwrap_or(&b' ') != b'*') ||\n                s.starts_with(\"/*!\")) && s.len() >= 5;\n     debug!(\"is {:?} a doc comment? {}\", s, res);\n     res\n }\n \n-crate fn is_doc_comment(s: &str) -> bool {\n+// FIXME(#64197): Try to privatize this again.\n+pub fn is_doc_comment(s: &str) -> bool {\n     (s.starts_with(\"///\") && is_line_doc_comment(s)) || s.starts_with(\"//!\") ||\n     (s.starts_with(\"/**\") && is_block_doc_comment(s)) || s.starts_with(\"/*!\")\n }"}, {"sha": "af7afab6b9b4b690bb6998299c89ac304333692a", "filename": "src/libsyntax/util/literal.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fliteral.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -14,7 +14,7 @@ use rustc_lexer::unescape::{unescape_raw_str, unescape_raw_byte_str};\n \n use std::ascii;\n \n-crate enum LitError {\n+pub enum LitError {\n     NotLiteral,\n     LexerError,\n     InvalidSuffix,\n@@ -185,12 +185,12 @@ impl LitKind {\n \n impl Lit {\n     /// Converts literal token into an AST literal.\n-    crate fn from_lit_token(token: token::Lit, span: Span) -> Result<Lit, LitError> {\n+    pub fn from_lit_token(token: token::Lit, span: Span) -> Result<Lit, LitError> {\n         Ok(Lit { token, kind: LitKind::from_lit_token(token)?, span })\n     }\n \n     /// Converts arbitrary token into an AST literal.\n-    crate fn from_token(token: &Token) -> Result<Lit, LitError> {\n+    pub fn from_token(token: &Token) -> Result<Lit, LitError> {\n         let lit = match token.kind {\n             token::Ident(name, false) if name.is_bool_lit() =>\n                 token::Lit::new(token::Bool, name, None),\n@@ -217,8 +217,8 @@ impl Lit {\n         Lit { token: kind.to_lit_token(), kind, span }\n     }\n \n-    /// Losslessly convert an AST literal into a token tree.\n-    crate fn token_tree(&self) -> TokenTree {\n+    /// Losslessly convert an AST literal into a token stream.\n+    pub fn token_tree(&self) -> TokenTree {\n         let token = match self.token.kind {\n             token::Bool => token::Ident(self.token.symbol, false),\n             _ => token::Literal(self.token),"}, {"sha": "df72fdc801423a2f2bb1012afcaac4062cc5b572", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -69,7 +69,7 @@ pub enum Fixity {\n \n impl AssocOp {\n     /// Creates a new AssocOP from a token\n-    crate fn from_token(t: &Token) -> Option<AssocOp> {\n+    pub fn from_token(t: &Token) -> Option<AssocOp> {\n         use AssocOp::*;\n         match t.kind {\n             token::BinOpEq(k) => Some(AssignOp(k)),\n@@ -358,7 +358,7 @@ impl ExprPrecedence {\n }\n \n /// In `let p = e`, operators with precedence `<=` this one requires parenthesis in `e`.\n-crate fn prec_let_scrutinee_needs_par() -> usize {\n+pub fn prec_let_scrutinee_needs_par() -> usize {\n     AssocOp::LAnd.precedence()\n }\n "}, {"sha": "653b87f0d821385e5df8d90a4fe321102a128253", "filename": "src/libsyntax_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2FCargo.toml?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -11,15 +11,12 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n-bitflags = \"1.0\"\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n log = \"0.4\"\n-scoped-tls = \"1.0\"\n-lazy_static = \"1.0.0\"\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n+rustc_parse = { path = \"../librustc_parse\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "97ee241d838bf48598de388e160cfd9dccd5e416", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,15 +1,15 @@\n use crate::expand::{self, AstFragment, Invocation};\n \n+use rustc_parse::{self, parser, DirectoryOwnership, MACRO_ARGUMENTS};\n use syntax::ast::{self, NodeId, Attribute, Name, PatKind};\n use syntax::attr::{self, HasAttrs, Stability, Deprecation};\n use syntax::source_map::SourceMap;\n use syntax::edition::Edition;\n use syntax::mut_visit::{self, MutVisitor};\n-use syntax::parse::{self, parser, DirectoryOwnership};\n use syntax::ptr::P;\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym, Ident, Symbol};\n-use syntax::{ThinVec, MACRO_ARGUMENTS};\n+use syntax::ThinVec;\n use syntax::token;\n use syntax::tokenstream::{self, TokenStream};\n use syntax::visit::Visitor;\n@@ -18,9 +18,9 @@ use errors::{DiagnosticBuilder, DiagnosticId};\n use smallvec::{smallvec, SmallVec};\n use syntax_pos::{FileName, Span, MultiSpan, DUMMY_SP};\n use syntax_pos::hygiene::{AstPass, ExpnId, ExpnData, ExpnKind};\n-\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n+\n use std::iter;\n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -922,7 +922,7 @@ impl<'a> ExtCtxt<'a> {\n         expand::MacroExpander::new(self, true)\n     }\n     pub fn new_parser_from_tts(&self, stream: TokenStream) -> parser::Parser<'a> {\n-        parse::stream_to_parser(self.parse_sess, stream, MACRO_ARGUMENTS)\n+        rustc_parse::stream_to_parser(self.parse_sess, stream, MACRO_ARGUMENTS)\n     }\n     pub fn source_map(&self) -> &'a SourceMap { self.parse_sess.source_map() }\n     pub fn parse_sess(&self) -> &'a ParseSess { self.parse_sess }"}, {"sha": "7b927fb55f9fb2e0e9e1db1a0954bdfb1919a6f5", "filename": "src/libsyntax_expand/config.rs", "status": "renamed", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fconfig.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,20 +1,20 @@\n-use crate::attr::HasAttrs;\n-use crate::feature_gate::{\n+use rustc_parse::validate_attr;\n+use syntax::attr::HasAttrs;\n+use syntax::feature_gate::{\n     feature_err,\n     EXPLAIN_STMT_ATTR_SYNTAX,\n     Features,\n     get_features,\n     GateIssue,\n };\n-use crate::attr;\n-use crate::ast;\n-use crate::edition::Edition;\n-use crate::mut_visit::*;\n-use crate::parse;\n-use crate::ptr::P;\n-use crate::sess::ParseSess;\n-use crate::symbol::sym;\n-use crate::util::map_in_place::MapInPlace;\n+use syntax::attr;\n+use syntax::ast;\n+use syntax::edition::Edition;\n+use syntax::mut_visit::*;\n+use syntax::ptr::P;\n+use syntax::sess::ParseSess;\n+use syntax::util::map_in_place::MapInPlace;\n+use syntax_pos::symbol::sym;\n \n use errors::Applicability;\n use smallvec::SmallVec;\n@@ -113,7 +113,7 @@ impl<'a> StripUnconfigured<'a> {\n             return vec![];\n         }\n \n-        let res = parse::parse_in_attr(self.sess, &attr, |p| p.parse_cfg_attr());\n+        let res = rustc_parse::parse_in_attr(self.sess, &attr, |p| p.parse_cfg_attr());\n         let (cfg_predicate, expanded_attrs) = match res {\n             Ok(result) => result,\n             Err(mut e) => {\n@@ -135,20 +135,19 @@ impl<'a> StripUnconfigured<'a> {\n             // `cfg_attr` inside of another `cfg_attr`. E.g.\n             //  `#[cfg_attr(false, cfg_attr(true, some_attr))]`.\n             expanded_attrs.into_iter()\n-            .flat_map(|(item, span)| self.process_cfg_attr(ast::Attribute {\n-                kind: ast::AttrKind::Normal(item),\n-                id: attr::mk_attr_id(),\n-                style: attr.style,\n+            .flat_map(|(item, span)| self.process_cfg_attr(attr::mk_attr_from_item(\n+                attr.style,\n+                item,\n                 span,\n-            }))\n+            )))\n             .collect()\n         } else {\n             vec![]\n         }\n     }\n \n     /// Determines if a node with the given attributes should be included in this configuration.\n-    pub fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n+    pub fn in_cfg(&self, attrs: &[ast::Attribute]) -> bool {\n         attrs.iter().all(|attr| {\n             if !is_cfg(attr) {\n                 return true;\n@@ -168,7 +167,7 @@ impl<'a> StripUnconfigured<'a> {\n                 true\n             };\n \n-            let meta_item = match attr.parse_meta(self.sess) {\n+            let meta_item = match validate_attr::parse_meta(self.sess, attr) {\n                 Ok(meta_item) => meta_item,\n                 Err(mut err) => { err.emit(); return true; }\n             };\n@@ -350,3 +349,17 @@ impl<'a> MutVisitor for StripUnconfigured<'a> {\n fn is_cfg(attr: &ast::Attribute) -> bool {\n     attr.check_name(sym::cfg)\n }\n+\n+/// Process the potential `cfg` attributes on a module.\n+/// Also determine if the module should be included in this configuration.\n+pub fn process_configure_mod(\n+    sess: &ParseSess,\n+    cfg_mods: bool,\n+    attrs: &[ast::Attribute],\n+) -> (bool, Vec<ast::Attribute>) {\n+    // Don't perform gated feature checking.\n+    let mut strip_unconfigured = StripUnconfigured { sess, features: None };\n+    let mut attrs = attrs.to_owned();\n+    strip_unconfigured.process_cfg_attrs(&mut attrs);\n+    (!cfg_mods || strip_unconfigured.in_cfg(&attrs), attrs)\n+}", "previous_filename": "src/libsyntax/config.rs"}, {"sha": "b7f6364c2b55ca2928292869419c7074ea5b4b68", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -3,17 +3,18 @@ use crate::proc_macro::{collect_derives, MarkAttrs};\n use crate::hygiene::{ExpnId, SyntaxContext, ExpnData, ExpnKind};\n use crate::mbe::macro_rules::annotate_err_with_kind;\n use crate::placeholders::{placeholder, PlaceholderExpander};\n+use crate::config::StripUnconfigured;\n+use crate::configure;\n \n+use rustc_parse::DirectoryOwnership;\n+use rustc_parse::parser::Parser;\n+use rustc_parse::validate_attr;\n use syntax::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n use syntax::ast::{MacStmtStyle, StmtKind, ItemKind};\n use syntax::attr::{self, HasAttrs};\n use syntax::source_map::respan;\n-use syntax::configure;\n-use syntax::config::StripUnconfigured;\n use syntax::feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n use syntax::mut_visit::*;\n-use syntax::parse::DirectoryOwnership;\n-use syntax::parse::parser::Parser;\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::sess::ParseSess;\n@@ -640,7 +641,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     self.parse_ast_fragment(tok_result, fragment_kind, &item.path, span)\n                 }\n                 SyntaxExtensionKind::LegacyAttr(expander) => {\n-                    match attr.parse_meta(self.cx.parse_sess) {\n+                    match validate_attr::parse_meta(self.cx.parse_sess, &attr) {\n                         Ok(meta) => {\n                             let item = expander.expand(self.cx, span, &meta, item);\n                             fragment_kind.expect_from_annotatables(item)\n@@ -1031,6 +1032,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         let features = self.cx.ecfg.features.unwrap();\n         for attr in attrs.iter() {\n             feature_gate::check_attribute(attr, self.cx.parse_sess, features);\n+            validate_attr::check_meta(self.cx.parse_sess, attr);\n \n             // macros are expanded before any lint passes so this warning has to be hardcoded\n             if attr.has_name(sym::derive) {"}, {"sha": "46d59dd249c3197b9198ddca30222b345faa3405", "filename": "src/libsyntax_expand/lib.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Flib.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -33,6 +33,35 @@ pub use mbe::macro_rules::compile_declarative_macro;\n pub mod base;\n pub mod build;\n pub mod expand;\n+#[macro_use] pub mod config;\n pub mod proc_macro;\n \n crate mod mbe;\n+\n+// HACK(Centril, #64197): These shouldn't really be here.\n+// Rather, they should be with their respective modules which are defined in other crates.\n+// However, since for now constructing a `ParseSess` sorta requires `config` from this crate,\n+// these tests will need to live here in the iterim.\n+\n+#[cfg(test)]\n+mod tests;\n+#[cfg(test)]\n+mod parse {\n+    #[cfg(test)]\n+    mod tests;\n+    #[cfg(test)]\n+    mod lexer {\n+        #[cfg(test)]\n+        mod tests;\n+    }\n+}\n+#[cfg(test)]\n+mod tokenstream {\n+    #[cfg(test)]\n+    mod tests;\n+}\n+#[cfg(test)]\n+mod mut_visit {\n+    #[cfg(test)]\n+    mod tests;\n+}"}, {"sha": "0dcb2c39fdc4ddee22132c962a80ef248957ae12", "filename": "src/libsyntax_expand/mbe/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -76,9 +76,9 @@ use TokenTreeOrTokenTreeSlice::*;\n \n use crate::mbe::{self, TokenTree};\n \n+use rustc_parse::Directory;\n+use rustc_parse::parser::{Parser, PathStyle};\n use syntax::ast::{Ident, Name};\n-use syntax::parse::Directory;\n-use syntax::parse::parser::{Parser, PathStyle};\n use syntax::print::pprust;\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym, Symbol};\n@@ -652,7 +652,7 @@ pub(super) fn parse(\n         directory,\n         recurse_into_modules,\n         true,\n-        syntax::MACRO_ARGUMENTS,\n+        rustc_parse::MACRO_ARGUMENTS,\n     );\n \n     // A queue of possible matcher positions. We initialize it with the matcher position in which"}, {"sha": "72b7996628ab6034974f5f6789f8c31b89550c64", "filename": "src/libsyntax_expand/mbe/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -8,30 +8,30 @@ use crate::mbe::macro_parser::{Error, Failure, Success};\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedParseResult};\n use crate::mbe::transcribe::transcribe;\n \n+use rustc_parse::parser::Parser;\n+use rustc_parse::Directory;\n use syntax::ast;\n use syntax::attr::{self, TransparencyError};\n use syntax::edition::Edition;\n use syntax::feature_gate::Features;\n-use syntax::parse::parser::Parser;\n-use syntax::parse::Directory;\n use syntax::print::pprust;\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::token::{self, NtTT, Token, TokenKind::*};\n use syntax::tokenstream::{DelimSpan, TokenStream};\n+use syntax_pos::hygiene::Transparency;\n+use syntax_pos::Span;\n \n use errors::{DiagnosticBuilder, FatalError};\n use log::debug;\n-use syntax_pos::hygiene::Transparency;\n-use syntax_pos::Span;\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::Lrc;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n use std::{mem, slice};\n \n use errors::Applicability;\n-use rustc_data_structures::sync::Lrc;\n \n const VALID_FRAGMENT_NAMES_MSG: &str = \"valid fragment specifiers are \\\n                                         `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `lifetime`, \\"}, {"sha": "30e812a11791e365eb0f230ed81de1a0b6c2dd7f", "filename": "src/libsyntax_expand/mut_visit/tests.rs", "status": "renamed", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fmut_visit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fmut_visit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmut_visit%2Ftests.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,10 +1,9 @@\n-use super::*;\n-\n-use crate::ast::{self, Ident};\n use crate::tests::{string_to_crate, matches_codepattern};\n-use crate::print::pprust;\n-use crate::mut_visit;\n-use crate::with_default_globals;\n+\n+use syntax::ast::{self, Ident};\n+use syntax::print::pprust;\n+use syntax::mut_visit::{self, MutVisitor};\n+use syntax::with_default_globals;\n \n // This version doesn't care about getting comments or doc-strings in.\n fn fake_print_crate(s: &mut pprust::State<'_>,", "previous_filename": "src/libsyntax/mut_visit/tests.rs"}, {"sha": "d8a1c359c950b8d66d882c6e2a3f9ebe8c894a6e", "filename": "src/libsyntax_expand/parse/lexer/tests.rs", "status": "renamed", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fparse%2Flexer%2Ftests.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,15 +1,18 @@\n-use super::*;\n+use crate::config::process_configure_mod;\n \n-use crate::symbol::Symbol;\n-use crate::source_map::{SourceMap, FilePathMapping};\n-use crate::token;\n-use crate::util::comments::is_doc_comment;\n-use crate::with_default_globals;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_parse::lexer::StringReader;\n+use syntax::token::{self, Token, TokenKind};\n+use syntax::sess::ParseSess;\n+use syntax::source_map::{SourceMap, FilePathMapping};\n+use syntax::util::comments::is_doc_comment;\n+use syntax::with_default_globals;\n+use syntax_pos::symbol::Symbol;\n+use syntax_pos::{BytePos, Span};\n \n use errors::{Handler, emitter::EmitterWriter};\n use std::io;\n use std::path::PathBuf;\n-use syntax_pos::{BytePos, Span};\n \n fn mk_sess(sm: Lrc<SourceMap>) -> ParseSess {\n     let emitter = EmitterWriter::new(\n@@ -21,7 +24,11 @@ fn mk_sess(sm: Lrc<SourceMap>) -> ParseSess {\n         None,\n         false,\n     );\n-    ParseSess::with_span_handler(Handler::with_emitter(true, None, Box::new(emitter)), sm)\n+    ParseSess::with_span_handler(\n+        Handler::with_emitter(true, None, Box::new(emitter)),\n+        sm,\n+        process_configure_mod,\n+    )\n }\n \n // Creates a string reader for the given string.", "previous_filename": "src/libsyntax/parse/lexer/tests.rs"}, {"sha": "6091161799525b747522b5fcd50f5406fc82f6aa", "filename": "src/libsyntax_expand/parse/tests.rs", "status": "renamed", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fparse%2Ftests.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,21 +1,27 @@\n-use super::*;\n-\n-use crate::ast::{self, Name, PatKind};\n-use crate::attr::first_attr_value_str_by_name;\n-use crate::sess::ParseSess;\n-use crate::parse::{PResult, new_parser_from_source_str};\n-use crate::token::Token;\n-use crate::print::pprust::item_to_string;\n-use crate::ptr::P;\n-use crate::source_map::FilePathMapping;\n-use crate::symbol::{kw, sym};\n+use crate::config::process_configure_mod;\n use crate::tests::{matches_codepattern, string_to_stream, with_error_checking_parse};\n-use crate::tokenstream::{DelimSpan, TokenTree, TokenStream};\n-use crate::with_default_globals;\n-use syntax_pos::{Span, BytePos, Pos};\n+\n+use rustc_parse::new_parser_from_source_str;\n+use syntax::ast::{self, Name, PatKind};\n+use syntax::attr::first_attr_value_str_by_name;\n+use syntax::sess::ParseSess;\n+use syntax::token::{self, Token};\n+use syntax::print::pprust::item_to_string;\n+use syntax::ptr::P;\n+use syntax::source_map::FilePathMapping;\n+use syntax::symbol::{kw, sym};\n+use syntax::tokenstream::{DelimSpan, TokenTree, TokenStream};\n+use syntax::visit;\n+use syntax::with_default_globals;\n+use syntax_pos::{Span, BytePos, Pos, FileName};\n+use errors::PResult;\n \n use std::path::PathBuf;\n \n+fn sess() -> ParseSess {\n+    ParseSess::new(FilePathMapping::empty(), process_configure_mod)\n+}\n+\n /// Parses an item.\n ///\n /// Returns `Ok(Some(item))` when successful, `Ok(None)` when no item was found, and `Err`\n@@ -32,18 +38,12 @@ fn sp(a: u32, b: u32) -> Span {\n \n /// Parses a string, return an expression.\n fn string_to_expr(source_str : String) -> P<ast::Expr> {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n-    with_error_checking_parse(source_str, &ps, |p| {\n-        p.parse_expr()\n-    })\n+    with_error_checking_parse(source_str, &sess(), |p| p.parse_expr())\n }\n \n /// Parses a string, returns an item.\n fn string_to_item(source_str : String) -> Option<P<ast::Item>> {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n-    with_error_checking_parse(source_str, &ps, |p| {\n-        p.parse_item()\n-    })\n+    with_error_checking_parse(source_str, &sess(), |p| p.parse_item())\n }\n \n #[should_panic]\n@@ -169,20 +169,20 @@ fn get_spans_of_pat_idents(src: &str) -> Vec<Span> {\n     struct PatIdentVisitor {\n         spans: Vec<Span>\n     }\n-    impl<'a> crate::visit::Visitor<'a> for PatIdentVisitor {\n+    impl<'a> visit::Visitor<'a> for PatIdentVisitor {\n         fn visit_pat(&mut self, p: &'a ast::Pat) {\n             match p.kind {\n                 PatKind::Ident(_ , ref ident, _) => {\n                     self.spans.push(ident.span.clone());\n                 }\n                 _ => {\n-                    crate::visit::walk_pat(self, p);\n+                    visit::walk_pat(self, p);\n                 }\n             }\n         }\n     }\n     let mut v = PatIdentVisitor { spans: Vec::new() };\n-    crate::visit::walk_item(&mut v, &item);\n+    visit::walk_item(&mut v, &item);\n     return v.spans;\n }\n \n@@ -233,7 +233,7 @@ let mut fflags: c_int = wb();\n \n #[test] fn crlf_doc_comments() {\n     with_default_globals(|| {\n-        let sess = ParseSess::new(FilePathMapping::empty());\n+        let sess = sess();\n \n         let name_1 = FileName::Custom(\"crlf_source_1\".to_string());\n         let source = \"/// doc comment\\r\\nfn foo() {}\".to_string();\n@@ -268,7 +268,7 @@ fn ttdelim_span() {\n     }\n \n     with_default_globals(|| {\n-        let sess = ParseSess::new(FilePathMapping::empty());\n+        let sess = sess();\n         let expr = parse_expr_from_source_str(PathBuf::from(\"foo\").into(),\n             \"foo!( fn main() { body } )\".to_string(), &sess).unwrap();\n \n@@ -292,11 +292,10 @@ fn ttdelim_span() {\n #[test]\n fn out_of_line_mod() {\n     with_default_globals(|| {\n-        let sess = ParseSess::new(FilePathMapping::empty());\n         let item = parse_item_from_source_str(\n             PathBuf::from(\"foo\").into(),\n             \"mod foo { struct S; mod this_does_not_exist; }\".to_owned(),\n-            &sess,\n+            &sess(),\n         ).unwrap().unwrap();\n \n         if let ast::ItemKind::Mod(ref m) = item.kind {", "previous_filename": "src/libsyntax/parse/tests.rs"}, {"sha": "db981fae5c2246247479f50ce8b56803498af326", "filename": "src/libsyntax_expand/proc_macro.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fproc_macro.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -4,7 +4,6 @@ use crate::proc_macro_server;\n use syntax::ast::{self, ItemKind, Attribute, Mac};\n use syntax::attr::{mark_used, mark_known};\n use syntax::errors::{Applicability, FatalError};\n-use syntax::parse;\n use syntax::symbol::sym;\n use syntax::token;\n use syntax::tokenstream::{self, TokenStream};\n@@ -135,7 +134,11 @@ impl MultiItemModifier for ProcMacroDerive {\n         let error_count_before = ecx.parse_sess.span_diagnostic.err_count();\n         let msg = \"proc-macro derive produced unparseable tokens\";\n \n-        let mut parser = parse::stream_to_parser(ecx.parse_sess, stream, Some(\"proc-macro derive\"));\n+        let mut parser = rustc_parse::stream_to_parser(\n+            ecx.parse_sess,\n+            stream,\n+            Some(\"proc-macro derive\"),\n+        );\n         let mut items = vec![];\n \n         loop {\n@@ -200,7 +203,7 @@ crate fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>)\n             if attr.get_normal_item().tokens.is_empty() {\n                 return Ok(Vec::new());\n             }\n-            parse::parse_in_attr(cx.parse_sess, attr, |p| p.parse_derive_paths())\n+            rustc_parse::parse_in_attr(cx.parse_sess, attr, |p| p.parse_derive_paths())\n         };\n \n         match parse_derive_paths(attr) {"}, {"sha": "43a9d4169f62c43d63bd6b846b7471ee19b93b23", "filename": "src/libsyntax_expand/proc_macro_server.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fproc_macro_server.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,17 +1,17 @@\n use crate::base::ExtCtxt;\n \n+use rustc_parse::{parse_stream_from_source_str, nt_to_tokenstream};\n use syntax::ast;\n-use syntax::parse;\n use syntax::util::comments;\n use syntax::print::pprust;\n use syntax::sess::ParseSess;\n use syntax::token;\n use syntax::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n+use syntax_pos::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n+use syntax_pos::symbol::{kw, sym, Symbol};\n \n use errors::Diagnostic;\n use rustc_data_structures::sync::Lrc;\n-use syntax_pos::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n-use syntax_pos::symbol::{kw, sym, Symbol};\n \n use pm::{Delimiter, Level, LineColumn, Spacing};\n use pm::bridge::{server, TokenTree};\n@@ -178,7 +178,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n             }\n \n             Interpolated(nt) => {\n-                let stream = parse::nt_to_tokenstream(&nt, sess, span);\n+                let stream = nt_to_tokenstream(&nt, sess, span);\n                 TokenTree::Group(Group {\n                     delimiter: Delimiter::None,\n                     stream,\n@@ -402,7 +402,7 @@ impl server::TokenStream for Rustc<'_> {\n         stream.is_empty()\n     }\n     fn from_str(&mut self, src: &str) -> Self::TokenStream {\n-        parse::parse_stream_from_source_str(\n+        parse_stream_from_source_str(\n             FileName::proc_macro_source_code(src),\n             src.to_string(),\n             self.sess,"}, {"sha": "2683620e84593cac36e8cc71ab46d125aec10ee6", "filename": "src/libsyntax_expand/tests.rs", "status": "renamed", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Ftests.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,16 +1,15 @@\n-use crate::ast;\n-use crate::parse::source_file_to_stream;\n-use crate::parse::new_parser_from_source_str;\n-use crate::parse::parser::Parser;\n-use crate::sess::ParseSess;\n-use crate::source_map::{SourceMap, FilePathMapping};\n-use crate::tokenstream::TokenStream;\n-use crate::with_default_globals;\n+use crate::config::process_configure_mod;\n+use rustc_parse::{source_file_to_stream, new_parser_from_source_str, parser::Parser};\n+use syntax::ast;\n+use syntax::tokenstream::TokenStream;\n+use syntax::sess::ParseSess;\n+use syntax::source_map::{SourceMap, FilePathMapping};\n+use syntax::with_default_globals;\n+use syntax_pos::{BytePos, Span, MultiSpan};\n \n use errors::emitter::EmitterWriter;\n use errors::{PResult, Handler};\n use rustc_data_structures::sync::Lrc;\n-use syntax_pos::{BytePos, Span, MultiSpan};\n \n use std::io;\n use std::io::prelude::*;\n@@ -35,7 +34,7 @@ crate fn with_error_checking_parse<'a, T, F>(s: String, ps: &'a ParseSess, f: F)\n \n /// Maps a string to tts, using a made-up filename.\n crate fn string_to_stream(source_str: String) -> TokenStream {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = ParseSess::new(FilePathMapping::empty(), process_configure_mod);\n     source_file_to_stream(\n         &ps,\n         ps.source_map().new_source_file(PathBuf::from(\"bogofile\").into(),\n@@ -45,7 +44,7 @@ crate fn string_to_stream(source_str: String) -> TokenStream {\n \n /// Parses a string, returns a crate.\n crate fn string_to_crate(source_str : String) -> ast::Crate {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = ParseSess::new(FilePathMapping::empty(), process_configure_mod);\n     with_error_checking_parse(source_str, &ps, |p| {\n         p.parse_crate_mod()\n     })", "previous_filename": "src/libsyntax/tests.rs"}, {"sha": "cf9fead638e85d0363dba21938552f6818b371cd", "filename": "src/libsyntax_expand/tokenstream/tests.rs", "status": "renamed", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Ftokenstream%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_expand%2Ftokenstream%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Ftokenstream%2Ftests.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,9 +1,11 @@\n-use super::*;\n-\n-use crate::ast::Name;\n-use crate::with_default_globals;\n use crate::tests::string_to_stream;\n+\n+use syntax::ast::Name;\n+use syntax::token;\n+use syntax::tokenstream::{TokenStream, TokenStreamBuilder, TokenTree};\n+use syntax::with_default_globals;\n use syntax_pos::{Span, BytePos};\n+use smallvec::smallvec;\n \n fn string_to_ts(string: &str) -> TokenStream {\n     string_to_stream(string.to_owned())", "previous_filename": "src/libsyntax/tokenstream/tests.rs"}, {"sha": "5ae8b3a3e0cb64aa8f0d6d07ae0c7c4c1d766424", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -14,6 +14,7 @@ errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n fmt_macros = { path = \"../libfmt_macros\" }\n log = \"0.4\"\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "c4f3c03813fcda51e434dfb0b9236f6c722c003d", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,13 +1,13 @@\n use errors::{Applicability, DiagnosticBuilder};\n \n+use rustc_parse::parser::Parser;\n use syntax::ast::{self, *};\n-use syntax_expand::base::*;\n use syntax::token::{self, TokenKind};\n-use syntax::parse::parser::Parser;\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::symbol::{sym, Symbol};\n use syntax::tokenstream::{TokenStream, TokenTree};\n+use syntax_expand::base::*;\n use syntax_pos::{Span, DUMMY_SP};\n \n pub fn expand_assert<'cx>("}, {"sha": "5c3009c432ca338c2f9e452bb710d58217cd3c49", "filename": "src/libsyntax_ext/cmdline_attrs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_ext%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_ext%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcmdline_attrs.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -2,15 +2,14 @@\n \n use syntax::ast::{self, AttrItem, AttrStyle};\n use syntax::attr::mk_attr;\n-use syntax::parse;\n use syntax::token;\n use syntax::sess::ParseSess;\n use syntax_expand::panictry;\n use syntax_pos::FileName;\n \n pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -> ast::Crate {\n     for raw_attr in attrs {\n-        let mut parser = parse::new_parser_from_source_str(\n+        let mut parser = rustc_parse::new_parser_from_source_str(\n             parse_sess,\n             FileName::cli_crate_attr_source_code(&raw_attr),\n             raw_attr.clone(),"}, {"sha": "120b533a69b77e89db1e240b5ef6bbb3514ae4a0", "filename": "src/libsyntax_ext/source_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,13 +1,13 @@\n-use syntax_expand::panictry;\n-use syntax_expand::base::{self, *};\n+use rustc_parse::{self, DirectoryOwnership, new_sub_parser_from_file, parser::Parser};\n use syntax::ast;\n-use syntax::parse::{self, DirectoryOwnership};\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax::token;\n use syntax::tokenstream::TokenStream;\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n+use syntax_expand::panictry;\n+use syntax_expand::base::{self, *};\n \n use smallvec::SmallVec;\n use syntax_pos::{self, Pos, Span};\n@@ -85,10 +85,10 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n         },\n     };\n     let directory_ownership = DirectoryOwnership::Owned { relative: None };\n-    let p = parse::new_sub_parser_from_file(cx.parse_sess(), &file, directory_ownership, None, sp);\n+    let p = new_sub_parser_from_file(cx.parse_sess(), &file, directory_ownership, None, sp);\n \n     struct ExpandResult<'a> {\n-        p: parse::parser::Parser<'a>,\n+        p: Parser<'a>,\n     }\n     impl<'a> base::MacResult for ExpandResult<'a> {\n         fn make_expr(mut self: Box<ExpandResult<'a>>) -> Option<P<ast::Expr>> {"}, {"sha": "e59daab177083f72d7fb73bcefc535e6a9c351db", "filename": "src/libsyntax_ext/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_ext%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Flibsyntax_ext%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Futil.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,11 +1,12 @@\n+use rustc_parse::validate_attr;\n use syntax_pos::Symbol;\n use syntax::ast::MetaItem;\n-use syntax::attr::{check_builtin_attribute, AttributeTemplate};\n+use syntax::attr::AttributeTemplate;\n use syntax_expand::base::ExtCtxt;\n \n pub fn check_builtin_macro_attribute(ecx: &ExtCtxt<'_>, meta_item: &MetaItem, name: Symbol) {\n     // All the built-in macro attributes are \"words\" at the moment.\n     let template = AttributeTemplate::only_word();\n     let attr = ecx.attribute(meta_item.clone());\n-    check_builtin_attribute(ecx.parse_sess, &attr, name, template);\n+    validate_attr::check_builtin_attribute(ecx.parse_sess, &attr, name, template);\n }"}, {"sha": "0bf17302b069d50991f281ff6a87e9895b21096f", "filename": "src/test/ui-fulldeps/ast_stmt_expr_attr.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -6,21 +6,23 @@\n #![feature(rustc_private)]\n \n extern crate syntax;\n+extern crate syntax_expand;\n+extern crate rustc_parse;\n extern crate rustc_errors;\n \n use rustc_errors::PResult;\n+use rustc_parse::parser::attr::*;\n+use rustc_parse::new_parser_from_source_str;\n+use rustc_parse::parser::Parser;\n use syntax::ast::*;\n use syntax::attr::*;\n use syntax::ast;\n use syntax::sess::ParseSess;\n use syntax::source_map::{FilePathMapping, FileName};\n-use syntax::parse;\n-use syntax::parse::new_parser_from_source_str;\n-use syntax::parse::parser::Parser;\n-use syntax::token;\n use syntax::ptr::P;\n-use syntax::parse::parser::attr::*;\n use syntax::print::pprust;\n+use syntax::token;\n+use syntax_expand::config::process_configure_mod;\n use std::fmt;\n \n // Copied out of syntax::util::parser_testing\n@@ -72,8 +74,12 @@ fn str_compare<T, F: Fn(&T) -> String>(e: &str, expected: &[T], actual: &[T], f:\n     }\n }\n \n+fn sess() -> ParseSess {\n+    ParseSess::new(FilePathMapping::empty(), process_configure_mod)\n+}\n+\n fn check_expr_attrs(es: &str, expected: &[&str]) {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = sess();\n     let e = expr(es, &ps).expect(\"parse error\");\n     let actual = &e.attrs;\n     str_compare(es,\n@@ -83,7 +89,7 @@ fn check_expr_attrs(es: &str, expected: &[&str]) {\n }\n \n fn check_stmt_attrs(es: &str, expected: &[&str]) {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = sess();\n     let e = stmt(es, &ps).expect(\"parse error\");\n     let actual = e.kind.attrs();\n     str_compare(es,\n@@ -93,15 +99,15 @@ fn check_stmt_attrs(es: &str, expected: &[&str]) {\n }\n \n fn reject_expr_parse(es: &str) {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = sess();\n     match expr(es, &ps) {\n         Ok(_) => panic!(\"parser did not reject `{}`\", es),\n         Err(mut e) => e.cancel(),\n     };\n }\n \n fn reject_stmt_parse(es: &str) {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = sess();\n     match stmt(es, &ps) {\n         Ok(_) => panic!(\"parser did not reject `{}`\", es),\n         Err(mut e) => e.cancel(),"}, {"sha": "2411b9634c32a63d24525536f74c2052a8b7b94a", "filename": "src/test/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -5,11 +5,14 @@\n #![feature(rustc_private)]\n \n extern crate syntax;\n+extern crate syntax_expand;\n+extern crate rustc_parse;\n \n+use rustc_parse::new_parser_from_file;\n use std::path::Path;\n use syntax::sess::ParseSess;\n use syntax::source_map::FilePathMapping;\n-use syntax::parse;\n+use syntax_expand::config::process_configure_mod;\n \n #[path = \"mod_dir_simple/test.rs\"]\n mod gravy;\n@@ -21,10 +24,10 @@ pub fn main() {\n }\n \n fn parse() {\n-    let parse_session = ParseSess::new(FilePathMapping::empty());\n+    let parse_session = ParseSess::new(FilePathMapping::empty(), process_configure_mod);\n \n     let path = Path::new(file!());\n     let path = path.canonicalize().unwrap();\n-    let mut parser = parse::new_parser_from_file(&parse_session, &path);\n+    let mut parser = new_parser_from_file(&parse_session, &path);\n     let _ = parser.parse_crate_mod();\n }"}, {"sha": "5da0297f64564a73c4dceca2c2a9a1c7fe32dc79", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -21,21 +21,24 @@\n \n extern crate rustc_data_structures;\n extern crate syntax;\n+extern crate syntax_expand;\n+extern crate rustc_parse;\n \n use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_parse::new_parser_from_source_str;\n use syntax::ast::*;\n use syntax::sess::ParseSess;\n use syntax::source_map::{Spanned, DUMMY_SP, FileName};\n use syntax::source_map::FilePathMapping;\n use syntax::mut_visit::{self, MutVisitor, visit_clobber};\n-use syntax::parse;\n use syntax::print::pprust;\n use syntax::ptr::P;\n+use syntax_expand::config::process_configure_mod;\n \n fn parse_expr(ps: &ParseSess, src: &str) -> Option<P<Expr>> {\n     let src_as_string = src.to_string();\n \n-    let mut p = parse::new_parser_from_source_str(\n+    let mut p = new_parser_from_source_str(\n         ps,\n         FileName::Custom(src_as_string.clone()),\n         src_as_string,\n@@ -202,7 +205,7 @@ fn main() {\n }\n \n fn run() {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = ParseSess::new(FilePathMapping::empty(), process_configure_mod);\n \n     iter_exprs(2, &mut |mut e| {\n         // If the pretty printer is correct, then `parse(print(e))` should be identical to `e`,"}, {"sha": "021e7cad09b695c7e1bc72cece3b99d61431cbe9", "filename": "src/test/ui/proc-macro/attribute.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3b6e5705cff9c69362b7ed2d273ffc148b564db/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.stderr?ref=a3b6e5705cff9c69362b7ed2d273ffc148b564db", "patch": "@@ -1,3 +1,15 @@\n+error: malformed `proc_macro_derive` attribute input\n+  --> $DIR/attribute.rs:9:1\n+   |\n+LL | #[proc_macro_derive]\n+   | ^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro_derive(TraitName, /*opt*/ attributes(name1, name2, ...))]`\n+\n+error: malformed `proc_macro_derive` attribute input\n+  --> $DIR/attribute.rs:12:1\n+   |\n+LL | #[proc_macro_derive = \"\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro_derive(TraitName, /*opt*/ attributes(name1, name2, ...))]`\n+\n error: attribute must have either one or two arguments\n   --> $DIR/attribute.rs:15:1\n    |\n@@ -88,17 +100,5 @@ error: `self` cannot be a name of derive helper attribute\n LL | #[proc_macro_derive(d17, attributes(self))]\n    |                                     ^^^^\n \n-error: malformed `proc_macro_derive` attribute input\n-  --> $DIR/attribute.rs:9:1\n-   |\n-LL | #[proc_macro_derive]\n-   | ^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro_derive(TraitName, /*opt*/ attributes(name1, name2, ...))]`\n-\n-error: malformed `proc_macro_derive` attribute input\n-  --> $DIR/attribute.rs:12:1\n-   |\n-LL | #[proc_macro_derive = \"\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[proc_macro_derive(TraitName, /*opt*/ attributes(name1, name2, ...))]`\n-\n error: aborting due to 17 previous errors\n "}]}