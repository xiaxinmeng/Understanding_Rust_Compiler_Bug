{"sha": "eddb744d9038306d020ac46d12a373508e9d3268", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZGI3NDRkOTAzODMwNmQwMjBhYzQ2ZDEyYTM3MzUwOGU5ZDMyNjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-28T20:35:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-28T20:35:18Z"}, "message": "Naming", "tree": {"sha": "072c031a9325efcdf4f9f48f5bfc97bb4524c46d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/072c031a9325efcdf4f9f48f5bfc97bb4524c46d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eddb744d9038306d020ac46d12a373508e9d3268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eddb744d9038306d020ac46d12a373508e9d3268", "html_url": "https://github.com/rust-lang/rust/commit/eddb744d9038306d020ac46d12a373508e9d3268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eddb744d9038306d020ac46d12a373508e9d3268/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "309b21f37861a8c6550f93e7f9b8f955a0b4b256", "url": "https://api.github.com/repos/rust-lang/rust/commits/309b21f37861a8c6550f93e7f9b8f955a0b4b256", "html_url": "https://github.com/rust-lang/rust/commit/309b21f37861a8c6550f93e7f9b8f955a0b4b256"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "073bcc9aec26a0b554e626e5c50dd9378642b47c", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eddb744d9038306d020ac46d12a373508e9d3268/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddb744d9038306d020ac46d12a373508e9d3268/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=eddb744d9038306d020ac46d12a373508e9d3268", "patch": "@@ -50,7 +50,7 @@ impl fmt::Display for FlycheckConfig {\n #[derive(Debug)]\n pub struct FlycheckHandle {\n     // XXX: drop order is significant\n-    cmd_send: Sender<Restart>,\n+    sender: Sender<Restart>,\n     thread: jod_thread::JoinHandle,\n }\n \n@@ -60,16 +60,15 @@ impl FlycheckHandle {\n         config: FlycheckConfig,\n         workspace_root: PathBuf,\n     ) -> FlycheckHandle {\n-        let (cmd_send, cmd_recv) = unbounded::<Restart>();\n-        let thread = jod_thread::spawn(move || {\n-            FlycheckActor::new(sender, config, workspace_root).run(cmd_recv);\n-        });\n-        FlycheckHandle { cmd_send, thread }\n+        let actor = FlycheckActor::new(sender, config, workspace_root);\n+        let (sender, receiver) = unbounded::<Restart>();\n+        let thread = jod_thread::spawn(move || actor.run(receiver));\n+        FlycheckHandle { sender, thread }\n     }\n \n     /// Schedule a re-start of the cargo check worker.\n     pub fn update(&self) {\n-        self.cmd_send.send(Restart).unwrap();\n+        self.sender.send(Restart).unwrap();\n     }\n }\n \n@@ -125,7 +124,7 @@ impl FlycheckActor {\n             recv(check_chan.unwrap_or(&never())) -> msg => Some(Event::CheckEvent(msg.ok())),\n         }\n     }\n-    fn run(&mut self, inbox: Receiver<Restart>) {\n+    fn run(mut self, inbox: Receiver<Restart>) {\n         while let Some(event) = self.next_event(&inbox) {\n             match event {\n                 Event::Restart(Restart) => {"}, {"sha": "b1ea298ae5f6c891ecedec00215736411864dd5f", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eddb744d9038306d020ac46d12a373508e9d3268/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddb744d9038306d020ac46d12a373508e9d3268/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=eddb744d9038306d020ac46d12a373508e9d3268", "patch": "@@ -10,7 +10,7 @@ mod include;\n \n use std::convert::{TryFrom, TryInto};\n \n-use crossbeam_channel::{select, unbounded, Receiver};\n+use crossbeam_channel::{select, unbounded, Receiver, Sender};\n use notify::{RecommendedWatcher, RecursiveMode, Watcher};\n use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::FxHashSet;\n@@ -22,8 +22,8 @@ use crate::include::Include;\n #[derive(Debug)]\n pub struct NotifyHandle {\n     // Relative order of fields below is significant.\n-    sender: crossbeam_channel::Sender<Message>,\n-    _thread: jod_thread::JoinHandle,\n+    sender: Sender<Message>,\n+    thread: jod_thread::JoinHandle,\n }\n \n #[derive(Debug)]\n@@ -37,7 +37,7 @@ impl loader::Handle for NotifyHandle {\n         let actor = NotifyActor::new(sender);\n         let (sender, receiver) = unbounded::<Message>();\n         let thread = jod_thread::spawn(move || actor.run(receiver));\n-        NotifyHandle { sender, _thread: thread }\n+        NotifyHandle { sender, thread }\n     }\n     fn set_config(&mut self, config: loader::Config) {\n         self.sender.send(Message::Config(config)).unwrap()"}]}