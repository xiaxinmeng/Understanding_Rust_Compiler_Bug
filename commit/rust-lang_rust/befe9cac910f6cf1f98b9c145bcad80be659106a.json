{"sha": "befe9cac910f6cf1f98b9c145bcad80be659106a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZmU5Y2FjOTEwZjZjZjFmOThiOWMxNDViY2FkODBiZTY1OTEwNmE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-03-07T23:16:48Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-03-23T13:44:20Z"}, "message": "Add test", "tree": {"sha": "d2ad514d17d74aa61151e1bf93b07fe3800e5ffe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2ad514d17d74aa61151e1bf93b07fe3800e5ffe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/befe9cac910f6cf1f98b9c145bcad80be659106a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/befe9cac910f6cf1f98b9c145bcad80be659106a", "html_url": "https://github.com/rust-lang/rust/commit/befe9cac910f6cf1f98b9c145bcad80be659106a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/befe9cac910f6cf1f98b9c145bcad80be659106a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc628b4f6728a858b9a2715e2d2046b4758bb6e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc628b4f6728a858b9a2715e2d2046b4758bb6e4", "html_url": "https://github.com/rust-lang/rust/commit/dc628b4f6728a858b9a2715e2d2046b4758bb6e4"}], "stats": {"total": 52, "additions": 25, "deletions": 27}, "files": [{"sha": "fccb49a86cbbe9d07a130304323e6c4f69e42da0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/befe9cac910f6cf1f98b9c145bcad80be659106a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/befe9cac910f6cf1f98b9c145bcad80be659106a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=befe9cac910f6cf1f98b9c145bcad80be659106a", "patch": "@@ -1761,7 +1761,7 @@ fn get_real_types(\n     cx: &DocContext<'_>,\n ) -> FxHashSet<Type> {\n     let arg_s = arg.to_string();\n-    let mut res = Vec::new();\n+    let mut res = FxHashSet::default();\n     if arg.is_full_generic() {\n         if let Some(where_pred) = generics.where_predicates.iter().find(|g| {\n             match g {\n@@ -1778,11 +1778,11 @@ fn get_real_types(\n                                 continue\n                             }\n                             if let Some(ty) = x.get_type(cx) {\n-                                let mut adds = get_real_types(generics, &ty, cx);\n+                                let adds = get_real_types(generics, &ty, cx);\n                                 if !adds.is_empty() {\n                                     res.extend(adds);\n                                 } else if !ty.is_full_generic() {\n-                                    res.push(ty);\n+                                    res.insert(ty);\n                                 }\n                             }\n                         }\n@@ -1796,26 +1796,26 @@ fn get_real_types(\n         }) {\n             for bound in bound.get_bounds().unwrap_or_else(|| &[]) {\n                 if let Some(ty) = bound.get_trait_type() {\n-                    let mut adds = get_real_types(generics, &ty, cx);\n+                    let adds = get_real_types(generics, &ty, cx);\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     } else if !ty.is_full_generic() {\n-                        res.push(ty.clone());\n+                        res.insert(ty.clone());\n                     }\n                 }\n             }\n         }\n     } else {\n-        res.push(arg.clone());\n+        res.insert(arg.clone());\n         if let Some(gens) = arg.generics() {\n             for gen in gens.iter() {\n                 if gen.is_full_generic() {\n-                    let mut adds = get_real_types(generics, gen, cx);\n+                    let adds = get_real_types(generics, gen, cx);\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     }\n                 } else {\n-                    res.push(gen.clone());\n+                    res.insert(gen.clone());\n                 }\n             }\n         }\n@@ -1832,36 +1832,30 @@ pub fn get_all_types(\n     decl: &FnDecl,\n     cx: &DocContext<'_>,\n ) -> (Vec<Type>, Vec<Type>) {\n-    let mut all_types = Vec::new();\n+    let mut all_types = FxHashSet::default();\n     for arg in decl.inputs.values.iter() {\n         if arg.type_.is_self_type() {\n             continue;\n         }\n-        let mut args = get_real_types(generics, &arg.type_, cx);\n+        let args = get_real_types(generics, &arg.type_, cx);\n         if !args.is_empty() {\n             all_types.extend(args);\n         } else {\n-            all_types.push(arg.type_.clone());\n+            all_types.insert(arg.type_.clone());\n         }\n     }\n-    // FIXME: use a HashSet instead?\n-    all_types.sort_unstable_by(|a, b| a.to_string().partial_cmp(&b.to_string()).unwrap());\n-    all_types.dedup();\n \n-    let mut ret_types = match decl.output {\n+    let ret_types = match decl.output {\n         FunctionRetTy::Return(ref return_type) => {\n             let mut ret = get_real_types(generics, &return_type, cx);\n             if ret.is_empty() {\n-                ret.push(return_type.clone());\n+                ret.insert(return_type.clone());\n             }\n-            ret\n+            ret.into_iter().collect()\n         }\n         _ => Vec::new(),\n     };\n-    // FIXME: use a HashSet instead?\n-    ret_types.sort_unstable_by(|a, b| a.to_string().partial_cmp(&b.to_string()).unwrap());\n-    ret_types.dedup();\n-    (all_types, ret_types)\n+    (all_types.into_iter().collect(), ret_types)\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "aad7eb627bfe2603a463789a504ef879f579b541", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/befe9cac910f6cf1f98b9c145bcad80be659106a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/befe9cac910f6cf1f98b9c145bcad80be659106a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=befe9cac910f6cf1f98b9c145bcad80be659106a", "patch": "@@ -756,16 +756,20 @@ if (!DOMTokenList.prototype.remove) {\n \n                 if (obj && obj.type && obj.type.length > OUTPUT_DATA) {\n                     var ret = obj.type[OUTPUT_DATA];\n-                    //if (obj.name === \"xo\") {\n-                    //    debugger;\n-                    //}\n                     if (!obj.type[OUTPUT_DATA].length) {\n                         ret = [ret];\n                     }\n                     for (var x = 0; x < ret.length; ++x) {\n-                        var tmp = checkType(ret[x], val, literalSearch);\n-                        if (literalSearch === true && tmp === true) {\n-                            return true;\n+                        var r = ret[x];\n+                        if (typeof r === \"string\") {\n+                            r = [r];\n+                        }\n+                        var tmp = checkType(r, val, literalSearch);\n+                        if (literalSearch === true) {\n+                            if (tmp === true) {\n+                                return true;\n+                            }\n+                            continue;\n                         }\n                         lev_distance = Math.min(tmp, lev_distance);\n                         if (lev_distance === 0) {"}]}