{"sha": "f3634503587a1f4e3b34f96452163595f242f911", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNjM0NTAzNTg3YTFmNGUzYjM0Zjk2NDUyMTYzNTk1ZjI0MmY5MTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-10T23:13:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-10T23:13:13Z"}, "message": "Auto merge of #70986 - marmeladema:issue70853/librustc_middle-local-def-id, r=eddyb\n\nrustc_middle: return `LocalDefId` where possible in hir::map module\n\nThis changes the return type of the following functions to return a `LocalDefId` instead of a `DefId`:\n* opt_local_def_id_from_node_id\n* opt_local_def_id\n* body_owner_def_id\n* local_def_id_from_node_id\n* get_parent_id\n\nThis is another step in the right direction for #70853\n\nThis pull request will be followed by another (substantial one) which changes the return type of `local_def_id` function but this change being more invasive, we might want to wait for #70956 or #70961 (or some other form it) to land first.", "tree": {"sha": "92c7bd0dc5421811456169c6a18336cbfaddfc2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92c7bd0dc5421811456169c6a18336cbfaddfc2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3634503587a1f4e3b34f96452163595f242f911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3634503587a1f4e3b34f96452163595f242f911", "html_url": "https://github.com/rust-lang/rust/commit/f3634503587a1f4e3b34f96452163595f242f911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3634503587a1f4e3b34f96452163595f242f911/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14061868b3960d8a68a079bd276dde85936970ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/14061868b3960d8a68a079bd276dde85936970ac", "html_url": "https://github.com/rust-lang/rust/commit/14061868b3960d8a68a079bd276dde85936970ac"}, {"sha": "b6b00578dbd6ef6724b104160744339e9736fb1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6b00578dbd6ef6724b104160744339e9736fb1e", "html_url": "https://github.com/rust-lang/rust/commit/b6b00578dbd6ef6724b104160744339e9736fb1e"}], "stats": {"total": 213, "additions": 124, "deletions": 89}, "files": [{"sha": "942d76e3202b91a65cc47a995a7398b207606cd2", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -1594,7 +1594,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 self.tcx.hir().body_owner_def_id(hir::BodyId { hir_id: cause.body_id })\n             });\n         self.check_and_note_conflicting_crates(diag, terr);\n-        self.tcx.note_and_explain_type_err(diag, terr, span, body_owner_def_id);\n+        self.tcx.note_and_explain_type_err(diag, terr, span, body_owner_def_id.to_def_id());\n \n         // It reads better to have the error origin as the final\n         // thing."}, {"sha": "4c054795136b9b90852962dcd271c73e4377aec8", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -812,7 +812,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n             {\n                 sess.time(\"match_checking\", || {\n                     tcx.par_body_owners(|def_id| {\n-                        tcx.ensure().check_match(def_id);\n+                        tcx.ensure().check_match(def_id.to_def_id());\n                     });\n                 });\n             },\n@@ -834,7 +834,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     });\n \n     sess.time(\"MIR_borrow_checking\", || {\n-        tcx.par_body_owners(|def_id| tcx.ensure().mir_borrowck(def_id));\n+        tcx.par_body_owners(|def_id| tcx.ensure().mir_borrowck(def_id.to_def_id()));\n     });\n \n     sess.time(\"dumping_chalk_like_clauses\", || {\n@@ -843,7 +843,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n \n     sess.time(\"MIR_effect_checking\", || {\n         for def_id in tcx.body_owners() {\n-            mir::transform::check_unsafety::check_unsafety(tcx, def_id)\n+            mir::transform::check_unsafety::check_unsafety(tcx, def_id.to_def_id())\n         }\n     });\n "}, {"sha": "910d53880f22d548c1176b78d8e2908a06a8b3a9", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -1166,7 +1166,7 @@ declare_lint_pass!(\n );\n \n fn check_const(cx: &LateContext<'_, '_>, body_id: hir::BodyId) {\n-    let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n+    let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();\n     // trigger the query once for all constants since that will already report the errors\n     // FIXME: Use ensure here\n     let _ = cx.tcx.const_eval_poly(def_id);"}, {"sha": "3eaacb54d5b42cb0b0761a502c2972a704e7bd62", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -150,16 +150,15 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn def_path_from_hir_id(&self, id: HirId) -> Option<DefPath> {\n-        self.opt_local_def_id(id).map(|def_id| self.def_path(def_id.expect_local()))\n+        self.opt_local_def_id(id).map(|def_id| self.def_path(def_id))\n     }\n \n     pub fn def_path(&self, def_id: LocalDefId) -> DefPath {\n         self.tcx.definitions.def_path(def_id)\n     }\n \n-    // FIXME(eddyb) this function can and should return `LocalDefId`.\n     #[inline]\n-    pub fn local_def_id_from_node_id(&self, node: NodeId) -> DefId {\n+    pub fn local_def_id_from_node_id(&self, node: NodeId) -> LocalDefId {\n         self.opt_local_def_id_from_node_id(node).unwrap_or_else(|| {\n             let hir_id = self.node_id_to_hir_id(node);\n             bug!(\n@@ -173,24 +172,26 @@ impl<'hir> Map<'hir> {\n     // FIXME(eddyb) this function can and should return `LocalDefId`.\n     #[inline]\n     pub fn local_def_id(&self, hir_id: HirId) -> DefId {\n-        self.opt_local_def_id(hir_id).unwrap_or_else(|| {\n-            bug!(\n-                \"local_def_id: no entry for `{:?}`, which has a map of `{:?}`\",\n-                hir_id,\n-                self.find_entry(hir_id)\n-            )\n-        })\n+        self.opt_local_def_id(hir_id)\n+            .unwrap_or_else(|| {\n+                bug!(\n+                    \"local_def_id: no entry for `{:?}`, which has a map of `{:?}`\",\n+                    hir_id,\n+                    self.find_entry(hir_id)\n+                )\n+            })\n+            .to_def_id()\n     }\n \n     #[inline]\n-    pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<DefId> {\n+    pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {\n         let node_id = self.hir_id_to_node_id(hir_id);\n         self.opt_local_def_id_from_node_id(node_id)\n     }\n \n     #[inline]\n-    pub fn opt_local_def_id_from_node_id(&self, node: NodeId) -> Option<DefId> {\n-        Some(self.tcx.definitions.opt_local_def_id(node)?.to_def_id())\n+    pub fn opt_local_def_id_from_node_id(&self, node: NodeId) -> Option<LocalDefId> {\n+        self.tcx.definitions.opt_local_def_id(node)\n     }\n \n     #[inline]\n@@ -366,9 +367,8 @@ impl<'hir> Map<'hir> {\n         parent\n     }\n \n-    // FIXME(eddyb) this function can and should return `LocalDefId`.\n-    pub fn body_owner_def_id(&self, id: BodyId) -> DefId {\n-        self.local_def_id(self.body_owner(id))\n+    pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {\n+        self.local_def_id(self.body_owner(id)).expect_local()\n     }\n \n     /// Given a `HirId`, returns the `BodyId` associated with it,\n@@ -720,9 +720,8 @@ impl<'hir> Map<'hir> {\n         scope\n     }\n \n-    // FIXME(eddyb) this function can and should return `LocalDefId`.\n-    pub fn get_parent_did(&self, id: HirId) -> DefId {\n-        self.local_def_id(self.get_parent_item(id))\n+    pub fn get_parent_did(&self, id: HirId) -> LocalDefId {\n+        self.local_def_id(self.get_parent_item(id)).expect_local()\n     }\n \n     pub fn get_foreign_abi(&self, hir_id: HirId) -> Abi {"}, {"sha": "05c7d528b94589becd787eeb935e980a9be06963", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -2657,21 +2657,21 @@ pub enum ImplOverlapKind {\n \n impl<'tcx> TyCtxt<'tcx> {\n     pub fn body_tables(self, body: hir::BodyId) -> &'tcx TypeckTables<'tcx> {\n-        self.typeck_tables_of(self.hir().body_owner_def_id(body))\n+        self.typeck_tables_of(self.hir().body_owner_def_id(body).to_def_id())\n     }\n \n     /// Returns an iterator of the `DefId`s for all body-owners in this\n     /// crate. If you would prefer to iterate over the bodies\n     /// themselves, you can do `self.hir().krate().body_ids.iter()`.\n-    pub fn body_owners(self) -> impl Iterator<Item = DefId> + Captures<'tcx> + 'tcx {\n+    pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + Captures<'tcx> + 'tcx {\n         self.hir()\n             .krate()\n             .body_ids\n             .iter()\n             .map(move |&body_id| self.hir().body_owner_def_id(body_id))\n     }\n \n-    pub fn par_body_owners<F: Fn(DefId) + sync::Sync + sync::Send>(self, f: F) {\n+    pub fn par_body_owners<F: Fn(LocalDefId) + sync::Sync + sync::Send>(self, f: F) {\n         par_iter(&self.hir().krate().body_ids)\n             .for_each(|&body_id| f(self.hir().body_owner_def_id(body_id)));\n     }"}, {"sha": "f1dff4fceb498e9f3118d58a94116a7f0db52db9", "filename": "src/librustc_mir/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -84,11 +84,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n \n pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n     let parent_id = tcx.hir().get_parent_did(hir_id);\n-    if !parent_id.is_top_level_module() {\n-        is_const_impl_raw(tcx, parent_id.expect_local())\n-    } else {\n-        false\n-    }\n+    if !parent_id.is_top_level_module() { is_const_impl_raw(tcx, parent_id) } else { false }\n }\n \n /// Checks whether the function has a `const` modifier or, in case it is an intrinsic, whether"}, {"sha": "81ea57e4c004c28d0671ae9e8277c4f9f0fa6f95", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -1,7 +1,7 @@\n use crate::{shim, util};\n use rustc_ast::ast;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::{BodyAndCache, ConstQualifs, MirPhase, Promoted};\n@@ -62,7 +62,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n     let mut set = DefIdSet::default();\n \n     // All body-owners have MIR associated with them.\n-    set.extend(tcx.body_owners());\n+    set.extend(tcx.body_owners().map(LocalDefId::to_def_id));\n \n     // Additionally, tuple struct/variant constructors have MIR, but\n     // they don't have a BodyId, so we need to build them separately."}, {"sha": "ad5a649a24a9feaf880c296df492e80ae46c1075", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -131,8 +131,8 @@ impl Visitor<'tcx> for ItemVisitor<'tcx> {\n     fn visit_nested_body(&mut self, body_id: hir::BodyId) {\n         let owner_def_id = self.tcx.hir().body_owner_def_id(body_id);\n         let body = self.tcx.hir().body(body_id);\n-        let param_env = self.tcx.param_env(owner_def_id);\n-        let tables = self.tcx.typeck_tables_of(owner_def_id);\n+        let param_env = self.tcx.param_env(owner_def_id.to_def_id());\n+        let tables = self.tcx.typeck_tables_of(owner_def_id.to_def_id());\n         ExprVisitor { tcx: self.tcx, param_env, tables }.visit_body(body);\n         self.visit_body(body);\n     }"}, {"sha": "dcf50d7c0899012866743d10848fe2d849c7865a", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::LOCAL_CRATE;\n-use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirIdSet, Node};\n@@ -42,7 +42,7 @@ fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>, attrs: Codegen\n fn method_might_be_inlined(\n     tcx: TyCtxt<'_>,\n     impl_item: &hir::ImplItem<'_>,\n-    impl_src: DefId,\n+    impl_src: LocalDefId,\n ) -> bool {\n     let codegen_fn_attrs = tcx.codegen_fn_attrs(impl_item.hir_id.owner.to_def_id());\n     let generics = tcx.generics_of(tcx.hir().local_def_id(impl_item.hir_id));\n@@ -54,7 +54,7 @@ fn method_might_be_inlined(\n             return true;\n         }\n     }\n-    if let Some(impl_hir_id) = tcx.hir().as_local_hir_id(impl_src) {\n+    if let Some(impl_hir_id) = tcx.hir().as_local_hir_id(impl_src.to_def_id()) {\n         match tcx.hir().find(impl_hir_id) {\n             Some(Node::Item(item)) => item_might_be_inlined(tcx, &item, codegen_fn_attrs),\n             Some(..) | None => span_bug!(impl_item.span, \"impl did is not an item\"),\n@@ -171,7 +171,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                         if generics.requires_monomorphization(self.tcx) || attrs.requests_inline() {\n                             true\n                         } else {\n-                            let impl_did = self.tcx.hir().get_parent_did(hir_id);\n+                            let impl_did = self.tcx.hir().get_parent_did(hir_id).to_def_id();\n                             // Check the impl. If the generics on the self\n                             // type of the impl require inlining, this method\n                             // does too."}, {"sha": "a6d880667adf22f0576c3b81e8140f112e1e17b3", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -248,7 +248,7 @@ fn def_id_visibility<'tcx>(\n                     }\n                 }\n                 Node::TraitItem(..) | Node::Variant(..) => {\n-                    return def_id_visibility(tcx, tcx.hir().get_parent_did(hir_id));\n+                    return def_id_visibility(tcx, tcx.hir().get_parent_did(hir_id).to_def_id());\n                 }\n                 Node::ImplItem(impl_item) => {\n                     match tcx.hir().get(tcx.hir().get_parent_item(hir_id)) {\n@@ -270,7 +270,7 @@ fn def_id_visibility<'tcx>(\n                             let (mut ctor_vis, mut span, mut descr) =\n                                 def_id_visibility(tcx, parent_did);\n \n-                            let adt_def = tcx.adt_def(tcx.hir().get_parent_did(hir_id));\n+                            let adt_def = tcx.adt_def(tcx.hir().get_parent_did(hir_id).to_def_id());\n                             let ctor_did = tcx.hir().local_def_id(vdata.ctor_hir_id().unwrap());\n                             let variant = adt_def.variant_with_ctor_id(ctor_did);\n \n@@ -309,7 +309,8 @@ fn def_id_visibility<'tcx>(\n                             // If the structure is marked as non_exhaustive then lower the\n                             // visibility to within the crate.\n                             if ctor_vis == ty::Visibility::Public {\n-                                let adt_def = tcx.adt_def(tcx.hir().get_parent_did(hir_id));\n+                                let adt_def =\n+                                    tcx.adt_def(tcx.hir().get_parent_did(hir_id).to_def_id());\n                                 if adt_def.non_enum_variant().is_field_list_non_exhaustive() {\n                                     ctor_vis =\n                                         ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));"}, {"sha": "5b93c73e07ce295a3c233dae0f11cc4e30193343", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -107,7 +107,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n     where\n         F: FnOnce(&mut Self),\n     {\n-        let item_def_id = self.tcx.hir().local_def_id_from_node_id(item_id);\n+        let item_def_id = self.tcx.hir().local_def_id_from_node_id(item_id).to_def_id();\n \n         let tables = if self.tcx.has_typeck_tables(item_def_id) {\n             self.tcx.typeck_tables_of(item_def_id)\n@@ -423,8 +423,10 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         vis: ast::Visibility,\n         attrs: &'l [Attribute],\n     ) {\n-        let qualname =\n-            format!(\"::{}\", self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(id)));\n+        let qualname = format!(\n+            \"::{}\",\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(id).to_def_id())\n+        );\n \n         if !self.span.filter_generated(ident.span) {\n             let sig = sig::assoc_const_signature(id, ident.name, typ, expr, &self.save_ctxt);\n@@ -470,7 +472,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         let name = item.ident.to_string();\n         let qualname = format!(\n             \"::{}\",\n-            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id())\n         );\n \n         let kind = match item.kind {\n@@ -670,7 +672,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n             }\n             v.process_generic_params(generics, \"\", item.id);\n             for impl_item in impl_items {\n-                v.process_impl_item(impl_item, map.local_def_id_from_node_id(item.id));\n+                v.process_impl_item(impl_item, map.local_def_id_from_node_id(item.id).to_def_id());\n             }\n         });\n     }\n@@ -685,7 +687,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         let name = item.ident.to_string();\n         let qualname = format!(\n             \"::{}\",\n-            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id())\n         );\n         let mut val = name.clone();\n         if !generics.params.is_empty() {\n@@ -751,7 +753,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         self.process_generic_params(generics, &qualname, item.id);\n         for method in methods {\n             let map = &self.tcx.hir();\n-            self.process_trait_item(method, map.local_def_id_from_node_id(item.id))\n+            self.process_trait_item(method, map.local_def_id_from_node_id(item.id).to_def_id())\n         }\n     }\n \n@@ -1030,7 +1032,9 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 let name = trait_item.ident.name.to_string();\n                 let qualname = format!(\n                     \"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(trait_item.id))\n+                    self.tcx.def_path_str(\n+                        self.tcx.hir().local_def_id_from_node_id(trait_item.id).to_def_id()\n+                    )\n                 );\n \n                 if !self.span.filter_generated(trait_item.ident.span) {\n@@ -1134,7 +1138,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n             .tcx\n             .hir()\n             .opt_local_def_id_from_node_id(id)\n-            .and_then(|id| self.save_ctxt.tcx.parent(id))\n+            .and_then(|id| self.save_ctxt.tcx.parent(id.to_def_id()))\n             .map(id_from_def_id);\n \n         match use_tree.kind {\n@@ -1173,7 +1177,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n \n                 // Make a comma-separated list of names of imported modules.\n                 let def_id = self.tcx.hir().local_def_id_from_node_id(id);\n-                let names = self.tcx.names_imported_by_glob_use(def_id);\n+                let names = self.tcx.names_imported_by_glob_use(def_id.to_def_id());\n                 let names: Vec<_> = names.iter().map(|n| n.to_string()).collect();\n \n                 // Otherwise it's a span with wrong macro expansion info, which\n@@ -1227,8 +1231,10 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n         // only get called for the root module of a crate.\n         assert_eq!(id, ast::CRATE_NODE_ID);\n \n-        let qualname =\n-            format!(\"::{}\", self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(id)));\n+        let qualname = format!(\n+            \"::{}\",\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(id).to_def_id())\n+        );\n \n         let sm = self.tcx.sess.source_map();\n         let filename = sm.span_to_filename(span);\n@@ -1273,7 +1279,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                         .tcx\n                         .hir()\n                         .opt_local_def_id_from_node_id(item.id)\n-                        .and_then(|id| self.save_ctxt.tcx.parent(id))\n+                        .and_then(|id| self.save_ctxt.tcx.parent(id.to_def_id()))\n                         .map(id_from_def_id);\n                     self.dumper.import(\n                         &Access { public: false, reachable: false },\n@@ -1311,7 +1317,9 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n             TyAlias(_, ref ty_params, _, ref ty) => {\n                 let qualname = format!(\n                     \"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+                    self.tcx.def_path_str(\n+                        self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id()\n+                    )\n                 );\n                 let value = match ty {\n                     Some(ty) => ty_to_string(&ty),"}, {"sha": "cb3032de83ddbf2d1cfcc331fb7dee99a9c09c18", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -130,7 +130,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n     pub fn get_extern_item_data(&self, item: &ast::ForeignItem) -> Option<Data> {\n         let qualname = format!(\n             \"::{}\",\n-            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id())\n         );\n         match item.kind {\n             ast::ForeignItemKind::Fn(_, ref sig, ref generics, _) => {\n@@ -183,7 +183,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             ast::ItemKind::Fn(_, ref sig, .., ref generics, _) => {\n                 let qualname = format!(\n                     \"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+                    self.tcx.def_path_str(\n+                        self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id()\n+                    )\n                 );\n                 filter!(self.span_utils, item.ident.span);\n                 Some(Data::DefData(Def {\n@@ -204,7 +206,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             ast::ItemKind::Static(ref typ, ..) => {\n                 let qualname = format!(\n                     \"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+                    self.tcx.def_path_str(\n+                        self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id()\n+                    )\n                 );\n \n                 filter!(self.span_utils, item.ident.span);\n@@ -230,7 +234,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             ast::ItemKind::Const(_, ref typ, _) => {\n                 let qualname = format!(\n                     \"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+                    self.tcx.def_path_str(\n+                        self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id()\n+                    )\n                 );\n                 filter!(self.span_utils, item.ident.span);\n \n@@ -255,7 +261,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             ast::ItemKind::Mod(ref m) => {\n                 let qualname = format!(\n                     \"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+                    self.tcx.def_path_str(\n+                        self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id()\n+                    )\n                 );\n \n                 let sm = self.tcx.sess.source_map();\n@@ -282,7 +290,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                 let name = item.ident.to_string();\n                 let qualname = format!(\n                     \"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+                    self.tcx.def_path_str(\n+                        self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id()\n+                    )\n                 );\n                 filter!(self.span_utils, item.ident.span);\n                 let variants_str =\n@@ -363,11 +373,11 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             let name = ident.to_string();\n             let qualname = format!(\n                 \"::{}::{}\",\n-                self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(scope)),\n+                self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(scope).to_def_id()),\n                 ident\n             );\n             filter!(self.span_utils, ident.span);\n-            let def_id = self.tcx.hir().local_def_id_from_node_id(field.id);\n+            let def_id = self.tcx.hir().local_def_id_from_node_id(field.id).to_def_id();\n             let typ = self.tcx.type_of(def_id).to_string();\n \n             let id = id_from_node_id(field.id, self);\n@@ -399,7 +409,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         // which the method is declared in, followed by the method's name.\n         let (qualname, parent_scope, decl_id, docs, attributes) = match self\n             .tcx\n-            .impl_of_method(self.tcx.hir().local_def_id_from_node_id(id))\n+            .impl_of_method(self.tcx.hir().local_def_id_from_node_id(id).to_def_id())\n         {\n             Some(impl_id) => match self.tcx.hir().get_if_local(impl_id) {\n                 Some(Node::Item(item)) => match item.kind {\n@@ -448,7 +458,10 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     );\n                 }\n             },\n-            None => match self.tcx.trait_of_item(self.tcx.hir().local_def_id_from_node_id(id)) {\n+            None => match self\n+                .tcx\n+                .trait_of_item(self.tcx.hir().local_def_id_from_node_id(id).to_def_id())\n+            {\n                 Some(def_id) => {\n                     let mut docs = String::new();\n                     let mut attrs = vec![];\n@@ -1073,7 +1086,7 @@ fn id_from_def_id(id: DefId) -> rls_data::Id {\n \n fn id_from_node_id(id: NodeId, scx: &SaveContext<'_, '_>) -> rls_data::Id {\n     let def_id = scx.tcx.hir().opt_local_def_id_from_node_id(id);\n-    def_id.map(id_from_def_id).unwrap_or_else(|| {\n+    def_id.map(|id| id_from_def_id(id.to_def_id())).unwrap_or_else(|| {\n         // Create a *fake* `DefId` out of a `NodeId` by subtracting the `NodeId`\n         // out of the maximum u32 value. This will work unless you have *billions*\n         // of definitions in a single crate (very unlikely to actually happen)."}, {"sha": "fad9f2f613012db8ac9e00610a75911865b41c5f", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -224,6 +224,11 @@ impl LocalDefId {\n     pub fn to_def_id(self) -> DefId {\n         DefId { krate: LOCAL_CRATE, index: self.local_def_index }\n     }\n+\n+    #[inline]\n+    pub fn is_top_level_module(self) -> bool {\n+        self.local_def_index == CRATE_DEF_INDEX\n+    }\n }\n \n impl fmt::Debug for LocalDefId {"}, {"sha": "f2640cec7106b256bceb8b572b0368bfa011ac6d", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -358,7 +358,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                         tcx.hir().body_owner_def_id(hir::BodyId {\n                                             hir_id: obligation.cause.body_id,\n                                         })\n-                                    }),\n+                                    })\n+                                    .to_def_id(),\n                             );\n \n                             err.span_label(enclosing_scope_span, s.as_str());"}, {"sha": "7a03d0bc9f6026c0b0d09d050c8e91beec240c8d", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -2371,7 +2371,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n             let parent_def_id = def_id\n                 .and_then(|def_id| tcx.hir().as_local_hir_id(def_id))\n-                .map(|hir_id| tcx.hir().get_parent_did(hir_id));\n+                .map(|hir_id| tcx.hir().get_parent_did(hir_id).to_def_id());\n \n             debug!(\"qpath_to_ty: parent_def_id={:?}\", parent_def_id);\n "}, {"sha": "4b5953b5e958cfad601ce39ce0c5c63843955b06", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -751,7 +751,7 @@ fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: DefId) {\n fn typeck_item_bodies(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n     debug_assert!(crate_num == LOCAL_CRATE);\n     tcx.par_body_owners(|body_owner_def_id| {\n-        tcx.ensure().typeck_tables_of(body_owner_def_id);\n+        tcx.ensure().typeck_tables_of(body_owner_def_id.to_def_id());\n     });\n }\n "}, {"sha": "f7564623946d8684a17de035993acc0f2187ed4c", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -109,7 +109,7 @@ macro_rules! ignore_err {\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn regionck_expr(&self, body: &'tcx hir::Body<'tcx>) {\n-        let subject = self.tcx.hir().body_owner_def_id(body.id());\n+        let subject = self.tcx.hir().body_owner_def_id(body.id()).to_def_id();\n         let id = body.value.hir_id;\n         let mut rcx =\n             RegionCtxt::new(self, RepeatingScope(id), id, Subject(subject), self.param_env);\n@@ -154,7 +154,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// constraints to add.\n     pub fn regionck_fn(&self, fn_id: hir::HirId, body: &'tcx hir::Body<'tcx>) {\n         debug!(\"regionck_fn(id={})\", fn_id);\n-        let subject = self.tcx.hir().body_owner_def_id(body.id());\n+        let subject = self.tcx.hir().body_owner_def_id(body.id()).to_def_id();\n         let hir_id = body.value.hir_id;\n         let mut rcx =\n             RegionCtxt::new(self, RepeatingScope(hir_id), hir_id, Subject(subject), self.param_env);\n@@ -290,7 +290,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n \n         let body_id = body.id();\n         self.body_id = body_id.hir_id;\n-        self.body_owner = self.tcx.hir().body_owner_def_id(body_id);\n+        self.body_owner = self.tcx.hir().body_owner_def_id(body_id).to_def_id();\n \n         let call_site =\n             region::Scope { id: body.value.hir_id.local_id, data: region::ScopeData::CallSite };"}, {"sha": "2c9e23d8095cad73f1bceb0881911c3d3188fd8e", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -146,7 +146,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        let body_owner_def_id = self.tcx.hir().body_owner_def_id(body.id());\n+        let body_owner_def_id = self.tcx.hir().body_owner_def_id(body.id()).to_def_id();\n         assert_eq!(body_owner_def_id, closure_def_id);\n         let mut delegate = InferBorrowKind {\n             fcx: self,"}, {"sha": "cc99ae201993921d93a322758b7af8bafd1c6e81", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -12,7 +12,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports = DefIdSet::default();\n     for &body_id in tcx.hir().krate().bodies.keys() {\n         let item_def_id = tcx.hir().body_owner_def_id(body_id);\n-        let imports = tcx.used_trait_imports(item_def_id);\n+        let imports = tcx.used_trait_imports(item_def_id.to_def_id());\n         debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n         used_trait_imports.extend(imports.iter());\n     }"}, {"sha": "23bee8e7aad41455747eba56e3ae34d560256718", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -1513,7 +1513,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n         }\n \n         Ctor(data) | Variant(hir::Variant { data, .. }) if data.ctor_hir_id().is_some() => {\n-            let ty = tcx.type_of(tcx.hir().get_parent_did(hir_id));\n+            let ty = tcx.type_of(tcx.hir().get_parent_did(hir_id).to_def_id());\n             let inputs =\n                 data.fields().iter().map(|f| tcx.type_of(tcx.hir().local_def_id(f.hir_id)));\n             ty::Binder::bind(tcx.mk_fn_sig("}, {"sha": "985f66694b671d2e231fbd37203117a8b86bbc6a", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -59,14 +59,14 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 }\n             }\n             ImplItemKind::OpaqueTy(_) => {\n-                if tcx.impl_trait_ref(tcx.hir().get_parent_did(hir_id)).is_none() {\n+                if tcx.impl_trait_ref(tcx.hir().get_parent_did(hir_id).to_def_id()).is_none() {\n                     report_assoc_ty_on_inherent_impl(tcx, item.span);\n                 }\n \n                 find_opaque_ty_constraints(tcx, def_id)\n             }\n             ImplItemKind::TyAlias(ref ty) => {\n-                if tcx.impl_trait_ref(tcx.hir().get_parent_did(hir_id)).is_none() {\n+                if tcx.impl_trait_ref(tcx.hir().get_parent_did(hir_id).to_def_id()).is_none() {\n                     report_assoc_ty_on_inherent_impl(tcx, item.span);\n                 }\n \n@@ -177,7 +177,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n         Node::Ctor(&ref def) | Node::Variant(Variant { data: ref def, .. }) => match *def {\n             VariantData::Unit(..) | VariantData::Struct(..) => {\n-                tcx.type_of(tcx.hir().get_parent_did(hir_id))\n+                tcx.type_of(tcx.hir().get_parent_did(hir_id).to_def_id())\n             }\n             VariantData::Tuple(..) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n@@ -207,9 +207,11 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     tcx.types.usize\n                 }\n \n-                Node::Variant(Variant { disr_expr: Some(ref e), .. }) if e.hir_id == hir_id => {\n-                    tcx.adt_def(tcx.hir().get_parent_did(hir_id)).repr.discr_type().to_ty(tcx)\n-                }\n+                Node::Variant(Variant { disr_expr: Some(ref e), .. }) if e.hir_id == hir_id => tcx\n+                    .adt_def(tcx.hir().get_parent_did(hir_id).to_def_id())\n+                    .repr\n+                    .discr_type()\n+                    .to_ty(tcx),\n \n                 Node::Ty(&Ty { kind: TyKind::Path(_), .. })\n                 | Node::Expr(&Expr { kind: ExprKind::Struct(..), .. })"}, {"sha": "a82015dea5fc8daf465c7645877b705f60a5a387", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -451,7 +451,11 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n                         name: None,\n                         attrs: clean::Attributes::default(),\n                         source: clean::Span::empty(),\n-                        def_id: cx.tcx.hir().local_def_id_from_node_id(ast::CRATE_NODE_ID),\n+                        def_id: cx\n+                            .tcx\n+                            .hir()\n+                            .local_def_id_from_node_id(ast::CRATE_NODE_ID)\n+                            .to_def_id(),\n                         visibility: clean::Public,\n                         stability: None,\n                         deprecation: None,"}, {"sha": "66df5eb45bb70815680b2289bd556831a34da09b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -419,7 +419,10 @@ impl Clean<Lifetime> for hir::GenericParam<'_> {\n impl Clean<Constant> for hir::ConstArg {\n     fn clean(&self, cx: &DocContext<'_>) -> Constant {\n         Constant {\n-            type_: cx.tcx.type_of(cx.tcx.hir().body_owner_def_id(self.value.body)).clean(cx),\n+            type_: cx\n+                .tcx\n+                .type_of(cx.tcx.hir().body_owner_def_id(self.value.body).to_def_id())\n+                .clean(cx),\n             expr: print_const_expr(cx, self.value.body),\n             value: None,\n             is_literal: is_literal_expr(cx, self.value.body.hir_id),\n@@ -1551,7 +1554,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 BareFunction(box BareFunctionDecl {\n                     unsafety: sig.unsafety(),\n                     generic_params: Vec::new(),\n-                    decl: (local_def_id, sig).clean(cx),\n+                    decl: (local_def_id.to_def_id(), sig).clean(cx),\n                     abi: sig.abi(),\n                 })\n             }\n@@ -2261,7 +2264,7 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n             name: None,\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_node_id(ast::CRATE_NODE_ID),\n+            def_id: cx.tcx.hir().local_def_id_from_node_id(ast::CRATE_NODE_ID).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: None,\n             deprecation: None,"}, {"sha": "762ec7e9ac3c6e6fd202d80739a773949e412ec6", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3634503587a1f4e3b34f96452163595f242f911/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f3634503587a1f4e3b34f96452163595f242f911", "patch": "@@ -152,12 +152,15 @@ impl<'tcx> DocContext<'tcx> {\n         self.tcx\n             .hir()\n             .opt_local_def_id(id)\n-            .and_then(|def_id| self.tcx.lookup_stability(def_id))\n+            .and_then(|def_id| self.tcx.lookup_stability(def_id.to_def_id()))\n             .cloned()\n     }\n \n     pub fn deprecation(&self, id: HirId) -> Option<attr::Deprecation> {\n-        self.tcx.hir().opt_local_def_id(id).and_then(|def_id| self.tcx.lookup_deprecation(def_id))\n+        self.tcx\n+            .hir()\n+            .opt_local_def_id(id)\n+            .and_then(|def_id| self.tcx.lookup_deprecation(def_id.to_def_id()))\n     }\n }\n "}]}