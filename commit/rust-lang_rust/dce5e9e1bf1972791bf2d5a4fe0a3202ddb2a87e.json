{"sha": "dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZTVlOWUxYmYxOTcyNzkxYmYyZDVhNGZlMGEzMjAyZGRiMmE4N2U=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2021-02-05T11:35:32Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2021-02-05T11:35:32Z"}, "message": "Run x.py fmt to fix tidy issues", "tree": {"sha": "3a76e0d1cce658312b542747ed6acd3683564da9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a76e0d1cce658312b542747ed6acd3683564da9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e", "html_url": "https://github.com/rust-lang/rust/commit/dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c7f10ba385660de51219ecdcbf315146b3a13d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c7f10ba385660de51219ecdcbf315146b3a13d4", "html_url": "https://github.com/rust-lang/rust/commit/7c7f10ba385660de51219ecdcbf315146b3a13d4"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "235fe14cbf9fdd3ed395c65d7fa0a12242828242", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e", "patch": "@@ -275,7 +275,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let fields: Vec<_> = if let Some(FruInfo { base, field_types }) = base {\n                     let place_builder = unpack!(block = this.as_place_builder(block, base));\n \n-\n                     // MIR does not natively support FRU, so for each\n                     // base-supplied field, generate an operand that\n                     // reads it from the base."}, {"sha": "fde007ec011bae21348890a40dd259b8c1cd88ba", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e", "patch": "@@ -1422,12 +1422,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         match test.kind {\n             TestKind::SwitchInt { switch_ty, ref mut options } => {\n                 for candidate in candidates.iter() {\n-                    if !self.add_cases_to_switch(\n-                        &match_place,\n-                        candidate,\n-                        switch_ty,\n-                        options,\n-                    ) {\n+                    if !self.add_cases_to_switch(&match_place, candidate, switch_ty, options) {\n                         break;\n                     }\n                 }\n@@ -1842,14 +1837,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // ```\n             //\n             // and that is clearly not correct.\n-            let by_value_bindings =\n-                parent_bindings\n-                    .iter()\n-                    .flat_map(|(bindings, _)| bindings)\n-                    .chain(&candidate.bindings)\n-                    .filter(|binding| {\n-                        matches!(binding.binding_mode, BindingMode::ByValue )\n-                    });\n+            let by_value_bindings = parent_bindings\n+                .iter()\n+                .flat_map(|(bindings, _)| bindings)\n+                .chain(&candidate.bindings)\n+                .filter(|binding| matches!(binding.binding_mode, BindingMode::ByValue));\n             // Read all of the by reference bindings to ensure that the\n             // place they refer to can't be modified by the guard.\n             for binding in by_value_bindings.clone() {"}, {"sha": "5f6c8d26402eddc3af3bebaed00d41f59a8913cd", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e", "patch": "@@ -76,7 +76,9 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n             kind: hir::TraitItemKind::Const(ty, Some(body_id)),\n             ..\n         }) => (*body_id, ty.span, None),\n-        Node::AnonConst(hir::AnonConst { body, hir_id, .. }) => (*body, tcx.hir().span(*hir_id), None),\n+        Node::AnonConst(hir::AnonConst { body, hir_id, .. }) => {\n+            (*body, tcx.hir().span(*hir_id), None)\n+        }\n \n         _ => span_bug!(tcx.hir().span(id), \"can't build MIR for {:?}\", def.did),\n     };\n@@ -184,7 +186,7 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n                 return_ty,\n                 return_ty_span,\n                 body,\n-                span_with_body\n+                span_with_body,\n             );\n             mir.yield_ty = yield_ty;\n             mir\n@@ -582,7 +584,7 @@ fn construct_fn<'a, 'tcx, A>(\n     return_ty: Ty<'tcx>,\n     return_ty_span: Span,\n     body: &'tcx hir::Body<'tcx>,\n-    span_with_body: Span\n+    span_with_body: Span,\n ) -> Body<'tcx>\n where\n     A: Iterator<Item = ArgInfo<'tcx>>,\n@@ -658,7 +660,8 @@ fn construct_const<'a, 'tcx>(\n     let owner_id = tcx.hir().body_owner(body_id);\n     let def_id = tcx.hir().local_def_id(owner_id);\n     let span = tcx.hir().span(owner_id);\n-    let mut builder = Builder::new(hir, def_id.to_def_id(), span, 0, Safety::Safe, const_ty, const_ty_span, None);\n+    let mut builder =\n+        Builder::new(hir, def_id.to_def_id(), span, 0, Safety::Safe, const_ty, const_ty_span, None);\n \n     let mut block = START_BLOCK;\n     let ast_expr = &tcx.hir().body(body_id).value;\n@@ -698,7 +701,8 @@ fn construct_error<'a, 'tcx>(hir: Cx<'a, 'tcx>, body_id: hir::BodyId) -> Body<'t\n         hir::BodyOwnerKind::Const => 0,\n         hir::BodyOwnerKind::Static(_) => 0,\n     };\n-    let mut builder = Builder::new(hir, def_id.to_def_id(), span, num_params, Safety::Safe, ty, span, None);\n+    let mut builder =\n+        Builder::new(hir, def_id.to_def_id(), span, num_params, Safety::Safe, ty, span, None);\n     let source_info = builder.source_info(span);\n     // Some MIR passes will expect the number of parameters to match the\n     // function declaration."}, {"sha": "5e9d780d1797752d17fd8e4ea671bff61435746c", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=dce5e9e1bf1972791bf2d5a4fe0a3202ddb2a87e", "patch": "@@ -458,7 +458,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let breakable_scope = self.scopes.breakable_scopes.pop().unwrap();\n         assert!(breakable_scope.region_scope == region_scope);\n         let break_block = self.build_exit_tree(breakable_scope.break_drops, None);\n-        if let Some(drops) = breakable_scope.continue_drops { self.build_exit_tree(drops, loop_block); }\n+        if let Some(drops) = breakable_scope.continue_drops {\n+            self.build_exit_tree(drops, loop_block);\n+        }\n         match (normal_exit_block, break_block) {\n             (Some(block), None) | (None, Some(block)) => block,\n             (None, None) => self.cfg.start_new_block().unit(),\n@@ -1364,7 +1366,7 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdge { .. }\n-            | TerminatorKind::InlineAsm {.. } => {\n+            | TerminatorKind::InlineAsm { .. } => {\n                 span_bug!(term.source_info.span, \"cannot unwind from {:?}\", term.kind)\n             }\n         }"}]}