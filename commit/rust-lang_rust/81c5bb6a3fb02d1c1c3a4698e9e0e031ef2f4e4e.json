{"sha": "81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYzViYjZhM2ZiMDJkMWMxYzNhNDY5OGU5ZTBlMDMxZWYyZjRlNGU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-06T00:53:14Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-09T04:11:44Z"}, "message": "Eliminate confusing \"globals\" terminology.\n\nThere are some structures that are called \"globals\", but are they global\nto a compilation session, and not truly global. I have always found this\nhighly confusing, so this commit renames them as \"session globals\" and\nadds a comment explaining things.\n\nAlso, the commit fixes an unnecessary nesting of `set()` calls\n`src/librustc_errors/json/tests.rs`", "tree": {"sha": "1415d42d29241899a5a7ebeef59a556256ab2bb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1415d42d29241899a5a7ebeef59a556256ab2bb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "html_url": "https://github.com/rust-lang/rust/commit/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2753fab7ce3647033146b07c8b6c9f4856a910b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2753fab7ce3647033146b07c8b6c9f4856a910b0", "html_url": "https://github.com/rust-lang/rust/commit/2753fab7ce3647033146b07c8b6c9f4856a910b0"}], "stats": {"total": 263, "additions": 136, "deletions": 127}, "files": [{"sha": "9d4b6dbed98701cbe54b07f18d40ced4913b2ba1", "filename": "src/librustc_ast/attr/mod.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fattr%2Fmod.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -21,55 +21,61 @@ use log::debug;\n use std::iter;\n use std::ops::DerefMut;\n \n-pub struct Globals {\n+// Per-session global variables: this struct is stored in thread-local storage\n+// in such a way that it is accessible without any kind of handle to all\n+// threads within the compilation session, but is not accessible outside the\n+// session.\n+pub struct SessionGlobals {\n     used_attrs: Lock<GrowableBitSet<AttrId>>,\n     known_attrs: Lock<GrowableBitSet<AttrId>>,\n-    rustc_span_globals: rustc_span::Globals,\n+    span_session_globals: rustc_span::SessionGlobals,\n }\n \n-impl Globals {\n-    fn new(edition: Edition) -> Globals {\n-        Globals {\n+impl SessionGlobals {\n+    fn new(edition: Edition) -> SessionGlobals {\n+        SessionGlobals {\n             // We have no idea how many attributes there will be, so just\n             // initiate the vectors with 0 bits. We'll grow them as necessary.\n             used_attrs: Lock::new(GrowableBitSet::new_empty()),\n             known_attrs: Lock::new(GrowableBitSet::new_empty()),\n-            rustc_span_globals: rustc_span::Globals::new(edition),\n+            span_session_globals: rustc_span::SessionGlobals::new(edition),\n         }\n     }\n }\n \n-pub fn with_globals<R>(edition: Edition, f: impl FnOnce() -> R) -> R {\n-    let globals = Globals::new(edition);\n-    GLOBALS.set(&globals, || rustc_span::GLOBALS.set(&globals.rustc_span_globals, f))\n+pub fn with_session_globals<R>(edition: Edition, f: impl FnOnce() -> R) -> R {\n+    let ast_session_globals = SessionGlobals::new(edition);\n+    SESSION_GLOBALS.set(&ast_session_globals, || {\n+        rustc_span::SESSION_GLOBALS.set(&ast_session_globals.span_session_globals, f)\n+    })\n }\n \n-pub fn with_default_globals<R>(f: impl FnOnce() -> R) -> R {\n-    with_globals(DEFAULT_EDITION, f)\n+pub fn with_default_session_globals<R>(f: impl FnOnce() -> R) -> R {\n+    with_session_globals(DEFAULT_EDITION, f)\n }\n \n-scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n+scoped_tls::scoped_thread_local!(pub static SESSION_GLOBALS: SessionGlobals);\n \n pub fn mark_used(attr: &Attribute) {\n     debug!(\"marking {:?} as used\", attr);\n-    GLOBALS.with(|globals| {\n-        globals.used_attrs.lock().insert(attr.id);\n+    SESSION_GLOBALS.with(|session_globals| {\n+        session_globals.used_attrs.lock().insert(attr.id);\n     });\n }\n \n pub fn is_used(attr: &Attribute) -> bool {\n-    GLOBALS.with(|globals| globals.used_attrs.lock().contains(attr.id))\n+    SESSION_GLOBALS.with(|session_globals| session_globals.used_attrs.lock().contains(attr.id))\n }\n \n pub fn mark_known(attr: &Attribute) {\n     debug!(\"marking {:?} as known\", attr);\n-    GLOBALS.with(|globals| {\n-        globals.known_attrs.lock().insert(attr.id);\n+    SESSION_GLOBALS.with(|session_globals| {\n+        session_globals.known_attrs.lock().insert(attr.id);\n     });\n }\n \n pub fn is_known(attr: &Attribute) -> bool {\n-    GLOBALS.with(|globals| globals.known_attrs.lock().contains(attr.id))\n+    SESSION_GLOBALS.with(|session_globals| session_globals.known_attrs.lock().contains(attr.id))\n }\n \n pub fn is_known_lint_tool(m_item: Ident) -> bool {"}, {"sha": "ffd2aa61f286677204716fa826efc80490ebae8f", "filename": "src/librustc_ast/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_ast%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_ast%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Flib.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -43,7 +43,7 @@ pub mod util {\n \n pub mod ast;\n pub mod attr;\n-pub use attr::{with_default_globals, with_globals, GLOBALS};\n+pub use attr::{with_default_session_globals, with_session_globals, SESSION_GLOBALS};\n pub mod crate_disambiguator;\n pub mod entry;\n pub mod expand;"}, {"sha": "e9b6c9759b64409db1808f9965bfb8022c5adc48", "filename": "src/librustc_ast/util/lev_distance/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_ast%2Futil%2Flev_distance%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_ast%2Futil%2Flev_distance%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Flev_distance%2Ftests.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -21,8 +21,8 @@ fn test_lev_distance() {\n \n #[test]\n fn test_find_best_match_for_name() {\n-    use crate::with_default_globals;\n-    with_default_globals(|| {\n+    use crate::with_default_session_globals;\n+    with_default_session_globals(|| {\n         let input = vec![Symbol::intern(\"aaab\"), Symbol::intern(\"aaabc\")];\n         assert_eq!(\n             find_best_match_for_name(input.iter(), \"aaaa\", None),"}, {"sha": "96377a4ae02faf68c2af06002a1e4344298a982c", "filename": "src/librustc_ast_pretty/pprust/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -1,7 +1,7 @@\n use super::*;\n \n use rustc_ast::ast;\n-use rustc_ast::with_default_globals;\n+use rustc_ast::with_default_session_globals;\n use rustc_span::source_map::respan;\n use rustc_span::symbol::Ident;\n \n@@ -25,7 +25,7 @@ fn variant_to_string(var: &ast::Variant) -> String {\n \n #[test]\n fn test_fun_to_string() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let abba_ident = Ident::from_str(\"abba\");\n \n         let decl =\n@@ -40,7 +40,7 @@ fn test_fun_to_string() {\n \n #[test]\n fn test_variant_to_string() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let ident = Ident::from_str(\"principal_skinner\");\n \n         let var = ast::Variant {"}, {"sha": "3a501dd5254c4cb09a3448429731136cb93deada", "filename": "src/librustc_errors/json/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_errors%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_errors%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson%2Ftests.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -39,16 +39,16 @@ impl<T: Write> Write for Shared<T> {\n     }\n }\n \n-fn with_default_globals(f: impl FnOnce()) {\n-    let globals = rustc_span::Globals::new(rustc_span::edition::DEFAULT_EDITION);\n-    rustc_span::GLOBALS.set(&globals, || rustc_span::GLOBALS.set(&globals, f))\n+fn with_default_session_globals(f: impl FnOnce()) {\n+    let session_globals = rustc_span::SessionGlobals::new(rustc_span::edition::DEFAULT_EDITION);\n+    rustc_span::SESSION_GLOBALS.set(&session_globals, f);\n }\n \n /// Test the span yields correct positions in JSON.\n fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n     let expected_output = TestData { spans: vec![expected_output] };\n \n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         sm.new_source_file(Path::new(\"test.rs\").to_owned().into(), code.to_owned());\n "}, {"sha": "c22d2a100c32ed9ee81e2566ab38e91fab7030b6", "filename": "src/librustc_expand/mut_visit/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -2,7 +2,7 @@ use crate::tests::{matches_codepattern, string_to_crate};\n \n use rustc_ast::ast;\n use rustc_ast::mut_visit::{self, MutVisitor};\n-use rustc_ast::with_default_globals;\n+use rustc_ast::with_default_session_globals;\n use rustc_ast_pretty::pprust;\n use rustc_span::symbol::Ident;\n \n@@ -38,7 +38,7 @@ macro_rules! assert_pred {\n // Make sure idents get transformed everywhere.\n #[test]\n fn ident_transformation() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let mut zz_visitor = ToZzIdentMutVisitor;\n         let mut krate =\n             string_to_crate(\"#[a] mod b {fn c (d : e, f : g) {h!(i,j,k);l;m}}\".to_string());\n@@ -55,7 +55,7 @@ fn ident_transformation() {\n // Make sure idents get transformed even inside macro defs.\n #[test]\n fn ident_transformation_in_defs() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let mut zz_visitor = ToZzIdentMutVisitor;\n         let mut krate = string_to_crate(\n             \"macro_rules! a {(b $c:expr $(d $e:token)f+ => \\"}, {"sha": "b3775c78e7345c568a274dfe2a6d788bfe3dfb3a", "filename": "src/librustc_expand/parse/lexer/tests.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast::token::{self, Token, TokenKind};\n use rustc_ast::util::comments::is_doc_comment;\n-use rustc_ast::with_default_globals;\n+use rustc_ast::with_default_session_globals;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{emitter::EmitterWriter, Handler};\n use rustc_parse::lexer::StringReader;\n@@ -33,7 +33,7 @@ fn setup<'a>(sm: &SourceMap, sess: &'a ParseSess, teststr: String) -> StringRead\n \n #[test]\n fn t1() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         let mut string_reader = setup(\n@@ -79,7 +79,7 @@ fn mk_lit(kind: token::LitKind, symbol: &str, suffix: Option<&str>) -> TokenKind\n \n #[test]\n fn doublecolon_parsing() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         check_tokenization(\n@@ -91,7 +91,7 @@ fn doublecolon_parsing() {\n \n #[test]\n fn doublecolon_parsing_2() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         check_tokenization(\n@@ -103,7 +103,7 @@ fn doublecolon_parsing_2() {\n \n #[test]\n fn doublecolon_parsing_3() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         check_tokenization(\n@@ -115,7 +115,7 @@ fn doublecolon_parsing_3() {\n \n #[test]\n fn doublecolon_parsing_4() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         check_tokenization(\n@@ -127,7 +127,7 @@ fn doublecolon_parsing_4() {\n \n #[test]\n fn character_a() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         assert_eq!(setup(&sm, &sh, \"'a'\".to_string()).next_token(), mk_lit(token::Char, \"a\", None),);\n@@ -136,7 +136,7 @@ fn character_a() {\n \n #[test]\n fn character_space() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         assert_eq!(setup(&sm, &sh, \"' '\".to_string()).next_token(), mk_lit(token::Char, \" \", None),);\n@@ -145,7 +145,7 @@ fn character_space() {\n \n #[test]\n fn character_escaped() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         assert_eq!(\n@@ -157,7 +157,7 @@ fn character_escaped() {\n \n #[test]\n fn lifetime_name() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         assert_eq!(\n@@ -169,7 +169,7 @@ fn lifetime_name() {\n \n #[test]\n fn raw_string() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         assert_eq!(\n@@ -181,7 +181,7 @@ fn raw_string() {\n \n #[test]\n fn literal_suffixes() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         macro_rules! test {\n@@ -232,7 +232,7 @@ fn line_doc_comments() {\n \n #[test]\n fn nested_block_comments() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         let mut lexer = setup(&sm, &sh, \"/* /* */ */'a'\".to_string());\n@@ -243,7 +243,7 @@ fn nested_block_comments() {\n \n #[test]\n fn crlf_comments() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         let mut lexer = setup(&sm, &sh, \"// test\\r\\n/// test\\r\\n\".to_string());"}, {"sha": "fc9b9f2dab04e964d2119b400a419c6a6a1ec390", "filename": "src/librustc_expand/parse/tests.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Ftests.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use rustc_ast::visit;\n-use rustc_ast::with_default_globals;\n+use rustc_ast::with_default_session_globals;\n use rustc_ast_pretty::pprust::item_to_string;\n use rustc_errors::PResult;\n use rustc_parse::new_parser_from_source_str;\n@@ -50,15 +50,15 @@ fn string_to_item(source_str: String) -> Option<P<ast::Item>> {\n #[should_panic]\n #[test]\n fn bad_path_expr_1() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         string_to_expr(\"::abc::def::return\".to_string());\n     })\n }\n \n // Checks the token-tree-ization of macros.\n #[test]\n fn string_to_tts_macro() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let tts: Vec<_> =\n             string_to_stream(\"macro_rules! zip (($a)=>($a))\".to_string()).trees().collect();\n         let tts: &[TokenTree] = &tts[..];\n@@ -95,7 +95,7 @@ fn string_to_tts_macro() {\n \n #[test]\n fn string_to_tts_1() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let tts = string_to_stream(\"fn a (b : i32) { b; }\".to_string());\n \n         let expected = TokenStream::new(vec![\n@@ -130,7 +130,7 @@ fn string_to_tts_1() {\n \n #[test]\n fn parse_use() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let use_s = \"use foo::bar::baz;\";\n         let vitem = string_to_item(use_s.to_string()).unwrap();\n         let vitem_s = item_to_string(&vitem);\n@@ -145,7 +145,7 @@ fn parse_use() {\n \n #[test]\n fn parse_extern_crate() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let ex_s = \"extern crate foo;\";\n         let vitem = string_to_item(ex_s.to_string()).unwrap();\n         let vitem_s = item_to_string(&vitem);\n@@ -183,7 +183,7 @@ fn get_spans_of_pat_idents(src: &str) -> Vec<Span> {\n \n #[test]\n fn span_of_self_arg_pat_idents_are_correct() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let srcs = [\n             \"impl z { fn a (&self, &myarg: i32) {} }\",\n             \"impl z { fn a (&mut self, &myarg: i32) {} }\",\n@@ -207,7 +207,7 @@ fn span_of_self_arg_pat_idents_are_correct() {\n \n #[test]\n fn parse_exprs() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         // just make sure that they parse....\n         string_to_expr(\"3 + 4\".to_string());\n         string_to_expr(\"a::z.froob(b,&(987+3))\".to_string());\n@@ -216,7 +216,7 @@ fn parse_exprs() {\n \n #[test]\n fn attrs_fix_bug() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         string_to_item(\n             \"pub fn mk_file_writer(path: &Path, flags: &[FileFlag])\n                 -> Result<Box<Writer>, String> {\n@@ -237,7 +237,7 @@ let mut fflags: c_int = wb();\n \n #[test]\n fn crlf_doc_comments() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sess = sess();\n \n         let name_1 = FileName::Custom(\"crlf_source_1\".to_string());\n@@ -271,7 +271,7 @@ fn ttdelim_span() {\n         new_parser_from_source_str(sess, name, source).parse_expr()\n     }\n \n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sess = sess();\n         let expr = parse_expr_from_source_str(\n             PathBuf::from(\"foo\").into(),\n@@ -299,7 +299,7 @@ fn ttdelim_span() {\n // See `recurse_into_file_modules` in the parser.\n #[test]\n fn out_of_line_mod() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let item = parse_item_from_source_str(\n             PathBuf::from(\"foo\").into(),\n             \"mod foo { struct S; mod this_does_not_exist; }\".to_owned(),"}, {"sha": "283ea0f68d9248f175253a391d33dc3350f0e3be", "filename": "src/librustc_expand/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_expand%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_expand%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Ftests.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast::ast;\n use rustc_ast::tokenstream::TokenStream;\n-use rustc_ast::with_default_globals;\n+use rustc_ast::with_default_session_globals;\n use rustc_parse::{new_parser_from_source_str, parser::Parser, source_file_to_stream};\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n@@ -124,7 +124,7 @@ impl<T: Write> Write for Shared<T> {\n }\n \n fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &str) {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let output = Arc::new(Mutex::new(Vec::new()));\n \n         let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));"}, {"sha": "bc171bec6ff7a88fda026c6cdecda8d3bfd9fdc3", "filename": "src/librustc_expand/tokenstream/tests.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -2,7 +2,7 @@ use crate::tests::string_to_stream;\n \n use rustc_ast::token;\n use rustc_ast::tokenstream::{TokenStream, TokenStreamBuilder, TokenTree};\n-use rustc_ast::with_default_globals;\n+use rustc_ast::with_default_session_globals;\n use rustc_span::{BytePos, Span, Symbol};\n use smallvec::smallvec;\n \n@@ -16,7 +16,7 @@ fn sp(a: u32, b: u32) -> Span {\n \n #[test]\n fn test_concat() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test_res = string_to_ts(\"foo::bar::baz\");\n         let test_fst = string_to_ts(\"foo::bar\");\n         let test_snd = string_to_ts(\"::baz\");\n@@ -29,7 +29,7 @@ fn test_concat() {\n \n #[test]\n fn test_to_from_bijection() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test_start = string_to_ts(\"foo::bar(baz)\");\n         let test_end = test_start.trees().collect();\n         assert_eq!(test_start, test_end)\n@@ -38,7 +38,7 @@ fn test_to_from_bijection() {\n \n #[test]\n fn test_eq_0() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test_res = string_to_ts(\"foo\");\n         let test_eqs = string_to_ts(\"foo\");\n         assert_eq!(test_res, test_eqs)\n@@ -47,7 +47,7 @@ fn test_eq_0() {\n \n #[test]\n fn test_eq_1() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test_res = string_to_ts(\"::bar::baz\");\n         let test_eqs = string_to_ts(\"::bar::baz\");\n         assert_eq!(test_res, test_eqs)\n@@ -56,7 +56,7 @@ fn test_eq_1() {\n \n #[test]\n fn test_eq_3() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test_res = string_to_ts(\"\");\n         let test_eqs = string_to_ts(\"\");\n         assert_eq!(test_res, test_eqs)\n@@ -65,7 +65,7 @@ fn test_eq_3() {\n \n #[test]\n fn test_diseq_0() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test_res = string_to_ts(\"::bar::baz\");\n         let test_eqs = string_to_ts(\"bar::baz\");\n         assert_eq!(test_res == test_eqs, false)\n@@ -74,7 +74,7 @@ fn test_diseq_0() {\n \n #[test]\n fn test_diseq_1() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test_res = string_to_ts(\"(bar,baz)\");\n         let test_eqs = string_to_ts(\"bar,baz\");\n         assert_eq!(test_res == test_eqs, false)\n@@ -83,7 +83,7 @@ fn test_diseq_1() {\n \n #[test]\n fn test_is_empty() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test0: TokenStream = Vec::<TokenTree>::new().into_iter().collect();\n         let test1: TokenStream =\n             TokenTree::token(token::Ident(Symbol::intern(\"a\"), false), sp(0, 1)).into();\n@@ -97,7 +97,7 @@ fn test_is_empty() {\n \n #[test]\n fn test_dotdotdot() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let mut builder = TokenStreamBuilder::new();\n         builder.push(TokenTree::token(token::Dot, sp(0, 1)).joint());\n         builder.push(TokenTree::token(token::Dot, sp(1, 2)).joint());"}, {"sha": "4059022e7a5818d375c598cc9be7cff1d8cf06d6", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -74,7 +74,7 @@ impl Compiler {\n \n /// Converts strings provided as `--cfg [cfgspec]` into a `crate_cfg`.\n pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String>)> {\n-    rustc_ast::with_default_globals(move || {\n+    rustc_ast::with_default_session_globals(move || {\n         let cfg = cfgspecs\n             .into_iter()\n             .map(|s| {"}, {"sha": "651a77912c6d046ebff69a3a7f674fc0b3122849", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -73,7 +73,7 @@ fn mk_map<K: Ord, V>(entries: Vec<(K, V)>) -> BTreeMap<K, V> {\n // When the user supplies --test we should implicitly supply --cfg test\n #[test]\n fn test_switch_implies_cfg_test() {\n-    rustc_ast::with_default_globals(|| {\n+    rustc_ast::with_default_session_globals(|| {\n         let matches = optgroups().parse(&[\"--test\".to_string()]).unwrap();\n         let (sess, cfg) = mk_session(matches);\n         let cfg = build_configuration(&sess, to_crate_config(cfg));\n@@ -84,7 +84,7 @@ fn test_switch_implies_cfg_test() {\n // When the user supplies --test and --cfg test, don't implicitly add another --cfg test\n #[test]\n fn test_switch_implies_cfg_test_unless_cfg_test() {\n-    rustc_ast::with_default_globals(|| {\n+    rustc_ast::with_default_session_globals(|| {\n         let matches = optgroups().parse(&[\"--test\".to_string(), \"--cfg=test\".to_string()]).unwrap();\n         let (sess, cfg) = mk_session(matches);\n         let cfg = build_configuration(&sess, to_crate_config(cfg));\n@@ -96,20 +96,20 @@ fn test_switch_implies_cfg_test_unless_cfg_test() {\n \n #[test]\n fn test_can_print_warnings() {\n-    rustc_ast::with_default_globals(|| {\n+    rustc_ast::with_default_session_globals(|| {\n         let matches = optgroups().parse(&[\"-Awarnings\".to_string()]).unwrap();\n         let (sess, _) = mk_session(matches);\n         assert!(!sess.diagnostic().can_emit_warnings());\n     });\n \n-    rustc_ast::with_default_globals(|| {\n+    rustc_ast::with_default_session_globals(|| {\n         let matches =\n             optgroups().parse(&[\"-Awarnings\".to_string(), \"-Dwarnings\".to_string()]).unwrap();\n         let (sess, _) = mk_session(matches);\n         assert!(sess.diagnostic().can_emit_warnings());\n     });\n \n-    rustc_ast::with_default_globals(|| {\n+    rustc_ast::with_default_session_globals(|| {\n         let matches = optgroups().parse(&[\"-Adead_code\".to_string()]).unwrap();\n         let (sess, _) = mk_session(matches);\n         assert!(sess.diagnostic().can_emit_warnings());"}, {"sha": "fe091e920627cafea679b9e4df9766f27d082f77", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -141,7 +141,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n     crate::callbacks::setup_callbacks();\n \n     scoped_thread(cfg, || {\n-        rustc_ast::with_globals(edition, || {\n+        rustc_ast::with_session_globals(edition, || {\n             ty::tls::GCX_PTR.set(&Lock::new(0), || {\n                 if let Some(stderr) = stderr {\n                     io::set_panic(Some(box Sink(stderr.clone())));\n@@ -177,16 +177,17 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n \n     let with_pool = move |pool: &ThreadPool| pool.install(move || f());\n \n-    rustc_ast::with_globals(edition, || {\n-        rustc_ast::GLOBALS.with(|syntax_globals| {\n-            rustc_span::GLOBALS.with(|rustc_span_globals| {\n-                // The main handler runs for each Rayon worker thread and sets up\n-                // the thread local rustc uses. syntax_globals and rustc_span_globals are\n-                // captured and set on the new threads. ty::tls::with_thread_locals sets up\n-                // thread local callbacks from librustc_ast\n+    rustc_ast::with_session_globals(edition, || {\n+        rustc_ast::SESSION_GLOBALS.with(|ast_session_globals| {\n+            rustc_span::SESSION_GLOBALS.with(|span_session_globals| {\n+                // The main handler runs for each Rayon worker thread and sets\n+                // up the thread local rustc uses. ast_session_globals and\n+                // span_session_globals are captured and set on the new\n+                // threads. ty::tls::with_thread_locals sets up thread local\n+                // callbacks from librustc_ast.\n                 let main_handler = move |thread: ThreadBuilder| {\n-                    rustc_ast::GLOBALS.set(syntax_globals, || {\n-                        rustc_span::GLOBALS.set(rustc_span_globals, || {\n+                    rustc_ast::SESSION_GLOBALS.set(ast_session_globals, || {\n+                        rustc_span::SESSION_GLOBALS.set(span_session_globals, || {\n                             if let Some(stderr) = stderr {\n                                 io::set_panic(Some(box Sink(stderr.clone())));\n                             }"}, {"sha": "60b93b3d44d28590b594aa10bae1b9eaf9cee548", "filename": "src/librustc_middle/ty/query/job.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_middle%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_middle%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fjob.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -13,16 +13,15 @@ pub unsafe fn handle_deadlock() {\n     let gcx_ptr = tls::GCX_PTR.with(|gcx_ptr| gcx_ptr as *const _);\n     let gcx_ptr = &*gcx_ptr;\n \n-    let rustc_span_globals =\n-        rustc_span::GLOBALS.with(|rustc_span_globals| rustc_span_globals as *const _);\n-    let rustc_span_globals = &*rustc_span_globals;\n-    let syntax_globals = rustc_ast::attr::GLOBALS.with(|syntax_globals| syntax_globals as *const _);\n-    let syntax_globals = &*syntax_globals;\n+    let span_session_globals = rustc_span::SESSION_GLOBALS.with(|ssg| ssg as *const _);\n+    let span_session_globals = &*span_session_globals;\n+    let ast_session_globals = rustc_ast::attr::SESSION_GLOBALS.with(|asg| asg as *const _);\n+    let ast_session_globals = &*ast_session_globals;\n     thread::spawn(move || {\n         tls::GCX_PTR.set(gcx_ptr, || {\n-            rustc_ast::attr::GLOBALS.set(syntax_globals, || {\n-                rustc_span::GLOBALS\n-                    .set(rustc_span_globals, || tls::with_global(|tcx| deadlock(tcx, &registry)))\n+            rustc_ast::attr::SESSION_GLOBALS.set(ast_session_globals, || {\n+                rustc_span::SESSION_GLOBALS\n+                    .set(span_session_globals, || tls::with_global(|tcx| deadlock(tcx, &registry)))\n             });\n         })\n     });"}, {"sha": "9fd0497fffee59519dada7ac76c3e491396aad3b", "filename": "src/librustc_parse_format/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_parse_format%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_parse_format%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse_format%2Ftests.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -144,8 +144,8 @@ fn format_align_fill() {\n }\n #[test]\n fn format_counts() {\n-    use rustc_span::{edition, Globals, GLOBALS};\n-    GLOBALS.set(&Globals::new(edition::DEFAULT_EDITION), || {\n+    use rustc_span::{edition, SessionGlobals, SESSION_GLOBALS};\n+    SESSION_GLOBALS.set(&SessionGlobals::new(edition::DEFAULT_EDITION), || {\n         same(\n             \"{:10x}\",\n             &[NextArgument(Argument {"}, {"sha": "7249894ba28be785b99485cb7ce07fafee762873", "filename": "src/librustc_span/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_span%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_span%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fhygiene.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -27,7 +27,7 @@\n use crate::def_id::{DefId, CRATE_DEF_INDEX};\n use crate::edition::Edition;\n use crate::symbol::{kw, sym, Symbol};\n-use crate::GLOBALS;\n+use crate::SESSION_GLOBALS;\n use crate::{Span, DUMMY_SP};\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -174,7 +174,7 @@ impl HygieneData {\n     }\n \n     fn with<T, F: FnOnce(&mut HygieneData) -> T>(f: F) -> T {\n-        GLOBALS.with(|globals| f(&mut *globals.hygiene_data.borrow_mut()))\n+        SESSION_GLOBALS.with(|session_globals| f(&mut *session_globals.hygiene_data.borrow_mut()))\n     }\n \n     fn fresh_expn(&mut self, expn_data: Option<ExpnData>) -> ExpnId {"}, {"sha": "699871f1c61ce766cf2776ba8c2e65f5d631126c", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -65,16 +65,20 @@ use sha1::Sha1;\n #[cfg(test)]\n mod tests;\n \n-pub struct Globals {\n+// Per-session global variables: this struct is stored in thread-local storage\n+// in such a way that it is accessible without any kind of handle to all\n+// threads within the compilation session, but is not accessible outside the\n+// session.\n+pub struct SessionGlobals {\n     symbol_interner: Lock<symbol::Interner>,\n     span_interner: Lock<span_encoding::SpanInterner>,\n     hygiene_data: Lock<hygiene::HygieneData>,\n     source_map: Lock<Option<Lrc<SourceMap>>>,\n }\n \n-impl Globals {\n-    pub fn new(edition: Edition) -> Globals {\n-        Globals {\n+impl SessionGlobals {\n+    pub fn new(edition: Edition) -> SessionGlobals {\n+        SessionGlobals {\n             symbol_interner: Lock::new(symbol::Interner::fresh()),\n             span_interner: Lock::new(span_encoding::SpanInterner::default()),\n             hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),\n@@ -83,7 +87,7 @@ impl Globals {\n     }\n }\n \n-scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n+scoped_tls::scoped_thread_local!(pub static SESSION_GLOBALS: SessionGlobals);\n \n // FIXME: Perhaps this should not implement Rustc{Decodable, Encodable}\n //\n@@ -713,14 +717,14 @@ impl rustc_serialize::UseSpecializedDecodable for Span {\n /// the `SourceMap` provided to this function. If that is not available,\n /// we fall back to printing the raw `Span` field values\n pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {\n-    GLOBALS.with(|globals| {\n-        *globals.source_map.borrow_mut() = Some(source_map);\n+    SESSION_GLOBALS.with(|session_globals| {\n+        *session_globals.source_map.borrow_mut() = Some(source_map);\n     });\n     struct ClearSourceMap;\n     impl Drop for ClearSourceMap {\n         fn drop(&mut self) {\n-            GLOBALS.with(|globals| {\n-                globals.source_map.borrow_mut().take();\n+            SESSION_GLOBALS.with(|session_globals| {\n+                session_globals.source_map.borrow_mut().take();\n             });\n         }\n     }\n@@ -738,8 +742,8 @@ pub fn debug_with_source_map(\n }\n \n pub fn default_span_debug(span: Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    GLOBALS.with(|globals| {\n-        if let Some(source_map) = &*globals.source_map.borrow() {\n+    SESSION_GLOBALS.with(|session_globals| {\n+        if let Some(source_map) = &*session_globals.source_map.borrow() {\n             debug_with_source_map(span, f, source_map)\n         } else {\n             f.debug_struct(\"Span\")"}, {"sha": "6b672d344fa512104403bfddd16987c3bf9c83d2", "filename": "src/librustc_span/span_encoding.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_span%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_span%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fspan_encoding.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -5,7 +5,7 @@\n // See https://internals.rust-lang.org/t/rfc-compiler-refactoring-spans/1357/28\n \n use crate::hygiene::SyntaxContext;\n-use crate::GLOBALS;\n+use crate::SESSION_GLOBALS;\n use crate::{BytePos, SpanData};\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -136,5 +136,5 @@ impl SpanInterner {\n // If an interner exists, return it. Otherwise, prepare a fresh one.\n #[inline]\n fn with_span_interner<T, F: FnOnce(&mut SpanInterner) -> T>(f: F) -> T {\n-    GLOBALS.with(|globals| f(&mut *globals.span_interner.lock()))\n+    SESSION_GLOBALS.with(|session_globals| f(&mut *session_globals.span_interner.lock()))\n }"}, {"sha": "0470ceb60b15cc493ca950b63594c9f135804834", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -14,7 +14,7 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::str;\n \n-use crate::{Span, DUMMY_SP, GLOBALS};\n+use crate::{Span, DUMMY_SP, SESSION_GLOBALS};\n \n #[cfg(test)]\n mod tests;\n@@ -1307,7 +1307,7 @@ impl Ident {\n \n #[inline]\n fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n-    GLOBALS.with(|globals| f(&mut *globals.symbol_interner.lock()))\n+    SESSION_GLOBALS.with(|session_globals| f(&mut *session_globals.symbol_interner.lock()))\n }\n \n /// An alternative to `Symbol`, useful when the chars within the symbol need to"}, {"sha": "47da03424b7705f472e2ae95aa748065c2974c02", "filename": "src/librustc_span/symbol/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_span%2Fsymbol%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustc_span%2Fsymbol%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol%2Ftests.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -1,6 +1,6 @@\n use super::*;\n \n-use crate::{edition, Globals};\n+use crate::{edition, SessionGlobals};\n \n #[test]\n fn interner_tests() {\n@@ -18,7 +18,7 @@ fn interner_tests() {\n \n #[test]\n fn without_first_quote_test() {\n-    GLOBALS.set(&Globals::new(edition::DEFAULT_EDITION), || {\n+    SESSION_GLOBALS.set(&SessionGlobals::new(edition::DEFAULT_EDITION), || {\n         let i = Ident::from_str(\"'break\");\n         assert_eq!(i.without_first_quote().name, kw::Break);\n     });"}, {"sha": "8d1193e7f82b51cce1c8c8b1746b2e502ca46ce5", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n use rustc_ast::ast::*;\n use rustc_ast::attr;\n-use rustc_ast::with_default_globals;\n+use rustc_ast::with_default_session_globals;\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::DUMMY_SP;\n \n@@ -52,7 +52,7 @@ macro_rules! dummy_meta_item_list {\n \n #[test]\n fn test_cfg_not() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         assert_eq!(!Cfg::False, Cfg::True);\n         assert_eq!(!Cfg::True, Cfg::False);\n         assert_eq!(!word_cfg(\"test\"), Cfg::Not(Box::new(word_cfg(\"test\"))));\n@@ -70,7 +70,7 @@ fn test_cfg_not() {\n \n #[test]\n fn test_cfg_and() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let mut x = Cfg::False;\n         x &= Cfg::True;\n         assert_eq!(x, Cfg::False);\n@@ -154,7 +154,7 @@ fn test_cfg_and() {\n \n #[test]\n fn test_cfg_or() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let mut x = Cfg::True;\n         x |= Cfg::False;\n         assert_eq!(x, Cfg::True);\n@@ -238,7 +238,7 @@ fn test_cfg_or() {\n \n #[test]\n fn test_parse_ok() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let mi = dummy_meta_item_word(\"all\");\n         assert_eq!(Cfg::parse(&mi), Ok(word_cfg(\"all\")));\n \n@@ -271,7 +271,7 @@ fn test_parse_ok() {\n \n #[test]\n fn test_parse_err() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let mi = attr::mk_name_value_item(Ident::from_str(\"foo\"), LitKind::Bool(false), DUMMY_SP);\n         assert!(Cfg::parse(&mi).is_err());\n \n@@ -303,7 +303,7 @@ fn test_parse_err() {\n \n #[test]\n fn test_render_short_html() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         assert_eq!(word_cfg(\"unix\").render_short_html(), \"Unix\");\n         assert_eq!(name_value_cfg(\"target_os\", \"macos\").render_short_html(), \"macOS\");\n         assert_eq!(name_value_cfg(\"target_pointer_width\", \"16\").render_short_html(), \"16-bit\");\n@@ -358,7 +358,7 @@ fn test_render_short_html() {\n \n #[test]\n fn test_render_long_html() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         assert_eq!(\n             word_cfg(\"unix\").render_long_html(),\n             \"This is supported on <strong>Unix</strong> only.\""}, {"sha": "71d74e77e33f80b359af8cf08a1c56b4722fb9b8", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -1,5 +1,4 @@\n use rustc_ast::ast;\n-use rustc_ast::with_globals;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::ErrorReported;\n use rustc_feature::UnstableFeatures;\n@@ -399,7 +398,7 @@ pub fn make_test(\n     // Uses librustc_ast to parse the doctest and find if there's a main fn and the extern\n     // crate already is included.\n     let result = rustc_driver::catch_fatal_errors(|| {\n-        with_globals(edition, || {\n+        rustc_ast::with_session_globals(edition, || {\n             use rustc_errors::emitter::EmitterWriter;\n             use rustc_errors::Handler;\n             use rustc_parse::maybe_new_parser_from_source_str;"}, {"sha": "836cb07d5d17221d18df157f2d6c8ed76b37ebdc", "filename": "src/test/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -19,7 +19,7 @@ use std::path::Path;\n mod gravy;\n \n pub fn main() {\n-    rustc_ast::with_default_globals(|| parse());\n+    rustc_ast::with_default_session_globals(|| parse());\n \n     assert_eq!(gravy::foo(), 10);\n }"}, {"sha": "8286b7fdb66984dfe28ac24919c7522d9c339b3c", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -208,7 +208,7 @@ impl MutVisitor for AddParens {\n }\n \n fn main() {\n-    rustc_ast::with_default_globals(|| run());\n+    rustc_ast::with_default_session_globals(|| run());\n }\n \n fn run() {"}, {"sha": "9aea859999ceab51fadcc53249641f777aabc311", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=81c5bb6a3fb02d1c1c3a4698e9e0e031ef2f4e4e", "patch": "@@ -284,7 +284,7 @@ fn parse_args() -> (OutputFormat, PathBuf) {\n fn main() {\n     env_logger::init();\n     let (format, dst) = parse_args();\n-    let result = rustc_ast::with_default_globals(move || main_with_result(format, &dst));\n+    let result = rustc_ast::with_default_session_globals(move || main_with_result(format, &dst));\n     if let Err(e) = result {\n         panic!(\"{}\", e.to_string());\n     }"}]}