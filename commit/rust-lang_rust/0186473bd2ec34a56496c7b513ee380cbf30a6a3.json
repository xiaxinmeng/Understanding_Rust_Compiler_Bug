{"sha": "0186473bd2ec34a56496c7b513ee380cbf30a6a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxODY0NzNiZDJlYzM0YTU2NDk2YzdiNTEzZWUzODBjYmYzMGE2YTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-25T18:26:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-25T18:26:07Z"}, "message": "auto merge of #9493 : huonw/rust/move-tuples, r=thestinger\n\nThe old behaviour of `foo.n0()` is replaced by `foo.n0_ref().clone()`.", "tree": {"sha": "e9c542a5c36170946781a77a2f383bd773e46b9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9c542a5c36170946781a77a2f383bd773e46b9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0186473bd2ec34a56496c7b513ee380cbf30a6a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0186473bd2ec34a56496c7b513ee380cbf30a6a3", "html_url": "https://github.com/rust-lang/rust/commit/0186473bd2ec34a56496c7b513ee380cbf30a6a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0186473bd2ec34a56496c7b513ee380cbf30a6a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6f74e696f790c18f6a2f720529a6c93514a8da2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6f74e696f790c18f6a2f720529a6c93514a8da2", "html_url": "https://github.com/rust-lang/rust/commit/b6f74e696f790c18f6a2f720529a6c93514a8da2"}, {"sha": "04ca6dcd84d7c5c24ff7bb9b74233fbbae5dd53d", "url": "https://api.github.com/repos/rust-lang/rust/commits/04ca6dcd84d7c5c24ff7bb9b74233fbbae5dd53d", "html_url": "https://github.com/rust-lang/rust/commit/04ca6dcd84d7c5c24ff7bb9b74233fbbae5dd53d"}], "stats": {"total": 206, "additions": 104, "deletions": 102}, "files": [{"sha": "96ade70f007b597d4aa075b24f3b004d7f9ab223", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0186473bd2ec34a56496c7b513ee380cbf30a6a3/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0186473bd2ec34a56496c7b513ee380cbf30a6a3/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=0186473bd2ec34a56496c7b513ee380cbf30a6a3", "patch": "@@ -72,10 +72,10 @@ pub use from_str::FromStr;\n pub use to_bytes::IterBytes;\n pub use to_str::{ToStr, ToStrConsume};\n pub use tuple::{CopyableTuple, ImmutableTuple};\n-pub use tuple::{CloneableTuple1, ImmutableTuple1};\n-pub use tuple::{CloneableTuple2, CloneableTuple3, CloneableTuple4, CloneableTuple5};\n-pub use tuple::{CloneableTuple6, CloneableTuple7, CloneableTuple8, CloneableTuple9};\n-pub use tuple::{CloneableTuple10, CloneableTuple11, CloneableTuple12};\n+pub use tuple::{Tuple1, ImmutableTuple1};\n+pub use tuple::{Tuple2, Tuple3, Tuple4, Tuple5};\n+pub use tuple::{Tuple6, Tuple7, Tuple8, Tuple9};\n+pub use tuple::{Tuple10, Tuple11, Tuple12};\n pub use tuple::{ImmutableTuple2, ImmutableTuple3, ImmutableTuple4, ImmutableTuple5};\n pub use tuple::{ImmutableTuple6, ImmutableTuple7, ImmutableTuple8, ImmutableTuple9};\n pub use tuple::{ImmutableTuple10, ImmutableTuple11, ImmutableTuple12};"}, {"sha": "623909b79759e6f962d6c04b5b1281bc355d367d", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 100, "deletions": 98, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/0186473bd2ec34a56496c7b513ee380cbf30a6a3/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0186473bd2ec34a56496c7b513ee380cbf30a6a3/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=0186473bd2ec34a56496c7b513ee380cbf30a6a3", "patch": "@@ -80,9 +80,9 @@ impl<T, U> ImmutableTuple<T, U> for (T, U) {\n \n macro_rules! tuple_impls {\n     ($(\n-        ($cloneable_trait:ident, $immutable_trait:ident) {\n+        ($move_trait:ident, $immutable_trait:ident) {\n             $(($get_fn:ident, $get_ref_fn:ident) -> $T:ident {\n-                $get_pattern:pat => $ret:expr\n+                $move_pattern:pat, $ref_pattern:pat => $ret:expr\n             })+\n         }\n     )+) => {\n@@ -93,15 +93,16 @@ macro_rules! tuple_impls {\n             #[cfg(not(test))] use num::Zero;\n \n             $(\n-                pub trait $cloneable_trait<$($T),+> {\n-                    $(fn $get_fn(&self) -> $T;)+\n+                pub trait $move_trait<$($T),+> {\n+                    $(fn $get_fn(self) -> $T;)+\n                 }\n \n-                impl<$($T:Clone),+> $cloneable_trait<$($T),+> for ($($T,)+) {\n+                impl<$($T),+> $move_trait<$($T),+> for ($($T,)+) {\n                     $(\n                         #[inline]\n-                        fn $get_fn(&self) -> $T {\n-                            self.$get_ref_fn().clone()\n+                        fn $get_fn(self) -> $T {\n+                            let $move_pattern = self;\n+                            $ret\n                         }\n                     )+\n                 }\n@@ -114,7 +115,8 @@ macro_rules! tuple_impls {\n                     $(\n                         #[inline]\n                         fn $get_ref_fn<'a>(&'a self) -> &'a $T {\n-                            match *self { $get_pattern => $ret }\n+                            let $ref_pattern = *self;\n+                            $ret\n                         }\n                     )+\n                 }\n@@ -221,118 +223,118 @@ macro_rules! lexical_cmp {\n \n \n tuple_impls! {\n-    (CloneableTuple1, ImmutableTuple1) {\n-        (n0, n0_ref) -> A { (ref a,) => a }\n+    (Tuple1, ImmutableTuple1) {\n+        (n0, n0_ref) -> A { (a,), (ref a,) => a }\n     }\n \n-    (CloneableTuple2, ImmutableTuple2) {\n-        (n0, n0_ref) -> A { (ref a,_) => a }\n-        (n1, n1_ref) -> B { (_,ref b) => b }\n+    (Tuple2, ImmutableTuple2) {\n+        (n0, n0_ref) -> A { (a,_), (ref a,_) => a }\n+        (n1, n1_ref) -> B { (_,b), (_,ref b) => b }\n     }\n \n-    (CloneableTuple3, ImmutableTuple3) {\n-        (n0, n0_ref) -> A { (ref a,_,_) => a }\n-        (n1, n1_ref) -> B { (_,ref b,_) => b }\n-        (n2, n2_ref) -> C { (_,_,ref c) => c }\n+    (Tuple3, ImmutableTuple3) {\n+        (n0, n0_ref) -> A { (a,_,_), (ref a,_,_) => a }\n+        (n1, n1_ref) -> B { (_,b,_), (_,ref b,_) => b }\n+        (n2, n2_ref) -> C { (_,_,c), (_,_,ref c) => c }\n     }\n \n-    (CloneableTuple4, ImmutableTuple4) {\n-        (n0, n0_ref) -> A { (ref a,_,_,_) => a }\n-        (n1, n1_ref) -> B { (_,ref b,_,_) => b }\n-        (n2, n2_ref) -> C { (_,_,ref c,_) => c }\n-        (n3, n3_ref) -> D { (_,_,_,ref d) => d }\n+    (Tuple4, ImmutableTuple4) {\n+        (n0, n0_ref) -> A { (a,_,_,_), (ref a,_,_,_) => a }\n+        (n1, n1_ref) -> B { (_,b,_,_), (_,ref b,_,_) => b }\n+        (n2, n2_ref) -> C { (_,_,c,_), (_,_,ref c,_) => c }\n+        (n3, n3_ref) -> D { (_,_,_,d), (_,_,_,ref d) => d }\n     }\n \n-    (CloneableTuple5, ImmutableTuple5) {\n-        (n0, n0_ref) -> A { (ref a,_,_,_,_) => a }\n-        (n1, n1_ref) -> B { (_,ref b,_,_,_) => b }\n-        (n2, n2_ref) -> C { (_,_,ref c,_,_) => c }\n-        (n3, n3_ref) -> D { (_,_,_,ref d,_) => d }\n-        (n4, n4_ref) -> E { (_,_,_,_,ref e) => e }\n+    (Tuple5, ImmutableTuple5) {\n+        (n0, n0_ref) -> A { (a,_,_,_,_), (ref a,_,_,_,_) => a }\n+        (n1, n1_ref) -> B { (_,b,_,_,_), (_,ref b,_,_,_) => b }\n+        (n2, n2_ref) -> C { (_,_,c,_,_), (_,_,ref c,_,_) => c }\n+        (n3, n3_ref) -> D { (_,_,_,d,_), (_,_,_,ref d,_) => d }\n+        (n4, n4_ref) -> E { (_,_,_,_,e), (_,_,_,_,ref e) => e }\n     }\n \n-    (CloneableTuple6, ImmutableTuple6) {\n-        (n0, n0_ref) -> A { (ref a,_,_,_,_,_) => a }\n-        (n1, n1_ref) -> B { (_,ref b,_,_,_,_) => b }\n-        (n2, n2_ref) -> C { (_,_,ref c,_,_,_) => c }\n-        (n3, n3_ref) -> D { (_,_,_,ref d,_,_) => d }\n-        (n4, n4_ref) -> E { (_,_,_,_,ref e,_) => e }\n-        (n5, n5_ref) -> F { (_,_,_,_,_,ref f) => f }\n+    (Tuple6, ImmutableTuple6) {\n+        (n0, n0_ref) -> A { (a,_,_,_,_,_), (ref a,_,_,_,_,_) => a }\n+        (n1, n1_ref) -> B { (_,b,_,_,_,_), (_,ref b,_,_,_,_) => b }\n+        (n2, n2_ref) -> C { (_,_,c,_,_,_), (_,_,ref c,_,_,_) => c }\n+        (n3, n3_ref) -> D { (_,_,_,d,_,_), (_,_,_,ref d,_,_) => d }\n+        (n4, n4_ref) -> E { (_,_,_,_,e,_), (_,_,_,_,ref e,_) => e }\n+        (n5, n5_ref) -> F { (_,_,_,_,_,f), (_,_,_,_,_,ref f) => f }\n     }\n \n-    (CloneableTuple7, ImmutableTuple7) {\n-        (n0, n0_ref) -> A { (ref a,_,_,_,_,_,_) => a }\n-        (n1, n1_ref) -> B { (_,ref b,_,_,_,_,_) => b }\n-        (n2, n2_ref) -> C { (_,_,ref c,_,_,_,_) => c }\n-        (n3, n3_ref) -> D { (_,_,_,ref d,_,_,_) => d }\n-        (n4, n4_ref) -> E { (_,_,_,_,ref e,_,_) => e }\n-        (n5, n5_ref) -> F { (_,_,_,_,_,ref f,_) => f }\n-        (n6, n6_ref) -> G { (_,_,_,_,_,_,ref g) => g }\n+    (Tuple7, ImmutableTuple7) {\n+        (n0, n0_ref) -> A { (a,_,_,_,_,_,_), (ref a,_,_,_,_,_,_) => a }\n+        (n1, n1_ref) -> B { (_,b,_,_,_,_,_), (_,ref b,_,_,_,_,_) => b }\n+        (n2, n2_ref) -> C { (_,_,c,_,_,_,_), (_,_,ref c,_,_,_,_) => c }\n+        (n3, n3_ref) -> D { (_,_,_,d,_,_,_), (_,_,_,ref d,_,_,_) => d }\n+        (n4, n4_ref) -> E { (_,_,_,_,e,_,_), (_,_,_,_,ref e,_,_) => e }\n+        (n5, n5_ref) -> F { (_,_,_,_,_,f,_), (_,_,_,_,_,ref f,_) => f }\n+        (n6, n6_ref) -> G { (_,_,_,_,_,_,g), (_,_,_,_,_,_,ref g) => g }\n     }\n \n-    (CloneableTuple8, ImmutableTuple8) {\n-        (n0, n0_ref) -> A { (ref a,_,_,_,_,_,_,_) => a }\n-        (n1, n1_ref) -> B { (_,ref b,_,_,_,_,_,_) => b }\n-        (n2, n2_ref) -> C { (_,_,ref c,_,_,_,_,_) => c }\n-        (n3, n3_ref) -> D { (_,_,_,ref d,_,_,_,_) => d }\n-        (n4, n4_ref) -> E { (_,_,_,_,ref e,_,_,_) => e }\n-        (n5, n5_ref) -> F { (_,_,_,_,_,ref f,_,_) => f }\n-        (n6, n6_ref) -> G { (_,_,_,_,_,_,ref g,_) => g }\n-        (n7, n7_ref) -> H { (_,_,_,_,_,_,_,ref h) => h }\n+    (Tuple8, ImmutableTuple8) {\n+        (n0, n0_ref) -> A { (a,_,_,_,_,_,_,_), (ref a,_,_,_,_,_,_,_) => a }\n+        (n1, n1_ref) -> B { (_,b,_,_,_,_,_,_), (_,ref b,_,_,_,_,_,_) => b }\n+        (n2, n2_ref) -> C { (_,_,c,_,_,_,_,_), (_,_,ref c,_,_,_,_,_) => c }\n+        (n3, n3_ref) -> D { (_,_,_,d,_,_,_,_), (_,_,_,ref d,_,_,_,_) => d }\n+        (n4, n4_ref) -> E { (_,_,_,_,e,_,_,_), (_,_,_,_,ref e,_,_,_) => e }\n+        (n5, n5_ref) -> F { (_,_,_,_,_,f,_,_), (_,_,_,_,_,ref f,_,_) => f }\n+        (n6, n6_ref) -> G { (_,_,_,_,_,_,g,_), (_,_,_,_,_,_,ref g,_) => g }\n+        (n7, n7_ref) -> H { (_,_,_,_,_,_,_,h), (_,_,_,_,_,_,_,ref h) => h }\n     }\n \n-    (CloneableTuple9, ImmutableTuple9) {\n-        (n0, n0_ref) -> A { (ref a,_,_,_,_,_,_,_,_) => a }\n-        (n1, n1_ref) -> B { (_,ref b,_,_,_,_,_,_,_) => b }\n-        (n2, n2_ref) -> C { (_,_,ref c,_,_,_,_,_,_) => c }\n-        (n3, n3_ref) -> D { (_,_,_,ref d,_,_,_,_,_) => d }\n-        (n4, n4_ref) -> E { (_,_,_,_,ref e,_,_,_,_) => e }\n-        (n5, n5_ref) -> F { (_,_,_,_,_,ref f,_,_,_) => f }\n-        (n6, n6_ref) -> G { (_,_,_,_,_,_,ref g,_,_) => g }\n-        (n7, n7_ref) -> H { (_,_,_,_,_,_,_,ref h,_) => h }\n-        (n8, n8_ref) -> I { (_,_,_,_,_,_,_,_,ref i) => i }\n+    (Tuple9, ImmutableTuple9) {\n+        (n0, n0_ref) -> A { (a,_,_,_,_,_,_,_,_), (ref a,_,_,_,_,_,_,_,_) => a }\n+        (n1, n1_ref) -> B { (_,b,_,_,_,_,_,_,_), (_,ref b,_,_,_,_,_,_,_) => b }\n+        (n2, n2_ref) -> C { (_,_,c,_,_,_,_,_,_), (_,_,ref c,_,_,_,_,_,_) => c }\n+        (n3, n3_ref) -> D { (_,_,_,d,_,_,_,_,_), (_,_,_,ref d,_,_,_,_,_) => d }\n+        (n4, n4_ref) -> E { (_,_,_,_,e,_,_,_,_), (_,_,_,_,ref e,_,_,_,_) => e }\n+        (n5, n5_ref) -> F { (_,_,_,_,_,f,_,_,_), (_,_,_,_,_,ref f,_,_,_) => f }\n+        (n6, n6_ref) -> G { (_,_,_,_,_,_,g,_,_), (_,_,_,_,_,_,ref g,_,_) => g }\n+        (n7, n7_ref) -> H { (_,_,_,_,_,_,_,h,_), (_,_,_,_,_,_,_,ref h,_) => h }\n+        (n8, n8_ref) -> I { (_,_,_,_,_,_,_,_,i), (_,_,_,_,_,_,_,_,ref i) => i }\n     }\n \n-    (CloneableTuple10, ImmutableTuple10) {\n-        (n0, n0_ref) -> A { (ref a,_,_,_,_,_,_,_,_,_) => a }\n-        (n1, n1_ref) -> B { (_,ref b,_,_,_,_,_,_,_,_) => b }\n-        (n2, n2_ref) -> C { (_,_,ref c,_,_,_,_,_,_,_) => c }\n-        (n3, n3_ref) -> D { (_,_,_,ref d,_,_,_,_,_,_) => d }\n-        (n4, n4_ref) -> E { (_,_,_,_,ref e,_,_,_,_,_) => e }\n-        (n5, n5_ref) -> F { (_,_,_,_,_,ref f,_,_,_,_) => f }\n-        (n6, n6_ref) -> G { (_,_,_,_,_,_,ref g,_,_,_) => g }\n-        (n7, n7_ref) -> H { (_,_,_,_,_,_,_,ref h,_,_) => h }\n-        (n8, n8_ref) -> I { (_,_,_,_,_,_,_,_,ref i,_) => i }\n-        (n9, n9_ref) -> J { (_,_,_,_,_,_,_,_,_,ref j) => j }\n+    (Tuple10, ImmutableTuple10) {\n+        (n0, n0_ref) -> A { (a,_,_,_,_,_,_,_,_,_), (ref a,_,_,_,_,_,_,_,_,_) => a }\n+        (n1, n1_ref) -> B { (_,b,_,_,_,_,_,_,_,_), (_,ref b,_,_,_,_,_,_,_,_) => b }\n+        (n2, n2_ref) -> C { (_,_,c,_,_,_,_,_,_,_), (_,_,ref c,_,_,_,_,_,_,_) => c }\n+        (n3, n3_ref) -> D { (_,_,_,d,_,_,_,_,_,_), (_,_,_,ref d,_,_,_,_,_,_) => d }\n+        (n4, n4_ref) -> E { (_,_,_,_,e,_,_,_,_,_), (_,_,_,_,ref e,_,_,_,_,_) => e }\n+        (n5, n5_ref) -> F { (_,_,_,_,_,f,_,_,_,_), (_,_,_,_,_,ref f,_,_,_,_) => f }\n+        (n6, n6_ref) -> G { (_,_,_,_,_,_,g,_,_,_), (_,_,_,_,_,_,ref g,_,_,_) => g }\n+        (n7, n7_ref) -> H { (_,_,_,_,_,_,_,h,_,_), (_,_,_,_,_,_,_,ref h,_,_) => h }\n+        (n8, n8_ref) -> I { (_,_,_,_,_,_,_,_,i,_), (_,_,_,_,_,_,_,_,ref i,_) => i }\n+        (n9, n9_ref) -> J { (_,_,_,_,_,_,_,_,_,j), (_,_,_,_,_,_,_,_,_,ref j) => j }\n     }\n \n-    (CloneableTuple11, ImmutableTuple11) {\n-        (n0,  n0_ref)  -> A { (ref a,_,_,_,_,_,_,_,_,_,_) => a }\n-        (n1,  n1_ref)  -> B { (_,ref b,_,_,_,_,_,_,_,_,_) => b }\n-        (n2,  n2_ref)  -> C { (_,_,ref c,_,_,_,_,_,_,_,_) => c }\n-        (n3,  n3_ref)  -> D { (_,_,_,ref d,_,_,_,_,_,_,_) => d }\n-        (n4,  n4_ref)  -> E { (_,_,_,_,ref e,_,_,_,_,_,_) => e }\n-        (n5,  n5_ref)  -> F { (_,_,_,_,_,ref f,_,_,_,_,_) => f }\n-        (n6,  n6_ref)  -> G { (_,_,_,_,_,_,ref g,_,_,_,_) => g }\n-        (n7,  n7_ref)  -> H { (_,_,_,_,_,_,_,ref h,_,_,_) => h }\n-        (n8,  n8_ref)  -> I { (_,_,_,_,_,_,_,_,ref i,_,_) => i }\n-        (n9,  n9_ref)  -> J { (_,_,_,_,_,_,_,_,_,ref j,_) => j }\n-        (n10, n10_ref) -> K { (_,_,_,_,_,_,_,_,_,_,ref k) => k }\n+    (Tuple11, ImmutableTuple11) {\n+        (n0,  n0_ref)  -> A { (a,_,_,_,_,_,_,_,_,_,_), (ref a,_,_,_,_,_,_,_,_,_,_) => a }\n+        (n1,  n1_ref)  -> B { (_,b,_,_,_,_,_,_,_,_,_), (_,ref b,_,_,_,_,_,_,_,_,_) => b }\n+        (n2,  n2_ref)  -> C { (_,_,c,_,_,_,_,_,_,_,_), (_,_,ref c,_,_,_,_,_,_,_,_) => c }\n+        (n3,  n3_ref)  -> D { (_,_,_,d,_,_,_,_,_,_,_), (_,_,_,ref d,_,_,_,_,_,_,_) => d }\n+        (n4,  n4_ref)  -> E { (_,_,_,_,e,_,_,_,_,_,_), (_,_,_,_,ref e,_,_,_,_,_,_) => e }\n+        (n5,  n5_ref)  -> F { (_,_,_,_,_,f,_,_,_,_,_), (_,_,_,_,_,ref f,_,_,_,_,_) => f }\n+        (n6,  n6_ref)  -> G { (_,_,_,_,_,_,g,_,_,_,_), (_,_,_,_,_,_,ref g,_,_,_,_) => g }\n+        (n7,  n7_ref)  -> H { (_,_,_,_,_,_,_,h,_,_,_), (_,_,_,_,_,_,_,ref h,_,_,_) => h }\n+        (n8,  n8_ref)  -> I { (_,_,_,_,_,_,_,_,i,_,_), (_,_,_,_,_,_,_,_,ref i,_,_) => i }\n+        (n9,  n9_ref)  -> J { (_,_,_,_,_,_,_,_,_,j,_), (_,_,_,_,_,_,_,_,_,ref j,_) => j }\n+        (n10, n10_ref) -> K { (_,_,_,_,_,_,_,_,_,_,k), (_,_,_,_,_,_,_,_,_,_,ref k) => k }\n     }\n \n-    (CloneableTuple12, ImmutableTuple12) {\n-        (n0,  n0_ref)  -> A { (ref a,_,_,_,_,_,_,_,_,_,_,_) => a }\n-        (n1,  n1_ref)  -> B { (_,ref b,_,_,_,_,_,_,_,_,_,_) => b }\n-        (n2,  n2_ref)  -> C { (_,_,ref c,_,_,_,_,_,_,_,_,_) => c }\n-        (n3,  n3_ref)  -> D { (_,_,_,ref d,_,_,_,_,_,_,_,_) => d }\n-        (n4,  n4_ref)  -> E { (_,_,_,_,ref e,_,_,_,_,_,_,_) => e }\n-        (n5,  n5_ref)  -> F { (_,_,_,_,_,ref f,_,_,_,_,_,_) => f }\n-        (n6,  n6_ref)  -> G { (_,_,_,_,_,_,ref g,_,_,_,_,_) => g }\n-        (n7,  n7_ref)  -> H { (_,_,_,_,_,_,_,ref h,_,_,_,_) => h }\n-        (n8,  n8_ref)  -> I { (_,_,_,_,_,_,_,_,ref i,_,_,_) => i }\n-        (n9,  n9_ref)  -> J { (_,_,_,_,_,_,_,_,_,ref j,_,_) => j }\n-        (n10, n10_ref) -> K { (_,_,_,_,_,_,_,_,_,_,ref k,_) => k }\n-        (n11, n11_ref) -> L { (_,_,_,_,_,_,_,_,_,_,_,ref l) => l }\n+    (Tuple12, ImmutableTuple12) {\n+        (n0,  n0_ref)  -> A { (a,_,_,_,_,_,_,_,_,_,_,_), (ref a,_,_,_,_,_,_,_,_,_,_,_) => a }\n+        (n1,  n1_ref)  -> B { (_,b,_,_,_,_,_,_,_,_,_,_), (_,ref b,_,_,_,_,_,_,_,_,_,_) => b }\n+        (n2,  n2_ref)  -> C { (_,_,c,_,_,_,_,_,_,_,_,_), (_,_,ref c,_,_,_,_,_,_,_,_,_) => c }\n+        (n3,  n3_ref)  -> D { (_,_,_,d,_,_,_,_,_,_,_,_), (_,_,_,ref d,_,_,_,_,_,_,_,_) => d }\n+        (n4,  n4_ref)  -> E { (_,_,_,_,e,_,_,_,_,_,_,_), (_,_,_,_,ref e,_,_,_,_,_,_,_) => e }\n+        (n5,  n5_ref)  -> F { (_,_,_,_,_,f,_,_,_,_,_,_), (_,_,_,_,_,ref f,_,_,_,_,_,_) => f }\n+        (n6,  n6_ref)  -> G { (_,_,_,_,_,_,g,_,_,_,_,_), (_,_,_,_,_,_,ref g,_,_,_,_,_) => g }\n+        (n7,  n7_ref)  -> H { (_,_,_,_,_,_,_,h,_,_,_,_), (_,_,_,_,_,_,_,ref h,_,_,_,_) => h }\n+        (n8,  n8_ref)  -> I { (_,_,_,_,_,_,_,_,i,_,_,_), (_,_,_,_,_,_,_,_,ref i,_,_,_) => i }\n+        (n9,  n9_ref)  -> J { (_,_,_,_,_,_,_,_,_,j,_,_), (_,_,_,_,_,_,_,_,_,ref j,_,_) => j }\n+        (n10, n10_ref) -> K { (_,_,_,_,_,_,_,_,_,_,k,_), (_,_,_,_,_,_,_,_,_,_,ref k,_) => k }\n+        (n11, n11_ref) -> L { (_,_,_,_,_,_,_,_,_,_,_,l), (_,_,_,_,_,_,_,_,_,_,_,ref l) => l }\n     }\n }\n "}]}