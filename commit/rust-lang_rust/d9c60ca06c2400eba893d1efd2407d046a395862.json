{"sha": "d9c60ca06c2400eba893d1efd2407d046a395862", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YzYwY2EwNmMyNDAwZWJhODkzZDFlZmQyNDA3ZDA0NmEzOTU4NjI=", "commit": {"author": {"name": "Trotter Cashion", "email": "cashion@gmail.com", "date": "2016-11-10T15:30:20Z"}, "committer": {"name": "Trotter Cashion", "email": "cashion@gmail.com", "date": "2016-11-10T15:30:20Z"}, "message": "Instruct play.rust-lang.org to treat code as tests\n\nWithout these changes, play.rust-lang.org (as of today) would wrap\nour examples in `fn main() {}`. This prevents the user from being able\nto easily run the tests.", "tree": {"sha": "619f18b9166baec28f96f21f6ea673f97f264fa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/619f18b9166baec28f96f21f6ea673f97f264fa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9c60ca06c2400eba893d1efd2407d046a395862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c60ca06c2400eba893d1efd2407d046a395862", "html_url": "https://github.com/rust-lang/rust/commit/d9c60ca06c2400eba893d1efd2407d046a395862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9c60ca06c2400eba893d1efd2407d046a395862/comments", "author": {"login": "trotter", "id": 413, "node_id": "MDQ6VXNlcjQxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trotter", "html_url": "https://github.com/trotter", "followers_url": "https://api.github.com/users/trotter/followers", "following_url": "https://api.github.com/users/trotter/following{/other_user}", "gists_url": "https://api.github.com/users/trotter/gists{/gist_id}", "starred_url": "https://api.github.com/users/trotter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trotter/subscriptions", "organizations_url": "https://api.github.com/users/trotter/orgs", "repos_url": "https://api.github.com/users/trotter/repos", "events_url": "https://api.github.com/users/trotter/events{/privacy}", "received_events_url": "https://api.github.com/users/trotter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "trotter", "id": 413, "node_id": "MDQ6VXNlcjQxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trotter", "html_url": "https://github.com/trotter", "followers_url": "https://api.github.com/users/trotter/followers", "following_url": "https://api.github.com/users/trotter/following{/other_user}", "gists_url": "https://api.github.com/users/trotter/gists{/gist_id}", "starred_url": "https://api.github.com/users/trotter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trotter/subscriptions", "organizations_url": "https://api.github.com/users/trotter/orgs", "repos_url": "https://api.github.com/users/trotter/repos", "events_url": "https://api.github.com/users/trotter/events{/privacy}", "received_events_url": "https://api.github.com/users/trotter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1d0c5bb38913658f26254a5e9aff3550b8cf607", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d0c5bb38913658f26254a5e9aff3550b8cf607", "html_url": "https://github.com/rust-lang/rust/commit/b1d0c5bb38913658f26254a5e9aff3550b8cf607"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "c36e0c09401bcae91c99c148a7a6d551d333ab10", "filename": "src/doc/book/testing.md", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d9c60ca06c2400eba893d1efd2407d046a395862/src%2Fdoc%2Fbook%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/d9c60ca06c2400eba893d1efd2407d046a395862/src%2Fdoc%2Fbook%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftesting.md?ref=d9c60ca06c2400eba893d1efd2407d046a395862", "patch": "@@ -24,6 +24,10 @@ Cargo will automatically generate a simple test when you make a new project.\n Here's the contents of `src/lib.rs`:\n \n ```rust\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n #[cfg(test)]\n mod tests {\n     #[test]\n@@ -79,6 +83,10 @@ So why does our do-nothing test pass? Any test which doesn't `panic!` passes,\n and any test that does `panic!` fails. Let's make our test fail:\n \n ```rust\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n #[cfg(test)]\n mod tests {\n     #[test]\n@@ -153,6 +161,10 @@ This is useful if you want to integrate `cargo test` into other tooling.\n We can invert our test's failure with another attribute: `should_panic`:\n \n ```rust\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n #[cfg(test)]\n mod tests {\n     #[test]\n@@ -188,6 +200,10 @@ Rust provides another macro, `assert_eq!`, that compares two arguments for\n equality:\n \n ```rust\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n #[cfg(test)]\n mod tests {\n     #[test]\n@@ -226,6 +242,10 @@ make sure that the failure message contains the provided text. A safer version\n of the example above would be:\n \n ```rust\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n #[cfg(test)]\n mod tests {\n     #[test]\n@@ -239,6 +259,10 @@ mod tests {\n That's all there is to the basics! Let's write one 'real' test:\n \n ```rust,ignore\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n pub fn add_two(a: i32) -> i32 {\n     a + 2\n }\n@@ -263,6 +287,10 @@ Sometimes a few specific tests can be very time-consuming to execute. These\n can be disabled by default by using the `ignore` attribute:\n \n ```rust\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n pub fn add_two(a: i32) -> i32 {\n     a + 2\n }\n@@ -338,6 +366,10 @@ was missing from our last example. Let's explain what this does.\n The idiomatic way of writing our example looks like this:\n \n ```rust,ignore\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n pub fn add_two(a: i32) -> i32 {\n     a + 2\n }\n@@ -366,6 +398,10 @@ a large module, and so this is a common use of globs. Let's change our\n `src/lib.rs` to make use of it:\n \n ```rust,ignore\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n pub fn add_two(a: i32) -> i32 {\n     a + 2\n }\n@@ -415,9 +451,14 @@ To write an integration test, let's make a `tests` directory and\n put a `tests/integration_test.rs` file inside with this as its contents:\n \n ```rust,ignore\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n+# // Sadly, this code will not work in play.rust-lang.org, because we have no\n+# // crate adder to import. You'll need to try this part on your own machine.\n extern crate adder;\n \n-# fn main() {}\n #[test]\n fn it_works() {\n     assert_eq!(4, adder::add_two(2));\n@@ -478,7 +519,10 @@ running examples in your documentation (**note:** this only works in library\n crates, not binary crates). Here's a fleshed-out `src/lib.rs` with examples:\n \n ```rust,ignore\n-# fn main() {}\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n //! The `adder` crate provides functions that add numbers to other numbers.\n //!\n //! # Examples"}]}