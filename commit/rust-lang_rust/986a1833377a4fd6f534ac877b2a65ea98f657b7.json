{"sha": "986a1833377a4fd6f534ac877b2a65ea98f657b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NmExODMzMzc3YTRmZDZmNTM0YWM4NzdiMmE2NWVhOThmNjU3Yjc=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-02-15T13:17:03Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-02-23T10:44:10Z"}, "message": "BTree: fix untrue safety", "tree": {"sha": "1569358c96f9c3b7e3ff6a8088f30874360a6b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1569358c96f9c3b7e3ff6a8088f30874360a6b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/986a1833377a4fd6f534ac877b2a65ea98f657b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/986a1833377a4fd6f534ac877b2a65ea98f657b7", "html_url": "https://github.com/rust-lang/rust/commit/986a1833377a4fd6f534ac877b2a65ea98f657b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/986a1833377a4fd6f534ac877b2a65ea98f657b7/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4e595db8f12f9ee926256745d757004b850703f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e595db8f12f9ee926256745d757004b850703f", "html_url": "https://github.com/rust-lang/rust/commit/a4e595db8f12f9ee926256745d757004b850703f"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "4d69d5d68035875baa38893815af01c42d437852", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/986a1833377a4fd6f534ac877b2a65ea98f657b7/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986a1833377a4fd6f534ac877b2a65ea98f657b7/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=986a1833377a4fd6f534ac877b2a65ea98f657b7", "patch": "@@ -78,9 +78,8 @@ impl<K, V> LeafNode<K, V> {\n         }\n     }\n \n-    /// Creates a new boxed `LeafNode`. Unsafe because all nodes should really be hidden behind\n-    /// `BoxedNode`, preventing accidental dropping of uninitialized keys and values.\n-    unsafe fn new() -> Box<Self> {\n+    /// Creates a new boxed `LeafNode`.\n+    fn new() -> Box<Self> {\n         unsafe {\n             let mut leaf = Box::new_uninit();\n             LeafNode::init(leaf.as_mut_ptr());\n@@ -108,10 +107,9 @@ struct InternalNode<K, V> {\n impl<K, V> InternalNode<K, V> {\n     /// Creates a new boxed `InternalNode`.\n     ///\n-    /// This is unsafe for two reasons. First, it returns an owned `InternalNode` in a box, risking\n-    /// dropping of uninitialized fields. Second, an invariant of internal nodes is that `len + 1`\n-    /// edges are initialized and valid, meaning that even when the node is empty (having a\n-    /// `len` of 0), there must be one initialized and valid edge. This function does not set up\n+    /// # Safety\n+    /// An invariant of internal nodes is that they have at least one\n+    /// initialized and valid edge. This function does not set up\n     /// such an edge.\n     unsafe fn new() -> Box<Self> {\n         unsafe {\n@@ -145,7 +143,7 @@ impl<K, V> Root<K, V> {\n \n impl<K, V> NodeRef<marker::Owned, K, V, marker::Leaf> {\n     fn new_leaf() -> Self {\n-        Self::from_new_leaf(unsafe { LeafNode::new() })\n+        Self::from_new_leaf(LeafNode::new())\n     }\n \n     fn from_new_leaf(leaf: Box<LeafNode<K, V>>) -> Self {\n@@ -157,10 +155,13 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::Internal> {\n     fn new_internal(child: Root<K, V>) -> Self {\n         let mut new_node = unsafe { InternalNode::new() };\n         new_node.edges[0].write(child.node);\n-        NodeRef::from_new_internal(new_node, child.height + 1)\n+        unsafe { NodeRef::from_new_internal(new_node, child.height + 1) }\n     }\n \n-    fn from_new_internal(internal: Box<InternalNode<K, V>>, height: usize) -> Self {\n+    /// # Safety\n+    /// `height` must not be zero.\n+    unsafe fn from_new_internal(internal: Box<InternalNode<K, V>>, height: usize) -> Self {\n+        debug_assert!(height > 0);\n         let node = NonNull::from(Box::leak(internal)).cast();\n         let mut this = NodeRef { height, node, _marker: PhantomData };\n         this.borrow_mut().correct_all_childrens_parent_links();\n@@ -1086,14 +1087,12 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n     /// - All the key-value pairs to the right of this handle are put into a newly\n     ///   allocated node.\n     pub fn split(mut self) -> SplitResult<'a, K, V, marker::Leaf> {\n-        unsafe {\n-            let mut new_node = LeafNode::new();\n+        let mut new_node = LeafNode::new();\n \n-            let kv = self.split_leaf_data(&mut new_node);\n+        let kv = self.split_leaf_data(&mut new_node);\n \n-            let right = NodeRef::from_new_leaf(new_node);\n-            SplitResult { left: self.node, kv, right }\n-        }\n+        let right = NodeRef::from_new_leaf(new_node);\n+        SplitResult { left: self.node, kv, right }\n     }\n \n     /// Removes the key-value pair pointed to by this handle and returns it, along with the edge"}]}