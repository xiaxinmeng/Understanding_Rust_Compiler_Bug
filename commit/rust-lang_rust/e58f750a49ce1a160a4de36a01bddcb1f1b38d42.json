{"sha": "e58f750a49ce1a160a4de36a01bddcb1f1b38d42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1OGY3NTBhNDljZTFhMTYwYTRkZTM2YTAxYmRkY2IxZjFiMzhkNDI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-02-09T18:27:07Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-02-09T18:27:07Z"}, "message": "refactor drop glue", "tree": {"sha": "a65cdfc2ac4435ce6994a8059fa60231d5ec4daa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a65cdfc2ac4435ce6994a8059fa60231d5ec4daa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e58f750a49ce1a160a4de36a01bddcb1f1b38d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e58f750a49ce1a160a4de36a01bddcb1f1b38d42", "html_url": "https://github.com/rust-lang/rust/commit/e58f750a49ce1a160a4de36a01bddcb1f1b38d42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e58f750a49ce1a160a4de36a01bddcb1f1b38d42/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "023ec3e39599993bb64e724ae14c797bd3ebb96e", "url": "https://api.github.com/repos/rust-lang/rust/commits/023ec3e39599993bb64e724ae14c797bd3ebb96e", "html_url": "https://github.com/rust-lang/rust/commit/023ec3e39599993bb64e724ae14c797bd3ebb96e"}], "stats": {"total": 42, "additions": 17, "deletions": 25}, "files": [{"sha": "0f3094522e0c07e0213cea551b58a9aa4b4b62cc", "filename": "src/memory.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e58f750a49ce1a160a4de36a01bddcb1f1b38d42/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58f750a49ce1a160a4de36a01bddcb1f1b38d42/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=e58f750a49ce1a160a4de36a01bddcb1f1b38d42", "patch": "@@ -120,9 +120,9 @@ pub enum Function<'tcx> {\n     Concrete(FunctionDefinition<'tcx>),\n     /// Glue required to call a regular function through a Fn(Mut|Once) trait object\n     FnDefAsTraitObject(FunctionDefinition<'tcx>),\n-    /// Glue required to call the actual drop impl's `drop` method.\n-    /// Drop glue takes the `self` by value, while `Drop::drop` take `&mut self`\n-    DropGlue(FunctionDefinition<'tcx>),\n+    /// A drop glue function only needs to know the real type, and then miri can extract the\n+    /// actual type at runtime.\n+    DropGlue(ty::Ty<'tcx>),\n     /// Glue required to treat the ptr part of a fat pointer\n     /// as a function pointer\n     FnPtrAsTraitObject(&'tcx ty::FnSig<'tcx>),\n@@ -137,9 +137,9 @@ impl<'tcx> Function<'tcx> {\n             other => Err(EvalError::ExpectedConcreteFunction(other)),\n         }\n     }\n-    pub fn expect_drop_glue(self) -> EvalResult<'tcx, FunctionDefinition<'tcx>> {\n+    pub fn expect_drop_glue_real_ty(self) -> EvalResult<'tcx, ty::Ty<'tcx>> {\n         match self {\n-            Function::DropGlue(fn_def) => Ok(fn_def),\n+            Function::DropGlue(real_ty) => Ok(real_ty),\n             other => Err(EvalError::ExpectedDropGlue(other)),\n         }\n     }\n@@ -234,15 +234,8 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         self.create_fn_alloc(Function::FnPtrAsTraitObject(fn_ty.sig.skip_binder()))\n     }\n \n-    pub fn create_drop_glue(&mut self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId, substs: &'tcx Substs<'tcx>, fn_ty: &'tcx BareFnTy<'tcx>) -> Pointer {\n-        self.create_fn_alloc(Function::DropGlue(FunctionDefinition {\n-            def_id,\n-            substs,\n-            abi: fn_ty.abi,\n-            // FIXME: why doesn't this compile?\n-            //sig: tcx.erase_late_bound_regions(&fn_ty.sig),\n-            sig: fn_ty.sig.skip_binder(),\n-        }))\n+    pub fn create_drop_glue(&mut self, ty: ty::Ty<'tcx>) -> Pointer {\n+        self.create_fn_alloc(Function::DropGlue(ty))\n     }\n \n     pub fn create_fn_ptr(&mut self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId, substs: &'tcx Substs<'tcx>, fn_ty: &'tcx BareFnTy<'tcx>) -> Pointer {\n@@ -495,8 +488,8 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n                     trace!(\"{} {}\", msg, dump_fn_def(fn_def));\n                     continue;\n                 },\n-                (None, Some(&Function::DropGlue(fn_def))) => {\n-                    trace!(\"{} drop glue for {}\", msg, dump_fn_def(fn_def));\n+                (None, Some(&Function::DropGlue(real_ty))) => {\n+                    trace!(\"{} drop glue for {}\", msg, real_ty);\n                     continue;\n                 },\n                 (None, Some(&Function::FnDefAsTraitObject(fn_def))) => {"}, {"sha": "cb971eca29c7ddeb3fbff187a426183ddb1bd550", "filename": "src/terminator/drop.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e58f750a49ce1a160a4de36a01bddcb1f1b38d42/src%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58f750a49ce1a160a4de36a01bddcb1f1b38d42/src%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fdrop.rs?ref=e58f750a49ce1a160a4de36a01bddcb1f1b38d42", "patch": "@@ -8,7 +8,7 @@ use syntax::codemap::Span;\n use error::{EvalError, EvalResult};\n use eval_context::{EvalContext, monomorphize_field_ty, StackPopCleanup};\n use lvalue::{Lvalue, LvalueExtra};\n-use memory::{Pointer, FunctionDefinition};\n+use memory::Pointer;\n use value::PrimVal;\n use value::Value;\n \n@@ -166,13 +166,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let drop_fn = self.memory.read_ptr(vtable)?;\n                 // some values don't need to call a drop impl, so the value is null\n                 if drop_fn != Pointer::from_int(0) {\n-                    // FIXME: change the `DropGlue` variant of `Function` to only contain `real_ty`\n-                    let FunctionDefinition {substs, sig, ..} = self.memory.get_fn(drop_fn.alloc_id)?.expect_drop_glue()?;\n-                    // The real type is taken from the self argument in `fn drop(&mut self)`\n-                    let real_ty = match sig.inputs()[0].sty {\n-                        ty::TyRef(_, mt) => self.monomorphize(mt.ty, substs),\n-                        _ => bug!(\"first argument of Drop::drop must be &mut T\"),\n-                    };\n+                    let real_ty = self.memory.get_fn(drop_fn.alloc_id)?.expect_drop_glue_real_ty()?;\n                     self.drop(Lvalue::from_ptr(ptr), real_ty, drop)?;\n                 } else {\n                     // just a sanity check"}, {"sha": "78acfd9dded4cdf778ac0b838c3624dffd852604", "filename": "src/vtable.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e58f750a49ce1a160a4de36a01bddcb1f1b38d42/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58f750a49ce1a160a4de36a01bddcb1f1b38d42/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=e58f750a49ce1a160a4de36a01bddcb1f1b38d42", "patch": "@@ -98,7 +98,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     ty::TyFnDef(_, _, fn_ty) => self.tcx.erase_regions(&fn_ty),\n                     _ => bug!(\"drop method is not a TyFnDef\"),\n                 };\n-                let fn_ptr = self.memory.create_drop_glue(self.tcx, drop_def_id, substs, fn_ty);\n+                // The real type is taken from the self argument in `fn drop(&mut self)`\n+                let real_ty = match fn_ty.sig.skip_binder().inputs()[0].sty {\n+                    ty::TyRef(_, mt) => self.monomorphize(mt.ty, substs),\n+                    _ => bug!(\"first argument of Drop::drop must be &mut T\"),\n+                };\n+                let fn_ptr = self.memory.create_drop_glue(real_ty);\n                 self.memory.write_ptr(vtable, fn_ptr)?;\n             }\n         }"}]}