{"sha": "915f09181927e746ab693c12c0747cfa47b9fc9f", "node_id": "C_kwDOAAsO6NoAKDkxNWYwOTE4MTkyN2U3NDZhYjY5M2MxMmMwNzQ3Y2ZhNDdiOWZjOWY", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-06-06T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-06-12T05:27:57Z"}, "message": "Remove duplicated implementations of borrowed locals analysis", "tree": {"sha": "6c784b1704ca98551ce24bc072b3731e61319d75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c784b1704ca98551ce24bc072b3731e61319d75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/915f09181927e746ab693c12c0747cfa47b9fc9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/915f09181927e746ab693c12c0747cfa47b9fc9f", "html_url": "https://github.com/rust-lang/rust/commit/915f09181927e746ab693c12c0747cfa47b9fc9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/915f09181927e746ab693c12c0747cfa47b9fc9f/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37a42258ffe02cfb7107380759e492c64500ab55", "url": "https://api.github.com/repos/rust-lang/rust/commits/37a42258ffe02cfb7107380759e492c64500ab55", "html_url": "https://github.com/rust-lang/rust/commit/37a42258ffe02cfb7107380759e492c64500ab55"}], "stats": {"total": 162, "additions": 29, "deletions": 133}, "files": [{"sha": "b5de222c3eb82e68fd60e53ac4e33a014307981e", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/915f09181927e746ab693c12c0747cfa47b9fc9f/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915f09181927e746ab693c12c0747cfa47b9fc9f/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=915f09181927e746ab693c12c0747cfa47b9fc9f", "patch": "@@ -145,3 +145,23 @@ where\n         }\n     }\n }\n+\n+/// The set of locals that are borrowed at some point in the MIR body.\n+pub fn borrowed_locals(body: &Body<'_>) -> BitSet<Local> {\n+    struct Borrowed(BitSet<Local>);\n+\n+    impl GenKill<Local> for Borrowed {\n+        #[inline]\n+        fn gen(&mut self, elem: Local) {\n+            self.0.gen(elem)\n+        }\n+        #[inline]\n+        fn kill(&mut self, _: Local) {\n+            // Ignore borrow invalidation.\n+        }\n+    }\n+\n+    let mut borrowed = Borrowed(BitSet::new_empty(body.local_decls.len()));\n+    TransferFunction { trans: &mut borrowed }.visit_body(body);\n+    borrowed.0\n+}"}, {"sha": "af6a1bb1545ead0dc86071bfa5a174730f6eebf7", "filename": "compiler/rustc_mir_dataflow/src/impls/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/915f09181927e746ab693c12c0747cfa47b9fc9f/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915f09181927e746ab693c12c0747cfa47b9fc9f/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs?ref=915f09181927e746ab693c12c0747cfa47b9fc9f", "patch": "@@ -23,6 +23,7 @@ mod init_locals;\n mod liveness;\n mod storage_liveness;\n \n+pub use self::borrowed_locals::borrowed_locals;\n pub use self::borrowed_locals::MaybeBorrowedLocals;\n pub use self::init_locals::MaybeInitializedLocals;\n pub use self::liveness::MaybeLiveLocals;"}, {"sha": "28f3790914b38e4d329600dd58d6a89f28320c8a", "filename": "compiler/rustc_mir_transform/src/dead_store_elimination.rs", "status": "modified", "additions": 6, "deletions": 68, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/915f09181927e746ab693c12c0747cfa47b9fc9f/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915f09181927e746ab693c12c0747cfa47b9fc9f/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs?ref=915f09181927e746ab693c12c0747cfa47b9fc9f", "patch": "@@ -13,16 +13,15 @@\n //!\n \n use rustc_index::bit_set::BitSet;\n-use rustc_middle::{\n-    mir::{visit::Visitor, *},\n-    ty::TyCtxt,\n-};\n-use rustc_mir_dataflow::{impls::MaybeTransitiveLiveLocals, Analysis};\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::TyCtxt;\n+use rustc_mir_dataflow::impls::{borrowed_locals, MaybeTransitiveLiveLocals};\n+use rustc_mir_dataflow::Analysis;\n \n /// Performs the optimization on the body\n ///\n /// The `borrowed` set must be a `BitSet` of all the locals that are ever borrowed in this body. It\n-/// can be generated via the [`get_borrowed_locals`] function.\n+/// can be generated via the [`borrowed_locals`] function.\n pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitSet<Local>) {\n     let mut live = MaybeTransitiveLiveLocals::new(borrowed)\n         .into_engine(tcx, body)\n@@ -73,67 +72,6 @@ pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitS\n     }\n }\n \n-pub fn get_borrowed_locals(body: &Body<'_>) -> BitSet<Local> {\n-    let mut b = BorrowedLocals(BitSet::new_empty(body.local_decls.len()));\n-    b.visit_body(body);\n-    b.0\n-}\n-\n-struct BorrowedLocals(BitSet<Local>);\n-\n-impl<'tcx> Visitor<'tcx> for BorrowedLocals {\n-    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, loc: Location) {\n-        self.super_rvalue(rvalue, loc);\n-        match rvalue {\n-            Rvalue::AddressOf(_, borrowed_place) | Rvalue::Ref(_, _, borrowed_place) => {\n-                if !borrowed_place.is_indirect() {\n-                    self.0.insert(borrowed_place.local);\n-                }\n-            }\n-\n-            Rvalue::Cast(..)\n-            | Rvalue::ShallowInitBox(..)\n-            | Rvalue::Use(..)\n-            | Rvalue::Repeat(..)\n-            | Rvalue::Len(..)\n-            | Rvalue::BinaryOp(..)\n-            | Rvalue::CheckedBinaryOp(..)\n-            | Rvalue::NullaryOp(..)\n-            | Rvalue::UnaryOp(..)\n-            | Rvalue::Discriminant(..)\n-            | Rvalue::Aggregate(..)\n-            | Rvalue::ThreadLocalRef(..) => {}\n-        }\n-    }\n-\n-    fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n-        self.super_terminator(terminator, location);\n-\n-        match terminator.kind {\n-            TerminatorKind::Drop { place: dropped_place, .. } => {\n-                if !dropped_place.is_indirect() {\n-                    self.0.insert(dropped_place.local);\n-                }\n-            }\n-\n-            TerminatorKind::Abort\n-            | TerminatorKind::DropAndReplace { .. }\n-            | TerminatorKind::Assert { .. }\n-            | TerminatorKind::Call { .. }\n-            | TerminatorKind::FalseEdge { .. }\n-            | TerminatorKind::FalseUnwind { .. }\n-            | TerminatorKind::GeneratorDrop\n-            | TerminatorKind::Goto { .. }\n-            | TerminatorKind::Resume\n-            | TerminatorKind::Return\n-            | TerminatorKind::SwitchInt { .. }\n-            | TerminatorKind::Unreachable\n-            | TerminatorKind::Yield { .. }\n-            | TerminatorKind::InlineAsm { .. } => {}\n-        }\n-    }\n-}\n-\n pub struct DeadStoreElimination;\n \n impl<'tcx> MirPass<'tcx> for DeadStoreElimination {\n@@ -142,7 +80,7 @@ impl<'tcx> MirPass<'tcx> for DeadStoreElimination {\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let borrowed = get_borrowed_locals(body);\n+        let borrowed = borrowed_locals(body);\n         eliminate(tcx, body, &borrowed);\n     }\n }"}, {"sha": "84c7aada5e57f1fa43ffb5f8c272b2c927dfd533", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 2, "deletions": 65, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/915f09181927e746ab693c12c0747cfa47b9fc9f/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915f09181927e746ab693c12c0747cfa47b9fc9f/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=915f09181927e746ab693c12c0747cfa47b9fc9f", "patch": "@@ -104,7 +104,7 @@ use rustc_middle::mir::{\n     Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n };\n use rustc_middle::ty::TyCtxt;\n-use rustc_mir_dataflow::impls::{MaybeInitializedLocals, MaybeLiveLocals};\n+use rustc_mir_dataflow::impls::{borrowed_locals, MaybeInitializedLocals, MaybeLiveLocals};\n use rustc_mir_dataflow::Analysis;\n \n // Empirical measurements have resulted in some observations:\n@@ -805,7 +805,7 @@ fn find_candidates<'tcx>(body: &Body<'tcx>) -> Vec<CandidateAssignment<'tcx>> {\n     let mut visitor = FindAssignments {\n         body,\n         candidates: Vec::new(),\n-        ever_borrowed_locals: ever_borrowed_locals(body),\n+        ever_borrowed_locals: borrowed_locals(body),\n         locals_used_as_array_index: locals_used_as_array_index(body),\n     };\n     visitor.visit_body(body);\n@@ -886,69 +886,6 @@ fn is_local_required(local: Local, body: &Body<'_>) -> bool {\n     }\n }\n \n-/// Walks MIR to find all locals that have their address taken anywhere.\n-fn ever_borrowed_locals(body: &Body<'_>) -> BitSet<Local> {\n-    let mut visitor = BorrowCollector { locals: BitSet::new_empty(body.local_decls.len()) };\n-    visitor.visit_body(body);\n-    visitor.locals\n-}\n-\n-struct BorrowCollector {\n-    locals: BitSet<Local>,\n-}\n-\n-impl<'tcx> Visitor<'tcx> for BorrowCollector {\n-    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n-        self.super_rvalue(rvalue, location);\n-\n-        match rvalue {\n-            Rvalue::AddressOf(_, borrowed_place) | Rvalue::Ref(_, _, borrowed_place) => {\n-                if !borrowed_place.is_indirect() {\n-                    self.locals.insert(borrowed_place.local);\n-                }\n-            }\n-\n-            Rvalue::Cast(..)\n-            | Rvalue::ShallowInitBox(..)\n-            | Rvalue::Use(..)\n-            | Rvalue::Repeat(..)\n-            | Rvalue::Len(..)\n-            | Rvalue::BinaryOp(..)\n-            | Rvalue::CheckedBinaryOp(..)\n-            | Rvalue::NullaryOp(..)\n-            | Rvalue::UnaryOp(..)\n-            | Rvalue::Discriminant(..)\n-            | Rvalue::Aggregate(..)\n-            | Rvalue::ThreadLocalRef(..) => {}\n-        }\n-    }\n-\n-    fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n-        self.super_terminator(terminator, location);\n-\n-        match terminator.kind {\n-            TerminatorKind::Drop { place: dropped_place, .. }\n-            | TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n-                self.locals.insert(dropped_place.local);\n-            }\n-\n-            TerminatorKind::Abort\n-            | TerminatorKind::Assert { .. }\n-            | TerminatorKind::Call { .. }\n-            | TerminatorKind::FalseEdge { .. }\n-            | TerminatorKind::FalseUnwind { .. }\n-            | TerminatorKind::GeneratorDrop\n-            | TerminatorKind::Goto { .. }\n-            | TerminatorKind::Resume\n-            | TerminatorKind::Return\n-            | TerminatorKind::SwitchInt { .. }\n-            | TerminatorKind::Unreachable\n-            | TerminatorKind::Yield { .. }\n-            | TerminatorKind::InlineAsm { .. } => {}\n-        }\n-    }\n-}\n-\n /// `PlaceElem::Index` only stores a `Local`, so we can't replace that with a full `Place`.\n ///\n /// Collect locals used as indices so we don't generate candidates that are impossible to apply"}]}