{"sha": "67af127f243e5a3abcdf95f395b1029560a63ac1", "node_id": "C_kwDOAAsO6NoAKDY3YWYxMjdmMjQzZTVhM2FiY2RmOTVmMzk1YjEwMjk1NjBhNjNhYzE", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-09-28T12:31:29Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-09-29T10:02:58Z"}, "message": "Fix dogfood", "tree": {"sha": "4b98569d68c3a36c820daa1e3af11abad85a1813", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b98569d68c3a36c820daa1e3af11abad85a1813"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67af127f243e5a3abcdf95f395b1029560a63ac1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmM1bVIACgkQHKDfKvWd\naKXHPQ//SOWL70pYOCBxfw2v2RqPC0mOc7Fz+GnN30gz0KzH1WO0h/SbLN9bh9bG\nuh3q7NJT/8GFJlySluJ4t7qFPnSzsinqGUenQPEfIwDfyZHNfwy+rDINfYe0fgDv\niQOk5p3e+hkXOnxyzimTLAHpZLyvEcMSEdykq+PvuvE3drxpOiCNOTCzqjB5JfG2\nKBBQEu6eQQd12DuZ4FsO4SmnH3/F4WIXzwPke/gXitdITUhvS/oMVOeJl8bLFjqh\n1nVD4IKBE8H/2cfoMze85ZR6taj7dOLPm+1RJB4FXY0ZyNKIbmeXQp4c7kP36RIa\nOuvDF/QGIF5PzI71u8XluutV1Anle/Hg9nbAH/9bkd2TiRY0/LgRKDlm/43q6gMg\ncRcWhNl7ALEGEtpUld1/yLs/uJry0PP+A8ZVUaqdHMB3pK61d9A23JX8RAUYQ8+d\ntgnXeSqB2QCuiBhB5pg+LkApvg0+DYvaIBSp/iryCqi6GBesavYYUttUDOkFeBqJ\nEgW4avK6ZPE61AYK6hvfbrHO1PMb2UJZC0kc2DohoW0FXuPbjc5l+N/v/AM/8Dy8\nYlJtiKHCRw+ZRLiaXlyFkM5Sh+HgZPvEIBDzTYoKQPnQMWLR9VFCAch2E7KKm7+w\nKC4S0wO1GF7UURBWucssBvf/UOOHnDPW/5BLLKzva15AAEU8Zdc=\n=WXZo\n-----END PGP SIGNATURE-----", "payload": "tree 4b98569d68c3a36c820daa1e3af11abad85a1813\nparent 579791178de9092be554d3751401fd58181a16c0\nauthor Philipp Krones <hello@philkrones.com> 1664368289 +0200\ncommitter Philipp Krones <hello@philkrones.com> 1664445778 +0200\n\nFix dogfood\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67af127f243e5a3abcdf95f395b1029560a63ac1", "html_url": "https://github.com/rust-lang/rust/commit/67af127f243e5a3abcdf95f395b1029560a63ac1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67af127f243e5a3abcdf95f395b1029560a63ac1/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "579791178de9092be554d3751401fd58181a16c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/579791178de9092be554d3751401fd58181a16c0", "html_url": "https://github.com/rust-lang/rust/commit/579791178de9092be554d3751401fd58181a16c0"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "b40cb7cddaf178155a41bb54f4459cf5b9895ddb", "filename": "clippy_lints/src/equatable_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67af127f243e5a3abcdf95f395b1029560a63ac1/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67af127f243e5a3abcdf95f395b1029560a63ac1/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fequatable_if_let.rs?ref=67af127f243e5a3abcdf95f395b1029560a63ac1", "patch": "@@ -51,7 +51,7 @@ fn unary_pattern(pat: &Pat<'_>) -> bool {\n             false\n         },\n         PatKind::Struct(_, a, etc) => !etc && a.iter().all(|x| unary_pattern(x.pat)),\n-        PatKind::Tuple(a, etc) | PatKind::TupleStruct(_, a, etc) => !etc.as_opt_usize().is_some() && array_rec(a),\n+        PatKind::Tuple(a, etc) | PatKind::TupleStruct(_, a, etc) => etc.as_opt_usize().is_none() && array_rec(a),\n         PatKind::Ref(x, _) | PatKind::Box(x) => unary_pattern(x),\n         PatKind::Path(_) | PatKind::Lit(_) => true,\n     }"}, {"sha": "13878eda0f1cd59395825864b6f8ffa95ec5b39f", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67af127f243e5a3abcdf95f395b1029560a63ac1/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67af127f243e5a3abcdf95f395b1029560a63ac1/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=67af127f243e5a3abcdf95f395b1029560a63ac1", "patch": "@@ -461,7 +461,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 sub_visitor.visit_fn_decl(decl);\n                 self.nested_elision_site_lts.append(&mut sub_visitor.all_lts());\n             },\n-            TyKind::TraitObject(bounds, ref lt, _) => {\n+            TyKind::TraitObject(bounds, lt, _) => {\n                 if !lt.is_elided() {\n                     self.unelided_trait_object_lifetime = true;\n                 }"}, {"sha": "6d6aa43df2a7eb2381ad71b266c1d352c9eeb816", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67af127f243e5a3abcdf95f395b1029560a63ac1/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67af127f243e5a3abcdf95f395b1029560a63ac1/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=67af127f243e5a3abcdf95f395b1029560a63ac1", "patch": "@@ -308,15 +308,15 @@ fn find_good_method_for_match<'a>(\n     should_be_left: &'a str,\n     should_be_right: &'a str,\n ) -> Option<&'a str> {\n-    let pat_left = arms[0].pat;\n-    let pat_right = arms[1].pat;\n+    let first_pat = arms[0].pat;\n+    let second_pat = arms[1].pat;\n \n-    let body_node_pair = if (is_pat_variant(cx, pat_left, path_left, expected_item_left))\n-        && (is_pat_variant(cx, pat_right, path_right, expected_item_right))\n+    let body_node_pair = if (is_pat_variant(cx, first_pat, path_left, expected_item_left))\n+        && (is_pat_variant(cx, second_pat, path_right, expected_item_right))\n     {\n         (&arms[0].body.kind, &arms[1].body.kind)\n-    } else if (is_pat_variant(cx, pat_left, path_left, expected_item_right))\n-        && (is_pat_variant(cx, pat_right, path_right, expected_item_left))\n+    } else if (is_pat_variant(cx, first_pat, path_left, expected_item_right))\n+        && (is_pat_variant(cx, second_pat, path_right, expected_item_left))\n     {\n         (&arms[1].body.kind, &arms[0].body.kind)\n     } else {"}, {"sha": "d296a150b46d085cec600152a3c2a05abac8af49", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67af127f243e5a3abcdf95f395b1029560a63ac1/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67af127f243e5a3abcdf95f395b1029560a63ac1/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=67af127f243e5a3abcdf95f395b1029560a63ac1", "patch": "@@ -669,7 +669,7 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n }\n \n fn get_rptr_lm<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability, Span)> {\n-    if let TyKind::Rptr(ref lt, ref m) = ty.kind {\n+    if let TyKind::Rptr(lt, ref m) = ty.kind {\n         Some((lt, m.mutbl, ty.span))\n     } else {\n         None"}, {"sha": "79c31efb9fcdfb1accd261691499f97c5149b9bd", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67af127f243e5a3abcdf95f395b1029560a63ac1/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67af127f243e5a3abcdf95f395b1029560a63ac1/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=67af127f243e5a3abcdf95f395b1029560a63ac1", "patch": "@@ -537,7 +537,7 @@ impl Types {\n                     QPath::LangItem(..) => {},\n                 }\n             },\n-            TyKind::Rptr(ref lt, ref mut_ty) => {\n+            TyKind::Rptr(lt, ref mut_ty) => {\n                 context.is_nested_call = true;\n                 if !borrowed_box::check(cx, hir_ty, lt, mut_ty) {\n                     self.check_ty(cx, mut_ty.ty, context);"}, {"sha": "cf24ec8b67b9004dc7af3056b5d2cb36026dcd9e", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67af127f243e5a3abcdf95f395b1029560a63ac1/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67af127f243e5a3abcdf95f395b1029560a63ac1/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=67af127f243e5a3abcdf95f395b1029560a63ac1", "patch": "@@ -962,7 +962,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n             TyKind::Rptr(lifetime, ref mut_ty) => {\n-                self.hash_lifetime(*lifetime);\n+                self.hash_lifetime(lifetime);\n                 self.hash_ty(mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n@@ -992,7 +992,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 in_trait.hash(&mut self.s);\n             },\n             TyKind::TraitObject(_, lifetime, _) => {\n-                self.hash_lifetime(*lifetime);\n+                self.hash_lifetime(lifetime);\n             },\n             TyKind::Typeof(anon_const) => {\n                 self.hash_body(anon_const.body);"}]}