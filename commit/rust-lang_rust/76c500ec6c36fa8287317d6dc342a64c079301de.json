{"sha": "76c500ec6c36fa8287317d6dc342a64c079301de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YzUwMGVjNmMzNmZhODI4NzMxN2Q2ZGMzNDJhNjRjMDc5MzAxZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-07T23:45:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-07T23:45:57Z"}, "message": "Auto merge of #81635 - michaelwoerister:structured_def_path_hash, r=pnkfelix\n\nLet a portion of DefPathHash uniquely identify the DefPath's crate.\n\nThis allows to directly map from a `DefPathHash` to the crate it originates from, without constructing side tables to do that mapping -- something that is useful for incremental compilation where we deal with `DefPathHash` instead of `DefId` a lot.\n\nIt also allows to reliably and cheaply check for `DefPathHash` collisions which allows the compiler to gracefully abort compilation instead of running into a subsequent ICE at some random place in the code.\n\nThe following new piece of documentation describes the most interesting aspects of the changes:\n\n```rust\n/// A `DefPathHash` is a fixed-size representation of a `DefPath` that is\n/// stable across crate and compilation session boundaries. It consists of two\n/// separate 64-bit hashes. The first uniquely identifies the crate this\n/// `DefPathHash` originates from (see [StableCrateId]), and the second\n/// uniquely identifies the corresponding `DefPath` within that crate. Together\n/// they form a unique identifier within an entire crate graph.\n///\n/// There is a very small chance of hash collisions, which would mean that two\n/// different `DefPath`s map to the same `DefPathHash`. Proceeding compilation\n/// with such a hash collision would very probably lead to an ICE and, in the\n/// worst case, to a silent mis-compilation. The compiler therefore actively\n/// and exhaustively checks for such hash collisions and aborts compilation if\n/// it finds one.\n///\n/// `DefPathHash` uses 64-bit hashes for both the crate-id part and the\n/// crate-internal part, even though it is likely that there are many more\n/// `LocalDefId`s in a single crate than there are individual crates in a crate\n/// graph. Since we use the same number of bits in both cases, the collision\n/// probability for the crate-local part will be quite a bit higher (though\n/// still very small).\n///\n/// This imbalance is not by accident: A hash collision in the\n/// crate-local part of a `DefPathHash` will be detected and reported while\n/// compiling the crate in question. Such a collision does not depend on\n/// outside factors and can be easily fixed by the crate maintainer (e.g. by\n/// renaming the item in question or by bumping the crate version in a harmless\n/// way).\n///\n/// A collision between crate-id hashes on the other hand is harder to fix\n/// because it depends on the set of crates in the entire crate graph of a\n/// compilation session. Again, using the same crate with a different version\n/// number would fix the issue with a high probability -- but that might be\n/// easier said then done if the crates in questions are dependencies of\n/// third-party crates.\n///\n/// That being said, given a high quality hash function, the collision\n/// probabilities in question are very small. For example, for a big crate like\n/// `rustc_middle` (with ~50000 `LocalDefId`s as of the time of writing) there\n/// is a probability of roughly 1 in 14,750,000,000 of a crate-internal\n/// collision occurring. For a big crate graph with 1000 crates in it, there is\n/// a probability of 1 in 36,890,000,000,000 of a `StableCrateId` collision.\n```\n\nGiven the probabilities involved I hope that no one will ever actually see the error messages. Nonetheless, I'd be glad about some feedback on how to improve them. Should we create a GH issue describing the problem and possible solutions to point to? Or a page in the rustc book?\n\nr? `@pnkfelix` (feel free to re-assign)", "tree": {"sha": "f80d97279a800721b171c03b0672243a79c76f7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f80d97279a800721b171c03b0672243a79c76f7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76c500ec6c36fa8287317d6dc342a64c079301de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76c500ec6c36fa8287317d6dc342a64c079301de", "html_url": "https://github.com/rust-lang/rust/commit/76c500ec6c36fa8287317d6dc342a64c079301de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76c500ec6c36fa8287317d6dc342a64c079301de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "234781afe33d3f339b002f85f948046d8476cfc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/234781afe33d3f339b002f85f948046d8476cfc9", "html_url": "https://github.com/rust-lang/rust/commit/234781afe33d3f339b002f85f948046d8476cfc9"}, {"sha": "9e5054498b181fc3984e266d1aa05f076dfea22f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e5054498b181fc3984e266d1aa05f076dfea22f", "html_url": "https://github.com/rust-lang/rust/commit/9e5054498b181fc3984e266d1aa05f076dfea22f"}], "stats": {"total": 469, "additions": 345, "deletions": 124}, "files": [{"sha": "03ec4b8a44da66158774d9d7d4b2fa6906c3441d", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -42,7 +42,6 @@ pub mod util {\n pub mod ast;\n pub mod ast_like;\n pub mod attr;\n-pub mod crate_disambiguator;\n pub mod entry;\n pub mod expand;\n pub mod mut_visit;"}, {"sha": "681b49e2ea97bfaca49751da7d8ab1d79335ad1b", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -7,19 +7,30 @@ use std::hash::{Hash, Hasher};\n use std::mem::{self, MaybeUninit};\n \n #[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy)]\n+#[repr(C)]\n pub struct Fingerprint(u64, u64);\n \n impl Fingerprint {\n     pub const ZERO: Fingerprint = Fingerprint(0, 0);\n \n+    #[inline]\n+    pub fn new(_0: u64, _1: u64) -> Fingerprint {\n+        Fingerprint(_0, _1)\n+    }\n+\n     #[inline]\n     pub fn from_smaller_hash(hash: u64) -> Fingerprint {\n         Fingerprint(hash, hash)\n     }\n \n     #[inline]\n     pub fn to_smaller_hash(&self) -> u64 {\n-        self.0\n+        // Even though both halves of the fingerprint are expected to be good\n+        // quality hash values, let's still combine the two values because the\n+        // Fingerprints in DefPathHash have the StableCrateId portion which is\n+        // the same for all DefPathHashes from the same crate. Combining the\n+        // two halfs makes sure we get a good quality hash in such cases too.\n+        self.0.wrapping_mul(3).wrapping_add(self.1)\n     }\n \n     #[inline]\n@@ -92,8 +103,19 @@ impl<H: Hasher> FingerprintHasher for H {\n impl FingerprintHasher for crate::unhash::Unhasher {\n     #[inline]\n     fn write_fingerprint(&mut self, fingerprint: &Fingerprint) {\n-        // `Unhasher` only wants a single `u64`\n-        self.write_u64(fingerprint.0);\n+        // Even though both halves of the fingerprint are expected to be good\n+        // quality hash values, let's still combine the two values because the\n+        // Fingerprints in DefPathHash have the StableCrateId portion which is\n+        // the same for all DefPathHashes from the same crate. Combining the\n+        // two halfs makes sure we get a good quality hash in such cases too.\n+        //\n+        // Since `Unhasher` is used only in the context of HashMaps, it is OK\n+        // to combine the two components in an order-independent way (which is\n+        // cheaper than the more robust Fingerprint::to_smaller_hash()). For\n+        // HashMaps we don't really care if Fingerprint(x,y) and\n+        // Fingerprint(y, x) result in the same hash value. Collision\n+        // probability will still be much better than with FxHash.\n+        self.write_u64(fingerprint.0.wrapping_add(fingerprint.1));\n     }\n }\n "}, {"sha": "ac6a359ee577d7e436d17920d2362e0f7577dd75", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 51, "deletions": 20, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -5,13 +5,16 @@\n //! expressions) that are mostly just leftovers.\n \n pub use crate::def_id::DefPathHash;\n-use crate::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use crate::def_id::{\n+    CrateNum, DefId, DefIndex, LocalDefId, StableCrateId, CRATE_DEF_INDEX, LOCAL_CRATE,\n+};\n use crate::hir;\n \n-use rustc_ast::crate_disambiguator::CrateDisambiguator;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n+use rustc_data_structures::unhash::UnhashMap;\n use rustc_index::vec::IndexVec;\n+use rustc_span::crate_disambiguator::CrateDisambiguator;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n@@ -27,6 +30,7 @@ use tracing::debug;\n pub struct DefPathTable {\n     index_to_key: IndexVec<DefIndex, DefKey>,\n     def_path_hashes: IndexVec<DefIndex, DefPathHash>,\n+    def_path_hash_to_index: UnhashMap<DefPathHash, DefIndex>,\n }\n \n impl DefPathTable {\n@@ -39,6 +43,35 @@ impl DefPathTable {\n         };\n         self.def_path_hashes.push(def_path_hash);\n         debug_assert!(self.def_path_hashes.len() == self.index_to_key.len());\n+\n+        // Check for hash collisions of DefPathHashes. These should be\n+        // exceedingly rare.\n+        if let Some(existing) = self.def_path_hash_to_index.insert(def_path_hash, index) {\n+            let def_path1 = DefPath::make(LOCAL_CRATE, existing, |idx| self.def_key(idx));\n+            let def_path2 = DefPath::make(LOCAL_CRATE, index, |idx| self.def_key(idx));\n+\n+            // Continuing with colliding DefPathHashes can lead to correctness\n+            // issues. We must abort compilation.\n+            //\n+            // The likelyhood of such a collision is very small, so actually\n+            // running into one could be indicative of a poor hash function\n+            // being used.\n+            //\n+            // See the documentation for DefPathHash for more information.\n+            panic!(\n+                \"found DefPathHash collsion between {:?} and {:?}. \\\n+                    Compilation cannot continue.\",\n+                def_path1, def_path2\n+            );\n+        }\n+\n+        // Assert that all DefPathHashes correctly contain the local crate's\n+        // StableCrateId\n+        #[cfg(debug_assertions)]\n+        if let Some(root) = self.def_path_hashes.get(CRATE_DEF_INDEX) {\n+            assert!(def_path_hash.stable_crate_id() == root.stable_crate_id());\n+        }\n+\n         index\n     }\n \n@@ -108,13 +141,10 @@ pub struct DefKey {\n }\n \n impl DefKey {\n-    fn compute_stable_hash(&self, parent_hash: DefPathHash) -> DefPathHash {\n+    pub(crate) fn compute_stable_hash(&self, parent: DefPathHash) -> DefPathHash {\n         let mut hasher = StableHasher::new();\n \n-        // We hash a `0u8` here to disambiguate between regular `DefPath` hashes,\n-        // and the special \"root_parent\" below.\n-        0u8.hash(&mut hasher);\n-        parent_hash.hash(&mut hasher);\n+        parent.hash(&mut hasher);\n \n         let DisambiguatedDefPathData { ref data, disambiguator } = self.disambiguated_data;\n \n@@ -127,19 +157,13 @@ impl DefKey {\n \n         disambiguator.hash(&mut hasher);\n \n-        DefPathHash(hasher.finish())\n-    }\n+        let local_hash: u64 = hasher.finish();\n \n-    fn root_parent_stable_hash(\n-        crate_name: &str,\n-        crate_disambiguator: CrateDisambiguator,\n-    ) -> DefPathHash {\n-        let mut hasher = StableHasher::new();\n-        // Disambiguate this from a regular `DefPath` hash; see `compute_stable_hash()` above.\n-        1u8.hash(&mut hasher);\n-        crate_name.hash(&mut hasher);\n-        crate_disambiguator.hash(&mut hasher);\n-        DefPathHash(hasher.finish())\n+        // Construct the new DefPathHash, making sure that the `crate_id`\n+        // portion of the hash is properly copied from the parent. This way the\n+        // `crate_id` part will be recursively propagated from the root to all\n+        // DefPathHashes in this DefPathTable.\n+        DefPathHash::new(parent.stable_crate_id(), local_hash)\n     }\n }\n \n@@ -295,6 +319,12 @@ impl Definitions {\n         self.table.def_path_hash(id.local_def_index)\n     }\n \n+    #[inline]\n+    pub fn def_path_hash_to_def_id(&self, def_path_hash: DefPathHash) -> LocalDefId {\n+        let local_def_index = self.table.def_path_hash_to_index[&def_path_hash];\n+        LocalDefId { local_def_index }\n+    }\n+\n     /// Returns the path from the crate root to `index`. The root\n     /// nodes are not included in the path (i.e., this will be an\n     /// empty vector for the crate root). For an inlined item, this\n@@ -332,7 +362,8 @@ impl Definitions {\n             },\n         };\n \n-        let parent_hash = DefKey::root_parent_stable_hash(crate_name, crate_disambiguator);\n+        let stable_crate_id = StableCrateId::new(crate_name, crate_disambiguator);\n+        let parent_hash = DefPathHash::new(stable_crate_id, 0);\n         let def_path_hash = key.compute_stable_hash(parent_hash);\n \n         // Create the root definition."}, {"sha": "60f5a89ef2eeaa43935c125a0a50ece955d717d3", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -30,6 +30,9 @@ mod stable_hash_impls;\n mod target;\n pub mod weak_lang_items;\n \n+#[cfg(test)]\n+mod tests;\n+\n pub use hir::*;\n pub use hir_id::*;\n pub use lang_items::{LangItem, LanguageItems};"}, {"sha": "2aafc6afa236d8fd5d2b6c7e0361768d1aace5e5", "filename": "compiler/rustc_hir/src/tests.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_hir%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_hir%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftests.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -0,0 +1,39 @@\n+use crate::definitions::{DefKey, DefPathData, DisambiguatedDefPathData};\n+use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_span::crate_disambiguator::CrateDisambiguator;\n+use rustc_span::def_id::{DefPathHash, StableCrateId};\n+\n+#[test]\n+fn def_path_hash_depends_on_crate_id() {\n+    // This test makes sure that *both* halves of a DefPathHash depend on\n+    // the crate-id of the defining crate. This is a desirable property\n+    // because the crate-id can be more easily changed than the DefPath\n+    // of an item, so, in the case of a crate-local DefPathHash collision,\n+    // the user can simply \"role the dice again\" for all DefPathHashes in\n+    // the crate by changing the crate disambiguator (e.g. via bumping the\n+    // crate's version number).\n+\n+    let d0 = CrateDisambiguator::from(Fingerprint::new(12, 34));\n+    let d1 = CrateDisambiguator::from(Fingerprint::new(56, 78));\n+\n+    let h0 = mk_test_hash(\"foo\", d0);\n+    let h1 = mk_test_hash(\"foo\", d1);\n+\n+    assert_ne!(h0.stable_crate_id(), h1.stable_crate_id());\n+    assert_ne!(h0.local_hash(), h1.local_hash());\n+\n+    fn mk_test_hash(crate_name: &str, crate_disambiguator: CrateDisambiguator) -> DefPathHash {\n+        let stable_crate_id = StableCrateId::new(crate_name, crate_disambiguator);\n+        let parent_hash = DefPathHash::new(stable_crate_id, 0);\n+\n+        let key = DefKey {\n+            parent: None,\n+            disambiguated_data: DisambiguatedDefPathData {\n+                data: DefPathData::CrateRoot,\n+                disambiguator: 0,\n+            },\n+        };\n+\n+        key.compute_stable_hash(parent_hash)\n+    }\n+}"}, {"sha": "b5506acf73522994001b95b828c8177924028747", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -6,11 +6,11 @@ use crate::rmeta::{CrateDep, CrateMetadata, CrateNumMap, CrateRoot, MetadataBlob\n \n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_ast::{self as ast, *};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n use rustc_expand::base::SyntaxExtension;\n-use rustc_hir::def_id::{CrateNum, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::cstore::{CrateDepKind, CrateSource, ExternCrate};\n@@ -42,6 +42,10 @@ pub struct CStore {\n     allocator_kind: Option<AllocatorKind>,\n     /// This crate has a `#[global_allocator]` item.\n     has_global_allocator: bool,\n+\n+    /// This map is used to verify we get no hash conflicts between\n+    /// `StableCrateId` values.\n+    stable_crate_ids: FxHashMap<StableCrateId, CrateNum>,\n }\n \n pub struct CrateLoader<'a> {\n@@ -194,6 +198,11 @@ impl<'a> CrateLoader<'a> {\n         metadata_loader: &'a MetadataLoaderDyn,\n         local_crate_name: &str,\n     ) -> Self {\n+        let local_crate_stable_id =\n+            StableCrateId::new(local_crate_name, sess.local_crate_disambiguator());\n+        let mut stable_crate_ids = FxHashMap::default();\n+        stable_crate_ids.insert(local_crate_stable_id, LOCAL_CRATE);\n+\n         CrateLoader {\n             sess,\n             metadata_loader,\n@@ -207,6 +216,7 @@ impl<'a> CrateLoader<'a> {\n                 injected_panic_runtime: None,\n                 allocator_kind: None,\n                 has_global_allocator: false,\n+                stable_crate_ids,\n             },\n             used_extern_options: Default::default(),\n         }\n@@ -313,6 +323,20 @@ impl<'a> CrateLoader<'a> {\n         res\n     }\n \n+    fn verify_no_stable_crate_id_hash_conflicts(\n+        &mut self,\n+        root: &CrateRoot<'_>,\n+        cnum: CrateNum,\n+    ) -> Result<(), CrateError> {\n+        if let Some(existing) = self.cstore.stable_crate_ids.insert(root.stable_crate_id(), cnum) {\n+            let crate_name0 = root.name();\n+            let crate_name1 = self.cstore.get_crate_data(existing).name();\n+            return Err(CrateError::StableCrateIdCollision(crate_name0, crate_name1));\n+        }\n+\n+        Ok(())\n+    }\n+\n     fn register_crate(\n         &mut self,\n         host_lib: Option<Library>,\n@@ -334,6 +358,8 @@ impl<'a> CrateLoader<'a> {\n         // Claim this crate number and cache it\n         let cnum = self.cstore.alloc_new_crate_num();\n \n+        self.verify_no_stable_crate_id_hash_conflicts(&crate_root, cnum)?;\n+\n         info!(\n             \"register crate `{}` (cnum = {}. private_dep = {})\",\n             crate_root.name(),"}, {"sha": "a9f58b08f589998245afc46b6f6b5e96818d4a92", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -888,6 +888,7 @@ crate enum CrateError {\n     MultipleMatchingCrates(Symbol, FxHashMap<Svh, Library>),\n     SymbolConflictsCurrent(Symbol),\n     SymbolConflictsOthers(Symbol),\n+    StableCrateIdCollision(Symbol, Symbol),\n     DlOpen(String),\n     DlSym(String),\n     LocatorCombined(CombinedLocatorError),\n@@ -970,6 +971,13 @@ impl CrateError {\n                  `-C metadata`. This will result in symbol conflicts between the two.\",\n                 root_name,\n             ),\n+            CrateError::StableCrateIdCollision(crate_name0, crate_name1) => {\n+                let msg = format!(\n+                    \"found crates (`{}` and `{}`) with colliding StableCrateId values.\",\n+                    crate_name0, crate_name1\n+                );\n+                sess.struct_span_err(span, &msg)\n+            }\n             CrateError::DlOpen(s) | CrateError::DlSym(s) => sess.struct_span_err(span, &s),\n             CrateError::LocatorCombined(locator) => {\n                 let crate_name = locator.crate_name;"}, {"sha": "e9b8388c1c915e3dde9879af1a0495e8e94df95a", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -635,6 +635,10 @@ impl CrateRoot<'_> {\n         self.hash\n     }\n \n+    crate fn stable_crate_id(&self) -> StableCrateId {\n+        self.stable_crate_id\n+    }\n+\n     crate fn triple(&self) -> &TargetTriple {\n         &self.triple\n     }"}, {"sha": "9336add96929c236682647fc8d71362aa2bdfa80", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -653,6 +653,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             triple: tcx.sess.opts.target_triple.clone(),\n             hash: tcx.crate_hash(LOCAL_CRATE),\n             disambiguator: tcx.sess.local_crate_disambiguator(),\n+            stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),\n             panic_strategy: tcx.sess.panic_strategy(),\n             edition: tcx.sess.edition(),\n             has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),"}, {"sha": "610528956d0a18ba12d7ccaf736f410dc6ee90f2", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n-use rustc_hir::def_id::{DefId, DefIndex, DefPathHash};\n+use rustc_hir::def_id::{DefId, DefIndex, DefPathHash, StableCrateId};\n use rustc_hir::definitions::DefKey;\n use rustc_hir::lang_items;\n use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n@@ -203,6 +203,7 @@ crate struct CrateRoot<'tcx> {\n     extra_filename: String,\n     hash: Svh,\n     disambiguator: CrateDisambiguator,\n+    stable_crate_id: StableCrateId,\n     panic_strategy: PanicStrategy,\n     edition: Edition,\n     has_global_allocator: bool,"}, {"sha": "4f6111183607c3a483af0d20d4124dd89b8f3aab", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -8,7 +8,6 @@ use crate::parse::ParseSess;\n use crate::search_paths::{PathKind, SearchPath};\n \n pub use rustc_ast::attr::MarkedAttrs;\n-pub use rustc_ast::crate_disambiguator::CrateDisambiguator;\n pub use rustc_ast::Attribute;\n use rustc_data_structures::flock;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -23,6 +22,7 @@ use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_lint_defs::FutureBreakage;\n+pub use rustc_span::crate_disambiguator::CrateDisambiguator;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n use rustc_span::{sym, SourceFileHashAlgorithm, Symbol};"}, {"sha": "bd7d85167140dfe4e28a712edf85a4d17dfbf8dc", "filename": "compiler/rustc_span/src/crate_disambiguator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_span%2Fsrc%2Fcrate_disambiguator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_span%2Fsrc%2Fcrate_disambiguator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fcrate_disambiguator.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "previous_filename": "compiler/rustc_ast/src/crate_disambiguator.rs"}, {"sha": "885f30ebb4e6390f122c6bc90302a12733a27bd5", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -1,3 +1,4 @@\n+use crate::crate_disambiguator::CrateDisambiguator;\n use crate::HashStableContext;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -105,17 +106,103 @@ impl ::std::fmt::Debug for CrateNum {\n     }\n }\n \n+/// A `DefPathHash` is a fixed-size representation of a `DefPath` that is\n+/// stable across crate and compilation session boundaries. It consists of two\n+/// separate 64-bit hashes. The first uniquely identifies the crate this\n+/// `DefPathHash` originates from (see [StableCrateId]), and the second\n+/// uniquely identifies the corresponding `DefPath` within that crate. Together\n+/// they form a unique identifier within an entire crate graph.\n+///\n+/// There is a very small chance of hash collisions, which would mean that two\n+/// different `DefPath`s map to the same `DefPathHash`. Proceeding compilation\n+/// with such a hash collision would very probably lead to an ICE, and in the\n+/// worst case lead to a silent mis-compilation. The compiler therefore actively\n+/// and exhaustively checks for such hash collisions and aborts compilation if\n+/// it finds one.\n+///\n+/// `DefPathHash` uses 64-bit hashes for both the crate-id part and the\n+/// crate-internal part, even though it is likely that there are many more\n+/// `LocalDefId`s in a single crate than there are individual crates in a crate\n+/// graph. Since we use the same number of bits in both cases, the collision\n+/// probability for the crate-local part will be quite a bit higher (though\n+/// still very small).\n+///\n+/// This imbalance is not by accident: A hash collision in the\n+/// crate-local part of a `DefPathHash` will be detected and reported while\n+/// compiling the crate in question. Such a collision does not depend on\n+/// outside factors and can be easily fixed by the crate maintainer (e.g. by\n+/// renaming the item in question or by bumping the crate version in a harmless\n+/// way).\n+///\n+/// A collision between crate-id hashes on the other hand is harder to fix\n+/// because it depends on the set of crates in the entire crate graph of a\n+/// compilation session. Again, using the same crate with a different version\n+/// number would fix the issue with a high probability -- but that might be\n+/// easier said then done if the crates in questions are dependencies of\n+/// third-party crates.\n+///\n+/// That being said, given a high quality hash function, the collision\n+/// probabilities in question are very small. For example, for a big crate like\n+/// `rustc_middle` (with ~50000 `LocalDefId`s as of the time of writing) there\n+/// is a probability of roughly 1 in 14,750,000,000 of a crate-internal\n+/// collision occurring. For a big crate graph with 1000 crates in it, there is\n+/// a probability of 1 in 36,890,000,000,000 of a `StableCrateId` collision.\n #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug)]\n #[derive(HashStable_Generic, Encodable, Decodable)]\n pub struct DefPathHash(pub Fingerprint);\n \n+impl DefPathHash {\n+    /// Returns the [StableCrateId] identifying the crate this [DefPathHash]\n+    /// originates from.\n+    #[inline]\n+    pub fn stable_crate_id(&self) -> StableCrateId {\n+        StableCrateId(self.0.as_value().0)\n+    }\n+\n+    /// Returns the crate-local part of the [DefPathHash].\n+    #[inline]\n+    pub fn local_hash(&self) -> u64 {\n+        self.0.as_value().1\n+    }\n+\n+    /// Builds a new [DefPathHash] with the given [StableCrateId] and\n+    /// `local_hash`, where `local_hash` must be unique within its crate.\n+    pub fn new(stable_crate_id: StableCrateId, local_hash: u64) -> DefPathHash {\n+        DefPathHash(Fingerprint::new(stable_crate_id.0, local_hash))\n+    }\n+}\n+\n impl Borrow<Fingerprint> for DefPathHash {\n     #[inline]\n     fn borrow(&self) -> &Fingerprint {\n         &self.0\n     }\n }\n \n+/// A [StableCrateId] is a 64 bit hash of `(crate-name, crate-disambiguator)`. It\n+/// is to [CrateNum] what [DefPathHash] is to [DefId]. It is stable across\n+/// compilation sessions.\n+///\n+/// Since the ID is a hash value there is a (very small) chance that two crates\n+/// end up with the same [StableCrateId]. The compiler will check for such\n+/// collisions when loading crates and abort compilation in order to avoid\n+/// further trouble.\n+#[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug, Encodable, Decodable)]\n+pub struct StableCrateId(u64);\n+\n+impl StableCrateId {\n+    /// Computes the stable ID for a crate with the given name and\n+    /// disambiguator.\n+    pub fn new(crate_name: &str, crate_disambiguator: CrateDisambiguator) -> StableCrateId {\n+        use std::hash::Hash;\n+\n+        let mut hasher = StableHasher::new();\n+        crate_name.hash(&mut hasher);\n+        crate_disambiguator.hash(&mut hasher);\n+        StableCrateId(hasher.finish())\n+    }\n+}\n+\n rustc_index::newtype_index! {\n     /// A DefIndex is an index into the hir-map for a crate, identifying a\n     /// particular definition. It should really be considered an interned"}, {"sha": "fb6c0873d77e96ecf33d9025ba4ff20c227a503f", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -47,6 +47,8 @@ pub mod lev_distance;\n mod span_encoding;\n pub use span_encoding::{Span, DUMMY_SP};\n \n+pub mod crate_disambiguator;\n+\n pub mod symbol;\n pub use symbol::{sym, Symbol};\n "}, {"sha": "723c4a7a1fbf0672233b6d440ce2b21d3418fe9c", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -1,26 +1,26 @@\n-error: lifetime parameter `'a` only used once\n-  --> $DIR/one-use-in-fn-argument-in-band.rs:11:10\n+error: lifetime parameter `'b` only used once\n+  --> $DIR/one-use-in-fn-argument-in-band.rs:11:22\n    |\n LL | fn a(x: &'a u32, y: &'b u32) {\n-   |          ^^-\n-   |          |\n-   |          this lifetime is only used here\n-   |          help: elide the single-use lifetime\n+   |                      ^^-\n+   |                      |\n+   |                      this lifetime is only used here\n+   |                      help: elide the single-use lifetime\n    |\n note: the lint level is defined here\n   --> $DIR/one-use-in-fn-argument-in-band.rs:4:9\n    |\n LL | #![deny(single_use_lifetimes)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: lifetime parameter `'b` only used once\n-  --> $DIR/one-use-in-fn-argument-in-band.rs:11:22\n+error: lifetime parameter `'a` only used once\n+  --> $DIR/one-use-in-fn-argument-in-band.rs:11:10\n    |\n LL | fn a(x: &'a u32, y: &'b u32) {\n-   |                      ^^-\n-   |                      |\n-   |                      this lifetime is only used here\n-   |                      help: elide the single-use lifetime\n+   |          ^^-\n+   |          |\n+   |          this lifetime is only used here\n+   |          help: elide the single-use lifetime\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7155d88be96324cfeeda0b4ba09ce62a5757c0c9", "filename": "src/test/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5basic4main17h4272b3de5e868f5aE)\n+error: symbol-name(_ZN5basic4main17hfcf1daab33c43a6aE)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic::main::h4272b3de5e868f5a)\n+error: demangling(basic::main::hfcf1daab33c43a6a)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "bd107c10207078d8b8b39559267a962648f066bd", "filename": "src/test/ui/symbol-names/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -9,8 +9,8 @@\n //[legacy]~^ ERROR symbol-name(_ZN5basic4main\n //[legacy]~| ERROR demangling(basic::main\n //[legacy]~| ERROR demangling-alt(basic::main)\n- //[v0]~^^^^ ERROR symbol-name(_RNvCs4fqI2P2rA04_5basic4main)\n-    //[v0]~| ERROR demangling(basic[317d481089b8c8fe]::main)\n+ //[v0]~^^^^ ERROR symbol-name(_RNvCs21hi0yVfW1J_5basic4main)\n+    //[v0]~| ERROR demangling(basic[17891616a171812d]::main)\n     //[v0]~| ERROR demangling-alt(basic::main)\n #[rustc_def_path]\n //[legacy]~^ ERROR def-path(main)"}, {"sha": "519efc9d7b4b9725a9016ab8461b3465bc841f60", "filename": "src/test/ui/symbol-names/basic.v0.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_RNvCs4fqI2P2rA04_5basic4main)\n+error: symbol-name(_RNvCs21hi0yVfW1J_5basic4main)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic[317d481089b8c8fe]::main)\n+error: demangling(basic[17891616a171812d]::main)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "bd7e1c0f336983d4aba2b65a50fb974be5889bf0", "filename": "src/test/ui/symbol-names/const-generics-demangling.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -5,32 +5,32 @@\n pub struct Unsigned<const F: u8>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMCs4fqI2P2rA04_25const_generics_demanglingINtB0_8UnsignedKhb_E)\n-//~| ERROR demangling(<const_generics_demangling[317d481089b8c8fe]::Unsigned<11: u8>>)\n+//~^ ERROR symbol-name(_RMCs21hi0yVfW1J_25const_generics_demanglingINtB0_8UnsignedKhb_E)\n+//~| ERROR demangling(<const_generics_demangling[17891616a171812d]::Unsigned<11: u8>>)\n //~| ERROR demangling-alt(<const_generics_demangling::Unsigned<11>>)\n impl Unsigned<11> {}\n \n pub struct Signed<const F: i16>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs_Cs4fqI2P2rA04_25const_generics_demanglingINtB2_6SignedKsn98_E)\n-//~| ERROR demangling(<const_generics_demangling[317d481089b8c8fe]::Signed<-152: i16>>)\n+//~^ ERROR symbol-name(_RMs_Cs21hi0yVfW1J_25const_generics_demanglingINtB2_6SignedKsn98_E)\n+//~| ERROR demangling(<const_generics_demangling[17891616a171812d]::Signed<-152: i16>>)\n //~| ERROR demangling-alt(<const_generics_demangling::Signed<-152>>)\n impl Signed<-152> {}\n \n pub struct Bool<const F: bool>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs0_Cs4fqI2P2rA04_25const_generics_demanglingINtB3_4BoolKb1_E)\n-//~| ERROR demangling(<const_generics_demangling[317d481089b8c8fe]::Bool<true: bool>>)\n+//~^ ERROR symbol-name(_RMs0_Cs21hi0yVfW1J_25const_generics_demanglingINtB3_4BoolKb1_E)\n+//~| ERROR demangling(<const_generics_demangling[17891616a171812d]::Bool<true: bool>>)\n //~| ERROR demangling-alt(<const_generics_demangling::Bool<true>>)\n impl Bool<true> {}\n \n pub struct Char<const F: char>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs1_Cs4fqI2P2rA04_25const_generics_demanglingINtB3_4CharKc2202_E)\n-//~| ERROR demangling(<const_generics_demangling[317d481089b8c8fe]::Char<'\u2202': char>>)\n+//~^ ERROR symbol-name(_RMs1_Cs21hi0yVfW1J_25const_generics_demanglingINtB3_4CharKc2202_E)\n+//~| ERROR demangling(<const_generics_demangling[17891616a171812d]::Char<'\u2202': char>>)\n //~| ERROR demangling-alt(<const_generics_demangling::Char<'\u2202'>>)\n impl Char<'\u2202'> {}\n "}, {"sha": "13995403f7791ee4a1d2371a3f75f360e1fc608b", "filename": "src/test/ui/symbol-names/const-generics-demangling.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_RMCs4fqI2P2rA04_25const_generics_demanglingINtB0_8UnsignedKhb_E)\n+error: symbol-name(_RMCs21hi0yVfW1J_25const_generics_demanglingINtB0_8UnsignedKhb_E)\n   --> $DIR/const-generics-demangling.rs:7:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<const_generics_demangling[317d481089b8c8fe]::Unsigned<11: u8>>)\n+error: demangling(<const_generics_demangling[17891616a171812d]::Unsigned<11: u8>>)\n   --> $DIR/const-generics-demangling.rs:7:1\n    |\n LL | #[rustc_symbol_name]\n@@ -16,13 +16,13 @@ error: demangling-alt(<const_generics_demangling::Unsigned<11>>)\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs_Cs4fqI2P2rA04_25const_generics_demanglingINtB2_6SignedKsn98_E)\n+error: symbol-name(_RMs_Cs21hi0yVfW1J_25const_generics_demanglingINtB2_6SignedKsn98_E)\n   --> $DIR/const-generics-demangling.rs:15:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<const_generics_demangling[317d481089b8c8fe]::Signed<-152: i16>>)\n+error: demangling(<const_generics_demangling[17891616a171812d]::Signed<-152: i16>>)\n   --> $DIR/const-generics-demangling.rs:15:1\n    |\n LL | #[rustc_symbol_name]\n@@ -34,13 +34,13 @@ error: demangling-alt(<const_generics_demangling::Signed<-152>>)\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs0_Cs4fqI2P2rA04_25const_generics_demanglingINtB3_4BoolKb1_E)\n+error: symbol-name(_RMs0_Cs21hi0yVfW1J_25const_generics_demanglingINtB3_4BoolKb1_E)\n   --> $DIR/const-generics-demangling.rs:23:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<const_generics_demangling[317d481089b8c8fe]::Bool<true: bool>>)\n+error: demangling(<const_generics_demangling[17891616a171812d]::Bool<true: bool>>)\n   --> $DIR/const-generics-demangling.rs:23:1\n    |\n LL | #[rustc_symbol_name]\n@@ -52,13 +52,13 @@ error: demangling-alt(<const_generics_demangling::Bool<true>>)\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs1_Cs4fqI2P2rA04_25const_generics_demanglingINtB3_4CharKc2202_E)\n+error: symbol-name(_RMs1_Cs21hi0yVfW1J_25const_generics_demanglingINtB3_4CharKc2202_E)\n   --> $DIR/const-generics-demangling.rs:31:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<const_generics_demangling[317d481089b8c8fe]::Char<'\u2202': char>>)\n+error: demangling(<const_generics_demangling[17891616a171812d]::Char<'\u2202': char>>)\n   --> $DIR/const-generics-demangling.rs:31:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "bd32a39a65cb06a50a179b74630dc1bc76253443", "filename": "src/test/ui/symbol-names/impl1.legacy.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -1,71 +1,71 @@\n-error: symbol-name(_ZN5impl13foo3Foo3bar17ha318160f105e638cE)\n-  --> $DIR/impl1.rs:16:9\n+error: symbol-name(_ZN5impl13foo3Foo3bar17<SYMBOL_HASH>)\n+  --> $DIR/impl1.rs:15:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(impl1::foo::Foo::bar::ha318160f105e638c)\n-  --> $DIR/impl1.rs:16:9\n+error: demangling(impl1::foo::Foo::bar::<SYMBOL_HASH>)\n+  --> $DIR/impl1.rs:15:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(impl1::foo::Foo::bar)\n-  --> $DIR/impl1.rs:16:9\n+  --> $DIR/impl1.rs:15:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(foo::Foo::bar)\n-  --> $DIR/impl1.rs:23:9\n+  --> $DIR/impl1.rs:22:9\n    |\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h6c2dbab6e66f9fa3E)\n-  --> $DIR/impl1.rs:34:9\n+error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17<SYMBOL_HASH>)\n+  --> $DIR/impl1.rs:33:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(impl1::bar::<impl impl1::foo::Foo>::baz::h6c2dbab6e66f9fa3)\n-  --> $DIR/impl1.rs:34:9\n+error: demangling(impl1::bar::<impl impl1::foo::Foo>::baz::<SYMBOL_HASH>)\n+  --> $DIR/impl1.rs:33:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(impl1::bar::<impl impl1::foo::Foo>::baz)\n-  --> $DIR/impl1.rs:34:9\n+  --> $DIR/impl1.rs:33:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(bar::<impl foo::Foo>::baz)\n-  --> $DIR/impl1.rs:41:9\n+  --> $DIR/impl1.rs:40:9\n    |\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$3$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17SYMBOL_HASHE)\n-  --> $DIR/impl1.rs:64:13\n+error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$3$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17<SYMBOL_HASH>)\n+  --> $DIR/impl1.rs:63:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method::SYMBOL_HASH)\n-  --> $DIR/impl1.rs:64:13\n+error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method::<SYMBOL_HASH>)\n+  --> $DIR/impl1.rs:63:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method)\n-  --> $DIR/impl1.rs:64:13\n+  --> $DIR/impl1.rs:63:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)\n-  --> $DIR/impl1.rs:71:13\n+  --> $DIR/impl1.rs:70:13\n    |\n LL |             #[rustc_def_path]\n    |             ^^^^^^^^^^^^^^^^^"}, {"sha": "771695330d8bd92851a289e95b4618ae91f147aa", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -3,8 +3,7 @@\n // revisions: legacy v0\n //[legacy]compile-flags: -Z symbol-mangling-version=legacy\n     //[v0]compile-flags: -Z symbol-mangling-version=v0\n-//[legacy]normalize-stderr-32bit: \"hee444285569b39c2\" -> \"SYMBOL_HASH\"\n-//[legacy]normalize-stderr-64bit: \"h310ea0259fc3d32d\" -> \"SYMBOL_HASH\"\n+//[legacy]normalize-stderr-test: \"h[\\w]{16}E?\\)\" -> \"<SYMBOL_HASH>)\"\n \n #![feature(auto_traits, rustc_attrs)]\n #![allow(dead_code)]\n@@ -17,8 +16,8 @@ mod foo {\n         //[legacy]~^ ERROR symbol-name(_ZN5impl13foo3Foo3bar\n         //[legacy]~| ERROR demangling(impl1::foo::Foo::bar\n         //[legacy]~| ERROR demangling-alt(impl1::foo::Foo::bar)\n-         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs4fqI2P2rA04_5impl13fooNtB2_3Foo3bar)\n-            //[v0]~| ERROR demangling(<impl1[317d481089b8c8fe]::foo::Foo>::bar)\n+         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs21hi0yVfW1J_5impl13fooNtB2_3Foo3bar)\n+            //[v0]~| ERROR demangling(<impl1[17891616a171812d]::foo::Foo>::bar)\n             //[v0]~| ERROR demangling-alt(<impl1::foo::Foo>::bar)\n         #[rustc_def_path]\n         //[legacy]~^ ERROR def-path(foo::Foo::bar)\n@@ -35,8 +34,8 @@ mod bar {\n         //[legacy]~^ ERROR symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz\n         //[legacy]~| ERROR demangling(impl1::bar::<impl impl1::foo::Foo>::baz\n         //[legacy]~| ERROR demangling-alt(impl1::bar::<impl impl1::foo::Foo>::baz)\n-         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs4fqI2P2rA04_5impl13barNtNtB4_3foo3Foo3baz)\n-            //[v0]~| ERROR demangling(<impl1[317d481089b8c8fe]::foo::Foo>::baz)\n+         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs21hi0yVfW1J_5impl13barNtNtB4_3foo3Foo3baz)\n+            //[v0]~| ERROR demangling(<impl1[17891616a171812d]::foo::Foo>::baz)\n             //[v0]~| ERROR demangling-alt(<impl1::foo::Foo>::baz)\n         #[rustc_def_path]\n         //[legacy]~^ ERROR def-path(bar::<impl foo::Foo>::baz)\n@@ -65,8 +64,8 @@ fn main() {\n             //[legacy]~^ ERROR symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$3$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method\n             //[legacy]~| ERROR demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method\n             //[legacy]~| ERROR demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method)\n-             //[v0]~^^^^ ERROR symbol-name(_RNvXNCNvCs4fqI2P2rA04_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n-                //[v0]~| ERROR demangling(<[&dyn impl1[317d481089b8c8fe]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[317d481089b8c8fe]::AutoTrait; 3: usize] as impl1[317d481089b8c8fe]::main::{closure#1}::Bar>::method)\n+             //[v0]~^^^^ ERROR symbol-name(_RNvXNCNvCs21hi0yVfW1J_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n+                //[v0]~| ERROR demangling(<[&dyn impl1[17891616a171812d]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[17891616a171812d]::AutoTrait; 3: usize] as impl1[17891616a171812d]::main::{closure#1}::Bar>::method)\n                 //[v0]~| ERROR demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n             #[rustc_def_path]\n             //[legacy]~^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)"}, {"sha": "3a6610935d6e3dcc8fa303912df4e09c8fab9bd5", "filename": "src/test/ui/symbol-names/impl1.v0.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -1,71 +1,71 @@\n-error: symbol-name(_RNvMNtCs4fqI2P2rA04_5impl13fooNtB2_3Foo3bar)\n-  --> $DIR/impl1.rs:16:9\n+error: symbol-name(_RNvMNtCs21hi0yVfW1J_5impl13fooNtB2_3Foo3bar)\n+  --> $DIR/impl1.rs:15:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<impl1[317d481089b8c8fe]::foo::Foo>::bar)\n-  --> $DIR/impl1.rs:16:9\n+error: demangling(<impl1[17891616a171812d]::foo::Foo>::bar)\n+  --> $DIR/impl1.rs:15:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<impl1::foo::Foo>::bar)\n-  --> $DIR/impl1.rs:16:9\n+  --> $DIR/impl1.rs:15:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(foo::Foo::bar)\n-  --> $DIR/impl1.rs:23:9\n+  --> $DIR/impl1.rs:22:9\n    |\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RNvMNtCs4fqI2P2rA04_5impl13barNtNtB4_3foo3Foo3baz)\n-  --> $DIR/impl1.rs:34:9\n+error: symbol-name(_RNvMNtCs21hi0yVfW1J_5impl13barNtNtB4_3foo3Foo3baz)\n+  --> $DIR/impl1.rs:33:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<impl1[317d481089b8c8fe]::foo::Foo>::baz)\n-  --> $DIR/impl1.rs:34:9\n+error: demangling(<impl1[17891616a171812d]::foo::Foo>::baz)\n+  --> $DIR/impl1.rs:33:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<impl1::foo::Foo>::baz)\n-  --> $DIR/impl1.rs:34:9\n+  --> $DIR/impl1.rs:33:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(bar::<impl foo::Foo>::baz)\n-  --> $DIR/impl1.rs:41:9\n+  --> $DIR/impl1.rs:40:9\n    |\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RNvXNCNvCs4fqI2P2rA04_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n-  --> $DIR/impl1.rs:64:13\n+error: symbol-name(_RNvXNCNvCs21hi0yVfW1J_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n+  --> $DIR/impl1.rs:63:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1[317d481089b8c8fe]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[317d481089b8c8fe]::AutoTrait; 3: usize] as impl1[317d481089b8c8fe]::main::{closure#1}::Bar>::method)\n-  --> $DIR/impl1.rs:64:13\n+error: demangling(<[&dyn impl1[17891616a171812d]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[17891616a171812d]::AutoTrait; 3: usize] as impl1[17891616a171812d]::main::{closure#1}::Bar>::method)\n+  --> $DIR/impl1.rs:63:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n-  --> $DIR/impl1.rs:64:13\n+  --> $DIR/impl1.rs:63:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)\n-  --> $DIR/impl1.rs:71:13\n+  --> $DIR/impl1.rs:70:13\n    |\n LL |             #[rustc_def_path]\n    |             ^^^^^^^^^^^^^^^^^"}, {"sha": "9575875f5a8ac31280a5fa57313da82040140940", "filename": "src/test/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h79d9aaa05f4b26d6E)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17hb8ca3eb2682b1b51E)\n   --> $DIR/issue-60925.rs:22:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h79d9aaa05f4b26d6)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::hb8ca3eb2682b1b51)\n   --> $DIR/issue-60925.rs:22:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "47c9230c0edfb633c3a8aa21eca4e63ee0f40a93", "filename": "src/test/ui/symbol-names/issue-60925.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -23,8 +23,8 @@ mod foo {\n         //[legacy]~^ ERROR symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo\n         //[legacy]~| ERROR demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo\n         //[legacy]~| ERROR demangling-alt(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo)\n-         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs4fqI2P2rA04_11issue_609253fooINtB2_3FooNtNtB4_4llvm3FooE3foo)\n-            //[v0]~| ERROR demangling(<issue_60925[317d481089b8c8fe]::foo::Foo<issue_60925[317d481089b8c8fe]::llvm::Foo>>::foo)\n+         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs21hi0yVfW1J_11issue_609253fooINtB2_3FooNtNtB4_4llvm3FooE3foo)\n+            //[v0]~| ERROR demangling(<issue_60925[17891616a171812d]::foo::Foo<issue_60925[17891616a171812d]::llvm::Foo>>::foo)\n             //[v0]~| ERROR demangling-alt(<issue_60925::foo::Foo<issue_60925::llvm::Foo>>::foo)\n         pub(crate) fn foo() {\n             for _ in 0..0 {"}, {"sha": "aed60a58af91293414a75ffe11910dd137f2d3b4", "filename": "src/test/ui/symbol-names/issue-60925.v0.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_RNvMNtCs4fqI2P2rA04_11issue_609253fooINtB2_3FooNtNtB4_4llvm3FooE3foo)\n+error: symbol-name(_RNvMNtCs21hi0yVfW1J_11issue_609253fooINtB2_3FooNtNtB4_4llvm3FooE3foo)\n   --> $DIR/issue-60925.rs:22:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<issue_60925[317d481089b8c8fe]::foo::Foo<issue_60925[317d481089b8c8fe]::llvm::Foo>>::foo)\n+error: demangling(<issue_60925[17891616a171812d]::foo::Foo<issue_60925[17891616a171812d]::llvm::Foo>>::foo)\n   --> $DIR/issue-60925.rs:22:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "2ad16bdb81663bd1d77b355ac30112cb397893a6", "filename": "src/test/ui/symbol-names/issue-75326.legacy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.legacy.stderr?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -1,17 +1,17 @@\n error: symbol-name(_ZN72_$LT$issue_75326..Foo$LT$I$C$E$GT$$u20$as$u20$issue_75326..Iterator2$GT$4next17SYMBOL_HASH)\n-  --> $DIR/issue-75326.rs:43:5\n+  --> $DIR/issue-75326.rs:42:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next::SYMBOL_HASH)\n-  --> $DIR/issue-75326.rs:43:5\n+  --> $DIR/issue-75326.rs:42:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next)\n-  --> $DIR/issue-75326.rs:43:5\n+  --> $DIR/issue-75326.rs:42:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "faf36715b190a22d65950373a5a409678533714a", "filename": "src/test/ui/symbol-names/issue-75326.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -3,8 +3,7 @@\n // revisions: legacy v0\n //[legacy]compile-flags: -Z symbol-mangling-version=legacy\n //[v0]compile-flags: -Z symbol-mangling-version=v0\n-//[legacy]normalize-stderr-32bit: \"h[\\d\\w]+\" -> \"SYMBOL_HASH\"\n-//[legacy]normalize-stderr-64bit: \"h[\\d\\w]+\" -> \"SYMBOL_HASH\"\n+//[legacy]normalize-stderr-test: \"h[\\w{16}]+\" -> \"SYMBOL_HASH\"\n \n #![feature(rustc_attrs)]\n \n@@ -44,8 +43,8 @@ where\n     //[legacy]~^ ERROR symbol-name(_ZN72_$LT$issue_75326..Foo$LT$I$C$E$GT$$u20$as$u20$issue_75326..Iterator2$GT$4next\n     //[legacy]~| ERROR demangling(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next\n     //[legacy]~| ERROR demangling-alt(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next)\n-    //[v0]~^^^^  ERROR symbol-name(_RNvXINICs4fqI2P2rA04_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n-    //[v0]~|     ERROR demangling(<issue_75326[317d481089b8c8fe]::Foo<_, _> as issue_75326[317d481089b8c8fe]::Iterator2>::next)\n+    //[v0]~^^^^  ERROR symbol-name(_RNvXINICs21hi0yVfW1J_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n+    //[v0]~|     ERROR demangling(<issue_75326[17891616a171812d]::Foo<_, _> as issue_75326[17891616a171812d]::Iterator2>::next)\n     //[v0]~|     ERROR demangling-alt(<issue_75326::Foo<_, _> as issue_75326::Iterator2>::next)\n     fn next(&mut self) -> Option<Self::Item> {\n         self.find(|_| true)"}, {"sha": "1f57952acd6432c844e65301884223dd28ebcb72", "filename": "src/test/ui/symbol-names/issue-75326.v0.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c500ec6c36fa8287317d6dc342a64c079301de/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr?ref=76c500ec6c36fa8287317d6dc342a64c079301de", "patch": "@@ -1,17 +1,17 @@\n-error: symbol-name(_RNvXINICs4fqI2P2rA04_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n-  --> $DIR/issue-75326.rs:43:5\n+error: symbol-name(_RNvXINICs21hi0yVfW1J_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n+  --> $DIR/issue-75326.rs:42:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<issue_75326[317d481089b8c8fe]::Foo<_, _> as issue_75326[317d481089b8c8fe]::Iterator2>::next)\n-  --> $DIR/issue-75326.rs:43:5\n+error: demangling(<issue_75326[17891616a171812d]::Foo<_, _> as issue_75326[17891616a171812d]::Iterator2>::next)\n+  --> $DIR/issue-75326.rs:42:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<issue_75326::Foo<_, _> as issue_75326::Iterator2>::next)\n-  --> $DIR/issue-75326.rs:43:5\n+  --> $DIR/issue-75326.rs:42:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^"}]}