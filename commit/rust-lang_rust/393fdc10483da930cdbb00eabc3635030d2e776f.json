{"sha": "393fdc10483da930cdbb00eabc3635030d2e776f", "node_id": "C_kwDOAAsO6NoAKDM5M2ZkYzEwNDgzZGE5MzBjZGJiMDBlYWJjMzYzNTAzMGQyZTc3NmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-15T23:48:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-15T23:48:43Z"}, "message": "Auto merge of #94021 - tmiasko:inline, r=nagisa\n\nInline a few trivial conversion functions", "tree": {"sha": "06051c3b994dc99715d7f294a525dd1c057d3d1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06051c3b994dc99715d7f294a525dd1c057d3d1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/393fdc10483da930cdbb00eabc3635030d2e776f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/393fdc10483da930cdbb00eabc3635030d2e776f", "html_url": "https://github.com/rust-lang/rust/commit/393fdc10483da930cdbb00eabc3635030d2e776f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/393fdc10483da930cdbb00eabc3635030d2e776f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09cb29c64c2a0e15debf2d6fca2bc7c71a682033", "url": "https://api.github.com/repos/rust-lang/rust/commits/09cb29c64c2a0e15debf2d6fca2bc7c71a682033", "html_url": "https://github.com/rust-lang/rust/commit/09cb29c64c2a0e15debf2d6fca2bc7c71a682033"}, {"sha": "ea7142076194517f84a5b867bd49e62a814a8622", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7142076194517f84a5b867bd49e62a814a8622", "html_url": "https://github.com/rust-lang/rust/commit/ea7142076194517f84a5b867bd49e62a814a8622"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "0864edf44510ad5c227155bb8029d797a4e19eb5", "filename": "compiler/rustc_infer/src/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/393fdc10483da930cdbb00eabc3635030d2e776f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fdc10483da930cdbb00eabc3635030d2e776f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs?ref=393fdc10483da930cdbb00eabc3635030d2e776f", "patch": "@@ -416,6 +416,7 @@ impl<'tcx> ut::UnifyKey for TyVidEqKey<'tcx> {\n     fn index(&self) -> u32 {\n         self.vid.as_u32()\n     }\n+    #[inline]\n     fn from_index(i: u32) -> Self {\n         TyVidEqKey::from(ty::TyVid::from_u32(i))\n     }"}, {"sha": "dd303aaada9005626e49cf330e3fb0e9eab4418c", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/393fdc10483da930cdbb00eabc3635030d2e776f/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fdc10483da930cdbb00eabc3635030d2e776f/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=393fdc10483da930cdbb00eabc3635030d2e776f", "patch": "@@ -32,9 +32,11 @@ impl<'tcx> From<ty::RegionVid> for RegionVidKey<'tcx> {\n \n impl<'tcx> UnifyKey for RegionVidKey<'tcx> {\n     type Value = UnifiedRegion<'tcx>;\n+    #[inline]\n     fn index(&self) -> u32 {\n         self.vid.as_u32()\n     }\n+    #[inline]\n     fn from_index(i: u32) -> Self {\n         RegionVidKey::from(ty::RegionVid::from_u32(i))\n     }\n@@ -118,9 +120,11 @@ pub struct ConstVarValue<'tcx> {\n \n impl<'tcx> UnifyKey for ty::ConstVid<'tcx> {\n     type Value = ConstVarValue<'tcx>;\n+    #[inline]\n     fn index(&self) -> u32 {\n         self.index\n     }\n+    #[inline]\n     fn from_index(i: u32) -> Self {\n         ty::ConstVid { index: i, phantom: PhantomData }\n     }"}, {"sha": "7dccef5e3ef0fa466388620c67057bab11e1eeff", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/393fdc10483da930cdbb00eabc3635030d2e776f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fdc10483da930cdbb00eabc3635030d2e776f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=393fdc10483da930cdbb00eabc3635030d2e776f", "patch": "@@ -48,6 +48,7 @@ pub enum GenericArgKind<'tcx> {\n }\n \n impl<'tcx> GenericArgKind<'tcx> {\n+    #[inline]\n     fn pack(self) -> GenericArg<'tcx> {\n         let (tag, ptr) = match self {\n             GenericArgKind::Lifetime(lt) => {\n@@ -94,18 +95,21 @@ impl<'tcx> PartialOrd for GenericArg<'tcx> {\n }\n \n impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {\n+    #[inline]\n     fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {\n         GenericArgKind::Lifetime(r).pack()\n     }\n }\n \n impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {\n+    #[inline]\n     fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {\n         GenericArgKind::Type(ty).pack()\n     }\n }\n \n impl<'tcx> From<ty::Const<'tcx>> for GenericArg<'tcx> {\n+    #[inline]\n     fn from(c: ty::Const<'tcx>) -> GenericArg<'tcx> {\n         GenericArgKind::Const(c).pack()\n     }"}, {"sha": "237ead591a585913db1f26fdb2b8ccf0c171a10d", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393fdc10483da930cdbb00eabc3635030d2e776f/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fdc10483da930cdbb00eabc3635030d2e776f/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=393fdc10483da930cdbb00eabc3635030d2e776f", "patch": "@@ -222,9 +222,11 @@ impl From<Local> for UnifyLocal {\n \n impl UnifyKey for UnifyLocal {\n     type Value = ();\n+    #[inline]\n     fn index(&self) -> u32 {\n         self.0.as_u32()\n     }\n+    #[inline]\n     fn from_index(u: u32) -> Self {\n         Self(Local::from_u32(u))\n     }"}, {"sha": "8265eb23c3db4a4de89c224116bd34fcca828342", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393fdc10483da930cdbb00eabc3635030d2e776f/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fdc10483da930cdbb00eabc3635030d2e776f/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=393fdc10483da930cdbb00eabc3635030d2e776f", "patch": "@@ -172,10 +172,12 @@ impl LocalExpnId {\n     /// The ID of the theoretical expansion that generates freshly parsed, unexpanded AST.\n     pub const ROOT: LocalExpnId = LocalExpnId::from_u32(0);\n \n+    #[inline]\n     pub fn from_raw(idx: ExpnIndex) -> LocalExpnId {\n         LocalExpnId::from_u32(idx.as_u32())\n     }\n \n+    #[inline]\n     pub fn as_raw(self) -> ExpnIndex {\n         ExpnIndex::from_u32(self.as_u32())\n     }"}, {"sha": "bfafe2d83d7c9677943a17ff9efe71c79491d46d", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393fdc10483da930cdbb00eabc3635030d2e776f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fdc10483da930cdbb00eabc3635030d2e776f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=393fdc10483da930cdbb00eabc3635030d2e776f", "patch": "@@ -1541,11 +1541,13 @@ impl Default for TargetOptions {\n impl Deref for Target {\n     type Target = TargetOptions;\n \n+    #[inline]\n     fn deref(&self) -> &Self::Target {\n         &self.options\n     }\n }\n impl DerefMut for Target {\n+    #[inline]\n     fn deref_mut(&mut self) -> &mut Self::Target {\n         &mut self.options\n     }"}, {"sha": "e26f0033156bcb2e46358bd96e0931c709f228cc", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/393fdc10483da930cdbb00eabc3635030d2e776f/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fdc10483da930cdbb00eabc3635030d2e776f/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=393fdc10483da930cdbb00eabc3635030d2e776f", "patch": "@@ -400,9 +400,11 @@ pub enum InferTy {\n /// they carry no values.\n impl UnifyKey for TyVid {\n     type Value = ();\n+    #[inline]\n     fn index(&self) -> u32 {\n         self.as_u32()\n     }\n+    #[inline]\n     fn from_index(i: u32) -> TyVid {\n         TyVid::from_u32(i)\n     }\n@@ -419,6 +421,7 @@ impl UnifyKey for IntVid {\n     fn index(&self) -> u32 {\n         self.index\n     }\n+    #[inline]\n     fn from_index(i: u32) -> IntVid {\n         IntVid { index: i }\n     }\n@@ -431,9 +434,11 @@ impl EqUnifyValue for FloatVarValue {}\n \n impl UnifyKey for FloatVid {\n     type Value = Option<FloatVarValue>;\n+    #[inline]\n     fn index(&self) -> u32 {\n         self.index\n     }\n+    #[inline]\n     fn from_index(i: u32) -> FloatVid {\n         FloatVid { index: i }\n     }"}]}