{"sha": "ed422b88727807aee40495a6193a69e4c3842be1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNDIyYjg4NzI3ODA3YWVlNDA0OTVhNjE5M2E2OWU0YzM4NDJiZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-30T03:40:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-30T03:40:47Z"}, "message": "auto merge of #8819 : vadimcn/rust/unit-tests, r=brson\n\nSome of the tests are failing.  I've only managed to fix 'memory_map_file', the rest are up for grabs...\r\n\r\nFixes #5261.", "tree": {"sha": "13237ac14c174f24f24989ca98630e7be51b000d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13237ac14c174f24f24989ca98630e7be51b000d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed422b88727807aee40495a6193a69e4c3842be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed422b88727807aee40495a6193a69e4c3842be1", "html_url": "https://github.com/rust-lang/rust/commit/ed422b88727807aee40495a6193a69e4c3842be1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed422b88727807aee40495a6193a69e4c3842be1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c6c7519a75064d11f855de862bcdaddcbe5df4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c6c7519a75064d11f855de862bcdaddcbe5df4b", "html_url": "https://github.com/rust-lang/rust/commit/7c6c7519a75064d11f855de862bcdaddcbe5df4b"}, {"sha": "653825889e596e034cae8ac9afbfdd043fbe6e13", "url": "https://api.github.com/repos/rust-lang/rust/commits/653825889e596e034cae8ac9afbfdd043fbe6e13", "html_url": "https://github.com/rust-lang/rust/commit/653825889e596e034cae8ac9afbfdd043fbe6e13"}], "stats": {"total": 112, "additions": 86, "deletions": 26}, "files": [{"sha": "2e91fc06bcd79c23d8bd825d52b55aeaf444a5de", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed422b88727807aee40495a6193a69e4c3842be1/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ed422b88727807aee40495a6193a69e4c3842be1/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=ed422b88727807aee40495a6193a69e4c3842be1", "patch": "@@ -870,7 +870,8 @@ $(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n    $(eval $(call DEF_CHECK_FAST_FOR_T_H,,$(target),$(host))))))\n \n-check-fast: tidy check-fast-H-$(CFG_BUILD_TRIPLE)\n+check-fast: tidy check-fast-H-$(CFG_BUILD_TRIPLE) check-stage2-std check-stage2-extra\n+\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n \n define DEF_CHECK_FAST_FOR_H\n "}, {"sha": "6757e3020daa83f36edce2dc990b36d7a6c40d15", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=ed422b88727807aee40495a6193a69e4c3842be1", "patch": "@@ -1142,6 +1142,10 @@ mod tests {\n         assert_eq!(infinity.abs_sub(&1f32), infinity);\n         assert_eq!(0f32.abs_sub(&neg_infinity), infinity);\n         assert_eq!(0f32.abs_sub(&infinity), 0f32);\n+    }\n+\n+    #[test] #[ignore(cfg(windows))] // FIXME #8663\n+    fn test_abs_sub_nowin() {\n         assert!(NaN.abs_sub(&-1f32).is_NaN());\n         assert!(1f32.abs_sub(&NaN).is_NaN());\n     }\n@@ -1267,7 +1271,10 @@ mod tests {\n \n         assert_eq!(0f32.frexp(), (0f32, 0));\n         assert_eq!((-0f32).frexp(), (-0f32, 0));\n+    }\n \n+    #[test] #[ignore(cfg(windows))] // FIXME #8755\n+    fn test_frexp_nowin() {\n         let inf: f32 = Float::infinity();\n         let neg_inf: f32 = Float::neg_infinity();\n         let nan: f32 = Float::NaN();"}, {"sha": "59389c285570b950d87b0c809e557027f947da51", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=ed422b88727807aee40495a6193a69e4c3842be1", "patch": "@@ -1192,6 +1192,10 @@ mod tests {\n         assert_eq!(infinity.abs_sub(&1f64), infinity);\n         assert_eq!(0f64.abs_sub(&neg_infinity), infinity);\n         assert_eq!(0f64.abs_sub(&infinity), 0f64);\n+    }\n+\n+    #[test] #[ignore(cfg(windows))] // FIXME #8663\n+    fn test_abs_sub_nowin() {\n         assert!(NaN.abs_sub(&-1f64).is_NaN());\n         assert!(1f64.abs_sub(&NaN).is_NaN());\n     }\n@@ -1316,7 +1320,10 @@ mod tests {\n \n         assert_eq!(0f64.frexp(), (0f64, 0));\n         assert_eq!((-0f64).frexp(), (-0f64, 0));\n+    }\n \n+    #[test] #[ignore(cfg(windows))] // FIXME #8755\n+    fn test_frexp_nowin() {\n         let inf: f64 = Float::infinity();\n         let neg_inf: f64 = Float::neg_infinity();\n         let nan: f64 = Float::NaN();"}, {"sha": "909eac0cb69b1628b15e6fbcc936bffe0a653e75", "filename": "src/libstd/num/float.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat.rs?ref=ed422b88727807aee40495a6193a69e4c3842be1", "patch": "@@ -1163,6 +1163,10 @@ mod tests {\n         assert_eq!(infinity.abs_sub(&1f), infinity);\n         assert_eq!(0f.abs_sub(&neg_infinity), infinity);\n         assert_eq!(0f.abs_sub(&infinity), 0f);\n+    }\n+\n+    #[test] #[ignore(cfg(windows))] // FIXME #8663\n+    fn test_abs_sub_nowin() {\n         assert!(NaN.abs_sub(&-1f).is_NaN());\n         assert!(1f.abs_sub(&NaN).is_NaN());\n     }\n@@ -1288,7 +1292,10 @@ mod tests {\n \n         assert_eq!(0f.frexp(), (0f, 0));\n         assert_eq!((-0f).frexp(), (-0f, 0));\n+    }\n \n+    #[test] #[ignore(cfg(windows))] // FIXME #8755\n+    fn test_frexp_nowin() {\n         let inf: float = Float::infinity();\n         let neg_inf: float = Float::neg_infinity();\n         let nan: float = Float::NaN();"}, {"sha": "07e0b0857a181984ac64220e41eaf2b411e5be91", "filename": "src/libstd/os.rs", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=ed422b88727807aee40495a6193a69e4c3842be1", "patch": "@@ -1418,12 +1418,12 @@ pub fn page_size() -> uint {\n pub fn page_size() -> uint {\n     #[fixed_stack_segment]; #[inline(never)];\n \n-  unsafe {\n-    let mut info = libc::SYSTEM_INFO::new();\n-    libc::GetSystemInfo(&mut info);\n+    unsafe {\n+        let mut info = libc::SYSTEM_INFO::new();\n+        libc::GetSystemInfo(&mut info);\n \n-    return info.dwPageSize as uint;\n-  }\n+        return info.dwPageSize as uint;\n+    }\n }\n \n pub struct MemoryMap {\n@@ -1458,7 +1458,6 @@ pub enum MapError {\n     // Windows-specific errors\n     ErrUnsupProt,\n     ErrUnsupOffset,\n-    ErrNeedRW,\n     ErrAlreadyExists,\n     ErrVirtualAlloc(uint),\n     ErrCreateFileMappingW(uint),\n@@ -1477,7 +1476,6 @@ impl to_str::ToStr for MapError {\n             ErrUnknown(code) => fmt!(\"Unknown error=%?\", code),\n             ErrUnsupProt => ~\"Protection mode unsupported\",\n             ErrUnsupOffset => ~\"Offset in virtual memory mode is unsupported\",\n-            ErrNeedRW => ~\"File mapping should be at least readable/writable\",\n             ErrAlreadyExists => ~\"File mapping for specified file already exists\",\n             ErrVirtualAlloc(code) => fmt!(\"VirtualAlloc failure=%?\", code),\n             ErrCreateFileMappingW(code) => fmt!(\"CreateFileMappingW failure=%?\", code),\n@@ -1542,6 +1540,10 @@ impl MemoryMap {\n             })\n         }\n     }\n+\n+    pub fn granularity() -> uint {\n+        page_size()\n+    }\n }\n \n #[cfg(unix)]\n@@ -1617,21 +1619,21 @@ impl MemoryMap {\n                 })\n             }\n         } else {\n-            let dwDesiredAccess = match (readable, writable) {\n-                (true, true) => libc::FILE_MAP_ALL_ACCESS,\n-                (true, false) => libc::FILE_MAP_READ,\n-                (false, true) => libc::FILE_MAP_WRITE,\n-                _ => {\n-                    return Err(ErrNeedRW);\n-                }\n+            let dwDesiredAccess = match (executable, readable, writable) {\n+                (false, true, false) => libc::FILE_MAP_READ,\n+                (false, true, true) => libc::FILE_MAP_WRITE,\n+                (true, true, false) => libc::FILE_MAP_READ | libc::FILE_MAP_EXECUTE,\n+                (true, true, true) => libc::FILE_MAP_WRITE | libc::FILE_MAP_EXECUTE,\n+                _ => return Err(ErrUnsupProt) // Actually, because of the check above,\n+                                              // we should never get here.\n             };\n             unsafe {\n                 let hFile = libc::get_osfhandle(fd) as HANDLE;\n                 let mapping = libc::CreateFileMappingW(hFile,\n                                                        ptr::mut_null(),\n                                                        flProtect,\n-                                                       (len >> 32) as DWORD,\n-                                                       (len & 0xffff_ffff) as DWORD,\n+                                                       0,\n+                                                       0,\n                                                        ptr::null());\n                 if mapping == ptr::mut_null() {\n                     return Err(ErrCreateFileMappingW(errno()));\n@@ -1641,7 +1643,7 @@ impl MemoryMap {\n                 }\n                 let r = libc::MapViewOfFile(mapping,\n                                             dwDesiredAccess,\n-                                            (offset >> 32) as DWORD,\n+                                            ((len as u64) >> 32) as DWORD,\n                                             (offset & 0xffff_ffff) as DWORD,\n                                             0);\n                 match r as uint {\n@@ -1655,6 +1657,19 @@ impl MemoryMap {\n             }\n         }\n     }\n+\n+    /// Granularity of MapAddr() and MapOffset() parameter values.\n+    /// This may be greater than the value returned by page_size().\n+    pub fn granularity() -> uint {\n+        #[fixed_stack_segment]; #[inline(never)];\n+\n+        unsafe {\n+            let mut info = libc::SYSTEM_INFO::new();\n+            libc::GetSystemInfo(&mut info);\n+\n+            return info.dwAllocationGranularity as uint;\n+        }\n+    }\n }\n \n #[cfg(windows)]\n@@ -1663,20 +1678,22 @@ impl Drop for MemoryMap {\n         #[fixed_stack_segment]; #[inline(never)];\n \n         use libc::types::os::arch::extra::{LPCVOID, HANDLE};\n+        use libc::consts::os::extra::FALSE;\n \n         unsafe {\n             match self.kind {\n-                MapVirtual => match libc::VirtualFree(self.data as *mut c_void,\n-                                                      self.len,\n-                                                      libc::MEM_RELEASE) {\n-                    0 => error!(fmt!(\"VirtualFree failed: %?\", errno())),\n-                    _ => ()\n+                MapVirtual => {\n+                    if libc::VirtualFree(self.data as *mut c_void,\n+                                         self.len,\n+                                         libc::MEM_RELEASE) == FALSE {\n+                        error!(fmt!(\"VirtualFree failed: %?\", errno()));\n+                    }\n                 },\n                 MapFile(mapping) => {\n-                    if libc::UnmapViewOfFile(self.data as LPCVOID) != 0 {\n+                    if libc::UnmapViewOfFile(self.data as LPCVOID) == FALSE {\n                         error!(fmt!(\"UnmapViewOfFile failed: %?\", errno()));\n                     }\n-                    if libc::CloseHandle(mapping as HANDLE) != 0 {\n+                    if libc::CloseHandle(mapping as HANDLE) == FALSE {\n                         error!(fmt!(\"CloseHandle failed: %?\", errno()));\n                     }\n                 }\n@@ -2108,7 +2125,7 @@ mod tests {\n         }\n \n         let path = tmpdir().push(\"mmap_file.tmp\");\n-        let size = page_size() * 2;\n+        let size = MemoryMap::granularity() * 2;\n         remove_file(&path);\n \n         let fd = unsafe {"}, {"sha": "3fb0072040664c52e834a64baa48e5cff237a1ee", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=ed422b88727807aee40495a6193a69e4c3842be1", "patch": "@@ -168,6 +168,7 @@ fn file_test_smoke_test_impl() {\n }\n \n #[test]\n+#[ignore(cfg(windows))] // FIXME #8810\n fn file_test_io_smoke_test() {\n     file_test_smoke_test_impl();\n }\n@@ -235,6 +236,7 @@ fn file_test_io_non_positional_read_impl() {\n }\n \n #[test]\n+#[ignore(cfg(windows))] // FIXME #8810\n fn file_test_io_non_positional_read() {\n     file_test_io_non_positional_read_impl();\n }\n@@ -267,6 +269,7 @@ fn file_test_io_seeking_impl() {\n     }\n }\n #[test]\n+#[ignore(cfg(windows))] // FIXME #8810\n fn file_test_io_seek_and_tell_smoke_test() {\n     file_test_io_seeking_impl();\n }\n@@ -298,6 +301,7 @@ fn file_test_io_seek_and_write_impl() {\n     }\n }\n #[test]\n+#[ignore(cfg(windows))] // FIXME #8810\n fn file_test_io_seek_and_write() {\n     file_test_io_seek_and_write_impl();\n }\n@@ -337,6 +341,7 @@ fn file_test_io_seek_shakedown_impl() {\n     }\n }\n #[test]\n+#[ignore(cfg(windows))] // FIXME #8810\n fn file_test_io_seek_shakedown() {\n     file_test_io_seek_shakedown_impl();\n }"}, {"sha": "ce66cd0de59c2e656281bcea1875126553024d59", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=ed422b88727807aee40495a6193a69e4c3842be1", "patch": "@@ -162,6 +162,7 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME #8811\n     fn connect_error() {\n         do run_in_newsched_task {\n             let mut called = false;\n@@ -258,6 +259,7 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME #8811\n     fn read_eof_twice_ip4() {\n         do run_in_newsched_task {\n             let addr = next_test_ip4();\n@@ -280,6 +282,7 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME #8811\n     fn read_eof_twice_ip6() {\n         do run_in_newsched_task {\n             let addr = next_test_ip6();\n@@ -302,6 +305,7 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME #8811\n     fn write_close_ip4() {\n         do run_in_newsched_task {\n             let addr = next_test_ip4();\n@@ -331,6 +335,7 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME #8811\n     fn write_close_ip6() {\n         do run_in_newsched_task {\n             let addr = next_test_ip6();"}, {"sha": "afbff77f9883226e03e4985eb696c06de631e2a1", "filename": "src/libstd/rt/io/support.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Frt%2Fio%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Frt%2Fio%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fsupport.rs?ref=ed422b88727807aee40495a6193a69e4c3842be1", "patch": "@@ -33,6 +33,7 @@ mod test {\n     use super::PathLike;\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME #8812\n     fn path_like_smoke_test() {\n         let expected = \"/home\";\n         let path = Path(expected);"}, {"sha": "eaf7024244040cca6790a997e4147f435817d7b2", "filename": "src/libstd/rt/uv/file.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Ffile.rs?ref=ed422b88727807aee40495a6193a69e4c3842be1", "patch": "@@ -408,11 +408,13 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME #8814\n     fn file_test_full_simple() {\n         file_test_full_simple_impl();\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME #8814\n     fn file_test_full_simple_sync() {\n         file_test_full_simple_impl_sync();\n     }"}, {"sha": "3ff6e90e32d2998c25fd96fc65136a8a83135a76", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=ed422b88727807aee40495a6193a69e4c3842be1", "patch": "@@ -601,6 +601,7 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME #8815\n     fn listen_ip4() {\n         do run_in_bare_thread() {\n             static MAX: int = 10;\n@@ -675,6 +676,7 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME #8815\n     fn listen_ip6() {\n         do run_in_bare_thread() {\n             static MAX: int = 10;\n@@ -751,6 +753,7 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME #8815\n     fn udp_recv_ip4() {\n         do run_in_bare_thread() {\n             static MAX: int = 10;\n@@ -811,6 +814,7 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME #8815\n     fn udp_recv_ip6() {\n         do run_in_bare_thread() {\n             static MAX: int = 10;"}, {"sha": "f282432dcb5063cfd5c665acda282e6c417c3310", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=ed422b88727807aee40495a6193a69e4c3842be1", "patch": "@@ -1666,6 +1666,7 @@ fn test_read_read_read() {\n }\n \n #[test]\n+#[ignore(cfg(windows))] // FIXME #8816\n fn test_udp_twice() {\n     do run_in_newsched_task {\n         let server_addr = next_test_ip4();\n@@ -1800,6 +1801,7 @@ fn file_test_uvio_full_simple_impl() {\n }\n \n #[test]\n+#[ignore(cfg(windows))] // FIXME #8816\n fn file_test_uvio_full_simple() {\n     do run_in_newsched_task {\n         file_test_uvio_full_simple_impl();"}, {"sha": "d2e3b4176f96150dc443248e10d44bd6ba0e8f33", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=ed422b88727807aee40495a6193a69e4c3842be1", "patch": "@@ -227,6 +227,7 @@ fn handle_sanity_check() {\n }\n \n #[test]\n+#[ignore(cfg(windows))] // FIXME #8817\n #[fixed_stack_segment]\n #[inline(never)]\n fn request_sanity_check() {"}, {"sha": "db106de76d94e4ce5eb97d3097da2a2fdcd378ee", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed422b88727807aee40495a6193a69e4c3842be1/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=ed422b88727807aee40495a6193a69e4c3842be1", "patch": "@@ -90,6 +90,7 @@ mod test {\n     use libc;\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME #8818\n     fn test_loading_cosine() {\n         // The math library does not need to be loaded since it is already\n         // statically linked in"}]}