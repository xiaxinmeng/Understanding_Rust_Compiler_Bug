{"sha": "edb2e571fe62540495bfc864c2aafe103ef44e42", "node_id": "C_kwDOAAsO6NoAKGVkYjJlNTcxZmU2MjU0MDQ5NWJmYzg2NGMyYWFmZTEwM2VmNDRlNDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-30T12:00:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-30T12:00:54Z"}, "message": "Auto merge of #12416 - Veykril:inlay-hints, r=Veykril\n\nAdd implicit static lifetime hints", "tree": {"sha": "d4a9c97dd88c710ffadca54931acd803ab1473f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4a9c97dd88c710ffadca54931acd803ab1473f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edb2e571fe62540495bfc864c2aafe103ef44e42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edb2e571fe62540495bfc864c2aafe103ef44e42", "html_url": "https://github.com/rust-lang/rust/commit/edb2e571fe62540495bfc864c2aafe103ef44e42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edb2e571fe62540495bfc864c2aafe103ef44e42/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ceaff91d31ea16e38d6fb415d3a7d52703a7499", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ceaff91d31ea16e38d6fb415d3a7d52703a7499", "html_url": "https://github.com/rust-lang/rust/commit/9ceaff91d31ea16e38d6fb415d3a7d52703a7499"}, {"sha": "aced76d0ffd8319c553f52f276f7971cfaea5cd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/aced76d0ffd8319c553f52f276f7971cfaea5cd8", "html_url": "https://github.com/rust-lang/rust/commit/aced76d0ffd8319c553f52f276f7971cfaea5cd8"}], "stats": {"total": 105, "additions": 85, "deletions": 20}, "files": [{"sha": "116c1c480a1eb5746606994fa269f637ee4784e2", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 85, "deletions": 20, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/edb2e571fe62540495bfc864c2aafe103ef44e42/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb2e571fe62540495bfc864c2aafe103ef44e42/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=edb2e571fe62540495bfc864c2aafe103ef44e42", "patch": "@@ -117,33 +117,32 @@ pub(crate) fn inlay_hints(\n \n     let mut acc = Vec::new();\n \n-    let hints = |node| hints(&mut acc, &sema, config, file_id, node);\n-    match range_limit {\n-        Some(FileRange { range, .. }) => match file.covering_element(range) {\n-            NodeOrToken::Token(_) => return acc,\n-            NodeOrToken::Node(n) => n\n-                .descendants()\n-                .filter(|descendant| range.intersect(descendant.text_range()).is_some())\n-                .for_each(hints),\n-        },\n-        None => file.descendants().for_each(hints),\n-    };\n+    if let Some(scope) = sema.scope(&file) {\n+        let famous_defs = FamousDefs(&sema, scope.krate());\n+\n+        let hints = |node| hints(&mut acc, &famous_defs, config, file_id, node);\n+        match range_limit {\n+            Some(FileRange { range, .. }) => match file.covering_element(range) {\n+                NodeOrToken::Token(_) => return acc,\n+                NodeOrToken::Node(n) => n\n+                    .descendants()\n+                    .filter(|descendant| range.intersect(descendant.text_range()).is_some())\n+                    .for_each(hints),\n+            },\n+            None => file.descendants().for_each(hints),\n+        };\n+    }\n \n     acc\n }\n \n fn hints(\n     hints: &mut Vec<InlayHint>,\n-    sema: &Semantics<RootDatabase>,\n+    famous_defs @ FamousDefs(sema, _): &FamousDefs,\n     config: &InlayHintsConfig,\n     file_id: FileId,\n     node: SyntaxNode,\n ) {\n-    let famous_defs = match sema.scope(&node) {\n-        Some(it) => FamousDefs(sema, it.krate()),\n-        None => return,\n-    };\n-\n     closing_brace_hints(hints, sema, config, file_id, node.clone());\n     match_ast! {\n         match node {\n@@ -168,8 +167,18 @@ fn hints(\n                 }\n                 Some(())\n             },\n-            ast::Fn(it) => lifetime_fn_hints(hints, config, it),\n-            _ => Some(()),\n+            ast::Item(it) => match it {\n+                // FIXME: record impl lifetimes so they aren't being reused in assoc item lifetime inlay hints\n+                ast::Item::Impl(_) => None,\n+                ast::Item::Fn(it) => fn_lifetime_fn_hints(hints, config, it),\n+                // static type elisions\n+                ast::Item::Static(it) => implicit_static_hints(hints, config, Either::Left(it)),\n+                ast::Item::Const(it) => implicit_static_hints(hints, config, Either::Right(it)),\n+                _ => None,\n+            },\n+            // FIXME: fn-ptr type, dyn fn type, and trait object type elisions\n+            ast::Type(_) => None,\n+            _ => None,\n         }\n     };\n }\n@@ -279,7 +288,39 @@ fn closing_brace_hints(\n     None\n }\n \n-fn lifetime_fn_hints(\n+fn implicit_static_hints(\n+    acc: &mut Vec<InlayHint>,\n+    config: &InlayHintsConfig,\n+    statik_or_const: Either<ast::Static, ast::Const>,\n+) -> Option<()> {\n+    if config.lifetime_elision_hints != LifetimeElisionHints::Always {\n+        return None;\n+    }\n+\n+    if let Either::Right(it) = &statik_or_const {\n+        if ast::AssocItemList::can_cast(\n+            it.syntax().parent().map_or(SyntaxKind::EOF, |it| it.kind()),\n+        ) {\n+            return None;\n+        }\n+    }\n+\n+    if let Some(ast::Type::RefType(ty)) = statik_or_const.either(|it| it.ty(), |it| it.ty()) {\n+        if ty.lifetime().is_none() {\n+            let t = ty.amp_token()?;\n+            acc.push(InlayHint {\n+                range: t.text_range(),\n+                kind: InlayKind::LifetimeHint,\n+                label: \"'static\".to_owned(),\n+                tooltip: Some(InlayTooltip::String(\"Elided static lifetime\".into())),\n+            });\n+        }\n+    }\n+\n+    Some(())\n+}\n+\n+fn fn_lifetime_fn_hints(\n     acc: &mut Vec<InlayHint>,\n     config: &InlayHintsConfig,\n     func: ast::Fn,\n@@ -2593,6 +2634,30 @@ impl () {\n         );\n     }\n \n+    #[test]\n+    fn hints_lifetimes_static() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                lifetime_elision_hints: LifetimeElisionHints::Always,\n+                ..TEST_CONFIG\n+            },\n+            r#\"\n+trait Trait {}\n+static S: &str = \"\";\n+//        ^'static\n+const C: &str = \"\";\n+//       ^'static\n+const C: &dyn Trait = panic!();\n+//       ^'static\n+\n+impl () {\n+    const C: &str = \"\";\n+    const C: &dyn Trait = panic!();\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn hints_implicit_reborrow() {\n         check_with_config("}]}