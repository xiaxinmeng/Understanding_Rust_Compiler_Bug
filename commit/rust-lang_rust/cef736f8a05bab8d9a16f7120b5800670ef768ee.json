{"sha": "cef736f8a05bab8d9a16f7120b5800670ef768ee", "node_id": "C_kwDOAAsO6NoAKGNlZjczNmY4YTA1YmFiOGQ5YTE2ZjcxMjBiNTgwMDY3MGVmNzY4ZWU", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2021-09-25T15:53:37Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2021-09-28T15:22:32Z"}, "message": "Suggest similarly named assoc items in trait impls\n\nPreviously, the compiler didn't suggest similarly named associated items\nunlike we do in many situations. This patch adds such diagnostics for\nassociated functions, types and constants.", "tree": {"sha": "054b5fbd108cdb2353ef0a5253de9b1e8b006b9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/054b5fbd108cdb2353ef0a5253de9b1e8b006b9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cef736f8a05bab8d9a16f7120b5800670ef768ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cef736f8a05bab8d9a16f7120b5800670ef768ee", "html_url": "https://github.com/rust-lang/rust/commit/cef736f8a05bab8d9a16f7120b5800670ef768ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cef736f8a05bab8d9a16f7120b5800670ef768ee/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60fe8b3a65be709fe2163b8ab438ef14209055cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/60fe8b3a65be709fe2163b8ab438ef14209055cc", "html_url": "https://github.com/rust-lang/rust/commit/60fe8b3a65be709fe2163b8ab438ef14209055cc"}], "stats": {"total": 234, "additions": 216, "deletions": 18}, "files": [{"sha": "b1d02f90be11302f0f8cdcb2d1f30fccbe70dabd", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cef736f8a05bab8d9a16f7120b5800670ef768ee/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef736f8a05bab8d9a16f7120b5800670ef768ee/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=cef736f8a05bab8d9a16f7120b5800670ef768ee", "patch": "@@ -198,7 +198,7 @@ impl<'a> Resolver<'a> {\n                 err.span_label(first_use_span, format!(\"first use of `{}`\", name));\n                 err\n             }\n-            ResolutionError::MethodNotMemberOfTrait(method, trait_) => {\n+            ResolutionError::MethodNotMemberOfTrait(method, trait_, candidate) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n@@ -208,9 +208,17 @@ impl<'a> Resolver<'a> {\n                     trait_\n                 );\n                 err.span_label(span, format!(\"not a member of trait `{}`\", trait_));\n+                if let Some(candidate) = candidate {\n+                    err.span_suggestion(\n+                        method.span,\n+                        \"there is an associated function with a similar name\",\n+                        candidate.to_ident_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n                 err\n             }\n-            ResolutionError::TypeNotMemberOfTrait(type_, trait_) => {\n+            ResolutionError::TypeNotMemberOfTrait(type_, trait_, candidate) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n@@ -220,9 +228,17 @@ impl<'a> Resolver<'a> {\n                     trait_\n                 );\n                 err.span_label(span, format!(\"not a member of trait `{}`\", trait_));\n+                if let Some(candidate) = candidate {\n+                    err.span_suggestion(\n+                        type_.span,\n+                        \"there is an associated type with a similar name\",\n+                        candidate.to_ident_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n                 err\n             }\n-            ResolutionError::ConstNotMemberOfTrait(const_, trait_) => {\n+            ResolutionError::ConstNotMemberOfTrait(const_, trait_, candidate) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n@@ -232,6 +248,14 @@ impl<'a> Resolver<'a> {\n                     trait_\n                 );\n                 err.span_label(span, format!(\"not a member of trait `{}`\", trait_));\n+                if let Some(candidate) = candidate {\n+                    err.span_suggestion(\n+                        const_.span,\n+                        \"there is an associated constant with a similar name\",\n+                        candidate.to_ident_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n                 err\n             }\n             ResolutionError::VariableNotBoundInPattern(binding_error) => {"}, {"sha": "9563325796538dab148fc9d45d5f3448ba6a0980", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cef736f8a05bab8d9a16f7120b5800670ef768ee/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef736f8a05bab8d9a16f7120b5800670ef768ee/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=cef736f8a05bab8d9a16f7120b5800670ef768ee", "patch": "@@ -1309,14 +1309,15 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                     use crate::ResolutionError::*;\n                                     match &item.kind {\n                                         AssocItemKind::Const(_default, _ty, _expr) => {\n-                                            debug!(\"resolve_implementation AssocItemKind::Const\",);\n+                                            debug!(\"resolve_implementation AssocItemKind::Const\");\n                                             // If this is a trait impl, ensure the const\n                                             // exists in trait\n                                             this.check_trait_item(\n                                                 item.ident,\n+                                                &item.kind,\n                                                 ValueNS,\n                                                 item.span,\n-                                                |n, s| ConstNotMemberOfTrait(n, s),\n+                                                |i, s, c| ConstNotMemberOfTrait(i, s, c),\n                                             );\n \n                                             // We allow arbitrary const expressions inside of associated consts,\n@@ -1338,6 +1339,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             );\n                                         }\n                                         AssocItemKind::Fn(box FnKind(.., generics, _)) => {\n+                                            debug!(\"resolve_implementation AssocItemKind::Fn\");\n                                             // We also need a new scope for the impl item type parameters.\n                                             this.with_generic_param_rib(\n                                                 generics,\n@@ -1347,9 +1349,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                     // exists in trait\n                                                     this.check_trait_item(\n                                                         item.ident,\n+                                                        &item.kind,\n                                                         ValueNS,\n                                                         item.span,\n-                                                        |n, s| MethodNotMemberOfTrait(n, s),\n+                                                        |i, s, c| MethodNotMemberOfTrait(i, s, c),\n                                                     );\n \n                                                     visit::walk_assoc_item(\n@@ -1366,6 +1369,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             _,\n                                             _,\n                                         )) => {\n+                                            debug!(\"resolve_implementation AssocItemKind::TyAlias\");\n                                             // We also need a new scope for the impl item type parameters.\n                                             this.with_generic_param_rib(\n                                                 generics,\n@@ -1375,9 +1379,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                     // exists in trait\n                                                     this.check_trait_item(\n                                                         item.ident,\n+                                                        &item.kind,\n                                                         TypeNS,\n                                                         item.span,\n-                                                        |n, s| TypeNotMemberOfTrait(n, s),\n+                                                        |i, s, c| TypeNotMemberOfTrait(i, s, c),\n                                                     );\n \n                                                     visit::walk_assoc_item(\n@@ -1401,9 +1406,15 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         });\n     }\n \n-    fn check_trait_item<F>(&mut self, ident: Ident, ns: Namespace, span: Span, err: F)\n-    where\n-        F: FnOnce(Symbol, &str) -> ResolutionError<'_>,\n+    fn check_trait_item<F>(\n+        &mut self,\n+        ident: Ident,\n+        kind: &AssocItemKind,\n+        ns: Namespace,\n+        span: Span,\n+        err: F,\n+    ) where\n+        F: FnOnce(Ident, &str, Option<Symbol>) -> ResolutionError<'_>,\n     {\n         // If there is a TraitRef in scope for an impl, then the method must be in the\n         // trait.\n@@ -1420,8 +1431,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 )\n                 .is_err()\n             {\n+                let candidate = self.find_similarly_named_assoc_item(ident.name, kind);\n                 let path = &self.current_trait_ref.as_ref().unwrap().1.path;\n-                self.report_error(span, err(ident.name, &path_names_to_string(path)));\n+                self.report_error(span, err(ident, &path_names_to_string(path), candidate));\n             }\n         }\n     }"}, {"sha": "0e6ca1856bb302ea575adc90b760a90458603f17", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cef736f8a05bab8d9a16f7120b5800670ef768ee/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef736f8a05bab8d9a16f7120b5800670ef768ee/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=cef736f8a05bab8d9a16f7120b5800670ef768ee", "patch": "@@ -7,8 +7,8 @@ use crate::{PathResult, PathSource, Segment};\n \n use rustc_ast::visit::FnKind;\n use rustc_ast::{\n-    self as ast, Expr, ExprKind, GenericParam, GenericParamKind, Item, ItemKind, NodeId, Path, Ty,\n-    TyKind,\n+    self as ast, AssocItemKind, Expr, ExprKind, GenericParam, GenericParamKind, Item, ItemKind,\n+    NodeId, Path, Ty, TyKind,\n };\n use rustc_ast_pretty::pprust::path_segment_to_string;\n use rustc_data_structures::fx::FxHashSet;\n@@ -1144,6 +1144,40 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         true\n     }\n \n+    /// Given the target `ident` and `kind`, search for the similarly named associated item\n+    /// in `self.current_trait_ref`.\n+    crate fn find_similarly_named_assoc_item(\n+        &mut self,\n+        ident: Symbol,\n+        kind: &AssocItemKind,\n+    ) -> Option<Symbol> {\n+        let module = if let Some((module, _)) = self.current_trait_ref {\n+            module\n+        } else {\n+            return None;\n+        };\n+        if ident == kw::Underscore {\n+            // We do nothing for `_`.\n+            return None;\n+        }\n+\n+        let resolutions = self.r.resolutions(module);\n+        let targets = resolutions\n+            .borrow()\n+            .iter()\n+            .filter_map(|(key, res)| res.borrow().binding.map(|binding| (key, binding.res())))\n+            .filter(|(_, res)| match (kind, res) {\n+                (AssocItemKind::Const(..), Res::Def(DefKind::AssocConst, _)) => true,\n+                (AssocItemKind::Fn(_), Res::Def(DefKind::AssocFn, _)) => true,\n+                (AssocItemKind::TyAlias(..), Res::Def(DefKind::AssocTy, _)) => true,\n+                _ => false,\n+            })\n+            .map(|(key, _)| key.ident.name)\n+            .collect::<Vec<_>>();\n+\n+        find_best_match_for_name(&targets, ident, None)\n+    }\n+\n     fn lookup_assoc_candidate<FilterFn>(\n         &mut self,\n         ident: Ident,"}, {"sha": "22d77d44321598509cf1e798edc73b783189b135", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cef736f8a05bab8d9a16f7120b5800670ef768ee/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef736f8a05bab8d9a16f7120b5800670ef768ee/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=cef736f8a05bab8d9a16f7120b5800670ef768ee", "patch": "@@ -202,11 +202,11 @@ enum ResolutionError<'a> {\n     /// parameter list.\n     NameAlreadyUsedInParameterList(Symbol, Span),\n     /// Error E0407: method is not a member of trait.\n-    MethodNotMemberOfTrait(Symbol, &'a str),\n+    MethodNotMemberOfTrait(Ident, &'a str, Option<Symbol>),\n     /// Error E0437: type is not a member of trait.\n-    TypeNotMemberOfTrait(Symbol, &'a str),\n+    TypeNotMemberOfTrait(Ident, &'a str, Option<Symbol>),\n     /// Error E0438: const is not a member of trait.\n-    ConstNotMemberOfTrait(Symbol, &'a str),\n+    ConstNotMemberOfTrait(Ident, &'a str, Option<Symbol>),\n     /// Error E0408: variable `{}` is not bound in all patterns.\n     VariableNotBoundInPattern(&'a BindingError),\n     /// Error E0409: variable `{}` is bound in inconsistent ways within the same match arm."}, {"sha": "6f6d1ff6a8f417c806a33073329a9459beb8b48e", "filename": "src/test/ui/error-codes/E0407.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cef736f8a05bab8d9a16f7120b5800670ef768ee/src%2Ftest%2Fui%2Ferror-codes%2FE0407.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cef736f8a05bab8d9a16f7120b5800670ef768ee/src%2Ftest%2Fui%2Ferror-codes%2FE0407.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0407.stderr?ref=cef736f8a05bab8d9a16f7120b5800670ef768ee", "patch": "@@ -2,7 +2,10 @@ error[E0407]: method `b` is not a member of trait `Foo`\n   --> $DIR/E0407.rs:9:5\n    |\n LL |     fn b() {}\n-   |     ^^^^^^^^^ not a member of trait `Foo`\n+   |     ^^^-^^^^^\n+   |     |  |\n+   |     |  help: there is an associated function with a similar name: `a`\n+   |     not a member of trait `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "517b1ff598888e963ac0218f7411b70905aecdd1", "filename": "src/test/ui/hygiene/assoc_item_ctxt.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cef736f8a05bab8d9a16f7120b5800670ef768ee/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cef736f8a05bab8d9a16f7120b5800670ef768ee/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr?ref=cef736f8a05bab8d9a16f7120b5800670ef768ee", "patch": "@@ -2,7 +2,10 @@ error[E0407]: method `method` is not a member of trait `Tr`\n   --> $DIR/assoc_item_ctxt.rs:35:13\n    |\n LL |             fn method() {}\n-   |             ^^^^^^^^^^^^^^ not a member of trait `Tr`\n+   |             ^^^------^^^^^\n+   |             |  |\n+   |             |  help: there is an associated function with a similar name: `method`\n+   |             not a member of trait `Tr`\n ...\n LL |     mac_trait_impl!();\n    |     ------------------ in this macro invocation"}, {"sha": "9d42a734260962ef97a0b5bcee150b79ad9e53c5", "filename": "src/test/ui/suggestions/suggest-trait-items.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cef736f8a05bab8d9a16f7120b5800670ef768ee/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef736f8a05bab8d9a16f7120b5800670ef768ee/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.rs?ref=cef736f8a05bab8d9a16f7120b5800670ef768ee", "patch": "@@ -0,0 +1,48 @@\n+trait Foo {\n+    type Type;\n+\n+    fn foo();\n+    fn bar();\n+    fn qux();\n+}\n+\n+struct A;\n+\n+impl Foo for A {\n+//~^ ERROR not all trait items implemented\n+    type Typ = ();\n+    //~^ ERROR type `Typ` is not a member of trait\n+    //~| HELP there is an associated type with a similar name\n+\n+    fn fooo() {}\n+    //~^ ERROR method `fooo` is not a member of trait\n+    //~| HELP there is an associated function with a similar name\n+\n+    fn barr() {}\n+    //~^ ERROR method `barr` is not a member of trait\n+    //~| HELP there is an associated function with a similar name\n+\n+    fn quux() {}\n+    //~^ ERROR method `quux` is not a member of trait\n+    //~| HELP there is an associated function with a similar name\n+}\n+//~^ HELP implement the missing item\n+//~| HELP implement the missing item\n+//~| HELP implement the missing item\n+//~| HELP implement the missing item\n+\n+trait Bar {\n+    const Const: i32;\n+}\n+\n+struct B;\n+\n+impl Bar for B {\n+//~^ ERROR not all trait items implemented\n+    const Cnst: i32 = 0;\n+    //~^ ERROR const `Cnst` is not a member of trait\n+    //~| HELP there is an associated constant with a similar name\n+}\n+//~^ HELP implement the missing item\n+\n+fn main() {}"}, {"sha": "151bae7d1b9cb12b04de303f2ee82737208fcc3d", "filename": "src/test/ui/suggestions/suggest-trait-items.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/cef736f8a05bab8d9a16f7120b5800670ef768ee/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cef736f8a05bab8d9a16f7120b5800670ef768ee/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.stderr?ref=cef736f8a05bab8d9a16f7120b5800670ef768ee", "patch": "@@ -0,0 +1,74 @@\n+error[E0437]: type `Typ` is not a member of trait `Foo`\n+  --> $DIR/suggest-trait-items.rs:13:5\n+   |\n+LL |     type Typ = ();\n+   |     ^^^^^---^^^^^^\n+   |     |    |\n+   |     |    help: there is an associated type with a similar name: `Type`\n+   |     not a member of trait `Foo`\n+\n+error[E0407]: method `fooo` is not a member of trait `Foo`\n+  --> $DIR/suggest-trait-items.rs:17:5\n+   |\n+LL |     fn fooo() {}\n+   |     ^^^----^^^^^\n+   |     |  |\n+   |     |  help: there is an associated function with a similar name: `foo`\n+   |     not a member of trait `Foo`\n+\n+error[E0407]: method `barr` is not a member of trait `Foo`\n+  --> $DIR/suggest-trait-items.rs:21:5\n+   |\n+LL |     fn barr() {}\n+   |     ^^^----^^^^^\n+   |     |  |\n+   |     |  help: there is an associated function with a similar name: `bar`\n+   |     not a member of trait `Foo`\n+\n+error[E0407]: method `quux` is not a member of trait `Foo`\n+  --> $DIR/suggest-trait-items.rs:25:5\n+   |\n+LL |     fn quux() {}\n+   |     ^^^----^^^^^\n+   |     |  |\n+   |     |  help: there is an associated function with a similar name: `qux`\n+   |     not a member of trait `Foo`\n+\n+error[E0438]: const `Cnst` is not a member of trait `Bar`\n+  --> $DIR/suggest-trait-items.rs:42:5\n+   |\n+LL |     const Cnst: i32 = 0;\n+   |     ^^^^^^----^^^^^^^^^^\n+   |     |     |\n+   |     |     help: there is an associated constant with a similar name: `Const`\n+   |     not a member of trait `Bar`\n+\n+error[E0046]: not all trait items implemented, missing: `Type`, `foo`, `bar`, `qux`\n+  --> $DIR/suggest-trait-items.rs:11:1\n+   |\n+LL |     type Type;\n+   |     ---------- `Type` from trait\n+LL | \n+LL |     fn foo();\n+   |     --------- `foo` from trait\n+LL |     fn bar();\n+   |     --------- `bar` from trait\n+LL |     fn qux();\n+   |     --------- `qux` from trait\n+...\n+LL | impl Foo for A {\n+   | ^^^^^^^^^^^^^^ missing `Type`, `foo`, `bar`, `qux` in implementation\n+\n+error[E0046]: not all trait items implemented, missing: `Const`\n+  --> $DIR/suggest-trait-items.rs:40:1\n+   |\n+LL |     const Const: i32;\n+   |     ----------------- `Const` from trait\n+...\n+LL | impl Bar for B {\n+   | ^^^^^^^^^^^^^^ missing `Const` in implementation\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0046, E0407, E0437, E0438.\n+For more information about an error, try `rustc --explain E0046`."}]}