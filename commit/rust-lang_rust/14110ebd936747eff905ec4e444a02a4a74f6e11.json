{"sha": "14110ebd936747eff905ec4e444a02a4a74f6e11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MTEwZWJkOTM2NzQ3ZWZmOTA1ZWM0ZTQ0NGEwMmE0YTc0ZjZlMTE=", "commit": {"author": {"name": "Dario Gonzalez", "email": "dario.gonzalez@fortanix.com", "date": "2019-06-12T17:49:41Z"}, "committer": {"name": "Dario Gonzalez", "email": "dario.gonzalez@fortanix.com", "date": "2019-09-03T20:53:00Z"}, "message": "added rustdoc book documentation, improved behavior when unstable flag not present", "tree": {"sha": "dd2fec4537235c5d04c30cc3fe5700748253d886", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd2fec4537235c5d04c30cc3fe5700748253d886"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14110ebd936747eff905ec4e444a02a4a74f6e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14110ebd936747eff905ec4e444a02a4a74f6e11", "html_url": "https://github.com/rust-lang/rust/commit/14110ebd936747eff905ec4e444a02a4a74f6e11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14110ebd936747eff905ec4e444a02a4a74f6e11/comments", "author": {"login": "Goirad", "id": 20523291, "node_id": "MDQ6VXNlcjIwNTIzMjkx", "avatar_url": "https://avatars.githubusercontent.com/u/20523291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Goirad", "html_url": "https://github.com/Goirad", "followers_url": "https://api.github.com/users/Goirad/followers", "following_url": "https://api.github.com/users/Goirad/following{/other_user}", "gists_url": "https://api.github.com/users/Goirad/gists{/gist_id}", "starred_url": "https://api.github.com/users/Goirad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Goirad/subscriptions", "organizations_url": "https://api.github.com/users/Goirad/orgs", "repos_url": "https://api.github.com/users/Goirad/repos", "events_url": "https://api.github.com/users/Goirad/events{/privacy}", "received_events_url": "https://api.github.com/users/Goirad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Goirad", "id": 20523291, "node_id": "MDQ6VXNlcjIwNTIzMjkx", "avatar_url": "https://avatars.githubusercontent.com/u/20523291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Goirad", "html_url": "https://github.com/Goirad", "followers_url": "https://api.github.com/users/Goirad/followers", "following_url": "https://api.github.com/users/Goirad/following{/other_user}", "gists_url": "https://api.github.com/users/Goirad/gists{/gist_id}", "starred_url": "https://api.github.com/users/Goirad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Goirad/subscriptions", "organizations_url": "https://api.github.com/users/Goirad/orgs", "repos_url": "https://api.github.com/users/Goirad/repos", "events_url": "https://api.github.com/users/Goirad/events{/privacy}", "received_events_url": "https://api.github.com/users/Goirad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "657e24c56b11a45ee1cc019eb0763838f4437475", "url": "https://api.github.com/repos/rust-lang/rust/commits/657e24c56b11a45ee1cc019eb0763838f4437475", "html_url": "https://github.com/rust-lang/rust/commit/657e24c56b11a45ee1cc019eb0763838f4437475"}], "stats": {"total": 66, "additions": 56, "deletions": 10}, "files": [{"sha": "49d05b5038df74dd8ff7bd53545adc7fdfc123d9", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/14110ebd936747eff905ec4e444a02a4a74f6e11/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/14110ebd936747eff905ec4e444a02a4a74f6e11/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=14110ebd936747eff905ec4e444a02a4a74f6e11", "patch": "@@ -471,3 +471,53 @@ Some methodology notes about what rustdoc counts in this metric:\n \n Public items that are not documented can be seen with the built-in `missing_docs` lint. Private\n items that are not documented can be seen with Clippy's `missing_docs_in_private_items` lint.\n+\n+### `--enable-per-target-ignores`: allow `ignore-foo` style filters for doctests\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --enable-per-target-ignores\n+```\n+\n+This flag allows you to tag doctests with compiltest style `ignore-foo` filters that prevent\n+rustdoc from running that test if the target triple string contains foo. For example:\n+\n+```rust\n+///```ignore-foo,ignore-bar\n+///assert!(2 == 2);\n+///```\n+struct Foo;\n+```\n+\n+This will not be run when the build target is `super-awesome-foo` or `less-bar-awesome`.\n+If the flag is not enabled, then rustdoc will consume the filter, but do nothing with it, and\n+the above example will be run for all targets.\n+If you want to preserve backwards compatibility for older versions of rustdoc, you can use\n+\n+```rust\n+///```ignore,ignore-foo\n+///assert!(2 == 2);\n+///```\n+struct Foo;\n+```\n+\n+In older versions, this will be ignored on all targets, but on newer versions `ignore-gnu` will\n+override `ignore`.\n+\n+### `--runtool`, `--runtool-arg`: program to run tests with; args to pass to it\n+\n+Using thses options looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --runtool runner --runtool-arg --do-thing --runtool-arg --do-other-thing\n+```\n+\n+These options can be used to run the doctest under a program, and also pass arguments to\n+that program. For example, if you want to run your doctests under valgrind you might run\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --runtool valgrind\n+```\n+\n+Another use case would be to run a test inside an emulator, or through a Virtual Machine."}, {"sha": "05e6c77256e7b846cc6bffb702c14f44c0b722b1", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14110ebd936747eff905ec4e444a02a4a74f6e11/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14110ebd936747eff905ec4e444a02a4a74f6e11/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=14110ebd936747eff905ec4e444a02a4a74f6e11", "patch": "@@ -665,7 +665,7 @@ impl LangString {\n                 }\n                 \"no_run\" => { data.no_run = true; seen_rust_tags = !seen_other_tags; }\n                 \"ignore\" => { data.ignore = Ignore::All; seen_rust_tags = !seen_other_tags; }\n-                x if enable_per_target_ignores && x.starts_with(\"ignore-\") => {\n+                x if x.starts_with(\"ignore-\") => if enable_per_target_ignores {\n                     ignores.push(x.trim_start_matches(\"ignore-\").to_owned());\n                     seen_rust_tags = !seen_other_tags;\n                 }\n@@ -696,15 +696,9 @@ impl LangString {\n                 _ => { seen_other_tags = true }\n             }\n         }\n-\n-        match data.ignore {\n-            Ignore::All => {},\n-            Ignore::None => {\n-                if !ignores.is_empty() {\n-                    data.ignore = Ignore::Some(ignores);\n-                }\n-            },\n-            _ => unreachable!(),\n+        // ignore-foo overrides ignore\n+        if !ignores.is_empty() {\n+            data.ignore = Ignore::Some(ignores);\n         }\n \n         data.rust &= !seen_other_tags || seen_rust_tags;"}, {"sha": "840eeda9ad7ca7b7834f134fea34204233f2531d", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14110ebd936747eff905ec4e444a02a4a74f6e11/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14110ebd936747eff905ec4e444a02a4a74f6e11/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=14110ebd936747eff905ec4e444a02a4a74f6e11", "patch": "@@ -58,8 +58,10 @@ pub fn run(options: Options) -> i32 {\n             ..config::basic_debugging_options()\n         },\n         edition: options.edition,\n+        target_triple: options.target.clone(),\n         ..config::Options::default()\n     };\n+\n     let config = interface::Config {\n         opts: sessopts,\n         crate_cfg: config::parse_cfgspecs(options.cfgs.clone()),"}]}