{"sha": "8e65b773874909985b6ffc9247ea9dfbaac6a02b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNjViNzczODc0OTA5OTg1YjZmZmM5MjQ3ZWE5ZGZiYWFjNmEwMmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T14:50:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T14:50:16Z"}, "message": "Dedupe from_source impls", "tree": {"sha": "5067e216648a53f5d011299f7e144109198e6623", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5067e216648a53f5d011299f7e144109198e6623"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e65b773874909985b6ffc9247ea9dfbaac6a02b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e65b773874909985b6ffc9247ea9dfbaac6a02b", "html_url": "https://github.com/rust-lang/rust/commit/8e65b773874909985b6ffc9247ea9dfbaac6a02b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e65b773874909985b6ffc9247ea9dfbaac6a02b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a255a2f9381ba5886cacc48c1dd0420a739a55c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a255a2f9381ba5886cacc48c1dd0420a739a55c", "html_url": "https://github.com/rust-lang/rust/commit/7a255a2f9381ba5886cacc48c1dd0420a739a55c"}], "stats": {"total": 113, "additions": 35, "deletions": 78}, "files": [{"sha": "7abb4bd75ad71f14cf497edd89c1a5f6a22bff25", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 34, "deletions": 77, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/8e65b773874909985b6ffc9247ea9dfbaac6a02b/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e65b773874909985b6ffc9247ea9dfbaac6a02b/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=8e65b773874909985b6ffc9247ea9dfbaac6a02b", "patch": "@@ -1,7 +1,8 @@\n //! FIXME: write short doc here\n use hir_def::{\n-    child_by_source::ChildBySource, dyn_map::DynMap, keys, nameres::ModuleSource, EnumVariantId,\n-    GenericDefId, ModuleId, VariantId,\n+    child_by_source::ChildBySource, dyn_map::DynMap, keys, keys::Key, nameres::ModuleSource,\n+    ConstId, EnumId, EnumVariantId, FunctionId, GenericDefId, ImplId, ModuleId, StaticId, StructId,\n+    TraitId, TypeAliasId, UnionId, VariantId,\n };\n use hir_expand::{name::AsName, AstId, MacroDefId, MacroDefKind};\n use ra_syntax::{\n@@ -20,81 +21,47 @@ pub trait FromSource: Sized {\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self>;\n }\n \n-impl FromSource for Struct {\n-    type Ast = ast::StructDef;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::STRUCT]\n-            .get(&src)\n-            .copied()\n-            .map(Struct::from)\n-    }\n-}\n-impl FromSource for Union {\n-    type Ast = ast::UnionDef;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::UNION]\n-            .get(&src)\n-            .copied()\n-            .map(Union::from)\n-    }\n-}\n-impl FromSource for Enum {\n-    type Ast = ast::EnumDef;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::ENUM]\n-            .get(&src)\n-            .copied()\n-            .map(Enum::from)\n-    }\n-}\n-impl FromSource for Trait {\n-    type Ast = ast::TraitDef;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::TRAIT]\n-            .get(&src)\n-            .copied()\n-            .map(Trait::from)\n-    }\n-}\n-impl FromSource for Function {\n-    type Ast = ast::FnDef;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::FUNCTION]\n-            .get(&src)\n-            .copied()\n-            .map(Function::from)\n-    }\n+pub trait FromSourceByContainer: Sized {\n+    type Ast: AstNode + 'static;\n+    type Id: Copy + 'static;\n+    const KEY: Key<Self::Ast, Self::Id>;\n }\n \n-impl FromSource for Const {\n-    type Ast = ast::ConstDef;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::CONST]\n-            .get(&src)\n-            .copied()\n-            .map(Const::from)\n-    }\n-}\n-impl FromSource for Static {\n-    type Ast = ast::StaticDef;\n+impl<T: FromSourceByContainer> FromSource for T\n+where\n+    T: From<<T as FromSourceByContainer>::Id>,\n+{\n+    type Ast = <T as FromSourceByContainer>::Ast;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::STATIC]\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[T::KEY]\n             .get(&src)\n             .copied()\n-            .map(Static::from)\n+            .map(Self::from)\n     }\n }\n \n-impl FromSource for TypeAlias {\n-    type Ast = ast::TypeAliasDef;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::TYPE_ALIAS]\n-            .get(&src)\n-            .copied()\n-            .map(TypeAlias::from)\n-    }\n+macro_rules! from_source_by_container_impls {\n+    ($(($hir:ident, $id:ident, $ast:path, $key:path)),* ,) => {$(\n+        impl FromSourceByContainer for $hir {\n+            type Ast = $ast;\n+            type Id = $id;\n+            const KEY: Key<Self::Ast, Self::Id> = $key;\n+        }\n+    )*}\n }\n \n+from_source_by_container_impls![\n+    (Struct, StructId, ast::StructDef, keys::STRUCT),\n+    (Union, UnionId, ast::UnionDef, keys::UNION),\n+    (Enum, EnumId, ast::EnumDef, keys::ENUM),\n+    (Trait, TraitId, ast::TraitDef, keys::TRAIT),\n+    (Function, FunctionId, ast::FnDef, keys::FUNCTION),\n+    (Static, StaticId, ast::StaticDef, keys::STATIC),\n+    (Const, ConstId, ast::ConstDef, keys::CONST),\n+    (TypeAlias, TypeAliasId, ast::TypeAliasDef, keys::TYPE_ALIAS),\n+    (ImplBlock, ImplId, ast::ImplBlock, keys::IMPL),\n+];\n+\n impl FromSource for MacroDef {\n     type Ast = ast::MacroCall;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n@@ -111,16 +78,6 @@ impl FromSource for MacroDef {\n     }\n }\n \n-impl FromSource for ImplBlock {\n-    type Ast = ast::ImplBlock;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::IMPL]\n-            .get(&src)\n-            .copied()\n-            .map(ImplBlock::from)\n-    }\n-}\n-\n impl FromSource for EnumVariant {\n     type Ast = ast::EnumVariant;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {"}, {"sha": "d844f7a627c5b0ca79a4eac78456b8499f7378ac", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e65b773874909985b6ffc9247ea9dfbaac6a02b/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e65b773874909985b6ffc9247ea9dfbaac6a02b/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=8e65b773874909985b6ffc9247ea9dfbaac6a02b", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     TypeAliasId, TypeParamId, UnionId,\n };\n \n-type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;\n+pub type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;\n \n pub const FUNCTION: Key<ast::FnDef, FunctionId> = Key::new();\n pub const CONST: Key<ast::ConstDef, ConstId> = Key::new();"}]}