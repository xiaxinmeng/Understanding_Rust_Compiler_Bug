{"sha": "74ebf026fe927ffa99d541479454f45791806802", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZWJmMDI2ZmU5MjdmZmE5OWQ1NDE0Nzk0NTRmNDU3OTE4MDY4MDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-19T10:16:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-19T10:16:05Z"}, "message": "Auto merge of #56550 - chpio:rc-eq, r=alexcrichton\n\nShort-circuit Rc/Arc equality checking on equal pointers where T: Eq\n\nbased on #42965\n\nIs the use of the private trait ok this way? Is there anything else needed for this to get pulled?", "tree": {"sha": "d0759b9af29a848eed2b7c1feb10a4dcfe0e1ed4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0759b9af29a848eed2b7c1feb10a4dcfe0e1ed4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74ebf026fe927ffa99d541479454f45791806802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74ebf026fe927ffa99d541479454f45791806802", "html_url": "https://github.com/rust-lang/rust/commit/74ebf026fe927ffa99d541479454f45791806802", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74ebf026fe927ffa99d541479454f45791806802/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2", "html_url": "https://github.com/rust-lang/rust/commit/e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2"}, {"sha": "d828c22bd6ff6059c75dfa63e024997619eb6e7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d828c22bd6ff6059c75dfa63e024997619eb6e7c", "html_url": "https://github.com/rust-lang/rust/commit/d828c22bd6ff6059c75dfa63e024997619eb6e7c"}], "stats": {"total": 174, "additions": 168, "deletions": 6}, "files": [{"sha": "6769a70ddbe0a8333a5335aa159176adde7432e4", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/74ebf026fe927ffa99d541479454f45791806802/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ebf026fe927ffa99d541479454f45791806802/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=74ebf026fe927ffa99d541479454f45791806802", "patch": "@@ -900,12 +900,47 @@ impl<T: Default> Default for Rc<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+trait RcEqIdent<T: ?Sized + PartialEq> {\n+    fn eq(&self, other: &Rc<T>) -> bool;\n+    fn ne(&self, other: &Rc<T>) -> bool;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized + PartialEq> RcEqIdent<T> for Rc<T> {\n+    #[inline]\n+    default fn eq(&self, other: &Rc<T>) -> bool {\n+        **self == **other\n+    }\n+\n+    #[inline]\n+    default fn ne(&self, other: &Rc<T>) -> bool {\n+        **self != **other\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized + Eq> RcEqIdent<T> for Rc<T> {\n+    #[inline]\n+    fn eq(&self, other: &Rc<T>) -> bool {\n+        Rc::ptr_eq(self, other) || **self == **other\n+    }\n+\n+    #[inline]\n+    fn ne(&self, other: &Rc<T>) -> bool {\n+        !Rc::ptr_eq(self, other) && **self != **other\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + PartialEq> PartialEq for Rc<T> {\n     /// Equality for two `Rc`s.\n     ///\n     /// Two `Rc`s are equal if their inner values are equal.\n     ///\n+    /// If `T` also implements `Eq`, two `Rc`s that point to the same value are\n+    /// always equal.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -915,15 +950,18 @@ impl<T: ?Sized + PartialEq> PartialEq for Rc<T> {\n     ///\n     /// assert!(five == Rc::new(5));\n     /// ```\n-    #[inline(always)]\n+    #[inline]\n     fn eq(&self, other: &Rc<T>) -> bool {\n-        **self == **other\n+        RcEqIdent::eq(self, other)\n     }\n \n     /// Inequality for two `Rc`s.\n     ///\n     /// Two `Rc`s are unequal if their inner values are unequal.\n     ///\n+    /// If `T` also implements `Eq`, two `Rc`s that point to the same value are\n+    /// never unequal.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -933,9 +971,9 @@ impl<T: ?Sized + PartialEq> PartialEq for Rc<T> {\n     ///\n     /// assert!(five != Rc::new(6));\n     /// ```\n-    #[inline(always)]\n+    #[inline]\n     fn ne(&self, other: &Rc<T>) -> bool {\n-        **self != **other\n+        RcEqIdent::ne(self, other)\n     }\n }\n "}, {"sha": "e596694fb9d4b6e7070a55f1e8f244bf5c23cd94", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/74ebf026fe927ffa99d541479454f45791806802/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ebf026fe927ffa99d541479454f45791806802/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=74ebf026fe927ffa99d541479454f45791806802", "patch": "@@ -1287,12 +1287,46 @@ impl<T: ?Sized> Drop for Weak<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+trait ArcEqIdent<T: ?Sized + PartialEq> {\n+    fn eq(&self, other: &Arc<T>) -> bool;\n+    fn ne(&self, other: &Arc<T>) -> bool;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized + PartialEq> ArcEqIdent<T> for Arc<T> {\n+    #[inline]\n+    default fn eq(&self, other: &Arc<T>) -> bool {\n+        **self == **other\n+    }\n+    #[inline]\n+    default fn ne(&self, other: &Arc<T>) -> bool {\n+        **self != **other\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized + Eq> ArcEqIdent<T> for Arc<T> {\n+    #[inline]\n+    fn eq(&self, other: &Arc<T>) -> bool {\n+        Arc::ptr_eq(self, other) || **self == **other\n+    }\n+\n+    #[inline]\n+    fn ne(&self, other: &Arc<T>) -> bool {\n+        !Arc::ptr_eq(self, other) && **self != **other\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + PartialEq> PartialEq for Arc<T> {\n     /// Equality for two `Arc`s.\n     ///\n     /// Two `Arc`s are equal if their inner values are equal.\n     ///\n+    /// If `T` also implements `Eq`, two `Arc`s that point to the same value are\n+    /// always equal.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1302,14 +1336,18 @@ impl<T: ?Sized + PartialEq> PartialEq for Arc<T> {\n     ///\n     /// assert!(five == Arc::new(5));\n     /// ```\n+    #[inline]\n     fn eq(&self, other: &Arc<T>) -> bool {\n-        *(*self) == *(*other)\n+        ArcEqIdent::eq(self, other)\n     }\n \n     /// Inequality for two `Arc`s.\n     ///\n     /// Two `Arc`s are unequal if their inner values are unequal.\n     ///\n+    /// If `T` also implements `Eq`, two `Arc`s that point to the same value are\n+    /// never unequal.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1319,10 +1357,12 @@ impl<T: ?Sized + PartialEq> PartialEq for Arc<T> {\n     ///\n     /// assert!(five != Arc::new(6));\n     /// ```\n+    #[inline]\n     fn ne(&self, other: &Arc<T>) -> bool {\n-        *(*self) != *(*other)\n+        ArcEqIdent::ne(self, other)\n     }\n }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + PartialOrd> PartialOrd for Arc<T> {\n     /// Partial comparison for two `Arc`s."}, {"sha": "ec589710216c3b048e416412d36563f338eeb11a", "filename": "src/liballoc/tests/arc.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/74ebf026fe927ffa99d541479454f45791806802/src%2Fliballoc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ebf026fe927ffa99d541479454f45791806802/src%2Fliballoc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Farc.rs?ref=74ebf026fe927ffa99d541479454f45791806802", "patch": "@@ -10,6 +10,8 @@\n \n use std::any::Any;\n use std::sync::{Arc, Weak};\n+use std::cell::RefCell;\n+use std::cmp::PartialEq;\n \n #[test]\n fn uninhabited() {\n@@ -53,3 +55,43 @@ fn trait_object() {\n     b = b.clone();\n     assert!(b.upgrade().is_none());\n }\n+\n+#[test]\n+fn float_nan_ne() {\n+    let x = Arc::new(std::f32::NAN);\n+    assert!(x != x);\n+    assert!(!(x == x));\n+}\n+\n+#[test]\n+fn partial_eq() {\n+    struct TestPEq (RefCell<usize>);\n+    impl PartialEq for TestPEq {\n+        fn eq(&self, other: &TestPEq) -> bool {\n+            *self.0.borrow_mut() += 1;\n+            *other.0.borrow_mut() += 1;\n+            true\n+        }\n+    }\n+    let x = Arc::new(TestPEq(RefCell::new(0)));\n+    assert!(x == x);\n+    assert!(!(x != x));\n+    assert_eq!(*x.0.borrow(), 4);\n+}\n+\n+#[test]\n+fn eq() {\n+    #[derive(Eq)]\n+    struct TestEq (RefCell<usize>);\n+    impl PartialEq for TestEq {\n+        fn eq(&self, other: &TestEq) -> bool {\n+            *self.0.borrow_mut() += 1;\n+            *other.0.borrow_mut() += 1;\n+            true\n+        }\n+    }\n+    let x = Arc::new(TestEq(RefCell::new(0)));\n+    assert!(x == x);\n+    assert!(!(x != x));\n+    assert_eq!(*x.0.borrow(), 0);\n+}"}, {"sha": "02e1dfe13bb360aab42e0d41ca1549a3feb62414", "filename": "src/liballoc/tests/rc.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/74ebf026fe927ffa99d541479454f45791806802/src%2Fliballoc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ebf026fe927ffa99d541479454f45791806802/src%2Fliballoc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Frc.rs?ref=74ebf026fe927ffa99d541479454f45791806802", "patch": "@@ -10,6 +10,8 @@\n \n use std::any::Any;\n use std::rc::{Rc, Weak};\n+use std::cell::RefCell;\n+use std::cmp::PartialEq;\n \n #[test]\n fn uninhabited() {\n@@ -53,3 +55,43 @@ fn trait_object() {\n     b = b.clone();\n     assert!(b.upgrade().is_none());\n }\n+\n+#[test]\n+fn float_nan_ne() {\n+    let x = Rc::new(std::f32::NAN);\n+    assert!(x != x);\n+    assert!(!(x == x));\n+}\n+\n+#[test]\n+fn partial_eq() {\n+    struct TestPEq (RefCell<usize>);\n+    impl PartialEq for TestPEq {\n+        fn eq(&self, other: &TestPEq) -> bool {\n+            *self.0.borrow_mut() += 1;\n+            *other.0.borrow_mut() += 1;\n+            true\n+        }\n+    }\n+    let x = Rc::new(TestPEq(RefCell::new(0)));\n+    assert!(x == x);\n+    assert!(!(x != x));\n+    assert_eq!(*x.0.borrow(), 4);\n+}\n+\n+#[test]\n+fn eq() {\n+    #[derive(Eq)]\n+    struct TestEq (RefCell<usize>);\n+    impl PartialEq for TestEq {\n+        fn eq(&self, other: &TestEq) -> bool {\n+            *self.0.borrow_mut() += 1;\n+            *other.0.borrow_mut() += 1;\n+            true\n+        }\n+    }\n+    let x = Rc::new(TestEq(RefCell::new(0)));\n+    assert!(x == x);\n+    assert!(!(x != x));\n+    assert_eq!(*x.0.borrow(), 0);\n+}"}]}