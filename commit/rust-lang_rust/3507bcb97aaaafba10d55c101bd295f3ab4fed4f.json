{"sha": "3507bcb97aaaafba10d55c101bd295f3ab4fed4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MDdiY2I5N2FhYWFmYmExMGQ1NWMxMDFiZDI5NWYzYWI0ZmVkNGY=", "commit": {"author": {"name": "Roberto Vidal", "email": "vidal.roberto.j@gmail.com", "date": "2019-04-11T06:08:19Z"}, "committer": {"name": "Roberto Vidal", "email": "vidal.roberto.j@gmail.com", "date": "2019-04-14T08:04:38Z"}, "message": "Adds support for multiple editor workspaces on initialization\n\nThis is a quick, partial fix for #1104", "tree": {"sha": "e4febb3206524a6f07641c884734afef9c153674", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4febb3206524a6f07641c884734afef9c153674"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3507bcb97aaaafba10d55c101bd295f3ab4fed4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3507bcb97aaaafba10d55c101bd295f3ab4fed4f", "html_url": "https://github.com/rust-lang/rust/commit/3507bcb97aaaafba10d55c101bd295f3ab4fed4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3507bcb97aaaafba10d55c101bd295f3ab4fed4f/comments", "author": {"login": "jrvidal", "id": 1636604, "node_id": "MDQ6VXNlcjE2MzY2MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1636604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrvidal", "html_url": "https://github.com/jrvidal", "followers_url": "https://api.github.com/users/jrvidal/followers", "following_url": "https://api.github.com/users/jrvidal/following{/other_user}", "gists_url": "https://api.github.com/users/jrvidal/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrvidal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrvidal/subscriptions", "organizations_url": "https://api.github.com/users/jrvidal/orgs", "repos_url": "https://api.github.com/users/jrvidal/repos", "events_url": "https://api.github.com/users/jrvidal/events{/privacy}", "received_events_url": "https://api.github.com/users/jrvidal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jrvidal", "id": 1636604, "node_id": "MDQ6VXNlcjE2MzY2MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1636604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrvidal", "html_url": "https://github.com/jrvidal", "followers_url": "https://api.github.com/users/jrvidal/followers", "following_url": "https://api.github.com/users/jrvidal/following{/other_user}", "gists_url": "https://api.github.com/users/jrvidal/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrvidal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrvidal/subscriptions", "organizations_url": "https://api.github.com/users/jrvidal/orgs", "repos_url": "https://api.github.com/users/jrvidal/repos", "events_url": "https://api.github.com/users/jrvidal/events{/privacy}", "received_events_url": "https://api.github.com/users/jrvidal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23b876bc3b00c53ce24b8a99b4f4bf190fc6300e", "url": "https://api.github.com/repos/rust-lang/rust/commits/23b876bc3b00c53ce24b8a99b4f4bf190fc6300e", "html_url": "https://github.com/rust-lang/rust/commit/23b876bc3b00c53ce24b8a99b4f4bf190fc6300e"}], "stats": {"total": 73, "additions": 41, "deletions": 32}, "files": [{"sha": "82f52a6e8b06a9f0bc1ea47779ee5eb44d301052", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3507bcb97aaaafba10d55c101bd295f3ab4fed4f/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3507bcb97aaaafba10d55c101bd295f3ab4fed4f/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=3507bcb97aaaafba10d55c101bd295f3ab4fed4f", "patch": "@@ -40,12 +40,23 @@ fn main_inner() -> Result<()> {\n     run_server(ra_lsp_server::server_capabilities(), receiver, sender, |params, r, s| {\n         let root = params.root_uri.and_then(|it| it.to_file_path().ok()).unwrap_or(cwd);\n \n+        let workspace_roots = params\n+            .workspace_folders\n+            .map(|workspaces| {\n+                workspaces\n+                    .into_iter()\n+                    .filter_map(|it| it.uri.to_file_path().ok())\n+                    .collect::<Vec<_>>()\n+            })\n+            .filter(|workspaces| !workspaces.is_empty())\n+            .unwrap_or_else(|| vec![root]);\n+\n         let opts = params\n             .initialization_options\n             .and_then(|v| InitializationOptions::deserialize(v).ok())\n             .unwrap_or(InitializationOptions::default());\n \n-        ra_lsp_server::main_loop(root, opts, r, s)\n+        ra_lsp_server::main_loop(workspace_roots, opts, r, s)\n     })?;\n     log::info!(\"shutting down IO...\");\n     threads.join()?;"}, {"sha": "07ac4917a292ae92a682a4eabeef43ab30f15262", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3507bcb97aaaafba10d55c101bd295f3ab4fed4f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3507bcb97aaaafba10d55c101bd295f3ab4fed4f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=3507bcb97aaaafba10d55c101bd295f3ab4fed4f", "patch": "@@ -48,7 +48,7 @@ enum Task {\n const THREADPOOL_SIZE: usize = 8;\n \n pub fn main_loop(\n-    ws_root: PathBuf,\n+    ws_roots: Vec<PathBuf>,\n     options: InitializationOptions,\n     msg_receiver: &Receiver<RawMessage>,\n     msg_sender: &Sender<RawMessage>,\n@@ -59,23 +59,26 @@ pub fn main_loop(\n     // FIXME: support dynamic workspace loading.\n     let workspaces = {\n         let ws_worker = workspace_loader();\n-        ws_worker.sender().send(ws_root.clone()).unwrap();\n-        match ws_worker.receiver().recv().unwrap() {\n-            Ok(ws) => vec![ws],\n-            Err(e) => {\n-                log::error!(\"loading workspace failed: {}\", e);\n-\n-                show_message(\n-                    req::MessageType::Error,\n-                    format!(\"rust-analyzer failed to load workspace: {}\", e),\n-                    msg_sender,\n-                );\n-                Vec::new()\n+        let mut loaded_workspaces = Vec::new();\n+        for ws_root in &ws_roots {\n+            ws_worker.sender().send(ws_root.clone()).unwrap();\n+            match ws_worker.receiver().recv().unwrap() {\n+                Ok(ws) => loaded_workspaces.push(ws),\n+                Err(e) => {\n+                    log::error!(\"loading workspace failed: {}\", e);\n+\n+                    show_message(\n+                        req::MessageType::Error,\n+                        format!(\"rust-analyzer failed to load workspace: {}\", e),\n+                        msg_sender,\n+                    );\n+                }\n             }\n         }\n+        loaded_workspaces\n     };\n \n-    let mut state = ServerWorldState::new(ws_root.clone(), workspaces);\n+    let mut state = ServerWorldState::new(ws_roots, workspaces);\n \n     log::info!(\"server initialized, serving requests\");\n "}, {"sha": "45ad8e24ed7b65dcf9848a213e4beeee2e9d92de", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3507bcb97aaaafba10d55c101bd295f3ab4fed4f/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3507bcb97aaaafba10d55c101bd295f3ab4fed4f/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=3507bcb97aaaafba10d55c101bd295f3ab4fed4f", "patch": "@@ -24,7 +24,7 @@ use crate::{\n #[derive(Debug)]\n pub struct ServerWorldState {\n     pub roots_to_scan: usize,\n-    pub root: PathBuf,\n+    pub roots: Vec<PathBuf>,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis_host: AnalysisHost,\n     pub vfs: Arc<RwLock<Vfs>>,\n@@ -37,19 +37,20 @@ pub struct ServerWorld {\n }\n \n impl ServerWorldState {\n-    pub fn new(root: PathBuf, workspaces: Vec<ProjectWorkspace>) -> ServerWorldState {\n+    pub fn new(folder_roots: Vec<PathBuf>, workspaces: Vec<ProjectWorkspace>) -> ServerWorldState {\n         let mut change = AnalysisChange::new();\n \n         let mut roots = Vec::new();\n-        roots.push(IncludeRustFiles::member(root.clone()));\n+        roots.extend(folder_roots.iter().cloned().map(IncludeRustFiles::member));\n         for ws in workspaces.iter() {\n             roots.extend(IncludeRustFiles::from_roots(ws.to_roots()));\n         }\n \n-        let (mut vfs, roots) = Vfs::new(roots);\n-        let roots_to_scan = roots.len();\n-        for r in roots {\n-            let is_local = vfs.root2path(r).starts_with(&root);\n+        let (mut vfs, vfs_roots) = Vfs::new(roots);\n+        let roots_to_scan = vfs_roots.len();\n+        for r in vfs_roots {\n+            let vfs_root_path = vfs.root2path(r);\n+            let is_local = folder_roots.iter().any(|it| vfs_root_path.starts_with(it));\n             change.add_root(SourceRootId(r.0.into()), is_local);\n         }\n \n@@ -68,7 +69,7 @@ impl ServerWorldState {\n         analysis_host.apply_change(change);\n         ServerWorldState {\n             roots_to_scan,\n-            root,\n+            roots: folder_roots,\n             workspaces: Arc::new(workspaces),\n             analysis_host,\n             vfs: Arc::new(RwLock::new(vfs)),\n@@ -90,7 +91,8 @@ impl ServerWorldState {\n             match c {\n                 VfsChange::AddRoot { root, files } => {\n                     let root_path = self.vfs.read().root2path(root);\n-                    if root_path.starts_with(&self.root) {\n+                    let is_local = self.roots.iter().any(|r| root_path.starts_with(r));\n+                    if is_local {\n                         self.roots_to_scan -= 1;\n                         for (file, path, text) in files {\n                             change.add_file("}, {"sha": "4ea6760a1e9957b5a7ff5cd402947a73234009f5", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3507bcb97aaaafba10d55c101bd295f3ab4fed4f/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3507bcb97aaaafba10d55c101bd295f3ab4fed4f/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=3507bcb97aaaafba10d55c101bd295f3ab4fed4f", "patch": "@@ -63,7 +63,7 @@ impl Server {\n             128,\n             move |mut msg_receiver, mut msg_sender| {\n                 main_loop(\n-                    path,\n+                    vec![path],\n                     InitializationOptions::default(),\n                     &mut msg_receiver,\n                     &mut msg_sender,"}, {"sha": "5e9a1934037ad014cf0429030b9da836fa28bf7d", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3507bcb97aaaafba10d55c101bd295f3ab4fed4f/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3507bcb97aaaafba10d55c101bd295f3ab4fed4f/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=3507bcb97aaaafba10d55c101bd295f3ab4fed4f", "patch": "@@ -17,13 +17,6 @@ export class Server {\n         let folder: string = '.';\n         if (workspace.workspaceFolders !== undefined) {\n             folder = workspace.workspaceFolders[0].uri.fsPath.toString();\n-\n-            if (workspace.workspaceFolders.length > 1) {\n-                // Tell the user that we do not support multi-root workspaces yet\n-                window.showWarningMessage(\n-                    'Multi-root workspaces are not currently supported'\n-                );\n-            }\n         }\n \n         const run: lc.Executable = {"}]}