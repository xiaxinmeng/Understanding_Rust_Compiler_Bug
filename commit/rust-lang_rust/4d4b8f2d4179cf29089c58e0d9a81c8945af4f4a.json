{"sha": "4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNGI4ZjJkNDE3OWNmMjkwODljNThlMGQ5YTgxYzg5NDVhZjRmNGE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-08-02T12:24:22Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-08-02T14:21:46Z"}, "message": "Rename rustc_middle::cstore::DepKind to DependencyKind.", "tree": {"sha": "9f9f987b52ef5e7108b9a301fa7bbecede5bfd50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f9f987b52ef5e7108b9a301fa7bbecede5bfd50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a", "html_url": "https://github.com/rust-lang/rust/commit/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c28244cf0fc9868f55070e55b8f332d196eaf3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c28244cf0fc9868f55070e55b8f332d196eaf3f", "html_url": "https://github.com/rust-lang/rust/commit/2c28244cf0fc9868f55070e55b8f332d196eaf3f"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "05a8c010d0cd03ed5e4929e9b39468bfc5d27887", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a", "patch": "@@ -13,7 +13,7 @@ use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LocalDefId, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_index::vec::IndexVec;\n-use rustc_middle::middle::cstore::{CrateSource, DepKind, ExternCrate};\n+use rustc_middle::middle::cstore::{CrateDepKind, CrateSource, ExternCrate};\n use rustc_middle::middle::cstore::{ExternCrateSource, MetadataLoaderDyn};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{self, CrateType, ExternLocation};\n@@ -294,7 +294,7 @@ impl<'a> CrateLoader<'a> {\n         host_lib: Option<Library>,\n         root: Option<&CratePaths>,\n         lib: Library,\n-        dep_kind: DepKind,\n+        dep_kind: CrateDepKind,\n         name: Symbol,\n     ) -> Result<CrateNum, CrateError> {\n         let _prof_timer = self.sess.prof.generic_activity(\"metadata_register_crate\");\n@@ -425,7 +425,7 @@ impl<'a> CrateLoader<'a> {\n         &'b mut self,\n         name: Symbol,\n         span: Span,\n-        dep_kind: DepKind,\n+        dep_kind: CrateDepKind,\n         dep: Option<(&'b CratePaths, &'b CrateDep)>,\n     ) -> CrateNum {\n         if dep.is_none() {\n@@ -438,7 +438,7 @@ impl<'a> CrateLoader<'a> {\n     fn maybe_resolve_crate<'b>(\n         &'b mut self,\n         name: Symbol,\n-        mut dep_kind: DepKind,\n+        mut dep_kind: CrateDepKind,\n         dep: Option<(&'b CratePaths, &'b CrateDep)>,\n     ) -> Result<CrateNum, CrateError> {\n         info!(\"resolving crate `{}`\", name);\n@@ -475,7 +475,7 @@ impl<'a> CrateLoader<'a> {\n             match self.load(&mut locator)? {\n                 Some(res) => (res, None),\n                 None => {\n-                    dep_kind = DepKind::MacrosOnly;\n+                    dep_kind = CrateDepKind::MacrosOnly;\n                     match self.load_proc_macro(&mut locator, path_kind)? {\n                         Some(res) => res,\n                         None => return Err(locator.into_error()),\n@@ -488,7 +488,7 @@ impl<'a> CrateLoader<'a> {\n             (LoadResult::Previous(cnum), None) => {\n                 let data = self.cstore.get_crate_data(cnum);\n                 if data.is_proc_macro_crate() {\n-                    dep_kind = DepKind::MacrosOnly;\n+                    dep_kind = CrateDepKind::MacrosOnly;\n                 }\n                 data.update_dep_kind(|data_dep_kind| cmp::max(data_dep_kind, dep_kind));\n                 Ok(cnum)\n@@ -548,7 +548,7 @@ impl<'a> CrateLoader<'a> {\n         crate_root: &CrateRoot<'_>,\n         metadata: &MetadataBlob,\n         krate: CrateNum,\n-        dep_kind: DepKind,\n+        dep_kind: CrateDepKind,\n     ) -> Result<CrateNumMap, CrateError> {\n         debug!(\"resolving deps of external crate\");\n         if crate_root.is_proc_macro_crate() {\n@@ -567,7 +567,7 @@ impl<'a> CrateLoader<'a> {\n                 dep.name, dep.hash, dep.extra_filename\n             );\n             let dep_kind = match dep_kind {\n-                DepKind::MacrosOnly => DepKind::MacrosOnly,\n+                CrateDepKind::MacrosOnly => CrateDepKind::MacrosOnly,\n                 _ => dep.kind,\n             };\n             let cnum = self.maybe_resolve_crate(dep.name, dep_kind, Some((root, &dep)))?;\n@@ -634,7 +634,7 @@ impl<'a> CrateLoader<'a> {\n                 self.inject_dependency_if(cnum, \"a panic runtime\", &|data| {\n                     data.needs_panic_runtime()\n                 });\n-                runtime_found = runtime_found || data.dep_kind() == DepKind::Explicit;\n+                runtime_found = runtime_found || data.dep_kind() == CrateDepKind::Explicit;\n             }\n         });\n \n@@ -663,7 +663,7 @@ impl<'a> CrateLoader<'a> {\n         };\n         info!(\"panic runtime not found -- loading {}\", name);\n \n-        let cnum = self.resolve_crate(name, DUMMY_SP, DepKind::Implicit, None);\n+        let cnum = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit, None);\n         let data = self.cstore.get_crate_data(cnum);\n \n         // Sanity check the loaded crate to ensure it is indeed a panic runtime\n@@ -693,7 +693,7 @@ impl<'a> CrateLoader<'a> {\n             info!(\"loading profiler\");\n \n             let name = sym::profiler_builtins;\n-            let cnum = self.resolve_crate(name, DUMMY_SP, DepKind::Implicit, None);\n+            let cnum = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit, None);\n             let data = self.cstore.get_crate_data(cnum);\n \n             // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n@@ -891,9 +891,9 @@ impl<'a> CrateLoader<'a> {\n                     None => item.ident.name,\n                 };\n                 let dep_kind = if attr::contains_name(&item.attrs, sym::no_link) {\n-                    DepKind::MacrosOnly\n+                    CrateDepKind::MacrosOnly\n                 } else {\n-                    DepKind::Explicit\n+                    CrateDepKind::Explicit\n                 };\n \n                 let cnum = self.resolve_crate(name, item.span, dep_kind, None);\n@@ -915,7 +915,7 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     pub fn process_path_extern(&mut self, name: Symbol, span: Span) -> CrateNum {\n-        let cnum = self.resolve_crate(name, span, DepKind::Explicit, None);\n+        let cnum = self.resolve_crate(name, span, CrateDepKind::Explicit, None);\n \n         self.update_extern_crate(\n             cnum,\n@@ -932,6 +932,6 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     pub fn maybe_process_path_extern(&mut self, name: Symbol) -> Option<CrateNum> {\n-        self.maybe_resolve_crate(name, DepKind::Explicit, None).ok()\n+        self.maybe_resolve_crate(name, CrateDepKind::Explicit, None).ok()\n     }\n }"}, {"sha": "bb5ae4d0557c9866a221ae6d7053b519c2397f9b", "filename": "src/librustc_metadata/dependency_format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a/src%2Flibrustc_metadata%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a/src%2Flibrustc_metadata%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdependency_format.rs?ref=4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a", "patch": "@@ -56,7 +56,7 @@ use crate::creader::CStore;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::CrateNum;\n use rustc_middle::middle::cstore::LinkagePreference::{self, RequireDynamic, RequireStatic};\n-use rustc_middle::middle::cstore::{self, DepKind};\n+use rustc_middle::middle::cstore::{self, CrateDepKind};\n use rustc_middle::middle::dependency_format::{Dependencies, DependencyList, Linkage};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::CrateType;\n@@ -188,7 +188,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n         let src = tcx.used_crate_source(cnum);\n         if src.dylib.is_none()\n             && !formats.contains_key(&cnum)\n-            && tcx.dep_kind(cnum) == DepKind::Explicit\n+            && tcx.dep_kind(cnum) == CrateDepKind::Explicit\n         {\n             assert!(src.rlib.is_some() || src.rmeta.is_some());\n             log::info!(\"adding staticlib: {}\", tcx.crate_name(cnum));\n@@ -284,7 +284,7 @@ fn attempt_static(tcx: TyCtxt<'_>) -> Option<DependencyList> {\n     let last_crate = tcx.crates().len();\n     let mut ret = (1..last_crate + 1)\n         .map(|cnum| {\n-            if tcx.dep_kind(CrateNum::new(cnum)) == DepKind::Explicit {\n+            if tcx.dep_kind(CrateNum::new(cnum)) == CrateDepKind::Explicit {\n                 Linkage::Static\n             } else {\n                 Linkage::NotLinked"}, {"sha": "9afab42d1bbc36e785c1a719a2a09b9a5ef885ab", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a", "patch": "@@ -100,7 +100,7 @@ crate struct CrateMetadata {\n     /// Same ID set as `cnum_map` plus maybe some injected crates like panic runtime.\n     dependencies: Lock<Vec<CrateNum>>,\n     /// How to link (or not link) this crate to the currently compiled crate.\n-    dep_kind: Lock<DepKind>,\n+    dep_kind: Lock<CrateDepKind>,\n     /// Filesystem location of this crate.\n     source: CrateSource,\n     /// Whether or not this crate should be consider a private dependency\n@@ -1670,7 +1670,7 @@ impl CrateMetadata {\n         raw_proc_macros: Option<&'static [ProcMacro]>,\n         cnum: CrateNum,\n         cnum_map: CrateNumMap,\n-        dep_kind: DepKind,\n+        dep_kind: CrateDepKind,\n         source: CrateSource,\n         private_dep: bool,\n         host_hash: Option<Svh>,\n@@ -1728,11 +1728,11 @@ impl CrateMetadata {\n         &self.source\n     }\n \n-    crate fn dep_kind(&self) -> DepKind {\n+    crate fn dep_kind(&self) -> CrateDepKind {\n         *self.dep_kind.lock()\n     }\n \n-    crate fn update_dep_kind(&self, f: impl FnOnce(DepKind) -> DepKind) {\n+    crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {\n         self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))\n     }\n "}, {"sha": "fa8724251978b79c9c8627a1da0ca5d3afe4c3d2", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def_id::{DefId, DefIndex};\n use rustc_hir::lang_items;\n use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n use rustc_middle::hir::exports::Export;\n-use rustc_middle::middle::cstore::{DepKind, ForeignModule, LinkagePreference, NativeLib};\n+use rustc_middle::middle::cstore::{CrateDepKind, ForeignModule, LinkagePreference, NativeLib};\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir;\n use rustc_middle::ty::{self, ReprOptions, Ty};\n@@ -226,7 +226,7 @@ crate struct CrateDep {\n     pub name: Symbol,\n     pub hash: Svh,\n     pub host_hash: Option<Svh>,\n-    pub kind: DepKind,\n+    pub kind: CrateDepKind,\n     pub extra_filename: String,\n }\n "}, {"sha": "0a34c06adf063bae570f3c72b4b1c98d2bd15ddd", "filename": "src/librustc_middle/middle/cstore.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a/src%2Flibrustc_middle%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a/src%2Flibrustc_middle%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fcstore.rs?ref=4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a", "patch": "@@ -40,7 +40,7 @@ impl CrateSource {\n \n #[derive(RustcEncodable, RustcDecodable, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]\n #[derive(HashStable)]\n-pub enum DepKind {\n+pub enum CrateDepKind {\n     /// A dependency that is only used for its macros.\n     MacrosOnly,\n     /// A dependency that is always injected into the dependency list and so\n@@ -51,11 +51,11 @@ pub enum DepKind {\n     Explicit,\n }\n \n-impl DepKind {\n+impl CrateDepKind {\n     pub fn macros_only(self) -> bool {\n         match self {\n-            DepKind::MacrosOnly => true,\n-            DepKind::Implicit | DepKind::Explicit => false,\n+            CrateDepKind::MacrosOnly => true,\n+            CrateDepKind::Implicit | CrateDepKind::Explicit => false,\n         }\n     }\n }"}, {"sha": "a5562c867d7c690c3d9cd5475624d5a8b2868e42", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a", "patch": "@@ -1180,7 +1180,7 @@ rustc_queries! {\n     }\n \n     Other {\n-        query dep_kind(_: CrateNum) -> DepKind {\n+        query dep_kind(_: CrateNum) -> CrateDepKind {\n             eval_always\n             desc { \"fetching what a dependency looks like\" }\n         }"}, {"sha": "b39c0b5190a6d951c59cae210ccbd49dcee06544", "filename": "src/librustc_middle/ty/query/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a/src%2Flibrustc_middle%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a/src%2Flibrustc_middle%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fmod.rs?ref=4d4b8f2d4179cf29089c58e0d9a81c8945af4f4a", "patch": "@@ -1,10 +1,10 @@\n-use crate::dep_graph::{self, DepNode, DepNodeParams};\n+use crate::dep_graph::{self, DepKind, DepNode, DepNodeParams};\n use crate::hir::exports::Export;\n use crate::hir::map;\n use crate::infer::canonical::{self, Canonical};\n use crate::lint::LintLevelMap;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n-use crate::middle::cstore::{CrateSource, DepKind};\n+use crate::middle::cstore::{CrateDepKind, CrateSource};\n use crate::middle::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLib};\n use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use crate::middle::lib_features::LibFeatures;\n@@ -161,7 +161,7 @@ pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool\n     // hit the cache instead of having to go through `force_from_dep_node`.\n     // This assertion makes sure, we actually keep applying the solution above.\n     debug_assert!(\n-        dep_node.kind != crate::dep_graph::DepKind::codegen_unit,\n+        dep_node.kind != DepKind::codegen_unit,\n         \"calling force_from_dep_node() on DepKind::codegen_unit\"\n     );\n \n@@ -172,14 +172,14 @@ pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool\n     rustc_dep_node_force!([dep_node, tcx]\n         // These are inputs that are expected to be pre-allocated and that\n         // should therefore always be red or green already.\n-        crate::dep_graph::DepKind::CrateMetadata |\n+        DepKind::CrateMetadata |\n \n         // These are anonymous nodes.\n-        crate::dep_graph::DepKind::TraitSelect |\n+        DepKind::TraitSelect |\n \n         // We don't have enough information to reconstruct the query key of\n         // these.\n-        crate::dep_graph::DepKind::CompileCodegenUnit => {\n+        DepKind::CompileCodegenUnit => {\n             bug!(\"force_from_dep_node: encountered {:?}\", dep_node)\n         }\n     );"}]}