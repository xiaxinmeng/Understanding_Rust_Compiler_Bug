{"sha": "c56c7e2d02920a8ec2dcb67c5f18d589af7ceb1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NmM3ZTJkMDI5MjBhOGVjMmRjYjY3YzVmMThkNTg5YWY3Y2ViMWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-23T05:14:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-23T05:14:21Z"}, "message": "Auto merge of #5695 - esamudera:lint_mem_uninitialized, r=phansch,oli-obk\n\nNew lint: suggest `ptr::read` instead of `mem::replace(..., uninitialized())`\n\nresolves: #5575\n\nchangelog: improvements to `MEM_REPLACE_WITH_UNINIT`:\n- add a new test case in `tests/ui/repl_uninit.rs` to cover the case of replacing with `mem::MaybeUninit::uninit().assume_init()`.\n- modify the existing `MEM_REPLACE_WITH_UNINIT` when replacing with `mem::uninitialized` to suggest using `ptr::read` instead.\n- lint with `MEM_REPLACE_WITH_UNINIT` when replacing with `mem::MaybeUninit::uninit().assume_init()`", "tree": {"sha": "efe8958afa6ab59770472c3fd139b2e468324d77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efe8958afa6ab59770472c3fd139b2e468324d77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c56c7e2d02920a8ec2dcb67c5f18d589af7ceb1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c56c7e2d02920a8ec2dcb67c5f18d589af7ceb1c", "html_url": "https://github.com/rust-lang/rust/commit/c56c7e2d02920a8ec2dcb67c5f18d589af7ceb1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c56c7e2d02920a8ec2dcb67c5f18d589af7ceb1c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa0f6a8dbf049cbae679dc82d653371c5a8c0be4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa0f6a8dbf049cbae679dc82d653371c5a8c0be4", "html_url": "https://github.com/rust-lang/rust/commit/fa0f6a8dbf049cbae679dc82d653371c5a8c0be4"}, {"sha": "8c1ee063bb67b20ac17603d0f0025b48b958cc08", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c1ee063bb67b20ac17603d0f0025b48b958cc08", "html_url": "https://github.com/rust-lang/rust/commit/8c1ee063bb67b20ac17603d0f0025b48b958cc08"}], "stats": {"total": 107, "additions": 71, "deletions": 36}, "files": [{"sha": "e2672e02b36da586d004b85d4d5241050369eecb", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 54, "deletions": 28, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/c56c7e2d02920a8ec2dcb67c5f18d589af7ceb1c/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56c7e2d02920a8ec2dcb67c5f18d589af7ceb1c/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=c56c7e2d02920a8ec2dcb67c5f18d589af7ceb1c", "patch": "@@ -135,33 +135,59 @@ fn check_replace_option_with_none(cx: &LateContext<'_, '_>, src: &Expr<'_>, dest\n     }\n }\n \n-fn check_replace_with_uninit(cx: &LateContext<'_, '_>, src: &Expr<'_>, expr_span: Span) {\n-    if let ExprKind::Call(ref repl_func, ref repl_args) = src.kind {\n-        if_chain! {\n-            if repl_args.is_empty();\n-            if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n-            if let Some(repl_def_id) = cx.tables.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n-            then {\n-                if cx.tcx.is_diagnostic_item(sym::mem_uninitialized, repl_def_id) {\n-                    span_lint_and_help(\n-                        cx,\n-                        MEM_REPLACE_WITH_UNINIT,\n-                        expr_span,\n-                        \"replacing with `mem::uninitialized()`\",\n-                        None,\n-                        \"consider using the `take_mut` crate instead\",\n-                    );\n-                } else if cx.tcx.is_diagnostic_item(sym::mem_zeroed, repl_def_id) &&\n-                        !cx.tables.expr_ty(src).is_primitive() {\n-                    span_lint_and_help(\n-                        cx,\n-                        MEM_REPLACE_WITH_UNINIT,\n-                        expr_span,\n-                        \"replacing with `mem::zeroed()`\",\n-                        None,\n-                        \"consider using a default value or the `take_mut` crate instead\",\n-                    );\n-                }\n+fn check_replace_with_uninit(cx: &LateContext<'_, '_>, src: &Expr<'_>, dest: &Expr<'_>, expr_span: Span) {\n+    if_chain! {\n+        // check if replacement is mem::MaybeUninit::uninit().assume_init()\n+        if let Some(method_def_id) = cx.tables.type_dependent_def_id(src.hir_id);\n+        if cx.tcx.is_diagnostic_item(sym::assume_init, method_def_id);\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_sugg(\n+                cx,\n+                MEM_REPLACE_WITH_UNINIT,\n+                expr_span,\n+                \"replacing with `mem::MaybeUninit::uninit().assume_init()`\",\n+                \"consider using\",\n+                format!(\n+                    \"std::ptr::read({})\",\n+                    snippet_with_applicability(cx, dest.span, \"\", &mut applicability)\n+                ),\n+                applicability,\n+            );\n+            return;\n+        }\n+    }\n+\n+    if_chain! {\n+        if let ExprKind::Call(ref repl_func, ref repl_args) = src.kind;\n+        if repl_args.is_empty();\n+        if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n+        if let Some(repl_def_id) = cx.tables.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n+        then {\n+            if cx.tcx.is_diagnostic_item(sym::mem_uninitialized, repl_def_id) {\n+                let mut applicability = Applicability::MachineApplicable;\n+                span_lint_and_sugg(\n+                    cx,\n+                    MEM_REPLACE_WITH_UNINIT,\n+                    expr_span,\n+                    \"replacing with `mem::uninitialized()`\",\n+                    \"consider using\",\n+                    format!(\n+                        \"std::ptr::read({})\",\n+                        snippet_with_applicability(cx, dest.span, \"\", &mut applicability)\n+                    ),\n+                    applicability,\n+                );\n+            } else if cx.tcx.is_diagnostic_item(sym::mem_zeroed, repl_def_id) &&\n+                    !cx.tables.expr_ty(src).is_primitive() {\n+                span_lint_and_help(\n+                    cx,\n+                    MEM_REPLACE_WITH_UNINIT,\n+                    expr_span,\n+                    \"replacing with `mem::zeroed()`\",\n+                    None,\n+                    \"consider using a default value or the `take_mut` crate instead\",\n+                );\n             }\n         }\n     }\n@@ -209,7 +235,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n             if let [dest, src] = &**func_args;\n             then {\n                 check_replace_option_with_none(cx, src, dest, expr.span);\n-                check_replace_with_uninit(cx, src, expr.span);\n+                check_replace_with_uninit(cx, src, dest, expr.span);\n                 check_replace_with_default(cx, src, dest, expr.span);\n             }\n         }"}, {"sha": "ad5b8e4857d173f50bcbcd2bc9565e8b6c2d5b6a", "filename": "tests/ui/repl_uninit.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c56c7e2d02920a8ec2dcb67c5f18d589af7ceb1c/tests%2Fui%2Frepl_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56c7e2d02920a8ec2dcb67c5f18d589af7ceb1c/tests%2Fui%2Frepl_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepl_uninit.rs?ref=c56c7e2d02920a8ec2dcb67c5f18d589af7ceb1c", "patch": "@@ -17,6 +17,12 @@ fn main() {\n         std::mem::forget(mem::replace(&mut v, new_v));\n     }\n \n+    unsafe {\n+        let taken_v = mem::replace(&mut v, mem::MaybeUninit::uninit().assume_init());\n+        let new_v = might_panic(taken_v);\n+        std::mem::forget(mem::replace(&mut v, new_v));\n+    }\n+\n     unsafe {\n         let taken_v = mem::replace(&mut v, mem::zeroed());\n         let new_v = might_panic(taken_v);"}, {"sha": "09468eeaea4bf9d18dacd1c5c03809c5032909bd", "filename": "tests/ui/repl_uninit.stderr", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c56c7e2d02920a8ec2dcb67c5f18d589af7ceb1c/tests%2Fui%2Frepl_uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c56c7e2d02920a8ec2dcb67c5f18d589af7ceb1c/tests%2Fui%2Frepl_uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepl_uninit.stderr?ref=c56c7e2d02920a8ec2dcb67c5f18d589af7ceb1c", "patch": "@@ -2,26 +2,29 @@ error: replacing with `mem::uninitialized()`\n   --> $DIR/repl_uninit.rs:15:23\n    |\n LL |         let taken_v = mem::replace(&mut v, mem::uninitialized());\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::ptr::read(&mut v)`\n    |\n    = note: `-D clippy::mem-replace-with-uninit` implied by `-D warnings`\n-   = help: consider using the `take_mut` crate instead\n \n-error: replacing with `mem::zeroed()`\n+error: replacing with `mem::MaybeUninit::uninit().assume_init()`\n   --> $DIR/repl_uninit.rs:21:23\n    |\n+LL |         let taken_v = mem::replace(&mut v, mem::MaybeUninit::uninit().assume_init());\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::ptr::read(&mut v)`\n+\n+error: replacing with `mem::zeroed()`\n+  --> $DIR/repl_uninit.rs:27:23\n+   |\n LL |         let taken_v = mem::replace(&mut v, mem::zeroed());\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a default value or the `take_mut` crate instead\n \n error: replacing with `mem::uninitialized()`\n-  --> $DIR/repl_uninit.rs:33:28\n+  --> $DIR/repl_uninit.rs:39:28\n    |\n LL |     let taken_u = unsafe { mem::replace(uref, mem::uninitialized()) };\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using the `take_mut` crate instead\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::ptr::read(uref)`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n "}]}