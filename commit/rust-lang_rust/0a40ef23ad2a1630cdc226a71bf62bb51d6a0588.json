{"sha": "0a40ef23ad2a1630cdc226a71bf62bb51d6a0588", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNDBlZjIzYWQyYTE2MzBjZGMyMjZhNzFiZjYyYmI1MWQ2YTA1ODg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-09T08:27:07Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T04:53:38Z"}, "message": "Cleanup parse_seq_* methods + record trailing separators.", "tree": {"sha": "84b3d9ff39bd21d844a99ceaf111cb3f37cb5c30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84b3d9ff39bd21d844a99ceaf111cb3f37cb5c30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a40ef23ad2a1630cdc226a71bf62bb51d6a0588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a40ef23ad2a1630cdc226a71bf62bb51d6a0588", "html_url": "https://github.com/rust-lang/rust/commit/0a40ef23ad2a1630cdc226a71bf62bb51d6a0588", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a40ef23ad2a1630cdc226a71bf62bb51d6a0588/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "694b3c3ef2c7322c2d490ac4896b74ac7b877cc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/694b3c3ef2c7322c2d490ac4896b74ac7b877cc8", "html_url": "https://github.com/rust-lang/rust/commit/694b3c3ef2c7322c2d490ac4896b74ac7b877cc8"}], "stats": {"total": 77, "additions": 35, "deletions": 42}, "files": [{"sha": "ca066269f784b2616a2eebc19a134b5474172a41", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 35, "deletions": 42, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/0a40ef23ad2a1630cdc226a71bf62bb51d6a0588/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a40ef23ad2a1630cdc226a71bf62bb51d6a0588/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0a40ef23ad2a1630cdc226a71bf62bb51d6a0588", "patch": "@@ -890,14 +890,13 @@ impl<'a> Parser<'a> {\n     /// Parses a sequence, including the closing delimiter. The function\n     /// `f` must consume tokens until reaching the next separator or\n     /// closing bracket.\n-    pub fn parse_seq_to_end<T, F>(&mut self,\n-                                  ket: &TokenKind,\n-                                  sep: SeqSep,\n-                                  f: F)\n-                                  -> PResult<'a, Vec<T>> where\n-        F: FnMut(&mut Parser<'a>) -> PResult<'a,  T>,\n-    {\n-        let (val, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;\n+    pub fn parse_seq_to_end<T>(\n+        &mut self,\n+        ket: &TokenKind,\n+        sep: SeqSep,\n+        f: impl FnMut(&mut Parser<'a>) -> PResult<'a,  T>,\n+    ) -> PResult<'a, Vec<T>> {\n+        let (val, _, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;\n         if !recovered {\n             self.bump();\n         }\n@@ -907,39 +906,39 @@ impl<'a> Parser<'a> {\n     /// Parses a sequence, not including the closing delimiter. The function\n     /// `f` must consume tokens until reaching the next separator or\n     /// closing bracket.\n-    pub fn parse_seq_to_before_end<T, F>(\n+    pub fn parse_seq_to_before_end<T>(\n         &mut self,\n         ket: &TokenKind,\n         sep: SeqSep,\n-        f: F,\n-    ) -> PResult<'a, (Vec<T>, bool)>\n-        where F: FnMut(&mut Parser<'a>) -> PResult<'a, T>\n-    {\n+        f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n+    ) -> PResult<'a, (Vec<T>, bool, bool)> {\n         self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)\n     }\n \n-    crate fn parse_seq_to_before_tokens<T, F>(\n+    fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {\n+        kets.iter().any(|k| {\n+            match expect {\n+                TokenExpectType::Expect => self.check(k),\n+                TokenExpectType::NoExpect => self.token == **k,\n+            }\n+        })\n+    }\n+\n+    crate fn parse_seq_to_before_tokens<T>(\n         &mut self,\n         kets: &[&TokenKind],\n         sep: SeqSep,\n         expect: TokenExpectType,\n-        mut f: F,\n-    ) -> PResult<'a, (Vec<T>, bool /* recovered */)>\n-        where F: FnMut(&mut Parser<'a>) -> PResult<'a, T>\n-    {\n+        mut f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n+    ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {\n         let mut first = true;\n         let mut recovered = false;\n+        let mut trailing = false;\n         let mut v = vec![];\n-        while !kets.iter().any(|k| {\n-                match expect {\n-                    TokenExpectType::Expect => self.check(k),\n-                    TokenExpectType::NoExpect => self.token == **k,\n-                }\n-            }) {\n-            match self.token.kind {\n-                token::CloseDelim(..) | token::Eof => break,\n-                _ => {}\n-            };\n+        while !self.expect_any_with_type(kets, expect) {\n+            if let token::CloseDelim(..) | token::Eof = self.token.kind {\n+                break\n+            }\n             if let Some(ref t) = sep.sep {\n                 if first {\n                     first = false;\n@@ -973,40 +972,34 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n             }\n-            if sep.trailing_sep_allowed && kets.iter().any(|k| {\n-                match expect {\n-                    TokenExpectType::Expect => self.check(k),\n-                    TokenExpectType::NoExpect => self.token == **k,\n-                }\n-            }) {\n+            if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {\n+                trailing = true;\n                 break;\n             }\n \n             let t = f(self)?;\n             v.push(t);\n         }\n \n-        Ok((v, recovered))\n+        Ok((v, trailing, recovered))\n     }\n \n     /// Parses a sequence, including the closing delimiter. The function\n     /// `f` must consume tokens until reaching the next separator or\n     /// closing bracket.\n-    fn parse_unspanned_seq<T, F>(\n+    fn parse_unspanned_seq<T>(\n         &mut self,\n         bra: &TokenKind,\n         ket: &TokenKind,\n         sep: SeqSep,\n-        f: F,\n-    ) -> PResult<'a, Vec<T>> where\n-        F: FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n-    {\n+        f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n+    ) -> PResult<'a, (Vec<T>, bool)> {\n         self.expect(bra)?;\n-        let (result, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;\n+        let (result, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;\n         if !recovered {\n             self.eat(ket);\n         }\n-        Ok(result)\n+        Ok((result, trailing))\n     }\n \n     /// Advance the parser by one token"}]}