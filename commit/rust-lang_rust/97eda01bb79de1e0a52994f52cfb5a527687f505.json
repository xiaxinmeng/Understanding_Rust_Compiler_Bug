{"sha": "97eda01bb79de1e0a52994f52cfb5a527687f505", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZWRhMDFiYjc5ZGUxZTBhNTI5OTRmNTJjZmI1YTUyNzY4N2Y1MDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-16T02:52:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-16T02:52:47Z"}, "message": "Auto merge of #70034 - Dylan-DPC:rollup-5yg771j, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #69686 (Use `pprust` to print attributes in rustdoc)\n - #69858 (std: on Windows, use GetSystemTimePreciseAsFileTime if it is available)\n - #69917 (Cleanup E0412 and E0422)\n - #69964 (Add Node.js to PR CI image)\n - #69992 (Block version-specific docs from search engines)\n - #69995 (Add more context to the literal overflow message)\n - #69998 (Add long error explanation for E0634)\n - #70014 (Small fixes in rustdoc book)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "e672e08f84632cbef14a7aec025e360f907b4f2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e672e08f84632cbef14a7aec025e360f907b4f2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97eda01bb79de1e0a52994f52cfb5a527687f505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97eda01bb79de1e0a52994f52cfb5a527687f505", "html_url": "https://github.com/rust-lang/rust/commit/97eda01bb79de1e0a52994f52cfb5a527687f505", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97eda01bb79de1e0a52994f52cfb5a527687f505/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "html_url": "https://github.com/rust-lang/rust/commit/45ebd5808afd3df7ba842797c0fcd4447ddf30fb"}, {"sha": "6b50a4cebb55db54104a071c74f2fc74de17b6af", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b50a4cebb55db54104a071c74f2fc74de17b6af", "html_url": "https://github.com/rust-lang/rust/commit/6b50a4cebb55db54104a071c74f2fc74de17b6af"}], "stats": {"total": 263, "additions": 177, "deletions": 86}, "files": [{"sha": "66fd2985cb4593ae3b35a33c51c1e93023467a89", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -607,7 +607,6 @@ impl Step for RustdocTheme {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RustdocJSStd {\n-    pub host: Interned<String>,\n     pub target: Interned<String>,\n }\n \n@@ -621,13 +620,16 @@ impl Step for RustdocJSStd {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(RustdocJSStd { host: run.host, target: run.target });\n+        run.builder.ensure(RustdocJSStd { target: run.target });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n         if let Some(ref nodejs) = builder.config.nodejs {\n             let mut command = Command::new(nodejs);\n-            command.args(&[\"src/tools/rustdoc-js-std/tester.js\", &*self.host]);\n+            command\n+                .arg(builder.src.join(\"src/tools/rustdoc-js-std/tester.js\"))\n+                .arg(builder.doc_out(self.target))\n+                .arg(builder.src.join(\"src/test/rustdoc-js-std\"));\n             builder.ensure(crate::doc::Std { target: self.target, stage: builder.top_stage });\n             builder.run(&mut command);\n         } else {"}, {"sha": "4cd9e164558c0213015b5530fa68565c442b61aa", "filename": "src/ci/docker/x86_64-gnu-llvm-7/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-7%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-7%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-7%2FDockerfile?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -16,7 +16,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config \\\n   zlib1g-dev \\\n-  xz-utils\n+  xz-utils \\\n+  nodejs\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "3a2552e9a159bcafe7244be5b96055b11c8d7d28", "filename": "src/doc/robots.txt", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Fdoc%2Frobots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Fdoc%2Frobots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frobots.txt?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -1,21 +1,6 @@\n User-agent: *\n-Disallow: /0.3/\n-Disallow: /0.4/\n-Disallow: /0.5/\n-Disallow: /0.6/\n-Disallow: /0.7/\n-Disallow: /0.8/\n-Disallow: /0.9/\n-Disallow: /0.10/\n-Disallow: /0.11.0/\n-Disallow: /0.12.0/\n-Disallow: /1.0.0-alpha/\n-Disallow: /1.0.0-alpha.2/\n-Disallow: /1.0.0-beta/\n-Disallow: /1.0.0-beta.2/\n-Disallow: /1.0.0-beta.3/\n-Disallow: /1.0.0-beta.4/\n-Disallow: /1.0.0-beta.5/\n+Disallow: /1.\n+Disallow: /0.\n Disallow: /book/first-edition/\n Disallow: /book/second-edition/\n Disallow: /stable/book/first-edition/"}, {"sha": "7c12d23e6495c381bc6fcfdb5b59a09852c1c5d6", "filename": "src/doc/rustdoc/src/advanced-features.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -4,7 +4,7 @@ The features listed on this page fall outside the rest of the main categories.\n \n ## `#[cfg(doc)]`: Documenting platform-/feature-specific information\n \n-For conditional compilation, Rustdoc treats your crate the same way the compiler does: Only things\n+For conditional compilation, Rustdoc treats your crate the same way the compiler does. Only things\n from the host target are available (or from the given `--target` if present), and everything else is\n \"filtered out\" from the crate. This can cause problems if your crate is providing different things\n on different targets and you want your documentation to reflect all the available items you"}, {"sha": "ddbe26389fdc82206ff3d36b1c9824b91676702c", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -79,8 +79,8 @@ Rustdoc only supports HTML output, and so this flag is redundant today.\n Using this flag looks like this:\n \n ```bash\n-$ rustdoc src/lib.rs -o target\\\\doc\n-$ rustdoc src/lib.rs --output target\\\\doc\n+$ rustdoc src/lib.rs -o target/doc\n+$ rustdoc src/lib.rs --output target/doc\n ```\n \n By default, `rustdoc`'s output appears in a directory named `doc` in"}, {"sha": "78181156e250f50cbfabf2e9e67ff49b9e230c6e", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -314,7 +314,7 @@ only shows the part you care about.\n `should_panic` tells `rustdoc` that the code should compile correctly, but\n not actually pass as a test.\n \n-```text\n+```rust\n /// ```no_run\n /// loop {\n ///     println!(\"Hello, world\");"}, {"sha": "adcebc832bc0bb9c8640826a1eebfd3912eee24f", "filename": "src/doc/rustdoc/src/what-is-rustdoc.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -78,8 +78,8 @@ $ cargo doc\n Internally, this calls out to `rustdoc` like this:\n \n ```bash\n-$ rustdoc --crate-name docs srclib.rs -o <path>\\docs\\target\\doc -L\n-dependency=<path>docs\\target\\debug\\deps\n+$ rustdoc --crate-name docs src/lib.rs -o <path>/docs/target/doc -L\n+dependency=<path>/docs/target/debug/deps\n ```\n \n You can see this with `cargo doc --verbose`.\n@@ -128,4 +128,4 @@ Cargo currently does not understand standalone Markdown files, unfortunately.\n ## Summary\n \n This covers the simplest use-cases of `rustdoc`. The rest of this book will\n-explain all of the options that `rustdoc` has, and how to use them.\n\\ No newline at end of file\n+explain all of the options that `rustdoc` has, and how to use them."}, {"sha": "59a030bc4c683c2366183ea5ac08655fe1ffc999", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -351,6 +351,7 @@ E0626: include_str!(\"./error_codes/E0626.md\"),\n E0627: include_str!(\"./error_codes/E0627.md\"),\n E0631: include_str!(\"./error_codes/E0631.md\"),\n E0633: include_str!(\"./error_codes/E0633.md\"),\n+E0634: include_str!(\"./error_codes/E0634.md\"),\n E0635: include_str!(\"./error_codes/E0635.md\"),\n E0636: include_str!(\"./error_codes/E0636.md\"),\n E0637: include_str!(\"./error_codes/E0637.md\"),\n@@ -589,7 +590,6 @@ E0748: include_str!(\"./error_codes/E0748.md\"),\n     E0630,\n     E0632, // cannot provide explicit generic arguments when `impl Trait` is\n            // used in argument position\n-    E0634, // type has conflicting packed representaton hints\n     E0640, // infer outlives requirements\n //  E0645, // trait aliases not finished\n     E0657, // `impl Trait` can only capture lifetimes bound at the fn level"}, {"sha": "d9ebc852bbab7465d37cf2e03f61e6bc76dc3a0a", "filename": "src/librustc_error_codes/error_codes/E0412.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibrustc_error_codes%2Ferror_codes%2FE0412.md", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibrustc_error_codes%2Ferror_codes%2FE0412.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0412.md?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -1,4 +1,4 @@\n-The type name used is not in scope.\n+A used type name is not in scope.\n \n Erroneous code examples:\n "}, {"sha": "828a52e73411469ca949d0acdeec406773a5a6d1", "filename": "src/librustc_error_codes/error_codes/E0422.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibrustc_error_codes%2Ferror_codes%2FE0422.md", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibrustc_error_codes%2Ferror_codes%2FE0422.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0422.md?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -1,4 +1,5 @@\n-You are trying to use an identifier that is either undefined or not a struct.\n+An identifier that is neither defined nor a struct was used.\n+\n Erroneous code example:\n \n ```compile_fail,E0422"}, {"sha": "0c4ed2596e2aa9562d5eed10f10fd10aa8b1f4a5", "filename": "src/librustc_error_codes/error_codes/E0634.md", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibrustc_error_codes%2Ferror_codes%2FE0634.md", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibrustc_error_codes%2Ferror_codes%2FE0634.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0634.md?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -0,0 +1,20 @@\n+A type has conflicting `packed` representation hints.\n+\n+Erroneous code examples:\n+\n+```compile_fail,E0634\n+#[repr(packed, packed(2))] // error!\n+struct Company(i32);\n+\n+#[repr(packed(2))] // error!\n+#[repr(packed)]\n+struct Company(i32);\n+```\n+\n+You cannot use conflicting `packed` hints on a same type. If you want to pack a\n+type to a given size, you should provide a size to packed:\n+\n+```\n+#[repr(packed)] // ok!\n+struct Company(i32);\n+```"}, {"sha": "b5c0296e297e0a5b61455b8ea6599b1c82a5048c", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -165,7 +165,7 @@ fn report_bin_hex_error(\n         let mut err = lint.build(&format!(\"literal out of range for {}\", t));\n         err.note(&format!(\n             \"the literal `{}` (decimal `{}`) does not fit into \\\n-                    an `{}` and will become `{}{}`\",\n+             the type `{}` and will become `{}{}`\",\n             repr_str, val, t, actually, t\n         ));\n         if let Some(sugg_ty) = get_type_suggestion(&cx.tables.node_type(expr.hir_id), val, negative)\n@@ -242,7 +242,7 @@ fn lint_int_literal<'a, 'tcx>(\n     v: u128,\n ) {\n     let int_type = t.normalize(cx.sess().target.ptr_width);\n-    let (_, max) = int_ty_range(int_type);\n+    let (min, max) = int_ty_range(int_type);\n     let max = max as u128;\n     let negative = type_limits.negated_expr_id == e.hir_id;\n \n@@ -267,7 +267,19 @@ fn lint_int_literal<'a, 'tcx>(\n         }\n \n         cx.struct_span_lint(OVERFLOWING_LITERALS, e.span, |lint| {\n-            lint.build(&format!(\"literal out of range for `{}`\", t.name_str())).emit()\n+            lint.build(&format!(\"literal out of range for `{}`\", t.name_str()))\n+                .note(&format!(\n+                    \"the literal `{}` does not fit into the type `{}` whose range is `{}..={}`\",\n+                    cx.sess()\n+                        .source_map()\n+                        .span_to_snippet(lit.span)\n+                        .ok()\n+                        .expect(\"must get snippet from literal\"),\n+                    t.name_str(),\n+                    min,\n+                    max,\n+                ))\n+                .emit();\n         });\n     }\n }\n@@ -320,7 +332,19 @@ fn lint_uint_literal<'a, 'tcx>(\n             return;\n         }\n         cx.struct_span_lint(OVERFLOWING_LITERALS, e.span, |lint| {\n-            lint.build(&format!(\"literal out of range for `{}`\", t.name_str())).emit()\n+            lint.build(&format!(\"literal out of range for `{}`\", t.name_str()))\n+                .note(&format!(\n+                    \"the literal `{}` does not fit into the type `{}` whose range is `{}..={}`\",\n+                    cx.sess()\n+                        .source_map()\n+                        .span_to_snippet(lit.span)\n+                        .ok()\n+                        .expect(\"must get snippet from literal\"),\n+                    t.name_str(),\n+                    min,\n+                    max,\n+                ))\n+                .emit()\n         });\n     }\n }\n@@ -352,7 +376,17 @@ fn lint_literal<'a, 'tcx>(\n             };\n             if is_infinite == Ok(true) {\n                 cx.struct_span_lint(OVERFLOWING_LITERALS, e.span, |lint| {\n-                    lint.build(&format!(\"literal out of range for `{}`\", t.name_str())).emit()\n+                    lint.build(&format!(\"literal out of range for `{}`\", t.name_str()))\n+                        .note(&format!(\n+                            \"the literal `{}` does not fit into the type `{}` and will be converted to `std::{}::INFINITY`\",\n+                            cx.sess()\n+                                .source_map()\n+                                .span_to_snippet(lit.span)\n+                                .expect(\"must get snippet from literal\"),\n+                            t.name_str(),\n+                            t.name_str(),\n+                        ))\n+                        .emit();\n                 });\n             }\n         }"}, {"sha": "b3d70475bf3c382f12e0fc7c5c0a98912df8472b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -44,7 +44,6 @@ use std::sync::Arc;\n \n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n-use rustc_ast::ast;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::flock;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -3126,25 +3125,6 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum) {\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n }\n \n-fn render_attribute(attr: &ast::MetaItem) -> Option<String> {\n-    let path = pprust::path_to_string(&attr.path);\n-\n-    if attr.is_word() {\n-        Some(path)\n-    } else if let Some(v) = attr.value_str() {\n-        Some(format!(\"{} = {:?}\", path, v))\n-    } else if let Some(values) = attr.meta_item_list() {\n-        let display: Vec<_> = values\n-            .iter()\n-            .filter_map(|attr| attr.meta_item().and_then(|mi| render_attribute(mi)))\n-            .collect();\n-\n-        if !display.is_empty() { Some(format!(\"{}({})\", path, display.join(\", \"))) } else { None }\n-    } else {\n-        None\n-    }\n-}\n-\n const ATTRIBUTE_WHITELIST: &[Symbol] = &[\n     sym::export_name,\n     sym::lang,\n@@ -3170,9 +3150,9 @@ fn render_attributes(w: &mut Buffer, it: &clean::Item, top: bool) {\n         if !ATTRIBUTE_WHITELIST.contains(&attr.name_or_empty()) {\n             continue;\n         }\n-        if let Some(s) = render_attribute(&attr.meta().unwrap()) {\n-            attrs.push_str(&format!(\"#[{}]\\n\", s));\n-        }\n+\n+        // FIXME: this currently renders too many spaces as in: `#[repr(C, align (8))]`.\n+        attrs.push_str(&pprust::attribute_to_string(&attr));\n     }\n     if !attrs.is_empty() {\n         write!("}, {"sha": "7f93ef8795308f0cfd1ce65c66c15acda0a49453", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -1045,6 +1045,10 @@ compat_fn! {\n                     _dwBufferSize: DWORD) -> BOOL {\n         SetLastError(ERROR_CALL_NOT_IMPLEMENTED as DWORD); 0\n     }\n+    pub fn GetSystemTimePreciseAsFileTime(lpSystemTimeAsFileTime: LPFILETIME)\n+                                          -> () {\n+        GetSystemTimeAsFileTime(lpSystemTimeAsFileTime)\n+    }\n     pub fn SleepConditionVariableSRW(ConditionVariable: PCONDITION_VARIABLE,\n                                      SRWLock: PSRWLOCK,\n                                      dwMilliseconds: DWORD,"}, {"sha": "900260169c767a88b975cfc12c6c698612f2f138", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -74,7 +74,7 @@ impl SystemTime {\n     pub fn now() -> SystemTime {\n         unsafe {\n             let mut t: SystemTime = mem::zeroed();\n-            c::GetSystemTimeAsFileTime(&mut t.t);\n+            c::GetSystemTimePreciseAsFileTime(&mut t.t);\n             t\n         }\n     }"}, {"sha": "d5772e183bcb2f387a2dae04b935ef51d6819896", "filename": "src/test/rustdoc/attributes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Frustdoc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Frustdoc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fattributes.rs?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -15,3 +15,7 @@ pub extern \"C\" fn g() {}\n pub enum Foo {\n     Bar,\n }\n+\n+// @has foo/struct.Repr.html '//*[@class=\"docblock attributes top-attr\"]' '#[repr(C, align (8))]'\n+#[repr(C, align(8))]\n+pub struct Repr;"}, {"sha": "0b78532c73751fbf9298b29445e88a643ad508a3", "filename": "src/test/ui/conflicting-repr-hints.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -76,5 +76,5 @@ LL | | }\n \n error: aborting due to 10 previous errors\n \n-Some errors have detailed explanations: E0566, E0587.\n+Some errors have detailed explanations: E0566, E0587, E0634.\n For more information about an error, try `rustc --explain E0566`."}, {"sha": "fadf6ab86b43e0f49934377e3eec5820a120a10e", "filename": "src/test/ui/enum/enum-discrim-too-small2.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -9,24 +9,31 @@ note: the lint level is defined here\n    |\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n+   = note: the literal `223` does not fit into the type `i8` whose range is `-128..=127`\n \n error: literal out of range for `i16`\n   --> $DIR/enum-discrim-too-small2.rs:15:12\n    |\n LL |     Ci16 = 55555,\n    |            ^^^^^\n+   |\n+   = note: the literal `55555` does not fit into the type `i16` whose range is `-32768..=32767`\n \n error: literal out of range for `i32`\n   --> $DIR/enum-discrim-too-small2.rs:22:12\n    |\n LL |     Ci32 = 3_000_000_000,\n    |            ^^^^^^^^^^^^^\n+   |\n+   = note: the literal `3_000_000_000` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n \n error: literal out of range for `i64`\n   --> $DIR/enum-discrim-too-small2.rs:29:12\n    |\n LL |     Ci64 = 9223372036854775809,\n    |            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the literal `9223372036854775809` does not fit into the type `i64` whose range is `-9223372036854775808..=9223372036854775807`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0375359aeaba619c3320df95d240ed6070dc2485", "filename": "src/test/ui/issues/issue-63364.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Fissues%2Fissue-63364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Fissues%2Fissue-63364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-63364.stderr?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -5,6 +5,7 @@ LL |     for n in 100_000.. {\n    |              ^^^^^^^\n    |\n    = note: `#[deny(overflowing_literals)]` on by default\n+   = note: the literal `100_000` does not fit into the type `u16` whose range is `0..=65535`\n \n error: aborting due to previous error\n "}, {"sha": "127dd4127c261999435c2c9a53b0eb2f769c1e7e", "filename": "src/test/ui/lint/deny-overflowing-literals.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Fdeny-overflowing-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Fdeny-overflowing-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdeny-overflowing-literals.stderr?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -5,6 +5,7 @@ LL |     let x: u8 = 256;\n    |                 ^^^\n    |\n    = note: `#[deny(overflowing_literals)]` on by default\n+   = note: the literal `256` does not fit into the type `u8` whose range is `0..=255`\n \n error: range endpoint is out of range for `u8`\n   --> $DIR/deny-overflowing-literals.rs:5:14"}, {"sha": "d2df73727412fb5f400825d11725456861775329", "filename": "src/test/ui/lint/lint-range-endpoint-overflow.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Flint-range-endpoint-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Flint-range-endpoint-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-range-endpoint-overflow.stderr?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -15,18 +15,24 @@ error: literal out of range for `u8`\n    |\n LL |     let range_c = 0..=256;\n    |                       ^^^\n+   |\n+   = note: the literal `256` does not fit into the type `u8` whose range is `0..=255`\n \n error: literal out of range for `u8`\n   --> $DIR/lint-range-endpoint-overflow.rs:7:19\n    |\n LL |     let range_d = 256..5;\n    |                   ^^^\n+   |\n+   = note: the literal `256` does not fit into the type `u8` whose range is `0..=255`\n \n error: literal out of range for `u8`\n   --> $DIR/lint-range-endpoint-overflow.rs:8:22\n    |\n LL |     let range_e = 0..257;\n    |                      ^^^\n+   |\n+   = note: the literal `257` does not fit into the type `u8` whose range is `0..=255`\n \n error: range endpoint is out of range for `u8`\n   --> $DIR/lint-range-endpoint-overflow.rs:9:20"}, {"sha": "1e3c88dfc469c52541abfdfcdc7eebce570bfbd1", "filename": "src/test/ui/lint/lint-type-limits2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.stderr?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -17,6 +17,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n+   = note: the literal `128` does not fit into the type `i8` whose range is `-128..=127`\n \n error: aborting due to previous error\n "}, {"sha": "150e9a2aa47921ac2486cba9efa31f621f29f356", "filename": "src/test/ui/lint/lint-type-limits3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.stderr?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -17,6 +17,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n+   = note: the literal `200` does not fit into the type `i8` whose range is `-128..=127`\n \n error: aborting due to previous error\n "}, {"sha": "7715c0d3a4db93d8e1a1754bbb2dd2b860dba032", "filename": "src/test/ui/lint/lint-type-overflow.stderr", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.stderr?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -9,108 +9,143 @@ note: the lint level is defined here\n    |\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n+   = note: the literal `256` does not fit into the type `u8` whose range is `0..=255`\n \n error: literal out of range for `u8`\n   --> $DIR/lint-type-overflow.rs:13:14\n    |\n LL |     let x1 = 256_u8;\n    |              ^^^^^^\n+   |\n+   = note: the literal `256_u8` does not fit into the type `u8` whose range is `0..=255`\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:16:18\n    |\n LL |     let x1: i8 = 128;\n    |                  ^^^\n+   |\n+   = note: the literal `128` does not fit into the type `i8` whose range is `-128..=127`\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:18:19\n    |\n LL |     let x3: i8 = -129;\n    |                   ^^^\n+   |\n+   = note: the literal `129` does not fit into the type `i8` whose range is `-128..=127`\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:19:19\n    |\n LL |     let x3: i8 = -(129);\n    |                   ^^^^^\n+   |\n+   = note: the literal `129` does not fit into the type `i8` whose range is `-128..=127`\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:20:20\n    |\n LL |     let x3: i8 = -{129};\n    |                    ^^^\n+   |\n+   = note: the literal `129` does not fit into the type `i8` whose range is `-128..=127`\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:22:10\n    |\n LL |     test(1000);\n    |          ^^^^\n+   |\n+   = note: the literal `1000` does not fit into the type `i8` whose range is `-128..=127`\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:24:13\n    |\n LL |     let x = 128_i8;\n    |             ^^^^^^\n+   |\n+   = note: the literal `128_i8` does not fit into the type `i8` whose range is `-128..=127`\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:28:14\n    |\n LL |     let x = -129_i8;\n    |              ^^^^^^\n+   |\n+   = note: the literal `129_i8` does not fit into the type `i8` whose range is `-128..=127`\n \n error: literal out of range for `i32`\n   --> $DIR/lint-type-overflow.rs:32:18\n    |\n LL |     let x: i32 = 2147483648;\n    |                  ^^^^^^^^^^\n+   |\n+   = note: the literal `2147483648` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n \n error: literal out of range for `i32`\n   --> $DIR/lint-type-overflow.rs:33:13\n    |\n LL |     let x = 2147483648_i32;\n    |             ^^^^^^^^^^^^^^\n+   |\n+   = note: the literal `2147483648_i32` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n \n error: literal out of range for `i32`\n   --> $DIR/lint-type-overflow.rs:36:19\n    |\n LL |     let x: i32 = -2147483649;\n    |                   ^^^^^^^^^^\n+   |\n+   = note: the literal `2147483649` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n \n error: literal out of range for `i32`\n   --> $DIR/lint-type-overflow.rs:37:14\n    |\n LL |     let x = -2147483649_i32;\n    |              ^^^^^^^^^^^^^^\n+   |\n+   = note: the literal `2147483649_i32` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n \n error: literal out of range for `i32`\n   --> $DIR/lint-type-overflow.rs:38:13\n    |\n LL |     let x = 2147483648;\n    |             ^^^^^^^^^^\n+   |\n+   = note: the literal `2147483648` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n \n error: literal out of range for `i64`\n   --> $DIR/lint-type-overflow.rs:40:13\n    |\n LL |     let x = 9223372036854775808_i64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the literal `9223372036854775808_i64` does not fit into the type `i64` whose range is `-9223372036854775808..=9223372036854775807`\n \n error: literal out of range for `i64`\n   --> $DIR/lint-type-overflow.rs:42:13\n    |\n LL |     let x = 18446744073709551615_i64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the literal `18446744073709551615_i64` does not fit into the type `i64` whose range is `-9223372036854775808..=9223372036854775807`\n \n error: literal out of range for `i64`\n   --> $DIR/lint-type-overflow.rs:43:19\n    |\n LL |     let x: i64 = -9223372036854775809;\n    |                   ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the literal `9223372036854775809` does not fit into the type `i64` whose range is `-9223372036854775808..=9223372036854775807`\n \n error: literal out of range for `i64`\n   --> $DIR/lint-type-overflow.rs:44:14\n    |\n LL |     let x = -9223372036854775809_i64;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the literal `9223372036854775809_i64` does not fit into the type `i64` whose range is `-9223372036854775808..=9223372036854775807`\n \n error: aborting due to 18 previous errors\n "}, {"sha": "61e33b7a260c96a2d4ee37426bb0645b9af00911", "filename": "src/test/ui/lint/lint-type-overflow2.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -9,30 +9,39 @@ note: the lint level is defined here\n    |\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n+   = note: the literal `128` does not fit into the type `i8` whose range is `-128..=127`\n \n error: literal out of range for `f32`\n   --> $DIR/lint-type-overflow2.rs:9:14\n    |\n LL |     let x = -3.40282357e+38_f32;\n    |              ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the literal `3.40282357e+38_f32` does not fit into the type `f32` and will be converted to `std::f32::INFINITY`\n \n error: literal out of range for `f32`\n   --> $DIR/lint-type-overflow2.rs:10:14\n    |\n LL |     let x =  3.40282357e+38_f32;\n    |              ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the literal `3.40282357e+38_f32` does not fit into the type `f32` and will be converted to `std::f32::INFINITY`\n \n error: literal out of range for `f64`\n   --> $DIR/lint-type-overflow2.rs:11:14\n    |\n LL |     let x = -1.7976931348623159e+308_f64;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the literal `1.7976931348623159e+308_f64` does not fit into the type `f64` and will be converted to `std::f64::INFINITY`\n \n error: literal out of range for `f64`\n   --> $DIR/lint-type-overflow2.rs:12:14\n    |\n LL |     let x =  1.7976931348623159e+308_f64;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the literal `1.7976931348623159e+308_f64` does not fit into the type `f64` and will be converted to `std::f64::INFINITY`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "a7a788b877a6d163119fb0d6c304ab30919a747b", "filename": "src/test/ui/lint/type-overflow.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -9,38 +9,39 @@ note: the lint level is defined here\n    |\n LL | #![warn(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n+   = note: the literal `255i8` does not fit into the type `i8` whose range is `-128..=127`\n \n warning: literal out of range for i8\n   --> $DIR/type-overflow.rs:10:16\n    |\n LL |     let fail = 0b1000_0001i8;\n    |                ^^^^^^^^^^^^^ help: consider using `u8` instead: `0b1000_0001u8`\n    |\n-   = note: the literal `0b1000_0001i8` (decimal `129`) does not fit into an `i8` and will become `-127i8`\n+   = note: the literal `0b1000_0001i8` (decimal `129`) does not fit into the type `i8` and will become `-127i8`\n \n warning: literal out of range for i64\n   --> $DIR/type-overflow.rs:12:16\n    |\n LL |     let fail = 0x8000_0000_0000_0000i64;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `u64` instead: `0x8000_0000_0000_0000u64`\n    |\n-   = note: the literal `0x8000_0000_0000_0000i64` (decimal `9223372036854775808`) does not fit into an `i64` and will become `-9223372036854775808i64`\n+   = note: the literal `0x8000_0000_0000_0000i64` (decimal `9223372036854775808`) does not fit into the type `i64` and will become `-9223372036854775808i64`\n \n warning: literal out of range for u32\n   --> $DIR/type-overflow.rs:14:16\n    |\n LL |     let fail = 0x1_FFFF_FFFFu32;\n    |                ^^^^^^^^^^^^^^^^ help: consider using `u64` instead: `0x1_FFFF_FFFFu64`\n    |\n-   = note: the literal `0x1_FFFF_FFFFu32` (decimal `8589934591`) does not fit into an `u32` and will become `4294967295u32`\n+   = note: the literal `0x1_FFFF_FFFFu32` (decimal `8589934591`) does not fit into the type `u32` and will become `4294967295u32`\n \n warning: literal out of range for i128\n   --> $DIR/type-overflow.rs:16:22\n    |\n LL |     let fail: i128 = 0x8000_0000_0000_0000_0000_0000_0000_0000;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: the literal `0x8000_0000_0000_0000_0000_0000_0000_0000` (decimal `170141183460469231731687303715884105728`) does not fit into an `i128` and will become `-170141183460469231731687303715884105728i128`\n+   = note: the literal `0x8000_0000_0000_0000_0000_0000_0000_0000` (decimal `170141183460469231731687303715884105728`) does not fit into the type `i128` and will become `-170141183460469231731687303715884105728i128`\n    = help: consider using `u128` instead\n \n warning: literal out of range for i32\n@@ -49,7 +50,7 @@ warning: literal out of range for i32\n LL |     let fail = 0x8FFF_FFFF_FFFF_FFFE;\n    |                ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: the literal `0x8FFF_FFFF_FFFF_FFFE` (decimal `10376293541461622782`) does not fit into an `i32` and will become `-2i32`\n+   = note: the literal `0x8FFF_FFFF_FFFF_FFFE` (decimal `10376293541461622782`) does not fit into the type `i32` and will become `-2i32`\n    = help: consider using `i128` instead\n \n warning: literal out of range for i8\n@@ -58,5 +59,5 @@ warning: literal out of range for i8\n LL |     let fail = -0b1111_1111i8;\n    |                 ^^^^^^^^^^^^^ help: consider using `i16` instead: `0b1111_1111i16`\n    |\n-   = note: the literal `0b1111_1111i8` (decimal `255`) does not fit into an `i8` and will become `-1i8`\n+   = note: the literal `0b1111_1111i8` (decimal `255`) does not fit into the type `i8` and will become `-1i8`\n "}, {"sha": "7176f17bc3fab20c15b967f48b55c5b650ec0b93", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -2,7 +2,7 @@\n   \"message\": \"cannot find type `Iter` in this scope\",\n   \"code\": {\n     \"code\": \"E0412\",\n-    \"explanation\": \"The type name used is not in scope.\n+    \"explanation\": \"A used type name is not in scope.\n \n Erroneous code examples:\n "}, {"sha": "b04012af515ddad35e66572dc98995bbc62c069a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -2779,7 +2779,7 @@ impl<'test> TestCx<'test> {\n                 Command::new(&nodejs)\n                     .arg(root.join(\"src/tools/rustdoc-js/tester.js\"))\n                     .arg(out_dir.parent().expect(\"no parent\"))\n-                    .arg(&self.testpaths.file.file_stem().expect(\"couldn't get file stem\")),\n+                    .arg(self.testpaths.file.with_extension(\"js\")),\n             );\n             if !res.status.success() {\n                 self.fatal_proc_rec(\"rustdoc-js test failed!\", &res);"}, {"sha": "19cf0483b762470d02a9e5537e2884329e05a74e", "filename": "src/tools/rustdoc-js-std/tester.js", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftools%2Frustdoc-js-std%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftools%2Frustdoc-js-std%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js-std%2Ftester.js?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -1,6 +1,5 @@\n const fs = require('fs');\n-\n-const TEST_FOLDER = 'src/test/rustdoc-js-std/';\n+const path = require('path');\n \n function getNextStep(content, pos, stop) {\n     while (pos < content.length && content[pos] !== stop &&\n@@ -246,17 +245,16 @@ function readFileMatching(dir, name, extension) {\n }\n \n function main(argv) {\n-    if (argv.length !== 3) {\n-        console.error(\"Expected toolchain to check as argument (for example \\\n-                       'x86_64-apple-darwin')\");\n+    if (argv.length !== 4) {\n+        console.error(\"USAGE: node tester.js STD_DOCS TEST_FOLDER\");\n         return 1;\n     }\n-    var toolchain = argv[2];\n+    var std_docs = argv[2];\n+    var test_folder = argv[3];\n \n-    var mainJs = readFileMatching(\"build/\" + toolchain + \"/doc/\", \"main\", \".js\");\n-    var ALIASES = readFileMatching(\"build/\" + toolchain + \"/doc/\", \"aliases\", \".js\");\n-    var searchIndex = readFileMatching(\"build/\" + toolchain + \"/doc/\",\n-                                       \"search-index\", \".js\").split(\"\\n\");\n+    var mainJs = readFileMatching(std_docs, \"main\", \".js\");\n+    var ALIASES = readFileMatching(std_docs, \"aliases\", \".js\");\n+    var searchIndex = readFileMatching(std_docs, \"search-index\", \".js\").split(\"\\n\");\n     if (searchIndex[searchIndex.length - 1].length === 0) {\n         searchIndex.pop();\n     }\n@@ -287,8 +285,8 @@ function main(argv) {\n \n     var errors = 0;\n \n-    fs.readdirSync(TEST_FOLDER).forEach(function(file) {\n-        var loadedFile = loadContent(readFile(TEST_FOLDER + file) +\n+    fs.readdirSync(test_folder).forEach(function(file) {\n+        var loadedFile = loadContent(readFile(path.join(test_folder, file)) +\n                                'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n         const expected = loadedFile.EXPECTED;\n         const query = loadedFile.QUERY;"}, {"sha": "7174474be1c2ba936b20a8d2d5d0694446079c4d", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/97eda01bb79de1e0a52994f52cfb5a527687f505/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=97eda01bb79de1e0a52994f52cfb5a527687f505", "patch": "@@ -1,8 +1,7 @@\n const fs = require('fs');\n+const path = require('path');\n const { spawnSync } = require('child_process');\n \n-const TEST_FOLDER = 'src/test/rustdoc-js/';\n-\n function getNextStep(content, pos, stop) {\n     while (pos < content.length && content[pos] !== stop &&\n            (content[pos] === ' ' || content[pos] === '\\t' || content[pos] === '\\n')) {\n@@ -266,10 +265,11 @@ function main(argv) {\n     var errors = 0;\n \n     for (var j = 3; j < argv.length; ++j) {\n-        const test_name = argv[j];\n+        const test_file = argv[j];\n+        const test_name = path.basename(test_file, \".js\");\n \n         process.stdout.write('Checking \"' + test_name + '\" ... ');\n-        if (!fs.existsSync(TEST_FOLDER + test_name + \".js\")) {\n+        if (!fs.existsSync(test_file)) {\n             errors += 1;\n             console.error(\"FAILED\");\n             console.error(\"==> Missing '\" + test_name + \".js' file...\");\n@@ -279,7 +279,7 @@ function main(argv) {\n         const test_out_folder = out_folder + test_name;\n \n         var [loaded, index] = load_files(test_out_folder, test_name);\n-        var loadedFile = loadContent(readFile(TEST_FOLDER + test_name + \".js\") +\n+        var loadedFile = loadContent(readFile(test_file) +\n                                'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n         const expected = loadedFile.EXPECTED;\n         const query = loadedFile.QUERY;"}]}