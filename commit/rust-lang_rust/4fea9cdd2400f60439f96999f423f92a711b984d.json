{"sha": "4fea9cdd2400f60439f96999f423f92a711b984d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZWE5Y2RkMjQwMGY2MDQzOWY5Njk5OWY0MjNmOTJhNzExYjk4NGQ=", "commit": {"author": {"name": "Tom Karpiniec", "email": "tom@ditto.live", "date": "2020-05-07T23:48:30Z"}, "committer": {"name": "Tom Karpiniec", "email": "tom@ditto.live", "date": "2020-05-07T23:48:30Z"}, "message": "Simplify bitcode embedding - either None or Full", "tree": {"sha": "e5ae35aad7c6d5c560d74623d09269843a98e2e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5ae35aad7c6d5c560d74623d09269843a98e2e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fea9cdd2400f60439f96999f423f92a711b984d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fea9cdd2400f60439f96999f423f92a711b984d", "html_url": "https://github.com/rust-lang/rust/commit/4fea9cdd2400f60439f96999f423f92a711b984d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fea9cdd2400f60439f96999f423f92a711b984d/comments", "author": {"login": "thombles", "id": 5511175, "node_id": "MDQ6VXNlcjU1MTExNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5511175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thombles", "html_url": "https://github.com/thombles", "followers_url": "https://api.github.com/users/thombles/followers", "following_url": "https://api.github.com/users/thombles/following{/other_user}", "gists_url": "https://api.github.com/users/thombles/gists{/gist_id}", "starred_url": "https://api.github.com/users/thombles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thombles/subscriptions", "organizations_url": "https://api.github.com/users/thombles/orgs", "repos_url": "https://api.github.com/users/thombles/repos", "events_url": "https://api.github.com/users/thombles/events{/privacy}", "received_events_url": "https://api.github.com/users/thombles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thombles", "id": 5511175, "node_id": "MDQ6VXNlcjU1MTExNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5511175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thombles", "html_url": "https://github.com/thombles", "followers_url": "https://api.github.com/users/thombles/followers", "following_url": "https://api.github.com/users/thombles/following{/other_user}", "gists_url": "https://api.github.com/users/thombles/gists{/gist_id}", "starred_url": "https://api.github.com/users/thombles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thombles/subscriptions", "organizations_url": "https://api.github.com/users/thombles/orgs", "repos_url": "https://api.github.com/users/thombles/repos", "events_url": "https://api.github.com/users/thombles/events{/privacy}", "received_events_url": "https://api.github.com/users/thombles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a390803782218807966b0999a698795b0fc5b281", "url": "https://api.github.com/repos/rust-lang/rust/commits/a390803782218807966b0999a698795b0fc5b281", "html_url": "https://github.com/rust-lang/rust/commit/a390803782218807966b0999a698795b0fc5b281"}], "stats": {"total": 30, "additions": 9, "deletions": 21}, "files": [{"sha": "e261ac654467954c11442f22cdf3b25ca380ae71", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fea9cdd2400f60439f96999f423f92a711b984d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fea9cdd2400f60439f96999f423f92a711b984d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=4fea9cdd2400f60439f96999f423f92a711b984d", "patch": "@@ -651,10 +651,8 @@ pub(crate) unsafe fn codegen(\n                     \"LLVM_module_codegen_embed_bitcode\",\n                     &module.name[..],\n                 );\n-                embed_bitcode(cgcx, llcx, llmod, &config.bc_cmdline, Some(data));\n+                embed_bitcode(cgcx, llcx, llmod, &config.bc_cmdline, data);\n             }\n-        } else if config.emit_obj == EmitObj::ObjectCode(BitcodeSection::Marker) {\n-            embed_bitcode(cgcx, llcx, llmod, &config.bc_cmdline, None);\n         }\n \n         if config.emit_ir {\n@@ -790,9 +788,9 @@ unsafe fn embed_bitcode(\n     llcx: &llvm::Context,\n     llmod: &llvm::Module,\n     cmdline: &str,\n-    bitcode: Option<&[u8]>,\n+    bitcode: &[u8],\n ) {\n-    let llconst = common::bytes_in_context(llcx, bitcode.unwrap_or(&[]));\n+    let llconst = common::bytes_in_context(llcx, bitcode);\n     let llglobal = llvm::LLVMAddGlobal(\n         llmod,\n         common::val_ty(llconst),"}, {"sha": "21eb56f12b97117b8d495b9c079016a3cd564855", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4fea9cdd2400f60439f96999f423f92a711b984d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fea9cdd2400f60439f96999f423f92a711b984d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=4fea9cdd2400f60439f96999f423f92a711b984d", "patch": "@@ -68,10 +68,6 @@ pub enum BitcodeSection {\n     // No bitcode section.\n     None,\n \n-    // An empty bitcode section (to placate tools such as the iOS linker that\n-    // require this section even if they don't use it).\n-    Marker,\n-\n     // A full, uncompressed bitcode section.\n     Full,\n }\n@@ -148,16 +144,8 @@ impl ModuleConfig {\n             || sess.opts.cg.linker_plugin_lto.enabled()\n         {\n             EmitObj::Bitcode\n-        } else if sess.target.target.options.forces_embed_bitcode {\n+        } else if need_bitcode_in_object(sess) {\n             EmitObj::ObjectCode(BitcodeSection::Full)\n-        } else if need_crate_bitcode_for_rlib(sess) {\n-            let force_full = need_crate_bitcode_for_rlib(sess);\n-            match sess.opts.optimize {\n-                config::OptLevel::No | config::OptLevel::Less if !force_full => {\n-                    EmitObj::ObjectCode(BitcodeSection::Marker)\n-                }\n-                _ => EmitObj::ObjectCode(BitcodeSection::Full),\n-            }\n         } else {\n             EmitObj::ObjectCode(BitcodeSection::None)\n         };\n@@ -376,10 +364,12 @@ pub struct CompiledModules {\n     pub allocator_module: Option<CompiledModule>,\n }\n \n-fn need_crate_bitcode_for_rlib(sess: &Session) -> bool {\n-    sess.opts.cg.embed_bitcode\n+fn need_bitcode_in_object(sess: &Session) -> bool {\n+    let requested_for_rlib = sess.opts.cg.embed_bitcode\n         && sess.crate_types.borrow().contains(&CrateType::Rlib)\n-        && sess.opts.output_types.contains_key(&OutputType::Exe)\n+        && sess.opts.output_types.contains_key(&OutputType::Exe);\n+    let forced_by_target = sess.target.target.options.forces_embed_bitcode;\n+    requested_for_rlib || forced_by_target\n }\n \n fn need_pre_lto_bitcode_for_incr_comp(sess: &Session) -> bool {"}]}