{"sha": "deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYjFlYjYxMzRhOGFjMjJjNTVkYzNlOTcxM2Q2NjdmZjM1MmVjZjU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-09T20:04:29Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-24T19:28:08Z"}, "message": "wording improvement", "tree": {"sha": "ada9c93dfb575bf9ab2d87942768e020653ccd89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ada9c93dfb575bf9ab2d87942768e020653ccd89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "html_url": "https://github.com/rust-lang/rust/commit/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b8c6a2d30f7e6acee89a735ad8fd86c1e1c2370", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b8c6a2d30f7e6acee89a735ad8fd86c1e1c2370", "html_url": "https://github.com/rust-lang/rust/commit/7b8c6a2d30f7e6acee89a735ad8fd86c1e1c2370"}], "stats": {"total": 73, "additions": 35, "deletions": 38}, "files": [{"sha": "aec9d6f16d24f802e7ef3cc1c5fcac3192684a53", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -217,7 +217,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             }\n             CastError::NonScalar => {\n                 struct_span_err!(fcx.tcx.sess, self.span, E0605,\n-                                 \"non-scalar cast: `{}` as `{}`\",\n+                                 \"non-primitive cast: `{}` as `{}`\",\n                                  self.expr_ty,\n                                  fcx.ty_to_string(self.cast_ty))\n                                 .note(\"an `as` expression can only be used to convert between \\"}, {"sha": "f9b44f0395fc423a548c14a0948d3576a8a66f7a", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -4209,19 +4209,19 @@ println!(\"{}\", v[2]);\n \"##,\n \n E0604: r##\"\n-A cast to `char` was attempted on another type than `u8`.\n+A cast to `char` was attempted on a type other than `u8`.\n \n Erroneous code example:\n \n ```compile_fail,E0604\n 0u32 as char; // error: only `u8` can be cast as `char`, not `u32`\n ```\n \n-As the error message indicates, only `u8` can be casted into `char`. Example:\n+As the error message indicates, only `u8` can be cast into `char`. Example:\n \n ```\n let c = 86u8 as char; // ok!\n-assert!(c, 'V');\n+assert_eq!(c, 'V');\n ```\n \"##,\n \n@@ -4232,15 +4232,15 @@ Erroneous code examples:\n \n ```compile_fail,E0605\n let x = 0u8;\n-x as Vec<u8>; // error: non-scalar cast: `u8` as `std::vec::Vec<u8>`\n+x as Vec<u8>; // error: non-primitive cast: `u8` as `std::vec::Vec<u8>`\n \n // Another example\n \n let v = 0 as *const u8; // So here, `v` is a `*const u8`.\n-v as &u8; // error: non-scalar cast: `*const u8` as `&u8`\n+v as &u8; // error: non-primitive cast: `*const u8` as `&u8`\n ```\n \n-Only primitive types cast be casted into each others. Examples:\n+Only primitive types can be cast into each other. Examples:\n \n ```\n let x = 0u8;\n@@ -4261,8 +4261,8 @@ let x = &0u8; // Here, `x` is a `&u8`.\n let y: u32 = x as u32; // error: casting `&u8` as `u32` is invalid\n ```\n \n-When casting, keep in mind that only primitive types cast be casted into each\n-others. Example:\n+When casting, keep in mind that only primitive types can be cast into each\n+other. Example:\n \n ```\n let x = &0u8;\n@@ -4282,15 +4282,16 @@ v as *const [u8];\n \n First: what are thin and fat pointers?\n \n-Thin pointers are \"simple\" pointers that simply reference a memory address.\n+Thin pointers are \"simple\" pointers: they are purely a reference to a memory\n+address.\n \n Fat pointers are pointers referencing Dynamically Sized Types (also called DST).\n-They don't have a statically known size, therefore they can only exist behind\n+DST don't have a statically known size, therefore they can only exist behind\n some kind of pointers that contain additional information. Slices and trait\n-objects are DSTs.\n+objects are DSTs. In the case of slices, the additional information the fat\n+pointer holds is their size.\n \n-So in order to fix this error, don't try to cast directly between thin and fat\n-pointers.\n+To fix this error, don't try to cast directly between thin and fat pointers.\n \"##,\n \n E0609: r##\""}, {"sha": "ab22d352480739d3fe27520993523b4df654acf5", "filename": "src/test/compile-fail/cast-from-nil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fcast-from-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fcast-from-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-from-nil.rs?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: non-scalar cast: `()` as `u32`\n+// error-pattern: non-primitive cast: `()` as `u32`\n fn main() { let u = (assert!(true) as u32); }"}, {"sha": "d5a998c6e4b6b944884c6135beac62f29cf74742", "filename": "src/test/compile-fail/cast-to-bare-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -13,8 +13,8 @@ fn foo(_x: isize) { }\n fn main() {\n     let v: u64 = 5;\n     let x = foo as extern \"C\" fn() -> isize;\n-    //~^ ERROR non-scalar cast\n+    //~^ ERROR non-primitive cast\n     let y = v as extern \"Rust\" fn(isize) -> (isize, isize);\n-    //~^ ERROR non-scalar cast\n+    //~^ ERROR non-primitive cast\n     y(x());\n }"}, {"sha": "27d9e8a42b188c58759ff50ac7410f893d33cf65", "filename": "src/test/compile-fail/cast-to-nil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fcast-to-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fcast-to-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-to-nil.rs?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: non-scalar cast: `u32` as `()`\n+// error-pattern: non-primitive cast: `u32` as `()`\n fn main() { let u = 0u32 as (); }"}, {"sha": "6584c16c9dec67cfdbb3d6966dcb56d6ada51b10", "filename": "src/test/compile-fail/closure-no-fn-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-3.rs?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -14,5 +14,5 @@\n fn main() {\n     let b = 0u8;\n     let baz: fn() -> u8 = (|| { b }) as fn() -> u8;\n-    //~^ ERROR non-scalar cast\n+    //~^ ERROR non-primitive cast\n }"}, {"sha": "0479f5cce65379ed73bd43b46f1356bde316f564", "filename": "src/test/compile-fail/coerce-to-bang-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -17,7 +17,7 @@ fn cast_a() {\n }\n \n fn cast_b() {\n-    let y = 22 as !; //~ ERROR non-scalar cast\n+    let y = 22 as !; //~ ERROR non-primitive cast\n }\n \n fn main() { }"}, {"sha": "bc2dc1cc5d4c83923f349f8062462af9bc79f020", "filename": "src/test/compile-fail/fat-ptr-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -22,7 +22,7 @@ fn main() {\n     a as isize; //~ ERROR casting\n     a as i16; //~ ERROR casting `&[i32]` as `i16` is invalid\n     a as u32; //~ ERROR casting `&[i32]` as `u32` is invalid\n-    b as usize; //~ ERROR non-scalar cast\n+    b as usize; //~ ERROR non-primitive cast\n     p as usize;\n     //~^ ERROR casting\n     //~^^ HELP cast through a thin pointer"}, {"sha": "2d00f339f33a066607fbf6eee018501ce5557422", "filename": "src/test/compile-fail/issue-10991.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fissue-10991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fissue-10991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10991.rs?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let nil = ();\n-    let _t = nil as usize; //~ ERROR: non-scalar cast: `()` as `usize`\n+    let _t = nil as usize; //~ ERROR: non-primitive cast: `()` as `usize`\n }"}, {"sha": "c23fc4f334472bee36f321981f2e44078bc71d83", "filename": "src/test/compile-fail/issue-22289.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fissue-22289.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fissue-22289.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22289.rs?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    0 as &std::any::Any; //~ ERROR non-scalar cast\n+    0 as &std::any::Any; //~ ERROR non-primitive cast\n }"}, {"sha": "2128c4206301b3848968c48eb9db804b5a75a17e", "filename": "src/test/compile-fail/issue-22312.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fissue-22312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fissue-22312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22312.rs?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -19,7 +19,7 @@ pub trait Array2D: Index<usize> {\n         }\n         let i = y * self.columns() + x;\n         let indexer = &(*self as &Index<usize, Output = <Self as Index<usize>>::Output>);\n-        //~^ERROR non-scalar cast\n+        //~^ERROR non-primitive cast\n         Some(indexer.index(i))\n     }\n }"}, {"sha": "d735e184d5cd568f3c0461d11e9bebb8e9b483b4", "filename": "src/test/compile-fail/issue-2995.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn bad (p: *const isize) {\n-    let _q: &isize = p as &isize; //~ ERROR non-scalar cast\n+    let _q: &isize = p as &isize; //~ ERROR non-primitive cast\n }\n \n fn main() { }"}, {"sha": "0abbc05eef05dd7b84bcd578b3ef6413001c2ed1", "filename": "src/test/compile-fail/nonscalar-cast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:non-scalar cast\n-\n #[derive(Debug)]\n struct foo {\n     x: isize\n }\n \n fn main() {\n-    println!(\"{}\", foo{ x: 1 } as isize);\n+    println!(\"{}\", foo{ x: 1 } as isize); //~ non-primitive cast: `foo` as `isize` [E0605]\n }"}, {"sha": "220537633eaf12291d6f99b18df7af814b5e90b3", "filename": "src/test/compile-fail/tag-variant-cast-non-nullary.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Ftag-variant-cast-non-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Ftag-variant-cast-non-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-variant-cast-non-nullary.rs?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//error-pattern: non-scalar cast\n-\n enum non_nullary {\n     nullary,\n     other(isize),\n }\n \n fn main() {\n     let v = non_nullary::nullary;\n-    let val = v as isize;\n+    let val = v as isize; //~ ERROR non-primitive cast: `non_nullary` as `isize` [E0605]\n }"}, {"sha": "2a5d25e6b98dd0497286a83883c518c64a5ceef0", "filename": "src/test/compile-fail/uninhabited-enum-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Funinhabited-enum-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fcompile-fail%2Funinhabited-enum-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-enum-cast.rs?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -11,7 +11,7 @@\n enum E {}\n \n fn f(e: E) {\n-    println!(\"{}\", (e as isize).to_string());   //~ ERROR non-scalar cast\n+    println!(\"{}\", (e as isize).to_string());   //~ ERROR non-primitive cast\n }\n \n fn main() {}"}, {"sha": "879acbcf9d9d1cd198a603df218e067a894c0dab", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -20,39 +20,39 @@ error[E0609]: no field `f` on type `fn() {main}`\n 75 |     let _ = main.f as *const u32;\n    |                  ^\n \n-error[E0605]: non-scalar cast: `*const u8` as `&u8`\n+error[E0605]: non-primitive cast: `*const u8` as `&u8`\n   --> $DIR/cast-rfc0401.rs:39:13\n    |\n 39 |     let _ = v as &u8;\n    |             ^^^^^^^^\n    |\n    = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n \n-error[E0605]: non-scalar cast: `*const u8` as `E`\n+error[E0605]: non-primitive cast: `*const u8` as `E`\n   --> $DIR/cast-rfc0401.rs:40:13\n    |\n 40 |     let _ = v as E;\n    |             ^^^^^^\n    |\n    = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n \n-error[E0605]: non-scalar cast: `*const u8` as `fn()`\n+error[E0605]: non-primitive cast: `*const u8` as `fn()`\n   --> $DIR/cast-rfc0401.rs:41:13\n    |\n 41 |     let _ = v as fn();\n    |             ^^^^^^^^^\n    |\n    = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n \n-error[E0605]: non-scalar cast: `*const u8` as `(u32,)`\n+error[E0605]: non-primitive cast: `*const u8` as `(u32,)`\n   --> $DIR/cast-rfc0401.rs:42:13\n    |\n 42 |     let _ = v as (u32,);\n    |             ^^^^^^^^^^^\n    |\n    = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n \n-error[E0605]: non-scalar cast: `std::option::Option<&*const u8>` as `*const u8`\n+error[E0605]: non-primitive cast: `std::option::Option<&*const u8>` as `*const u8`\n   --> $DIR/cast-rfc0401.rs:43:13\n    |\n 43 |     let _ = Some(&v) as *const u8;"}, {"sha": "9da9042e78ed13b891e2899e6e9bccd36b368a0f", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deb1eb6134a8ac22c55dc3e9713d667ff352ecf5/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=deb1eb6134a8ac22c55dc3e9713d667ff352ecf5", "patch": "@@ -7,7 +7,7 @@ error[E0308]: mismatched types\n 37 |     write!(hello);\n    |     -------------- in this macro invocation\n \n-error[E0605]: non-scalar cast: `{integer}` as `()`\n+error[E0605]: non-primitive cast: `{integer}` as `()`\n   --> $DIR/issue-26480.rs:32:19\n    |\n 32 |     ($x:expr) => ($x as ())"}]}