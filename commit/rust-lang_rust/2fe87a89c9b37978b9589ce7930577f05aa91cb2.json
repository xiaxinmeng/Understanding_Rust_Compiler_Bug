{"sha": "2fe87a89c9b37978b9589ce7930577f05aa91cb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZTg3YTg5YzliMzc5NzhiOTU4OWNlNzkzMDU3N2YwNWFhOTFjYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-03T16:21:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-03T16:21:51Z"}, "message": "Auto merge of #6165 - dvermd:ref_option_ref, r=flip1995\n\nAdd lint 'ref_option_ref' #1377\n\nThis lint checks for usage of `&Option<&T>` which can be simplified as `Option<&T>` as suggested in #1377.\n\nThis WIP PR is here to get feedback on the lint as there's more cases to be handled:\n* statics/consts,\n* associated types,\n* type alias,\n* function/method parameter/return,\n* ADT definitions (struct/tuple struct fields, enum variants)\n\nchangelog: Add 'ref_option_ref' lint", "tree": {"sha": "6d7adfcee07e85013751c775136c9971c92bb82d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d7adfcee07e85013751c775136c9971c92bb82d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fe87a89c9b37978b9589ce7930577f05aa91cb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe87a89c9b37978b9589ce7930577f05aa91cb2", "html_url": "https://github.com/rust-lang/rust/commit/2fe87a89c9b37978b9589ce7930577f05aa91cb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fe87a89c9b37978b9589ce7930577f05aa91cb2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2bf404d34529e2b916bdc514bd71309e86908bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2bf404d34529e2b916bdc514bd71309e86908bd", "html_url": "https://github.com/rust-lang/rust/commit/a2bf404d34529e2b916bdc514bd71309e86908bd"}, {"sha": "7b065dba84362ce90a7d9a920e193dc719198a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b065dba84362ce90a7d9a920e193dc719198a9b", "html_url": "https://github.com/rust-lang/rust/commit/7b065dba84362ce90a7d9a920e193dc719198a9b"}], "stats": {"total": 221, "additions": 209, "deletions": 12}, "files": [{"sha": "afd31179098bf886fd71bec18b7d205836c7152e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fe87a89c9b37978b9589ce7930577f05aa91cb2/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fe87a89c9b37978b9589ce7930577f05aa91cb2/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=2fe87a89c9b37978b9589ce7930577f05aa91cb2", "patch": "@@ -1920,6 +1920,7 @@ Released 2018-09-13\n [`redundant_pub_crate`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pub_crate\n [`redundant_static_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes\n [`ref_in_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_in_deref\n+[`ref_option_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_option_ref\n [`regex_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#regex_macro\n [`repeat_once`]: https://rust-lang.github.io/rust-clippy/master/index.html#repeat_once\n [`replace_consts`]: https://rust-lang.github.io/rust-clippy/master/index.html#replace_consts"}, {"sha": "f08a32ee553bb3c25faa956d260217aaf3dab2a6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fe87a89c9b37978b9589ce7930577f05aa91cb2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe87a89c9b37978b9589ce7930577f05aa91cb2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=2fe87a89c9b37978b9589ce7930577f05aa91cb2", "patch": "@@ -294,6 +294,7 @@ mod redundant_closure_call;\n mod redundant_field_names;\n mod redundant_pub_crate;\n mod redundant_static_lifetimes;\n+mod ref_option_ref;\n mod reference;\n mod regex;\n mod repeat_once;\n@@ -810,6 +811,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &redundant_field_names::REDUNDANT_FIELD_NAMES,\n         &redundant_pub_crate::REDUNDANT_PUB_CRATE,\n         &redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n+        &ref_option_ref::REF_OPTION_REF,\n         &reference::DEREF_ADDROF,\n         &reference::REF_IN_DEREF,\n         &regex::INVALID_REGEX,\n@@ -1033,6 +1035,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &sess.target,\n     );\n     store.register_late_pass(move || box pass_by_ref_or_value);\n+    store.register_late_pass(|| box ref_option_ref::RefOptionRef);\n     store.register_late_pass(|| box try_err::TryErr);\n     store.register_late_pass(|| box use_self::UseSelf);\n     store.register_late_pass(|| box bytecount::ByteCount);\n@@ -1261,6 +1264,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF),\n         LintId::of(&ranges::RANGE_MINUS_ONE),\n         LintId::of(&ranges::RANGE_PLUS_ONE),\n+        LintId::of(&ref_option_ref::REF_OPTION_REF),\n         LintId::of(&shadow::SHADOW_UNRELATED),\n         LintId::of(&strings::STRING_ADD_ASSIGN),\n         LintId::of(&trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),"}, {"sha": "a914a77d48b4e3a1f1168925a9098d3896edceea", "filename": "clippy_lints/src/ref_option_ref.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2fe87a89c9b37978b9589ce7930577f05aa91cb2/clippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe87a89c9b37978b9589ce7930577f05aa91cb2/clippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fref_option_ref.rs?ref=2fe87a89c9b37978b9589ce7930577f05aa91cb2", "patch": "@@ -0,0 +1,66 @@\n+use crate::utils::{last_path_segment, snippet, span_lint_and_sugg};\n+use rustc_hir::{GenericArg, Mutability, Ty, TyKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `&Option<&T>`.\n+    ///\n+    /// **Why is this bad?** Since `&` is Copy, it's useless to have a\n+    /// reference on `Option<&T>`.\n+    ///\n+    /// **Known problems:** It may be irrevelent to use this lint on\n+    /// public API code as it will make a breaking change to apply it.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// let x: &Option<&u32> = &Some(&0u32);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// let x: Option<&u32> = Some(&0u32);\n+    /// ```\n+    pub REF_OPTION_REF,\n+    pedantic,\n+    \"use `Option<&T>` instead of `&Option<&T>`\"\n+}\n+\n+declare_lint_pass!(RefOptionRef => [REF_OPTION_REF]);\n+\n+impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n+    fn check_ty(&mut self, cx: &LateContext<'tcx>, ty: &'tcx Ty<'tcx>) {\n+        if_chain! {\n+            if let TyKind::Rptr(_, ref mut_ty) = ty.kind;\n+            if mut_ty.mutbl == Mutability::Not;\n+            if let TyKind::Path(ref qpath) = &mut_ty.ty.kind;\n+            let last = last_path_segment(qpath);\n+            if let Some(res) = last.res;\n+            if let Some(def_id) = res.opt_def_id();\n+\n+            if cx.tcx.is_diagnostic_item(sym!(option_type), def_id);\n+            if let Some(ref params) = last_path_segment(qpath).args ;\n+            if !params.parenthesized;\n+            if let Some(inner_ty) = params.args.iter().find_map(|arg| match arg {\n+                GenericArg::Type(inner_ty) => Some(inner_ty),\n+                _ => None,\n+            });\n+            if let TyKind::Rptr(_, _) = inner_ty.kind;\n+\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    REF_OPTION_REF,\n+                    ty.span,\n+                    \"since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\",\n+                    \"try\",\n+                    format!(\"Option<{}>\", &snippet(cx, inner_ty.span, \"..\")),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "6f3a4b1b013d1da8eb8bd1ab86257f6dffa105ae", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fe87a89c9b37978b9589ce7930577f05aa91cb2/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe87a89c9b37978b9589ce7930577f05aa91cb2/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=2fe87a89c9b37978b9589ce7930577f05aa91cb2", "patch": "@@ -2034,6 +2034,13 @@ vec![\n         deprecation: None,\n         module: \"reference\",\n     },\n+    Lint {\n+        name: \"ref_option_ref\",\n+        group: \"pedantic\",\n+        desc: \"use `Option<&T>` instead of `&Option<&T>`\",\n+        deprecation: None,\n+        module: \"ref_option_ref\",\n+    },\n     Lint {\n         name: \"repeat_once\",\n         group: \"complexity\","}, {"sha": "47e7460fa7a44d4a11f38119d9c2a118d7075d0f", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fe87a89c9b37978b9589ce7930577f05aa91cb2/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2fe87a89c9b37978b9589ce7930577f05aa91cb2/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=2fe87a89c9b37978b9589ce7930577f05aa91cb2", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n #![allow(clippy::redundant_closure)]\n+#![allow(clippy::ref_option_ref)]\n \n fn bad1(string: Option<&str>) -> (bool, &str) {\n     string.map_or((false, \"hello\"), |x| (true, x))"}, {"sha": "e2f8dec3b930c898bafc52bf82acbf6852c48d7c", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fe87a89c9b37978b9589ce7930577f05aa91cb2/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe87a89c9b37978b9589ce7930577f05aa91cb2/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=2fe87a89c9b37978b9589ce7930577f05aa91cb2", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n #![allow(clippy::redundant_closure)]\n+#![allow(clippy::ref_option_ref)]\n \n fn bad1(string: Option<&str>) -> (bool, &str) {\n     if let Some(x) = string {"}, {"sha": "7aab068800a029079e17fe4522474ef04e3bd264", "filename": "tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2fe87a89c9b37978b9589ce7930577f05aa91cb2/tests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe87a89c9b37978b9589ce7930577f05aa91cb2/tests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.stderr?ref=2fe87a89c9b37978b9589ce7930577f05aa91cb2", "patch": "@@ -1,5 +1,5 @@\n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:6:5\n+  --> $DIR/option_if_let_else.rs:7:5\n    |\n LL | /     if let Some(x) = string {\n LL | |         (true, x)\n@@ -11,7 +11,7 @@ LL | |     }\n    = note: `-D clippy::option-if-let-else` implied by `-D warnings`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:16:12\n+  --> $DIR/option_if_let_else.rs:17:12\n    |\n LL |       } else if let Some(x) = string {\n    |  ____________^\n@@ -22,19 +22,19 @@ LL | |     }\n    | |_____^ help: try: `{ string.map_or(Some((false, \"\")), |x| Some((true, x))) }`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:24:13\n+  --> $DIR/option_if_let_else.rs:25:13\n    |\n LL |     let _ = if let Some(s) = *string { s.len() } else { 0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `string.map_or(0, |s| s.len())`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:25:13\n+  --> $DIR/option_if_let_else.rs:26:13\n    |\n LL |     let _ = if let Some(s) = &num { s } else { &0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.as_ref().map_or(&0, |s| s)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:26:13\n+  --> $DIR/option_if_let_else.rs:27:13\n    |\n LL |       let _ = if let Some(s) = &mut num {\n    |  _____________^\n@@ -54,13 +54,13 @@ LL |     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:32:13\n+  --> $DIR/option_if_let_else.rs:33:13\n    |\n LL |     let _ = if let Some(ref s) = num { s } else { &0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.as_ref().map_or(&0, |s| s)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:33:13\n+  --> $DIR/option_if_let_else.rs:34:13\n    |\n LL |       let _ = if let Some(mut s) = num {\n    |  _____________^\n@@ -80,7 +80,7 @@ LL |     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:39:13\n+  --> $DIR/option_if_let_else.rs:40:13\n    |\n LL |       let _ = if let Some(ref mut s) = num {\n    |  _____________^\n@@ -100,7 +100,7 @@ LL |     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:48:5\n+  --> $DIR/option_if_let_else.rs:49:5\n    |\n LL | /     if let Some(x) = arg {\n LL | |         let y = x * x;\n@@ -119,7 +119,7 @@ LL |     })\n    |\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:61:13\n+  --> $DIR/option_if_let_else.rs:62:13\n    |\n LL |       let _ = if let Some(x) = arg {\n    |  _____________^\n@@ -131,7 +131,7 @@ LL | |     };\n    | |_____^ help: try: `arg.map_or_else(|| side_effect(), |x| x)`\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:70:13\n+  --> $DIR/option_if_let_else.rs:71:13\n    |\n LL |       let _ = if let Some(x) = arg {\n    |  _____________^\n@@ -154,7 +154,7 @@ LL |     }, |x| x * x * x * x);\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:99:13\n+  --> $DIR/option_if_let_else.rs:100:13\n    |\n LL |     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `optional.map_or(5, |x| x + 2)`"}, {"sha": "b2c275d68afa16169ad78ac3b64562d766a88ca7", "filename": "tests/ui/ref_option_ref.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2fe87a89c9b37978b9589ce7930577f05aa91cb2/tests%2Fui%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe87a89c9b37978b9589ce7930577f05aa91cb2/tests%2Fui%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_option_ref.rs?ref=2fe87a89c9b37978b9589ce7930577f05aa91cb2", "patch": "@@ -0,0 +1,47 @@\n+#![allow(unused)]\n+#![warn(clippy::ref_option_ref)]\n+\n+// This lint is not tagged as run-rustfix because automatically\n+// changing the type of a variable would also means changing\n+// all usages of this variable to match and This is not handled\n+// by this lint.\n+\n+static THRESHOLD: i32 = 10;\n+static REF_THRESHOLD: &Option<&i32> = &Some(&THRESHOLD);\n+const CONST_THRESHOLD: &i32 = &10;\n+const REF_CONST: &Option<&i32> = &Some(&CONST_THRESHOLD);\n+\n+type RefOptRefU32<'a> = &'a Option<&'a u32>;\n+type RefOptRef<'a, T> = &'a Option<&'a T>;\n+\n+fn foo(data: &Option<&u32>) {}\n+\n+fn bar(data: &u32) -> &Option<&u32> {\n+    &None\n+}\n+\n+struct StructRef<'a> {\n+    data: &'a Option<&'a u32>,\n+}\n+\n+struct StructTupleRef<'a>(u32, &'a Option<&'a u32>);\n+\n+enum EnumRef<'a> {\n+    Variant1(u32),\n+    Variant2(&'a Option<&'a u32>),\n+}\n+\n+trait RefOptTrait {\n+    type A;\n+    fn foo(&self, _: Self::A);\n+}\n+\n+impl RefOptTrait for u32 {\n+    type A = &'static Option<&'static Self>;\n+\n+    fn foo(&self, _: Self::A) {}\n+}\n+\n+fn main() {\n+    let x: &Option<&u32> = &None;\n+}"}, {"sha": "4e7fc800061185a3d593562168986905e53e4f52", "filename": "tests/ui/ref_option_ref.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2fe87a89c9b37978b9589ce7930577f05aa91cb2/tests%2Fui%2Fref_option_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe87a89c9b37978b9589ce7930577f05aa91cb2/tests%2Fui%2Fref_option_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_option_ref.stderr?ref=2fe87a89c9b37978b9589ce7930577f05aa91cb2", "patch": "@@ -0,0 +1,70 @@\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n+  --> $DIR/ref_option_ref.rs:10:23\n+   |\n+LL | static REF_THRESHOLD: &Option<&i32> = &Some(&THRESHOLD);\n+   |                       ^^^^^^^^^^^^^ help: try: `Option<&i32>`\n+   |\n+   = note: `-D clippy::ref-option-ref` implied by `-D warnings`\n+\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n+  --> $DIR/ref_option_ref.rs:12:18\n+   |\n+LL | const REF_CONST: &Option<&i32> = &Some(&CONST_THRESHOLD);\n+   |                  ^^^^^^^^^^^^^ help: try: `Option<&i32>`\n+\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n+  --> $DIR/ref_option_ref.rs:14:25\n+   |\n+LL | type RefOptRefU32<'a> = &'a Option<&'a u32>;\n+   |                         ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n+\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n+  --> $DIR/ref_option_ref.rs:15:25\n+   |\n+LL | type RefOptRef<'a, T> = &'a Option<&'a T>;\n+   |                         ^^^^^^^^^^^^^^^^^ help: try: `Option<&'a T>`\n+\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n+  --> $DIR/ref_option_ref.rs:17:14\n+   |\n+LL | fn foo(data: &Option<&u32>) {}\n+   |              ^^^^^^^^^^^^^ help: try: `Option<&u32>`\n+\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n+  --> $DIR/ref_option_ref.rs:19:23\n+   |\n+LL | fn bar(data: &u32) -> &Option<&u32> {\n+   |                       ^^^^^^^^^^^^^ help: try: `Option<&u32>`\n+\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n+  --> $DIR/ref_option_ref.rs:24:11\n+   |\n+LL |     data: &'a Option<&'a u32>,\n+   |           ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n+\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n+  --> $DIR/ref_option_ref.rs:27:32\n+   |\n+LL | struct StructTupleRef<'a>(u32, &'a Option<&'a u32>);\n+   |                                ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n+\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n+  --> $DIR/ref_option_ref.rs:31:14\n+   |\n+LL |     Variant2(&'a Option<&'a u32>),\n+   |              ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n+\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n+  --> $DIR/ref_option_ref.rs:40:14\n+   |\n+LL |     type A = &'static Option<&'static Self>;\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'static Self>`\n+\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n+  --> $DIR/ref_option_ref.rs:46:12\n+   |\n+LL |     let x: &Option<&u32> = &None;\n+   |            ^^^^^^^^^^^^^ help: try: `Option<&u32>`\n+\n+error: aborting due to 11 previous errors\n+"}]}