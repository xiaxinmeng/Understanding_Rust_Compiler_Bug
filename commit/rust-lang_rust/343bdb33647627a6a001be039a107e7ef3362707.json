{"sha": "343bdb33647627a6a001be039a107e7ef3362707", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0M2JkYjMzNjQ3NjI3YTZhMDAxYmUwMzlhMTA3ZTdlZjMzNjI3MDc=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-11-02T16:56:54Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-11-02T17:08:38Z"}, "message": "Give better suggestion by working on span on `deref_addrof` lint", "tree": {"sha": "442db91fc3c459f4d1c1f2605ab600a5d489e6af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/442db91fc3c459f4d1c1f2605ab600a5d489e6af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/343bdb33647627a6a001be039a107e7ef3362707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/343bdb33647627a6a001be039a107e7ef3362707", "html_url": "https://github.com/rust-lang/rust/commit/343bdb33647627a6a001be039a107e7ef3362707", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/343bdb33647627a6a001be039a107e7ef3362707/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "158bf9aa443c5ea93ff4b3def8c7220632e45442", "url": "https://api.github.com/repos/rust-lang/rust/commits/158bf9aa443c5ea93ff4b3def8c7220632e45442", "html_url": "https://github.com/rust-lang/rust/commit/158bf9aa443c5ea93ff4b3def8c7220632e45442"}], "stats": {"total": 75, "additions": 66, "deletions": 9}, "files": [{"sha": "8646d6167351696c7ebc3e4c78379c5c5734910d", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/343bdb33647627a6a001be039a107e7ef3362707/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343bdb33647627a6a001be039a107e7ef3362707/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=343bdb33647627a6a001be039a107e7ef3362707", "patch": "@@ -1,9 +1,11 @@\n-use crate::utils::{in_macro, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{in_macro, snippet_opt, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n-use rustc_ast::ast::{Expr, ExprKind, UnOp};\n+use rustc_ast::ast::{Expr, ExprKind, UnOp, Mutability};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::BytePos;\n+// use rustc_span::source_map::{BytePos, Span};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `*&` and `*&mut` in expressions.\n@@ -42,13 +44,37 @@ impl EarlyLintPass for DerefAddrOf {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &Expr) {\n         if_chain! {\n             if let ExprKind::Unary(UnOp::Deref, ref deref_target) = e.kind;\n-            if let ExprKind::AddrOf(_, _, ref addrof_target) = without_parens(deref_target).kind;\n+            if let ExprKind::AddrOf(_, ref mutability, ref addrof_target) = without_parens(deref_target).kind;\n             if !in_macro(addrof_target.span);\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = if e.span.from_expansion() {\n-                    let snip = snippet_with_applicability(cx, e.span, \"_\", &mut applicability);\n-                    snip.trim_start_matches(|c| c == '&' || c == '*').to_string()\n+                    if let Ok(macro_source) = cx.sess.source_map().span_to_snippet(e.span) {\n+                        // Remove leading whitespace from the given span\n+                        // e.g: ` $visitor` turns into `$visitor`\n+                        let trim_leading_whitespaces = |span| {\n+                            if let Some(start_no_whitespace) = snippet_opt(cx, span).and_then(|snip| {\n+                                snip.find(|c: char| !c.is_whitespace()).map(|pos| {\n+                                    span.lo() + BytePos(pos as u32)\n+                                })\n+                            }) {\n+                                e.span.with_lo(start_no_whitespace)\n+                            } else {\n+                                span\n+                            }\n+                        };\n+\n+                        let rpos = if *mutability == Mutability::Mut {\n+                            macro_source.rfind(\"mut\").expect(\"already checked this is a mutable reference\") + \"mut\".len()\n+                        } else {\n+                            macro_source.rfind(\"&\").expect(\"already checked this is a reference\") + \"&\".len()\n+                        };\n+                        let span_after_ref = e.span.with_lo(BytePos(e.span.lo().0 + rpos as u32));\n+                        let span = trim_leading_whitespaces(span_after_ref);\n+                        snippet_with_applicability(cx, span, \"_\", &mut applicability).to_string()\n+                    } else {\n+                        snippet_with_applicability(cx, e.span, \"_\", &mut applicability).to_string()\n+                    }\n                 } else {\n                     snippet_with_applicability(cx, addrof_target.span, \"_\", &mut applicability).to_string()\n                 };"}, {"sha": "689e9d552234e315a81b83cdb5d76c5db73cd38c", "filename": "tests/ui/deref_addrof.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/343bdb33647627a6a001be039a107e7ef3362707/tests%2Fui%2Fderef_addrof.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/343bdb33647627a6a001be039a107e7ef3362707/tests%2Fui%2Fderef_addrof.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.fixed?ref=343bdb33647627a6a001be039a107e7ef3362707", "patch": "@@ -44,9 +44,19 @@ macro_rules! m {\n     };\n }\n \n+#[rustfmt::skip]\n+macro_rules! m_mut {\n+    ($visitor: expr) => {\n+        $visitor\n+    };\n+}\n+\n pub struct S;\n impl S {\n     pub fn f(&self) -> &Self {\n         m!(self)\n     }\n+    pub fn f_mut(&self) -> &Self {\n+        m_mut!(self)\n+    }\n }"}, {"sha": "57effce5d129df0309d16e37faf2e3c4f0091561", "filename": "tests/ui/deref_addrof.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/343bdb33647627a6a001be039a107e7ef3362707/tests%2Fui%2Fderef_addrof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343bdb33647627a6a001be039a107e7ef3362707/tests%2Fui%2Fderef_addrof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.rs?ref=343bdb33647627a6a001be039a107e7ef3362707", "patch": "@@ -40,7 +40,14 @@ fn main() {\n \n macro_rules! m {\n     ($visitor: expr) => {\n-        *&$visitor\n+        *& $visitor\n+    };\n+}\n+\n+#[rustfmt::skip]\n+macro_rules! m_mut {\n+    ($visitor: expr) => {\n+        *& mut $visitor\n     };\n }\n \n@@ -49,4 +56,7 @@ impl S {\n     pub fn f(&self) -> &Self {\n         m!(self)\n     }\n+    pub fn f_mut(&self) -> &Self {\n+        m_mut!(self)\n+    }\n }"}, {"sha": "52c1f7d1da8fea68c191c02a6debf3a927c355dd", "filename": "tests/ui/deref_addrof.stderr", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/343bdb33647627a6a001be039a107e7ef3362707/tests%2Fui%2Fderef_addrof.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/343bdb33647627a6a001be039a107e7ef3362707/tests%2Fui%2Fderef_addrof.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.stderr?ref=343bdb33647627a6a001be039a107e7ef3362707", "patch": "@@ -51,13 +51,24 @@ LL |     let b = **&aref;\n error: immediately dereferencing a reference\n   --> $DIR/deref_addrof.rs:43:9\n    |\n-LL |         *&$visitor\n-   |         ^^^^^^^^^^ help: try this: `$visitor`\n+LL |         *& $visitor\n+   |         ^^^^^^^^^^^ help: try this: `$visitor`\n ...\n LL |         m!(self)\n    |         -------- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 9 previous errors\n+error: immediately dereferencing a reference\n+  --> $DIR/deref_addrof.rs:50:9\n+   |\n+LL |         *& mut $visitor\n+   |         ^^^^^^^^^^^^^^^ help: try this: `$visitor`\n+...\n+LL |         m_mut!(self)\n+   |         ------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 10 previous errors\n "}]}