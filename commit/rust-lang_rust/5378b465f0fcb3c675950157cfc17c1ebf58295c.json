{"sha": "5378b465f0fcb3c675950157cfc17c1ebf58295c", "node_id": "C_kwDOAAsO6NoAKDUzNzhiNDY1ZjBmY2IzYzY3NTk1MDE1N2NmYzE3YzFlYmY1ODI5NWM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-06T13:15:20Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T00:22:27Z"}, "message": "fix cranelift and gcc", "tree": {"sha": "835dd3fca52d666a610672119cd5d90de41cbf09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/835dd3fca52d666a610672119cd5d90de41cbf09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5378b465f0fcb3c675950157cfc17c1ebf58295c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5378b465f0fcb3c675950157cfc17c1ebf58295c", "html_url": "https://github.com/rust-lang/rust/commit/5378b465f0fcb3c675950157cfc17c1ebf58295c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5378b465f0fcb3c675950157cfc17c1ebf58295c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb747d0e24a38422d7b7f6b9372dd2ecfe6f408f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb747d0e24a38422d7b7f6b9372dd2ecfe6f408f", "html_url": "https://github.com/rust-lang/rust/commit/fb747d0e24a38422d7b7f6b9372dd2ecfe6f408f"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "7ffb345df9b6d4ea9b60b3160f768e704c6e3bbf", "filename": "src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5378b465f0fcb3c675950157cfc17c1ebf58295c/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5378b465f0fcb3c675950157cfc17c1ebf58295c/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=5378b465f0fcb3c675950157cfc17c1ebf58295c", "patch": "@@ -279,12 +279,12 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n \n pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: ConstAllocation<'tcx>) -> RValue<'gcc> {\n     let alloc = alloc.inner();\n-    let mut llvals = Vec::with_capacity(alloc.provenance().len() + 1);\n+    let mut llvals = Vec::with_capacity(alloc.provenance().ptrs().len() + 1);\n     let dl = cx.data_layout();\n     let pointer_size = dl.pointer_size.bytes() as usize;\n \n     let mut next_offset = 0;\n-    for &(offset, alloc_id) in alloc.provenance().iter() {\n+    for &(offset, alloc_id) in alloc.provenance().ptrs().iter() {\n         let offset = offset.bytes();\n         assert_eq!(offset as usize as u64, offset);\n         let offset = offset as usize;"}]}