{"sha": "a2d752807a017f70f28a70b7f16dc6a20cd566ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZDc1MjgwN2EwMTdmNzBmMjhhNzBiN2YxNmRjNmEyMGNkNTY2ZWU=", "commit": {"author": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-11T06:57:50Z"}, "committer": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-11T06:57:50Z"}, "message": "Lint on `Err(_)` arm of a match", "tree": {"sha": "0dc06cb1d5da629af3b0a0e036f7a1afcc684450", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dc06cb1d5da629af3b0a0e036f7a1afcc684450"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2d752807a017f70f28a70b7f16dc6a20cd566ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2d752807a017f70f28a70b7f16dc6a20cd566ee", "html_url": "https://github.com/rust-lang/rust/commit/a2d752807a017f70f28a70b7f16dc6a20cd566ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2d752807a017f70f28a70b7f16dc6a20cd566ee/comments", "author": null, "committer": null, "parents": [{"sha": "37a0e52a1ed5077ab587f5524a9ac623cc71b223", "url": "https://api.github.com/repos/rust-lang/rust/commits/37a0e52a1ed5077ab587f5524a9ac623cc71b223", "html_url": "https://github.com/rust-lang/rust/commit/37a0e52a1ed5077ab587f5524a9ac623cc71b223"}], "stats": {"total": 133, "additions": 129, "deletions": 4}, "files": [{"sha": "4d6aff398b6693026746a6ec167247ae6bda9d74", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a2d752807a017f70f28a70b7f16dc6a20cd566ee/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a2d752807a017f70f28a70b7f16dc6a20cd566ee/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a2d752807a017f70f28a70b7f16dc6a20cd566ee", "patch": "@@ -362,6 +362,7 @@ All notable changes to this project will be documented in this file.\n [`match_overlapping_arm`]: https://github.com/Manishearth/rust-clippy/wiki#match_overlapping_arm\n [`match_ref_pats`]: https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats\n [`match_same_arms`]: https://github.com/Manishearth/rust-clippy/wiki#match_same_arms\n+[`match_wild_err_arm`]: https://github.com/Manishearth/rust-clippy/wiki#match_wild_err_arm\n [`mem_forget`]: https://github.com/Manishearth/rust-clippy/wiki#mem_forget\n [`min_max`]: https://github.com/Manishearth/rust-clippy/wiki#min_max\n [`misrefactored_assign_op`]: https://github.com/Manishearth/rust-clippy/wiki#misrefactored_assign_op"}, {"sha": "de01a2533238173b44446d30a8be781d5f1ef487", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2d752807a017f70f28a70b7f16dc6a20cd566ee/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a2d752807a017f70f28a70b7f16dc6a20cd566ee/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a2d752807a017f70f28a70b7f16dc6a20cd566ee", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 186 lints included in this crate:\n+There are 187 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -271,6 +271,7 @@ name\n [match_overlapping_arm](https://github.com/Manishearth/rust-clippy/wiki#match_overlapping_arm)                         | warn    | a match with overlapping arms\n [match_ref_pats](https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats)                                       | warn    | a match or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\n [match_same_arms](https://github.com/Manishearth/rust-clippy/wiki#match_same_arms)                                     | warn    | `match` with identical arm bodies\n+[match_wild_err_arm](https://github.com/Manishearth/rust-clippy/wiki#match_wild_err_arm)                               | warn    | a match with `Err(_)` arm\n [mem_forget](https://github.com/Manishearth/rust-clippy/wiki#mem_forget)                                               | allow   | `mem::forget` usage on `Drop` types, likely to cause memory leaks\n [min_max](https://github.com/Manishearth/rust-clippy/wiki#min_max)                                                     | warn    | `min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\n [misrefactored_assign_op](https://github.com/Manishearth/rust-clippy/wiki#misrefactored_assign_op)                     | warn    | having a variable on both sides of an assign op"}, {"sha": "661e6415bb3f7a2e0f40bd6fb3988563d3d866b4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a2d752807a017f70f28a70b7f16dc6a20cd566ee/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d752807a017f70f28a70b7f16dc6a20cd566ee/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a2d752807a017f70f28a70b7f16dc6a20cd566ee", "patch": "@@ -412,6 +412,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         matches::MATCH_BOOL,\n         matches::MATCH_OVERLAPPING_ARM,\n         matches::MATCH_REF_PATS,\n+        matches::MATCH_WILD_ERR_ARM,\n         matches::SINGLE_MATCH,\n         methods::CHARS_NEXT_CMP,\n         methods::CLONE_DOUBLE_REF,"}, {"sha": "d9e5daf889fabb76d72a5b40927b13eae80b3a5c", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a2d752807a017f70f28a70b7f16dc6a20cd566ee/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d752807a017f70f28a70b7f16dc6a20cd566ee/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=a2d752807a017f70f28a70b7f16dc6a20cd566ee", "patch": "@@ -10,7 +10,7 @@ use std::collections::Bound;\n use syntax::ast::LitKind;\n use syntax::codemap::Span;\n use utils::paths;\n-use utils::{match_type, snippet, span_note_and_lint, span_lint_and_then, in_external_macro, expr_block};\n+use utils::{match_type, snippet, span_note_and_lint, span_lint_and_then, in_external_macro, expr_block, walk_ptrs_ty, is_expn_of};\n use utils::sugg::Sugg;\n \n /// **What it does:** Checks for matches with a single arm where an `if let`\n@@ -121,6 +121,26 @@ declare_lint! {\n     \"a match with overlapping arms\"\n }\n \n+/// **What it does:** Checks for arm matches all errors with `Err(_)`.\n+///\n+/// **Why is this bad?** It is a bad practice to catch all errors the same way\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let x : Result(i32, &str) = Ok(3);\n+/// match x {\n+///     Ok(_) => println!(\"ok\"),\n+///     Err(_) => println!(\"err\"),\n+/// }\n+/// ```\n+declare_lint! {\n+    pub MATCH_WILD_ERR_ARM,\n+    Warn,\n+    \"a match with `Err(_)` arm\"\n+}\n+\n #[allow(missing_copy_implementations)]\n pub struct MatchPass;\n \n@@ -130,7 +150,8 @@ impl LintPass for MatchPass {\n                     MATCH_REF_PATS,\n                     MATCH_BOOL,\n                     SINGLE_MATCH_ELSE,\n-                    MATCH_OVERLAPPING_ARM)\n+                    MATCH_OVERLAPPING_ARM,\n+                    MATCH_WILD_ERR_ARM)\n     }\n }\n \n@@ -143,6 +164,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MatchPass {\n             check_single_match(cx, ex, arms, expr);\n             check_match_bool(cx, ex, arms, expr);\n             check_overlapping_arms(cx, ex, arms);\n+            check_wild_err_arm(cx, ex, arms);\n         }\n         if let ExprMatch(ref ex, ref arms, source) = expr.node {\n             check_match_ref_pats(cx, ex, arms, source, expr);\n@@ -322,6 +344,45 @@ fn check_overlapping_arms(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n     }\n }\n \n+fn check_wild_err_arm(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n+    let ex_ty = walk_ptrs_ty(cx.tables.expr_ty(ex));\n+    if match_type(cx, ex_ty, &paths::RESULT) {\n+        for arm in arms {\n+            if let PatKind::TupleStruct(ref path, ref inner, _) = arm.pats[0].node {\n+                let path_str = print::to_string(print::NO_ANN, |s| s.print_qpath(path, false));\n+                if inner.iter().any(|pat| pat.node == PatKind::Wild) &&\n+                    path_str == \"Err\" {\n+                        // `Err(_)` arm found\n+                        let mut need_lint = true;\n+                        if let ExprBlock(ref block) = arm.body.node {\n+                            if is_unreachable_block(cx, block) {\n+                                need_lint = false;\n+                            }\n+                        }\n+\n+                        if need_lint {\n+                            span_note_and_lint(cx,\n+                                               MATCH_WILD_ERR_ARM,\n+                                               arm.pats[0].span,\n+                                               \"Err(_) will match all errors, maybe not a good idea\",\n+                                               arm.pats[0].span,\n+                                               \"to remove this warning, match each error seperately or use unreachable macro\");\n+                        }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+// If the block contains only a `unreachable!` macro (as expression or statement)\n+fn is_unreachable_block(cx: &LateContext, block: &Block) -> bool {\n+    match (&block.expr, block.stmts.len(), block.stmts.first()) {\n+        (&Some(ref exp), 0, _) => is_expn_of(cx, exp.span, \"unreachable\").is_some(),\n+        (&None, 1, Some(ref stmt)) => is_expn_of(cx, stmt.span, \"unreachable\").is_some(),\n+        _ => false\n+    }\n+}\n+\n fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: MatchSource, expr: &Expr) {\n     if has_only_ref_pats(arms) {\n         if let ExprAddrOf(Mutability::MutImmutable, ref inner) = ex.node {"}, {"sha": "277f96be686244c928370ec82e8ba3ca93332f34", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a2d752807a017f70f28a70b7f16dc6a20cd566ee/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d752807a017f70f28a70b7f16dc6a20cd566ee/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=a2d752807a017f70f28a70b7f16dc6a20cd566ee", "patch": "@@ -283,5 +283,43 @@ fn overlapping() {\n     }\n }\n \n+fn match_wild_err_arm() {\n+    let x: Result<i32, &str> = Ok(3);\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => println!(\"err\")\n+    }\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => {\n+            println!(\"err\");\n+            unreachable!()\n+        }\n+    }\n+\n+    // allowed when using with unreachable as the only statement/expression\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => unreachable!()\n+    }\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => {unreachable!()}\n+    }\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => {unreachable!();}\n+    }\n+}\n+\n fn main() {\n }"}, {"sha": "438c2e12c29f09658dee0ebe8dbb5eb4a7505dee", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a2d752807a017f70f28a70b7f16dc6a20cd566ee/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2d752807a017f70f28a70b7f16dc6a20cd566ee/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=a2d752807a017f70f28a70b7f16dc6a20cd566ee", "patch": "@@ -388,5 +388,28 @@ note: overlaps with this\n 275 |         0 ... 11 => println!(\"0 ... 11\"),\n     |         ^^^^^^^^\n \n-error: aborting due to 23 previous errors\n+error: Err(_) will match all errors, maybe not a good idea\n+   --> $DIR/matches.rs:292:9\n+    |\n+292 |         Err(_) => println!(\"err\")\n+    |         ^^^^^^\n+    |\n+    = note: #[deny(match_wild_err_arm)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/matches.rs:5:9\n+    |\n+5   | #![deny(clippy)]\n+    |         ^^^^^^\n+    = note: to remove this warning, match each error seperately or use unreachable macro\n+\n+error: Err(_) will match all errors, maybe not a good idea\n+   --> $DIR/matches.rs:298:9\n+    |\n+298 |         Err(_) => {\n+    |         ^^^^^^\n+    |\n+    = note: #[deny(match_wild_err_arm)] implied by #[deny(clippy)]\n+    = note: to remove this warning, match each error seperately or use unreachable macro\n+\n+error: aborting due to 25 previous errors\n "}]}