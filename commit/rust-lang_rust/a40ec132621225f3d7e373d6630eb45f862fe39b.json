{"sha": "a40ec132621225f3d7e373d6630eb45f862fe39b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MGVjMTMyNjIxMjI1ZjNkN2UzNzNkNjYzMGViNDVmODYyZmUzOWI=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-03-25T00:23:50Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-04-14T01:48:55Z"}, "message": "Add test for #68112 (existing output)", "tree": {"sha": "568f354669a0500a4f5e53975c0dc2686fef2837", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/568f354669a0500a4f5e53975c0dc2686fef2837"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a40ec132621225f3d7e373d6630eb45f862fe39b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a40ec132621225f3d7e373d6630eb45f862fe39b", "html_url": "https://github.com/rust-lang/rust/commit/a40ec132621225f3d7e373d6630eb45f862fe39b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a40ec132621225f3d7e373d6630eb45f862fe39b/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b129b32afa3fa896f1464b9a529c30116a7a4e5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b129b32afa3fa896f1464b9a529c30116a7a4e5c", "html_url": "https://github.com/rust-lang/rust/commit/b129b32afa3fa896f1464b9a529c30116a7a4e5c"}], "stats": {"total": 194, "additions": 194, "deletions": 0}, "files": [{"sha": "0d269b1801bacb5c05ed4ddd84e32b6dc8b53247", "filename": "src/test/ui/async-await/issue-68112.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a40ec132621225f3d7e373d6630eb45f862fe39b/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40ec132621225f3d7e373d6630eb45f862fe39b/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs?ref=a40ec132621225f3d7e373d6630eb45f862fe39b", "patch": "@@ -0,0 +1,53 @@\n+// edition:2018\n+\n+use std::{\n+    future::Future,\n+    cell::RefCell,\n+    sync::Arc,\n+    pin::Pin,\n+    task::{Context, Poll},\n+};\n+\n+fn require_send(_: impl Send) {}\n+\n+struct Ready<T>(Option<T>);\n+impl<T> Future for Ready<T> {\n+    type Output = T;\n+    fn poll(mut self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<T> {\n+        Poll::Ready(self.0.take().unwrap())\n+    }\n+}\n+fn ready<T>(t: T) -> Ready<T> {\n+    Ready(Some(t))\n+}\n+\n+fn make_non_send_future1() -> impl Future<Output = Arc<RefCell<i32>>> {\n+    ready(Arc::new(RefCell::new(0)))\n+}\n+\n+fn test1() {\n+    let send_fut = async {\n+        let non_send_fut = make_non_send_future1();\n+        let _ = non_send_fut.await;\n+        ready(0).await;\n+    };\n+    require_send(send_fut);\n+    //~^ ERROR future cannot be sent between threads\n+}\n+\n+async fn ready2<T>(t: T) -> T { t }\n+fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n+    ready2(Arc::new(RefCell::new(0)))\n+}\n+\n+fn test2() {\n+    let send_fut = async {\n+        let non_send_fut = make_non_send_future2();\n+        let _ = non_send_fut.await;\n+        ready(0).await;\n+    };\n+    require_send(send_fut);\n+    //~^ ERROR `std::cell::RefCell<i32>` cannot be shared between threads safely\n+}\n+\n+fn main() {}"}, {"sha": "461967b7d8b2fc4f6cc0c71041740776301af8a3", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a40ec132621225f3d7e373d6630eb45f862fe39b/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a40ec132621225f3d7e373d6630eb45f862fe39b/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=a40ec132621225f3d7e373d6630eb45f862fe39b", "patch": "@@ -0,0 +1,45 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-68112.rs:34:5\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |    ------------         ---- required by this bound in `require_send`\n+...\n+LL |     require_send(send_fut);\n+   |     ^^^^^^^^^^^^ future returned by `test1` is not `Send`\n+   |\n+   = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-68112.rs:32:9\n+   |\n+LL |         let non_send_fut = make_non_send_future1();\n+   |             ------------ has type `impl std::future::Future`\n+LL |         let _ = non_send_fut.await;\n+LL |         ready(0).await;\n+   |         ^^^^^^^^ await occurs here, with `non_send_fut` maybe used later\n+LL |     };\n+   |     - `non_send_fut` is later dropped here\n+\n+error[E0277]: `std::cell::RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/issue-68112.rs:49:5\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |    ------------         ---- required by this bound in `require_send`\n+...\n+LL |     require_send(send_fut);\n+   |     ^^^^^^^^^^^^ `std::cell::RefCell<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<std::cell::RefCell<i32>>`\n+   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:38:31: 38:36 t:std::sync::Arc<std::cell::RefCell<i32>> {}]`\n+   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:38:31: 38:36 t:std::sync::Arc<std::cell::RefCell<i32>> {}]>`\n+   = note: required because it appears within the type `impl std::future::Future`\n+   = note: required because it appears within the type `impl std::future::Future`\n+   = note: required because it appears within the type `impl std::future::Future`\n+   = note: required because it appears within the type `{std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}`\n+   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:44:26: 48:6 {std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}]`\n+   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:44:26: 48:6 {std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}]>`\n+   = note: required because it appears within the type `impl std::future::Future`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "ee62cbff08f3210fb346d7b0b4a9c7d7407eb428", "filename": "src/test/ui/generator/issue-68112.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a40ec132621225f3d7e373d6630eb45f862fe39b/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40ec132621225f3d7e373d6630eb45f862fe39b/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs?ref=a40ec132621225f3d7e373d6630eb45f862fe39b", "patch": "@@ -0,0 +1,56 @@\n+#![feature(generators, generator_trait)]\n+\n+use std::{\n+    cell::RefCell,\n+    sync::Arc,\n+    pin::Pin,\n+    ops::{Generator, GeneratorState},\n+};\n+\n+pub struct Ready<T>(Option<T>);\n+impl<T> Generator<()> for Ready<T> {\n+    type Return = T;\n+    type Yield = ();\n+    fn resume(mut self: Pin<&mut Self>, _args: ()) -> GeneratorState<(), T> {\n+        GeneratorState::Complete(self.0.take().unwrap())\n+    }\n+}\n+pub fn make_gen1<T>(t: T) -> Ready<T> {\n+    Ready(Some(t))\n+}\n+\n+fn require_send(_: impl Send) {}\n+\n+fn make_non_send_generator() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+    make_gen1(Arc::new(RefCell::new(0)))\n+}\n+\n+fn test1() {\n+    let send_gen = || {\n+        let _non_send_gen = make_non_send_generator();\n+        yield;\n+    };\n+    require_send(send_gen);\n+    //~^ ERROR future cannot be sent between threads\n+}\n+\n+pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n+    || {\n+        yield;\n+        t\n+    }\n+}\n+fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+    make_gen2(Arc::new(RefCell::new(0)))\n+}\n+\n+fn test2() {\n+    let send_gen = || {\n+        let _non_send_gen = make_non_send_generator2();\n+        yield;\n+    };\n+    require_send(send_gen);\n+    //~^ ERROR `std::cell::RefCell<i32>` cannot be shared between threads safely\n+}\n+\n+fn main() {}"}, {"sha": "b98afd47b566fd14a7b0240a9345c0018132eae6", "filename": "src/test/ui/generator/issue-68112.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a40ec132621225f3d7e373d6630eb45f862fe39b/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a40ec132621225f3d7e373d6630eb45f862fe39b/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=a40ec132621225f3d7e373d6630eb45f862fe39b", "patch": "@@ -0,0 +1,40 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-68112.rs:33:5\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |    ------------         ---- required by this bound in `require_send`\n+...\n+LL |     require_send(send_gen);\n+   |     ^^^^^^^^^^^^ future returned by `test1` is not `Send`\n+   |\n+   = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n+note: future is not `Send` as this value is used across an yield\n+  --> $DIR/issue-68112.rs:31:9\n+   |\n+LL |         let _non_send_gen = make_non_send_generator();\n+   |             ------------- has type `impl std::ops::Generator`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n+LL |     };\n+   |     - `_non_send_gen` is later dropped here\n+\n+error[E0277]: `std::cell::RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/issue-68112.rs:52:5\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |    ------------         ---- required by this bound in `require_send`\n+...\n+LL |     require_send(send_gen);\n+   |     ^^^^^^^^^^^^ `std::cell::RefCell<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<std::cell::RefCell<i32>>`\n+   = note: required because it appears within the type `[generator@$DIR/issue-68112.rs:38:5: 41:6 t:std::sync::Arc<std::cell::RefCell<i32>> {()}]`\n+   = note: required because it appears within the type `impl std::ops::Generator`\n+   = note: required because it appears within the type `impl std::ops::Generator`\n+   = note: required because it appears within the type `{impl std::ops::Generator, ()}`\n+   = note: required because it appears within the type `[generator@$DIR/issue-68112.rs:48:20: 51:6 {impl std::ops::Generator, ()}]`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}