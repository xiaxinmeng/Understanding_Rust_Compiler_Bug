{"sha": "7241267b93ea02cc25edda531fdc5b6261a96d01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNDEyNjdiOTNlYTAyY2MyNWVkZGE1MzFmZGM1YjYyNjFhOTZkMDE=", "commit": {"author": {"name": "Joseph Crail", "email": "jbcrail@gmail.com", "date": "2014-09-01T18:31:34Z"}, "committer": {"name": "Joseph Crail", "email": "jbcrail@gmail.com", "date": "2014-09-02T00:52:38Z"}, "message": "doc: Fix spelling errors.", "tree": {"sha": "8c1b56c9e28f7411df768567db36415a1dbed40c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c1b56c9e28f7411df768567db36415a1dbed40c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7241267b93ea02cc25edda531fdc5b6261a96d01", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7241267b93ea02cc25edda531fdc5b6261a96d01", "html_url": "https://github.com/rust-lang/rust/commit/7241267b93ea02cc25edda531fdc5b6261a96d01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7241267b93ea02cc25edda531fdc5b6261a96d01/comments", "author": {"login": "jbcrail", "id": 6038, "node_id": "MDQ6VXNlcjYwMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbcrail", "html_url": "https://github.com/jbcrail", "followers_url": "https://api.github.com/users/jbcrail/followers", "following_url": "https://api.github.com/users/jbcrail/following{/other_user}", "gists_url": "https://api.github.com/users/jbcrail/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbcrail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbcrail/subscriptions", "organizations_url": "https://api.github.com/users/jbcrail/orgs", "repos_url": "https://api.github.com/users/jbcrail/repos", "events_url": "https://api.github.com/users/jbcrail/events{/privacy}", "received_events_url": "https://api.github.com/users/jbcrail/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbcrail", "id": 6038, "node_id": "MDQ6VXNlcjYwMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbcrail", "html_url": "https://github.com/jbcrail", "followers_url": "https://api.github.com/users/jbcrail/followers", "following_url": "https://api.github.com/users/jbcrail/following{/other_user}", "gists_url": "https://api.github.com/users/jbcrail/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbcrail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbcrail/subscriptions", "organizations_url": "https://api.github.com/users/jbcrail/orgs", "repos_url": "https://api.github.com/users/jbcrail/repos", "events_url": "https://api.github.com/users/jbcrail/events{/privacy}", "received_events_url": "https://api.github.com/users/jbcrail/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3768ef477e2013fb565ce3c4b74c9af2a9841b21", "url": "https://api.github.com/repos/rust-lang/rust/commits/3768ef477e2013fb565ce3c4b74c9af2a9841b21", "html_url": "https://github.com/rust-lang/rust/commit/3768ef477e2013fb565ce3c4b74c9af2a9841b21"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "8db7ba9424fc128beb9c1e4bdcb06f3cdf7bc15e", "filename": "src/doc/complement-lang-faq.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7241267b93ea02cc25edda531fdc5b6261a96d01/src%2Fdoc%2Fcomplement-lang-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/7241267b93ea02cc25edda531fdc5b6261a96d01/src%2Fdoc%2Fcomplement-lang-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-lang-faq.md?ref=7241267b93ea02cc25edda531fdc5b6261a96d01", "patch": "@@ -83,7 +83,7 @@ We want to maintain the option to parametrize at runtime. We may eventually chan\n \n ## Why aren't values type-parametric? Why only items?\n \n-Doing so would make type inference much more complex, and require the implementation strategy of runtime parametrization.\n+Doing so would make type inference much more complex, and require the implementation strategy of runtime parameterization.\n \n ## Why are enumerations nominal and closed?\n "}, {"sha": "e5554e699982593d5e165f809dcd50b312686bcb", "filename": "src/doc/guide.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7241267b93ea02cc25edda531fdc5b6261a96d01/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/7241267b93ea02cc25edda531fdc5b6261a96d01/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=7241267b93ea02cc25edda531fdc5b6261a96d01", "patch": "@@ -1808,7 +1808,7 @@ our code in this file. We'll talk about multiple-file projects later on in the\n guide.\n \n Before we move on, let me show you one more Cargo command: `run`. `cargo run`\n-is kind of like `cargo build`, but it also then runs the produced exectuable.\n+is kind of like `cargo build`, but it also then runs the produced executable.\n Try it out:\n \n ```{notrust,ignore}"}, {"sha": "df0c5ac2e39983e6e8f69ab31272f669a6e3b972", "filename": "src/doc/rust.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7241267b93ea02cc25edda531fdc5b6261a96d01/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/7241267b93ea02cc25edda531fdc5b6261a96d01/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=7241267b93ea02cc25edda531fdc5b6261a96d01", "patch": "@@ -1954,7 +1954,7 @@ On `struct`s:\n \n - `repr` - specifies the representation to use for this struct. Takes a list\n   of options. The currently accepted ones are `C` and `packed`, which may be\n-  combined. `C` will use a C ABI comptible struct layout, and `packed` will\n+  combined. `C` will use a C ABI compatible struct layout, and `packed` will\n   remove any padding between fields (note that this is very fragile and may\n   break platforms which require aligned access).\n \n@@ -2367,7 +2367,7 @@ One can indicate the stability of an API using the following attributes:\n These levels are directly inspired by\n [Node.js' \"stability index\"](http://nodejs.org/api/documentation.html).\n \n-Stability levels are inherited, so an items's stability attribute is the\n+Stability levels are inherited, so an item's stability attribute is the\n default stability for everything nested underneath it.\n \n There are lints for disallowing items marked with certain levels: `deprecated`,\n@@ -2444,7 +2444,7 @@ The currently implemented features of the reference compiler are:\n \n * `concat_idents` - Allows use of the `concat_idents` macro, which is in many\n                     ways insufficient for concatenating identifiers, and may\n-                    be removed entirely for something more wholsome.\n+                    be removed entirely for something more wholesome.\n \n * `default_type_params` - Allows use of default type parameters. The future of\n                           this feature is uncertain.\n@@ -3604,7 +3604,7 @@ of the type.[^structtype]\n \n New instances of a `struct` can be constructed with a [struct expression](#structure-expressions).\n \n-The memory layout of a `struct` is undefined by default to allow for compiler optimziations like\n+The memory layout of a `struct` is undefined by default to allow for compiler optimizations like\n field reordering, but it can be fixed with the `#[repr(...)]` attribute.\n In either case, fields may be given in any order in a corresponding struct *expression*;\n the resulting `struct` value will always have the same memory layout.\n@@ -4214,7 +4214,7 @@ be ignored in favor of only building the artifacts specified by command line.\n   purpose of this output type is to create a static library containing all of\n   the local crate's code along with all upstream dependencies. The static\n   library is actually a `*.a` archive on linux and osx and a `*.lib` file on\n-  windows. This format is recommended for use in situtations such as linking\n+  windows. This format is recommended for use in situations such as linking\n   Rust code into an existing non-Rust application because it will not have\n   dynamic dependencies on other Rust code.\n "}]}