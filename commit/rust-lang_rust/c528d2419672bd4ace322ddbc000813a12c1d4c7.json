{"sha": "c528d2419672bd4ace322ddbc000813a12c1d4c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MjhkMjQxOTY3MmJkNGFjZTMyMmRkYmMwMDA4MTNhMTJjMWQ0Yzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-13T10:14:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-15T21:14:41Z"}, "message": "fix slice::check_range aliasing problems", "tree": {"sha": "869e53fda847a5ae86a36d89fbb6a865d74b463a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/869e53fda847a5ae86a36d89fbb6a865d74b463a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c528d2419672bd4ace322ddbc000813a12c1d4c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c528d2419672bd4ace322ddbc000813a12c1d4c7", "html_url": "https://github.com/rust-lang/rust/commit/c528d2419672bd4ace322ddbc000813a12c1d4c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c528d2419672bd4ace322ddbc000813a12c1d4c7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d888725fba70af4139629da0f7a17910aa66d951", "url": "https://api.github.com/repos/rust-lang/rust/commits/d888725fba70af4139629da0f7a17910aa66d951", "html_url": "https://github.com/rust-lang/rust/commit/d888725fba70af4139629da0f7a17910aa66d951"}], "stats": {"total": 171, "additions": 85, "deletions": 86}, "files": [{"sha": "65cfe9a9b49965c3b1576952c64f977c312b0ca4", "filename": "library/alloc/src/collections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c528d2419672bd4ace322ddbc000813a12c1d4c7/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c528d2419672bd4ace322ddbc000813a12c1d4c7/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs?ref=c528d2419672bd4ace322ddbc000813a12c1d4c7", "patch": "@@ -1089,11 +1089,7 @@ impl<T> VecDeque<T> {\n     where\n         R: RangeBounds<usize>,\n     {\n-        // SAFETY: This buffer is only used to check the range. It might be partially\n-        // uninitialized, but `check_range` needs a contiguous slice.\n-        // https://github.com/rust-lang/rust/pull/75207#discussion_r471193682\n-        let buffer = unsafe { slice::from_raw_parts(self.ptr(), self.len()) };\n-        let Range { start, end } = buffer.check_range(range);\n+        let Range { start, end } = slice::check_range(self.len(), range);\n         let tail = self.wrap_add(self.tail, start);\n         let head = self.wrap_add(self.tail, end);\n         (tail, head)"}, {"sha": "55afdd94f4468ebc4403812291211b102d0b510e", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c528d2419672bd4ace322ddbc000813a12c1d4c7/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c528d2419672bd4ace322ddbc000813a12c1d4c7/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=c528d2419672bd4ace322ddbc000813a12c1d4c7", "patch": "@@ -91,6 +91,8 @@ use crate::borrow::ToOwned;\n use crate::boxed::Box;\n use crate::vec::Vec;\n \n+#[unstable(feature = \"slice_check_range\", issue = \"76393\")]\n+pub use core::slice::check_range;\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n pub use core::slice::ArrayChunks;\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]"}, {"sha": "2b0ce5ede56308b1a907def495bc12d5215b0d27", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c528d2419672bd4ace322ddbc000813a12c1d4c7/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c528d2419672bd4ace322ddbc000813a12c1d4c7/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=c528d2419672bd4ace322ddbc000813a12c1d4c7", "patch": "@@ -49,6 +49,7 @@ use core::iter::{FromIterator, FusedIterator};\n use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::{self, Add, AddAssign, Index, IndexMut, Range, RangeBounds};\n use core::ptr;\n+use core::slice;\n use core::str::{lossy, pattern::Pattern};\n \n use crate::borrow::{Cow, ToOwned};\n@@ -1506,7 +1507,7 @@ impl String {\n         // of the vector version. The data is just plain bytes.\n         // Because the range removal happens in Drop, if the Drain iterator is leaked,\n         // the removal will not happen.\n-        let Range { start, end } = self.as_bytes().check_range(range);\n+        let Range { start, end } = slice::check_range(self.len(), range);\n         assert!(self.is_char_boundary(start));\n         assert!(self.is_char_boundary(end));\n "}, {"sha": "fdd71a3211afa94c07b874c1f2b3ab2c5302992b", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c528d2419672bd4ace322ddbc000813a12c1d4c7/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c528d2419672bd4ace322ddbc000813a12c1d4c7/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=c528d2419672bd4ace322ddbc000813a12c1d4c7", "patch": "@@ -1310,7 +1310,7 @@ impl<T> Vec<T> {\n         // the hole, and the vector length is restored to the new length.\n         //\n         let len = self.len();\n-        let Range { start, end } = self.check_range(range);\n+        let Range { start, end } = slice::check_range(len, range);\n \n         unsafe {\n             // set self.vec length's to start, to be safe in case Drain is leaked"}, {"sha": "9ef5df01565c64ea14b273aec3fedc10fce7915d", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c528d2419672bd4ace322ddbc000813a12c1d4c7/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c528d2419672bd4ace322ddbc000813a12c1d4c7/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=c528d2419672bd4ace322ddbc000813a12c1d4c7", "patch": "@@ -894,7 +894,7 @@ fn test_from_iter_partially_drained_in_place_specialization() {\n #[test]\n fn test_from_iter_specialization_with_iterator_adapters() {\n     fn assert_in_place_trait<T: InPlaceIterable>(_: &T) {};\n-    let src: Vec<usize> = vec![0usize; if cfg!(miri) { 256 } else { 65535 }];\n+    let src: Vec<usize> = vec![0usize; 256];\n     let srcptr = src.as_ptr();\n     let iter = src\n         .into_iter()"}, {"sha": "a662d9682c51b08fc0960d5cf2c8105c7d707442", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 74, "deletions": 1, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c528d2419672bd4ace322ddbc000813a12c1d4c7/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c528d2419672bd4ace322ddbc000813a12c1d4c7/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=c528d2419672bd4ace322ddbc000813a12c1d4c7", "patch": "@@ -1,6 +1,6 @@\n //! Indexing implementations for `[T]`.\n \n-use crate::ops;\n+use crate::ops::{self, Bound, Range, RangeBounds};\n use crate::ptr;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -62,6 +62,79 @@ pub(super) fn slice_end_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice up to maximum usize\");\n }\n \n+/// Performs bounds-checking of the given range.\n+/// The returned [`Range`] is safe to pass to [`get_unchecked`] and [`get_unchecked_mut`]\n+/// for slices of the given length.\n+///\n+/// [`get_unchecked`]: ../../std/primitive.slice.html#method.get_unchecked\n+/// [`get_unchecked_mut`]: ../../std/primitive.slice.html#method.get_unchecked_mut\n+///\n+/// # Panics\n+///\n+/// Panics if the range is out of bounds.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(slice_check_range)]\n+/// use std::slice;\n+///\n+/// let v = [10, 40, 30];\n+/// assert_eq!(1..2, slice::check_range(v.len(), 1..2));\n+/// assert_eq!(0..2, slice::check_range(v.len(), ..2));\n+/// assert_eq!(1..3, slice::check_range(v.len(), 1..));\n+/// ```\n+///\n+/// Panics when [`Index::index`] would panic:\n+///\n+/// ```should_panic\n+/// #![feature(slice_check_range)]\n+///\n+/// std::slice::check_range(3, 2..1);\n+/// ```\n+///\n+/// ```should_panic\n+/// #![feature(slice_check_range)]\n+///\n+/// std::slice::check_range(3, 1..4);\n+/// ```\n+///\n+/// ```should_panic\n+/// #![feature(slice_check_range)]\n+///\n+/// std::slice::check_range(3, 1..=usize::MAX);\n+/// ```\n+///\n+/// [`Index::index`]: crate::ops::Index::index\n+#[track_caller]\n+#[unstable(feature = \"slice_check_range\", issue = \"76393\")]\n+pub fn check_range<R: RangeBounds<usize>>(len: usize, range: R) -> Range<usize> {\n+    let start = match range.start_bound() {\n+        Bound::Included(&start) => start,\n+        Bound::Excluded(start) => {\n+            start.checked_add(1).unwrap_or_else(|| slice_start_index_overflow_fail())\n+        }\n+        Bound::Unbounded => 0,\n+    };\n+\n+    let end = match range.end_bound() {\n+        Bound::Included(end) => {\n+            end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())\n+        }\n+        Bound::Excluded(&end) => end,\n+        Bound::Unbounded => len,\n+    };\n+\n+    if start > end {\n+        slice_index_order_fail(start, end);\n+    }\n+    if end > len {\n+        slice_end_index_len_fail(end, len);\n+    }\n+\n+    Range { start, end }\n+}\n+\n mod private_slice_index {\n     use super::ops;\n     #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]"}, {"sha": "ba3185433c8d86639a019cd0f2ad9f46fb4869c5", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 77, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/c528d2419672bd4ace322ddbc000813a12c1d4c7/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c528d2419672bd4ace322ddbc000813a12c1d4c7/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=c528d2419672bd4ace322ddbc000813a12c1d4c7", "patch": "@@ -12,7 +12,7 @@ use crate::cmp::Ordering::{self, Equal, Greater, Less};\n use crate::intrinsics::assume;\n use crate::marker::{self, Copy};\n use crate::mem;\n-use crate::ops::{Bound, FnMut, Range, RangeBounds};\n+use crate::ops::{FnMut, Range, RangeBounds};\n use crate::option::Option;\n use crate::option::Option::{None, Some};\n use crate::ptr::{self, NonNull};\n@@ -72,8 +72,8 @@ pub use sort::heapsort;\n #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n pub use index::SliceIndex;\n \n-use index::{slice_end_index_len_fail, slice_index_order_fail};\n-use index::{slice_end_index_overflow_fail, slice_start_index_overflow_fail};\n+#[unstable(feature = \"slice_check_range\", issue = \"76393\")]\n+pub use index::check_range;\n \n #[lang = \"slice\"]\n #[cfg(not(test))]\n@@ -378,79 +378,6 @@ impl<T> [T] {\n         unsafe { &mut *index.get_unchecked_mut(self) }\n     }\n \n-    /// Converts a range over this slice to [`Range`].\n-    ///\n-    /// The returned range is safe to pass to [`get_unchecked`] and [`get_unchecked_mut`].\n-    ///\n-    /// [`get_unchecked`]: #method.get_unchecked\n-    /// [`get_unchecked_mut`]: #method.get_unchecked_mut\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if the range is out of bounds.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(slice_check_range)]\n-    ///\n-    /// let v = [10, 40, 30];\n-    /// assert_eq!(1..2, v.check_range(1..2));\n-    /// assert_eq!(0..2, v.check_range(..2));\n-    /// assert_eq!(1..3, v.check_range(1..));\n-    /// ```\n-    ///\n-    /// Panics when [`Index::index`] would panic:\n-    ///\n-    /// ```should_panic\n-    /// #![feature(slice_check_range)]\n-    ///\n-    /// [10, 40, 30].check_range(2..1);\n-    /// ```\n-    ///\n-    /// ```should_panic\n-    /// #![feature(slice_check_range)]\n-    ///\n-    /// [10, 40, 30].check_range(1..4);\n-    /// ```\n-    ///\n-    /// ```should_panic\n-    /// #![feature(slice_check_range)]\n-    ///\n-    /// [10, 40, 30].check_range(1..=usize::MAX);\n-    /// ```\n-    ///\n-    /// [`Index::index`]: crate::ops::Index::index\n-    #[track_caller]\n-    #[unstable(feature = \"slice_check_range\", issue = \"76393\")]\n-    pub fn check_range<R: RangeBounds<usize>>(&self, range: R) -> Range<usize> {\n-        let start = match range.start_bound() {\n-            Bound::Included(&start) => start,\n-            Bound::Excluded(start) => {\n-                start.checked_add(1).unwrap_or_else(|| slice_start_index_overflow_fail())\n-            }\n-            Bound::Unbounded => 0,\n-        };\n-\n-        let len = self.len();\n-        let end = match range.end_bound() {\n-            Bound::Included(end) => {\n-                end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())\n-            }\n-            Bound::Excluded(&end) => end,\n-            Bound::Unbounded => len,\n-        };\n-\n-        if start > end {\n-            slice_index_order_fail(start, end);\n-        }\n-        if end > len {\n-            slice_end_index_len_fail(end, len);\n-        }\n-\n-        Range { start, end }\n-    }\n-\n     /// Returns a raw pointer to the slice's buffer.\n     ///\n     /// The caller must ensure that the slice outlives the pointer this\n@@ -2794,7 +2721,7 @@ impl<T> [T] {\n     where\n         T: Copy,\n     {\n-        let Range { start: src_start, end: src_end } = self.check_range(src);\n+        let Range { start: src_start, end: src_end } = check_range(self.len(), src);\n         let count = src_end - src_start;\n         assert!(dest <= self.len() - count, \"dest is out of bounds\");\n         // SAFETY: the conditions for `ptr::copy` have all been checked above,"}]}