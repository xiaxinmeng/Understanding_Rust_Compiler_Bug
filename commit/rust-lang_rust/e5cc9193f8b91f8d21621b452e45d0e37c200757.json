{"sha": "e5cc9193f8b91f8d21621b452e45d0e37c200757", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1Y2M5MTkzZjhiOTFmOGQyMTYyMWI0NTJlNDVkMGUzN2MyMDA3NTc=", "commit": {"author": {"name": "Tomoki Aonuma", "email": "uasi@99cm.org", "date": "2012-02-12T19:32:33Z"}, "committer": {"name": "Tomoki Aonuma", "email": "uasi@99cm.org", "date": "2012-02-13T03:44:14Z"}, "message": "Avoid extra memory allocations in core::str::from_cstr_len", "tree": {"sha": "420f91597173095c7d7e582f5253f1b13e59bd91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/420f91597173095c7d7e582f5253f1b13e59bd91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5cc9193f8b91f8d21621b452e45d0e37c200757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5cc9193f8b91f8d21621b452e45d0e37c200757", "html_url": "https://github.com/rust-lang/rust/commit/e5cc9193f8b91f8d21621b452e45d0e37c200757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5cc9193f8b91f8d21621b452e45d0e37c200757/comments", "author": {"login": "uasi", "id": 22321, "node_id": "MDQ6VXNlcjIyMzIx", "avatar_url": "https://avatars.githubusercontent.com/u/22321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uasi", "html_url": "https://github.com/uasi", "followers_url": "https://api.github.com/users/uasi/followers", "following_url": "https://api.github.com/users/uasi/following{/other_user}", "gists_url": "https://api.github.com/users/uasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/uasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uasi/subscriptions", "organizations_url": "https://api.github.com/users/uasi/orgs", "repos_url": "https://api.github.com/users/uasi/repos", "events_url": "https://api.github.com/users/uasi/events{/privacy}", "received_events_url": "https://api.github.com/users/uasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "uasi", "id": 22321, "node_id": "MDQ6VXNlcjIyMzIx", "avatar_url": "https://avatars.githubusercontent.com/u/22321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uasi", "html_url": "https://github.com/uasi", "followers_url": "https://api.github.com/users/uasi/followers", "following_url": "https://api.github.com/users/uasi/following{/other_user}", "gists_url": "https://api.github.com/users/uasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/uasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uasi/subscriptions", "organizations_url": "https://api.github.com/users/uasi/orgs", "repos_url": "https://api.github.com/users/uasi/repos", "events_url": "https://api.github.com/users/uasi/events{/privacy}", "received_events_url": "https://api.github.com/users/uasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eeb706e84bc9e32aa5057e32d567ccab2c3cc2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eeb706e84bc9e32aa5057e32d567ccab2c3cc2c", "html_url": "https://github.com/rust-lang/rust/commit/4eeb706e84bc9e32aa5057e32d567ccab2c3cc2c"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "d1a606d5177d3207c6848b4d24e05ad1c4cdc72b", "filename": "src/libcore/str.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e5cc9193f8b91f8d21621b452e45d0e37c200757/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5cc9193f8b91f8d21621b452e45d0e37c200757/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=e5cc9193f8b91f8d21621b452e45d0e37c200757", "patch": "@@ -213,16 +213,16 @@ Function: from_cstr_len\n Create a Rust string from a C string of the given length\n */\n unsafe fn from_cstr_len(cstr: sbuf, len: uint) -> str {\n-    let res = [];\n-    let start = cstr;\n-    let curr = start;\n-    let i = 0u;\n-    while i < len {\n-        vec::push(res, *curr);\n-        i += 1u;\n-        curr = ptr::offset(start, i);\n-    }\n-    ret from_bytes(res);\n+    let buf: [u8] = [];\n+    vec::reserve(buf, len + 1u);\n+    vec::as_buf(buf) {|b| ptr::memcpy(b, cstr, len); }\n+    vec::unsafe::set_len(buf, len);\n+    buf += [0u8];\n+\n+    assert is_utf8(buf);\n+    let s: str = ::unsafe::reinterpret_cast(buf);\n+    ::unsafe::leak(buf);\n+    ret s;\n }\n \n /*"}]}