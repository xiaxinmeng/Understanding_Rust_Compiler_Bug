{"sha": "dd13a80344838df06fb5df13e36af4bcac04f4b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMTNhODAzNDQ4MzhkZjA2ZmI1ZGYxM2UzNmFmNGJjYWMwNGY0YjA=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-09-12T21:35:20Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-09-29T12:56:58Z"}, "message": "impl {Add, AddAssign}<{str, Cow<str>}> for Cow<str>\n\nThis does not actually add anything that wasn't there, but is merely an\noptimization for the given cases, which would have incurred additional\nheap allocation for adding empty strings, and improving the ergonomics\nof `Cow` with strings.", "tree": {"sha": "23ff51e932d438b14cfcfd9933cd6f3b1ec5dc7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23ff51e932d438b14cfcfd9933cd6f3b1ec5dc7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd13a80344838df06fb5df13e36af4bcac04f4b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd13a80344838df06fb5df13e36af4bcac04f4b0", "html_url": "https://github.com/rust-lang/rust/commit/dd13a80344838df06fb5df13e36af4bcac04f4b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd13a80344838df06fb5df13e36af4bcac04f4b0/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb62f4d544c954d355716dca8beb55726036721e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb62f4d544c954d355716dca8beb55726036721e", "html_url": "https://github.com/rust-lang/rust/commit/fb62f4d544c954d355716dca8beb55726036721e"}], "stats": {"total": 113, "additions": 112, "deletions": 1}, "files": [{"sha": "6b45c25eb21399dff7de1062213a72dcd29f55b9", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/dd13a80344838df06fb5df13e36af4bcac04f4b0/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd13a80344838df06fb5df13e36af4bcac04f4b0/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=dd13a80344838df06fb5df13e36af4bcac04f4b0", "patch": "@@ -14,7 +14,7 @@\n \n use core::cmp::Ordering;\n use core::hash::{Hash, Hasher};\n-use core::ops::Deref;\n+use core::ops::{Add, AddAssign, Deref};\n \n use fmt;\n \n@@ -270,3 +270,49 @@ impl<'a, T: ?Sized + ToOwned> AsRef<T> for Cow<'a, T> {\n         self\n     }\n }\n+\n+#[stable(feature = \"cow_add\", since = \"1.13.0\")]\n+impl<'a> Add<&'a str> for Cow<'a, str> {\n+    type Output = Cow<'a, str>;\n+\n+    fn add(self, rhs: &'a str) -> Self {\n+        if self == \"\" {\n+            Cow::Borrowed(rhs)\n+        } else if rhs == \"\" {\n+            self\n+        } else {\n+            Cow::Owned(self.into_owned() + rhs)\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"cow_add\", since = \"1.13.0\")]\n+impl<'a> Add<Cow<'a, str>> for Cow<'a, str> {\n+    type Output = Cow<'a, str>;\n+\n+    fn add(self, rhs: Cow<'a, str>) -> Self {\n+        if self == \"\" {\n+            rhs\n+        } else if rhs == \"\" {\n+            self\n+        } else {\n+            Cow::Owned(self.into_owned() + rhs.borrow())\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"cow_add\", since = \"1.13.0\")]\n+impl<'a> AddAssign<&'a str> for Cow<'a, str> {\n+    fn add_assign(&mut self, rhs: &'a str) {\n+        if rhs == \"\" { return; }\n+        self.to_mut().push_str(rhs);\n+    }\n+}\n+\n+#[stable(feature = \"cow_add\", since = \"1.13.0\")]\n+impl<'a> AddAssign<Cow<'a, str>> for Cow<'a, str> {\n+    fn add_assign(&mut self, rhs: Cow<'a, str>) {\n+        if rhs == \"\" { return; }\n+        self.to_mut().push_str(rhs.borrow());\n+    }\n+}"}, {"sha": "82533ba077541e8748a206bde8a8d2a3b49961d7", "filename": "src/libcollectionstest/cow_str.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/dd13a80344838df06fb5df13e36af4bcac04f4b0/src%2Flibcollectionstest%2Fcow_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd13a80344838df06fb5df13e36af4bcac04f4b0/src%2Flibcollectionstest%2Fcow_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fcow_str.rs?ref=dd13a80344838df06fb5df13e36af4bcac04f4b0", "patch": "@@ -0,0 +1,65 @@\n+// Copyright 2012-2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::borrow::Cow;\n+\n+// check that Cow<'a, str> implements addition\n+#[test]\n+fn check_cow_add() {\n+    borrowed1 = Cow::Borrowed(\"Hello, \");\n+    borrowed2 = Cow::Borrowed(\"World!\");\n+    borrow_empty = Cow::Borrowed(\"\");\n+\n+    owned1 = Cow::Owned(\"Hi, \".into());\n+    owned2 = Cow::Owned(\"Rustaceans!\".into());\n+    owned_empty = Cow::Owned(\"\".into());\n+\n+    assert_eq!(\"Hello, World!\", borrowed1 + borrowed2);\n+    assert_eq!(\"Hello, Rustaceans!\", borrowed1 + owned2);\n+\n+    assert_eq!(\"Hello, World!\", owned1 + borrowed2);\n+    assert_eq!(\"Hello, Rustaceans!\", owned1 + owned2);\n+\n+    if let Cow::Owned(_) = borrowed1 + borrow_empty {\n+        panic!(\"Adding empty strings to a borrow should note allocate\");\n+    }\n+    if let Cow::Owned(_) = borrow_empty + borrowed1 {\n+        panic!(\"Adding empty strings to a borrow should note allocate\");\n+    }\n+    if let Cow::Owned(_) = borrowed1 + owned_empty {\n+        panic!(\"Adding empty strings to a borrow should note allocate\");\n+    }\n+    if let Cow::Owned(_) = owned_empty + borrowed1 {\n+        panic!(\"Adding empty strings to a borrow should note allocate\");\n+    }\n+}\n+\n+fn check_cow_add_assign() {\n+    borrowed1 = Cow::Borrowed(\"Hello, \");\n+    borrowed2 = Cow::Borrowed(\"World!\");\n+    borrow_empty = Cow::Borrowed(\"\");\n+\n+    owned1 = Cow::Owned(\"Hi, \".into());\n+    owned2 = Cow::Owned(\"Rustaceans!\".into());\n+    owned_empty = Cow::Owned(\"\".into());\n+\n+    let borrowed1clone = borrowed1.clone();\n+    borrowed1clone += borrow_empty;\n+    assert_eq!((&borrowed1clone).as_ptr(), (&borrowed1).as_ptr());\n+\n+    borrowed1clone += owned_empty;\n+    assert_eq!((&borrowed1clone).as_ptr(), (&borrowed1).as_ptr());\n+\n+    owned1 += borrowed2;\n+    borrowed1 += owned2;\n+\n+    assert_eq!(\"Hello, World!\", owned1);\n+    assert_eq!(\"Hello, Rustaceans!\", borrowed1);\n+}"}]}