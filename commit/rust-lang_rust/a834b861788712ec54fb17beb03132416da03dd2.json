{"sha": "a834b861788712ec54fb17beb03132416da03dd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MzRiODYxNzg4NzEyZWM1NGZiMTdiZWIwMzEzMjQxNmRhMDNkZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-24T23:35:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-24T23:35:19Z"}, "message": "Auto merge of #46899 - m4b:linkage_name_equals_symbol_name, r=michaelwoerister\n\nSet the dwarf linkage_name to the mangled name\n\nref #46453\n\n@michaelwoerister or anyone else who knows, i'm not sure if this is the correct instance to pass here (or how to get the correct one precisely): https://github.com//m4b/rust/blob/5a94a48678ec0a20ea6a63a783e63546bf9459b1/src/librustc_trans/debuginfo/namespace.rs#L36\n\nSo don't merge this yet, I'd like to learn about correct instance first; however, I think this already fixes a bunch of weirdness i'm seeing debugging from time to time, not to mention backtraces in gdb via `bt` are now ~readable~ meaningful :tada:\n\nE.g.:\n\nnew:\n```\n(gdb) bt\n#0  <inline::Foo as core::convert::From<()>>::from () at /home/m4b/tmp/bad_debug/inline.rs:11\n#1  0x000055555555a35d in inline::deadbeef () at /home/m4b/tmp/bad_debug/inline.rs:16\n#2  0x000055555555a380 in inline::main () at /home/m4b/tmp/bad_debug/inline.rs:20\n```\n\nold:\n```\n(gdb) bt\n#0  inline::{{impl}}::from () at /home/m4b/tmp/bad_debug/inline.rs:11\n#1  0x000055555555b0ed in inline::deadbeef () at /home/m4b/tmp/bad_debug/inline.rs:16\n#2  0x000055555555b120 in inline::main () at /home/m4b/tmp/bad_debug/inline.rs:20\n```", "tree": {"sha": "132dff3fb58001277d513ebfb5ed663a280d08ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/132dff3fb58001277d513ebfb5ed663a280d08ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a834b861788712ec54fb17beb03132416da03dd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a834b861788712ec54fb17beb03132416da03dd2", "html_url": "https://github.com/rust-lang/rust/commit/a834b861788712ec54fb17beb03132416da03dd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a834b861788712ec54fb17beb03132416da03dd2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c284f8807eb3a1d728242bb6a767b0306d6f6bd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c284f8807eb3a1d728242bb6a767b0306d6f6bd5", "html_url": "https://github.com/rust-lang/rust/commit/c284f8807eb3a1d728242bb6a767b0306d6f6bd5"}, {"sha": "990a5cc1e51301cc623bd5864f15ace66fdc186a", "url": "https://api.github.com/repos/rust-lang/rust/commits/990a5cc1e51301cc623bd5864f15ace66fdc186a", "html_url": "https://github.com/rust-lang/rust/commit/990a5cc1e51301cc623bd5864f15ace66fdc186a"}], "stats": {"total": 54, "additions": 24, "deletions": 30}, "files": [{"sha": "871f255951483f9eee0d8cd9e47f068a6f7aba8e", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a834b861788712ec54fb17beb03132416da03dd2/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a834b861788712ec54fb17beb03132416da03dd2/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=a834b861788712ec54fb17beb03132416da03dd2", "patch": "@@ -1665,8 +1665,8 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n     let linkage_name = if no_mangle {\n         None\n     } else {\n-        let linkage_name = mangled_name_of_item(cx, node_def_id, \"\");\n-        Some(CString::new(linkage_name).unwrap())\n+        let linkage_name = mangled_name_of_item(cx, node_id);\n+        Some(CString::new(linkage_name.to_string()).unwrap())\n     };\n \n     let global_align = cx.align_of(variable_type);"}, {"sha": "3f9ace151a3890374648344273f2fc86b969cc1e", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a834b861788712ec54fb17beb03132416da03dd2/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a834b861788712ec54fb17beb03132416da03dd2/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=a834b861788712ec54fb17beb03132416da03dd2", "patch": "@@ -15,7 +15,7 @@ use self::VariableAccess::*;\n use self::VariableKind::*;\n \n use self::utils::{DIB, span_start, create_DIArray, is_node_local_to_unit};\n-use self::namespace::mangled_name_of_item;\n+use self::namespace::mangled_name_of_instance;\n use self::type_names::compute_debuginfo_type_name;\n use self::metadata::{type_metadata, file_metadata, TypeMap};\n use self::source_loc::InternalDebugLocation::{self, UnknownLocation};\n@@ -237,7 +237,6 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     // Find the enclosing function, in case this is a closure.\n     let def_key = cx.tcx().def_key(def_id);\n     let mut name = def_key.disambiguated_data.data.to_string();\n-    let name_len = name.len();\n \n     let enclosing_fn_def_id = cx.tcx().closure_base_def_id(def_id);\n \n@@ -251,16 +250,16 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                                       file_metadata,\n                                                       &mut name);\n \n-    // Build the linkage_name out of the item path and \"template\" parameters.\n-    let linkage_name = mangled_name_of_item(cx, instance.def_id(), &name[name_len..]);\n+    // Get the linkage_name, which is just the symbol name\n+    let linkage_name = mangled_name_of_instance(cx, instance);\n \n     let scope_line = span_start(cx, span).line;\n \n     let local_id = cx.tcx().hir.as_local_node_id(instance.def_id());\n     let is_local_to_unit = local_id.map_or(false, |id| is_node_local_to_unit(cx, id));\n \n     let function_name = CString::new(name).unwrap();\n-    let linkage_name = CString::new(linkage_name).unwrap();\n+    let linkage_name = CString::new(linkage_name.to_string()).unwrap();\n \n     let mut flags = DIFlags::FlagPrototyped;\n     match *cx.sess().entry_fn.borrow() {"}, {"sha": "47e2b8c461ca444b944f09a593c3022902bf7915", "filename": "src/librustc_trans/debuginfo/namespace.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a834b861788712ec54fb17beb03132416da03dd2/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a834b861788712ec54fb17beb03132416da03dd2/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs?ref=a834b861788712ec54fb17beb03132416da03dd2", "patch": "@@ -12,6 +12,9 @@\n \n use super::metadata::{unknown_file_metadata, UNKNOWN_LINE_NUMBER};\n use super::utils::{DIB, debug_context};\n+use monomorphize::Instance;\n+use rustc::ty;\n+use syntax::ast;\n \n use llvm;\n use llvm::debuginfo::DIScope;\n@@ -22,30 +25,22 @@ use common::CrateContext;\n use std::ffi::CString;\n use std::ptr;\n \n-pub fn mangled_name_of_item(ccx: &CrateContext, def_id: DefId, extra: &str) -> String {\n-    fn fill_nested(ccx: &CrateContext, def_id: DefId, extra: &str, output: &mut String) {\n-        let def_key = ccx.tcx().def_key(def_id);\n-        if let Some(parent) = def_key.parent {\n-            fill_nested(ccx, DefId {\n-                krate: def_id.krate,\n-                index: parent\n-            }, \"\", output);\n-        }\n-\n-        let name = match def_key.disambiguated_data.data {\n-            DefPathData::CrateRoot => ccx.tcx().crate_name(def_id.krate).as_str(),\n-            data => data.as_interned_str()\n-        };\n-\n-        output.push_str(&(name.len() + extra.len()).to_string());\n-        output.push_str(&name);\n-        output.push_str(extra);\n-    }\n+pub fn mangled_name_of_instance<'a, 'tcx>(\n+    ccx: &CrateContext<'a, 'tcx>,\n+    instance: Instance<'tcx>,\n+) -> ty::SymbolName {\n+     let tcx = ccx.tcx();\n+     tcx.symbol_name(instance)\n+}\n \n-    let mut name = String::from(\"_ZN\");\n-    fill_nested(ccx, def_id, extra, &mut name);\n-    name.push('E');\n-    name\n+pub fn mangled_name_of_item<'a, 'tcx>(\n+    ccx: &CrateContext<'a, 'tcx>,\n+    node_id: ast::NodeId,\n+) -> ty::SymbolName {\n+    let tcx = ccx.tcx();\n+    let node_def_id = tcx.hir.local_def_id(node_id);\n+    let instance = Instance::mono(tcx, node_def_id);\n+    tcx.symbol_name(instance)\n }\n \n pub fn item_namespace(ccx: &CrateContext, def_id: DefId) -> DIScope {"}]}