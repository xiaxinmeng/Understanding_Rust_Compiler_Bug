{"sha": "e269e6bf47f40c9046cd44ab787881d700099252", "node_id": "C_kwDOAAsO6NoAKGUyNjllNmJmNDdmNDBjOTA0NmNkNDRhYjc4Nzg4MWQ3MDAwOTkyNTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-26T17:50:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-26T17:50:46Z"}, "message": "Auto merge of #90314 - matthiaskrgr:rollup-ag1js8n, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #90296 (Remove fNN::lerp)\n - #90302 (Remove unneeded into_iter)\n - #90303 (Add regression test for issue 90164)\n - #90305 (Add regression test for #87258)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d4abcd055c5296a65d4f9bacad88b832d0a08dbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4abcd055c5296a65d4f9bacad88b832d0a08dbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e269e6bf47f40c9046cd44ab787881d700099252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e269e6bf47f40c9046cd44ab787881d700099252", "html_url": "https://github.com/rust-lang/rust/commit/e269e6bf47f40c9046cd44ab787881d700099252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e269e6bf47f40c9046cd44ab787881d700099252/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "612356aa9a0193cb5aee2b668b3893ddf67da2b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/612356aa9a0193cb5aee2b668b3893ddf67da2b5", "html_url": "https://github.com/rust-lang/rust/commit/612356aa9a0193cb5aee2b668b3893ddf67da2b5"}, {"sha": "fcc9a9a9285a67d7afcacc27cbdc71f8dcec7ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc9a9a9285a67d7afcacc27cbdc71f8dcec7ef3", "html_url": "https://github.com/rust-lang/rust/commit/fcc9a9a9285a67d7afcacc27cbdc71f8dcec7ef3"}], "stats": {"total": 296, "additions": 104, "deletions": 192}, "files": [{"sha": "d23f5244d88d4e4f9999509c23900fcec7515bc5", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e269e6bf47f40c9046cd44ab787881d700099252/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e269e6bf47f40c9046cd44ab787881d700099252/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=e269e6bf47f40c9046cd44ab787881d700099252", "patch": "@@ -878,40 +878,4 @@ impl f32 {\n     pub fn atanh(self) -> f32 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n-\n-    /// Linear interpolation between `start` and `end`.\n-    ///\n-    /// This enables linear interpolation between `start` and `end`, where start is represented by\n-    /// `self == 0.0` and `end` is represented by `self == 1.0`. This is the basis of all\n-    /// \"transition\", \"easing\", or \"step\" functions; if you change `self` from 0.0 to 1.0\n-    /// at a given rate, the result will change from `start` to `end` at a similar rate.\n-    ///\n-    /// Values below 0.0 or above 1.0 are allowed, allowing you to extrapolate values outside the\n-    /// range from `start` to `end`. This also is useful for transition functions which might\n-    /// move slightly past the end or start for a desired effect. Mathematically, the values\n-    /// returned are equivalent to `start + self * (end - start)`, although we make a few specific\n-    /// guarantees that are useful specifically to linear interpolation.\n-    ///\n-    /// These guarantees are:\n-    ///\n-    /// * If `start` and `end` are [finite], the value at 0.0 is always `start` and the\n-    ///   value at 1.0 is always `end`. (exactness)\n-    /// * If `start` and `end` are [finite], the values will always move in the direction from\n-    ///   `start` to `end` (monotonicity)\n-    /// * If `self` is [finite] and `start == end`, the value at any point will always be\n-    ///   `start == end`. (consistency)\n-    ///\n-    /// [finite]: #method.is_finite\n-    #[must_use = \"method returns a new number and does not mutate the original value\"]\n-    #[unstable(feature = \"float_interpolation\", issue = \"86269\")]\n-    pub fn lerp(self, start: f32, end: f32) -> f32 {\n-        // consistent\n-        if start == end {\n-            start\n-\n-        // exact/monotonic\n-        } else {\n-            self.mul_add(end, (-self).mul_add(start, start))\n-        }\n-    }\n }"}, {"sha": "0d4b865f3392a66304e13e47e9fa652099428534", "filename": "library/std/src/f32/tests.rs", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e269e6bf47f40c9046cd44ab787881d700099252/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e269e6bf47f40c9046cd44ab787881d700099252/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs?ref=e269e6bf47f40c9046cd44ab787881d700099252", "patch": "@@ -757,66 +757,3 @@ fn test_total_cmp() {\n     assert_eq!(Ordering::Less, (-s_nan()).total_cmp(&f32::INFINITY));\n     assert_eq!(Ordering::Less, (-s_nan()).total_cmp(&s_nan()));\n }\n-\n-#[test]\n-fn test_lerp_exact() {\n-    // simple values\n-    assert_eq!(f32::lerp(0.0, 2.0, 4.0), 2.0);\n-    assert_eq!(f32::lerp(1.0, 2.0, 4.0), 4.0);\n-\n-    // boundary values\n-    assert_eq!(f32::lerp(0.0, f32::MIN, f32::MAX), f32::MIN);\n-    assert_eq!(f32::lerp(1.0, f32::MIN, f32::MAX), f32::MAX);\n-}\n-\n-#[test]\n-fn test_lerp_consistent() {\n-    assert_eq!(f32::lerp(f32::MAX, f32::MIN, f32::MIN), f32::MIN);\n-    assert_eq!(f32::lerp(f32::MIN, f32::MAX, f32::MAX), f32::MAX);\n-\n-    // as long as t is finite, a/b can be infinite\n-    assert_eq!(f32::lerp(f32::MAX, f32::NEG_INFINITY, f32::NEG_INFINITY), f32::NEG_INFINITY);\n-    assert_eq!(f32::lerp(f32::MIN, f32::INFINITY, f32::INFINITY), f32::INFINITY);\n-}\n-\n-#[test]\n-fn test_lerp_nan_infinite() {\n-    // non-finite t is not NaN if a/b different\n-    assert!(!f32::lerp(f32::INFINITY, f32::MIN, f32::MAX).is_nan());\n-    assert!(!f32::lerp(f32::NEG_INFINITY, f32::MIN, f32::MAX).is_nan());\n-}\n-\n-#[test]\n-fn test_lerp_values() {\n-    // just a few basic values\n-    assert_eq!(f32::lerp(0.25, 1.0, 2.0), 1.25);\n-    assert_eq!(f32::lerp(0.50, 1.0, 2.0), 1.50);\n-    assert_eq!(f32::lerp(0.75, 1.0, 2.0), 1.75);\n-}\n-\n-#[test]\n-fn test_lerp_monotonic() {\n-    // near 0\n-    let below_zero = f32::lerp(-f32::EPSILON, f32::MIN, f32::MAX);\n-    let zero = f32::lerp(0.0, f32::MIN, f32::MAX);\n-    let above_zero = f32::lerp(f32::EPSILON, f32::MIN, f32::MAX);\n-    assert!(below_zero <= zero);\n-    assert!(zero <= above_zero);\n-    assert!(below_zero <= above_zero);\n-\n-    // near 0.5\n-    let below_half = f32::lerp(0.5 - f32::EPSILON, f32::MIN, f32::MAX);\n-    let half = f32::lerp(0.5, f32::MIN, f32::MAX);\n-    let above_half = f32::lerp(0.5 + f32::EPSILON, f32::MIN, f32::MAX);\n-    assert!(below_half <= half);\n-    assert!(half <= above_half);\n-    assert!(below_half <= above_half);\n-\n-    // near 1\n-    let below_one = f32::lerp(1.0 - f32::EPSILON, f32::MIN, f32::MAX);\n-    let one = f32::lerp(1.0, f32::MIN, f32::MAX);\n-    let above_one = f32::lerp(1.0 + f32::EPSILON, f32::MIN, f32::MAX);\n-    assert!(below_one <= one);\n-    assert!(one <= above_one);\n-    assert!(below_one <= above_one);\n-}"}, {"sha": "55e17b471905d29dd293be5e2db9a494e9a55d5c", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e269e6bf47f40c9046cd44ab787881d700099252/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e269e6bf47f40c9046cd44ab787881d700099252/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=e269e6bf47f40c9046cd44ab787881d700099252", "patch": "@@ -881,42 +881,6 @@ impl f64 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n \n-    /// Linear interpolation between `start` and `end`.\n-    ///\n-    /// This enables linear interpolation between `start` and `end`, where start is represented by\n-    /// `self == 0.0` and `end` is represented by `self == 1.0`. This is the basis of all\n-    /// \"transition\", \"easing\", or \"step\" functions; if you change `self` from 0.0 to 1.0\n-    /// at a given rate, the result will change from `start` to `end` at a similar rate.\n-    ///\n-    /// Values below 0.0 or above 1.0 are allowed, allowing you to extrapolate values outside the\n-    /// range from `start` to `end`. This also is useful for transition functions which might\n-    /// move slightly past the end or start for a desired effect. Mathematically, the values\n-    /// returned are equivalent to `start + self * (end - start)`, although we make a few specific\n-    /// guarantees that are useful specifically to linear interpolation.\n-    ///\n-    /// These guarantees are:\n-    ///\n-    /// * If `start` and `end` are [finite], the value at 0.0 is always `start` and the\n-    ///   value at 1.0 is always `end`. (exactness)\n-    /// * If `start` and `end` are [finite], the values will always move in the direction from\n-    ///   `start` to `end` (monotonicity)\n-    /// * If `self` is [finite] and `start == end`, the value at any point will always be\n-    ///   `start == end`. (consistency)\n-    ///\n-    /// [finite]: #method.is_finite\n-    #[must_use = \"method returns a new number and does not mutate the original value\"]\n-    #[unstable(feature = \"float_interpolation\", issue = \"86269\")]\n-    pub fn lerp(self, start: f64, end: f64) -> f64 {\n-        // consistent\n-        if start == end {\n-            start\n-\n-        // exact/monotonic\n-        } else {\n-            self.mul_add(end, (-self).mul_add(start, start))\n-        }\n-    }\n-\n     // Solaris/Illumos requires a wrapper around log, log2, and log10 functions\n     // because of their non-standard behavior (e.g., log(-n) returns -Inf instead\n     // of expected NaN)."}, {"sha": "5c163cfe90e0b2eff9030bc80dd0cfeb4c71532c", "filename": "library/std/src/f64/tests.rs", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e269e6bf47f40c9046cd44ab787881d700099252/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e269e6bf47f40c9046cd44ab787881d700099252/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs?ref=e269e6bf47f40c9046cd44ab787881d700099252", "patch": "@@ -753,58 +753,3 @@ fn test_total_cmp() {\n     assert_eq!(Ordering::Less, (-s_nan()).total_cmp(&f64::INFINITY));\n     assert_eq!(Ordering::Less, (-s_nan()).total_cmp(&s_nan()));\n }\n-\n-#[test]\n-fn test_lerp_exact() {\n-    // simple values\n-    assert_eq!(f64::lerp(0.0, 2.0, 4.0), 2.0);\n-    assert_eq!(f64::lerp(1.0, 2.0, 4.0), 4.0);\n-\n-    // boundary values\n-    assert_eq!(f64::lerp(0.0, f64::MIN, f64::MAX), f64::MIN);\n-    assert_eq!(f64::lerp(1.0, f64::MIN, f64::MAX), f64::MAX);\n-}\n-\n-#[test]\n-fn test_lerp_consistent() {\n-    assert_eq!(f64::lerp(f64::MAX, f64::MIN, f64::MIN), f64::MIN);\n-    assert_eq!(f64::lerp(f64::MIN, f64::MAX, f64::MAX), f64::MAX);\n-\n-    // as long as t is finite, a/b can be infinite\n-    assert_eq!(f64::lerp(f64::MAX, f64::NEG_INFINITY, f64::NEG_INFINITY), f64::NEG_INFINITY);\n-    assert_eq!(f64::lerp(f64::MIN, f64::INFINITY, f64::INFINITY), f64::INFINITY);\n-}\n-\n-#[test]\n-fn test_lerp_nan_infinite() {\n-    // non-finite t is not NaN if a/b different\n-    assert!(!f64::lerp(f64::INFINITY, f64::MIN, f64::MAX).is_nan());\n-    assert!(!f64::lerp(f64::NEG_INFINITY, f64::MIN, f64::MAX).is_nan());\n-}\n-\n-#[test]\n-fn test_lerp_values() {\n-    // just a few basic values\n-    assert_eq!(f64::lerp(0.25, 1.0, 2.0), 1.25);\n-    assert_eq!(f64::lerp(0.50, 1.0, 2.0), 1.50);\n-    assert_eq!(f64::lerp(0.75, 1.0, 2.0), 1.75);\n-}\n-\n-#[test]\n-fn test_lerp_monotonic() {\n-    // near 0\n-    let below_zero = f64::lerp(-f64::EPSILON, f64::MIN, f64::MAX);\n-    let zero = f64::lerp(0.0, f64::MIN, f64::MAX);\n-    let above_zero = f64::lerp(f64::EPSILON, f64::MIN, f64::MAX);\n-    assert!(below_zero <= zero);\n-    assert!(zero <= above_zero);\n-    assert!(below_zero <= above_zero);\n-\n-    // near 1\n-    let below_one = f64::lerp(1.0 - f64::EPSILON, f64::MIN, f64::MAX);\n-    let one = f64::lerp(1.0, f64::MIN, f64::MAX);\n-    let above_one = f64::lerp(1.0 + f64::EPSILON, f64::MIN, f64::MAX);\n-    assert!(below_one <= one);\n-    assert!(one <= above_one);\n-    assert!(below_one <= above_one);\n-}"}, {"sha": "d7c0ffd476a59f8454020868b8cf0ab35014399c", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e269e6bf47f40c9046cd44ab787881d700099252/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e269e6bf47f40c9046cd44ab787881d700099252/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=e269e6bf47f40c9046cd44ab787881d700099252", "patch": "@@ -284,7 +284,6 @@\n #![feature(exact_size_is_empty)]\n #![feature(exhaustive_patterns)]\n #![feature(extend_one)]\n-#![feature(float_interpolation)]\n #![feature(fn_traits)]\n #![feature(format_args_nl)]\n #![feature(gen_future)]"}, {"sha": "443ac2821342edfbadb4dc23ea17ab181755c687", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e269e6bf47f40c9046cd44ab787881d700099252/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e269e6bf47f40c9046cd44ab787881d700099252/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=e269e6bf47f40c9046cd44ab787881d700099252", "patch": "@@ -412,7 +412,7 @@ impl FromWithTcx<clean::Type> for Type {\n                         .map(|t| {\n                             clean::GenericBound::TraitBound(t, rustc_hir::TraitBoundModifier::None)\n                         })\n-                        .chain(lt.into_iter().map(clean::GenericBound::Outlives))\n+                        .chain(lt.map(clean::GenericBound::Outlives))\n                         .map(|bound| bound.into_tcx(tcx))\n                         .collect(),\n                 }"}, {"sha": "d9d17751fa6e25bdbb696e22945f49d987cc723c", "filename": "src/test/ui/generic-associated-types/issue-87258_a.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e269e6bf47f40c9046cd44ab787881d700099252/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e269e6bf47f40c9046cd44ab787881d700099252/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.rs?ref=e269e6bf47f40c9046cd44ab787881d700099252", "patch": "@@ -0,0 +1,24 @@\n+#![feature(type_alias_impl_trait)]\n+#![feature(generic_associated_types)]\n+\n+// See https://github.com/rust-lang/rust/issues/87258#issuecomment-883293367\n+\n+trait Trait1 {}\n+\n+struct Struct<'b>(&'b ());\n+\n+impl<'d> Trait1 for Struct<'d> {}\n+\n+pub trait Trait2 {\n+    type FooFuture<'a>: Trait1;\n+    fn foo<'a>() -> Self::FooFuture<'a>;\n+}\n+\n+impl<'c, S: Trait2> Trait2 for &'c mut S {\n+    type FooFuture<'a> = impl Trait1;\n+    fn foo<'a>() -> Self::FooFuture<'a> { //~ ERROR\n+        Struct(unimplemented!())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "93513a4563f0701ce01eea50ff8a77c2bb040899", "filename": "src/test/ui/generic-associated-types/issue-87258_a.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e269e6bf47f40c9046cd44ab787881d700099252/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e269e6bf47f40c9046cd44ab787881d700099252/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.stderr?ref=e269e6bf47f40c9046cd44ab787881d700099252", "patch": "@@ -0,0 +1,11 @@\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/issue-87258_a.rs:19:21\n+   |\n+LL |     fn foo<'a>() -> Self::FooFuture<'a> {\n+   |                     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: hidden type `Struct<'_>` captures lifetime '_#7r\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "b29a978f517fffdf9e22dbd01c9daa6beb721f2e", "filename": "src/test/ui/generic-associated-types/issue-87258_b.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e269e6bf47f40c9046cd44ab787881d700099252/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e269e6bf47f40c9046cd44ab787881d700099252/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_b.rs?ref=e269e6bf47f40c9046cd44ab787881d700099252", "patch": "@@ -0,0 +1,26 @@\n+#![feature(type_alias_impl_trait)]\n+#![feature(generic_associated_types)]\n+\n+// See https://github.com/rust-lang/rust/issues/87258#issuecomment-883293367\n+\n+trait Trait1 {}\n+\n+struct Struct<'b>(&'b ());\n+\n+impl<'d> Trait1 for Struct<'d> {}\n+\n+pub trait Trait2 {\n+    type FooFuture<'a>: Trait1;\n+    fn foo<'a>() -> Self::FooFuture<'a>;\n+}\n+\n+type Helper<'xenon, 'yttrium, KABOOM: Trait2> = impl Trait1;\n+\n+impl<'c, S: Trait2> Trait2 for &'c mut S {\n+    type FooFuture<'a> = Helper<'c, 'a, S>;\n+    fn foo<'a>() -> Self::FooFuture<'a> { //~ ERROR\n+        Struct(unimplemented!())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e077a423400dfe74c9a035a0ecca4b8103d1d40d", "filename": "src/test/ui/generic-associated-types/issue-87258_b.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e269e6bf47f40c9046cd44ab787881d700099252/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e269e6bf47f40c9046cd44ab787881d700099252/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_b.stderr?ref=e269e6bf47f40c9046cd44ab787881d700099252", "patch": "@@ -0,0 +1,11 @@\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/issue-87258_b.rs:21:21\n+   |\n+LL |     fn foo<'a>() -> Self::FooFuture<'a> {\n+   |                     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: hidden type `Struct<'_>` captures lifetime '_#7r\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "63350433e46a68dcf478fef2184763f52d138fb9", "filename": "src/test/ui/typeck/issue-90164.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e269e6bf47f40c9046cd44ab787881d700099252/src%2Ftest%2Fui%2Ftypeck%2Fissue-90164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e269e6bf47f40c9046cd44ab787881d700099252/src%2Ftest%2Fui%2Ftypeck%2Fissue-90164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-90164.rs?ref=e269e6bf47f40c9046cd44ab787881d700099252", "patch": "@@ -0,0 +1,9 @@\n+fn copy<R: Unpin, W>(_: R, _: W) {}\n+\n+fn f<T>(r: T) {\n+    let w = ();\n+    copy(r, w);\n+    //~^ ERROR [E0277]\n+}\n+\n+fn main() {}"}, {"sha": "1e2f1bae3bd877b7f11c6fa28a23bf5aa3bdeea8", "filename": "src/test/ui/typeck/issue-90164.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e269e6bf47f40c9046cd44ab787881d700099252/src%2Ftest%2Fui%2Ftypeck%2Fissue-90164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e269e6bf47f40c9046cd44ab787881d700099252/src%2Ftest%2Fui%2Ftypeck%2Fissue-90164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-90164.stderr?ref=e269e6bf47f40c9046cd44ab787881d700099252", "patch": "@@ -0,0 +1,22 @@\n+error[E0277]: `T` cannot be unpinned\n+  --> $DIR/issue-90164.rs:5:10\n+   |\n+LL |     copy(r, w);\n+   |     ---- ^ the trait `Unpin` is not implemented for `T`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = note: consider using `Box::pin`\n+note: required by a bound in `copy`\n+  --> $DIR/issue-90164.rs:1:12\n+   |\n+LL | fn copy<R: Unpin, W>(_: R, _: W) {}\n+   |            ^^^^^ required by this bound in `copy`\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn f<T: std::marker::Unpin>(r: T) {\n+   |       ++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}