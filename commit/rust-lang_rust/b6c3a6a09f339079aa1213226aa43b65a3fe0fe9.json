{"sha": "b6c3a6a09f339079aa1213226aa43b65a3fe0fe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YzNhNmEwOWYzMzkwNzlhYTEyMTMyMjZhYTQzYjY1YTNmZTBmZTk=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-02-01T04:32:16Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-02-01T04:32:16Z"}, "message": "Move `max_value` handling to consts module", "tree": {"sha": "9b1feeead33668f31368eb1ff111a7c6390bd3a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b1feeead33668f31368eb1ff111a7c6390bd3a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6c3a6a09f339079aa1213226aa43b65a3fe0fe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6c3a6a09f339079aa1213226aa43b65a3fe0fe9", "html_url": "https://github.com/rust-lang/rust/commit/b6c3a6a09f339079aa1213226aa43b65a3fe0fe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6c3a6a09f339079aa1213226aa43b65a3fe0fe9/comments", "author": null, "committer": null, "parents": [{"sha": "488cdebd2619dd031256813b4069b46377c016e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/488cdebd2619dd031256813b4069b46377c016e8", "html_url": "https://github.com/rust-lang/rust/commit/488cdebd2619dd031256813b4069b46377c016e8"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "f56dc3aed6946cbcc9cbac3dd26dc815a1581213", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b6c3a6a09f339079aa1213226aa43b65a3fe0fe9/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6c3a6a09f339079aa1213226aa43b65a3fe0fe9/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=b6c3a6a09f339079aa1213226aa43b65a3fe0fe9", "patch": "@@ -1,6 +1,7 @@\n #![allow(clippy::float_cmp)]\n \n-use crate::utils::{clip, sext, unsext};\n+use crate::utils::{clip, get_def_path, sext, unsext};\n+use if_chain::if_chain;\n use rustc::hir::def::Def;\n use rustc::hir::*;\n use rustc::lint::LateContext;\n@@ -234,6 +235,31 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 UnDeref => Some(o),\n             }),\n             ExprKind::Binary(op, ref left, ref right) => self.binop(op, left, right),\n+            ExprKind::Call(ref callee, ref args) => {\n+                // We only handle a few const functions for now\n+                if_chain! {\n+                    if args.is_empty();\n+                    if let ExprKind::Path(qpath) = &callee.node;\n+                    let def = self.tables.qpath_def(qpath, callee.hir_id);\n+                    if let Some(def_id) = def.opt_def_id();\n+                    let def_path = get_def_path(self.tcx, def_id);\n+                    if let &[\"core\", \"num\", impl_ty, \"max_value\"] = &def_path[..];\n+                    then {\n+                       let value = match impl_ty {\n+                           \"<impl i8>\" => i8::max_value() as u128,\n+                           \"<impl i16>\" => i16::max_value() as u128,\n+                           \"<impl i32>\" => i32::max_value() as u128,\n+                           \"<impl i64>\" => i64::max_value() as u128,\n+                           \"<impl i128>\" => i128::max_value() as u128,\n+                           _ => return None,\n+                       };\n+                       Some(Constant::Int(value))\n+                    }\n+                    else {\n+                        None\n+                    }\n+                }\n+            },\n             // TODO: add other expressions\n             _ => None,\n         }"}, {"sha": "2c48e06e371b165e7db815a534939af17fb0620e", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b6c3a6a09f339079aa1213226aa43b65a3fe0fe9/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6c3a6a09f339079aa1213226aa43b65a3fe0fe9/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=b6c3a6a09f339079aa1213226aa43b65a3fe0fe9", "patch": "@@ -4,8 +4,8 @@ use crate::consts::{constant, Constant};\n use crate::reexport::*;\n use crate::utils::paths;\n use crate::utils::{\n-    clip, comparisons, differing_macro_contexts, get_def_path, higher, in_constant, in_macro, int_bits,\n-    last_path_segment, match_def_path, match_path, multispan_sugg, opt_def_id, same_tys, sext, snippet, snippet_opt,\n+    clip, comparisons, differing_macro_contexts, higher, in_constant, in_macro, int_bits, last_path_segment,\n+    match_def_path, match_path, multispan_sugg, opt_def_id, same_tys, sext, snippet, snippet_opt,\n     snippet_with_applicability, span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, unsext,\n     AbsolutePathBuffer,\n };\n@@ -1018,23 +1018,6 @@ fn check_loss_of_sign(cx: &LateContext<'_, '_>, expr: &Expr, op: &Expr, cast_fro\n         }\n     }\n \n-    // don't lint for max_value const fns\n-    if_chain! {\n-        if let ExprKind::Call(callee, args) = &op.node;\n-        if args.is_empty();\n-        if let ExprKind::Path(qpath) = &callee.node;\n-        let def = cx.tables.qpath_def(qpath, callee.hir_id);\n-        if let Some(def_id) = def.opt_def_id();\n-        let def_path = get_def_path(cx.tcx, def_id);\n-        if let &[\"core\", \"num\", impl_ty, \"max_value\"] = &def_path[..];\n-        then {\n-           if let \"<impl i8>\" | \"<impl i16>\" | \"<impl i32>\" |\n-                  \"<impl i64>\" | \"<impl i128>\" = impl_ty {\n-               return;\n-           }\n-        }\n-    }\n-\n     span_lint(\n         cx,\n         CAST_SIGN_LOSS,"}]}