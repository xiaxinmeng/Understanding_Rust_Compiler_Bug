{"sha": "e9287e55cc6f95354632be646be18b92af2f9a08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5Mjg3ZTU1Y2M2Zjk1MzU0NjMyYmU2NDZiZTE4YjkyYWYyZjlhMDg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-10-01T01:20:28Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-10-01T01:21:39Z"}, "message": "rustc: Stub a --stack-growth option; it's behind a flag for now because it requires patches to LLVM.", "tree": {"sha": "adb77e4d0bc5c328da23c06e5a038702bd99d934", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adb77e4d0bc5c328da23c06e5a038702bd99d934"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9287e55cc6f95354632be646be18b92af2f9a08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9287e55cc6f95354632be646be18b92af2f9a08", "html_url": "https://github.com/rust-lang/rust/commit/e9287e55cc6f95354632be646be18b92af2f9a08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9287e55cc6f95354632be646be18b92af2f9a08/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f525f6e94ceba86766eb8260abfe2dc1acc43702", "url": "https://api.github.com/repos/rust-lang/rust/commits/f525f6e94ceba86766eb8260abfe2dc1acc43702", "html_url": "https://github.com/rust-lang/rust/commit/f525f6e94ceba86766eb8260abfe2dc1acc43702"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "de9862f9e5ebfbd2bb997d38e65710383201e3d6", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9287e55cc6f95354632be646be18b92af2f9a08/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9287e55cc6f95354632be646be18b92af2f9a08/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=e9287e55cc6f95354632be646be18b92af2f9a08", "patch": "@@ -263,6 +263,7 @@ options:\n     --no-typestate     don't run the typestate pass (unsafe!)\n     --test             build test harness\n     --gc               garbage collect shared data (experimental/temporary)\n+    --stack-growth     perform stack checks (experimental)\n \n \");\n }\n@@ -386,6 +387,7 @@ fn build_session_options(binary: str, match: getopts::match)\n     let cfg = parse_cfgspecs(getopts::opt_strs(match, \"cfg\"));\n     let test = opt_present(match, \"test\");\n     let do_gc = opt_present(match, \"gc\");\n+    let stack_growth = opt_present(match, \"stack-growth\");\n     let sopts: @session::options =\n         @{library: library,\n           static: static,\n@@ -405,7 +407,8 @@ fn build_session_options(binary: str, match: getopts::match)\n           test: test,\n           parse_only: parse_only,\n           no_trans: no_trans,\n-          do_gc: do_gc};\n+          do_gc: do_gc,\n+          stack_growth: stack_growth};\n     ret sopts;\n }\n \n@@ -439,7 +442,8 @@ fn opts() -> [getopts::opt] {\n          optflag(\"time-passes\"), optflag(\"time-llvm-passes\"),\n          optflag(\"no-typestate\"), optflag(\"noverify\"),\n          optmulti(\"cfg\"), optflag(\"test\"),\n-         optflag(\"lib\"), optflag(\"static\"), optflag(\"gc\")];\n+         optflag(\"lib\"), optflag(\"static\"), optflag(\"gc\"),\n+         optflag(\"stack-growth\")];\n }\n \n fn main(args: [str]) {"}, {"sha": "001bc9ce2fb0522a2e773c39278bfc7ae401a280", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9287e55cc6f95354632be646be18b92af2f9a08/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9287e55cc6f95354632be646be18b92af2f9a08/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=e9287e55cc6f95354632be646be18b92af2f9a08", "patch": "@@ -39,7 +39,8 @@ type options =\n      test: bool,\n      parse_only: bool,\n      no_trans: bool,\n-     do_gc: bool};\n+     do_gc: bool,\n+     stack_growth: bool};\n \n type crate_metadata = {name: str, data: [u8]};\n "}, {"sha": "627d273666d98f23dd88941c9ae4f5664b8a2f73", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9287e55cc6f95354632be646be18b92af2f9a08/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9287e55cc6f95354632be646be18b92af2f9a08/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=e9287e55cc6f95354632be646be18b92af2f9a08", "patch": "@@ -455,9 +455,9 @@ native \"cdecl\" mod llvm = \"rustllvm\" {\n     fn LLVMSetFunctionCallConv(Fn: ValueRef, CC: uint);\n     fn LLVMGetGC(Fn: ValueRef) -> sbuf;\n     fn LLVMSetGC(Fn: ValueRef, Name: sbuf);\n-    fn LLVMAddFunctionAttr(Fn: ValueRef, PA: Attribute);\n+    fn LLVMAddFunctionAttr(Fn: ValueRef, PA: Attribute, HighPA: uint);\n     fn LLVMGetFunctionAttr(Fn: ValueRef) -> Attribute;\n-    fn LLVMRemoveFunctionAttr(Fn: ValueRef, PA: Attribute);\n+    fn LLVMRemoveFunctionAttr(Fn: ValueRef, PA: Attribute, HighPA: uint);\n \n     /* Operations on parameters */\n     fn LLVMCountParams(Fn: ValueRef) -> uint;"}, {"sha": "ae5d3ca25d18160d86928d54d5363e886d10b7a8", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9287e55cc6f95354632be646be18b92af2f9a08/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9287e55cc6f95354632be646be18b92af2f9a08/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e9287e55cc6f95354632be646be18b92af2f9a08", "patch": "@@ -1087,21 +1087,29 @@ fn get_static_tydesc(cx: @block_ctxt, orig_t: ty::t, ty_params: [uint],\n fn set_no_inline(f: ValueRef) {\n     llvm::LLVMAddFunctionAttr(f,\n                               lib::llvm::LLVMNoInlineAttribute as\n-                                  lib::llvm::llvm::Attribute);\n+                                  lib::llvm::llvm::Attribute,\n+                              0u);\n }\n \n // Tell LLVM to emit the information necessary to unwind the stack for the\n // function f.\n fn set_uwtable(f: ValueRef) {\n     llvm::LLVMAddFunctionAttr(f,\n                               lib::llvm::LLVMUWTableAttribute as\n-                                  lib::llvm::llvm::Attribute);\n+                                  lib::llvm::llvm::Attribute,\n+                              0u);\n }\n \n fn set_always_inline(f: ValueRef) {\n     llvm::LLVMAddFunctionAttr(f,\n                               lib::llvm::LLVMAlwaysInlineAttribute as\n-                                  lib::llvm::llvm::Attribute);\n+                                  lib::llvm::llvm::Attribute,\n+                              0u);\n+}\n+\n+fn set_custom_stack_growth_fn(f: ValueRef) {\n+    // TODO: Remove this hack to work around the lack of u64 in the FFI.\n+    llvm::LLVMAddFunctionAttr(f, 0 as lib::llvm::llvm::Attribute, 1u);\n }\n \n fn set_glue_inlining(cx: @local_ctxt, f: ValueRef, t: ty::t) {"}]}