{"sha": "41fd82441536cd9f8bc31461cab63cb6ec586d4e", "node_id": "C_kwDOAAsO6NoAKDQxZmQ4MjQ0MTUzNmNkOWY4YmMzMTQ2MWNhYjYzY2I2ZWM1ODZkNGU", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-18T12:38:53Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-18T12:41:38Z"}, "message": "Revert \"Simplify generated PartialOrd code\"\n\nThis reverts commit 601ed3a10dacc2ba2ee0ca436c23529ae7fde292.", "tree": {"sha": "b614998698f262816bae77d8bde33cd0f1090feb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b614998698f262816bae77d8bde33cd0f1090feb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41fd82441536cd9f8bc31461cab63cb6ec586d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41fd82441536cd9f8bc31461cab63cb6ec586d4e", "html_url": "https://github.com/rust-lang/rust/commit/41fd82441536cd9f8bc31461cab63cb6ec586d4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41fd82441536cd9f8bc31461cab63cb6ec586d4e/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48c3be922e9ecc49bcdc77e21dbf6149f792a380", "url": "https://api.github.com/repos/rust-lang/rust/commits/48c3be922e9ecc49bcdc77e21dbf6149f792a380", "html_url": "https://github.com/rust-lang/rust/commit/48c3be922e9ecc49bcdc77e21dbf6149f792a380"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "72f49657fbb25c14e4eea3d743525639c04a49d2", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/41fd82441536cd9f8bc31461cab63cb6ec586d4e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fd82441536cd9f8bc31461cab63cb6ec586d4e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=41fd82441536cd9f8bc31461cab63cb6ec586d4e", "patch": "@@ -722,7 +722,15 @@ struct Foo {\n \n impl PartialOrd for Foo {\n     $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n-        (self.bin, self.bar, self.baz).partial_cmp(&(other.bin, other.bar, other.baz))\n+        match self.bin.partial_cmp(&other.bin) {\n+            Some(core::cmp::Ordering::Eq) => {}\n+            ord => return ord,\n+        }\n+        match self.bar.partial_cmp(&other.bar) {\n+            Some(core::cmp::Ordering::Eq) => {}\n+            ord => return ord,\n+        }\n+        self.baz.partial_cmp(&other.baz)\n     }\n }\n \"#,\n@@ -743,7 +751,15 @@ struct Foo(usize, usize, usize);\n \n impl PartialOrd for Foo {\n     $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n-        (self.0, self.1, self.2).partial_cmp(&(other.0, other.1, other.2))\n+        match self.0.partial_cmp(&other.0) {\n+            Some(core::cmp::Ordering::Eq) => {}\n+            ord => return ord,\n+        }\n+        match self.1.partial_cmp(&other.1) {\n+            Some(core::cmp::Ordering::Eq) => {}\n+            ord => return ord,\n+        }\n+        self.2.partial_cmp(&other.2)\n     }\n }\n \"#,"}, {"sha": "200c9e25db1daed11e44030079100c3a48ac5187", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/41fd82441536cd9f8bc31461cab63cb6ec586d4e/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fd82441536cd9f8bc31461cab63cb6ec586d4e/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=41fd82441536cd9f8bc31461cab63cb6ec586d4e", "patch": "@@ -574,11 +574,24 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n }\n \n fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    fn gen_partial_cmp_call(mut lhs: Vec<ast::Expr>, mut rhs: Vec<ast::Expr>) -> ast::Expr {\n-        let (lhs, rhs) = match (lhs.len(), rhs.len()) {\n-            (1, 1) => (lhs.pop().unwrap(), rhs.pop().unwrap()),\n-            _ => (make::expr_tuple(lhs.into_iter()), make::expr_tuple(rhs.into_iter())),\n-        };\n+    fn gen_partial_eq_match(match_target: ast::Expr) -> Option<ast::Stmt> {\n+        let mut arms = vec![];\n+\n+        let variant_name =\n+            make::path_pat(make::ext::path_from_idents([\"core\", \"cmp\", \"Ordering\", \"Eq\"])?);\n+        let lhs = make::tuple_struct_pat(make::ext::path_from_idents([\"Some\"])?, [variant_name]);\n+        arms.push(make::match_arm(Some(lhs.into()), None, make::expr_empty_block()));\n+\n+        arms.push(make::match_arm(\n+            [make::ident_pat(false, false, make::name(\"ord\")).into()],\n+            None,\n+            make::expr_return(Some(make::expr_path(make::ext::ident_path(\"ord\")))),\n+        ));\n+        let list = make::match_arm_list(arms).indent(ast::edit::IndentLevel(1));\n+        Some(make::expr_stmt(make::expr_match(match_target, list)).into())\n+    }\n+\n+    fn gen_partial_cmp_call(lhs: ast::Expr, rhs: ast::Expr) -> ast::Expr {\n         let rhs = make::expr_ref(rhs, false);\n         let method = make::name_ref(\"partial_cmp\");\n         make::expr_method_call(lhs, method, make::arg_list(Some(rhs)))\n@@ -594,35 +607,41 @@ fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n         ast::Adt::Enum(_) => return None,\n         ast::Adt::Struct(strukt) => match strukt.field_list() {\n             Some(ast::FieldList::RecordFieldList(field_list)) => {\n-                let mut l_fields = vec![];\n-                let mut r_fields = vec![];\n+                let mut exprs = vec![];\n                 for field in field_list.fields() {\n                     let lhs = make::expr_path(make::ext::ident_path(\"self\"));\n                     let lhs = make::expr_field(lhs, &field.name()?.to_string());\n                     let rhs = make::expr_path(make::ext::ident_path(\"other\"));\n                     let rhs = make::expr_field(rhs, &field.name()?.to_string());\n-                    l_fields.push(lhs);\n-                    r_fields.push(rhs);\n+                    let ord = gen_partial_cmp_call(lhs, rhs);\n+                    exprs.push(ord);\n                 }\n \n-                let expr = gen_partial_cmp_call(l_fields, r_fields);\n-                make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1))\n+                let tail = exprs.pop();\n+                let stmts = exprs\n+                    .into_iter()\n+                    .map(gen_partial_eq_match)\n+                    .collect::<Option<Vec<ast::Stmt>>>()?;\n+                make::block_expr(stmts.into_iter(), tail).indent(ast::edit::IndentLevel(1))\n             }\n \n             Some(ast::FieldList::TupleFieldList(field_list)) => {\n-                let mut l_fields = vec![];\n-                let mut r_fields = vec![];\n+                let mut exprs = vec![];\n                 for (i, _) in field_list.fields().enumerate() {\n                     let idx = format!(\"{}\", i);\n                     let lhs = make::expr_path(make::ext::ident_path(\"self\"));\n                     let lhs = make::expr_field(lhs, &idx);\n                     let rhs = make::expr_path(make::ext::ident_path(\"other\"));\n                     let rhs = make::expr_field(rhs, &idx);\n-                    l_fields.push(lhs);\n-                    r_fields.push(rhs);\n+                    let ord = gen_partial_cmp_call(lhs, rhs);\n+                    exprs.push(ord);\n                 }\n-                let expr = gen_partial_cmp_call(l_fields, r_fields);\n-                make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1))\n+                let tail = exprs.pop();\n+                let stmts = exprs\n+                    .into_iter()\n+                    .map(gen_partial_eq_match)\n+                    .collect::<Option<Vec<ast::Stmt>>>()?;\n+                make::block_expr(stmts.into_iter(), tail).indent(ast::edit::IndentLevel(1))\n             }\n \n             // No fields in the body means there's nothing to hash."}]}