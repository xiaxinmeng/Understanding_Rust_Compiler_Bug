{"sha": "d96f9d47ac35b637906edb1d5d112549164e096c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NmY5ZDQ3YWMzNWI2Mzc5MDZlZGIxZDVkMTEyNTQ5MTY0ZTA5NmM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-07-26T05:01:31Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-07-26T05:11:15Z"}, "message": "Point at return type always when type mismatch against it\n\nBefore this, the diagnostic errors would only point at the return type\nwhen changing it would be a possible solution to a type error. Add a\nlabel to the return type without a suggestion to change in order to make\nthe source of the expected type obvious.\n\nFollow up to #42850, fixes #25133, fixes #41897.", "tree": {"sha": "c0c30a1f7652423055d643f2a31a160b9f9dab78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0c30a1f7652423055d643f2a31a160b9f9dab78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d96f9d47ac35b637906edb1d5d112549164e096c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d96f9d47ac35b637906edb1d5d112549164e096c", "html_url": "https://github.com/rust-lang/rust/commit/d96f9d47ac35b637906edb1d5d112549164e096c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d96f9d47ac35b637906edb1d5d112549164e096c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5e8a8ef97abef8a69a9c72de74fed779b401d73", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e8a8ef97abef8a69a9c72de74fed779b401d73", "html_url": "https://github.com/rust-lang/rust/commit/b5e8a8ef97abef8a69a9c72de74fed779b401d73"}], "stats": {"total": 94, "additions": 68, "deletions": 26}, "files": [{"sha": "5cec697c6bbd932a9daec6ccdcd757ea138c7ab8", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d96f9d47ac35b637906edb1d5d112549164e096c", "patch": "@@ -664,7 +664,7 @@ impl<'hir> Map<'hir> {\n             match *node {\n                 NodeExpr(ref expr) => {\n                     match expr.node {\n-                        ExprWhile(..) | ExprLoop(..) => true,\n+                        ExprWhile(..) | ExprLoop(..) | ExprIf(..) => true,\n                         _ => false,\n                     }\n                 }"}, {"sha": "0f152d999df598ca8f9d981b02de5401b5e19393", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d96f9d47ac35b637906edb1d5d112549164e096c", "patch": "@@ -488,6 +488,7 @@ impl<'tcx> TyS<'tcx> {\n             TypeVariants::TyFnPtr(..) |\n             TypeVariants::TyDynamic(..) |\n             TypeVariants::TyClosure(..) |\n+            TypeVariants::TyInfer(..) |\n             TypeVariants::TyProjection(..) => false,\n             _ => true,\n         }"}, {"sha": "73aa5ac5a0f0a5054a64573cee0391be90ce8371", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d96f9d47ac35b637906edb1d5d112549164e096c", "patch": "@@ -4187,8 +4187,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         ty\n     }\n \n-    /// Given a `NodeId`, return the `FnDecl` of the method it is enclosed by and whether it is\n-    /// `fn main` if it is a method, `None` otherwise.\n+    /// Given a `NodeId`, return the `FnDecl` of the method it is enclosed by and whether a\n+    /// suggetion can be made, `None` otherwise.\n     pub fn get_fn_decl(&self, blk_id: ast::NodeId) -> Option<(hir::FnDecl, bool)> {\n         // Get enclosing Fn, if it is a function or a trait method, unless there's a `loop` or\n         // `while` before reaching it, as block tail returns are not available in them.\n@@ -4199,14 +4199,23 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 name, node: hir::ItemFn(ref decl, ..), ..\n             }) = parent {\n                 decl.clone().and_then(|decl| {\n-                    // This is less than ideal, it will not present the return type span on any\n-                    // method called `main`, regardless of whether it is actually the entry point.\n-                    Some((decl, name == Symbol::intern(\"main\")))\n+                    // This is less than ideal, it will not suggest a return type span on any\n+                    // method called `main`, regardless of whether it is actually the entry point,\n+                    // but it will still present it as the reason for the expected type.\n+                    Some((decl, name != Symbol::intern(\"main\")))\n                 })\n             } else if let Node::NodeTraitItem(&hir::TraitItem {\n                 node: hir::TraitItemKind::Method(hir::MethodSig {\n                     ref decl, ..\n                 }, ..), ..\n+            }) = parent {\n+                decl.clone().and_then(|decl| {\n+                    Some((decl, true))\n+                })\n+            } else if let Node::NodeImplItem(&hir::ImplItem {\n+                node: hir::ImplItemKind::Method(hir::MethodSig {\n+                    ref decl, ..\n+                }, ..), ..\n             }) = parent {\n                 decl.clone().and_then(|decl| {\n                     Some((decl, false))\n@@ -4233,11 +4242,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                             blk_id: ast::NodeId) {\n         self.suggest_missing_semicolon(err, expression, expected, cause_span);\n \n-        if let Some((fn_decl, is_main)) = self.get_fn_decl(blk_id) {\n-            // `fn main()` must return `()`, do not suggest changing return type\n-            if !is_main {\n-                self.suggest_missing_return_type(err, &fn_decl, found);\n-            }\n+        if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n+            self.suggest_missing_return_type(err, &fn_decl, expected, found, can_suggest);\n         }\n     }\n \n@@ -4293,20 +4299,31 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn suggest_missing_return_type(&self,\n                                    err: &mut DiagnosticBuilder<'tcx>,\n                                    fn_decl: &hir::FnDecl,\n-                                   ty: Ty<'tcx>) {\n+                                   expected: Ty<'tcx>,\n+                                   found: Ty<'tcx>,\n+                                   can_suggest: bool) {\n \n-        // Only recommend changing the return type for methods that\n+        // Only suggest changing the return type for methods that\n         // haven't set a return type at all (and aren't `fn main()` or an impl).\n-        if let &hir::FnDecl {\n-            output: hir::FunctionRetTy::DefaultReturn(span), ..\n-        } = fn_decl {\n-            if ty.is_suggestable() {\n+        match (&fn_decl.output, found.is_suggestable(), can_suggest) {\n+            (&hir::FunctionRetTy::DefaultReturn(span), true, true) => {\n                 err.span_suggestion(span,\n                                     \"try adding a return type\",\n-                                    format!(\"-> {} \", ty));\n-            } else {\n+                                    format!(\"-> {} \", found));\n+            }\n+            (&hir::FunctionRetTy::DefaultReturn(span), false, true) => {\n                 err.span_label(span, \"possibly return type missing here?\");\n             }\n+            (&hir::FunctionRetTy::DefaultReturn(span), _, _) => {\n+                // `fn main()` must return `()`, do not suggest changing return type\n+                err.span_label(span, \"expected `()` because of default return type\");\n+            }\n+            (&hir::FunctionRetTy::Return(ref ty), _, _) => {\n+                // Only point to return type if the expected type is the return type, as if they\n+                // are not, the expectation must have been caused by something else.\n+                err.span_label(ty.span,\n+                               format!(\"expected `{}` because of return type\", expected));\n+            }\n         }\n     }\n "}, {"sha": "ad568b41fcbf3622bf8acbaf47925e2d8eed3c95", "filename": "src/test/compile-fail/struct-path-self-type-mismatch.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Ftest%2Fcompile-fail%2Fstruct-path-self-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Ftest%2Fcompile-fail%2Fstruct-path-self-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-path-self-type-mismatch.rs?ref=d96f9d47ac35b637906edb1d5d112549164e096c", "patch": "@@ -20,17 +20,15 @@ impl Bar for Foo<i32> {\n }\n \n impl<T> Foo<T> {\n-    fn new<U>(u: U) -> Foo<U> {\n+    fn new<U>(u: U) -> Foo<U> { //~ NOTE expected `Foo<U>` because of return type\n         Self {\n         //~^ ERROR mismatched types\n-        //~| expected type parameter, found a different type parameter\n-        //~| expected type `Foo<U>`\n-        //~| found type `Foo<T>`\n+        //~| NOTE expected type parameter, found a different type parameter\n+        //~| NOTE expected type `Foo<U>`\n             inner: u\n             //~^ ERROR mismatched types\n-            //~| expected type parameter, found a different type parameter\n-            //~| expected type `T`\n-            //~| found type `U`\n+            //~| NOTE expected type parameter, found a different type parameter\n+            //~| NOTE expected type `T`\n         }\n     }\n }"}, {"sha": "20c7dc416f3bb339851af79389f335581b014b89", "filename": "src/test/ui/block-result/block-must-not-have-result-res.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr?ref=d96f9d47ac35b637906edb1d5d112549164e096c", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-res.rs:15:9\n    |\n+14 |     fn drop(&mut self) {\n+   |                        - expected `()` because of default return type\n 15 |         true //~  ERROR mismatched types\n    |         ^^^^ expected (), found bool\n    |"}, {"sha": "cd8c28cd2cfa8eb0716d78ff675ff7b63b7b819e", "filename": "src/test/ui/block-result/issue-13624.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr?ref=d96f9d47ac35b637906edb1d5d112549164e096c", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-13624.rs:17:5\n    |\n+16 |   pub fn get_enum_struct_variant() -> () {\n+   |                                       -- expected `()` because of return type\n 17 |     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `a::Enum`\n    |"}, {"sha": "c6113ae0c9f6016a6f518dd53be2d2c013601af3", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=d96f9d47ac35b637906edb1d5d112549164e096c", "patch": "@@ -11,6 +11,9 @@ error[E0277]: the trait bound `{integer}: Scalar` is not satisfied\n error[E0308]: mismatched types\n   --> $DIR/issue-22645.rs:25:3\n    |\n+23 | fn main() {\n+   |           - expected `()` because of default return type\n+24 |   let b = Bob + 3.5;\n 25 |   b + 3 //~ ERROR E0277\n    |   ^^^^^ expected (), found struct `Bob`\n    |"}, {"sha": "29dbd5a8cf5999db93ca037d544dd2510f7ba668", "filename": "src/test/ui/block-result/issue-5500.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr?ref=d96f9d47ac35b637906edb1d5d112549164e096c", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-5500.rs:12:5\n    |\n+11 | fn main() {\n+   |           - expected `()` because of default return type\n 12 |     &panic!()\n    |     ^^^^^^^^^ expected (), found reference\n    |"}, {"sha": "791ce4860d0cd157828b079bc829dae1c7334867", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=d96f9d47ac35b637906edb1d5d112549164e096c", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/equality.rs:25:5\n    |\n+21 | fn two(x: bool) -> impl Foo {\n+   |                    -------- expected `_` because of return type\n+...\n 25 |     0_u32\n    |     ^^^^^ expected i32, found u32\n    |"}, {"sha": "8c63d7d6f91c5267666d4f9a8d979e2132cd4cf4", "filename": "src/test/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96f9d47ac35b637906edb1d5d112549164e096c/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=d96f9d47ac35b637906edb1d5d112549164e096c", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:26:5\n    |\n+25 | fn a() -> Foo {\n+   |           --- expected `Foo` because of return type\n 26 |     Some(Foo { bar: 1 })\n    |     ^^^^^^^^^^^^^^^^^^^^ expected struct `Foo`, found enum `std::option::Option`\n    |\n@@ -10,6 +12,8 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:30:5\n    |\n+29 | fn a2() -> Foo {\n+   |            --- expected `Foo` because of return type\n 30 |     Ok(Foo { bar: 1})\n    |     ^^^^^^^^^^^^^^^^^ expected struct `Foo`, found enum `std::result::Result`\n    |\n@@ -19,6 +23,8 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:34:5\n    |\n+33 | fn b() -> Option<Foo> {\n+   |           ----------- expected `std::option::Option<Foo>` because of return type\n 34 |     Foo { bar: 1 }\n    |     ^^^^^^^^^^^^^^ expected enum `std::option::Option`, found struct `Foo`\n    |\n@@ -28,6 +34,8 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:38:5\n    |\n+37 | fn c() -> Result<Foo, Bar> {\n+   |           ---------------- expected `std::result::Result<Foo, Bar>` because of return type\n 38 |     Foo { bar: 1 }\n    |     ^^^^^^^^^^^^^^ expected enum `std::result::Result`, found struct `Foo`\n    |\n@@ -37,6 +45,9 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:49:5\n    |\n+41 | fn d() -> X<X<String, String>, String> {\n+   |           ---------------------------- expected `X<X<std::string::String, std::string::String>, std::string::String>` because of return type\n+...\n 49 |     x\n    |     ^ expected struct `std::string::String`, found integral variable\n    |\n@@ -46,6 +57,9 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:60:5\n    |\n+52 | fn e() -> X<X<String, String>, String> {\n+   |           ---------------------------- expected `X<X<std::string::String, std::string::String>, std::string::String>` because of return type\n+...\n 60 |     x\n    |     ^ expected struct `std::string::String`, found integral variable\n    |"}]}