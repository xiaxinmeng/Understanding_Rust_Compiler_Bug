{"sha": "1c129f7b975af43362877054c4cd24d70929a030", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMTI5ZjdiOTc1YWY0MzM2Mjg3NzA1NGM0Y2QyNGQ3MDkyOWEwMzA=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-07-16T23:38:08Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-07-25T10:19:33Z"}, "message": "use vec![] macro to create Vector with first item inside instead of pushing to an empty vec![]\n\nslightly reduces code bloat", "tree": {"sha": "9859c8d9aa682379e173d505f978448be9a39127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9859c8d9aa682379e173d505f978448be9a39127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c129f7b975af43362877054c4cd24d70929a030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c129f7b975af43362877054c4cd24d70929a030", "html_url": "https://github.com/rust-lang/rust/commit/1c129f7b975af43362877054c4cd24d70929a030", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c129f7b975af43362877054c4cd24d70929a030/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71a6c7c80398143a67e27b01412f4b2ec12bde8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/71a6c7c80398143a67e27b01412f4b2ec12bde8b", "html_url": "https://github.com/rust-lang/rust/commit/71a6c7c80398143a67e27b01412f4b2ec12bde8b"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "b910431b1ddf13f8c1d2b7aca29217f4c7a4c818", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c129f7b975af43362877054c4cd24d70929a030/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c129f7b975af43362877054c4cd24d70929a030/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=1c129f7b975af43362877054c4cd24d70929a030", "patch": "@@ -2189,8 +2189,7 @@ impl<'a> State<'a> {\n             Options(InlineAsmOptions),\n         }\n \n-        let mut args = vec![];\n-        args.push(AsmArg::Template(InlineAsmTemplatePiece::to_string(&asm.template)));\n+        let mut args = vec![AsmArg::Template(InlineAsmTemplatePiece::to_string(&asm.template))];\n         args.extend(asm.operands.iter().map(|(o, _)| AsmArg::Operand(o)));\n         if !asm.options.is_empty() {\n             args.push(AsmArg::Options(asm.options));"}, {"sha": "598292d1bc4bdd9f79449a39b29197cb6d6187a4", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c129f7b975af43362877054c4cd24d70929a030/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c129f7b975af43362877054c4cd24d70929a030/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=1c129f7b975af43362877054c4cd24d70929a030", "patch": "@@ -1356,8 +1356,8 @@ impl<'a> State<'a> {\n             Options(ast::InlineAsmOptions),\n         }\n \n-        let mut args = vec![];\n-        args.push(AsmArg::Template(ast::InlineAsmTemplatePiece::to_string(&asm.template)));\n+        let mut args =\n+            vec![AsmArg::Template(ast::InlineAsmTemplatePiece::to_string(&asm.template))];\n         args.extend(asm.operands.iter().map(|(o, _)| AsmArg::Operand(o)));\n         if !asm.options.is_empty() {\n             args.push(AsmArg::Options(asm.options));"}, {"sha": "32febcec7aff35eeba0e71dc428cd9e81be3bac9", "filename": "compiler/rustc_mir/src/transform/coverage/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c129f7b975af43362877054c4cd24d70929a030/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c129f7b975af43362877054c4cd24d70929a030/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs?ref=1c129f7b975af43362877054c4cd24d70929a030", "patch": "@@ -526,8 +526,8 @@ impl TraverseCoverageGraphWithLoops {\n     pub fn new(basic_coverage_blocks: &CoverageGraph) -> Self {\n         let start_bcb = basic_coverage_blocks.start_node();\n         let backedges = find_loop_backedges(basic_coverage_blocks);\n-        let mut context_stack = Vec::new();\n-        context_stack.push(TraversalContext { loop_backedges: None, worklist: vec![start_bcb] });\n+        let context_stack =\n+            vec![TraversalContext { loop_backedges: None, worklist: vec![start_bcb] }];\n         // `context_stack` starts with a `TraversalContext` for the main function context (beginning\n         // with the `start` BasicCoverageBlock of the function). New worklists are pushed to the top\n         // of the stack as loops are entered, and popped off of the stack when a loop's worklist is"}, {"sha": "3a32f1cb903e583f24117db65fc84197e2aa3b84", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c129f7b975af43362877054c4cd24d70929a030/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c129f7b975af43362877054c4cd24d70929a030/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=1c129f7b975af43362877054c4cd24d70929a030", "patch": "@@ -124,11 +124,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             self.impl_similar_to(trait_ref, obligation).unwrap_or_else(|| trait_ref.def_id());\n         let trait_ref = trait_ref.skip_binder();\n \n-        let mut flags = vec![];\n-        flags.push((\n+        let mut flags = vec![(\n             sym::ItemContext,\n             self.describe_enclosure(obligation.cause.body_id).map(|s| s.to_owned()),\n-        ));\n+        )];\n \n         match obligation.cause.code {\n             ObligationCauseCode::BuiltinDerivedObligation(..)"}]}