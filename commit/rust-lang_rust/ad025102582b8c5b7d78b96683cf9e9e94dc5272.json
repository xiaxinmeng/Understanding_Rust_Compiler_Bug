{"sha": "ad025102582b8c5b7d78b96683cf9e9e94dc5272", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMDI1MTAyNTgyYjhjNWI3ZDc4Yjk2NjgzY2Y5ZTllOTRkYzUyNzI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-31T23:02:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-02T17:17:32Z"}, "message": "libcore: Implement a memory-safe \"each_val\" for data in aliasable, mutable locations", "tree": {"sha": "4b339ed147375ed430aecf8e69e4a8c0deceec7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b339ed147375ed430aecf8e69e4a8c0deceec7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad025102582b8c5b7d78b96683cf9e9e94dc5272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad025102582b8c5b7d78b96683cf9e9e94dc5272", "html_url": "https://github.com/rust-lang/rust/commit/ad025102582b8c5b7d78b96683cf9e9e94dc5272", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad025102582b8c5b7d78b96683cf9e9e94dc5272/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c2e6fda73918784ad2512c96c9b2f4787bbd72b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c2e6fda73918784ad2512c96c9b2f4787bbd72b", "html_url": "https://github.com/rust-lang/rust/commit/0c2e6fda73918784ad2512c96c9b2f4787bbd72b"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "12a426261c49b2f5a1e080cc12e30bcc020d5bcf", "filename": "src/libcore/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad025102582b8c5b7d78b96683cf9e9e94dc5272/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad025102582b8c5b7d78b96683cf9e9e94dc5272/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=ad025102582b8c5b7d78b96683cf9e9e94dc5272", "patch": "@@ -17,7 +17,7 @@ pub use vec::{ConstVector, CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n pub use vec::{MutableVector, MutableCopyableVector};\n pub use iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};\n-pub use iter::{CopyableOrderedIter, Times};\n+pub use iter::{CopyableOrderedIter, CopyableNonstrictIter, Times};\n pub use num::Num;\n pub use ptr::Ptr;\n pub use to_str::ToStr;"}, {"sha": "d318c279999c24cf4ef7d1596ba7fc3d5e9d9a30", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad025102582b8c5b7d78b96683cf9e9e94dc5272/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad025102582b8c5b7d78b96683cf9e9e94dc5272/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=ad025102582b8c5b7d78b96683cf9e9e94dc5272", "patch": "@@ -46,6 +46,13 @@ pub trait CopyableOrderedIter<A:Copy Ord> {\n     pure fn max() -> A;\n }\n \n+pub trait CopyableNonstrictIter<A:Copy> {\n+    // Like \"each\", but copies out the value. If the receiver is mutated while\n+    // iterating over it, the semantics must not be memory-unsafe but are\n+    // otherwise undefined.\n+    pure fn each_val(&const self, f: &fn(A) -> bool);\n+}\n+\n // A trait for sequences that can be by imperatively pushing elements\n // onto them.\n pub trait Buildable<A> {"}, {"sha": "6cbf8ca91fd6334c82a5e25fb220364d8baa0b36", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ad025102582b8c5b7d78b96683cf9e9e94dc5272/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad025102582b8c5b7d78b96683cf9e9e94dc5272/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=ad025102582b8c5b7d78b96683cf9e9e94dc5272", "patch": "@@ -2020,6 +2020,37 @@ impl<A: Copy Ord> &[A]: iter::CopyableOrderedIter<A> {\n     pure fn min() -> A { iter::min(&self) }\n     pure fn max() -> A { iter::max(&self) }\n }\n+\n+impl<A:Copy> &[A] : iter::CopyableNonstrictIter<A> {\n+    pure fn each_val(&const self, f: fn(A) -> bool) {\n+        let mut i = 0;\n+        while i < self.len() {\n+            if !f(copy self[i]) { break; }\n+            i += 1;\n+        }\n+    }\n+}\n+\n+impl<A:Copy> ~[A] : iter::CopyableNonstrictIter<A> {\n+    pure fn each_val(&const self, f: fn(A) -> bool) {\n+        let mut i = 0;\n+        while i < self.len() {\n+            if !f(copy self[i]) { break; }\n+            i += 1;\n+        }\n+    }\n+}\n+\n+impl<A:Copy> @[A] : iter::CopyableNonstrictIter<A> {\n+    pure fn each_val(&const self, f: fn(A) -> bool) {\n+        let mut i = 0;\n+        while i < self.len() {\n+            if !f(copy self[i]) { break; }\n+            i += 1;\n+        }\n+    }\n+}\n+\n // ___________________________________________________________________________\n \n #[cfg(test)]"}]}