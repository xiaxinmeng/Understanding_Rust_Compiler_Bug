{"sha": "07b37cf791c69c5359a058402495fe45d4657f66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YjM3Y2Y3OTFjNjljNTM1OWEwNTg0MDI0OTVmZTQ1ZDQ2NTdmNjY=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-14T21:16:16Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-14T21:16:16Z"}, "message": "Use `TypeVisitor::BreakTy` in `ProhibitOpaqueTypes`", "tree": {"sha": "0098659b11ef8d02d3a0d06fb15bdc69ad0ce8bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0098659b11ef8d02d3a0d06fb15bdc69ad0ce8bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07b37cf791c69c5359a058402495fe45d4657f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07b37cf791c69c5359a058402495fe45d4657f66", "html_url": "https://github.com/rust-lang/rust/commit/07b37cf791c69c5359a058402495fe45d4657f66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07b37cf791c69c5359a058402495fe45d4657f66/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65cdc21f06fba564d161db9d49f07dfe867f741e", "url": "https://api.github.com/repos/rust-lang/rust/commits/65cdc21f06fba564d161db9d49f07dfe867f741e", "html_url": "https://github.com/rust-lang/rust/commit/65cdc21f06fba564d161db9d49f07dfe867f741e"}], "stats": {"total": 12, "additions": 3, "deletions": 9}, "files": [{"sha": "aaedd53c0f6117aa3fdac64f4f887c9298937c51", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07b37cf791c69c5359a058402495fe45d4657f66/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07b37cf791c69c5359a058402495fe45d4657f66/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=07b37cf791c69c5359a058402495fe45d4657f66", "patch": "@@ -1131,18 +1131,14 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n         struct ProhibitOpaqueTypes<'a, 'tcx> {\n             cx: &'a LateContext<'tcx>,\n-            ty: Option<Ty<'tcx>>,\n         };\n \n         impl<'a, 'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n-            type BreakTy = ();\n+            type BreakTy = Ty<'tcx>;\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 match ty.kind() {\n-                    ty::Opaque(..) => {\n-                        self.ty = Some(ty);\n-                        ControlFlow::BREAK\n-                    }\n+                    ty::Opaque(..) => ControlFlow::Break(ty),\n                     // Consider opaque types within projections FFI-safe if they do not normalize\n                     // to more opaque types.\n                     ty::Projection(..) => {\n@@ -1161,9 +1157,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             }\n         }\n \n-        let mut visitor = ProhibitOpaqueTypes { cx: self.cx, ty: None };\n-        ty.visit_with(&mut visitor);\n-        if let Some(ty) = visitor.ty {\n+        if let Some(ty) = ty.visit_with(&mut ProhibitOpaqueTypes { cx: self.cx }).break_value() {\n             self.emit_ffi_unsafe_type_lint(ty, sp, \"opaque types have no C equivalent\", None);\n             true\n         } else {"}]}