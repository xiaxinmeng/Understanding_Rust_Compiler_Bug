{"sha": "af54b1e248f377853957ada0270e269bedb577b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNTRiMWUyNDhmMzc3ODUzOTU3YWRhMDI3MGUyNjliZWRiNTc3YjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-23T20:19:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-23T20:19:00Z"}, "message": "minimize tests", "tree": {"sha": "cb637a226f131f693a59ba94be8f0ad9974855d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb637a226f131f693a59ba94be8f0ad9974855d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af54b1e248f377853957ada0270e269bedb577b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af54b1e248f377853957ada0270e269bedb577b4", "html_url": "https://github.com/rust-lang/rust/commit/af54b1e248f377853957ada0270e269bedb577b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af54b1e248f377853957ada0270e269bedb577b4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c06599504bc4fcbb3d5024d9a8bdb14f263bad36", "url": "https://api.github.com/repos/rust-lang/rust/commits/c06599504bc4fcbb3d5024d9a8bdb14f263bad36", "html_url": "https://github.com/rust-lang/rust/commit/c06599504bc4fcbb3d5024d9a8bdb14f263bad36"}], "stats": {"total": 98, "additions": 54, "deletions": 44}, "files": [{"sha": "c7739582446257c0db4eba8f9c7a10a1c2da2eda", "filename": "crates/ide_assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 54, "deletions": 44, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/af54b1e248f377853957ada0270e269bedb577b4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af54b1e248f377853957ada0270e269bedb577b4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=af54b1e248f377853957ada0270e269bedb577b4", "patch": "@@ -135,39 +135,43 @@ mod tests {\n         check_assist(\n             generate_getter,\n             r#\"\n-struct Context<T: Clone> {\n-    dat$0a: T,\n-}\"#,\n+struct Context {\n+    dat$0a: Data,\n+}\n+\"#,\n             r#\"\n-struct Context<T: Clone> {\n-    data: T,\n+struct Context {\n+    data: Data,\n }\n \n-impl<T: Clone> Context<T> {\n+impl Context {\n     /// Get a reference to the context's data.\n-    fn data(&self) -> &T {\n+    fn data(&self) -> &Data {\n         &self.data\n     }\n-}\"#,\n+}\n+\"#,\n         );\n \n         check_assist(\n             generate_getter_mut,\n             r#\"\n-struct Context<T: Clone> {\n-    dat$0a: T,\n-}\"#,\n+struct Context {\n+    dat$0a: Data,\n+}\n+\"#,\n             r#\"\n-struct Context<T: Clone> {\n-    data: T,\n+struct Context {\n+    data: Data,\n }\n \n-impl<T: Clone> Context<T> {\n+impl Context {\n     /// Get a mutable reference to the context's data.\n-    fn data_mut(&mut self) -> &mut T {\n+    fn data_mut(&mut self) -> &mut Data {\n         &mut self.data\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n@@ -176,29 +180,31 @@ impl<T: Clone> Context<T> {\n         check_assist_not_applicable(\n             generate_getter,\n             r#\"\n-struct Context<T: Clone> {\n-    dat$0a: T,\n+struct Context {\n+    dat$0a: Data,\n }\n \n-impl<T: Clone> Context<T> {\n-    fn data(&self) -> &T {\n+impl Context {\n+    fn data(&self) -> &Data {\n         &self.data\n     }\n-}\"#,\n+}\n+\"#,\n         );\n \n         check_assist_not_applicable(\n             generate_getter_mut,\n             r#\"\n-struct Context<T: Clone> {\n-    dat$0a: T,\n+struct Context {\n+    dat$0a: Data,\n }\n \n-impl<T: Clone> Context<T> {\n-    fn data_mut(&mut self) -> &mut T {\n+impl Context {\n+    fn data_mut(&mut self) -> &mut Data {\n         &mut self.data\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n@@ -207,20 +213,22 @@ impl<T: Clone> Context<T> {\n         check_assist(\n             generate_getter,\n             r#\"\n-pub(crate) struct Context<T: Clone> {\n-    dat$0a: T,\n-}\"#,\n+pub(crate) struct Context {\n+    dat$0a: Data,\n+}\n+\"#,\n             r#\"\n-pub(crate) struct Context<T: Clone> {\n-    data: T,\n+pub(crate) struct Context {\n+    data: Data,\n }\n \n-impl<T: Clone> Context<T> {\n+impl Context {\n     /// Get a reference to the context's data.\n-    pub(crate) fn data(&self) -> &T {\n+    pub(crate) fn data(&self) -> &Data {\n         &self.data\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n@@ -229,34 +237,36 @@ impl<T: Clone> Context<T> {\n         check_assist(\n             generate_getter,\n             r#\"\n-struct Context<T: Clone> {\n-    data: T,\n+struct Context {\n+    data: Data,\n     cou$0nt: usize,\n }\n \n-impl<T: Clone> Context<T> {\n+impl Context {\n     /// Get a reference to the context's data.\n-    fn data(&self) -> &T {\n+    fn data(&self) -> &Data {\n         &self.data\n     }\n-}\"#,\n+}\n+\"#,\n             r#\"\n-struct Context<T: Clone> {\n-    data: T,\n+struct Context {\n+    data: Data,\n     count: usize,\n }\n \n-impl<T: Clone> Context<T> {\n+impl Context {\n     /// Get a reference to the context's data.\n-    fn data(&self) -> &T {\n+    fn data(&self) -> &Data {\n         &self.data\n     }\n \n     /// Get a reference to the context's count.\n     fn count(&self) -> &usize {\n         &self.count\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n }"}]}