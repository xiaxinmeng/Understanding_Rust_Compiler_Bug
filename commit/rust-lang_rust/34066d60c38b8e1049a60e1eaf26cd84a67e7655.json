{"sha": "34066d60c38b8e1049a60e1eaf26cd84a67e7655", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MDY2ZDYwYzM4YjhlMTA0OWE2MGUxZWFmMjZjZDg0YTY3ZTc2NTU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-04-14T02:21:39Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-15T15:23:51Z"}, "message": "rustc_metadata: don't use more space than needed, for each Table.", "tree": {"sha": "b8f06fcb74027c4e0f0c10c907048667afb50b29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8f06fcb74027c4e0f0c10c907048667afb50b29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34066d60c38b8e1049a60e1eaf26cd84a67e7655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34066d60c38b8e1049a60e1eaf26cd84a67e7655", "html_url": "https://github.com/rust-lang/rust/commit/34066d60c38b8e1049a60e1eaf26cd84a67e7655", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34066d60c38b8e1049a60e1eaf26cd84a67e7655/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee747f645ffdfcea4f39ad4ccc4d83742a4ea3aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee747f645ffdfcea4f39ad4ccc4d83742a4ea3aa", "html_url": "https://github.com/rust-lang/rust/commit/ee747f645ffdfcea4f39ad4ccc4d83742a4ea3aa"}], "stats": {"total": 54, "additions": 21, "deletions": 33}, "files": [{"sha": "f1436e4c09dffb722929437173ee4945f225588f", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34066d60c38b8e1049a60e1eaf26cd84a67e7655/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34066d60c38b8e1049a60e1eaf26cd84a67e7655/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=34066d60c38b8e1049a60e1eaf26cd84a67e7655", "patch": "@@ -60,6 +60,7 @@ struct EncodeContext<'tcx> {\n     source_file_cache: Lrc<SourceFile>,\n }\n \n+#[derive(Default)]\n struct PerDefTables<'tcx> {\n     kind: PerDefTable<Lazy<EntryKind<'tcx>>>,\n     visibility: PerDefTable<Lazy<ty::Visibility>>,\n@@ -1774,29 +1775,10 @@ crate fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n     // Since encoding metadata is not in a query, and nothing is cached,\n     // there's no need to do dep-graph tracking for any of it.\n     let (root, mut result) = tcx.dep_graph.with_ignore(move || {\n-        let def_count = tcx.hir().definitions().def_index_count();\n         let mut ecx = EncodeContext {\n             opaque: encoder,\n             tcx,\n-            per_def: PerDefTables {\n-                kind: PerDefTable::new(def_count),\n-                visibility: PerDefTable::new(def_count),\n-                span: PerDefTable::new(def_count),\n-                attributes: PerDefTable::new(def_count),\n-                children: PerDefTable::new(def_count),\n-                stability: PerDefTable::new(def_count),\n-                deprecation: PerDefTable::new(def_count),\n-\n-                ty: PerDefTable::new(def_count),\n-                inherent_impls: PerDefTable::new(def_count),\n-                variances: PerDefTable::new(def_count),\n-                generics: PerDefTable::new(def_count),\n-                predicates: PerDefTable::new(def_count),\n-                predicates_defined_on: PerDefTable::new(def_count),\n-\n-                mir: PerDefTable::new(def_count),\n-                promoted_mir: PerDefTable::new(def_count),\n-            },\n+            per_def: Default::default(),\n             lazy_state: LazyState::NoNode,\n             type_shorthands: Default::default(),\n             predicate_shorthands: Default::default(),"}, {"sha": "5cfa137d04f7dbad110cee23ee4bbdc9553dc14c", "filename": "src/librustc_metadata/table.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/34066d60c38b8e1049a60e1eaf26cd84a67e7655/src%2Flibrustc_metadata%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34066d60c38b8e1049a60e1eaf26cd84a67e7655/src%2Flibrustc_metadata%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftable.rs?ref=34066d60c38b8e1049a60e1eaf26cd84a67e7655", "patch": "@@ -23,15 +23,15 @@ crate trait FixedSizeEncoding: Default {\n     // FIXME(eddyb) make these generic functions, or at least defaults here.\n     // (same problem as above, needs `[u8; Self::BYTE_LEN]`)\n     // For now, a macro (`fixed_size_encoding_byte_len_and_defaults`) is used.\n-    fn read_from_bytes_at(b: &[u8], i: usize) -> Self;\n+    fn maybe_read_from_bytes_at(b: &[u8], i: usize) -> Option<Self>;\n     fn write_to_bytes_at(self, b: &mut [u8], i: usize);\n }\n \n // HACK(eddyb) this shouldn't be needed (see comments on the methods above).\n macro_rules! fixed_size_encoding_byte_len_and_defaults {\n     ($byte_len:expr) => {\n         const BYTE_LEN: usize = $byte_len;\n-        fn read_from_bytes_at(b: &[u8], i: usize) -> Self {\n+        fn maybe_read_from_bytes_at(b: &[u8], i: usize) -> Option<Self> {\n             const BYTE_LEN: usize = $byte_len;\n             // HACK(eddyb) ideally this would be done with fully safe code,\n             // but slicing `[u8]` with `i * N..` is optimized worse, due to the\n@@ -42,7 +42,7 @@ macro_rules! fixed_size_encoding_byte_len_and_defaults {\n                     b.len() / BYTE_LEN,\n                 )\n             };\n-            FixedSizeEncoding::from_bytes(&b[i])\n+            b.get(i).map(|b| FixedSizeEncoding::from_bytes(b))\n         }\n         fn write_to_bytes_at(self, b: &mut [u8], i: usize) {\n             const BYTE_LEN: usize = $byte_len;\n@@ -116,25 +116,29 @@ impl<T: Encodable> FixedSizeEncoding for Option<Lazy<[T]>> {\n /// encoding or decoding all the values eagerly and in-order.\n // FIXME(eddyb) replace `Vec` with `[_]` here, such that `Box<Table<T>>` would be used\n // when building it, and `Lazy<Table<T>>` or `&Table<T>` when reading it.\n-// Sadly, that doesn't work for `DefPerTable`, which is `(Table<T>, Table<T>)`,\n-// and so would need two lengths in its metadata, which is not supported yet.\n+// (not sure if that is possible given that the `Vec` is being resized now)\n crate struct Table<T> where Option<T>: FixedSizeEncoding {\n     // FIXME(eddyb) store `[u8; <Option<T>>::BYTE_LEN]` instead of `u8` in `Vec`,\n     // once that starts being allowed by the compiler (i.e. lazy normalization).\n     bytes: Vec<u8>,\n     _marker: PhantomData<T>,\n }\n \n-impl<T> Table<T> where Option<T>: FixedSizeEncoding {\n-    crate fn new(len: usize) -> Self {\n+impl<T> Default for Table<T> where Option<T>: FixedSizeEncoding {\n+    fn default() -> Self {\n         Table {\n-            // FIXME(eddyb) only allocate and encode as many entries as needed.\n-            bytes: vec![0; len * <Option<T>>::BYTE_LEN],\n+            bytes: vec![],\n             _marker: PhantomData,\n         }\n     }\n+}\n \n+impl<T> Table<T> where Option<T>: FixedSizeEncoding {\n     crate fn set(&mut self, i: usize, value: T) {\n+        let needed = (i + 1) * <Option<T>>::BYTE_LEN;\n+        if self.bytes.len() < needed {\n+            self.bytes.resize(needed, 0);\n+        }\n         Some(value).write_to_bytes_at(&mut self.bytes, i);\n     }\n \n@@ -167,7 +171,7 @@ impl<T> Lazy<Table<T>> where Option<T>: FixedSizeEncoding {\n         debug!(\"Table::lookup: index={:?} len={:?}\", i, self.meta);\n \n         let bytes = &metadata.raw_bytes()[self.position.get()..][..self.meta];\n-        <Option<T>>::read_from_bytes_at(bytes, i)\n+        <Option<T>>::maybe_read_from_bytes_at(bytes, i)?\n     }\n }\n \n@@ -176,11 +180,13 @@ impl<T> Lazy<Table<T>> where Option<T>: FixedSizeEncoding {\n // and by using `newtype_index!` to define `DefIndex`.\n crate struct PerDefTable<T>(Table<T>) where Option<T>: FixedSizeEncoding;\n \n-impl<T> PerDefTable<T> where Option<T>: FixedSizeEncoding {\n-    crate fn new(def_index_count: usize) -> Self {\n-        PerDefTable(Table::new(def_index_count))\n+impl<T> Default for PerDefTable<T> where Option<T>: FixedSizeEncoding {\n+    fn default() -> Self {\n+        PerDefTable(Table::default())\n     }\n+}\n \n+impl<T> PerDefTable<T> where Option<T>: FixedSizeEncoding {\n     crate fn set(&mut self, def_id: DefId, value: T) {\n         assert!(def_id.is_local());\n         self.0.set(def_id.index.index(), value);"}]}