{"sha": "546da15972312f62be8a64a409d39a8d96ed53a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NmRhMTU5NzIzMTJmNjJiZThhNjRhNDA5ZDM5YThkOTZlZDUzYTY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-09T11:36:22Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-09T11:36:22Z"}, "message": "Rename `Attr`s `index` field to `id`", "tree": {"sha": "9c41d31b7396d9137f3436ba6084bee293ee0a69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c41d31b7396d9137f3436ba6084bee293ee0a69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/546da15972312f62be8a64a409d39a8d96ed53a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/546da15972312f62be8a64a409d39a8d96ed53a6", "html_url": "https://github.com/rust-lang/rust/commit/546da15972312f62be8a64a409d39a8d96ed53a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/546da15972312f62be8a64a409d39a8d96ed53a6/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fcdd1bcdf8a93769f74b7b4ca5ba043ad316e46", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fcdd1bcdf8a93769f74b7b4ca5ba043ad316e46", "html_url": "https://github.com/rust-lang/rust/commit/3fcdd1bcdf8a93769f74b7b4ca5ba043ad316e46"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "dd99c8d15a890fa2bbae41d8a70313ab9167e3c1", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/546da15972312f62be8a64a409d39a8d96ed53a6/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546da15972312f62be8a64a409d39a8d96ed53a6/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=546da15972312f62be8a64a409d39a8d96ed53a6", "patch": "@@ -103,7 +103,7 @@ impl RawAttrs {\n                 match attr {\n                     Either::Left(attr) => Attr::from_src(attr, hygiene, index),\n                     Either::Right(comment) => comment.doc_comment().map(|doc| Attr {\n-                        index,\n+                        id: index,\n                         input: Some(AttrInput::Literal(SmolStr::new(doc))),\n                         path: Interned::new(ModPath::from(hir_expand::name!(doc))),\n                     }),\n@@ -164,7 +164,7 @@ impl RawAttrs {\n                 let cfg = parts.next().unwrap();\n                 let cfg = Subtree { delimiter: subtree.delimiter, token_trees: cfg.to_vec() };\n                 let cfg = CfgExpr::parse(&cfg);\n-                let index = attr.index;\n+                let index = attr.id;\n                 let attrs = parts.filter(|a| !a.is_empty()).filter_map(|attr| {\n                     let tree = Subtree { delimiter: None, token_trees: attr.to_vec() };\n                     let attr = ast::Attr::parse(&format!(\"#[{}]\", tree)).ok()?;\n@@ -471,7 +471,7 @@ impl AttrsWithOwner {\n     ) -> Option<(Documentation, DocsRangeMap)> {\n         // FIXME: code duplication in `docs` above\n         let docs = self.by_key(\"doc\").attrs().flat_map(|attr| match attr.input.as_ref()? {\n-            AttrInput::Literal(s) => Some((s, attr.index)),\n+            AttrInput::Literal(s) => Some((s, attr.id)),\n             AttrInput::TokenTree(_) => None,\n         });\n         let indent = docs\n@@ -563,8 +563,8 @@ impl AttrSourceMap {\n     /// the attribute represented by `Attr`.\n     pub fn source_of(&self, attr: &Attr) -> InFile<&Either<ast::Attr, ast::Comment>> {\n         self.attrs\n-            .get(attr.index.0 as usize)\n-            .unwrap_or_else(|| panic!(\"cannot find `Attr` at index {:?}\", attr.index))\n+            .get(attr.id.0 as usize)\n+            .unwrap_or_else(|| panic!(\"cannot find `Attr` at index {:?}\", attr.id))\n             .as_ref()\n     }\n }\n@@ -609,7 +609,7 @@ impl DocsRangeMap {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Attr {\n-    pub(crate) index: AttrId,\n+    pub(crate) id: AttrId,\n     pub(crate) path: Interned<ModPath>,\n     pub(crate) input: Option<AttrInput>,\n }\n@@ -623,7 +623,7 @@ pub enum AttrInput {\n }\n \n impl Attr {\n-    fn from_src(ast: ast::Attr, hygiene: &Hygiene, index: AttrId) -> Option<Attr> {\n+    fn from_src(ast: ast::Attr, hygiene: &Hygiene, id: AttrId) -> Option<Attr> {\n         let path = Interned::new(ModPath::from_src(ast.path()?, hygiene)?);\n         let input = if let Some(ast::Expr::Literal(lit)) = ast.expr() {\n             let value = match lit.kind() {\n@@ -636,7 +636,7 @@ impl Attr {\n         } else {\n             None\n         };\n-        Some(Attr { index, path, input })\n+        Some(Attr { id, path, input })\n     }\n \n     /// Parses this attribute as a `#[derive]`, returns an iterator that yields all contained paths"}]}