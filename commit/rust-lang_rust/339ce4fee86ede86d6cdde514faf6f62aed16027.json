{"sha": "339ce4fee86ede86d6cdde514faf6f62aed16027", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOWNlNGZlZTg2ZWRlODZkNmNkZGU1MTRmYWY2ZjYyYWVkMTYwMjc=", "commit": {"author": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-06-17T18:39:13Z"}, "committer": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-07-13T04:43:42Z"}, "message": "add Stdin::lines, Stdin::split forwarder methods\n\nAdd forwarder methods `Stdin::lines` and `Stdin::split`, which consume\nand lock a `Stdin` handle, and forward on to the corresponding `BufRead`\nmethods. This should make it easier for beginners to use those iterator\nconstructors without explicitly dealing with locks or lifetimes.", "tree": {"sha": "0bab7eb7884a5b712acf962e25e8958eb3f9fa52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bab7eb7884a5b712acf962e25e8958eb3f9fa52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/339ce4fee86ede86d6cdde514faf6f62aed16027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/339ce4fee86ede86d6cdde514faf6f62aed16027", "html_url": "https://github.com/rust-lang/rust/commit/339ce4fee86ede86d6cdde514faf6f62aed16027", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/339ce4fee86ede86d6cdde514faf6f62aed16027/comments", "author": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c0c3e55d311dd47aad792ef316bd5dde778886", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c0c3e55d311dd47aad792ef316bd5dde778886", "html_url": "https://github.com/rust-lang/rust/commit/14c0c3e55d311dd47aad792ef316bd5dde778886"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "65ad7d88e22d5dbe5066c232e5043c5d65828cae", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/339ce4fee86ede86d6cdde514faf6f62aed16027/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339ce4fee86ede86d6cdde514faf6f62aed16027/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=339ce4fee86ede86d6cdde514faf6f62aed16027", "patch": "@@ -7,7 +7,7 @@ use crate::io::prelude::*;\n \n use crate::cell::{Cell, RefCell};\n use crate::fmt;\n-use crate::io::{self, BufReader, Initializer, IoSlice, IoSliceMut, LineWriter};\n+use crate::io::{self, BufReader, Initializer, IoSlice, IoSliceMut, LineWriter, Lines, Split};\n use crate::lazy::SyncOnceCell;\n use crate::pin::Pin;\n use crate::sync::atomic::{AtomicBool, Ordering};\n@@ -446,6 +446,49 @@ impl Stdin {\n     pub fn into_locked(self) -> StdinLock<'static> {\n         self.lock_any()\n     }\n+\n+    /// Consumes this handle and returns an iterator over input lines.\n+    ///\n+    /// For detailed semantics of this method, see the documentation on\n+    /// [`BufRead::lines`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(stdin_forwarders)]\n+    /// use std::io;\n+    ///\n+    /// let lines = io::stdin().lines();\n+    /// for line in lines {\n+    ///     println!(\"got a line: {}\", line.unwrap());\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"stdin_forwarders\", issue = \"87096\")]\n+    pub fn lines(self) -> Lines<StdinLock<'static>> {\n+        self.into_locked().lines()\n+    }\n+\n+    /// Consumes this handle and returns an iterator over input bytes,\n+    /// split at the specified byte value.\n+    ///\n+    /// For detailed semantics of this method, see the documentation on\n+    /// [`BufRead::split`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(stdin_forwarders)]\n+    /// use std::io;\n+    ///\n+    /// let splits = io::stdin().split(b'-');\n+    /// for split in splits {\n+    ///     println!(\"got a chunk: {}\", String::from_utf8_lossy(&split.unwrap()));\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"stdin_forwarders\", issue = \"87096\")]\n+    pub fn split(self, byte: u8) -> Split<StdinLock<'static>> {\n+        self.into_locked().split(byte)\n+    }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]"}]}