{"sha": "c5ed72fbfe8aae9ebc4c73dce3f1ef11388913d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZWQ3MmZiZmU4YWFlOWViYzRjNzNkY2UzZjFlZjExMzg4OTEzZDk=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-10-25T14:01:10Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-03T10:41:55Z"}, "message": "Substitute binders directly", "tree": {"sha": "2a72923317663f5811d4bb21d9f742d0e82b7579", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a72923317663f5811d4bb21d9f742d0e82b7579"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5ed72fbfe8aae9ebc4c73dce3f1ef11388913d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5ed72fbfe8aae9ebc4c73dce3f1ef11388913d9", "html_url": "https://github.com/rust-lang/rust/commit/c5ed72fbfe8aae9ebc4c73dce3f1ef11388913d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5ed72fbfe8aae9ebc4c73dce3f1ef11388913d9/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07519975308af252a2fea6b89c3ad59374e29f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/07519975308af252a2fea6b89c3ad59374e29f39", "html_url": "https://github.com/rust-lang/rust/commit/07519975308af252a2fea6b89c3ad59374e29f39"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "f4607f7a9092f4ee01bd6a31b534bc06a88a1d84", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c5ed72fbfe8aae9ebc4c73dce3f1ef11388913d9/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ed72fbfe8aae9ebc4c73dce3f1ef11388913d9/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=c5ed72fbfe8aae9ebc4c73dce3f1ef11388913d9", "patch": "@@ -308,12 +308,14 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         // ...also include the other query region constraints from the query.\n         output_query_region_constraints.extend(\n             query_response.value.region_constraints.iter().filter_map(|r_c| {\n-                let ty::OutlivesPredicate(k1, r2) = r_c.skip_binder(); // reconstructed below\n-                let k1 = substitute_value(self.tcx, &result_subst, &ty::Binder::bind(*k1));\n-                let r2 = substitute_value(self.tcx, &result_subst, &ty::Binder::bind(*r2));\n-                if k1 != r2.map_bound(|bound| bound.into()) {\n-                    let predicate = ty::OutlivesPredicate(*k1.skip_binder(), *r2.skip_binder());\n-                    Some(ty::Binder::bind(predicate))\n+                let r_c = substitute_value(self.tcx, &result_subst, r_c);\n+\n+                // Screen out `'a: 'a` cases -- we skip the binder here but\n+                // only care the inner values to one another, so they are still at\n+                // consistent binding levels.\n+                let &ty::OutlivesPredicate(k1, r2) = r_c.skip_binder();\n+                if k1 != r2.into() {\n+                    Some(r_c)\n                 } else {\n                     None\n                 }\n@@ -530,22 +532,21 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             unsubstituted_region_constraints\n                 .iter()\n                 .map(move |constraint| {\n-                    let ty::OutlivesPredicate(k1, r2) = constraint.skip_binder(); // restored below\n-                    let k1 = substitute_value(self.tcx, result_subst, &ty::Binder::bind(*k1));\n-                    let r2 = substitute_value(self.tcx, result_subst, &ty::Binder::bind(*r2));\n+                    let constraint = substitute_value(self.tcx, result_subst, constraint);\n+                    let &ty::OutlivesPredicate(k1, r2) = constraint.skip_binder(); // restored below\n \n                     Obligation::new(\n                         cause.clone(),\n                         param_env,\n-                        match k1.skip_binder().unpack() {\n+                        match k1.unpack() {\n                             UnpackedKind::Lifetime(r1) => ty::Predicate::RegionOutlives(\n                                 ty::Binder::bind(\n-                                    ty::OutlivesPredicate(r1, r2.skip_binder())\n+                                    ty::OutlivesPredicate(r1, r2)\n                                 )\n                             ),\n                             UnpackedKind::Type(t1) => ty::Predicate::TypeOutlives(\n                                 ty::Binder::bind(\n-                                    ty::OutlivesPredicate(t1, r2.skip_binder())\n+                                    ty::OutlivesPredicate(t1, r2)\n                                 )\n                             ),\n                         }"}]}