{"sha": "077c23e9879f4d0c7dab984cd518b21aa5e7347f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3N2MyM2U5ODc5ZjRkMGM3ZGFiOTg0Y2Q1MThiMjFhYTVlNzM0N2Y=", "commit": {"author": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2017-05-31T12:27:02Z"}, "committer": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2017-06-02T10:29:58Z"}, "message": "Improve reallocation in alloc_system on Windows", "tree": {"sha": "e9d30e9238c0d330dbd93f9da41713ef2370c093", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9d30e9238c0d330dbd93f9da41713ef2370c093"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/077c23e9879f4d0c7dab984cd518b21aa5e7347f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJZMT4rAAoJEN4E2eJ1WbyKgboIAKvqfesmuq75ITkfi3lghflq\nrNbp3WlE4xq1YsCt7KA7V+OygewO3r5Pf5J28vIOd8zlagoZBnDEA7wVeVCW0Duw\nA4gueB6P4EPegC5nFyymoxPJRCs6LfVnvjs6OvQJkjt7LUQdF2CZALmZmO7MEkce\nxdhmXm3COjP+kNScrMxSjcRdB2oIyPdEJepXGeZPKxmguvm9OdYN3AAM7FxIoHcZ\nwst7UMKqFEhrOv9i0tr4l9SCjCpZyCmLVJpXVapP6W7L28WPBwMw7psMR8R0DxrX\nB8NP/FwXe87PEH/YQQhWXWC/qoLttGlgUMGEdpK+3FY71HGUWlPqoAeBoAcl5qM=\n=h0E9\n-----END PGP SIGNATURE-----", "payload": "tree e9d30e9238c0d330dbd93f9da41713ef2370c093\nparent 558cd1e393188a07bda413931aa88e82996d31c2\nauthor Peter Atashian <retep998@gmail.com> 1496233622 -0400\ncommitter Peter Atashian <retep998@gmail.com> 1496399398 -0400\n\nImprove reallocation in alloc_system on Windows\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/077c23e9879f4d0c7dab984cd518b21aa5e7347f", "html_url": "https://github.com/rust-lang/rust/commit/077c23e9879f4d0c7dab984cd518b21aa5e7347f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/077c23e9879f4d0c7dab984cd518b21aa5e7347f/comments", "author": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "committer": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "558cd1e393188a07bda413931aa88e82996d31c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/558cd1e393188a07bda413931aa88e82996d31c2", "html_url": "https://github.com/rust-lang/rust/commit/558cd1e393188a07bda413931aa88e82996d31c2"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "1f36bc4fbcea73043049bdfb013378c22b3041b6", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/077c23e9879f4d0c7dab984cd518b21aa5e7347f/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077c23e9879f4d0c7dab984cd518b21aa5e7347f/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=077c23e9879f4d0c7dab984cd518b21aa5e7347f", "patch": "@@ -171,6 +171,8 @@ mod imp {\n #[cfg(windows)]\n #[allow(bad_style)]\n mod imp {\n+    use core::cmp::min;\n+    use core::ptr::copy_nonoverlapping;\n     use MIN_ALIGN;\n \n     type LPVOID = *mut u8;\n@@ -225,19 +227,16 @@ mod imp {\n         allocate_with_flags(size, align, HEAP_ZERO_MEMORY)\n     }\n \n-    pub unsafe fn reallocate(ptr: *mut u8, _old_size: usize, size: usize, align: usize) -> *mut u8 {\n+    pub unsafe fn reallocate(ptr: *mut u8, old_size: usize, size: usize, align: usize) -> *mut u8 {\n         if align <= MIN_ALIGN {\n             HeapReAlloc(GetProcessHeap(), 0, ptr as LPVOID, size as SIZE_T) as *mut u8\n         } else {\n-            let header = get_header(ptr);\n-            let new = HeapReAlloc(GetProcessHeap(),\n-                                  0,\n-                                  header.0 as LPVOID,\n-                                  (size + align) as SIZE_T) as *mut u8;\n-            if new.is_null() {\n-                return new;\n+            let new = allocate(size, align);\n+            if !new.is_null() {\n+                copy_nonoverlapping(ptr, new, min(size, old_size));\n+                deallocate(ptr, old_size, align);\n             }\n-            align_ptr(new, align)\n+            new\n         }\n     }\n \n@@ -246,15 +245,19 @@ mod imp {\n                                      size: usize,\n                                      align: usize)\n                                      -> usize {\n-        if align <= MIN_ALIGN {\n-            let new = HeapReAlloc(GetProcessHeap(),\n-                                  HEAP_REALLOC_IN_PLACE_ONLY,\n-                                  ptr as LPVOID,\n-                                  size as SIZE_T) as *mut u8;\n-            if new.is_null() { old_size } else { size }\n+        let new = if align <= MIN_ALIGN {\n+            HeapReAlloc(GetProcessHeap(),\n+                        HEAP_REALLOC_IN_PLACE_ONLY,\n+                        ptr as LPVOID,\n+                        size as SIZE_T) as *mut u8\n         } else {\n-            old_size\n-        }\n+            let header = get_header(ptr);\n+            HeapReAlloc(GetProcessHeap(),\n+                        HEAP_REALLOC_IN_PLACE_ONLY,\n+                        header.0 as LPVOID,\n+                        size + align as SIZE_T) as *mut u8\n+        };\n+        if new.is_null() { old_size } else { size }\n     }\n \n     pub unsafe fn deallocate(ptr: *mut u8, _old_size: usize, align: usize) {"}]}