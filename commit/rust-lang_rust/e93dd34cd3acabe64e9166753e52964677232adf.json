{"sha": "e93dd34cd3acabe64e9166753e52964677232adf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5M2RkMzRjZDNhY2FiZTY0ZTkxNjY3NTNlNTI5NjQ2NzcyMzJhZGY=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-17T19:12:01Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-18T00:18:53Z"}, "message": "Fix warnings in libextra tests\n\nMost of these are \"unneccesary allocation\" in bitv, for ~[false, ..] instead\nof [false, ..].", "tree": {"sha": "3570b6853520b6638451cecbbd5bad2ee4230cd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3570b6853520b6638451cecbbd5bad2ee4230cd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e93dd34cd3acabe64e9166753e52964677232adf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e93dd34cd3acabe64e9166753e52964677232adf", "html_url": "https://github.com/rust-lang/rust/commit/e93dd34cd3acabe64e9166753e52964677232adf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e93dd34cd3acabe64e9166753e52964677232adf/comments", "author": null, "committer": null, "parents": [{"sha": "3d13d4b58d5d871312537fabd736811c13ebcf4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d13d4b58d5d871312537fabd736811c13ebcf4d", "html_url": "https://github.com/rust-lang/rust/commit/3d13d4b58d5d871312537fabd736811c13ebcf4d"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "33a50f4e9ab1405e5b2a19f380e05d5a38cba524", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e93dd34cd3acabe64e9166753e52964677232adf/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e93dd34cd3acabe64e9166753e52964677232adf/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=e93dd34cd3acabe64e9166753e52964677232adf", "patch": "@@ -893,9 +893,9 @@ mod tests {\n     #[test]\n     fn test_1_element() {\n         let mut act = Bitv::new(1u, false);\n-        assert!(act.eq_vec(~[false]));\n+        assert!(act.eq_vec([false]));\n         act = Bitv::new(1u, true);\n-        assert!(act.eq_vec(~[true]));\n+        assert!(act.eq_vec([true]));\n     }\n \n     #[test]\n@@ -913,11 +913,11 @@ mod tests {\n \n         act = Bitv::new(10u, false);\n         assert!((act.eq_vec(\n-                    ~[false, false, false, false, false, false, false, false, false, false])));\n+                    [false, false, false, false, false, false, false, false, false, false])));\n         // all 1\n \n         act = Bitv::new(10u, true);\n-        assert!((act.eq_vec(~[true, true, true, true, true, true, true, true, true, true])));\n+        assert!((act.eq_vec([true, true, true, true, true, true, true, true, true, true])));\n         // mixed\n \n         act = Bitv::new(10u, false);\n@@ -926,7 +926,7 @@ mod tests {\n         act.set(2u, true);\n         act.set(3u, true);\n         act.set(4u, true);\n-        assert!((act.eq_vec(~[true, true, true, true, true, false, false, false, false, false])));\n+        assert!((act.eq_vec([true, true, true, true, true, false, false, false, false, false])));\n         // mixed\n \n         act = Bitv::new(10u, false);\n@@ -935,15 +935,15 @@ mod tests {\n         act.set(7u, true);\n         act.set(8u, true);\n         act.set(9u, true);\n-        assert!((act.eq_vec(~[false, false, false, false, false, true, true, true, true, true])));\n+        assert!((act.eq_vec([false, false, false, false, false, true, true, true, true, true])));\n         // mixed\n \n         act = Bitv::new(10u, false);\n         act.set(0u, true);\n         act.set(3u, true);\n         act.set(6u, true);\n         act.set(9u, true);\n-        assert!((act.eq_vec(~[true, false, false, true, false, false, true, false, false, true])));\n+        assert!((act.eq_vec([true, false, false, true, false, false, true, false, false, true])));\n     }\n \n     #[test]\n@@ -953,14 +953,14 @@ mod tests {\n \n         act = Bitv::new(31u, false);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false]));\n         // all 1\n \n         act = Bitv::new(31u, true);\n         assert!(act.eq_vec(\n-                ~[true, true, true, true, true, true, true, true, true, true, true, true, true,\n+                [true, true, true, true, true, true, true, true, true, true, true, true, true,\n                 true, true, true, true, true, true, true, true, true, true, true, true, true, true,\n                 true, true, true, true]));\n         // mixed\n@@ -975,7 +975,7 @@ mod tests {\n         act.set(6u, true);\n         act.set(7u, true);\n         assert!(act.eq_vec(\n-                ~[true, true, true, true, true, true, true, true, false, false, false, false, false,\n+                [true, true, true, true, true, true, true, true, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false]));\n         // mixed\n@@ -990,7 +990,7 @@ mod tests {\n         act.set(22u, true);\n         act.set(23u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, true, true, true, true, true, true, true, true,\n                 false, false, false, false, false, false, false]));\n         // mixed\n@@ -1004,7 +1004,7 @@ mod tests {\n         act.set(29u, true);\n         act.set(30u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, true, true, true, true, true, true, true]));\n         // mixed\n@@ -1014,7 +1014,7 @@ mod tests {\n         act.set(17u, true);\n         act.set(30u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, true, false, false, false, false, false, false, false, false,\n+                [false, false, false, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, true, false, false, false, false, false, false,\n                 false, false, false, false, false, false, true]));\n     }\n@@ -1026,14 +1026,14 @@ mod tests {\n \n         act = Bitv::new(32u, false);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false]));\n         // all 1\n \n         act = Bitv::new(32u, true);\n         assert!(act.eq_vec(\n-                ~[true, true, true, true, true, true, true, true, true, true, true, true, true,\n+                [true, true, true, true, true, true, true, true, true, true, true, true, true,\n                 true, true, true, true, true, true, true, true, true, true, true, true, true, true,\n                 true, true, true, true, true]));\n         // mixed\n@@ -1048,7 +1048,7 @@ mod tests {\n         act.set(6u, true);\n         act.set(7u, true);\n         assert!(act.eq_vec(\n-                ~[true, true, true, true, true, true, true, true, false, false, false, false, false,\n+                [true, true, true, true, true, true, true, true, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false]));\n         // mixed\n@@ -1063,7 +1063,7 @@ mod tests {\n         act.set(22u, true);\n         act.set(23u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, true, true, true, true, true, true, true, true,\n                 false, false, false, false, false, false, false, false]));\n         // mixed\n@@ -1078,7 +1078,7 @@ mod tests {\n         act.set(30u, true);\n         act.set(31u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, true, true, true, true, true, true, true, true]));\n         // mixed\n@@ -1089,7 +1089,7 @@ mod tests {\n         act.set(30u, true);\n         act.set(31u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, true, false, false, false, false, false, false, false, false,\n+                [false, false, false, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, true, false, false, false, false, false, false,\n                 false, false, false, false, false, false, true, true]));\n     }\n@@ -1101,14 +1101,14 @@ mod tests {\n \n         act = Bitv::new(33u, false);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false]));\n         // all 1\n \n         act = Bitv::new(33u, true);\n         assert!(act.eq_vec(\n-                ~[true, true, true, true, true, true, true, true, true, true, true, true, true,\n+                [true, true, true, true, true, true, true, true, true, true, true, true, true,\n                 true, true, true, true, true, true, true, true, true, true, true, true, true, true,\n                 true, true, true, true, true, true]));\n         // mixed\n@@ -1123,7 +1123,7 @@ mod tests {\n         act.set(6u, true);\n         act.set(7u, true);\n         assert!(act.eq_vec(\n-                ~[true, true, true, true, true, true, true, true, false, false, false, false, false,\n+                [true, true, true, true, true, true, true, true, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false]));\n         // mixed\n@@ -1138,7 +1138,7 @@ mod tests {\n         act.set(22u, true);\n         act.set(23u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, true, true, true, true, true, true, true, true,\n                 false, false, false, false, false, false, false, false, false]));\n         // mixed\n@@ -1153,7 +1153,7 @@ mod tests {\n         act.set(30u, true);\n         act.set(31u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, true, true, true, true, true, true, true, true, false]));\n         // mixed\n@@ -1165,7 +1165,7 @@ mod tests {\n         act.set(31u, true);\n         act.set(32u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, true, false, false, false, false, false, false, false, false,\n+                [false, false, false, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, true, false, false, false, false, false, false,\n                 false, false, false, false, false, false, true, true, true]));\n     }"}, {"sha": "56a906e0a5d3e2f0f67d00bd869df72afc8e697b", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e93dd34cd3acabe64e9166753e52964677232adf/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e93dd34cd3acabe64e9166753e52964677232adf/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=e93dd34cd3acabe64e9166753e52964677232adf", "patch": "@@ -792,7 +792,6 @@ mod test_qsort {\n \n     use sort::*;\n \n-    use std::int;\n     use std::vec;\n \n     fn check_sort(v1: &mut [int], v2: &mut [int]) {"}]}