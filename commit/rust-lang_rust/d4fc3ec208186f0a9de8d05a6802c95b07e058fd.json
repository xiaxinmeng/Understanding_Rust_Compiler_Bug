{"sha": "d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZmMzZWMyMDgxODZmMGE5ZGU4ZDA1YTY4MDJjOTViMDdlMDU4ZmQ=", "commit": {"author": {"name": "Diggory Blake", "email": "diggsey@googlemail.com", "date": "2015-08-26T00:44:55Z"}, "committer": {"name": "Diggory Blake", "email": "diggsey@googlemail.com", "date": "2015-09-04T00:25:15Z"}, "message": "Add line numbers to windows-gnu backtraces\nFix formatting\nRemove unused imports\nRefactor\nFix msvc build\nFix line lengths\nFormatting\nEnable backtrace tests\nFix using directive on mac\npwd info\nWork-around buildbot PWD bug, and fix libbacktrace configuration\nUse alternative to `env -u` which is not supported on bitrig\nDisable tests on 32-bit windows gnu", "tree": {"sha": "6a5f95c3d8cfb20e65f08b3d67036a966308fffe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a5f95c3d8cfb20e65f08b3d67036a966308fffe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "html_url": "https://github.com/rust-lang/rust/commit/d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/comments", "author": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac12c7f1ed7de4fb564ae637f55199eb553e5126", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac12c7f1ed7de4fb564ae637f55199eb553e5126", "html_url": "https://github.com/rust-lang/rust/commit/ac12c7f1ed7de4fb564ae637f55199eb553e5126"}], "stats": {"total": 287, "additions": 192, "deletions": 95}, "files": [{"sha": "1f60aaed4730b979c82ee199e0e1707bb86d978d", "filename": "mk/rt.mk", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "patch": "@@ -259,8 +259,10 @@ BACKTRACE_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),backtrace)\n BACKTRACE_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(BACKTRACE_NAME_$(1))\n BACKTRACE_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/libbacktrace\n \n-# We don't use this on platforms that aren't linux-based, so just make the file\n-# available, the compilation of libstd won't actually build it.\n+# We don't use this on platforms that aren't linux-based (with the exception of\n+# msys2/mingw builds on windows, which use it to read the dwarf debug\n+# information) so just make the file available, the compilation of libstd won't\n+# actually build it.\n ifeq ($$(findstring darwin,$$(OSTYPE_$(1))),darwin)\n # See comment above\n $$(BACKTRACE_LIB_$(1)):\n@@ -273,7 +275,7 @@ $$(BACKTRACE_LIB_$(1)):\n \ttouch $$@\n else\n \n-ifeq ($$(CFG_WINDOWSY_$(1)),1)\n+ifeq ($$(findstring msvc,$(1)),msvc)\n # See comment above\n $$(BACKTRACE_LIB_$(1)):\n \ttouch $$@\n@@ -296,16 +298,25 @@ endif\n # ./configure script. This is done to force libbacktrace to *not* use the\n # atomic/sync functionality because it pulls in unnecessary dependencies and we\n # never use it anyway.\n+#\n+# We also use `env PWD=` to clear the PWD environment variable, and then\n+# execute the command in a new shell. This is necessary to workaround a\n+# buildbot/msys2 bug: the shell is launched with PWD set to a windows-style path,\n+# which results in all further uses of `pwd` also printing a windows-style path,\n+# which breaks libbacktrace's configure script. Clearing PWD within the same\n+# shell is not sufficient.\n+\n $$(BACKTRACE_BUILD_DIR_$(1))/Makefile: $$(BACKTRACE_DEPS) $$(MKFILE_DEPS)\n \t@$$(call E, configure: libbacktrace for $(1))\n \t$$(Q)rm -rf $$(BACKTRACE_BUILD_DIR_$(1))\n \t$$(Q)mkdir -p $$(BACKTRACE_BUILD_DIR_$(1))\n-\t$$(Q)(cd $$(BACKTRACE_BUILD_DIR_$(1)) && \\\n+\t$$(Q)(cd $$(BACKTRACE_BUILD_DIR_$(1)) && env \\\n+\t      PWD= \\\n \t      CC=\"$$(CC_$(1))\" \\\n \t      AR=\"$$(AR_$(1))\" \\\n \t      RANLIB=\"$$(AR_$(1)) s\" \\\n \t      CFLAGS=\"$$(CFG_GCCISH_CFLAGS_$(1):-Werror=) -fno-stack-protector\" \\\n-\t      $(S)src/libbacktrace/configure --target=$(1) --host=$(CFG_BUILD))\n+\t      $(S)src/libbacktrace/configure --build=$(CFG_GNU_TRIPLE_$(CFG_BUILD)) --host=$(CFG_GNU_TRIPLE_$(1)))\n \t$$(Q)echo '#undef HAVE_ATOMIC_FUNCTIONS' >> \\\n \t      $$(BACKTRACE_BUILD_DIR_$(1))/config.h\n \t$$(Q)echo '#undef HAVE_SYNC_FUNCTIONS' >> \\\n@@ -317,7 +328,7 @@ $$(BACKTRACE_LIB_$(1)): $$(BACKTRACE_BUILD_DIR_$(1))/Makefile $$(MKFILE_DEPS)\n \t\tINCDIR=$(S)src/libbacktrace\n \t$$(Q)cp $$(BACKTRACE_BUILD_DIR_$(1))/.libs/libbacktrace.a $$@\n \n-endif # endif for windowsy\n+endif # endif for msvc\n endif # endif for ios\n endif # endif for darwin\n "}, {"sha": "d9e8075845f836b93e3d894d614ffa236ebcf38f", "filename": "src/libbacktrace/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibbacktrace%2Fconfigure", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibbacktrace%2Fconfigure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fconfigure?ref=d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "patch": "@@ -3974,7 +3974,7 @@ am_lf='\n '\n case `pwd` in\n   *[\\\\\\\"\\#\\$\\&\\'\\`$am_lf]*)\n-    as_fn_error \"unsafe absolute working directory name\" \"$LINENO\" 5;;\n+    as_fn_error \"unsafe absolute working directory name: \\``pwd`'\" \"$LINENO\" 5;;\n esac\n case $srcdir in\n   *[\\\\\\\"\\#\\$\\&\\'\\`$am_lf\\ \\\t]*)"}, {"sha": "7845714e7f6471acf03b35058faa4e7d698acfb8", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "patch": "@@ -8,16 +8,42 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use io::prelude::*;\n-\n use io;\n+use io::prelude::*;\n+use str;\n+use libc;\n \n #[cfg(target_pointer_width = \"64\")]\n pub const HEX_WIDTH: usize = 18;\n \n #[cfg(target_pointer_width = \"32\")]\n pub const HEX_WIDTH: usize = 10;\n \n+\n+// These output functions should now be used everywhere to ensure consistency.\n+pub fn output(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n+              s: Option<&[u8]>) -> io::Result<()> {\n+    try!(write!(w, \"  {:2}: {:2$?} - \", idx, addr, HEX_WIDTH));\n+    match s.and_then(|s| str::from_utf8(s).ok()) {\n+        Some(string) => try!(demangle(w, string)),\n+        None => try!(write!(w, \"<unknown>\")),\n+    }\n+    w.write_all(&['\\n' as u8])\n+}\n+\n+#[allow(dead_code)]\n+pub fn output_fileline(w: &mut Write, file: &[u8], line: libc::c_int,\n+                       more: bool) -> io::Result<()> {\n+    let file = str::from_utf8(file).unwrap_or(\"<unknown>\");\n+    // prior line: \"  ##: {:2$} - func\"\n+    try!(write!(w, \"      {:3$}at {}:{}\", \"\", file, line, HEX_WIDTH));\n+    if more {\n+        try!(write!(w, \" <... and possibly more>\"));\n+    }\n+    w.write_all(&['\\n' as u8])\n+}\n+\n+\n // All rust symbols are in theory lists of \"::\"-separated identifiers. Some\n // assemblers, however, can't handle these characters in symbol names. To get\n // around this, we use C++-style mangling. The mangling method is:"}, {"sha": "7a2ca0a9f097d99249fc25bcadd929a3b32dc8a1", "filename": "src/libstd/sys/common/gnu/libbacktrace.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Fcommon%2Fgnu%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Fcommon%2Fgnu%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fgnu%2Flibbacktrace.rs?ref=d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "patch": "@@ -11,13 +11,12 @@\n use io;\n use io::prelude::*;\n use libc;\n+use sys_common::backtrace::{output, output_fileline};\n \n-use sys::backtrace::{output, output_fileline};\n pub fn print(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n              symaddr: *mut libc::c_void) -> io::Result<()> {\n     use env;\n     use ffi::CStr;\n-    use os::unix::prelude::*;\n     use ptr;\n \n     ////////////////////////////////////////////////////////////////////////\n@@ -129,14 +128,15 @@ pub fn print(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n         let selfname = if cfg!(target_os = \"freebsd\") ||\n             cfg!(target_os = \"dragonfly\") ||\n             cfg!(target_os = \"bitrig\") ||\n-            cfg!(target_os = \"openbsd\") {\n+            cfg!(target_os = \"openbsd\") ||\n+            cfg!(target_os = \"windows\") {\n                 env::current_exe().ok()\n             } else {\n                 None\n             };\n-        let filename = match selfname {\n+        let filename = match selfname.as_ref().and_then(|s| s.as_os_str().to_bytes()) {\n             Some(path) => {\n-                let bytes = path.as_os_str().as_bytes();\n+                let bytes = path;\n                 if bytes.len() < LAST_FILENAME.len() {\n                     let i = bytes.iter();\n                     for (slot, val) in LAST_FILENAME.iter_mut().zip(i) {", "previous_filename": "src/libstd/sys/unix/backtrace/printing/libbacktrace.rs"}, {"sha": "3a8cf2d84259173af8317ef21e96261c437cfec4", "filename": "src/libstd/sys/common/gnu/mod.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Fcommon%2Fgnu%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Fcommon%2Fgnu%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fgnu%2Fmod.rs?ref=d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(missing_docs)]\n+#![allow(non_camel_case_types)]\n+#![allow(non_snake_case)]\n+\n+pub mod libbacktrace;"}, {"sha": "b8074235fb2a5f041e8f1d39b89991a1428e7211", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "patch": "@@ -23,6 +23,10 @@ pub mod thread_info;\n pub mod thread_local;\n pub mod wtf8;\n \n+#[cfg(any(all(unix, not(any(target_os = \"macos\", target_os = \"ios\"))),\n+          all(windows, target_env = \"gnu\")))]\n+pub mod gnu;\n+\n // common error constructors\n \n /// A trait for viewing representations from std types"}, {"sha": "d7c05e513f68c2704d3f849c2ee97d08699c9acd", "filename": "src/libstd/sys/unix/backtrace/mod.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fmod.rs?ref=d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "patch": "@@ -85,36 +85,7 @@\n \n pub use self::tracing::write;\n \n-use io;\n-use io::prelude::*;\n-use libc;\n-use str;\n-\n-use sys_common::backtrace::{demangle, HEX_WIDTH};\n-\n // tracing impls:\n mod tracing;\n // symbol resolvers:\n mod printing;\n-\n-pub fn output(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n-              s: Option<&[u8]>) -> io::Result<()> {\n-    try!(write!(w, \"  {:2}: {:2$?} - \", idx, addr, HEX_WIDTH));\n-    match s.and_then(|s| str::from_utf8(s).ok()) {\n-        Some(string) => try!(demangle(w, string)),\n-        None => try!(write!(w, \"<unknown>\")),\n-    }\n-    w.write_all(&['\\n' as u8])\n-}\n-\n-#[allow(dead_code)]\n-pub fn output_fileline(w: &mut Write, file: &[u8], line: libc::c_int,\n-                       more: bool) -> io::Result<()> {\n-    let file = str::from_utf8(file).unwrap_or(\"<unknown>\");\n-    // prior line: \"  ##: {:2$} - func\"\n-    try!(write!(w, \"      {:3$}at {}:{}\", \"\", file, line, HEX_WIDTH));\n-    if more {\n-        try!(write!(w, \" <... and possibly more>\"));\n-    }\n-    w.write_all(&['\\n' as u8])\n-}"}, {"sha": "d9b759dc673948351b0e7b33b64d158879979b9e", "filename": "src/libstd/sys/unix/backtrace/printing/dladdr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fdladdr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fdladdr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fdladdr.rs?ref=d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "patch": "@@ -14,7 +14,7 @@ use libc;\n \n pub fn print(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n              _symaddr: *mut libc::c_void) -> io::Result<()> {\n-    use sys::backtrace::{output};\n+    use sys_common::backtrace::{output};\n     use intrinsics;\n     use ffi::CStr;\n "}, {"sha": "fb06fbedaf57b3f2537da0a180c878d5273f46d4", "filename": "src/libstd/sys/unix/backtrace/printing/gnu.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fgnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fgnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fgnu.rs?ref=d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub use sys_common::gnu::libbacktrace::print;"}, {"sha": "e09832c231e7a176b5b24df04609c68bdb683ff1", "filename": "src/libstd/sys/unix/backtrace/printing/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fmod.rs?ref=d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::imp::*;\n+pub use self::imp::print;\n \n #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n #[path = \"dladdr.rs\"]\n mod imp;\n \n #[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n-#[path = \"libbacktrace.rs\"]\n+#[path = \"gnu.rs\"]\n mod imp;"}, {"sha": "35e3c1d4663e01ff5f339f5d4d2654565169470f", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 25, "deletions": 38, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "patch": "@@ -27,17 +27,28 @@\n use io::prelude::*;\n \n use dynamic_lib::DynamicLibrary;\n-use ffi::CStr;\n use intrinsics;\n use io;\n use libc;\n-use mem;\n use path::Path;\n use ptr;\n-use str;\n use sync::StaticMutex;\n \n-use sys_common::backtrace::*;\n+macro_rules! sym{ ($lib:expr, $e:expr, $t:ident) => (unsafe {\n+    let lib = $lib;\n+    match lib.symbol($e) {\n+        Ok(f) => $crate::mem::transmute::<*mut u8, $t>(f),\n+        Err(..) => return Ok(())\n+    }\n+}) }\n+\n+#[cfg(target_env = \"msvc\")]\n+#[path = \"printing/msvc.rs\"]\n+mod printing;\n+\n+#[cfg(target_env = \"gnu\")]\n+#[path = \"printing/gnu.rs\"]\n+mod printing;\n \n #[allow(non_snake_case)]\n extern \"system\" {\n@@ -302,23 +313,15 @@ pub fn write(w: &mut Write) -> io::Result<()> {\n     // Open up dbghelp.dll, we don't link to it explicitly because it can't\n     // always be found. Additionally, it's nice having fewer dependencies.\n     let path = Path::new(\"dbghelp.dll\");\n-    let lib = match DynamicLibrary::open(Some(&path)) {\n+    let dbghelp = match DynamicLibrary::open(Some(&path)) {\n         Ok(lib) => lib,\n         Err(..) => return Ok(()),\n     };\n \n-    macro_rules! sym{ ($e:expr, $t:ident) => (unsafe {\n-        match lib.symbol($e) {\n-            Ok(f) => mem::transmute::<*mut u8, $t>(f),\n-            Err(..) => return Ok(())\n-        }\n-    }) }\n-\n     // Fetch the symbols necessary from dbghelp.dll\n-    let SymFromAddr = sym!(\"SymFromAddr\", SymFromAddrFn);\n-    let SymInitialize = sym!(\"SymInitialize\", SymInitializeFn);\n-    let SymCleanup = sym!(\"SymCleanup\", SymCleanupFn);\n-    let StackWalk64 = sym!(\"StackWalk64\", StackWalk64Fn);\n+    let SymInitialize = sym!(&dbghelp, \"SymInitialize\", SymInitializeFn);\n+    let SymCleanup = sym!(&dbghelp, \"SymCleanup\", SymCleanupFn);\n+    let StackWalk64 = sym!(&dbghelp, \"StackWalk64\", StackWalk64Fn);\n \n     // Allocate necessary structures for doing the stack walk\n     let process = unsafe { GetCurrentProcess() };\n@@ -334,7 +337,9 @@ pub fn write(w: &mut Write) -> io::Result<()> {\n     let _c = Cleanup { handle: process, SymCleanup: SymCleanup };\n \n     // And now that we're done with all the setup, do the stack walking!\n-    let mut i = 0;\n+    // Start from -1 to avoid printing this stack frame, which will\n+    // always be exactly the same.\n+    let mut i = -1;\n     try!(write!(w, \"stack backtrace:\\n\"));\n     while StackWalk64(image, process, thread, &mut frame, &mut context,\n                       ptr::null_mut(),\n@@ -346,28 +351,10 @@ pub fn write(w: &mut Write) -> io::Result<()> {\n            frame.AddrReturn.Offset == 0 { break }\n \n         i += 1;\n-        try!(write!(w, \"  {:2}: {:#2$x}\", i, addr, HEX_WIDTH));\n-        let mut info: SYMBOL_INFO = unsafe { intrinsics::init() };\n-        info.MaxNameLen = MAX_SYM_NAME as libc::c_ulong;\n-        // the struct size in C.  the value is different to\n-        // `size_of::<SYMBOL_INFO>() - MAX_SYM_NAME + 1` (== 81)\n-        // due to struct alignment.\n-        info.SizeOfStruct = 88;\n-\n-        let mut displacement = 0u64;\n-        let ret = SymFromAddr(process, addr as u64, &mut displacement,\n-                              &mut info);\n-\n-        if ret == libc::TRUE {\n-            try!(write!(w, \" - \"));\n-            let ptr = info.Name.as_ptr() as *const libc::c_char;\n-            let bytes = unsafe { CStr::from_ptr(ptr).to_bytes() };\n-            match str::from_utf8(bytes) {\n-                Ok(s) => try!(demangle(w, s)),\n-                Err(..) => try!(w.write_all(&bytes[..bytes.len()-1])),\n-            }\n+\n+        if i >= 0 {\n+            try!(printing::print(w, i, addr-1, &dbghelp, process));\n         }\n-        try!(w.write_all(&['\\n' as u8]));\n     }\n \n     Ok(())"}, {"sha": "8d3c93bb7b17605da002284176104d516c525b31", "filename": "src/libstd/sys/windows/printing/gnu.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Fwindows%2Fprinting%2Fgnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Fwindows%2Fprinting%2Fgnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprinting%2Fgnu.rs?ref=d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use dynamic_lib::DynamicLibrary;\n+use io;\n+use io::prelude::*;\n+use libc;\n+\n+use sys_common::gnu::libbacktrace;\n+\n+pub fn print(w: &mut Write, i: isize, addr: u64, _: &DynamicLibrary, _: libc::HANDLE)\n+        -> io::Result<()> {\n+    let addr = addr as usize as *mut libc::c_void;\n+    libbacktrace::print(w, i, addr, addr)\n+}"}, {"sha": "25cef04ca969b8f2d85b23a1fbf7d1a14c0f4540", "filename": "src/libstd/sys/windows/printing/msvc.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Fwindows%2Fprinting%2Fmsvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Flibstd%2Fsys%2Fwindows%2Fprinting%2Fmsvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprinting%2Fmsvc.rs?ref=d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use sys_common::backtrace::output;\n+use ffi::CStr;\n+use dynamic_lib::DynamicLibrary;\n+use super::{SymFromAddrFn, SYMBOL_INFO, MAX_SYM_NAME};\n+use io;\n+use io::prelude::*;\n+use intrinsics;\n+use libc;\n+\n+pub fn print(w: &mut Write, i: isize, addr: u64, dbghelp: &DynamicLibrary, process: libc::HANDLE)\n+        -> io::Result<()> {\n+    let SymFromAddr = sym!(dbghelp, \"SymFromAddr\", SymFromAddrFn);\n+\n+    let mut info: SYMBOL_INFO = unsafe { intrinsics::init() };\n+    info.MaxNameLen = MAX_SYM_NAME as libc::c_ulong;\n+    // the struct size in C.  the value is different to\n+    // `size_of::<SYMBOL_INFO>() - MAX_SYM_NAME + 1` (== 81)\n+    // due to struct alignment.\n+    info.SizeOfStruct = 88;\n+\n+    let mut displacement = 0u64;\n+    let ret = SymFromAddr(process, addr as u64, &mut displacement, &mut info);\n+\n+    let name = if ret == libc::TRUE {\n+        let ptr = info.Name.as_ptr() as *const libc::c_char;\n+        Some(unsafe { CStr::from_ptr(ptr).to_bytes() })\n+    } else {\n+        None\n+    };\n+\n+    output(w, i, addr as usize as *mut libc::c_void, name)\n+}"}, {"sha": "5feca9422f656c36d963d8aaf38f2d864aa37775", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "patch": "@@ -27,11 +27,12 @@ macro_rules! pos {\n     () => ((file!(), line!()))\n }\n \n-#[cfg(all(unix,\n-          not(target_os = \"macos\"),\n-          not(target_os = \"ios\"),\n-          not(target_os = \"android\"),\n-          not(all(target_os = \"linux\", target_arch = \"arm\"))))]\n+#[cfg(any(all(unix,\n+              not(target_os = \"macos\"),\n+              not(target_os = \"ios\"),\n+              not(target_os = \"android\"),\n+              not(all(target_os = \"linux\", target_arch = \"arm\"))),\n+          all(windows, target_env = \"gnu\", not(target_arch = \"x86\"))))]\n macro_rules! dump_and_die {\n     ($($pos:expr),*) => ({\n         // FIXME(#18285): we cannot include the current position because\n@@ -42,11 +43,12 @@ macro_rules! dump_and_die {\n }\n \n // this does not work on Windows, Android, OSX or iOS\n-#[cfg(any(not(unix),\n-          target_os = \"macos\",\n-          target_os = \"ios\",\n-          target_os = \"android\",\n-          all(target_os = \"linux\", target_arch = \"arm\")))]\n+#[cfg(not(any(all(unix,\n+              not(target_os = \"macos\"),\n+              not(target_os = \"ios\"),\n+              not(target_os = \"android\"),\n+              not(all(target_os = \"linux\", target_arch = \"arm\"))),\n+          all(windows, target_env = \"gnu\", not(target_arch = \"x86\")))))]\n macro_rules! dump_and_die {\n     ($($pos:expr),*) => ({ let _ = [$($pos),*]; })\n }\n@@ -165,3 +167,4 @@ fn main() {\n         run_test(&args[0]);\n     }\n }\n+"}, {"sha": "5d65f9eb2be0fe3eb8b17738cdfdf248ebf0d288", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fc3ec208186f0a9de8d05a6802c95b07e058fd/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=d4fc3ec208186f0a9de8d05a6802c95b07e058fd", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // no-pretty-expanded FIXME #15189\n-// ignore-windows FIXME #13259\n // ignore-android FIXME #17520\n+// ignore-msvc FIXME #28133\n \n use std::env;\n use std::process::{Command, Stdio};\n@@ -89,6 +89,7 @@ fn runtest(me: &str) {\n             \"bad output4: {}\", s);\n }\n \n+#[cfg(not(all(windows, target_arch = \"x86\")))]\n fn main() {\n     let args: Vec<String> = env::args().collect();\n     if args.len() >= 2 && args[1] == \"fail\" {\n@@ -99,3 +100,7 @@ fn main() {\n         runtest(&args[0]);\n     }\n }\n+\n+// See issue 28218\n+#[cfg(all(windows, target_arch = \"x86\"))]\n+fn main() {}"}]}