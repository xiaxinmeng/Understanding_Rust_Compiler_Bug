{"sha": "1c77e2b9224f063659e50732938052690fc73264", "node_id": "C_kwDOAAsO6NoAKDFjNzdlMmI5MjI0ZjA2MzY1OWU1MDczMjkzODA1MjY5MGZjNzMyNjQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-17T15:36:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T20:57:31Z"}, "message": "add a Vtable kind of symbolic allocations", "tree": {"sha": "11a0f23c139f334c519e22dbf8871d404f9eaeb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11a0f23c139f334c519e22dbf8871d404f9eaeb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c77e2b9224f063659e50732938052690fc73264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c77e2b9224f063659e50732938052690fc73264", "html_url": "https://github.com/rust-lang/rust/commit/1c77e2b9224f063659e50732938052690fc73264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c77e2b9224f063659e50732938052690fc73264/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22a0a2eac27d4c0409b1424ff873d89710bfa746", "url": "https://api.github.com/repos/rust-lang/rust/commits/22a0a2eac27d4c0409b1424ff873d89710bfa746", "html_url": "https://github.com/rust-lang/rust/commit/22a0a2eac27d4c0409b1424ff873d89710bfa746"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "389ff7231b0af69343bd7e3d0fbf3ea8670cc9bc", "filename": "src/constant.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c77e2b9224f063659e50732938052690fc73264/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c77e2b9224f063659e50732938052690fc73264/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=1c77e2b9224f063659e50732938052690fc73264", "patch": "@@ -195,9 +195,13 @@ pub(crate) fn codegen_const_value<'tcx>(\n             }\n             Scalar::Ptr(ptr, _size) => {\n                 let (alloc_id, offset) = ptr.into_parts(); // we know the `offset` is relative\n-                let alloc_kind = fx.tcx.get_global_alloc(alloc_id);\n-                let base_addr = match alloc_kind {\n-                    Some(GlobalAlloc::Memory(alloc)) => {\n+                // For vtables, get the underlying data allocation.\n+                let alloc_id = match fx.tcx.global_alloc(alloc_id) {\n+                    GlobalAlloc::Vtable(ty, trait_ref) => fx.tcx.vtable_allocation((ty, trait_ref)),\n+                    _ => alloc_id,\n+                };\n+                let base_addr = match fx.tcx.global_alloc(alloc_id) {\n+                    GlobalAlloc::Memory(alloc) => {\n                         let data_id = data_id_for_alloc_id(\n                             &mut fx.constants_cx,\n                             fx.module,\n@@ -211,13 +215,14 @@ pub(crate) fn codegen_const_value<'tcx>(\n                         }\n                         fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n                     }\n-                    Some(GlobalAlloc::Function(instance)) => {\n+                    GlobalAlloc::Function(instance) => {\n                         let func_id = crate::abi::import_function(fx.tcx, fx.module, instance);\n                         let local_func_id =\n                             fx.module.declare_func_in_func(func_id, &mut fx.bcx.func);\n                         fx.bcx.ins().func_addr(fx.pointer_type, local_func_id)\n                     }\n-                    Some(GlobalAlloc::Static(def_id)) => {\n+                    GlobalAlloc::Vtable(..) => bug!(\"vtables are already handled\"),\n+                    GlobalAlloc::Static(def_id) => {\n                         assert!(fx.tcx.is_static(def_id));\n                         let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);\n                         let local_data_id =\n@@ -227,7 +232,6 @@ pub(crate) fn codegen_const_value<'tcx>(\n                         }\n                         fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n                     }\n-                    None => bug!(\"missing allocation {:?}\", alloc_id),\n                 };\n                 let val = if offset.bytes() != 0 {\n                     fx.bcx.ins().iadd_imm(base_addr, i64::try_from(offset.bytes()).unwrap())\n@@ -360,7 +364,9 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 //println!(\"alloc_id {}\", alloc_id);\n                 let alloc = match tcx.get_global_alloc(alloc_id).unwrap() {\n                     GlobalAlloc::Memory(alloc) => alloc,\n-                    GlobalAlloc::Function(_) | GlobalAlloc::Static(_) => unreachable!(),\n+                    GlobalAlloc::Function(_) | GlobalAlloc::Static(_) | GlobalAlloc::Vtable(..) => {\n+                        unreachable!()\n+                    }\n                 };\n                 let data_id = *cx.anon_allocs.entry(alloc_id).or_insert_with(|| {\n                     module\n@@ -424,7 +430,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 read_target_uint(endianness, bytes).unwrap()\n             };\n \n-            let reloc_target_alloc = tcx.get_global_alloc(alloc_id).unwrap();\n+            let reloc_target_alloc = tcx.global_alloc(alloc_id);\n             let data_id = match reloc_target_alloc {\n                 GlobalAlloc::Function(instance) => {\n                     assert_eq!(addend, 0);\n@@ -436,6 +442,10 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 GlobalAlloc::Memory(target_alloc) => {\n                     data_id_for_alloc_id(cx, module, alloc_id, target_alloc.inner().mutability)\n                 }\n+                GlobalAlloc::Vtable(ty, trait_ref) => {\n+                    let alloc_id = tcx.vtable_allocation((ty, trait_ref));\n+                    data_id_for_alloc_id(cx, module, alloc_id, Mutability::Not)\n+                }\n                 GlobalAlloc::Static(def_id) => {\n                     if tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)\n                     {"}]}