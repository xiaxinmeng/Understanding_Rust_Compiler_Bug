{"sha": "6f64ae3fbcf7a353537d250f91981ac336e12880", "node_id": "C_kwDOAAsO6NoAKDZmNjRhZTNmYmNmN2EzNTM1MzdkMjUwZjkxOTgxYWMzMzZlMTI4ODA", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-12T11:50:45Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-12T11:50:45Z"}, "message": "Move code around", "tree": {"sha": "9b355fb937543ced87ffeb2565406e08d70e86e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b355fb937543ced87ffeb2565406e08d70e86e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f64ae3fbcf7a353537d250f91981ac336e12880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f64ae3fbcf7a353537d250f91981ac336e12880", "html_url": "https://github.com/rust-lang/rust/commit/6f64ae3fbcf7a353537d250f91981ac336e12880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f64ae3fbcf7a353537d250f91981ac336e12880/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3df9a7bde32e7ae9fab45024fd38db827531c48d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3df9a7bde32e7ae9fab45024fd38db827531c48d", "html_url": "https://github.com/rust-lang/rust/commit/3df9a7bde32e7ae9fab45024fd38db827531c48d"}], "stats": {"total": 113, "additions": 57, "deletions": 56}, "files": [{"sha": "90500b2de89d139b558fa67837f71bb780d80493", "filename": "compiler/rustc_data_structures/src/tagged_ptr/copy.rs", "status": "modified", "additions": 38, "deletions": 39, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6f64ae3fbcf7a353537d250f91981ac336e12880/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64ae3fbcf7a353537d250f91981ac336e12880/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs?ref=6f64ae3fbcf7a353537d250f91981ac336e12880", "patch": "@@ -1,6 +1,7 @@\n use super::{Pointer, Tag};\n use crate::stable_hasher::{HashStable, StableHasher};\n use std::fmt;\n+use std::hash::{Hash, Hasher};\n use std::marker::PhantomData;\n use std::mem::ManuallyDrop;\n use std::num::NonZeroUsize;\n@@ -24,25 +25,6 @@ where\n     tag_ghost: PhantomData<T>,\n }\n \n-impl<P, T, const CP: bool> Copy for CopyTaggedPtr<P, T, CP>\n-where\n-    P: Pointer,\n-    T: Tag,\n-    P: Copy,\n-{\n-}\n-\n-impl<P, T, const CP: bool> Clone for CopyTaggedPtr<P, T, CP>\n-where\n-    P: Pointer,\n-    T: Tag,\n-    P: Copy,\n-{\n-    fn clone(&self) -> Self {\n-        *self\n-    }\n-}\n-\n // We pack the tag into the *upper* bits of the pointer to ease retrieval of the\n // value; a left shift is a multiplication and those are embeddable in\n // instruction encoding.\n@@ -55,6 +37,27 @@ where\n         Self { packed: Self::pack(P::into_ptr(pointer), tag), tag_ghost: PhantomData }\n     }\n \n+    pub fn pointer(self) -> P\n+    where\n+        P: Copy,\n+    {\n+        // SAFETY: pointer_raw returns the original pointer\n+        //\n+        // Note that this isn't going to double-drop or anything because we have\n+        // P: Copy\n+        unsafe { P::from_ptr(self.pointer_raw()) }\n+    }\n+\n+    #[inline]\n+    pub fn tag(&self) -> T {\n+        unsafe { T::from_usize(self.packed.addr().get() >> Self::TAG_BIT_SHIFT) }\n+    }\n+\n+    #[inline]\n+    pub fn set_tag(&mut self, tag: T) {\n+        self.packed = Self::pack(self.pointer_raw(), tag);\n+    }\n+\n     const TAG_BIT_SHIFT: usize = usize::BITS as usize - T::BITS;\n     const ASSERTION: () = { assert!(T::BITS <= P::BITS) };\n \n@@ -103,26 +106,22 @@ where\n         let ptr = unsafe { ManuallyDrop::new(P::from_ptr(self.pointer_raw())) };\n         f(&ptr)\n     }\n+}\n \n-    pub fn pointer(self) -> P\n-    where\n-        P: Copy,\n-    {\n-        // SAFETY: pointer_raw returns the original pointer\n-        //\n-        // Note that this isn't going to double-drop or anything because we have\n-        // P: Copy\n-        unsafe { P::from_ptr(self.pointer_raw()) }\n-    }\n-\n-    #[inline]\n-    pub fn tag(&self) -> T {\n-        unsafe { T::from_usize(self.packed.addr().get() >> Self::TAG_BIT_SHIFT) }\n-    }\n+impl<P, T, const CP: bool> Copy for CopyTaggedPtr<P, T, CP>\n+where\n+    P: Pointer + Copy,\n+    T: Tag,\n+{\n+}\n \n-    #[inline]\n-    pub fn set_tag(&mut self, tag: T) {\n-        self.packed = Self::pack(self.pointer_raw(), tag);\n+impl<P, T, const CP: bool> Clone for CopyTaggedPtr<P, T, CP>\n+where\n+    P: Pointer + Copy,\n+    T: Tag,\n+{\n+    fn clone(&self) -> Self {\n+        *self\n     }\n }\n \n@@ -184,12 +183,12 @@ where\n {\n }\n \n-impl<P, T> std::hash::Hash for CopyTaggedPtr<P, T, true>\n+impl<P, T> Hash for CopyTaggedPtr<P, T, true>\n where\n     P: Pointer,\n     T: Tag,\n {\n-    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n         self.packed.hash(state);\n     }\n }"}, {"sha": "60f3e1d24610c6d10d6f06a9e1293f7d85bf8c29", "filename": "compiler/rustc_data_structures/src/tagged_ptr/drop.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6f64ae3fbcf7a353537d250f91981ac336e12880/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64ae3fbcf7a353537d250f91981ac336e12880/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs?ref=6f64ae3fbcf7a353537d250f91981ac336e12880", "patch": "@@ -1,4 +1,6 @@\n use std::fmt;\n+use std::hash::{Hash, Hasher};\n+use std::ops::{Deref, DerefMut};\n \n use super::CopyTaggedPtr;\n use super::{Pointer, Tag};\n@@ -17,18 +19,6 @@ where\n     raw: CopyTaggedPtr<P, T, COMPARE_PACKED>,\n }\n \n-impl<P, T, const CP: bool> Clone for TaggedPtr<P, T, CP>\n-where\n-    P: Pointer + Clone,\n-    T: Tag,\n-{\n-    fn clone(&self) -> Self {\n-        let ptr = self.raw.with_pointer_ref(P::clone);\n-\n-        Self::new(ptr, self.tag())\n-    }\n-}\n-\n // We pack the tag into the *upper* bits of the pointer to ease retrieval of the\n // value; a right shift is a multiplication and those are embeddable in\n // instruction encoding.\n@@ -46,7 +36,19 @@ where\n     }\n }\n \n-impl<P, T, const CP: bool> std::ops::Deref for TaggedPtr<P, T, CP>\n+impl<P, T, const CP: bool> Clone for TaggedPtr<P, T, CP>\n+where\n+    P: Pointer + Clone,\n+    T: Tag,\n+{\n+    fn clone(&self) -> Self {\n+        let ptr = self.raw.with_pointer_ref(P::clone);\n+\n+        Self::new(ptr, self.tag())\n+    }\n+}\n+\n+impl<P, T, const CP: bool> Deref for TaggedPtr<P, T, CP>\n where\n     P: Pointer,\n     T: Tag,\n@@ -57,9 +59,9 @@ where\n     }\n }\n \n-impl<P, T, const CP: bool> std::ops::DerefMut for TaggedPtr<P, T, CP>\n+impl<P, T, const CP: bool> DerefMut for TaggedPtr<P, T, CP>\n where\n-    P: Pointer + std::ops::DerefMut,\n+    P: Pointer + DerefMut,\n     T: Tag,\n {\n     fn deref_mut(&mut self) -> &mut Self::Target {\n@@ -109,12 +111,12 @@ where\n {\n }\n \n-impl<P, T> std::hash::Hash for TaggedPtr<P, T, true>\n+impl<P, T> Hash for TaggedPtr<P, T, true>\n where\n     P: Pointer,\n     T: Tag,\n {\n-    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n         self.raw.hash(state);\n     }\n }"}]}