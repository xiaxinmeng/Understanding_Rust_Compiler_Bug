{"sha": "ee21454e619fb7ab6122ee2349f9f40bb902bf5c", "node_id": "C_kwDOAAsO6NoAKGVlMjE0NTRlNjE5ZmI3YWI2MTIyZWUyMzQ5ZjlmNDBiYjkwMmJmNWM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-05T10:37:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-05T10:37:55Z"}, "message": "attempt to clarify align_to docs", "tree": {"sha": "9d8aead6dde9b0ec773397d4292161369ccc5a89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d8aead6dde9b0ec773397d4292161369ccc5a89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee21454e619fb7ab6122ee2349f9f40bb902bf5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee21454e619fb7ab6122ee2349f9f40bb902bf5c", "html_url": "https://github.com/rust-lang/rust/commit/ee21454e619fb7ab6122ee2349f9f40bb902bf5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee21454e619fb7ab6122ee2349f9f40bb902bf5c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd02567705326884ddb94535d2ab230a9595dc2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd02567705326884ddb94535d2ab230a9595dc2a", "html_url": "https://github.com/rust-lang/rust/commit/fd02567705326884ddb94535d2ab230a9595dc2a"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "3d7a7cfaf35fb5a13ee4d7ea4f4132dcdf152c3e", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee21454e619fb7ab6122ee2349f9f40bb902bf5c/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee21454e619fb7ab6122ee2349f9f40bb902bf5c/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=ee21454e619fb7ab6122ee2349f9f40bb902bf5c", "patch": "@@ -3468,10 +3468,11 @@ impl<T> [T] {\n     /// maintained.\n     ///\n     /// This method splits the slice into three distinct slices: prefix, correctly aligned middle\n-    /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest\n-    /// length possible for a given type and input slice, but only your algorithm's performance\n-    /// should depend on that, not its correctness. It is permissible for all of the input data to\n-    /// be returned as the prefix or suffix slice.\n+    /// slice of a new type, and the suffix slice. How exactly the slice is split up is not\n+    /// specified; the middle part may be smaller than necessary. However, if this fails to return a\n+    /// maximal middle part, that is because code is running in a context where performance does not\n+    /// matter, such as a sanitizer attempting to find alignment bugs. Regular code running\n+    /// in a default (debug or release) execution *will* return a maximal middle part.\n     ///\n     /// This method has no purpose when either input element `T` or output element `U` are\n     /// zero-sized and will return the original slice without splitting anything.\n@@ -3529,10 +3530,11 @@ impl<T> [T] {\n     /// types is maintained.\n     ///\n     /// This method splits the slice into three distinct slices: prefix, correctly aligned middle\n-    /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest\n-    /// length possible for a given type and input slice, but only your algorithm's performance\n-    /// should depend on that, not its correctness. It is permissible for all of the input data to\n-    /// be returned as the prefix or suffix slice.\n+    /// slice of a new type, and the suffix slice. How exactly the slice is split up is not\n+    /// specified; the middle part may be smaller than necessary. However, if this fails to return a\n+    /// maximal middle part, that is because code is running in a context where performance does not\n+    /// matter, such as a sanitizer attempting to find alignment bugs. Regular code running\n+    /// in a default (debug or release) execution *will* return a maximal middle part.\n     ///\n     /// This method has no purpose when either input element `T` or output element `U` are\n     /// zero-sized and will return the original slice without splitting anything."}]}