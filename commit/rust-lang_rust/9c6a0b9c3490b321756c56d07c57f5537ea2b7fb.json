{"sha": "9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNmEwYjljMzQ5MGIzMjE3NTZjNTZkMDdjNTdmNTUzN2VhMmI3ZmI=", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2020-11-08T12:07:49Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2020-11-08T12:07:49Z"}, "message": "Update references", "tree": {"sha": "3c9a802969968e67e196a4d1cb3a67c2c52e4e33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c9a802969968e67e196a4d1cb3a67c2c52e4e33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "html_url": "https://github.com/rust-lang/rust/commit/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1f780c9422f038ae78e72a99b1ca2a0d7b392bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc", "html_url": "https://github.com/rust-lang/rust/commit/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc"}], "stats": {"total": 554, "additions": 533, "deletions": 21}, "files": [{"sha": "a40789cd4263400601a3a1bada9ce4d0db746954", "filename": "tests/ui/borrow_box.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fborrow_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fborrow_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -22,6 +22,15 @@ error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n LL |     fn test4(a: &Box<bool>);\n    |                 ^^^^^^^^^^ help: try: `&bool`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/borrow_box.rs:63:5\n+   |\n+LL |     let _ = foo;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n   --> $DIR/borrow_box.rs:95:25\n    |\n@@ -64,5 +73,5 @@ error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n LL | pub fn test20(_display: &Box<(dyn Display + Send)>) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&(dyn Display + Send)`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "976c412c7a87551c72e017c72b2926e8fec4c24a", "filename": "tests/ui/borrow_interior_mutable_const/others.stderr", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -47,6 +47,15 @@ LL |     let _once_mut = &mut ONCE_INIT; //~ ERROR interior mutability\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/others.rs:72:5\n+   |\n+LL |     let _ = &ATOMIC_TUPLE; //~ ERROR interior mutability\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/others.rs:72:14\n    |\n@@ -95,6 +104,22 @@ LL |     let _ = ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/others.rs:83:5\n+   |\n+LL |     let _ = ATOMIC_TUPLE.1.into_iter();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/others.rs:85:5\n+   |\n+LL |     let _ = &{ ATOMIC_TUPLE };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/others.rs:87:5\n    |\n@@ -111,5 +136,5 @@ LL |     assert_eq!(CELL.get(), 6); //~ ERROR interior mutability\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 17 previous errors\n "}, {"sha": "a4983df1d30769fbf4c8206b55cb00f975589630", "filename": "tests/ui/box_vec.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fbox_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fbox_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -1,3 +1,16 @@\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/box_vec.rs:7:9\n+   |\n+LL |         let _: Box<$x> = Box::new($init);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     boxit!(Vec::new(), Vec<u8>);\n+   |     ---------------------------- in this macro invocation\n+   |\n+   = note: `-D clippy::let-underscore-drop` implied by `-D warnings`\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\n   --> $DIR/box_vec.rs:14:18\n    |\n@@ -7,5 +20,5 @@ LL | pub fn test(foo: Box<Vec<bool>>) {\n    = note: `-D clippy::box-vec` implied by `-D warnings`\n    = help: `Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "9ce39027451dc1e3b18a46f89367df550f203000", "filename": "tests/ui/crashes/ice-4968.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fcrashes%2Fice-4968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fcrashes%2Fice-4968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-4968.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -0,0 +1,11 @@\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/ice-4968.rs:16:9\n+   |\n+LL |         let _: Vec<ManuallyDrop<T::Assoc>> = mem::transmute(slice);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3ae2dd5f7705f9b27546e5280427798be5b6d2d7", "filename": "tests/ui/crashes/ice-5223.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fcrashes%2Fice-5223.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fcrashes%2Fice-5223.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-5223.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -0,0 +1,11 @@\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/ice-5223.rs:14:9\n+   |\n+LL |         let _ = self.arr.iter().cloned().collect::<Vec<_>>();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: aborting due to previous error\n+"}, {"sha": "6e1c1c07b6eac984958b0f3a50b089c299d50f0e", "filename": "tests/ui/escape_analysis.stderr", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fescape_analysis.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fescape_analysis.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fescape_analysis.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -12,5 +12,26 @@ error: local variable doesn't need to be boxed here\n LL | pub fn new(_needs_name: Box<PeekableSeekable<&()>>) -> () {}\n    |            ^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/escape_analysis.rs:166:9\n+   |\n+LL | /         let _ = move || {\n+LL | |             consume(x);\n+LL | |         };\n+   | |__________^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/escape_analysis.rs:172:9\n+   |\n+LL | /         let _ = || {\n+LL | |             borrow(&x);\n+LL | |         };\n+   | |__________^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "bc79caee887f64226c1086f1a75eacc367ce4867", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -64,6 +64,15 @@ error: redundant closure found\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/eta.rs:107:5\n+   |\n+LL |     let _: Vec<_> = arr.iter().map(|x| x.map_err(|e| some.take().unwrap()(e))).collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: redundant closure found\n   --> $DIR/eta.rs:172:27\n    |\n@@ -76,5 +85,13 @@ error: redundant closure found\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `closure`\n \n-error: aborting due to 12 previous errors\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/eta.rs:203:5\n+   |\n+LL |     let _ = [Bar].iter().map(|s| s.to_string()).collect::<Vec<_>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: aborting due to 14 previous errors\n "}, {"sha": "08b781d73634e51c6aa4aed3552a01a0f4f1dfc9", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -1,3 +1,12 @@\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/filter_methods.rs:5:5\n+   |\n+LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x * 2).collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::let-underscore-drop` implied by `-D warnings`\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: called `filter(..).map(..)` on an `Iterator`\n   --> $DIR/filter_methods.rs:5:21\n    |\n@@ -7,6 +16,18 @@ LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x *\n    = note: `-D clippy::filter-map` implied by `-D warnings`\n    = help: this is more succinctly expressed by calling `.filter_map(..)` instead\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/filter_methods.rs:7:5\n+   |\n+LL | /     let _: Vec<_> = vec![5_i8; 6]\n+LL | |         .into_iter()\n+LL | |         .filter(|&x| x == 0)\n+LL | |         .flat_map(|x| x.checked_mul(2))\n+LL | |         .collect();\n+   | |___________________^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: called `filter(..).flat_map(..)` on an `Iterator`\n   --> $DIR/filter_methods.rs:7:21\n    |\n@@ -19,6 +40,18 @@ LL | |         .flat_map(|x| x.checked_mul(2))\n    |\n    = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/filter_methods.rs:13:5\n+   |\n+LL | /     let _: Vec<_> = vec![5_i8; 6]\n+LL | |         .into_iter()\n+LL | |         .filter_map(|x| x.checked_mul(2))\n+LL | |         .flat_map(|x| x.checked_mul(2))\n+LL | |         .collect();\n+   | |___________________^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: called `filter_map(..).flat_map(..)` on an `Iterator`\n   --> $DIR/filter_methods.rs:13:21\n    |\n@@ -31,6 +64,18 @@ LL | |         .flat_map(|x| x.checked_mul(2))\n    |\n    = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/filter_methods.rs:19:5\n+   |\n+LL | /     let _: Vec<_> = vec![5_i8; 6]\n+LL | |         .into_iter()\n+LL | |         .filter_map(|x| x.checked_mul(2))\n+LL | |         .map(|x| x.checked_mul(2))\n+LL | |         .collect();\n+   | |___________________^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: called `filter_map(..).map(..)` on an `Iterator`\n   --> $DIR/filter_methods.rs:19:21\n    |\n@@ -43,5 +88,5 @@ LL | |         .map(|x| x.checked_mul(2))\n    |\n    = help: this is more succinctly expressed by only calling `.filter_map(..)` instead\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "6aa5452bac1c9e362f41653db143bf9b16dbdeef", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -70,17 +70,34 @@ error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vecdeque[0]`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/get_unwrap.rs:59:9\n+   |\n+LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:59:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/get_unwrap.rs:60:9\n+   |\n+LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:60:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 15 previous errors\n "}, {"sha": "efe9d20920b742022839a5a8a7c81cb2ec48f723", "filename": "tests/ui/into_iter_on_ref.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Finto_iter_on_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Finto_iter_on_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -1,3 +1,12 @@\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/into_iter_on_ref.rs:13:5\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `Vec`\n   --> $DIR/into_iter_on_ref.rs:14:30\n    |\n@@ -162,5 +171,5 @@ error: this `.into_iter()` call is equivalent to `.iter()` and will not consume\n LL |     let _ = (&[1, 2, 3]).into_iter().next(); //~ WARN equivalent to .iter()\n    |                          ^^^^^^^^^ help: call directly: `iter`\n \n-error: aborting due to 27 previous errors\n+error: aborting due to 28 previous errors\n "}, {"sha": "f5cd43b3da542383c2bcaad35b0293c6eec29c8c", "filename": "tests/ui/iter_cloned_collect.stderr", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fiter_cloned_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fiter_cloned_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_cloned_collect.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -6,12 +6,33 @@ LL |     let v2: Vec<isize> = v.iter().cloned().collect();\n    |\n    = note: `-D clippy::iter-cloned-collect` implied by `-D warnings`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/iter_cloned_collect.rs:15:5\n+   |\n+LL |     let _: Vec<isize> = vec![1, 2, 3].iter().cloned().collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n   --> $DIR/iter_cloned_collect.rs:15:38\n    |\n LL |     let _: Vec<isize> = vec![1, 2, 3].iter().cloned().collect();\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.to_vec()`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/iter_cloned_collect.rs:19:9\n+   |\n+LL | /         let _: Vec<u8> = std::ffi::CStr::from_ptr(std::ptr::null())\n+LL | |             .to_bytes()\n+LL | |             .iter()\n+LL | |             .cloned()\n+LL | |             .collect();\n+   | |_______________________^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n   --> $DIR/iter_cloned_collect.rs:20:24\n    |\n@@ -22,5 +43,5 @@ LL | |             .cloned()\n LL | |             .collect();\n    | |______________________^ help: try: `.to_vec()`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "122a678f1188fe22ed009bd5a8b770c927018451", "filename": "tests/ui/map_clone.stderr", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -1,3 +1,12 @@\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_clone.rs:10:5\n+   |\n+LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::let-underscore-drop` implied by `-D warnings`\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: you are using an explicit closure for copying elements\n   --> $DIR/map_clone.rs:10:22\n    |\n@@ -6,12 +15,28 @@ LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n    |\n    = note: `-D clippy::map-clone` implied by `-D warnings`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_clone.rs:11:5\n+   |\n+LL |     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: you are using an explicit closure for cloning elements\n   --> $DIR/map_clone.rs:11:26\n    |\n LL |     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `cloned` method: `vec![String::new()].iter().cloned()`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_clone.rs:12:5\n+   |\n+LL |     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: you are using an explicit closure for copying elements\n   --> $DIR/map_clone.rs:12:23\n    |\n@@ -36,5 +61,37 @@ error: you are needlessly cloning iterator elements\n LL |     let _ = std::env::args().map(|v| v.clone());\n    |                             ^^^^^^^^^^^^^^^^^^^ help: remove the `map` call\n \n-error: aborting due to 6 previous errors\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_clone.rs:35:9\n+   |\n+LL |         let _: Vec<u32> = v.into_iter().map(|x| *x).collect();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_clone.rs:42:9\n+   |\n+LL |         let _: Vec<u32> = v.into_iter().map(|x| *x).collect();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_clone.rs:45:9\n+   |\n+LL |         let _: Vec<u32> = v.into_iter().map(|&mut x| x).collect();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_clone.rs:53:9\n+   |\n+LL |         let _: Vec<_> = items.into_iter().map(|x| x.clone()).collect();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: aborting due to 13 previous errors\n "}, {"sha": "26e876b18081b641919737f41548312b3efc178d", "filename": "tests/ui/map_collect_result_unit.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fmap_collect_result_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fmap_collect_result_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_collect_result_unit.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -12,5 +12,22 @@ error: `.map().collect()` can be replaced with `.try_for_each()`\n LL |         let _: Result<(), _> = (0..3).map(|t| Err(t + 1)).collect();\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(0..3).try_for_each(|t| Err(t + 1))`\n \n-error: aborting due to 2 previous errors\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_collect_result_unit.rs:14:5\n+   |\n+LL |     let _ = (0..3).map(|t| Err(t + 1)).collect::<Result<Vec<i32>, _>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_collect_result_unit.rs:15:5\n+   |\n+LL |     let _ = (0..3).map(|t| Err(t + 1)).collect::<Vec<Result<(), _>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "6159b5256ee82f5613277164b79aa5d992873988", "filename": "tests/ui/map_flatten.stderr", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fmap_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fmap_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -1,3 +1,12 @@\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_flatten.rs:14:5\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::let-underscore-drop` implied by `-D warnings`\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: called `map(..).flatten()` on an `Iterator`\n   --> $DIR/map_flatten.rs:14:46\n    |\n@@ -6,24 +15,56 @@ LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().coll\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_flatten.rs:15:5\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: called `map(..).flatten()` on an `Iterator`\n   --> $DIR/map_flatten.rs:15:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_ref)`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_flatten.rs:16:5\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: called `map(..).flatten()` on an `Iterator`\n   --> $DIR/map_flatten.rs:16:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_closure)`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_flatten.rs:17:5\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: called `map(..).flatten()` on an `Iterator`\n   --> $DIR/map_flatten.rs:17:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(|x| x.checked_add(1))`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_flatten.rs:20:5\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: called `map(..).flatten()` on an `Iterator`\n   --> $DIR/map_flatten.rs:20:46\n    |\n@@ -36,5 +77,5 @@ error: called `map(..).flatten()` on an `Option`\n LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n    |                                       ^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `.and_then(|x| x)`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "6bfeb186badcf08558fd2b88f15192b6df6deaed", "filename": "tests/ui/map_identity.stderr", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fmap_identity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fmap_identity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_identity.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -1,3 +1,12 @@\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_identity.rs:8:5\n+   |\n+LL |     let _: Vec<_> = x.iter().map(not_identity).map(|x| return x).collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: unnecessary map of the identity function\n   --> $DIR/map_identity.rs:8:47\n    |\n@@ -6,6 +15,14 @@ LL |     let _: Vec<_> = x.iter().map(not_identity).map(|x| return x).collect();\n    |\n    = note: `-D clippy::map-identity` implied by `-D warnings`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_identity.rs:9:5\n+   |\n+LL |     let _: Vec<_> = x.iter().map(std::convert::identity).map(|y| y).collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: unnecessary map of the identity function\n   --> $DIR/map_identity.rs:9:57\n    |\n@@ -33,5 +50,21 @@ LL | |         return x;\n LL | |     });\n    | |______^ help: remove the call to `map`\n \n-error: aborting due to 5 previous errors\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_identity.rs:15:5\n+   |\n+LL |     let _: Vec<_> = x.iter().map(|x| 2 * x).collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/map_identity.rs:16:5\n+   |\n+LL |     let _: Vec<_> = x.iter().map(not_identity).map(|x| return x - 4).collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: aborting due to 9 previous errors\n "}, {"sha": "8b07599817b6809a7014b597051eae9a587b3b8f", "filename": "tests/ui/match_single_binding.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fmatch_single_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fmatch_single_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -150,6 +150,20 @@ LL |     let Point { x, y } = coords();\n LL |     let product = x * y;\n    |\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/match_single_binding.rs:96:5\n+   |\n+LL | /     let _ = v\n+LL | |         .iter()\n+LL | |         .map(|i| match i.unwrap() {\n+LL | |             unwrapped => unwrapped,\n+LL | |         })\n+LL | |         .collect::<Vec<u8>>();\n+   | |______________________________^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: this match could be written as a `let` statement\n   --> $DIR/match_single_binding.rs:98:18\n    |\n@@ -167,5 +181,5 @@ LL |             unwrapped\n LL |         })\n    |\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "cf04ee4b257268342b7f1b9ca8a50229d157969e", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -90,6 +90,15 @@ help: change `v.clone()` to\n LL |     let _ = v.to_owned();\n    |             ^^^^^^^^^^^^\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/needless_pass_by_value.rs:85:5\n+   |\n+LL |     let _ = v.clone();\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: this argument is passed by value, but not consumed in the function body\n   --> $DIR/needless_pass_by_value.rs:94:12\n    |\n@@ -174,5 +183,5 @@ error: this argument is passed by value, but not consumed in the function body\n LL | fn more_fun(_item: impl Club<'static, i32>) {}\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^ help: consider taking a reference instead: `&impl Club<'static, i32>`\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 23 previous errors\n "}, {"sha": "270c3fac990994e52b05b512a79941bde2725e84", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -167,5 +167,14 @@ note: cloned value is neither consumed nor mutated\n LL |     let y = x.clone().join(\"matthias\");\n    |             ^^^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/redundant_clone.rs:180:5\n+   |\n+LL |     let _ = a.clone(); // OK\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: aborting due to 15 previous errors\n "}, {"sha": "707a5d5032ecd266c5ef1a0804a2847c1d7dcefe", "filename": "tests/ui/reversed_empty_ranges_fixable.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Freversed_empty_ranges_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Freversed_empty_ranges_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_fixable.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -10,6 +10,15 @@ help: consider using the following if you are attempting to iterate over this ra\n LL |     (21..=42).rev().for_each(|x| println!(\"{}\", x));\n    |     ^^^^^^^^^^^^^^^\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/reversed_empty_ranges_fixable.rs:10:5\n+   |\n+LL |     let _ = (ANSWER..21).filter(|x| x % 2 == 0).take(10).collect::<Vec<_>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: this range is empty so it will yield no values\n   --> $DIR/reversed_empty_ranges_fixable.rs:10:13\n    |\n@@ -43,5 +52,5 @@ help: consider using the following if you are attempting to iterate over this ra\n LL |     for _ in (21u32..42u32).rev() {}\n    |              ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "d6767dc9f15696f081a98d07209026a9151c0202", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -24,30 +24,71 @@ error: transmute from a reference to a pointer\n LL |     let _: *const U = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T as *const U`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/transmute.rs:34:9\n+   |\n+LL |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n   --> $DIR/transmute.rs:34:27\n    |\n LL |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/transmute.rs:36:9\n+   |\n+LL |         let _: Vec<i32> = core::mem::transmute(my_vec());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n   --> $DIR/transmute.rs:36:27\n    |\n LL |         let _: Vec<i32> = core::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/transmute.rs:38:9\n+   |\n+LL |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n   --> $DIR/transmute.rs:38:27\n    |\n LL |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/transmute.rs:40:9\n+   |\n+LL |         let _: Vec<i32> = std::mem::transmute(my_vec());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n   --> $DIR/transmute.rs:40:27\n    |\n LL |         let _: Vec<i32> = std::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/transmute.rs:42:9\n+   |\n+LL |         let _: Vec<i32> = my_transmute(my_vec());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n   --> $DIR/transmute.rs:42:27\n    |\n@@ -154,5 +195,5 @@ error: transmute from a `&mut [u8]` to a `&mut str`\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n-error: aborting due to 24 previous errors\n+error: aborting due to 29 previous errors\n "}, {"sha": "e89f6d8539f2ff6b068313406db1aefbcbb77fae", "filename": "tests/ui/transmute_collection.stderr", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Ftransmute_collection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Ftransmute_collection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_collection.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -1,3 +1,12 @@\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/transmute_collection.rs:9:9\n+   |\n+LL |         let _ = transmute::<_, Vec<u32>>(vec![0u8]);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: transmute from `std::vec::Vec<u8>` to `std::vec::Vec<u32>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:9:17\n    |\n@@ -6,18 +15,42 @@ LL |         let _ = transmute::<_, Vec<u32>>(vec![0u8]);\n    |\n    = note: `-D clippy::unsound-collection-transmute` implied by `-D warnings`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/transmute_collection.rs:11:9\n+   |\n+LL |         let _ = transmute::<_, Vec<[u8; 4]>>(vec![1234u32]);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: transmute from `std::vec::Vec<u32>` to `std::vec::Vec<[u8; 4]>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:11:17\n    |\n LL |         let _ = transmute::<_, Vec<[u8; 4]>>(vec![1234u32]);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/transmute_collection.rs:14:9\n+   |\n+LL |         let _ = transmute::<_, VecDeque<u32>>(VecDeque::<u8>::new());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: transmute from `std::collections::VecDeque<u8>` to `std::collections::VecDeque<u32>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:14:17\n    |\n LL |         let _ = transmute::<_, VecDeque<u32>>(VecDeque::<u8>::new());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/transmute_collection.rs:16:9\n+   |\n+LL |         let _ = transmute::<_, VecDeque<u32>>(VecDeque::<[u8; 4]>::new());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: transmute from `std::collections::VecDeque<[u8; 4]>` to `std::collections::VecDeque<u32>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:16:17\n    |\n@@ -60,24 +93,56 @@ error: transmute from `std::collections::HashSet<[u8; 4]>` to `std::collections:\n LL |         let _ = transmute::<_, HashSet<u32>>(HashSet::<[u8; 4]>::new());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/transmute_collection.rs:34:9\n+   |\n+LL |         let _ = transmute::<_, BTreeMap<u8, u32>>(BTreeMap::<u8, u8>::new());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: transmute from `std::collections::BTreeMap<u8, u8>` to `std::collections::BTreeMap<u8, u32>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:34:17\n    |\n LL |         let _ = transmute::<_, BTreeMap<u8, u32>>(BTreeMap::<u8, u8>::new());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/transmute_collection.rs:35:9\n+   |\n+LL |         let _ = transmute::<_, BTreeMap<u8, u32>>(BTreeMap::<u32, u32>::new());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: transmute from `std::collections::BTreeMap<u32, u32>` to `std::collections::BTreeMap<u8, u32>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:35:17\n    |\n LL |         let _ = transmute::<_, BTreeMap<u8, u32>>(BTreeMap::<u32, u32>::new());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/transmute_collection.rs:37:9\n+   |\n+LL |         let _ = transmute::<_, BTreeMap<u8, u32>>(BTreeMap::<u8, [u8; 4]>::new());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: transmute from `std::collections::BTreeMap<u8, [u8; 4]>` to `std::collections::BTreeMap<u8, u32>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:37:17\n    |\n LL |         let _ = transmute::<_, BTreeMap<u8, u32>>(BTreeMap::<u8, [u8; 4]>::new());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/transmute_collection.rs:38:9\n+   |\n+LL |         let _ = transmute::<_, BTreeMap<u32, u32>>(BTreeMap::<[u8; 4], u32>::new());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: transmute from `std::collections::BTreeMap<[u8; 4], u32>` to `std::collections::BTreeMap<u32, u32>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:38:17\n    |\n@@ -108,5 +173,5 @@ error: transmute from `std::collections::HashMap<[u8; 4], u32>` to `std::collect\n LL |         let _ = transmute::<_, HashMap<u32, u32>>(HashMap::<[u8; 4], u32>::new());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 26 previous errors\n "}, {"sha": "1f89cb0cdef2d4f206baefe877323f97db77cc84", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -24,6 +24,15 @@ error: using `.clone()` on a ref-counted pointer\n LL |     arc_weak.clone();\n    |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&arc_weak)`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/unnecessary_clone.rs:36:5\n+   |\n+LL |     let _: Arc<dyn SomeTrait> = x.clone();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: using `.clone()` on a ref-counted pointer\n   --> $DIR/unnecessary_clone.rs:36:33\n    |\n@@ -102,5 +111,5 @@ error: using `.clone()` on a ref-counted pointer\n LL |         Some(try_opt!(Some(rc)).clone())\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `Rc::<u8>::clone(&try_opt!(Some(rc)))`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}, {"sha": "ea3e96111cb3e91646f4d73ce76f04ab5b579f15", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0b9c3490b321756c56d07c57f5537ea2b7fb/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=9c6a0b9c3490b321756c56d07c57f5537ea2b7fb", "patch": "@@ -52,6 +52,15 @@ error: useless conversion to the same type: `std::str::Lines`\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/useless_conversion.rs:65:5\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n error: useless conversion to the same type: `std::vec::IntoIter<i32>`\n   --> $DIR/useless_conversion.rs:65:13\n    |\n@@ -70,5 +79,5 @@ error: useless conversion to the same type: `i32`\n LL |     let _ = i32::from(a + b) * 3;\n    |             ^^^^^^^^^^^^^^^^ help: consider removing `i32::from()`: `(a + b)`\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n "}]}