{"sha": "0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYTdiYTlmNWU5ODgyYzYzYThmNGJmNDM5N2JhOGNkNTU4YjMzYWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-30T19:49:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-31T16:16:28Z"}, "message": "Normalize bounds also in the UFCS cases (and get more systematic about it)", "tree": {"sha": "fa57b8490e8d9a7d82789abb1e284c823dbd369c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa57b8490e8d9a7d82789abb1e284c823dbd369c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab", "html_url": "https://github.com/rust-lang/rust/commit/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90252b8ddb439a538765ef85532f4caa029b5e8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/90252b8ddb439a538765ef85532f4caa029b5e8e", "html_url": "https://github.com/rust-lang/rust/commit/90252b8ddb439a538765ef85532f4caa029b5e8e"}], "stats": {"total": 149, "additions": 123, "deletions": 26}, "files": [{"sha": "0fa171523f43ad39ab9429997487b8a56a8e571d", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab", "patch": "@@ -363,6 +363,8 @@ fn confirm_candidate<'cx,'tcx>(\n                 break;\n             }\n \n+            // TODO we need the impl_vtable items here\n+\n             match impl_ty {\n                 Some(ty) => ty,\n                 None => {"}, {"sha": "351485d74e88b677a6e19e94414b94a2571c40d8", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab", "patch": "@@ -6385,7 +6385,7 @@ pub fn construct_parameter_environment<'tcx>(\n     }\n \n     fn push_types_from_defs<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                  types: &mut subst::VecPerParamSpace<Ty<'tcx>>,\n+                                  types: &mut VecPerParamSpace<Ty<'tcx>>,\n                                   defs: &[TypeParameterDef<'tcx>]) {\n         for def in defs.iter() {\n             debug!(\"construct_parameter_environment(): push_types_from_defs: def={}\",\n@@ -6915,12 +6915,49 @@ impl<'tcx> RegionEscape for Ty<'tcx> {\n     }\n }\n \n+impl<'tcx,T:RegionEscape> RegionEscape for VecPerParamSpace<T> {\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n+        self.iter_enumerated().any(|(space, _, t)| {\n+            if space == subst::FnSpace {\n+                t.has_regions_escaping_depth(depth+1)\n+            } else {\n+                t.has_regions_escaping_depth(depth)\n+            }\n+        })\n+    }\n+}\n+\n+impl<'tcx> RegionEscape for TypeScheme<'tcx> {\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n+        self.ty.has_regions_escaping_depth(depth) ||\n+            self.generics.has_regions_escaping_depth(depth)\n+    }\n+}\n+\n impl RegionEscape for Region {\n     fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n         self.escapes_depth(depth)\n     }\n }\n \n+impl<'tcx> RegionEscape for Generics<'tcx> {\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n+        self.predicates.has_regions_escaping_depth(depth)\n+    }\n+}\n+\n+impl<'tcx> RegionEscape for Predicate<'tcx> {\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n+        match *self {\n+            Predicate::Trait(ref data) => data.has_regions_escaping_depth(depth),\n+            Predicate::Equate(ref data) => data.has_regions_escaping_depth(depth),\n+            Predicate::RegionOutlives(ref data) => data.has_regions_escaping_depth(depth),\n+            Predicate::TypeOutlives(ref data) => data.has_regions_escaping_depth(depth),\n+            Predicate::Projection(ref data) => data.has_regions_escaping_depth(depth),\n+        }\n+    }\n+}\n+\n impl<'tcx> RegionEscape for TraitRef<'tcx> {\n     fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n         self.substs.types.iter().any(|t| t.has_regions_escaping_depth(depth)) ||\n@@ -6988,9 +7025,15 @@ pub trait HasProjectionTypes {\n     fn has_projection_types(&self) -> bool;\n }\n \n+impl<'tcx,T:HasProjectionTypes> HasProjectionTypes for VecPerParamSpace<T> {\n+    fn has_projection_types(&self) -> bool {\n+        self.iter().any(|p| p.has_projection_types())\n+    }\n+}\n+\n impl<'tcx> HasProjectionTypes for ty::GenericBounds<'tcx> {\n     fn has_projection_types(&self) -> bool {\n-        self.predicates.iter().any(|p| p.has_projection_types())\n+        self.predicates.has_projection_types()\n     }\n }\n "}, {"sha": "4e6593dedddf7cff6c558100d63b89b210670f1e", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab", "patch": "@@ -216,7 +216,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,\n     //\n     // Note that as the method comes from a trait, it should not have\n     // any late-bound regions appearing in its bounds.\n-    let method_bounds = method_ty.generics.to_bounds(fcx.tcx(), trait_ref.substs);\n+    let method_bounds = fcx.instantiate_bounds(span, trait_ref.substs, &method_ty.generics);\n     assert!(!method_bounds.has_escaping_regions());\n     fcx.add_obligations_for_parameters(\n         traits::ObligationCause::misc(span, fcx.body_id),"}, {"sha": "610a5c0b2461d1e23b7c1d4f58e16c1ccc47bad9", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab", "patch": "@@ -768,6 +768,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                     // Check whether the impl imposes obligations we have to worry about.\n                     let impl_generics = ty::lookup_item_type(self.tcx(), impl_def_id).generics;\n                     let impl_bounds = impl_generics.to_bounds(self.tcx(), substs);\n+                    // TODO assoc type normalization here?\n \n                     // Erase any late-bound regions bound in the impl\n                     // which appear in the bounds."}, {"sha": "e2691a778ac4e118966b322cd18c58def3da4629", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab", "patch": "@@ -93,7 +93,7 @@ use middle::subst::{mod, Subst, Substs, VecPerParamSpace, ParamSpace};\n use middle::traits;\n use middle::ty::{FnSig, VariantInfo, TypeScheme};\n use middle::ty::{Disr, ParamTy, ParameterEnvironment};\n-use middle::ty::{mod, HasProjectionTypes, Ty};\n+use middle::ty::{mod, HasProjectionTypes, RegionEscape, Ty};\n use middle::ty::liberate_late_bound_regions;\n use middle::ty::{MethodCall, MethodCallee, MethodMap, ObjectCastMap};\n use middle::ty_fold::{TypeFolder, TypeFoldable};\n@@ -1741,6 +1741,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         result\n     }\n \n+    /// As `instantiate_type_scheme`, but for the bounds found in a\n+    /// generic type scheme.\n+    fn instantiate_bounds(&self,\n+                          span: Span,\n+                          substs: &Substs<'tcx>,\n+                          generics: &ty::Generics<'tcx>)\n+                          -> ty::GenericBounds<'tcx>\n+    {\n+        ty::GenericBounds {\n+            predicates: self.instantiate_type_scheme(span, substs, &generics.predicates)\n+        }\n+    }\n+\n+\n     fn normalize_associated_types_in<T>(&self, span: Span, value: &T) -> T\n         where T : TypeFoldable<'tcx> + Clone + HasProjectionTypes\n     {\n@@ -1852,7 +1866,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 span,\n                 &type_scheme.generics);\n         let bounds =\n-            type_scheme.generics.to_bounds(self.tcx(), &substs);\n+            self.instantiate_bounds(span, &substs, &type_scheme.generics);\n         self.add_obligations_for_parameters(\n             traits::ObligationCause::new(\n                 span,\n@@ -4455,7 +4469,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                 if let Some(did) = did {\n                     let polytype = ty::lookup_item_type(tcx, did);\n                     let substs = Substs::new_type(vec![idx_type], vec![]);\n-                    let bounds = polytype.generics.to_bounds(tcx, &substs);\n+                    let bounds = fcx.instantiate_bounds(expr.span, &substs, &polytype.generics);\n                     fcx.add_obligations_for_parameters(\n                         traits::ObligationCause::new(expr.span,\n                                                      fcx.body_id,\n@@ -5270,31 +5284,20 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     }\n \n     // The things we are substituting into the type should not contain\n-    // escaping late-bound regions.\n+    // escaping late-bound regions, and nor should the base type scheme.\n     assert!(!substs.has_regions_escaping_depth(0));\n+    assert!(!type_scheme.has_escaping_regions());\n \n-    // In the case of static items taken from impls, there may be\n-    // late-bound regions associated with the impl (not declared on\n-    // the fn itself). Those should be replaced with fresh variables\n-    // now. These can appear either on the type being referenced, or\n-    // on the associated bounds.\n-    let bounds = type_scheme.generics.to_bounds(fcx.tcx(), &substs);\n-    let (ty_late_bound, bounds) =\n-        fcx.infcx().replace_late_bound_regions_with_fresh_var(\n-            span,\n-            infer::FnCall,\n-            &ty::Binder((type_scheme.ty, bounds))).0;\n-\n-    debug!(\"after late-bounds have been replaced: ty_late_bound={}\", ty_late_bound.repr(fcx.tcx()));\n-    debug!(\"after late-bounds have been replaced: bounds={}\", bounds.repr(fcx.tcx()));\n-\n+    // Add all the obligations that are required, substituting and\n+    // normalized appropriately.\n+    let bounds = fcx.instantiate_bounds(span, &substs, &type_scheme.generics);\n     fcx.add_obligations_for_parameters(\n         traits::ObligationCause::new(span, fcx.body_id, traits::ItemObligation(def.def_id())),\n         &bounds);\n \n     // Substitute the values for the type parameters into the type of\n     // the referenced item.\n-    let ty_substituted = fcx.instantiate_type_scheme(span, &substs, &ty_late_bound);\n+    let ty_substituted = fcx.instantiate_type_scheme(span, &substs, &type_scheme.ty);\n \n     fcx.write_ty(node_id, ty_substituted);\n     fcx.write_substs(node_id, ty::ItemSubsts { substs: substs });"}, {"sha": "2d9b243e00e189dcf44dac0da49587846ad5876c", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab", "patch": "@@ -269,7 +269,14 @@ impl<'cx,'tcx> BoundsChecker<'cx,'tcx> {\n     pub fn check_trait_ref(&mut self, trait_ref: &ty::TraitRef<'tcx>) {\n         let trait_def = ty::lookup_trait_def(self.fcx.tcx(), trait_ref.def_id);\n \n-        let bounds = trait_def.generics.to_bounds(self.tcx(), trait_ref.substs);\n+        // TODO uncommented this line causes failures because the impl\n+        // obligations are not registered when we do a projection, and\n+        // in this case it's those obligations that make the link\n+        // between the normalized type ($1) and the result\n+        //\n+        // let bounds = self.fcx.instantiate_bounds(self.span, trait_ref.substs, &trait_def.generics);\n+\n+        let bounds = trait_def.generics.to_bounds(self.fcx.tcx(), trait_ref.substs);\n         self.fcx.add_obligations_for_parameters(\n             traits::ObligationCause::new(\n                 self.span,\n@@ -319,13 +326,14 @@ impl<'cx,'tcx> TypeFolder<'tcx> for BoundsChecker<'cx,'tcx> {\n             ty::ty_struct(type_id, substs) |\n             ty::ty_enum(type_id, substs) => {\n                 let type_scheme = ty::lookup_item_type(self.fcx.tcx(), type_id);\n+                let bounds = self.fcx.instantiate_bounds(self.span, substs, &type_scheme.generics);\n \n                 if self.binding_count == 0 {\n                     self.fcx.add_obligations_for_parameters(\n                         traits::ObligationCause::new(self.span,\n                                                      self.fcx.body_id,\n                                                      traits::ItemObligation(type_id)),\n-                        &type_scheme.generics.to_bounds(self.tcx(), substs));\n+                        &bounds);\n                 } else {\n                     // There are two circumstances in which we ignore\n                     // region obligations.\n@@ -349,7 +357,6 @@ impl<'cx,'tcx> TypeFolder<'tcx> for BoundsChecker<'cx,'tcx> {\n                     //\n                     // (I believe we should do the same for traits, but\n                     // that will require an RFC. -nmatsakis)\n-                    let bounds = type_scheme.generics.to_bounds(self.tcx(), substs);\n                     let bounds = filter_to_trait_obligations(bounds);\n                     self.fcx.add_obligations_for_parameters(\n                         traits::ObligationCause::new(self.span,"}, {"sha": "0fd477204215e10a6147a7e71372aabfb7c2e1b7", "filename": "src/test/run-pass/associated-types-normalize-in-bounds-ufcs.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs?ref=0aa7ba9f5e9882c63a8f4bf4397ba8cd558b33ab", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we normalize associated types that appear in bounds; if\n+// we didn't, the call to `self.split2()` fails to type check.\n+\n+#![feature(associated_types)]\n+\n+struct Splits<'a, T, P>;\n+struct SplitsN<I>;\n+\n+trait SliceExt2 for Sized? {\n+    type Item;\n+\n+    fn split2<'a, P>(&'a self, pred: P) -> Splits<'a, Self::Item, P>\n+        where P: FnMut(&Self::Item) -> bool;\n+    fn splitn2<'a, P>(&'a self, n: uint, pred: P) -> SplitsN<Splits<'a, Self::Item, P>>\n+        where P: FnMut(&Self::Item) -> bool;\n+}\n+\n+impl<T> SliceExt2 for [T] {\n+    type Item = T;\n+\n+    fn split2<P>(&self, pred: P) -> Splits<T, P> where P: FnMut(&T) -> bool {\n+        loop {}\n+    }\n+\n+    fn splitn2<P>(&self, n: uint, pred: P) -> SplitsN<Splits<T, P>> where P: FnMut(&T) -> bool {\n+        SliceExt2::split2(self, pred);\n+        loop {}\n+    }\n+}\n+\n+fn main() { }"}]}