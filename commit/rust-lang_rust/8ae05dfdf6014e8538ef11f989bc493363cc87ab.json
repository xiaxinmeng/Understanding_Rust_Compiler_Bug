{"sha": "8ae05dfdf6014e8538ef11f989bc493363cc87ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZTA1ZGZkZjYwMTRlODUzOGVmMTFmOTg5YmM0OTMzNjNjYzg3YWI=", "commit": {"author": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-02-17T19:13:51Z"}, "committer": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-02-17T19:15:24Z"}, "message": "try-back-block-type test: Use TryFromSliceError for From test\n\nUsing `i32` is rather fragile because it has many implementations -\nand indeed I'm about to add one.\n\nTryFromSliceError is nice because it doesn't seem likely to grow new\nconversions.  We still have one conversion, from Infallible.\n\nSigned-off-by: Ian Jackson <ijackson@chiark.greenend.org.uk>", "tree": {"sha": "63ad6f5079208b8ee9e9f18508555ee414ad97b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63ad6f5079208b8ee9e9f18508555ee414ad97b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ae05dfdf6014e8538ef11f989bc493363cc87ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae05dfdf6014e8538ef11f989bc493363cc87ab", "html_url": "https://github.com/rust-lang/rust/commit/8ae05dfdf6014e8538ef11f989bc493363cc87ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ae05dfdf6014e8538ef11f989bc493363cc87ab/comments", "author": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee88f46bb5e27c4d9f30326e69ff2298dcbeecb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee88f46bb5e27c4d9f30326e69ff2298dcbeecb1", "html_url": "https://github.com/rust-lang/rust/commit/ee88f46bb5e27c4d9f30326e69ff2298dcbeecb1"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "ef6e690e1bd0e03edc6ffbeb3bc76af3bc4dd3c7", "filename": "src/test/ui/try-block/try-block-bad-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ae05dfdf6014e8538ef11f989bc493363cc87ab/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae05dfdf6014e8538ef11f989bc493363cc87ab/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs?ref=8ae05dfdf6014e8538ef11f989bc493363cc87ab", "patch": "@@ -3,7 +3,7 @@\n #![feature(try_blocks)]\n \n pub fn main() {\n-    let res: Result<u32, i32> = try {\n+    let res: Result<u32, std::array::TryFromSliceError> = try {\n         Err(\"\")?; //~ ERROR `?` couldn't convert the error\n         5\n     };"}, {"sha": "75a42c0d6b71b9f08103de11072e2aa50054ceb7", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ae05dfdf6014e8538ef11f989bc493363cc87ab/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ae05dfdf6014e8538ef11f989bc493363cc87ab/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=8ae05dfdf6014e8538ef11f989bc493363cc87ab", "patch": "@@ -1,16 +1,12 @@\n-error[E0277]: `?` couldn't convert the error to `i32`\n+error[E0277]: `?` couldn't convert the error to `TryFromSliceError`\n   --> $DIR/try-block-bad-type.rs:7:16\n    |\n LL |         Err(\"\")?;\n-   |                ^ the trait `From<&str>` is not implemented for `i32`\n+   |                ^ the trait `From<&str>` is not implemented for `TryFromSliceError`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following implementations were found:\n-             <i32 as From<NonZeroI32>>\n-             <i32 as From<bool>>\n-             <i32 as From<i16>>\n-             <i32 as From<i8>>\n-           and 2 others\n+             <TryFromSliceError as From<Infallible>>\n    = note: required by `from`\n \n error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Ok == &str`"}]}