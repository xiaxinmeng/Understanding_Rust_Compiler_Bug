{"sha": "be758ef5ab570b7685c9a5eecacab65911da9e6f", "node_id": "C_kwDOAAsO6NoAKGJlNzU4ZWY1YWI1NzBiNzY4NWM5YTVlZWNhY2FiNjU5MTFkYTllNmY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-18T18:41:14Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-09T17:45:13Z"}, "message": "Add ui test.", "tree": {"sha": "5e595e003c43d4bdd51c67fcfbf5e260762cb8a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e595e003c43d4bdd51c67fcfbf5e260762cb8a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be758ef5ab570b7685c9a5eecacab65911da9e6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be758ef5ab570b7685c9a5eecacab65911da9e6f", "html_url": "https://github.com/rust-lang/rust/commit/be758ef5ab570b7685c9a5eecacab65911da9e6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be758ef5ab570b7685c9a5eecacab65911da9e6f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f2657d1101b50f9b71ae460b762d330cc8426b", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f2657d1101b50f9b71ae460b762d330cc8426b", "html_url": "https://github.com/rust-lang/rust/commit/39f2657d1101b50f9b71ae460b762d330cc8426b"}], "stats": {"total": 139, "additions": 128, "deletions": 11}, "files": [{"sha": "e646dfba3e02755b8005b738497dcb1e168ebf8d", "filename": "tests/ui/binding/issue-53114-safety-checks.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be758ef5ab570b7685c9a5eecacab65911da9e6f/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be758ef5ab570b7685c9a5eecacab65911da9e6f/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs?ref=be758ef5ab570b7685c9a5eecacab65911da9e6f", "patch": "@@ -30,6 +30,20 @@ fn let_wild_gets_unsafe_field() {\n     let (_,) = (&u2.a,); //~ ERROR   [E0133]\n }\n \n+fn let_ascribe_gets_unsafe_field() {\n+    let u1 = U { a: I(0) };\n+    let u2 = U { a: I(1) };\n+    let p = P { a: &2, b: &3 };\n+    let _: _ = &p.b;  //~ ERROR    reference to packed field\n+    let _: _ = u1.a;  //~ ERROR  [E0133]\n+    let _: _ = &u2.a; //~ ERROR  [E0133]\n+\n+    // variation on above with `_` in substructure\n+    let (_,): _ = (&p.b,);  //~ ERROR     reference to packed field\n+    let (_,): _ = (u1.a,);  //~ ERROR   [E0133]\n+    let (_,): _ = (&u2.a,); //~ ERROR   [E0133]\n+}\n+\n fn match_unsafe_field_to_wild() {\n     let u1 = U { a: I(0) };\n     let u2 = U { a: I(1) };"}, {"sha": "0760e04490ca9cbdffa03782abf997f4cae8c484", "filename": "tests/ui/binding/issue-53114-safety-checks.stderr", "status": "modified", "additions": 57, "deletions": 7, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/be758ef5ab570b7685c9a5eecacab65911da9e6f/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be758ef5ab570b7685c9a5eecacab65911da9e6f/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr?ref=be758ef5ab570b7685c9a5eecacab65911da9e6f", "patch": "@@ -17,7 +17,25 @@ LL |     let (_,) = (&p.b,);\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n-  --> $DIR/issue-53114-safety-checks.rs:37:11\n+  --> $DIR/issue-53114-safety-checks.rs:37:16\n+   |\n+LL |     let _: _ = &p.b;\n+   |                ^^^^\n+   |\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/issue-53114-safety-checks.rs:42:20\n+   |\n+LL |     let (_,): _ = (&p.b,);\n+   |                    ^^^^\n+   |\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/issue-53114-safety-checks.rs:51:11\n    |\n LL |     match &p.b  { _ => { } }\n    |           ^^^^\n@@ -26,7 +44,7 @@ LL |     match &p.b  { _ => { } }\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n-  --> $DIR/issue-53114-safety-checks.rs:42:12\n+  --> $DIR/issue-53114-safety-checks.rs:56:12\n    |\n LL |     match (&p.b,)  { (_,) => { } }\n    |            ^^^^\n@@ -59,38 +77,70 @@ LL |     let (_,) = (&u2.a,);\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:38:11\n+  --> $DIR/issue-53114-safety-checks.rs:38:12\n+   |\n+LL |     let _: _ = u1.a;\n+   |            ^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/issue-53114-safety-checks.rs:39:16\n+   |\n+LL |     let _: _ = &u2.a;\n+   |                ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/issue-53114-safety-checks.rs:43:20\n+   |\n+LL |     let (_,): _ = (u1.a,);\n+   |                    ^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/issue-53114-safety-checks.rs:44:20\n+   |\n+LL |     let (_,): _ = (&u2.a,);\n+   |                    ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/issue-53114-safety-checks.rs:52:11\n    |\n LL |     match u1.a  { _ => { } }\n    |           ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:39:11\n+  --> $DIR/issue-53114-safety-checks.rs:53:11\n    |\n LL |     match &u2.a { _ => { } }\n    |           ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:43:12\n+  --> $DIR/issue-53114-safety-checks.rs:57:12\n    |\n LL |     match (u1.a,)  { (_,) => { } }\n    |            ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:44:12\n+  --> $DIR/issue-53114-safety-checks.rs:58:12\n    |\n LL |     match (&u2.a,) { (_,) => { } }\n    |            ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 17 previous errors\n \n Some errors have detailed explanations: E0133, E0793.\n For more information about an error, try `rustc --explain E0133`."}, {"sha": "37b5c5d9d7ac50a784195c2fa2f0eb22e4322c1d", "filename": "tests/ui/borrowck/let_underscore_temporary.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/be758ef5ab570b7685c9a5eecacab65911da9e6f/tests%2Fui%2Fborrowck%2Flet_underscore_temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be758ef5ab570b7685c9a5eecacab65911da9e6f/tests%2Fui%2Fborrowck%2Flet_underscore_temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Flet_underscore_temporary.rs?ref=be758ef5ab570b7685c9a5eecacab65911da9e6f", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+\n+fn let_underscore(string: &Option<&str>, mut num: Option<i32>) {\n+    let _ = if let Some(s) = *string { s.len() } else { 0 };\n+    let _ = if let Some(s) = &num { s } else { &0 };\n+    let _ = if let Some(s) = &mut num {\n+        *s += 1;\n+        s\n+    } else {\n+        &mut 0\n+    };\n+    let _ = if let Some(ref s) = num { s } else { &0 };\n+    let _ = if let Some(mut s) = num {\n+        s += 1;\n+        s\n+    } else {\n+        0\n+    };\n+    let _ = if let Some(ref mut s) = num {\n+        *s += 1;\n+        s\n+    } else {\n+        &mut 0\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "62b8710a733d78a26f6286e62381de9e0351f699", "filename": "tests/ui/unsafe/unsafe-fn-deref-ptr.mir.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be758ef5ab570b7685c9a5eecacab65911da9e6f/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be758ef5ab570b7685c9a5eecacab65911da9e6f/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.mir.stderr?ref=be758ef5ab570b7685c9a5eecacab65911da9e6f", "patch": "@@ -1,11 +1,19 @@\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-fn-deref-ptr.rs:5:12\n+  --> $DIR/unsafe-fn-deref-ptr.rs:6:12\n+   |\n+LL |     let _: u8 = *p;\n+   |            ^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-fn-deref-ptr.rs:7:12\n    |\n LL |     return *p;\n    |            ^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "72c881061c48974aa0eb2b3da0f53932d7db6c9b", "filename": "tests/ui/unsafe/unsafe-fn-deref-ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be758ef5ab570b7685c9a5eecacab65911da9e6f/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be758ef5ab570b7685c9a5eecacab65911da9e6f/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.rs?ref=be758ef5ab570b7685c9a5eecacab65911da9e6f", "patch": "@@ -2,6 +2,8 @@\n // [thir]compile-flags: -Z thir-unsafeck\n \n fn f(p: *const u8) -> u8 {\n+    let _ = *p; //[thir]~ ERROR dereference of raw pointer is unsafe\n+    let _: u8 = *p; //~ ERROR dereference of raw pointer is unsafe\n     return *p; //~ ERROR dereference of raw pointer is unsafe\n }\n "}, {"sha": "24313352a41e0412f973036e35eb2dd5ad8a3ecb", "filename": "tests/ui/unsafe/unsafe-fn-deref-ptr.thir.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be758ef5ab570b7685c9a5eecacab65911da9e6f/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be758ef5ab570b7685c9a5eecacab65911da9e6f/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.thir.stderr?ref=be758ef5ab570b7685c9a5eecacab65911da9e6f", "patch": "@@ -1,11 +1,27 @@\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-fn-deref-ptr.rs:5:12\n+  --> $DIR/unsafe-fn-deref-ptr.rs:5:13\n+   |\n+LL |     let _ = *p;\n+   |             ^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-fn-deref-ptr.rs:6:17\n+   |\n+LL |     let _: u8 = *p;\n+   |                 ^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-fn-deref-ptr.rs:7:12\n    |\n LL |     return *p;\n    |            ^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}]}