{"sha": "dbb10b87f8e4365298ed33a6ed96bffe66a1951e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYjEwYjg3ZjhlNDM2NTI5OGVkMzNhNmVkOTZiZmZlNjZhMTk1MWU=", "commit": {"author": {"name": "Hrishi Dharam", "email": "hdharam@berkeley.edu", "date": "2021-05-02T16:42:28Z"}, "committer": {"name": "hamidreza kalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2021-07-29T10:55:08Z"}, "message": "add xor-swap lint", "tree": {"sha": "78516da3a3be2f1e8311acbb2c642e36e96c5dd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78516da3a3be2f1e8311acbb2c642e36e96c5dd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbb10b87f8e4365298ed33a6ed96bffe66a1951e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb10b87f8e4365298ed33a6ed96bffe66a1951e", "html_url": "https://github.com/rust-lang/rust/commit/dbb10b87f8e4365298ed33a6ed96bffe66a1951e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbb10b87f8e4365298ed33a6ed96bffe66a1951e/comments", "author": {"login": "hrishisd", "id": 3607022, "node_id": "MDQ6VXNlcjM2MDcwMjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3607022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hrishisd", "html_url": "https://github.com/hrishisd", "followers_url": "https://api.github.com/users/hrishisd/followers", "following_url": "https://api.github.com/users/hrishisd/following{/other_user}", "gists_url": "https://api.github.com/users/hrishisd/gists{/gist_id}", "starred_url": "https://api.github.com/users/hrishisd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hrishisd/subscriptions", "organizations_url": "https://api.github.com/users/hrishisd/orgs", "repos_url": "https://api.github.com/users/hrishisd/repos", "events_url": "https://api.github.com/users/hrishisd/events{/privacy}", "received_events_url": "https://api.github.com/users/hrishisd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cce3f643bfcbb92d5a1bb71858c9cbaff749d6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cce3f643bfcbb92d5a1bb71858c9cbaff749d6b", "html_url": "https://github.com/rust-lang/rust/commit/0cce3f643bfcbb92d5a1bb71858c9cbaff749d6b"}], "stats": {"total": 247, "additions": 239, "deletions": 8}, "files": [{"sha": "601fa83ad899dee3b24746a714760c469be56320", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbb10b87f8e4365298ed33a6ed96bffe66a1951e/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/dbb10b87f8e4365298ed33a6ed96bffe66a1951e/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=dbb10b87f8e4365298ed33a6ed96bffe66a1951e", "patch": "@@ -2900,6 +2900,7 @@ Released 2018-09-13\n [`wrong_pub_self_convention`]: https://rust-lang.github.io/rust-clippy/master/index.html#wrong_pub_self_convention\n [`wrong_self_convention`]: https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention\n [`wrong_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#wrong_transmute\n+[`xor_swap`]: https://rust-lang.github.io/rust-clippy/master/index.html#xor_swap\n [`zero_divided_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_divided_by_zero\n [`zero_prefixed_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\n [`zero_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr"}, {"sha": "c4197bab82a03fc0b814e2640e8af35ab8b7f3f4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbb10b87f8e4365298ed33a6ed96bffe66a1951e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb10b87f8e4365298ed33a6ed96bffe66a1951e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=dbb10b87f8e4365298ed33a6ed96bffe66a1951e", "patch": "@@ -922,6 +922,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n         swap::ALMOST_SWAPPED,\n         swap::MANUAL_SWAP,\n+        swap::XOR_SWAP,\n         tabs_in_doc_comments::TABS_IN_DOC_COMMENTS,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n         to_digit_is_some::TO_DIGIT_IS_SOME,\n@@ -1419,6 +1420,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n         LintId::of(swap::ALMOST_SWAPPED),\n         LintId::of(swap::MANUAL_SWAP),\n+        LintId::of(swap::XOR_SWAP),\n         LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n         LintId::of(temporary_assignment::TEMPORARY_ASSIGNMENT),\n         LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),\n@@ -1647,6 +1649,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n         LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n         LintId::of(swap::MANUAL_SWAP),\n+        LintId::of(swap::XOR_SWAP),\n         LintId::of(temporary_assignment::TEMPORARY_ASSIGNMENT),\n         LintId::of(transmute::CROSSPOINTER_TRANSMUTE),\n         LintId::of(transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS),"}, {"sha": "6dceec65574f22e9551e97e3ca07fb80eb9ea3a5", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 114, "deletions": 3, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/dbb10b87f8e4365298ed33a6ed96bffe66a1951e/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb10b87f8e4365298ed33a6ed96bffe66a1951e/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=dbb10b87f8e4365298ed33a6ed96bffe66a1951e", "patch": "@@ -1,14 +1,15 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{differing_macro_contexts, eq_expr_value};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Block, Expr, ExprKind, PatKind, QPath, StmtKind};\n+use rustc_hir::{BinOpKind, Block, Expr, ExprKind, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Spanned;\n use rustc_span::sym;\n \n declare_clippy_lint! {\n@@ -64,12 +65,43 @@ declare_clippy_lint! {\n     \"`foo = bar; bar = foo` sequence\"\n }\n \n-declare_lint_pass!(Swap => [MANUAL_SWAP, ALMOST_SWAPPED]);\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for uses of xor-based swaps.\n+    ///\n+    /// **Why is this bad?** The `std::mem::swap` function exposes the intent better\n+    /// without deinitializing or copying either variable.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let mut a = 1;\n+    /// let mut b = 2;\n+    ///\n+    /// a ^= b;\n+    /// b ^= a;\n+    /// a ^= b;\n+    /// ```\n+    ///\n+    /// Use std::mem::swap() instead:\n+    /// ```rust\n+    /// let mut a = 1;\n+    /// let mut b = 2;\n+    /// std::mem::swap(&mut a, &mut b);\n+    /// ```\n+    pub XOR_SWAP,\n+    complexity,\n+    \"xor-based swap of two variables\"\n+}\n+\n+declare_lint_pass!(Swap => [MANUAL_SWAP, ALMOST_SWAPPED, XOR_SWAP]);\n \n impl<'tcx> LateLintPass<'tcx> for Swap {\n     fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx Block<'_>) {\n         check_manual_swap(cx, block);\n         check_suspicious_swap(cx, block);\n+        check_xor_swap(cx, block);\n     }\n }\n \n@@ -262,3 +294,82 @@ fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n         }\n     }\n }\n+\n+/// Implementation of the `XOR_SWAP` lint.\n+fn check_xor_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n+    for window in block.stmts.windows(3) {\n+        if_chain! {\n+            if let Some((lhs0, rhs0)) = extract_sides_of_xor_assign(&window[0]);\n+            if let Some((lhs1, rhs1)) = extract_sides_of_xor_assign(&window[1]);\n+            if let Some((lhs2, rhs2)) = extract_sides_of_xor_assign(&window[2]);\n+            if eq_expr_value(cx, lhs0, rhs1)\n+               && eq_expr_value(cx, rhs1, lhs2)\n+               && eq_expr_value(cx, rhs0, lhs1)\n+               && eq_expr_value(cx, lhs1, rhs2);\n+            then {\n+                let span = window[0].span.to(window[2].span);\n+                let mut applicability = Applicability::MachineApplicable;\n+                match check_for_slice(cx, lhs0, rhs0) {\n+                    Slice::Swappable(slice, idx0, idx1) => {\n+                        if let Some(slice) = Sugg::hir_opt(cx, slice) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                XOR_SWAP,\n+                                span,\n+                                &format!(\n+                                    \"this xor-based swap of the elements of `{}` can be \\\n+                                    more clearly expressed using `.swap`\",\n+                                    slice\n+                                ),\n+                                \"try\",\n+                                format!(\n+                                    \"{}.swap({}, {})\",\n+                                    slice.maybe_par(),\n+                                    snippet_with_applicability(cx, idx0.span, \"..\", &mut applicability),\n+                                    snippet_with_applicability(cx, idx1.span, \"..\", &mut applicability)\n+                                ),\n+                                applicability\n+                            )\n+                        }\n+                    }\n+                    Slice::None => {\n+                        if let (Some(first), Some(second)) = (Sugg::hir_opt(cx, lhs0), Sugg::hir_opt(cx, rhs0)) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                XOR_SWAP,\n+                                span,\n+                                &format!(\n+                                    \"this xor-based swap of `{}` and `{}` can be \\\n+                                    more clearly expressed using `std::mem::swap`\",\n+                                    first, second\n+                                ),\n+                                \"try\",\n+                                format!(\"std::mem::swap({}, {})\", first.mut_addr(), second.mut_addr()),\n+                                applicability,\n+                            );\n+                        }\n+                    }\n+                    Slice::NotSwappable => {}\n+                }\n+            }\n+        };\n+    }\n+}\n+\n+/// Returns the lhs and rhs of an xor assignment statement.  \n+fn extract_sides_of_xor_assign<'a, 'hir>(stmt: &'a Stmt<'hir>) -> Option<(&'a Expr<'hir>, &'a Expr<'hir>)> {\n+    if let StmtKind::Semi(expr) = stmt.kind {\n+        if let ExprKind::AssignOp(\n+            Spanned {\n+                node: BinOpKind::BitXor,\n+                ..\n+            },\n+            lhs,\n+            rhs,\n+        ) = expr.kind\n+        {\n+            return Some((lhs, rhs));\n+        }\n+    }\n+    None\n+}"}, {"sha": "e0d412b2198f2fe248516991c7851566010c3d29", "filename": "tests/ui/swap.fixed", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dbb10b87f8e4365298ed33a6ed96bffe66a1951e/tests%2Fui%2Fswap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dbb10b87f8e4365298ed33a6ed96bffe66a1951e/tests%2Fui%2Fswap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.fixed?ref=dbb10b87f8e4365298ed33a6ed96bffe66a1951e", "patch": "@@ -60,13 +60,55 @@ fn vec() {\n     foo.swap(0, 1);\n }\n \n+fn xor_swap_locals() {\n+    // This is an xor-based swap of local variables.\n+    let mut a = 0;\n+    let mut b = 1;\n+    std::mem::swap(&mut a, &mut b)\n+}\n+\n+fn xor_field_swap() {\n+    // This is an xor-based swap of fields in a struct.\n+    let mut bar = Bar { a: 0, b: 1 };\n+    std::mem::swap(&mut bar.a, &mut bar.b)\n+}\n+\n+fn xor_slice_swap() {\n+    // This is an xor-based swap of a slice\n+    let foo = &mut [1, 2];\n+    foo.swap(0, 1)\n+}\n+\n+fn xor_no_swap() {\n+    // This is a sequence of xor-assignment statements that doesn't result in a swap.\n+    let mut a = 0;\n+    let mut b = 1;\n+    let mut c = 2;\n+    a ^= b;\n+    b ^= c;\n+    a ^= c;\n+    c ^= a;\n+}\n+\n+fn xor_unswappable_slice() {\n+    let foo = &mut [vec![1, 2], vec![3, 4]];\n+    foo[0][1] ^= foo[1][0];\n+    foo[1][0] ^= foo[0][0];\n+    foo[0][1] ^= foo[1][0];\n+}\n+\n #[rustfmt::skip]\n fn main() {\n     field();\n     array();\n     slice();\n     unswappable_slice();\n     vec();\n+    xor_swap_locals();\n+    xor_field_swap();\n+    xor_slice_swap();\n+    xor_no_swap();\n+    xor_unswappable_slice();\n \n     let mut a = 42;\n     let mut b = 1337;"}, {"sha": "6f8fd6e4c916d9aa915822f83c493b427baf2c35", "filename": "tests/ui/swap.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/dbb10b87f8e4365298ed33a6ed96bffe66a1951e/tests%2Fui%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb10b87f8e4365298ed33a6ed96bffe66a1951e/tests%2Fui%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.rs?ref=dbb10b87f8e4365298ed33a6ed96bffe66a1951e", "patch": "@@ -66,13 +66,61 @@ fn vec() {\n     foo.swap(0, 1);\n }\n \n+fn xor_swap_locals() {\n+    // This is an xor-based swap of local variables.\n+    let mut a = 0;\n+    let mut b = 1;\n+    a ^= b;\n+    b ^= a;\n+    a ^= b;\n+}\n+\n+fn xor_field_swap() {\n+    // This is an xor-based swap of fields in a struct.\n+    let mut bar = Bar { a: 0, b: 1 };\n+    bar.a ^= bar.b;\n+    bar.b ^= bar.a;\n+    bar.a ^= bar.b;\n+}\n+\n+fn xor_slice_swap() {\n+    // This is an xor-based swap of a slice\n+    let foo = &mut [1, 2];\n+    foo[0] ^= foo[1];\n+    foo[1] ^= foo[0];\n+    foo[0] ^= foo[1];\n+}\n+\n+fn xor_no_swap() {\n+    // This is a sequence of xor-assignment statements that doesn't result in a swap.\n+    let mut a = 0;\n+    let mut b = 1;\n+    let mut c = 2;\n+    a ^= b;\n+    b ^= c;\n+    a ^= c;\n+    c ^= a;\n+}\n+\n+fn xor_unswappable_slice() {\n+    let foo = &mut [vec![1, 2], vec![3, 4]];\n+    foo[0][1] ^= foo[1][0];\n+    foo[1][0] ^= foo[0][0];\n+    foo[0][1] ^= foo[1][0];\n+}\n+\n #[rustfmt::skip]\n fn main() {\n     field();\n     array();\n     slice();\n     unswappable_slice();\n     vec();\n+    xor_swap_locals();\n+    xor_field_swap();\n+    xor_slice_swap();\n+    xor_no_swap();\n+    xor_unswappable_slice();\n \n     let mut a = 42;\n     let mut b = 1337;"}, {"sha": "55b470821e2f2334d74b3876a5a321de541d13fa", "filename": "tests/ui/swap.stderr", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dbb10b87f8e4365298ed33a6ed96bffe66a1951e/tests%2Fui%2Fswap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbb10b87f8e4365298ed33a6ed96bffe66a1951e/tests%2Fui%2Fswap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.stderr?ref=dbb10b87f8e4365298ed33a6ed96bffe66a1951e", "patch": "@@ -24,8 +24,34 @@ LL | |     foo[0] = foo[1];\n LL | |     foo[1] = temp;\n    | |_________________^ help: try: `foo.swap(0, 1)`\n \n+error: this xor-based swap of `a` and `b` can be more clearly expressed using `std::mem::swap`\n+  --> $DIR/swap.rs:73:5\n+   |\n+LL | /     a ^= b;\n+LL | |     b ^= a;\n+LL | |     a ^= b;\n+   | |___________^ help: try: `std::mem::swap(&mut a, &mut b)`\n+   |\n+   = note: `-D clippy::xor-swap` implied by `-D warnings`\n+\n+error: this xor-based swap of `bar.a` and `bar.b` can be more clearly expressed using `std::mem::swap`\n+  --> $DIR/swap.rs:81:5\n+   |\n+LL | /     bar.a ^= bar.b;\n+LL | |     bar.b ^= bar.a;\n+LL | |     bar.a ^= bar.b;\n+   | |___________________^ help: try: `std::mem::swap(&mut bar.a, &mut bar.b)`\n+\n+error: this xor-based swap of the elements of `foo` can be more clearly expressed using `.swap`\n+  --> $DIR/swap.rs:89:5\n+   |\n+LL | /     foo[0] ^= foo[1];\n+LL | |     foo[1] ^= foo[0];\n+LL | |     foo[0] ^= foo[1];\n+   | |_____________________^ help: try: `foo.swap(0, 1)`\n+\n error: this looks like you are swapping `a` and `b` manually\n-  --> $DIR/swap.rs:83:7\n+  --> $DIR/swap.rs:131:7\n    |\n LL |       ; let t = a;\n    |  _______^\n@@ -36,7 +62,7 @@ LL | |     b = t;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are swapping `c.0` and `a` manually\n-  --> $DIR/swap.rs:92:7\n+  --> $DIR/swap.rs:140:7\n    |\n LL |       ; let t = c.0;\n    |  _______^\n@@ -47,7 +73,7 @@ LL | |     a = t;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are trying to swap `a` and `b`\n-  --> $DIR/swap.rs:80:5\n+  --> $DIR/swap.rs:128:5\n    |\n LL | /     a = b;\n LL | |     b = a;\n@@ -57,13 +83,13 @@ LL | |     b = a;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are trying to swap `c.0` and `a`\n-  --> $DIR/swap.rs:89:5\n+  --> $DIR/swap.rs:137:5\n    |\n LL | /     c.0 = a;\n LL | |     a = c.0;\n    | |___________^ help: try: `std::mem::swap(&mut c.0, &mut a)`\n    |\n    = note: or maybe you should use `std::mem::replace`?\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 10 previous errors\n "}]}