{"sha": "31741aad3946511893dbaa2fda1d74918f6a8050", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNzQxYWFkMzk0NjUxMTg5M2RiYWEyZmRhMWQ3NDkxOGY2YTgwNTA=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-12T21:23:35Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-12T21:31:21Z"}, "message": "Add `--color` support to bootstrap\n\nThis allows using bootstrap with https://github.com/Canop/bacon.", "tree": {"sha": "48c1e0b198b450f6e7bd63029608c6f3205b72c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48c1e0b198b450f6e7bd63029608c6f3205b72c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31741aad3946511893dbaa2fda1d74918f6a8050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31741aad3946511893dbaa2fda1d74918f6a8050", "html_url": "https://github.com/rust-lang/rust/commit/31741aad3946511893dbaa2fda1d74918f6a8050", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31741aad3946511893dbaa2fda1d74918f6a8050/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f5a42b073dc2bee2aa625052eb066ee07072048", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5a42b073dc2bee2aa625052eb066ee07072048", "html_url": "https://github.com/rust-lang/rust/commit/7f5a42b073dc2bee2aa625052eb066ee07072048"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "508d785834fce0b3e5d6ad555b9c29954d6b1ec6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31741aad3946511893dbaa2fda1d74918f6a8050/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31741aad3946511893dbaa2fda1d74918f6a8050/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=31741aad3946511893dbaa2fda1d74918f6a8050", "patch": "@@ -19,7 +19,7 @@ use crate::compile;\n use crate::config::TargetSelection;\n use crate::dist;\n use crate::doc;\n-use crate::flags::Subcommand;\n+use crate::flags::{Color, Subcommand};\n use crate::install;\n use crate::native;\n use crate::run;\n@@ -811,6 +811,16 @@ impl<'a> Builder<'a> {\n             cargo.env(\"REAL_LIBRARY_PATH\", e);\n         }\n \n+        match self.build.config.color {\n+            Color::Always => {\n+                cargo.arg(\"--color=always\");\n+            }\n+            Color::Never => {\n+                cargo.arg(\"--color=never\");\n+            }\n+            Color::Auto => {} // nothing to do\n+        }\n+\n         if cmd != \"install\" {\n             cargo.arg(\"--target\").arg(target.rustc_target_arg());\n         } else {"}, {"sha": "94319a6d1e9e2d06680eee52d4fe1cd28dae204f", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31741aad3946511893dbaa2fda1d74918f6a8050/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31741aad3946511893dbaa2fda1d74918f6a8050/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=31741aad3946511893dbaa2fda1d74918f6a8050", "patch": "@@ -13,8 +13,8 @@ use std::path::{Path, PathBuf};\n use std::str::FromStr;\n \n use crate::cache::{Interned, INTERNER};\n-use crate::flags::Flags;\n pub use crate::flags::Subcommand;\n+use crate::flags::{Color, Flags};\n use crate::util::exe;\n use build_helper::t;\n use merge::Merge;\n@@ -67,6 +67,7 @@ pub struct Config {\n     pub json_output: bool,\n     pub test_compare_mode: bool,\n     pub llvm_libunwind: Option<LlvmLibunwind>,\n+    pub color: Color,\n \n     pub on_fail: Option<String>,\n     pub stage: u32,\n@@ -577,6 +578,7 @@ impl Config {\n         config.keep_stage = flags.keep_stage;\n         config.keep_stage_std = flags.keep_stage_std;\n         config.bindir = \"bin\".into(); // default\n+        config.color = flags.color;\n         if let Some(value) = flags.deny_warnings {\n             config.deny_warnings = value;\n         }"}, {"sha": "5a8096674c6dae4e8b1d3dbf760b71e6e3fc3660", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/31741aad3946511893dbaa2fda1d74918f6a8050/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31741aad3946511893dbaa2fda1d74918f6a8050/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=31741aad3946511893dbaa2fda1d74918f6a8050", "patch": "@@ -15,6 +15,31 @@ use crate::config::{Config, TargetSelection};\n use crate::setup::Profile;\n use crate::{Build, DocTests};\n \n+pub enum Color {\n+    Always,\n+    Never,\n+    Auto,\n+}\n+\n+impl Default for Color {\n+    fn default() -> Self {\n+        Self::Auto\n+    }\n+}\n+\n+impl std::str::FromStr for Color {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s.to_lowercase().as_str() {\n+            \"always\" => Ok(Self::Always),\n+            \"never\" => Ok(Self::Never),\n+            \"auto\" => Ok(Self::Auto),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n /// Deserialized version of all flags for this compile.\n pub struct Flags {\n     pub verbose: usize, // number of -v args; each extra -v after the first is passed to Cargo\n@@ -34,6 +59,7 @@ pub struct Flags {\n     pub rustc_error_format: Option<String>,\n     pub json_output: bool,\n     pub dry_run: bool,\n+    pub color: Color,\n \n     // This overrides the deny-warnings configuration option,\n     // which passes -Dwarnings to the compiler invocations.\n@@ -184,6 +210,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n         );\n         opts.optopt(\"\", \"error-format\", \"rustc error format\", \"FORMAT\");\n         opts.optflag(\"\", \"json-output\", \"use message-format=json\");\n+        opts.optopt(\"\", \"color\", \"whether to use color in cargo and rustc output\", \"STYLE\");\n         opts.optopt(\n             \"\",\n             \"llvm-skip-rebuild\",\n@@ -644,6 +671,9 @@ Arguments:\n             llvm_skip_rebuild: matches.opt_str(\"llvm-skip-rebuild\").map(|s| s.to_lowercase()).map(\n                 |s| s.parse::<bool>().expect(\"`llvm-skip-rebuild` should be either true or false\"),\n             ),\n+            color: matches\n+                .opt_get_default(\"color\", Color::Auto)\n+                .expect(\"`color` should be `always`, `never`, or `auto`\"),\n         }\n     }\n }"}]}