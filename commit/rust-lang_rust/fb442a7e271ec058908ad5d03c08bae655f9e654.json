{"sha": "fb442a7e271ec058908ad5d03c08bae655f9e654", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNDQyYTdlMjcxZWMwNTg5MDhhZDVkMDNjMDhiYWU2NTVmOWU2NTQ=", "commit": {"author": {"name": "QuietMisdreavus", "email": "bryan@icesoldier.me", "date": "2016-09-26T23:47:09Z"}, "committer": {"name": "QuietMisdreavus", "email": "bryan@icesoldier.me", "date": "2016-09-26T23:47:09Z"}, "message": "rustdoc: format bare functions like rustfmt\n\nsee commit 2a274e72 for details", "tree": {"sha": "cc22afc2a10295253bb40d7cf595b41733449108", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc22afc2a10295253bb40d7cf595b41733449108"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb442a7e271ec058908ad5d03c08bae655f9e654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb442a7e271ec058908ad5d03c08bae655f9e654", "html_url": "https://github.com/rust-lang/rust/commit/fb442a7e271ec058908ad5d03c08bae655f9e654", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb442a7e271ec058908ad5d03c08bae655f9e654/comments", "author": null, "committer": null, "parents": [{"sha": "2a274e720fe8046d8db154ca2661701a519a0033", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a274e720fe8046d8db154ca2661701a519a0033", "html_url": "https://github.com/rust-lang/rust/commit/2a274e720fe8046d8db154ca2661701a519a0033"}], "stats": {"total": 69, "additions": 37, "deletions": 32}, "files": [{"sha": "7b21f37d215855f22d361dba9cab8e4dc6646da9", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/fb442a7e271ec058908ad5d03c08bae655f9e654/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb442a7e271ec058908ad5d03c08bae655f9e654/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=fb442a7e271ec058908ad5d03c08bae655f9e654", "patch": "@@ -621,17 +621,19 @@ impl fmt::Display for clean::Type {\n                             clean::Generic(_) =>\n                                 if f.alternate() {\n                                     primitive_link(f, PrimitiveType::Slice,\n-                                        &format!(\"&amp;{}{}[{:#}]\", lt, m, **bt))\n+                                        &format!(\"&{}{}[{:#}]\", lt, m, **bt))\n                                 } else {\n                                     primitive_link(f, PrimitiveType::Slice,\n                                         &format!(\"&amp;{}{}[{}]\", lt, m, **bt))\n                                 },\n                             _ => {\n-                                primitive_link(f, PrimitiveType::Slice,\n-                                               &format!(\"&amp;{}{}[\", lt, m))?;\n                                 if f.alternate() {\n+                                    primitive_link(f, PrimitiveType::Slice,\n+                                                   &format!(\"&{}{}[\", lt, m))?;\n                                     write!(f, \"{:#}\", **bt)?;\n                                 } else {\n+                                    primitive_link(f, PrimitiveType::Slice,\n+                                                   &format!(\"&amp;{}{}[\", lt, m))?;\n                                     write!(f, \"{}\", **bt)?;\n                                 }\n                                 primitive_link(f, PrimitiveType::Slice, \"]\")\n@@ -640,7 +642,7 @@ impl fmt::Display for clean::Type {\n                     }\n                     _ => {\n                         if f.alternate() {\n-                            write!(f, \"&amp;{}{}{:#}\", lt, m, **ty)\n+                            write!(f, \"&{}{}{:#}\", lt, m, **ty)\n                         } else {\n                             write!(f, \"&amp;{}{}{}\", lt, m, **ty)\n                         }\n@@ -757,7 +759,6 @@ pub fn fmt_impl_for_trait_page(i: &clean::Impl, f: &mut fmt::Formatter) -> fmt::\n impl fmt::Display for clean::Arguments {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         for (i, input) in self.values.iter().enumerate() {\n-            write!(f, \"\\n    \")?;\n             if !input.name.is_empty() {\n                 write!(f, \"{}: \", input.name)?;\n             }\n@@ -766,10 +767,7 @@ impl fmt::Display for clean::Arguments {\n             } else {\n                 write!(f, \"{}\", input.type_)?;\n             }\n-            if i + 1 < self.values.len() { write!(f, \",\")?; }\n-        }\n-        if !self.values.is_empty() {\n-            write!(f, \"\\n\")?;\n+            if i + 1 < self.values.len() { write!(f, \", \")?; }\n         }\n         Ok(())\n     }\n@@ -819,14 +817,12 @@ impl<'a> fmt::Display for Method<'a> {\n                         args_plain.push_str(\"self\");\n                     }\n                     clean::SelfBorrowed(Some(ref lt), mtbl) => {\n-                        let arg = format!(\"{}{} {}self\", amp, *lt, MutableSpace(mtbl));\n-                        args.push_str(&arg);\n-                        args_plain.push_str(&arg);\n+                        args.push_str(&format!(\"{}{} {}self\", amp, *lt, MutableSpace(mtbl)));\n+                        args_plain.push_str(&format!(\"&{} {}self\", *lt, MutableSpace(mtbl)));\n                     }\n                     clean::SelfBorrowed(None, mtbl) => {\n-                        let arg = format!(\"{}{}self\", amp, MutableSpace(mtbl));\n-                        args.push_str(&arg);\n-                        args_plain.push_str(&arg);\n+                        args.push_str(&format!(\"{}{}self\", amp, MutableSpace(mtbl)));\n+                        args_plain.push_str(&format!(\"&{}self\", MutableSpace(mtbl)));\n                     }\n                     clean::SelfExplicit(ref typ) => {\n                         if f.alternate() {\n@@ -839,13 +835,14 @@ impl<'a> fmt::Display for Method<'a> {\n                 }\n             } else {\n                 if i > 0 {\n-                    args.push_str(\"\\n \");\n-                    args_plain.push_str(\"\\n \");\n+                    args.push_str(\"<br> \");\n+                    args_plain.push_str(\" \");\n                 }\n                 if !input.name.is_empty() {\n                     args.push_str(&format!(\"{}: \", input.name));\n                     args_plain.push_str(&format!(\"{}: \", input.name));\n                 }\n+\n                 if f.alternate() {\n                     args.push_str(&format!(\"{:#}\", input.type_));\n                 } else {\n@@ -859,6 +856,11 @@ impl<'a> fmt::Display for Method<'a> {\n             }\n         }\n \n+        if decl.variadic {\n+            args.push_str(\",<br> ...\");\n+            args_plain.push_str(\", ...\");\n+        }\n+\n         let arrow_plain = format!(\"{:#}\", decl.output);\n         let arrow = if f.alternate() {\n             format!(\"{:#}\", decl.output)\n@@ -870,17 +872,20 @@ impl<'a> fmt::Display for Method<'a> {\n         let plain: String;\n         if arrow.is_empty() {\n             output = format!(\"({})\", args);\n-            plain = format!(\"({})\", args_plain);\n+            plain = format!(\"{}({})\", indent.replace(\"&nbsp;\", \" \"), args_plain);\n         } else {\n-            output = format!(\"({args})\\n{arrow}\", args = args, arrow = arrow);\n-            plain = format!(\"({args})\\n{arrow}\", args = args_plain, arrow = arrow_plain);\n+            output = format!(\"({args})<br>{arrow}\", args = args, arrow = arrow);\n+            plain = format!(\"{indent}({args}){arrow}\",\n+                            indent = indent.replace(\"&nbsp;\", \" \"),\n+                            args = args_plain,\n+                            arrow = arrow_plain);\n         }\n \n-        if plain.replace(\"\\n\", \"\").len() > 80 {\n-            let pad = format!(\"\\n{}\", indent);\n-            output = output.replace(\"\\n\", &pad);\n+        if plain.len() > 80 {\n+            let pad = format!(\"<br>{}\", indent);\n+            output = output.replace(\"<br>\", &pad);\n         } else {\n-            output = output.replace(\"\\n\", \"\");\n+            output = output.replace(\"<br>\", \"\");\n         }\n         write!(f, \"{}\", output)\n     }"}, {"sha": "c326b7d8b864d53fc2a0bb4e7eb4a5adde68c184", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fb442a7e271ec058908ad5d03c08bae655f9e654/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb442a7e271ec058908ad5d03c08bae655f9e654/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=fb442a7e271ec058908ad5d03c08bae655f9e654", "patch": "@@ -1975,13 +1975,13 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         UnstableFeatures::Allow => f.constness,\n         _ => hir::Constness::NotConst\n     };\n-    let prefix = format!(\"{vis}{constness}{unsafety}{abi:#}fn {name}{generics:#}\",\n-                         vis = VisSpace(&it.visibility),\n-                         constness = ConstnessSpace(vis_constness),\n-                         unsafety = UnsafetySpace(f.unsafety),\n-                         abi = AbiSpace(f.abi),\n-                         name = it.name.as_ref().unwrap(),\n-                         generics = f.generics)?;\n+    let prefix = format!(\"{}{}{}{:#}fn {}{:#}\",\n+                         VisSpace(&it.visibility),\n+                         ConstnessSpace(vis_constness),\n+                         UnsafetySpace(f.unsafety),\n+                         AbiSpace(f.abi),\n+                         it.name.as_ref().unwrap(),\n+                         f.generics);\n     let indent = repeat(\"&nbsp;\").take(prefix.len()).collect::<String>();\n     write!(w, \"<pre class='rust fn'>{vis}{constness}{unsafety}{abi}fn \\\n                {name}{generics}{decl}{where_clause}</pre>\",\n@@ -1992,7 +1992,7 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n            name = it.name.as_ref().unwrap(),\n            generics = f.generics,\n            where_clause = WhereClause(&f.generics),\n-           decl = f.decl)?;\n+           decl = Method(&f.decl, &indent))?;\n     document(w, cx, it)\n }\n "}]}