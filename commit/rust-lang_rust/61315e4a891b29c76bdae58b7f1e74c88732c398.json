{"sha": "61315e4a891b29c76bdae58b7f1e74c88732c398", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMzE1ZTRhODkxYjI5Yzc2YmRhZTU4YjdmMWU3NGM4ODczMmMzOTg=", "commit": {"author": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-03-25T12:57:43Z"}, "committer": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-03-25T12:57:43Z"}, "message": "use | instead of multiple match arms", "tree": {"sha": "0ad0b2a1783356cfefc92c3b7a1d868539a5d051", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ad0b2a1783356cfefc92c3b7a1d868539a5d051"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61315e4a891b29c76bdae58b7f1e74c88732c398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61315e4a891b29c76bdae58b7f1e74c88732c398", "html_url": "https://github.com/rust-lang/rust/commit/61315e4a891b29c76bdae58b7f1e74c88732c398", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61315e4a891b29c76bdae58b7f1e74c88732c398/comments", "author": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd1585a071718ef9c9fb44f88336608dd7e624a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd1585a071718ef9c9fb44f88336608dd7e624a5", "html_url": "https://github.com/rust-lang/rust/commit/fd1585a071718ef9c9fb44f88336608dd7e624a5"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "bd3cdb970c751ef27d3ed1c54696a7a32c8aa9a8", "filename": "crates/ra_assists/src/inline_local_variable.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/61315e4a891b29c76bdae58b7f1e74c88732c398/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61315e4a891b29c76bdae58b7f1e74c88732c398/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs?ref=61315e4a891b29c76bdae58b7f1e74c88732c398", "patch": "@@ -17,33 +17,33 @@ pub(crate) fn inline_local_varialbe(mut ctx: AssistCtx<impl HirDatabase>) -> Opt\n     }\n     let initializer = let_stmt.initializer()?;\n     let wrap_in_parens = match initializer.kind() {\n-        ExprKind::LambdaExpr(_) => true,\n-        ExprKind::IfExpr(_) => true,\n-        ExprKind::LoopExpr(_) => true,\n-        ExprKind::ForExpr(_) => true,\n-        ExprKind::WhileExpr(_) => true,\n-        ExprKind::ContinueExpr(_) => true,\n-        ExprKind::BreakExpr(_) => true,\n-        ExprKind::Label(_) => true,\n-        ExprKind::ReturnExpr(_) => true,\n-        ExprKind::MatchExpr(_) => true,\n-        ExprKind::StructLit(_) => true,\n-        ExprKind::CastExpr(_) => true,\n-        ExprKind::PrefixExpr(_) => true,\n-        ExprKind::RangeExpr(_) => true,\n-        ExprKind::BinExpr(_) => true,\n-        ExprKind::CallExpr(_) => false,\n-        ExprKind::IndexExpr(_) => false,\n-        ExprKind::MethodCallExpr(_) => false,\n-        ExprKind::FieldExpr(_) => false,\n-        ExprKind::TryExpr(_) => false,\n-        ExprKind::RefExpr(_) => false,\n-        ExprKind::Literal(_) => false,\n-        ExprKind::TupleExpr(_) => false,\n-        ExprKind::ArrayExpr(_) => false,\n-        ExprKind::ParenExpr(_) => false,\n-        ExprKind::PathExpr(_) => false,\n-        ExprKind::BlockExpr(_) => false,\n+        ExprKind::LambdaExpr(_)\n+        | ExprKind::IfExpr(_)\n+        | ExprKind::LoopExpr(_)\n+        | ExprKind::ForExpr(_)\n+        | ExprKind::WhileExpr(_)\n+        | ExprKind::ContinueExpr(_)\n+        | ExprKind::BreakExpr(_)\n+        | ExprKind::Label(_)\n+        | ExprKind::ReturnExpr(_)\n+        | ExprKind::MatchExpr(_)\n+        | ExprKind::StructLit(_)\n+        | ExprKind::CastExpr(_)\n+        | ExprKind::PrefixExpr(_)\n+        | ExprKind::RangeExpr(_)\n+        | ExprKind::BinExpr(_) => true,\n+        ExprKind::CallExpr(_)\n+        | ExprKind::IndexExpr(_)\n+        | ExprKind::MethodCallExpr(_)\n+        | ExprKind::FieldExpr(_)\n+        | ExprKind::TryExpr(_)\n+        | ExprKind::RefExpr(_)\n+        | ExprKind::Literal(_)\n+        | ExprKind::TupleExpr(_)\n+        | ExprKind::ArrayExpr(_)\n+        | ExprKind::ParenExpr(_)\n+        | ExprKind::PathExpr(_)\n+        | ExprKind::BlockExpr(_) => false,\n     };\n \n     let delete_range = if let Some(whitespace) ="}]}