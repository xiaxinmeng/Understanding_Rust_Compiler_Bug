{"sha": "db9b578b71190540cfd84f16f5d310d6ce4cb659", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiOWI1NzhiNzExOTA1NDBjZmQ4NGYxNmY1ZDMxMGQ2Y2U0Y2I2NTk=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2020-02-05T08:31:12Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2020-02-05T08:31:12Z"}, "message": "Reorder declarations of Result::expect_err/unwrap_err to match Option", "tree": {"sha": "0671d8d006f16ecda7e1fc9c3fe896e8365262db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0671d8d006f16ecda7e1fc9c3fe896e8365262db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db9b578b71190540cfd84f16f5d310d6ce4cb659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db9b578b71190540cfd84f16f5d310d6ce4cb659", "html_url": "https://github.com/rust-lang/rust/commit/db9b578b71190540cfd84f16f5d310d6ce4cb659", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db9b578b71190540cfd84f16f5d310d6ce4cb659/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c00d8aa5179ef38f7d83067a8d010bcc26fa0cc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c00d8aa5179ef38f7d83067a8d010bcc26fa0cc3", "html_url": "https://github.com/rust-lang/rust/commit/c00d8aa5179ef38f7d83067a8d010bcc26fa0cc3"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "ee28946f0da7a624e6465cd29e2ad7b37f2e6d5b", "filename": "src/libcore/result.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/db9b578b71190540cfd84f16f5d310d6ce4cb659/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b578b71190540cfd84f16f5d310d6ce4cb659/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=db9b578b71190540cfd84f16f5d310d6ce4cb659", "patch": "@@ -998,30 +998,26 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is an [`Ok`], with a custom panic message provided\n-    /// by the [`Ok`]'s value.\n+    /// Panics if the value is an [`Ok`], with a panic message including the\n+    /// passed message, and the content of the [`Ok`].\n     ///\n     /// [`Ok`]: enum.Result.html#variant.Ok\n     /// [`Err`]: enum.Result.html#variant.Err\n     ///\n-    ///\n     /// # Examples\n     ///\n-    /// ```{.should_panic}\n-    /// let x: Result<u32, &str> = Ok(2);\n-    /// x.unwrap_err(); // panics with `2`\n-    /// ```\n+    /// Basic usage:\n     ///\n-    /// ```\n-    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n-    /// assert_eq!(x.unwrap_err(), \"emergency failure\");\n+    /// ```{.should_panic}\n+    /// let x: Result<u32, &str> = Ok(10);\n+    /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n     /// ```\n     #[inline]\n     #[track_caller]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn unwrap_err(self) -> E {\n+    #[stable(feature = \"result_expect_err\", since = \"1.17.0\")]\n+    pub fn expect_err(self, msg: &str) -> E {\n         match self {\n-            Ok(t) => unwrap_failed(\"called `Result::unwrap_err()` on an `Ok` value\", &t),\n+            Ok(t) => unwrap_failed(msg, &t),\n             Err(e) => e,\n         }\n     }\n@@ -1030,26 +1026,30 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is an [`Ok`], with a panic message including the\n-    /// passed message, and the content of the [`Ok`].\n+    /// Panics if the value is an [`Ok`], with a custom panic message provided\n+    /// by the [`Ok`]'s value.\n     ///\n     /// [`Ok`]: enum.Result.html#variant.Ok\n     /// [`Err`]: enum.Result.html#variant.Err\n     ///\n-    /// # Examples\n     ///\n-    /// Basic usage:\n+    /// # Examples\n     ///\n     /// ```{.should_panic}\n-    /// let x: Result<u32, &str> = Ok(10);\n-    /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// x.unwrap_err(); // panics with `2`\n+    /// ```\n+    ///\n+    /// ```\n+    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n+    /// assert_eq!(x.unwrap_err(), \"emergency failure\");\n     /// ```\n     #[inline]\n     #[track_caller]\n-    #[stable(feature = \"result_expect_err\", since = \"1.17.0\")]\n-    pub fn expect_err(self, msg: &str) -> E {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn unwrap_err(self) -> E {\n         match self {\n-            Ok(t) => unwrap_failed(msg, &t),\n+            Ok(t) => unwrap_failed(\"called `Result::unwrap_err()` on an `Ok` value\", &t),\n             Err(e) => e,\n         }\n     }"}]}