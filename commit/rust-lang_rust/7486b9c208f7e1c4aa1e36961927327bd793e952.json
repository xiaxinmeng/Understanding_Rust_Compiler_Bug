{"sha": "7486b9c208f7e1c4aa1e36961927327bd793e952", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ODZiOWMyMDhmN2UxYzRhYTFlMzY5NjE5MjczMjdiZDc5M2U5NTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-11T21:45:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-11T21:45:29Z"}, "message": "Auto merge of #59044 - petrochenkov:uiui, r=davidtwco\n\nFilter away test annotations from UI test output\n\nIf you worked with UI tests for some time you could notice one issue affecting their readability and also readability of diffs when the tests change.\nLook at the output of this test.\n```rust\nfn main() {\n    let 1 = 2; //~ ERROR refutable pattern in local binding\n}\n```\n```\nerror[E0005]: refutable pattern in local binding: `-2147483648i32..=0i32` not covered\n --> src/main.rs:2:9\n  |\n2 |     let 1 = 2; //~ ERROR refutable pattern in local binding\n  |         ^ pattern `-2147483648i32..=0i32` not covered\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0005`.\n```\nYou can see that the \"refutable pattern in local binding\" is duplicated.\nOne instance is the actual error, and the second instance is the expected error annotation.\nThis annotation is useful in the test input, but in the output it clutters the text and makes it harder to see what text refers to actual errors and what is just comments, especially if there are many errors in a single test file.\n\n@estebank [reported](https://github.com/rust-lang/rust/pull/57379#discussion_r245523361) using the next trick to avoid the clutter\n```rust\nfn main() {\n    let 1 = 2;\n    //~^ ERROR refutable pattern in local binding\n}\n```\n```\nerror[E0005]: refutable pattern in local binding: `-2147483648i32..=0i32` not covered\n --> src/main.rs:2:9\n  |\n2 |     let 1 = 2;\n  |         ^ pattern `-2147483648i32..=0i32` not covered\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0005`.\n```\n, i.e. using `//~^` and placing the annotation one line below will remove the annotation from the output.\n\nHowever, this doesn't always works (consider errors with multi-line spans), and shouldn't be necessary in general!\n`compiletest` could automatically filter away its own annotations from the output instead.\nThis is exactly what this PR does.\n\nr? @davidtwco", "tree": {"sha": "64931921d75e8b07522feb967431abafc57d8fc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64931921d75e8b07522feb967431abafc57d8fc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7486b9c208f7e1c4aa1e36961927327bd793e952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7486b9c208f7e1c4aa1e36961927327bd793e952", "html_url": "https://github.com/rust-lang/rust/commit/7486b9c208f7e1c4aa1e36961927327bd793e952", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7486b9c208f7e1c4aa1e36961927327bd793e952/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e68bf8ae15ee6c052d0bcc9252386c5c5ee86de2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e68bf8ae15ee6c052d0bcc9252386c5c5ee86de2", "html_url": "https://github.com/rust-lang/rust/commit/e68bf8ae15ee6c052d0bcc9252386c5c5ee86de2"}, {"sha": "07f99b9fec4ba0c549596e8e7d99553e86763d35", "url": "https://api.github.com/repos/rust-lang/rust/commits/07f99b9fec4ba0c549596e8e7d99553e86763d35", "html_url": "https://github.com/rust-lang/rust/commit/07f99b9fec4ba0c549596e8e7d99553e86763d35"}], "stats": {"total": 15054, "additions": 7506, "deletions": 7548}, "files": [{"sha": "e0e45d55a9e7383b9067c5a5637e6af3f3ede0aa", "filename": "src/test/rustdoc-ui/deny-intra-link-resolution-failure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error: `[v2]` cannot be resolved, ignoring it...\n   --> $DIR/deny-intra-link-resolution-failure.rs:3:6\n    |\n-LL | /// [v2] //~ ERROR\n+LL | /// [v2]\n    |      ^^ cannot be resolved, ignoring\n    |\n note: lint level defined here"}, {"sha": "9cd50d26766ea9afb7005781e2f2f87eadc5897c", "filename": "src/test/rustdoc-ui/deny-missing-docs-crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Frustdoc-ui%2Fdeny-missing-docs-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Frustdoc-ui%2Fdeny-missing-docs-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeny-missing-docs-crate.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,21 +1,21 @@\n error: missing documentation for crate\n   --> $DIR/deny-missing-docs-crate.rs:1:1\n    |\n-LL | / #![deny(missing_docs)] //~ ERROR\n+LL | / #![deny(missing_docs)]\n LL | |\n-LL | | pub struct Foo; //~ ERROR\n+LL | | pub struct Foo;\n    | |_______________^\n    |\n note: lint level defined here\n   --> $DIR/deny-missing-docs-crate.rs:1:9\n    |\n-LL | #![deny(missing_docs)] //~ ERROR\n+LL | #![deny(missing_docs)]\n    |         ^^^^^^^^^^^^\n \n error: missing documentation for a struct\n   --> $DIR/deny-missing-docs-crate.rs:3:1\n    |\n-LL | pub struct Foo; //~ ERROR\n+LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "ef15bf05d54ef9377fd509941ffb174f922afb01", "filename": "src/test/rustdoc-ui/deny-missing-docs-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Frustdoc-ui%2Fdeny-missing-docs-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Frustdoc-ui%2Fdeny-missing-docs-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeny-missing-docs-macro.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error: missing documentation for macro\n   --> $DIR/deny-missing-docs-macro.rs:6:1\n    |\n-LL | macro_rules! foo { //~ ERROR\n+LL | macro_rules! foo {\n    | ^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here"}, {"sha": "d273ec019752c2a9c20edb10d6a13511a6ea3ebd", "filename": "src/test/rustdoc-ui/intra-doc-alias-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error: `[TypeAlias::hoge]` cannot be resolved, ignoring it...\n   --> $DIR/intra-doc-alias-ice.rs:5:30\n    |\n-LL | /// [broken cross-reference](TypeAlias::hoge) //~ ERROR\n+LL | /// [broken cross-reference](TypeAlias::hoge)\n    |                              ^^^^^^^^^^^^^^^ cannot be resolved, ignoring\n    |\n note: lint level defined here"}, {"sha": "37d8b964c2428545a39d696341e1f9a7ec23dac5", "filename": "src/test/ui-fulldeps/dropck_tarena_cycle_checked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_cycle_checked.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0597]: `arena` does not live long enough\n    |\n LL |     f(&arena);\n    |        ^^^^^ borrowed value does not live long enough\n-LL | } //~^ ERROR `arena` does not live long enough\n+LL | }\n    | - `arena` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created"}, {"sha": "c791b8b451e5072d79365967bc8902099c128f1b", "filename": "src/test/ui-fulldeps/dropck_tarena_unsound_drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_unsound_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_unsound_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_unsound_drop.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0597]: `arena` does not live long enough\n    |\n LL |     f(&arena);\n    |        ^^^^^ borrowed value does not live long enough\n-LL | } //~^ ERROR `arena` does not live long enough\n+LL | }\n    | - `arena` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created"}, {"sha": "d689286177644ce8e3e6a3c6fadcc1581f91dacc", "filename": "src/test/ui-fulldeps/issue-15778-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Fissue-15778-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Fissue-15778-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15778-fail.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error: crate is not marked with #![crate_okay]\n   --> $DIR/issue-15778-fail.rs:5:1\n    |\n-LL | / #![feature(plugin)] //~ ERROR crate is not marked with #![crate_okay]\n+LL | / #![feature(plugin)]\n LL | | #![plugin(lint_for_crate)]\n LL | |\n LL | | pub fn main() { }"}, {"sha": "cd0bff92bf112f2ce42e7cedd42195c2062f30b6", "filename": "src/test/ui-fulldeps/lint-group-plugin-deny-cmdline.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin-deny-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin-deny-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin-deny-cmdline.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,15 +1,15 @@\n error: item is named 'lintme'\n   --> $DIR/lint-group-plugin-deny-cmdline.rs:8:1\n    |\n-LL | fn lintme() { } //~ ERROR item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: `-D test-lint` implied by `-D lint-me`\n \n error: item is named 'pleaselintme'\n   --> $DIR/lint-group-plugin-deny-cmdline.rs:10:1\n    |\n-LL | fn pleaselintme() { } //~ ERROR item is named 'pleaselintme'\n+LL | fn pleaselintme() { }\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D please-lint` implied by `-D lint-me`"}, {"sha": "8ccf9700b9fc8ba91715ef6dca8f44d5b9d39559", "filename": "src/test/ui-fulldeps/lint-group-plugin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,15 +1,15 @@\n warning: item is named 'lintme'\n   --> $DIR/lint-group-plugin.rs:9:1\n    |\n-LL | fn lintme() { } //~ WARNING item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(test_lint)] on by default\n \n warning: item is named 'pleaselintme'\n   --> $DIR/lint-group-plugin.rs:10:1\n    |\n-LL | fn pleaselintme() { } //~ WARNING item is named 'pleaselintme'\n+LL | fn pleaselintme() { }\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(please_lint)] on by default"}, {"sha": "0b2dbad884c5414080aff005f5e67d5c5a51bda3", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-load.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n warning: item is named 'lintme'\n   --> $DIR/lint-plugin-cmdline-load.rs:8:1\n    |\n-LL | fn lintme() { } //~ WARNING item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(test_lint)] on by default"}, {"sha": "5bfde8551ed37ba817406d531924ca11494888ab", "filename": "src/test/ui-fulldeps/lint-plugin-deny-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error: item is named 'lintme'\n   --> $DIR/lint-plugin-deny-attr.rs:8:1\n    |\n-LL | fn lintme() { } //~ ERROR item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here"}, {"sha": "e4257dfde6f90e7417a6e497b1587b8b3e6bf8c0", "filename": "src/test/ui-fulldeps/lint-plugin-deny-cmdline.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error: item is named 'lintme'\n   --> $DIR/lint-plugin-deny-cmdline.rs:8:1\n    |\n-LL | fn lintme() { } //~ ERROR item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: requested on the command line with `-D test-lint`"}, {"sha": "092d0eb7a81a4b7bea0c34856350d896d574ac21", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-attrs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -10,7 +10,7 @@ LL | #[allow(test_lint)]\n error: item is named 'lintme'\n   --> $DIR/lint-plugin-forbid-attrs.rs:8:1\n    |\n-LL | fn lintme() { } //~ ERROR item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here"}, {"sha": "fc2906da5f5fc06d1975a84dc9dc5e666d7fac38", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-cmdline.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,15 +1,15 @@\n error[E0453]: allow(test_lint) overruled by outer forbid(test_lint)\n   --> $DIR/lint-plugin-forbid-cmdline.rs:10:9\n    |\n-LL | #[allow(test_lint)] //~ ERROR allow(test_lint) overruled by outer forbid(test_lint)\n+LL | #[allow(test_lint)]\n    |         ^^^^^^^^^ overruled by previous forbid\n    |\n    = note: `forbid` lint level was set on command line\n \n error: item is named 'lintme'\n   --> $DIR/lint-plugin-forbid-cmdline.rs:8:1\n    |\n-LL | fn lintme() { } //~ ERROR item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: requested on the command line with `-F test-lint`"}, {"sha": "94791e369fc30d960a779fc8b2edd77dfe69eba9", "filename": "src/test/ui-fulldeps/lint-plugin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n warning: item is named 'lintme'\n   --> $DIR/lint-plugin.rs:8:1\n    |\n-LL | fn lintme() { } //~ WARNING item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(test_lint)] on by default"}, {"sha": "cec8800a25c7f10dcc82053b3c31588dd651138b", "filename": "src/test/ui-fulldeps/lint_tool_test.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -21,7 +21,7 @@ LL | #[allow(test_group)]\n warning: unknown lint: `this_lint_does_not_exist`\n   --> $DIR/lint_tool_test.rs:27:8\n    |\n-LL | #[deny(this_lint_does_not_exist)] //~ WARNING unknown lint: `this_lint_does_not_exist`\n+LL | #[deny(this_lint_does_not_exist)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(unknown_lints)] on by default\n@@ -35,7 +35,7 @@ LL | #![cfg_attr(foo, warn(test_lint))]\n error: item is named 'lintme'\n   --> $DIR/lint_tool_test.rs:14:1\n    |\n-LL | fn lintme() { } //~ ERROR item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n@@ -48,7 +48,7 @@ LL | #![deny(clippy_group)]\n error: item is named 'lintmetoo'\n   --> $DIR/lint_tool_test.rs:22:5\n    |\n-LL |     fn lintmetoo() { } //~ ERROR item is named 'lintmetoo'\n+LL |     fn lintmetoo() { }\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here"}, {"sha": "ccc9580a60c2980b28c1d2e5076fe1ce856ef4e0", "filename": "src/test/ui-fulldeps/plugin-as-extern-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error: compiler plugin used as an ordinary library\n   --> $DIR/plugin-as-extern-crate.rs:10:1\n    |\n-LL | extern crate attr_plugin_test; //~ ERROR compiler plugin used as an ordinary library\n+LL | extern crate attr_plugin_test;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here"}, {"sha": "983062e450ea7573aefdc385ea598b1bcd508363", "filename": "src/test/ui/E0508.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0508.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0508.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n   --> $DIR/E0508.rs:5:18\n    |\n-LL |     let _value = array[0];  //~ ERROR [E0508]\n+LL |     let _value = array[0];\n    |                  ^^^^^^^^\n    |                  |\n    |                  cannot move out of here"}, {"sha": "ba6cff80416f3a0e1a1de344dc2861d30153b376", "filename": "src/test/ui/E0508.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n   --> $DIR/E0508.rs:5:18\n    |\n-LL |     let _value = array[0];  //~ ERROR [E0508]\n+LL |     let _value = array[0];\n    |                  ^^^^^^^^\n    |                  |\n    |                  cannot move out of here"}, {"sha": "ef7a48bc8a48f3805c9cd72fa5e3562b4f45e609", "filename": "src/test/ui/E0583.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0583.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0583.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0583.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0583]: file not found for module `module_that_doesnt_exist`\n   --> $DIR/E0583.rs:1:5\n    |\n-LL | mod module_that_doesnt_exist; //~ ERROR E0583\n+LL | mod module_that_doesnt_exist;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: name the file either module_that_doesnt_exist.rs or module_that_doesnt_exist/mod.rs inside the directory \"$DIR\""}, {"sha": "da255143494d68ea12a456bb5c689b3b052f4cfb", "filename": "src/test/ui/E0642.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0642.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,31 +1,31 @@\n error[E0642]: patterns aren't allowed in methods without bodies\n   --> $DIR/E0642.rs:5:12\n    |\n-LL |     fn foo((x, y): (i32, i32)); //~ ERROR patterns aren't allowed in methods without bodies\n+LL |     fn foo((x, y): (i32, i32));\n    |            ^^^^^^\n help: give this argument a name or use an underscore to ignore it\n    |\n-LL |     fn foo(_: (i32, i32)); //~ ERROR patterns aren't allowed in methods without bodies\n+LL |     fn foo(_: (i32, i32));\n    |            ^\n \n error[E0642]: patterns aren't allowed in methods without bodies\n   --> $DIR/E0642.rs:7:12\n    |\n-LL |     fn bar((x, y): (i32, i32)) {} //~ ERROR patterns aren't allowed in methods without bodies\n+LL |     fn bar((x, y): (i32, i32)) {}\n    |            ^^^^^^\n help: give this argument a name or use an underscore to ignore it\n    |\n-LL |     fn bar(_: (i32, i32)) {} //~ ERROR patterns aren't allowed in methods without bodies\n+LL |     fn bar(_: (i32, i32)) {}\n    |            ^\n \n error[E0642]: patterns aren't allowed in methods without bodies\n   --> $DIR/E0642.rs:9:15\n    |\n-LL |     fn method(S { .. }: S) {} //~ ERROR patterns aren't allowed in methods without bodies\n+LL |     fn method(S { .. }: S) {}\n    |               ^^^^^^^^\n help: give this argument a name or use an underscore to ignore it\n    |\n-LL |     fn method(_: S) {} //~ ERROR patterns aren't allowed in methods without bodies\n+LL |     fn method(_: S) {}\n    |               ^\n \n error: aborting due to 3 previous errors"}, {"sha": "5dea744998d8a18dc3aed3cb44f159905301b55a", "filename": "src/test/ui/E0662.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0662.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0662.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0662.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0662]: input operand constraint contains '='\n   --> $DIR/E0662.rs:6:12\n    |\n-LL |          : \"=test\"(\"a\") //~ ERROR E0662\n+LL |          : \"=test\"(\"a\")\n    |            ^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "01bf89ec79af943943a4dafa48d4b4852125acd7", "filename": "src/test/ui/E0663.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0663.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0663.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0663.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0663]: input operand constraint contains '+'\n   --> $DIR/E0663.rs:6:12\n    |\n-LL |          : \"+test\"(\"a\") //~ ERROR E0663\n+LL |          : \"+test\"(\"a\")\n    |            ^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "9c9f65ee6a96d4dfbb515ed56ad0e3f09f7c33fc", "filename": "src/test/ui/E0664.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0664.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0664.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0664.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0664]: clobber should not be surrounded by braces\n   --> $DIR/E0664.rs:7:12\n    |\n-LL |          : \"{eax}\" //~ ERROR E0664\n+LL |          : \"{eax}\"\n    |            ^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "2c2b498e39a43c85502d21828fe50d1e9b89abbb", "filename": "src/test/ui/E0665.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0665.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2FE0665.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0665.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0665]: `Default` cannot be derived for enums, only structs\n   --> $DIR/E0665.rs:1:10\n    |\n-LL | #[derive(Default)] //~ ERROR E0665\n+LL | #[derive(Default)]\n    |          ^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "e41590ac45eed7bc4f1f0addb7a1bf37212993f1", "filename": "src/test/ui/absolute-paths-in-nested-use-groups.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fabsolute-paths-in-nested-use-groups.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fabsolute-paths-in-nested-use-groups.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabsolute-paths-in-nested-use-groups.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,19 +1,19 @@\n error[E0433]: failed to resolve: crate root in paths can only be used in start position\n   --> $DIR/absolute-paths-in-nested-use-groups.rs:6:5\n    |\n-LL |     ::bar,       //~ ERROR crate root in paths can only be used in start position\n+LL |     ::bar,\n    |     ^ crate root in paths can only be used in start position\n \n error[E0433]: failed to resolve: `super` in paths can only be used in start position\n   --> $DIR/absolute-paths-in-nested-use-groups.rs:7:5\n    |\n-LL |     super::bar,  //~ ERROR `super` in paths can only be used in start position\n+LL |     super::bar,\n    |     ^^^^^ `super` in paths can only be used in start position\n \n error[E0433]: failed to resolve: `self` in paths can only be used in start position\n   --> $DIR/absolute-paths-in-nested-use-groups.rs:8:5\n    |\n-LL |     self::bar,   //~ ERROR `self` in paths can only be used in start position\n+LL |     self::bar,\n    |     ^^^^ `self` in paths can only be used in start position\n \n error: aborting due to 3 previous errors"}, {"sha": "713eeba5459772a8778f09ab7427a67db4e0eb86", "filename": "src/test/ui/access-mode-in-closures.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/access-mode-in-closures.rs:8:15\n    |\n-LL |         match *s { S(v) => v } //~ ERROR cannot move out\n+LL |         match *s { S(v) => v }\n    |               ^^     - data moved here\n    |               |\n    |               cannot move out of borrowed content\n@@ -10,7 +10,7 @@ LL |         match *s { S(v) => v } //~ ERROR cannot move out\n note: move occurs because `v` has type `std::vec::Vec<isize>`, which does not implement the `Copy` trait\n   --> $DIR/access-mode-in-closures.rs:8:22\n    |\n-LL |         match *s { S(v) => v } //~ ERROR cannot move out\n+LL |         match *s { S(v) => v }\n    |                      ^\n \n error: aborting due to previous error"}, {"sha": "9976dfe946fd985d99a97a2beec344b5eb47eb4a", "filename": "src/test/ui/access-mode-in-closures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/access-mode-in-closures.rs:8:15\n    |\n-LL |         match *s { S(v) => v } //~ ERROR cannot move out\n+LL |         match *s { S(v) => v }\n    |               ^^     - hint: to prevent move, use `ref v` or `ref mut v`\n    |               |\n    |               cannot move out of borrowed content"}, {"sha": "34e09da45ad53f819e378cee5817c5d120d0cd7f", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,13 +1,13 @@\n error: return type should be `!`\n   --> $DIR/alloc-error-handler-bad-signature-1.rs:12:6\n    |\n-LL | ) -> () //~ ERROR return type should be `!`\n+LL | ) -> ()\n    |      ^^\n \n error: argument should be `Layout`\n   --> $DIR/alloc-error-handler-bad-signature-1.rs:11:11\n    |\n-LL |     info: &Layout, //~ ERROR argument should be `Layout`\n+LL |     info: &Layout,\n    |           ^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "85544b0c3849ea57103ab2527957b0bb8d0a2584", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,13 +1,13 @@\n error: return type should be `!`\n   --> $DIR/alloc-error-handler-bad-signature-2.rs:12:3\n    |\n-LL | ) { //~ ERROR return type should be `!`\n+LL | ) {\n    |   ^\n \n error: argument should be `Layout`\n   --> $DIR/alloc-error-handler-bad-signature-2.rs:11:11\n    |\n-LL |     info: Layout, //~ ERROR argument should be `Layout`\n+LL |     info: Layout,\n    |           ^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "8575e7508f1258209a46ed679238c9137b34ea56", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error: function should have one argument\n   --> $DIR/alloc-error-handler-bad-signature-3.rs:10:1\n    |\n-LL | fn oom() -> ! { //~ ERROR function should have one argument\n+LL | fn oom() -> ! {\n    | ^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "26d7aa80eee163ea63b1dae083694fe7b70b8bcd", "filename": "src/test/ui/allocator-submodule.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fallocator-submodule.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fallocator-submodule.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator-submodule.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error: `global_allocator` cannot be used in submodules\n   --> $DIR/allocator-submodule.rs:27:5\n    |\n-LL |     static MY_HEAP: MyAlloc = MyAlloc; //~ ERROR global_allocator\n+LL |     static MY_HEAP: MyAlloc = MyAlloc;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "5e47b0f0cc7ac4e14c73c87b2b53bad9e684a465", "filename": "src/test/ui/allocator/function-allocator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fallocator%2Ffunction-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fallocator%2Ffunction-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ffunction-allocator.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error: allocators must be statics\n   --> $DIR/function-allocator.rs:2:1\n    |\n-LL | fn foo() {} //~ ERROR: allocators must be statics\n+LL | fn foo() {}\n    | ^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "1ec0cf323e9960798b21f96b7cc9b46c0ed982d8", "filename": "src/test/ui/anon-params-denied-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error: expected one of `:` or `@`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:6:15\n    |\n-LL |     fn foo(i32); //~ expected one of `:` or `@`, found `)`\n+LL |     fn foo(i32);\n    |            ---^ expected one of `:` or `@` here\n    |            |\n    |            help: explicitly ignore parameter: `_: i32`"}, {"sha": "e97dbc15f9cde9fd7b547b14d78982aca3f32916", "filename": "src/test/ui/anon-params-deprecated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n warning: anonymous parameters are deprecated and will be removed in the next edition.\n   --> $DIR/anon-params-deprecated.rs:9:12\n    |\n-LL |     fn foo(i32); //~ WARNING anonymous parameters are deprecated\n+LL |     fn foo(i32);\n    |            ^^^ help: Try naming the parameter or explicitly ignoring it: `_: i32`\n    |\n note: lint level defined here"}, {"sha": "9e84b14950964e1c66b2a9ec269379d2ad4f8dc4", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:2:5\n    |\n-LL |     f1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n@@ -15,7 +15,7 @@ LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:2:5\n    |\n-LL |     f1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), &()) -> _`\n@@ -29,7 +29,7 @@ LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n    |\n-LL |     f2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n@@ -43,7 +43,7 @@ LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n    |\n-LL |     f2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&'a (), &()) -> _`\n@@ -57,7 +57,7 @@ LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n    |\n-LL |     f3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n@@ -71,7 +71,7 @@ LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n    |\n-LL |     f3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), &()) -> _`\n@@ -85,7 +85,7 @@ LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n    |\n-LL |     f4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n@@ -99,7 +99,7 @@ LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n    |\n-LL |     f4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), &'r ()) -> _`\n@@ -113,7 +113,7 @@ LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n    |\n-LL |     f5(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f5(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n@@ -127,7 +127,7 @@ LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n    |\n-LL |     f5(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f5(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&'r (), &'r ()) -> _`\n@@ -141,7 +141,7 @@ LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n    |\n-LL |     g1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>) -> _`\n@@ -155,7 +155,7 @@ LL | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n    |\n-LL |     g1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n@@ -169,7 +169,7 @@ LL | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n    |\n-LL |     g2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n@@ -183,7 +183,7 @@ LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n    |\n-LL |     g2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n@@ -197,7 +197,7 @@ LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n    |\n-LL |     g3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n@@ -211,7 +211,7 @@ LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n    |\n-LL |     g3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n@@ -225,7 +225,7 @@ LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n    |\n-LL |     g4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n@@ -239,7 +239,7 @@ LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n    |\n-LL |     g4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n@@ -253,7 +253,7 @@ LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n    |\n-LL |     h1(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<(dyn for<'t0> std::ops::Fn(&'t0 ()) + 'static)>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n@@ -267,7 +267,7 @@ LL | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n    |\n-LL |     h1(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &(), for<'r, 's> fn(&'r (), &'s ())) -> _`\n@@ -281,7 +281,7 @@ LL | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n    |\n-LL |     h2(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n@@ -295,7 +295,7 @@ LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &()\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n    |\n-LL |     h2(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &'t0 (), for<'r, 's> fn(&'r (), &'s ())) -> _`"}, {"sha": "1cbf77a99f87ed14936c7a626c3454efdac24517", "filename": "src/test/ui/array-break-length.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Farray-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Farray-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-break-length.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,13 +1,13 @@\n error[E0268]: `break` outside of loop\n   --> $DIR/array-break-length.rs:3:17\n    |\n-LL |         |_: [_; break]| {} //~ ERROR: `break` outside of loop\n+LL |         |_: [_; break]| {}\n    |                 ^^^^^ cannot break outside of a loop\n \n error[E0268]: `continue` outside of loop\n   --> $DIR/array-break-length.rs:7:17\n    |\n-LL |         |_: [_; continue]| {} //~ ERROR: `continue` outside of loop\n+LL |         |_: [_; continue]| {}\n    |                 ^^^^^^^^ cannot break outside of a loop\n \n error: aborting due to 2 previous errors"}, {"sha": "21e80fb98027ad6f4195bbb6fee7c054f51aa48c", "filename": "src/test/ui/asm/asm-in-bad-modifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,13 +1,13 @@\n error[E0662]: input operand constraint contains '='\n   --> $DIR/asm-in-bad-modifier.rs:23:39\n    |\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5)); //~ ERROR operand constraint contains '='\n+LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5));\n    |                                       ^^^^\n \n error[E0663]: input operand constraint contains '+'\n   --> $DIR/asm-in-bad-modifier.rs:24:39\n    |\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5)); //~ ERROR operand constraint contains '+'\n+LL |         asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5));\n    |                                       ^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "99134ceba33274d252cb8ae8c6811a410ef063cd", "filename": "src/test/ui/asm/asm-out-no-modifier.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0661]: output operand constraint lacks '=' or '+'\n   --> $DIR/asm-out-no-modifier.rs:22:29\n    |\n-LL |         asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5)); //~ ERROR output operand constraint lacks '='\n+LL |         asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5));\n    |                             ^^^\n \n error: aborting due to previous error"}, {"sha": "9fe59d12e12cd3ca61c1687bcb77b560b42867fe", "filename": "src/test/ui/asm/asm-parse-errors.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,67 +1,67 @@\n error: macro requires a string literal as an argument\n   --> $DIR/asm-parse-errors.rs:4:5\n    |\n-LL |     asm!(); //~ ERROR requires a string literal as an argument\n+LL |     asm!();\n    |     ^^^^^^^ string literal required\n \n error: expected string literal\n   --> $DIR/asm-parse-errors.rs:5:18\n    |\n-LL |     asm!(\"nop\" : struct); //~ ERROR expected string literal\n+LL |     asm!(\"nop\" : struct);\n    |                  ^^^^^^ expected string literal\n \n error: expected string literal\n   --> $DIR/asm-parse-errors.rs:6:30\n    |\n-LL |     asm!(\"mov %eax, $$0x2\" : struct); //~ ERROR expected string literal\n+LL |     asm!(\"mov %eax, $$0x2\" : struct);\n    |                              ^^^^^^ expected string literal\n \n error: expected `(`, found keyword `struct`\n   --> $DIR/asm-parse-errors.rs:7:39\n    |\n-LL |     asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct); //~ ERROR expected `(`\n+LL |     asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct);\n    |                                       ^^^^^^ expected `(`\n \n error: expected expression, found keyword `struct`\n   --> $DIR/asm-parse-errors.rs:8:39\n    |\n-LL |     asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct)); //~ ERROR expected expression\n+LL |     asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct));\n    |                                       ^^^^^^ expected expression\n \n error: expected string literal\n   --> $DIR/asm-parse-errors.rs:9:44\n    |\n-LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : struct); //~ ERROR expected string literal\n+LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : struct);\n    |                                            ^^^^^^ expected string literal\n \n error: expected `(`, found keyword `struct`\n   --> $DIR/asm-parse-errors.rs:10:51\n    |\n-LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct); //~ ERROR expected `(`\n+LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct);\n    |                                                   ^^^^^^ expected `(`\n \n error: expected expression, found keyword `struct`\n   --> $DIR/asm-parse-errors.rs:11:51\n    |\n-LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct)); //~ ERROR expected expression\n+LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct));\n    |                                                   ^^^^^^ expected expression\n \n error: expected string literal\n   --> $DIR/asm-parse-errors.rs:12:36\n    |\n-LL |     asm!(\"mov $$0x200, %eax\" : : : struct); //~ ERROR expected string literal\n+LL |     asm!(\"mov $$0x200, %eax\" : : : struct);\n    |                                    ^^^^^^ expected string literal\n \n error: expected string literal\n   --> $DIR/asm-parse-errors.rs:13:45\n    |\n-LL |     asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct); //~ ERROR expected string literal\n+LL |     asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct);\n    |                                             ^^^^^^ expected string literal\n \n error: inline assembly must be a string literal\n   --> $DIR/asm-parse-errors.rs:14:10\n    |\n-LL |     asm!(123); //~ ERROR inline assembly must be a string literal\n+LL |     asm!(123);\n    |          ^^^\n \n error: aborting due to 11 previous errors"}, {"sha": "feceadb67220b0b6e9f09d2208dab8abf8cc04c5", "filename": "src/test/ui/assign-to-method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassign-to-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassign-to-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-to-method.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,15 +1,15 @@\n error[E0615]: attempted to take value of method `speak` on type `Cat`\n   --> $DIR/assign-to-method.rs:20:8\n    |\n-LL |   nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method\n+LL |   nyan.speak = || println!(\"meow\");\n    |        ^^^^^\n    |\n    = help: methods are immutable and cannot be assigned to\n \n error[E0615]: attempted to take value of method `speak` on type `Cat`\n   --> $DIR/assign-to-method.rs:21:8\n    |\n-LL |   nyan.speak += || println!(\"meow\"); //~ ERROR attempted to take value of method\n+LL |   nyan.speak += || println!(\"meow\");\n    |        ^^^^^\n    |\n    = help: methods are immutable and cannot be assigned to"}, {"sha": "5304b09de5efeb7e19fd4a02030d4d3fd46aa2f3", "filename": "src/test/ui/assignment-operator-unimplemented.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassignment-operator-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassignment-operator-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassignment-operator-unimplemented.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0368]: binary assignment operation `+=` cannot be applied to type `Foo`\n   --> $DIR/assignment-operator-unimplemented.rs:6:3\n    |\n-LL |   a += *b; //~ Error: binary assignment operation `+=` cannot be applied to type `Foo`\n+LL |   a += *b;\n    |   -^^^^^^\n    |   |\n    |   cannot use `+=` on type `Foo`"}, {"sha": "f9ea3365cb8d35e9c8a93327cbee529d3b072e1d", "filename": "src/test/ui/assoc-inherent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n   --> $DIR/assoc-inherent.rs:6:5\n    |\n-LL |     type Bar = isize; //~ERROR associated types are not yet supported in inherent impls (see #8995)\n+LL |     type Bar = isize;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "5f2b9c47e8c2ae9233d13c742794ad97a01c0e01", "filename": "src/test/ui/associated-const/associated-const-ambiguity-report.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0034]: multiple applicable items in scope\n   --> $DIR/associated-const-ambiguity-report.rs:17:16\n    |\n-LL | const X: i32 = <i32>::ID; //~ ERROR E0034\n+LL | const X: i32 = <i32>::ID;\n    |                ^^^^^^^^^ multiple `ID` found\n    |\n note: candidate #1 is defined in an impl of the trait `Foo` for the type `i32`"}, {"sha": "ea475ffc5547a4d709fbeedc93f4bd0ed82d261a", "filename": "src/test/ui/associated-item/associated-item-duplicate-names-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0201]: duplicate definitions with name `bar`:\n    |\n LL |     const bar: bool = true;\n    |     ----------------------- previous definition of `bar` here\n-LL |     fn bar() {} //~ ERROR duplicate definitions\n+LL |     fn bar() {}\n    |     ^^^^^^^^^^^ duplicate definition\n \n error: aborting due to previous error"}, {"sha": "57495863c98914f0bcc18cce57fa1404ad9e9f39", "filename": "src/test/ui/associated-item/associated-item-duplicate-names-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0201]: duplicate definitions with name `Bar`:\n    |\n LL |     type Bar = i16;\n    |     --------------- previous definition of `Bar` here\n-LL |     type Bar = u16; //~ ERROR duplicate definitions\n+LL |     type Bar = u16;\n    |     ^^^^^^^^^^^^^^^ duplicate definition\n \n error: aborting due to previous error"}, {"sha": "f4af9e02939507fc748ef1ad4856b5840d6fe522", "filename": "src/test/ui/associated-item/associated-item-duplicate-names.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,15 +3,15 @@ error[E0201]: duplicate definitions with name `Ty`:\n    |\n LL |     type Ty = ();\n    |     ------------- previous definition of `Ty` here\n-LL |     type Ty = usize; //~ ERROR duplicate definitions\n+LL |     type Ty = usize;\n    |     ^^^^^^^^^^^^^^^^ duplicate definition\n \n error[E0201]: duplicate definitions with name `BAR`:\n   --> $DIR/associated-item-duplicate-names.rs:13:5\n    |\n LL |     const BAR: u32 = 7;\n    |     ------------------- previous definition of `BAR` here\n-LL |     const BAR: u32 = 8; //~ ERROR duplicate definitions\n+LL |     const BAR: u32 = 8;\n    |     ^^^^^^^^^^^^^^^^^^^ duplicate definition\n \n error: aborting due to 2 previous errors"}, {"sha": "e1a1e636372715b2738df00d18a5c868cba059d9", "filename": "src/test/ui/associated-path-shl.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-path-shl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-path-shl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-path-shl.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,37 +1,37 @@\n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/associated-path-shl.rs:4:14\n    |\n-LL |     let _: <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+LL |     let _: <<A>::B>::C;\n    |              ^ not found in this scope\n \n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/associated-path-shl.rs:5:15\n    |\n-LL |     let _ = <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+LL |     let _ = <<A>::B>::C;\n    |               ^ not found in this scope\n \n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/associated-path-shl.rs:6:11\n    |\n-LL |     let <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+LL |     let <<A>::B>::C;\n    |           ^ not found in this scope\n \n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/associated-path-shl.rs:7:17\n    |\n-LL |     let 0 ..= <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+LL |     let 0 ..= <<A>::B>::C;\n    |                 ^ not found in this scope\n \n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/associated-path-shl.rs:9:7\n    |\n-LL |     <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+LL |     <<A>::B>::C;\n    |       ^ not found in this scope\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/associated-path-shl.rs:7:15\n    |\n-LL |     let 0 ..= <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+LL |     let 0 ..= <<A>::B>::C;\n    |               ^^^^^^^^^^^ ranges require char or numeric types\n    |\n    = note: start type: {integer}"}, {"sha": "06f1a1cc64c421de7b9ad8682257ed87913d15f8", "filename": "src/test/ui/associated-type/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:33:23\n    |\n-LL | fn b() { dent(ModelT, Blue); } //~ ERROR mismatched types\n+LL | fn b() { dent(ModelT, Blue); }\n    |                       ^^^^ expected struct `Black`, found struct `Blue`\n    |\n    = note: expected type `Black`\n@@ -10,7 +10,7 @@ LL | fn b() { dent(ModelT, Blue); } //~ ERROR mismatched types\n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:34:23\n    |\n-LL | fn c() { dent(ModelU, Black); } //~ ERROR mismatched types\n+LL | fn c() { dent(ModelU, Black); }\n    |                       ^^^^^ expected struct `Blue`, found struct `Black`\n    |\n    = note: expected type `Blue`\n@@ -19,7 +19,7 @@ LL | fn c() { dent(ModelU, Black); } //~ ERROR mismatched types\n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:40:28\n    |\n-LL | fn f() { ModelT.chip_paint(Blue); } //~ ERROR mismatched types\n+LL | fn f() { ModelT.chip_paint(Blue); }\n    |                            ^^^^ expected struct `Black`, found struct `Blue`\n    |\n    = note: expected type `Black`\n@@ -28,7 +28,7 @@ LL | fn f() { ModelT.chip_paint(Blue); } //~ ERROR mismatched types\n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:41:28\n    |\n-LL | fn g() { ModelU.chip_paint(Black); } //~ ERROR mismatched types\n+LL | fn g() { ModelU.chip_paint(Black); }\n    |                            ^^^^^ expected struct `Blue`, found struct `Black`\n    |\n    = note: expected type `Blue`"}, {"sha": "4b548604983df5b314ff417d537905ae3075e750", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0271]: type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:37:10\n    |\n-LL | fn b() { blue_car(ModelT); } //~ ERROR type mismatch\n+LL | fn b() { blue_car(ModelT); }\n    |          ^^^^^^^^ expected struct `Black`, found struct `Blue`\n    |\n    = note: expected type `Black`\n@@ -15,7 +15,7 @@ LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:38:10\n    |\n-LL | fn c() { black_car(ModelU); } //~ ERROR type mismatch\n+LL | fn c() { black_car(ModelU); }\n    |          ^^^^^^^^^ expected struct `Blue`, found struct `Black`\n    |\n    = note: expected type `Blue`"}, {"sha": "502fb4f1c3033616b1c053e26a13dce15d60f566", "filename": "src/test/ui/associated-types/associated-types-bound-failure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `<G as GetToInt>::R: ToInt` is not satisfied\n   --> $DIR/associated-types-bound-failure.rs:17:5\n    |\n-LL |     ToInt::to_int(&g.get()) //~ ERROR E0277\n+LL |     ToInt::to_int(&g.get())\n    |     ^^^^^^^^^^^^^ the trait `ToInt` is not implemented for `<G as GetToInt>::R`\n    |\n    = help: consider adding a `where <G as GetToInt>::R: ToInt` bound"}, {"sha": "aa987316801a7e40806d026e3d6bc70e6a13bc7b", "filename": "src/test/ui/associated-types/associated-types-eq-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/associated-types-eq-1.rs:10:12\n    |\n-LL |     let _: A = x.boo(); //~ ERROR cannot find type `A` in this scope\n+LL |     let _: A = x.boo();\n    |            ^ help: a type parameter with a similar name exists: `I`\n \n error: aborting due to previous error"}, {"sha": "82d15b92b55fe9f40082ae0042c00fa8cc3fec5d", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n   --> $DIR/associated-types-eq-hr.rs:82:5\n    |\n-LL |     foo::<UintStruct>(); //~ ERROR type mismatch\n+LL |     foo::<UintStruct>();\n    |     ^^^^^^^^^^^^^^^^^ expected usize, found isize\n    |\n    = note: expected type `&usize`\n@@ -19,7 +19,7 @@ LL | | }\n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n   --> $DIR/associated-types-eq-hr.rs:86:5\n    |\n-LL |     bar::<IntStruct>(); //~ ERROR type mismatch\n+LL |     bar::<IntStruct>();\n    |     ^^^^^^^^^^^^^^^^ expected isize, found usize\n    |\n    = note: expected type `&isize`"}, {"sha": "575a072c558bda3605d5a095b67c863c30120d57", "filename": "src/test/ui/associated-types/associated-types-issue-17359.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-17359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-17359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-17359.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Type`\n LL |     type Type;\n    |     ---------- `Type` from trait\n ...\n-LL | impl Trait for isize {}  //~ ERROR missing: `Type`\n+LL | impl Trait for isize {}\n    | ^^^^^^^^^^^^^^^^^^^^ missing `Type` in implementation\n \n error: aborting due to previous error"}, {"sha": "7d5b16c6e62d0e09bc036fb6d17082cac9b87a39", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0271]: type mismatch resolving `<Adapter<I> as Iterator>::Item == std::option::Option<T>`\n   --> $DIR/associated-types-issue-20346.rs:34:5\n    |\n-LL |     is_iterator_of::<Option<T>, _>(&adapter); //~ ERROR type mismatch\n+LL |     is_iterator_of::<Option<T>, _>(&adapter);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter, found enum `std::option::Option`\n    |\n    = note: expected type `T`"}, {"sha": "2926bdae0525b860572c4b9ed3d8c58d2a6936d6", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0271]: type mismatch resolving `<T as Foo>::Y == i32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:13:5\n    |\n-LL |     want_y(t); //~ ERROR type mismatch\n+LL |     want_y(t);\n    |     ^^^^^^ expected associated type, found i32\n    |\n    = note: expected type `<T as Foo>::Y`\n@@ -15,7 +15,7 @@ LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:18:5\n    |\n-LL |     want_x(t); //~ ERROR type mismatch\n+LL |     want_x(t);\n    |     ^^^^^^ expected associated type, found u32\n    |\n    = note: expected type `<T as Foo>::X`"}, {"sha": "840e33b4b8a8e900cedd6b87f1794cfd10434097", "filename": "src/test/ui/associated-types/associated-types-outlives.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |         's: loop { y = denormalise(&x); break }\n    |                                    -- borrow of `x` occurs here\n-LL |         drop(x); //~ ERROR cannot move out of `x` because it is borrowed\n+LL |         drop(x);\n    |              ^ move out of `x` occurs here\n LL |         return f(y);\n    |                  - borrow later used here"}, {"sha": "e35862d718f4933bf6f789fe29d3a54d31643f3d", "filename": "src/test/ui/associated-types/associated-types-outlives.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |         's: loop { y = denormalise(&x); break }\n    |                                     - borrow of `x` occurs here\n-LL |         drop(x); //~ ERROR cannot move out of `x` because it is borrowed\n+LL |         drop(x);\n    |              ^ move out of `x` occurs here\n \n error: aborting due to previous error"}, {"sha": "a26ee23894f6dcd04db477b1901adadf00331715", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0284]: type annotations required: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n   --> $DIR/associated-types-overridden-binding.rs:4:1\n    |\n-LL | trait Bar: Foo<Item = u32> {} //~ ERROR type annotations required\n+LL | trait Bar: Foo<Item = u32> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: required by `Foo`"}, {"sha": "b6d3b53ba59b0ea81dedf56ddb0983cb86e89d1d", "filename": "src/test/ui/associated-types/associated-types-path-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0220]: associated type `A` not found for `T`\n   --> $DIR/associated-types-path-1.rs:10:23\n    |\n-LL | pub fn f1<T>(a: T, x: T::A) {} //~ERROR associated type `A` not found\n+LL | pub fn f1<T>(a: T, x: T::A) {}\n    |                       ^^^^ associated type `A` not found\n \n error[E0221]: ambiguous associated type `A` in bounds of `T`\n@@ -13,7 +13,7 @@ LL |     type A;\n LL |     type A;\n    |     ------- ambiguous `A` from `Bar`\n ...\n-LL | pub fn f2<T: Foo + Bar>(a: T, x: T::A) {} //~ERROR ambiguous associated type `A`\n+LL | pub fn f2<T: Foo + Bar>(a: T, x: T::A) {}\n    |                                  ^^^^ ambiguous associated type `A`\n \n error: aborting due to 2 previous errors"}, {"sha": "58ceec9040b9d331f41f140569796283ec4eb7e9", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0623]: lifetime mismatch\n LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n    |                        -----     ----- these two types are declared with different lifetimes...\n ...\n-LL |     let _c: <T as Trait<'b>>::Type = a; //~ ERROR E0623\n+LL |     let _c: <T as Trait<'b>>::Type = a;\n    |                                      ^ ...but data from `y` flows into `x` here\n \n error[E0623]: lifetime mismatch\n@@ -13,7 +13,7 @@ error[E0623]: lifetime mismatch\n LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n    |                        -----     ----- these two types are declared with different lifetimes...\n ...\n-LL |     let _c: <T as Trait<'a>>::Type = b; //~ ERROR E0623\n+LL |     let _c: <T as Trait<'a>>::Type = b;\n    |                                      ^ ...but data from `y` flows into `x` here\n \n error: aborting due to 2 previous errors"}, {"sha": "b5db9743932e93cb11967f2d28324af8e5a2c142", "filename": "src/test/ui/associated-types/associated-types-unsized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the size for values of type `<T as Get>::Value` cannot be known at compilation time\n   --> $DIR/associated-types-unsized.rs:7:9\n    |\n-LL |     let x = t.get(); //~ ERROR the size for values of type\n+LL |     let x = t.get();\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<T as Get>::Value`"}, {"sha": "5b7db0e9d6fb41b5838736524e00a2e40d44f2ec", "filename": "src/test/ui/attempted-access-non-fatal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,13 +1,13 @@\n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/attempted-access-non-fatal.rs:4:15\n    |\n-LL |     let _ = x.foo; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+LL |     let _ = x.foo;\n    |               ^^^\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/attempted-access-non-fatal.rs:5:15\n    |\n-LL |     let _ = x.bar; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+LL |     let _ = x.bar;\n    |               ^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "aae25b2721e4d9497375b270129a884a94a0bf48", "filename": "src/test/ui/attr-eq-token-tree.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error: unexpected token: `!`\n   --> $DIR/attr-eq-token-tree.rs:3:11\n    |\n-LL | #[my_attr = !] //~ ERROR unexpected token: `!`\n+LL | #[my_attr = !]\n    |           ^\n \n error: aborting due to previous error"}, {"sha": "d8d7f6adb82b55a3dc5983eb3fd1a96567bbeeee", "filename": "src/test/ui/attr-usage-inline.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fattr-usage-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fattr-usage-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-inline.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0518]: attribute should be applied to function or closure\n   --> $DIR/attr-usage-inline.rs:6:1\n    |\n-LL | #[inline] //~ ERROR: attribute should be applied to function or closure\n+LL | #[inline]\n    | ^^^^^^^^^\n LL | struct S;\n    | --------- not a function or closure"}, {"sha": "f8ad7eec454c4f93bfabe690439b30c3a4b402db", "filename": "src/test/ui/attr-usage-repr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-repr.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,31 +1,31 @@\n error[E0517]: attribute should be applied to struct, enum or union\n   --> $DIR/attr-usage-repr.rs:4:8\n    |\n-LL | #[repr(C)] //~ ERROR: attribute should be applied to struct, enum or union\n+LL | #[repr(C)]\n    |        ^\n LL | fn f() {}\n    | --------- not a struct, enum or union\n \n error[E0517]: attribute should be applied to enum\n   --> $DIR/attr-usage-repr.rs:16:8\n    |\n-LL | #[repr(i8)] //~ ERROR: attribute should be applied to enum\n+LL | #[repr(i8)]\n    |        ^^\n LL | struct SInt(f64, f64);\n    | ---------------------- not an enum\n \n error[E0517]: attribute should be applied to struct or union\n   --> $DIR/attr-usage-repr.rs:25:8\n    |\n-LL | #[repr(packed)] //~ ERROR: attribute should be applied to struct\n+LL | #[repr(packed)]\n    |        ^^^^^^\n LL | enum EPacked { A, B }\n    | --------------------- not a struct or union\n \n error[E0517]: attribute should be applied to struct\n   --> $DIR/attr-usage-repr.rs:28:8\n    |\n-LL | #[repr(simd)] //~ ERROR: attribute should be applied to struct\n+LL | #[repr(simd)]\n    |        ^^^^\n LL | enum ESimd { A, B }\n    | ------------------- not a struct"}, {"sha": "4c5964715db7ea01bb470397898d1b2f7500c1ec", "filename": "src/test/ui/attribute-with-no-generics-in-parameter-list.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fattribute-with-no-generics-in-parameter-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fattribute-with-no-generics-in-parameter-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattribute-with-no-generics-in-parameter-list.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error: attribute without generic parameters\n   --> $DIR/attribute-with-no-generics-in-parameter-list.rs:1:8\n    |\n-LL | fn foo<#[attr]>() {} //~ ERROR attribute without generic parameters\n+LL | fn foo<#[attr]>() {}\n    |        ^^^^^^^ attributes are only permitted when preceding parameters\n \n error: aborting due to previous error"}, {"sha": "08f06e90162b4935c2d774059784b08e17cec68b", "filename": "src/test/ui/augmented-assignments.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,14 +1,14 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/augmented-assignments.rs:16:5\n    |\n-LL |       x   //~ error: use of moved value: `x`\n+LL |       x\n    |       -\n    |       |\n    |  _____borrow of `x` occurs here\n    | |\n-LL | |     //~^ value used here after move\n+LL | |\n LL | |     +=\n-LL | |     x;  //~ value moved here\n+LL | |     x;\n    | |     ^\n    | |     |\n    | |_____move out of `x` occurs here\n@@ -20,7 +20,7 @@ error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n LL |     let y = Int(2);\n    |         - help: consider changing this to be mutable: `mut y`\n ...\n-LL |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n+LL |     y\n    |     ^ cannot borrow as mutable\n \n error: aborting due to 2 previous errors"}, {"sha": "e429bf2a594fe42a0a00bd458ef6310ba1416c80", "filename": "src/test/ui/augmented-assignments.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,16 +4,16 @@ error[E0596]: cannot borrow immutable local variable `y` as mutable\n LL |     let y = Int(2);\n    |         - help: make this binding mutable: `mut y`\n ...\n-LL |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n+LL |     y\n    |     ^ cannot borrow mutably\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/augmented-assignments.rs:13:5\n    |\n-LL |     x   //~ error: use of moved value: `x`\n+LL |     x\n    |     ^ value used here after move\n ...\n-LL |     x;  //~ value moved here\n+LL |     x;\n    |     - value moved here\n    |\n    = note: move occurs because `x` has type `Int`, which does not implement the `Copy` trait"}, {"sha": "97b9cd961a0267482ca758eaaeb63079532193ae", "filename": "src/test/ui/auto-ref-slice-plus-ref.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0599]: no method named `test_mut` found for type `std::vec::Vec<{integer}>` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:7:7\n    |\n-LL |     a.test_mut(); //~ ERROR no method named `test_mut` found\n+LL |     a.test_mut();\n    |       ^^^^^^^^ help: did you mean: `get_mut`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n@@ -11,7 +11,7 @@ LL |     a.test_mut(); //~ ERROR no method named `test_mut` found\n error[E0599]: no method named `test` found for type `std::vec::Vec<{integer}>` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:8:7\n    |\n-LL |     a.test(); //~ ERROR no method named `test` found\n+LL |     a.test();\n    |       ^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n@@ -21,7 +21,7 @@ LL |     a.test(); //~ ERROR no method named `test` found\n error[E0599]: no method named `test` found for type `[{integer}; 1]` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:10:11\n    |\n-LL |     ([1]).test(); //~ ERROR no method named `test` found\n+LL |     ([1]).test();\n    |           ^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n@@ -31,7 +31,7 @@ LL |     ([1]).test(); //~ ERROR no method named `test` found\n error[E0599]: no method named `test` found for type `&[{integer}; 1]` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:11:12\n    |\n-LL |     (&[1]).test(); //~ ERROR no method named `test` found\n+LL |     (&[1]).test();\n    |            ^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope"}, {"sha": "19bf11a67d1c1a83a2de18cf3f881c2420ae8710", "filename": "src/test/ui/await-keyword/2018-edition-error.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,37 +1,37 @@\n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:5:13\n    |\n-LL |     pub mod await { //~ ERROR `await` is a keyword\n+LL |     pub mod await {\n    |             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:6:20\n    |\n-LL |         pub struct await; //~ ERROR `await` is a keyword\n+LL |         pub struct await;\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:9:22\n    |\n-LL | use self::outer_mod::await::await; //~ ERROR `await` is a keyword\n+LL | use self::outer_mod::await::await;\n    |                      ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:9:29\n    |\n-LL | use self::outer_mod::await::await; //~ ERROR `await` is a keyword\n+LL | use self::outer_mod::await::await;\n    |                             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:13:11\n    |\n-LL |     match await { await => () } //~ ERROR `await` is a keyword\n+LL |     match await { await => () }\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:13:19\n    |\n-LL |     match await { await => () } //~ ERROR `await` is a keyword\n+LL |     match await { await => () }\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error: aborting due to 6 previous errors"}, {"sha": "3e41b7e658555b263a1669522d2241a914ac5a04", "filename": "src/test/ui/bad/bad-expr-lhs.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,31 +1,31 @@\n error[E0070]: invalid left-hand side expression\n   --> $DIR/bad-expr-lhs.rs:2:5\n    |\n-LL |     1 = 2; //~ ERROR invalid left-hand side expression\n+LL |     1 = 2;\n    |     ^^^^^ left-hand of expression not valid\n \n error[E0067]: invalid left-hand side expression\n   --> $DIR/bad-expr-lhs.rs:3:5\n    |\n-LL |     1 += 2; //~ ERROR invalid left-hand side expression\n+LL |     1 += 2;\n    |     ^ invalid expression for left-hand side\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/bad-expr-lhs.rs:4:5\n    |\n-LL |     (1, 2) = (3, 4); //~ ERROR invalid left-hand side expression\n+LL |     (1, 2) = (3, 4);\n    |     ^^^^^^^^^^^^^^^ left-hand of expression not valid\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/bad-expr-lhs.rs:7:5\n    |\n-LL |     (a, b) = (3, 4); //~ ERROR invalid left-hand side expression\n+LL |     (a, b) = (3, 4);\n    |     ^^^^^^^^^^^^^^^ left-hand of expression not valid\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/bad-expr-lhs.rs:9:5\n    |\n-LL |     None = Some(3); //~ ERROR invalid left-hand side expression\n+LL |     None = Some(3);\n    |     ^^^^^^^^^^^^^^ left-hand of expression not valid\n \n error: aborting due to 5 previous errors"}, {"sha": "6dec74efd7185194d42f5e3a7eeb49cab37b564e", "filename": "src/test/ui/bad/bad-expr-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -19,7 +19,7 @@ LL |     log(debug, m1::arguments);\n error[E0580]: main function has wrong type\n   --> $DIR/bad-expr-path.rs:3:1\n    |\n-LL | fn main(arguments: Vec<String>) { //~ ERROR main function has wrong type\n+LL | fn main(arguments: Vec<String>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n    = note: expected type `fn()`"}, {"sha": "8212b2392c4ac046a544890bcc537a5cf305e4b1", "filename": "src/test/ui/bad/bad-expr-path2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -19,7 +19,7 @@ LL |     log(debug, m1::arguments);\n error[E0580]: main function has wrong type\n   --> $DIR/bad-expr-path2.rs:5:1\n    |\n-LL | fn main(arguments: Vec<String>) { //~ ERROR main function has wrong type\n+LL | fn main(arguments: Vec<String>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n    = note: expected type `fn()`"}, {"sha": "5baba599e741f1e75da1c893c8fe8a45d2b55054", "filename": "src/test/ui/bad/bad-extern-link-attrs.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,19 +1,19 @@\n error[E0459]: #[link(...)] specified without `name = \"foo\"`\n   --> $DIR/bad-extern-link-attrs.rs:1:1\n    |\n-LL | #[link()] //~ ERROR: specified without `name =\n+LL | #[link()]\n    | ^^^^^^^^^ missing `name` argument\n \n error[E0454]: #[link(name = \"\")] given with empty name\n   --> $DIR/bad-extern-link-attrs.rs:2:1\n    |\n-LL | #[link(name = \"\")] //~ ERROR: with empty name\n+LL | #[link(name = \"\")]\n    | ^^^^^^^^^^^^^^^^^^ empty name given\n \n error[E0458]: unknown kind: `bar`\n   --> $DIR/bad-extern-link-attrs.rs:4:1\n    |\n-LL | #[link(name = \"foo\", kind = \"bar\")] //~ ERROR: unknown kind\n+LL | #[link(name = \"foo\", kind = \"bar\")]\n    | ^^^^^^^^^^^^^^^^^^^^^------------^^\n    |                      |\n    |                      unknown kind"}, {"sha": "f6e67e6d78df08f12e8ab46f90864fc856067577", "filename": "src/test/ui/bad/bad-lint-cap2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error: unused import: `std::option`\n   --> $DIR/bad-lint-cap2.rs:6:5\n    |\n-LL | use std::option; //~ ERROR\n+LL | use std::option;\n    |     ^^^^^^^^^^^\n    |\n note: lint level defined here"}, {"sha": "a1ea3f774b40d72f15842ce49d97d41f95ccaca3", "filename": "src/test/ui/bad/bad-lint-cap3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n warning: unused import: `std::option`\n   --> $DIR/bad-lint-cap3.rs:7:5\n    |\n-LL | use std::option; //~ WARN\n+LL | use std::option;\n    |     ^^^^^^^^^^^\n    |\n note: lint level defined here"}, {"sha": "c7f15e7a4fa50501b3f61366993dbd326a661462", "filename": "src/test/ui/bad/bad-main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0580]: main function has wrong type\n   --> $DIR/bad-main.rs:1:1\n    |\n-LL | fn main(x: isize) { } //~ ERROR: main function has wrong type [E0580]\n+LL | fn main(x: isize) { }\n    | ^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n    = note: expected type `fn()`"}, {"sha": "c72b965236006ba8cac9334808f2e63841c7dddf", "filename": "src/test/ui/bad/bad-method-typaram-kind.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/bad-method-typaram-kind.rs:2:7\n    |\n-LL |     1.bar::<T>(); //~ ERROR `T` cannot be sent between threads safely\n+LL |     1.bar::<T>();\n    |       ^^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`"}, {"sha": "a459c00634a1d53f1f81804352ef91736dfe3767", "filename": "src/test/ui/bad/bad-type-env-capture.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0401]: can't use generic parameters from outer function\n    |\n LL | fn foo<T>() {\n    |        - type variable from outer function\n-LL |     fn bar(b: T) { } //~ ERROR can't use generic parameters from outer\n+LL |     fn bar(b: T) { }\n    |        ---    ^ use of generic parameter from outer function\n    |        |\n    |        help: try using a local generic parameter instead: `bar<T>`"}, {"sha": "9157fe0b070d09d0c350f2f4ddf1e51f0262a8b4", "filename": "src/test/ui/bind-by-move/bind-by-move-neither-can-live-while-the-other-survives-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-2.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0009]: cannot bind by-move and by-ref in the same pattern\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-2.rs:12:23\n    |\n-LL |         Some((ref _y, _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n+LL |         Some((ref _y, _z)) => { },\n    |               ------  ^^ by-move pattern here\n    |               |\n    |               both by-ref and by-move used"}, {"sha": "267a9dff926a22fca86ebd2edb4616b3dc8d06c3", "filename": "src/test/ui/bind-by-move/bind-by-move-neither-can-live-while-the-other-survives-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-4.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0009]: cannot bind by-move and by-ref in the same pattern\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-4.rs:12:15\n    |\n-LL |         Some((_y, ref _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n+LL |         Some((_y, ref _z)) => { },\n    |               ^^  ------ both by-ref and by-move used\n    |               |\n    |               by-move pattern here"}, {"sha": "5751af27fcb424109c7bb739b9e928a09d1d1f78", "filename": "src/test/ui/binop/binop-consume-args.nll.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -7,7 +7,7 @@ LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n    |        consider adding a `Copy` constraint to this type argument\n LL |     lhs + rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -19,8 +19,8 @@ LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs + rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -32,7 +32,7 @@ LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n    |        consider adding a `Copy` constraint to this type argument\n LL |     lhs - rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -44,8 +44,8 @@ LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs - rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -57,7 +57,7 @@ LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n    |        consider adding a `Copy` constraint to this type argument\n LL |     lhs * rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -69,8 +69,8 @@ LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs * rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -82,7 +82,7 @@ LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n    |        consider adding a `Copy` constraint to this type argument\n LL |     lhs / rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -94,8 +94,8 @@ LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs / rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -107,7 +107,7 @@ LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n    |        consider adding a `Copy` constraint to this type argument\n LL |     lhs % rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -119,8 +119,8 @@ LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs % rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -132,7 +132,7 @@ LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n    |           consider adding a `Copy` constraint to this type argument\n LL |     lhs & rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -144,8 +144,8 @@ LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                    consider adding a `Copy` constraint to this type argument\n LL |     lhs & rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -157,7 +157,7 @@ LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n    |          consider adding a `Copy` constraint to this type argument\n LL |     lhs | rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -169,8 +169,8 @@ LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                  consider adding a `Copy` constraint to this type argument\n LL |     lhs | rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -182,7 +182,7 @@ LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n    |           consider adding a `Copy` constraint to this type argument\n LL |     lhs ^ rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -194,8 +194,8 @@ LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                    consider adding a `Copy` constraint to this type argument\n LL |     lhs ^ rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -207,7 +207,7 @@ LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n    |        consider adding a `Copy` constraint to this type argument\n LL |     lhs << rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -219,8 +219,8 @@ LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs << rhs;\n    |            --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -232,7 +232,7 @@ LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n    |        consider adding a `Copy` constraint to this type argument\n LL |     lhs >> rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -244,8 +244,8 @@ LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs >> rhs;\n    |            --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error: aborting due to 20 previous errors"}, {"sha": "9246c116709d4145316764f31941c678beae7abd", "filename": "src/test/ui/binop/binop-consume-args.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs + rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -13,8 +13,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs + rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -24,7 +24,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs - rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -34,8 +34,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs - rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -45,7 +45,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs * rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -55,8 +55,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs * rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -66,7 +66,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs / rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -76,8 +76,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs / rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -87,7 +87,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs % rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -97,8 +97,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs % rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -108,7 +108,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs & rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -118,8 +118,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs & rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -129,7 +129,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs | rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -139,8 +139,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs | rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -150,7 +150,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs ^ rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -160,8 +160,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs ^ rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -171,7 +171,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs << rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -181,8 +181,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs << rhs;\n    |            --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -192,7 +192,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs >> rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -202,8 +202,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs >> rhs;\n    |            --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait"}, {"sha": "7d54de655bf58505def1dffaa56f4a941646249b", "filename": "src/test/ui/binop/binop-move-semantics.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -8,7 +8,7 @@ LL | fn double_move<T: Add<Output=()>>(x: T) {\n LL |     x\n    |     - value moved here\n LL |     +\n-LL |     x;  //~ ERROR: use of moved value\n+LL |     x;\n    |     ^ value used here after move\n \n error[E0382]: borrow of moved value: `x`\n@@ -21,7 +21,7 @@ LL | fn move_then_borrow<T: Add<Output=()> + Clone>(x: T) {\n LL |     x\n    |     - value moved here\n LL |     +\n-LL |     x.clone();  //~ ERROR: use of moved value\n+LL |     x.clone();\n    |     ^ value borrowed here after move\n \n error[E0505]: cannot move out of `x` because it is borrowed\n@@ -30,7 +30,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n LL |     let m = &x;\n    |             -- borrow of `x` occurs here\n ...\n-LL |     x  //~ ERROR: cannot move out of `x` because it is borrowed\n+LL |     x\n    |     ^ move out of `x` occurs here\n ...\n LL |     use_mut(n); use_imm(m);\n@@ -42,21 +42,21 @@ error[E0505]: cannot move out of `y` because it is borrowed\n LL |     let n = &mut y;\n    |             ------ borrow of `y` occurs here\n ...\n-LL |     y;  //~ ERROR: cannot move out of `y` because it is borrowed\n+LL |     y;\n    |     ^ move out of `y` occurs here\n LL |     use_mut(n); use_imm(m);\n    |             - borrow later used here\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/binop-move-semantics.rs:30:5\n    |\n-LL |     *m  //~ ERROR: cannot move out of borrowed content\n+LL |     *m\n    |     ^^ cannot move out of borrowed content\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/binop-move-semantics.rs:32:5\n    |\n-LL |     *n;  //~ ERROR: cannot move out of borrowed content\n+LL |     *n;\n    |     ^^ cannot move out of borrowed content\n \n error[E0502]: cannot borrow `f` as immutable because it is also borrowed as mutable\n@@ -68,7 +68,7 @@ LL |       &mut f\n    |  _____mutable borrow occurs here\n    | |\n LL | |     +\n-LL | |     &f;  //~ ERROR: cannot borrow `f` as immutable because it is also borrowed as mutable\n+LL | |     &f;\n    | |     ^-\n    | |_____||\n    |       |mutable borrow later used here\n@@ -83,7 +83,7 @@ LL |       &f\n    |  _____immutable borrow occurs here\n    | |\n LL | |     +\n-LL | |     &mut f;  //~ ERROR: cannot borrow `f` as mutable because it is also borrowed as immutable\n+LL | |     &mut f;\n    | |     ^^^^^-\n    | |_____|____|\n    |       |    immutable borrow later used here"}, {"sha": "acc2620681b6a0b843a6e936f35230b1cc9b2969", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0382]: use of moved value: `x`\n LL |     x\n    |     - value moved here\n LL |     +\n-LL |     x;  //~ ERROR: use of moved value\n+LL |     x;\n    |     ^ value used here after move\n    |\n    = note: move occurs because `x` has type `T`, which does not implement the `Copy` trait\n@@ -15,7 +15,7 @@ error[E0382]: use of moved value: `x`\n LL |     x\n    |     - value moved here\n LL |     +\n-LL |     x.clone();  //~ ERROR: use of moved value\n+LL |     x.clone();\n    |     ^ value used here after move\n    |\n    = note: move occurs because `x` has type `T`, which does not implement the `Copy` trait\n@@ -26,7 +26,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n LL |     let m = &x;\n    |              - borrow of `x` occurs here\n ...\n-LL |     x  //~ ERROR: cannot move out of `x` because it is borrowed\n+LL |     x\n    |     ^ move out of `x` occurs here\n \n error[E0505]: cannot move out of `y` because it is borrowed\n@@ -35,19 +35,19 @@ error[E0505]: cannot move out of `y` because it is borrowed\n LL |     let n = &mut y;\n    |                  - borrow of `y` occurs here\n ...\n-LL |     y;  //~ ERROR: cannot move out of `y` because it is borrowed\n+LL |     y;\n    |     ^ move out of `y` occurs here\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/binop-move-semantics.rs:30:5\n    |\n-LL |     *m  //~ ERROR: cannot move out of borrowed content\n+LL |     *m\n    |     ^^ cannot move out of borrowed content\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/binop-move-semantics.rs:32:5\n    |\n-LL |     *n;  //~ ERROR: cannot move out of borrowed content\n+LL |     *n;\n    |     ^^ cannot move out of borrowed content\n \n error[E0502]: cannot borrow `f` as immutable because it is also borrowed as mutable\n@@ -56,7 +56,7 @@ error[E0502]: cannot borrow `f` as immutable because it is also borrowed as muta\n LL |     &mut f\n    |          - mutable borrow occurs here\n LL |     +\n-LL |     &f;  //~ ERROR: cannot borrow `f` as immutable because it is also borrowed as mutable\n+LL |     &f;\n    |      ^\n    |      |\n    |      immutable borrow occurs here\n@@ -68,7 +68,7 @@ error[E0502]: cannot borrow `f` as mutable because it is also borrowed as immuta\n LL |     &f\n    |      - immutable borrow occurs here\n LL |     +\n-LL |     &mut f;  //~ ERROR: cannot borrow `f` as mutable because it is also borrowed as immutable\n+LL |     &mut f;\n    |          ^\n    |          |\n    |          mutable borrow occurs here"}, {"sha": "5981b8b60794c213aa5cb11651f914b921d5e00d", "filename": "src/test/ui/block-result/block-must-not-have-result-do.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-do.rs:3:9\n    |\n-LL |         true //~  ERROR mismatched types\n+LL |         true\n    |         ^^^^ expected (), found bool\n    |\n    = note: expected type `()`"}, {"sha": "8a41f8b8e3dff8cc8e28b73aa13f79827ced52e2", "filename": "src/test/ui/block-result/block-must-not-have-result-res.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     fn drop(&mut self) {\n    |                        - expected `()` because of default return type\n-LL |         true //~  ERROR mismatched types\n+LL |         true\n    |         ^^^^ expected (), found bool\n    |\n    = note: expected type `()`"}, {"sha": "302d2972f7de14629551b7429e901641492f7804", "filename": "src/test/ui/block-result/block-must-not-have-result-while.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-while.rs:3:9\n    |\n-LL |         true //~  ERROR mismatched types\n+LL |         true\n    |         ^^^^ expected (), found bool\n    |\n    = note: expected type `()`"}, {"sha": "618d020ce08b54c443add265e724fc8d744c337d", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:1:11\n    |\n-LL | fn f() -> String {  //~ ERROR mismatched types\n+LL | fn f() -> String {\n    |    -      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n    |    this function's body doesn't return\n@@ -15,7 +15,7 @@ LL |     \"bla\".to_string();\n error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:6:11\n    |\n-LL | fn g() -> String {  //~ ERROR mismatched types\n+LL | fn g() -> String {\n    |    -      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n    |    this function's body doesn't return"}, {"sha": "d73489a602df4dc31d6de97dad3c40f2a90d4403", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-11714.rs:1:14\n    |\n-LL | fn blah() -> i32 { //~ ERROR mismatched types\n+LL | fn blah() -> i32 {\n    |    ----      ^^^ expected i32, found ()\n    |    |\n    |    this function's body doesn't return"}, {"sha": "18adb15c9615d7c2f7e79fa27650a8e3949b1642", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:3:13\n    |\n-LL | fn foo() -> String {  //~ ERROR mismatched types\n+LL | fn foo() -> String {\n    |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n    |    this function's body doesn't return\n@@ -15,7 +15,7 @@ LL |     ;\n error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:11:13\n    |\n-LL | fn bar() -> String {  //~ ERROR mismatched types\n+LL | fn bar() -> String {\n    |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n    |    this function's body doesn't return"}, {"sha": "fb4feff37134a77bc40bc032caf8e9defc2dafde", "filename": "src/test/ui/block-result/issue-20862.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -14,7 +14,7 @@ error[E0618]: expected function, found `()`\n    |\n LL | / fn foo(x: i32) {\n LL | |     |y| x + y\n-LL | | //~^ ERROR: mismatched types\n+LL | |\n LL | | }\n    | |_- `foo` defined here returns `()`\n ..."}, {"sha": "e1e6428eda25525740671540df5b2969894c5ec7", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `{integer}: Scalar` is not satisfied\n   --> $DIR/issue-22645.rs:15:5\n    |\n-LL |   b + 3 //~ ERROR E0277\n+LL |   b + 3\n    |     ^ the trait `Scalar` is not implemented for `{integer}`\n    |\n    = help: the following implementations were found:\n@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n LL | fn main() {\n    |           - expected `()` because of default return type\n LL |   let b = Bob + 3.5;\n-LL |   b + 3 //~ ERROR E0277\n+LL |   b + 3\n    |   ^^^^^ expected (), found struct `Bob`\n    |\n    = note: expected type `()`"}, {"sha": "3ceff81ec4d63a6ead74d87591dfa0f439de07a5", "filename": "src/test/ui/block-result/unexpected-return-on-unit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,14 +1,14 @@\n error[E0308]: mismatched types\n   --> $DIR/unexpected-return-on-unit.rs:9:5\n    |\n-LL |     foo() //~ ERROR mismatched types\n+LL |     foo()\n    |     ^^^^^ expected (), found usize\n    |\n    = note: expected type `()`\n               found type `usize`\n help: try adding a semicolon\n    |\n-LL |     foo(); //~ ERROR mismatched types\n+LL |     foo();\n    |          ^\n help: try adding a return type\n    |"}, {"sha": "904d2ed97de813fdeba1544226bd274a1847c704", "filename": "src/test/ui/borrowck/assign_mutable_fields.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,19 +1,19 @@\n error[E0381]: use of possibly uninitialized variable: `x.0`\n   --> $DIR/assign_mutable_fields.rs:11:10\n    |\n-LL |     drop(x.0); //~ ERROR\n+LL |     drop(x.0);\n    |          ^^^ use of possibly uninitialized `x.0`\n \n error[E0381]: use of possibly uninitialized variable: `x.1`\n   --> $DIR/assign_mutable_fields.rs:12:10\n    |\n-LL |     drop(x.1); //~ ERROR\n+LL |     drop(x.1);\n    |          ^^^ use of possibly uninitialized `x.1`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/assign_mutable_fields.rs:19:10\n    |\n-LL |     drop(x); //~ ERROR\n+LL |     drop(x);\n    |          ^ use of possibly uninitialized `x`\n \n error: aborting due to 3 previous errors"}, {"sha": "af45c8a980dfc58733f3e9a0d5382b365b812d0e", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,73 +1,73 @@\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:15:27\n    |\n-LL |         let _f = to_fn(|| x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(|| x = 42);\n    |                           ^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:15:24\n    |\n-LL |         let _f = to_fn(|| x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(|| x = 42);\n    |                        ^^^^^^^^^\n \n error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:18:31\n    |\n-LL |         let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(|| set(&mut y));\n    |                               ^^^^^^ cannot borrow as mutable\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:18:24\n    |\n-LL |         let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(|| set(&mut y));\n    |                        ^^^^^^^^^^^^^^\n \n error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:21:55\n    |\n-LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n    |                                                       ^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:21:52\n    |\n-LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n    |                                                    ^^^^^^^^^\n \n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:27:32\n    |\n-LL |         let _f = to_fn(move || x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(move || x = 42);\n    |                                ^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:27:24\n    |\n-LL |         let _f = to_fn(move || x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(move || x = 42);\n    |                        ^^^^^^^^^^^^^^\n \n error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:30:36\n    |\n-LL |         let _g = to_fn(move || set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(move || set(&mut y));\n    |                                    ^^^^^^ cannot borrow as mutable\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:30:24\n    |\n-LL |         let _g = to_fn(move || set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(move || set(&mut y));\n    |                        ^^^^^^^^^^^^^^^^^^^\n \n error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:33:65\n    |\n-LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n    |                                                                 ^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:33:57\n    |\n-LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n    |                                                         ^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors"}, {"sha": "09adb350e00de5f4f29b9e518685ba418f466f85", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,75 +1,75 @@\n error[E0387]: cannot assign to data in a captured outer variable in an `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:15:27\n    |\n-LL |         let _f = to_fn(|| x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(|| x = 42);\n    |                           ^^^^^^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/borrow-immutable-upvar-mutation.rs:15:24\n    |\n-LL |         let _f = to_fn(|| x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(|| x = 42);\n    |                        ^^^^^^^^^\n \n error[E0387]: cannot borrow data mutably in a captured outer variable in an `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:18:36\n    |\n-LL |         let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(|| set(&mut y));\n    |                                    ^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/borrow-immutable-upvar-mutation.rs:18:24\n    |\n-LL |         let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(|| set(&mut y));\n    |                        ^^^^^^^^^^^^^^\n \n error[E0387]: cannot assign to data in a captured outer variable in an `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:21:55\n    |\n-LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n    |                                                       ^^^^^^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/borrow-immutable-upvar-mutation.rs:21:52\n    |\n-LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n    |                                                    ^^^^^^^^^\n \n error[E0594]: cannot assign to captured outer variable in an `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:27:32\n    |\n-LL |         let _f = to_fn(move || x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(move || x = 42);\n    |                                ^^^^^^\n    |\n    = note: `Fn` closures cannot capture their enclosing environment for modifications\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/borrow-immutable-upvar-mutation.rs:27:24\n    |\n-LL |         let _f = to_fn(move || x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(move || x = 42);\n    |                        ^^^^^^^^^^^^^^\n \n error[E0596]: cannot borrow captured outer variable in an `Fn` closure as mutable\n   --> $DIR/borrow-immutable-upvar-mutation.rs:30:41\n    |\n-LL |         let _g = to_fn(move || set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(move || set(&mut y));\n    |                                         ^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/borrow-immutable-upvar-mutation.rs:30:24\n    |\n-LL |         let _g = to_fn(move || set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(move || set(&mut y));\n    |                        ^^^^^^^^^^^^^^^^^^^\n \n error[E0594]: cannot assign to captured outer variable in an `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:33:65\n    |\n-LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n    |                                                                 ^^^^^^\n    |\n    = note: `Fn` closures cannot capture their enclosing environment for modifications\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/borrow-immutable-upvar-mutation.rs:33:57\n    |\n-LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n    |                                                         ^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors"}, {"sha": "5c40555c501cb5754c8a9452366f9db76a99eadd", "filename": "src/test/ui/borrowck/borrow-tuple-fields.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |     let r = &x.0;\n    |             ---- borrow of `x.0` occurs here\n-LL |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n+LL |     let y = x;\n    |             ^ move out of `x` occurs here\n LL | \n LL |     r.use_ref();\n@@ -14,7 +14,7 @@ error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immu\n    |\n LL |     let a = &x.0;\n    |             ---- immutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n+LL |     let b = &mut x.0;\n    |             ^^^^^^^^ mutable borrow occurs here\n LL |     a.use_ref();\n    |     - immutable borrow later used here\n@@ -24,7 +24,7 @@ error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n    |\n LL |     let a = &mut x.0;\n    |             -------- first mutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n+LL |     let b = &mut x.0;\n    |             ^^^^^^^^ second mutable borrow occurs here\n LL |     a.use_ref();\n    |     - first borrow later used here\n@@ -34,7 +34,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |     let r = &x.0;\n    |             ---- borrow of `x.0` occurs here\n-LL |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n+LL |     let y = x;\n    |             ^ move out of `x` occurs here\n LL |     r.use_ref();\n    |     - borrow later used here\n@@ -44,7 +44,7 @@ error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immu\n    |\n LL |     let a = &x.0;\n    |             ---- immutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n+LL |     let b = &mut x.0;\n    |             ^^^^^^^^ mutable borrow occurs here\n LL |     a.use_ref();\n    |     - immutable borrow later used here\n@@ -54,7 +54,7 @@ error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n    |\n LL |     let a = &mut x.0;\n    |             -------- first mutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n+LL |     let b = &mut x.0;\n    |             ^^^^^^^^ second mutable borrow occurs here\n LL |     a.use_mut();\n    |     - first borrow later used here"}, {"sha": "f7fc06e1b4fbd4a5d9cb8ade3e2d973cdf0feec7", "filename": "src/test/ui/borrowck/borrow-tuple-fields.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,15 +3,15 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |     let r = &x.0;\n    |              --- borrow of `x.0` occurs here\n-LL |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n+LL |     let y = x;\n    |         ^ move out of `x` occurs here\n \n error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n   --> $DIR/borrow-tuple-fields.rs:18:18\n    |\n LL |     let a = &x.0;\n    |              --- immutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n+LL |     let b = &mut x.0;\n    |                  ^^^ mutable borrow occurs here\n ...\n LL | }\n@@ -22,7 +22,7 @@ error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n    |\n LL |     let a = &mut x.0;\n    |                  --- first mutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n+LL |     let b = &mut x.0;\n    |                  ^^^ second mutable borrow occurs here\n ...\n LL | }\n@@ -33,15 +33,15 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |     let r = &x.0;\n    |              --- borrow of `x.0` occurs here\n-LL |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n+LL |     let y = x;\n    |         ^ move out of `x` occurs here\n \n error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n   --> $DIR/borrow-tuple-fields.rs:33:18\n    |\n LL |     let a = &x.0;\n    |              --- immutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n+LL |     let b = &mut x.0;\n    |                  ^^^ mutable borrow occurs here\n ...\n LL | }\n@@ -52,7 +52,7 @@ error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n    |\n LL |     let a = &mut x.0;\n    |                  --- first mutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n+LL |     let b = &mut x.0;\n    |                  ^^^ second mutable borrow occurs here\n LL |     a.use_mut();\n LL | }"}, {"sha": "2db075194810e122f754aa3226b114593ae85832", "filename": "src/test/ui/borrowck/borrowck-and-init.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `i`\n   --> $DIR/borrowck-and-init.rs:5:20\n    |\n-LL |     println!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`\n+LL |     println!(\"{}\", i);\n    |                    ^ use of possibly uninitialized `i`\n \n error: aborting due to previous error"}, {"sha": "13696ac8347b55728116a9440cd9275b6337ecf3", "filename": "src/test/ui/borrowck/borrowck-and-init.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `i`\n   --> $DIR/borrowck-and-init.rs:5:20\n    |\n-LL |     println!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`\n+LL |     println!(\"{}\", i);\n    |                    ^ use of possibly uninitialized `i`\n \n error: aborting due to previous error"}, {"sha": "7a959fb6ec62f621948bf9241c809a0bdc767cf4", "filename": "src/test/ui/borrowck/borrowck-anon-fields-struct.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n LL |         Y(ref mut a, _) => a\n    |           --------- first mutable borrow occurs here\n ...\n-LL |         Y(ref mut b, _) => b //~ ERROR cannot borrow\n+LL |         Y(ref mut b, _) => b\n    |           ^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     *a += 1;"}, {"sha": "efe94dee2e7c5955babf05ce3559ac048e43cb1f", "filename": "src/test/ui/borrowck/borrowck-anon-fields-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n LL |         Y(ref mut a, _) => a\n    |           --------- first mutable borrow occurs here\n ...\n-LL |         Y(ref mut b, _) => b //~ ERROR cannot borrow\n+LL |         Y(ref mut b, _) => b\n    |           ^^^^^^^^^ second mutable borrow occurs here\n ...\n LL | }"}, {"sha": "88a8867f5ee080cd8415f038716f43a9f2c1819f", "filename": "src/test/ui/borrowck/borrowck-anon-fields-tuple.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n LL |         (ref mut a, _) => a\n    |          --------- first mutable borrow occurs here\n ...\n-LL |         (ref mut b, _) => b //~ ERROR cannot borrow\n+LL |         (ref mut b, _) => b\n    |          ^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     *a += 1;"}, {"sha": "40f96cb712c0fcf813d44260ac6c8db5c6f3cd75", "filename": "src/test/ui/borrowck/borrowck-anon-fields-tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n LL |         (ref mut a, _) => a\n    |          --------- first mutable borrow occurs here\n ...\n-LL |         (ref mut b, _) => b //~ ERROR cannot borrow\n+LL |         (ref mut b, _) => b\n    |          ^^^^^^^^^ second mutable borrow occurs here\n ...\n LL | }"}, {"sha": "6c8a32ee39167765c609ec0c92c58ac614237ff5", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -19,7 +19,7 @@ error[E0503]: cannot use `y` because it was mutably borrowed\n LL |       Foo::Y(ref mut a, _) => a,\n    |              --------- borrow of `y.0` occurs here\n ...\n-LL |       Foo::Y(ref mut b, _) => b, //~ ERROR cannot borrow\n+LL |       Foo::Y(ref mut b, _) => b,\n    |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n ...\n LL |     *a += 1;\n@@ -31,7 +31,7 @@ error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n LL |       Foo::Y(ref mut a, _) => a,\n    |              --------- first mutable borrow occurs here\n ...\n-LL |       Foo::Y(ref mut b, _) => b, //~ ERROR cannot borrow\n+LL |       Foo::Y(ref mut b, _) => b,\n    |              ^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     *a += 1;"}, {"sha": "2835cab9092f11a7f6462555ca3c0c197cc1187d", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n LL |       Foo::Y(ref mut a, _) => a,\n    |              --------- first mutable borrow occurs here\n ...\n-LL |       Foo::Y(ref mut b, _) => b, //~ ERROR cannot borrow\n+LL |       Foo::Y(ref mut b, _) => b,\n    |              ^^^^^^^^^ second mutable borrow occurs here\n ...\n LL | }"}, {"sha": "cf15833140927640657e04bd698e7709342a4b71", "filename": "src/test/ui/borrowck/borrowck-argument.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,29 +3,29 @@ error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n    |\n LL | fn func(arg: S) {\n    |         --- help: consider changing this to be mutable: `mut arg`\n-LL |     arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+LL |     arg.mutate();\n    |     ^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:15:9\n    |\n LL |     fn method(&self, arg: S) {\n    |                      --- help: consider changing this to be mutable: `mut arg`\n-LL |         arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+LL |         arg.mutate();\n    |         ^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:21:9\n    |\n LL |     fn default(&self, arg: S) {\n    |                       --- help: consider changing this to be mutable: `mut arg`\n-LL |         arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+LL |         arg.mutate();\n    |         ^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:32:17\n    |\n-LL |     (|arg: S| { arg.mutate() })(s); //~ ERROR: cannot borrow immutable argument\n+LL |     (|arg: S| { arg.mutate() })(s);\n    |       ---       ^^^ cannot borrow as mutable\n    |       |\n    |       help: consider changing this to be mutable: `mut arg`"}, {"sha": "6c9c411cbcf035b2372e40d7d636590f13472d7f", "filename": "src/test/ui/borrowck/borrowck-argument.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,29 +3,29 @@ error[E0596]: cannot borrow immutable argument `arg` as mutable\n    |\n LL | fn func(arg: S) {\n    |         --- help: make this binding mutable: `mut arg`\n-LL |     arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+LL |     arg.mutate();\n    |     ^^^ cannot borrow mutably\n \n error[E0596]: cannot borrow immutable argument `arg` as mutable\n   --> $DIR/borrowck-argument.rs:15:9\n    |\n LL |     fn method(&self, arg: S) {\n    |                      --- help: make this binding mutable: `mut arg`\n-LL |         arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+LL |         arg.mutate();\n    |         ^^^ cannot borrow mutably\n \n error[E0596]: cannot borrow immutable argument `arg` as mutable\n   --> $DIR/borrowck-argument.rs:21:9\n    |\n LL |     fn default(&self, arg: S) {\n    |                       --- help: make this binding mutable: `mut arg`\n-LL |         arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+LL |         arg.mutate();\n    |         ^^^ cannot borrow mutably\n \n error[E0596]: cannot borrow immutable argument `arg` as mutable\n   --> $DIR/borrowck-argument.rs:32:17\n    |\n-LL |     (|arg: S| { arg.mutate() })(s); //~ ERROR: cannot borrow immutable argument\n+LL |     (|arg: S| { arg.mutate() })(s);\n    |       ---       ^^^ cannot borrow mutably\n    |       |\n    |       help: make this binding mutable: `mut arg`"}, {"sha": "93f1d8c5258632a07285553f9d90412b8c58b17c", "filename": "src/test/ui/borrowck/borrowck-assign-comp-idx.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immuta\n LL |     let q: &isize = &p[0];\n    |                      - immutable borrow occurs here\n LL | \n-LL |     p[0] = 5; //~ ERROR cannot borrow\n+LL |     p[0] = 5;\n    |     ^ mutable borrow occurs here\n LL | \n LL |     println!(\"{}\", *q);\n@@ -17,7 +17,7 @@ LL |     borrow(\n    |     ------ immutable borrow later used by call\n LL |         &p,\n    |         -- immutable borrow occurs here\n-LL |         || p[0] = 5); //~ ERROR cannot borrow `p` as mutable\n+LL |         || p[0] = 5);\n    |         ^^ - second borrow occurs due to use of `p` in closure\n    |         |\n    |         mutable borrow occurs here"}, {"sha": "0d092e6812d941f63704221081fe1b0e4fe0231b", "filename": "src/test/ui/borrowck/borrowck-assign-comp-idx.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immuta\n LL |     let q: &isize = &p[0];\n    |                      - immutable borrow occurs here\n LL | \n-LL |     p[0] = 5; //~ ERROR cannot borrow\n+LL |     p[0] = 5;\n    |     ^ mutable borrow occurs here\n ...\n LL | }\n@@ -15,7 +15,7 @@ error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immuta\n    |\n LL |         &p,\n    |          - immutable borrow occurs here\n-LL |         || p[0] = 5); //~ ERROR cannot borrow `p` as mutable\n+LL |         || p[0] = 5);\n    |         ^^ -       - immutable borrow ends here\n    |         |  |\n    |         |  borrow occurs due to use of `p` in closure"}, {"sha": "d8ccf36852a512a206caf90411db783dad2a6e13", "filename": "src/test/ui/borrowck/borrowck-assign-to-andmut-in-aliasable-loc.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,15 +3,15 @@ error[E0594]: cannot assign to `*s.pointer` which is behind a `&` reference\n    |\n LL | fn a(s: &S) {\n    |         -- help: consider changing this to be a mutable reference: `&mut S<'_>`\n-LL |     *s.pointer += 1; //~ ERROR cannot assign\n+LL |     *s.pointer += 1;\n    |     ^^^^^^^^^^^^^^^ `s` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*s.pointer` which is behind a `&` reference\n   --> $DIR/borrowck-assign-to-andmut-in-aliasable-loc.rs:17:5\n    |\n LL | fn c(s: & &mut S) {\n    |         -------- help: consider changing this to be a mutable reference: `&mut &mut S<'_>`\n-LL |     *s.pointer += 1; //~ ERROR cannot assign\n+LL |     *s.pointer += 1;\n    |     ^^^^^^^^^^^^^^^ `s` is a `&` reference, so the data it refers to cannot be written\n \n error: aborting due to 2 previous errors"}, {"sha": "5ec1ff2c058da4f753c7d3bc9a2483f56c1d238d", "filename": "src/test/ui/borrowck/borrowck-assign-to-andmut-in-aliasable-loc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,15 +3,15 @@ error[E0389]: cannot assign to data in a `&` reference\n    |\n LL | fn a(s: &S) {\n    |         -- use `&mut S` here to make mutable\n-LL |     *s.pointer += 1; //~ ERROR cannot assign\n+LL |     *s.pointer += 1;\n    |     ^^^^^^^^^^^^^^^ assignment into an immutable reference\n \n error[E0389]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-assign-to-andmut-in-aliasable-loc.rs:17:5\n    |\n LL | fn c(s: & &mut S) {\n    |         -------- use `&mut &mut S` here to make mutable\n-LL |     *s.pointer += 1; //~ ERROR cannot assign\n+LL |     *s.pointer += 1;\n    |     ^^^^^^^^^^^^^^^ assignment into an immutable reference\n \n error: aborting due to 2 previous errors"}, {"sha": "0aacaf9cf4797fe1f47ef60a1fa66a38d46f97de", "filename": "src/test/ui/borrowck/borrowck-assign-to-andmut-in-borrowed-loc.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0503]: cannot use `*y.pointer` because it was mutably borrowed\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n    |                                   ------ borrow of `y` occurs here\n-LL |         *y.pointer += 1; //~ ERROR cannot assign\n+LL |         *y.pointer += 1;\n    |         ^^^^^^^^^^^^^^^ use of borrowed `y`\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here\n@@ -13,7 +13,7 @@ error[E0506]: cannot assign to `*y.pointer` because it is borrowed\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n    |                                   ------ borrow of `*y.pointer` occurs here\n-LL |         *y.pointer += 1; //~ ERROR cannot assign\n+LL |         *y.pointer += 1;\n    |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here"}, {"sha": "10d6ac5464d05edd72b20164b59e6444d9d6f837", "filename": "src/test/ui/borrowck/borrowck-assign-to-andmut-in-borrowed-loc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0506]: cannot assign to `*y.pointer` because it is borrowed\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n    |                                        - borrow of `*y.pointer` occurs here\n-LL |         *y.pointer += 1; //~ ERROR cannot assign\n+LL |         *y.pointer += 1;\n    |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n \n error: aborting due to previous error"}, {"sha": "3ed76c13f6a7bf0370cd20c6888ea17e5d4fc4a5", "filename": "src/test/ui/borrowck/borrowck-auto-mut-ref-to-immut-var.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n    |\n LL |     let x = Foo { x: 3 };\n    |         - help: consider changing this to be mutable: `mut x`\n-LL |     x.printme();    //~ ERROR cannot borrow\n+LL |     x.printme();\n    |     ^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "759b778e35c825f2b66117d29027d8f62cb6ac16", "filename": "src/test/ui/borrowck/borrowck-auto-mut-ref-to-immut-var.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow immutable local variable `x` as mutable\n    |\n LL |     let x = Foo { x: 3 };\n    |         - help: make this binding mutable: `mut x`\n-LL |     x.printme();    //~ ERROR cannot borrow\n+LL |     x.printme();\n    |     ^ cannot borrow mutably\n \n error: aborting due to previous error"}, {"sha": "c2dfb687e8ee9ccc3e22ee1407c5ffdd34cfc989", "filename": "src/test/ui/borrowck/borrowck-autoref-3261.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL |     (&mut x).with(\n    |     -------- ---- first borrow later used by call\n    |     |\n    |     first mutable borrow occurs here\n-LL |         |opt| { //~ ERROR cannot borrow `x` as mutable more than once at a time\n+LL |         |opt| {\n    |         ^^^^^ second mutable borrow occurs here\n ...\n LL |                     x = X(Either::Left((0, 0)));"}, {"sha": "280704a27151c108406003756b5580ee28f90b53", "filename": "src/test/ui/borrowck/borrowck-autoref-3261.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n    |\n LL |     (&mut x).with(\n    |           - first mutable borrow occurs here\n-LL |         |opt| { //~ ERROR cannot borrow `x` as mutable more than once at a time\n+LL |         |opt| {\n    |         ^^^^^ second mutable borrow occurs here\n ...\n LL |                     x = X(Either::Left((0, 0)));"}, {"sha": "e273a778fdad5d614cba07f5531188a807c18c95", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-free.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL |     add(\n    |     --- immutable borrow later used by call\n LL |         &*a,\n    |         --- immutable borrow occurs here\n-LL |         rewrite(&mut a)); //~ ERROR cannot borrow\n+LL |         rewrite(&mut a));\n    |                 ^^^^^^ mutable borrow occurs here\n \n error[E0502]: cannot borrow `a` as mutable because it is also borrowed as immutable\n@@ -15,7 +15,7 @@ LL |     add(\n    |     --- immutable borrow later used by call\n LL |         &*a,\n    |         --- immutable borrow occurs here\n-LL |         rewrite(&mut a)); //~ ERROR cannot borrow\n+LL |         rewrite(&mut a));\n    |                 ^^^^^^ mutable borrow occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "06ec2bdac71510df8135359d8d9107bc90b282ea", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-free.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `a` as mutable because `*a` is also borrowed as immu\n    |\n LL |         &*a,\n    |          -- immutable borrow occurs here\n-LL |         rewrite(&mut a)); //~ ERROR cannot borrow\n+LL |         rewrite(&mut a));\n    |                      ^ - immutable borrow ends here\n    |                      |\n    |                      mutable borrow occurs here\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `a` as mutable because `*a` is also borrowed as immu\n    |\n LL |         &*a,\n    |          -- immutable borrow occurs here\n-LL |         rewrite(&mut a)); //~ ERROR cannot borrow\n+LL |         rewrite(&mut a));\n    |                      ^ - immutable borrow ends here\n    |                      |\n    |                      mutable borrow occurs here"}, {"sha": "371bcf2b69cf847d1b6d0b912a7875a4e529c30f", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-move.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL |     add(\n    |     --- borrow later used by call\n LL |         &*a,\n    |         --- borrow of `*a` occurs here\n-LL |         a); //~ ERROR cannot move\n+LL |         a);\n    |         ^ move out of `a` occurs here\n \n error[E0505]: cannot move out of `a` because it is borrowed\n@@ -15,7 +15,7 @@ LL |     add(\n    |     --- borrow later used by call\n LL |         &*a,\n    |         --- borrow of `*a` occurs here\n-LL |         a); //~ ERROR cannot move\n+LL |         a);\n    |         ^ move out of `a` occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "3b34a61364ab66b101c900a273dcb14c7145c2bd", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-move.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,15 +3,15 @@ error[E0505]: cannot move out of `a` because it is borrowed\n    |\n LL |         &*a,\n    |          -- borrow of `*a` occurs here\n-LL |         a); //~ ERROR cannot move\n+LL |         a);\n    |         ^ move out of `a` occurs here\n \n error[E0505]: cannot move out of `a` because it is borrowed\n   --> $DIR/borrowck-bad-nested-calls-move.rs:32:9\n    |\n LL |         &*a,\n    |          -- borrow of `*a` occurs here\n-LL |         a); //~ ERROR cannot move\n+LL |         a);\n    |         ^ move out of `a` occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "d2a49962bafca7d0f36ed941e5b8bdb538229bed", "filename": "src/test/ui/borrowck/borrowck-block-unint.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-block-unint.rs:4:11\n    |\n-LL |     force(|| {  //~ ERROR capture of possibly uninitialized variable: `x`\n+LL |     force(|| {\n    |           ^^ use of possibly uninitialized `x`\n LL |         println!(\"{}\", x);\n    |                        - borrow occurs due to use in closure"}, {"sha": "ab55d7994d0c9d634f74566e40c14a80e00e6791", "filename": "src/test/ui/borrowck/borrowck-block-unint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: capture of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-block-unint.rs:4:11\n    |\n-LL |     force(|| {  //~ ERROR capture of possibly uninitialized variable: `x`\n+LL |     force(|| {\n    |           ^^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "ad6bd7dc942620cccf01df537ebfd18c9855ee56", "filename": "src/test/ui/borrowck/borrowck-borrow-from-owned-ptr.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                ------------- first mutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n    |     ----- first borrow later used here\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                ------------- mutable borrow occurs here\n-LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &foo.bar1;\n    |                 ^^^^^^^^^ immutable borrow occurs here\n LL |     *bar1;\n    |     ----- mutable borrow later used here\n@@ -23,7 +23,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let bar1 = &foo.bar1;\n    |                --------- immutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n    |     ----- immutable borrow later used here\n@@ -45,9 +45,9 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n    |                 ^^^^^^^^^ immutable borrow occurs here\n-LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &*foo;\n LL |     *bar1;\n    |     ----- mutable borrow later used here\n \n@@ -56,8 +56,8 @@ error[E0502]: cannot borrow `*foo` as immutable because it is also borrowed as m\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n-LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n+LL |     let _foo2 = &*foo;\n    |                 ^^^^^ immutable borrow occurs here\n LL |     *bar1;\n    |     ----- mutable borrow later used here\n@@ -67,7 +67,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ first mutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n    |     ----- first borrow later used here\n@@ -77,7 +77,7 @@ error[E0499]: cannot borrow `*foo` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ first mutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                 ^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n    |     ----- first borrow later used here\n@@ -87,7 +87,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                -------------- immutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n    |     ----- immutable borrow later used here\n@@ -97,7 +97,7 @@ error[E0502]: cannot borrow `*foo` as mutable because it is also borrowed as imm\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                -------------- immutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                 ^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n    |     ----- immutable borrow later used here\n@@ -107,7 +107,7 @@ error[E0596]: cannot borrow `foo.bar1` as mutable, as `foo` is not declared as m\n    |\n LL |     let foo = make_foo();\n    |         --- help: consider changing this to be mutable: `mut foo`\n-LL |     let bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let bar1 = &mut foo.bar1;\n    |                ^^^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 11 previous errors"}, {"sha": "a4fb28d0e8151efb8674091295c1e1308ac5ae04", "filename": "src/test/ui/borrowck/borrowck-borrow-from-owned-ptr.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                     -------- first mutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                      ^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -14,7 +14,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                     -------- mutable borrow occurs here\n-LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &foo.bar1;\n    |                  ^^^^^^^^ immutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -25,7 +25,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let bar1 = &foo.bar1;\n    |                 -------- immutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                      ^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -36,7 +36,7 @@ error[E0499]: cannot borrow `foo` (via `foo.bar2`) as mutable more than once at\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                     -------- first mutable borrow occurs here (via `foo.bar1`)\n-LL |     let _bar2 = &mut foo.bar2; //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar2;\n    |                      ^^^^^^^^ second mutable borrow occurs here (via `foo.bar2`)\n LL |     *bar1;\n LL | }\n@@ -49,7 +49,7 @@ LL |         Foo { bar1: ref mut _bar1, bar2: ref mut _bar2 } => {}\n    |                     -------------        ^^^^^^^^^^^^^ second mutable borrow occurs here (via `foo.bar2`)\n    |                     |\n    |                     first mutable borrow occurs here (via `foo.bar1`)\n-LL |         //~^ ERROR cannot borrow\n+LL |\n LL |     }\n    |     - first borrow ends here\n \n@@ -70,7 +70,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because `foo.bar1.int1` is a\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n    |                  ^^^^^^^^ immutable borrow occurs here\n ...\n LL | }\n@@ -81,8 +81,8 @@ error[E0502]: cannot borrow `*foo` as immutable because `foo.bar1.int1` is also\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n-LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n+LL |     let _foo2 = &*foo;\n    |                  ^^^^ immutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -93,7 +93,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- first mutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                      ^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -104,7 +104,7 @@ error[E0499]: cannot borrow `*foo` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- first mutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                      ^^^^ second mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -115,7 +115,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because `foo.bar1.int1` is als\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                 ------------- immutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                      ^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -126,7 +126,7 @@ error[E0502]: cannot borrow `*foo` as mutable because `foo.bar1.int1` is also bo\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                 ------------- immutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                      ^^^^ mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -137,7 +137,7 @@ error[E0502]: cannot borrow `foo` (via `foo.bar2`) as immutable because `foo` is\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                     -------- mutable borrow occurs here (via `foo.bar1`)\n-LL |     let _foo1 = &foo.bar2; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar2;\n    |                  ^^^^^^^^ immutable borrow of `foo.bar2` -- which overlaps with `foo.bar1` -- occurs here\n LL |     *bar1;\n LL | }\n@@ -148,15 +148,15 @@ error[E0596]: cannot borrow field `foo.bar1` of immutable binding as mutable\n    |\n LL |     let foo = make_foo();\n    |         --- help: make this binding mutable: `mut foo`\n-LL |     let bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let bar1 = &mut foo.bar1;\n    |                     ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0499]: cannot borrow `foo` (via `foo.bar2.int2`) as mutable more than once at a time\n   --> $DIR/borrowck-borrow-from-owned-ptr.rs:128:21\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- first mutable borrow occurs here (via `foo.bar1.int1`)\n-LL |     let foo1 = &mut foo.bar2.int2; //~ ERROR cannot borrow\n+LL |     let foo1 = &mut foo.bar2.int2;\n    |                     ^^^^^^^^^^^^^ second mutable borrow occurs here (via `foo.bar2.int2`)\n ...\n LL | }"}, {"sha": "b5c618479187590323fbd285ee08cacfa35dd797", "filename": "src/test/ui/borrowck/borrowck-borrow-from-stack-variable.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                ------------- first mutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n    |     ----- first borrow later used here\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                ------------- mutable borrow occurs here\n-LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &foo.bar1;\n    |                 ^^^^^^^^^ immutable borrow occurs here\n LL |     *bar1;\n    |     ----- mutable borrow later used here\n@@ -23,7 +23,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let bar1 = &foo.bar1;\n    |                --------- immutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n    |     ----- immutable borrow later used here\n@@ -45,9 +45,9 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n    |                 ^^^^^^^^^ immutable borrow occurs here\n-LL |     let _foo2 = &foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &foo;\n LL |     *bar1;\n    |     ----- mutable borrow later used here\n \n@@ -56,8 +56,8 @@ error[E0502]: cannot borrow `foo` as immutable because it is also borrowed as mu\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n-LL |     let _foo2 = &foo; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n+LL |     let _foo2 = &foo;\n    |                 ^^^^ immutable borrow occurs here\n LL |     *bar1;\n    |     ----- mutable borrow later used here\n@@ -67,7 +67,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ first mutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n    |     ----- first borrow later used here\n@@ -77,7 +77,7 @@ error[E0499]: cannot borrow `foo` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ first mutable borrow occurs here\n-LL |     let _foo2 = &mut foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut foo;\n    |                 ^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n    |     ----- first borrow later used here\n@@ -87,7 +87,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                -------------- immutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n    |     ----- immutable borrow later used here\n@@ -97,7 +97,7 @@ error[E0502]: cannot borrow `foo` as mutable because it is also borrowed as immu\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                -------------- immutable borrow occurs here\n-LL |     let _foo2 = &mut foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut foo;\n    |                 ^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n    |     ----- immutable borrow later used here\n@@ -107,7 +107,7 @@ error[E0596]: cannot borrow `foo.bar1` as mutable, as `foo` is not declared as m\n    |\n LL |     let foo = make_foo();\n    |         --- help: consider changing this to be mutable: `mut foo`\n-LL |     let bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let bar1 = &mut foo.bar1;\n    |                ^^^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 11 previous errors"}, {"sha": "fe60d944a44fb333d23f4264c45af05545bafacb", "filename": "src/test/ui/borrowck/borrowck-borrow-from-stack-variable.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                     -------- first mutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                      ^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -14,7 +14,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                     -------- mutable borrow occurs here\n-LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &foo.bar1;\n    |                  ^^^^^^^^ immutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -25,7 +25,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let bar1 = &foo.bar1;\n    |                 -------- immutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                      ^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -48,7 +48,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because `foo.bar1.int1` is a\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n    |                  ^^^^^^^^ immutable borrow occurs here\n ...\n LL | }\n@@ -59,8 +59,8 @@ error[E0502]: cannot borrow `foo` as immutable because `foo.bar1.int1` is also b\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n-LL |     let _foo2 = &foo; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n+LL |     let _foo2 = &foo;\n    |                  ^^^ immutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -71,7 +71,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- first mutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                      ^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -82,7 +82,7 @@ error[E0499]: cannot borrow `foo` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- first mutable borrow occurs here\n-LL |     let _foo2 = &mut foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut foo;\n    |                      ^^^ second mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -93,7 +93,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because `foo.bar1.int1` is als\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                 ------------- immutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                      ^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -104,7 +104,7 @@ error[E0502]: cannot borrow `foo` as mutable because `foo.bar1.int1` is also bor\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                 ------------- immutable borrow occurs here\n-LL |     let _foo2 = &mut foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut foo;\n    |                      ^^^ mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -115,7 +115,7 @@ error[E0596]: cannot borrow field `foo.bar1` of immutable binding as mutable\n    |\n LL |     let foo = make_foo();\n    |         --- help: make this binding mutable: `mut foo`\n-LL |     let bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let bar1 = &mut foo.bar1;\n    |                     ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error: aborting due to 11 previous errors"}, {"sha": "71bf052c93d616433e96e4682e3081b7d251e9ca", "filename": "src/test/ui/borrowck/borrowck-borrow-from-temporary.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing temporary value\n   --> $DIR/borrowck-borrow-from-temporary.rs:10:5\n    |\n-LL |     let &Foo(ref x) = &id(Foo(3)); //~ ERROR borrowed value does not live long enough\n+LL |     let &Foo(ref x) = &id(Foo(3));\n    |                        ---------- temporary value created here\n LL |     x\n    |     ^ returns a value referencing data owned by the current function"}, {"sha": "6f101f690cd29233ef7f52eda633d63b2223023b", "filename": "src/test/ui/borrowck/borrowck-borrow-from-temporary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-borrow-from-temporary.rs:9:24\n    |\n-LL |     let &Foo(ref x) = &id(Foo(3)); //~ ERROR borrowed value does not live long enough\n+LL |     let &Foo(ref x) = &id(Foo(3));\n    |                        ^^^^^^^^^^ temporary value does not live long enough\n LL |     x\n LL | }"}, {"sha": "7c1c063d260b2c38fdcb31b3942ff32c6b7b7084", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,15 +4,15 @@ error[E0594]: cannot assign to `**t1` which is behind a `&` reference\n LL |     let t1 = t0;\n    |         -- help: consider changing this to be a mutable reference: `&mut &mut isize`\n LL |     let p: &isize = &**t0;\n-LL |     **t1 = 22; //~ ERROR cannot assign\n+LL |     **t1 = 22;\n    |     ^^^^^^^^^ `t1` is a `&` reference, so the data it refers to cannot be written\n \n error[E0502]: cannot borrow `**t0` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:14:21\n    |\n LL |     let t1 = &mut *t0;\n    |              -------- mutable borrow occurs here\n-LL |     let p: &isize = &**t0; //~ ERROR cannot borrow\n+LL |     let p: &isize = &**t0;\n    |                     ^^^^^ immutable borrow occurs here\n LL |     **t1 = 22;\n    |     --------- mutable borrow later used here\n@@ -22,7 +22,7 @@ error[E0596]: cannot borrow `**t0` as mutable, as it is behind a `&` reference\n    |\n LL | fn foo4(t0: & &mut isize) {\n    |             ------------ help: consider changing this to be a mutable reference: `&mut &mut isize`\n-LL |     let x:  &mut isize = &mut **t0; //~ ERROR cannot borrow\n+LL |     let x:  &mut isize = &mut **t0;\n    |                          ^^^^^^^^^ `t0` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 3 previous errors"}, {"sha": "709a797edcb4efb18c0f7aa000590a217141dd83", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,15 +1,15 @@\n error[E0389]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:9:5\n    |\n-LL |     **t1 = 22; //~ ERROR cannot assign\n+LL |     **t1 = 22;\n    |     ^^^^^^^^^ assignment into an immutable reference\n \n error[E0502]: cannot borrow `**t0` as immutable because `*t0` is also borrowed as mutable\n   --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:14:22\n    |\n LL |     let t1 = &mut *t0;\n    |                   --- mutable borrow occurs here\n-LL |     let p: &isize = &**t0; //~ ERROR cannot borrow\n+LL |     let p: &isize = &**t0;\n    |                      ^^^^ immutable borrow occurs here\n LL |     **t1 = 22;\n LL | }\n@@ -20,7 +20,7 @@ error[E0389]: cannot borrow data mutably in a `&` reference\n    |\n LL | fn foo4(t0: & &mut isize) {\n    |             ------------ use `&mut &mut isize` here to make mutable\n-LL |     let x:  &mut isize = &mut **t0; //~ ERROR cannot borrow\n+LL |     let x:  &mut isize = &mut **t0;\n    |                               ^^^^ assignment into an immutable reference\n \n error: aborting due to 3 previous errors"}, {"sha": "fa0ae318e72cd2ce7d2cd77cfa424504602e99c7", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-object-twice.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `*x` as mutable more than once at a time\n    |\n LL |     let y = x.f1();\n    |             - first mutable borrow occurs here\n-LL |     x.f2(); //~ ERROR cannot borrow `*x` as mutable\n+LL |     x.f2();\n    |     ^ second mutable borrow occurs here\n LL |     y.use_ref();\n    |     - first borrow later used here"}, {"sha": "1b64ad57564598edfda76f9df0d5a8531ff3ad00", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-object-twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `*x` as mutable more than once at a time\n    |\n LL |     let y = x.f1();\n    |             - first mutable borrow occurs here\n-LL |     x.f2(); //~ ERROR cannot borrow `*x` as mutable\n+LL |     x.f2();\n    |     ^ second mutable borrow occurs here\n LL |     y.use_ref();\n LL | }"}, {"sha": "4fc320c50594718936f539d12aa20c3aff14bbda", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-auto-deref.nll.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,85 +1,85 @@\n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:47:19\n    |\n-LL |     let __isize = &mut x.y; //~ ERROR cannot borrow\n+LL |     let __isize = &mut x.y;\n    |                   ^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:51:19\n    |\n-LL |     let __isize = &mut x.y; //~ ERROR cannot borrow\n+LL |     let __isize = &mut x.y;\n    |                   ^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:59:5\n    |\n-LL |     &mut x.y //~ ERROR cannot borrow\n+LL |     &mut x.y\n    |     ^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:63:5\n    |\n-LL |     &mut x.y //~ ERROR cannot borrow\n+LL |     &mut x.y\n    |     ^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:67:5\n    |\n-LL |     x.y = 3; //~ ERROR cannot assign\n+LL |     x.y = 3;\n    |     ^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:71:5\n    |\n-LL |     x.y = 3; //~ ERROR cannot assign\n+LL |     x.y = 3;\n    |     ^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:75:5\n    |\n-LL |     x.y = 3; //~ ERROR cannot assign\n+LL |     x.y = 3;\n    |     ^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:83:5\n    |\n-LL |     x.set(0, 0); //~ ERROR cannot borrow\n+LL |     x.set(0, 0);\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:87:5\n    |\n-LL |     x.set(0, 0); //~ ERROR cannot borrow\n+LL |     x.set(0, 0);\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:95:5\n    |\n-LL |     x.y_mut() //~ ERROR cannot borrow\n+LL |     x.y_mut()\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:99:5\n    |\n-LL |     x.y_mut() //~ ERROR cannot borrow\n+LL |     x.y_mut()\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:103:6\n    |\n-LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:107:6\n    |\n-LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:111:6\n    |\n-LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n \n error: aborting due to 14 previous errors"}, {"sha": "2fe1461a303d5b72426b2dd8a5fb2f479b533a45", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-auto-deref.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,85 +1,85 @@\n error[E0596]: cannot borrow field of immutable binding as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:47:24\n    |\n-LL |     let __isize = &mut x.y; //~ ERROR cannot borrow\n+LL |     let __isize = &mut x.y;\n    |                        ^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field of immutable binding as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:51:24\n    |\n-LL |     let __isize = &mut x.y; //~ ERROR cannot borrow\n+LL |     let __isize = &mut x.y;\n    |                        ^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field of immutable binding as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:59:10\n    |\n-LL |     &mut x.y //~ ERROR cannot borrow\n+LL |     &mut x.y\n    |          ^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field of immutable binding as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:63:10\n    |\n-LL |     &mut x.y //~ ERROR cannot borrow\n+LL |     &mut x.y\n    |          ^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field of immutable binding\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:67:5\n    |\n-LL |     x.y = 3; //~ ERROR cannot assign\n+LL |     x.y = 3;\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field of immutable binding\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:71:5\n    |\n-LL |     x.y = 3; //~ ERROR cannot assign\n+LL |     x.y = 3;\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field of immutable binding\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:75:5\n    |\n-LL |     x.y = 3; //~ ERROR cannot assign\n+LL |     x.y = 3;\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:83:5\n    |\n-LL |     x.set(0, 0); //~ ERROR cannot borrow\n+LL |     x.set(0, 0);\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:87:5\n    |\n-LL |     x.set(0, 0); //~ ERROR cannot borrow\n+LL |     x.set(0, 0);\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:95:5\n    |\n-LL |     x.y_mut() //~ ERROR cannot borrow\n+LL |     x.y_mut()\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:99:5\n    |\n-LL |     x.y_mut() //~ ERROR cannot borrow\n+LL |     x.y_mut()\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:103:6\n    |\n-LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:107:6\n    |\n-LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:111:6\n    |\n-LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n \n error: aborting due to 14 previous errors"}, {"sha": "cc4d91a58e937ffba3a0065b24bd327f14aa2683", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-deref.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,43 +1,43 @@\n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:23:19\n    |\n-LL |     let __isize = &mut *x; //~ ERROR cannot borrow\n+LL |     let __isize = &mut *x;\n    |                   ^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:27:19\n    |\n-LL |     let __isize = &mut *x; //~ ERROR cannot borrow\n+LL |     let __isize = &mut *x;\n    |                   ^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:35:5\n    |\n-LL |     &mut **x //~ ERROR cannot borrow\n+LL |     &mut **x\n    |     ^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:39:5\n    |\n-LL |     &mut **x //~ ERROR cannot borrow\n+LL |     &mut **x\n    |     ^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:43:5\n    |\n-LL |     *x = 3; //~ ERROR cannot assign\n+LL |     *x = 3;\n    |     ^^^^^^ cannot assign\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:47:5\n    |\n-LL |     **x = 3; //~ ERROR cannot assign\n+LL |     **x = 3;\n    |     ^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:51:5\n    |\n-LL |     **x = 3; //~ ERROR cannot assign\n+LL |     **x = 3;\n    |     ^^^^^^^ cannot assign\n \n error: aborting due to 7 previous errors"}, {"sha": "fb79ccb701fb1db645fc234813c8c02346ef3bbd", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-deref.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,43 +1,43 @@\n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:23:24\n    |\n-LL |     let __isize = &mut *x; //~ ERROR cannot borrow\n+LL |     let __isize = &mut *x;\n    |                        ^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:27:24\n    |\n-LL |     let __isize = &mut *x; //~ ERROR cannot borrow\n+LL |     let __isize = &mut *x;\n    |                        ^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:35:10\n    |\n-LL |     &mut **x //~ ERROR cannot borrow\n+LL |     &mut **x\n    |          ^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:39:10\n    |\n-LL |     &mut **x //~ ERROR cannot borrow\n+LL |     &mut **x\n    |          ^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:43:5\n    |\n-LL |     *x = 3; //~ ERROR cannot assign\n+LL |     *x = 3;\n    |     ^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:47:5\n    |\n-LL |     **x = 3; //~ ERROR cannot assign\n+LL |     **x = 3;\n    |     ^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:51:5\n    |\n-LL |     **x = 3; //~ ERROR cannot assign\n+LL |     **x = 3;\n    |     ^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 7 previous errors"}, {"sha": "1dd18c12fc8de4c18c4642965ec1921ab8066deb", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowck-borrowed-uniq-rvalue-2.rs:20:20\n    |\n-LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]); //~ ERROR borrowed value does not live long enough\n+LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                    |\n    |                    creates a temporary which is freed while still in use"}, {"sha": "d17cf8a6fac36a39cbc31599f1c5c727cd2adebe", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-borrowed-uniq-rvalue-2.rs:20:20\n    |\n-LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]); //~ ERROR borrowed value does not live long enough\n+LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ - temporary value dropped here while still borrowed\n    |                    |\n    |                    temporary value does not live long enough"}, {"sha": "c91a4377b4c67c4b32710033dc4389be23b806f7", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowck-borrowed-uniq-rvalue.rs:10:28\n    |\n-LL |     buggy_map.insert(42, &*Box::new(1)); //~ ERROR borrowed value does not live long enough\n+LL |     buggy_map.insert(42, &*Box::new(1));\n    |                            ^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                            |\n    |                            creates a temporary which is freed while still in use"}, {"sha": "32a86562da7470ac09f23b51789ee30da3960f23", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-borrowed-uniq-rvalue.rs:10:27\n    |\n-LL |     buggy_map.insert(42, &*Box::new(1)); //~ ERROR borrowed value does not live long enough\n+LL |     buggy_map.insert(42, &*Box::new(1));\n    |                           ^^^^^^^^^^^^ - borrowed value dropped here while still borrowed\n    |                           |\n    |                           borrowed value does not live long enough"}, {"sha": "e40d8d9dfccb9e8ff52fd277c97dd9c6ee5f3c8d", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-break-uninit-2.rs:9:20\n    |\n-LL |     println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     println!(\"{}\", x);\n    |                    ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "a6c3dfef9e8700ac732e11151b8fa6375f509677", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-break-uninit-2.rs:9:20\n    |\n-LL |     println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     println!(\"{}\", x);\n    |                    ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "bbf9b9f1241a26ab344ec85ccca53c1d33112e16", "filename": "src/test/ui/borrowck/borrowck-break-uninit.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-break-uninit.rs:9:20\n    |\n-LL |     println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     println!(\"{}\", x);\n    |                    ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "dcb024a3e1a0c62f3a401774ac387868e52cfc5f", "filename": "src/test/ui/borrowck/borrowck-break-uninit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-break-uninit.rs:9:20\n    |\n-LL |     println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     println!(\"{}\", x);\n    |                    ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "0064417c57bf9aa64f80fb00b9b2d64a566ed731", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-imm.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -17,7 +17,7 @@ LL |     let mut c1 = || set(&mut *x);\n    |                  --           - first borrow occurs due to use of `x` in closure\n    |                  |\n    |                  first closure is constructed here\n-LL |     //~^ ERROR cannot borrow\n+LL |\n LL |     let mut c2 = || set(&mut *x);\n    |                  ^^           - second borrow occurs due to use of `x` in closure\n    |                  |"}, {"sha": "2f7c6a1a56a5bcb92cb7fb1fb7fcd97c15ea50a4", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL |     let mut c1 = || set(&mut *x);\n    |                  --           - previous borrow occurs due to use of `x` in closure\n    |                  |\n    |                  first closure is constructed here\n-LL |     //~^ ERROR cannot borrow\n+LL |\n LL |     let mut c2 = || set(&mut *x);\n    |                  ^^           - borrow occurs due to use of `x` in closure\n    |                  |"}, {"sha": "471173e595f4793cf3eec4844783c114a18d600f", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-mut.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -9,7 +9,7 @@ LL |     let mut c2 = || set(&mut *x);\n    |                  ^^           - second borrow occurs due to use of `x` in closure\n    |                  |\n    |                  second closure is constructed here\n-LL |     //~^ ERROR two closures require unique access to `x` at the same time\n+LL |\n LL |     c2(); c1();\n    |           -- first borrow later used here\n "}, {"sha": "07f477d17868f8a4689f108eafcbe04989524c61", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut-fail.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL |     let c1 = to_fn_mut(|| x = 4);\n    |                        -- - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| x = 5);\n    |                        ^^ - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -19,7 +19,7 @@ LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -33,7 +33,7 @@ LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -51,7 +51,7 @@ LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nes\n    |                        ^^                                  - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |     //~^ ERROR cannot borrow `x` as mutable more than once\n+LL |\n LL |     c1;\n    |     -- first borrow later used here\n \n@@ -66,7 +66,7 @@ LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n    |                        ^^           - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |     //~^ ERROR cannot borrow `x` as mutable more than once\n+LL |\n LL |     c1;\n    |     -- first borrow later used here\n "}, {"sha": "7399f8360dc30b0f809ba16827cb971541a0616a", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL |     let c1 = to_fn_mut(|| x = 4);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| x = 5);\n    |                        ^^ - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -20,7 +20,7 @@ LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -35,7 +35,7 @@ LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here"}, {"sha": "e881201ddfcc0a977cdb277b8ac6d0483fd23602", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL |     let c1 = to_fn_mut(|| x = 4);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| x = 5);\n    |                        ^^ - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -20,7 +20,7 @@ LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -35,7 +35,7 @@ LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -80,11 +80,11 @@ LL |     let c1 = to_fn_mut(|| x = 4);\n    |                        -- - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| x = 5);\n    |                        ^^ - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n@@ -95,11 +95,11 @@ LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n@@ -110,11 +110,11 @@ LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n "}, {"sha": "b8bbb31a3550f41c0f7d84740b15fb75b10df25d", "filename": "src/test/ui/borrowck/borrowck-closures-unique-imm.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `this.x` as mutable because it is also borrowed as i\n    |\n LL |         let p = &this.x;\n    |                 ------- immutable borrow occurs here\n-LL |         &mut this.x; //~ ERROR cannot borrow\n+LL |         &mut this.x;\n    |         ^^^^^^^^^^^ mutable borrow occurs here\n LL |         p.use_ref();\n    |         - immutable borrow later used here"}, {"sha": "3cdc9b9d4fd4f1a404af0d2680d499b952a53f60", "filename": "src/test/ui/borrowck/borrowck-closures-unique-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `this.x` as mutable because it is also borrowed as i\n    |\n LL |         let p = &this.x;\n    |                  ------ immutable borrow occurs here\n-LL |         &mut this.x; //~ ERROR cannot borrow\n+LL |         &mut this.x;\n    |              ^^^^^^ mutable borrow occurs here\n LL |         p.use_ref();\n LL |     };"}, {"sha": "3106f36ac8ba99eb7bcb2c0defe7b4b46fe2f49f", "filename": "src/test/ui/borrowck/borrowck-closures-unique.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL |     let c1 = || get(x);\n    |              --     - first borrow occurs due to use of `x` in closure\n    |              |\n    |              borrow occurs here\n-LL |     let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+LL |     let c2 = || set(x);\n    |              ^^     - second borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n@@ -19,7 +19,7 @@ LL |     let c1 = || get(x);\n    |              --     - first borrow occurs due to use of `x` in closure\n    |              |\n    |              borrow occurs here\n-LL |     let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n+LL |     let c2 = || { get(x); set(x); };\n    |              ^^       - second borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n@@ -33,7 +33,7 @@ LL |     let c1 = || set(x);\n    |              --     - first borrow occurs due to use of `x` in closure\n    |              |\n    |              first closure is constructed here\n-LL |     let c2 = || set(x); //~ ERROR two closures require unique access to `x` at the same time\n+LL |     let c2 = || set(x);\n    |              ^^     - second borrow occurs due to use of `x` in closure\n    |              |\n    |              second closure is constructed here\n@@ -45,7 +45,7 @@ error[E0594]: cannot assign to `x`, as it is not declared as mutable\n    |\n LL | fn e(x: &'static mut isize) {\n    |      - help: consider changing this to be mutable: `mut x`\n-LL |     let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n+LL |     let c1 = |y: &'static mut isize| x = y;\n    |                                      ^^^^^ cannot assign\n \n error: aborting due to 4 previous errors"}, {"sha": "238b16f654e3888871bdc3cff8fa4596b8b81422", "filename": "src/test/ui/borrowck/borrowck-closures-unique.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL |     let c1 = || get(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n    |              |\n    |              borrow occurs here\n-LL |     let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+LL |     let c2 = || set(x);\n    |              ^^     - borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n@@ -20,7 +20,7 @@ LL |     let c1 = || get(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n    |              |\n    |              borrow occurs here\n-LL |     let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n+LL |     let c2 = || { get(x); set(x); };\n    |              ^^       - borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n@@ -35,7 +35,7 @@ LL |     let c1 = || set(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n    |              |\n    |              first closure is constructed here\n-LL |     let c2 = || set(x); //~ ERROR two closures require unique access to `x` at the same time\n+LL |     let c2 = || set(x);\n    |              ^^     - borrow occurs due to use of `x` in closure\n    |              |\n    |              second closure is constructed here\n@@ -46,21 +46,21 @@ LL | }\n error[E0595]: closure cannot assign to immutable argument `x`\n   --> $DIR/borrowck-closures-unique.rs:47:14\n    |\n-LL |     let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n+LL |     let c1 = |y: &'static mut isize| x = y;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow mutably\n help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n    |\n-LL |     x //~ ERROR closure cannot assign to immutable argument\n+LL |     x\n    |     ^\n \n error[E0595]: closure cannot assign to immutable argument `x`\n   --> $DIR/borrowck-closures-unique.rs:52:14\n    |\n-LL |     let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable argument\n+LL |     let c1 = || x = panic!();\n    |              ^^ cannot borrow mutably\n help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n    |\n-LL |     x //~ ERROR closure cannot assign to immutable argument\n+LL |     x\n    |     ^\n \n error: aborting due to 5 previous errors"}, {"sha": "a6dbcf36077a728b704effd7ccff75c735edcb37", "filename": "src/test/ui/borrowck/borrowck-closures-use-after-free.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -6,7 +6,7 @@ LL |   let mut test = |foo: &Foo| {\n LL |     ptr = box Foo { x: ptr.x + 1 };\n    |     --- first borrow occurs due to use of `ptr` in closure\n LL |   };\n-LL |   test(&*ptr); //~ ERROR cannot borrow `*ptr`\n+LL |   test(&*ptr);\n    |   ---- ^^^^^ immutable borrow occurs here\n    |   |\n    |   mutable borrow later used by call"}, {"sha": "9e77d8ce1881d54b7e8148042b7c9f0a82ae442a", "filename": "src/test/ui/borrowck/borrowck-closures-use-after-free.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -6,7 +6,7 @@ LL |   let mut test = |foo: &Foo| {\n LL |     ptr = box Foo { x: ptr.x + 1 };\n    |     --- previous borrow occurs due to use of `ptr` in closure\n LL |   };\n-LL |   test(&*ptr); //~ ERROR cannot borrow `*ptr`\n+LL |   test(&*ptr);\n    |         ^^^^ immutable borrow occurs here\n LL | }\n    | - mutable borrow ends here"}, {"sha": "c69237fa95f6571522bd96b047fce882a8523233", "filename": "src/test/ui/borrowck/borrowck-consume-unsize-vec.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL | fn foo(b: Box<[i32;5]>) {\n    |        - move occurs because `b` has type `std::boxed::Box<[i32; 5]>`, which does not implement the `Copy` trait\n LL |     consume(b);\n    |             - value moved here\n-LL |     consume(b); //~ ERROR use of moved value\n+LL |     consume(b);\n    |             ^ value used here after move\n \n error: aborting due to previous error"}, {"sha": "02644b82f57ee95dc5b278391169c1ed70c088af", "filename": "src/test/ui/borrowck/borrowck-consume-unsize-vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `b`\n    |\n LL |     consume(b);\n    |             - value moved here\n-LL |     consume(b); //~ ERROR use of moved value\n+LL |     consume(b);\n    |             ^ value used here after move\n    |\n    = note: move occurs because `b` has type `std::boxed::Box<[i32; 5]>`, which does not implement the `Copy` trait"}, {"sha": "e8194ad69440367fac754a0b8479a9e19de7978a", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL | fn foo(b: Box<Foo+Send>) {\n    |        - move occurs because `b` has type `std::boxed::Box<dyn Foo + std::marker::Send>`, which does not implement the `Copy` trait\n LL |     consume(b);\n    |             - value moved here\n-LL |     consume(b); //~ ERROR use of moved value\n+LL |     consume(b);\n    |             ^ value used here after move\n \n error: aborting due to previous error"}, {"sha": "7267a99b869b0b8f9f02112ecd9cccae3ed4cea1", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `b`\n    |\n LL |     consume(b);\n    |             - value moved here\n-LL |     consume(b); //~ ERROR use of moved value\n+LL |     consume(b);\n    |             ^ value used here after move\n    |\n    = note: move occurs because `b` has type `std::boxed::Box<(dyn Foo + std::marker::Send + 'static)>`, which does not implement the `Copy` trait"}, {"sha": "a2b42fa495e0eba0ca96c57ea2cdd958c428f60f", "filename": "src/test/ui/borrowck/borrowck-drop-from-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -7,7 +7,7 @@ LL |     match Some(42) {\n LL |         Some(_) if { drop(my_str); false } => {}\n    |                           ------ value moved here\n LL |         Some(_) => {}\n-LL |         None => { foo(my_str); } //~ ERROR [E0382]\n+LL |         None => { foo(my_str); }\n    |                       ^^^^^^ value used here after move\n \n error: aborting due to previous error"}, {"sha": "b3451659bec5a7ca1085c6e267874c5e19e2901f", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.nll.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     drop(*x.b); //~ ERROR use of moved value: `*x.b`\n+LL |     drop(*x.b);\n    |          ^^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -13,7 +13,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     let y = A { a: 3, .. x };\n    |             ---------------- value moved here\n-LL |     drop(*x.b); //~ ERROR use of moved value: `*x.b`\n+LL |     drop(*x.b);\n    |          ^^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -23,7 +23,7 @@ error[E0382]: borrow of moved value: `x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     let p = &x.b; //~ ERROR use of moved value: `x.b`\n+LL |     let p = &x.b;\n    |             ^^^^ value borrowed here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -33,7 +33,7 @@ error[E0382]: borrow of moved value: `x.b`\n    |\n LL |     let _y = A { a: 3, .. x };\n    |              ---------------- value moved here\n-LL |     let p = &x.b; //~ ERROR use of moved value: `x.b`\n+LL |     let p = &x.b;\n    |             ^^^^ value borrowed here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -43,7 +43,7 @@ error[E0505]: cannot move out of `x.b` because it is borrowed\n    |\n LL |     let p = &x.b;\n    |             ---- borrow of `x.b` occurs here\n-LL |     drop(x.b); //~ ERROR cannot move out of `x.b` because it is borrowed\n+LL |     drop(x.b);\n    |          ^^^ move out of `x.b` occurs here\n LL |     drop(**p);\n    |          --- borrow later used here\n@@ -53,7 +53,7 @@ error[E0505]: cannot move out of `x.b` because it is borrowed\n    |\n LL |     let p = &x.b;\n    |             ---- borrow of `x.b` occurs here\n-LL |     let _y = A { a: 3, .. x }; //~ ERROR cannot move out of `x.b` because it is borrowed\n+LL |     let _y = A { a: 3, .. x };\n    |              ^^^^^^^^^^^^^^^^ move out of `x.b` occurs here\n LL |     drop(**p);\n    |          --- borrow later used here\n@@ -63,7 +63,7 @@ error[E0499]: cannot borrow `x.a` as mutable more than once at a time\n    |\n LL |     let p = &mut x.a;\n    |             -------- first mutable borrow occurs here\n-LL |     let q = &mut x.a; //~ ERROR cannot borrow `x.a` as mutable more than once at a time\n+LL |     let q = &mut x.a;\n    |             ^^^^^^^^ second mutable borrow occurs here\n LL |     drop(*p);\n    |          -- first borrow later used here\n@@ -73,7 +73,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     drop(x.b);  //~ ERROR use of moved value: `x.b`\n+LL |     drop(x.b);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -83,7 +83,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     let _y = A { a: 3, .. x };\n    |              ---------------- value moved here\n-LL |     drop(x.b);  //~ ERROR use of moved value: `x.b`\n+LL |     drop(x.b);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -93,7 +93,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     let _z = A { a: 3, .. x };  //~ ERROR use of moved value: `x.b`\n+LL |     let _z = A { a: 3, .. x };\n    |              ^^^^^^^^^^^^^^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -103,7 +103,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     let _y = A { a: 3, .. x };\n    |              ---------------- value moved here\n-LL |     let _z = A { a: 4, .. x };  //~ ERROR use of moved value: `x.b`\n+LL |     let _z = A { a: 4, .. x };\n    |              ^^^^^^^^^^^^^^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait"}, {"sha": "0cf6f3f2182e3aeb80e6439e29aebfe1a7a604ab", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `*x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     drop(*x.b); //~ ERROR use of moved value: `*x.b`\n+LL |     drop(*x.b);\n    |          ^^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -13,7 +13,7 @@ error[E0382]: use of moved value: `*x.b`\n    |\n LL |     let y = A { a: 3, .. x };\n    |                          - value moved here\n-LL |     drop(*x.b); //~ ERROR use of moved value: `*x.b`\n+LL |     drop(*x.b);\n    |          ^^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -23,7 +23,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     let p = &x.b; //~ ERROR use of moved value: `x.b`\n+LL |     let p = &x.b;\n    |              ^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -33,7 +33,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     let _y = A { a: 3, .. x };\n    |                           - value moved here\n-LL |     let p = &x.b; //~ ERROR use of moved value: `x.b`\n+LL |     let p = &x.b;\n    |              ^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -43,23 +43,23 @@ error[E0505]: cannot move out of `x.b` because it is borrowed\n    |\n LL |     let p = &x.b;\n    |              --- borrow of `x.b` occurs here\n-LL |     drop(x.b); //~ ERROR cannot move out of `x.b` because it is borrowed\n+LL |     drop(x.b);\n    |          ^^^ move out of `x.b` occurs here\n \n error[E0505]: cannot move out of `x.b` because it is borrowed\n   --> $DIR/borrowck-field-sensitivity.rs:41:27\n    |\n LL |     let p = &x.b;\n    |              --- borrow of `x.b` occurs here\n-LL |     let _y = A { a: 3, .. x }; //~ ERROR cannot move out of `x.b` because it is borrowed\n+LL |     let _y = A { a: 3, .. x };\n    |                           ^ move out of `x.b` occurs here\n \n error[E0499]: cannot borrow `x.a` as mutable more than once at a time\n   --> $DIR/borrowck-field-sensitivity.rs:48:18\n    |\n LL |     let p = &mut x.a;\n    |                  --- first mutable borrow occurs here\n-LL |     let q = &mut x.a; //~ ERROR cannot borrow `x.a` as mutable more than once at a time\n+LL |     let q = &mut x.a;\n    |                  ^^^ second mutable borrow occurs here\n ...\n LL | }\n@@ -70,7 +70,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     drop(x.b);  //~ ERROR use of moved value: `x.b`\n+LL |     drop(x.b);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -80,7 +80,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     let _y = A { a: 3, .. x };\n    |                           - value moved here\n-LL |     drop(x.b);  //~ ERROR use of moved value: `x.b`\n+LL |     drop(x.b);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -90,7 +90,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     let _z = A { a: 3, .. x };  //~ ERROR use of moved value: `x.b`\n+LL |     let _z = A { a: 3, .. x };\n    |                           ^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -100,27 +100,27 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     let _y = A { a: 3, .. x };\n    |                           - value moved here\n-LL |     let _z = A { a: 4, .. x };  //~ ERROR use of moved value: `x.b`\n+LL |     let _z = A { a: 4, .. x };\n    |                           ^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0381]: use of possibly uninitialized variable: `x.a`\n   --> $DIR/borrowck-field-sensitivity.rs:82:10\n    |\n-LL |     drop(x.a); //~ ERROR use of possibly uninitialized variable: `x.a`\n+LL |     drop(x.a);\n    |          ^^^ use of possibly uninitialized `x.a`\n \n error[E0381]: use of possibly uninitialized variable: `x.a`\n   --> $DIR/borrowck-field-sensitivity.rs:88:14\n    |\n-LL |     let p = &x.a; //~ ERROR use of possibly uninitialized variable: `x.a`\n+LL |     let p = &x.a;\n    |              ^^^ use of possibly uninitialized `x.a`\n \n error[E0381]: use of possibly uninitialized variable: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:95:10\n    |\n-LL |     drop(x.b); //~ ERROR use of possibly uninitialized variable: `x.b`\n+LL |     drop(x.b);\n    |          ^^^ use of possibly uninitialized `x.b`\n \n error: aborting due to 14 previous errors"}, {"sha": "d48866dce04238de37a3a24ff0792bd885073c47", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-c.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/borrowck-fn-in-const-c.rs:17:16\n    |\n-LL |         return &local.inner; //~ ERROR does not live long enough\n+LL |         return &local.inner;\n    |                ^^^^^^^^^^^^ returning this value requires that `local.inner` is borrowed for `'static`\n LL |     }\n    |     - here, drop of `local` needs exclusive access to `local.inner`, because the type `DropString` implements the `Drop` trait"}, {"sha": "d2ddf808d1195f6554991a6f91b240c3ce315202", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-c.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `local.inner` does not live long enough\n   --> $DIR/borrowck-fn-in-const-c.rs:17:17\n    |\n-LL |         return &local.inner; //~ ERROR does not live long enough\n+LL |         return &local.inner;\n    |                 ^^^^^^^^^^^ borrowed value does not live long enough\n LL |     }\n    |     - borrowed value only lives until here"}, {"sha": "08cafa7da7aa893d897703a3d736a4008abe0112", "filename": "src/test/ui/borrowck/borrowck-for-loop-correct-cmt-for-pattern.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:12:15\n    |\n-LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+LL |     for &a in x.iter() {\n    |         --    ^^^^^^^^ cannot move out of borrowed content\n    |         ||\n    |         |data moved here\n@@ -10,13 +10,13 @@ LL |     for &a in x.iter() {    //~ ERROR cannot move out\n note: move occurs because `a` has type `&mut i32`, which does not implement the `Copy` trait\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:12:10\n    |\n-LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+LL |     for &a in x.iter() {\n    |          ^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:18:15\n    |\n-LL |     for &a in &f.a {  //~ ERROR cannot move out\n+LL |     for &a in &f.a {\n    |         --    ^^^^ cannot move out of borrowed content\n    |         ||\n    |         |data moved here\n@@ -25,13 +25,13 @@ LL |     for &a in &f.a {  //~ ERROR cannot move out\n note: move occurs because `a` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:18:10\n    |\n-LL |     for &a in &f.a {  //~ ERROR cannot move out\n+LL |     for &a in &f.a {\n    |          ^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:15\n    |\n-LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+LL |     for &a in x.iter() {\n    |         --    ^^^^^^^^ cannot move out of borrowed content\n    |         ||\n    |         |data moved here\n@@ -40,7 +40,7 @@ LL |     for &a in x.iter() {    //~ ERROR cannot move out\n note: move occurs because `a` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:10\n    |\n-LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+LL |     for &a in x.iter() {\n    |          ^\n \n error: aborting due to 3 previous errors"}, {"sha": "fb53b13a58de98df5a5cf14c41330da4ced7a59b", "filename": "src/test/ui/borrowck/borrowck-for-loop-correct-cmt-for-pattern.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:12:9\n    |\n-LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+LL |     for &a in x.iter() {\n    |         ^-\n    |         ||\n    |         |hint: to prevent move, use `ref a` or `ref mut a`\n@@ -10,7 +10,7 @@ LL |     for &a in x.iter() {    //~ ERROR cannot move out\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:18:9\n    |\n-LL |     for &a in &f.a {  //~ ERROR cannot move out\n+LL |     for &a in &f.a {\n    |         ^-\n    |         ||\n    |         |hint: to prevent move, use `ref a` or `ref mut a`\n@@ -19,7 +19,7 @@ LL |     for &a in &f.a {  //~ ERROR cannot move out\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:9\n    |\n-LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+LL |     for &a in x.iter() {\n    |         ^-\n    |         ||\n    |         |hint: to prevent move, use `ref a` or `ref mut a`"}, {"sha": "f47dce453696e59f1b43f2c4dd4bc0657ca5b745", "filename": "src/test/ui/borrowck/borrowck-for-loop-head-linkage.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -7,7 +7,7 @@ LL |     for &x in &vector {\n    |               immutable borrow occurs here\n    |               immutable borrow later used here\n LL |         let cap = vector.capacity();\n-LL |         vector.extend(repeat(0));      //~ ERROR cannot borrow\n+LL |         vector.extend(repeat(0));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n \n error[E0502]: cannot borrow `vector` as mutable because it is also borrowed as immutable\n@@ -19,7 +19,7 @@ LL |     for &x in &vector {\n    |               immutable borrow occurs here\n    |               immutable borrow later used here\n ...\n-LL |         vector[1] = 5;   //~ ERROR cannot borrow\n+LL |         vector[1] = 5;\n    |         ^^^^^^ mutable borrow occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "a2d8908c4dd2ced62698b1a7b42d7ba74b25119e", "filename": "src/test/ui/borrowck/borrowck-for-loop-head-linkage.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -7,7 +7,7 @@ LL |     for &x in &vector {\n    |                |    immutable borrow ends here\n    |                immutable borrow occurs here\n LL |         let cap = vector.capacity();\n-LL |         vector.extend(repeat(0));      //~ ERROR cannot borrow\n+LL |         vector.extend(repeat(0));\n    |         ^^^^^^ mutable borrow occurs here\n \n error[E0502]: cannot borrow `vector` as mutable because it is also borrowed as immutable\n@@ -19,7 +19,7 @@ LL |     for &x in &vector {\n    |                |    immutable borrow ends here\n    |                immutable borrow occurs here\n ...\n-LL |         vector[1] = 5;   //~ ERROR cannot borrow\n+LL |         vector[1] = 5;\n    |         ^^^^^^ mutable borrow occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "1223e409d4df60b03144f18a0fd6eb056ceb5e15", "filename": "src/test/ui/borrowck/borrowck-if-no-else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-if-no-else.rs:5:9\n    |\n-LL |     foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     foo(x);\n    |         ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "d11f29b05f565b9ba0cea4c21ece28c36310c6d8", "filename": "src/test/ui/borrowck/borrowck-if-with-else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-if-with-else.rs:10:9\n    |\n-LL |     foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     foo(x);\n    |         ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "da639a837aa5096db8da86093fc5d42fd33ff716", "filename": "src/test/ui/borrowck/borrowck-in-static.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0507]: cannot move out of captured variable in an `Fn` closure\n    |\n LL |     let x = Box::new(0);\n    |         - captured outer variable\n-LL |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n+LL |     Box::new(|| x)\n    |                 ^ cannot move out of captured variable in an `Fn` closure\n \n error: aborting due to previous error"}, {"sha": "6eeaf428c5f017035704048d52e2bcfaa9f16499", "filename": "src/test/ui/borrowck/borrowck-in-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n    |\n LL |     let x = Box::new(0);\n    |         - captured outer variable\n-LL |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n+LL |     Box::new(|| x)\n    |                 ^ cannot move out of captured outer variable in an `Fn` closure\n \n error: aborting due to previous error"}, {"sha": "82a602c6359c1046d2aa49e082c7bfe6668fff5d", "filename": "src/test/ui/borrowck/borrowck-init-in-called-fn-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `i`\n   --> $DIR/borrowck-init-in-called-fn-expr.rs:4:9\n    |\n-LL |         i //~ ERROR use of possibly uninitialized variable: `i`\n+LL |         i\n    |         ^ use of possibly uninitialized `i`\n \n error: aborting due to previous error"}, {"sha": "899739378524cf2bedca3fbf91b1a6fa9a1533b1", "filename": "src/test/ui/borrowck/borrowck-init-in-fn-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `i`\n   --> $DIR/borrowck-init-in-fn-expr.rs:4:9\n    |\n-LL |         i //~ ERROR use of possibly uninitialized variable: `i`\n+LL |         i\n    |         ^ use of possibly uninitialized `i`\n \n error: aborting due to previous error"}, {"sha": "9863ceb14240f78c048f8838b98b5cc37529a8bf", "filename": "src/test/ui/borrowck/borrowck-init-op-equal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `v`\n   --> $DIR/borrowck-init-op-equal.rs:3:5\n    |\n-LL |     v += 1; //~ ERROR use of possibly uninitialized variable: `v`\n+LL |     v += 1;\n    |     ^^^^^^ use of possibly uninitialized `v`\n \n error: aborting due to previous error"}, {"sha": "80c4e0c80483d55a89f463e1737aeae5e0fde4dd", "filename": "src/test/ui/borrowck/borrowck-init-plus-equal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `v`\n   --> $DIR/borrowck-init-plus-equal.rs:3:9\n    |\n-LL |     v = v + 1; //~ ERROR use of possibly uninitialized variable: `v`\n+LL |     v = v + 1;\n    |         ^ use of possibly uninitialized `v`\n \n error: aborting due to previous error"}, {"sha": "b004447bf45fb7c53b07edb6b6f06f0cd0dcdbad", "filename": "src/test/ui/borrowck/borrowck-insert-during-each.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL |     f.foo(\n    |     ^ --- first borrow later used by call\n    |  ___|\n    | |\n-LL | |         |a| { //~ ERROR closure requires unique access to `f`\n+LL | |         |a| {\n    | |         --- closure construction occurs here\n LL | |             f.n.insert(*a);\n    | |             - first borrow occurs due to use of `f` in closure\n@@ -19,7 +19,7 @@ LL |   f.foo(\n    |   - --- first borrow later used by call\n    |   |\n    |   borrow occurs here\n-LL |         |a| { //~ ERROR closure requires unique access to `f`\n+LL |         |a| {\n    |         ^^^ closure construction occurs here\n LL |             f.n.insert(*a);\n    |             - second borrow occurs due to use of `f` in closure"}, {"sha": "3b6339757c97954ab02a3e5cc6944709176db39d", "filename": "src/test/ui/borrowck/borrowck-insert-during-each.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0500]: closure requires unique access to `f` but `*f` is already borrowed\n    |\n LL |   f.foo(\n    |   - borrow occurs here\n-LL |         |a| { //~ ERROR closure requires unique access to `f`\n+LL |         |a| {\n    |         ^^^ closure construction occurs here\n LL |             f.n.insert(*a);\n    |             - borrow occurs due to use of `f` in closure"}, {"sha": "4ea4eb8f007591570b47b50e19289216795af7e1", "filename": "src/test/ui/borrowck/borrowck-issue-2657-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |       Some(ref _y) => {\n    |            ------ borrow of `x.0` occurs here\n-LL |         let _a = x; //~ ERROR cannot move\n+LL |         let _a = x;\n    |                  ^ move out of `x` occurs here\n LL |         _y.use_ref();\n    |         -- borrow later used here"}, {"sha": "d9ad86b4f884131a3aeb6e74731ddb791efc7a98", "filename": "src/test/ui/borrowck/borrowck-issue-2657-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |       Some(ref _y) => {\n    |            ------ borrow of `x.0` occurs here\n-LL |         let _a = x; //~ ERROR cannot move\n+LL |         let _a = x;\n    |             ^^ move out of `x` occurs here\n \n error: aborting due to previous error"}, {"sha": "4ef36df52df57371d03fcbd4459ee778ad81149c", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-issue-2657-2.rs:7:18\n    |\n-LL |         let _b = *y; //~ ERROR cannot move out\n+LL |         let _b = *y;\n    |                  ^^\n    |                  |\n    |                  cannot move out of borrowed content"}, {"sha": "1314b1a14f44a0d04ddb0a0c8adac2e59b4df64c", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-issue-2657-2.rs:7:18\n    |\n-LL |         let _b = *y; //~ ERROR cannot move out\n+LL |         let _b = *y;\n    |                  ^^\n    |                  |\n    |                  cannot move out of borrowed content"}, {"sha": "a5462b41396854caa3062c1082c2c7d246ee198f", "filename": "src/test/ui/borrowck/borrowck-issue-48962.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL |     let mut src = &mut node;\n    |         ------- move occurs because `src` has type `&mut Node`, which does not implement the `Copy` trait\n LL |     {src};\n    |      --- value moved here\n-LL |     src.next = None; //~ ERROR use of moved value: `src` [E0382]\n+LL |     src.next = None;\n    |     ^^^^^^^^ value used here after move\n \n error[E0382]: use of moved value: `src`\n@@ -15,7 +15,7 @@ LL |     let mut src = &mut (22, 44);\n    |         ------- move occurs because `src` has type `&mut (i32, i32)`, which does not implement the `Copy` trait\n LL |     {src};\n    |      --- value moved here\n-LL |     src.0 = 66; //~ ERROR use of moved value: `src` [E0382]\n+LL |     src.0 = 66;\n    |     ^^^^^^^^^^ value used here after move\n \n error: aborting due to 2 previous errors"}, {"sha": "68a82bdb57c5510d31e504d213a6fb94d26d4183", "filename": "src/test/ui/borrowck/borrowck-lend-flow-if.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `*v` as mutable because it is also borrowed as immut\n LL |         _w = &v;\n    |              -- immutable borrow occurs here\n LL |     }\n-LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v);\n    |                ^^^^^^^ mutable borrow occurs here\n LL |     _w.use_ref();\n    |     -- immutable borrow later used here"}, {"sha": "1acd47ce58bca8cb9eda3d53f3690fa19e18fa8e", "filename": "src/test/ui/borrowck/borrowck-lend-flow-if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immu\n LL |         _w = &v;\n    |               - immutable borrow occurs here\n LL |     }\n-LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v);\n    |                     ^^ mutable borrow occurs here\n LL |     _w.use_ref();\n LL | }"}, {"sha": "07b11b3e7282824d0a138b6d087b597734cc54f6", "filename": "src/test/ui/borrowck/borrowck-lend-flow.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*v` as mutable because it is also borrowed as immut\n    |\n LL |     let _w = &v;\n    |              -- immutable borrow occurs here\n-LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v);\n    |                ^^^^^^^ mutable borrow occurs here\n LL |     _w.use_ref();\n    |     -- immutable borrow later used here"}, {"sha": "e39fb6c860083fdf805059d787ff8ac9e4814042", "filename": "src/test/ui/borrowck/borrowck-lend-flow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immu\n    |\n LL |     let _w = &v;\n    |               - immutable borrow occurs here\n-LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v);\n    |                     ^^ mutable borrow occurs here\n LL |     _w.use_ref();\n LL | }"}, {"sha": "615660febbce2e9b0914114de48ad134ed016201", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `v` because it is borrowed\n    |\n LL |     let w = &v;\n    |             -- borrow of `v` occurs here\n-LL |     take(v); //~ ERROR cannot move out of `v` because it is borrowed\n+LL |     take(v);\n    |          ^ move out of `v` occurs here\n LL |     w.use_ref();\n    |     - borrow later used here"}, {"sha": "e6f0a691eca19662437afdb2ec38ab8ff175584d", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `v` because it is borrowed\n    |\n LL |     let w = &v;\n    |              - borrow of `v` occurs here\n-LL |     take(v); //~ ERROR cannot move out of `v` because it is borrowed\n+LL |     take(v);\n    |          ^ move out of `v` occurs here\n \n error: aborting due to previous error"}, {"sha": "1d1522a15b1ed0ae19464da611137f6a3741e918", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-mut-uniq.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL |     borrow(&*v,\n    |     ------ --- immutable borrow occurs here\n    |     |\n    |     immutable borrow later used by call\n-LL |            |w| { //~ ERROR cannot borrow `v` as mutable\n+LL |            |w| {\n    |            ^^^ mutable borrow occurs here\n LL |             v = box 4;\n    |             - second borrow occurs due to use of `v` in closure"}, {"sha": "c916b7efc08ec56f2b7e2ffd1740ee1d0e57a06f", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-mut-uniq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `v` as mutable because `*v` is also borrowed as immu\n    |\n LL |     borrow(&*v,\n    |             -- immutable borrow occurs here\n-LL |            |w| { //~ ERROR cannot borrow `v` as mutable\n+LL |            |w| {\n    |            ^^^ mutable borrow occurs here\n LL |             v = box 4;\n    |             - borrow occurs due to use of `v` in closure"}, {"sha": "6994c837dfcbe62eb98ae6b9fc4da1db692ae624", "filename": "src/test/ui/borrowck/borrowck-loan-of-static-data-issue-27616.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -6,7 +6,7 @@ LL |     let alias: &'static mut String = s;\n    |                |\n    |                type annotation requires that `*s` is borrowed for `'static`\n ...\n-LL |     *s = String::new(); //~ ERROR cannot assign\n+LL |     *s = String::new();\n    |     ^^ assignment to borrowed `*s` occurs here\n \n error: aborting due to previous error"}, {"sha": "c9d36a7f938016d712997fbc97c60c33770c003f", "filename": "src/test/ui/borrowck/borrowck-loan-of-static-data-issue-27616.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0506]: cannot assign to `*s` because it is borrowed\n LL |     let alias: &'static mut String = s;\n    |                                      - borrow of `*s` occurs here\n ...\n-LL |     *s = String::new(); //~ ERROR cannot assign\n+LL |     *s = String::new();\n    |     ^^^^^^^^^^^^^^^^^^ assignment to borrowed `*s` occurs here\n \n error: aborting due to previous error"}, {"sha": "ad74a89f6689cd74bf2c8255f82c608c8ebab517", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr-overloaded-op.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0503]: cannot use `p` because it was mutably borrowed\n LL |     let q = &mut p;\n    |             ------ borrow of `p` occurs here\n LL | \n-LL |     p + 3;  //~ ERROR cannot use `p`\n+LL |     p + 3;\n    |     ^ use of borrowed `p`\n ...\n LL |     *q + 3; // OK to use the new alias `q`\n@@ -16,7 +16,7 @@ error[E0502]: cannot borrow `p` as immutable because it is also borrowed as muta\n LL |     let q = &mut p;\n    |             ------ mutable borrow occurs here\n ...\n-LL |     p.times(3); //~ ERROR cannot borrow `p`\n+LL |     p.times(3);\n    |     ^ immutable borrow occurs here\n LL | \n LL |     *q + 3; // OK to use the new alias `q`"}, {"sha": "d180e3e701c618d33dc47eb2ed01349c21277442", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr-overloaded-op.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0503]: cannot use `p` because it was mutably borrowed\n LL |     let q = &mut p;\n    |                  - borrow of `p` occurs here\n LL | \n-LL |     p + 3;  //~ ERROR cannot use `p`\n+LL |     p + 3;\n    |     ^ use of borrowed `p`\n \n error[E0502]: cannot borrow `p` as immutable because it is also borrowed as mutable\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `p` as immutable because it is also borrowed as muta\n LL |     let q = &mut p;\n    |                  - mutable borrow occurs here\n ...\n-LL |     p.times(3); //~ ERROR cannot borrow `p`\n+LL |     p.times(3);\n    |     ^ immutable borrow occurs here\n ...\n LL | }"}, {"sha": "ec3edc80323f526400cc594d1857179ed0330256", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-loan-rcvr.rs:23:14\n    |\n-LL |     p.blockm(|| { //~ ERROR cannot borrow `p` as mutable\n+LL |     p.blockm(|| {\n    |     - ------ ^^ mutable borrow occurs here\n    |     | |\n    |     | immutable borrow later used by call\n@@ -14,7 +14,7 @@ error[E0502]: cannot borrow `p` as immutable because it is also borrowed as muta\n    |\n LL |     let l = &mut p;\n    |             ------ mutable borrow occurs here\n-LL |     p.impurem(); //~ ERROR cannot borrow\n+LL |     p.impurem();\n    |     ^ immutable borrow occurs here\n LL | \n LL |     l.x += 1;"}, {"sha": "56d33eff73f156973a57f9aef6c7ccb819fbfabf", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-loan-rcvr.rs:23:14\n    |\n-LL |     p.blockm(|| { //~ ERROR cannot borrow `p` as mutable\n+LL |     p.blockm(|| {\n    |     -        ^^ mutable borrow occurs here\n    |     |\n    |     immutable borrow occurs here\n@@ -15,7 +15,7 @@ error[E0502]: cannot borrow `p` as immutable because it is also borrowed as muta\n    |\n LL |     let l = &mut p;\n    |                  - mutable borrow occurs here\n-LL |     p.impurem(); //~ ERROR cannot borrow\n+LL |     p.impurem();\n    |     ^ immutable borrow occurs here\n ...\n LL | }"}, {"sha": "6691a2396a1da1365c4a3ff97a39f493208b137d", "filename": "src/test/ui/borrowck/borrowck-loan-vec-content.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL |     takes_imm_elt(\n    |     ------------- immutable borrow later used by call\n LL |         &v[0],\n    |          - immutable borrow occurs here\n-LL |         || { //~ ERROR cannot borrow `v` as mutable\n+LL |         || {\n    |         ^^ mutable borrow occurs here\n LL |             v[1] = 4;\n    |             - second borrow occurs due to use of `v` in closure"}, {"sha": "eea6a09f0fc5def2d23f6ace1b421a6968ccc493", "filename": "src/test/ui/borrowck/borrowck-loan-vec-content.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immuta\n    |\n LL |         &v[0],\n    |          - immutable borrow occurs here\n-LL |         || { //~ ERROR cannot borrow `v` as mutable\n+LL |         || {\n    |         ^^ mutable borrow occurs here\n LL |             v[1] = 4;\n    |             - borrow occurs due to use of `v` in closure"}, {"sha": "38f6ca7be752eb6d3090d0d64a9e84fe60df5458", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of captured variable in an `FnMut` closure\n LL |     let bar: Box<_> = box 3;\n    |         --- captured outer variable\n LL |     let _g = to_fn_mut(|| {\n-LL |         let _h = to_fn_once(move || -> isize { *bar }); //~ ERROR cannot move out of\n+LL |         let _h = to_fn_once(move || -> isize { *bar });\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of captured variable in an `FnMut` closure\n \n error: aborting due to previous error"}, {"sha": "d845a576b3dcdad1070d1c37c3b73eafe9cd4a30", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of captured outer variable in an `FnMut` closure\n LL |     let bar: Box<_> = box 3;\n    |         --- captured outer variable\n LL |     let _g = to_fn_mut(|| {\n-LL |         let _h = to_fn_once(move || -> isize { *bar }); //~ ERROR cannot move out of\n+LL |         let _h = to_fn_once(move || -> isize { *bar });\n    |                             ^^^^^^^^^^^^^^^^ cannot move out of captured outer variable in an `FnMut` closure\n \n error: aborting due to previous error"}, {"sha": "25eb8d0134c30c6353d0bb1ba1c91acd369ff59b", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,12 +1,12 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-error-with-note.rs:11:11\n    |\n-LL |     match *f {             //~ ERROR cannot move out of\n+LL |     match *f {\n    |           ^^\n    |           |\n    |           cannot move out of borrowed content\n    |           help: consider removing the `*`: `f`\n-LL |                            //~| cannot move out\n+LL |\n LL |         Foo::Foo1(num1,\n    |                   ---- data moved here\n LL |                   num2) => (),\n@@ -46,12 +46,12 @@ LL |             g: _t\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-error-with-note.rs:47:11\n    |\n-LL |     match a.a {           //~ ERROR cannot move out of\n+LL |     match a.a {\n    |           ^^^\n    |           |\n    |           cannot move out of borrowed content\n    |           help: consider borrowing here: `&a.a`\n-LL |                           //~| cannot move out\n+LL |\n LL |         n => {\n    |         - data moved here\n    |"}, {"sha": "8b0722916dbfe1a2dbb84976cbc2edef306e2e83", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,9 +1,9 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-error-with-note.rs:11:11\n    |\n-LL |     match *f {             //~ ERROR cannot move out of\n+LL |     match *f {\n    |           ^^ cannot move out of borrowed content\n-LL |                            //~| cannot move out\n+LL |\n LL |         Foo::Foo1(num1,\n    |                   ---- hint: to prevent move, use `ref num1` or `ref mut num1`\n LL |                   num2) => (),\n@@ -14,8 +14,8 @@ LL |         Foo::Foo2(num) => (),\n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-error-with-note.rs:30:9\n    |\n-LL | /         S {         //~ ERROR cannot move out of type `S`, which implements the `Drop` trait\n-LL | |         //~| cannot move out of here\n+LL | /         S {\n+LL | |\n LL | |             f: _s,\n    | |                -- hint: to prevent move, use `ref _s` or `ref mut _s`\n LL | |             g: _t\n@@ -26,9 +26,9 @@ LL | |         } => {}\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-error-with-note.rs:47:11\n    |\n-LL |     match a.a {           //~ ERROR cannot move out of\n+LL |     match a.a {\n    |           ^ cannot move out of borrowed content\n-LL |                           //~| cannot move out\n+LL |\n LL |         n => {\n    |         - hint: to prevent move, use `ref n` or `ref mut n`\n "}, {"sha": "e4840fba67299999f288548d5e0188e974e7efe4", "filename": "src/test/ui/borrowck/borrowck-move-from-subpath-of-borrowed-path.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0505]: cannot move out of `*a` because it is borrowed\n LL |     let b = &a;\n    |             -- borrow of `a` occurs here\n LL | \n-LL |     let z = *a; //~ ERROR: cannot move out of `*a` because it is borrowed\n+LL |     let z = *a;\n    |             ^^ move out of `*a` occurs here\n LL |     b.use_ref();\n    |     - borrow later used here"}, {"sha": "5e2428ef4a3ed730a3bda6ba35f827570299927b", "filename": "src/test/ui/borrowck/borrowck-move-from-subpath-of-borrowed-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0505]: cannot move out of `*a` because it is borrowed\n LL |     let b = &a;\n    |              - borrow of `a` occurs here\n LL | \n-LL |     let z = *a; //~ ERROR: cannot move out of `*a` because it is borrowed\n+LL |     let z = *a;\n    |         ^ move out of `*a` occurs here\n \n error: aborting due to previous error"}, {"sha": "615e3fd180016e53d5f9e8754d4f176f81e22291", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of dereference of raw pointer\n   --> $DIR/borrowck-move-from-unsafe-ptr.rs:2:13\n    |\n-LL |     let y = *x; //~ ERROR cannot move out of dereference of raw pointer\n+LL |     let y = *x;\n    |             ^^\n    |             |\n    |             cannot move out of dereference of raw pointer"}, {"sha": "c23c5bb9c4c10df78ccc206b683290fff382ab42", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of dereference of raw pointer\n   --> $DIR/borrowck-move-from-unsafe-ptr.rs:2:13\n    |\n-LL |     let y = *x; //~ ERROR cannot move out of dereference of raw pointer\n+LL |     let y = *x;\n    |             ^^\n    |             |\n    |             cannot move out of dereference of raw pointer"}, {"sha": "77f5b72e51c5dda8f90fad7d62537694f25052e5", "filename": "src/test/ui/borrowck/borrowck-move-mut-base-ptr.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `t0` because it is borrowed\n    |\n LL |     let p: &isize = &*t0; // Freezes `*t0`\n    |                     ---- borrow of `*t0` occurs here\n-LL |     let t1 = t0;        //~ ERROR cannot move out of `t0`\n+LL |     let t1 = t0;\n    |              ^^ move out of `t0` occurs here\n LL |     *t1 = 22;\n LL |     p.use_ref();"}, {"sha": "d3853832c92b14976af3420ab4621351e456d14b", "filename": "src/test/ui/borrowck/borrowck-move-mut-base-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `t0` because it is borrowed\n    |\n LL |     let p: &isize = &*t0; // Freezes `*t0`\n    |                      --- borrow of `*t0` occurs here\n-LL |     let t1 = t0;        //~ ERROR cannot move out of `t0`\n+LL |     let t1 = t0;\n    |         ^^ move out of `t0` occurs here\n \n error: aborting due to previous error"}, {"sha": "51caf60da6e0e612a87bd47c0f5922e71ede0cc5", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -20,9 +20,9 @@ LL |                   Foo { string: b }] => {\n help: consider removing the `&`\n    |\n LL |                 [Foo { string: a },\n-LL |                 //~^ ERROR cannot move out of type `[Foo]`\n-LL |                 //~| cannot move out\n-LL |                 //~| to prevent move\n+LL |\n+LL |\n+LL |\n LL |                   Foo { string: b }] => {\n    |\n "}, {"sha": "5ec0dabfde5878efae0f0da5885d686ee1d08552", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,9 +5,9 @@ LL |                   &[Foo { string: a },\n    |                    ^              - hint: to prevent move, use `ref a` or `ref mut a`\n    |  __________________|\n    | |\n-LL | |                 //~^ ERROR cannot move out of type `[Foo]`\n-LL | |                 //~| cannot move out\n-LL | |                 //~| to prevent move\n+LL | |\n+LL | |\n+LL | |\n LL | |                   Foo { string: b }] => {\n    | |_________________________________-__^ cannot move out of here\n    |                                   |"}, {"sha": "8c9083fcf135642d2ad1da46bb79bc55fd67ff53", "filename": "src/test/ui/borrowck/borrowck-move-subcomponent.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `a.x` because it is borrowed\n    |\n LL |   let pb = &a;\n    |            -- borrow of `a` occurs here\n-LL |   let S { x: ax } = a;  //~ ERROR cannot move out\n+LL |   let S { x: ax } = a;\n    |              ^^ move out of `a.x` occurs here\n LL |   f(pb);\n    |     -- borrow later used here"}, {"sha": "fd3deef6df5e04ebea332be8d2ea80f71b7b8c87", "filename": "src/test/ui/borrowck/borrowck-move-subcomponent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `a.x` because it is borrowed\n    |\n LL |   let pb = &a;\n    |             - borrow of `a` occurs here\n-LL |   let S { x: ax } = a;  //~ ERROR cannot move out\n+LL |   let S { x: ax } = a;\n    |              ^^ move out of `a.x` occurs here\n \n error: aborting due to previous error"}, {"sha": "32c7067acc89253681e520a45517f0b612b44160", "filename": "src/test/ui/borrowck/borrowck-multiple-captures.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -6,7 +6,7 @@ LL |     let p1 = &x1;\n ...\n LL |     thread::spawn(move|| {\n    |                   ^^^^^^ move out of `x1` occurs here\n-LL |         drop(x1); //~ ERROR cannot move `x1` into closure because it is borrowed\n+LL |         drop(x1);\n    |              -- move occurs due to use in closure\n ...\n LL |     borrow(&*p1);\n@@ -19,8 +19,8 @@ LL |     let p2 = &x2;\n    |              --- borrow of `x2` occurs here\n LL |     thread::spawn(move|| {\n    |                   ^^^^^^ move out of `x2` occurs here\n-LL |         drop(x1); //~ ERROR cannot move `x1` into closure because it is borrowed\n-LL |         drop(x2); //~ ERROR cannot move `x2` into closure because it is borrowed\n+LL |         drop(x1);\n+LL |         drop(x2);\n    |              -- move occurs due to use in closure\n ...\n LL |     borrow(&*p2);\n@@ -36,7 +36,7 @@ LL |     drop(x1);\n ...\n LL |     thread::spawn(move|| {\n    |                   ^^^^^^ value used here after move\n-LL |         drop(x1); //~ ERROR capture of moved value: `x1`\n+LL |         drop(x1);\n    |              -- use occurs due to use in closure\n \n error[E0382]: use of moved value: `x2`\n@@ -48,16 +48,16 @@ LL |     drop(x2);\n    |          -- value moved here\n LL |     thread::spawn(move|| {\n    |                   ^^^^^^ value used here after move\n-LL |         drop(x1); //~ ERROR capture of moved value: `x1`\n-LL |         drop(x2); //~ ERROR capture of moved value: `x2`\n+LL |         drop(x1);\n+LL |         drop(x2);\n    |              -- use occurs due to use in closure\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-multiple-captures.rs:36:14\n    |\n-LL |         drop(x); //~ ERROR cannot move `x` into closure because it is borrowed\n+LL |         drop(x);\n    |              - value moved here\n-LL |         drop(x); //~ ERROR use of moved value: `x`\n+LL |         drop(x);\n    |              ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -69,7 +69,7 @@ LL |     let p = &x;\n    |             -- borrow of `x` occurs here\n LL |     thread::spawn(move|| {\n    |                   ^^^^^^ move out of `x` occurs here\n-LL |         drop(x); //~ ERROR cannot move `x` into closure because it is borrowed\n+LL |         drop(x);\n    |              - move occurs due to use in closure\n ...\n LL |     borrow(&*p);\n@@ -78,9 +78,9 @@ LL |     borrow(&*p);\n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-multiple-captures.rs:46:14\n    |\n-LL |         drop(x); //~ ERROR capture of moved value: `x`\n+LL |         drop(x);\n    |              - value moved here\n-LL |         drop(x); //~ ERROR use of moved value: `x`\n+LL |         drop(x);\n    |              ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -94,7 +94,7 @@ LL |     drop(x);\n    |          - value moved here\n LL |     thread::spawn(move|| {\n    |                   ^^^^^^ value used here after move\n-LL |         drop(x); //~ ERROR capture of moved value: `x`\n+LL |         drop(x);\n    |              - use occurs due to use in closure\n \n error: aborting due to 8 previous errors"}, {"sha": "f25b19e3d2ee8e19b7991c3a02e66e2109fb25aa", "filename": "src/test/ui/borrowck/borrowck-multiple-captures.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0504]: cannot move `x1` into closure because it is borrowed\n LL |     let p1 = &x1;\n    |               -- borrow of `x1` occurs here\n ...\n-LL |         drop(x1); //~ ERROR cannot move `x1` into closure because it is borrowed\n+LL |         drop(x1);\n    |              ^^ move into closure occurs here\n \n error[E0504]: cannot move `x2` into closure because it is borrowed\n@@ -13,7 +13,7 @@ error[E0504]: cannot move `x2` into closure because it is borrowed\n LL |     let p2 = &x2;\n    |               -- borrow of `x2` occurs here\n ...\n-LL |         drop(x2); //~ ERROR cannot move `x2` into closure because it is borrowed\n+LL |         drop(x2);\n    |              ^^ move into closure occurs here\n \n error[E0382]: capture of moved value: `x1`\n@@ -22,7 +22,7 @@ error[E0382]: capture of moved value: `x1`\n LL |     drop(x1);\n    |          -- value moved here\n ...\n-LL |         drop(x1); //~ ERROR capture of moved value: `x1`\n+LL |         drop(x1);\n    |              ^^ value captured here after move\n    |\n    = note: move occurs because `x1` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -33,7 +33,7 @@ error[E0382]: capture of moved value: `x2`\n LL |     drop(x2);\n    |          -- value moved here\n ...\n-LL |         drop(x2); //~ ERROR capture of moved value: `x2`\n+LL |         drop(x2);\n    |              ^^ value captured here after move\n    |\n    = note: move occurs because `x2` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -44,15 +44,15 @@ error[E0504]: cannot move `x` into closure because it is borrowed\n LL |     let p = &x;\n    |              - borrow of `x` occurs here\n LL |     thread::spawn(move|| {\n-LL |         drop(x); //~ ERROR cannot move `x` into closure because it is borrowed\n+LL |         drop(x);\n    |              ^ move into closure occurs here\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-multiple-captures.rs:36:14\n    |\n-LL |         drop(x); //~ ERROR cannot move `x` into closure because it is borrowed\n+LL |         drop(x);\n    |              - value moved here\n-LL |         drop(x); //~ ERROR use of moved value: `x`\n+LL |         drop(x);\n    |              ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -63,17 +63,17 @@ error[E0382]: capture of moved value: `x`\n LL |     drop(x);\n    |          - value moved here\n LL |     thread::spawn(move|| {\n-LL |         drop(x); //~ ERROR capture of moved value: `x`\n+LL |         drop(x);\n    |              ^ value captured here after move\n    |\n    = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-multiple-captures.rs:46:14\n    |\n-LL |         drop(x); //~ ERROR capture of moved value: `x`\n+LL |         drop(x);\n    |              - value moved here\n-LL |         drop(x); //~ ERROR use of moved value: `x`\n+LL |         drop(x);\n    |              ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait"}, {"sha": "d58548f22049a683748c72511b0c967e3c39db60", "filename": "src/test/ui/borrowck/borrowck-mut-addr-of-imm-var.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n    |\n LL |     let x: isize = 3;\n    |         - help: consider changing this to be mutable: `mut x`\n-LL |     let y: &mut isize = &mut x; //~ ERROR cannot borrow\n+LL |     let y: &mut isize = &mut x;\n    |                         ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "aa3b39c395def78a46e769371b1e726a8e2714e0", "filename": "src/test/ui/borrowck/borrowck-mut-addr-of-imm-var.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow immutable local variable `x` as mutable\n    |\n LL |     let x: isize = 3;\n    |         - help: make this binding mutable: `mut x`\n-LL |     let y: &mut isize = &mut x; //~ ERROR cannot borrow\n+LL |     let y: &mut isize = &mut x;\n    |                              ^ cannot borrow mutably\n \n error: aborting due to previous error"}, {"sha": "925930acf8651461fab7f1ca11cb1beb61ef23e0", "filename": "src/test/ui/borrowck/borrowck-mut-borrow-of-mut-base-ptr.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `t0` as mutable because it is also borrowed as immut\n    |\n LL |     let p: &isize = &*t0;     // Freezes `*t0`\n    |                     ---- immutable borrow occurs here\n-LL |     let mut t2 = &mut t0;   //~ ERROR cannot borrow `t0`\n+LL |     let mut t2 = &mut t0;\n    |                  ^^^^^^^ mutable borrow occurs here\n LL |     **t2 += 1;              // Mutates `*t0`\n LL |     p.use_ref();\n@@ -14,7 +14,7 @@ error[E0499]: cannot borrow `t0` as mutable more than once at a time\n    |\n LL |     let p: &mut isize = &mut *t0; // Claims `*t0`\n    |                         -------- first mutable borrow occurs here\n-LL |     let mut t2 = &mut t0;       //~ ERROR cannot borrow `t0`\n+LL |     let mut t2 = &mut t0;\n    |                  ^^^^^^^ second mutable borrow occurs here\n LL |     **t2 += 1;                  // Mutates `*t0` but not through `*p`\n LL |     p.use_mut();"}, {"sha": "fb73dbd45104be87b408db71ee5ab8445ecc0a86", "filename": "src/test/ui/borrowck/borrowck-mut-borrow-of-mut-base-ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `t0` as mutable because `*t0` is also borrowed as im\n    |\n LL |     let p: &isize = &*t0;     // Freezes `*t0`\n    |                      --- immutable borrow occurs here\n-LL |     let mut t2 = &mut t0;   //~ ERROR cannot borrow `t0`\n+LL |     let mut t2 = &mut t0;\n    |                       ^^ mutable borrow occurs here\n ...\n LL | }\n@@ -14,7 +14,7 @@ error[E0499]: cannot borrow `t0` as mutable more than once at a time\n    |\n LL |     let p: &mut isize = &mut *t0; // Claims `*t0`\n    |                              --- first mutable borrow occurs here\n-LL |     let mut t2 = &mut t0;       //~ ERROR cannot borrow `t0`\n+LL |     let mut t2 = &mut t0;\n    |                       ^^ second mutable borrow occurs here\n ...\n LL | }"}, {"sha": "8e7ffdc6819a5c679ced357abdb9db3b76d7a76e", "filename": "src/test/ui/borrowck/borrowck-mut-slice-of-imm-vec.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n    |\n LL |     let v = vec![1, 2, 3];\n    |         - help: consider changing this to be mutable: `mut v`\n-LL |     write(&mut v); //~ ERROR cannot borrow\n+LL |     write(&mut v);\n    |           ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "416091920ad1f937519f98af6864b3c7d7f05e75", "filename": "src/test/ui/borrowck/borrowck-mut-slice-of-imm-vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow immutable local variable `v` as mutable\n    |\n LL |     let v = vec![1, 2, 3];\n    |         - help: make this binding mutable: `mut v`\n-LL |     write(&mut v); //~ ERROR cannot borrow\n+LL |     write(&mut v);\n    |                ^ cannot borrow mutably\n \n error: aborting due to previous error"}, {"sha": "3462b7610d38bf747d5202730d9aafe06321bb79", "filename": "src/test/ui/borrowck/borrowck-no-cycle-in-exchange-heap.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |       Cycle::Node(ref mut y) => {\n    |                   --------- borrow of `x.0` occurs here\n-LL |         y.a = x; //~ ERROR cannot move out of\n+LL |         y.a = x;\n    |         ---   ^ move out of `x` occurs here\n    |         |\n    |         borrow later used here"}, {"sha": "5fc169490c7e31d36c1ff3523ad1e0c2a18687bc", "filename": "src/test/ui/borrowck/borrowck-no-cycle-in-exchange-heap.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |       Cycle::Node(ref mut y) => {\n    |                   --------- borrow of `x.0` occurs here\n-LL |         y.a = x; //~ ERROR cannot move out of\n+LL |         y.a = x;\n    |               ^ move out of `x` occurs here\n \n error: aborting due to previous error"}, {"sha": "cf94c74dec222a9e7f2087b07275d2a92e1f940e", "filename": "src/test/ui/borrowck/borrowck-object-lifetime.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immut\n    |\n LL |     let y = x.borrowed();\n    |             - immutable borrow occurs here\n-LL |     let z = x.mut_borrowed(); //~ ERROR cannot borrow\n+LL |     let z = x.mut_borrowed();\n    |             ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     y.use_ref();\n    |     - immutable borrow later used here\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n    |\n LL |     let y = x.borrowed();\n    |             - immutable borrow occurs here\n-LL |     let z = &mut x; //~ ERROR cannot borrow\n+LL |     let z = &mut x;\n    |             ^^^^^^ mutable borrow occurs here\n LL |     y.use_ref();\n    |     - immutable borrow later used here"}, {"sha": "8f6c8e072e541c64c649cbd7b1deb677306a2665", "filename": "src/test/ui/borrowck/borrowck-object-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immut\n    |\n LL |     let y = x.borrowed();\n    |             - immutable borrow occurs here\n-LL |     let z = x.mut_borrowed(); //~ ERROR cannot borrow\n+LL |     let z = x.mut_borrowed();\n    |             ^ mutable borrow occurs here\n LL |     y.use_ref();\n LL | }\n@@ -14,7 +14,7 @@ error[E0502]: cannot borrow `x` as mutable because `*x` is also borrowed as immu\n    |\n LL |     let y = x.borrowed();\n    |             - immutable borrow occurs here\n-LL |     let z = &mut x; //~ ERROR cannot borrow\n+LL |     let z = &mut x;\n    |                  ^ mutable borrow occurs here\n LL |     y.use_ref();\n LL | }"}, {"sha": "122f5192720cceeeafdee75eef9d50ec546e0abd", "filename": "src/test/ui/borrowck/borrowck-or-init.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `i`\n   --> $DIR/borrowck-or-init.rs:5:20\n    |\n-LL |     println!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`\n+LL |     println!(\"{}\", i);\n    |                    ^ use of possibly uninitialized `i`\n \n error: aborting due to previous error"}, {"sha": "a2b69b187b932bc19d7aec04b8f31802222cbd84", "filename": "src/test/ui/borrowck/borrowck-or-init.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `i`\n   --> $DIR/borrowck-or-init.rs:5:20\n    |\n-LL |     println!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`\n+LL |     println!(\"{}\", i);\n    |                    ^ use of possibly uninitialized `i`\n \n error: aborting due to previous error"}, {"sha": "b7fcaa645af2f5f77171f9139843d5929aebfe7f", "filename": "src/test/ui/borrowck/borrowck-overloaded-call.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `s` as immutable because it is also borrowed as muta\n    |\n LL |     let sp = &mut s;\n    |              ------ mutable borrow occurs here\n-LL |     s(3);   //~ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n+LL |     s(3);\n    |     ^ immutable borrow occurs here\n LL |     use_mut(sp);\n    |             -- mutable borrow later used here\n@@ -14,7 +14,7 @@ error[E0596]: cannot borrow `s` as mutable, as it is not declared as mutable\n LL |     let s = SFnMut {\n    |         - help: consider changing this to be mutable: `mut s`\n ...\n-LL |     s(3);   //~ ERROR cannot borrow immutable local variable `s` as mutable\n+LL |     s(3);\n    |     ^ cannot borrow as mutable\n \n error[E0382]: use of moved value: `s`\n@@ -25,7 +25,7 @@ LL |     let s = SFnOnce {\n ...\n LL |     s(\" world\".to_string());\n    |     - value moved here\n-LL |     s(\" world\".to_string());    //~ ERROR use of moved value: `s`\n+LL |     s(\" world\".to_string());\n    |     ^ value used here after move\n \n error: aborting due to 3 previous errors"}, {"sha": "97223a2307c6b3643beed7a29c25af93cc41ee9e", "filename": "src/test/ui/borrowck/borrowck-overloaded-call.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `s` as immutable because it is also borrowed as muta\n    |\n LL |     let sp = &mut s;\n    |                   - mutable borrow occurs here\n-LL |     s(3);   //~ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n+LL |     s(3);\n    |     ^ immutable borrow occurs here\n LL |     use_mut(sp);\n LL | }\n@@ -15,15 +15,15 @@ error[E0596]: cannot borrow immutable local variable `s` as mutable\n LL |     let s = SFnMut {\n    |         - help: make this binding mutable: `mut s`\n ...\n-LL |     s(3);   //~ ERROR cannot borrow immutable local variable `s` as mutable\n+LL |     s(3);\n    |     ^ cannot borrow mutably\n \n error[E0382]: use of moved value: `s`\n   --> $DIR/borrowck-overloaded-call.rs:75:5\n    |\n LL |     s(\" world\".to_string());\n    |     - value moved here\n-LL |     s(\" world\".to_string());    //~ ERROR use of moved value: `s`\n+LL |     s(\" world\".to_string());\n    |     ^ value used here after move\n    |\n    = note: move occurs because `s` has type `SFnOnce`, which does not implement the `Copy` trait"}, {"sha": "5f34749ca89eb4f8618ad86a6758f3c28f810802", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-autoderef.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*f` as immutable because it is also borrowed as mut\n    |\n LL |     let p = &mut f[&s];\n    |                  - mutable borrow occurs here\n-LL |     let q = &f[&s]; //~ ERROR cannot borrow\n+LL |     let q = &f[&s];\n    |              ^ immutable borrow occurs here\n LL |     p.use_mut();\n    |     - mutable borrow later used here\n@@ -13,7 +13,7 @@ error[E0499]: cannot borrow `*f` as mutable more than once at a time\n    |\n LL |     let p = &mut f[&s];\n    |                  - first mutable borrow occurs here\n-LL |     let q = &mut f[&s]; //~ ERROR cannot borrow\n+LL |     let q = &mut f[&s];\n    |                  ^ second mutable borrow occurs here\n LL |     p.use_mut();\n    |     - first borrow later used here\n@@ -23,7 +23,7 @@ error[E0499]: cannot borrow `f.foo` as mutable more than once at a time\n    |\n LL |     let p = &mut f.foo[&s];\n    |                  ----- first mutable borrow occurs here\n-LL |     let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+LL |     let q = &mut f.foo[&s];\n    |                  ^^^^^ second mutable borrow occurs here\n LL |     p.use_mut();\n    |     - first borrow later used here\n@@ -33,7 +33,7 @@ error[E0502]: cannot borrow `f.foo` as mutable because it is also borrowed as im\n    |\n LL |     let p = &f.foo[&s];\n    |              ----- immutable borrow occurs here\n-LL |     let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+LL |     let q = &mut f.foo[&s];\n    |                  ^^^^^ mutable borrow occurs here\n LL |     p.use_ref();\n    |     - immutable borrow later used here\n@@ -43,7 +43,7 @@ error[E0506]: cannot assign to `f.foo` because it is borrowed\n    |\n LL |     let p = &f.foo[&s];\n    |              ----- borrow of `f.foo` occurs here\n-LL |     f.foo = g; //~ ERROR cannot assign\n+LL |     f.foo = g;\n    |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n LL |     p.use_ref();\n    |     - borrow later used here\n@@ -53,7 +53,7 @@ error[E0506]: cannot assign to `*f` because it is borrowed\n    |\n LL |     let p = &f.foo[&s];\n    |              ----- borrow of `*f` occurs here\n-LL |     *f = g; //~ ERROR cannot assign\n+LL |     *f = g;\n    |     ^^^^^^ assignment to borrowed `*f` occurs here\n LL |     p.use_ref();\n    |     - borrow later used here\n@@ -63,7 +63,7 @@ error[E0506]: cannot assign to `f.foo` because it is borrowed\n    |\n LL |     let p = &mut f.foo[&s];\n    |                  ----- borrow of `f.foo` occurs here\n-LL |     f.foo = g; //~ ERROR cannot assign\n+LL |     f.foo = g;\n    |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n LL |     p.use_mut();\n    |     - borrow later used here\n@@ -73,7 +73,7 @@ error[E0506]: cannot assign to `*f` because it is borrowed\n    |\n LL |     let p = &mut f.foo[&s];\n    |                  ----- borrow of `*f` occurs here\n-LL |     *f = g; //~ ERROR cannot assign\n+LL |     *f = g;\n    |     ^^^^^^ assignment to borrowed `*f` occurs here\n LL |     p.use_mut();\n    |     - borrow later used here"}, {"sha": "73cab8868eab68de3436f6daa2409c2be9912b2d", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-autoderef.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*f` as immutable because it is also borrowed as mut\n    |\n LL |     let p = &mut f[&s];\n    |                  - mutable borrow occurs here\n-LL |     let q = &f[&s]; //~ ERROR cannot borrow\n+LL |     let q = &f[&s];\n    |              ^ immutable borrow occurs here\n LL |     p.use_mut();\n LL | }\n@@ -14,7 +14,7 @@ error[E0499]: cannot borrow `*f` as mutable more than once at a time\n    |\n LL |     let p = &mut f[&s];\n    |                  - first mutable borrow occurs here\n-LL |     let q = &mut f[&s]; //~ ERROR cannot borrow\n+LL |     let q = &mut f[&s];\n    |                  ^ second mutable borrow occurs here\n LL |     p.use_mut();\n LL | }\n@@ -25,7 +25,7 @@ error[E0499]: cannot borrow `f.foo` as mutable more than once at a time\n    |\n LL |     let p = &mut f.foo[&s];\n    |                  ----- first mutable borrow occurs here\n-LL |     let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+LL |     let q = &mut f.foo[&s];\n    |                  ^^^^^ second mutable borrow occurs here\n LL |     p.use_mut();\n LL | }\n@@ -36,7 +36,7 @@ error[E0502]: cannot borrow `f.foo` as mutable because it is also borrowed as im\n    |\n LL |     let p = &f.foo[&s];\n    |              ----- immutable borrow occurs here\n-LL |     let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+LL |     let q = &mut f.foo[&s];\n    |                  ^^^^^ mutable borrow occurs here\n LL |     p.use_ref();\n LL | }\n@@ -47,31 +47,31 @@ error[E0506]: cannot assign to `f.foo` because it is borrowed\n    |\n LL |     let p = &f.foo[&s];\n    |              ----- borrow of `f.foo` occurs here\n-LL |     f.foo = g; //~ ERROR cannot assign\n+LL |     f.foo = g;\n    |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n \n error[E0506]: cannot assign to `*f` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:77:5\n    |\n LL |     let p = &f.foo[&s];\n    |              ----- borrow of `*f` occurs here\n-LL |     *f = g; //~ ERROR cannot assign\n+LL |     *f = g;\n    |     ^^^^^^ assignment to borrowed `*f` occurs here\n \n error[E0506]: cannot assign to `f.foo` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:83:5\n    |\n LL |     let p = &mut f.foo[&s];\n    |                  ----- borrow of `f.foo` occurs here\n-LL |     f.foo = g; //~ ERROR cannot assign\n+LL |     f.foo = g;\n    |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n \n error[E0506]: cannot assign to `*f` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:89:5\n    |\n LL |     let p = &mut f.foo[&s];\n    |                  ----- borrow of `*f` occurs here\n-LL |     *f = g; //~ ERROR cannot assign\n+LL |     *f = g;\n    |     ^^^^^^ assignment to borrowed `*f` occurs here\n \n error: aborting due to 8 previous errors"}, {"sha": "21bc8bb06cc062b20dac1de8b6d3b3cccf8c93b3", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-mut.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let _bar1 = &mut foo.bar1;\n    |                 ------------- first mutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     use_mut(_bar1);\n    |             ----- first borrow later used here\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let _bar1 = &mut foo.bar1;\n    |                 ------------- mutable borrow occurs here\n-LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &foo.bar1;\n    |                 ^^^^^^^^^ immutable borrow occurs here\n LL |     use_mut(_bar1);\n    |             ----- mutable borrow later used here\n@@ -23,7 +23,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let _bar1 = &foo.bar1;\n    |                 --------- immutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     use_imm(_bar1);\n    |             ----- immutable borrow later used here\n@@ -45,9 +45,9 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                 ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n    |                 ^^^^^^^^^ immutable borrow occurs here\n-LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &*foo;\n LL |     use_mut(_bar1);\n    |             ----- mutable borrow later used here\n \n@@ -56,8 +56,8 @@ error[E0502]: cannot borrow `*foo` as immutable because it is also borrowed as m\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                 ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n-LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n+LL |     let _foo2 = &*foo;\n    |                 ^^^^^ immutable borrow occurs here\n LL |     use_mut(_bar1);\n    |             ----- mutable borrow later used here\n@@ -67,7 +67,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                 ------------------ first mutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     use_mut(_bar1);\n    |             ----- first borrow later used here\n@@ -77,7 +77,7 @@ error[E0499]: cannot borrow `*foo` as mutable more than once at a time\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                 ------------------ first mutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                 ^^^^^^^^^ second mutable borrow occurs here\n LL |     use_mut(_bar1);\n    |             ----- first borrow later used here\n@@ -87,7 +87,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let _bar1 = &foo.bar1.int1;\n    |                 -------------- immutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     use_imm(_bar1);\n    |             ----- immutable borrow later used here\n@@ -97,7 +97,7 @@ error[E0502]: cannot borrow `*foo` as mutable because it is also borrowed as imm\n    |\n LL |     let _bar1 = &foo.bar1.int1;\n    |                 -------------- immutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                 ^^^^^^^^^ mutable borrow occurs here\n LL |     use_imm(_bar1);\n    |             ----- immutable borrow later used here\n@@ -107,7 +107,7 @@ error[E0596]: cannot borrow `foo.bar1` as mutable, as it is behind a `&` referen\n    |\n LL | fn borrow_mut_from_imm(foo: &Foo) {\n    |                             ---- help: consider changing this to be a mutable reference: `&mut Foo`\n-LL |     let _bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _bar1 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ `foo` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 11 previous errors"}, {"sha": "ea624018ad4c07a05f9822fa400efcdce8cd37f0", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-mut.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let _bar1 = &mut foo.bar1;\n    |                      -------- first mutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                      ^^^^^^^^ second mutable borrow occurs here\n LL |     use_mut(_bar1);\n LL | }\n@@ -14,7 +14,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let _bar1 = &mut foo.bar1;\n    |                      -------- mutable borrow occurs here\n-LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &foo.bar1;\n    |                  ^^^^^^^^ immutable borrow occurs here\n LL |     use_mut(_bar1);\n LL | }\n@@ -25,7 +25,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let _bar1 = &foo.bar1;\n    |                  -------- immutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                      ^^^^^^^^ mutable borrow occurs here\n LL |     use_imm(_bar1);\n LL | }\n@@ -48,7 +48,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because `foo.bar1.int1` is a\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                      ------------- mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n    |                  ^^^^^^^^ immutable borrow occurs here\n ...\n LL | }\n@@ -59,8 +59,8 @@ error[E0502]: cannot borrow `*foo` as immutable because `foo.bar1.int1` is also\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                      ------------- mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n-LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n+LL |     let _foo2 = &*foo;\n    |                  ^^^^ immutable borrow occurs here\n LL |     use_mut(_bar1);\n LL | }\n@@ -71,7 +71,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                      ------------- first mutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                      ^^^^^^^^ second mutable borrow occurs here\n LL |     use_mut(_bar1);\n LL | }\n@@ -82,7 +82,7 @@ error[E0499]: cannot borrow `*foo` as mutable more than once at a time\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                      ------------- first mutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                      ^^^^ second mutable borrow occurs here\n LL |     use_mut(_bar1);\n LL | }\n@@ -93,7 +93,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because `foo.bar1.int1` is als\n    |\n LL |     let _bar1 = &foo.bar1.int1;\n    |                  ------------- immutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                      ^^^^^^^^ mutable borrow occurs here\n LL |     use_imm(_bar1);\n LL | }\n@@ -104,7 +104,7 @@ error[E0502]: cannot borrow `*foo` as mutable because `foo.bar1.int1` is also bo\n    |\n LL |     let _bar1 = &foo.bar1.int1;\n    |                  ------------- immutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                      ^^^^ mutable borrow occurs here\n LL |     use_imm(_bar1);\n LL | }\n@@ -115,7 +115,7 @@ error[E0596]: cannot borrow field `foo.bar1` of immutable binding as mutable\n    |\n LL | fn borrow_mut_from_imm(foo: &Foo) {\n    |                             ---- use `&mut Foo` here to make mutable\n-LL |     let _bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _bar1 = &mut foo.bar1;\n    |                      ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error: aborting due to 11 previous errors"}, {"sha": "e744fc6b54b1a4fccb6f4e48f7a052948ab283b9", "filename": "src/test/ui/borrowck/borrowck-ref-mut-of-imm.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n LL | fn destructure(x: Option<isize>) -> isize {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n-LL |       Some(ref mut v) => *v //~ ERROR cannot borrow\n+LL |       Some(ref mut v) => *v\n    |            ^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "6e0d2f699455ba2c08f14e88f74fbb925e59dee6", "filename": "src/test/ui/borrowck/borrowck-ref-mut-of-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow field `(x as std::prelude::v1::Some).0` of immutable\n LL | fn destructure(x: Option<isize>) -> isize {\n    |                - help: make this binding mutable: `mut x`\n ...\n-LL |       Some(ref mut v) => *v //~ ERROR cannot borrow\n+LL |       Some(ref mut v) => *v\n    |            ^^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error: aborting due to previous error"}, {"sha": "3618a7cb2cd39d75f38a20dcb3200cb5ac2d5999", "filename": "src/test/ui/borrowck/borrowck-reinit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `x` (Ast)\n    |\n LL |     drop(x);\n    |          - value moved here\n-LL |     let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n+LL |     let _ = (1,x);\n    |                ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -16,7 +16,7 @@ LL |     let mut x = Box::new(0);\n ...\n LL |     drop(x);\n    |          - value moved here\n-LL |     let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n+LL |     let _ = (1,x);\n    |                ^ value used here after move\n \n error: aborting due to 2 previous errors"}, {"sha": "ee8f90edcd3fd33e233275145a5e91c04fd2d1a9", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,8 +3,8 @@ error[E0502]: cannot borrow `x` as immutable because it is also borrowed as muta\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n-LL |     //~^ mutable borrow occurs here\n-LL |     let z = &x; //~ ERROR cannot borrow\n+LL |\n+LL |     let z = &x;\n    |             ^^ immutable borrow occurs here\n ...\n LL |     y.use_mut();\n@@ -15,8 +15,8 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n    |\n LL |             let y = &x;\n    |                     -- immutable borrow occurs here\n-LL |             //~^ immutable borrow occurs here\n-LL |             let z = &mut x; //~ ERROR cannot borrow\n+LL |\n+LL |             let z = &mut x;\n    |                     ^^^^^^ mutable borrow occurs here\n ...\n LL |             y.use_ref();\n@@ -27,8 +27,8 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n    |\n LL |         let y = &mut x;\n    |                 ------ first mutable borrow occurs here\n-LL |         //~^ first mutable borrow occurs here\n-LL |         let z = &mut x; //~ ERROR cannot borrow\n+LL |\n+LL |         let z = &mut x;\n    |                 ^^^^^^ second mutable borrow occurs here\n ...\n LL |         y.use_mut();"}, {"sha": "79aec6c2edaad112c705a940527043998b2e92d9", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,8 +3,8 @@ error[E0502]: cannot borrow `x` as immutable because it is also borrowed as muta\n    |\n LL |     let y = &mut x;\n    |                  - mutable borrow occurs here\n-LL |     //~^ mutable borrow occurs here\n-LL |     let z = &x; //~ ERROR cannot borrow\n+LL |\n+LL |     let z = &x;\n    |              ^ immutable borrow occurs here\n ...\n LL | }\n@@ -15,8 +15,8 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n    |\n LL |             let y = &x;\n    |                      - immutable borrow occurs here\n-LL |             //~^ immutable borrow occurs here\n-LL |             let z = &mut x; //~ ERROR cannot borrow\n+LL |\n+LL |             let z = &mut x;\n    |                          ^ mutable borrow occurs here\n ...\n LL |         }\n@@ -27,8 +27,8 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n    |\n LL |         let y = &mut x;\n    |                      - first mutable borrow occurs here\n-LL |         //~^ first mutable borrow occurs here\n-LL |         let z = &mut x; //~ ERROR cannot borrow\n+LL |\n+LL |         let z = &mut x;\n    |                      ^ second mutable borrow occurs here\n ...\n LL |     };"}, {"sha": "d54449ac4ad467d4606cf055a63fbadc20ed86b0", "filename": "src/test/ui/borrowck/borrowck-return-variable-on-stack-via-clone.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return-variable-on-stack-via-clone.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return-variable-on-stack-via-clone.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return-variable-on-stack-via-clone.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing function parameter `x`\n   --> $DIR/borrowck-return-variable-on-stack-via-clone.rs:7:5\n    |\n-LL |     (&x).clone() //~ ERROR `x` does not live long enough\n+LL |     (&x).clone()\n    |     ----^^^^^^^^\n    |     |\n    |     returns a value referencing data owned by the current function"}, {"sha": "4d4244ba5efad3554770b90e9f790493d05bd0a8", "filename": "src/test/ui/borrowck/borrowck-return-variable-on-stack-via-clone.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return-variable-on-stack-via-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return-variable-on-stack-via-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return-variable-on-stack-via-clone.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/borrowck-return-variable-on-stack-via-clone.rs:7:7\n    |\n-LL |     (&x).clone() //~ ERROR `x` does not live long enough\n+LL |     (&x).clone()\n    |       ^ borrowed value does not live long enough\n LL | }\n    | - borrowed value only lives until here"}, {"sha": "a2b65af5dbfcdda36fca8cf9a806c4c9d3fd7a50", "filename": "src/test/ui/borrowck/borrowck-return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-return.rs:3:12\n    |\n-LL |     return x; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     return x;\n    |            ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "f716ee68b00022448de4cf5641e460504e261b6d", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n    |\n LL |     if let [ref first, ref second, ..] = *s {\n    |                        ---------- immutable borrow occurs here\n-LL |         if let [_, ref mut  second2, ref mut third, ..] = *s { //~ERROR\n+LL |         if let [_, ref mut  second2, ref mut third, ..] = *s {\n    |                    ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[first, second, second2, third]);\n    |                          ------ immutable borrow later used here\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n    |\n LL |     if let [.., ref fourth, ref third, _, ref first] = *s {\n    |                             --------- immutable borrow occurs here\n-LL |         if let [.., ref mut third2, _, _] = *s { //~ERROR\n+LL |         if let [.., ref mut third2, _, _] = *s {\n    |                     ^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[first, third, third2, fourth]);\n    |                          ----- immutable borrow later used here\n@@ -24,7 +24,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n    |                    ------------- immutable borrow occurs here\n ...\n-LL |         if let [_, ref mut from_begin1, ..] = *s { //~ERROR\n+LL |         if let [_, ref mut from_begin1, ..] = *s {\n    |                    ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin1, from_end1, from_end3, from_end4]);\n    |                                                      --------- immutable borrow later used here\n@@ -35,7 +35,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n    |                                   ------------- immutable borrow occurs here\n ...\n-LL |         if let [_, _, ref mut from_begin2, ..] = *s { //~ERROR\n+LL |         if let [_, _, ref mut from_begin2, ..] = *s {\n    |                       ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin2, from_end1, from_end3, from_end4]);\n    |                                           --------- immutable borrow later used here\n@@ -46,7 +46,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n    |                                   ------------- immutable borrow occurs here\n ...\n-LL |         if let [_, _, _, ref mut from_begin3, ..] = *s { //~ERROR\n+LL |         if let [_, _, _, ref mut from_begin3, ..] = *s {\n    |                          ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin3, from_end1, from_end3, from_end4]);\n    |                                           --------- immutable borrow later used here\n@@ -57,7 +57,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s {\n    |                                                  --------------- immutable borrow occurs here\n ...\n-LL |         if let [.., ref mut from_end2, _] = *s { //~ERROR\n+LL |         if let [.., ref mut from_end2, _] = *s {\n    |                     ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end2]);\n    |                                             ----------- immutable borrow later used here\n@@ -68,7 +68,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s {\n    |                                                  --------------- immutable borrow occurs here\n ...\n-LL |         if let [.., ref mut from_end3, _,  _] = *s { //~ERROR\n+LL |         if let [.., ref mut from_end3, _,  _] = *s {\n    |                     ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end3]);\n    |                                             ----------- immutable borrow later used here\n@@ -79,7 +79,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s {\n    |                              --------------- immutable borrow occurs here\n ...\n-LL |         if let [.., ref mut from_end4, _, _, _] = *s { //~ERROR\n+LL |         if let [.., ref mut from_end4, _, _, _] = *s {\n    |                     ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end4]);\n    |                                ----------- immutable borrow later used here\n@@ -89,7 +89,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n    |\n LL |     if let [ref first, ref second, ..] = *s {\n    |                        ---------- immutable borrow occurs here\n-LL |         if let [_, ref mut tail..] = *s { //~ERROR\n+LL |         if let [_, ref mut tail..] = *s {\n    |                    ^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[first, second]);\n    |                          ------ immutable borrow later used here\n@@ -99,7 +99,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n    |\n LL |     if let [.., ref second, ref first] = *s {\n    |                 ---------- immutable borrow occurs here\n-LL |         if let [ref mut tail.., _] = *s { //~ERROR\n+LL |         if let [ref mut tail.., _] = *s {\n    |                 ^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[first, second]);\n    |                          ------ immutable borrow later used here\n@@ -109,7 +109,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n    |\n LL |     if let [_, _, _, ref s1..] = *s {\n    |                      ------ immutable borrow occurs here\n-LL |         if let [ref mut s2.., _, _, _] = *s { //~ERROR\n+LL |         if let [ref mut s2.., _, _, _] = *s {\n    |                 ^^^^^^^^^^ mutable borrow occurs here\n LL |             nop_subslice(s1);\n    |                          -- immutable borrow later used here"}, {"sha": "c291ed224eb3c632d6515e4adf60598aed1be88e", "filename": "src/test/ui/borrowck/borrowck-storage-dead.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,13 +1,13 @@\n error[E0381]: use of possibly uninitialized variable: `x` (Ast)\n   --> $DIR/borrowck-storage-dead.rs:18:17\n    |\n-LL |         let _ = x + 1; //~ERROR (Ast) [E0381]\n+LL |         let _ = x + 1;\n    |                 ^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x` (Mir)\n   --> $DIR/borrowck-storage-dead.rs:18:17\n    |\n-LL |         let _ = x + 1; //~ERROR (Ast) [E0381]\n+LL |         let _ = x + 1;\n    |                 ^ use of possibly uninitialized `x`\n \n error: aborting due to 2 previous errors"}, {"sha": "1c55953c91fb799dc525ef46d5cd62a8a450b292", "filename": "src/test/ui/borrowck/borrowck-swap-mut-base-ptr.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `t0` as mutable because it is also borrowed as immut\n    |\n LL |     let p: &isize = &*t0;     // Freezes `*t0`\n    |                     ---- immutable borrow occurs here\n-LL |     swap(&mut t0, &mut t1); //~ ERROR cannot borrow `t0`\n+LL |     swap(&mut t0, &mut t1);\n    |          ^^^^^^^ mutable borrow occurs here\n LL |     *t1 = 22;\n LL |     p.use_ref();"}, {"sha": "9efd249caf86b5e1a7d7e7acd94a5538deee164a", "filename": "src/test/ui/borrowck/borrowck-swap-mut-base-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `t0` as mutable because `*t0` is also borrowed as im\n    |\n LL |     let p: &isize = &*t0;     // Freezes `*t0`\n    |                      --- immutable borrow occurs here\n-LL |     swap(&mut t0, &mut t1); //~ ERROR cannot borrow `t0`\n+LL |     swap(&mut t0, &mut t1);\n    |               ^^ mutable borrow occurs here\n ...\n LL | }"}, {"sha": "ec1cf4a4e2b06fccd63a1311e4154c859c0a4d60", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `f` as immutable because it is also borrowed as muta\n    |\n LL |     let g = &mut f;\n    |             ------ mutable borrow occurs here\n-LL |     f(1, 2);    //~ ERROR cannot borrow `f` as immutable\n+LL |     f(1, 2);\n    |     ^ immutable borrow occurs here\n LL |     use_mut(g);\n    |             - mutable borrow later used here\n@@ -13,7 +13,7 @@ error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n    |\n LL | fn b<F:FnMut(isize, isize) -> isize>(f: F) {\n    |                                      - help: consider changing this to be mutable: `mut f`\n-LL |     f(1, 2);    //~ ERROR cannot borrow immutable argument\n+LL |     f(1, 2);\n    |     ^ cannot borrow as mutable\n \n error[E0382]: use of moved value: `f`\n@@ -25,7 +25,7 @@ LL | fn c<F:FnOnce(isize, isize) -> isize>(f: F) {\n    |      consider adding a `Copy` constraint to this type argument\n LL |     f(1, 2);\n    |     - value moved here\n-LL |     f(1, 2);    //~ ERROR use of moved value\n+LL |     f(1, 2);\n    |     ^ value used here after move\n \n error: aborting due to 3 previous errors"}, {"sha": "2e0773aebc4ccdfb5e5eb2ce19c85acb319b6827", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `f` as immutable because it is also borrowed as muta\n    |\n LL |     let g = &mut f;\n    |                  - mutable borrow occurs here\n-LL |     f(1, 2);    //~ ERROR cannot borrow `f` as immutable\n+LL |     f(1, 2);\n    |     ^ immutable borrow occurs here\n LL |     use_mut(g);\n LL | }\n@@ -14,15 +14,15 @@ error[E0596]: cannot borrow immutable argument `f` as mutable\n    |\n LL | fn b<F:FnMut(isize, isize) -> isize>(f: F) {\n    |                                      - help: make this binding mutable: `mut f`\n-LL |     f(1, 2);    //~ ERROR cannot borrow immutable argument\n+LL |     f(1, 2);\n    |     ^ cannot borrow mutably\n \n error[E0382]: use of moved value: `f`\n   --> $DIR/borrowck-unboxed-closures.rs:12:5\n    |\n LL |     f(1, 2);\n    |     - value moved here\n-LL |     f(1, 2);    //~ ERROR use of moved value\n+LL |     f(1, 2);\n    |     ^ value used here after move\n    |\n    = note: move occurs because `f` has type `F`, which does not implement the `Copy` trait"}, {"sha": "2d0b21dd0d6fbe19b3619c03a7cf10ae2666ea1f", "filename": "src/test/ui/borrowck/borrowck-uninit-after-item.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `bar`\n   --> $DIR/borrowck-uninit-after-item.rs:4:9\n    |\n-LL |     baz(bar); //~ ERROR use of possibly uninitialized variable: `bar`\n+LL |     baz(bar);\n    |         ^^^ use of possibly uninitialized `bar`\n \n error: aborting due to previous error"}, {"sha": "163395e42d252ceb80a089052416197d4dcd0218", "filename": "src/test/ui/borrowck/borrowck-uninit-in-assignop.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,61 +1,61 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:6:5\n    |\n-LL |     x += 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x += 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:9:5\n    |\n-LL |     x -= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x -= 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:12:5\n    |\n-LL |     x *= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x *= 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:15:5\n    |\n-LL |     x /= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x /= 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:18:5\n    |\n-LL |     x %= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x %= 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:21:5\n    |\n-LL |     x ^= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x ^= 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:24:5\n    |\n-LL |     x &= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x &= 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:27:5\n    |\n-LL |     x |= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x |= 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:30:5\n    |\n-LL |     x <<= 1;    //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x <<= 1;\n    |     ^^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:33:5\n    |\n-LL |     x >>= 1;    //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x >>= 1;\n    |     ^^^^^^^ use of possibly uninitialized `x`\n \n error: aborting due to 10 previous errors"}, {"sha": "5db9c1b250cc25b7333c174dccd8ccdbc178236b", "filename": "src/test/ui/borrowck/borrowck-uninit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit.rs:5:9\n    |\n-LL |     foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     foo(x);\n    |         ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "61569b9cac10637a719deac6483eb73d9fc1c628", "filename": "src/test/ui/borrowck/borrowck-union-borrow-nested.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0503]: cannot use `u.c` because it was mutably borrowed\n    |\n LL |             let ra = &mut u.s.a;\n    |                      ---------- borrow of `u.s.a` occurs here\n-LL |             let b = u.c; //~ ERROR cannot use `u.c` because it was mutably borrowed\n+LL |             let b = u.c;\n    |                     ^^^ use of borrowed `u.s.a`\n LL |             ra.use_mut();\n    |             -- borrow later used here"}, {"sha": "71fae6f8d63b8db658a06632f8ea87245e70a737", "filename": "src/test/ui/borrowck/borrowck-union-borrow-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0503]: cannot use `u.c` because it was mutably borrowed\n    |\n LL |             let ra = &mut u.s.a;\n    |                           ----- borrow of `u.s.a` occurs here\n-LL |             let b = u.c; //~ ERROR cannot use `u.c` because it was mutably borrowed\n+LL |             let b = u.c;\n    |                 ^ use of borrowed `u.s.a`\n \n error: aborting due to previous error"}, {"sha": "518f062ba1af8d96cfe10f3657807ffb951cc54a", "filename": "src/test/ui/borrowck/borrowck-union-borrow.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `u.a` as mutable because it is also borrowed as immu\n    |\n LL |             let ra = &u.a;\n    |                      ---- immutable borrow occurs here\n-LL |             let rma = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n+LL |             let rma = &mut u.a;\n    |                       ^^^^^^^^ mutable borrow occurs here\n LL |             drop(ra);\n    |                  -- immutable borrow later used here\n@@ -13,7 +13,7 @@ error[E0506]: cannot assign to `u.a` because it is borrowed\n    |\n LL |             let ra = &u.a;\n    |                      ---- borrow of `u.a` occurs here\n-LL |             u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n+LL |             u.a = 1;\n    |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n LL |             drop(ra);\n    |                  -- borrow later used here\n@@ -23,7 +23,7 @@ error[E0502]: cannot borrow `u` (via `u.b`) as mutable because it is also borrow\n    |\n LL |             let ra = &u.a;\n    |                      ---- immutable borrow occurs here (via `u.a`)\n-LL |             let rmb = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n+LL |             let rmb = &mut u.b;\n    |                       ^^^^^^^^ mutable borrow of `u.b` -- which overlaps with `u.a` -- occurs here\n LL |             drop(ra);\n    |                  -- immutable borrow later used here\n@@ -35,7 +35,7 @@ error[E0506]: cannot assign to `u.b` because it is borrowed\n    |\n LL |             let ra = &u.a;\n    |                      ---- borrow of `u.b` occurs here\n-LL |             u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n+LL |             u.b = 1;\n    |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n LL |             drop(ra);\n    |                  -- borrow later used here\n@@ -45,7 +45,7 @@ error[E0502]: cannot borrow `u.a` as immutable because it is also borrowed as mu\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- mutable borrow occurs here\n-LL |             let ra = &u.a; //~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n+LL |             let ra = &u.a;\n    |                      ^^^^ immutable borrow occurs here\n LL |             drop(rma);\n    |                  --- mutable borrow later used here\n@@ -55,7 +55,7 @@ error[E0503]: cannot use `u.a` because it was mutably borrowed\n    |\n LL |             let ra = &mut u.a;\n    |                      -------- borrow of `u.a` occurs here\n-LL |             let a = u.a; //~ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |             let a = u.a;\n    |                     ^^^ use of borrowed `u.a`\n LL |             drop(ra);\n    |                  -- borrow later used here\n@@ -65,7 +65,7 @@ error[E0499]: cannot borrow `u.a` as mutable more than once at a time\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- first mutable borrow occurs here\n-LL |             let rma2 = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable more than once at a time\n+LL |             let rma2 = &mut u.a;\n    |                        ^^^^^^^^ second mutable borrow occurs here\n LL |             drop(rma);\n    |                  --- first borrow later used here\n@@ -75,7 +75,7 @@ error[E0506]: cannot assign to `u.a` because it is borrowed\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- borrow of `u.a` occurs here\n-LL |             u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n+LL |             u.a = 1;\n    |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n LL |             drop(rma);\n    |                  --- borrow later used here\n@@ -85,7 +85,7 @@ error[E0502]: cannot borrow `u` (via `u.b`) as immutable because it is also borr\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- mutable borrow occurs here (via `u.a`)\n-LL |             let rb = &u.b; //~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n+LL |             let rb = &u.b;\n    |                      ^^^^ immutable borrow of `u.b` -- which overlaps with `u.a` -- occurs here\n LL |             drop(rma);\n    |                  --- mutable borrow later used here\n@@ -97,7 +97,7 @@ error[E0503]: cannot use `u.b` because it was mutably borrowed\n    |\n LL |             let ra = &mut u.a;\n    |                      -------- borrow of `u.a` occurs here\n-LL |             let b = u.b; //~ ERROR cannot use `u.b` because it was mutably borrowed\n+LL |             let b = u.b;\n    |                     ^^^ use of borrowed `u.a`\n LL | \n LL |             drop(ra);\n@@ -108,7 +108,7 @@ error[E0499]: cannot borrow `u` (via `u.b`) as mutable more than once at a time\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- first mutable borrow occurs here (via `u.a`)\n-LL |             let rmb2 = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n+LL |             let rmb2 = &mut u.b;\n    |                        ^^^^^^^^ second mutable borrow occurs here (via `u.b`)\n LL |             drop(rma);\n    |                  --- first borrow later used here\n@@ -120,7 +120,7 @@ error[E0506]: cannot assign to `u.b` because it is borrowed\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- borrow of `u.b` occurs here\n-LL |             u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n+LL |             u.b = 1;\n    |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n LL |             drop(rma);\n    |                  --- borrow later used here"}, {"sha": "1cda7e499298a419b24f7bef485cbce95570a570", "filename": "src/test/ui/borrowck/borrowck-union-borrow.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `u.a` as mutable because it is also borrowed as immu\n    |\n LL |             let ra = &u.a;\n    |                       --- immutable borrow occurs here\n-LL |             let rma = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n+LL |             let rma = &mut u.a;\n    |                            ^^^ mutable borrow occurs here\n LL |             drop(ra);\n LL |         }\n@@ -14,15 +14,15 @@ error[E0506]: cannot assign to `u.a` because it is borrowed\n    |\n LL |             let ra = &u.a;\n    |                       --- borrow of `u.a` occurs here\n-LL |             u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n+LL |             u.a = 1;\n    |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n \n error[E0502]: cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n   --> $DIR/borrowck-union-borrow.rs:46:28\n    |\n LL |             let ra = &u.a;\n    |                       --- immutable borrow occurs here (via `u.a`)\n-LL |             let rmb = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n+LL |             let rmb = &mut u.b;\n    |                            ^^^ mutable borrow of `u.b` -- which overlaps with `u.a` -- occurs here\n LL |             drop(ra);\n LL |         }\n@@ -33,15 +33,15 @@ error[E0506]: cannot assign to `u.b` because it is borrowed\n    |\n LL |             let ra = &u.a;\n    |                       --- borrow of `u.b` occurs here\n-LL |             u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n+LL |             u.b = 1;\n    |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n \n error[E0502]: cannot borrow `u.a` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-union-borrow.rs:57:23\n    |\n LL |             let rma = &mut u.a;\n    |                            --- mutable borrow occurs here\n-LL |             let ra = &u.a; //~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n+LL |             let ra = &u.a;\n    |                       ^^^ immutable borrow occurs here\n LL |             drop(rma);\n LL |         }\n@@ -52,15 +52,15 @@ error[E0503]: cannot use `u.a` because it was mutably borrowed\n    |\n LL |             let ra = &mut u.a;\n    |                           --- borrow of `u.a` occurs here\n-LL |             let a = u.a; //~ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |             let a = u.a;\n    |                 ^ use of borrowed `u.a`\n \n error[E0499]: cannot borrow `u.a` as mutable more than once at a time\n   --> $DIR/borrowck-union-borrow.rs:67:29\n    |\n LL |             let rma = &mut u.a;\n    |                            --- first mutable borrow occurs here\n-LL |             let rma2 = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable more than once at a time\n+LL |             let rma2 = &mut u.a;\n    |                             ^^^ second mutable borrow occurs here\n LL |             drop(rma);\n LL |         }\n@@ -71,15 +71,15 @@ error[E0506]: cannot assign to `u.a` because it is borrowed\n    |\n LL |             let rma = &mut u.a;\n    |                            --- borrow of `u.a` occurs here\n-LL |             u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n+LL |             u.a = 1;\n    |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n \n error[E0502]: cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n   --> $DIR/borrowck-union-borrow.rs:78:23\n    |\n LL |             let rma = &mut u.a;\n    |                            --- mutable borrow occurs here (via `u.a`)\n-LL |             let rb = &u.b; //~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n+LL |             let rb = &u.b;\n    |                       ^^^ immutable borrow of `u.b` -- which overlaps with `u.a` -- occurs here\n LL |             drop(rma);\n LL |         }\n@@ -90,15 +90,15 @@ error[E0503]: cannot use `u.b` because it was mutably borrowed\n    |\n LL |             let ra = &mut u.a;\n    |                           --- borrow of `u.a` occurs here\n-LL |             let b = u.b; //~ ERROR cannot use `u.b` because it was mutably borrowed\n+LL |             let b = u.b;\n    |                 ^ use of borrowed `u.a`\n \n error[E0499]: cannot borrow `u` (via `u.b`) as mutable more than once at a time\n   --> $DIR/borrowck-union-borrow.rs:89:29\n    |\n LL |             let rma = &mut u.a;\n    |                            --- first mutable borrow occurs here (via `u.a`)\n-LL |             let rmb2 = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n+LL |             let rmb2 = &mut u.b;\n    |                             ^^^ second mutable borrow occurs here (via `u.b`)\n LL |             drop(rma);\n LL |         }\n@@ -109,7 +109,7 @@ error[E0506]: cannot assign to `u.b` because it is borrowed\n    |\n LL |             let rma = &mut u.a;\n    |                            --- borrow of `u.b` occurs here\n-LL |             u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n+LL |             u.b = 1;\n    |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n \n error: aborting due to 12 previous errors"}, {"sha": "0b1714fd75dc00852de19e7cd95bee965bab181a", "filename": "src/test/ui/borrowck/borrowck-union-move-assign.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL |             let mut u = U { a: A };\n    |                 ----- move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |             let a = u.a;\n    |                     --- value moved here\n-LL |             let a = u.a; //~ ERROR use of moved value: `u.a`\n+LL |             let a = u.a;\n    |                     ^^^ value used here after move\n \n error: aborting due to previous error"}, {"sha": "04e67fcb92971799969394d255988c769eb9e511", "filename": "src/test/ui/borrowck/borrowck-union-move-assign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `u.a`\n    |\n LL |             let a = u.a;\n    |                 - value moved here\n-LL |             let a = u.a; //~ ERROR use of moved value: `u.a`\n+LL |             let a = u.a;\n    |                 ^ value used here after move\n    |\n    = note: move occurs because `u.a` has type `A`, which does not implement the `Copy` trait"}, {"sha": "abbb0142a9c30b0a5d3680421e9a602743909455", "filename": "src/test/ui/borrowck/borrowck-union-move.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -5,7 +5,7 @@ LL |             let mut u = Unn { n1: NonCopy };\n    |                 ----- move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n LL |             let a = u.n1;\n    |                     ---- value moved here\n-LL |             let a = u.n1; //~ ERROR use of moved value: `u.n1`\n+LL |             let a = u.n1;\n    |                     ^^^^ value used here after move\n \n error[E0382]: use of moved value: `u`\n@@ -15,7 +15,7 @@ LL |             let mut u = Unn { n1: NonCopy };\n    |                 ----- move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n LL |             let a = u.n1;\n    |                     ---- value moved here\n-LL |             let a = u; //~ ERROR use of partially moved value: `u`\n+LL |             let a = u;\n    |                     ^ value used here after move\n \n error[E0382]: use of moved value: `u`\n@@ -25,7 +25,7 @@ LL |             let mut u = Unn { n1: NonCopy };\n    |                 ----- move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n LL |             let a = u.n1;\n    |                     ---- value moved here\n-LL |             let a = u.n2; //~ ERROR use of moved value: `u.n2`\n+LL |             let a = u.n2;\n    |                     ^^^^ value used here after move\n \n error[E0382]: use of moved value: `u`\n@@ -35,7 +35,7 @@ LL |             let mut u = Ucn { c: Copy };\n    |                 ----- move occurs because `u` has type `Ucn`, which does not implement the `Copy` trait\n LL |             let a = u.n;\n    |                     --- value moved here\n-LL |             let a = u.n; //~ ERROR use of moved value: `u.n`\n+LL |             let a = u.n;\n    |                     ^^^ value used here after move\n \n error[E0382]: use of moved value: `u`\n@@ -45,7 +45,7 @@ LL |             let mut u = Ucn { c: Copy };\n    |                 ----- move occurs because `u` has type `Ucn`, which does not implement the `Copy` trait\n LL |             let a = u.n;\n    |                     --- value moved here\n-LL |             let a = u.c; //~ ERROR use of moved value: `u.c`\n+LL |             let a = u.c;\n    |                     ^^^ value used here after move\n \n error[E0382]: use of moved value: `u`\n@@ -55,7 +55,7 @@ LL |             let mut u = Ucn { c: Copy };\n    |                 ----- move occurs because `u` has type `Ucn`, which does not implement the `Copy` trait\n LL |             let a = u.n;\n    |                     --- value moved here\n-LL |             let a = u; //~ ERROR use of partially moved value: `u`\n+LL |             let a = u;\n    |                     ^ value used here after move\n \n error: aborting due to 6 previous errors"}, {"sha": "4ce372aedc3622e637cf8f351b9ab4fcfae21f65", "filename": "src/test/ui/borrowck/borrowck-union-move.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `u.n1`\n    |\n LL |             let a = u.n1;\n    |                 - value moved here\n-LL |             let a = u.n1; //~ ERROR use of moved value: `u.n1`\n+LL |             let a = u.n1;\n    |                 ^ value used here after move\n    |\n    = note: move occurs because `u.n1` has type `NonCopy`, which does not implement the `Copy` trait\n@@ -13,7 +13,7 @@ error[E0382]: use of partially moved value: `u`\n    |\n LL |             let a = u.n1;\n    |                 - value moved here\n-LL |             let a = u; //~ ERROR use of partially moved value: `u`\n+LL |             let a = u;\n    |                 ^ value used here after move\n    |\n    = note: move occurs because `u.n2` has type `[type error]`, which does not implement the `Copy` trait\n@@ -23,7 +23,7 @@ error[E0382]: use of moved value: `u.n2`\n    |\n LL |             let a = u.n1;\n    |                 - value moved here\n-LL |             let a = u.n2; //~ ERROR use of moved value: `u.n2`\n+LL |             let a = u.n2;\n    |                 ^ value used here after move\n    |\n    = note: move occurs because `u.n2` has type `[type error]`, which does not implement the `Copy` trait\n@@ -33,7 +33,7 @@ error[E0382]: use of moved value: `u.n`\n    |\n LL |             let a = u.n;\n    |                 - value moved here\n-LL |             let a = u.n; //~ ERROR use of moved value: `u.n`\n+LL |             let a = u.n;\n    |                 ^ value used here after move\n    |\n    = note: move occurs because `u.n` has type `NonCopy`, which does not implement the `Copy` trait\n@@ -43,7 +43,7 @@ error[E0382]: use of moved value: `u.c`\n    |\n LL |             let a = u.n;\n    |                 - value moved here\n-LL |             let a = u.c; //~ ERROR use of moved value: `u.c`\n+LL |             let a = u.c;\n    |                 ^ value used here after move\n    |\n    = note: move occurs because `u.c` has type `[type error]`, which does not implement the `Copy` trait\n@@ -53,7 +53,7 @@ error[E0382]: use of partially moved value: `u`\n    |\n LL |             let a = u.n;\n    |                 - value moved here\n-LL |             let a = u; //~ ERROR use of partially moved value: `u`\n+LL |             let a = u;\n    |                 ^ value used here after move\n    |\n    = note: move occurs because `u.c` has type `[type error]`, which does not implement the `Copy` trait"}, {"sha": "6a1401ff32bbc283acde87cd330c6e340d2d64d9", "filename": "src/test/ui/borrowck/borrowck-union-uninitialized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,13 +1,13 @@\n error[E0381]: use of possibly uninitialized variable: `s.a`\n   --> $DIR/borrowck-union-uninitialized.rs:15:13\n    |\n-LL |         let sa = s.a; //~ ERROR use of possibly uninitialized variable: `s.a`\n+LL |         let sa = s.a;\n    |             ^^ use of possibly uninitialized `s.a`\n \n error[E0381]: use of possibly uninitialized variable: `u.a`\n   --> $DIR/borrowck-union-uninitialized.rs:16:13\n    |\n-LL |         let ua = u.a; //~ ERROR use of possibly uninitialized variable: `u.a`\n+LL |         let ua = u.a;\n    |             ^^ use of possibly uninitialized `u.a`\n \n error: aborting due to 2 previous errors"}, {"sha": "923edc8edae7d013688efd985224cdf280942df4", "filename": "src/test/ui/borrowck/borrowck-uniq-via-lend.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mut\n    |\n LL |     let w = &mut v;\n    |             ------ mutable borrow occurs here\n-LL |     borrow(&*v); //~ ERROR cannot borrow `*v`\n+LL |     borrow(&*v);\n    |            ^^^ immutable borrow occurs here\n LL |     w.use_mut();\n    |     - mutable borrow later used here\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mut\n    |\n LL |     x = &mut v;\n    |         ------ mutable borrow occurs here\n-LL |     borrow(&*v); //~ ERROR cannot borrow `*v`\n+LL |     borrow(&*v);\n    |            ^^^ immutable borrow occurs here\n LL |     x.use_mut();\n    |     - mutable borrow later used here"}, {"sha": "00fd77ed718af5a27d50b06995e2cfa2505c7569", "filename": "src/test/ui/borrowck/borrowck-uniq-via-lend.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mu\n    |\n LL |     let w = &mut v;\n    |                  - mutable borrow occurs here\n-LL |     borrow(&*v); //~ ERROR cannot borrow `*v`\n+LL |     borrow(&*v);\n    |             ^^ immutable borrow occurs here\n LL |     w.use_mut();\n LL | }\n@@ -14,7 +14,7 @@ error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mu\n    |\n LL |     x = &mut v;\n    |              - mutable borrow occurs here\n-LL |     borrow(&*v); //~ ERROR cannot borrow `*v`\n+LL |     borrow(&*v);\n    |             ^^ immutable borrow occurs here\n LL |     x.use_mut();\n LL | }"}, {"sha": "91d69c51e8180d6f931b44478974ee286397657e", "filename": "src/test/ui/borrowck/borrowck-use-mut-borrow.nll.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n    |\n LL |     let p = &mut x;\n    |             ------ borrow of `x` occurs here\n-LL |     drop(x); //~ ERROR cannot use `x` because it was mutably borrowed\n+LL |     drop(x);\n    |          ^ use of borrowed `x`\n LL |     *p = 2;\n    |     ------ borrow later used here\n@@ -13,7 +13,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n    |\n LL |     let p = &mut x.a;\n    |             -------- borrow of `x.a` occurs here\n-LL |     drop(x); //~ ERROR cannot use `x` because it was mutably borrowed\n+LL |     drop(x);\n    |          ^ use of borrowed `x.a`\n LL |     *p = 3;\n    |     ------ borrow later used here\n@@ -23,7 +23,7 @@ error[E0503]: cannot use `x.a` because it was mutably borrowed\n    |\n LL |     let p = &mut x;\n    |             ------ borrow of `x` occurs here\n-LL |     drop(x.a); //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     drop(x.a);\n    |          ^^^ use of borrowed `x`\n LL |     p.a = 3;\n    |     ------- borrow later used here\n@@ -33,7 +33,7 @@ error[E0503]: cannot use `x.a` because it was mutably borrowed\n    |\n LL |     let p = &mut x.a;\n    |             -------- borrow of `x.a` occurs here\n-LL |     drop(x.a); //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     drop(x.a);\n    |          ^^^ use of borrowed `x.a`\n LL |     *p = 3;\n    |     ------ borrow later used here\n@@ -43,7 +43,7 @@ error[E0503]: cannot use `x.a` because it was mutably borrowed\n    |\n LL |     let p = &mut x;\n    |             ------ borrow of `x` occurs here\n-LL |     let y = A { b: 3, .. x }; //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     let y = A { b: 3, .. x };\n    |             ^^^^^^^^^^^^^^^^ use of borrowed `x`\n LL |     drop(y);\n LL |     p.a = 4;\n@@ -54,7 +54,7 @@ error[E0503]: cannot use `x.a` because it was mutably borrowed\n    |\n LL |     let p = &mut x.a;\n    |             -------- borrow of `x.a` occurs here\n-LL |     let y = A { b: 3, .. x }; //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     let y = A { b: 3, .. x };\n    |             ^^^^^^^^^^^^^^^^ use of borrowed `x.a`\n LL |     drop(y);\n LL |     *p = 4;\n@@ -65,7 +65,7 @@ error[E0503]: cannot use `*x` because it was mutably borrowed\n    |\n LL |     let p = &mut x;\n    |             ------ borrow of `x` occurs here\n-LL |     drop(*x); //~ ERROR cannot use `*x` because it was mutably borrowed\n+LL |     drop(*x);\n    |          ^^ use of borrowed `x`\n LL |     **p = 2;\n    |     ------- borrow later used here\n@@ -75,7 +75,7 @@ error[E0503]: cannot use `*x.b` because it was mutably borrowed\n    |\n LL |     let p = &mut x;\n    |             ------ borrow of `x` occurs here\n-LL |     drop(*x.b); //~ ERROR cannot use `*x.b` because it was mutably borrowed\n+LL |     drop(*x.b);\n    |          ^^^^ use of borrowed `x`\n LL |     p.a = 3;\n    |     ------- borrow later used here\n@@ -85,7 +85,7 @@ error[E0503]: cannot use `*x.b` because it was mutably borrowed\n    |\n LL |     let p = &mut x.b;\n    |             -------- borrow of `x.b` occurs here\n-LL |     drop(*x.b); //~ ERROR cannot use `*x.b` because it was mutably borrowed\n+LL |     drop(*x.b);\n    |          ^^^^ use of borrowed `x.b`\n LL |     **p = 3;\n    |     ------- borrow later used here"}, {"sha": "5c1d726917641bb2d281345c4056155b5044a0f1", "filename": "src/test/ui/borrowck/borrowck-use-mut-borrow.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,71 +3,71 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n    |\n LL |     let p = &mut x;\n    |                  - borrow of `x` occurs here\n-LL |     drop(x); //~ ERROR cannot use `x` because it was mutably borrowed\n+LL |     drop(x);\n    |          ^ use of borrowed `x`\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:18:10\n    |\n LL |     let p = &mut x.a;\n    |                  --- borrow of `x.a` occurs here\n-LL |     drop(x); //~ ERROR cannot use `x` because it was mutably borrowed\n+LL |     drop(x);\n    |          ^ use of borrowed `x.a`\n \n error[E0503]: cannot use `x.a` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:25:10\n    |\n LL |     let p = &mut x;\n    |                  - borrow of `x` occurs here\n-LL |     drop(x.a); //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     drop(x.a);\n    |          ^^^ use of borrowed `x`\n \n error[E0503]: cannot use `x.a` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:32:10\n    |\n LL |     let p = &mut x.a;\n    |                  --- borrow of `x.a` occurs here\n-LL |     drop(x.a); //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     drop(x.a);\n    |          ^^^ use of borrowed `x.a`\n \n error[E0503]: cannot use `x.a` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:39:26\n    |\n LL |     let p = &mut x;\n    |                  - borrow of `x` occurs here\n-LL |     let y = A { b: 3, .. x }; //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     let y = A { b: 3, .. x };\n    |                          ^ use of borrowed `x`\n \n error[E0503]: cannot use `x.a` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:47:26\n    |\n LL |     let p = &mut x.a;\n    |                  --- borrow of `x.a` occurs here\n-LL |     let y = A { b: 3, .. x }; //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     let y = A { b: 3, .. x };\n    |                          ^ use of borrowed `x.a`\n \n error[E0503]: cannot use `*x` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:55:10\n    |\n LL |     let p = &mut x;\n    |                  - borrow of `x` occurs here\n-LL |     drop(*x); //~ ERROR cannot use `*x` because it was mutably borrowed\n+LL |     drop(*x);\n    |          ^^ use of borrowed `x`\n \n error[E0503]: cannot use `*x.b` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:62:10\n    |\n LL |     let p = &mut x;\n    |                  - borrow of `x` occurs here\n-LL |     drop(*x.b); //~ ERROR cannot use `*x.b` because it was mutably borrowed\n+LL |     drop(*x.b);\n    |          ^^^^ use of borrowed `x`\n \n error[E0503]: cannot use `*x.b` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:69:10\n    |\n LL |     let p = &mut x.b;\n    |                  --- borrow of `x.b` occurs here\n-LL |     drop(*x.b); //~ ERROR cannot use `*x.b` because it was mutably borrowed\n+LL |     drop(*x.b);\n    |          ^^^^ use of borrowed `x.b`\n \n error: aborting due to 9 previous errors"}, {"sha": "da6d9293b408a6c714c99e66931993b073603000", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-element-loan.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing local variable `vec`\n   --> $DIR/borrowck-vec-pattern-element-loan.rs:10:5\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                         ---- `vec` is borrowed here\n ...\n LL |     tail\n@@ -10,7 +10,7 @@ LL |     tail\n error[E0515]: cannot return value referencing local variable `vec`\n   --> $DIR/borrowck-vec-pattern-element-loan.rs:20:5\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                         ---- `vec` is borrowed here\n ...\n LL |     init\n@@ -19,7 +19,7 @@ LL |     init\n error[E0515]: cannot return value referencing local variable `vec`\n   --> $DIR/borrowck-vec-pattern-element-loan.rs:30:5\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                         ---- `vec` is borrowed here\n ...\n LL |     slice"}, {"sha": "b0eaee790743efba503ce81d79f9c0c6750c8fe7", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-element-loan.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `vec` does not live long enough\n   --> $DIR/borrowck-vec-pattern-element-loan.rs:5:26\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                          ^^^ borrowed value does not live long enough\n ...\n LL | }\n@@ -16,7 +16,7 @@ LL | fn a<'a>() -> &'a [isize] {\n error[E0597]: `vec` does not live long enough\n   --> $DIR/borrowck-vec-pattern-element-loan.rs:15:26\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                          ^^^ borrowed value does not live long enough\n ...\n LL | }\n@@ -31,7 +31,7 @@ LL | fn b<'a>() -> &'a [isize] {\n error[E0597]: `vec` does not live long enough\n   --> $DIR/borrowck-vec-pattern-element-loan.rs:25:26\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                          ^^^ borrowed value does not live long enough\n ...\n LL | }"}, {"sha": "251f44592905dddd5e41a1bf735f4fb86954dcc3", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-loan-from-mut.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `v` as mutable more than once at a time\n LL |     let vb: &mut [isize] = &mut v;\n    |                            ------ first mutable borrow occurs here\n ...\n-LL |             v.push(tail[0] + tail[1]); //~ ERROR cannot borrow\n+LL |             v.push(tail[0] + tail[1]);\n    |             ^      ------- first borrow later used here\n    |             |\n    |             second mutable borrow occurs here"}, {"sha": "1ce6a3bddce0950dc54ee0256fa847adc1104d70", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-loan-from-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `v` as mutable more than once at a time\n LL |     let vb: &mut [isize] = &mut v;\n    |                                 - first mutable borrow occurs here\n ...\n-LL |             v.push(tail[0] + tail[1]); //~ ERROR cannot borrow\n+LL |             v.push(tail[0] + tail[1]);\n    |             ^ second mutable borrow occurs here\n ...\n LL | }"}, {"sha": "aafcb3160d176c0ba6411f6100f6f16f17d574ee", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.nll.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,10 +3,10 @@ error[E0506]: cannot assign to `vec[_]` because it is borrowed\n    |\n LL |         [box ref _a, _, _] => {\n    |              ------ borrow of `vec[_]` occurs here\n-LL |         //~^ borrow of `vec[..]` occurs here\n-LL |             vec[0] = box 4; //~ ERROR cannot assign\n+LL |\n+LL |             vec[0] = box 4;\n    |             ^^^^^^ assignment to borrowed `vec[_]` occurs here\n-LL |             //~^ assignment to borrowed `vec[..]` occurs here\n+LL |\n LL |             _a.use_ref();\n    |             -- borrow later used here\n \n@@ -15,10 +15,10 @@ error[E0506]: cannot assign to `vec[_]` because it is borrowed\n    |\n LL |         &mut [ref _b..] => {\n    |               ------ borrow of `vec[_]` occurs here\n-LL |         //~^ borrow of `vec[..]` occurs here\n-LL |             vec[0] = box 4; //~ ERROR cannot assign\n+LL |\n+LL |             vec[0] = box 4;\n    |             ^^^^^^ assignment to borrowed `vec[_]` occurs here\n-LL |             //~^ assignment to borrowed `vec[..]` occurs here\n+LL |\n LL |             _b.use_ref();\n    |             -- borrow later used here\n \n@@ -27,27 +27,27 @@ error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy sli\n    |\n LL |     match vec {\n    |           ^^^ cannot move out of here\n-LL |         &mut [_a, //~ ERROR cannot move out\n+LL |         &mut [_a,\n    |               -- data moved here\n    |\n note: move occurs because `_a` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n   --> $DIR/borrowck-vec-pattern-nesting.rs:34:15\n    |\n-LL |         &mut [_a, //~ ERROR cannot move out\n+LL |         &mut [_a,\n    |               ^^\n help: consider removing the `&mut`\n    |\n-LL |         [_a, //~ ERROR cannot move out\n-LL |             //~| cannot move out\n-LL |             //~| to prevent move\n+LL |         [_a,\n+LL |\n+LL |\n LL |             ..\n LL |         ] => {\n    |\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:47:13\n    |\n-LL |     let a = vec[0]; //~ ERROR cannot move out\n+LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n@@ -69,15 +69,15 @@ LL |          _b] => {}\n    |          ^^\n help: consider removing the `&mut`\n    |\n-LL |         [ //~ ERROR cannot move out\n-LL |         //~^ cannot move out\n+LL |         [\n+LL |\n LL |          _b] => {}\n    |\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:60:13\n    |\n-LL |     let a = vec[0]; //~ ERROR cannot move out\n+LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n@@ -88,7 +88,7 @@ error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy sli\n    |\n LL |     match vec {\n    |           ^^^ cannot move out of here\n-LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n+LL |         &mut [_a, _b, _c] => {}\n    |         -----------------\n    |         |     |   |   |\n    |         |     |   |   ...and here\n@@ -99,13 +99,13 @@ LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/borrowck-vec-pattern-nesting.rs:68:15\n    |\n-LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n+LL |         &mut [_a, _b, _c] => {}\n    |               ^^  ^^  ^^\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:72:13\n    |\n-LL |     let a = vec[0]; //~ ERROR cannot move out\n+LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here"}, {"sha": "0e3f514c662abff9735b00ba76f109808818d5fd", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,36 +3,36 @@ error[E0506]: cannot assign to `vec[..]` because it is borrowed\n    |\n LL |         [box ref _a, _, _] => {\n    |              ------ borrow of `vec[..]` occurs here\n-LL |         //~^ borrow of `vec[..]` occurs here\n-LL |             vec[0] = box 4; //~ ERROR cannot assign\n+LL |\n+LL |             vec[0] = box 4;\n    |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n \n error[E0506]: cannot assign to `vec[..]` because it is borrowed\n   --> $DIR/borrowck-vec-pattern-nesting.rs:23:13\n    |\n LL |         &mut [ref _b..] => {\n    |               ------ borrow of `vec[..]` occurs here\n-LL |         //~^ borrow of `vec[..]` occurs here\n-LL |             vec[0] = box 4; //~ ERROR cannot assign\n+LL |\n+LL |             vec[0] = box 4;\n    |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:34:14\n    |\n-LL |           &mut [_a, //~ ERROR cannot move out\n+LL |           &mut [_a,\n    |                ^-- hint: to prevent move, use `ref _a` or `ref mut _a`\n    |  ______________|\n    | |\n-LL | |             //~| cannot move out\n-LL | |             //~| to prevent move\n+LL | |\n+LL | |\n LL | |             ..\n LL | |         ] => {\n    | |_________^ cannot move out of here\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:47:13\n    |\n-LL |     let a = vec[0]; //~ ERROR cannot move out\n+LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n@@ -41,9 +41,9 @@ LL |     let a = vec[0]; //~ ERROR cannot move out\n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:55:14\n    |\n-LL |           &mut [ //~ ERROR cannot move out\n+LL |           &mut [\n    |  ______________^\n-LL | |         //~^ cannot move out\n+LL | |\n LL | |          _b] => {}\n    | |__________--^ cannot move out of here\n    |            |\n@@ -52,7 +52,7 @@ LL | |          _b] => {}\n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:60:13\n    |\n-LL |     let a = vec[0]; //~ ERROR cannot move out\n+LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n@@ -61,7 +61,7 @@ LL |     let a = vec[0]; //~ ERROR cannot move out\n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:68:14\n    |\n-LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n+LL |         &mut [_a, _b, _c] => {}\n    |              ^--^^--^^--^\n    |              ||   |   |\n    |              ||   |   ...and here (use `ref _c` or `ref mut _c`)\n@@ -72,7 +72,7 @@ LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:72:13\n    |\n-LL |     let a = vec[0]; //~ ERROR cannot move out\n+LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here"}, {"sha": "c1290a6f63f33018dd4e3dc95f965f29c4903e3e", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-tail-element-loan.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing local variable `vec`\n   --> $DIR/borrowck-vec-pattern-tail-element-loan.rs:10:5\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR `vec` does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                         ---- `vec` is borrowed here\n ...\n LL |     tail"}, {"sha": "0a5f773159f475c7682345dde11f846ba2a3db23", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-tail-element-loan.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `vec` does not live long enough\n   --> $DIR/borrowck-vec-pattern-tail-element-loan.rs:5:26\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR `vec` does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                          ^^^ borrowed value does not live long enough\n ...\n LL | }"}, {"sha": "0fe3cdc96a874222c0b8580c86591a3015e010b7", "filename": "src/test/ui/borrowck/borrowck-while-break.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `v`\n   --> $DIR/borrowck-while-break.rs:7:20\n    |\n-LL |     println!(\"{}\", v); //~ ERROR use of possibly uninitialized variable: `v`\n+LL |     println!(\"{}\", v);\n    |                    ^ use of possibly uninitialized `v`\n \n error: aborting due to previous error"}, {"sha": "55969b8fb1ffa49caffcf02c0cef806e7f8c20f9", "filename": "src/test/ui/borrowck/borrowck-while-break.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `v`\n   --> $DIR/borrowck-while-break.rs:7:20\n    |\n-LL |     println!(\"{}\", v); //~ ERROR use of possibly uninitialized variable: `v`\n+LL |     println!(\"{}\", v);\n    |                    ^ use of possibly uninitialized `v`\n \n error: aborting due to previous error"}, {"sha": "06deae345ab603d2cbbda03bbcb3097a2cf16d06", "filename": "src/test/ui/borrowck/borrowck-while-cond.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-while-cond.rs:3:11\n    |\n-LL |     while x { } //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     while x { }\n    |           ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "60622d648dd23c059ff58815947b9fd490ef6eac", "filename": "src/test/ui/borrowck/borrowck-while.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-while.rs:4:12\n    |\n-LL |     return x; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     return x;\n    |            ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "4b29beb02b35e0e22d77d34661dfbe52f536b688", "filename": "src/test/ui/borrowck/index-mut-help-with-impl.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/index-mut-help-with-impl.rs:9:5\n    |\n-LL |     Index::index(&v, 1..2).make_ascii_uppercase(); //~ ERROR\n+LL |     Index::index(&v, 1..2).make_ascii_uppercase();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content"}, {"sha": "6e6efc67061012d5461bad662f290757c6cf66b4", "filename": "src/test/ui/borrowck/index-mut-help-with-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/index-mut-help-with-impl.rs:9:5\n    |\n-LL |     Index::index(&v, 1..2).make_ascii_uppercase(); //~ ERROR\n+LL |     Index::index(&v, 1..2).make_ascii_uppercase();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "92b94209c4e43e9a8dc4a9413dc030e8bfa10df1", "filename": "src/test/ui/borrowck/index-mut-help.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,21 +1,21 @@\n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/index-mut-help.rs:11:5\n    |\n-LL |     map[\"peter\"].clear();           //~ ERROR\n+LL |     map[\"peter\"].clear();\n    |     ^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/index-mut-help.rs:12:5\n    |\n-LL |     map[\"peter\"] = \"0\".to_string(); //~ ERROR\n+LL |     map[\"peter\"] = \"0\".to_string();\n    |     ^^^^^^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/index-mut-help.rs:13:13\n    |\n-LL |     let _ = &mut map[\"peter\"];      //~ ERROR\n+LL |     let _ = &mut map[\"peter\"];\n    |             ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`"}, {"sha": "434dd11eea2e9d039d3c20bacea208e60251a0a6", "filename": "src/test/ui/borrowck/index-mut-help.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,23 +1,23 @@\n error[E0596]: cannot borrow immutable indexed content as mutable\n   --> $DIR/index-mut-help.rs:11:5\n    |\n-LL |     map[\"peter\"].clear();           //~ ERROR\n+LL |     map[\"peter\"].clear();\n    |     ^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`\n \n error[E0594]: cannot assign to immutable indexed content\n   --> $DIR/index-mut-help.rs:12:5\n    |\n-LL |     map[\"peter\"] = \"0\".to_string(); //~ ERROR\n+LL |     map[\"peter\"] = \"0\".to_string();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`\n \n error[E0596]: cannot borrow immutable indexed content as mutable\n   --> $DIR/index-mut-help.rs:13:18\n    |\n-LL |     let _ = &mut map[\"peter\"];      //~ ERROR\n+LL |     let _ = &mut map[\"peter\"];\n    |                  ^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`"}, {"sha": "eb71ab0b7ec06ba2ac3c57030c4b42902e301cc3", "filename": "src/test/ui/borrowck/issue-47215-ice-from-drop-elab.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of static item\n   --> $DIR/issue-47215-ice-from-drop-elab.rs:17:21\n    |\n-LL |         let mut x = X; //~ ERROR cannot move out of thread-local static item [E0507]\n+LL |         let mut x = X;\n    |                     ^\n    |                     |\n    |                     cannot move out of static item"}, {"sha": "b09028e6c7c4ec96431497cd3f074cedc0b391a8", "filename": "src/test/ui/borrowck/issue-47215-ice-from-drop-elab.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of thread-local static item\n   --> $DIR/issue-47215-ice-from-drop-elab.rs:17:21\n    |\n-LL |         let mut x = X; //~ ERROR cannot move out of thread-local static item [E0507]\n+LL |         let mut x = X;\n    |                     ^\n    |                     |\n    |                     cannot move out of thread-local static item"}, {"sha": "f8a9608ad373a5a13e764659bd88ea12567481e1", "filename": "src/test/ui/borrowck/issue-51117.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `*bar` as mutable more than once at a time\n    |\n LL |         Some(baz) => {\n    |              --- first mutable borrow occurs here\n-LL |             bar.take(); //~ ERROR cannot borrow\n+LL |             bar.take();\n    |             ^^^ second mutable borrow occurs here\n LL |             drop(baz);\n    |                  --- first borrow later used here"}, {"sha": "8f2a78672c6ef8f1718393731911d09e1721f6b6", "filename": "src/test/ui/borrowck/issue-51117.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `*bar` as mutable more than once at a time\n    |\n LL |         Some(baz) => {\n    |              --- first mutable borrow occurs here\n-LL |             bar.take(); //~ ERROR cannot borrow\n+LL |             bar.take();\n    |             ^^^ second mutable borrow occurs here\n ...\n LL |     }"}, {"sha": "e3216f5d33f986d7f7c268cacef4306beecce7fc", "filename": "src/test/ui/borrowck/issue-52713-bug.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0506]: cannot assign to `x` because it is borrowed\n LL |     let y = &x;\n    |             -- borrow of `x` occurs here\n ...\n-LL |     x += 1; //~ ERROR\n+LL |     x += 1;\n    |     ^^^^^^ assignment to borrowed `x` occurs here\n LL |     println!(\"{}\", y);\n    |                    - borrow later used here"}, {"sha": "6a12016b2a5e3b62ea17f37ee673f340e1ae5468", "filename": "src/test/ui/borrowck/issue-54597-reject-move-out-of-borrow-via-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-54597-reject-move-out-of-borrow-via-pat.rs:16:13\n    |\n-LL |             *array //~ ERROR cannot move out of borrowed content\n+LL |             *array\n    |             ^^^^^^\n    |             |\n    |             cannot move out of borrowed content"}, {"sha": "32b3ef72d8bda611f94bed13e278400efc920a91", "filename": "src/test/ui/borrowck/issue-7573.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error: borrowed data cannot be stored outside of its closure\n    |\n LL |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n    |                               - cannot infer an appropriate lifetime...\n-LL |         //~^ NOTE cannot infer an appropriate lifetime\n+LL |\n LL |     let push_id = |installed_id: &CrateId| {\n    |         -------   ------------------------ borrowed data cannot outlive this closure\n    |         |"}, {"sha": "eda2f518f9246affc691ef46367ef36413c1e49a", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n LL | impl<'a, T : 'a> FuncWrapper<'a, T> {\n    |      -- lifetime `'a` defined here\n ...\n-LL |             (self.func)(arg) //~ ERROR cannot borrow\n+LL |             (self.func)(arg)\n    |             ------------^^^-\n    |             |           |\n    |             |           mutable borrow starts here in previous iteration of loop\n@@ -16,7 +16,7 @@ error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n LL | impl<'a, T : 'a> FuncWrapper<'a, T> {\n    |      -- lifetime `'a` defined here\n ...\n-LL |             (self.func)(arg) //~ ERROR cannot borrow\n+LL |             (self.func)(arg)\n    |             ------------^^^-\n    |             |           |\n    |             |           mutable borrow starts here in previous iteration of loop\n@@ -28,7 +28,7 @@ error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n LL | impl<'a, T : 'a> FuncWrapper<'a, T> {\n    |      -- lifetime `'a` defined here\n ...\n-LL |             (self.func)(arg) //~ ERROR cannot borrow\n+LL |             (self.func)(arg)\n    |             ------------^^^-\n    |             |           |\n    |             |           mutable borrow starts here in previous iteration of loop"}, {"sha": "478d586d03e5dcb99b3e258620c8f7633917dbd6", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,7 +1,7 @@\n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:10:25\n    |\n-LL |             (self.func)(arg) //~ ERROR cannot borrow\n+LL |             (self.func)(arg)\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n LL |         }\n LL |     }\n@@ -10,7 +10,7 @@ LL |     }\n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:16:25\n    |\n-LL |             (self.func)(arg) //~ ERROR cannot borrow\n+LL |             (self.func)(arg)\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n LL |         }\n LL |     }\n@@ -19,7 +19,7 @@ LL |     }\n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:23:25\n    |\n-LL |             (self.func)(arg) //~ ERROR cannot borrow\n+LL |             (self.func)(arg)\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n LL |         }\n LL |     }"}, {"sha": "09dabbc89b425b33793ee79311326d14ee131821", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n    |\n LL | fn f(b: &mut i32) {\n    |      - help: consider changing this to be mutable: `mut b`\n-LL |     g(&mut b) //~ ERROR cannot borrow\n+LL |     g(&mut b)\n    |       ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "4653c353cad643fb6ec4471b8c44af7e1949d4a8", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,11 +1,11 @@\n error[E0596]: cannot borrow immutable argument `b` as mutable\n   --> $DIR/mut-borrow-of-mut-ref.rs:8:12\n    |\n-LL |     g(&mut b) //~ ERROR cannot borrow\n+LL |     g(&mut b)\n    |            ^ cannot borrow mutably\n help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n    |\n-LL |     g(b) //~ ERROR cannot borrow\n+LL |     g(b)\n    |       ^\n \n error: aborting due to previous error"}, {"sha": "4fcb693f1bf1df7bcf9b3865c3be2c1641b288a4", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `void` as mutable more than once at a time\n    |\n LL |     let first = &mut void;\n    |                 --------- first mutable borrow occurs here\n-LL |     let second = &mut void; //~ ERROR cannot borrow\n+LL |     let second = &mut void;\n    |                  ^^^^^^^^^ second mutable borrow occurs here\n LL |     first.use_mut();\n    |     ----- first borrow later used here\n@@ -13,7 +13,7 @@ error[E0499]: cannot borrow `inner_void` as mutable more than once at a time\n    |\n LL |         let inner_first = &mut inner_void;\n    |                           --------------- first mutable borrow occurs here\n-LL |         let inner_second = &mut inner_void; //~ ERROR cannot borrow\n+LL |         let inner_second = &mut inner_void;\n    |                            ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |         inner_second.use_mut();\n LL |         inner_first.use_mut();"}, {"sha": "45db962fbd01f831d2304562bb38853100ae33c7", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `void` as mutable more than once at a time\n    |\n LL |     let first = &mut void;\n    |                      ---- first mutable borrow occurs here\n-LL |     let second = &mut void; //~ ERROR cannot borrow\n+LL |     let second = &mut void;\n    |                       ^^^^ second mutable borrow occurs here\n ...\n LL | }\n@@ -14,7 +14,7 @@ error[E0499]: cannot borrow `inner_void` as mutable more than once at a time\n    |\n LL |         let inner_first = &mut inner_void;\n    |                                ---------- first mutable borrow occurs here\n-LL |         let inner_second = &mut inner_void; //~ ERROR cannot borrow\n+LL |         let inner_second = &mut inner_void;\n    |                                 ^^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     }"}, {"sha": "11bc78894432d70bc694c2b298bdac50e7c330a3", "filename": "src/test/ui/borrowck/mutability-errors.nll.stderr", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,16 +3,16 @@ error[E0594]: cannot assign to `*x` which is behind a `&` reference\n    |\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n-LL |     *x = (1,); //~ ERROR\n+LL |     *x = (1,);\n    |     ^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `x.0` which is behind a `&` reference\n   --> $DIR/mutability-errors.rs:10:5\n    |\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n-LL |     *x = (1,); //~ ERROR\n-LL |     x.0 = 1; //~ ERROR\n+LL |     *x = (1,);\n+LL |     x.0 = 1;\n    |     ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n@@ -21,7 +21,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n ...\n-LL |     &mut *x; //~ ERROR\n+LL |     &mut *x;\n    |     ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `x.0` as mutable, as it is behind a `&` reference\n@@ -30,48 +30,48 @@ error[E0596]: cannot borrow `x.0` as mutable, as it is behind a `&` reference\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n ...\n-LL |     &mut x.0; //~ ERROR\n+LL |     &mut x.0;\n    |     ^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/mutability-errors.rs:16:5\n    |\n-LL |     *f() = (1,); //~ ERROR\n+LL |     *f() = (1,);\n    |     ^^^^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/mutability-errors.rs:17:5\n    |\n-LL |     f().0 = 1; //~ ERROR\n+LL |     f().0 = 1;\n    |     ^^^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/mutability-errors.rs:18:5\n    |\n-LL |     &mut *f(); //~ ERROR\n+LL |     &mut *f();\n    |     ^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/mutability-errors.rs:19:5\n    |\n-LL |     &mut f().0; //~ ERROR\n+LL |     &mut f().0;\n    |     ^^^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to `*x` which is behind a `*const` pointer\n   --> $DIR/mutability-errors.rs:23:5\n    |\n LL | unsafe fn named_ptr(x: *const (i32,)) {\n    |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n-LL |     *x = (1,); //~ ERROR\n+LL |     *x = (1,);\n    |     ^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `x.0` which is behind a `*const` pointer\n   --> $DIR/mutability-errors.rs:24:5\n    |\n LL | unsafe fn named_ptr(x: *const (i32,)) {\n    |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n-LL |     *x = (1,); //~ ERROR\n-LL |     (*x).0 = 1; //~ ERROR\n+LL |     *x = (1,);\n+LL |     (*x).0 = 1;\n    |     ^^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be written\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `*const` pointer\n@@ -80,7 +80,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `*const` pointer\n LL | unsafe fn named_ptr(x: *const (i32,)) {\n    |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n ...\n-LL |     &mut *x; //~ ERROR\n+LL |     &mut *x;\n    |     ^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `x.0` as mutable, as it is behind a `*const` pointer\n@@ -89,174 +89,174 @@ error[E0596]: cannot borrow `x.0` as mutable, as it is behind a `*const` pointer\n LL | unsafe fn named_ptr(x: *const (i32,)) {\n    |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n ...\n-LL |     &mut (*x).0; //~ ERROR\n+LL |     &mut (*x).0;\n    |     ^^^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n \n error[E0594]: cannot assign to data in a `*const` pointer\n   --> $DIR/mutability-errors.rs:30:5\n    |\n-LL |     *f() = (1,); //~ ERROR\n+LL |     *f() = (1,);\n    |     ^^^^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to data in a `*const` pointer\n   --> $DIR/mutability-errors.rs:31:5\n    |\n-LL |     (*f()).0 = 1; //~ ERROR\n+LL |     (*f()).0 = 1;\n    |     ^^^^^^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow data in a `*const` pointer as mutable\n   --> $DIR/mutability-errors.rs:32:5\n    |\n-LL |     &mut *f(); //~ ERROR\n+LL |     &mut *f();\n    |     ^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `*const` pointer as mutable\n   --> $DIR/mutability-errors.rs:33:5\n    |\n-LL |     &mut (*f()).0; //~ ERROR\n+LL |     &mut (*f()).0;\n    |     ^^^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:40:9\n    |\n-LL |         x = (1,); //~ ERROR\n+LL |         x = (1,);\n    |         ^^^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0594]: cannot assign to `x.0`, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:41:9\n    |\n-LL |         x.0 = 1; //~ ERROR\n+LL |         x.0 = 1;\n    |         ^^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:42:9\n    |\n-LL |         &mut x; //~ ERROR\n+LL |         &mut x;\n    |         ^^^^^^ cannot borrow as mutable\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0596]: cannot borrow `x.0` as mutable, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:43:9\n    |\n-LL |         &mut x.0; //~ ERROR\n+LL |         &mut x.0;\n    |         ^^^^^^^^ cannot borrow as mutable\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:46:9\n    |\n-LL |         x = (1,); //~ ERROR\n+LL |         x = (1,);\n    |         ^^^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:45:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0594]: cannot assign to `x.0`, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:47:9\n    |\n-LL |         x.0 = 1; //~ ERROR\n+LL |         x.0 = 1;\n    |         ^^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:45:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:48:9\n    |\n-LL |         &mut x; //~ ERROR\n+LL |         &mut x;\n    |         ^^^^^^ cannot borrow as mutable\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:45:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0596]: cannot borrow `x.0` as mutable, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:49:9\n    |\n-LL |         &mut x.0; //~ ERROR\n+LL |         &mut x.0;\n    |         ^^^^^^^^ cannot borrow as mutable\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:45:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n@@ -265,24 +265,24 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n    |\n LL | fn imm_local(x: (i32,)) {\n    |              - help: consider changing this to be mutable: `mut x`\n-LL |     &mut x; //~ ERROR\n+LL |     &mut x;\n    |     ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n   --> $DIR/mutability-errors.rs:55:5\n    |\n LL | fn imm_local(x: (i32,)) {\n    |              - help: consider changing this to be mutable: `mut x`\n-LL |     &mut x; //~ ERROR\n-LL |     &mut x.0; //~ ERROR\n+LL |     &mut x;\n+LL |     &mut x.0;\n    |     ^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:60:9\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n-LL |     || { //~ ERROR\n+LL |     || {\n LL |         x = (1,);\n    |         ^^^^^^^^ cannot assign\n \n@@ -319,7 +319,7 @@ error[E0594]: cannot assign to `x`, as it is not declared as mutable\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n-LL |         x = (1,); //~ ERROR\n+LL |         x = (1,);\n    |         ^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n@@ -328,7 +328,7 @@ error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n-LL |         x.0 = 1; //~ ERROR\n+LL |         x.0 = 1;\n    |         ^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n@@ -337,7 +337,7 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n-LL |         &mut x; //~ ERROR\n+LL |         &mut x;\n    |         ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n@@ -346,31 +346,31 @@ error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n-LL |         &mut x.0; //~ ERROR\n+LL |         &mut x.0;\n    |         ^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable static item `X`\n   --> $DIR/mutability-errors.rs:76:5\n    |\n-LL |     X = (1,); //~ ERROR\n+LL |     X = (1,);\n    |     ^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `X.0`, as `X` is an immutable static item\n   --> $DIR/mutability-errors.rs:77:5\n    |\n-LL |     X.0 = 1; //~ ERROR\n+LL |     X.0 = 1;\n    |     ^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow immutable static item `X` as mutable\n   --> $DIR/mutability-errors.rs:78:5\n    |\n-LL |     &mut X; //~ ERROR\n+LL |     &mut X;\n    |     ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `X.0` as mutable, as `X` is an immutable static item\n   --> $DIR/mutability-errors.rs:79:5\n    |\n-LL |     &mut X.0; //~ ERROR\n+LL |     &mut X.0;\n    |     ^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 38 previous errors"}, {"sha": "cf4f37edde0b8e6297cabea7a4ff41b3d3250f18", "filename": "src/test/ui/borrowck/mutability-errors.stderr", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -3,16 +3,16 @@ error[E0594]: cannot assign to immutable borrowed content `*x`\n    |\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- use `&mut (i32,)` here to make mutable\n-LL |     *x = (1,); //~ ERROR\n+LL |     *x = (1,);\n    |     ^^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/mutability-errors.rs:10:5\n    |\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- use `&mut (i32,)` here to make mutable\n-LL |     *x = (1,); //~ ERROR\n-LL |     x.0 = 1; //~ ERROR\n+LL |     *x = (1,);\n+LL |     x.0 = 1;\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n@@ -21,7 +21,7 @@ error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- use `&mut (i32,)` here to make mutable\n ...\n-LL |     &mut *x; //~ ERROR\n+LL |     &mut *x;\n    |          ^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n@@ -30,157 +30,157 @@ error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- use `&mut (i32,)` here to make mutable\n ...\n-LL |     &mut x.0; //~ ERROR\n+LL |     &mut x.0;\n    |          ^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to immutable borrowed content\n   --> $DIR/mutability-errors.rs:16:5\n    |\n-LL |     *f() = (1,); //~ ERROR\n+LL |     *f() = (1,);\n    |     ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to field of immutable binding\n   --> $DIR/mutability-errors.rs:17:5\n    |\n-LL |     f().0 = 1; //~ ERROR\n+LL |     f().0 = 1;\n    |     ^^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/mutability-errors.rs:18:10\n    |\n-LL |     &mut *f(); //~ ERROR\n+LL |     &mut *f();\n    |          ^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow field of immutable binding as mutable\n   --> $DIR/mutability-errors.rs:19:10\n    |\n-LL |     &mut f().0; //~ ERROR\n+LL |     &mut f().0;\n    |          ^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to immutable dereference of raw pointer `*x`\n   --> $DIR/mutability-errors.rs:23:5\n    |\n-LL |     *x = (1,); //~ ERROR\n+LL |     *x = (1,);\n    |     ^^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/mutability-errors.rs:24:5\n    |\n-LL |     (*x).0 = 1; //~ ERROR\n+LL |     (*x).0 = 1;\n    |     ^^^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow immutable dereference of raw pointer `*x` as mutable\n   --> $DIR/mutability-errors.rs:25:10\n    |\n-LL |     &mut *x; //~ ERROR\n+LL |     &mut *x;\n    |          ^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n   --> $DIR/mutability-errors.rs:26:10\n    |\n-LL |     &mut (*x).0; //~ ERROR\n+LL |     &mut (*x).0;\n    |          ^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to immutable dereference of raw pointer\n   --> $DIR/mutability-errors.rs:30:5\n    |\n-LL |     *f() = (1,); //~ ERROR\n+LL |     *f() = (1,);\n    |     ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to field of immutable binding\n   --> $DIR/mutability-errors.rs:31:5\n    |\n-LL |     (*f()).0 = 1; //~ ERROR\n+LL |     (*f()).0 = 1;\n    |     ^^^^^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow immutable dereference of raw pointer as mutable\n   --> $DIR/mutability-errors.rs:32:10\n    |\n-LL |     &mut *f(); //~ ERROR\n+LL |     &mut *f();\n    |          ^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow field of immutable binding as mutable\n   --> $DIR/mutability-errors.rs:33:10\n    |\n-LL |     &mut (*f()).0; //~ ERROR\n+LL |     &mut (*f()).0;\n    |          ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0387]: cannot assign to data in a captured outer variable in an `Fn` closure\n   --> $DIR/mutability-errors.rs:40:9\n    |\n-LL |         x = (1,); //~ ERROR\n+LL |         x = (1,);\n    |         ^^^^^^^^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0387]: cannot assign to data in a captured outer variable in an `Fn` closure\n   --> $DIR/mutability-errors.rs:41:9\n    |\n-LL |         x.0 = 1; //~ ERROR\n+LL |         x.0 = 1;\n    |         ^^^^^^^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0387]: cannot borrow data mutably in a captured outer variable in an `Fn` closure\n   --> $DIR/mutability-errors.rs:42:14\n    |\n-LL |         &mut x; //~ ERROR\n+LL |         &mut x;\n    |              ^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0387]: cannot borrow data mutably in a captured outer variable in an `Fn` closure\n   --> $DIR/mutability-errors.rs:43:14\n    |\n-LL |         &mut x.0; //~ ERROR\n+LL |         &mut x.0;\n    |              ^^^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0594]: cannot assign to captured outer variable in an `Fn` closure\n   --> $DIR/mutability-errors.rs:46:9\n    |\n-LL |         x = (1,); //~ ERROR\n+LL |         x = (1,);\n    |         ^^^^^^^^\n    |\n    = note: `Fn` closures cannot capture their enclosing environment for modifications\n@@ -189,66 +189,66 @@ help: consider changing this closure to take self by mutable reference\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/mutability-errors.rs:47:9\n    |\n-LL |         x.0 = 1; //~ ERROR\n+LL |         x.0 = 1;\n    |         ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow captured outer variable in an `Fn` closure as mutable\n   --> $DIR/mutability-errors.rs:48:14\n    |\n-LL |         &mut x; //~ ERROR\n+LL |         &mut x;\n    |              ^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/mutability-errors.rs:45:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n   --> $DIR/mutability-errors.rs:49:14\n    |\n-LL |         &mut x.0; //~ ERROR\n+LL |         &mut x.0;\n    |              ^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow immutable argument `x` as mutable\n   --> $DIR/mutability-errors.rs:54:10\n    |\n LL | fn imm_local(x: (i32,)) {\n    |              - help: make this binding mutable: `mut x`\n-LL |     &mut x; //~ ERROR\n+LL |     &mut x;\n    |          ^ cannot borrow mutably\n \n error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n   --> $DIR/mutability-errors.rs:55:10\n    |\n LL | fn imm_local(x: (i32,)) {\n    |              - help: make this binding mutable: `mut x`\n-LL |     &mut x; //~ ERROR\n-LL |     &mut x.0; //~ ERROR\n+LL |     &mut x;\n+LL |     &mut x.0;\n    |          ^^^ cannot mutably borrow field of immutable binding\n \n error[E0595]: closure cannot assign to immutable argument `x`\n   --> $DIR/mutability-errors.rs:59:5\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: make this binding mutable: `mut x`\n-LL |     || { //~ ERROR\n+LL |     || {\n    |     ^^ cannot borrow mutably\n \n error[E0594]: cannot assign to captured outer variable in an `FnMut` closure\n@@ -257,49 +257,49 @@ error[E0594]: cannot assign to captured outer variable in an `FnMut` closure\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider making `x` mutable: `mut x`\n ...\n-LL |         x = (1,); //~ ERROR\n+LL |         x = (1,);\n    |         ^^^^^^^^\n \n error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/mutability-errors.rs:67:9\n    |\n-LL |         x.0 = 1; //~ ERROR\n+LL |         x.0 = 1;\n    |         ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow captured outer variable in an `FnMut` closure as mutable\n   --> $DIR/mutability-errors.rs:68:14\n    |\n-LL |         &mut x; //~ ERROR\n+LL |         &mut x;\n    |              ^\n \n error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n   --> $DIR/mutability-errors.rs:69:14\n    |\n-LL |         &mut x.0; //~ ERROR\n+LL |         &mut x.0;\n    |              ^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to immutable static item\n   --> $DIR/mutability-errors.rs:76:5\n    |\n-LL |     X = (1,); //~ ERROR\n+LL |     X = (1,);\n    |     ^^^^^^^^\n \n error[E0594]: cannot assign to field of immutable binding\n   --> $DIR/mutability-errors.rs:77:5\n    |\n-LL |     X.0 = 1; //~ ERROR\n+LL |     X.0 = 1;\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow immutable static item as mutable\n   --> $DIR/mutability-errors.rs:78:10\n    |\n-LL |     &mut X; //~ ERROR\n+LL |     &mut X;\n    |          ^\n \n error[E0596]: cannot borrow field of immutable binding as mutable\n   --> $DIR/mutability-errors.rs:79:10\n    |\n-LL |     &mut X.0; //~ ERROR\n+LL |     &mut X.0;\n    |          ^^^ cannot mutably borrow field of immutable binding\n \n error: aborting due to 35 previous errors"}, {"sha": "60af41237354264d940cd5e235f1c6a745d800d9", "filename": "src/test/ui/borrowck/promote-ref-mut-in-let-issue-46557.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,15 +1,15 @@\n error[E0515]: cannot return value referencing temporary value\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:6:5\n    |\n-LL |     let ref mut x = 1234543; //~ ERROR\n+LL |     let ref mut x = 1234543;\n    |                     ------- temporary value created here\n LL |     x\n    |     ^ returns a value referencing data owned by the current function\n \n error[E0515]: cannot return value referencing temporary value\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:11:5\n    |\n-LL |     let (ref mut x, ) = (1234543, ); //~ ERROR\n+LL |     let (ref mut x, ) = (1234543, );\n    |                         ----------- temporary value created here\n LL |     x\n    |     ^ returns a value referencing data owned by the current function\n@@ -21,7 +21,7 @@ LL |       match 1234543 {\n    |       ^     ------- temporary value created here\n    |  _____|\n    | |\n-LL | |         ref mut x => x //~ ERROR\n+LL | |         ref mut x => x\n LL | |     }\n    | |_____^ returns a value referencing data owned by the current function\n \n@@ -32,14 +32,14 @@ LL |       match (123443,) {\n    |       ^     --------- temporary value created here\n    |  _____|\n    | |\n-LL | |         (ref mut x,) => x, //~ ERROR\n+LL | |         (ref mut x,) => x,\n LL | |     }\n    | |_____^ returns a value referencing data owned by the current function\n \n error[E0515]: cannot return reference to temporary value\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:27:5\n    |\n-LL |     &mut 1234543 //~ ERROR\n+LL |     &mut 1234543\n    |     ^^^^^-------\n    |     |    |\n    |     |    temporary value created here"}]}