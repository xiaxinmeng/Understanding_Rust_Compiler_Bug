{"sha": "5c84f76f576e351607bccef3ad344df9cd5499f9", "node_id": "C_kwDOAAsO6NoAKDVjODRmNzZmNTc2ZTM1MTYwN2JjY2VmM2FkMzQ0ZGY5Y2Q1NDk5Zjk", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-12T12:35:21Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-31T17:20:01Z"}, "message": "Only include metadata for non-dynamic libraries in rustc-dev\n\nThe actual object code should be linked from librustc_driver.so,\nwhich is still included in rustc-dev. This saves on download time and\ndisk usage.", "tree": {"sha": "686bd397e79ca5786b94b1f0bf82347f883db3c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/686bd397e79ca5786b94b1f0bf82347f883db3c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c84f76f576e351607bccef3ad344df9cd5499f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c84f76f576e351607bccef3ad344df9cd5499f9", "html_url": "https://github.com/rust-lang/rust/commit/5c84f76f576e351607bccef3ad344df9cd5499f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c84f76f576e351607bccef3ad344df9cd5499f9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c1f338bb5ba7bae2285fc48f249aa5015e542a", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c1f338bb5ba7bae2285fc48f249aa5015e542a", "html_url": "https://github.com/rust-lang/rust/commit/96c1f338bb5ba7bae2285fc48f249aa5015e542a"}], "stats": {"total": 66, "additions": 56, "deletions": 10}, "files": [{"sha": "b203ecd3844b039d11358abc156f6d7b427a8be6", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c84f76f576e351607bccef3ad344df9cd5499f9/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c84f76f576e351607bccef3ad344df9cd5499f9/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=5c84f76f576e351607bccef3ad344df9cd5499f9", "patch": "@@ -105,7 +105,7 @@ impl Step for Std {\n             \"Checking stage{} library artifacts ({} -> {})\",\n             builder.top_stage, &compiler.host, target\n         ));\n-        run_cargo(builder, cargo, &libstd_stamp(builder, compiler, target), vec![], true);\n+        run_cargo(builder, cargo, &libstd_stamp(builder, compiler, target), vec![], true, false);\n \n         // We skip populating the sysroot in non-zero stage because that'll lead\n         // to rlib/rmeta conflicts if std gets built during this session.\n@@ -155,7 +155,14 @@ impl Step for Std {\n             \"Checking stage{} library test/bench/example targets ({} -> {})\",\n             builder.top_stage, &compiler.host, target\n         ));\n-        run_cargo(builder, cargo, &libstd_test_stamp(builder, compiler, target), vec![], true);\n+        run_cargo(\n+            builder,\n+            cargo,\n+            &libstd_test_stamp(builder, compiler, target),\n+            vec![],\n+            true,\n+            false,\n+        );\n     }\n }\n \n@@ -225,7 +232,7 @@ impl Step for Rustc {\n             \"Checking stage{} compiler artifacts ({} -> {})\",\n             builder.top_stage, &compiler.host, target\n         ));\n-        run_cargo(builder, cargo, &librustc_stamp(builder, compiler, target), vec![], true);\n+        run_cargo(builder, cargo, &librustc_stamp(builder, compiler, target), vec![], true, false);\n \n         let libdir = builder.sysroot_libdir(compiler, target);\n         let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n@@ -285,6 +292,7 @@ impl Step for CodegenBackend {\n             &codegen_backend_stamp(builder, compiler, target, backend),\n             vec![],\n             true,\n+            false,\n         );\n     }\n }\n@@ -343,7 +351,7 @@ impl Step for RustAnalyzer {\n             \"Checking stage{} {} artifacts ({} -> {})\",\n             compiler.stage, \"rust-analyzer\", &compiler.host.triple, target.triple\n         ));\n-        run_cargo(builder, cargo, &stamp(builder, compiler, target), vec![], true);\n+        run_cargo(builder, cargo, &stamp(builder, compiler, target), vec![], true, false);\n \n         /// Cargo's output path in a given stage, compiled by a particular\n         /// compiler for the specified target.\n@@ -417,6 +425,7 @@ macro_rules! tool_check_step {\n                     &stamp(builder, compiler, target),\n                     vec![],\n                     true,\n+                    false,\n                 );\n \n                 /// Cargo's output path in a given stage, compiled by a particular"}, {"sha": "147ded3a9eed7c13ee41b09b2117bf6100e7b56f", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5c84f76f576e351607bccef3ad344df9cd5499f9/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c84f76f576e351607bccef3ad344df9cd5499f9/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=5c84f76f576e351607bccef3ad344df9cd5499f9", "patch": "@@ -141,7 +141,14 @@ impl Step for Std {\n             &compiler.host,\n             target,\n         ));\n-        run_cargo(builder, cargo, &libstd_stamp(builder, compiler, target), target_deps, false);\n+        run_cargo(\n+            builder,\n+            cargo,\n+            &libstd_stamp(builder, compiler, target),\n+            target_deps,\n+            false,\n+            false,\n+        );\n \n         builder.ensure(StdLink::from_std(\n             self,\n@@ -728,7 +735,14 @@ impl Step for Rustc {\n             &compiler.host,\n             target,\n         ));\n-        run_cargo(builder, cargo, &librustc_stamp(builder, compiler, target), vec![], false);\n+        run_cargo(\n+            builder,\n+            cargo,\n+            &librustc_stamp(builder, compiler, target),\n+            vec![],\n+            false,\n+            true, // Only ship rustc_driver.so and .rmeta files, not all intermediate .rlib files.\n+        );\n \n         builder.ensure(RustcLink::from_rustc(\n             self,\n@@ -984,7 +998,7 @@ impl Step for CodegenBackend {\n             \"Building stage{} codegen backend {} ({} -> {})\",\n             compiler.stage, backend, &compiler.host, target\n         ));\n-        let files = run_cargo(builder, cargo, &tmp_stamp, vec![], false);\n+        let files = run_cargo(builder, cargo, &tmp_stamp, vec![], false, false);\n         if builder.config.dry_run() {\n             return;\n         }\n@@ -1411,6 +1425,7 @@ pub fn run_cargo(\n     stamp: &Path,\n     additional_target_deps: Vec<(PathBuf, DependencyType)>,\n     is_check: bool,\n+    rlib_only_metadata: bool,\n ) -> Vec<PathBuf> {\n     if builder.config.dry_run() {\n         return Vec::new();\n@@ -1444,13 +1459,35 @@ pub fn run_cargo(\n         };\n         for filename in filenames {\n             // Skip files like executables\n-            if !(filename.ends_with(\".rlib\")\n-                || filename.ends_with(\".lib\")\n+            let mut keep = false;\n+            if filename.ends_with(\".lib\")\n                 || filename.ends_with(\".a\")\n                 || is_debug_info(&filename)\n                 || is_dylib(&filename)\n-                || (is_check && filename.ends_with(\".rmeta\")))\n             {\n+                // Always keep native libraries, rust dylibs and debuginfo\n+                keep = true;\n+            }\n+            if is_check && filename.ends_with(\".rmeta\") {\n+                // During check builds we need to keep crate metadata\n+                keep = true;\n+            } else if rlib_only_metadata {\n+                if filename.contains(\"jemalloc_sys\") || filename.contains(\"rustc_smir\") {\n+                    // jemalloc_sys and rustc_smir are not linked into librustc_driver.so,\n+                    // so we need to distribute them as rlib to be able to use them.\n+                    keep |= filename.ends_with(\".rlib\");\n+                } else {\n+                    // Distribute the rest of the rustc crates as rmeta files only to reduce\n+                    // the tarball sizes by about 50%. The object files are linked into\n+                    // librustc_driver.so, so it is still possible to link against them.\n+                    keep |= filename.ends_with(\".rmeta\");\n+                }\n+            } else {\n+                // In all other cases keep all rlibs\n+                keep |= filename.ends_with(\".rlib\");\n+            }\n+\n+            if !keep {\n                 continue;\n             }\n "}]}