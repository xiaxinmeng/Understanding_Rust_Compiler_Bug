{"sha": "9ba6ddb929563e221f0b4cd32949218148b9a1c1", "node_id": "C_kwDOAAsO6NoAKDliYTZkZGI5Mjk1NjNlMjIxZjBiNGNkMzI5NDkyMTgxNDhiOWExYzE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-10T11:10:27Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-10T11:10:27Z"}, "message": "Make the derived obligation cause parent private", "tree": {"sha": "deb556609d3a204b1187c4b58d498d5f0544bded", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deb556609d3a204b1187c4b58d498d5f0544bded"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ba6ddb929563e221f0b4cd32949218148b9a1c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba6ddb929563e221f0b4cd32949218148b9a1c1", "html_url": "https://github.com/rust-lang/rust/commit/9ba6ddb929563e221f0b4cd32949218148b9a1c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ba6ddb929563e221f0b4cd32949218148b9a1c1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b5b54958022911b5ba9afc85b7f58d69e0842f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5b54958022911b5ba9afc85b7f58d69e0842f8", "html_url": "https://github.com/rust-lang/rust/commit/5b5b54958022911b5ba9afc85b7f58d69e0842f8"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "be2d8def95437cd9a4e4f2e76869a7dd4c54bf2f", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ba6ddb929563e221f0b4cd32949218148b9a1c1/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba6ddb929563e221f0b4cd32949218148b9a1c1/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=9ba6ddb929563e221f0b4cd32949218148b9a1c1", "patch": "@@ -497,7 +497,15 @@ pub struct DerivedObligationCause<'tcx> {\n     pub parent_trait_pred: ty::PolyTraitPredicate<'tcx>,\n \n     /// The parent trait had this cause.\n-    pub parent_code: Lrc<ObligationCauseCode<'tcx>>,\n+    parent_code: Lrc<ObligationCauseCode<'tcx>>,\n+}\n+\n+impl<'tcx> DerivedObligationCause<'tcx> {\n+    /// Get a reference to the derived obligation cause's parent code.\n+    #[must_use]\n+    pub fn parent_code(&self) -> &ObligationCauseCode<'tcx> {\n+        self.parent_code.as_ref()\n+    }\n }\n \n #[derive(Clone, Debug, TypeFoldable, Lift)]"}, {"sha": "81e62f6da06e90cd4e2d88caa6f4003bf77be90a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ba6ddb929563e221f0b4cd32949218148b9a1c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba6ddb929563e221f0b4cd32949218148b9a1c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=9ba6ddb929563e221f0b4cd32949218148b9a1c1", "patch": "@@ -1868,7 +1868,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         match code {\n             ObligationCauseCode::BuiltinDerivedObligation(data) => {\n                 let parent_trait_ref = self.resolve_vars_if_possible(data.parent_trait_pred);\n-                match self.get_parent_trait_ref(&data.parent_code) {\n+                match self.get_parent_trait_ref(data.parent_code()) {\n                     Some(t) => Some(t),\n                     None => {\n                         let ty = parent_trait_ref.skip_binder().self_ty();"}, {"sha": "1522eedf7fe777b027c095aa23518a6ed000adaf", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9ba6ddb929563e221f0b4cd32949218148b9a1c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba6ddb929563e221f0b4cd32949218148b9a1c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=9ba6ddb929563e221f0b4cd32949218148b9a1c1", "patch": "@@ -1683,7 +1683,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         _ => {}\n                     }\n \n-                    next_code = Some(cause.derived.parent_code.as_ref());\n+                    next_code = Some(cause.derived.parent_code());\n                 }\n                 ObligationCauseCode::DerivedObligation(derived_obligation)\n                 | ObligationCauseCode::BuiltinDerivedObligation(derived_obligation) => {\n@@ -1715,7 +1715,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         _ => {}\n                     }\n \n-                    next_code = Some(derived_obligation.parent_code.as_ref());\n+                    next_code = Some(derived_obligation.parent_code());\n                 }\n                 _ => break,\n             }\n@@ -2365,8 +2365,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let is_upvar_tys_infer_tuple = if !matches!(ty.kind(), ty::Tuple(..)) {\n                     false\n                 } else {\n-                    if let ObligationCauseCode::BuiltinDerivedObligation(ref data) =\n-                        *data.parent_code\n+                    if let ObligationCauseCode::BuiltinDerivedObligation(data) = data.parent_code()\n                     {\n                         let parent_trait_ref =\n                             self.resolve_vars_if_possible(data.parent_trait_pred);\n@@ -2393,14 +2392,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 obligated_types.push(ty);\n \n                 let parent_predicate = parent_trait_ref.to_predicate(tcx);\n-                if !self.is_recursive_obligation(obligated_types, &data.parent_code) {\n+                if !self.is_recursive_obligation(obligated_types, data.parent_code()) {\n                     // #74711: avoid a stack overflow\n                     ensure_sufficient_stack(|| {\n                         self.note_obligation_cause_code(\n                             err,\n                             &parent_predicate,\n                             param_env,\n-                            &data.parent_code,\n+                            data.parent_code(),\n                             obligated_types,\n                             seen_requirements,\n                         )\n@@ -2462,7 +2461,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     // We don't want to point at the ADT saying \"required because it appears within\n                     // the type `X`\", like we would otherwise do in test `supertrait-auto-trait.rs`.\n                     while let ObligationCauseCode::BuiltinDerivedObligation(derived) =\n-                        &*data.parent_code\n+                        data.parent_code()\n                     {\n                         let child_trait_ref =\n                             self.resolve_vars_if_possible(derived.parent_trait_pred);\n@@ -2475,7 +2474,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         parent_trait_pred = child_trait_ref;\n                     }\n                 }\n-                while let ObligationCauseCode::ImplDerivedObligation(child) = &*data.parent_code {\n+                while let ObligationCauseCode::ImplDerivedObligation(child) = data.parent_code() {\n                     // Skip redundant recursive obligation notes. See `ui/issue-20413.rs`.\n                     let child_trait_pred =\n                         self.resolve_vars_if_possible(child.derived.parent_trait_pred);\n@@ -2506,7 +2505,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         err,\n                         &parent_predicate,\n                         param_env,\n-                        &data.parent_code,\n+                        data.parent_code(),\n                         obligated_types,\n                         seen_requirements,\n                     )\n@@ -2521,7 +2520,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         err,\n                         &parent_predicate,\n                         param_env,\n-                        &data.parent_code,\n+                        data.parent_code(),\n                         obligated_types,\n                         seen_requirements,\n                     )"}, {"sha": "300b87aa4657536ec11455db553bb42f9dcf2abb", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ba6ddb929563e221f0b4cd32949218148b9a1c1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba6ddb929563e221f0b4cd32949218148b9a1c1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=9ba6ddb929563e221f0b4cd32949218148b9a1c1", "patch": "@@ -1606,9 +1606,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let mut result_code = code;\n                 loop {\n                     let parent = match code {\n-                        ObligationCauseCode::ImplDerivedObligation(c) => &c.derived.parent_code,\n+                        ObligationCauseCode::ImplDerivedObligation(c) => c.derived.parent_code(),\n                         ObligationCauseCode::BuiltinDerivedObligation(c)\n-                        | ObligationCauseCode::DerivedObligation(c) => &c.parent_code,\n+                        | ObligationCauseCode::DerivedObligation(c) => c.parent_code(),\n                         _ => break result_code,\n                     };\n                     (result_code, code) = (code, parent);"}]}