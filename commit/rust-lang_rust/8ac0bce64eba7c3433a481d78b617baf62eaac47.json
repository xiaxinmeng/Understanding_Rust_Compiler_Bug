{"sha": "8ac0bce64eba7c3433a481d78b617baf62eaac47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYzBiY2U2NGViYTdjMzQzM2E0ODFkNzhiNjE3YmFmNjJlYWFjNDc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-06T23:42:43Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-09T00:24:39Z"}, "message": "save-analysis: api-ify method calls", "tree": {"sha": "af8a7d0adf35148c34c5d574a4986ee48e323b7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af8a7d0adf35148c34c5d574a4986ee48e323b7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ac0bce64eba7c3433a481d78b617baf62eaac47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac0bce64eba7c3433a481d78b617baf62eaac47", "html_url": "https://github.com/rust-lang/rust/commit/8ac0bce64eba7c3433a481d78b617baf62eaac47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ac0bce64eba7c3433a481d78b617baf62eaac47/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f26f14dc9b1e152a79e0999556f09f4ca952658", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f26f14dc9b1e152a79e0999556f09f4ca952658", "html_url": "https://github.com/rust-lang/rust/commit/9f26f14dc9b1e152a79e0999556f09f4ca952658"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "cf033ff08060ef841f5b3b111ea0231c40851bbf", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8ac0bce64eba7c3433a481d78b617baf62eaac47/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac0bce64eba7c3433a481d78b617baf62eaac47/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=8ac0bce64eba7c3433a481d78b617baf62eaac47", "patch": "@@ -886,18 +886,14 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n     fn process_method_call(&mut self,\n                            ex: &ast::Expr,\n                            args: &Vec<P<ast::Expr>>) {\n-        let method_call = ty::MethodCall::expr(ex.id);\n-        let method_id = self.tcx.tables.borrow().method_map[&method_call].def_id;\n-        let (def_id, decl_id) = match self.tcx.impl_or_trait_item(method_id).container() {\n-            ty::ImplContainer(_) => (Some(method_id), None),\n-            ty::TraitContainer(_) => (None, Some(method_id))\n-        };\n-        let sub_span = self.span.sub_span_for_meth_name(ex.span);\n-        self.fmt.meth_call_str(ex.span,\n-                               sub_span,\n-                               def_id,\n-                               decl_id,\n-                               self.cur_scope);\n+        if let Some(call_data) = self.save_ctxt.get_expr_data(ex) {\n+            down_cast_data!(call_data, MethodCallData, self, ex.span);\n+            self.fmt.meth_call_str(ex.span,\n+                                   Some(call_data.span),\n+                                   call_data.ref_id,\n+                                   call_data.decl_id,\n+                                   call_data.scope);\n+        }\n \n         // walk receiver and args\n         visit::walk_exprs(self, &args);"}, {"sha": "5d080924e50dfe001981169c71cc622dc0359846", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8ac0bce64eba7c3433a481d78b617baf62eaac47/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac0bce64eba7c3433a481d78b617baf62eaac47/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=8ac0bce64eba7c3433a481d78b617baf62eaac47", "patch": "@@ -61,6 +61,8 @@ pub enum Data {\n     VariableRefData(VariableRefData),\n     /// Data for a reference to a type or trait.\n     TypeRefData(TypeRefData),\n+    /// Data about a method call.\n+    MethodCallData(MethodCallData),\n }\n \n /// Data for all kinds of functions and methods.\n@@ -137,6 +139,16 @@ pub struct TypeRefData {\n     pub ref_id: DefId,\n }\n \n+/// Data about a method call.\n+#[derive(Debug)]\n+pub struct MethodCallData {\n+    pub span: Span,\n+    pub scope: NodeId,\n+    pub ref_id: Option<DefId>,\n+    pub decl_id: Option<DefId>,\n+}\n+\n+\n \n impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     pub fn new(tcx: &'l ty::ctxt<'tcx>,\n@@ -372,6 +384,21 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     }\n                 }\n             }\n+            ast::ExprMethodCall(..) => {\n+                let method_call = ty::MethodCall::expr(expr.id);\n+                let method_id = self.tcx.tables.borrow().method_map[&method_call].def_id;\n+                let (def_id, decl_id) = match self.tcx.impl_or_trait_item(method_id).container() {\n+                    ty::ImplContainer(_) => (Some(method_id), None),\n+                    ty::TraitContainer(_) => (None, Some(method_id))\n+                };\n+                let sub_span = self.span_utils.sub_span_for_meth_name(expr.span);\n+                Some(Data::MethodCallData(MethodCallData {\n+                    span: sub_span.unwrap(),\n+                    scope: self.tcx.map.get_enclosing_scope(expr.id).unwrap_or(0),\n+                    ref_id: def_id,\n+                    decl_id: decl_id,                    \n+                }))\n+            }\n             _ => {\n                 // FIXME\n                 unimplemented!();"}]}