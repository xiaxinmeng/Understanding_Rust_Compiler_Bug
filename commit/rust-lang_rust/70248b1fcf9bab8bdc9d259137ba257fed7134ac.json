{"sha": "70248b1fcf9bab8bdc9d259137ba257fed7134ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMjQ4YjFmY2Y5YmFiOGJkYzlkMjU5MTM3YmEyNTdmZWQ3MTM0YWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-31T12:50:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-31T12:50:13Z"}, "message": "Auto merge of #49500 - oli-obk:mir_dep_graph, r=michaelwoerister\n\nIntroduce an edge from a const eval to the MIR of all statics it depends on\n\nr? @michaelwoerister", "tree": {"sha": "3c9ceea05caf75d885c5d85b233505ef25e6e461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c9ceea05caf75d885c5d85b233505ef25e6e461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70248b1fcf9bab8bdc9d259137ba257fed7134ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70248b1fcf9bab8bdc9d259137ba257fed7134ac", "html_url": "https://github.com/rust-lang/rust/commit/70248b1fcf9bab8bdc9d259137ba257fed7134ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70248b1fcf9bab8bdc9d259137ba257fed7134ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dd24c8ed4ac3e48068408fa21d491d7ffe45295", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd24c8ed4ac3e48068408fa21d491d7ffe45295", "html_url": "https://github.com/rust-lang/rust/commit/8dd24c8ed4ac3e48068408fa21d491d7ffe45295"}, {"sha": "8107b5606dafb35af08597d76fdaa11e8353937e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8107b5606dafb35af08597d76fdaa11e8353937e", "html_url": "https://github.com/rust-lang/rust/commit/8107b5606dafb35af08597d76fdaa11e8353937e"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "57977b6201a61095e384f81ab1e758890651bdbf", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/70248b1fcf9bab8bdc9d259137ba257fed7134ac/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70248b1fcf9bab8bdc9d259137ba257fed7134ac/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=70248b1fcf9bab8bdc9d259137ba257fed7134ac", "patch": "@@ -5,6 +5,7 @@ use rustc::mir;\n use rustc::ty::{self, TyCtxt, Ty, Instance};\n use rustc::ty::layout::{self, LayoutOf};\n use rustc::ty::subst::Subst;\n+use rustc::util::nodemap::FxHashSet;\n \n use syntax::ast::Mutability;\n use syntax::codemap::Span;\n@@ -504,7 +505,13 @@ pub fn const_eval_provider<'a, 'tcx>(\n     };\n \n     let (res, ecx) = eval_body_and_ecx(tcx, cid, None, key.param_env);\n-    res.map(|(miri_value, _, miri_ty)| {\n+    res.map(|(miri_value, ptr, miri_ty)| {\n+        if tcx.is_static(def_id).is_some() {\n+            if let Ok(ptr) = ptr.primval.to_ptr() {\n+                let mut seen = FxHashSet::default();\n+                create_depgraph_edges(tcx, ptr.alloc_id, &mut seen);\n+            }\n+        }\n         tcx.mk_const(ty::Const {\n             val: ConstVal::Value(miri_value),\n             ty: miri_ty,\n@@ -521,3 +528,35 @@ pub fn const_eval_provider<'a, 'tcx>(\n         }\n     })\n }\n+\n+// This function creates dep graph edges from statics to all referred to statics.\n+// This is necessary, because the `const_eval` query cannot directly call itself\n+// for other statics, because we cannot prevent recursion in queries.\n+//\n+// see test/incremental/static_refering_to_other_static2/issue.rs for an example\n+// where not creating those edges would cause static A, which refers to static B\n+// to point to the old allocation of static B, even though B has changed.\n+//\n+// In the future we will want to remove this funcion in favour of a system that\n+// makes sure that statics don't need to have edges to other statics as long as\n+// they are only referring by reference and not inspecting the other static's body.\n+fn create_depgraph_edges<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    alloc_id: AllocId,\n+    seen: &mut FxHashSet<AllocId>,\n+) {\n+    trace!(\"create_depgraph_edges: {:?}, {:?}\", alloc_id, seen);\n+    if seen.insert(alloc_id) {\n+        trace!(\"seen: {:?}, {:?}\", alloc_id, seen);\n+        if let Some(alloc) = tcx.interpret_interner.get_alloc(alloc_id) {\n+            trace!(\"get_alloc: {:?}, {:?}, {:?}\", alloc_id, seen, alloc);\n+            for (_, &reloc) in &alloc.relocations {\n+                if let Some(did) = tcx.interpret_interner.get_corresponding_static_def_id(reloc) {\n+                    trace!(\"get_corresponding: {:?}, {:?}, {:?}, {:?}, {:?}\", alloc_id, seen, alloc, did, reloc);\n+                    let _ = tcx.maybe_optimized_mir(did);\n+                }\n+                create_depgraph_edges(tcx, reloc, seen);\n+            }\n+        }\n+    }\n+}"}, {"sha": "558478668951852ccc5067a4e659179101263c7f", "filename": "src/test/incremental/static_refering_to_other_static2/issue.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70248b1fcf9bab8bdc9d259137ba257fed7134ac/src%2Ftest%2Fincremental%2Fstatic_refering_to_other_static2%2Fissue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70248b1fcf9bab8bdc9d259137ba257fed7134ac/src%2Ftest%2Fincremental%2Fstatic_refering_to_other_static2%2Fissue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstatic_refering_to_other_static2%2Fissue.rs?ref=70248b1fcf9bab8bdc9d259137ba257fed7134ac", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions:rpass1 rpass2\n+\n+#[cfg(rpass1)]\n+pub static A: i32 = 42;\n+#[cfg(rpass2)]\n+pub static A: i32 = 43;\n+\n+pub static B: &i32 = &A;\n+\n+fn main() {}"}]}