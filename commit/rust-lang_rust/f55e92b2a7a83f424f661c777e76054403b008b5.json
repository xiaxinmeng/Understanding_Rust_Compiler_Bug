{"sha": "f55e92b2a7a83f424f661c777e76054403b008b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NWU5MmIyYTdhODNmNDI0ZjY2MWM3NzdlNzYwNTQ0MDNiMDA4YjU=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2017-02-08T17:31:47Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-03-10T01:54:38Z"}, "message": "Add dep-graph tasks where needed", "tree": {"sha": "64f80633606beab5c1c1403fb77eda9976336c02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64f80633606beab5c1c1403fb77eda9976336c02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f55e92b2a7a83f424f661c777e76054403b008b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f55e92b2a7a83f424f661c777e76054403b008b5", "html_url": "https://github.com/rust-lang/rust/commit/f55e92b2a7a83f424f661c777e76054403b008b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f55e92b2a7a83f424f661c777e76054403b008b5/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71d0d921c2f38a13ae9c538225f6181f77d604b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/71d0d921c2f38a13ae9c538225f6181f77d604b3", "html_url": "https://github.com/rust-lang/rust/commit/71d0d921c2f38a13ae9c538225f6181f77d604b3"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "4b4bd44230163d56e97174c88f292ac9572b58da", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f55e92b2a7a83f424f661c777e76054403b008b5/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55e92b2a7a83f424f661c777e76054403b008b5/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=f55e92b2a7a83f424f661c777e76054403b008b5", "patch": "@@ -27,7 +27,7 @@ use rustc::util::nodemap::{DefIdSet};\n \n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n \n-use syntax::attr;\n+use syntax::{attr};\n use syntax::abi::Abi;\n \n use callgraph;\n@@ -184,6 +184,9 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 let callsite = callsites[csi];\n                 csi += 1;\n \n+                let _task = self.tcx.dep_graph.in_task(DepNode::Mir(callsite.caller));\n+                self.tcx.dep_graph.write(DepNode::Mir(callsite.caller));\n+\n                 let callee_mir = {\n                     if let Some(callee_mir) = self.tcx.maybe_item_mir(callsite.callee) {\n                         if !self.should_inline(callsite, &callee_mir) {\n@@ -232,7 +235,6 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                     }\n                 }\n \n-\n                 csi -= 1;\n                 if scc.len() == 1 {\n                     callsites.swap_remove(csi);\n@@ -251,6 +253,9 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n         // Simplify functions we inlined into.\n         for def_id in inlined_into {\n+            let _task = self.tcx.dep_graph.in_task(DepNode::Mir(def_id));\n+            self.tcx.dep_graph.write(DepNode::Mir(def_id));\n+\n             let mut caller_mir = {\n                 let map = self.tcx.maps.mir.borrow();\n                 let mir = map.get(&def_id).unwrap();\n@@ -275,11 +280,6 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             return false;\n         }\n \n-        // Don't inline calls to trait methods\n-        // FIXME: Should try to resolve it to a concrete method, and\n-        // only bail if that isn't possible\n-        let trait_def = tcx.trait_of_item(callsite.callee);\n-        if trait_def.is_some() { return false; }\n \n         let attrs = tcx.get_attrs(callsite.callee);\n         let hint = attr::find_inline_attr(None, &attrs[..]);\n@@ -294,19 +294,13 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             attr::InlineAttr::None => false,\n         };\n \n-        // Only inline local functions if they would be eligible for\n-        // cross-crate inlining. This ensures that any symbols they\n-        // use are reachable cross-crate\n-        // FIXME(#36594): This shouldn't be necessary, and is more conservative\n-        // than it could be, but trans should generate the reachable set from\n-        // the MIR anyway, making any check obsolete.\n+        // Only inline local functions if they would be eligible for cross-crate\n+        // inlining. This is to ensure that the final crate doesn't have MIR that\n+        // reference unexported symbols\n         if callsite.callee.is_local() {\n-            // No type substs and no inline hint means this function\n-            // wouldn't be eligible for cross-crate inlining\n             if callsite.substs.types().count() == 0 && !hinted {\n                 return false;\n             }\n-\n         }\n \n         let mut threshold = if hinted {"}]}