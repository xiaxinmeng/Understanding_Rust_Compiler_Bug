{"sha": "183dd9e3c2586ccba3a8215469e1e57843d83973", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4M2RkOWUzYzI1ODZjY2JhM2E4MjE1NDY5ZTFlNTc4NDNkODM5NzM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-05-11T04:21:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-11T04:21:25Z"}, "message": "Rollup merge of #41724 - achernyak:master, r=nikomatsakis\n\nMore Queries for Crate Metadata\n\nThis covers a little bit of clean up and the following parts of #41417:\n* `fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>;`\n* `fn fn_arg_names(&self, did: DefId) -> Vec<ast::Name>;`\n* `fn trait_of_item(&self, def_id: DefId) -> Option<DefId>;`\n* `fn impl_parent(&self, impl_def_id: DefId) -> Option<DefId>;`\n* ` fn is_foreign_item(&self, did: DefId) -> bool;`\n* `fn is_exported_symbol(&self, def_id: DefId) -> bool;`\n\nr? @nikomatsakis", "tree": {"sha": "4c7f0aa1e85fdf947b05a6a6c2bbbbf13ee15185", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c7f0aa1e85fdf947b05a6a6c2bbbbf13ee15185"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/183dd9e3c2586ccba3a8215469e1e57843d83973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/183dd9e3c2586ccba3a8215469e1e57843d83973", "html_url": "https://github.com/rust-lang/rust/commit/183dd9e3c2586ccba3a8215469e1e57843d83973", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/183dd9e3c2586ccba3a8215469e1e57843d83973/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a00e18205342e82db3216dc1ea942392aafe30eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a00e18205342e82db3216dc1ea942392aafe30eb", "html_url": "https://github.com/rust-lang/rust/commit/a00e18205342e82db3216dc1ea942392aafe30eb"}, {"sha": "35812d1746b8b98200533bd2bef18649ef5807d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/35812d1746b8b98200533bd2bef18649ef5807d1", "html_url": "https://github.com/rust-lang/rust/commit/35812d1746b8b98200533bd2bef18649ef5807d1"}], "stats": {"total": 214, "additions": 114, "deletions": 100}, "files": [{"sha": "25fc5b7a4f6d9f9c9ff2e9b101205a3dad18a20e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=183dd9e3c2586ccba3a8215469e1e57843d83973", "patch": "@@ -159,6 +159,14 @@ pub enum DepNode<D: Clone + Debug> {\n     DefSpan(D),\n     Stability(D),\n     Deprecation(D),\n+    ItemBodyNestedBodies(D),\n+    ConstIsRvaluePromotableToStatic(D),\n+    ImplParent(D),\n+    TraitOfItem(D),\n+    IsExportedSymbol(D),\n+    IsMirAvailable(D),\n+    ItemAttrs(D),\n+    FnArgNames(D),\n     FileMap(D, Arc<String>),\n }\n \n@@ -273,6 +281,14 @@ impl<D: Clone + Debug> DepNode<D> {\n             DefSpan(ref d) => op(d).map(DefSpan),\n             Stability(ref d) => op(d).map(Stability),\n             Deprecation(ref d) => op(d).map(Deprecation),\n+            ItemAttrs(ref d) => op(d).map(ItemAttrs),\n+            FnArgNames(ref d) => op(d).map(FnArgNames),\n+            ImplParent(ref d) => op(d).map(ImplParent),\n+            TraitOfItem(ref d) => op(d).map(TraitOfItem),\n+            IsExportedSymbol(ref d) => op(d).map(IsExportedSymbol),\n+            ItemBodyNestedBodies(ref d) => op(d).map(ItemBodyNestedBodies),\n+            ConstIsRvaluePromotableToStatic(ref d) => op(d).map(ConstIsRvaluePromotableToStatic),\n+            IsMirAvailable(ref d) => op(d).map(IsMirAvailable),\n             GlobalMetaData(ref d, kind) => op(d).map(|d| GlobalMetaData(d, kind)),\n             FileMap(ref d, ref file_name) => op(d).map(|d| FileMap(d, file_name.clone())),\n         }"}, {"sha": "da899a9130c8bb1e1fee34dbbaa26e51b59c4e89", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=183dd9e3c2586ccba3a8215469e1e57843d83973", "patch": "@@ -210,27 +210,21 @@ pub trait CrateStore {\n     fn visibility(&self, def: DefId) -> ty::Visibility;\n     fn visible_parent_map<'a>(&'a self) -> ::std::cell::Ref<'a, DefIdMap<DefId>>;\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics;\n-    fn item_attrs(&self, def_id: DefId) -> Rc<[ast::Attribute]>;\n-    fn fn_arg_names(&self, did: DefId) -> Vec<ast::Name>;\n \n     // trait info\n     fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId>;\n \n     // impl info\n     fn impl_defaultness(&self, def: DefId) -> hir::Defaultness;\n-    fn impl_parent(&self, impl_def_id: DefId) -> Option<DefId>;\n \n     // trait/impl-item info\n-    fn trait_of_item(&self, def_id: DefId) -> Option<DefId>;\n     fn associated_item_cloned(&self, def: DefId) -> ty::AssociatedItem;\n \n     // flags\n     fn is_const_fn(&self, did: DefId) -> bool;\n     fn is_default_impl(&self, impl_did: DefId) -> bool;\n-    fn is_foreign_item(&self, did: DefId) -> bool;\n     fn is_dllimport_foreign_item(&self, def: DefId) -> bool;\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool;\n-    fn is_exported_symbol(&self, def_id: DefId) -> bool;\n \n     // crate metadata\n     fn dylib_dependency_formats(&self, cnum: CrateNum)\n@@ -337,28 +331,22 @@ impl CrateStore for DummyCrateStore {\n     }\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics\n         { bug!(\"item_generics_cloned\") }\n-    fn item_attrs(&self, def_id: DefId) -> Rc<[ast::Attribute]> { bug!(\"item_attrs\") }\n-    fn fn_arg_names(&self, did: DefId) -> Vec<ast::Name> { bug!(\"fn_arg_names\") }\n \n     // trait info\n     fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId> { vec![] }\n \n     // impl info\n     fn impl_defaultness(&self, def: DefId) -> hir::Defaultness { bug!(\"impl_defaultness\") }\n-    fn impl_parent(&self, def: DefId) -> Option<DefId> { bug!(\"impl_parent\") }\n \n     // trait/impl-item info\n-    fn trait_of_item(&self, def_id: DefId) -> Option<DefId> { bug!(\"trait_of_item\") }\n     fn associated_item_cloned(&self, def: DefId) -> ty::AssociatedItem\n         { bug!(\"associated_item_cloned\") }\n \n     // flags\n     fn is_const_fn(&self, did: DefId) -> bool { bug!(\"is_const_fn\") }\n     fn is_default_impl(&self, impl_did: DefId) -> bool { bug!(\"is_default_impl\") }\n-    fn is_foreign_item(&self, did: DefId) -> bool { bug!(\"is_foreign_item\") }\n     fn is_dllimport_foreign_item(&self, id: DefId) -> bool { false }\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool { false }\n-    fn is_exported_symbol(&self, def_id: DefId) -> bool { false }\n \n     // crate metadata\n     fn dylib_dependency_formats(&self, cnum: CrateNum)"}, {"sha": "5360a86560d399235a660c877c47090fea23bf3f", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=183dd9e3c2586ccba3a8215469e1e57843d83973", "patch": "@@ -205,7 +205,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EffectCheckVisitor<'a, 'tcx> {\n                     } else if match self.tcx.hir.get_if_local(def_id) {\n                         Some(hir::map::NodeForeignItem(..)) => true,\n                         Some(..) => false,\n-                        None => self.tcx.sess.cstore.is_foreign_item(def_id),\n+                        None => self.tcx.is_foreign_item(def_id),\n                     } {\n                         self.require_unsafe_ext(expr.id, expr.span, \"use of extern static\", true);\n                     }"}, {"sha": "3b5dc2ae164b60f90d8c6dc617c0e66a01126e76", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=183dd9e3c2586ccba3a8215469e1e57843d83973", "patch": "@@ -34,6 +34,7 @@ use std::ops::Deref;\n use std::rc::Rc;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax::attr;\n+use syntax::ast;\n use syntax::symbol::Symbol;\n \n pub trait Key: Clone + Hash + Eq + Debug {\n@@ -340,6 +341,36 @@ impl<'tcx> QueryDescription for queries::deprecation<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::item_attrs<'tcx> {\n+    fn describe(_: TyCtxt, _: DefId) -> String {\n+        bug!(\"item_attrs\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::is_exported_symbol<'tcx> {\n+    fn describe(_: TyCtxt, _: DefId) -> String {\n+        bug!(\"is_exported_symbol\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::fn_arg_names<'tcx> {\n+    fn describe(_: TyCtxt, _: DefId) -> String {\n+        bug!(\"fn_arg_names\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::impl_parent<'tcx> {\n+    fn describe(_: TyCtxt, _: DefId) -> String {\n+        bug!(\"impl_parent\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::trait_of_item<'tcx> {\n+    fn describe(_: TyCtxt, _: DefId) -> String {\n+        bug!(\"trait_of_item\")\n+    }\n+}\n+\n impl<'tcx> QueryDescription for queries::item_body_nested_bodies<'tcx> {\n     fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         format!(\"nested item bodies of `{}`\", tcx.item_path_str(def_id))\n@@ -781,9 +812,14 @@ define_maps! { <'tcx>\n     [] def_span: DefSpan(DefId) -> Span,\n     [] stability: Stability(DefId) -> Option<attr::Stability>,\n     [] deprecation: Deprecation(DefId) -> Option<attr::Deprecation>,\n-    [] item_body_nested_bodies: metadata_dep_node(DefId) -> Rc<BTreeMap<hir::BodyId, hir::Body>>,\n-    [] const_is_rvalue_promotable_to_static: metadata_dep_node(DefId) -> bool,\n-    [] is_mir_available: metadata_dep_node(DefId) -> bool,\n+    [] item_attrs: ItemAttrs(DefId) -> Rc<[ast::Attribute]>,\n+    [] fn_arg_names: FnArgNames(DefId) -> Vec<ast::Name>,\n+    [] impl_parent: ImplParent(DefId) -> Option<DefId>,\n+    [] trait_of_item: TraitOfItem(DefId) -> Option<DefId>,\n+    [] is_exported_symbol: IsExportedSymbol(DefId) -> bool,\n+    [] item_body_nested_bodies: ItemBodyNestedBodies(DefId) -> Rc<BTreeMap<hir::BodyId, hir::Body>>,\n+    [] const_is_rvalue_promotable_to_static: ConstIsRvaluePromotableToStatic(DefId) -> bool,\n+    [] is_mir_available: IsMirAvailable(DefId) -> bool,\n }\n \n fn coherent_trait_dep_node((_, def_id): (CrateNum, DefId)) -> DepNode<DefId> {\n@@ -798,10 +834,6 @@ fn reachability_dep_node(_: CrateNum) -> DepNode<DefId> {\n     DepNode::Reachability\n }\n \n-fn metadata_dep_node(def_id: DefId) -> DepNode<DefId> {\n-    DepNode::MetaData(def_id)\n-}\n-\n fn mir_shim_dep_node(instance: ty::InstanceDef) -> DepNode<DefId> {\n     instance.dep_node()\n }"}, {"sha": "51cdba56cf10a98c1ab7eeaa65f1beba9ef080bc", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=183dd9e3c2586ccba3a8215469e1e57843d83973", "patch": "@@ -2360,7 +2360,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         if let Some(id) = self.hir.as_local_node_id(did) {\n             Attributes::Borrowed(self.hir.attrs(id))\n         } else {\n-            Attributes::Owned(self.sess.cstore.item_attrs(did))\n+            Attributes::Owned(self.item_attrs(did))\n         }\n     }\n \n@@ -2396,7 +2396,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             let trait_ref = self.impl_trait_ref(impl_def_id).unwrap();\n \n             // Record the trait->implementation mapping.\n-            let parent = self.sess.cstore.impl_parent(impl_def_id).unwrap_or(trait_id);\n+            let parent = self.impl_parent(impl_def_id).unwrap_or(trait_id);\n             def.record_remote_impl(self, impl_def_id, trait_ref, parent);\n         }\n \n@@ -2433,22 +2433,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// If the given def ID describes an item belonging to a trait,\n-    /// return the ID of the trait that the trait item belongs to.\n-    /// Otherwise, return `None`.\n-    pub fn trait_of_item(self, def_id: DefId) -> Option<DefId> {\n-        if def_id.krate != LOCAL_CRATE {\n-            return self.sess.cstore.trait_of_item(def_id);\n-        }\n-        self.opt_associated_item(def_id)\n-            .and_then(|associated_item| {\n-                match associated_item.container {\n-                    TraitContainer(def_id) => Some(def_id),\n-                    ImplContainer(_) => None\n-                }\n-            })\n-    }\n-\n     /// Construct a parameter environment suitable for static contexts or other contexts where there\n     /// are no free type/lifetime parameters in scope.\n     pub fn empty_parameter_environment(self) -> ParameterEnvironment<'tcx> {\n@@ -2688,13 +2672,28 @@ fn def_span<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Span {\n     tcx.hir.span_if_local(def_id).unwrap()\n }\n \n+/// If the given def ID describes an item belonging to a trait,\n+/// return the ID of the trait that the trait item belongs to.\n+/// Otherwise, return `None`.\n+fn trait_of_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Option<DefId> {\n+    tcx.opt_associated_item(def_id)\n+        .and_then(|associated_item| {\n+            match associated_item.container {\n+                TraitContainer(def_id) => Some(def_id),\n+                ImplContainer(_) => None\n+            }\n+        })\n+}\n+\n+\n pub fn provide(providers: &mut ty::maps::Providers) {\n     *providers = ty::maps::Providers {\n         associated_item,\n         associated_item_def_ids,\n         adt_sized_constraint,\n         adt_dtorck_constraint,\n         def_span,\n+        trait_of_item,\n         ..*providers\n     };\n }"}, {"sha": "e79f23aee11456e2fd3f3ce35f7e72a95f45d1ca", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=183dd9e3c2586ccba3a8215469e1e57843d83973", "patch": "@@ -74,7 +74,7 @@ pub fn lookup_const_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 // constants, we only try to find the expression for a\n                 // trait-associated const if the caller gives us the\n                 // substitutions for the reference to it.\n-                if tcx.sess.cstore.trait_of_item(def_id).is_some() {\n+                if tcx.trait_of_item(def_id).is_some() {\n                     resolve_trait_associated_const(tcx, def_id, substs)\n                 } else {\n                     Some((def_id, substs))"}, {"sha": "f3fb427fed66fdd2e52204786bfbf03bc3f89312", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 15, "deletions": 53, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=183dd9e3c2586ccba3a8215469e1e57843d83973", "patch": "@@ -41,8 +41,6 @@ use rustc::hir::svh::Svh;\n use rustc_back::target::Target;\n use rustc::hir;\n \n-use std::collections::BTreeMap;\n-\n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $cdata:ident $($name:ident => $compute:block)*) => {\n         pub fn provide<$lt>(providers: &mut Providers<$lt>) {\n@@ -113,21 +111,23 @@ provide! { <'tcx> tcx, def_id, cdata\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n     stability => { cdata.get_stability(def_id.index) }\n     deprecation => { cdata.get_deprecation(def_id.index) }\n-    item_body_nested_bodies => {\n-        let map: BTreeMap<_, _> = cdata.entry(def_id.index).ast.into_iter().flat_map(|ast| {\n-            ast.decode(cdata).nested_bodies.decode(cdata).map(|body| (body.id(), body))\n-        }).collect();\n-\n-        Rc::new(map)\n-    }\n+    item_attrs => { cdata.get_item_attrs(def_id.index, &tcx.dep_graph) }\n+    // FIXME(#38501) We've skipped a `read` on the `HirBody` of\n+    // a `fn` when encoding, so the dep-tracking wouldn't work.\n+    // This is only used by rustdoc anyway, which shouldn't have\n+    // incremental recompilation ever enabled.\n+    fn_arg_names => { cdata.get_fn_arg_names(def_id.index) }\n+    impl_parent => { cdata.get_parent_impl(def_id.index) }\n+    trait_of_item => { cdata.get_trait_of_item(def_id.index) }\n+    is_exported_symbol => {\n+        let dep_node = cdata.metadata_dep_node(GlobalMetaDataKind::ExportedSymbols);\n+        cdata.exported_symbols.get(&tcx.dep_graph, dep_node).contains(&def_id.index)\n+    }\n+    item_body_nested_bodies => { Rc::new(cdata.item_body_nested_bodies(def_id.index)) }\n     const_is_rvalue_promotable_to_static => {\n-        cdata.entry(def_id.index).ast.expect(\"const item missing `ast`\")\n-            .decode(cdata).rvalue_promotable_to_static\n-    }\n-    is_mir_available => {\n-        !cdata.is_proc_macro(def_id.index) &&\n-        cdata.maybe_entry(def_id.index).and_then(|item| item.decode(cdata).mir).is_some()\n+        cdata.const_is_rvalue_promotable_to_static(def_id.index)\n     }\n+    is_mir_available => { cdata.is_item_mir_available(def_id.index) }\n }\n \n impl CrateStore for cstore::CStore {\n@@ -145,22 +145,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(def.krate).get_generics(def.index)\n     }\n \n-    fn item_attrs(&self, def_id: DefId) -> Rc<[ast::Attribute]>\n-    {\n-        self.get_crate_data(def_id.krate)\n-            .get_item_attrs(def_id.index, &self.dep_graph)\n-    }\n-\n-    fn fn_arg_names(&self, did: DefId) -> Vec<ast::Name>\n-    {\n-        // FIXME(#38501) We've skipped a `read` on the `HirBody` of\n-        // a `fn` when encoding, so the dep-tracking wouldn't work.\n-        // This is only used by rustdoc anyway, which shouldn't have\n-        // incremental recompilation ever enabled.\n-        assert!(!self.dep_graph.is_fully_enabled());\n-        self.get_crate_data(did.krate).get_fn_arg_names(did.index)\n-    }\n-\n     fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId>\n     {\n         if let Some(def_id) = filter {\n@@ -179,16 +163,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(def.krate).get_impl_defaultness(def.index)\n     }\n \n-    fn impl_parent(&self, impl_def: DefId) -> Option<DefId> {\n-        self.dep_graph.read(DepNode::MetaData(impl_def));\n-        self.get_crate_data(impl_def.krate).get_parent_impl(impl_def.index)\n-    }\n-\n-    fn trait_of_item(&self, def_id: DefId) -> Option<DefId> {\n-        self.dep_graph.read(DepNode::MetaData(def_id));\n-        self.get_crate_data(def_id.krate).get_trait_of_item(def_id.index)\n-    }\n-\n     fn associated_item_cloned(&self, def: DefId) -> ty::AssociatedItem\n     {\n         self.dep_graph.read(DepNode::MetaData(def));\n@@ -206,23 +180,11 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(impl_did.krate).is_default_impl(impl_did.index)\n     }\n \n-    fn is_foreign_item(&self, did: DefId) -> bool {\n-        self.get_crate_data(did.krate).is_foreign_item(did.index)\n-    }\n-\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool\n     {\n         self.do_is_statically_included_foreign_item(def_id)\n     }\n \n-    fn is_exported_symbol(&self, def_id: DefId) -> bool {\n-        let data = self.get_crate_data(def_id.krate);\n-        let dep_node = data.metadata_dep_node(GlobalMetaDataKind::ExportedSymbols);\n-        data.exported_symbols\n-            .get(&self.dep_graph, dep_node)\n-            .contains(&def_id.index)\n-    }\n-\n     fn is_dllimport_foreign_item(&self, def_id: DefId) -> bool {\n         if def_id.krate == LOCAL_CRATE {\n             self.dllimport_foreign_items.borrow().contains(&def_id.index)"}, {"sha": "ea845f722c3450b214bb7f835b16e135016c6a56", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=183dd9e3c2586ccba3a8215469e1e57843d83973", "patch": "@@ -30,6 +30,7 @@ use rustc::mir::Mir;\n \n use std::borrow::Cow;\n use std::cell::Ref;\n+use std::collections::BTreeMap;\n use std::io;\n use std::mem;\n use std::rc::Rc;\n@@ -453,16 +454,16 @@ impl<'tcx> EntryKind<'tcx> {\n }\n \n impl<'a, 'tcx> CrateMetadata {\n-    pub fn is_proc_macro(&self, id: DefIndex) -> bool {\n+    fn is_proc_macro(&self, id: DefIndex) -> bool {\n         self.proc_macros.is_some() && id != CRATE_DEF_INDEX\n     }\n \n-    pub fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n+    fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n         assert!(!self.is_proc_macro(item_id));\n         self.root.index.lookup(self.blob.raw_bytes(), item_id)\n     }\n \n-    pub fn entry(&self, item_id: DefIndex) -> Entry<'tcx> {\n+    fn entry(&self, item_id: DefIndex) -> Entry<'tcx> {\n         match self.maybe_entry(item_id) {\n             None => {\n                 bug!(\"entry: id not found: {:?} in crate {:?} with number {}\",\n@@ -789,6 +790,22 @@ impl<'a, 'tcx> CrateMetadata {\n         tcx.alloc_tables(ast.tables.decode((self, tcx)))\n     }\n \n+    pub fn item_body_nested_bodies(&self, id: DefIndex) -> BTreeMap<hir::BodyId, hir::Body> {\n+        self.entry(id).ast.into_iter().flat_map(|ast| {\n+            ast.decode(self).nested_bodies.decode(self).map(|body| (body.id(), body))\n+        }).collect()\n+    }\n+\n+    pub fn const_is_rvalue_promotable_to_static(&self, id: DefIndex) -> bool {\n+        self.entry(id).ast.expect(\"const item missing `ast`\")\n+            .decode(self).rvalue_promotable_to_static\n+    }\n+\n+    pub fn is_item_mir_available(&self, id: DefIndex) -> bool {\n+        !self.is_proc_macro(id) &&\n+        self.maybe_entry(id).and_then(|item| item.decode(self).mir).is_some()\n+    }\n+\n     pub fn maybe_get_optimized_mir(&self,\n                                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                    id: DefIndex)"}, {"sha": "1aed2932948020f87e990c1f675aa46c413d39f0", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=183dd9e3c2586ccba3a8215469e1e57843d83973", "patch": "@@ -223,7 +223,7 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n             _ => false\n         }\n     } else {\n-        tcx.sess.cstore.is_foreign_item(def_id)\n+        tcx.is_foreign_item(def_id)\n     };\n \n     if let Some(name) = weak_lang_items::link_name(&attrs) {"}, {"sha": "5f8b79a994a554755bbd0b93cb336c0a5f8985a7", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=183dd9e3c2586ccba3a8215469e1e57843d83973", "patch": "@@ -652,8 +652,8 @@ fn should_trans_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: &Instan\n         }\n         Some(_) => true,\n         None => {\n-            if tcx.sess.cstore.is_exported_symbol(def_id) ||\n-                tcx.sess.cstore.is_foreign_item(def_id)\n+            if tcx.is_exported_symbol(def_id) ||\n+                tcx.is_foreign_item(def_id)\n             {\n                 // We can link to the item in question, no instance needed\n                 // in this crate"}, {"sha": "eac0a062567194cd056253b4ff0a320cae3d0a47", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=183dd9e3c2586ccba3a8215469e1e57843d83973", "patch": "@@ -186,7 +186,7 @@ pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef {\n                 llvm::set_thread_local(g, true);\n             }\n         }\n-        if ccx.use_dll_storage_attrs() && !ccx.sess().cstore.is_foreign_item(def_id) {\n+        if ccx.use_dll_storage_attrs() && !ccx.tcx().is_foreign_item(def_id) {\n             // This item is external but not foreign, i.e. it originates from an external Rust\n             // crate. Since we don't know whether this crate will be linked dynamically or\n             // statically in the final application, we always mark such symbols as 'dllimport'."}, {"sha": "2dde6d9d4ee556286fd07b7d4e9a164024a57d6f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dd9e3c2586ccba3a8215469e1e57843d83973/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=183dd9e3c2586ccba3a8215469e1e57843d83973", "patch": "@@ -1180,7 +1180,7 @@ impl<'a, 'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n         let mut names = if cx.tcx.hir.as_local_node_id(did).is_some() {\n             vec![].into_iter()\n         } else {\n-            cx.tcx.sess.cstore.fn_arg_names(did).into_iter()\n+            cx.tcx.fn_arg_names(did).into_iter()\n         }.peekable();\n         FnDecl {\n             output: Return(sig.skip_binder().output().clean(cx)),"}]}