{"sha": "ad72699553c39f159f25a6dc7ecd5df953817407", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNzI2OTk1NTNjMzlmMTU5ZjI1YTZkYzdlY2Q1ZGY5NTM4MTc0MDc=", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2019-03-09T23:40:22Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2019-03-09T23:40:22Z"}, "message": "Add async keyword", "tree": {"sha": "d0e0d665f23e8b55feb624fac45bc7de644d622c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0e0d665f23e8b55feb624fac45bc7de644d622c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad72699553c39f159f25a6dc7ecd5df953817407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad72699553c39f159f25a6dc7ecd5df953817407", "html_url": "https://github.com/rust-lang/rust/commit/ad72699553c39f159f25a6dc7ecd5df953817407", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad72699553c39f159f25a6dc7ecd5df953817407/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9d09b7ec0721e9ad305866a57989d1aa9c67ec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d09b7ec0721e9ad305866a57989d1aa9c67ec1", "html_url": "https://github.com/rust-lang/rust/commit/a9d09b7ec0721e9ad305866a57989d1aa9c67ec1"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "53bb26c5ff6e4a7b50bc744ab3b797f20d47eae0", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=ad72699553c39f159f25a6dc7ecd5df953817407", "patch": "@@ -93,6 +93,11 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n             }\n         }\n \n+        ASYNC_KW if la == L_CURLY => {\n+            let m = p.start();\n+            p.bump();\n+            block_expr(p, Some(m))\n+        }\n         MATCH_KW => match_expr(p),\n         UNSAFE_KW if la == L_CURLY => {\n             let m = p.start();"}, {"sha": "91f9bfe8a72b14e5d2e6c3de939188642a096718", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=ad72699553c39f159f25a6dc7ecd5df953817407", "patch": "@@ -86,9 +86,14 @@ pub(super) fn maybe_item(p: &mut Parser, flavor: ItemFlavor) -> MaybeItem {\n     }\n \n     let mut has_mods = false;\n+\n     // modifiers\n-    has_mods |= p.eat(CONST_KW);\n \n+    has_mods |= p.eat(CONST_KW);\n+    if p.at(ASYNC_KW) && p.nth(1) != L_CURLY {\n+        p.eat(ASYNC_KW);\n+        has_mods = true;\n+    }\n     // test_err unsafe_block_in_mod\n     // fn foo(){} unsafe { } fn bar(){}\n     if p.at(UNSAFE_KW) && p.nth(1) != L_CURLY {\n@@ -110,6 +115,9 @@ pub(super) fn maybe_item(p: &mut Parser, flavor: ItemFlavor) -> MaybeItem {\n \n     // items\n     let kind = match p.current() {\n+        // test async_fn\n+        // async fn foo() {}\n+\n         // test extern_fn\n         // extern fn foo() {}\n "}, {"sha": "03247ae38cd323c254ce65f06f1ad9770f8e328f", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=ad72699553c39f159f25a6dc7ecd5df953817407", "patch": "@@ -66,6 +66,7 @@ pub enum SyntaxKind {\n     SHR,\n     SHLEQ,\n     SHREQ,\n+    ASYNC_KW,\n     USE_KW,\n     FN_KW,\n     STRUCT_KW,\n@@ -233,6 +234,7 @@ use self::SyntaxKind::*;\n impl SyntaxKind {\n     pub fn is_keyword(self) -> bool {\n         match self {\n+            | ASYNC_KW\n             | USE_KW\n             | FN_KW\n             | STRUCT_KW\n@@ -403,6 +405,7 @@ impl SyntaxKind {\n             SHR => &SyntaxInfo { name: \"SHR\" },\n             SHLEQ => &SyntaxInfo { name: \"SHLEQ\" },\n             SHREQ => &SyntaxInfo { name: \"SHREQ\" },\n+            ASYNC_KW => &SyntaxInfo { name: \"ASYNC_KW\" },\n             USE_KW => &SyntaxInfo { name: \"USE_KW\" },\n             FN_KW => &SyntaxInfo { name: \"FN_KW\" },\n             STRUCT_KW => &SyntaxInfo { name: \"STRUCT_KW\" },\n@@ -570,6 +573,7 @@ impl SyntaxKind {\n     }\n     pub fn from_keyword(ident: &str) -> Option<SyntaxKind> {\n         let kw = match ident {\n+            \"async\" => ASYNC_KW,\n             \"use\" => USE_KW,\n             \"fn\" => FN_KW,\n             \"struct\" => STRUCT_KW,"}, {"sha": "66f1339c10937a156aea98d76f7218e1df0c25a4", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=ad72699553c39f159f25a6dc7ecd5df953817407", "patch": "@@ -59,6 +59,7 @@ Grammar(\n         [\">>=\", \"SHREQ\"],\n     ],\n     keywords: [\n+        \"async\",\n         \"use\",\n         \"fn\",\n         \"struct\","}, {"sha": "1e91bff4e7d83b662f500d05976d24f37fff0d3e", "filename": "crates/ra_syntax/tests/data/lexer/0011_keywords.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0011_keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0011_keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0011_keywords.rs?ref=ad72699553c39f159f25a6dc7ecd5df953817407", "patch": "@@ -1,3 +1,3 @@\n-fn use struct trait enum impl true false as extern crate\n+async fn use struct trait enum impl true false as extern crate\n mod pub self super in where for loop while if match const\n static mut type ref let else move return"}, {"sha": "22c00eefb62bd818bc9c99029b999064d33f6224", "filename": "crates/ra_syntax/tests/data/lexer/0011_keywords.txt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0011_keywords.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0011_keywords.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0011_keywords.txt?ref=ad72699553c39f159f25a6dc7ecd5df953817407", "patch": "@@ -1,3 +1,5 @@\n+ASYNC_KW 5 \"async\"\n+WHITESPACE 1 \" \"\n FN_KW 2 \"fn\"\n WHITESPACE 1 \" \"\n USE_KW 3 \"use\""}, {"sha": "f4adcb62b3b828b2ed2972ab2e40e63b402e4850", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0124_async_fn.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0124_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0124_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0124_async_fn.rs?ref=ad72699553c39f159f25a6dc7ecd5df953817407", "patch": "@@ -0,0 +1 @@\n+async fn foo() {}"}, {"sha": "d1a706ecc355ce253ce2968ab970c0bedfde49bd", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0124_async_fn.txt", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0124_async_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ad72699553c39f159f25a6dc7ecd5df953817407/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0124_async_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0124_async_fn.txt?ref=ad72699553c39f159f25a6dc7ecd5df953817407", "patch": "@@ -0,0 +1,16 @@\n+SOURCE_FILE@[0; 18)\n+  FN_DEF@[0; 17)\n+    ASYNC_KW@[0; 5)\n+    WHITESPACE@[5; 6)\n+    FN_KW@[6; 8)\n+    WHITESPACE@[8; 9)\n+    NAME@[9; 12)\n+      IDENT@[9; 12) \"foo\"\n+    PARAM_LIST@[12; 14)\n+      L_PAREN@[12; 13)\n+      R_PAREN@[13; 14)\n+    WHITESPACE@[14; 15)\n+    BLOCK@[15; 17)\n+      L_CURLY@[15; 16)\n+      R_CURLY@[16; 17)\n+  WHITESPACE@[17; 18)"}]}