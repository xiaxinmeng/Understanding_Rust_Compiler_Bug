{"sha": "6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNDNjMGMxYWRkOGQyY2FhYTNjMzkxZDhkOGRhY2EyYzYwOTA0N2U=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-14T00:42:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-14T01:59:17Z"}, "message": "Stop parsing old operator overloading syntax", "tree": {"sha": "2223eb0347d5dd4084afaed19120874fd2a03c7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2223eb0347d5dd4084afaed19120874fd2a03c7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "html_url": "https://github.com/rust-lang/rust/commit/6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e1b98d34f105f4632b30bcd5c51e40cb7a1b637", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e1b98d34f105f4632b30bcd5c51e40cb7a1b637", "html_url": "https://github.com/rust-lang/rust/commit/2e1b98d34f105f4632b30bcd5c51e40cb7a1b637"}], "stats": {"total": 108, "additions": 3, "deletions": 105}, "files": [{"sha": "87802c5c13b2164ac5f1d3597c7486c34fa0d5e8", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "patch": "@@ -123,13 +123,6 @@ pure fn from_elem<T: copy>(n_elts: uint, t: T) -> @[T] {\n     }\n }\n \n-impl<T: copy> @[T]: vec_concat<T> {\n-    #[inline(always)]\n-    pure fn +(rhs: &[const T]) -> @[T] {\n-        append(self, rhs)\n-    }\n-}\n-\n #[cfg(notest)]\n impl<T: copy> @[T]: add<&[const T],@[T]> {\n     #[inline(always)]"}, {"sha": "14bafcd68f4a0062647dc64a9dd62d656e306116", "filename": "src/libcore/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "patch": "@@ -8,7 +8,7 @@ import path = path::path;\n import tuple::{tuple_ops, extended_tuple_ops};\n import str::{str_slice, unique_str};\n import vec::{const_vector, copyable_vector, immutable_vector};\n-import vec::{immutable_copyable_vector, iter_trait_extensions, vec_concat};\n+import vec::{immutable_copyable_vector, iter_trait_extensions};\n import iter::{base_iter, extended_iter, copyable_iter, times, timesi};\n import num::num;\n import ptr::ptr;\n@@ -21,7 +21,7 @@ export num, times, timesi;\n // The following exports are the common traits\n export str_slice, unique_str;\n export const_vector, copyable_vector, immutable_vector;\n-export immutable_copyable_vector, iter_trait_extensions, vec_concat;\n+export immutable_copyable_vector, iter_trait_extensions;\n export base_iter, copyable_iter, extended_iter;\n export tuple_ops, extended_tuple_ops;\n export ptr;"}, {"sha": "1f349b670024f1d6f8a32820c0a8485b52d370f6", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "patch": "@@ -256,12 +256,6 @@ impl<A: copy> dvec<A> {\n         }\n     }\n \n-    /// Copy out an individual element\n-    #[inline(always)]\n-    pure fn [](idx: uint) -> A {\n-        self.get_elt(idx)\n-    }\n-\n     /// Copy out an individual element\n     #[inline(always)]\n     pure fn get_elt(idx: uint) -> A {"}, {"sha": "6ce590c5ec98b7aa34e6a114107ef3c9accb2696", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "patch": "@@ -275,9 +275,6 @@ mod linear {\n             option::unwrap(value)\n         }\n \n-        fn [](k: &K) -> V {\n-            self.get(k)\n-        }\n     }\n \n     impl<K,V> &linear_map<K,V> {"}, {"sha": "8584d4f1524a8c266efc8b7e72b8813ff7d41c88", "filename": "src/libcore/str.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "patch": "@@ -1911,12 +1911,6 @@ impl ~str: unique_str {\n     /// Returns a string with trailing whitespace removed\n     #[inline]\n     fn trim_right() -> ~str { trim_right(self) }\n-\n-    /// Concatenate two strings: operator version\n-    #[inline(always)]\n-    pure fn +(rhs: &str) -> ~str {\n-        append(self, rhs)\n-    }\n }\n \n #[cfg(notest)]"}, {"sha": "fcda831d9051cd25b9cd110e81097ca425e3bcb3", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "patch": "@@ -1289,17 +1289,6 @@ pure fn as_mut_buf<T,U>(s: &[mut T],\n     }\n }\n \n-trait vec_concat<T> {\n-    pure fn +(rhs: &[const T]) -> self;\n-}\n-\n-impl<T: copy> ~[T]: vec_concat<T> {\n-    #[inline(always)]\n-    pure fn +(rhs: &[const T]) -> ~[T] {\n-        append(self, rhs)\n-    }\n-}\n-\n #[cfg(notest)]\n impl<T: copy> ~[T]: add<&[const T],~[T]> {\n     #[inline(always)]\n@@ -1308,13 +1297,6 @@ impl<T: copy> ~[T]: add<&[const T],~[T]> {\n     }\n }\n \n-impl<T: copy> ~[mut T]: vec_concat<T> {\n-    #[inline(always)]\n-    pure fn +(rhs: &[const T]) -> ~[mut T] {\n-        append_mut(self, rhs)\n-    }\n-}\n-\n impl<T: copy> ~[mut T]: add<&[const T],~[mut T]> {\n     #[inline(always)]\n     pure fn add(rhs: &[const T]) -> ~[mut T] {"}, {"sha": "ca58d6f5f867c7167d5e57d7ab76440a8964f7fb", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "patch": "@@ -42,16 +42,6 @@ type doc = {data: @~[u8], start: uint, end: uint};\n \n type tagged_doc = {tag: uint, doc: doc};\n \n-trait get_doc {\n-    fn [](tag: uint) -> doc;\n-}\n-\n-impl doc: get_doc {\n-    fn [](tag: uint) -> doc {\n-        get_doc(self, tag)\n-    }\n-}\n-\n impl doc: ops::index<uint,doc> {\n     pure fn index(&&tag: uint) -> doc {\n         unchecked {"}, {"sha": "57795e5d21c9bb263c95667cc854351a6c4d1e9e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "patch": "@@ -821,34 +821,12 @@ pure fn empty_span() -> span {\n \n // Convenience implementations\n \n-// Remove after snapshot!\n-trait path_concat {\n-    pure fn +(&&id: ident) -> @path;\n-}\n-\n-// Remove after snapshot!\n-impl ident: path_concat {\n-    pure fn +(&&id: ident) -> @path {\n-        simple_path(self, empty_span()) + id\n-    }\n-}\n-\n impl ident: ops::add<ident,@path> {\n     pure fn add(&&id: ident) -> @path {\n         simple_path(self, empty_span()) + id\n     }\n }\n \n-// Remove after snapshot!\n-impl @path: path_concat {\n-    pure fn +(&&id: ident) -> @path {\n-        @{\n-            idents: vec::append_one(self.idents, id)\n-            with *self\n-        }\n-    }\n-}\n-\n impl @path: ops::add<ident,@path> {\n     pure fn add(&&id: ident) -> @path {\n         @{"}, {"sha": "30f7243d76270c20dbab1b18eaa3bbd4d3a3b941", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "patch": "@@ -2391,22 +2391,7 @@ class parser {\n     }\n \n     fn parse_method_name() -> ident {\n-        match copy self.token {\n-          token::BINOP(op) => { self.bump(); @token::binop_to_str(op) }\n-          token::NOT => { self.bump(); @~\"!\" }\n-          token::LBRACKET => {\n-            self.bump();\n-            self.expect(token::RBRACKET);\n-            @~\"[]\"\n-          }\n-          _ => {\n-            let id = self.parse_value_ident();\n-            if id == @~\"unary\" && self.eat(token::BINOP(token::MINUS)) {\n-                @~\"unary-\"\n-            }\n-            else { id }\n-          }\n-        }\n+        self.parse_value_ident()\n     }\n \n     fn parse_method(pr: visibility) -> @method {"}, {"sha": "2d85a0fd296e4fc249a6cf0325573fbed8563165", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "patch": "@@ -1522,20 +1522,6 @@ fn remove_copyable(k: kind) -> kind {\n     k - kind_(KIND_MASK_COPY)\n }\n \n-impl kind {\n-    fn &(other: kind) -> kind {\n-        lower_kind(self, other)\n-    }\n-\n-    fn |(other: kind) -> kind {\n-        raise_kind(self, other)\n-    }\n-\n-    fn -(other: kind) -> kind {\n-        kind_(*self & !*other)\n-    }\n-}\n-\n impl kind: ops::bitand<kind,kind> {\n     pure fn bitand(other: kind) -> kind {\n         unchecked {"}, {"sha": "b77f645d13bc604ac449852123740b83eea26e0c", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b43c0c1add8d2caaa3c391d8d8daca2c609047e/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "patch": "@@ -53,7 +53,6 @@ class cat<T: copy> : map<int, T> {\n       none    => { fail ~\"epic fail\"; }\n     }\n   }\n-  fn [](&&k:int) -> T { self.get(k) }\n   fn find(+k:int) -> option<T> { if k <= self.meows {\n         some(self.name)\n      }"}]}