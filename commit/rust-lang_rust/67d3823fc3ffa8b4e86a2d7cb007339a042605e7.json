{"sha": "67d3823fc3ffa8b4e86a2d7cb007339a042605e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZDM4MjNmYzNmZmE4YjRlODZhMmQ3Y2IwMDczMzlhMDQyNjA1ZTc=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-12-17T15:16:10Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-12-18T21:20:32Z"}, "message": "enumset fallout", "tree": {"sha": "04212ce2abcc37dd8d803756451d9a77ac8fe070", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04212ce2abcc37dd8d803756451d9a77ac8fe070"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67d3823fc3ffa8b4e86a2d7cb007339a042605e7", "comment_count": 12, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67d3823fc3ffa8b4e86a2d7cb007339a042605e7", "html_url": "https://github.com/rust-lang/rust/commit/67d3823fc3ffa8b4e86a2d7cb007339a042605e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67d3823fc3ffa8b4e86a2d7cb007339a042605e7/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd", "html_url": "https://github.com/rust-lang/rust/commit/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd"}], "stats": {"total": 81, "additions": 13, "deletions": 68}, "files": [{"sha": "90e9973c3f302f9d8ae4c2882f7ea3a114ef9917", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67d3823fc3ffa8b4e86a2d7cb007339a042605e7/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d3823fc3ffa8b4e86a2d7cb007339a042605e7/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=67d3823fc3ffa8b4e86a2d7cb007339a042605e7", "patch": "@@ -36,6 +36,7 @@ extern crate rustc_llvm;\n extern crate rustc_back;\n extern crate serialize;\n extern crate rbml;\n+extern crate collections;\n #[phase(plugin, link)] extern crate log;\n #[phase(plugin, link)] extern crate syntax;\n "}, {"sha": "0ad07bed7d923869651d707349f557e18476bbcd", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d3823fc3ffa8b4e86a2d7cb007339a042605e7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d3823fc3ffa8b4e86a2d7cb007339a042605e7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=67d3823fc3ffa8b4e86a2d7cb007339a042605e7", "patch": "@@ -77,7 +77,7 @@ use std::hash::{Hash, sip, Writer};\n use std::mem;\n use std::ops;\n use std::rc::Rc;\n-use std::collections::enum_set::{EnumSet, CLike};\n+use collections::enum_set::{EnumSet, CLike};\n use std::collections::hash_map::{HashMap, Occupied, Vacant};\n use syntax::abi;\n use syntax::ast::{CrateNum, DefId, DUMMY_NODE_ID, Ident, ItemTrait, LOCAL_CRATE};"}, {"sha": "3d51a6d6ab0772a40812af631645e6071b032481", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d3823fc3ffa8b4e86a2d7cb007339a042605e7/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d3823fc3ffa8b4e86a2d7cb007339a042605e7/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=67d3823fc3ffa8b4e86a2d7cb007339a042605e7", "patch": "@@ -472,7 +472,7 @@ fn json_output(krate: clean::Crate, res: Vec<plugins::PluginJson> ,\n     //   \"crate\": { parsed crate ... },\n     //   \"plugins\": { output of plugins ... }\n     // }\n-    let mut json = std::collections::TreeMap::new();\n+    let mut json = std::collections::BTreeMap::new();\n     json.insert(\"schema\".to_string(), Json::String(SCHEMA_VERSION.to_string()));\n     let plugins_json = res.into_iter()\n                           .filter_map(|opt| {"}, {"sha": "f2d79b133469958d48a5a3d8b3519871b5f494c0", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 4, "deletions": 62, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/67d3823fc3ffa8b4e86a2d7cb007339a042605e7/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d3823fc3ffa8b4e86a2d7cb007339a042605e7/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=67d3823fc3ffa8b4e86a2d7cb007339a042605e7", "patch": "@@ -15,9 +15,8 @@ use std::default::Default;\n use std::hash::{Hash, Hasher};\n \n use {Decodable, Encodable, Decoder, Encoder};\n-use std::collections::{DList, RingBuf, BTreeMap, BTreeSet, HashMap, HashSet,\n-                       TrieMap, TrieSet, VecMap};\n-use std::collections::enum_set::{EnumSet, CLike};\n+use std::collections::{DList, RingBuf, BTreeMap, BTreeSet, HashMap, HashSet, VecMap};\n+use collections::enum_set::{EnumSet, CLike};\n \n impl<\n     E,\n@@ -98,7 +97,7 @@ impl<\n     K: Decodable<D, E> + PartialEq + Ord,\n     V: Decodable<D, E> + PartialEq\n > Decodable<D, E> for BTreeMap<K, V> {\n-    fn decode(d: &mut D) -> Result<TreeMap<K, V>, E> {\n+    fn decode(d: &mut D) -> Result<BTreeMap<K, V>, E> {\n         d.read_map(|d, len| {\n             let mut map = BTreeMap::new();\n             for i in range(0u, len) {\n@@ -133,7 +132,7 @@ impl<\n     D: Decoder<E>,\n     T: Decodable<D, E> + PartialEq + Ord\n > Decodable<D, E> for BTreeSet<T> {\n-    fn decode(d: &mut D) -> Result<TreeSet<T>, E> {\n+    fn decode(d: &mut D) -> Result<BTreeSet<T>, E> {\n         d.read_seq(|d, len| {\n             let mut set = BTreeSet::new();\n             for i in range(0u, len) {\n@@ -255,63 +254,6 @@ impl<\n     }\n }\n \n-impl<\n-    E,\n-    S: Encoder<E>,\n-    V: Encodable<S, E>\n-> Encodable<S, E> for TrieMap<V> {\n-    fn encode(&self, e: &mut S) -> Result<(), E> {\n-        e.emit_map(self.len(), |e| {\n-                for (i, (key, val)) in self.iter().enumerate() {\n-                    try!(e.emit_map_elt_key(i, |e| key.encode(e)));\n-                    try!(e.emit_map_elt_val(i, |e| val.encode(e)));\n-                }\n-                Ok(())\n-            })\n-    }\n-}\n-\n-impl<\n-    E,\n-    D: Decoder<E>,\n-    V: Decodable<D, E>\n-> Decodable<D, E> for TrieMap<V> {\n-    fn decode(d: &mut D) -> Result<TrieMap<V>, E> {\n-        d.read_map(|d, len| {\n-            let mut map = TrieMap::new();\n-            for i in range(0u, len) {\n-                let key = try!(d.read_map_elt_key(i, |d| Decodable::decode(d)));\n-                let val = try!(d.read_map_elt_val(i, |d| Decodable::decode(d)));\n-                map.insert(key, val);\n-            }\n-            Ok(map)\n-        })\n-    }\n-}\n-\n-impl<E, S: Encoder<E>> Encodable<S, E> for TrieSet {\n-    fn encode(&self, s: &mut S) -> Result<(), E> {\n-        s.emit_seq(self.len(), |s| {\n-                for (i, e) in self.iter().enumerate() {\n-                    try!(s.emit_seq_elt(i, |s| e.encode(s)));\n-                }\n-                Ok(())\n-            })\n-    }\n-}\n-\n-impl<E, D: Decoder<E>> Decodable<D, E> for TrieSet {\n-    fn decode(d: &mut D) -> Result<TrieSet, E> {\n-        d.read_seq(|d, len| {\n-            let mut set = TrieSet::new();\n-            for i in range(0u, len) {\n-                set.insert(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));\n-            }\n-            Ok(set)\n-        })\n-    }\n-}\n-\n impl<\n     E,\n     S: Encoder<E>,"}, {"sha": "e700d102fefda92ced017bf4fe73843ffd33922c", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d3823fc3ffa8b4e86a2d7cb007339a042605e7/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d3823fc3ffa8b4e86a2d7cb007339a042605e7/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=67d3823fc3ffa8b4e86a2d7cb007339a042605e7", "patch": "@@ -33,6 +33,8 @@ extern crate test;\n #[phase(plugin, link)]\n extern crate log;\n \n+extern crate collections;\n+\n pub use self::serialize::{Decoder, Encoder, Decodable, Encodable,\n                           DecoderHelpers, EncoderHelpers};\n "}, {"sha": "d786409e895b299cd0cea252ae3cf5769cf8e924", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67d3823fc3ffa8b4e86a2d7cb007339a042605e7/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d3823fc3ffa8b4e86a2d7cb007339a042605e7/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=67d3823fc3ffa8b4e86a2d7cb007339a042605e7", "patch": "@@ -49,7 +49,7 @@ use self::NamePadding::*;\n use self::OutputLocation::*;\n \n use std::any::{Any, AnyRefExt};\n-use std::collections::TreeMap;\n+use std::collections::BTreeMap;\n use stats::Stats;\n use getopts::{OptGroup, optflag, optopt};\n use regex::Regex;\n@@ -230,7 +230,7 @@ impl Metric {\n }\n \n #[deriving(PartialEq)]\n-pub struct MetricMap(TreeMap<String,Metric>);\n+pub struct MetricMap(BTreeMap<String,Metric>);\n \n impl Clone for MetricMap {\n     fn clone(&self) -> MetricMap {\n@@ -1191,7 +1191,7 @@ fn calc_result(desc: &TestDesc, task_result: Result<(), Box<Any+Send>>) -> TestR\n impl MetricMap {\n \n     pub fn new() -> MetricMap {\n-        MetricMap(TreeMap::new())\n+        MetricMap(BTreeMap::new())\n     }\n \n     /// Load MetricDiff from a file."}, {"sha": "24480d85272059a405ddeed726c2c8dcdd623c64", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d3823fc3ffa8b4e86a2d7cb007339a042605e7/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d3823fc3ffa8b4e86a2d7cb007339a042605e7/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=67d3823fc3ffa8b4e86a2d7cb007339a042605e7", "patch": "@@ -10,7 +10,7 @@\n \n extern crate collections;\n \n-use self::collections::TreeMap;\n+use self::collections::BTreeMap;\n use std::option::Option::Some;\n use std::str::SendStr;\n use std::string::ToString;"}]}