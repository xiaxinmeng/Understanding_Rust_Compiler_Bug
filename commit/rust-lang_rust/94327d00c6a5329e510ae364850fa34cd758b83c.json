{"sha": "94327d00c6a5329e510ae364850fa34cd758b83c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MzI3ZDAwYzZhNTMyOWU1MTBhZTM2NDg1MGZhMzRjZDc1OGI4M2M=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T00:29:49Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T00:31:35Z"}, "message": "librustc: Replace the `&static` bound with `'static`", "tree": {"sha": "af3b1490b1b9093e2257c0bf92442717499fe0c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af3b1490b1b9093e2257c0bf92442717499fe0c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94327d00c6a5329e510ae364850fa34cd758b83c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94327d00c6a5329e510ae364850fa34cd758b83c", "html_url": "https://github.com/rust-lang/rust/commit/94327d00c6a5329e510ae364850fa34cd758b83c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94327d00c6a5329e510ae364850fa34cd758b83c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02c49b32caaf9ed23a347ede9ea47743717e94d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/02c49b32caaf9ed23a347ede9ea47743717e94d7", "html_url": "https://github.com/rust-lang/rust/commit/02c49b32caaf9ed23a347ede9ea47743717e94d7"}], "stats": {"total": 117, "additions": 60, "deletions": 57}, "files": [{"sha": "ef8857d444a527c87270d4e9f867ce3a1bb03307", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=94327d00c6a5329e510ae364850fa34cd758b83c", "patch": "@@ -376,7 +376,7 @@ pub fn check_bounds(cx: Context,\n \n             ty::bound_durable => {\n                 if !kind.is_durable(cx.tcx) {\n-                    missing.push(\"&static\");\n+                    missing.push(\"'static\");\n                 }\n             }\n \n@@ -467,7 +467,7 @@ pub fn check_durable(tcx: ty::ctxt, ty: ty::t, sp: span) -> bool {\n         match ty::get(ty).sty {\n           ty::ty_param(*) => {\n             tcx.sess.span_err(sp, ~\"value may contain borrowed \\\n-                                    pointers; use `&static` bound\");\n+                                    pointers; use `'static` bound\");\n           }\n           _ => {\n             tcx.sess.span_err(sp, ~\"value may contain borrowed \\"}, {"sha": "7b27063ae0dba8a1dd01a35c475caf03bfe90cc1", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=94327d00c6a5329e510ae364850fa34cd758b83c", "patch": "@@ -1394,7 +1394,7 @@ pub fn substs_to_str(cx: ctxt, substs: &substs) -> ~str {\n pub fn param_bound_to_str(cx: ctxt, pb: &param_bound) -> ~str {\n     match *pb {\n         bound_copy => ~\"copy\",\n-        bound_durable => ~\"&static\",\n+        bound_durable => ~\"'static\",\n         bound_owned => ~\"owned\",\n         bound_const => ~\"const\",\n         bound_trait(t) => ::util::ppaux::ty_to_str(cx, t)"}, {"sha": "6c942acc34dc4d53db2bd813f1c68c4d77e2dfe5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 40, "deletions": 37, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=94327d00c6a5329e510ae364850fa34cd758b83c", "patch": "@@ -2704,49 +2704,52 @@ pub impl Parser {\n \n         let mut result = opt_vec::Empty;\n         loop {\n-            if self.eat(&token::BINOP(token::AND)) {\n-                if self.eat_keyword(&~\"static\") {\n-                    result.push(RegionTyParamBound);\n-                } else {\n-                    self.span_err(*self.span,\n-                                  ~\"`&static` is the only permissible \\\n-                                    region bound here\");\n+            match *self.token {\n+                token::LIFETIME(lifetime) => {\n+                    if str::eq_slice(*self.id_to_str(lifetime), \"static\") {\n+                        result.push(RegionTyParamBound);\n+                    } else {\n+                        self.span_err(*self.span,\n+                                      ~\"`'static` is the only permissible \\\n+                                        region bound here\");\n+                    }\n+                    self.bump();\n                 }\n-            } else if is_ident(&*self.token) {\n-                let maybe_bound = match *self.token {\n-                    token::IDENT(copy sid, _) => {\n-                        match *self.id_to_str(sid) {\n-                            ~\"send\" |\n-                            ~\"copy\" |\n-                            ~\"const\" |\n-                            ~\"owned\" => {\n-                                self.obsolete(\n-                                    *self.span,\n-                                    ObsoleteLowerCaseKindBounds);\n-\n-                                // Bogus value, but doesn't matter, since\n-                                // is an error\n-                                Some(TraitTyParamBound(\n-                                    self.mk_ty_path(sid)))\n+                token::IDENT(*) => {\n+                    let maybe_bound = match *self.token {\n+                        token::IDENT(copy sid, _) => {\n+                            match *self.id_to_str(sid) {\n+                                ~\"send\" |\n+                                ~\"copy\" |\n+                                ~\"const\" |\n+                                ~\"owned\" => {\n+                                    self.obsolete(\n+                                        *self.span,\n+                                        ObsoleteLowerCaseKindBounds);\n+\n+                                    // Bogus value, but doesn't matter, since\n+                                    // is an error\n+                                    Some(TraitTyParamBound(\n+                                        self.mk_ty_path(sid)))\n+                                }\n+                                _ => None\n                             }\n-                            _ => None\n                         }\n-                    }\n-                    _ => fail!()\n-                };\n+                        _ => fail!()\n+                    };\n \n-                match maybe_bound {\n-                    Some(bound) => {\n-                        self.bump();\n-                        result.push(bound);\n-                    }\n-                    None => {\n-                        let ty = self.parse_ty(false);\n-                        result.push(TraitTyParamBound(ty));\n+                    match maybe_bound {\n+                        Some(bound) => {\n+                            self.bump();\n+                            result.push(bound);\n+                        }\n+                        None => {\n+                            let ty = self.parse_ty(false);\n+                            result.push(TraitTyParamBound(ty));\n+                        }\n                     }\n                 }\n-            } else {\n-                break;\n+                _ => break,\n             }\n \n             if self.eat(&token::BINOP(token::PLUS)) {"}, {"sha": "9b6438033f8c09b5d77fb58a69f49e8451322de4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=94327d00c6a5329e510ae364850fa34cd758b83c", "patch": "@@ -1755,7 +1755,7 @@ pub fn print_bounds(s: @ps, bounds: @OptVec<ast::TyParamBound>) {\n \n             match *bound {\n                 TraitTyParamBound(ty) => print_type(s, ty),\n-                RegionTyParamBound => word(s.s, ~\"&static\"),\n+                RegionTyParamBound => word(s.s, ~\"'static\"),\n             }\n         }\n     }"}, {"sha": "34ceb67f24343056249d2c5add72d6a475c429e6", "filename": "src/test/compile-fail/kindck-owned-trait-scoped.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs?ref=94327d00c6a5329e510ae364850fa34cd758b83c", "patch": "@@ -37,10 +37,10 @@ fn to_foo_2<T:Copy>(t: T) -> @foo {\n     // Not OK---T may contain borrowed ptrs and it is going to escape\n     // as part of the returned foo value\n     struct F<T> { f: T }\n-    @F {f:t} as @foo //~ ERROR value may contain borrowed pointers; use `&static` bound\n+    @F {f:t} as @foo //~ ERROR value may contain borrowed pointers; use `'static` bound\n }\n \n-fn to_foo_3<T:Copy + &static>(t: T) -> @foo {\n+fn to_foo_3<T:Copy + 'static>(t: T) -> @foo {\n     // OK---T may escape as part of the returned foo value, but it is\n     // owned and hence does not contain borrowed ptrs\n     struct F<T> { f: T }"}, {"sha": "c61bbc69be51989e82e993dd8774f3b406df9a83", "filename": "src/test/compile-fail/kindck-owned-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs?ref=94327d00c6a5329e510ae364850fa34cd758b83c", "patch": "@@ -11,10 +11,10 @@\n trait foo { fn foo(&self); }\n \n fn to_foo<T:Copy + foo>(t: T) -> @foo {\n-    @t as @foo //~ ERROR value may contain borrowed pointers; use `&static` bound\n+    @t as @foo //~ ERROR value may contain borrowed pointers; use `'static` bound\n }\n \n-fn to_foo2<T:Copy + foo + &static>(t: T) -> @foo {\n+fn to_foo2<T:Copy + foo + 'static>(t: T) -> @foo {\n     @t as @foo\n }\n "}, {"sha": "27cc07ed123ba1f1f1e69cdd0d5d5795aad21f74", "filename": "src/test/compile-fail/kindck-owned.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs?ref=94327d00c6a5329e510ae364850fa34cd758b83c", "patch": "@@ -13,22 +13,22 @@ fn copy1<T:Copy>(t: T) -> @fn() -> T {\n     result\n }\n \n-fn copy2<T:Copy + &static>(t: T) -> @fn() -> T {\n+fn copy2<T:Copy + 'static>(t: T) -> @fn() -> T {\n     let result: @fn() -> T = || t;\n     result\n }\n \n fn main() {\n     let x = &3;\n-    copy2(&x); //~ ERROR does not fulfill `&static`\n+    copy2(&x); //~ ERROR does not fulfill `'static`\n \n     copy2(@3);\n-    copy2(@&x); //~ ERROR does not fulfill `&static`\n+    copy2(@&x); //~ ERROR does not fulfill `'static`\n \n     let boxed: @fn() = || {};\n     copy2(boxed);\n     let owned: ~fn() = || {};\n     copy2(owned);    //~ ERROR does not fulfill `Copy`\n     let borrowed: &fn() = || {};\n-    copy2(borrowed); //~ ERROR does not fulfill `&static`\n+    copy2(borrowed); //~ ERROR does not fulfill `'static`\n }"}, {"sha": "500a5b0c8bcbcdf00059d65896e6fccada7f19a1", "filename": "src/test/compile-fail/static-region-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs?ref=94327d00c6a5329e510ae364850fa34cd758b83c", "patch": "@@ -1,4 +1,4 @@\n-fn f<T:&static>(_: T) {}\n+fn f<T:'static>(_: T) {}\n \n fn main() {\n     let x = @3;"}, {"sha": "f9ba6ed7f5438498626ea03ab7526fa0e72099a1", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=94327d00c6a5329e510ae364850fa34cd758b83c", "patch": "@@ -12,7 +12,7 @@ struct pair<A,B> {\n     a: A, b: B\n }\n \n-fn f<A:Copy + &static>(a: A, b: u16) -> @fn() -> (A, u16) {\n+fn f<A:Copy + 'static>(a: A, b: u16) -> @fn() -> (A, u16) {\n     let result: @fn() -> (A, u16) = || (a, b);\n     result\n }"}, {"sha": "5a853d9fe21d91fbd1f19544fa4da71a17361353", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=94327d00c6a5329e510ae364850fa34cd758b83c", "patch": "@@ -16,7 +16,7 @@ struct Pair<A,B> {\n     a: A, b: B\n }\n \n-fn f<A:Copy + &static>(a: A, b: u16) -> @fn() -> (A, u16) {\n+fn f<A:Copy + 'static>(a: A, b: u16) -> @fn() -> (A, u16) {\n     let result: @fn() -> (A, u16) = || (a, b);\n     result\n }"}, {"sha": "d79cd36d8fc07810fdb507d7e8ca007c4cb34c65", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=94327d00c6a5329e510ae364850fa34cd758b83c", "patch": "@@ -10,11 +10,11 @@\n \n // xfail-fast\n \n-fn fix_help<A:&static,B:Owned>(f: extern fn(@fn(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A:'static,B:Owned>(f: extern fn(@fn(A) -> B, A) -> B, x: A) -> B {\n     return f(|a| fix_help(f, a), x);\n }\n \n-fn fix<A:&static,B:Owned>(f: extern fn(@fn(A) -> B, A) -> B) -> @fn(A) -> B {\n+fn fix<A:'static,B:Owned>(f: extern fn(@fn(A) -> B, A) -> B) -> @fn(A) -> B {\n     return |a| fix_help(f, a);\n }\n "}, {"sha": "7125e89287cbd672b973810e31dc739c3792495f", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=94327d00c6a5329e510ae364850fa34cd758b83c", "patch": "@@ -11,7 +11,7 @@\n trait hax { } \n impl<A> hax for A { } \n \n-fn perform_hax<T:&static>(x: @T) -> @hax {\n+fn perform_hax<T:'static>(x: @T) -> @hax {\n     @x as @hax\n }\n "}, {"sha": "9a5a366c74473ebd4ea4204eb6b95fc1cf955d17", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=94327d00c6a5329e510ae364850fa34cd758b83c", "patch": "@@ -11,7 +11,7 @@\n trait hax { }\n impl<A> hax for A { }\n \n-fn perform_hax<T:&static>(x: @T) -> @hax {\n+fn perform_hax<T:'static>(x: @T) -> @hax {\n     @x as @hax\n }\n "}, {"sha": "49c8d27814c0e9d93888153bc053d72ed0e0cc1e", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94327d00c6a5329e510ae364850fa34cd758b83c/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=94327d00c6a5329e510ae364850fa34cd758b83c", "patch": "@@ -59,7 +59,7 @@ fn square_from_char(c: char) -> square {\n     }\n }\n \n-fn read_board_grid<rdr: &static + io::Reader>(+in: rdr) -> ~[~[square]] {\n+fn read_board_grid<rdr:'static + io::Reader>(+in: rdr) -> ~[~[square]] {\n     let in = @in as @io::Reader;\n     let mut grid = ~[];\n     for in.each_line |line| {"}]}