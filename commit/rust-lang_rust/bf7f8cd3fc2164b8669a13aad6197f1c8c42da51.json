{"sha": "bf7f8cd3fc2164b8669a13aad6197f1c8c42da51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmN2Y4Y2QzZmMyMTY0Yjg2NjlhMTNhYWQ2MTk3ZjFjOGM0MmRhNTE=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-10-22T16:35:28Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T13:08:18Z"}, "message": "Added README explaining the refactoring", "tree": {"sha": "41ee94da489b27b7f5a63dbbfbb35ce0f462e3e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41ee94da489b27b7f5a63dbbfbb35ce0f462e3e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf7f8cd3fc2164b8669a13aad6197f1c8c42da51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7f8cd3fc2164b8669a13aad6197f1c8c42da51", "html_url": "https://github.com/rust-lang/rust/commit/bf7f8cd3fc2164b8669a13aad6197f1c8c42da51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf7f8cd3fc2164b8669a13aad6197f1c8c42da51/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9e5cf99a9acd9c29d02c2f27c0eb223fd0a92be", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9e5cf99a9acd9c29d02c2f27c0eb223fd0a92be", "html_url": "https://github.com/rust-lang/rust/commit/b9e5cf99a9acd9c29d02c2f27c0eb223fd0a92be"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "2178c2279563e0eadfad9ed8a5381b60e20a6fee", "filename": "src/librustc_codegen_ssa/README.md", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/bf7f8cd3fc2164b8669a13aad6197f1c8c42da51/src%2Flibrustc_codegen_ssa%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/bf7f8cd3fc2164b8669a13aad6197f1c8c42da51/src%2Flibrustc_codegen_ssa%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FREADME.md?ref=bf7f8cd3fc2164b8669a13aad6197f1c8c42da51", "patch": "@@ -0,0 +1,121 @@\n+# Refactoring of `rustc_codegen_llvm`\n+by Denis Merigoux, October 23rd 2018\n+\n+## State of the code before the refactoring\n+\n+All the code related to the compilation of MIR into LLVM IR was contained inside the `rustc_codegen_llvm` crate. Here is the breakdown of the most important elements:\n+* the `back` folder (7,800 LOC) implements the mechanisms for creating the different object files and archive through LLVM, but also the communication mechanisms for parallel code generation;\n+* the `debuginfo` (3,200 LOC) folder contains all code that passes debug information down to LLVM;\n+* the `llvm` (2,200 LOC) folder defines the FFI necessary to communicate with LLVM using the C++ API;\n+* the `mir` (4,300 LOC) folder implements the actual lowering from MIR to LLVM IR;\n+* the `base.rs` (1,300 LOC) file contains some helper functions but also the high-level code that launches the code generation and distributes the work.\n+* the `builder.rs` (1,200 LOC) file contains all the functions generating individual LLVM IR instructions inside a basic block;\n+* the `common.rs` (450 LOC) contains various helper functions and all the functions generating LLVM static values;\n+* the `type_.rs` (300 LOC) defines most of the type translations to LLVM IR.\n+\n+The goal of this refactoring is to separate inside this crate code that is specific to the LLVM from code that can be reused for other rustc backends. For instance, the `mir` folder is almost entirely backend-specific but it relies heavily on other parts of the crate. The separation of the code must not affect the logic of the code nor its performance.\n+\n+For these reasons, the separation process involves two transformations that have to be done at the same time for the resulting code to compile :\n+\n+1. replace all the LLVM-specific types by generics inside function signatures and structure definitions;\n+2. encapsulate all functions calling the LLVM FFI inside a set of traits that will define the interface between backend-agnostic code and the backend.\n+\n+While the LLVM-specific code will be left in `rustc_codegen_llvm`, all the new interfaces and backend-agnostic code will be moved in `rustc_codegen_ssa` (name suggestion by @eddyb).\n+\n+## Generic types and structures\n+\n+@irinagpopa started to parametrize the types of `rustc_codegen_llvm` by a generic `Value` type, implemented in LLVM by a reference `&'ll Value`. This work has been extended to all structures inside the `mir` folder and elsewhere, as well as for LLVM's `BasicBlock` and `Type` types.\n+\n+The two most important structures for the LLVM codegen are `CodegenCx` and `Builder`. They are parametrized by multiple liftime parameters and the type for `Value`.\n+\n+```rust\n+struct CodegenCx<'ll, 'tcx: 'll, V: 'll = &'ll Value> {\n+  /* ... */\n+}\n+\n+struct Builder<'a, 'll: 'a, 'tcx: 'll, V: 'll = &'ll Value> {\n+  cx: &'a CodegenCx<'ll, 'tcx, V>,\n+  /* ... */\n+}\n+```\n+\n+`CodegenCx` is used to compile one codegen-unit that can contain multiple functions, whereas `Builder` is created to compile one basic block.\n+\n+The code in `rustc_codegen_llvm` has to deal with multiple explicit lifetime parameters, that correspond to the following:\n+* `'tcx` is the longest lifetime, that corresponds to the original `TyCtxt` containing the program's information;\n+* `'a` is a short-lived reference of a `CodegenCx` or another object inside a struct;\n+* `'ll` is the lifetime of references to LLVM objects such as `Value` or `Type`.\n+\n+Although there are already many lifetime parameters in the code, making it generic uncovered situations where the borrow-checker was passing only due to the special nature of the LLVM objects manipulated (they are extern pointers). For instance, a additional lifetime parameter had to be added to `LocalAnalyser` in `analyse.rs`, leading to the definition:\n+\n+```rust\n+struct LocalAnalyzer<'mir, 'a: 'mir, 'tcx: 'a> {\n+  /* ... */\n+}\n+```\n+\n+However, the two most important structures `CodegenCx` and `Builder` are not defined in the backend-agnostic code. Indeed, their content is highly specific of the backend and it makes more sense to leave their definition to the backend implementor than to allow just a narrow spot via a generic field for the backend's context.\n+\n+## Traits and interface\n+\n+Because they have to be defined by the backend, `CodegenCx` and `Builder` will be the structures implementing all the traits defining the backend's interface. These traits are defined in the folder `rustc_codegen_ssa/interfaces` and all the backend-agnostic code is parametrized by them. For instance, let us explain how a function in `base.rs` is parametrized:\n+\n+```rust\n+pub fn codegen_instance<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+    cx: &'a Bx::CodegenCx,\n+    instance: Instance<'tcx>\n+) {\n+    /* ... */\n+}\n+```\n+\n+In this signature, we have the two lifetime parameters explained earlier and the master type `Bx` which satisfies the trait `BuilderMethods` corresponding to the interface satisfied by the `Builder` struct. The `BuilderMethods` defines an associated type `Bx::CodegenCx` that itself satisfies the `CodegenMethods` traits implemented by the struct `CodegenCx`.\n+\n+On the trait side, here is an example with part of the definition of `BuilderMethods` in `interfaces/builder.rs`:\n+\n+```rust\n+pub trait BuilderMethods<'a, 'tcx: 'a>:\n+    HasCodegen<'tcx>\n+    + DebugInfoBuilderMethods<'tcx>\n+    + ArgTypeMethods<'tcx>\n+    + AbiBuilderMethods<'tcx>\n+    + IntrinsicCallMethods<'tcx>\n+    + AsmBuilderMethods<'tcx>\n+{\n+    fn new_block<'b>(\n+        cx: &'a Self::CodegenCx,\n+        llfn: Self::Value,\n+        name: &'b str\n+    ) -> Self;\n+    /* ... */\n+    fn cond_br(\n+        &mut self,\n+        cond: Self::Value,\n+        then_llbb: Self::BasicBlock,\n+        else_llbb: Self::BasicBlock,\n+    );\n+    /* ... */\n+}\n+```\n+\n+Finally, a master structure implementing the `ExtraBackendMethods` trait is used for high-level codegen-driving functions like `codegen_crate` in `base.rs`. For LLVM, it is the empty `LlvmCodegenBackend`. `ExtraBackendMethods` should be implemented by the same structure that implements the `CodegenBackend` defined in `rustc_codegen_utils/codegen_backend.rs`.\n+\n+During the traitification process, certain functions have been converted from methods of a local structure to methods of `CodegenCx` or `Builder` and a corresponding `self` parameter has been added. Indeed, LLVM stores information internally that it can access when called through its API. This information does not show up in a Rust data structure carried around when these methods are called. However, when implementing a Rust backend for `rustc`, these methods will need information from `CodegenCx`, hence the additional parameter (unused in the LLVM implementation of the trait).\n+\n+## State of the code after the refactoring\n+\n+The traits offer an API which is very similar to the API of LLVM. This is not the best solution since LLVM has a very special way of doing things: when addding another backend, the traits definition might be changed in order to offer more flexibility.\n+\n+However, the current separation between backend-agnostic and LLVM-specific code has allows the reuse of a significant part of the old `rustc_codegen_llvm`. Here is the new LOC breakdown between backend-agnostic (BA) and LLVM for the most important elements:\n+\n+* `back` folder: 3,800 (BA) vs 4,100 (LLVM);\n+* `mir` folder: 4,400 (BA) vs 0 (LLVM);\n+* `base.rs`: 1,100 (BA) vs 250 (LLVM);\n+* `builder.rs`: 1,400 (BA) vs 0 (LLVM);\n+* `common.rs`: 350 (BA) vs 350 (LLVM);\n+\n+The `debuginfo` folder has been left almost untouched by the splitting and is specific to LLVM. Only its high-level features have been traitified.\n+\n+The new `interfaces` folder has 1500 LOC only for trait definitions. Overall, the 27,000 LOC-sized old `rustc_codegen_llvm` code has been split into the new 18,500 LOC-sized new `rustc_codegen_llvm` and the 12,000 LOC-sized `rustc_codegen_ssa`. We can say that this refactoring allowed the reuse of approximately 10,000 LOC that would otherwise have had to be duplicated between the multiple backends of `rustc`.\n+\n+The refactored version of `rustc`'s backend introduced no regression over the test suite nor in performance benchmark, which is in coherence with the nature of the refactoring that used only compile-time parametricity (no trait objects)."}]}