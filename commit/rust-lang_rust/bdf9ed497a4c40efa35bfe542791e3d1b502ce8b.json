{"sha": "bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "node_id": "C_kwDOAAsO6NoAKGJkZjllZDQ5N2E0YzQwZWZhMzViZmU1NDI3OTFlM2QxYjUwMmNlOGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-03T18:38:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-03T18:38:11Z"}, "message": "Rollup merge of #111878 - ferrocene:pa-codegen-tests, r=Mark-Simulacrum\n\nFix codegen test suite for bare-metal-like targets\n\nFor Ferrocene I needed to run the test suite for custom target with no unwinding and static relocation. Running the tests uncovered ~20 failures due to the test suite not accounting for these options. This PR fixes them by:\n\n* Fixing `CHECK`s to account for functions having extra LLVM IR attributes (in this case `nounwind`).\n* Fixing `CHECK`s to account for the `dso_local` LLVM IR modifier, which is [added to every item when relocation is static](https://github.com/rust-lang/rust/blob/f3d597b31c0f101a02c230798afa31a36bdacbc6/compiler/rustc_codegen_llvm/src/mono_item.rs#L139-L142).\n* Fixing `CHECK`s to account for missing `uwtables` attributes.\n* Added the `needs-unwind` attributes for tests that are designed to check unwinding.\n\nThere is no part of Rust CI that checks this unfortunately, and testing whether the PR works locally is kinda hard because you need a target with std enabled but no unwinding and static relocations. Still, this works in my local testing, and if future PRs accidentally break this Ferrocene will take care of sending followup PRs.", "tree": {"sha": "073afa0d88e4dcda4308714f7db08bc116420ee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/073afa0d88e4dcda4308714f7db08bc116420ee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJke4iTCRBK7hj4Ov3rIwAAsBYIAAMpZLlGxqCKhUmZKWRMVJ2W\n/UmWseIqidsT58Cz9As6HRQ5Fzt9EaKk4yydQ5XaMMqacIgGcGkh0dBKOWcYn4DH\n/TRtJFcqjctM7YQu/2u5vPdkZIed4nLCkKLLyprONFxuIhRUaGykzoy2pwoHE+E6\nLCfxBybBtlA+26Cx2Yi/625Qkwmq5Ko40JqW6hPrF5E6fnCncN3Y4E5HgO6sIGo2\nviiIhTMdXluVQgX8D61p/XZuFXRbVGIcRBKdP4FMq6CFLbgSIEsH+ktQLfyNrB1L\nJmd8ek+OZcOO/NBx96dyG92PVr4mSyH11x6+Tf2iObPxivxTTTg3qywT756k5RE=\n=oH8c\n-----END PGP SIGNATURE-----\n", "payload": "tree 073afa0d88e4dcda4308714f7db08bc116420ee0\nparent 6e024ecab8e31eca146a2a80081f0606b693a802\nparent 5f0b677b86204c4cd98cf51b33b7224340406719\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685817491 +0200\ncommitter GitHub <noreply@github.com> 1685817491 +0200\n\nRollup merge of #111878 - ferrocene:pa-codegen-tests, r=Mark-Simulacrum\n\nFix codegen test suite for bare-metal-like targets\n\nFor Ferrocene I needed to run the test suite for custom target with no unwinding and static relocation. Running the tests uncovered ~20 failures due to the test suite not accounting for these options. This PR fixes them by:\n\n* Fixing `CHECK`s to account for functions having extra LLVM IR attributes (in this case `nounwind`).\n* Fixing `CHECK`s to account for the `dso_local` LLVM IR modifier, which is [added to every item when relocation is static](https://github.com/rust-lang/rust/blob/f3d597b31c0f101a02c230798afa31a36bdacbc6/compiler/rustc_codegen_llvm/src/mono_item.rs#L139-L142).\n* Fixing `CHECK`s to account for missing `uwtables` attributes.\n* Added the `needs-unwind` attributes for tests that are designed to check unwinding.\n\nThere is no part of Rust CI that checks this unfortunately, and testing whether the PR works locally is kinda hard because you need a target with std enabled but no unwinding and static relocations. Still, this works in my local testing, and if future PRs accidentally break this Ferrocene will take care of sending followup PRs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "html_url": "https://github.com/rust-lang/rust/commit/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e024ecab8e31eca146a2a80081f0606b693a802", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e024ecab8e31eca146a2a80081f0606b693a802", "html_url": "https://github.com/rust-lang/rust/commit/6e024ecab8e31eca146a2a80081f0606b693a802"}, {"sha": "5f0b677b86204c4cd98cf51b33b7224340406719", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f0b677b86204c4cd98cf51b33b7224340406719", "html_url": "https://github.com/rust-lang/rust/commit/5f0b677b86204c4cd98cf51b33b7224340406719"}], "stats": {"total": 119, "additions": 64, "deletions": 55}, "files": [{"sha": "c9f88fb3fe4525067740cec5ad29014a8ff6f5fd", "filename": "tests/codegen/box-maybe-uninit-llvm14.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -31,4 +31,4 @@ pub fn box_uninitialized2() -> Box<MaybeUninit<[usize; 1024 * 1024]>> {\n // Hide the LLVM 15+ `allocalign` attribute in the declaration of __rust_alloc\n // from the CHECK-NOT above. We don't check the attributes here because we can't rely\n // on all of them being set until LLVM 15.\n-// CHECK: declare noalias{{.*}} @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+.*}} noundef)\n+// CHECK: declare {{(dso_local )?}}noalias{{.*}} @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+.*}} noundef)"}, {"sha": "5c08b5832ad80163236cf4bc3278cf6119c8f87d", "filename": "tests/codegen/box-maybe-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fbox-maybe-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fbox-maybe-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fbox-maybe-uninit.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -28,6 +28,6 @@ pub fn box_uninitialized2() -> Box<MaybeUninit<[usize; 1024 * 1024]>> {\n \n // Hide the `allocalign` attribute in the declaration of __rust_alloc\n // from the CHECK-NOT above, and also verify the attributes got set reasonably.\n-// CHECK: declare noalias noundef ptr @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+}} allocalign noundef) unnamed_addr [[RUST_ALLOC_ATTRS:#[0-9]+]]\n+// CHECK: declare {{(dso_local )?}}noalias noundef ptr @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+}} allocalign noundef) unnamed_addr [[RUST_ALLOC_ATTRS:#[0-9]+]]\n \n-// CHECK-DAG: attributes [[RUST_ALLOC_ATTRS]] = { {{.*}} allockind(\"alloc,uninitialized,aligned\") allocsize(0) uwtable \"alloc-family\"=\"__rust_alloc\" {{.*}} }\n+// CHECK-DAG: attributes [[RUST_ALLOC_ATTRS]] = { {{.*}} allockind(\"alloc,uninitialized,aligned\") allocsize(0) {{(uwtable )?}}\"alloc-family\"=\"__rust_alloc\" {{.*}} }"}, {"sha": "07cc0c963717e6920edc4023368f3857c543e64f", "filename": "tests/codegen/call-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fcall-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fcall-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcall-metadata.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -6,7 +6,7 @@\n #![crate_type = \"lib\"]\n \n pub fn test() {\n-    // CHECK: call noundef i8 @some_true(), !range [[R0:![0-9]+]]\n+    // CHECK: call noundef i8 @some_true(){{( #[0-9]+)?}}, !range [[R0:![0-9]+]]\n     // CHECK: [[R0]] = !{i8 0, i8 3}\n     some_true();\n }"}, {"sha": "f3b19a2eb2f42318f56149adf322d11d078dabd8", "filename": "tests/codegen/debug-column.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fdebug-column.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fdebug-column.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fdebug-column.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -6,11 +6,11 @@\n fn main() {\n     unsafe {\n         // Column numbers are 1-based. Regression test for #65437.\n-        // CHECK: call void @giraffe(), !dbg [[A:!.*]]\n+        // CHECK: call void @giraffe(){{( #[0-9]+)?}}, !dbg [[A:!.*]]\n         giraffe();\n \n         // Column numbers use byte offests. Regression test for #67360\n-        // CHECK: call void @turtle(), !dbg [[B:!.*]]\n+        // CHECK: call void @turtle(){{( #[0-9]+)?}}, !dbg [[B:!.*]]\n /* \u017c */ turtle();\n \n         // CHECK: [[A]] = !DILocation(line: 10, column: 9,"}, {"sha": "3615ef47b531ba9048129a4c8c8ea36c4192e45f", "filename": "tests/codegen/drop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fdrop.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -1,4 +1,5 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n+// needs-unwind - this test verifies the amount of drop calls when unwinding is used\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "48023a2a901cd3b13dfe16dee2713dd171475beb", "filename": "tests/codegen/external-no-mangle-statics.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fexternal-no-mangle-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fexternal-no-mangle-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fexternal-no-mangle-statics.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -6,72 +6,72 @@\n // `#[no_mangle]`d static variables always have external linkage, i.e., no `internal` in their\n // definitions\n \n-// CHECK: @A = local_unnamed_addr constant\n+// CHECK: @A = {{(dso_local )?}}local_unnamed_addr constant\n #[no_mangle]\n static A: u8 = 0;\n \n-// CHECK: @B = local_unnamed_addr global\n+// CHECK: @B = {{(dso_local )?}}local_unnamed_addr global\n #[no_mangle]\n static mut B: u8 = 0;\n \n-// CHECK: @C = local_unnamed_addr constant\n+// CHECK: @C = {{(dso_local )?}}local_unnamed_addr constant\n #[no_mangle]\n pub static C: u8 = 0;\n \n-// CHECK: @D = local_unnamed_addr global\n+// CHECK: @D = {{(dso_local )?}}local_unnamed_addr global\n #[no_mangle]\n pub static mut D: u8 = 0;\n \n mod private {\n-    // CHECK: @E = local_unnamed_addr constant\n+    // CHECK: @E = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     static E: u8 = 0;\n \n-    // CHECK: @F = local_unnamed_addr global\n+    // CHECK: @F = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     static mut F: u8 = 0;\n \n-    // CHECK: @G = local_unnamed_addr constant\n+    // CHECK: @G = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     pub static G: u8 = 0;\n \n-    // CHECK: @H = local_unnamed_addr global\n+    // CHECK: @H = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     pub static mut H: u8 = 0;\n }\n \n const HIDDEN: () = {\n-    // CHECK: @I = local_unnamed_addr constant\n+    // CHECK: @I = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     static I: u8 = 0;\n \n-    // CHECK: @J = local_unnamed_addr global\n+    // CHECK: @J = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     static mut J: u8 = 0;\n \n-    // CHECK: @K = local_unnamed_addr constant\n+    // CHECK: @K = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     pub static K: u8 = 0;\n \n-    // CHECK: @L = local_unnamed_addr global\n+    // CHECK: @L = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     pub static mut L: u8 = 0;\n };\n \n fn x() {\n-    // CHECK: @M = local_unnamed_addr constant\n+    // CHECK: @M = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     static M: fn() = x;\n \n-    // CHECK: @N = local_unnamed_addr global\n+    // CHECK: @N = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     static mut N: u8 = 0;\n \n-    // CHECK: @O = local_unnamed_addr constant\n+    // CHECK: @O = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     pub static O: u8 = 0;\n \n-    // CHECK: @P = local_unnamed_addr global\n+    // CHECK: @P = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     pub static mut P: u8 = 0;\n }"}, {"sha": "be5034dcfbd7ed7073a97aab1c43cf959a708726", "filename": "tests/codegen/issues/issue-86106.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fissues%2Fissue-86106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fissues%2Fissue-86106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissues%2Fissue-86106.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -7,7 +7,7 @@\n \n #![crate_type = \"lib\"]\n \n-// CHECK-LABEL: define void @string_new\n+// CHECK-LABEL: define {{(dso_local )?}}void @string_new\n #[no_mangle]\n pub fn string_new() -> String {\n     // CHECK: store ptr inttoptr\n@@ -17,7 +17,7 @@ pub fn string_new() -> String {\n     String::new()\n }\n \n-// CHECK-LABEL: define void @empty_to_string\n+// CHECK-LABEL: define {{(dso_local )?}}void @empty_to_string\n #[no_mangle]\n pub fn empty_to_string() -> String {\n     // CHECK: store ptr inttoptr"}, {"sha": "2b26b604ad323308e6913029f3d584feac234708", "filename": "tests/codegen/link_section.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Flink_section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Flink_section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Flink_section.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -3,7 +3,7 @@\n \n #![crate_type = \"lib\"]\n \n-// CHECK: @VAR1 = constant <{ [4 x i8] }> <{ [4 x i8] c\"\\01\\00\\00\\00\" }>, section \".test_one\"\n+// CHECK: @VAR1 = {{(dso_local )?}}constant <{ [4 x i8] }> <{ [4 x i8] c\"\\01\\00\\00\\00\" }>, section \".test_one\"\n #[no_mangle]\n #[link_section = \".test_one\"]\n #[cfg(target_endian = \"little\")]\n@@ -19,17 +19,17 @@ pub enum E {\n     B(f32)\n }\n \n-// CHECK: @VAR2 = constant {{.*}}, section \".test_two\"\n+// CHECK: @VAR2 = {{(dso_local )?}}constant {{.*}}, section \".test_two\"\n #[no_mangle]\n #[link_section = \".test_two\"]\n pub static VAR2: E = E::A(666);\n \n-// CHECK: @VAR3 = constant {{.*}}, section \".test_three\"\n+// CHECK: @VAR3 = {{(dso_local )?}}constant {{.*}}, section \".test_three\"\n #[no_mangle]\n #[link_section = \".test_three\"]\n pub static VAR3: E = E::B(1.);\n \n-// CHECK: define void @fn1() {{.*}} section \".test_four\" {\n+// CHECK: define {{(dso_local )?}}void @fn1() {{.*}} section \".test_four\" {\n #[no_mangle]\n #[link_section = \".test_four\"]\n pub fn fn1() {}"}, {"sha": "d13527b95213052cb3f5333c3dadca9f32279a50", "filename": "tests/codegen/mir-inlined-line-numbers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fmir-inlined-line-numbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fmir-inlined-line-numbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fmir-inlined-line-numbers.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -19,7 +19,7 @@ pub fn example() {\n }\n \n // CHECK-LABEL: @example\n-// CHECK:   tail call void @bar(), !dbg [[DBG_ID:![0-9]+]]\n+// CHECK:   tail call void @bar(){{( #[0-9]+)?}}, !dbg [[DBG_ID:![0-9]+]]\n // CHECK: [[DBG_ID]] = !DILocation(line: 7,\n // CHECK-SAME:                     inlinedAt: [[INLINE_ID:![0-9]+]])\n // CHECK: [[INLINE_ID]] = !DILocation(line: 18,"}, {"sha": "5cfb500c0ef883972edee7c0f1b93b9dd60ca41b", "filename": "tests/codegen/naked-noinline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fnaked-noinline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fnaked-noinline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fnaked-noinline.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -12,7 +12,7 @@ use std::arch::asm;\n pub unsafe extern \"C\" fn f() {\n     // Check that f has naked and noinline attributes.\n     //\n-    // CHECK:       define void @f() unnamed_addr [[ATTR:#[0-9]+]]\n+    // CHECK:       define {{(dso_local )?}}void @f() unnamed_addr [[ATTR:#[0-9]+]]\n     // CHECK-NEXT:  start:\n     // CHECK-NEXT:    call void asm\n     asm!(\"\", options(noreturn));\n@@ -22,7 +22,7 @@ pub unsafe extern \"C\" fn f() {\n pub unsafe fn g() {\n     // Check that call to f is not inlined.\n     //\n-    // CHECK-LABEL: define void @g()\n+    // CHECK-LABEL: define {{(dso_local )?}}void @g()\n     // CHECK-NEXT:  start:\n     // CHECK-NEXT:    call void @f()\n     f();"}, {"sha": "9ff7a9b3e8879b2b07a7fe93e4f159b20fc812ee", "filename": "tests/codegen/personality_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fpersonality_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fpersonality_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fpersonality_lifetimes.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -1,5 +1,6 @@\n // ignore-msvc\n // ignore-wasm32-bare compiled with panic=abort by default\n+// needs-unwind\n \n // compile-flags: -O -C no-prepopulate-passes\n "}, {"sha": "73d1db6df277b5ae803a46b8c3c898d609020e0c", "filename": "tests/codegen/ptr-read-metadata.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fptr-read-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fptr-read-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fptr-read-metadata.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -9,7 +9,7 @@\n \n use std::mem::MaybeUninit;\n \n-// CHECK-LABEL: define noundef i8 @copy_byte(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i8 @copy_byte(\n #[no_mangle]\n pub unsafe fn copy_byte(p: *const u8) -> u8 {\n     // CHECK-NOT: load\n@@ -19,7 +19,7 @@ pub unsafe fn copy_byte(p: *const u8) -> u8 {\n     *p\n }\n \n-// CHECK-LABEL: define noundef i8 @read_byte(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i8 @read_byte(\n #[no_mangle]\n pub unsafe fn read_byte(p: *const u8) -> u8 {\n     // CHECK-NOT: load\n@@ -29,7 +29,7 @@ pub unsafe fn read_byte(p: *const u8) -> u8 {\n     p.read()\n }\n \n-// CHECK-LABEL: define i8 @read_byte_maybe_uninit(\n+// CHECK-LABEL: define {{(dso_local )?}}i8 @read_byte_maybe_uninit(\n #[no_mangle]\n pub unsafe fn read_byte_maybe_uninit(p: *const MaybeUninit<u8>) -> MaybeUninit<u8> {\n     // CHECK-NOT: load\n@@ -39,7 +39,7 @@ pub unsafe fn read_byte_maybe_uninit(p: *const MaybeUninit<u8>) -> MaybeUninit<u\n     p.read()\n }\n \n-// CHECK-LABEL: define noundef i8 @read_byte_assume_init(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i8 @read_byte_assume_init(\n #[no_mangle]\n pub unsafe fn read_byte_assume_init(p: &MaybeUninit<u8>) -> u8 {\n     // CHECK-NOT: load\n@@ -49,7 +49,7 @@ pub unsafe fn read_byte_assume_init(p: &MaybeUninit<u8>) -> u8 {\n     p.assume_init_read()\n }\n \n-// CHECK-LABEL: define noundef i32 @copy_char(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i32 @copy_char(\n #[no_mangle]\n pub unsafe fn copy_char(p: *const char) -> char {\n     // CHECK-NOT: load\n@@ -60,7 +60,7 @@ pub unsafe fn copy_char(p: *const char) -> char {\n     *p\n }\n \n-// CHECK-LABEL: define noundef i32 @read_char(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i32 @read_char(\n #[no_mangle]\n pub unsafe fn read_char(p: *const char) -> char {\n     // CHECK-NOT: load\n@@ -71,7 +71,7 @@ pub unsafe fn read_char(p: *const char) -> char {\n     p.read()\n }\n \n-// CHECK-LABEL: define i32 @read_char_maybe_uninit(\n+// CHECK-LABEL: define {{(dso_local )?}}i32 @read_char_maybe_uninit(\n #[no_mangle]\n pub unsafe fn read_char_maybe_uninit(p: *const MaybeUninit<char>) -> MaybeUninit<char> {\n     // CHECK-NOT: load\n@@ -82,7 +82,7 @@ pub unsafe fn read_char_maybe_uninit(p: *const MaybeUninit<char>) -> MaybeUninit\n     p.read()\n }\n \n-// CHECK-LABEL: define noundef i32 @read_char_assume_init(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i32 @read_char_assume_init(\n #[no_mangle]\n pub unsafe fn read_char_assume_init(p: &MaybeUninit<char>) -> char {\n     // CHECK-NOT: load"}, {"sha": "309fe1d5ec90250a181825323a2ed56b89e61476", "filename": "tests/codegen/tuple-layout-opt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Ftuple-layout-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Ftuple-layout-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ftuple-layout-opt.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -6,31 +6,31 @@\n #![crate_type=\"lib\"]\n \n type ScalarZstLast = (u128, ());\n-// CHECK: define i128 @test_ScalarZstLast(i128 %_1)\n+// CHECK: define {{(dso_local )?}}i128 @test_ScalarZstLast(i128 %_1)\n #[no_mangle]\n pub fn test_ScalarZstLast(_: ScalarZstLast) -> ScalarZstLast { loop {} }\n \n type ScalarZstFirst = ((), u128);\n-// CHECK: define i128 @test_ScalarZstFirst(i128 %_1)\n+// CHECK: define {{(dso_local )?}}i128 @test_ScalarZstFirst(i128 %_1)\n #[no_mangle]\n pub fn test_ScalarZstFirst(_: ScalarZstFirst) -> ScalarZstFirst { loop {} }\n \n type ScalarPairZstLast = (u8, u128, ());\n-// CHECK: define { i128, i8 } @test_ScalarPairZstLast(i128 %_1.0, i8 %_1.1)\n+// CHECK: define {{(dso_local )?}}{ i128, i8 } @test_ScalarPairZstLast(i128 %_1.0, i8 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairZstLast(_: ScalarPairZstLast) -> ScalarPairZstLast { loop {} }\n \n type ScalarPairZstFirst = ((), u8, u128);\n-// CHECK: define { i8, i128 } @test_ScalarPairZstFirst(i8 %_1.0, i128 %_1.1)\n+// CHECK: define {{(dso_local )?}}{ i8, i128 } @test_ScalarPairZstFirst(i8 %_1.0, i128 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairZstFirst(_: ScalarPairZstFirst) -> ScalarPairZstFirst { loop {} }\n \n type ScalarPairLotsOfZsts = ((), u8, (), u128, ());\n-// CHECK: define { i128, i8 } @test_ScalarPairLotsOfZsts(i128 %_1.0, i8 %_1.1)\n+// CHECK: define {{(dso_local )?}}{ i128, i8 } @test_ScalarPairLotsOfZsts(i128 %_1.0, i8 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairLotsOfZsts(_: ScalarPairLotsOfZsts) -> ScalarPairLotsOfZsts { loop {} }\n \n type ScalarPairLottaNesting = (((), ((), u8, (), u128, ())), ());\n-// CHECK: define { i128, i8 } @test_ScalarPairLottaNesting(i128 %_1.0, i8 %_1.1)\n+// CHECK: define {{(dso_local )?}}{ i128, i8 } @test_ScalarPairLottaNesting(i128 %_1.0, i8 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairLottaNesting(_: ScalarPairLottaNesting) -> ScalarPairLottaNesting { loop {} }"}, {"sha": "8481ca8ccfa197ed2d72a37449c2c6481f20e131", "filename": "tests/codegen/union-abi.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Funion-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Funion-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funion-abi.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -17,60 +17,60 @@ pub struct i64x4(i64, i64, i64, i64);\n #[derive(Copy, Clone)]\n pub union UnionI64x4{ a:(), b: i64x4 }\n \n-// CHECK: define void @test_UnionI64x4({{<4 x i64>\\*|ptr}} {{.*}} %_1)\n+// CHECK: define {{(dso_local )?}}void @test_UnionI64x4({{<4 x i64>\\*|ptr}} {{.*}} %_1)\n #[no_mangle]\n pub fn test_UnionI64x4(_: UnionI64x4) { loop {} }\n \n pub union UnionI64x4_{ a: i64x4, b: (), c:i64x4, d: Unhab, e: ((),()), f: UnionI64x4 }\n \n-// CHECK: define void @test_UnionI64x4_({{<4 x i64>\\*|ptr}} {{.*}} %_1)\n+// CHECK: define {{(dso_local )?}}void @test_UnionI64x4_({{<4 x i64>\\*|ptr}} {{.*}} %_1)\n #[no_mangle]\n pub fn test_UnionI64x4_(_: UnionI64x4_) { loop {} }\n \n pub union UnionI64x4I64{ a: i64x4, b: i64 }\n \n-// CHECK: define void @test_UnionI64x4I64({{%UnionI64x4I64\\*|ptr}} {{.*}} %_1)\n+// CHECK: define {{(dso_local )?}}void @test_UnionI64x4I64({{%UnionI64x4I64\\*|ptr}} {{.*}} %_1)\n #[no_mangle]\n pub fn test_UnionI64x4I64(_: UnionI64x4I64) { loop {} }\n \n pub union UnionI64x4Tuple{ a: i64x4, b: (i64, i64, i64, i64) }\n \n-// CHECK: define void @test_UnionI64x4Tuple({{%UnionI64x4Tuple\\*|ptr}} {{.*}} %_1)\n+// CHECK: define {{(dso_local )?}}void @test_UnionI64x4Tuple({{%UnionI64x4Tuple\\*|ptr}} {{.*}} %_1)\n #[no_mangle]\n pub fn test_UnionI64x4Tuple(_: UnionI64x4Tuple) { loop {} }\n \n \n pub union UnionF32{a:f32}\n \n-// CHECK: define float @test_UnionF32(float %_1)\n+// CHECK: define {{(dso_local )?}}float @test_UnionF32(float %_1)\n #[no_mangle]\n pub fn test_UnionF32(_: UnionF32) -> UnionF32 { loop {} }\n \n pub union UnionF32F32{a:f32, b:f32}\n \n-// CHECK: define float @test_UnionF32F32(float %_1)\n+// CHECK: define {{(dso_local )?}}float @test_UnionF32F32(float %_1)\n #[no_mangle]\n pub fn test_UnionF32F32(_: UnionF32F32) -> UnionF32F32 { loop {} }\n \n pub union UnionF32U32{a:f32, b:u32}\n \n-// CHECK: define i32 @test_UnionF32U32(i32{{( %0)?}})\n+// CHECK: define {{(dso_local )?}}i32 @test_UnionF32U32(i32{{( %0)?}})\n #[no_mangle]\n pub fn test_UnionF32U32(_: UnionF32U32) -> UnionF32U32 { loop {} }\n \n pub union UnionU128{a:u128}\n-// CHECK: define i128 @test_UnionU128(i128 %_1)\n+// CHECK: define {{(dso_local )?}}i128 @test_UnionU128(i128 %_1)\n #[no_mangle]\n pub fn test_UnionU128(_: UnionU128) -> UnionU128 { loop {} }\n \n #[repr(C)]\n pub union CUnionU128{a:u128}\n-// CHECK: define void @test_CUnionU128({{%CUnionU128\\*|ptr}} {{.*}} %_1)\n+// CHECK: define {{(dso_local )?}}void @test_CUnionU128({{%CUnionU128\\*|ptr}} {{.*}} %_1)\n #[no_mangle]\n pub fn test_CUnionU128(_: CUnionU128) { loop {} }\n \n pub union UnionBool { b:bool }\n-// CHECK: define noundef zeroext i1 @test_UnionBool(i8 %b)\n+// CHECK: define {{(dso_local )?}}noundef zeroext i1 @test_UnionBool(i8 %b)\n #[no_mangle]\n pub fn test_UnionBool(b: UnionBool) -> bool { unsafe { b.b }  }\n // CHECK: %0 = trunc i8 %b to i1"}, {"sha": "fa5b6bad75cb3b0e601b00135bd63c9daea0e53c", "filename": "tests/codegen/unwind-abis/c-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Funwind-abis%2Fc-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Funwind-abis%2Fc-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funwind-abis%2Fc-unwind-abi.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -C opt-level=0\n+// needs-unwind\n \n // Test that `nounwind` attributes are correctly applied to exported `C` and `C-unwind` extern\n // functions. `C-unwind` functions MUST NOT have this attribute. We disable optimizations above"}, {"sha": "64746d32175beb8af2ab367f2fc45a1aad3fc85d", "filename": "tests/codegen/unwind-abis/cdecl-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Funwind-abis%2Fcdecl-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Funwind-abis%2Fcdecl-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funwind-abis%2Fcdecl-unwind-abi.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -C opt-level=0\n+// needs-unwind\n \n // Test that `nounwind` attributes are correctly applied to exported `cdecl` and\n // `cdecl-unwind` extern functions. `cdecl-unwind` functions MUST NOT have this attribute. We"}, {"sha": "dc3911cd4ebaccc18fe5b4ac696720228b4508aa", "filename": "tests/codegen/unwind-abis/nounwind-on-stable-panic-unwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Funwind-abis%2Fnounwind-on-stable-panic-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Funwind-abis%2Fnounwind-on-stable-panic-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funwind-abis%2Fnounwind-on-stable-panic-unwind.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -C opt-level=0\n // ignore-wasm32-bare compiled with panic=abort by default\n+// needs-unwind\n \n #![crate_type = \"lib\"]\n "}, {"sha": "f274a33b099480bd291f2e9d368d71edd8697e5d", "filename": "tests/codegen/unwind-abis/system-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Funwind-abis%2Fsystem-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Funwind-abis%2Fsystem-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funwind-abis%2Fsystem-unwind-abi.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -C opt-level=0\n+// needs-unwind\n \n // Test that `nounwind` attributes are correctly applied to exported `system` and `system-unwind`\n // extern functions. `system-unwind` functions MUST NOT have this attribute. We disable"}, {"sha": "4e1e719d5cd1895d6a44642b18492bef2cefd692", "filename": "tests/codegen/unwind-extern-exports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Funwind-extern-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Funwind-extern-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funwind-extern-exports.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -C opt-level=0\n // ignore-wasm32-bare compiled with panic=abort by default\n+// needs-unwind\n \n #![crate_type = \"lib\"]\n #![feature(c_unwind)]"}, {"sha": "260dcc628cc0e3fd8b4379ef173c1c72b7bce42e", "filename": "tests/codegen/unwind-extern-imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Funwind-extern-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Funwind-extern-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funwind-extern-imports.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -C no-prepopulate-passes\n // ignore-wasm32-bare compiled with panic=abort by default\n+// needs-unwind\n \n #![crate_type = \"lib\"]\n #![feature(c_unwind)]"}, {"sha": "606d68ff3ab38e56805f9feb9a7560e2f2716b11", "filename": "tests/codegen/vec-shrink-panik.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fvec-shrink-panik.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf9ed497a4c40efa35bfe542791e3d1b502ce8b/tests%2Fcodegen%2Fvec-shrink-panik.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvec-shrink-panik.rs?ref=bdf9ed497a4c40efa35bfe542791e3d1b502ce8b", "patch": "@@ -5,6 +5,7 @@\n // [new]min-llvm-version: 17\n // compile-flags: -O\n // ignore-debug: the debug assertions get in the way\n+// needs-unwind\n #![crate_type = \"lib\"]\n #![feature(shrink_to)]\n "}]}