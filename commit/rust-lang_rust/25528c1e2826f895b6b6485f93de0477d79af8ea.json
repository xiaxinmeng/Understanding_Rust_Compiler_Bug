{"sha": "25528c1e2826f895b6b6485f93de0477d79af8ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NTI4YzFlMjgyNmY4OTViNmI2NDg1ZjkzZGUwNDc3ZDc5YWY4ZWE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-30T23:25:43Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-31T17:44:01Z"}, "message": "Use Place directly, it's Copy more use cases", "tree": {"sha": "3f6135b4f86e8a46567384a05b7e64c72109a32b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f6135b4f86e8a46567384a05b7e64c72109a32b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25528c1e2826f895b6b6485f93de0477d79af8ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl6DgWEACgkQgTGiTgx5\n769KlA/8CqwibDsALJbjrbmo/JE3SWLk8KHhUfBHr3IA6HfHMQTJS5jCvmYx/mg+\n+LW9sTs4ugRKv1iOPj4fZLBf3PgsxKHp0zuON3ureoxwUtkM/nNdpt2l8r+8hIrL\nM49RXDZeQz8EZWt8YyJaM/knVci3ITIwcyvVaBUCcPpO/BZ0sHq0TmONUiBrUSSL\n16NPBIoZwo1hG/3a6B9w5fME4pYwArnp217Y6Q2q/bB51JpB9x00dBdqugVW+g6r\nSGOI2wzf+mEi4QTYyso2Ny0q87klBJw0KrCqyvJUYi+J9hC8sGLTwAjRyfmoSqNi\nd7RMkb3YfgDfSz/bP9pJ1cbY/ALY8QAJrNSv58VyTXWtaSGFuR7v/awjniO9g2G+\nFpqLWFzCM3So5yfrEKRbEm4w0MF2g5jxVmbJtJnNnbklXucxXrsLcu3essf3Crzg\n6espn5yq2HUTMYVC42tu0fBEIL1xIMLZxv+h+ZyruTeZ+XdoAmTRv7H1efL/0mC8\nFP/sWZ2gsCxkWvR3w35PWnVGSlV4xnFnuEBKSkeIhyqDuf/GqVg5OQ9gC2LvjwKn\nPwWXREctJr/uwY5KKkvwtInJx+wzEGkf6ddZ7txhYrjyN8s2g3svMK4nvVAuyljH\ntNyAL8TuqVRnOvQMecuMFfQ1fBpq1vByuYMhuiq/GVH0PGAyyRU=\n=DZWT\n-----END PGP SIGNATURE-----", "payload": "tree 3f6135b4f86e8a46567384a05b7e64c72109a32b\nparent 760bca4f5ba4fb717ff666da37f36c28f0219879\nauthor Santiago Pastorino <spastorino@gmail.com> 1585610743 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1585676641 -0300\n\nUse Place directly, it's Copy more use cases\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25528c1e2826f895b6b6485f93de0477d79af8ea", "html_url": "https://github.com/rust-lang/rust/commit/25528c1e2826f895b6b6485f93de0477d79af8ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25528c1e2826f895b6b6485f93de0477d79af8ea/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760bca4f5ba4fb717ff666da37f36c28f0219879", "url": "https://api.github.com/repos/rust-lang/rust/commits/760bca4f5ba4fb717ff666da37f36c28f0219879", "html_url": "https://github.com/rust-lang/rust/commit/760bca4f5ba4fb717ff666da37f36c28f0219879"}], "stats": {"total": 53, "additions": 25, "deletions": 28}, "files": [{"sha": "0a998bbfe7068d3e3a5c7f560ca3c8481828c5ed", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25528c1e2826f895b6b6485f93de0477d79af8ea/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25528c1e2826f895b6b6485f93de0477d79af8ea/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=25528c1e2826f895b6b6485f93de0477d79af8ea", "patch": "@@ -230,7 +230,7 @@ fn build_drop_shim<'tcx>(\n             elaborate_drops::elaborate_drop(\n                 &mut elaborator,\n                 source_info,\n-                &dropee,\n+                dropee,\n                 (),\n                 return_block,\n                 elaborate_drops::Unwind::To(resume_block),"}, {"sha": "d3971c9a45cae540d3091e2d8c8644ec0645517f", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25528c1e2826f895b6b6485f93de0477d79af8ea/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25528c1e2826f895b6b6485f93de0477d79af8ea/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=25528c1e2826f895b6b6485f93de0477d79af8ea", "patch": "@@ -346,7 +346,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n \n             let resume_block = self.patch.resume_block();\n             match terminator.kind {\n-                TerminatorKind::Drop { ref location, target, unwind } => {\n+                TerminatorKind::Drop { location, target, unwind } => {\n                     self.init_data.seek_before(loc);\n                     match self.move_data().rev_lookup.find(location.as_ref()) {\n                         LookupResult::Exact(path) => elaborate_drop(\n@@ -371,7 +371,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                         }\n                     }\n                 }\n-                TerminatorKind::DropAndReplace { ref location, ref value, target, unwind } => {\n+                TerminatorKind::DropAndReplace { location, ref value, target, unwind } => {\n                     assert!(!data.is_cleanup);\n \n                     self.elaborate_replace(loc, location, value, target, unwind);\n@@ -396,7 +396,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     fn elaborate_replace(\n         &mut self,\n         loc: Location,\n-        location: &Place<'tcx>,\n+        location: Place<'tcx>,\n         value: &Operand<'tcx>,\n         target: BasicBlock,\n         unwind: Option<BasicBlock>,\n@@ -407,7 +407,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         assert!(!data.is_cleanup, \"DropAndReplace in unwind path not supported\");\n \n         let assign = Statement {\n-            kind: StatementKind::Assign(box (*location, Rvalue::Use(value.clone()))),\n+            kind: StatementKind::Assign(box (location, Rvalue::Use(value.clone()))),\n             source_info: terminator.source_info,\n         };\n \n@@ -459,7 +459,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 debug!(\"elaborate_drop_and_replace({:?}) - untracked {:?}\", terminator, parent);\n                 self.patch.patch_terminator(\n                     bb,\n-                    TerminatorKind::Drop { location: *location, target, unwind: Some(unwind) },\n+                    TerminatorKind::Drop { location, target, unwind: Some(unwind) },\n                 );\n             }\n         }"}, {"sha": "390d927a85471f347daf3e66571b1d3da3c79059", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25528c1e2826f895b6b6485f93de0477d79af8ea/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25528c1e2826f895b6b6485f93de0477d79af8ea/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=25528c1e2826f895b6b6485f93de0477d79af8ea", "patch": "@@ -853,7 +853,7 @@ fn elaborate_generator_drops<'tcx>(\n         elaborate_drop(\n             &mut elaborator,\n             *source_info,\n-            &Place::from(SELF_ARG),\n+            Place::from(SELF_ARG),\n             (),\n             *target,\n             unwind,"}, {"sha": "1d682b32b192dffc1c1fad1ef5bcf2a9b65ed2ec", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/25528c1e2826f895b6b6485f93de0477d79af8ea/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25528c1e2826f895b6b6485f93de0477d79af8ea/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=25528c1e2826f895b6b6485f93de0477d79af8ea", "patch": "@@ -100,7 +100,7 @@ where\n \n     source_info: SourceInfo,\n \n-    place: &'l Place<'tcx>,\n+    place: Place<'tcx>,\n     path: D::Path,\n     succ: BasicBlock,\n     unwind: Unwind,\n@@ -109,7 +109,7 @@ where\n pub fn elaborate_drop<'b, 'tcx, D>(\n     elaborator: &mut D,\n     source_info: SourceInfo,\n-    place: &Place<'tcx>,\n+    place: Place<'tcx>,\n     path: D::Path,\n     succ: BasicBlock,\n     unwind: Unwind,\n@@ -126,7 +126,7 @@ where\n     D: DropElaborator<'b, 'tcx>,\n     'tcx: 'b,\n {\n-    fn place_ty(&self, place: &Place<'tcx>) -> Ty<'tcx> {\n+    fn place_ty(&self, place: Place<'tcx>) -> Ty<'tcx> {\n         place.ty(self.elaborator.body(), self.tcx()).ty\n     }\n \n@@ -168,7 +168,7 @@ where\n                 self.elaborator.patch().patch_terminator(\n                     bb,\n                     TerminatorKind::Drop {\n-                        location: *self.place,\n+                        location: self.place,\n                         target: self.succ,\n                         unwind: self.unwind.into_option(),\n                     },\n@@ -195,7 +195,7 @@ where\n     /// (the move path is `None` if the field is a rest field).\n     fn move_paths_for_fields(\n         &self,\n-        base_place: &Place<'tcx>,\n+        base_place: Place<'tcx>,\n         variant_path: D::Path,\n         variant: &'tcx ty::VariantDef,\n         substs: SubstsRef<'tcx>,\n@@ -219,7 +219,7 @@ where\n \n     fn drop_subpath(\n         &mut self,\n-        place: &Place<'tcx>,\n+        place: Place<'tcx>,\n         path: Option<D::Path>,\n         succ: BasicBlock,\n         unwind: Unwind,\n@@ -267,12 +267,10 @@ where\n     ) -> Vec<BasicBlock> {\n         Some(succ)\n             .into_iter()\n-            .chain(fields.iter().rev().zip(unwind_ladder).map(\n-                |(&(ref place, path), &unwind_succ)| {\n-                    succ = self.drop_subpath(place, path, succ, unwind_succ);\n-                    succ\n-                },\n-            ))\n+            .chain(fields.iter().rev().zip(unwind_ladder).map(|(&(place, path), &unwind_succ)| {\n+                succ = self.drop_subpath(place, path, succ, unwind_succ);\n+                succ\n+            }))\n             .collect()\n     }\n \n@@ -315,7 +313,7 @@ where\n         debug!(\"drop_ladder({:?}, {:?})\", self, fields);\n \n         let mut fields = fields;\n-        fields.retain(|&(ref place, _)| {\n+        fields.retain(|&(place, _)| {\n             self.place_ty(place).needs_drop(self.tcx(), self.elaborator.param_env())\n         });\n \n@@ -364,7 +362,7 @@ where\n         let unwind_succ =\n             self.unwind.map(|unwind| self.box_free_block(adt, substs, unwind, Unwind::InCleanup));\n \n-        self.drop_subpath(&interior, interior_path, succ, unwind_succ)\n+        self.drop_subpath(interior, interior_path, succ, unwind_succ)\n     }\n \n     fn open_drop_for_adt(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>) -> BasicBlock {\n@@ -439,8 +437,7 @@ where\n                     self.place.clone(),\n                     ProjectionElem::Downcast(Some(variant.ident.name), variant_index),\n                 );\n-                let fields =\n-                    self.move_paths_for_fields(&base_place, variant_path, &variant, substs);\n+                let fields = self.move_paths_for_fields(base_place, variant_path, &variant, substs);\n                 values.push(discr.val);\n                 if let Unwind::To(unwind) = unwind {\n                     // We can't use the half-ladder from the original\n@@ -527,7 +524,7 @@ where\n         // way lies only trouble.\n         let discr_ty = adt.repr.discr_type().to_ty(self.tcx());\n         let discr = Place::from(self.new_temp(discr_ty));\n-        let discr_rv = Rvalue::Discriminant(*self.place);\n+        let discr_rv = Rvalue::Discriminant(self.place);\n         let switch_block = BasicBlockData {\n             statements: vec![self.assign(&discr, discr_rv)],\n             terminator: Some(Terminator {\n@@ -564,7 +561,7 @@ where\n                 Rvalue::Ref(\n                     tcx.lifetimes.re_erased,\n                     BorrowKind::Mut { allow_two_phase_borrow: false },\n-                    *self.place,\n+                    self.place,\n                 ),\n             )],\n             terminator: Some(Terminator {\n@@ -712,7 +709,7 @@ where\n         let base_block = BasicBlockData {\n             statements: vec![\n                 self.assign(elem_size, Rvalue::NullaryOp(NullOp::SizeOf, ety)),\n-                self.assign(len, Rvalue::Len(*self.place)),\n+                self.assign(len, Rvalue::Len(self.place)),\n             ],\n             is_cleanup: self.unwind.is_cleanup(),\n             terminator: Some(Terminator {\n@@ -761,7 +758,7 @@ where\n             // cur = tmp as *mut T;\n             // end = Offset(cur, len);\n             vec![\n-                self.assign(&tmp, Rvalue::AddressOf(Mutability::Mut, *self.place)),\n+                self.assign(&tmp, Rvalue::AddressOf(Mutability::Mut, self.place)),\n                 self.assign(&cur, Rvalue::Cast(CastKind::Misc, Operand::Move(tmp), iter_ty)),\n                 self.assign(\n                     &length_or_end,\n@@ -935,7 +932,7 @@ where\n \n     fn drop_block(&mut self, target: BasicBlock, unwind: Unwind) -> BasicBlock {\n         let block =\n-            TerminatorKind::Drop { location: *self.place, target, unwind: unwind.into_option() };\n+            TerminatorKind::Drop { location: self.place, target, unwind: unwind.into_option() };\n         self.new_block(unwind, block)\n     }\n "}]}