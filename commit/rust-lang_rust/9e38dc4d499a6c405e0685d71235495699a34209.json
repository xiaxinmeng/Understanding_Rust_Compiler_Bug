{"sha": "9e38dc4d499a6c405e0685d71235495699a34209", "node_id": "C_kwDOAAsO6NoAKDllMzhkYzRkNDk5YTZjNDA1ZTA2ODVkNzEyMzU0OTU2OTlhMzQyMDk", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-05-13T17:42:53Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-05-13T17:42:53Z"}, "message": "Move and rename offset_and_layout_to_place to deref_operand_and_offset", "tree": {"sha": "40c19c2c634e18f5e186c5f438e0e2f039ea62cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40c19c2c634e18f5e186c5f438e0e2f039ea62cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e38dc4d499a6c405e0685d71235495699a34209", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmJ+mJ0ACgkQGBtJ+fOP\nM3Q+Hgv9F7Oj3sBXvzjb0o7gBc+ve84fZJ7YOMtOCF+UWlwHW0nFA/DaEwQdwZ2W\nVRbXZimrhT5EvF3HWMIqd4u3f7ZI7OdUwUa6Q0oeH+0eysWuLXhDpI+z/MG4MVbL\nVdiblUMkOjrY557kDsqjl+epyxmDiydx9orLcJVJMBNQdviD7PcBj1aUOylB/It+\nvcJ+nhggelzJR3MZrIxQ9IMWsnH3E7UebSiWydv1VmqujVOHnfBcE17UmsU0IW/h\nWcdQM9g95VWIA0CPEjuwTYsnH7JvsxZrTS6WAR6j7+LhBSZyBimw2QVOuvzirgl7\nrzlnCdaA3WteIYfp2LZ9bK53C39XNPJqNbx8Wvd80LaSso4ZNzUhA+Y2VMQTtDMN\n4Uoe0OMEHa7h8t3I9qjmI1z/42+R+nw4sXnRZk1qZjoUHELptldkf2taEwdmPRlX\n8hMlGkwnrJ24DdBobtJvIPi+bT+/9eNLHhFD5FLaGTj6bz+i+VXkbrIaG+W6O5is\nvfK1ujAs\n=2T0H\n-----END PGP SIGNATURE-----", "payload": "tree 40c19c2c634e18f5e186c5f438e0e2f039ea62cc\nparent 10d978c180217f09c576822a312bc7353adfc17c\nauthor Andy Wang <cbeuw.andy@gmail.com> 1652463773 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1652463773 +0100\n\nMove and rename offset_and_layout_to_place to deref_operand_and_offset\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e38dc4d499a6c405e0685d71235495699a34209", "html_url": "https://github.com/rust-lang/rust/commit/9e38dc4d499a6c405e0685d71235495699a34209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e38dc4d499a6c405e0685d71235495699a34209/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10d978c180217f09c576822a312bc7353adfc17c", "url": "https://api.github.com/repos/rust-lang/rust/commits/10d978c180217f09c576822a312bc7353adfc17c", "html_url": "https://github.com/rust-lang/rust/commit/10d978c180217f09c576822a312bc7353adfc17c"}], "stats": {"total": 60, "additions": 26, "deletions": 34}, "files": [{"sha": "b8656627e6f9751dd5e5f9ac5266f20377aa7a52", "filename": "src/data_race.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9e38dc4d499a6c405e0685d71235495699a34209/src%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e38dc4d499a6c405e0685d71235495699a34209/src%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdata_race.rs?ref=9e38dc4d499a6c405e0685d71235495699a34209", "patch": "@@ -73,9 +73,9 @@ use rustc_middle::{mir, ty::layout::TyAndLayout};\n use rustc_target::abi::Size;\n \n use crate::{\n-    AllocId, AllocRange, ImmTy, Immediate, InterpResult, MPlaceTy, MemPlaceMeta, MemoryKind,\n-    MiriEvalContext, MiriEvalContextExt, MiriMemoryKind, OpTy, Pointer, RangeMap, Scalar,\n-    ScalarMaybeUninit, Tag, ThreadId, VClock, VTimestamp, VectorIdx,\n+    AllocId, AllocRange, HelpersEvalContextExt, ImmTy, Immediate, InterpResult, MPlaceTy,\n+    MemoryKind, MiriEvalContext, MiriEvalContextExt, MiriMemoryKind, OpTy, Pointer, RangeMap,\n+    Scalar, ScalarMaybeUninit, Tag, ThreadId, VClock, VTimestamp, VectorIdx,\n };\n \n pub type AllocExtra = VClockAlloc;\n@@ -441,23 +441,6 @@ impl MemoryCellClocks {\n /// Evaluation context extensions.\n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n-    /// Calculates the MPlaceTy given the offset and layout of an access on an operand\n-    fn offset_and_layout_to_place(\n-        &self,\n-        op: &OpTy<'tcx, Tag>,\n-        offset: u64,\n-        layout: TyAndLayout<'tcx>,\n-    ) -> InterpResult<'tcx, MPlaceTy<'tcx, Tag>> {\n-        let this = self.eval_context_ref();\n-        let op_place = this.deref_operand(op)?;\n-        let offset = Size::from_bytes(offset);\n-\n-        // Ensure that the access is within bounds.\n-        assert!(op_place.layout.size >= offset + layout.size);\n-        let value_place = op_place.offset(offset, MemPlaceMeta::None, layout, this)?;\n-        Ok(value_place)\n-    }\n-\n     /// Atomic variant of read_scalar_at_offset.\n     fn read_scalar_at_offset_atomic(\n         &self,\n@@ -467,7 +450,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n         atomic: AtomicReadOp,\n     ) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n         let this = self.eval_context_ref();\n-        let value_place = this.offset_and_layout_to_place(op, offset, layout)?;\n+        let value_place = this.deref_operand_and_offset(op, offset, layout)?;\n         this.read_scalar_atomic(&value_place, atomic)\n     }\n \n@@ -481,7 +464,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n         atomic: AtomicWriteOp,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        let value_place = this.offset_and_layout_to_place(op, offset, layout)?;\n+        let value_place = this.deref_operand_and_offset(op, offset, layout)?;\n         this.write_scalar_atomic(value.into(), &value_place, atomic)\n     }\n "}, {"sha": "ba5ebd3026c47ddd94368c4e0c536c1144d70f1f", "filename": "src/helpers.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9e38dc4d499a6c405e0685d71235495699a34209/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e38dc4d499a6c405e0685d71235495699a34209/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=9e38dc4d499a6c405e0685d71235495699a34209", "patch": "@@ -597,18 +597,31 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n-    fn read_scalar_at_offset(\n+    /// Calculates the MPlaceTy given the offset and layout of an access on an operand\n+    fn deref_operand_and_offset(\n         &self,\n         op: &OpTy<'tcx, Tag>,\n         offset: u64,\n         layout: TyAndLayout<'tcx>,\n-    ) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n+    ) -> InterpResult<'tcx, MPlaceTy<'tcx, Tag>> {\n         let this = self.eval_context_ref();\n         let op_place = this.deref_operand(op)?;\n         let offset = Size::from_bytes(offset);\n-        // Ensure that the following read at an offset is within bounds\n+\n+        // Ensure that the access is within bounds.\n         assert!(op_place.layout.size >= offset + layout.size);\n         let value_place = op_place.offset(offset, MemPlaceMeta::None, layout, this)?;\n+        Ok(value_place)\n+    }\n+\n+    fn read_scalar_at_offset(\n+        &self,\n+        op: &OpTy<'tcx, Tag>,\n+        offset: u64,\n+        layout: TyAndLayout<'tcx>,\n+    ) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n+        let this = self.eval_context_ref();\n+        let value_place = this.deref_operand_and_offset(op, offset, layout)?;\n         this.read_scalar(&value_place.into())\n     }\n \n@@ -620,11 +633,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         layout: TyAndLayout<'tcx>,\n     ) -> InterpResult<'tcx, ()> {\n         let this = self.eval_context_mut();\n-        let op_place = this.deref_operand(op)?;\n-        let offset = Size::from_bytes(offset);\n-        // Ensure that the following read at an offset is within bounds\n-        assert!(op_place.layout.size >= offset + layout.size);\n-        let value_place = op_place.offset(offset, MemPlaceMeta::None, layout, this)?;\n+        let value_place = this.deref_operand_and_offset(op, offset, layout)?;\n         this.write_scalar(value, &value_place.into())\n     }\n "}, {"sha": "56d496984757b0475621234c2b29f03b8d2488bb", "filename": "src/shims/posix/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e38dc4d499a6c405e0685d71235495699a34209/src%2Fshims%2Fposix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e38dc4d499a6c405e0685d71235495699a34209/src%2Fshims%2Fposix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fsync.rs?ref=9e38dc4d499a6c405e0685d71235495699a34209", "patch": "@@ -112,7 +112,7 @@ fn mutex_get_or_create_id<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     mutex_op: &OpTy<'tcx, Tag>,\n ) -> InterpResult<'tcx, MutexId> {\n-    let value_place = ecx.offset_and_layout_to_place(mutex_op, 4, ecx.machine.layouts.u32)?;\n+    let value_place = ecx.deref_operand_and_offset(mutex_op, 4, ecx.machine.layouts.u32)?;\n \n     ecx.mutex_get_or_create(|ecx, next_id| {\n         let (old, success) = ecx\n@@ -168,7 +168,7 @@ fn rwlock_get_or_create_id<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     rwlock_op: &OpTy<'tcx, Tag>,\n ) -> InterpResult<'tcx, RwLockId> {\n-    let value_place = ecx.offset_and_layout_to_place(rwlock_op, 4, ecx.machine.layouts.u32)?;\n+    let value_place = ecx.deref_operand_and_offset(rwlock_op, 4, ecx.machine.layouts.u32)?;\n \n     ecx.rwlock_get_or_create(|ecx, next_id| {\n         let (old, success) = ecx\n@@ -252,7 +252,7 @@ fn cond_get_or_create_id<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     cond_op: &OpTy<'tcx, Tag>,\n ) -> InterpResult<'tcx, CondvarId> {\n-    let value_place = ecx.offset_and_layout_to_place(cond_op, 4, ecx.machine.layouts.u32)?;\n+    let value_place = ecx.deref_operand_and_offset(cond_op, 4, ecx.machine.layouts.u32)?;\n \n     ecx.condvar_get_or_create(|ecx, next_id| {\n         let (old, success) = ecx"}, {"sha": "6a6b2269e62a0f1d7bcb504c0c1e3e6d0daa1603", "filename": "src/shims/windows/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e38dc4d499a6c405e0685d71235495699a34209/src%2Fshims%2Fwindows%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e38dc4d499a6c405e0685d71235495699a34209/src%2Fshims%2Fwindows%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fsync.rs?ref=9e38dc4d499a6c405e0685d71235495699a34209", "patch": "@@ -7,7 +7,7 @@ fn srwlock_get_or_create_id<'mir, 'tcx: 'mir>(\n     ecx: &mut MiriEvalContext<'mir, 'tcx>,\n     lock_op: &OpTy<'tcx, Tag>,\n ) -> InterpResult<'tcx, RwLockId> {\n-    let value_place = ecx.offset_and_layout_to_place(lock_op, 0, ecx.machine.layouts.u32)?;\n+    let value_place = ecx.deref_operand_and_offset(lock_op, 0, ecx.machine.layouts.u32)?;\n \n     ecx.rwlock_get_or_create(|ecx, next_id| {\n         let (old, success) = ecx"}]}