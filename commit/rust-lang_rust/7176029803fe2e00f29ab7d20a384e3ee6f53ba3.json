{"sha": "7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNzYwMjk4MDNmZTJlMDBmMjlhYjdkMjBhMzg0ZTNlZTZmNTNiYTM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-02-11T09:58:32Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-02-11T09:58:32Z"}, "message": "Merge #48\n\n48: Types r=matklad a=matklad\n\nbors r+", "tree": {"sha": "51e7251231162d5d31b6e18fabdbb466ffb94d19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51e7251231162d5d31b6e18fabdbb466ffb94d19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "html_url": "https://github.com/rust-lang/rust/commit/7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "e19d038a0e1d9af8270450c5fe8fbbdf0f15cb24", "url": "https://api.github.com/repos/rust-lang/rust/commits/e19d038a0e1d9af8270450c5fe8fbbdf0f15cb24", "html_url": "https://github.com/rust-lang/rust/commit/e19d038a0e1d9af8270450c5fe8fbbdf0f15cb24"}, {"sha": "96437b050f2743fef2e37eaab7259f2f98f9b473", "url": "https://api.github.com/repos/rust-lang/rust/commits/96437b050f2743fef2e37eaab7259f2f98f9b473", "html_url": "https://github.com/rust-lang/rust/commit/96437b050f2743fef2e37eaab7259f2f98f9b473"}], "stats": {"total": 522, "additions": 488, "deletions": 34}, "files": [{"sha": "d5ad595534febc5a2b9f40e4d40bdc752a5049cd", "filename": "grammar.ron", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -105,6 +105,12 @@ Grammar(\n         \"TUPLE_TYPE\",\n         \"NEVER_TYPE\",\n         \"PATH_TYPE\",\n+        \"POINTER_TYPE\",\n+        \"ARRAY_TYPE\",\n+        \"SLICE_TYPE\",\n+        \"REFERENCE_TYPE\",\n+        \"PLACEHOLDER_TYPE\",\n+        \"FN_POINTER_TYPE\",\n \n         \"EXTERN_BLOCK\",\n         \"ENUM_VARIANT\","}, {"sha": "d6c3753b32059c1cdd0b1e9808b258a4dc69fabb", "filename": "src/parser/grammar/items/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/src%2Fparser%2Fgrammar%2Fitems%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/src%2Fparser%2Fgrammar%2Fitems%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fconsts.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -14,7 +14,7 @@ fn const_or_static(p: &mut Parser, kw: SyntaxKind) {\n     p.eat(MUT_KW); // TODO: validator to forbid const mut\n     name(p);\n     p.expect(COLON);\n-    types::ty(p);\n+    types::type_(p);\n     p.expect(EQ);\n     expressions::expr(p);\n     p.expect(SEMI);"}, {"sha": "18ee8af86370dcc8ccc8574ee90b265de4850b69", "filename": "src/parser/grammar/items/mod.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -222,12 +222,6 @@ fn fn_item(p: &mut Parser) {\n         p.expect(L_CURLY);\n         p.expect(R_CURLY);\n     }\n-\n-    fn fn_value_parameters(p: &mut Parser) {\n-        assert!(p.at(L_PAREN));\n-        p.bump();\n-        p.expect(R_PAREN);\n-    }\n }\n \n // test type_item\n@@ -247,7 +241,7 @@ fn type_item(p: &mut Parser) {\n     type_params::where_clause(p);\n \n     p.expect(EQ);\n-    types::ty(p);\n+    types::type_(p);\n     p.expect(SEMI);\n }\n \n@@ -263,14 +257,3 @@ fn mod_item(p: &mut Parser) {\n         }\n     }\n }\n-\n-fn abi(p: &mut Parser) {\n-    assert!(p.at(EXTERN_KW));\n-    let abi = p.start();\n-    p.bump();\n-    match p.current() {\n-        STRING | RAW_STRING => p.bump(),\n-        _ => (),\n-    }\n-    abi.complete(p, ABI);\n-}"}, {"sha": "c72b50808cfca21df951c5a6a438bfb1394bf8b2", "filename": "src/parser/grammar/items/structs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/src%2Fparser%2Fgrammar%2Fitems%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/src%2Fparser%2Fgrammar%2Fitems%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fstructs.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -89,7 +89,7 @@ fn named_fields(p: &mut Parser) {\n         if p.at(IDENT) {\n             name(p);\n             p.expect(COLON);\n-            types::ty(p);\n+            types::type_(p);\n             field.complete(p, NAMED_FIELD);\n         } else {\n             field.abandon(p);\n@@ -105,7 +105,7 @@ fn pos_fields(p: &mut Parser) {\n     while !p.at(R_PAREN) && !p.at(EOF) {\n         let pos_field = p.start();\n         visibility(p);\n-        types::ty(p);\n+        types::type_(p);\n         pos_field.complete(p, POS_FIELD);\n \n         if !p.at(R_PAREN) {"}, {"sha": "5266354c11115b6e424339acdfdab2af5496a7fe", "filename": "src/parser/grammar/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/src%2Fparser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/src%2Fparser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fmod.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -50,6 +50,30 @@ fn alias(p: &mut Parser) -> bool {\n     true //FIXME: return false if three are errors\n }\n \n+fn abi(p: &mut Parser) {\n+    assert!(p.at(EXTERN_KW));\n+    let abi = p.start();\n+    p.bump();\n+    match p.current() {\n+        STRING | RAW_STRING => p.bump(),\n+        _ => (),\n+    }\n+    abi.complete(p, ABI);\n+}\n+\n+fn fn_value_parameters(p: &mut Parser) {\n+    assert!(p.at(L_PAREN));\n+    p.bump();\n+    p.expect(R_PAREN);\n+}\n+\n+fn fn_ret_type(p: &mut Parser) {\n+    if p.at(THIN_ARROW) {\n+        p.bump();\n+        types::type_(p);\n+    }\n+}\n+\n fn name(p: &mut Parser) {\n     if p.at(IDENT) {\n         let m = p.start();"}, {"sha": "9ea08a55ca034d64d74cb036d3d613ffd6fd20d8", "filename": "src/parser/grammar/type_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/src%2Fparser%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/src%2Fparser%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Ftype_params.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -62,7 +62,7 @@ pub(super) fn list(p: &mut Parser) {\n             }\n         }\n         if p.at(EQ) {\n-            types::ty(p)\n+            types::type_(p)\n         }\n         m.complete(p, TYPE_PARAM);\n     }"}, {"sha": "a4967a00a8a9fdaa06edf54ae819781c161cd3d4", "filename": "src/parser/grammar/types.rs", "status": "modified", "additions": 127, "deletions": 4, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/src%2Fparser%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/src%2Fparser%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Ftypes.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -1,24 +1,34 @@\n use super::*;\n \n-pub(super) fn ty(p: &mut Parser) {\n+pub(super) fn type_(p: &mut Parser) {\n     match p.current() {\n-        L_PAREN => paren_or_tuple_ty(p),\n+        L_PAREN => paren_or_tuple_type(p),\n+        EXCL => never_type(p),\n+        STAR => pointer_type(p),\n+        L_BRACK => array_or_slice_type(p),\n+        AMPERSAND => reference_type(p),\n+        UNDERSCORE => placeholder_type(p),\n+        FN_KW | UNSAFE_KW | EXTERN_KW => fn_pointer_type(p),\n         IDENT => path_type(p),\n         _ => {\n             p.error(\"expected type\");\n         }\n     }\n }\n \n-fn paren_or_tuple_ty(p: &mut Parser) {\n+fn type_no_plus(p: &mut Parser) {\n+    type_(p);\n+}\n+\n+fn paren_or_tuple_type(p: &mut Parser) {\n     assert!(p.at(L_PAREN));\n     let m = p.start();\n     p.bump();\n     let mut n_types: u32 = 0;\n     let mut trailing_comma: bool = false;\n     while !p.at(EOF) && !p.at(R_PAREN) {\n         n_types += 1;\n-        ty(p);\n+        type_(p);\n         if p.eat(COMMA) {\n             trailing_comma = true;\n         } else {\n@@ -43,6 +53,119 @@ fn paren_or_tuple_ty(p: &mut Parser) {\n     m.complete(p, kind);\n }\n \n+// test never_type\n+// type Never = !;\n+fn never_type(p: &mut Parser) {\n+    assert!(p.at(EXCL));\n+    let m = p.start();\n+    p.bump();\n+    m.complete(p, NEVER_TYPE);\n+}\n+\n+fn pointer_type(p: &mut Parser) {\n+    assert!(p.at(STAR));\n+    let m = p.start();\n+    p.bump();\n+\n+    match p.current() {\n+        // test pointer_type_mut\n+        // type M = *mut ();\n+        // type C = *mut ();\n+        MUT_KW | CONST_KW => p.bump(),\n+        _ => {\n+            // test pointer_type_no_mutability\n+            // type T = *();\n+            p.error(\n+                \"expected mut or const in raw pointer type \\\n+                 (use `*mut T` or `*const T` as appropriate)\",\n+            );\n+        }\n+    };\n+\n+    type_no_plus(p);\n+    m.complete(p, POINTER_TYPE);\n+}\n+\n+fn array_or_slice_type(p: &mut Parser) {\n+    assert!(p.at(L_BRACK));\n+    let m = p.start();\n+    p.bump();\n+\n+    type_(p);\n+    let kind = match p.current() {\n+        // test slice_type\n+        // type T = [()];\n+        R_BRACK => {\n+            p.bump();\n+            SLICE_TYPE\n+        }\n+\n+        // test array_type\n+        // type T = [(); 92];\n+        SEMI => {\n+            p.bump();\n+            expressions::expr(p);\n+            p.expect(R_BRACK);\n+            ARRAY_TYPE\n+        }\n+        // test array_type_missing_semi\n+        // type T = [() 92];\n+        _ => {\n+            p.error(\"expected `;` or `]`\");\n+            SLICE_TYPE\n+        }\n+    };\n+    m.complete(p, kind);\n+}\n+\n+// test reference_type;\n+// type A = &();\n+// type B = &'static ();\n+// type C = &mut ();\n+fn reference_type(p: &mut Parser) {\n+    assert!(p.at(AMPERSAND));\n+    let m = p.start();\n+    p.bump();\n+    p.eat(LIFETIME);\n+    p.eat(MUT_KW);\n+    type_no_plus(p);\n+    m.complete(p, REFERENCE_TYPE);\n+}\n+\n+// test placeholder_type\n+// type Placeholder = _;\n+fn placeholder_type(p: &mut Parser) {\n+    assert!(p.at(UNDERSCORE));\n+    let m = p.start();\n+    p.bump();\n+    m.complete(p, PLACEHOLDER_TYPE);\n+}\n+\n+// test fn_pointer_type\n+// type A = fn();\n+// type B = unsafe fn();\n+// type C = unsafe extern \"C\" fn();\n+fn fn_pointer_type(p: &mut Parser) {\n+    let m = p.start();\n+    p.eat(UNSAFE_KW);\n+    if p.at(EXTERN_KW) {\n+        abi(p);\n+    }\n+    // test fn_pointer_type_missing_fn\n+    // type F = unsafe ();\n+    if !p.eat(FN_KW) {\n+        m.abandon(p);\n+        p.error(\"expected `fn`\");\n+        return;\n+    }\n+\n+    fn_value_parameters(p);\n+    // test fn_pointer_type_with_ret\n+    // type F = fn() -> ();\n+    fn_ret_type(p);\n+    m.complete(p, FN_POINTER_TYPE);\n+}\n+\n fn path_type(p: &mut Parser) {\n     assert!(p.at(IDENT));\n     let m = p.start();"}, {"sha": "db0f51bebbae32bfe924f0fb4ec8c12425ba21e3", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -103,6 +103,12 @@ pub enum SyntaxKind {\n     TUPLE_TYPE,\n     NEVER_TYPE,\n     PATH_TYPE,\n+    POINTER_TYPE,\n+    ARRAY_TYPE,\n+    SLICE_TYPE,\n+    REFERENCE_TYPE,\n+    PLACEHOLDER_TYPE,\n+    FN_POINTER_TYPE,\n     EXTERN_BLOCK,\n     ENUM_VARIANT,\n     NAMED_FIELD,\n@@ -232,6 +238,12 @@ impl SyntaxKind {\n             TUPLE_TYPE => &SyntaxInfo { name: \"TUPLE_TYPE\" },\n             NEVER_TYPE => &SyntaxInfo { name: \"NEVER_TYPE\" },\n             PATH_TYPE => &SyntaxInfo { name: \"PATH_TYPE\" },\n+            POINTER_TYPE => &SyntaxInfo { name: \"POINTER_TYPE\" },\n+            ARRAY_TYPE => &SyntaxInfo { name: \"ARRAY_TYPE\" },\n+            SLICE_TYPE => &SyntaxInfo { name: \"SLICE_TYPE\" },\n+            REFERENCE_TYPE => &SyntaxInfo { name: \"REFERENCE_TYPE\" },\n+            PLACEHOLDER_TYPE => &SyntaxInfo { name: \"PLACEHOLDER_TYPE\" },\n+            FN_POINTER_TYPE => &SyntaxInfo { name: \"FN_POINTER_TYPE\" },\n             EXTERN_BLOCK => &SyntaxInfo { name: \"EXTERN_BLOCK\" },\n             ENUM_VARIANT => &SyntaxInfo { name: \"ENUM_VARIANT\" },\n             NAMED_FIELD => &SyntaxInfo { name: \"NAMED_FIELD\" },"}, {"sha": "de399fcf4a21b09526c873b836728e74f9a57f7f", "filename": "tests/data/parser/inline/0020_never_type.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0020_never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0020_never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0020_never_type.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1 @@\n+type Never = !;"}, {"sha": "935f3345912820621d4e74d4b5376a466e82d016", "filename": "tests/data/parser/inline/0020_never_type.txt", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0020_never_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0020_never_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0020_never_type.txt?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1,13 @@\n+FILE@[0; 16)\n+  TYPE_ITEM@[0; 16)\n+    TYPE_KW@[0; 4)\n+    NAME@[4; 11)\n+      WHITESPACE@[4; 5)\n+      IDENT@[5; 10) \"Never\"\n+      WHITESPACE@[10; 11)\n+    EQ@[11; 12)\n+    NEVER_TYPE@[12; 14)\n+      WHITESPACE@[12; 13)\n+      EXCL@[13; 14)\n+    SEMI@[14; 15)\n+    WHITESPACE@[15; 16)"}, {"sha": "fae70513133482995a7a1980b5d4057c0ec21608", "filename": "tests/data/parser/inline/0021_pointer_type_no_mutability.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0021_pointer_type_no_mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0021_pointer_type_no_mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0021_pointer_type_no_mutability.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1 @@\n+type T = *();"}, {"sha": "f7720a712d9486e93179f5c129e145188b20294f", "filename": "tests/data/parser/inline/0021_pointer_type_no_mutability.txt", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0021_pointer_type_no_mutability.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0021_pointer_type_no_mutability.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0021_pointer_type_no_mutability.txt?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1,17 @@\n+FILE@[0; 14)\n+  TYPE_ITEM@[0; 14)\n+    TYPE_KW@[0; 4)\n+    NAME@[4; 7)\n+      WHITESPACE@[4; 5)\n+      IDENT@[5; 6) \"T\"\n+      WHITESPACE@[6; 7)\n+    EQ@[7; 8)\n+    POINTER_TYPE@[8; 12)\n+      WHITESPACE@[8; 9)\n+      STAR@[9; 10)\n+      err: `expected mut or const in raw pointer type (use `*mut T` or `*const T` as appropriate)`\n+      TUPLE_TYPE@[10; 12)\n+        L_PAREN@[10; 11)\n+        R_PAREN@[11; 12)\n+    SEMI@[12; 13)\n+    WHITESPACE@[13; 14)"}, {"sha": "04b2bb9ba5c9569e5979647783c4d682e48c1dec", "filename": "tests/data/parser/inline/0022_pointer_type_mut.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0022_pointer_type_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0022_pointer_type_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0022_pointer_type_mut.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1,2 @@\n+type M = *mut ();\n+type C = *mut ();"}, {"sha": "c3ab2b887aedd6b8f2b2bb249385b4c4f645a44d", "filename": "tests/data/parser/inline/0022_pointer_type_mut.txt", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0022_pointer_type_mut.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0022_pointer_type_mut.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0022_pointer_type_mut.txt?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1,35 @@\n+FILE@[0; 36)\n+  TYPE_ITEM@[0; 18)\n+    TYPE_KW@[0; 4)\n+    NAME@[4; 7)\n+      WHITESPACE@[4; 5)\n+      IDENT@[5; 6) \"M\"\n+      WHITESPACE@[6; 7)\n+    EQ@[7; 8)\n+    POINTER_TYPE@[8; 16)\n+      WHITESPACE@[8; 9)\n+      STAR@[9; 10)\n+      MUT_KW@[10; 13)\n+      TUPLE_TYPE@[13; 16)\n+        WHITESPACE@[13; 14)\n+        L_PAREN@[14; 15)\n+        R_PAREN@[15; 16)\n+    SEMI@[16; 17)\n+    WHITESPACE@[17; 18)\n+  TYPE_ITEM@[18; 36)\n+    TYPE_KW@[18; 22)\n+    NAME@[22; 25)\n+      WHITESPACE@[22; 23)\n+      IDENT@[23; 24) \"C\"\n+      WHITESPACE@[24; 25)\n+    EQ@[25; 26)\n+    POINTER_TYPE@[26; 34)\n+      WHITESPACE@[26; 27)\n+      STAR@[27; 28)\n+      MUT_KW@[28; 31)\n+      TUPLE_TYPE@[31; 34)\n+        WHITESPACE@[31; 32)\n+        L_PAREN@[32; 33)\n+        R_PAREN@[33; 34)\n+    SEMI@[34; 35)\n+    WHITESPACE@[35; 36)"}, {"sha": "a948514432072a1afa7958d7abb809e2231d607e", "filename": "tests/data/parser/inline/0023_array_type_missing_semi.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0023_array_type_missing_semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0023_array_type_missing_semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0023_array_type_missing_semi.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1 @@\n+type T = [() 92];"}, {"sha": "bb30a2a2a797537ccc31d7d1e169f785451362d6", "filename": "tests/data/parser/inline/0023_array_type_missing_semi.txt", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0023_array_type_missing_semi.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0023_array_type_missing_semi.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0023_array_type_missing_semi.txt?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1,28 @@\n+FILE@[0; 18)\n+  TYPE_ITEM@[0; 13)\n+    TYPE_KW@[0; 4)\n+    NAME@[4; 7)\n+      WHITESPACE@[4; 5)\n+      IDENT@[5; 6) \"T\"\n+      WHITESPACE@[6; 7)\n+    EQ@[7; 8)\n+    SLICE_TYPE@[8; 13)\n+      WHITESPACE@[8; 9)\n+      L_BRACK@[9; 10)\n+      TUPLE_TYPE@[10; 13)\n+        L_PAREN@[10; 11)\n+        R_PAREN@[11; 12)\n+        WHITESPACE@[12; 13)\n+      err: `expected `;` or `]``\n+    err: `expected SEMI`\n+  ERROR@[13; 15)\n+  err: `expected item`\n+    INT_NUMBER@[13; 15)\n+  ERROR@[15; 16)\n+  err: `expected item`\n+    R_BRACK@[15; 16)\n+  ERROR@[16; 18)\n+  err: `expected item, found `;`\n+consider removing this semicolon`\n+    SEMI@[16; 17)\n+    WHITESPACE@[17; 18)"}, {"sha": "27eb22f2238adf1e5f7a34f5640dcb83ff7e3117", "filename": "tests/data/parser/inline/0024_array_type.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0024_array_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0024_array_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0024_array_type.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1 @@\n+type T = [(); 92];"}, {"sha": "970734a19845feba94c3b8900b62e96a1dbbb012", "filename": "tests/data/parser/inline/0024_array_type.txt", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0024_array_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0024_array_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0024_array_type.txt?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1,21 @@\n+FILE@[0; 19)\n+  TYPE_ITEM@[0; 19)\n+    TYPE_KW@[0; 4)\n+    NAME@[4; 7)\n+      WHITESPACE@[4; 5)\n+      IDENT@[5; 6) \"T\"\n+      WHITESPACE@[6; 7)\n+    EQ@[7; 8)\n+    ARRAY_TYPE@[8; 17)\n+      WHITESPACE@[8; 9)\n+      L_BRACK@[9; 10)\n+      TUPLE_TYPE@[10; 12)\n+        L_PAREN@[10; 11)\n+        R_PAREN@[11; 12)\n+      SEMI@[12; 13)\n+      LITERAL@[13; 16)\n+        WHITESPACE@[13; 14)\n+        INT_NUMBER@[14; 16)\n+      R_BRACK@[16; 17)\n+    SEMI@[17; 18)\n+    WHITESPACE@[18; 19)"}, {"sha": "4da1af827057134f394140e406c931287580441a", "filename": "tests/data/parser/inline/0025_slice_type.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0025_slice_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0025_slice_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0025_slice_type.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1 @@\n+type T = [()];"}, {"sha": "22938e5e1d8701ed3b67125c6992372addfdb82f", "filename": "tests/data/parser/inline/0025_slice_type.txt", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0025_slice_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0025_slice_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0025_slice_type.txt?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1,17 @@\n+FILE@[0; 15)\n+  TYPE_ITEM@[0; 15)\n+    TYPE_KW@[0; 4)\n+    NAME@[4; 7)\n+      WHITESPACE@[4; 5)\n+      IDENT@[5; 6) \"T\"\n+      WHITESPACE@[6; 7)\n+    EQ@[7; 8)\n+    SLICE_TYPE@[8; 13)\n+      WHITESPACE@[8; 9)\n+      L_BRACK@[9; 10)\n+      TUPLE_TYPE@[10; 12)\n+        L_PAREN@[10; 11)\n+        R_PAREN@[11; 12)\n+      R_BRACK@[12; 13)\n+    SEMI@[13; 14)\n+    WHITESPACE@[14; 15)"}, {"sha": "3ac0badabc5a7079741892551866038bb309c380", "filename": "tests/data/parser/inline/0026_reference_type;.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0026_reference_type%3B.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0026_reference_type%3B.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0026_reference_type%3B.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1,3 @@\n+type A = &();\n+type B = &'static ();\n+type C = &mut ();"}, {"sha": "665c021e1a38157e5abed198350c4523ec10b6f1", "filename": "tests/data/parser/inline/0026_reference_type;.txt", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0026_reference_type%3B.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0026_reference_type%3B.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0026_reference_type%3B.txt?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1,50 @@\n+FILE@[0; 54)\n+  TYPE_ITEM@[0; 14)\n+    TYPE_KW@[0; 4)\n+    NAME@[4; 7)\n+      WHITESPACE@[4; 5)\n+      IDENT@[5; 6) \"A\"\n+      WHITESPACE@[6; 7)\n+    EQ@[7; 8)\n+    REFERENCE_TYPE@[8; 12)\n+      WHITESPACE@[8; 9)\n+      AMPERSAND@[9; 10)\n+      TUPLE_TYPE@[10; 12)\n+        L_PAREN@[10; 11)\n+        R_PAREN@[11; 12)\n+    SEMI@[12; 13)\n+    WHITESPACE@[13; 14)\n+  TYPE_ITEM@[14; 36)\n+    TYPE_KW@[14; 18)\n+    NAME@[18; 21)\n+      WHITESPACE@[18; 19)\n+      IDENT@[19; 20) \"B\"\n+      WHITESPACE@[20; 21)\n+    EQ@[21; 22)\n+    REFERENCE_TYPE@[22; 34)\n+      WHITESPACE@[22; 23)\n+      AMPERSAND@[23; 24)\n+      LIFETIME@[24; 31) \"'static\"\n+      TUPLE_TYPE@[31; 34)\n+        WHITESPACE@[31; 32)\n+        L_PAREN@[32; 33)\n+        R_PAREN@[33; 34)\n+    SEMI@[34; 35)\n+    WHITESPACE@[35; 36)\n+  TYPE_ITEM@[36; 54)\n+    TYPE_KW@[36; 40)\n+    NAME@[40; 43)\n+      WHITESPACE@[40; 41)\n+      IDENT@[41; 42) \"C\"\n+      WHITESPACE@[42; 43)\n+    EQ@[43; 44)\n+    REFERENCE_TYPE@[44; 52)\n+      WHITESPACE@[44; 45)\n+      AMPERSAND@[45; 46)\n+      MUT_KW@[46; 49)\n+      TUPLE_TYPE@[49; 52)\n+        WHITESPACE@[49; 50)\n+        L_PAREN@[50; 51)\n+        R_PAREN@[51; 52)\n+    SEMI@[52; 53)\n+    WHITESPACE@[53; 54)"}, {"sha": "7952dbd57d67b2d8780d2e4a995c48e8be157e4e", "filename": "tests/data/parser/inline/0027_placeholder_type.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0027_placeholder_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0027_placeholder_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0027_placeholder_type.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1 @@\n+type Placeholder = _;"}, {"sha": "ab848836c59332e8e16ca90da3a90ce6fca3e10d", "filename": "tests/data/parser/inline/0027_placeholder_type.txt", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0027_placeholder_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0027_placeholder_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0027_placeholder_type.txt?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1,13 @@\n+FILE@[0; 22)\n+  TYPE_ITEM@[0; 22)\n+    TYPE_KW@[0; 4)\n+    NAME@[4; 17)\n+      WHITESPACE@[4; 5)\n+      IDENT@[5; 16) \"Placeholder\"\n+      WHITESPACE@[16; 17)\n+    EQ@[17; 18)\n+    PLACEHOLDER_TYPE@[18; 20)\n+      WHITESPACE@[18; 19)\n+      UNDERSCORE@[19; 20)\n+    SEMI@[20; 21)\n+    WHITESPACE@[21; 22)"}, {"sha": "c9bf3bdb45164cca9765119ef6a21955238d5f9b", "filename": "tests/data/parser/inline/0028_fn_pointer_type.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0028_fn_pointer_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0028_fn_pointer_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0028_fn_pointer_type.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1,3 @@\n+type A = fn();\n+type B = unsafe fn();\n+type C = unsafe extern \"C\" fn();"}, {"sha": "6c62b0051086224ef9c4341ba480878c6a492c20", "filename": "tests/data/parser/inline/0028_fn_pointer_type.txt", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0028_fn_pointer_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0028_fn_pointer_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0028_fn_pointer_type.txt?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1,52 @@\n+FILE@[0; 70)\n+  TYPE_ITEM@[0; 15)\n+    TYPE_KW@[0; 4)\n+    NAME@[4; 7)\n+      WHITESPACE@[4; 5)\n+      IDENT@[5; 6) \"A\"\n+      WHITESPACE@[6; 7)\n+    EQ@[7; 8)\n+    FN_POINTER_TYPE@[8; 13)\n+      WHITESPACE@[8; 9)\n+      FN_KW@[9; 11)\n+      L_PAREN@[11; 12)\n+      R_PAREN@[12; 13)\n+    SEMI@[13; 14)\n+    WHITESPACE@[14; 15)\n+  TYPE_ITEM@[15; 37)\n+    TYPE_KW@[15; 19)\n+    NAME@[19; 22)\n+      WHITESPACE@[19; 20)\n+      IDENT@[20; 21) \"B\"\n+      WHITESPACE@[21; 22)\n+    EQ@[22; 23)\n+    FN_POINTER_TYPE@[23; 35)\n+      WHITESPACE@[23; 24)\n+      UNSAFE_KW@[24; 30)\n+      WHITESPACE@[30; 31)\n+      FN_KW@[31; 33)\n+      L_PAREN@[33; 34)\n+      R_PAREN@[34; 35)\n+    SEMI@[35; 36)\n+    WHITESPACE@[36; 37)\n+  TYPE_ITEM@[37; 70)\n+    TYPE_KW@[37; 41)\n+    NAME@[41; 44)\n+      WHITESPACE@[41; 42)\n+      IDENT@[42; 43) \"C\"\n+      WHITESPACE@[43; 44)\n+    EQ@[44; 45)\n+    FN_POINTER_TYPE@[45; 68)\n+      WHITESPACE@[45; 46)\n+      UNSAFE_KW@[46; 52)\n+      ABI@[52; 64)\n+        WHITESPACE@[52; 53)\n+        EXTERN_KW@[53; 59)\n+        WHITESPACE@[59; 60)\n+        STRING@[60; 63)\n+        WHITESPACE@[63; 64)\n+      FN_KW@[64; 66)\n+      L_PAREN@[66; 67)\n+      R_PAREN@[67; 68)\n+    SEMI@[68; 69)\n+    WHITESPACE@[69; 70)"}, {"sha": "f014914ff9f493e2a034c655e46c86461b55fc06", "filename": "tests/data/parser/inline/0029_fn_pointer_type_missing_fn.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0029_fn_pointer_type_missing_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0029_fn_pointer_type_missing_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0029_fn_pointer_type_missing_fn.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1 @@\n+type F = unsafe ();"}, {"sha": "dd6e24096825e783bc33fe15d5a9845fce4b9f32", "filename": "tests/data/parser/inline/0029_fn_pointer_type_missing_fn.txt", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0029_fn_pointer_type_missing_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0029_fn_pointer_type_missing_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0029_fn_pointer_type_missing_fn.txt?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1,24 @@\n+FILE@[0; 20)\n+  TYPE_ITEM@[0; 16)\n+    TYPE_KW@[0; 4)\n+    NAME@[4; 7)\n+      WHITESPACE@[4; 5)\n+      IDENT@[5; 6) \"F\"\n+      WHITESPACE@[6; 7)\n+    EQ@[7; 8)\n+    WHITESPACE@[8; 9)\n+    UNSAFE_KW@[9; 15)\n+    err: `expected `fn``\n+    err: `expected SEMI`\n+    WHITESPACE@[15; 16)\n+  ERROR@[16; 17)\n+  err: `expected item`\n+    L_PAREN@[16; 17)\n+  ERROR@[17; 18)\n+  err: `expected item`\n+    R_PAREN@[17; 18)\n+  ERROR@[18; 20)\n+  err: `expected item, found `;`\n+consider removing this semicolon`\n+    SEMI@[18; 19)\n+    WHITESPACE@[19; 20)"}, {"sha": "e3ba5e87f5d4ee39a8f3175475cc76c431137992", "filename": "tests/data/parser/inline/0030_fn_pointer_type_with_ret.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0030_fn_pointer_type_with_ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0030_fn_pointer_type_with_ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0030_fn_pointer_type_with_ret.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1 @@\n+type F = fn() -> ();"}, {"sha": "b41efa3682b398a8b122114b535354ced08ca355", "filename": "tests/data/parser/inline/0030_fn_pointer_type_with_ret.txt", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0030_fn_pointer_type_with_ret.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Fdata%2Fparser%2Finline%2F0030_fn_pointer_type_with_ret.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0030_fn_pointer_type_with_ret.txt?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -0,0 +1,21 @@\n+FILE@[0; 21)\n+  TYPE_ITEM@[0; 21)\n+    TYPE_KW@[0; 4)\n+    NAME@[4; 7)\n+      WHITESPACE@[4; 5)\n+      IDENT@[5; 6) \"F\"\n+      WHITESPACE@[6; 7)\n+    EQ@[7; 8)\n+    FN_POINTER_TYPE@[8; 19)\n+      WHITESPACE@[8; 9)\n+      FN_KW@[9; 11)\n+      L_PAREN@[11; 12)\n+      R_PAREN@[12; 13)\n+      WHITESPACE@[13; 14)\n+      THIN_ARROW@[14; 16)\n+      TUPLE_TYPE@[16; 19)\n+        WHITESPACE@[16; 17)\n+        L_PAREN@[17; 18)\n+        R_PAREN@[18; 19)\n+    SEMI@[19; 20)\n+    WHITESPACE@[20; 21)"}, {"sha": "ae1dea810b13dabcec1764d20dfd5be477a2deb5", "filename": "tests/testutils/src/lib.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Ftestutils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7176029803fe2e00f29ab7d20a384e3ee6f53ba3/tests%2Ftestutils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftestutils%2Fsrc%2Flib.rs?ref=7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "patch": "@@ -26,21 +26,20 @@ where\n     F: Fn(&str) -> String,\n {\n     for path in collect_tests(paths) {\n-        let actual = {\n-            let text = read_text(&path);\n-            f(&text)\n-        };\n+        let input_code = read_text(&path);\n+        let parse_tree = f(&input_code);\n         let path = path.with_extension(\"txt\");\n         if !path.exists() {\n             println!(\"\\nfile: {}\", path.display());\n-            println!(\"No .txt file with expected result, creating...\");\n-            file::put_text(&path, actual).unwrap();\n+            println!(\"No .txt file with expected result, creating...\\n\");\n+            println!(\"{}\\n{}\", input_code, parse_tree);\n+            file::put_text(&path, parse_tree).unwrap();\n             panic!(\"No expected result\")\n         }\n         let expected = read_text(&path);\n         let expected = expected.as_str();\n-        let actual = actual.as_str();\n-        assert_equal_text(expected, actual, &path);\n+        let parse_tree = parse_tree.as_str();\n+        assert_equal_text(expected, parse_tree, &path);\n     }\n }\n "}]}