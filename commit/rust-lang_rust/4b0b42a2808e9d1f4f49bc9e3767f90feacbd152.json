{"sha": "4b0b42a2808e9d1f4f49bc9e3767f90feacbd152", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMGI0MmEyODA4ZTlkMWY0ZjQ5YmM5ZTM3NjdmOTBmZWFjYmQxNTI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-12T18:46:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-12T18:46:08Z"}, "message": "Rollup merge of #76730 - ebkalderon:rustdoc-fix-mut-args-async-fn, r=tmandry\n\nFix rustdoc rendering of by-value mutable arguments in async fn\n\nr? `@jyn514`\n\nFixes #76517.", "tree": {"sha": "9ca890cf1bd263bdfdb22bccab2d2dba15996b90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca890cf1bd263bdfdb22bccab2d2dba15996b90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b0b42a2808e9d1f4f49bc9e3767f90feacbd152", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfrYLwCRBK7hj4Ov3rIwAAdHIIABhwg/xlEByhi+N2mZYRE8JS\n6GpnGUnh3EXNLq/9c85U82LpqRv3Jvm5/jy94G3aFR7snVVxuvo/LJyl+/wKIizA\ntKMYzOYzNkiDxipo4eJ756l/g368jQgDo1tRhCya4fmaRQwTOLfO3DF8zwmsrgZ5\n75BQHMW8y71JJZgD/2zRL6J9jnRdPuQA6DK0XlhHwBa5WxjMDPYgeVLBss4fYaGP\n19Os+XmT55yKsnryfB28FufIv3QJNx0wbw1xZloGIw3xpUoC963d6rkwRsgXzYY9\nC9XL7rsOPWt7BALfVswp57mn43smN4cgaM98eYH67rB51FsfDTdSNq2dePxseUE=\n=tI45\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ca890cf1bd263bdfdb22bccab2d2dba15996b90\nparent 9722952f0bed5815cb22cb4878be09fb39f92804\nparent 38127caf730ab6e99d3ea546db4c2df69229afba\nauthor Mara Bos <m-ou.se@m-ou.se> 1605206768 +0100\ncommitter GitHub <noreply@github.com> 1605206768 +0100\n\nRollup merge of #76730 - ebkalderon:rustdoc-fix-mut-args-async-fn, r=tmandry\n\nFix rustdoc rendering of by-value mutable arguments in async fn\n\nr? `@jyn514`\n\nFixes #76517.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b0b42a2808e9d1f4f49bc9e3767f90feacbd152", "html_url": "https://github.com/rust-lang/rust/commit/4b0b42a2808e9d1f4f49bc9e3767f90feacbd152", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b0b42a2808e9d1f4f49bc9e3767f90feacbd152/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9722952f0bed5815cb22cb4878be09fb39f92804", "url": "https://api.github.com/repos/rust-lang/rust/commits/9722952f0bed5815cb22cb4878be09fb39f92804", "html_url": "https://github.com/rust-lang/rust/commit/9722952f0bed5815cb22cb4878be09fb39f92804"}, {"sha": "38127caf730ab6e99d3ea546db4c2df69229afba", "url": "https://api.github.com/repos/rust-lang/rust/commits/38127caf730ab6e99d3ea546db4c2df69229afba", "html_url": "https://github.com/rust-lang/rust/commit/38127caf730ab6e99d3ea546db4c2df69229afba"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "d353bc19f7aef510d759169cc2446527bafd4ef6", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b0b42a2808e9d1f4f49bc9e3767f90feacbd152/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0b42a2808e9d1f4f49bc9e3767f90feacbd152/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=4b0b42a2808e9d1f4f49bc9e3767f90feacbd152", "patch": "@@ -1096,8 +1096,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // Check if this is a binding pattern, if so, we can optimize and avoid adding a\n                 // `let <pat> = __argN;` statement. In this case, we do not rename the parameter.\n                 let (ident, is_simple_parameter) = match parameter.pat.kind {\n-                    hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, ident, _) => {\n-                        (ident, true)\n+                    hir::PatKind::Binding(\n+                        hir::BindingAnnotation::Unannotated | hir::BindingAnnotation::Mutable,\n+                        _,\n+                        ident,\n+                        _,\n+                    ) => (ident, true),\n+                    // For `ref mut` or wildcard arguments, we can't reuse the binding, but\n+                    // we can keep the same name for the parameter.\n+                    // This lets rustdoc render it correctly in documentation.\n+                    hir::PatKind::Binding(_, _, ident, _) => (ident, false),\n+                    hir::PatKind::Wild => {\n+                        (Ident::with_dummy_span(rustc_span::symbol::kw::Underscore), false)\n                     }\n                     _ => {\n                         // Replace the ident for bindings that aren't simple."}, {"sha": "e7a7d1831f73efbef707ef40b05e0671b4d0b30f", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b0b42a2808e9d1f4f49bc9e3767f90feacbd152/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0b42a2808e9d1f4f49bc9e3767f90feacbd152/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=4b0b42a2808e9d1f4f49bc9e3767f90feacbd152", "patch": "@@ -1,4 +1,5 @@\n // edition:2018\n+#![feature(min_const_generics)]\n \n // @has async_fn/fn.foo.html '//pre[@class=\"rust fn\"]' 'pub async fn foo() -> Option<Foo>'\n pub async fn foo() -> Option<Foo> {\n@@ -20,6 +21,12 @@ pub async unsafe fn qux() -> char {\n     '\u26a0'\n }\n \n+// @has async_fn/fn.mut_args.html '//pre[@class=\"rust fn\"]' 'pub async fn mut_args(a: usize)'\n+pub async fn mut_args(mut a: usize) {}\n+\n+// @has async_fn/fn.mut_ref.html '//pre[@class=\"rust fn\"]' 'pub async fn mut_ref(x: i32)'\n+pub async fn mut_ref(ref mut x: i32) {}\n+\n trait Bar {}\n \n impl Bar for () {}\n@@ -32,9 +39,16 @@ pub async fn quux() -> impl Bar {\n // @has async_fn/struct.Foo.html\n // @matches - '//code' 'pub async fn f\\(\\)$'\n // @matches - '//code' 'pub async unsafe fn g\\(\\)$'\n+// @matches - '//code' 'pub async fn mut_self\\(self, first: usize\\)$'\n pub struct Foo;\n \n impl Foo {\n     pub async fn f() {}\n     pub async unsafe fn g() {}\n+    pub async fn mut_self(mut self, mut first: usize) {}\n }\n+\n+pub trait Trait<const N: usize> {}\n+// @has async_fn/fn.const_generics.html\n+// @has - '//pre[@class=\"rust fn\"]' 'pub async fn const_generics<const N: usize>(_: impl Trait<N>)'\n+pub async fn const_generics<const N: usize>(_: impl Trait<N>) {}"}, {"sha": "9c68e067c6f8ffda550c9faba2dd8d5b04c398d9", "filename": "src/test/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b0b42a2808e9d1f4f49bc9e3767f90feacbd152/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0b42a2808e9d1f4f49bc9e3767f90feacbd152/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=4b0b42a2808e9d1f4f49bc9e3767f90feacbd152", "patch": "@@ -70,8 +70,7 @@ pub async fn a_sink<const N: usize>(v: [u8; N]) -> impl Trait<N> {\n }\n \n // @has foo/fn.b_sink.html '//pre[@class=\"rust fn\"]' \\\n-//      'pub async fn b_sink<const N: usize>(__arg0: impl Trait<N>)'\n-// FIXME(const_generics): This should be `_` not `__arg0`.\n+//      'pub async fn b_sink<const N: usize>(_: impl Trait<N>)'\n pub async fn b_sink<const N: usize>(_: impl Trait<N>) {}\n \n // @has foo/fn.concrete.html '//pre[@class=\"rust fn\"]' \\"}]}