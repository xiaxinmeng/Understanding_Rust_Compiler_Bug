{"sha": "887515af33f80d85b76b41ef175ea1ec0e208776", "node_id": "C_kwDOAAsO6NoAKDg4NzUxNWFmMzNmODBkODViNzZiNDFlZjE3NWVhMWVjMGUyMDg3NzY", "commit": {"author": {"name": "stoozy", "email": "stoozy@proton.me", "date": "2022-09-26T17:10:24Z"}, "committer": {"name": "stoozy", "email": "stoozy@proton.me", "date": "2022-09-26T17:10:24Z"}, "message": "Trying to suggest additional lifetime parameter", "tree": {"sha": "ca2e590203c88c9461edb55f0212fb1d1dd9b6a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca2e590203c88c9461edb55f0212fb1d1dd9b6a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/887515af33f80d85b76b41ef175ea1ec0e208776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/887515af33f80d85b76b41ef175ea1ec0e208776", "html_url": "https://github.com/rust-lang/rust/commit/887515af33f80d85b76b41ef175ea1ec0e208776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/887515af33f80d85b76b41ef175ea1ec0e208776/comments", "author": {"login": "Stoozy", "id": 16365016, "node_id": "MDQ6VXNlcjE2MzY1MDE2", "avatar_url": "https://avatars.githubusercontent.com/u/16365016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stoozy", "html_url": "https://github.com/Stoozy", "followers_url": "https://api.github.com/users/Stoozy/followers", "following_url": "https://api.github.com/users/Stoozy/following{/other_user}", "gists_url": "https://api.github.com/users/Stoozy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stoozy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stoozy/subscriptions", "organizations_url": "https://api.github.com/users/Stoozy/orgs", "repos_url": "https://api.github.com/users/Stoozy/repos", "events_url": "https://api.github.com/users/Stoozy/events{/privacy}", "received_events_url": "https://api.github.com/users/Stoozy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stoozy", "id": 16365016, "node_id": "MDQ6VXNlcjE2MzY1MDE2", "avatar_url": "https://avatars.githubusercontent.com/u/16365016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stoozy", "html_url": "https://github.com/Stoozy", "followers_url": "https://api.github.com/users/Stoozy/followers", "following_url": "https://api.github.com/users/Stoozy/following{/other_user}", "gists_url": "https://api.github.com/users/Stoozy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stoozy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stoozy/subscriptions", "organizations_url": "https://api.github.com/users/Stoozy/orgs", "repos_url": "https://api.github.com/users/Stoozy/repos", "events_url": "https://api.github.com/users/Stoozy/events{/privacy}", "received_events_url": "https://api.github.com/users/Stoozy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d7dec558d863fb76f98453088b36cb1a926d48", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d7dec558d863fb76f98453088b36cb1a926d48", "html_url": "https://github.com/rust-lang/rust/commit/e1d7dec558d863fb76f98453088b36cb1a926d48"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "c69242f5d33a1ba5a27dd39cf4b5303febc7a338", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/887515af33f80d85b76b41ef175ea1ec0e208776/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887515af33f80d85b76b41ef175ea1ec0e208776/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=887515af33f80d85b76b41ef175ea1ec0e208776", "patch": "@@ -8,7 +8,7 @@\n \n use rustc_ast::walk_list;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap, FxIndexSet};\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::LocalDefId;\n@@ -24,6 +24,7 @@ use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use std::fmt;\n \n+\n trait RegionExt {\n     fn early(hir_map: Map<'_>, param: &GenericParam<'_>) -> (LocalDefId, Region);\n \n@@ -1318,13 +1319,36 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         && let hir::IsAsync::NotAsync = self.tcx.asyncness(lifetime_ref.hir_id.owner.def_id)\n                         && !self.tcx.features().anonymous_lifetime_in_impl_trait\n                     {\n-                        rustc_session::parse::feature_err(\n-                            &self.tcx.sess.parse_sess,\n-                            sym::anonymous_lifetime_in_impl_trait,\n-                            lifetime_ref.span,\n-                            \"anonymous lifetimes in `impl Trait` are unstable\",\n-                        ).emit();\n-                        return;\n+\n+                        match self.tcx.hir().get_generics(lifetime_ref.hir_id.owner.to_def_id().as_local().unwrap()) {\n+                            Some(generics) => {\n+                                for i in 0..generics.params.len()  {\n+\n+                                    if !generics.span.contains(generics.params[i].span)  {\n+                                        struct_span_err!(\n+                                            self.tcx.sess,\n+                                            lifetime_ref.span,\n+                                            E0106,\n+                                            \"missing lifetime specifier\"\n+                                            )\n+                                            .span_label(lifetime_ref.span, \"expected named lifetime parameter\")\n+                                            .span_help(generics.span, \"consider introducing a named lifetime parameter\")\n+                                            .emit();\n+                                            return;\n+                                    }\n+                                }\n+                            },\n+                            None => {\n+                                rustc_session::parse::feature_err(\n+                                    &self.tcx.sess.parse_sess,\n+                                    sym::anonymous_lifetime_in_impl_trait,\n+                                    lifetime_ref.span,\n+                                    \"anonymous lifetimes in `impl Trait` are unstable\",\n+                                ).emit();\n+                                return;\n+                            }\n+                        }\n+\n                     }\n                     scope = s;\n                 }"}]}