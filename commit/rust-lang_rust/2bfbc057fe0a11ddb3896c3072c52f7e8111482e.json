{"sha": "2bfbc057fe0a11ddb3896c3072c52f7e8111482e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZmJjMDU3ZmUwYTExZGRiMzg5NmMzMDcyYzUyZjdlODExMTQ4MmU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-20T12:21:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-20T12:21:09Z"}, "message": "Rollup merge of #72361 - golddranks:split_inclusive_add_tracking_issue, r=shepmaster\n\nsplit_inclusive: add tracking issue number (72360)\n\nAdds tracking issue number ( https://github.com/rust-lang/rust/issues/72360 ) to the unstable feature attributes.", "tree": {"sha": "77a9a664937d942527700880edb4647f4ad5b238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77a9a664937d942527700880edb4647f4ad5b238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bfbc057fe0a11ddb3896c3072c52f7e8111482e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJexSC2CRBK7hj4Ov3rIwAAdHIIAAlZf8LjbT7Hg4NWFkvOqgCO\nodXzUn4c5QB0ZNEujKkbEsAzjQoQJxMJ44uowFW+qu/gnjpodWcGqBiu//CRBf69\n8l+I+m/UodNL1HNDr5gbvHHQMsooL82rvJ16G2btyynFgTWuNMeFJW3a/+j9D9sS\nanqtQx/sCsqpr1snHAlUmPy0xyy4tdA/5NbpQZ3mAh/6+LGxOrXc83DC/xozd8wC\nVQmxKJ1VBCmYjpOjSOU1yiGFSpBYSkejGdDnNhwRedgYgBheQ7ppyZb27TNaNpzB\nyo3l/FmjUm5JbHF02nZJIX1ZJgM0mWqUaQZ+ZXtHcSZgogPgydylxdCnRDg7e94=\n=6ivS\n-----END PGP SIGNATURE-----\n", "payload": "tree 77a9a664937d942527700880edb4647f4ad5b238\nparent 68fd4e098c0629528ba9da81ad752b43d32e7d6c\nparent 46159b36103bc36d0bac8b78062f8f8834d9ad71\nauthor Dylan DPC <dylan.dpc@gmail.com> 1589977269 +0200\ncommitter GitHub <noreply@github.com> 1589977269 +0200\n\nRollup merge of #72361 - golddranks:split_inclusive_add_tracking_issue, r=shepmaster\n\nsplit_inclusive: add tracking issue number (72360)\n\nAdds tracking issue number ( https://github.com/rust-lang/rust/issues/72360 ) to the unstable feature attributes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bfbc057fe0a11ddb3896c3072c52f7e8111482e", "html_url": "https://github.com/rust-lang/rust/commit/2bfbc057fe0a11ddb3896c3072c52f7e8111482e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bfbc057fe0a11ddb3896c3072c52f7e8111482e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68fd4e098c0629528ba9da81ad752b43d32e7d6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/68fd4e098c0629528ba9da81ad752b43d32e7d6c", "html_url": "https://github.com/rust-lang/rust/commit/68fd4e098c0629528ba9da81ad752b43d32e7d6c"}, {"sha": "46159b36103bc36d0bac8b78062f8f8834d9ad71", "url": "https://api.github.com/repos/rust-lang/rust/commits/46159b36103bc36d0bac8b78062f8f8834d9ad71", "html_url": "https://github.com/rust-lang/rust/commit/46159b36103bc36d0bac8b78062f8f8834d9ad71"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "9582ac33ff6b78ac9387d9ee6347c58e34a1a19d", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2bfbc057fe0a11ddb3896c3072c52f7e8111482e/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfbc057fe0a11ddb3896c3072c52f7e8111482e/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=2bfbc057fe0a11ddb3896c3072c52f7e8111482e", "patch": "@@ -1169,7 +1169,7 @@ impl<T> [T] {\n     /// assert_eq!(iter.next().unwrap(), &[10, 40, 33]);\n     /// assert!(iter.next().is_none());\n     /// ```\n-    #[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+    #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n     #[inline]\n     pub fn split_inclusive<F>(&self, pred: F) -> SplitInclusive<'_, T, F>\n     where\n@@ -1194,7 +1194,7 @@ impl<T> [T] {\n     /// }\n     /// assert_eq!(v, [10, 40, 1, 20, 1, 1]);\n     /// ```\n-    #[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+    #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n     #[inline]\n     pub fn split_inclusive_mut<F>(&mut self, pred: F) -> SplitInclusiveMut<'_, T, F>\n     where\n@@ -3852,7 +3852,7 @@ impl<T, P> FusedIterator for Split<'_, T, P> where P: FnMut(&T) -> bool {}\n ///\n /// [`split_inclusive`]: ../../std/primitive.slice.html#method.split_inclusive\n /// [slices]: ../../std/primitive.slice.html\n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n pub struct SplitInclusive<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -3862,7 +3862,7 @@ where\n     finished: bool,\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<T: fmt::Debug, P> fmt::Debug for SplitInclusive<'_, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -3876,7 +3876,7 @@ where\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<T, P> Clone for SplitInclusive<'_, T, P>\n where\n     P: Clone + FnMut(&T) -> bool,\n@@ -3886,7 +3886,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, T, P> Iterator for SplitInclusive<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -3915,7 +3915,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, T, P> DoubleEndedIterator for SplitInclusive<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -3940,7 +3940,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<T, P> FusedIterator for SplitInclusive<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over the mutable subslices of the vector which are separated\n@@ -4065,7 +4065,7 @@ impl<T, P> FusedIterator for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {}\n ///\n /// [`split_inclusive_mut`]: ../../std/primitive.slice.html#method.split_inclusive_mut\n /// [slices]: ../../std/primitive.slice.html\n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n pub struct SplitInclusiveMut<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -4075,7 +4075,7 @@ where\n     finished: bool,\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<T: fmt::Debug, P> fmt::Debug for SplitInclusiveMut<'_, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -4088,7 +4088,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, T, P> Iterator for SplitInclusiveMut<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -4128,7 +4128,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, T, P> DoubleEndedIterator for SplitInclusiveMut<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -4162,7 +4162,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<T, P> FusedIterator for SplitInclusiveMut<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over subslices separated by elements that match a predicate"}, {"sha": "c517286d49898ab824872b90c40f8cfed323b6b9", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2bfbc057fe0a11ddb3896c3072c52f7e8111482e/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfbc057fe0a11ddb3896c3072c52f7e8111482e/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=2bfbc057fe0a11ddb3896c3072c52f7e8111482e", "patch": "@@ -3335,7 +3335,7 @@ impl str {\n     ///     .split_inclusive('\\n').collect();\n     /// assert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n     /// ```\n-    #[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+    #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n     #[inline]\n     pub fn split_inclusive<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitInclusive<'a, P> {\n         SplitInclusive(SplitInternal {\n@@ -4575,7 +4575,7 @@ pub struct SplitAsciiWhitespace<'a> {\n ///\n /// [`split_inclusive`]: ../../std/primitive.str.html#method.split_inclusive\n /// [`str`]: ../../std/primitive.str.html\n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n pub struct SplitInclusive<'a, P: Pattern<'a>>(SplitInternal<'a, P>);\n \n impl_fn_for_zst! {\n@@ -4668,7 +4668,7 @@ impl<'a> DoubleEndedIterator for SplitAsciiWhitespace<'a> {\n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n impl FusedIterator for SplitAsciiWhitespace<'_> {}\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, P: Pattern<'a>> Iterator for SplitInclusive<'a, P> {\n     type Item = &'a str;\n \n@@ -4678,22 +4678,22 @@ impl<'a, P: Pattern<'a>> Iterator for SplitInclusive<'a, P> {\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, P: Pattern<'a, Searcher: fmt::Debug>> fmt::Debug for SplitInclusive<'a, P> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitInclusive\").field(\"0\", &self.0).finish()\n     }\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, P: Pattern<'a, Searcher: Clone>> Clone for SplitInclusive<'a, P> {\n     fn clone(&self) -> Self {\n         SplitInclusive(self.0.clone())\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, P: Pattern<'a, Searcher: ReverseSearcher<'a>>> DoubleEndedIterator\n     for SplitInclusive<'a, P>\n {\n@@ -4703,7 +4703,7 @@ impl<'a, P: Pattern<'a, Searcher: ReverseSearcher<'a>>> DoubleEndedIterator\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, P: Pattern<'a>> FusedIterator for SplitInclusive<'a, P> {}\n \n /// An iterator of [`u16`] over the string encoded as UTF-16."}]}