{"sha": "0498845e54baf8f3bf493de39009d2d175dbd374", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0OTg4NDVlNTRiYWY4ZjNiZjQ5M2RlMzkwMDlkMmQxNzVkYmQzNzQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-25T21:58:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-25T21:58:54Z"}, "message": "Rollup merge of #72424 - RalfJung:mir-print-ice, r=oli-obk\n\nfix ICE when debug-printing MIR\n\nFixes https://github.com/rust-lang/rust/issues/72105\n\nThis bug also makes debugging Miri harder as `MIRI_LOG=info` ICEs.", "tree": {"sha": "6c9731c65847aaf1323736d101028fa51196da6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c9731c65847aaf1323736d101028fa51196da6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0498845e54baf8f3bf493de39009d2d175dbd374", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJezD+fCRBK7hj4Ov3rIwAAdHIIAKkIJCr0c0Q3ICxK+B0APXt0\nsEC0qMyB4xdxuzvdCC9oBl0Q/5WSuQE64J5jSVGclV02Bux+GQd/Em86j8ez4OiZ\nI+mNSfwAwM1yKyZy/yuUZ6MQQvzHBERurLm/KS+arqdxAkFbGffZ1SDjUueDL1NP\nSfZYd9dTzowh+8ZGTdbPyd9YtjCHRPoAHyBCVOkLkJvRmCLdmaX/5E9NQdKpy8nw\n3T9AFAZYjOAEvRXX+XhVcqIap01ShJ5IFSSw4S7PwDScpIcjEexmLGHR5NnU6JIv\nAtXmxkPOGbBSYCgEbesAv+ZCQa7SIGNwVB+pi9tJaWkIUgvpmfAMM5xzyNnRZoQ=\n=94oX\n-----END PGP SIGNATURE-----\n", "payload": "tree 6c9731c65847aaf1323736d101028fa51196da6a\nparent b3f1b9541a2cbf3d541c5b764db3126d928859f4\nparent d59fa081ec272573ef560c4ea914466fce74db3c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590443934 +0200\ncommitter GitHub <noreply@github.com> 1590443934 +0200\n\nRollup merge of #72424 - RalfJung:mir-print-ice, r=oli-obk\n\nfix ICE when debug-printing MIR\n\nFixes https://github.com/rust-lang/rust/issues/72105\n\nThis bug also makes debugging Miri harder as `MIRI_LOG=info` ICEs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0498845e54baf8f3bf493de39009d2d175dbd374", "html_url": "https://github.com/rust-lang/rust/commit/0498845e54baf8f3bf493de39009d2d175dbd374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0498845e54baf8f3bf493de39009d2d175dbd374/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3f1b9541a2cbf3d541c5b764db3126d928859f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f1b9541a2cbf3d541c5b764db3126d928859f4", "html_url": "https://github.com/rust-lang/rust/commit/b3f1b9541a2cbf3d541c5b764db3126d928859f4"}, {"sha": "d59fa081ec272573ef560c4ea914466fce74db3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d59fa081ec272573ef560c4ea914466fce74db3c", "html_url": "https://github.com/rust-lang/rust/commit/d59fa081ec272573ef560c4ea914466fce74db3c"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "10426cf8561887bdd7af748d21bfd6b260273b62", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0498845e54baf8f3bf493de39009d2d175dbd374/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0498845e54baf8f3bf493de39009d2d175dbd374/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=0498845e54baf8f3bf493de39009d2d175dbd374", "patch": "@@ -1,5 +1,7 @@\n use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n-use crate::mir::interpret::{sign_extend, truncate, AllocId, ConstValue, Pointer, Scalar};\n+use crate::mir::interpret::{\n+    sign_extend, truncate, AllocId, ConstValue, GlobalAlloc, Pointer, Scalar,\n+};\n use crate::ty::layout::IntegerExt;\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n use crate::ty::{self, DefIdTree, ParamConst, Ty, TyCtxt, TypeFoldable};\n@@ -951,15 +953,20 @@ pub trait PrettyPrinter<'tcx>:\n                     },\n                     _,\n                 ),\n-            ) => {\n-                let byte_str = self\n-                    .tcx()\n-                    .global_alloc(ptr.alloc_id)\n-                    .unwrap_memory()\n-                    .get_bytes(&self.tcx(), ptr, Size::from_bytes(*data))\n-                    .unwrap();\n-                p!(pretty_print_byte_str(byte_str));\n-            }\n+            ) => match self.tcx().get_global_alloc(ptr.alloc_id) {\n+                Some(GlobalAlloc::Memory(alloc)) => {\n+                    if let Ok(byte_str) = alloc.get_bytes(&self.tcx(), ptr, Size::from_bytes(*data))\n+                    {\n+                        p!(pretty_print_byte_str(byte_str))\n+                    } else {\n+                        p!(write(\"<too short allocation>\"))\n+                    }\n+                }\n+                // FIXME: for statics and functions, we could in principle print more detail.\n+                Some(GlobalAlloc::Static(def_id)) => p!(write(\"<static({:?})>\", def_id)),\n+                Some(GlobalAlloc::Function(_)) => p!(write(\"<function>\")),\n+                None => p!(write(\"<dangling pointer>\")),\n+            },\n             // Bool\n             (Scalar::Raw { data: 0, .. }, ty::Bool) => p!(write(\"false\")),\n             (Scalar::Raw { data: 1, .. }, ty::Bool) => p!(write(\"true\")),\n@@ -1018,6 +1025,9 @@ pub trait PrettyPrinter<'tcx>:\n                 )?;\n             }\n             (Scalar::Ptr(ptr), ty::FnPtr(_)) => {\n+                // FIXME: this can ICE when the ptr is dangling or points to a non-function.\n+                // We should probably have a helper method to share code with the \"Byte strings\"\n+                // printing above (which also has to handle pointers to all sorts of things).\n                 let instance = self.tcx().global_alloc(ptr.alloc_id).unwrap_fn();\n                 self = self.typed_value(\n                     |this| this.print_value_path(instance.def_id(), instance.substs),"}]}