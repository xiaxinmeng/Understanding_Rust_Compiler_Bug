{"sha": "019c0d5f7f90f959ff92684a04b0d766b22527a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOWMwZDVmN2Y5MGY5NTlmZjkyNjg0YTA0YjBkNzY2YjIyNTI3YTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-24T13:45:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-24T13:45:24Z"}, "message": "Auto merge of #6076 - rail-rain:fix_fp_explicit_counter_loop, r=matthiaskrgr\n\nFix a FP in `explicit_counter_loop`\n\nFixes #4677 and #6074\n\nFix a false positive in `explicit_counter_loop` where the loop counter is used after incremented, adjust the test so that counters are incremented at the end of the loop and add the test for this false positive.\n\n---\n\nchangelog: Fix a false positive in `explicit_counter_loop` where the loop counter is used after incremented", "tree": {"sha": "08ccf7ed491edf68bf61a4d936b31b4be0e0f870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08ccf7ed491edf68bf61a4d936b31b4be0e0f870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/019c0d5f7f90f959ff92684a04b0d766b22527a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/019c0d5f7f90f959ff92684a04b0d766b22527a5", "html_url": "https://github.com/rust-lang/rust/commit/019c0d5f7f90f959ff92684a04b0d766b22527a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/019c0d5f7f90f959ff92684a04b0d766b22527a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e636b88aa180e8cab9e28802aac90adbc984234d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e636b88aa180e8cab9e28802aac90adbc984234d", "html_url": "https://github.com/rust-lang/rust/commit/e636b88aa180e8cab9e28802aac90adbc984234d"}, {"sha": "5e393c7747d081c45414060f81016e9ea3cb961f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e393c7747d081c45414060f81016e9ea3cb961f", "html_url": "https://github.com/rust-lang/rust/commit/5e393c7747d081c45414060f81016e9ea3cb961f"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "7f998c63f497b6eb336e06b505b55490560a8cc9", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/019c0d5f7f90f959ff92684a04b0d766b22527a5/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019c0d5f7f90f959ff92684a04b0d766b22527a5/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=019c0d5f7f90f959ff92684a04b0d766b22527a5", "patch": "@@ -2134,7 +2134,7 @@ enum VarState {\n     DontWarn,\n }\n \n-/// Scan a for loop for variables that are incremented exactly once.\n+/// Scan a for loop for variables that are incremented exactly once and not used after that.\n struct IncrementVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,          // context reference\n     states: FxHashMap<HirId, VarState>, // incremented variables\n@@ -2154,6 +2154,10 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n         if let Some(def_id) = var_def_id(self.cx, expr) {\n             if let Some(parent) = get_parent_expr(self.cx, expr) {\n                 let state = self.states.entry(def_id).or_insert(VarState::Initial);\n+                if *state == VarState::IncrOnce {\n+                    *state = VarState::DontWarn;\n+                    return;\n+                }\n \n                 match parent.kind {\n                     ExprKind::AssignOp(op, ref lhs, ref rhs) => {"}, {"sha": "81d8221bd13e01d01e15ed5b35bdbea61867c6c7", "filename": "tests/ui/explicit_counter_loop.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/019c0d5f7f90f959ff92684a04b0d766b22527a5/tests%2Fui%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019c0d5f7f90f959ff92684a04b0d766b22527a5/tests%2Fui%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.rs?ref=019c0d5f7f90f959ff92684a04b0d766b22527a5", "patch": "@@ -38,54 +38,54 @@ mod issue_1219 {\n         let text = \"banana\";\n         let mut count = 0;\n         for ch in text.chars() {\n+            println!(\"{}\", count);\n             if ch == 'a' {\n                 continue;\n             }\n             count += 1;\n-            println!(\"{}\", count);\n         }\n \n         // should not trigger the lint because the count is conditional\n         let text = \"banana\";\n         let mut count = 0;\n         for ch in text.chars() {\n+            println!(\"{}\", count);\n             if ch == 'a' {\n                 count += 1;\n             }\n-            println!(\"{}\", count);\n         }\n \n         // should trigger the lint because the count is not conditional\n         let text = \"banana\";\n         let mut count = 0;\n         for ch in text.chars() {\n+            println!(\"{}\", count);\n             count += 1;\n             if ch == 'a' {\n                 continue;\n             }\n-            println!(\"{}\", count);\n         }\n \n         // should trigger the lint because the count is not conditional\n         let text = \"banana\";\n         let mut count = 0;\n         for ch in text.chars() {\n+            println!(\"{}\", count);\n             count += 1;\n             for i in 0..2 {\n                 let _ = 123;\n             }\n-            println!(\"{}\", count);\n         }\n \n         // should not trigger the lint because the count is incremented multiple times\n         let text = \"banana\";\n         let mut count = 0;\n         for ch in text.chars() {\n+            println!(\"{}\", count);\n             count += 1;\n             for i in 0..2 {\n                 count += 1;\n             }\n-            println!(\"{}\", count);\n         }\n     }\n }\n@@ -96,30 +96,30 @@ mod issue_3308 {\n         let mut skips = 0;\n         let erasures = vec![];\n         for i in 0..10 {\n+            println!(\"{}\", skips);\n             while erasures.contains(&(i + skips)) {\n                 skips += 1;\n             }\n-            println!(\"{}\", skips);\n         }\n \n         // should not trigger the lint because the count is incremented multiple times\n         let mut skips = 0;\n         for i in 0..10 {\n+            println!(\"{}\", skips);\n             let mut j = 0;\n             while j < 5 {\n                 skips += 1;\n                 j += 1;\n             }\n-            println!(\"{}\", skips);\n         }\n \n         // should not trigger the lint because the count is incremented multiple times\n         let mut skips = 0;\n         for i in 0..10 {\n+            println!(\"{}\", skips);\n             for j in 0..5 {\n                 skips += 1;\n             }\n-            println!(\"{}\", skips);\n         }\n     }\n }\n@@ -145,3 +145,16 @@ mod issue_4732 {\n         let _closure = || println!(\"index: {}\", index);\n     }\n }\n+\n+mod issue_4677 {\n+    pub fn test() {\n+        let slice = &[1, 2, 3];\n+\n+        // should not trigger the lint because the count is used after incremented\n+        let mut count = 0;\n+        for _i in slice {\n+            count += 1;\n+            println!(\"{}\", count);\n+        }\n+    }\n+}"}]}