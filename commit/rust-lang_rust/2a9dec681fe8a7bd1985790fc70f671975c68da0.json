{"sha": "2a9dec681fe8a7bd1985790fc70f671975c68da0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOWRlYzY4MWZlOGE3YmQxOTg1NzkwZmM3MGY2NzE5NzVjNjhkYTA=", "commit": {"author": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2018-10-19T18:51:25Z"}, "committer": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2018-10-19T18:51:25Z"}, "message": "Fix suggestion for multiple derefs", "tree": {"sha": "7643bd2e24fadcfe781c313c0679dfd7d6b32480", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7643bd2e24fadcfe781c313c0679dfd7d6b32480"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a9dec681fe8a7bd1985790fc70f671975c68da0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFIBAABCAAyFiEE30PRORiHa0gkBHJnH7R33dJ4Ic4FAlvKKD8UHGhtcGVyc29u\nMUBnbWFpbC5jb20ACgkQH7R33dJ4Ic59HQgAs+yj/ziWa2DBS4Eoa2aWDaNYGJvg\n32IaTizUQjQ4B/a37hl0veEfdm9soqyW6+bTDvugK6DXOFQE8QcT24wJ8IlWPHxS\nYNC4LrP7ui5sewOGYH/59iRyH1yf1cfJVQ+Ut2FELClD0rVXgZHw9PO6iJEpUJhB\nTP4ueFP+7ZWRPuFYLqRYI28Ho9m7eU6fcMw9Ca6K5ZTemNiOqHULHDSuCjGWJnPb\n7RhVX9Y3z+FoIv9r5mTbTetk/PAI8EFBV6iFvokzJHE7YwxTpXK2h8lhV/hAa8jG\nXmDL3EABF4bvhh262csqI5GUDEpx5oRx0kl/QNJS3p23n4c5vOzcqbmbIg==\n=P97p\n-----END PGP SIGNATURE-----", "payload": "tree 7643bd2e24fadcfe781c313c0679dfd7d6b32480\nparent a2be0509657c4b100ba9b81b34aa0262700da83c\nauthor HMPerson1 <hmperson1@gmail.com> 1539975085 -0400\ncommitter HMPerson1 <hmperson1@gmail.com> 1539975085 -0400\n\nFix suggestion for multiple derefs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9dec681fe8a7bd1985790fc70f671975c68da0", "html_url": "https://github.com/rust-lang/rust/commit/2a9dec681fe8a7bd1985790fc70f671975c68da0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a9dec681fe8a7bd1985790fc70f671975c68da0/comments", "author": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2be0509657c4b100ba9b81b34aa0262700da83c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2be0509657c4b100ba9b81b34aa0262700da83c", "html_url": "https://github.com/rust-lang/rust/commit/a2be0509657c4b100ba9b81b34aa0262700da83c"}], "stats": {"total": 55, "additions": 52, "deletions": 3}, "files": [{"sha": "dd44aad351c1b2902114c76d1eda9f9f091f26eb", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2a9dec681fe8a7bd1985790fc70f671975c68da0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9dec681fe8a7bd1985790fc70f671975c68da0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2a9dec681fe8a7bd1985790fc70f671975c68da0", "patch": "@@ -1250,7 +1250,7 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n     if is_copy(cx, ty) {\n         let snip;\n         if let Some(snippet) = sugg::Sugg::hir_opt(cx, arg) {\n-            // x.clone() might have dereferenced x, possibly through a Deref impl\n+            // x.clone() might have dereferenced x, possibly through Deref impls\n             if cx.tables.expr_ty(arg) != ty {\n                 let parent = cx.tcx.hir.get_parent_node(expr.id);\n                 match cx.tcx.hir.get(parent) {\n@@ -1273,7 +1273,18 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n                     },\n                     _ => {},\n                 }\n-                snip = Some((\"try dereferencing it\", format!(\"{}\", snippet.deref())));\n+\n+                let deref_count = cx.tables.expr_adjustments(arg).iter()\n+                    .filter(|adj| {\n+                        if let ty::adjustment::Adjust::Deref(_) = adj.kind {\n+                            true\n+                        } else {\n+                            false\n+                        }\n+                    })\n+                    .count();\n+                let derefs: String = iter::repeat('*').take(deref_count).collect();\n+                snip = Some((\"try dereferencing it\", format!(\"{}{}\", derefs, snippet)));\n             } else {\n                 snip = Some((\"try removing the `clone` call\", format!(\"{}\", snippet)));\n             }"}, {"sha": "28cad1d881fd9e0d2db98aacb4d66486e1014aba", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2a9dec681fe8a7bd1985790fc70f671975c68da0/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9dec681fe8a7bd1985790fc70f671975c68da0/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=2a9dec681fe8a7bd1985790fc70f671975c68da0", "patch": "@@ -79,3 +79,35 @@ fn iter_clone_collect() {\n     let v3 : HashSet<isize> = v.iter().cloned().collect();\n     let v4 : VecDeque<isize> = v.iter().cloned().collect();\n }\n+\n+mod many_derefs {\n+    struct A;\n+    struct B;\n+    struct C;\n+    struct D;\n+    #[derive(Copy, Clone)]\n+    struct E;\n+\n+    macro_rules! impl_deref {\n+        ($src:ident, $dst:ident) => {\n+            impl std::ops::Deref for $src {\n+                type Target = $dst;\n+                fn deref(&self) -> &Self::Target { &$dst }\n+            }\n+        }\n+    }\n+\n+    impl_deref!(A, B);\n+    impl_deref!(B, C);\n+    impl_deref!(C, D);\n+    impl std::ops::Deref for D {\n+        type Target = &'static E;\n+        fn deref(&self) -> &Self::Target { &&E }\n+    }\n+\n+    fn go1() {\n+        let a = A;\n+        let _: E = a.clone();\n+        let _: E = *****a;\n+    }\n+}"}, {"sha": "5dcd5cae4633b04a29781aeead7d4e5d78319c2c", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a9dec681fe8a7bd1985790fc70f671975c68da0/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a9dec681fe8a7bd1985790fc70f671975c68da0/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=2a9dec681fe8a7bd1985790fc70f671975c68da0", "patch": "@@ -86,5 +86,11 @@ error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec\n    |\n    = note: `-D clippy::iter-cloned-collect` implied by `-D warnings`\n \n-error: aborting due to 12 previous errors\n+error: using `clone` on a `Copy` type\n+   --> $DIR/unnecessary_clone.rs:110:20\n+    |\n+110 |         let _: E = a.clone();\n+    |                    ^^^^^^^^^ help: try dereferencing it: `*****a`\n+\n+error: aborting due to 13 previous errors\n "}]}