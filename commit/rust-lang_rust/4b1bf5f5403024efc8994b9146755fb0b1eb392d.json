{"sha": "4b1bf5f5403024efc8994b9146755fb0b1eb392d", "node_id": "C_kwDOAAsO6NoAKDRiMWJmNWY1NDAzMDI0ZWZjODk5NGI5MTQ2NzU1ZmIwYjFlYjM5MmQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-23T21:13:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-23T21:13:35Z"}, "message": "Merge #10849\n\n10849: fix: Disable string highlight injection for macros changing string literals r=Veykril a=Veykril\n\nFixes #10845\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "0fb79d66ab3147f6e247fb51c7575ebf17782d9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fb79d66ab3147f6e247fb51c7575ebf17782d9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b1bf5f5403024efc8994b9146755fb0b1eb392d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhnVl/CRBK7hj4Ov3rIwAASaIIAKiqqwAhxjAe5UoJerDEQNOe\nQPZOojfSDG1/Wii3KEkqudUpPbn8eli5x6snPN2t/OvEfh3NSD+sghDqoYQqBKZF\nU/n1eS+S36Vp98qB0QRJqE/ZPddKwjE/Z0g6TqfJ1+B+kDxLg5EKfoc8i55lMRNG\nOqYp7F2xHqh56ca00L8UHQ7U0tsp1/tm6FyekYItDjZRuMGyCeNS8u5QqhUyi4Jx\nDjSWUmdNNENSENZrUHYyAs2a3OIzsw3TG142LwFKMipKX0TuYT8v9qwtEzRWUg6g\nhsdFGpb7pE7lKWKKEv/3c4GPybpPum+5DqyZtOaWQqjs7QGqk+GGeDcZdEOsdPo=\n=zJPo\n-----END PGP SIGNATURE-----\n", "payload": "tree 0fb79d66ab3147f6e247fb51c7575ebf17782d9a\nparent 054873ce15ea7ba0e21b6508abe97fd0cb54ec8c\nparent f3b25a6fc88b049fbb7980a32435805ff31486fd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1637702015 +0000\ncommitter GitHub <noreply@github.com> 1637702015 +0000\n\nMerge #10849\n\n10849: fix: Disable string highlight injection for macros changing string literals r=Veykril a=Veykril\n\nFixes #10845\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1bf5f5403024efc8994b9146755fb0b1eb392d", "html_url": "https://github.com/rust-lang/rust/commit/4b1bf5f5403024efc8994b9146755fb0b1eb392d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b1bf5f5403024efc8994b9146755fb0b1eb392d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "054873ce15ea7ba0e21b6508abe97fd0cb54ec8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/054873ce15ea7ba0e21b6508abe97fd0cb54ec8c", "html_url": "https://github.com/rust-lang/rust/commit/054873ce15ea7ba0e21b6508abe97fd0cb54ec8c"}, {"sha": "f3b25a6fc88b049fbb7980a32435805ff31486fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b25a6fc88b049fbb7980a32435805ff31486fd", "html_url": "https://github.com/rust-lang/rust/commit/f3b25a6fc88b049fbb7980a32435805ff31486fd"}], "stats": {"total": 60, "additions": 31, "deletions": 29}, "files": [{"sha": "8b613fde54da29363983680185f293b58beb1a80", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4b1bf5f5403024efc8994b9146755fb0b1eb392d/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1bf5f5403024efc8994b9146755fb0b1eb392d/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=4b1bf5f5403024efc8994b9146755fb0b1eb392d", "patch": "@@ -320,20 +320,37 @@ fn traverse(\n             element.clone()\n         };\n \n-        if let Some(token) = element.into_token().and_then(ast::String::cast) {\n-            if token.is_raw() {\n-                if let Some(expanded) = element_to_highlight.as_token() {\n-                    if inject::ra_fixture(hl, sema, token, expanded.clone()).is_some() {\n+        if macro_highlighter.highlight(element_to_highlight.clone()).is_some() {\n+            continue;\n+        }\n+\n+        if let (Some(token), Some(token_to_highlight)) =\n+            (element.into_token(), element_to_highlight.as_token())\n+        {\n+            let string = ast::String::cast(token);\n+            let string_to_highlight = ast::String::cast(token_to_highlight.clone());\n+            if let Some((string, expanded_string)) = string.zip(string_to_highlight) {\n+                if string.is_raw() {\n+                    if inject::ra_fixture(hl, sema, &string, &expanded_string).is_some() {\n                         continue;\n                     }\n                 }\n+                highlight_format_string(hl, &string, &expanded_string, range);\n+                // Highlight escape sequences\n+                if let Some(char_ranges) = string.char_ranges() {\n+                    for (piece_range, _) in char_ranges.iter().filter(|(_, char)| char.is_ok()) {\n+                        if string.text()[piece_range.start().into()..].starts_with('\\\\') {\n+                            hl.add(HlRange {\n+                                range: piece_range + range.start(),\n+                                highlight: HlTag::EscapeSequence.into(),\n+                                binding_hash: None,\n+                            });\n+                        }\n+                    }\n+                }\n             }\n         }\n \n-        if macro_highlighter.highlight(element_to_highlight.clone()).is_some() {\n-            continue;\n-        }\n-\n         if let Some((mut highlight, binding_hash)) = highlight::element(\n             sema,\n             krate,\n@@ -347,22 +364,6 @@ fn traverse(\n \n             hl.add(HlRange { range, highlight, binding_hash });\n         }\n-\n-        if let Some(string) = element_to_highlight.into_token().and_then(ast::String::cast) {\n-            highlight_format_string(hl, &string, range);\n-            // Highlight escape sequences\n-            if let Some(char_ranges) = string.char_ranges() {\n-                for (piece_range, _) in char_ranges.iter().filter(|(_, char)| char.is_ok()) {\n-                    if string.text()[piece_range.start().into()..].starts_with('\\\\') {\n-                        hl.add(HlRange {\n-                            range: piece_range + range.start(),\n-                            highlight: HlTag::EscapeSequence.into(),\n-                            binding_hash: None,\n-                        });\n-                    }\n-                }\n-            }\n-        }\n     }\n }\n "}, {"sha": "f83262fc5c5ead0ddd3aab5aedaadd2f87299a1e", "filename": "crates/ide/src/syntax_highlighting/format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b1bf5f5403024efc8994b9146755fb0b1eb392d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1bf5f5403024efc8994b9146755fb0b1eb392d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs?ref=4b1bf5f5403024efc8994b9146755fb0b1eb392d", "patch": "@@ -10,9 +10,10 @@ use crate::{syntax_highlighting::highlights::Highlights, HlRange, HlTag};\n pub(super) fn highlight_format_string(\n     stack: &mut Highlights,\n     string: &ast::String,\n+    expanded_string: &ast::String,\n     range: TextRange,\n ) {\n-    if is_format_string(string).is_none() {\n+    if is_format_string(expanded_string).is_none() {\n         return;\n     }\n "}, {"sha": "686fd5baa724ce714afbcba66b7a3bf72b1d6632", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b1bf5f5403024efc8994b9146755fb0b1eb392d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1bf5f5403024efc8994b9146755fb0b1eb392d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=4b1bf5f5403024efc8994b9146755fb0b1eb392d", "patch": "@@ -10,7 +10,7 @@ use ide_db::{\n };\n use syntax::{\n     ast::{self, AstNode, IsString},\n-    AstToken, NodeOrToken, SyntaxNode, SyntaxToken, TextRange, TextSize,\n+    AstToken, NodeOrToken, SyntaxNode, TextRange, TextSize,\n };\n \n use crate::{\n@@ -22,10 +22,10 @@ use crate::{\n pub(super) fn ra_fixture(\n     hl: &mut Highlights,\n     sema: &Semantics<RootDatabase>,\n-    literal: ast::String,\n-    expanded: SyntaxToken,\n+    literal: &ast::String,\n+    expanded: &ast::String,\n ) -> Option<()> {\n-    let active_parameter = ActiveParameter::at_token(sema, expanded)?;\n+    let active_parameter = ActiveParameter::at_token(sema, expanded.syntax().clone())?;\n     if !active_parameter.ident().map_or(false, |name| name.text().starts_with(\"ra_fixture\")) {\n         return None;\n     }"}]}