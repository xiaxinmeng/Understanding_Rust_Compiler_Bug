{"sha": "35b8001f684399992978c60fcb3d51232b3ca85d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YjgwMDFmNjg0Mzk5OTkyOTc4YzYwZmNiM2Q1MTIzMmIzY2E4NWQ=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-07T06:37:44Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-07T06:37:44Z"}, "message": "cleanup", "tree": {"sha": "7674297749cd13798459d105a23c66a7dab82f70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7674297749cd13798459d105a23c66a7dab82f70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35b8001f684399992978c60fcb3d51232b3ca85d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35b8001f684399992978c60fcb3d51232b3ca85d", "html_url": "https://github.com/rust-lang/rust/commit/35b8001f684399992978c60fcb3d51232b3ca85d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35b8001f684399992978c60fcb3d51232b3ca85d/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ec12b154bcc839f9a903f238791b6010a61418b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ec12b154bcc839f9a903f238791b6010a61418b", "html_url": "https://github.com/rust-lang/rust/commit/5ec12b154bcc839f9a903f238791b6010a61418b"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "24f974ca73ac8baacbcd02d8bf5110eb568bcc32", "filename": "subtyping.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35b8001f684399992978c60fcb3d51232b3ca85d/subtyping.md", "raw_url": "https://github.com/rust-lang/rust/raw/35b8001f684399992978c60fcb3d51232b3ca85d/subtyping.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/subtyping.md?ref=35b8001f684399992978c60fcb3d51232b3ca85d", "patch": "@@ -48,11 +48,11 @@ interactions with other features.)\n Some important variances:\n \n * `&` is variant (as is `*const` by metaphor)\n-* `&mut` is invariant (as is `*mut` by metaphor)\n+* `&mut` is invariant\n * `Fn(T) -> U` is invariant with respect to `T`, but variant with respect to `U`\n * `Box`, `Vec`, and all other collections are variant\n * `UnsafeCell`, `Cell`, `RefCell`, `Mutex` and all \"interior mutability\"\n-  types are invariant\n+  types are invariant (as is `*mut` by metaphor)\n \n To understand why these variances are correct and desirable, we will consider several\n examples. We have already covered why `&` should be variant when introducing subtyping:\n@@ -158,7 +158,7 @@ in its place. Therefore functions *are* variant over their return type.\n \n `*const` has the exact same semantics as `&`, so variance follows. `*mut` on the\n other hand can dereference to an &mut whether shared or not, so it is marked\n-as invariant in analogy to cells.\n+as invariant just like cells.\n \n This is all well and good for the types the standard library provides, but\n how is variance determined for type that *you* define? A struct, informally"}]}