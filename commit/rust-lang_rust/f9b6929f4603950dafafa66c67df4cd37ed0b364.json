{"sha": "f9b6929f4603950dafafa66c67df4cd37ed0b364", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YjY5MjlmNDYwMzk1MGRhZmFmYTY2YzY3ZGY0Y2QzN2VkMGIzNjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-29T19:19:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-29T19:19:31Z"}, "message": "Auto merge of #26623 - Saser:master, r=steveklabnik\n\nIn Chapter 5.9 (References and Borrowing), there is an example [at the very end](https://doc.rust-lang.org/stable/book/references-and-borrowing.html#use-after-free) which shows that declaring a reference before declaring the variable that it points to results in a compilation error. The book does not really mention why this happens though -- in the sections before, it has described how different scopes affects the lifetime of resources, but there is no mention of how resources within the same scope work.\r\n\r\nThis confused me a little, so I asked on #rust and got the answer that the resources are destroyed in the reverse order that they are declared, but the book makes no mention of it (as far as I can find) -- except in Chapter 5.21 (Drop), where it says:\r\n\r\n> When `x` goes out of scope at the end of `main()`, the code for `Drop` will run. `Drop` has one method, which is also called `drop()`. It takes a mutable reference to `self`.\r\n> \r\n> That\u2019s it! The mechanics of `Drop` are very simple, but there are some subtleties. For example, values are dropped in the opposite order they are declared. [...]\r\n\r\n---\r\n\r\nI feel like Chapter 5.9 (References and Borrowing) is probably the best place to put this information (as I have done in my additions), since it deals with other types of referencing and borrowing. However, since English is not my native language, the wording of my additions perhaps are a little \"off\" -- any feedback on them is appreciated.", "tree": {"sha": "ca66c05d95cdec69e56a49287c90ff8f3fe5b919", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca66c05d95cdec69e56a49287c90ff8f3fe5b919"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9b6929f4603950dafafa66c67df4cd37ed0b364", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b6929f4603950dafafa66c67df4cd37ed0b364", "html_url": "https://github.com/rust-lang/rust/commit/f9b6929f4603950dafafa66c67df4cd37ed0b364", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9b6929f4603950dafafa66c67df4cd37ed0b364/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34f35a535aa45d17688bc977dd826e2e1d79cef4", "url": "https://api.github.com/repos/rust-lang/rust/commits/34f35a535aa45d17688bc977dd826e2e1d79cef4", "html_url": "https://github.com/rust-lang/rust/commit/34f35a535aa45d17688bc977dd826e2e1d79cef4"}, {"sha": "d6159b7fe0ce668b6875d4551019d3946ed8388c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6159b7fe0ce668b6875d4551019d3946ed8388c", "html_url": "https://github.com/rust-lang/rust/commit/d6159b7fe0ce668b6875d4551019d3946ed8388c"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "d1d3063138e7e61228dd82652540ee86452dead2", "filename": "src/doc/trpl/references-and-borrowing.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9b6929f4603950dafafa66c67df4cd37ed0b364/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/f9b6929f4603950dafafa66c67df4cd37ed0b364/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md?ref=f9b6929f4603950dafafa66c67df4cd37ed0b364", "patch": "@@ -336,7 +336,9 @@ In other words, `y` is only valid for the scope where `x` exists. As soon as\n the borrow \u2018doesn\u2019t live long enough\u2019 because it\u2019s not valid for the right\n amount of time.\n \n-The same problem occurs when the reference is declared _before_ the variable it refers to:\n+The same problem occurs when the reference is declared _before_ the variable it\n+refers to. This is because resources within the same scope are freed in the\n+opposite order they were declared:\n \n ```rust,ignore\n let y: &i32;\n@@ -369,3 +371,6 @@ statement 1 at 3:14\n     println!(\"{}\", y);\n }\n ```\n+\n+In the above example, `y` is declared before `x`, meaning that `y` lives longer\n+than `x`, which is not allowed."}]}