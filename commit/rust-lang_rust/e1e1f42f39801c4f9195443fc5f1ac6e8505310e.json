{"sha": "e1e1f42f39801c4f9195443fc5f1ac6e8505310e", "node_id": "C_kwDOAAsO6NoAKGUxZTFmNDJmMzk4MDFjNGY5MTk1NDQzZmM1ZjFhYzZlODUwNTMxMGU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-03T15:51:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-03T15:51:39Z"}, "message": "make errno table syntactically more similar to rustc library code", "tree": {"sha": "b97afdfd688fca2a9813fb312ccfce3ce90a2a1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b97afdfd688fca2a9813fb312ccfce3ce90a2a1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1e1f42f39801c4f9195443fc5f1ac6e8505310e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e1f42f39801c4f9195443fc5f1ac6e8505310e", "html_url": "https://github.com/rust-lang/rust/commit/e1e1f42f39801c4f9195443fc5f1ac6e8505310e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1e1f42f39801c4f9195443fc5f1ac6e8505310e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9154f8b22c56c071e78e1f3d706fd75f43ff218c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9154f8b22c56c071e78e1f3d706fd75f43ff218c", "html_url": "https://github.com/rust-lang/rust/commit/9154f8b22c56c071e78e1f3d706fd75f43ff218c"}], "stats": {"total": 88, "additions": 45, "deletions": 43}, "files": [{"sha": "8523af84d0660bbe83cff10daab4b0317dea994e", "filename": "src/helpers.rs", "status": "modified", "additions": 45, "deletions": 43, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e1e1f42f39801c4f9195443fc5f1ac6e8505310e/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e1f42f39801c4f9195443fc5f1ac6e8505310e/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=e1e1f42f39801c4f9195443fc5f1ac6e8505310e", "patch": "@@ -23,49 +23,51 @@ use crate::*;\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n \n-// This mapping is the reverse of `decode_error_kind` in\n-// <https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/mod.rs>\n-// and should be kept in sync.\n-const UNIX_IO_ERROR_TABLE: &[(std::io::ErrorKind, &str)] = {\n+// This mapping should match `decode_error_kind` in\n+// <https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/mod.rs>.\n+const UNIX_IO_ERROR_TABLE: &[(&str, std::io::ErrorKind)] = {\n     use std::io::ErrorKind::*;\n     &[\n-        (ArgumentListTooLong, \"E2BIG\"),\n-        (AddrInUse, \"EADDRINUSE\"),\n-        (AddrNotAvailable, \"EADDRNOTAVAIL\"),\n-        (ResourceBusy, \"EBUSY\"),\n-        (ConnectionAborted, \"ECONNABORTED\"),\n-        (ConnectionRefused, \"ECONNREFUSED\"),\n-        (ConnectionReset, \"ECONNRESET\"),\n-        (Deadlock, \"EDEADLK\"),\n-        (FilesystemQuotaExceeded, \"EDQUOT\"),\n-        (AlreadyExists, \"EEXIST\"),\n-        (FileTooLarge, \"EFBIG\"),\n-        (HostUnreachable, \"EHOSTUNREACH\"),\n-        (Interrupted, \"EINTR\"),\n-        (InvalidInput, \"EINVAL\"),\n-        (IsADirectory, \"EISDIR\"),\n-        (FilesystemLoop, \"ELOOP\"),\n-        (NotFound, \"ENOENT\"),\n-        (OutOfMemory, \"ENOMEM\"),\n-        (StorageFull, \"ENOSPC\"),\n-        (Unsupported, \"ENOSYS\"),\n-        (TooManyLinks, \"EMLINK\"),\n-        (InvalidFilename, \"ENAMETOOLONG\"),\n-        (NetworkDown, \"ENETDOWN\"),\n-        (NetworkUnreachable, \"ENETUNREACH\"),\n-        (NotConnected, \"ENOTCONN\"),\n-        (NotADirectory, \"ENOTDIR\"),\n-        (DirectoryNotEmpty, \"ENOTEMPTY\"),\n-        (BrokenPipe, \"EPIPE\"),\n-        (ReadOnlyFilesystem, \"EROFS\"),\n-        (NotSeekable, \"ESPIPE\"),\n-        (StaleNetworkFileHandle, \"ESTALE\"),\n-        (TimedOut, \"ETIMEDOUT\"),\n-        (ExecutableFileBusy, \"ETXTBSY\"),\n-        (CrossesDevices, \"EXDEV\"),\n-        // The following have two valid options...we pick one.\n-        (PermissionDenied, \"EPERM\"),\n-        (WouldBlock, \"EWOULDBLOCK\"),\n+        (\"E2BIG\", ArgumentListTooLong),\n+        (\"EADDRINUSE\", AddrInUse),\n+        (\"EADDRNOTAVAIL\", AddrNotAvailable),\n+        (\"EBUSY\", ResourceBusy),\n+        (\"ECONNABORTED\", ConnectionAborted),\n+        (\"ECONNREFUSED\", ConnectionRefused),\n+        (\"ECONNRESET\", ConnectionReset),\n+        (\"EDEADLK\", Deadlock),\n+        (\"EDQUOT\", FilesystemQuotaExceeded),\n+        (\"EEXIST\", AlreadyExists),\n+        (\"EFBIG\", FileTooLarge),\n+        (\"EHOSTUNREACH\", HostUnreachable),\n+        (\"EINTR\", Interrupted),\n+        (\"EINVAL\", InvalidInput),\n+        (\"EISDIR\", IsADirectory),\n+        (\"ELOOP\", FilesystemLoop),\n+        (\"ENOENT\", NotFound),\n+        (\"ENOMEM\", OutOfMemory),\n+        (\"ENOSPC\", StorageFull),\n+        (\"ENOSYS\", Unsupported),\n+        (\"EMLINK\", TooManyLinks),\n+        (\"ENAMETOOLONG\", InvalidFilename),\n+        (\"ENETDOWN\", NetworkDown),\n+        (\"ENETUNREACH\", NetworkUnreachable),\n+        (\"ENOTCONN\", NotConnected),\n+        (\"ENOTDIR\", NotADirectory),\n+        (\"ENOTEMPTY\", DirectoryNotEmpty),\n+        (\"EPIPE\", BrokenPipe),\n+        (\"EROFS\", ReadOnlyFilesystem),\n+        (\"ESPIPE\", NotSeekable),\n+        (\"ESTALE\", StaleNetworkFileHandle),\n+        (\"ETIMEDOUT\", TimedOut),\n+        (\"ETXTBSY\", ExecutableFileBusy),\n+        (\"EXDEV\", CrossesDevices),\n+        // The following have two valid options. We have both for the forwards mapping; only the\n+        // first one will be used for the backwards mapping.\n+        (\"EPERM\", PermissionDenied),\n+        (\"EACCES\", PermissionDenied),\n+        (\"EWOULDBLOCK\", WouldBlock),\n+        (\"EAGAIN\", WouldBlock),\n     ]\n };\n \n@@ -577,7 +579,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let target = &this.tcx.sess.target;\n         if target.families.iter().any(|f| f == \"unix\") {\n-            for &(kind, name) in UNIX_IO_ERROR_TABLE {\n+            for &(name, kind) in UNIX_IO_ERROR_TABLE {\n                 if err_kind == kind {\n                     return this.eval_libc(name);\n                 }\n@@ -615,7 +617,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let target = &this.tcx.sess.target;\n         if target.families.iter().any(|f| f == \"unix\") {\n             let errnum = errnum.to_i32()?;\n-            for &(kind, name) in UNIX_IO_ERROR_TABLE {\n+            for &(name, kind) in UNIX_IO_ERROR_TABLE {\n                 if errnum == this.eval_libc_i32(name)? {\n                     return Ok(kind);\n                 }"}]}