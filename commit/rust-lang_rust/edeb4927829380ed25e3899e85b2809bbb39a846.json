{"sha": "edeb4927829380ed25e3899e85b2809bbb39a846", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZWI0OTI3ODI5MzgwZWQyNWUzODk5ZTg1YjI4MDliYmIzOWE4NDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-09T14:41:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-09T14:47:02Z"}, "message": "minor: fix test style", "tree": {"sha": "6714a4956f928e2259ad4a946a8be615443f2b4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6714a4956f928e2259ad4a946a8be615443f2b4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edeb4927829380ed25e3899e85b2809bbb39a846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edeb4927829380ed25e3899e85b2809bbb39a846", "html_url": "https://github.com/rust-lang/rust/commit/edeb4927829380ed25e3899e85b2809bbb39a846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edeb4927829380ed25e3899e85b2809bbb39a846/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5637ce4250247eef4c2ae1892cead69b6d6a172b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5637ce4250247eef4c2ae1892cead69b6d6a172b", "html_url": "https://github.com/rust-lang/rust/commit/5637ce4250247eef4c2ae1892cead69b6d6a172b"}], "stats": {"total": 98, "additions": 31, "deletions": 67}, "files": [{"sha": "61dcbb399ddc1aaf7e2e2b977548a26b6f8ab8a8", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/edeb4927829380ed25e3899e85b2809bbb39a846/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeb4927829380ed25e3899e85b2809bbb39a846/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=edeb4927829380ed25e3899e85b2809bbb39a846", "patch": "@@ -67,18 +67,6 @@ fn remove_newlines(edit: &mut TextEditBuilder, token: &SyntaxToken, range: TextR\n \n fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextSize) {\n     if token.kind() != WHITESPACE || token.text().bytes().filter(|&b| b == b'\\n').count() != 1 {\n-        let mut no_space = false;\n-        if let Some(string) = ast::String::cast(token.clone()) {\n-            if let Some(range) = string.open_quote_text_range() {\n-                cov_mark::hit!(join_string_literal_open_quote);\n-                no_space |= range.end() == offset;\n-            }\n-            if let Some(range) = string.close_quote_text_range() {\n-                cov_mark::hit!(join_string_literal_close_quote);\n-                no_space |= range.start() == offset + TextSize::of('\\n');\n-            }\n-        }\n-\n         let n_spaces_after_line_break = {\n             let suff = &token.text()[TextRange::new(\n                 offset - token.text_range().start() + TextSize::of('\\n'),"}, {"sha": "8509a5e11f398b3e67adc7bcea4ee348987365ba", "filename": "crates/ide_assists/src/handlers/replace_impl_trait_with_generic.rs", "status": "modified", "additions": 31, "deletions": 55, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/edeb4927829380ed25e3899e85b2809bbb39a846/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeb4927829380ed25e3899e85b2809bbb39a846/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs?ref=edeb4927829380ed25e3899e85b2809bbb39a846", "patch": "@@ -55,51 +55,35 @@ mod tests {\n     fn replace_impl_trait_with_generic_params() {\n         check_assist(\n             replace_impl_trait_with_generic,\n-            r#\"\n-            fn foo<G>(bar: $0impl Bar) {}\n-            \"#,\n-            r#\"\n-            fn foo<G, B: Bar>(bar: B) {}\n-            \"#,\n+            r#\"fn foo<G>(bar: $0impl Bar) {}\"#,\n+            r#\"fn foo<G, B: Bar>(bar: B) {}\"#,\n         );\n     }\n \n     #[test]\n     fn replace_impl_trait_without_generic_params() {\n         check_assist(\n             replace_impl_trait_with_generic,\n-            r#\"\n-            fn foo(bar: $0impl Bar) {}\n-            \"#,\n-            r#\"\n-            fn foo<B: Bar>(bar: B) {}\n-            \"#,\n+            r#\"fn foo(bar: $0impl Bar) {}\"#,\n+            r#\"fn foo<B: Bar>(bar: B) {}\"#,\n         );\n     }\n \n     #[test]\n     fn replace_two_impl_trait_with_generic_params() {\n         check_assist(\n             replace_impl_trait_with_generic,\n-            r#\"\n-            fn foo<G>(foo: impl Foo, bar: $0impl Bar) {}\n-            \"#,\n-            r#\"\n-            fn foo<G, B: Bar>(foo: impl Foo, bar: B) {}\n-            \"#,\n+            r#\"fn foo<G>(foo: impl Foo, bar: $0impl Bar) {}\"#,\n+            r#\"fn foo<G, B: Bar>(foo: impl Foo, bar: B) {}\"#,\n         );\n     }\n \n     #[test]\n     fn replace_impl_trait_with_empty_generic_params() {\n         check_assist(\n             replace_impl_trait_with_generic,\n-            r#\"\n-            fn foo<>(bar: $0impl Bar) {}\n-            \"#,\n-            r#\"\n-            fn foo<B: Bar>(bar: B) {}\n-            \"#,\n+            r#\"fn foo<>(bar: $0impl Bar) {}\"#,\n+            r#\"fn foo<B: Bar>(bar: B) {}\"#,\n         );\n     }\n \n@@ -108,13 +92,13 @@ mod tests {\n         check_assist(\n             replace_impl_trait_with_generic,\n             r#\"\n-            fn foo<\n-            >(bar: $0impl Bar) {}\n-            \"#,\n+fn foo<\n+>(bar: $0impl Bar) {}\n+\"#,\n             r#\"\n-            fn foo<B: Bar\n-            >(bar: B) {}\n-            \"#,\n+fn foo<B: Bar\n+>(bar: B) {}\n+\"#,\n         );\n     }\n \n@@ -123,12 +107,8 @@ mod tests {\n     fn replace_impl_trait_with_exist_generic_letter() {\n         check_assist(\n             replace_impl_trait_with_generic,\n-            r#\"\n-            fn foo<B>(bar: $0impl Bar) {}\n-            \"#,\n-            r#\"\n-            fn foo<B, C: Bar>(bar: C) {}\n-            \"#,\n+            r#\"fn foo<B>(bar: $0impl Bar) {}\"#,\n+            r#\"fn foo<B, C: Bar>(bar: C) {}\"#,\n         );\n     }\n \n@@ -137,32 +117,28 @@ mod tests {\n         check_assist(\n             replace_impl_trait_with_generic,\n             r#\"\n-            fn foo<\n-                G: Foo,\n-                F,\n-                H,\n-            >(bar: $0impl Bar) {}\n-            \"#,\n-            r#\"\n-            fn foo<\n-                G: Foo,\n-                F,\n-                H, B: Bar\n-            >(bar: B) {}\n-            \"#,\n+fn foo<\n+    G: Foo,\n+    F,\n+    H,\n+>(bar: $0impl Bar) {}\n+\"#,\n+            r#\"\n+fn foo<\n+    G: Foo,\n+    F,\n+    H, B: Bar\n+>(bar: B) {}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn replace_impl_trait_multiple() {\n         check_assist(\n             replace_impl_trait_with_generic,\n-            r#\"\n-            fn foo(bar: $0impl Foo + Bar) {}\n-            \"#,\n-            r#\"\n-            fn foo<F: Foo + Bar>(bar: F) {}\n-            \"#,\n+            r#\"fn foo(bar: $0impl Foo + Bar) {}\"#,\n+            r#\"fn foo<F: Foo + Bar>(bar: F) {}\"#,\n         );\n     }\n }"}]}