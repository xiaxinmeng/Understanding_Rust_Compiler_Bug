{"sha": "455f284496976c5a77e7f1cbdf1f382dc0a6d245", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NWYyODQ0OTY5NzZjNWE3N2U3ZjFjYmRmMWYzODJkYzBhNmQyNDU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-26T12:55:42Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-26T12:55:42Z"}, "message": "Deduplicate and generalize some (de/)serializer impls", "tree": {"sha": "058a90420a8ea6d4d09c14cba99d99264dee46ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/058a90420a8ea6d4d09c14cba99d99264dee46ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/455f284496976c5a77e7f1cbdf1f382dc0a6d245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/455f284496976c5a77e7f1cbdf1f382dc0a6d245", "html_url": "https://github.com/rust-lang/rust/commit/455f284496976c5a77e7f1cbdf1f382dc0a6d245", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/455f284496976c5a77e7f1cbdf1f382dc0a6d245/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd15e6180d9c48b4f1157e44cdaff6e901e5f854", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd15e6180d9c48b4f1157e44cdaff6e901e5f854", "html_url": "https://github.com/rust-lang/rust/commit/fd15e6180d9c48b4f1157e44cdaff6e901e5f854"}], "stats": {"total": 35, "additions": 12, "deletions": 23}, "files": [{"sha": "fab29f29e8730fd8db67d00b5f36140e08f3a253", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/455f284496976c5a77e7f1cbdf1f382dc0a6d245/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f284496976c5a77e7f1cbdf1f382dc0a6d245/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=455f284496976c5a77e7f1cbdf1f382dc0a6d245", "patch": "@@ -13,6 +13,7 @@ Core encoding and decoding interfaces.\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n+#![feature(min_const_generics)]\n #![cfg_attr(test, feature(test))]\n #![allow(rustc::internal)]\n "}, {"sha": "aa305f3c7fc3f7c69b5f485ecc7c04cd2c3b1943", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/455f284496976c5a77e7f1cbdf1f382dc0a6d245/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455f284496976c5a77e7f1cbdf1f382dc0a6d245/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=455f284496976c5a77e7f1cbdf1f382dc0a6d245", "patch": "@@ -539,12 +539,8 @@ impl<S: Encoder, T: Encodable<S>> Encodable<S> for [T] {\n \n impl<S: Encoder, T: Encodable<S>> Encodable<S> for Vec<T> {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_seq(self.len(), |s| {\n-            for (i, e) in self.iter().enumerate() {\n-                s.emit_seq_elt(i, |s| e.encode(s))?\n-            }\n-            Ok(())\n-        })\n+        let slice: &[T] = self;\n+        slice.encode(s)\n     }\n }\n \n@@ -560,22 +556,18 @@ impl<D: Decoder, T: Decodable<D>> Decodable<D> for Vec<T> {\n     }\n }\n \n-impl<S: Encoder> Encodable<S> for [u8; 20] {\n+impl<S: Encoder, T: Encodable<S>, const N: usize> Encodable<S> for [T; N] {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_seq(self.len(), |s| {\n-            for (i, e) in self.iter().enumerate() {\n-                s.emit_seq_elt(i, |s| e.encode(s))?\n-            }\n-            Ok(())\n-        })\n+        let slice: &[T] = self;\n+        slice.encode(s)\n     }\n }\n \n-impl<D: Decoder> Decodable<D> for [u8; 20] {\n-    fn decode(d: &mut D) -> Result<[u8; 20], D::Error> {\n+impl<D: Decoder, const N: usize> Decodable<D> for [u8; N] {\n+    fn decode(d: &mut D) -> Result<[u8; N], D::Error> {\n         d.read_seq(|d, len| {\n-            assert!(len == 20);\n-            let mut v = [0u8; 20];\n+            assert!(len == N);\n+            let mut v = [0u8; N];\n             for i in 0..len {\n                 v[i] = d.read_seq_elt(i, |d| Decodable::decode(d))?;\n             }\n@@ -589,12 +581,8 @@ where\n     [T]: ToOwned<Owned = Vec<T>>,\n {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_seq(self.len(), |s| {\n-            for (i, e) in self.iter().enumerate() {\n-                s.emit_seq_elt(i, |s| e.encode(s))?\n-            }\n-            Ok(())\n-        })\n+        let slice: &[T] = self;\n+        slice.encode(s)\n     }\n }\n "}]}