{"sha": "32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyY2I1YjhjOGVmNmVhM2RkNzgyYmQ3MmY1N2QzYTA5ODE1ODFhM2Q=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-14T10:01:41Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-14T10:01:41Z"}, "message": "Move discriminant get and set to discriminant.rs", "tree": {"sha": "a80aabcf57f7abb090bed7d6508466ed72b46df5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a80aabcf57f7abb090bed7d6508466ed72b46df5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d", "html_url": "https://github.com/rust-lang/rust/commit/32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "883894a07a8f05b4d9d07514af8d8ac19fb27788", "url": "https://api.github.com/repos/rust-lang/rust/commits/883894a07a8f05b4d9d07514af8d8ac19fb27788", "html_url": "https://github.com/rust-lang/rust/commit/883894a07a8f05b4d9d07514af8d8ac19fb27788"}], "stats": {"total": 280, "additions": 145, "deletions": 135}, "files": [{"sha": "444e39c359d6c914275c7049d1f692b3654881d4", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 134, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d", "patch": "@@ -246,55 +246,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n             variant_index,\n         } => {\n             let place = trans_place(fx, place);\n-            let layout = place.layout();\n-            if layout.for_variant(&*fx, *variant_index).abi == layout::Abi::Uninhabited {\n-                return;\n-            }\n-            match layout.variants {\n-                layout::Variants::Single { index } => {\n-                    assert_eq!(index, *variant_index);\n-                }\n-                layout::Variants::Multiple {\n-                    discr: _,\n-                    discr_index,\n-                    discr_kind: layout::DiscriminantKind::Tag,\n-                    variants: _,\n-                } => {\n-                    let ptr = place.place_field(fx, mir::Field::new(discr_index));\n-                    let to = layout\n-                        .ty\n-                        .discriminant_for_variant(fx.tcx, *variant_index)\n-                        .unwrap()\n-                        .val;\n-                    let discr = CValue::const_val(fx, ptr.layout().ty, to);\n-                    ptr.write_cvalue(fx, discr);\n-                }\n-                layout::Variants::Multiple {\n-                    discr: _,\n-                    discr_index,\n-                    discr_kind: layout::DiscriminantKind::Niche {\n-                        dataful_variant,\n-                        ref niche_variants,\n-                        niche_start,\n-                    },\n-                    variants: _,\n-                } => {\n-                    if *variant_index != dataful_variant {\n-                        let niche = place.place_field(fx, mir::Field::new(discr_index));\n-                        //let niche_llty = niche.layout.immediate_llvm_type(bx.cx);\n-                        let niche_value =\n-                            ((variant_index.as_u32() - niche_variants.start().as_u32()) as u128)\n-                                .wrapping_add(niche_start);\n-                        // FIXME(eddyb) Check the actual primitive type here.\n-                        let niche_llval = if niche_value == 0 {\n-                            CValue::const_val(fx, niche.layout().ty, 0)\n-                        } else {\n-                            CValue::const_val(fx, niche.layout().ty, niche_value)\n-                        };\n-                        niche.write_cvalue(fx, niche_llval);\n-                    }\n-                }\n-            }\n+            crate::discriminant::codegen_set_discriminant(fx, place, *variant_index);\n         }\n         StatementKind::Assign(to_place, rval) => {\n             let lval = trans_place(fx, to_place);\n@@ -435,7 +387,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                         // FIXME avoid forcing to stack\n                         let place =\n                             CPlace::for_addr(operand.force_stack(fx), operand.layout());\n-                        let discr = trans_get_discriminant(fx, place, fx.layout_of(to_ty));\n+                        let discr = crate::discriminant::codegen_get_discriminant(fx, place, fx.layout_of(to_ty));\n                         lval.write_cvalue(fx, discr);\n                     } else {\n                         let to_clif_ty = fx.clif_type(to_ty).unwrap();\n@@ -470,7 +422,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                 }\n                 Rvalue::Discriminant(place) => {\n                     let place = trans_place(fx, place);\n-                    let discr = trans_get_discriminant(fx, place, dest_layout);\n+                    let discr = crate::discriminant::codegen_get_discriminant(fx, place, dest_layout);\n                     lval.write_cvalue(fx, discr);\n                 }\n                 Rvalue::Repeat(operand, times) => {\n@@ -619,89 +571,6 @@ fn codegen_array_len<'a, 'tcx: 'a>(\n     }\n }\n \n-pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n-    place: CPlace<'tcx>,\n-    dest_layout: TyLayout<'tcx>,\n-) -> CValue<'tcx> {\n-    let layout = place.layout();\n-\n-    if layout.abi == layout::Abi::Uninhabited {\n-        return trap_unreachable_ret_value(fx, dest_layout, \"[panic] Tried to get discriminant for uninhabited type.\");\n-    }\n-\n-    let (discr_scalar, discr_index, discr_kind) = match &layout.variants {\n-        layout::Variants::Single { index } => {\n-            let discr_val = layout\n-                .ty\n-                .ty_adt_def()\n-                .map_or(u128::from(index.as_u32()), |def| {\n-                    def.discriminant_for_variant(fx.tcx, *index).val\n-                });\n-            return CValue::const_val(fx, dest_layout.ty, discr_val);\n-        }\n-        layout::Variants::Multiple { discr, discr_index, discr_kind, variants: _ } => {\n-            (discr, *discr_index, discr_kind)\n-        }\n-    };\n-\n-    let discr = place.place_field(fx, mir::Field::new(discr_index)).to_cvalue(fx);\n-    let discr_ty = discr.layout().ty;\n-    let lldiscr = discr.load_scalar(fx);\n-    match discr_kind {\n-        layout::DiscriminantKind::Tag => {\n-            let signed = match discr_scalar.value {\n-                layout::Int(_, signed) => signed,\n-                _ => false,\n-            };\n-            let val = clif_intcast(fx, lldiscr, fx.clif_type(dest_layout.ty).unwrap(), signed);\n-            return CValue::by_val(val, dest_layout);\n-        }\n-        layout::DiscriminantKind::Niche {\n-            dataful_variant,\n-            ref niche_variants,\n-            niche_start,\n-        } => {\n-            let niche_llty = fx.clif_type(discr_ty).unwrap();\n-            let dest_clif_ty = fx.clif_type(dest_layout.ty).unwrap();\n-            if niche_variants.start() == niche_variants.end() {\n-                let b = fx\n-                    .bcx\n-                    .ins()\n-                    .icmp_imm(IntCC::Equal, lldiscr, *niche_start as u64 as i64);\n-                let if_true = fx\n-                    .bcx\n-                    .ins()\n-                    .iconst(dest_clif_ty, niche_variants.start().as_u32() as i64);\n-                let if_false = fx\n-                    .bcx\n-                    .ins()\n-                    .iconst(dest_clif_ty, dataful_variant.as_u32() as i64);\n-                let val = fx.bcx.ins().select(b, if_true, if_false);\n-                return CValue::by_val(val, dest_layout);\n-            } else {\n-                // Rebase from niche values to discriminant values.\n-                let delta = niche_start.wrapping_sub(niche_variants.start().as_u32() as u128);\n-                let delta = fx.bcx.ins().iconst(niche_llty, delta as u64 as i64);\n-                let lldiscr = fx.bcx.ins().isub(lldiscr, delta);\n-                let b = fx.bcx.ins().icmp_imm(\n-                    IntCC::UnsignedLessThanOrEqual,\n-                    lldiscr,\n-                    niche_variants.end().as_u32() as i64,\n-                );\n-                let if_true =\n-                    clif_intcast(fx, lldiscr, fx.clif_type(dest_layout.ty).unwrap(), false);\n-                let if_false = fx\n-                    .bcx\n-                    .ins()\n-                    .iconst(dest_clif_ty, dataful_variant.as_u32() as i64);\n-                let val = fx.bcx.ins().select(b, if_true, if_false);\n-                return CValue::by_val(val, dest_layout);\n-            }\n-        }\n-    }\n-}\n-\n pub fn trans_place<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     place: &Place<'tcx>,"}, {"sha": "9b049cd4e1e1a8eed225504f850ca55ea8cbddb8", "filename": "src/discriminant.rs", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d", "patch": "@@ -0,0 +1,140 @@\n+use crate::prelude::*;\n+\n+pub fn codegen_set_discriminant<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    place: CPlace<'tcx>,\n+    variant_index: VariantIdx,\n+) {\n+    let layout = place.layout();\n+    if layout.for_variant(&*fx, variant_index).abi == layout::Abi::Uninhabited {\n+        return;\n+    }\n+    match layout.variants {\n+        layout::Variants::Single { index } => {\n+            assert_eq!(index, variant_index);\n+        }\n+        layout::Variants::Multiple {\n+            discr: _,\n+            discr_index,\n+            discr_kind: layout::DiscriminantKind::Tag,\n+            variants: _,\n+        } => {\n+            let ptr = place.place_field(fx, mir::Field::new(discr_index));\n+            let to = layout\n+                .ty\n+                .discriminant_for_variant(fx.tcx, variant_index)\n+                .unwrap()\n+                .val;\n+            let discr = CValue::const_val(fx, ptr.layout().ty, to);\n+            ptr.write_cvalue(fx, discr);\n+        }\n+        layout::Variants::Multiple {\n+            discr: _,\n+            discr_index,\n+            discr_kind: layout::DiscriminantKind::Niche {\n+                dataful_variant,\n+                ref niche_variants,\n+                niche_start,\n+            },\n+            variants: _,\n+        } => {\n+            if variant_index != dataful_variant {\n+                let niche = place.place_field(fx, mir::Field::new(discr_index));\n+                //let niche_llty = niche.layout.immediate_llvm_type(bx.cx);\n+                let niche_value =\n+                    ((variant_index.as_u32() - niche_variants.start().as_u32()) as u128)\n+                        .wrapping_add(niche_start);\n+                // FIXME(eddyb) Check the actual primitive type here.\n+                let niche_llval = if niche_value == 0 {\n+                    CValue::const_val(fx, niche.layout().ty, 0)\n+                } else {\n+                    CValue::const_val(fx, niche.layout().ty, niche_value)\n+                };\n+                niche.write_cvalue(fx, niche_llval);\n+            }\n+        }\n+    }\n+}\n+\n+pub fn codegen_get_discriminant<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    place: CPlace<'tcx>,\n+    dest_layout: TyLayout<'tcx>,\n+) -> CValue<'tcx> {\n+    let layout = place.layout();\n+\n+    if layout.abi == layout::Abi::Uninhabited {\n+        return trap_unreachable_ret_value(fx, dest_layout, \"[panic] Tried to get discriminant for uninhabited type.\");\n+    }\n+\n+    let (discr_scalar, discr_index, discr_kind) = match &layout.variants {\n+        layout::Variants::Single { index } => {\n+            let discr_val = layout\n+                .ty\n+                .ty_adt_def()\n+                .map_or(u128::from(index.as_u32()), |def| {\n+                    def.discriminant_for_variant(fx.tcx, *index).val\n+                });\n+            return CValue::const_val(fx, dest_layout.ty, discr_val);\n+        }\n+        layout::Variants::Multiple { discr, discr_index, discr_kind, variants: _ } => {\n+            (discr, *discr_index, discr_kind)\n+        }\n+    };\n+\n+    let discr = place.place_field(fx, mir::Field::new(discr_index)).to_cvalue(fx);\n+    let discr_ty = discr.layout().ty;\n+    let lldiscr = discr.load_scalar(fx);\n+    match discr_kind {\n+        layout::DiscriminantKind::Tag => {\n+            let signed = match discr_scalar.value {\n+                layout::Int(_, signed) => signed,\n+                _ => false,\n+            };\n+            let val = clif_intcast(fx, lldiscr, fx.clif_type(dest_layout.ty).unwrap(), signed);\n+            return CValue::by_val(val, dest_layout);\n+        }\n+        layout::DiscriminantKind::Niche {\n+            dataful_variant,\n+            ref niche_variants,\n+            niche_start,\n+        } => {\n+            let niche_llty = fx.clif_type(discr_ty).unwrap();\n+            let dest_clif_ty = fx.clif_type(dest_layout.ty).unwrap();\n+            if niche_variants.start() == niche_variants.end() {\n+                let b = fx\n+                    .bcx\n+                    .ins()\n+                    .icmp_imm(IntCC::Equal, lldiscr, *niche_start as u64 as i64);\n+                let if_true = fx\n+                    .bcx\n+                    .ins()\n+                    .iconst(dest_clif_ty, niche_variants.start().as_u32() as i64);\n+                let if_false = fx\n+                    .bcx\n+                    .ins()\n+                    .iconst(dest_clif_ty, dataful_variant.as_u32() as i64);\n+                let val = fx.bcx.ins().select(b, if_true, if_false);\n+                return CValue::by_val(val, dest_layout);\n+            } else {\n+                // Rebase from niche values to discriminant values.\n+                let delta = niche_start.wrapping_sub(niche_variants.start().as_u32() as u128);\n+                let delta = fx.bcx.ins().iconst(niche_llty, delta as u64 as i64);\n+                let lldiscr = fx.bcx.ins().isub(lldiscr, delta);\n+                let b = fx.bcx.ins().icmp_imm(\n+                    IntCC::UnsignedLessThanOrEqual,\n+                    lldiscr,\n+                    niche_variants.end().as_u32() as i64,\n+                );\n+                let if_true =\n+                    clif_intcast(fx, lldiscr, fx.clif_type(dest_layout.ty).unwrap(), false);\n+                let if_false = fx\n+                    .bcx\n+                    .ins()\n+                    .iconst(dest_clif_ty, dataful_variant.as_u32() as i64);\n+                let val = fx.bcx.ins().select(b, if_true, if_false);\n+                return CValue::by_val(val, dest_layout);\n+            }\n+        }\n+    }\n+}"}, {"sha": "73d8bb8b0d2a2d4ef5317916175fb121dce997f1", "filename": "src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d", "patch": "@@ -377,7 +377,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         discriminant_value, (c val) {\n             let pointee_layout = fx.layout_of(val.layout().ty.builtin_deref(true).unwrap().ty);\n             let place = CPlace::for_addr(val.load_scalar(fx), pointee_layout);\n-            let discr = crate::base::trans_get_discriminant(fx, place, ret.layout());\n+            let discr = crate::discriminant::codegen_get_discriminant(fx, place, ret.layout());\n             ret.write_cvalue(fx, discr);\n         };\n         size_of, <T> () {"}, {"sha": "d4f7219655536806a2f72455c1b00c493d78b175", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=32cb5b8c8ef6ea3dd782bd72f57d3a0981581a3d", "patch": "@@ -38,6 +38,7 @@ mod codegen_i128;\n mod common;\n mod constant;\n mod debuginfo;\n+mod discriminant;\n mod driver;\n mod intrinsics;\n mod linkage;"}]}