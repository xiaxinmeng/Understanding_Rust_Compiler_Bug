{"sha": "b7decf28990f4c8b98f05c4301567f20c91d22b0", "node_id": "C_kwDOAAsO6NoAKGI3ZGVjZjI4OTkwZjRjOGI5OGYwNWM0MzAxNTY3ZjIwYzkxZDIyYjA", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-04T10:14:36Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-04T10:14:36Z"}, "message": "Sync from rust 473f916d836cc662c5bdbb0d40af9fb4678fab9e", "tree": {"sha": "c3c569ffd16ccd2aabed3e754bee184348048fb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3c569ffd16ccd2aabed3e754bee184348048fb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7decf28990f4c8b98f05c4301567f20c91d22b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7decf28990f4c8b98f05c4301567f20c91d22b0", "html_url": "https://github.com/rust-lang/rust/commit/b7decf28990f4c8b98f05c4301567f20c91d22b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7decf28990f4c8b98f05c4301567f20c91d22b0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "215dd7aa0d70cf7396100715326a37c81b06f056", "url": "https://api.github.com/repos/rust-lang/rust/commits/215dd7aa0d70cf7396100715326a37c81b06f056", "html_url": "https://github.com/rust-lang/rust/commit/215dd7aa0d70cf7396100715326a37c81b06f056"}, {"sha": "a4c49374cb363e48751272166023de0868df02af", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4c49374cb363e48751272166023de0868df02af", "html_url": "https://github.com/rust-lang/rust/commit/a4c49374cb363e48751272166023de0868df02af"}], "stats": {"total": 77, "additions": 38, "deletions": 39}, "files": [{"sha": "73a3e3353f3a83ff3a337d78457cdd40b38914ec", "filename": "src/abi/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=b7decf28990f4c8b98f05c4301567f20c91d22b0", "patch": "@@ -88,10 +88,10 @@ pub(crate) fn import_function<'tcx>(\n     let sig = get_function_sig(tcx, module.target_config().default_call_conv, inst);\n     match module.declare_function(name, Linkage::Import, &sig) {\n         Ok(func_id) => func_id,\n-        Err(ModuleError::IncompatibleDeclaration(_)) => tcx.sess.fatal(&format!(\n+        Err(ModuleError::IncompatibleDeclaration(_)) => tcx.sess.fatal(format!(\n             \"attempt to declare `{name}` as function, but it was already declared as static\"\n         )),\n-        Err(ModuleError::IncompatibleSignature(_, prev_sig, new_sig)) => tcx.sess.fatal(&format!(\n+        Err(ModuleError::IncompatibleSignature(_, prev_sig, new_sig)) => tcx.sess.fatal(format!(\n             \"attempt to declare `{name}` with signature {new_sig:?}, \\\n              but it was already declared with signature {prev_sig:?}\"\n         )),\n@@ -548,7 +548,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n             if !matches!(fn_sig.abi(), Abi::C { .. }) {\n                 fx.tcx.sess.span_fatal(\n                     source_info.span,\n-                    &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi()),\n+                    format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi()),\n                 );\n             }\n             let sig_ref = fx.bcx.func.dfg.call_signature(call_inst).unwrap();\n@@ -560,7 +560,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n                         // FIXME set %al to upperbound on float args once floats are supported\n                         fx.tcx.sess.span_fatal(\n                             source_info.span,\n-                            &format!(\"Non int ty {:?} for variadic call\", ty),\n+                            format!(\"Non int ty {:?} for variadic call\", ty),\n                         );\n                     }\n                     AbiParam::new(ty)"}, {"sha": "e9dbea1be671d8696a19f0475cbc600277546192", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=b7decf28990f4c8b98f05c4301567f20c91d22b0", "patch": "@@ -220,13 +220,13 @@ pub(crate) fn verify_func(\n         match cranelift_codegen::verify_function(&func, &flags) {\n             Ok(_) => {}\n             Err(err) => {\n-                tcx.sess.err(&format!(\"{:?}\", err));\n+                tcx.sess.err(format!(\"{:?}\", err));\n                 let pretty_error = cranelift_codegen::print_errors::pretty_verifier_error(\n                     &func,\n                     Some(Box::new(writer)),\n                     err,\n                 );\n-                tcx.sess.fatal(&format!(\"cranelift verify error:\\n{}\", pretty_error));\n+                tcx.sess.fatal(format!(\"cranelift verify error:\\n{}\", pretty_error));\n             }\n         }\n     });\n@@ -335,7 +335,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 fx.bcx.switch_to_block(failure);\n                 fx.bcx.ins().nop();\n \n-                match msg {\n+                match &**msg {\n                     AssertKind::BoundsCheck { ref len, ref index } => {\n                         let len = codegen_operand(fx, len).load_scalar(fx);\n                         let index = codegen_operand(fx, index).load_scalar(fx);"}, {"sha": "264b95e7abd7338d1572f35c1bd824673721353a", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=b7decf28990f4c8b98f05c4301567f20c91d22b0", "patch": "@@ -481,7 +481,7 @@ impl<'tcx> LayoutOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n     #[inline]\n     fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n         if let layout::LayoutError::SizeOverflow(_) = err {\n-            self.0.sess.span_fatal(span, &err.to_string())\n+            self.0.sess.span_fatal(span, err.to_string())\n         } else {\n             span_bug!(span, \"failed to get layout for `{}`: {}\", ty, err)\n         }\n@@ -499,7 +499,7 @@ impl<'tcx> FnAbiOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n         fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {\n         if let FnAbiError::Layout(LayoutError::SizeOverflow(_)) = err {\n-            self.0.sess.span_fatal(span, &err.to_string())\n+            self.0.sess.span_fatal(span, err.to_string())\n         } else {\n             match fn_abi_request {\n                 FnAbiRequest::OfFnPtr { sig, extra_args } => {"}, {"sha": "d2b928db7d4df774ee35df3f8d07832abd520e9f", "filename": "src/concurrency_limiter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fconcurrency_limiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fconcurrency_limiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency_limiter.rs?ref=b7decf28990f4c8b98f05c4301567f20c91d22b0", "patch": "@@ -65,7 +65,7 @@ impl ConcurrencyLimiter {\n                     // Make sure to drop the mutex guard first to prevent poisoning the mutex.\n                     drop(state);\n                     if let Some(err) = err {\n-                        handler.fatal(&err).raise();\n+                        handler.fatal(err).raise();\n                     } else {\n                         // The error was already emitted, but compilation continued. Raise a silent\n                         // fatal error."}, {"sha": "77af561a58724c1fda56b2a1b1e1767412a453d1", "filename": "src/constant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=b7decf28990f4c8b98f05c4301567f20c91d22b0", "patch": "@@ -308,7 +308,7 @@ fn data_id_for_static(\n             attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL),\n         ) {\n             Ok(data_id) => data_id,\n-            Err(ModuleError::IncompatibleDeclaration(_)) => tcx.sess.fatal(&format!(\n+            Err(ModuleError::IncompatibleDeclaration(_)) => tcx.sess.fatal(format!(\n                 \"attempt to declare `{symbol_name}` as static, but it was already declared as function\"\n             )),\n             Err(err) => Err::<_, _>(err).unwrap(),\n@@ -356,7 +356,7 @@ fn data_id_for_static(\n         attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL),\n     ) {\n         Ok(data_id) => data_id,\n-        Err(ModuleError::IncompatibleDeclaration(_)) => tcx.sess.fatal(&format!(\n+        Err(ModuleError::IncompatibleDeclaration(_)) => tcx.sess.fatal(format!(\n             \"attempt to declare `{symbol_name}` as static, but it was already declared as function\"\n         )),\n         Err(err) => Err::<_, _>(err).unwrap(),\n@@ -404,7 +404,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 if let Some(names) = section_name.split_once(',') {\n                     names\n                 } else {\n-                    tcx.sess.fatal(&format!(\n+                    tcx.sess.fatal(format!(\n                         \"#[link_section = \\\"{}\\\"] is not valid for macos target: must be segment and section separated by comma\",\n                         section_name\n                     ));\n@@ -449,7 +449,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 GlobalAlloc::Static(def_id) => {\n                     if tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)\n                     {\n-                        tcx.sess.fatal(&format!(\n+                        tcx.sess.fatal(format!(\n                             \"Allocation {:?} contains reference to TLS value {:?}\",\n                             alloc_id, def_id\n                         ));"}, {"sha": "aad9a9647f8c9b5c9f30b75a77638d0e678c9700", "filename": "src/driver/aot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=b7decf28990f4c8b98f05c4301567f20c91d22b0", "patch": "@@ -69,7 +69,7 @@ impl OngoingCodegen {\n \n             let module_codegen_result = match module_codegen_result {\n                 Ok(module_codegen_result) => module_codegen_result,\n-                Err(err) => sess.fatal(&err),\n+                Err(err) => sess.fatal(err),\n             };\n             let ModuleCodegenResult { module_regular, module_global_asm, existing_work_product } =\n                 module_codegen_result;\n@@ -468,7 +468,7 @@ pub(crate) fn run_aot(\n             let obj = create_compressed_metadata_file(tcx.sess, &metadata, &symbol_name);\n \n             if let Err(err) = std::fs::write(&tmp_file, obj) {\n-                tcx.sess.fatal(&format!(\"error writing metadata object file: {}\", err));\n+                tcx.sess.fatal(format!(\"error writing metadata object file: {}\", err));\n             }\n \n             (metadata_cgu_name, tmp_file)"}, {"sha": "f67fdb592700f82b04a91c46ac5d43f533ffd26b", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=b7decf28990f4c8b98f05c4301567f20c91d22b0", "patch": "@@ -42,7 +42,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         _ => {\n             fx.tcx\n                 .sess\n-                .warn(&format!(\"unsupported llvm intrinsic {}; replacing with trap\", intrinsic));\n+                .warn(format!(\"unsupported llvm intrinsic {}; replacing with trap\", intrinsic));\n             crate::trap::trap_unimplemented(fx, intrinsic);\n             return;\n         }"}, {"sha": "33b2f4702a7a36042dabe64880cb8870ff93d90f", "filename": "src/intrinsics/llvm_aarch64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fintrinsics%2Fllvm_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fintrinsics%2Fllvm_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm_aarch64.rs?ref=b7decf28990f4c8b98f05c4301567f20c91d22b0", "patch": "@@ -207,7 +207,7 @@ pub(crate) fn codegen_aarch64_llvm_intrinsic_call<'tcx>(\n         }\n         */\n         _ => {\n-            fx.tcx.sess.warn(&format!(\n+            fx.tcx.sess.warn(format!(\n                 \"unsupported AArch64 llvm intrinsic {}; replacing with trap\",\n                 intrinsic\n             ));"}, {"sha": "56d8f13cec5e5068fb00141e616c5fb9fc6ad340", "filename": "src/intrinsics/llvm_x86.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fintrinsics%2Fllvm_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fintrinsics%2Fllvm_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm_x86.rs?ref=b7decf28990f4c8b98f05c4301567f20c91d22b0", "patch": "@@ -138,10 +138,9 @@ pub(crate) fn codegen_x86_llvm_intrinsic_call<'tcx>(\n             llvm_add_sub(fx, BinOp::Sub, ret, b_in, a, b);\n         }\n         _ => {\n-            fx.tcx.sess.warn(&format!(\n-                \"unsupported x86 llvm intrinsic {}; replacing with trap\",\n-                intrinsic\n-            ));\n+            fx.tcx\n+                .sess\n+                .warn(format!(\"unsupported x86 llvm intrinsic {}; replacing with trap\", intrinsic));\n             crate::trap::trap_unimplemented(fx, intrinsic);\n             return;\n         }"}, {"sha": "0a513b08b74f5df014fc9ae20913f70bc8d68b3a", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=b7decf28990f4c8b98f05c4301567f20c91d22b0", "patch": "@@ -42,7 +42,7 @@ fn report_atomic_type_validation_error<'tcx>(\n ) {\n     fx.tcx.sess.span_err(\n         span,\n-        &format!(\n+        format!(\n             \"`{}` intrinsic: expected basic integer or raw pointer type, found `{:?}`\",\n             intrinsic, ty\n         ),\n@@ -1202,7 +1202,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         _ => {\n             fx.tcx\n                 .sess\n-                .span_fatal(source_info.span, &format!(\"unsupported intrinsic {}\", intrinsic));\n+                .span_fatal(source_info.span, format!(\"unsupported intrinsic {}\", intrinsic));\n         }\n     }\n "}, {"sha": "5a038bfca5d2d7cb42d65012ec676c1c634ccdea", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=b7decf28990f4c8b98f05c4301567f20c91d22b0", "patch": "@@ -13,7 +13,7 @@ fn report_simd_type_validation_error(\n     span: Span,\n     ty: Ty<'_>,\n ) {\n-    fx.tcx.sess.span_err(span, &format!(\"invalid monomorphization of `{}` intrinsic: expected SIMD input type, found non-SIMD `{}`\", intrinsic, ty));\n+    fx.tcx.sess.span_err(span, format!(\"invalid monomorphization of `{}` intrinsic: expected SIMD input type, found non-SIMD `{}`\", intrinsic, ty));\n     // Prevent verifier error\n     fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n }\n@@ -150,7 +150,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     _ => {\n                         fx.tcx.sess.span_err(\n                             span,\n-                            &format!(\n+                            format!(\n                                 \"simd_shuffle index must be an array of `u32`, got `{}`\",\n                                 idx_ty,\n                             ),\n@@ -248,7 +248,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             if idx >= lane_count.into() {\n                 fx.tcx.sess.span_fatal(\n                     fx.mir.span,\n-                    &format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count),\n+                    format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count),\n                 );\n             }\n \n@@ -296,7 +296,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             if idx >= lane_count.into() {\n                 fx.tcx.sess.span_fatal(\n                     fx.mir.span,\n-                    &format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count),\n+                    format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count),\n                 );\n             }\n \n@@ -699,7 +699,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 _ => {\n                     fx.tcx.sess.span_fatal(\n                         span,\n-                        &format!(\n+                        format!(\n                             \"invalid monomorphization of `simd_bitmask` intrinsic: \\\n                             vector argument `{}`'s element type `{}`, expected integer element \\\n                             type\",\n@@ -739,7 +739,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 _ => {\n                     fx.tcx.sess.span_fatal(\n                         span,\n-                        &format!(\n+                        format!(\n                             \"invalid monomorphization of `simd_bitmask` intrinsic: \\\n                             cannot return `{}`, expected `u{}` or `[u8; {}]`\",\n                             ret.layout().ty,\n@@ -875,7 +875,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         }\n \n         _ => {\n-            fx.tcx.sess.span_err(span, &format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n+            fx.tcx.sess.span_err(span, format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n             // Prevent verifier error\n             fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n         }"}, {"sha": "9966cc2ef3c12b2e0f0cebb9785a1e5935b44beb", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b7decf28990f4c8b98f05c4301567f20c91d22b0", "patch": "@@ -185,7 +185,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         let mut config = self.config.borrow_mut();\n         if config.is_none() {\n             let new_config = BackendConfig::from_opts(&sess.opts.cg.llvm_args)\n-                .unwrap_or_else(|err| sess.fatal(&err));\n+                .unwrap_or_else(|err| sess.fatal(err));\n             *config = Some(new_config);\n         }\n     }\n@@ -245,7 +245,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n fn target_triple(sess: &Session) -> target_lexicon::Triple {\n     match sess.target.llvm_target.parse() {\n         Ok(triple) => triple,\n-        Err(err) => sess.fatal(&format!(\"target not recognized: {}\", err)),\n+        Err(err) => sess.fatal(format!(\"target not recognized: {}\", err)),\n     }\n }\n \n@@ -307,7 +307,7 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Arc<dyn isa::Tar\n         Some(value) => {\n             let mut builder =\n                 cranelift_codegen::isa::lookup(target_triple.clone()).unwrap_or_else(|err| {\n-                    sess.fatal(&format!(\"can't compile for {}: {}\", target_triple, err));\n+                    sess.fatal(format!(\"can't compile for {}: {}\", target_triple, err));\n                 });\n             if let Err(_) = builder.enable(value) {\n                 sess.fatal(\"the specified target cpu isn't currently supported by Cranelift.\");\n@@ -317,7 +317,7 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Arc<dyn isa::Tar\n         None => {\n             let mut builder =\n                 cranelift_codegen::isa::lookup(target_triple.clone()).unwrap_or_else(|err| {\n-                    sess.fatal(&format!(\"can't compile for {}: {}\", target_triple, err));\n+                    sess.fatal(format!(\"can't compile for {}: {}\", target_triple, err));\n                 });\n             if target_triple.architecture == target_lexicon::Architecture::X86_64 {\n                 // Don't use \"haswell\" as the default, as it implies `has_lzcnt`.\n@@ -330,7 +330,7 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Arc<dyn isa::Tar\n \n     match isa_builder.finish(flags) {\n         Ok(target_isa) => target_isa,\n-        Err(err) => sess.fatal(&format!(\"failed to build TargetIsa: {}\", err)),\n+        Err(err) => sess.fatal(format!(\"failed to build TargetIsa: {}\", err)),\n     }\n }\n "}, {"sha": "20ba73f38523a24502d50c464ad35ab1193dbe32", "filename": "src/main_shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=b7decf28990f4c8b98f05c4301567f20c91d22b0", "patch": "@@ -75,7 +75,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n             Ok(func_id) => func_id,\n             Err(err) => {\n                 tcx.sess\n-                    .fatal(&format!(\"entry symbol `{entry_name}` declared multiple times: {err}\"));\n+                    .fatal(format!(\"entry symbol `{entry_name}` declared multiple times: {err}\"));\n             }\n         };\n \n@@ -171,7 +171,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n         }\n \n         if let Err(err) = m.define_function(cmain_func_id, &mut ctx) {\n-            tcx.sess.fatal(&format!(\"entry symbol `{entry_name}` defined multiple times: {err}\"));\n+            tcx.sess.fatal(format!(\"entry symbol `{entry_name}` defined multiple times: {err}\"));\n         }\n \n         unwind_context.add_function(cmain_func_id, &ctx, m.isa());"}, {"sha": "b1fda6ff2133797c234cfcdb556c4db32c30d26e", "filename": "src/value_and_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7decf28990f4c8b98f05c4301567f20c91d22b0/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=b7decf28990f4c8b98f05c4301567f20c91d22b0", "patch": "@@ -344,7 +344,7 @@ impl<'tcx> CPlace<'tcx> {\n         if layout.size.bytes() >= u64::from(u32::MAX - 16) {\n             fx.tcx\n                 .sess\n-                .fatal(&format!(\"values of type {} are too big to store on the stack\", layout.ty));\n+                .fatal(format!(\"values of type {} are too big to store on the stack\", layout.ty));\n         }\n \n         let stack_slot = fx.bcx.create_sized_stack_slot(StackSlotData {"}]}