{"sha": "5948a7b40799d0c0ab4dd171375a335402686ff6", "node_id": "C_kwDOAAsO6NoAKDU5NDhhN2I0MDc5OWQwYzBhYjRkZDE3MTM3NWEzMzU0MDI2ODZmZjY", "commit": {"author": {"name": "the8472", "email": "the8472@users.noreply.github.com", "date": "2021-09-22T17:03:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-22T17:03:22Z"}, "message": "Rollup merge of #89046 - oli-obk:fix_oflo, r=estebank\n\n\"Fix\" an overflow in byte position math\n\nr? `@estebank`\n\nhelp! I fixed the ICE only to brick the diagnostic.\n\nI mean, it was wrong previously (using an already expanded macro span), but it is really bad now XD", "tree": {"sha": "d9de0161d54c1f87a2d3493d09729c15d926fd4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9de0161d54c1f87a2d3493d09729c15d926fd4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5948a7b40799d0c0ab4dd171375a335402686ff6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhS2HbCRBK7hj4Ov3rIwAAoI8IAJky9PrpzG5VmAPd6dpGie+R\nOS6UFJMPm6BGJCBVT/bhts43mvPwuI/UrC7krJ5UTaBvMbWyOrxSysz+aLCUxZYQ\npR8/FW4r6hjIxaaD+fJF7GEOv99rHQhOk8eoYitzyIC4rMtYk2P/vJDFlWtb9jq0\nuJ2LMSzR1qC2ub5yc/GOWUac1TDq5MMTAtgP8SaCbOgpFjqLzpwJqgUg/b3NObca\n1bQE8lWJxAAvuLqzVLd7owL/jKq/UTXD7k72qCLkjKSn/ZI/2SeD01BDPCfg42qZ\nD54c14njisuD34axeHCnYsA6PyCVBuec+XRQueld9Gt9s5c/tmg8Eg+STaFzqm0=\n=gYsO\n-----END PGP SIGNATURE-----\n", "payload": "tree d9de0161d54c1f87a2d3493d09729c15d926fd4e\nparent 1deef1f75d0761256578508c1b398718e121d094\nparent c9fe0938767c8803330367806db8ba1ce81c7843\nauthor the8472 <the8472@users.noreply.github.com> 1632330202 +0200\ncommitter GitHub <noreply@github.com> 1632330202 +0200\n\nRollup merge of #89046 - oli-obk:fix_oflo, r=estebank\n\n\"Fix\" an overflow in byte position math\n\nr? `@estebank`\n\nhelp! I fixed the ICE only to brick the diagnostic.\n\nI mean, it was wrong previously (using an already expanded macro span), but it is really bad now XD\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5948a7b40799d0c0ab4dd171375a335402686ff6", "html_url": "https://github.com/rust-lang/rust/commit/5948a7b40799d0c0ab4dd171375a335402686ff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5948a7b40799d0c0ab4dd171375a335402686ff6/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1deef1f75d0761256578508c1b398718e121d094", "url": "https://api.github.com/repos/rust-lang/rust/commits/1deef1f75d0761256578508c1b398718e121d094", "html_url": "https://github.com/rust-lang/rust/commit/1deef1f75d0761256578508c1b398718e121d094"}, {"sha": "c9fe0938767c8803330367806db8ba1ce81c7843", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9fe0938767c8803330367806db8ba1ce81c7843", "html_url": "https://github.com/rust-lang/rust/commit/c9fe0938767c8803330367806db8ba1ce81c7843"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "60a48b5a2d9c17ecf6e4ce6ba253007f5f015c80", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5948a7b40799d0c0ab4dd171375a335402686ff6/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5948a7b40799d0c0ab4dd171375a335402686ff6/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=5948a7b40799d0c0ab4dd171375a335402686ff6", "patch": "@@ -13,9 +13,11 @@\n #[macro_use]\n extern crate rustc_macros;\n \n+#[macro_use]\n+extern crate tracing;\n+\n pub use emitter::ColorConfig;\n \n-use tracing::debug;\n use Level::*;\n \n use emitter::{is_case_difference, Emitter, EmitterWriter};"}, {"sha": "a40f47f895bbea170b52ab030ce1b0fbf333f075", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5948a7b40799d0c0ab4dd171375a335402686ff6/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5948a7b40799d0c0ab4dd171375a335402686ff6/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=5948a7b40799d0c0ab4dd171375a335402686ff6", "patch": "@@ -6,6 +6,9 @@\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n \n+#[macro_use]\n+extern crate tracing;\n+\n use rustc_ast as ast;\n use rustc_ast::token::{self, Nonterminal, Token, TokenKind};\n use rustc_ast::tokenstream::{self, AttributesData, CanSynthesizeMissingTokens, LazyTokenStream};"}, {"sha": "fe0468c69568a6658a0f7da80a9ba7760b7d86e7", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5948a7b40799d0c0ab4dd171375a335402686ff6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5948a7b40799d0c0ab4dd171375a335402686ff6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=5948a7b40799d0c0ab4dd171375a335402686ff6", "patch": "@@ -1084,6 +1084,7 @@ impl<'a> Parser<'a> {\n \n     /// If we encounter a parser state that looks like the user has written a `struct` literal with\n     /// parentheses instead of braces, recover the parser state and provide suggestions.\n+    #[instrument(skip(self, seq, snapshot), level = \"trace\")]\n     fn maybe_recover_struct_lit_bad_delims(\n         &mut self,\n         lo: Span,"}, {"sha": "032ae73bbf3c61fe503de4442584f5fc658a0e2b", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5948a7b40799d0c0ab4dd171375a335402686ff6/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5948a7b40799d0c0ab4dd171375a335402686ff6/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=5948a7b40799d0c0ab4dd171375a335402686ff6", "patch": "@@ -25,6 +25,9 @@\n #[macro_use]\n extern crate rustc_macros;\n \n+#[macro_use]\n+extern crate tracing;\n+\n use rustc_data_structures::AtomicRef;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n@@ -782,13 +785,30 @@ impl Span {\n     ///     ^^^^^^^^^^^^^^^^^\n     /// ```\n     pub fn until(self, end: Span) -> Span {\n-        let span = self.data();\n-        let end = end.data();\n+        // Most of this function's body is copied from `to`.\n+        // We can't just do `self.to(end.shrink_to_lo())`,\n+        // because to also does some magic where it uses min/max so\n+        // it can handle overlapping spans. Some advanced mis-use of\n+        // `until` with different ctxts makes this visible.\n+        let span_data = self.data();\n+        let end_data = end.data();\n+        // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).\n+        // Return the macro span on its own to avoid weird diagnostic output. It is preferable to\n+        // have an incomplete span than a completely nonsensical one.\n+        if span_data.ctxt != end_data.ctxt {\n+            if span_data.ctxt == SyntaxContext::root() {\n+                return end;\n+            } else if end_data.ctxt == SyntaxContext::root() {\n+                return self;\n+            }\n+            // Both spans fall within a macro.\n+            // FIXME(estebank): check if it is the *same* macro.\n+        }\n         Span::new(\n-            span.lo,\n-            end.lo,\n-            if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },\n-            if span.parent == end.parent { span.parent } else { None },\n+            span_data.lo,\n+            end_data.lo,\n+            if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },\n+            if span_data.parent == end_data.parent { span_data.parent } else { None },\n         )\n     }\n "}, {"sha": "b79f00a8a36425f7dea49abd4ce50b97ee866847", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5948a7b40799d0c0ab4dd171375a335402686ff6/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5948a7b40799d0c0ab4dd171375a335402686ff6/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=5948a7b40799d0c0ab4dd171375a335402686ff6", "patch": "@@ -474,11 +474,12 @@ impl SourceMap {\n         f.lookup_line(sp.lo()) != f.lookup_line(sp.hi())\n     }\n \n+    #[instrument(skip(self), level = \"trace\")]\n     pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {\n         let lo = self.lookup_char_pos(sp.lo());\n-        debug!(\"span_to_lines: lo={:?}\", lo);\n+        trace!(?lo);\n         let hi = self.lookup_char_pos(sp.hi());\n-        debug!(\"span_to_lines: hi={:?}\", hi);\n+        trace!(?hi);\n         if lo.file.start_pos != hi.file.start_pos {\n             return Err(SpanLinesError::DistinctSources(DistinctSources {\n                 begin: (lo.file.name.clone(), lo.file.start_pos),"}, {"sha": "a37a806a15749e449cf26e99dc64ee9f56c8dad2", "filename": "src/test/ui/parser/issue-44406.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5948a7b40799d0c0ab4dd171375a335402686ff6/src%2Ftest%2Fui%2Fparser%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5948a7b40799d0c0ab4dd171375a335402686ff6/src%2Ftest%2Fui%2Fparser%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-44406.stderr?ref=5948a7b40799d0c0ab4dd171375a335402686ff6", "patch": "@@ -26,7 +26,7 @@ LL |         bar {  }\n help: if `bar` is a function, use the arguments directly\n    |\n LL -         bar(baz: $rest)\n-LL +         bar(true);\n+LL +         bar(: $rest)\n    | \n \n error: aborting due to 2 previous errors"}]}