{"sha": "bb68c66c40b7df475c79042d78dab9be3bb7ea00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNjhjNjZjNDBiN2RmNDc1Yzc5MDQyZDc4ZGFiOWJlM2JiN2VhMDA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-08-04T14:43:28Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-08-04T14:47:09Z"}, "message": "Fix assertions in `coverage-reports` test\n\nUpdate some `C-unwind` bits and then", "tree": {"sha": "4df1e8a16517a167ec33ce45a5116b4efbf73146", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4df1e8a16517a167ec33ce45a5116b4efbf73146"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb68c66c40b7df475c79042d78dab9be3bb7ea00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb68c66c40b7df475c79042d78dab9be3bb7ea00", "html_url": "https://github.com/rust-lang/rust/commit/bb68c66c40b7df475c79042d78dab9be3bb7ea00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb68c66c40b7df475c79042d78dab9be3bb7ea00/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37c85ec9396cd1bce461af375e46930344340249", "url": "https://api.github.com/repos/rust-lang/rust/commits/37c85ec9396cd1bce461af375e46930344340249", "html_url": "https://github.com/rust-lang/rust/commit/37c85ec9396cd1bce461af375e46930344340249"}], "stats": {"total": 146, "additions": 70, "deletions": 76}, "files": [{"sha": "00f46f42a078324a8bbd6fe8947f8f84c120d8e2", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.abort.txt", "status": "modified", "additions": 64, "deletions": 65, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/bb68c66c40b7df475c79042d78dab9be3bb7ea00/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.abort.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bb68c66c40b7df475c79042d78dab9be3bb7ea00/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.abort.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.abort.txt?ref=bb68c66c40b7df475c79042d78dab9be3bb7ea00", "patch": "@@ -1,70 +1,69 @@\n-    1|       |#![feature(unwind_attributes)]\n+    1|       |#![feature(c_unwind)]\n     2|       |#![allow(unused_assignments)]\n     3|       |\n-    4|       |#[unwind(aborts)]\n-    5|     12|fn might_abort(should_abort: bool) {\n-    6|     12|    if should_abort {\n-    7|      0|        println!(\"aborting...\");\n-    8|      0|        panic!(\"panics and aborts\");\n-    9|     12|    } else {\n-   10|     12|        println!(\"Don't Panic\");\n-   11|     12|    }\n-   12|     12|}\n-   13|       |\n-   14|      1|fn main() -> Result<(), u8> {\n-   15|      1|    let mut countdown = 10;\n-   16|     11|    while countdown > 0 {\n-   17|     10|        if countdown < 5 {\n-   18|      4|            might_abort(false);\n-   19|      6|        }\n-   20|       |        // See discussion (below the `Notes` section) on coverage results for the closing brace.\n-   21|     10|        if countdown < 5 { might_abort(false); } // Counts for different regions on one line.\n+    4|     12|extern \"C\" fn might_abort(should_abort: bool) {\n+    5|     12|    if should_abort {\n+    6|      0|        println!(\"aborting...\");\n+    7|      0|        panic!(\"panics and aborts\");\n+    8|     12|    } else {\n+    9|     12|        println!(\"Don't Panic\");\n+   10|     12|    }\n+   11|     12|}\n+   12|       |\n+   13|      1|fn main() -> Result<(), u8> {\n+   14|      1|    let mut countdown = 10;\n+   15|     11|    while countdown > 0 {\n+   16|     10|        if countdown < 5 {\n+   17|      4|            might_abort(false);\n+   18|      6|        }\n+   19|       |        // See discussion (below the `Notes` section) on coverage results for the closing brace.\n+   20|     10|        if countdown < 5 { might_abort(false); } // Counts for different regions on one line.\n                                        ^4                     ^6\n-   22|       |        // For the following example, the closing brace is the last character on the line.\n-   23|       |        // This shows the character after the closing brace is highlighted, even if that next\n-   24|       |        // character is a newline.\n-   25|     10|        if countdown < 5 { might_abort(false); }\n+   21|       |        // For the following example, the closing brace is the last character on the line.\n+   22|       |        // This shows the character after the closing brace is highlighted, even if that next\n+   23|       |        // character is a newline.\n+   24|     10|        if countdown < 5 { might_abort(false); }\n                                        ^4                     ^6\n-   26|     10|        countdown -= 1;\n-   27|       |    }\n-   28|      1|    Ok(())\n-   29|      1|}\n-   30|       |\n-   31|       |// Notes:\n-   32|       |//   1. Compare this program and its coverage results to those of the similar tests\n-   33|       |//      `panic_unwind.rs` and `try_error_result.rs`.\n-   34|       |//   2. This test confirms the coverage generated when a program includes `TerminatorKind::Abort`.\n-   35|       |//   3. The test does not invoke the abort. By executing to a successful completion, the coverage\n-   36|       |//      results show where the program did and did not execute.\n-   37|       |//   4. If the program actually aborted, the coverage counters would not be saved (which \"works as\n-   38|       |//      intended\"). Coverage results would show no executed coverage regions.\n-   39|       |//   6. If `should_abort` is `true` and the program aborts, the program exits with a `132` status\n-   40|       |//      (on Linux at least).\n-   41|       |\n-   42|       |/*\n-   43|       |\n-   44|       |Expect the following coverage results:\n-   45|       |\n-   46|       |```text\n-   47|       |    16|     11|    while countdown > 0 {\n-   48|       |    17|     10|        if countdown < 5 {\n-   49|       |    18|      4|            might_abort(false);\n-   50|       |    19|      6|        }\n-   51|       |```\n-   52|       |\n-   53|       |This is actually correct.\n-   54|       |\n-   55|       |The condition `countdown < 5` executed 10 times (10 loop iterations).\n-   56|       |\n-   57|       |It evaluated to `true` 4 times, and executed the `might_abort()` call.\n-   58|       |\n-   59|       |It skipped the body of the `might_abort()` call 6 times. If an `if` does not include an explicit\n-   60|       |`else`, the coverage implementation injects a counter, at the character immediately after the `if`s\n-   61|       |closing brace, to count the \"implicit\" `else`. This is the only way to capture the coverage of the\n-   62|       |non-true condition.\n-   63|       |\n-   64|       |As another example of why this is important, say the condition was `countdown < 50`, which is always\n-   65|       |`true`. In that case, we wouldn't have a test for what happens if `might_abort()` is not called.\n-   66|       |The closing brace would have a count of `0`, highlighting the missed coverage.\n-   67|       |*/\n+   25|     10|        countdown -= 1;\n+   26|       |    }\n+   27|      1|    Ok(())\n+   28|      1|}\n+   29|       |\n+   30|       |// Notes:\n+   31|       |//   1. Compare this program and its coverage results to those of the similar tests\n+   32|       |//      `panic_unwind.rs` and `try_error_result.rs`.\n+   33|       |//   2. This test confirms the coverage generated when a program includes `TerminatorKind::Abort`.\n+   34|       |//   3. The test does not invoke the abort. By executing to a successful completion, the coverage\n+   35|       |//      results show where the program did and did not execute.\n+   36|       |//   4. If the program actually aborted, the coverage counters would not be saved (which \"works as\n+   37|       |//      intended\"). Coverage results would show no executed coverage regions.\n+   38|       |//   6. If `should_abort` is `true` and the program aborts, the program exits with a `132` status\n+   39|       |//      (on Linux at least).\n+   40|       |\n+   41|       |/*\n+   42|       |\n+   43|       |Expect the following coverage results:\n+   44|       |\n+   45|       |```text\n+   46|       |    16|     11|    while countdown > 0 {\n+   47|       |    17|     10|        if countdown < 5 {\n+   48|       |    18|      4|            might_abort(false);\n+   49|       |    19|      6|        }\n+   50|       |```\n+   51|       |\n+   52|       |This is actually correct.\n+   53|       |\n+   54|       |The condition `countdown < 5` executed 10 times (10 loop iterations).\n+   55|       |\n+   56|       |It evaluated to `true` 4 times, and executed the `might_abort()` call.\n+   57|       |\n+   58|       |It skipped the body of the `might_abort()` call 6 times. If an `if` does not include an explicit\n+   59|       |`else`, the coverage implementation injects a counter, at the character immediately after the `if`s\n+   60|       |closing brace, to count the \"implicit\" `else`. This is the only way to capture the coverage of the\n+   61|       |non-true condition.\n+   62|       |\n+   63|       |As another example of why this is important, say the condition was `countdown < 50`, which is always\n+   64|       |`true`. In that case, we wouldn't have a test for what happens if `might_abort()` is not called.\n+   65|       |The closing brace would have a count of `0`, highlighting the missed coverage.\n+   66|       |*/\n "}, {"sha": "48983ba4358fb6c21d7baf6bf86fe7d66d2274aa", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.generics.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb68c66c40b7df475c79042d78dab9be3bb7ea00/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bb68c66c40b7df475c79042d78dab9be3bb7ea00/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generics.txt?ref=bb68c66c40b7df475c79042d78dab9be3bb7ea00", "patch": "@@ -29,12 +29,12 @@\n    18|      2|        println!(\"BOOM times {}!!!\", self.strength);\n    19|      2|    }\n   ------------------\n-  | <generics::Firework<i32> as core::ops::drop::Drop>::drop:\n+  | <generics::Firework<f64> as core::ops::drop::Drop>::drop:\n   |   17|      1|    fn drop(&mut self) {\n   |   18|      1|        println!(\"BOOM times {}!!!\", self.strength);\n   |   19|      1|    }\n   ------------------\n-  | <generics::Firework<f64> as core::ops::drop::Drop>::drop:\n+  | <generics::Firework<i32> as core::ops::drop::Drop>::drop:\n   |   17|      1|    fn drop(&mut self) {\n   |   18|      1|        println!(\"BOOM times {}!!!\", self.strength);\n   |   19|      1|    }"}, {"sha": "768dcb2f6084cdc36abe9452ec3e499d3fb6747f", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb68c66c40b7df475c79042d78dab9be3bb7ea00/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bb68c66c40b7df475c79042d78dab9be3bb7ea00/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=bb68c66c40b7df475c79042d78dab9be3bb7ea00", "patch": "@@ -19,12 +19,12 @@\n    18|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n    19|      2|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}"}, {"sha": "3dac43df8f30d80f83b11494b46060cf20428b8c", "filename": "src/test/run-make-fulldeps/coverage/abort.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb68c66c40b7df475c79042d78dab9be3bb7ea00/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fabort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb68c66c40b7df475c79042d78dab9be3bb7ea00/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fabort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fabort.rs?ref=bb68c66c40b7df475c79042d78dab9be3bb7ea00", "patch": "@@ -17,16 +17,11 @@ fn main() -> Result<(), u8> {\n             might_abort(false);\n         }\n         // See discussion (below the `Notes` section) on coverage results for the closing brace.\n-        if countdown < 5 {\n-            might_abort(false);\n-        }\n-        // Counts for different regions on one line.\n+        if countdown < 5 { might_abort(false); } // Counts for different regions on one line.\n         // For the following example, the closing brace is the last character on the line.\n         // This shows the character after the closing brace is highlighted, even if that next\n         // character is a newline.\n-        if countdown < 5 {\n-            might_abort(false);\n-        }\n+        if countdown < 5 { might_abort(false); }\n         countdown -= 1;\n     }\n     Ok(())"}]}