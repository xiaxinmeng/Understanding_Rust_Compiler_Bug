{"sha": "0f3e596c1d34b74c79133f3996d2c655a2cf8e66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmM2U1OTZjMWQzNGI3NGM3OTEzM2YzOTk2ZDJjNjU1YTJjZjhlNjY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-27T10:54:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-30T05:44:51Z"}, "message": "miri: detect too large dynamically sized objects", "tree": {"sha": "a31d3b8ec616499fc6976ec713fdcf91c5ce0e18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a31d3b8ec616499fc6976ec713fdcf91c5ce0e18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f3e596c1d34b74c79133f3996d2c655a2cf8e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3e596c1d34b74c79133f3996d2c655a2cf8e66", "html_url": "https://github.com/rust-lang/rust/commit/0f3e596c1d34b74c79133f3996d2c655a2cf8e66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f3e596c1d34b74c79133f3996d2c655a2cf8e66/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72b2abfd65ba024e12d7fe51852a309419f494d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/72b2abfd65ba024e12d7fe51852a309419f494d8", "html_url": "https://github.com/rust-lang/rust/commit/72b2abfd65ba024e12d7fe51852a309419f494d8"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "054b65f0e1a9edc0c8ba0da1a17b391bf895b396", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0f3e596c1d34b74c79133f3996d2c655a2cf8e66/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3e596c1d34b74c79133f3996d2c655a2cf8e66/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=0f3e596c1d34b74c79133f3996d2c655a2cf8e66", "patch": "@@ -442,27 +442,30 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                 // Issue #27023: must add any necessary padding to `size`\n                 // (to make it a multiple of `align`) before returning it.\n-                //\n-                // Namely, the returned size should be, in C notation:\n-                //\n-                //   `size + ((size & (align-1)) ? align : 0)`\n-                //\n-                // emulated via the semi-standard fast bit trick:\n-                //\n-                //   `(size + (align-1)) & -align`\n-\n-                Ok(Some((size.align_to(align), align)))\n+                let size = size.align_to(align);\n+\n+                // Check if this brought us over the size limit.\n+                if size.bytes() >= self.tcx.data_layout().obj_size_bound() {\n+                    throw_ub_format!(\"wide pointer metadata contains invalid information: \\\n+                        total size is bigger than largest supported object\");\n+                }\n+                Ok(Some((size, align)))\n             }\n             ty::Dynamic(..) => {\n                 let vtable = metadata.expect(\"dyn trait fat ptr must have vtable\");\n-                // the second entry in the vtable is the dynamic size of the object.\n+                // Read size and align from vtable (already checks size).\n                 Ok(Some(self.read_size_and_align_from_vtable(vtable)?))\n             }\n \n             ty::Slice(_) | ty::Str => {\n                 let len = metadata.expect(\"slice fat ptr must have vtable\").to_usize(self)?;\n                 let elem = layout.field(self, 0)?;\n-                Ok(Some((elem.size * len, elem.align.abi)))\n+\n+                // Make sure the slice is not too big.\n+                let size = elem.size.checked_mul(len, &*self.tcx)\n+                    .ok_or_else(|| err_ub_format!(\"invalid slice: \\\n+                        total size is bigger than largest supported object\"))?;\n+                Ok(Some((size, elem.align.abi)))\n             }\n \n             ty::Foreign(_) => {"}, {"sha": "10b767ebba191174fa663f9192a8f9c980641646", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f3e596c1d34b74c79133f3996d2c655a2cf8e66/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3e596c1d34b74c79133f3996d2c655a2cf8e66/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=0f3e596c1d34b74c79133f3996d2c655a2cf8e66", "patch": "@@ -1,5 +1,5 @@\n use rustc::ty::{self, Ty, Instance, TypeFoldable};\n-use rustc::ty::layout::{Size, Align, LayoutOf};\n+use rustc::ty::layout::{Size, Align, LayoutOf, HasDataLayout};\n use rustc::mir::interpret::{Scalar, Pointer, InterpResult, PointerArithmetic,};\n \n use super::{InterpCx, Machine, MemoryKind, FnVal};\n@@ -151,6 +151,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             vtable.offset(pointer_size * 2, self)?,\n         )?.not_undef()?;\n         let align = self.force_bits(align, pointer_size)? as u64;\n+\n+        if size >= self.tcx.data_layout().obj_size_bound() {\n+            throw_ub_format!(\"invalid vtable: \\\n+                size is bigger than largest supported object\");\n+        }\n         Ok((Size::from_bytes(size), Align::from_bytes(align).unwrap()))\n     }\n }"}]}