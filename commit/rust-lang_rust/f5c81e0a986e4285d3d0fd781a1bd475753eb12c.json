{"sha": "f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YzgxZTBhOTg2ZTQyODVkM2QwZmQ3ODFhMWJkNDc1NzUzZWIxMmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-02T03:09:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-02T03:09:36Z"}, "message": "Auto merge of #66944 - Centril:rollup-ojsszx6, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #66346 (Replace .unwrap() with ? in std::os::unix::net)\n - #66789 (rustc: move mir::SourceScopeLocalData to a field of SourceScopeData.)\n - #66850 (rustc: hide HirId's fmt::Debug output from -Z span_free_formats.)\n - #66905 (rustc_plugin: Remove some remaining plugin features)\n - #66907 (rustc: don't just show raw DefIndex's in BrNamed's fmt::Debug impl.)\n - #66918 (Add crc and crypto to target feature whitelist on arm)\n - #66926 (add reusable MachineStop variant to Miri engine error enum)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "83d09d793be00ebbe835ca8d70dc3bd2ab11d589", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83d09d793be00ebbe835ca8d70dc3bd2ab11d589"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "html_url": "https://github.com/rust-lang/rust/commit/f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4007d4ef26eab44bdabc2b7574d032152264d3ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/4007d4ef26eab44bdabc2b7574d032152264d3ad", "html_url": "https://github.com/rust-lang/rust/commit/4007d4ef26eab44bdabc2b7574d032152264d3ad"}, {"sha": "cd47551a0e4f9e04d9bf4e648601667ebfdd78fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd47551a0e4f9e04d9bf4e648601667ebfdd78fc", "html_url": "https://github.com/rust-lang/rust/commit/cd47551a0e4f9e04d9bf4e648601667ebfdd78fc"}], "stats": {"total": 1327, "additions": 585, "deletions": 742}, "files": [{"sha": "386f6008d06aad0b1b15741662ec43fad2529cf4", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -307,18 +307,6 @@ warning: path statement with no effect\n   |\n ```\n \n-## plugin-as-library\n-\n-This lint detects when compiler plugins are used as ordinary library in\n-non-plugin crate. Some example code that triggers this lint:\n-\n-```rust,ignore\n-#![feature(plugin)]\n-#![plugin(macro_crate_test)]\n-\n-extern crate macro_crate_test;\n-```\n-\n ## private-in-public\n \n This lint detects private items in public interfaces not caught by the old implementation. Some"}, {"sha": "495cdee62c87dc798f6049ba5a21278d79409012", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -21,15 +21,10 @@ the crate attribute `#![plugin(...)]`.  See the\n `rustc_driver::plugin` documentation for more about the\n mechanics of defining and loading a plugin.\n \n-If present, arguments passed as `#![plugin(foo(... args ...))]` are not\n-interpreted by rustc itself.  They are provided to the plugin through the\n-`Registry`'s `args` method.\n-\n In the vast majority of cases, a plugin should *only* be used through\n `#![plugin]` and not through an `extern crate` item.  Linking a plugin would\n pull in all of libsyntax and librustc as dependencies of your crate.  This is\n-generally unwanted unless you are building another plugin.  The\n-`plugin_as_library` lint checks these guidelines.\n+generally unwanted unless you are building another plugin.\n \n The usual practice is to put compiler plugins in their own crate, separate from\n any `macro_rules!` macros or ordinary Rust code meant to be used by consumers"}, {"sha": "7f72154e42c61eb0f7fcb447d12e04a295a4c33a", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -47,8 +47,7 @@ use rustc_error_codes::*;\n /// This is basically the subset of `Context` that we can\n /// build early in the compile pipeline.\n pub struct LintStore {\n-    /// Registered lints. The bool is true if the lint was\n-    /// added by a plugin.\n+    /// Registered lints.\n     lints: Vec<&'static Lint>,\n \n     /// Constructor functions for each variety of lint pass."}, {"sha": "557310650faeb4ceb0fdc15c670ce54c5ec79109", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -14,7 +14,7 @@ use rustc_target::spec::abi::Abi;\n use syntax_pos::{Pos, Span};\n use syntax::symbol::Symbol;\n use hir::GeneratorKind;\n-use std::{fmt, env};\n+use std::{fmt, env, any::Any};\n \n use rustc_error_codes::*;\n \n@@ -44,14 +44,14 @@ CloneTypeFoldableImpls! {\n pub type ConstEvalRawResult<'tcx> = Result<RawConst<'tcx>, ErrorHandled>;\n pub type ConstEvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ErrorHandled>;\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n     pub error: crate::mir::interpret::InterpError<'tcx>,\n     pub stacktrace: Vec<FrameInfo<'tcx>>,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n pub struct FrameInfo<'tcx> {\n     /// This span is in the caller.\n     pub call_site: Span,\n@@ -138,6 +138,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         lint_root: Option<hir::HirId>,\n     ) -> Result<DiagnosticBuilder<'tcx>, ErrorHandled> {\n         let must_error = match self.error {\n+            InterpError::MachineStop(_) => bug!(\"CTFE does not stop\"),\n             err_inval!(Layout(LayoutError::Unknown(_))) |\n             err_inval!(TooGeneric) =>\n                 return Err(ErrorHandled::TooGeneric),\n@@ -189,7 +190,7 @@ pub fn struct_error<'tcx>(tcx: TyCtxtAt<'tcx>, msg: &str) -> DiagnosticBuilder<'\n /// Thsese should always be constructed by calling `.into()` on\n /// a `InterpError`. In `librustc_mir::interpret`, we have `throw_err_*`\n /// macros for this.\n-#[derive(Debug, Clone)]\n+#[derive(Debug)]\n pub struct InterpErrorInfo<'tcx> {\n     pub kind: InterpError<'tcx>,\n     backtrace: Option<Box<Backtrace>>,\n@@ -331,7 +332,6 @@ impl<O: fmt::Debug> fmt::Debug for PanicInfo<O> {\n /// Error information for when the program we executed turned out not to actually be a valid\n /// program. This cannot happen in stand-alone Miri, but it can happen during CTFE/ConstProp\n /// where we work on generic code or execution does not have all information available.\n-#[derive(Clone, HashStable)]\n pub enum InvalidProgramInfo<'tcx> {\n     /// Resolution can fail if we are in a too generic context.\n     TooGeneric,\n@@ -361,7 +361,6 @@ impl fmt::Debug for InvalidProgramInfo<'tcx> {\n }\n \n /// Error information for when the program caused Undefined Behavior.\n-#[derive(Clone, HashStable)]\n pub enum UndefinedBehaviorInfo {\n     /// Free-form case. Only for errors that are never caught!\n     Ub(String),\n@@ -394,7 +393,6 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n ///\n /// Currently, we also use this as fall-back error kind for errors that have not been\n /// categorized yet.\n-#[derive(Clone, HashStable)]\n pub enum UnsupportedOpInfo<'tcx> {\n     /// Free-form case. Only for errors that are never caught!\n     Unsupported(String),\n@@ -571,7 +569,6 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n \n /// Error information for when the program exhausted the resources granted to it\n /// by the interpreter.\n-#[derive(Clone, HashStable)]\n pub enum ResourceExhaustionInfo {\n     /// The stack grew too big.\n     StackFrameLimitReached,\n@@ -592,7 +589,6 @@ impl fmt::Debug for ResourceExhaustionInfo {\n     }\n }\n \n-#[derive(Clone, HashStable)]\n pub enum InterpError<'tcx> {\n     /// The program panicked.\n     Panic(PanicInfo<u64>),\n@@ -601,14 +597,14 @@ pub enum InterpError<'tcx> {\n     /// The program did something the interpreter does not support (some of these *might* be UB\n     /// but the interpreter is not sure).\n     Unsupported(UnsupportedOpInfo<'tcx>),\n-    /// The program was invalid (ill-typed, not sufficiently monomorphized, ...).\n+    /// The program was invalid (ill-typed, bad MIR, not sufficiently monomorphized, ...).\n     InvalidProgram(InvalidProgramInfo<'tcx>),\n     /// The program exhausted the interpreter's resources (stack/heap too big,\n-    /// execution takes too long, ..).\n+    /// execution takes too long, ...).\n     ResourceExhaustion(ResourceExhaustionInfo),\n-    /// Not actually an interpreter error -- used to signal that execution has exited\n-    /// with the given status code.  Used by Miri, but not by CTFE.\n-    Exit(i32),\n+    /// Stop execution for a machine-controlled reason. This is never raised by\n+    /// the core engine itself.\n+    MachineStop(Box<dyn Any + Send>),\n }\n \n pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;\n@@ -634,8 +630,8 @@ impl fmt::Debug for InterpError<'_> {\n                 write!(f, \"{:?}\", msg),\n             Panic(ref msg) =>\n                 write!(f, \"{:?}\", msg),\n-            Exit(code) =>\n-                write!(f, \"exited with status code {}\", code),\n+            MachineStop(_) =>\n+                write!(f, \"machine caused execution to stop\"),\n         }\n     }\n }"}, {"sha": "300b0363e2d3b20ee2f03d032643e5358716c826", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -104,10 +104,6 @@ pub struct Body<'tcx> {\n     /// and used for debuginfo. Indexed by a `SourceScope`.\n     pub source_scopes: IndexVec<SourceScope, SourceScopeData>,\n \n-    /// Crate-local information for each source scope, that can't (and\n-    /// needn't) be tracked across crates.\n-    pub source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n-\n     /// The yield type of the function, if it is a generator.\n     pub yield_ty: Option<Ty<'tcx>>,\n \n@@ -167,7 +163,6 @@ impl<'tcx> Body<'tcx> {\n     pub fn new(\n         basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n         source_scopes: IndexVec<SourceScope, SourceScopeData>,\n-        source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n         local_decls: LocalDecls<'tcx>,\n         user_type_annotations: CanonicalUserTypeAnnotations<'tcx>,\n         arg_count: usize,\n@@ -188,7 +183,6 @@ impl<'tcx> Body<'tcx> {\n             phase: MirPhase::Build,\n             basic_blocks,\n             source_scopes,\n-            source_scope_local_data,\n             yield_ty: None,\n             generator_drop: None,\n             generator_layout: None,\n@@ -435,6 +429,13 @@ pub enum ClearCrossCrate<T> {\n }\n \n impl<T> ClearCrossCrate<T> {\n+    pub fn as_ref(&'a self) -> ClearCrossCrate<&'a T> {\n+        match self {\n+            ClearCrossCrate::Clear => ClearCrossCrate::Clear,\n+            ClearCrossCrate::Set(v) => ClearCrossCrate::Set(v),\n+        }\n+    }\n+\n     pub fn assert_crate_local(self) -> T {\n         match self {\n             ClearCrossCrate::Clear => bug!(\"unwrapping cross-crate data\"),\n@@ -2027,6 +2028,10 @@ rustc_index::newtype_index! {\n pub struct SourceScopeData {\n     pub span: Span,\n     pub parent_scope: Option<SourceScope>,\n+\n+    /// Crate-local information for this source scope, that can't (and\n+    /// needn't) be tracked across crates.\n+    pub local_data: ClearCrossCrate<SourceScopeLocalData>,\n }\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n@@ -2308,10 +2313,14 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         }\n                     }\n \n-                    AggregateKind::Closure(def_id, _) => ty::tls::with(|tcx| {\n+                    AggregateKind::Closure(def_id, substs) => ty::tls::with(|tcx| {\n                         if let Some(hir_id) = tcx.hir().as_local_hir_id(def_id) {\n                             let name = if tcx.sess.opts.debugging_opts.span_free_formats {\n-                                format!(\"[closure@{:?}]\", hir_id)\n+                                let substs = tcx.lift(&substs).unwrap();\n+                                format!(\n+                                    \"[closure@{}]\",\n+                                    tcx.def_path_str_with_substs(def_id, substs),\n+                                )\n                             } else {\n                                 format!(\"[closure@{:?}]\", tcx.hir().span(hir_id))\n                             };"}, {"sha": "145593f1c4d4adc839b6cb96aac54b6420a25e57", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -317,6 +317,7 @@ macro_rules! make_mir_visitor {\n                 let SourceScopeData {\n                     span,\n                     parent_scope,\n+                    local_data: _,\n                 } = scope_data;\n \n                 self.visit_span(span);"}, {"sha": "d2ac5436cc8025e3e889462f593151fe1a1b620f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -1364,8 +1364,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"enable queries of the dependency graph for regression testing\"),\n     no_analysis: bool = (false, parse_bool, [UNTRACKED],\n         \"parse and expand the source, but run no analysis\"),\n-    extra_plugins: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n-        \"load extra plugins\"),\n     unstable_options: bool = (false, parse_bool, [UNTRACKED],\n         \"adds unstable command line options to rustc interface\"),\n     force_overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],"}, {"sha": "f673ea3e771c544566b77c0b51d6dd7168cad9f0", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -76,7 +76,6 @@ pub struct Session {\n     /// (sub)diagnostics that have been set once, but should not be set again,\n     /// in order to avoid redundantly verbose output (Issue #24690, #44953).\n     pub one_time_diagnostics: Lock<FxHashSet<(DiagnosticMessageId, Option<Span>, String)>>,\n-    pub plugin_llvm_passes: OneThread<RefCell<Vec<String>>>,\n     pub crate_types: Once<Vec<config::CrateType>>,\n     /// The `crate_disambiguator` is constructed out of all the `-C metadata`\n     /// arguments passed to the compiler. Its value together with the crate-name\n@@ -1149,7 +1148,6 @@ fn build_session_(\n         local_crate_source_file,\n         working_dir,\n         one_time_diagnostics: Default::default(),\n-        plugin_llvm_passes: OneThread::new(RefCell::new(Vec::new())),\n         crate_types: Once::new(),\n         crate_disambiguator: Once::new(),\n         features: Once::new(),"}, {"sha": "fff2f06e87b8edc3cb81c65244695cd4b7f0155a", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -682,7 +682,7 @@ pub trait PrettyPrinter<'tcx>:\n                 // FIXME(eddyb) should use `def_span`.\n                 if let Some(hir_id) = self.tcx().hir().as_local_hir_id(did) {\n                     if self.tcx().sess.opts.debugging_opts.span_free_formats {\n-                        p!(write(\"@{:?}\", hir_id));\n+                        p!(write(\"@\"), print_def_path(did, substs));\n                     } else {\n                         p!(write(\"@{:?}\", self.tcx().hir().span(hir_id)));\n                     }"}, {"sha": "ce76a4c831b58772c79b37683a3d17051d855033", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -3,6 +3,7 @@\n //! hand, though we've recently added some macros and proc-macros to help with the tedium.\n \n use crate::hir::def::Namespace;\n+use crate::hir::def_id::CRATE_DEF_INDEX;\n use crate::mir::ProjectionKind;\n use crate::mir::interpret;\n use crate::ty::{self, Lift, Ty, TyCtxt, InferConst};\n@@ -95,8 +96,11 @@ impl fmt::Debug for ty::BoundRegion {\n         match *self {\n             ty::BrAnon(n) => write!(f, \"BrAnon({:?})\", n),\n             ty::BrNamed(did, name) => {\n-                write!(f, \"BrNamed({:?}:{:?}, {})\",\n-                        did.krate, did.index, name)\n+                if did.index == CRATE_DEF_INDEX {\n+                    write!(f, \"BrNamed({})\", name)\n+                } else {\n+                    write!(f, \"BrNamed({:?}, {})\", did, name)\n+                }\n             }\n             ty::BrEnv => write!(f, \"BrEnv\"),\n         }"}, {"sha": "07ac76cec990b85a2e5908f6e219aab910aaba5e", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -365,20 +365,6 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n \n             add_sanitizer_passes(config, &mut extra_passes);\n \n-            for pass_name in &cgcx.plugin_passes {\n-                if let Some(pass) = find_pass(pass_name) {\n-                    extra_passes.push(pass);\n-                } else {\n-                    diag_handler.err(&format!(\"a plugin asked for LLVM pass \\\n-                                               `{}` but LLVM does not \\\n-                                               recognize it\", pass_name));\n-                }\n-\n-                if pass_name == \"name-anon-globals\" {\n-                    have_name_anon_globals_pass = true;\n-                }\n-            }\n-\n             // Some options cause LLVM bitcode to be emitted, which uses ThinLTOBuffers, so we need\n             // to make sure we run LLVM's NameAnonGlobals pass when emitting bitcode; otherwise\n             // we'll get errors in LLVM."}, {"sha": "72612c4704e667b4cfb3c4634b0289ccfa2eca13", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -108,6 +108,8 @@ const ARM_WHITELIST: &[(&str, Option<Symbol>)] = &[\n     (\"rclass\", Some(sym::arm_target_feature)),\n     (\"dsp\", Some(sym::arm_target_feature)),\n     (\"neon\", Some(sym::arm_target_feature)),\n+    (\"crc\", Some(sym::arm_target_feature)),\n+    (\"crypto\", Some(sym::arm_target_feature)),\n     (\"v5te\", Some(sym::arm_target_feature)),\n     (\"v6\", Some(sym::arm_target_feature)),\n     (\"v6k\", Some(sym::arm_target_feature)),"}, {"sha": "863b41ec15ec07cfaa1613e577620c5589374329", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -231,8 +231,6 @@ pub struct CodegenContext<B: WriteBackendMethods> {\n     pub total_cgus: usize,\n     // Handler to use for diagnostics produced during codegen.\n     pub diag_emitter: SharedEmitter,\n-    // LLVM passes added by plugins.\n-    pub plugin_passes: Vec<String>,\n     // LLVM optimizations for which we want to print remarks.\n     pub remark: Passes,\n     // Worker thread number\n@@ -1028,7 +1026,6 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         time_passes: sess.time_extended(),\n         prof: sess.prof.clone(),\n         exported_symbols,\n-        plugin_passes: sess.plugin_llvm_passes.borrow().clone(),\n         remark: sess.opts.cg.remark.clone(),\n         worker: 0,\n         incr_comp_session_dir: sess.incr_comp_session_dir_opt().map(|r| r.clone()),"}, {"sha": "9c936492cbded40e3810566fdcd3a77be7bc1cde", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -283,7 +283,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         )\n     ),\n     (\n-        sym::plugin, CrateLevel, template!(List: \"name|name(args)\"),\n+        sym::plugin, CrateLevel, template!(List: \"name\"),\n         Gated(\n             Stability::Deprecated(\n                 \"https://github.com/rust-lang/rust/pull/64675\","}, {"sha": "f985a5b37558c91e035bac344e92c9c96ab81586", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -30,7 +30,6 @@ use rustc_mir as mir;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n use rustc_passes::{self, ast_validation, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n-use rustc_plugin_impl::registry::Registry;\n use rustc_privacy;\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_traits;\n@@ -106,8 +105,7 @@ declare_box_region_type!(\n     (&mut Resolver<'_>) -> (Result<ast::Crate>, ResolverOutputs)\n );\n \n-/// Runs the \"early phases\" of the compiler: initial `cfg` processing,\n-/// loading compiler plugins (including those from `addl_plugins`),\n+/// Runs the \"early phases\" of the compiler: initial `cfg` processing, loading compiler plugins,\n /// syntax expansion, secondary `cfg` expansion, synthesis of a test\n /// harness if one is to be provided, injection of a dependency on the\n /// standard library and prelude, and name resolution.\n@@ -209,33 +207,22 @@ pub fn register_plugins<'a>(\n         middle::recursion_limit::update_limits(sess, &krate);\n     });\n \n-    let registrars = time(sess, \"plugin loading\", || {\n-        plugin::load::load_plugins(\n-            sess,\n-            metadata_loader,\n-            &krate,\n-            Some(sess.opts.debugging_opts.extra_plugins.clone()),\n-        )\n-    });\n-\n     let mut lint_store = rustc_lint::new_lint_store(\n         sess.opts.debugging_opts.no_interleave_lints,\n         sess.unstable_options(),\n     );\n+    register_lints(&sess, &mut lint_store);\n \n-    (register_lints)(&sess, &mut lint_store);\n-\n-    let mut registry = Registry::new(sess, &mut lint_store, krate.span);\n-\n+    let registrars = time(sess, \"plugin loading\", || {\n+        plugin::load::load_plugins(sess, metadata_loader, &krate)\n+    });\n     time(sess, \"plugin registration\", || {\n+        let mut registry = plugin::Registry { lint_store: &mut lint_store };\n         for registrar in registrars {\n-            registry.args_hidden = Some(registrar.args);\n-            (registrar.fun)(&mut registry);\n+            registrar(&mut registry);\n         }\n     });\n \n-    *sess.plugin_llvm_passes.borrow_mut() = registry.llvm_passes;\n-\n     Ok((krate, Lrc::new(lint_store)))\n }\n "}, {"sha": "4c630b56cb4ce36a1b02bac73b31b57b673b1a4f", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -650,10 +650,6 @@ fn test_debugging_options_tracking_hash() {\n     opts.debugging_opts.continue_parse_after_error = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n-    opts = reference.clone();\n-    opts.debugging_opts.extra_plugins = vec![String::from(\"plugin1\"), String::from(\"plugin2\")];\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n     opts = reference.clone();\n     opts.debugging_opts.force_overflow_checks = Some(true);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "b08a095beac4ecbf06216087f7361fa00e8ef82d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -24,7 +24,7 @@\n use std::fmt::Write;\n \n use rustc::hir::def::{Res, DefKind};\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::hir::def_id::DefId;\n use rustc::ty::{self, Ty, TyCtxt, layout::VariantIdx};\n use rustc::{lint, util};\n use rustc::lint::FutureIncompatibleInfo;\n@@ -800,45 +800,6 @@ impl EarlyLintPass for UnusedDocComment {\n     }\n }\n \n-declare_lint! {\n-    PLUGIN_AS_LIBRARY,\n-    Warn,\n-    \"compiler plugin used as ordinary library in non-plugin crate\"\n-}\n-\n-declare_lint_pass!(PluginAsLibrary => [PLUGIN_AS_LIBRARY]);\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PluginAsLibrary {\n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n-        if cx.tcx.plugin_registrar_fn(LOCAL_CRATE).is_some() {\n-            // We're compiling a plugin; it's fine to link other plugins.\n-            return;\n-        }\n-\n-        match it.kind {\n-            hir::ItemKind::ExternCrate(..) => (),\n-            _ => return,\n-        };\n-\n-        let def_id = cx.tcx.hir().local_def_id(it.hir_id);\n-        let prfn = match cx.tcx.extern_mod_stmt_cnum(def_id) {\n-            Some(cnum) => cx.tcx.plugin_registrar_fn(cnum),\n-            None => {\n-                // Probably means we aren't linking the crate for some reason.\n-                //\n-                // Not sure if / when this could happen.\n-                return;\n-            }\n-        };\n-\n-        if prfn.is_some() {\n-            cx.span_lint(PLUGIN_AS_LIBRARY,\n-                         it.span,\n-                         \"compiler plugin used as an ordinary library\");\n-        }\n-    }\n-}\n-\n declare_lint! {\n     NO_MANGLE_CONST_ITEMS,\n     Deny,\n@@ -1268,7 +1229,6 @@ declare_lint_pass!(\n         MISSING_DEBUG_IMPLEMENTATIONS,\n         ANONYMOUS_PARAMETERS,\n         UNUSED_DOC_COMMENTS,\n-        PLUGIN_AS_LIBRARY,\n         NO_MANGLE_CONST_ITEMS,\n         NO_MANGLE_GENERIC_ITEMS,\n         MUTABLE_TRANSMUTES,"}, {"sha": "ab4063c421cd24f6933c16aeb98a7121c5452e81", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -157,8 +157,6 @@ macro_rules! late_lint_mod_passes {\n             // Depends on types used in type definitions\n             MissingCopyImplementations: MissingCopyImplementations,\n \n-            PluginAsLibrary: PluginAsLibrary,\n-\n             // Depends on referenced function signatures in expressions\n             MutableTransmutes: MutableTransmutes,\n \n@@ -350,6 +348,7 @@ fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/35896\");\n     store.register_removed(\"nested_impl_trait\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/59014\");\n+    store.register_removed(\"plugin_as_library\", \"plugins have been deprecated and retired\");\n }\n \n fn register_internals(store: &mut lint::LintStore) {"}, {"sha": "3a783f674e9ae6c75f758e87f6c86422a47388a0", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -300,11 +300,10 @@ fn do_mir_borrowck<'a, 'tcx>(\n         let mut initial_diag =\n             mbcx.report_conflicting_borrow(location, (&place, span), bk, &borrow);\n \n-        let lint_root = if let ClearCrossCrate::Set(ref vsi) = mbcx.body.source_scope_local_data {\n-            let scope = mbcx.body.source_info(location).scope;\n-            vsi[scope].lint_root\n-        } else {\n-            id\n+        let scope = mbcx.body.source_info(location).scope;\n+        let lint_root = match &mbcx.body.source_scopes[scope].local_data {\n+            ClearCrossCrate::Set(data) => data.lint_root,\n+            _ => id,\n         };\n \n         // Span and message don't matter; we overwrite them below anyway\n@@ -338,38 +337,40 @@ fn do_mir_borrowck<'a, 'tcx>(\n     debug!(\"mbcx.used_mut: {:?}\", mbcx.used_mut);\n     let used_mut = mbcx.used_mut;\n     for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {\n-        if let ClearCrossCrate::Set(ref vsi) = mbcx.body.source_scope_local_data {\n-            let local_decl = &mbcx.body.local_decls[local];\n-\n-            // Skip over locals that begin with an underscore or have no name\n-            match mbcx.local_names[local] {\n-                Some(name) => if name.as_str().starts_with(\"_\") {\n-                    continue;\n-                },\n-                None => continue,\n-            }\n+        let local_decl = &mbcx.body.local_decls[local];\n+        let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {\n+            ClearCrossCrate::Set(data) => data.lint_root,\n+            _ => continue,\n+        };\n \n-            let span = local_decl.source_info.span;\n-            if span.desugaring_kind().is_some() {\n-                // If the `mut` arises as part of a desugaring, we should ignore it.\n+        // Skip over locals that begin with an underscore or have no name\n+        match mbcx.local_names[local] {\n+            Some(name) => if name.as_str().starts_with(\"_\") {\n                 continue;\n-            }\n+            },\n+            None => continue,\n+        }\n \n-            let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n-            tcx.struct_span_lint_hir(\n-                UNUSED_MUT,\n-                vsi[local_decl.source_info.scope].lint_root,\n-                span,\n-                \"variable does not need to be mutable\",\n-            )\n-            .span_suggestion_short(\n-                mut_span,\n-                \"remove this `mut`\",\n-                String::new(),\n-                Applicability::MachineApplicable,\n-            )\n-            .emit();\n+        let span = local_decl.source_info.span;\n+        if span.desugaring_kind().is_some() {\n+            // If the `mut` arises as part of a desugaring, we should ignore it.\n+            continue;\n         }\n+\n+        let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n+        tcx.struct_span_lint_hir(\n+            UNUSED_MUT,\n+            lint_root,\n+            span,\n+            \"variable does not need to be mutable\",\n+        )\n+        .span_suggestion_short(\n+            mut_span,\n+            \"remove this `mut`\",\n+            String::new(),\n+            Applicability::MachineApplicable,\n+        )\n+        .emit();\n     }\n \n     // Buffer any move errors that we collected and de-duplicated."}, {"sha": "eb9b401f27208abc5352e5e7c1e749a01e5f2da2", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -309,7 +309,6 @@ struct Builder<'a, 'tcx> {\n     /// The vector of all scopes that we have created thus far;\n     /// we track this for debuginfo later.\n     source_scopes: IndexVec<SourceScope, SourceScopeData>,\n-    source_scope_local_data: IndexVec<SourceScope, SourceScopeLocalData>,\n     source_scope: SourceScope,\n \n     /// The guard-context: each time we build the guard expression for\n@@ -704,7 +703,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             block_context: BlockContext::new(),\n             source_scopes: IndexVec::new(),\n             source_scope: OUTERMOST_SOURCE_SCOPE,\n-            source_scope_local_data: IndexVec::new(),\n             guard_context: vec![],\n             push_unsafe_count: 0,\n             unpushed_unsafe: safety,\n@@ -741,7 +739,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         Body::new(\n             self.cfg.basic_blocks,\n             self.source_scopes,\n-            ClearCrossCrate::Set(self.source_scope_local_data),\n             self.local_decls,\n             self.canonical_user_type_annotations,\n             self.arg_count,\n@@ -942,7 +939,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.hir.root_lint_level\n         );\n         let parent_root = tcx.maybe_lint_level_root_bounded(\n-            self.source_scope_local_data[original_source_scope].lint_root,\n+            self.source_scopes[original_source_scope]\n+                .local_data\n+                .as_ref()\n+                .assert_crate_local()\n+                .lint_root,\n             self.hir.root_lint_level,\n         );\n         if current_root != parent_root {"}, {"sha": "00a30af806a895959311e09c3d994621d797ca6f", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -436,7 +436,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // We estimate the true lint roots here to avoid creating a lot of source scopes.\n \n             let parent_root = tcx.maybe_lint_level_root_bounded(\n-                self.source_scope_local_data[source_scope].lint_root,\n+                self.source_scopes[source_scope]\n+                    .local_data\n+                    .as_ref()\n+                    .assert_crate_local()\n+                    .lint_root,\n                 self.hir.root_lint_level,\n             );\n             let current_root = tcx.maybe_lint_level_root_bounded(\n@@ -654,23 +658,22 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let parent = self.source_scope;\n         debug!(\"new_source_scope({:?}, {:?}, {:?}) - parent({:?})={:?}\",\n                span, lint_level, safety,\n-               parent, self.source_scope_local_data.get(parent));\n-        let scope = self.source_scopes.push(SourceScopeData {\n-            span,\n-            parent_scope: Some(parent),\n-        });\n+               parent, self.source_scopes.get(parent));\n         let scope_local_data = SourceScopeLocalData {\n             lint_root: if let LintLevel::Explicit(lint_root) = lint_level {\n                 lint_root\n             } else {\n-                self.source_scope_local_data[parent].lint_root\n+                self.source_scopes[parent].local_data.as_ref().assert_crate_local().lint_root\n             },\n             safety: safety.unwrap_or_else(|| {\n-                self.source_scope_local_data[parent].safety\n+                self.source_scopes[parent].local_data.as_ref().assert_crate_local().safety\n             })\n         };\n-        self.source_scope_local_data.push(scope_local_data);\n-        scope\n+        self.source_scopes.push(SourceScopeData {\n+            span,\n+            parent_scope: Some(parent),\n+            local_data: ClearCrossCrate::Set(scope_local_data),\n+        })\n     }\n \n     /// Given a span and the current source scope, make a SourceInfo."}, {"sha": "6c16c4f2219289601b9b0988e0d6a2ea732ccd1f", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -849,8 +849,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 } else {\n                     block.terminator().source_info\n                 };\n-                match body.source_scope_local_data {\n-                    mir::ClearCrossCrate::Set(ref ivs) => Some(ivs[source_info.scope].lint_root),\n+                match &body.source_scopes[source_info.scope].local_data {\n+                    mir::ClearCrossCrate::Set(data) => Some(data.lint_root),\n                     mir::ClearCrossCrate::Clear => None,\n                 }\n             });"}, {"sha": "708686fdcf9f1ab4df308cce7b4c5790ca4d2983", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -198,9 +198,6 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n \n     let mut body = new_body(\n         blocks,\n-        IndexVec::from_elem_n(\n-            SourceScopeData { span, parent_scope: None }, 1\n-        ),\n         local_decls_for_sig(&sig, span),\n         sig.inputs().len(),\n         span);\n@@ -244,15 +241,16 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n \n fn new_body<'tcx>(\n     basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n-    source_scopes: IndexVec<SourceScope, SourceScopeData>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n     arg_count: usize,\n     span: Span,\n ) -> Body<'tcx> {\n     Body::new(\n         basic_blocks,\n-        source_scopes,\n-        ClearCrossCrate::Clear,\n+        IndexVec::from_elem_n(\n+            SourceScopeData { span, parent_scope: None, local_data: ClearCrossCrate::Clear },\n+            1,\n+        ),\n         local_decls,\n         IndexVec::new(),\n         arg_count,\n@@ -380,9 +378,6 @@ impl CloneShimBuilder<'tcx> {\n     fn into_mir(self) -> Body<'tcx> {\n         new_body(\n             self.blocks,\n-            IndexVec::from_elem_n(\n-                SourceScopeData { span: self.span, parent_scope: None }, 1\n-            ),\n             self.local_decls,\n             self.sig.inputs().len(),\n             self.span,\n@@ -836,9 +831,6 @@ fn build_call_shim<'tcx>(\n \n     let mut body = new_body(\n         blocks,\n-        IndexVec::from_elem_n(\n-            SourceScopeData { span, parent_scope: None }, 1\n-        ),\n         local_decls,\n         sig.inputs().len(),\n         span,\n@@ -919,9 +911,6 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &Body<'_> {\n \n     let body = new_body(\n         IndexVec::from_elem_n(start_block, 1),\n-        IndexVec::from_elem_n(\n-            SourceScopeData { span, parent_scope: None }, 1\n-        ),\n         local_decls,\n         sig.inputs().len(),\n         span,"}, {"sha": "d12d21aee6abe24053c760343efe517d7c2eb77e", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -1,6 +1,4 @@\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_index::vec::IndexVec;\n-use rustc_data_structures::sync::Lrc;\n \n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n@@ -24,7 +22,6 @@ pub struct UnsafetyChecker<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n     const_context: bool,\n     min_const_fn: bool,\n-    source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n     violations: Vec<UnsafetyViolation>,\n     source_info: SourceInfo,\n     tcx: TyCtxt<'tcx>,\n@@ -39,7 +36,6 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         const_context: bool,\n         min_const_fn: bool,\n         body: &'a Body<'tcx>,\n-        source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n@@ -51,7 +47,6 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             body,\n             const_context,\n             min_const_fn,\n-            source_scope_local_data,\n             violations: vec![],\n             source_info: SourceInfo {\n                 span: body.span,\n@@ -219,8 +214,11 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             if context.is_borrow() {\n                 if util::is_disaligned(self.tcx, self.body, self.param_env, place) {\n                     let source_info = self.source_info;\n-                    let lint_root =\n-                        self.source_scope_local_data[source_info.scope].lint_root;\n+                    let lint_root = self.body.source_scopes[source_info.scope]\n+                        .local_data\n+                        .as_ref()\n+                        .assert_crate_local()\n+                        .lint_root;\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n                         description: Symbol::intern(\"borrow of packed field\"),\n@@ -346,7 +344,11 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn register_violations(&mut self,\n                            violations: &[UnsafetyViolation],\n                            unsafe_blocks: &[(hir::HirId, bool)]) {\n-        let safety = self.source_scope_local_data[self.source_info.scope].safety;\n+        let safety = self.body.source_scopes[self.source_info.scope]\n+            .local_data\n+            .as_ref()\n+            .assert_crate_local()\n+            .safety;\n         let within_unsafe = match safety {\n             // `unsafe` blocks are required in safe code\n             Safety::Safe => {\n@@ -516,17 +518,6 @@ fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult\n     // `mir_built` force this.\n     let body = &tcx.mir_built(def_id).borrow();\n \n-    let source_scope_local_data = match body.source_scope_local_data {\n-        ClearCrossCrate::Set(ref data) => data,\n-        ClearCrossCrate::Clear => {\n-            debug!(\"unsafety_violations: {:?} - remote, skipping\", def_id);\n-            return UnsafetyCheckResult {\n-                violations: Lrc::new([]),\n-                unsafe_blocks: Lrc::new([])\n-            }\n-        }\n-    };\n-\n     let param_env = tcx.param_env(def_id);\n \n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -536,9 +527,7 @@ fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult\n         hir::BodyOwnerKind::Const |\n         hir::BodyOwnerKind::Static(_) => (true, false),\n     };\n-    let mut checker = UnsafetyChecker::new(\n-        const_context, min_const_fn,\n-        body, source_scope_local_data, tcx, param_env);\n+    let mut checker = UnsafetyChecker::new(const_context, min_const_fn, body, tcx, param_env);\n     checker.visit_body(body);\n \n     check_unused_unsafe(tcx, def_id, &checker.used_unsafe, &mut checker.inherited_blocks);"}, {"sha": "67958af3460fc3d7e18420469255d1cbd77aa293", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 17, "deletions": 37, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -9,7 +9,7 @@ use rustc::hir::def_id::DefId;\n use rustc::mir::{\n     AggregateKind, Constant, Location, Place, PlaceBase, Body, Operand, Rvalue, Local, UnOp,\n     StatementKind, Statement, LocalKind, TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo,\n-    BinOp, SourceScope, SourceScopeLocalData, LocalDecl, BasicBlock, RETURN_PLACE,\n+    BinOp, SourceScope, SourceScopeData, LocalDecl, BasicBlock, RETURN_PLACE,\n };\n use rustc::mir::visit::{\n     Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n@@ -74,17 +74,10 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n \n         trace!(\"ConstProp starting for {:?}\", source.def_id());\n \n-        // Steal some data we need from `body`.\n-        let source_scope_local_data = std::mem::replace(\n-            &mut body.source_scope_local_data,\n-            ClearCrossCrate::Clear\n-        );\n-\n         let dummy_body =\n             &Body::new(\n                 body.basic_blocks().clone(),\n-                Default::default(),\n-                ClearCrossCrate::Clear,\n+                body.source_scopes.clone(),\n                 body.local_decls.clone(),\n                 Default::default(),\n                 body.arg_count,\n@@ -101,19 +94,11 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n         let mut optimization_finder = ConstPropagator::new(\n             body,\n             dummy_body,\n-            source_scope_local_data,\n             tcx,\n             source\n         );\n         optimization_finder.visit_body(body);\n \n-        // put back the data we stole from `mir`\n-        let source_scope_local_data = optimization_finder.release_stolen_data();\n-        std::mem::replace(\n-            &mut body.source_scope_local_data,\n-            source_scope_local_data\n-        );\n-\n         trace!(\"ConstProp done for {:?}\", source.def_id());\n     }\n }\n@@ -267,7 +252,9 @@ struct ConstPropagator<'mir, 'tcx> {\n     source: MirSource<'tcx>,\n     can_const_prop: IndexVec<Local, bool>,\n     param_env: ParamEnv<'tcx>,\n-    source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n+    // FIXME(eddyb) avoid cloning these two fields more than once,\n+    // by accessing them through `ecx` instead.\n+    source_scopes: IndexVec<SourceScope, SourceScopeData>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n     ret: Option<OpTy<'tcx, ()>>,\n }\n@@ -299,7 +286,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     fn new(\n         body: &Body<'tcx>,\n         dummy_body: &'mir Body<'tcx>,\n-        source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n         tcx: TyCtxt<'tcx>,\n         source: MirSource<'tcx>,\n     ) -> ConstPropagator<'mir, 'tcx> {\n@@ -337,17 +323,15 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             source,\n             param_env,\n             can_const_prop,\n-            source_scope_local_data,\n+            // FIXME(eddyb) avoid cloning these two fields more than once,\n+            // by accessing them through `ecx` instead.\n+            source_scopes: body.source_scopes.clone(),\n             //FIXME(wesleywiser) we can't steal this because `Visitor::super_visit_body()` needs it\n             local_decls: body.local_decls.clone(),\n             ret: ret.map(Into::into),\n         }\n     }\n \n-    fn release_stolen_data(self) -> ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>> {\n-        self.source_scope_local_data\n-    }\n-\n     fn get_const(&self, local: Local) -> Option<Const<'tcx>> {\n         if local == RETURN_PLACE {\n             // Try to read the return place as an immediate so that if it is representable as a\n@@ -377,14 +361,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         F: FnOnce(&mut Self) -> InterpResult<'tcx, T>,\n     {\n         self.ecx.tcx.span = source_info.span;\n-        let lint_root = match self.source_scope_local_data {\n-            ClearCrossCrate::Set(ref ivs) => {\n-                //FIXME(#51314): remove this check\n-                if source_info.scope.index() >= ivs.len() {\n-                    return None;\n-                }\n-                ivs[source_info.scope].lint_root\n-            },\n+        // FIXME(eddyb) move this to the `Panic(_)` error case, so that\n+        // `f(self)` is always called, and that the only difference when the\n+        // scope's `local_data` is missing, is that the lint isn't emitted.\n+        let lint_root = match &self.source_scopes[source_info.scope].local_data {\n+            ClearCrossCrate::Set(data) => data.lint_root,\n             ClearCrossCrate::Clear => return None,\n         };\n         let r = match f(self) {\n@@ -396,7 +377,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     InterpError::*\n                 };\n                 match error.kind {\n-                    Exit(_) => bug!(\"the CTFE program cannot exit\"),\n+                    MachineStop(_) => bug!(\"ConstProp does not stop\"),\n \n                     // Some error shouldn't come up because creating them causes\n                     // an allocation, which we should avoid. When that happens,\n@@ -525,19 +506,18 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     let right_size = r.layout.size;\n                     let r_bits = r.to_scalar().and_then(|r| r.to_bits(right_size));\n                     if r_bits.ok().map_or(false, |b| b >= left_bits as u128) {\n-                        let source_scope_local_data = match self.source_scope_local_data {\n-                            ClearCrossCrate::Set(ref data) => data,\n+                        let lint_root = match &self.source_scopes[source_info.scope].local_data {\n+                            ClearCrossCrate::Set(data) => data.lint_root,\n                             ClearCrossCrate::Clear => return None,\n                         };\n                         let dir = if *op == BinOp::Shr {\n                             \"right\"\n                         } else {\n                             \"left\"\n                         };\n-                        let hir_id = source_scope_local_data[source_info.scope].lint_root;\n                         self.tcx.lint_hir(\n                             ::rustc::lint::builtin::EXCEEDING_BITSHIFTS,\n-                            hir_id,\n+                            lint_root,\n                             span,\n                             &format!(\"attempt to shift {} with overflow\", dir));\n                         return None;"}, {"sha": "ebfadd0cfd3ed61064bad8cf213644b782a663b0", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -391,9 +391,14 @@ impl Inliner<'tcx> {\n                 for mut scope in callee_body.source_scopes.iter().cloned() {\n                     if scope.parent_scope.is_none() {\n                         scope.parent_scope = Some(callsite.location.scope);\n+                        // FIXME(eddyb) is this really needed?\n+                        // (also note that it's always overwritten below)\n                         scope.span = callee_body.span;\n                     }\n \n+                    // FIXME(eddyb) this doesn't seem right at all.\n+                    // The inlined source scopes should probably be annotated as\n+                    // such, but also contain all of the original information.\n                     scope.span = callsite.location.span;\n \n                     let idx = caller_body.source_scopes.push(scope);"}, {"sha": "591f3ca44009d4aa4bf004f3c1ba5d4f73b7f0d7", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -1081,7 +1081,6 @@ pub fn promote_candidates<'tcx>(\n                 // FIXME: maybe try to filter this to avoid blowing up\n                 // memory usage?\n                 body.source_scopes.clone(),\n-                body.source_scope_local_data.clone(),\n                 initial_locals,\n                 IndexVec::new(),\n                 0,"}, {"sha": "5c4ea39aecc927c345c970dd63c1442ef8383717", "filename": "src/librustc_plugin_impl/lib.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_plugin_impl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_plugin_impl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Flib.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -10,10 +10,16 @@\n \n #![feature(nll)]\n \n-#![recursion_limit=\"256\"]\n+use rustc::lint::LintStore;\n \n-pub use registry::Registry;\n-\n-pub mod registry;\n-pub mod load;\n pub mod build;\n+pub mod load;\n+\n+/// Structure used to register plugins.\n+///\n+/// A plugin registrar function takes an `&mut Registry` and should call\n+/// methods to register its plugins.\n+pub struct Registry<'a> {\n+    /// The `LintStore` allows plugins to register new lints.\n+    pub lint_store: &'a mut LintStore,\n+}"}, {"sha": "0bd91076592bfe1b59fffbf219f8f48a624ebaa7", "filename": "src/librustc_plugin_impl/load.rs", "status": "modified", "additions": 65, "deletions": 99, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_plugin_impl%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibrustc_plugin_impl%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fload.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -3,33 +3,21 @@\n use rustc::middle::cstore::MetadataLoader;\n use rustc::session::Session;\n use rustc_metadata::locator;\n-use crate::registry::Registry;\n+use crate::Registry;\n \n use std::borrow::ToOwned;\n use std::env;\n use std::mem;\n use std::path::PathBuf;\n-use syntax::ast;\n+use syntax::ast::{Crate, Ident};\n use syntax::struct_span_err;\n-use syntax::symbol::{Symbol, kw, sym};\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax::symbol::sym;\n+use syntax_pos::Span;\n \n use rustc_error_codes::*;\n \n /// Pointer to a registrar function.\n-pub type PluginRegistrarFun =\n-    fn(&mut Registry<'_>);\n-\n-pub struct PluginRegistrar {\n-    pub fun: PluginRegistrarFun,\n-    pub args: Vec<ast::NestedMetaItem>,\n-}\n-\n-struct PluginLoader<'a> {\n-    sess: &'a Session,\n-    metadata_loader: &'a dyn MetadataLoader,\n-    plugins: Vec<PluginRegistrar>,\n-}\n+type PluginRegistrarFn = fn(&mut Registry<'_>);\n \n fn call_malformed_plugin_attribute(sess: &Session, span: Span) {\n     struct_span_err!(sess, span, E0498, \"malformed `plugin` attribute\")\n@@ -40,98 +28,76 @@ fn call_malformed_plugin_attribute(sess: &Session, span: Span) {\n /// Read plugin metadata and dynamically load registrar functions.\n pub fn load_plugins(sess: &Session,\n                     metadata_loader: &dyn MetadataLoader,\n-                    krate: &ast::Crate,\n-                    addl_plugins: Option<Vec<String>>) -> Vec<PluginRegistrar> {\n-    let mut loader = PluginLoader { sess, metadata_loader, plugins: Vec::new() };\n-\n-    // do not report any error now. since crate attributes are\n-    // not touched by expansion, every use of plugin without\n-    // the feature enabled will result in an error later...\n-    if sess.features_untracked().plugin {\n-        for attr in &krate.attrs {\n-            if !attr.check_name(sym::plugin) {\n-                continue;\n-            }\n+                    krate: &Crate) -> Vec<PluginRegistrarFn> {\n+    let mut plugins = Vec::new();\n \n-            let plugins = match attr.meta_item_list() {\n-                Some(xs) => xs,\n-                None => continue,\n-            };\n-\n-            for plugin in plugins {\n-                // plugins must have a name and can't be key = value\n-                let name = plugin.name_or_empty();\n-                if name != kw::Invalid && !plugin.is_value_str() {\n-                    let args = plugin.meta_item_list().map(ToOwned::to_owned);\n-                    loader.load_plugin(plugin.span(), name, args.unwrap_or_default());\n-                } else {\n-                    call_malformed_plugin_attribute(sess, attr.span);\n-                }\n-            }\n+    for attr in &krate.attrs {\n+        if !attr.check_name(sym::plugin) {\n+            continue;\n         }\n-    }\n \n-    if let Some(plugins) = addl_plugins {\n-        for plugin in plugins {\n-            loader.load_plugin(DUMMY_SP, Symbol::intern(&plugin), vec![]);\n+        for plugin in attr.meta_item_list().unwrap_or_default() {\n+            match plugin.ident() {\n+                Some(ident) if plugin.is_word() =>\n+                    load_plugin(&mut plugins, sess, metadata_loader, ident),\n+                _ => call_malformed_plugin_attribute(sess, plugin.span()),\n+            }\n         }\n     }\n \n-    loader.plugins\n+    plugins\n }\n \n-impl<'a> PluginLoader<'a> {\n-    fn load_plugin(&mut self, span: Span, name: Symbol, args: Vec<ast::NestedMetaItem>) {\n-        let registrar = locator::find_plugin_registrar(self.sess, self.metadata_loader, span, name);\n-\n-        if let Some((lib, disambiguator)) = registrar {\n-            let symbol = self.sess.generate_plugin_registrar_symbol(disambiguator);\n-            let fun = self.dylink_registrar(span, lib, symbol);\n-            self.plugins.push(PluginRegistrar {\n-                fun,\n-                args,\n-            });\n-        }\n+fn load_plugin(plugins: &mut Vec<PluginRegistrarFn>,\n+               sess: &Session,\n+               metadata_loader: &dyn MetadataLoader,\n+               ident: Ident) {\n+    let registrar = locator::find_plugin_registrar(sess, metadata_loader, ident.span, ident.name);\n+\n+    if let Some((lib, disambiguator)) = registrar {\n+        let symbol = sess.generate_plugin_registrar_symbol(disambiguator);\n+        let fun = dylink_registrar(sess, ident.span, lib, symbol);\n+        plugins.push(fun);\n     }\n+}\n \n-    // Dynamically link a registrar function into the compiler process.\n-    fn dylink_registrar(&mut self,\n-                        span: Span,\n-                        path: PathBuf,\n-                        symbol: String) -> PluginRegistrarFun {\n-        use rustc_metadata::dynamic_lib::DynamicLibrary;\n-\n-        // Make sure the path contains a / or the linker will search for it.\n-        let path = env::current_dir().unwrap().join(&path);\n-\n-        let lib = match DynamicLibrary::open(Some(&path)) {\n-            Ok(lib) => lib,\n-            // this is fatal: there are almost certainly macros we need\n-            // inside this crate, so continue would spew \"macro undefined\"\n-            // errors\n-            Err(err) => {\n-                self.sess.span_fatal(span, &err)\n-            }\n-        };\n-\n-        unsafe {\n-            let registrar =\n-                match lib.symbol(&symbol) {\n-                    Ok(registrar) => {\n-                        mem::transmute::<*mut u8,PluginRegistrarFun>(registrar)\n-                    }\n-                    // again fatal if we can't register macros\n-                    Err(err) => {\n-                        self.sess.span_fatal(span, &err)\n-                    }\n-                };\n-\n-            // Intentionally leak the dynamic library. We can't ever unload it\n-            // since the library can make things that will live arbitrarily long\n-            // (e.g., an @-box cycle or a thread).\n-            mem::forget(lib);\n-\n-            registrar\n+// Dynamically link a registrar function into the compiler process.\n+fn dylink_registrar(sess: &Session,\n+                    span: Span,\n+                    path: PathBuf,\n+                    symbol: String) -> PluginRegistrarFn {\n+    use rustc_metadata::dynamic_lib::DynamicLibrary;\n+\n+    // Make sure the path contains a / or the linker will search for it.\n+    let path = env::current_dir().unwrap().join(&path);\n+\n+    let lib = match DynamicLibrary::open(Some(&path)) {\n+        Ok(lib) => lib,\n+        // this is fatal: there are almost certainly macros we need\n+        // inside this crate, so continue would spew \"macro undefined\"\n+        // errors\n+        Err(err) => {\n+            sess.span_fatal(span, &err)\n         }\n+    };\n+\n+    unsafe {\n+        let registrar =\n+            match lib.symbol(&symbol) {\n+                Ok(registrar) => {\n+                    mem::transmute::<*mut u8, PluginRegistrarFn>(registrar)\n+                }\n+                // again fatal if we can't register macros\n+                Err(err) => {\n+                    sess.span_fatal(span, &err)\n+                }\n+            };\n+\n+        // Intentionally leak the dynamic library. We can't ever unload it\n+        // since the library can make things that will live arbitrarily long\n+        // (e.g., an @-box cycle or a thread).\n+        mem::forget(lib);\n+\n+        registrar\n     }\n }"}, {"sha": "bc684d59e5a99d375c844c5e401847f1b4065cea", "filename": "src/librustc_plugin_impl/registry.rs", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Flibrustc_plugin_impl%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Flibrustc_plugin_impl%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fregistry.rs?ref=4007d4ef26eab44bdabc2b7574d032152264d3ad", "patch": "@@ -1,70 +0,0 @@\n-//! Used by plugin crates to tell `rustc` about the plugins they provide.\n-\n-use rustc::lint::LintStore;\n-use rustc::session::Session;\n-use syntax::ast;\n-use syntax_pos::Span;\n-\n-use std::borrow::ToOwned;\n-\n-/// Structure used to register plugins.\n-///\n-/// A plugin registrar function takes an `&mut Registry` and should call\n-/// methods to register its plugins.\n-///\n-/// This struct has public fields and other methods for use by `rustc`\n-/// itself. They are not documented here, and plugin authors should\n-/// not use them.\n-pub struct Registry<'a> {\n-    /// Compiler session. Useful if you want to emit diagnostic messages\n-    /// from the plugin registrar.\n-    pub sess: &'a Session,\n-\n-    /// The `LintStore` allows plugins to register new lints.\n-    pub lint_store: &'a mut LintStore,\n-\n-    #[doc(hidden)]\n-    pub args_hidden: Option<Vec<ast::NestedMetaItem>>,\n-\n-    #[doc(hidden)]\n-    pub krate_span: Span,\n-\n-    #[doc(hidden)]\n-    pub llvm_passes: Vec<String>,\n-}\n-\n-impl<'a> Registry<'a> {\n-    #[doc(hidden)]\n-    pub fn new(sess: &'a Session, lint_store: &'a mut LintStore, krate_span: Span) -> Registry<'a> {\n-        Registry {\n-            sess,\n-            lint_store,\n-            args_hidden: None,\n-            krate_span,\n-            llvm_passes: vec![],\n-        }\n-    }\n-\n-    /// Gets the plugin's arguments, if any.\n-    ///\n-    /// These are specified inside the `plugin` crate attribute as\n-    ///\n-    /// ```no_run\n-    /// #![plugin(my_plugin_name(... args ...))]\n-    /// ```\n-    ///\n-    /// Returns empty slice in case the plugin was loaded\n-    /// with `--extra-plugins`\n-    pub fn args(&self) -> &[ast::NestedMetaItem] {\n-        self.args_hidden.as_ref().map(|v| &v[..]).unwrap_or(&[])\n-    }\n-\n-    /// Register an LLVM pass.\n-    ///\n-    /// Registration with LLVM itself is handled through static C++ objects with\n-    /// constructors. This method simply adds a name to the list of passes to\n-    /// execute.\n-    pub fn register_llvm_pass(&mut self, name: &str) {\n-        self.llvm_passes.push(name.to_owned());\n-    }\n-}"}, {"sha": "78a3fd05c730a729d102efb661a10bf1a565ff43", "filename": "src/libstd/sys/unix/ext/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -15,11 +15,13 @@\n //! use std::fs::File;\n //! use std::os::unix::prelude::*;\n //!\n-//! fn main() {\n-//!     let f = File::create(\"foo.txt\").unwrap();\n+//! fn main() -> std::io::Result<()> {\n+//!     let f = File::create(\"foo.txt\")?;\n //!     let fd = f.as_raw_fd();\n //!\n //!     // use fd with native unix bindings\n+//!\n+//!     Ok(())\n //! }\n //! ```\n "}, {"sha": "5177cce628c96f2d44fddb221ee09b1ba3d2dc58", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 280, "deletions": 154, "changes": 434, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -142,19 +142,25 @@ impl SocketAddr {\n     /// ```no_run\n     /// use std::os::unix::net::UnixListener;\n     ///\n-    /// let socket = UnixListener::bind(\"/tmp/sock\").unwrap();\n-    /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n-    /// assert_eq!(addr.is_unnamed(), false);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixListener::bind(\"/tmp/sock\")?;\n+    ///     let addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    ///     assert_eq!(addr.is_unnamed(), false);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     ///\n     /// An unnamed address:\n     ///\n     /// ```\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let socket = UnixDatagram::unbound().unwrap();\n-    /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n-    /// assert_eq!(addr.is_unnamed(), true);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixDatagram::unbound()?;\n+    ///     let addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    ///     assert_eq!(addr.is_unnamed(), true);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn is_unnamed(&self) -> bool {\n@@ -175,19 +181,25 @@ impl SocketAddr {\n     /// use std::os::unix::net::UnixListener;\n     /// use std::path::Path;\n     ///\n-    /// let socket = UnixListener::bind(\"/tmp/sock\").unwrap();\n-    /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n-    /// assert_eq!(addr.as_pathname(), Some(Path::new(\"/tmp/sock\")));\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixListener::bind(\"/tmp/sock\")?;\n+    ///     let addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    ///     assert_eq!(addr.as_pathname(), Some(Path::new(\"/tmp/sock\")));\n+    ///     Ok(())\n+    /// }\n     /// ```\n     ///\n     /// Without a pathname:\n     ///\n     /// ```\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let socket = UnixDatagram::unbound().unwrap();\n-    /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n-    /// assert_eq!(addr.as_pathname(), None);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixDatagram::unbound()?;\n+    ///     let addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    ///     assert_eq!(addr.as_pathname(), None);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn as_pathname(&self) -> Option<&Path> {\n@@ -247,11 +259,14 @@ impl<'a> fmt::Display for AsciiEscaped<'a> {\n /// use std::os::unix::net::UnixStream;\n /// use std::io::prelude::*;\n ///\n-/// let mut stream = UnixStream::connect(\"/path/to/my/socket\").unwrap();\n-/// stream.write_all(b\"hello world\").unwrap();\n-/// let mut response = String::new();\n-/// stream.read_to_string(&mut response).unwrap();\n-/// println!(\"{}\", response);\n+/// fn main() -> std::io::Result<()> {\n+///     let mut stream = UnixStream::connect(\"/path/to/my/socket\")?;\n+///     stream.write_all(b\"hello world\")?;\n+///     let mut response = String::new();\n+///     stream.read_to_string(&mut response)?;\n+///     println!(\"{}\", response);\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n pub struct UnixStream(Socket);\n@@ -336,8 +351,11 @@ impl UnixStream {\n     /// ```no_run\n     /// use std::os::unix::net::UnixStream;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// let sock_copy = socket.try_clone().expect(\"Couldn't clone socket\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     let sock_copy = socket.try_clone().expect(\"Couldn't clone socket\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn try_clone(&self) -> io::Result<UnixStream> {\n@@ -351,8 +369,11 @@ impl UnixStream {\n     /// ```no_run\n     /// use std::os::unix::net::UnixStream;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     let addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn local_addr(&self) -> io::Result<SocketAddr> {\n@@ -366,8 +387,11 @@ impl UnixStream {\n     /// ```no_run\n     /// use std::os::unix::net::UnixStream;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// let addr = socket.peer_addr().expect(\"Couldn't get peer address\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     let addr = socket.peer_addr().expect(\"Couldn't get peer address\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n@@ -391,8 +415,11 @@ impl UnixStream {\n     /// use std::os::unix::net::UnixStream;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// socket.set_read_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set read timeout\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     socket.set_read_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set read timeout\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     ///\n     /// An [`Err`] is returned if the zero [`Duration`] is passed to this\n@@ -403,10 +430,13 @@ impl UnixStream {\n     /// use std::os::unix::net::UnixStream;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n-    /// let err = result.unwrap_err();\n-    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n+    ///     let err = result.unwrap_err();\n+    ///     assert_eq!(err.kind(), io::ErrorKind::InvalidInput);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_read_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {\n@@ -430,8 +460,12 @@ impl UnixStream {\n     /// use std::os::unix::net::UnixStream;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// socket.set_write_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set write timeout\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     socket.set_write_timeout(Some(Duration::new(1, 0)))\n+    ///         .expect(\"Couldn't set write timeout\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     ///\n     /// An [`Err`] is returned if the zero [`Duration`] is passed to this\n@@ -442,10 +476,13 @@ impl UnixStream {\n     /// use std::net::UdpSocket;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").unwrap();\n-    /// let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n-    /// let err = result.unwrap_err();\n-    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UdpSocket::bind(\"127.0.0.1:34254\")?;\n+    ///     let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n+    ///     let err = result.unwrap_err();\n+    ///     assert_eq!(err.kind(), io::ErrorKind::InvalidInput);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_write_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {\n@@ -460,9 +497,12 @@ impl UnixStream {\n     /// use std::os::unix::net::UnixStream;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// socket.set_read_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set read timeout\");\n-    /// assert_eq!(socket.read_timeout().unwrap(), Some(Duration::new(1, 0)));\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     socket.set_read_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set read timeout\");\n+    ///     assert_eq!(socket.read_timeout()?, Some(Duration::new(1, 0)));\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n@@ -477,9 +517,13 @@ impl UnixStream {\n     /// use std::os::unix::net::UnixStream;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// socket.set_write_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set write timeout\");\n-    /// assert_eq!(socket.write_timeout().unwrap(), Some(Duration::new(1, 0)));\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     socket.set_write_timeout(Some(Duration::new(1, 0)))\n+    ///         .expect(\"Couldn't set write timeout\");\n+    ///     assert_eq!(socket.write_timeout()?, Some(Duration::new(1, 0)));\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n@@ -493,8 +537,11 @@ impl UnixStream {\n     /// ```no_run\n     /// use std::os::unix::net::UnixStream;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// socket.set_nonblocking(true).expect(\"Couldn't set nonblocking\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     socket.set_nonblocking(true).expect(\"Couldn't set nonblocking\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n@@ -508,9 +555,12 @@ impl UnixStream {\n     /// ```no_run\n     /// use std::os::unix::net::UnixStream;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// if let Ok(Some(err)) = socket.take_error() {\n-    ///     println!(\"Got error: {:?}\", err);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     if let Ok(Some(err)) = socket.take_error() {\n+    ///         println!(\"Got error: {:?}\", err);\n+    ///     }\n+    ///     Ok(())\n     /// }\n     /// ```\n     ///\n@@ -535,8 +585,11 @@ impl UnixStream {\n     /// use std::os::unix::net::UnixStream;\n     /// use std::net::Shutdown;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// socket.shutdown(Shutdown::Both).expect(\"shutdown function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     socket.shutdown(Shutdown::Both).expect(\"shutdown function failed\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {\n@@ -697,20 +750,23 @@ impl IntoRawFd for net::UdpSocket {\n ///     // ...\n /// }\n ///\n-/// let listener = UnixListener::bind(\"/path/to/the/socket\").unwrap();\n+/// fn main() -> std::io::Result<()> {\n+///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n ///\n-/// // accept connections and process them, spawning a new thread for each one\n-/// for stream in listener.incoming() {\n-///     match stream {\n-///         Ok(stream) => {\n-///             /* connection succeeded */\n-///             thread::spawn(|| handle_client(stream));\n-///         }\n-///         Err(err) => {\n-///             /* connection failed */\n-///             break;\n+///     // accept connections and process them, spawning a new thread for each one\n+///     for stream in listener.incoming() {\n+///         match stream {\n+///             Ok(stream) => {\n+///                 /* connection succeeded */\n+///                 thread::spawn(|| handle_client(stream));\n+///             }\n+///             Err(err) => {\n+///                 /* connection failed */\n+///                 break;\n+///             }\n ///         }\n ///     }\n+///     Ok(())\n /// }\n /// ```\n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -773,11 +829,14 @@ impl UnixListener {\n     /// ```no_run\n     /// use std::os::unix::net::UnixListener;\n     ///\n-    /// let listener = UnixListener::bind(\"/path/to/the/socket\").unwrap();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n     ///\n-    /// match listener.accept() {\n-    ///     Ok((socket, addr)) => println!(\"Got a client: {:?}\", addr),\n-    ///     Err(e) => println!(\"accept function failed: {:?}\", e),\n+    ///     match listener.accept() {\n+    ///         Ok((socket, addr)) => println!(\"Got a client: {:?}\", addr),\n+    ///         Err(e) => println!(\"accept function failed: {:?}\", e),\n+    ///     }\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -800,9 +859,11 @@ impl UnixListener {\n     /// ```no_run\n     /// use std::os::unix::net::UnixListener;\n     ///\n-    /// let listener = UnixListener::bind(\"/path/to/the/socket\").unwrap();\n-    ///\n-    /// let listener_copy = listener.try_clone().expect(\"try_clone failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n+    ///     let listener_copy = listener.try_clone().expect(\"try_clone failed\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn try_clone(&self) -> io::Result<UnixListener> {\n@@ -816,9 +877,11 @@ impl UnixListener {\n     /// ```no_run\n     /// use std::os::unix::net::UnixListener;\n     ///\n-    /// let listener = UnixListener::bind(\"/path/to/the/socket\").unwrap();\n-    ///\n-    /// let addr = listener.local_addr().expect(\"Couldn't get local address\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n+    ///     let addr = listener.local_addr().expect(\"Couldn't get local address\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn local_addr(&self) -> io::Result<SocketAddr> {\n@@ -832,9 +895,11 @@ impl UnixListener {\n     /// ```no_run\n     /// use std::os::unix::net::UnixListener;\n     ///\n-    /// let listener = UnixListener::bind(\"/path/to/the/socket\").unwrap();\n-    ///\n-    /// listener.set_nonblocking(true).expect(\"Couldn't set non blocking\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n+    ///     listener.set_nonblocking(true).expect(\"Couldn't set non blocking\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n@@ -848,10 +913,13 @@ impl UnixListener {\n     /// ```no_run\n     /// use std::os::unix::net::UnixListener;\n     ///\n-    /// let listener = UnixListener::bind(\"/tmp/sock\").unwrap();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let listener = UnixListener::bind(\"/tmp/sock\")?;\n     ///\n-    /// if let Ok(Some(err)) = listener.take_error() {\n-    ///     println!(\"Got error: {:?}\", err);\n+    ///     if let Ok(Some(err)) = listener.take_error() {\n+    ///         println!(\"Got error: {:?}\", err);\n+    ///     }\n+    ///     Ok(())\n     /// }\n     /// ```\n     ///\n@@ -880,17 +948,20 @@ impl UnixListener {\n     ///     // ...\n     /// }\n     ///\n-    /// let listener = UnixListener::bind(\"/path/to/the/socket\").unwrap();\n-    ///\n-    /// for stream in listener.incoming() {\n-    ///     match stream {\n-    ///         Ok(stream) => {\n-    ///             thread::spawn(|| handle_client(stream));\n-    ///         }\n-    ///         Err(err) => {\n-    ///             break;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n+    ///\n+    ///     for stream in listener.incoming() {\n+    ///         match stream {\n+    ///             Ok(stream) => {\n+    ///                 thread::spawn(|| handle_client(stream));\n+    ///             }\n+    ///             Err(err) => {\n+    ///                 break;\n+    ///             }\n     ///         }\n     ///     }\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -947,17 +1018,20 @@ impl<'a> IntoIterator for &'a UnixListener {\n ///     // ...\n /// }\n ///\n-/// let listener = UnixListener::bind(\"/path/to/the/socket\").unwrap();\n+/// fn main() -> std::io::Result<()> {\n+///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n ///\n-/// for stream in listener.incoming() {\n-///     match stream {\n-///         Ok(stream) => {\n-///             thread::spawn(|| handle_client(stream));\n-///         }\n-///         Err(err) => {\n-///             break;\n+///     for stream in listener.incoming() {\n+///         match stream {\n+///             Ok(stream) => {\n+///                 thread::spawn(|| handle_client(stream));\n+///             }\n+///             Err(err) => {\n+///                 break;\n+///             }\n ///         }\n ///     }\n+///     Ok(())\n /// }\n /// ```\n #[derive(Debug)]\n@@ -986,11 +1060,14 @@ impl<'a> Iterator for Incoming<'a> {\n /// ```no_run\n /// use std::os::unix::net::UnixDatagram;\n ///\n-/// let socket = UnixDatagram::bind(\"/path/to/my/socket\").unwrap();\n-/// socket.send_to(b\"hello world\", \"/path/to/other/socket\").unwrap();\n-/// let mut buf = [0; 100];\n-/// let (count, address) = socket.recv_from(&mut buf).unwrap();\n-/// println!(\"socket {:?} sent {:?}\", address, &buf[..count]);\n+/// fn main() -> std::io::Result<()> {\n+///     let socket = UnixDatagram::bind(\"/path/to/my/socket\")?;\n+///     socket.send_to(b\"hello world\", \"/path/to/other/socket\")?;\n+///     let mut buf = [0; 100];\n+///     let (count, address) = socket.recv_from(&mut buf)?;\n+///     println!(\"socket {:?} sent {:?}\", address, &buf[..count]);\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n pub struct UnixDatagram(Socket);\n@@ -1099,14 +1176,17 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// match sock.connect(\"/path/to/the/socket\") {\n-    ///     Ok(sock) => sock,\n-    ///     Err(e) => {\n-    ///         println!(\"Couldn't connect: {:?}\", e);\n-    ///         return\n-    ///     }\n-    /// };\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     match sock.connect(\"/path/to/the/socket\") {\n+    ///         Ok(sock) => sock,\n+    ///         Err(e) => {\n+    ///             println!(\"Couldn't connect: {:?}\", e);\n+    ///             return Err(e)\n+    ///         }\n+    ///     };\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn connect<P: AsRef<Path>>(&self, path: P) -> io::Result<()> {\n@@ -1133,9 +1213,11 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::bind(\"/path/to/the/socket\").unwrap();\n-    ///\n-    /// let sock_copy = sock.try_clone().expect(\"try_clone failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::bind(\"/path/to/the/socket\")?;\n+    ///     let sock_copy = sock.try_clone().expect(\"try_clone failed\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn try_clone(&self) -> io::Result<UnixDatagram> {\n@@ -1149,9 +1231,11 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::bind(\"/path/to/the/socket\").unwrap();\n-    ///\n-    /// let addr = sock.local_addr().expect(\"Couldn't get local address\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::bind(\"/path/to/the/socket\")?;\n+    ///     let addr = sock.local_addr().expect(\"Couldn't get local address\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn local_addr(&self) -> io::Result<SocketAddr> {\n@@ -1169,10 +1253,13 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.connect(\"/path/to/the/socket\").unwrap();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.connect(\"/path/to/the/socket\")?;\n     ///\n-    /// let addr = sock.peer_addr().expect(\"Couldn't get peer address\");\n+    ///     let addr = sock.peer_addr().expect(\"Couldn't get peer address\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n@@ -1189,11 +1276,12 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// let mut buf = vec![0; 10];\n-    /// match sock.recv_from(buf.as_mut_slice()) {\n-    ///     Ok((size, sender)) => println!(\"received {} bytes from {:?}\", size, sender),\n-    ///     Err(e) => println!(\"recv_from function failed: {:?}\", e),\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     let mut buf = vec![0; 10];\n+    ///     let (size, sender) = sock.recv_from(buf.as_mut_slice())?;\n+    ///     println!(\"received {} bytes from {:?}\", size, sender);\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1229,9 +1317,12 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::bind(\"/path/to/the/socket\").unwrap();\n-    /// let mut buf = vec![0; 10];\n-    /// sock.recv(buf.as_mut_slice()).expect(\"recv function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::bind(\"/path/to/the/socket\")?;\n+    ///     let mut buf = vec![0; 10];\n+    ///     sock.recv(buf.as_mut_slice()).expect(\"recv function failed\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn recv(&self, buf: &mut [u8]) -> io::Result<usize> {\n@@ -1247,8 +1338,11 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.send_to(b\"omelette au fromage\", \"/some/sock\").expect(\"send_to function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.send_to(b\"omelette au fromage\", \"/some/sock\").expect(\"send_to function failed\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn send_to<P: AsRef<Path>>(&self, buf: &[u8], path: P) -> io::Result<usize> {\n@@ -1280,9 +1374,12 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.connect(\"/some/sock\").expect(\"Couldn't connect\");\n-    /// sock.send(b\"omelette au fromage\").expect(\"send_to function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.connect(\"/some/sock\").expect(\"Couldn't connect\");\n+    ///     sock.send(b\"omelette au fromage\").expect(\"send_to function failed\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn send(&self, buf: &[u8]) -> io::Result<usize> {\n@@ -1307,8 +1404,12 @@ impl UnixDatagram {\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::time::Duration;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.set_read_timeout(Some(Duration::new(1, 0))).expect(\"set_read_timeout function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.set_read_timeout(Some(Duration::new(1, 0)))\n+    ///         .expect(\"set_read_timeout function failed\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     ///\n     /// An [`Err`] is returned if the zero [`Duration`] is passed to this\n@@ -1319,10 +1420,13 @@ impl UnixDatagram {\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UnixDatagram::unbound().unwrap();\n-    /// let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n-    /// let err = result.unwrap_err();\n-    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixDatagram::unbound()?;\n+    ///     let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n+    ///     let err = result.unwrap_err();\n+    ///     assert_eq!(err.kind(), io::ErrorKind::InvalidInput);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_read_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {\n@@ -1346,9 +1450,12 @@ impl UnixDatagram {\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::time::Duration;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.set_write_timeout(Some(Duration::new(1, 0)))\n-    ///     .expect(\"set_write_timeout function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.set_write_timeout(Some(Duration::new(1, 0)))\n+    ///         .expect(\"set_write_timeout function failed\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     ///\n     /// An [`Err`] is returned if the zero [`Duration`] is passed to this\n@@ -1359,10 +1466,13 @@ impl UnixDatagram {\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UnixDatagram::unbound().unwrap();\n-    /// let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n-    /// let err = result.unwrap_err();\n-    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixDatagram::unbound()?;\n+    ///     let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n+    ///     let err = result.unwrap_err();\n+    ///     assert_eq!(err.kind(), io::ErrorKind::InvalidInput);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_write_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {\n@@ -1377,9 +1487,13 @@ impl UnixDatagram {\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::time::Duration;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.set_read_timeout(Some(Duration::new(1, 0))).expect(\"set_read_timeout function failed\");\n-    /// assert_eq!(sock.read_timeout().unwrap(), Some(Duration::new(1, 0)));\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.set_read_timeout(Some(Duration::new(1, 0)))\n+    ///         .expect(\"set_read_timeout function failed\");\n+    ///     assert_eq!(sock.read_timeout()?, Some(Duration::new(1, 0)));\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n@@ -1394,10 +1508,13 @@ impl UnixDatagram {\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::time::Duration;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.set_write_timeout(Some(Duration::new(1, 0)))\n-    ///     .expect(\"set_write_timeout function failed\");\n-    /// assert_eq!(sock.write_timeout().unwrap(), Some(Duration::new(1, 0)));\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.set_write_timeout(Some(Duration::new(1, 0)))\n+    ///         .expect(\"set_write_timeout function failed\");\n+    ///     assert_eq!(sock.write_timeout()?, Some(Duration::new(1, 0)));\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n@@ -1411,8 +1528,11 @@ impl UnixDatagram {\n     /// ```\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.set_nonblocking(true).expect(\"set_nonblocking function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.set_nonblocking(true).expect(\"set_nonblocking function failed\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n@@ -1426,9 +1546,12 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// if let Ok(Some(err)) = sock.take_error() {\n-    ///     println!(\"Got error: {:?}\", err);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     if let Ok(Some(err)) = sock.take_error() {\n+    ///         println!(\"Got error: {:?}\", err);\n+    ///     }\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1448,8 +1571,11 @@ impl UnixDatagram {\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::net::Shutdown;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.shutdown(Shutdown::Both).expect(\"shutdown function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.shutdown(Shutdown::Both).expect(\"shutdown function failed\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {"}, {"sha": "768f4953228095acd9a5c786afb44c0dda82e079", "filename": "src/test/mir-opt/inline-closure-borrows-arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -21,8 +21,8 @@ fn foo<T: Copy>(_t: T, q: &i32) -> i32 {\n //     debug _t => _1;\n //     debug q => _2;\n //     let mut _0: i32;\n-//     let _3: [closure@HirId { owner: DefIndex(4), local_id: 31 }];\n-//     let mut _4: &[closure@HirId { owner: DefIndex(4), local_id: 31 }];\n+//     let _3: [closure@foo<T>::{{closure}}#0];\n+//     let mut _4: &[closure@foo<T>::{{closure}}#0];\n //     let mut _5: (&i32, &i32);\n //     let mut _6: &i32;\n //     let mut _7: &i32;\n@@ -40,7 +40,7 @@ fn foo<T: Copy>(_t: T, q: &i32) -> i32 {\n //     }\n //     bb0: {\n //         ...\n-//         _3 = [closure@HirId { owner: DefIndex(4), local_id: 31 }];\n+//         _3 = [closure@foo::<T>::{{closure}}#0];\n //         ...\n //         _4 = &_3;\n //         ..."}, {"sha": "e000a418d90c79ae05e2d392169fb15c5f340884", "filename": "src/test/mir-opt/inline-closure-captures.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fmir-opt%2Finline-closure-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fmir-opt%2Finline-closure-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure-captures.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -17,10 +17,10 @@ fn foo<T: Copy>(t: T, q: i32) -> (i32, T) {\n //     debug t => _1;\n //     debug q => _2;\n //     let mut _0: (i32, T);\n-//     let _3: [closure@HirId { owner: DefIndex(4), local_id: 15 } q:&i32, t:&T];\n+//     let _3: [closure@foo<T>::{{closure}}#0 q:&i32, t:&T];\n //     let mut _4: &i32;\n //     let mut _5: &T;\n-//     let mut _6: &[closure@HirId { owner: DefIndex(4), local_id: 15 } q:&i32, t:&T];\n+//     let mut _6: &[closure@foo<T>::{{closure}}#0 q:&i32, t:&T];\n //     let mut _7: (i32,);\n //     let mut _8: i32;\n //     let mut _11: i32;\n@@ -39,7 +39,7 @@ fn foo<T: Copy>(t: T, q: i32) -> (i32, T) {\n //         _4 = &_2;\n //         ...\n //         _5 = &_1;\n-//         _3 = [closure@HirId { owner: DefIndex(4), local_id: 15 }] { q: move _4, t: move _5 };\n+//         _3 = [closure@foo::<T>::{{closure}}#0] { q: move _4, t: move _5 };\n //         ...\n //         _6 = &_3;\n //         ..."}, {"sha": "bd36e77818edce1d72489068724e1f16f2e3305c", "filename": "src/test/mir-opt/inline-closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -17,8 +17,8 @@ fn foo<T: Copy>(_t: T, q: i32) -> i32 {\n //     debug _t => _1;\n //     debug q => _2;\n //     let mut _0: i32;\n-//     let _3: [closure@HirId { owner: DefIndex(4), local_id: 15 }];\n-//     let mut _4: &[closure@HirId { owner: DefIndex(4), local_id: 15 }];\n+//     let _3: [closure@foo<T>::{{closure}}#0];\n+//     let mut _4: &[closure@foo<T>::{{closure}}#0];\n //     let mut _5: (i32, i32);\n //     let mut _6: i32;\n //     let mut _7: i32;\n@@ -33,7 +33,7 @@ fn foo<T: Copy>(_t: T, q: i32) -> i32 {\n //     }\n //     bb0: {\n //         ...\n-//         _3 = [closure@HirId { owner: DefIndex(4), local_id: 15 }];\n+//         _3 = [closure@foo::<T>::{{closure}}#0];\n //         ...\n //         _4 = &_3;\n //         ..."}, {"sha": "32995448a21e95209683188b5a8330b006605776", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -100,7 +100,7 @@ fn main() {\n // }\n // END rustc.main.EraseRegions.after.mir\n // START rustc.main-{{closure}}.EraseRegions.after.mir\n-// fn main::{{closure}}#0(_1: &[closure@HirId { owner: DefIndex(13), local_id: 72 }], _2: &i32) -> &i32 {\n+// fn main::{{closure}}#0(_1: &[closure@main::{{closure}}#0], _2: &i32) -> &i32 {\n //     ...\n //     bb0: {\n //         Retag([fn entry] _1);"}, {"sha": "2ff1c2e363d50c86ddeb3c3cdf4f529dea716c82", "filename": "src/test/ui-fulldeps/auxiliary/llvm-pass-plugin.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fllvm-pass-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fllvm-pass-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fllvm-pass-plugin.rs?ref=4007d4ef26eab44bdabc2b7574d032152264d3ad", "patch": "@@ -1,19 +0,0 @@\n-// force-host\n-\n-#![feature(plugin_registrar)]\n-#![feature(rustc_private)]\n-\n-extern crate rustc;\n-extern crate rustc_driver;\n-\n-use rustc_driver::plugin::Registry;\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    // This pass is built in to LLVM.\n-    //\n-    // Normally, we would name a pass that was registered through\n-    // C++ static object constructors in the same .so file as the\n-    // plugin registrar.\n-    reg.register_llvm_pass(\"gvn\");\n-}"}, {"sha": "85eaf53364315580d6005d214943b254435c0947", "filename": "src/test/ui-fulldeps/feature-gate-plugin.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -1,6 +1,7 @@\n-// Test that `#![plugin(...)]` attribute is gated by `plugin` feature gate\n+// aux-build:empty-plugin.rs\n+// ignore-stage1\n \n-#![plugin(foo)]\n+#![plugin(empty_plugin)]\n //~^ ERROR compiler plugins are deprecated\n //~| WARN use of deprecated attribute `plugin`: compiler plugins are deprecated\n ", "previous_filename": "src/test/ui/feature-gates/feature-gate-plugin.rs"}, {"sha": "c922325c341ea674905db7758cf03c573fba48ab", "filename": "src/test/ui-fulldeps/feature-gate-plugin.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -1,17 +1,17 @@\n error[E0658]: compiler plugins are deprecated\n-  --> $DIR/feature-gate-plugin.rs:3:1\n+  --> $DIR/feature-gate-plugin.rs:4:1\n    |\n-LL | #![plugin(foo)]\n-   | ^^^^^^^^^^^^^^^\n+LL | #![plugin(empty_plugin)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29597\n    = help: add `#![feature(plugin)]` to the crate attributes to enable\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/feature-gate-plugin.rs:3:1\n+  --> $DIR/feature-gate-plugin.rs:4:1\n    |\n-LL | #![plugin(foo)]\n-   | ^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+LL | #![plugin(empty_plugin)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n ", "previous_filename": "src/test/ui/feature-gates/feature-gate-plugin.stderr"}, {"sha": "0bd95dfbd14a97420b0a78f9c50f7c7775b4a14c", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-load.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -1,9 +1,9 @@\n-// run-pass\n+// check-pass\n // aux-build:lint-plugin-test.rs\n // ignore-stage1\n-// compile-flags: -Z extra-plugins=lint_plugin_test\n+// compile-flags: -Z crate-attr=plugin(lint_plugin_test)\n \n-#![allow(dead_code)]\n+#![feature(plugin)]\n \n fn lintme() { } //~ WARNING item is named 'lintme'\n "}, {"sha": "1263a0efe624fe646846a79e1b7734f449331d1e", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-load.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -1,3 +1,11 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n+  --> <crate attribute>:1:1\n+   |\n+LL | plugin(lint_plugin_test)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n warning: item is named 'lintme'\n   --> $DIR/lint-plugin-cmdline-load.rs:8:1\n    |"}, {"sha": "fa5cbc1e808300b929c3f1ef90a3016be93ad839", "filename": "src/test/ui-fulldeps/llvm-pass-plugin.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.rs?ref=4007d4ef26eab44bdabc2b7574d032152264d3ad", "patch": "@@ -1,8 +0,0 @@\n-// run-pass\n-// aux-build:llvm-pass-plugin.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(llvm_pass_plugin)] //~ WARNING compiler plugins are deprecated\n-\n-pub fn main() { }"}, {"sha": "61b53bb2b7cdfc0645349f17b1094510a4c6db2d", "filename": "src/test/ui-fulldeps/llvm-pass-plugin.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.stderr?ref=4007d4ef26eab44bdabc2b7574d032152264d3ad", "patch": "@@ -1,8 +0,0 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/llvm-pass-plugin.rs:6:1\n-   |\n-LL | #![plugin(llvm_pass_plugin)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-"}, {"sha": "f21617be5d26f81a11834b78f7071cb533a93fc4", "filename": "src/test/ui-fulldeps/macro-crate-multi-decorator.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-multi-decorator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-multi-decorator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-multi-decorator.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -1,9 +1,4 @@\n-// run-pass\n-\n-#![allow(plugin_as_library)]\n-#![allow(dead_code)]\n-#![allow(unused_variables)]\n-#![allow(unused_imports)]\n+// check-pass\n // aux-build:macro-crate-test.rs\n // ignore-stage1\n "}, {"sha": "1865819053ef624a1b97fdec9102d48c8d7bbfde", "filename": "src/test/ui-fulldeps/plugin-args-1.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.rs?ref=4007d4ef26eab44bdabc2b7574d032152264d3ad", "patch": "@@ -1,8 +0,0 @@\n-// check-pass\n-// aux-build:empty-plugin.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(empty_plugin)] //~ WARNING compiler plugins are deprecated\n-\n-fn main() {}"}, {"sha": "4e82961acc218c3551d474c5e0c2bd7a5d68accc", "filename": "src/test/ui-fulldeps/plugin-args-1.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.stderr?ref=4007d4ef26eab44bdabc2b7574d032152264d3ad", "patch": "@@ -1,8 +0,0 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/plugin-args-1.rs:6:1\n-   |\n-LL | #![plugin(empty_plugin)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-"}, {"sha": "c4bd1916b854255aa55dd6318a50eeb57b017325", "filename": "src/test/ui-fulldeps/plugin-args-2.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.rs?ref=4007d4ef26eab44bdabc2b7574d032152264d3ad", "patch": "@@ -1,8 +0,0 @@\n-// check-pass\n-// aux-build:empty-plugin.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(empty_plugin())] //~ WARNING compiler plugins are deprecated\n-\n-fn main() {}"}, {"sha": "92bd69b0e4b3267519ce696612a14c53ffc862b8", "filename": "src/test/ui-fulldeps/plugin-args-2.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr?ref=4007d4ef26eab44bdabc2b7574d032152264d3ad", "patch": "@@ -1,8 +0,0 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/plugin-args-2.rs:6:1\n-   |\n-LL | #![plugin(empty_plugin())]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-"}, {"sha": "c8818cc6c3178b33d02811586140ffe96c4e03ff", "filename": "src/test/ui-fulldeps/plugin-args-3.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.rs?ref=4007d4ef26eab44bdabc2b7574d032152264d3ad", "patch": "@@ -1,8 +0,0 @@\n-// check-pass\n-// aux-build:empty-plugin.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(empty_plugin(hello(there), how(are=\"you\")))] //~ WARNING compiler plugins are deprecated\n-\n-fn main() {}"}, {"sha": "278853e0881ba7dac601fceceee7a1f9253897e1", "filename": "src/test/ui-fulldeps/plugin-args-3.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr?ref=4007d4ef26eab44bdabc2b7574d032152264d3ad", "patch": "@@ -1,8 +0,0 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/plugin-args-3.rs:6:1\n-   |\n-LL | #![plugin(empty_plugin(hello(there), how(are=\"you\")))]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-"}, {"sha": "488f2b775bf0b48d5aec7e1d228d29fcae48bc24", "filename": "src/test/ui-fulldeps/plugin-args.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Fplugin-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Fplugin-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -0,0 +1,9 @@\n+// aux-build:empty-plugin.rs\n+// ignore-stage1\n+\n+#![feature(plugin)]\n+#![plugin(empty_plugin(args))]\n+//~^ ERROR malformed `plugin` attribute\n+//~| WARNING compiler plugins are deprecated\n+\n+fn main() {}"}, {"sha": "2b9094c4c44b3b37521eef0d6aa92ceefbb49883", "filename": "src/test/ui-fulldeps/plugin-args.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Fplugin-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Fplugin-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -0,0 +1,16 @@\n+error[E0498]: malformed `plugin` attribute\n+  --> $DIR/plugin-args.rs:5:11\n+   |\n+LL | #![plugin(empty_plugin(args))]\n+   |           ^^^^^^^^^^^^^^^^^^ malformed attribute\n+\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n+  --> $DIR/plugin-args.rs:5:1\n+   |\n+LL | #![plugin(empty_plugin(args))]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "f231efc0a9a16f19a7afb9362524ce968369461a", "filename": "src/test/ui-fulldeps/plugin-as-extern-crate.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.rs?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -1,11 +1,10 @@\n+// check-pass\n // aux-build:empty-plugin.rs\n // ignore-cross-compile\n //\n // empty_plugin will not compile on a cross-compiled target because\n // libsyntax is not compiled for it.\n \n-#![deny(plugin_as_library)]\n+extern crate empty_plugin; // OK, plugin crates are still crates\n \n-extern crate empty_plugin; //~ ERROR compiler plugin used as an ordinary library\n-\n-fn main() { }\n+fn main() {}"}, {"sha": "d2fbb5d35172c5dfaa8f7f04c9ef319161be242e", "filename": "src/test/ui-fulldeps/plugin-as-extern-crate.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.stderr?ref=4007d4ef26eab44bdabc2b7574d032152264d3ad", "patch": "@@ -1,14 +0,0 @@\n-error: compiler plugin used as an ordinary library\n-  --> $DIR/plugin-as-extern-crate.rs:9:1\n-   |\n-LL | extern crate empty_plugin;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/plugin-as-extern-crate.rs:7:9\n-   |\n-LL | #![deny(plugin_as_library)]\n-   |         ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2a4f772850e92b69851a6c4e53adba4abde57418", "filename": "src/test/ui/malformed/malformed-plugin-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -2,7 +2,7 @@ error: malformed `plugin` attribute input\n   --> $DIR/malformed-plugin-1.rs:2:1\n    |\n LL | #![plugin]\n-   | ^^^^^^^^^^ help: must be of the form: `#[plugin(name|name(args))]`\n+   | ^^^^^^^^^^ help: must be of the form: `#[plugin(name)]`\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-1.rs:2:1"}, {"sha": "fe116a4061025ff7ee1812e014a0503619a4308b", "filename": "src/test/ui/malformed/malformed-plugin-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -2,7 +2,7 @@ error: malformed `plugin` attribute input\n   --> $DIR/malformed-plugin-2.rs:2:1\n    |\n LL | #![plugin=\"bleh\"]\n-   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[plugin(name|name(args))]`\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[plugin(name)]`\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-2.rs:2:1"}, {"sha": "4af933c15f61ed7ca174f3ffdcd3165ac513649a", "filename": "src/test/ui/malformed/malformed-plugin-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -1,8 +1,8 @@\n error[E0498]: malformed `plugin` attribute\n-  --> $DIR/malformed-plugin-3.rs:2:1\n+  --> $DIR/malformed-plugin-3.rs:2:11\n    |\n LL | #![plugin(foo=\"bleh\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^ malformed attribute\n+   |           ^^^^^^^^^^ malformed attribute\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-3.rs:2:1"}, {"sha": "abeffee4d3fc294d14d3b7bbad941a0136477a33", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -6,7 +6,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: DefId(0:4 ~ escape_argument_callee[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) i32)),\n+               for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) mut &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) i32)),\n            ]\n \n error: lifetime may not live long enough"}, {"sha": "f750d15533bc4cac7a6a728e94e510083f1d9070", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -6,7 +6,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: DefId(0:4 ~ escape_argument[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32)),\n+               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) mut &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32, &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32)),\n            ]\n \n note: No external requirements"}, {"sha": "92f30d400f26ebdedc82b83ab66d99aa7cdbf0ab", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -10,7 +10,7 @@ LL | |         },\n    |\n    = note: defining type: DefId(0:18 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n            ]\n    = note: late-bound region is '_#4r\n    = note: late-bound region is '_#5r"}, {"sha": "00bb66afbe5386ec6fa7ca4288aaf4b27a61e552", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -11,7 +11,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0:16 ~ propagate_approximated_ref[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>)),\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r"}, {"sha": "2b05503b58dbe17cd839df6d5f8818233dbb10d9", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -10,7 +10,7 @@ LL | |     })\n    |\n    = note: defining type: DefId(0:9 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]::{{closure}}[0]) with closure substs [\n                i32,\n-               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>)),\n+               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>)),\n            ]\n \n error[E0521]: borrowed data escapes outside of closure\n@@ -48,7 +48,7 @@ LL | |     })\n    |\n    = note: defining type: DefId(0:11 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]::{{closure}}[0]) with closure substs [\n                i32,\n-               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>)),\n+               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>)),\n            ]\n    = note: number of external vids: 2\n    = note: where '_#1r: '_#0r"}, {"sha": "ee0f0b7e65dd828cadf3ee42bab86e6c1959c061", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -12,7 +12,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0:16 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) u32>)),\n+               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t2)) u32>)),\n            ]\n    = note: late-bound region is '_#2r\n    = note: late-bound region is '_#3r"}, {"sha": "611a129e00c83c088c08baa1e4ce77ae93a569bf", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -12,7 +12,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0:16 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>)),\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r"}, {"sha": "9328d05518c6733dfefcad990afd629072160509", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -11,7 +11,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0:16 ~ propagate_approximated_val[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r"}, {"sha": "afac5267c4866100182fd5f084700056d0a152c2", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -10,7 +10,7 @@ LL | |         },\n    |\n    = note: defining type: DefId(0:14 ~ propagate_despite_same_free_region[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: number of external vids: 4"}, {"sha": "9699e8fbdf8e513bc176563b91815a71809ced21", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -11,7 +11,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0:16 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n+               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n            ]\n    = note: late-bound region is '_#2r\n    = note: late-bound region is '_#3r"}, {"sha": "2a18079cdc3a3ef7310dea4ebf5fbdcfc2ef582a", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -11,7 +11,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0:16 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>)),\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r"}, {"sha": "8ce0b7758b05b27fc86c0e6de02da00ea760dfa1", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -6,7 +6,7 @@ LL |     expect_sig(|a, b| b); // ought to return `a`\n    |\n    = note: defining type: DefId(0:4 ~ return_wrong_bound_region[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32)) -> &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) i32,\n+               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) i32, &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32)) -> &ReLateBound(DebruijnIndex(0), BrNamed('r)) i32,\n            ]\n \n error: lifetime may not live long enough"}, {"sha": "d9cbc71f95456ff255bf957abe28b17ac3c570aa", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -38,7 +38,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:15 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(16), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:15 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(DefId(0:16 ~ projection_one_region_closure[317d]::no_relationships_late[0]::'a[0]), 'a))`...\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:39"}, {"sha": "ed53ce9113393089d3b55f8a45d913f27ed154d8", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -39,7 +39,7 @@ error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0:17 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(18), 'a))`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0:17 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(DefId(0:18 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]::'a[0]), 'a))`...\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29"}, {"sha": "e2a9bd7e3cd08e0d64a231274f59815e970a9f78", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -7,7 +7,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: defining type: DefId(0:11 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]::{{closure}}[0]) with closure substs [\n                T,\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) T)),\n+               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed('s)) T)),\n            ]\n    = note: number of external vids: 2\n    = note: where T: '_#1r\n@@ -34,7 +34,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: defining type: DefId(0:15 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs [\n                T,\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) T)),\n+               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed('s)) T)),\n            ]\n    = note: late-bound region is '_#2r\n    = note: number of external vids: 3\n@@ -59,7 +59,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:12 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]), BrNamed(crate0:DefIndex(13), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:12 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]), BrNamed(DefId(0:13 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::'a[0]), 'a))`...\n \n error: aborting due to previous error\n "}, {"sha": "ffd936b58be377935a19e8abc3df84036accf50a", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c81e0a986e4285d3d0fd781a1bd475753eb12c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "patch": "@@ -49,7 +49,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:11 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]), BrNamed(crate0:DefIndex(12), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:11 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]), BrNamed(DefId(0:12 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]::'a[0]), 'a))`...\n \n note: External requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n@@ -139,7 +139,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:19 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]), BrNamed(crate0:DefIndex(20), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:19 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]), BrNamed(DefId(0:20 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]::'a[0]), 'a))`...\n \n note: External requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26"}]}