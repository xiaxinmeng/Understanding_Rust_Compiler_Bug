{"sha": "38204b63211302a77bb9ff677f6b1df9f5acd734", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MjA0YjYzMjExMzAyYTc3YmI5ZmY2NzdmNmIxZGY5ZjVhY2Q3MzQ=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-01-26T22:45:05Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-02-09T04:33:49Z"}, "message": "Add shim for rename", "tree": {"sha": "6545c03d1543c77e44bf3f761d4b15c81f01ff46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6545c03d1543c77e44bf3f761d4b15c81f01ff46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38204b63211302a77bb9ff677f6b1df9f5acd734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38204b63211302a77bb9ff677f6b1df9f5acd734", "html_url": "https://github.com/rust-lang/rust/commit/38204b63211302a77bb9ff677f6b1df9f5acd734", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38204b63211302a77bb9ff677f6b1df9f5acd734/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9615bfd6733142041cb8f32ce108cb31387752a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9615bfd6733142041cb8f32ce108cb31387752a", "html_url": "https://github.com/rust-lang/rust/commit/f9615bfd6733142041cb8f32ce108cb31387752a"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "2fd886ed0e84cd894877823be78b1a29cd2e48af", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38204b63211302a77bb9ff677f6b1df9f5acd734/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38204b63211302a77bb9ff677f6b1df9f5acd734/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=38204b63211302a77bb9ff677f6b1df9f5acd734", "patch": "@@ -521,6 +521,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            \"rename\" => {\n+                let result = this.rename(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             \"clock_gettime\" => {\n                 let result = this.clock_gettime(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;"}, {"sha": "2ae215e7204f2219d758625761eeeceadb7d9bdd", "filename": "src/shims/fs.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/38204b63211302a77bb9ff677f6b1df9f5acd734/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38204b63211302a77bb9ff677f6b1df9f5acd734/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=38204b63211302a77bb9ff677f6b1df9f5acd734", "patch": "@@ -1,6 +1,6 @@\n use std::collections::HashMap;\n use std::convert::{TryFrom, TryInto};\n-use std::fs::{remove_file, File, OpenOptions};\n+use std::fs::{remove_file, rename, File, OpenOptions};\n use std::io::{Read, Seek, SeekFrom, Write};\n use std::path::PathBuf;\n use std::time::SystemTime;\n@@ -582,6 +582,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.set_last_error(ebadf)?;\n         Ok((-1).into())\n     }\n+\n+    fn rename(\n+        &mut self,\n+        oldpath_op: OpTy<'tcx, Tag>,\n+        newpath_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"rename\")?;\n+\n+        let oldpath_scalar = this.read_scalar(oldpath_op)?.not_undef()?;\n+        let newpath_scalar = this.read_scalar(newpath_op)?.not_undef()?;\n+\n+        if this.is_null(oldpath_scalar)? || this.is_null(newpath_scalar)? {\n+            let efault = this.eval_libc(\"EFAULT\")?;\n+            this.set_last_error(efault)?;\n+            return Ok(-1);\n+        }\n+\n+        let oldpath = this.read_os_str_from_c_str(oldpath_scalar)?;\n+        let newpath = this.read_os_str_from_c_str(newpath_scalar)?;\n+\n+        let result = rename(oldpath, newpath).map(|_| 0);\n+\n+        this.try_unwrap_io_result(result)\n+    }\n }\n \n /// Extracts the number of seconds and nanoseconds elapsed between `time` and the unix epoch when"}, {"sha": "9e1891adf34eac489b87dc592fdd34c4c461aac0", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38204b63211302a77bb9ff677f6b1df9f5acd734/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38204b63211302a77bb9ff677f6b1df9f5acd734/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=38204b63211302a77bb9ff677f6b1df9f5acd734", "patch": "@@ -1,7 +1,7 @@\n // ignore-windows: File handling is not implemented yet\n // compile-flags: -Zmiri-disable-isolation\n \n-use std::fs::{File, remove_file};\n+use std::fs::{File, remove_file, rename};\n use std::io::{Read, Write, ErrorKind, Result, Seek, SeekFrom};\n use std::path::{PathBuf, Path};\n \n@@ -82,6 +82,18 @@ fn main() {\n     // Removing file should succeed.\n     remove_file(&path).unwrap();\n \n+    // Renaming a file should succeed.\n+    let path1 = tmp.join(\"rename_source.txt\");\n+    let path2 = tmp.join(\"rename_destination.txt\");\n+    // Clean files for robustness.\n+    remove_file(&path1).ok();\n+    remove_file(&path2).ok();\n+    let file = File::create(&path1).unwrap();\n+    drop(file);\n+    rename(&path1, &path2).unwrap();\n+    assert!(path2.metadata().unwrap().is_file());\n+    remove_file(&path2).ok();\n+\n     // The two following tests also check that the `__errno_location()` shim is working properly.\n     // Opening a non-existing file should fail with a \"not found\" error.\n     assert_eq!(ErrorKind::NotFound, File::open(&path).unwrap_err().kind());"}]}