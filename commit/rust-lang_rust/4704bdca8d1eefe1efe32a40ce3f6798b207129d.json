{"sha": "4704bdca8d1eefe1efe32a40ce3f6798b207129d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MDRiZGNhOGQxZWVmZTFlZmUzMmE0MGNlM2Y2Nzk4YjIwNzEyOWQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T09:12:15Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T09:12:15Z"}, "message": "Simplify PrimVals.", "tree": {"sha": "86100e8e1a70318078d1a81802dc59173bb32ea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86100e8e1a70318078d1a81802dc59173bb32ea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4704bdca8d1eefe1efe32a40ce3f6798b207129d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4704bdca8d1eefe1efe32a40ce3f6798b207129d", "html_url": "https://github.com/rust-lang/rust/commit/4704bdca8d1eefe1efe32a40ce3f6798b207129d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4704bdca8d1eefe1efe32a40ce3f6798b207129d/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abd235837ac9340b41251da26ef91aaf07628880", "url": "https://api.github.com/repos/rust-lang/rust/commits/abd235837ac9340b41251da26ef91aaf07628880", "html_url": "https://github.com/rust-lang/rust/commit/abd235837ac9340b41251da26ef91aaf07628880"}], "stats": {"total": 46, "additions": 15, "deletions": 31}, "files": [{"sha": "8741beb8735a9aa4abb5085962bf54c765644e9e", "filename": "src/interpreter.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4704bdca8d1eefe1efe32a40ce3f6798b207129d/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4704bdca8d1eefe1efe32a40ce3f6798b207129d/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=4704bdca8d1eefe1efe32a40ce3f6798b207129d", "patch": "@@ -13,7 +13,7 @@ use syntax::codemap::DUMMY_SP;\n \n use error::EvalResult;\n use memory::{self, FieldRepr, Memory, Pointer, Repr};\n-use primval::{self, PrimVal};\n+use primval;\n \n const TRACE_EXECUTION: bool = true;\n \n@@ -242,11 +242,8 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                                 match &self.tcx.item_name(def_id).as_str()[..] {\n                                     \"size_of\" => {\n                                         let ty = *substs.types.get(subst::FnSpace, 0);\n-                                        let size = PrimVal::from_usize(\n-                                            self.ty_to_repr(ty).size(),\n-                                            &dest_repr\n-                                        );\n-                                        try!(self.memory.write_primval(dest, size));\n+                                        let size = self.ty_to_repr(ty).size() as u64;\n+                                        try!(self.memory.write_uint(dest, size, dest_repr.size()));\n                                     }\n \n                                     \"offset\" => {"}, {"sha": "17e9439de6d8ced86da0844edd8e06de3f7e3986", "filename": "src/memory.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4704bdca8d1eefe1efe32a40ce3f6798b207129d/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4704bdca8d1eefe1efe32a40ce3f6798b207129d/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=4704bdca8d1eefe1efe32a40ce3f6798b207129d", "patch": "@@ -184,6 +184,10 @@ impl Memory {\n             ty::TyUint(UintTy::U16) => self.read_u16(ptr).map(PrimVal::U16),\n             ty::TyUint(UintTy::U32) => self.read_u32(ptr).map(PrimVal::U32),\n             ty::TyUint(UintTy::U64) => self.read_u64(ptr).map(PrimVal::U64),\n+\n+            // TODO(tsion): Pick the PrimVal dynamically.\n+            ty::TyInt(IntTy::Is)    => self.read_int(ptr, POINTER_SIZE).map(PrimVal::I64),\n+            ty::TyUint(UintTy::Us)  => self.read_uint(ptr, POINTER_SIZE).map(PrimVal::U64),\n             _ => panic!(\"primitive read of non-primitive type: {:?}\", ty),\n         }\n     }\n@@ -255,6 +259,14 @@ impl Memory {\n         Ok(())\n     }\n \n+    pub fn read_int(&self, ptr: Pointer, size: usize) -> EvalResult<i64> {\n+        self.get_bytes(ptr, size).map(|mut b| b.read_int::<NativeEndian>(size).unwrap())\n+    }\n+\n+    pub fn write_int(&mut self, ptr: Pointer, n: i64, size: usize) -> EvalResult<()> {\n+        self.get_bytes_mut(ptr, size).map(|mut b| b.write_int::<NativeEndian>(n, size).unwrap())\n+    }\n+\n     pub fn read_u8(&self, ptr: Pointer) -> EvalResult<u8> {\n         self.get_bytes(ptr, 1).map(|b| b[0] as u8)\n     }"}, {"sha": "a34da06d5971736d17da7f63a986497f1715b879", "filename": "src/primval.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4704bdca8d1eefe1efe32a40ce3f6798b207129d/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4704bdca8d1eefe1efe32a40ce3f6798b207129d/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=4704bdca8d1eefe1efe32a40ce3f6798b207129d", "patch": "@@ -1,37 +1,12 @@\n use rustc::mir::repr as mir;\n \n-use memory::Repr;\n-\n #[derive(Clone, Copy, Debug, PartialEq)]\n pub enum PrimVal {\n     Bool(bool),\n     I8(i8), I16(i16), I32(i32), I64(i64),\n     U8(u8), U16(u16), U32(u32), U64(u64),\n }\n \n-impl PrimVal {\n-    pub fn from_usize(n: usize, repr: &Repr) -> Self {\n-        // TODO(tsion): Use checked casts.\n-        match *repr {\n-            Repr::U8  => PrimVal::U8(n as u8),\n-            Repr::U16 => PrimVal::U16(n as u16),\n-            Repr::U32 => PrimVal::U32(n as u32),\n-            Repr::U64 => PrimVal::U64(n as u64),\n-            _ => panic!(\"attempted to make usize primval from non-uint repr\"),\n-        }\n-    }\n-\n-    pub fn to_usize(self) -> usize {\n-        match self {\n-            PrimVal::U8(n)  => n as usize,\n-            PrimVal::U16(n) => n as usize,\n-            PrimVal::U32(n) => n as usize,\n-            PrimVal::U64(n) => n as usize,\n-            _ => panic!(\"attempted to make usize from non-uint primval\"),\n-        }\n-    }\n-}\n-\n pub fn binary_op(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> PrimVal {\n     macro_rules! int_binops {\n         ($v:ident, $l:ident, $r:ident) => ({"}]}