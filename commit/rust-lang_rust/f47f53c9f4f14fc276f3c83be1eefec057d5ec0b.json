{"sha": "f47f53c9f4f14fc276f3c83be1eefec057d5ec0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0N2Y1M2M5ZjRmMTRmYzI3NmYzYzgzYmUxZWVmZWMwNTdkNWVjMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-08T00:40:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-08T00:40:58Z"}, "message": "Auto merge of #44978 - jamesmunns:armv5te-os-atomics, r=alexcrichton\n\nAllow atomic operations up to 32 bits\n\nThe ARMv5te platform does not have instruction-level support for atomics, however the kernel provides [user space helpers] which can be used to perform atomic operations. When linked with `libgcc`, the atomic symbols needed by Rust will be provided, rather than CPU level intrinsics.\n\n[user space helpers]: https://www.kernel.org/doc/Documentation/arm/kernel_user_helpers.txt\n\n32-bit versions of these kernel level helpers were introduced in Linux Kernel 2.6.12, and 64-bit version of these kernel level helpers were introduced in Linux Kernel 3.1. I have selected 32 bit versions as std currently only requires Linux version 2.6.18 and above as far as I am aware.\n\nAs this target is specifically linux and gnueabi, it is reasonable to assume the Linux Kernel and libc will be available for the target. There is a large performance penalty, as we are not using CPU level intrinsics, however this penalty is likely preferable to not having the target at all.\n\nI have used this change in a custom target (along with xargo) to build std, as well as a number of higher level crates.\n\n## Additional information\n\nFor reference, here is what a a code snippet decompiles to:\n\n```rust\nuse std::sync::atomic::{AtomicIsize, Ordering};\n\n#[no_mangle]\npub extern fn foo(a: &AtomicIsize) -> isize {\n\n    a.fetch_add(1, Ordering::SeqCst)\n}\n```\n\n```\nDisassembly of section .text.foo:\n\n00000000 <foo>:\n   0:\te92d4800 \tpush\t{fp, lr}\n   4:\te3a01001 \tmov\tr1, #1\n   8:\tebfffffe \tbl\t0 <__sync_fetch_and_add_4>\n   c:\te8bd8800 \tpop\t{fp, pc}\n```\n\nWhich in turn is provided by `libgcc.a`, which has code which looks like this:\n\n```\nDisassembly of section .text:\n\n00000000 <__sync_fetch_and_add_4>:\n       0:\te92d40f8 \tpush\t{r3, r4, r5, r6, r7, lr}\n       4:\te1a05000 \tmov\tr5, r0\n       8:\te1a07001 \tmov\tr7, r1\n       c:\te59f6028 \tldr\tr6, [pc, #40]\t; 3c <__sync_fetch_and_add_4+0x3c>\n      10:\te5954000 \tldr\tr4, [r5]\n      14:\te1a02005 \tmov\tr2, r5\n      18:\te1a00004 \tmov\tr0, r4\n      1c:\te0841007 \tadd\tr1, r4, r7\n      20:\te1a0e00f \tmov\tlr, pc\n      24:\te12fff16 \tbx\tr6\n      28:\te3500000 \tcmp\tr0, #0\n      2c:\t1afffff7 \tbne\t10 <__sync_fetch_and_add_4+0x10>\n      30:\te1a00004 \tmov\tr0, r4\n      34:\te8bd40f8 \tpop\t{r3, r4, r5, r6, r7, lr}\n      38:\te12fff1e \tbx\tlr\n      3c:\tffff0fc0 \t.word\t0xffff0fc0\n```\n\nWhere you can see the reference to `0xffff0fc0`, which is provided by the [user space helpers].", "tree": {"sha": "e51b11c7fe151208862063acfdf6f0b506f64a64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e51b11c7fe151208862063acfdf6f0b506f64a64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f47f53c9f4f14fc276f3c83be1eefec057d5ec0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f47f53c9f4f14fc276f3c83be1eefec057d5ec0b", "html_url": "https://github.com/rust-lang/rust/commit/f47f53c9f4f14fc276f3c83be1eefec057d5ec0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f47f53c9f4f14fc276f3c83be1eefec057d5ec0b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac76206be4e257ee901983ac67e33ca2842b4f01", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac76206be4e257ee901983ac67e33ca2842b4f01", "html_url": "https://github.com/rust-lang/rust/commit/ac76206be4e257ee901983ac67e33ca2842b4f01"}, {"sha": "1e26094bdd18c704e1c060e2cf7d2b9bfec037ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e26094bdd18c704e1c060e2cf7d2b9bfec037ed", "html_url": "https://github.com/rust-lang/rust/commit/1e26094bdd18c704e1c060e2cf7d2b9bfec037ed"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "97397ca49622e4d53c5db5d2c1e6ff12fc6d4c96", "filename": "src/librustc_back/target/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f47f53c9f4f14fc276f3c83be1eefec057d5ec0b/src%2Flibrustc_back%2Ftarget%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47f53c9f4f14fc276f3c83be1eefec057d5ec0b/src%2Flibrustc_back%2Ftarget%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv5te_unknown_linux_gnueabi.rs?ref=f47f53c9f4f14fc276f3c83be1eefec057d5ec0b", "patch": "@@ -27,8 +27,12 @@ pub fn target() -> TargetResult {\n \n         options: TargetOptions {\n             features: \"+soft-float,+strict-align\".to_string(),\n-            // No atomic instructions on ARMv5\n-            max_atomic_width: Some(0),\n+\n+            // Atomic operations provided when linked with libgcc.\n+            // FIXME: If the following PR is merged, the atomic operations would be\n+            // provided by compiler-builtins instead with no change of behavior:\n+            // https://github.com/rust-lang-nursery/compiler-builtins/pull/115/files\n+            max_atomic_width: Some(32),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base\n         }"}]}