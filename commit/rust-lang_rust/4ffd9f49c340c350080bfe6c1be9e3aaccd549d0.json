{"sha": "4ffd9f49c340c350080bfe6c1be9e3aaccd549d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZmQ5ZjQ5YzM0MGMzNTAwODBiZmU2YzFiZTllM2FhY2NkNTQ5ZDA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-10T15:49:45Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-19T07:31:52Z"}, "message": "Avoid .take().unwrap() with FnOnce closures", "tree": {"sha": "23aff13e71e93fa2c73cea94bf6128f920220dfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23aff13e71e93fa2c73cea94bf6128f920220dfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0", "html_url": "https://github.com/rust-lang/rust/commit/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7061d02e16d0821d3af2b753155fe44bab7725c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7061d02e16d0821d3af2b753155fe44bab7725c", "html_url": "https://github.com/rust-lang/rust/commit/a7061d02e16d0821d3af2b753155fe44bab7725c"}], "stats": {"total": 74, "additions": 31, "deletions": 43}, "files": [{"sha": "5796f8946611a952dedc5e629a908dfc40ce9ada", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=4ffd9f49c340c350080bfe6c1be9e3aaccd549d0", "patch": "@@ -106,7 +106,7 @@\n #![allow(unknown_features)]\n #![feature(macro_rules, globs, linkage, thread_local, asm)]\n #![feature(default_type_params, phase, lang_items, unsafe_destructor)]\n-#![feature(import_shadowing, slicing_syntax)]\n+#![feature(import_shadowing, slicing_syntax, tuple_indexing)]\n #![feature(unboxed_closures)]\n \n // Don't link to std. We are std."}, {"sha": "c896f4e39daef74f0070fb5b4e4a206afc0ca0b2", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=4ffd9f49c340c350080bfe6c1be9e3aaccd549d0", "patch": "@@ -57,22 +57,17 @@\n //!\n //! Currently Rust uses unwind runtime provided by libgcc.\n \n-use core::prelude::*;\n+use prelude::*;\n \n use any::Any;\n-use boxed::Box;\n use cmp;\n use failure;\n use fmt;\n use intrinsics;\n use libc::c_void;\n use mem;\n-use raw::Closure;\n-use str::StrAllocating;\n-use string::String;\n use sync::atomic;\n use sync::{Once, ONCE_INIT};\n-use vec::Vec;\n \n use sys_common::thread_info;\n use rt::libunwind as uw;\n@@ -119,10 +114,9 @@ static CALLBACK_CNT: atomic::AtomicUint = atomic::INIT_ATOMIC_UINT;\n ///   guaranteed that a rust task is in place when invoking this function.\n ///   Unwinding twice can lead to resource leaks where some destructors are not\n ///   run.\n-pub unsafe fn try(f: ||) -> ::core::result::Result<(), Box<Any + Send>> {\n-    let closure: Closure = mem::transmute(f);\n-    let ep = rust_try(try_fn, closure.code as *mut c_void,\n-                      closure.env as *mut c_void);\n+pub unsafe fn try<F: FnOnce()>(f: F) -> Result<(), Box<Any + Send>> {\n+    let mut f = Some(f);\n+    let ep = rust_try(try_fn::<F>, &mut f as *mut _ as *mut c_void);\n     return if ep.is_null() {\n         Ok(())\n     } else {\n@@ -133,14 +127,9 @@ pub unsafe fn try(f: ||) -> ::core::result::Result<(), Box<Any + Send>> {\n         Err(cause.unwrap())\n     };\n \n-    extern fn try_fn(code: *mut c_void, env: *mut c_void) {\n-        unsafe {\n-            let closure: || = mem::transmute(Closure {\n-                code: code as *mut (),\n-                env: env as *mut (),\n-            });\n-            closure();\n-        }\n+    extern fn try_fn<F: FnOnce()>(opt_closure: *mut c_void) {\n+        let opt_closure = opt_closure as *mut Option<F>;\n+        unsafe { (*opt_closure).take().unwrap()(); }\n     }\n \n     #[link(name = \"rustrt_native\", kind = \"static\")]\n@@ -152,8 +141,7 @@ pub unsafe fn try(f: ||) -> ::core::result::Result<(), Box<Any + Send>> {\n         // When f(...) returns normally, the return value is null.\n         // When f(...) throws, the return value is a pointer to the caught\n         // exception object.\n-        fn rust_try(f: extern \"C\" fn(*mut c_void, *mut c_void),\n-                    code: *mut c_void,\n+        fn rust_try(f: extern fn(*mut c_void),\n                     data: *mut c_void) -> *mut uw::_Unwind_Exception;\n     }\n }"}, {"sha": "206d443d2943bea90bca74d6bdf85917d2ced698", "filename": "src/libstd/sys/common/thread_info.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs?ref=4ffd9f49c340c350080bfe6c1be9e3aaccd549d0", "patch": "@@ -60,12 +60,11 @@ pub fn set_unwinding(unwinding: bool) {\n \n pub fn set(stack_bounds: (uint, uint), stack_guard: uint, thread: Thread) {\n     THREAD_INFO.with(|c| assert!(c.borrow().is_none()));\n-    let mut thread_opt = Some(thread); // option dance\n-    THREAD_INFO.with(|c| *c.borrow_mut() = Some(ThreadInfo{\n+    THREAD_INFO.with(move |c| *c.borrow_mut() = Some(ThreadInfo{\n         stack_bounds: stack_bounds,\n         stack_guard: stack_guard,\n         unwinding: false,\n-        thread: thread_opt.take().unwrap(),\n+        thread: thread,\n     }));\n }\n "}, {"sha": "7ccfe0ab74b46ca6ca11a1d584924a8a626d83c6", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=4ffd9f49c340c350080bfe6c1be9e3aaccd549d0", "patch": "@@ -243,17 +243,20 @@ impl Cfg {\n             // the thread itself. For these reasons, this unsafety should be ok.\n             unsafe {\n                 let mut output = None;\n-                let mut f_opt = Some( // option dance\n-                    if stdout.is_some() || stderr.is_some() {\n-                        proc() {\n-                            let _ = stdout.map(stdio::set_stdout);\n-                            let _ = stderr.map(stdio::set_stderr);\n-                            f()\n-                        }\n-                    } else {\n-                        f\n-                    });\n-                let try_result = unwind::try(|| output = Some((f_opt.take().unwrap())()));\n+                let f = if stdout.is_some() || stderr.is_some() {\n+                    proc() {\n+                        let _ = stdout.map(stdio::set_stdout);\n+                        let _ = stderr.map(stdio::set_stderr);\n+                        f()\n+                    }\n+                } else {\n+                    f\n+                };\n+\n+                let try_result = {\n+                    let ptr = &mut output;\n+                    unwind::try(move || *ptr = Some(f()))\n+                };\n                 match (output, try_result) {\n                     (Some(data), Ok(_)) => after(Ok(data)),\n                     (None, Err(cause)) => after(Err(cause)),"}, {"sha": "4c052a4ce09f6a0560a2cf6967e134418af97236", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=4ffd9f49c340c350080bfe6c1be9e3aaccd549d0", "patch": "@@ -217,9 +217,8 @@ impl<T: 'static> Key<T> {\n     /// This function will `panic!()` if the key currently has its\n     /// destructor running, and it **may** panic if the destructor has\n     /// previously been run for this thread.\n-    pub fn with<R, F>(&'static self, f: F) -> R where\n-        F: FnOnce(&T) -> R,\n-    {\n+    pub fn with<F, R>(&'static self, f: F) -> R\n+                      where F: FnOnce(&T) -> R {\n         let slot = (self.inner)();\n         unsafe {\n             let slot = slot.get().expect(\"cannot access a TLS value during or \\"}, {"sha": "96f09190c2fe4c00bbe2f969fca85cbcc83e7349", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=4ffd9f49c340c350080bfe6c1be9e3aaccd549d0", "patch": "@@ -262,4 +262,3 @@ mod tests {\n         });\n     }\n }\n-"}, {"sha": "226dc55cb8d5af5b4f8ed604290eb8bd572a0c1e", "filename": "src/rt/rust_try.ll", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0/src%2Frt%2Frust_try.ll", "raw_url": "https://github.com/rust-lang/rust/raw/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0/src%2Frt%2Frust_try.ll", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_try.ll?ref=4ffd9f49c340c350080bfe6c1be9e3aaccd549d0", "patch": "@@ -14,9 +14,9 @@\n \n ; See also: libstd/rt/unwind.rs\n \n-define i8* @rust_try(void (i8*,i8*)* %f, i8* %fptr, i8* %env) {\n+define i8* @rust_try(void (i8*)* %f, i8* %env) {\n \n-    %1 = invoke i8* @rust_try_inner(void (i8*,i8*)* %f, i8* %fptr, i8* %env)\n+    %1 = invoke i8* @rust_try_inner(void (i8*)* %f, i8* %env)\n         to label %normal\n         unwind label %catch\n \n@@ -30,9 +30,9 @@ catch:\n     ret i8* null\n }\n \n-define internal i8* @rust_try_inner(void (i8*,i8*)* %f, i8* %fptr, i8* %env) {\n+define internal i8* @rust_try_inner(void (i8*)* %f, i8* %env) {\n \n-    invoke void %f(i8* %fptr, i8* %env)\n+    invoke void %f(i8* %env)\n         to label %normal\n         unwind label %catch\n "}]}