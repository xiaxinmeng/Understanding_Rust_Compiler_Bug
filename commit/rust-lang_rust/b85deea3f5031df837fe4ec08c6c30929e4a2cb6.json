{"sha": "b85deea3f5031df837fe4ec08c6c30929e4a2cb6", "node_id": "C_kwDOAAsO6NoAKGI4NWRlZWEzZjUwMzFkZjgzN2ZlNGVjMDhjNmMzMDkyOWU0YTJjYjY", "commit": {"author": {"name": "Michael Schubart", "email": "michael@schubart.net", "date": "2023-04-10T22:58:47Z"}, "committer": {"name": "Michael Schubart", "email": "michael@schubart.net", "date": "2023-04-11T03:27:25Z"}, "message": "Test all types supported by [`collection_is_never_read`]", "tree": {"sha": "729940201a1f259c3eb517d44d03de8d702b0830", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/729940201a1f259c3eb517d44d03de8d702b0830"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b85deea3f5031df837fe4ec08c6c30929e4a2cb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b85deea3f5031df837fe4ec08c6c30929e4a2cb6", "html_url": "https://github.com/rust-lang/rust/commit/b85deea3f5031df837fe4ec08c6c30929e4a2cb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b85deea3f5031df837fe4ec08c6c30929e4a2cb6/comments", "author": {"login": "schubart", "id": 75188, "node_id": "MDQ6VXNlcjc1MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/75188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schubart", "html_url": "https://github.com/schubart", "followers_url": "https://api.github.com/users/schubart/followers", "following_url": "https://api.github.com/users/schubart/following{/other_user}", "gists_url": "https://api.github.com/users/schubart/gists{/gist_id}", "starred_url": "https://api.github.com/users/schubart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schubart/subscriptions", "organizations_url": "https://api.github.com/users/schubart/orgs", "repos_url": "https://api.github.com/users/schubart/repos", "events_url": "https://api.github.com/users/schubart/events{/privacy}", "received_events_url": "https://api.github.com/users/schubart/received_events", "type": "User", "site_admin": false}, "committer": {"login": "schubart", "id": 75188, "node_id": "MDQ6VXNlcjc1MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/75188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schubart", "html_url": "https://github.com/schubart", "followers_url": "https://api.github.com/users/schubart/followers", "following_url": "https://api.github.com/users/schubart/following{/other_user}", "gists_url": "https://api.github.com/users/schubart/gists{/gist_id}", "starred_url": "https://api.github.com/users/schubart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schubart/subscriptions", "organizations_url": "https://api.github.com/users/schubart/orgs", "repos_url": "https://api.github.com/users/schubart/repos", "events_url": "https://api.github.com/users/schubart/events{/privacy}", "received_events_url": "https://api.github.com/users/schubart/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb", "html_url": "https://github.com/rust-lang/rust/commit/3b5b2ed01a5b32aff05dd7fcaf244358bcbfa0cb"}], "stats": {"total": 111, "additions": 86, "deletions": 25}, "files": [{"sha": "2c1a42a72c149c2f4251e5962ce2746de0ecd8ae", "filename": "tests/ui/collection_is_never_read.rs", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b85deea3f5031df837fe4ec08c6c30929e4a2cb6/tests%2Fui%2Fcollection_is_never_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85deea3f5031df837fe4ec08c6c30929e4a2cb6/tests%2Fui%2Fcollection_is_never_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollection_is_never_read.rs?ref=b85deea3f5031df837fe4ec08c6c30929e4a2cb6", "patch": "@@ -169,22 +169,35 @@ fn function_argument() {\n     foo(&x);\n }\n \n-fn string() {\n-    // Do lint (write without read)\n-    let mut s = String::new();\n-    s.push_str(\"Hello, World!\");\n-\n-    // Do not lint (read without write)\n-    let mut s = String::from(\"Hello, World!\");\n-    let _ = s.len();\n-\n-    // Do not lint (write and read)\n-    let mut s = String::from(\"Hello, World!\");\n-    s.push_str(\"foo, bar\");\n-    let _ = s.len();\n-\n-    // Do lint the first line, but not the second\n-    let mut s = String::from(\"Hello, World!\");\n-    let t = String::from(\"foo, bar\");\n-    s = t;\n+fn supported_types() {\n+    let mut x = std::collections::BTreeMap::new(); // WARNING\n+    x.insert(true, 1);\n+\n+    let mut x = std::collections::BTreeSet::new(); // WARNING\n+    x.insert(1);\n+\n+    let mut x = std::collections::BinaryHeap::new(); // WARNING\n+    x.push(1);\n+\n+    let mut x = std::collections::HashMap::new(); // WARNING\n+    x.insert(1, 2);\n+\n+    let mut x = std::collections::HashSet::new(); // WARNING\n+    x.insert(1);\n+\n+    let mut x = std::collections::LinkedList::new(); // WARNING\n+    x.push_front(1);\n+\n+    let mut x = Some(true); // WARNING\n+    x.insert(false);\n+\n+    let mut x = String::from(\"hello\"); // WARNING\n+    x.push('!');\n+\n+    let mut x = Vec::new(); // WARNING\n+    x.clear();\n+    x.push(1);\n+\n+    let mut x = std::collections::VecDeque::new(); // WARNING\n+    x.push_front(1);\n }"}, {"sha": "982cb445534a2c867919d9a2224d2a2827becc89", "filename": "tests/ui/collection_is_never_read.stderr", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b85deea3f5031df837fe4ec08c6c30929e4a2cb6/tests%2Fui%2Fcollection_is_never_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b85deea3f5031df837fe4ec08c6c30929e4a2cb6/tests%2Fui%2Fcollection_is_never_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollection_is_never_read.stderr?ref=b85deea3f5031df837fe4ec08c6c30929e4a2cb6", "patch": "@@ -61,16 +61,64 @@ LL |     let x = vec![1, 2, 3]; // WARNING\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: collection is never read\n-  --> $DIR/collection_is_never_read.rs:174:5\n+  --> $DIR/collection_is_never_read.rs:173:5\n    |\n-LL |     let mut s = String::new();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let mut x = std::collections::BTreeMap::new(); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:176:5\n+   |\n+LL |     let mut x = std::collections::BTreeSet::new(); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:179:5\n+   |\n+LL |     let mut x = std::collections::BinaryHeap::new(); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:182:5\n+   |\n+LL |     let mut x = std::collections::HashMap::new(); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:185:5\n+   |\n+LL |     let mut x = std::collections::HashSet::new(); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:188:5\n+   |\n+LL |     let mut x = std::collections::LinkedList::new(); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:191:5\n+   |\n+LL |     let mut x = Some(true); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:194:5\n+   |\n+LL |     let mut x = String::from(\"hello\"); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:197:5\n+   |\n+LL |     let mut x = Vec::new(); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: collection is never read\n-  --> $DIR/collection_is_never_read.rs:187:5\n+  --> $DIR/collection_is_never_read.rs:201:5\n    |\n-LL |     let mut s = String::from(\"Hello, World!\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let mut x = std::collections::VecDeque::new(); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 20 previous errors\n "}]}