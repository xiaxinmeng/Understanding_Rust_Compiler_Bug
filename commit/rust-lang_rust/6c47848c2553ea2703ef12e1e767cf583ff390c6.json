{"sha": "6c47848c2553ea2703ef12e1e767cf583ff390c6", "node_id": "C_kwDOAAsO6NoAKDZjNDc4NDhjMjU1M2VhMjcwM2VmMTJlMWU3NjdjZjU4M2ZmMzkwYzY", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-10-27T19:43:48Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-02T20:05:09Z"}, "message": "Small parser cleanups", "tree": {"sha": "6e5b03dcbd227d9d36e48469ce0243ae726044f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e5b03dcbd227d9d36e48469ce0243ae726044f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c47848c2553ea2703ef12e1e767cf583ff390c6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgbSfWKRQb2tiqhuHtakDJeupmrF\nChDbM0msU+PXaBOk8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQLk+YnWAx0ThpHsnfMtLv/D2CkOVZoqOyC7kjT871de5PC5XWENIdrOVYSFiUdPNfL\n70hRDqhIyya5tg3UkJ3g4=\n-----END SSH SIGNATURE-----", "payload": "tree 6e5b03dcbd227d9d36e48469ce0243ae726044f6\nparent 8d13b2a046d35e657c7e497cfeda6b2165dc931f\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1666899828 +0200\ncommitter Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1667419509 +0100\n\nSmall parser cleanups\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c47848c2553ea2703ef12e1e767cf583ff390c6", "html_url": "https://github.com/rust-lang/rust/commit/6c47848c2553ea2703ef12e1e767cf583ff390c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c47848c2553ea2703ef12e1e767cf583ff390c6/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d13b2a046d35e657c7e497cfeda6b2165dc931f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d13b2a046d35e657c7e497cfeda6b2165dc931f", "html_url": "https://github.com/rust-lang/rust/commit/8d13b2a046d35e657c7e497cfeda6b2165dc931f"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "6513928e78c8557b0e55ee0e96877945e0c1175d", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c47848c2553ea2703ef12e1e767cf583ff390c6/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c47848c2553ea2703ef12e1e767cf583ff390c6/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=6c47848c2553ea2703ef12e1e767cf583ff390c6", "patch": "@@ -451,7 +451,7 @@ impl TtParser {\n                         // Try zero matches of this sequence, by skipping over it.\n                         self.cur_mps.push(MatcherPos {\n                             idx: idx_first_after,\n-                            matches: mp.matches.clone(), // a cheap clone\n+                            matches: Lrc::clone(&mp.matches),\n                         });\n                     }\n \n@@ -464,8 +464,8 @@ impl TtParser {\n                     // sequence. If that's not possible, `ending_mp` will fail quietly when it is\n                     // processed next time around the loop.\n                     let ending_mp = MatcherPos {\n-                        idx: mp.idx + 1,             // +1 skips the Kleene op\n-                        matches: mp.matches.clone(), // a cheap clone\n+                        idx: mp.idx + 1, // +1 skips the Kleene op\n+                        matches: Lrc::clone(&mp.matches),\n                     };\n                     self.cur_mps.push(ending_mp);\n \n@@ -480,8 +480,8 @@ impl TtParser {\n                     // separator yet. Try ending the sequence. If that's not possible, `ending_mp`\n                     // will fail quietly when it is processed next time around the loop.\n                     let ending_mp = MatcherPos {\n-                        idx: mp.idx + 2,             // +2 skips the separator and the Kleene op\n-                        matches: mp.matches.clone(), // a cheap clone\n+                        idx: mp.idx + 2, // +2 skips the separator and the Kleene op\n+                        matches: Lrc::clone(&mp.matches),\n                     };\n                     self.cur_mps.push(ending_mp);\n "}]}