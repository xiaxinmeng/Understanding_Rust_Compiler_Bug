{"sha": "3a0149343326b5002a2a5623d8f5360324bbe302", "node_id": "C_kwDOAAsO6NoAKDNhMDE0OTM0MzMyNmI1MDAyYTJhNTYyM2Q4ZjUzNjAzMjRiYmUzMDI", "commit": {"author": {"name": "Vanille-N", "email": "neven.villani@crans.org", "date": "2022-12-02T12:27:41Z"}, "committer": {"name": "Vanille-N", "email": "neven.villani@crans.org", "date": "2022-12-02T12:27:41Z"}, "message": "SbTag -> BorTag everywhere", "tree": {"sha": "598d5570f3bf340612d7304e9e57577f3d117a5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/598d5570f3bf340612d7304e9e57577f3d117a5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a0149343326b5002a2a5623d8f5360324bbe302", "comment_count": 0, "verification": {"verified": false, "reason": "invalid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE1bhy5AfUOHIeWIegAOdl+n9PLt4FAmOJ70UACgkQAOdl+n9P\nLt5qQwv/Yu+04eGFX77y74OPId9kqrrA/QWoOe5IEdxx2GCwD4DliOAvn0oR7Wpo\n0cmAHFArLrjOAr+CLSRMarlVn4YKzncmJQQR7msZC2XKbltLmmpW2bLVdPiRcigU\nkopqDjwJk1RifY+SBVstSY66kgzhOoPWxfbtEJfu9nKqvl1UvGbFOBn9piy9km6f\nLGI8lP1wWuQ/AD8/MZzgrDrbsyMQmJE8G2DkdsmdnrH4NsyuiasaghDEBKD0IBYU\nu2m5yXG6JxW66lNgrMhRERJx/AVJwDfRHz7JFwRCZb9vk/4gCk41JsMHrEGB0KxI\nhCQvpJJLaZIZBmfPWnq5h9DD5nC6dDXwqvabjjZv4SfaSbbV1HbxSs0Og23gAx7z\nOyzO5WMw2Uw0OZqhHupKKHIDVwlgUuFrCcANiNiYZ07PJvd7QWPnona3hYF2c1CP\nzexXdtOUa3mFRwRs9zpF1KSaZ3npG8ybJfJ26JlRH5dKcK6A4za0viiGpEuuiQxB\nej1jYUvs\n=eNCm\n-----END PGP SIGNATURE-----", "payload": "tree 598d5570f3bf340612d7304e9e57577f3d117a5a\nparent 2528f4e6684d68b086179735454d95a6950ef46b\nauthor Vanille-N <neven.villani@crans.org> 1669984061 +0100\ncommitter Vanille-N <neven.villani@crans.org> 1669984061 +0100\n\nSbTag -> BorTag everywhere\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0149343326b5002a2a5623d8f5360324bbe302", "html_url": "https://github.com/rust-lang/rust/commit/3a0149343326b5002a2a5623d8f5360324bbe302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a0149343326b5002a2a5623d8f5360324bbe302/comments", "author": {"login": "Vanille-N", "id": 58042063, "node_id": "MDQ6VXNlcjU4MDQyMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/58042063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vanille-N", "html_url": "https://github.com/Vanille-N", "followers_url": "https://api.github.com/users/Vanille-N/followers", "following_url": "https://api.github.com/users/Vanille-N/following{/other_user}", "gists_url": "https://api.github.com/users/Vanille-N/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vanille-N/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vanille-N/subscriptions", "organizations_url": "https://api.github.com/users/Vanille-N/orgs", "repos_url": "https://api.github.com/users/Vanille-N/repos", "events_url": "https://api.github.com/users/Vanille-N/events{/privacy}", "received_events_url": "https://api.github.com/users/Vanille-N/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vanille-N", "id": 58042063, "node_id": "MDQ6VXNlcjU4MDQyMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/58042063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vanille-N", "html_url": "https://github.com/Vanille-N", "followers_url": "https://api.github.com/users/Vanille-N/followers", "following_url": "https://api.github.com/users/Vanille-N/following{/other_user}", "gists_url": "https://api.github.com/users/Vanille-N/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vanille-N/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vanille-N/subscriptions", "organizations_url": "https://api.github.com/users/Vanille-N/orgs", "repos_url": "https://api.github.com/users/Vanille-N/repos", "events_url": "https://api.github.com/users/Vanille-N/events{/privacy}", "received_events_url": "https://api.github.com/users/Vanille-N/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2528f4e6684d68b086179735454d95a6950ef46b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2528f4e6684d68b086179735454d95a6950ef46b", "html_url": "https://github.com/rust-lang/rust/commit/2528f4e6684d68b086179735454d95a6950ef46b"}], "stats": {"total": 124, "additions": 62, "deletions": 62}, "files": [{"sha": "8d3c5359012249fd58eceae380658b6dc493fe30", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -413,7 +413,7 @@ fn main() {\n                         err\n                     ),\n             };\n-            for id in ids.into_iter().map(miri::SbTag::new) {\n+            for id in ids.into_iter().map(miri::BorTag::new) {\n                 if let Some(id) = id {\n                     miri_config.tracked_pointer_tags.insert(id);\n                 } else {"}, {"sha": "99288480386e1ede3268f16042c7c9b8ebff640d", "filename": "src/tools/miri/src/concurrency/data_race.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -670,7 +670,7 @@ pub struct VClockAlloc {\n }\n \n impl VisitTags for VClockAlloc {\n-    fn visit_tags(&self, _visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, _visit: &mut dyn FnMut(BorTag)) {\n         // No tags here.\n     }\n }\n@@ -1220,7 +1220,7 @@ pub struct GlobalState {\n }\n \n impl VisitTags for GlobalState {\n-    fn visit_tags(&self, _visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, _visit: &mut dyn FnMut(BorTag)) {\n         // We don't have any tags.\n     }\n }"}, {"sha": "9c9d505297c2dd88bb4bff1f4893ca31e79eba68", "filename": "src/tools/miri/src/concurrency/init_once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -45,7 +45,7 @@ pub(super) struct InitOnce<'mir, 'tcx> {\n }\n \n impl<'mir, 'tcx> VisitTags for InitOnce<'mir, 'tcx> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         for waiter in self.waiters.iter() {\n             waiter.callback.visit_tags(visit);\n         }"}, {"sha": "402c9ce6fc9af927e9331eafd3ea9056f7f34c18", "filename": "src/tools/miri/src/concurrency/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fsync.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -181,7 +181,7 @@ pub(crate) struct SynchronizationState<'mir, 'tcx> {\n }\n \n impl<'mir, 'tcx> VisitTags for SynchronizationState<'mir, 'tcx> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         for init_once in self.init_onces.iter() {\n             init_once.visit_tags(visit);\n         }"}, {"sha": "6ba93a13aaf2311a9f317ba23a53a4fcfb1bd170", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -212,7 +212,7 @@ impl<'mir, 'tcx> Thread<'mir, 'tcx> {\n }\n \n impl VisitTags for Thread<'_, '_> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         let Thread {\n             panic_payload,\n             last_error,\n@@ -233,7 +233,7 @@ impl VisitTags for Thread<'_, '_> {\n }\n \n impl VisitTags for Frame<'_, '_, Provenance, FrameData<'_>> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         let Frame {\n             return_place,\n             locals,\n@@ -316,7 +316,7 @@ pub struct ThreadManager<'mir, 'tcx> {\n }\n \n impl VisitTags for ThreadManager<'_, '_> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         let ThreadManager {\n             threads,\n             thread_local_alloc_ids,"}, {"sha": "4c32efcfa3515139785e92e024a2dce8e79b85c7", "filename": "src/tools/miri/src/concurrency/weak_memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -109,7 +109,7 @@ pub struct StoreBufferAlloc {\n }\n \n impl VisitTags for StoreBufferAlloc {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         let Self { store_buffers } = self;\n         for val in store_buffers\n             .borrow()"}, {"sha": "91354d35b2331582294ae0e7bff09a0b3738734c", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -103,7 +103,7 @@ pub struct MiriConfig {\n     /// The seed to use when non-determinism or randomness are required (e.g. ptr-to-int cast, `getrandom()`).\n     pub seed: Option<u64>,\n     /// The stacked borrows pointer ids to report about\n-    pub tracked_pointer_tags: FxHashSet<SbTag>,\n+    pub tracked_pointer_tags: FxHashSet<BorTag>,\n     /// The stacked borrows call IDs to report about\n     pub tracked_call_ids: FxHashSet<CallId>,\n     /// The allocation ids to report about.\n@@ -138,7 +138,7 @@ pub struct MiriConfig {\n     /// The location of a shared object file to load when calling external functions\n     /// FIXME! consider allowing users to specify paths to multiple SO files, or to a directory\n     pub external_so_file: Option<PathBuf>,\n-    /// Run a garbage collector for SbTags every N basic blocks.\n+    /// Run a garbage collector for BorTags every N basic blocks.\n     pub gc_interval: u32,\n     /// The number of CPUs to be reported by miri.\n     pub num_cpus: u32,"}, {"sha": "0f4f489409a08fee9f9c877b65fbbd684173efd8", "filename": "src/tools/miri/src/intptrcast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fintptrcast.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -45,7 +45,7 @@ pub struct GlobalStateInner {\n }\n \n impl VisitTags for GlobalStateInner {\n-    fn visit_tags(&self, _visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, _visit: &mut dyn FnMut(BorTag)) {\n         // Nothing to visit here.\n     }\n }\n@@ -105,7 +105,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n     pub fn expose_ptr(\n         ecx: &mut MiriInterpCx<'mir, 'tcx>,\n         alloc_id: AllocId,\n-        sb: SbTag,\n+        tag: BorTag,\n     ) -> InterpResult<'tcx> {\n         let global_state = ecx.machine.intptrcast.get_mut();\n         // In strict mode, we don't need this, so we can save some cycles by not tracking it."}, {"sha": "7702843728739c837b70fc0ce3f4a355ba3e1c8f", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -147,7 +147,7 @@ pub enum Provenance {\n     Concrete {\n         alloc_id: AllocId,\n         /// Stacked Borrows tag.\n-        sb: SbTag,\n+        tag: BorTag,\n     },\n     Wildcard,\n }\n@@ -173,7 +173,7 @@ impl std::hash::Hash for Provenance {\n /// The \"extra\" information a pointer has over a regular AllocId.\n #[derive(Copy, Clone, PartialEq)]\n pub enum ProvenanceExtra {\n-    Concrete(SbTag),\n+    Concrete(BorTag),\n     Wildcard,\n }\n \n@@ -188,15 +188,15 @@ static_assert_size!(Scalar<Provenance>, 32);\n impl fmt::Debug for Provenance {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         match self {\n-            Provenance::Concrete { alloc_id, sb } => {\n+            Provenance::Concrete { alloc_id, tag } => {\n                 // Forward `alternate` flag to `alloc_id` printing.\n                 if f.alternate() {\n                     write!(f, \"[{alloc_id:#?}]\")?;\n                 } else {\n                     write!(f, \"[{alloc_id:?}]\")?;\n                 }\n                 // Print Stacked Borrows tag.\n-                write!(f, \"{sb:?}\")?;\n+                write!(f, \"{tag:?}\")?;\n             }\n             Provenance::Wildcard => {\n                 write!(f, \"[wildcard]\")?;\n@@ -221,9 +221,9 @@ impl interpret::Provenance for Provenance {\n         match (left, right) {\n             // If both are the *same* concrete tag, that is the result.\n             (\n-                Some(Provenance::Concrete { alloc_id: left_alloc, sb: left_sb }),\n-                Some(Provenance::Concrete { alloc_id: right_alloc, sb: right_sb }),\n-            ) if left_alloc == right_alloc && left_sb == right_sb => left,\n+                Some(Provenance::Concrete { alloc_id: left_alloc, tag: left_tag }),\n+                Some(Provenance::Concrete { alloc_id: right_alloc, tag: right_tag }),\n+            ) if left_alloc == right_alloc && left_tag == right_tag => left,\n             // If one side is a wildcard, the best possible outcome is that it is equal to the other\n             // one, and we use that.\n             (Some(Provenance::Wildcard), o) | (o, Some(Provenance::Wildcard)) => o,\n@@ -243,7 +243,7 @@ impl fmt::Debug for ProvenanceExtra {\n }\n \n impl ProvenanceExtra {\n-    pub fn and_then<T>(self, f: impl FnOnce(SbTag) -> Option<T>) -> Option<T> {\n+    pub fn and_then<T>(self, f: impl FnOnce(BorTag) -> Option<T>) -> Option<T> {\n         match self {\n             ProvenanceExtra::Concrete(pid) => f(pid),\n             ProvenanceExtra::Wildcard => None,\n@@ -463,9 +463,9 @@ pub struct MiriMachine<'mir, 'tcx> {\n     #[cfg(not(target_os = \"linux\"))]\n     pub external_so_lib: Option<!>,\n \n-    /// Run a garbage collector for SbTags every N basic blocks.\n+    /// Run a garbage collector for BorTags every N basic blocks.\n     pub(crate) gc_interval: u32,\n-    /// The number of blocks that passed since the last SbTag GC pass.\n+    /// The number of blocks that passed since the last BorTag GC pass.\n     pub(crate) since_gc: u32,\n     /// The number of CPUs to be reported by miri.\n     pub(crate) num_cpus: u32,\n@@ -656,7 +656,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n }\n \n impl VisitTags for MiriMachine<'_, '_> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         #[rustfmt::skip]\n         let MiriMachine {\n             threads,\n@@ -959,10 +959,10 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n             stacked_borrows.borrow_mut().base_ptr_tag(ptr.provenance, &ecx.machine)\n         } else {\n             // Value does not matter, SB is disabled\n-            SbTag::default()\n+            BorTag::default()\n         };\n         Pointer::new(\n-            Provenance::Concrete { alloc_id: ptr.provenance, sb: sb_tag },\n+            Provenance::Concrete { alloc_id: ptr.provenance, tag },\n             Size::from_bytes(absolute_addr),\n         )\n     }\n@@ -980,8 +980,8 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n         ptr: Pointer<Self::Provenance>,\n     ) -> InterpResult<'tcx> {\n         match ptr.provenance {\n-            Provenance::Concrete { alloc_id, sb } =>\n-                intptrcast::GlobalStateInner::expose_ptr(ecx, alloc_id, sb),\n+            Provenance::Concrete { alloc_id, tag } =>\n+                intptrcast::GlobalStateInner::expose_ptr(ecx, alloc_id, tag),\n             Provenance::Wildcard => {\n                 // No need to do anything for wildcard pointers as\n                 // their provenances have already been previously exposed.\n@@ -999,11 +999,11 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n         let rel = intptrcast::GlobalStateInner::abs_ptr_to_rel(ecx, ptr);\n \n         rel.map(|(alloc_id, size)| {\n-            let sb = match ptr.provenance {\n-                Provenance::Concrete { sb, .. } => ProvenanceExtra::Concrete(sb),\n+            let tag = match ptr.provenance {\n+                Provenance::Concrete { tag, .. } => ProvenanceExtra::Concrete(tag),\n                 Provenance::Wildcard => ProvenanceExtra::Wildcard,\n             };\n-            (alloc_id, size, sb)\n+            (alloc_id, size, tag)\n         })\n     }\n "}, {"sha": "80fb4ff2fe9802e051d61389f3f90c67978bddce", "filename": "src/tools/miri/src/shims/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -37,7 +37,7 @@ pub struct EnvVars<'tcx> {\n }\n \n impl VisitTags for EnvVars<'_> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         let EnvVars { map, environ } = self;\n \n         environ.visit_tags(visit);"}, {"sha": "7c30845dc675677eec626100c5c9a74c39db4e9c", "filename": "src/tools/miri/src/shims/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -36,7 +36,7 @@ pub struct CatchUnwindData<'tcx> {\n }\n \n impl VisitTags for CatchUnwindData<'_> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         let CatchUnwindData { catch_fn, data, dest, ret: _ } = self;\n         catch_fn.visit_tags(visit);\n         data.visit_tags(visit);"}, {"sha": "d263aab351b12e07591210cc85ede4bc60c461c0", "filename": "src/tools/miri/src/shims/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -278,7 +278,7 @@ struct UnblockCallback {\n }\n \n impl VisitTags for UnblockCallback {\n-    fn visit_tags(&self, _visit: &mut dyn FnMut(SbTag)) {}\n+    fn visit_tags(&self, _visit: &mut dyn FnMut(BorTag)) {}\n }\n \n impl<'mir, 'tcx: 'mir> MachineCallback<'mir, 'tcx> for UnblockCallback {"}, {"sha": "54fdf2872ab4d3967c594fba3d30def27840b96f", "filename": "src/tools/miri/src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -208,7 +208,7 @@ impl<'tcx> TlsData<'tcx> {\n }\n \n impl VisitTags for TlsData<'_> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         let TlsData { keys, macos_thread_dtors, next_key: _ } = self;\n \n         for scalar in keys.values().flat_map(|v| v.data.values()) {"}, {"sha": "988627db5611c283c0ee35c8b5e77fe6a97f18e7", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -278,7 +278,7 @@ pub struct FileHandler {\n }\n \n impl VisitTags for FileHandler {\n-    fn visit_tags(&self, _visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, _visit: &mut dyn FnMut(BorTag)) {\n         // All our FileDescriptor do not have any tags.\n     }\n }\n@@ -490,7 +490,7 @@ impl Default for DirHandler {\n }\n \n impl VisitTags for DirHandler {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         let DirHandler { streams, next_id: _ } = self;\n \n         for dir in streams.values() {"}, {"sha": "343232c4bbb2913a247d6c13c622806660ecbb84", "filename": "src/tools/miri/src/shims/unix/linux/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -183,7 +183,7 @@ pub fn futex<'tcx>(\n                     }\n \n                     impl<'tcx> VisitTags for Callback<'tcx> {\n-                        fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+                        fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n                             let Callback { thread: _, addr_usize: _, dest } = self;\n                             dest.visit_tags(visit);\n                         }"}, {"sha": "f9b5774f0090e05ece1d5e2703386a2452091fae", "filename": "src/tools/miri/src/shims/unix/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fsync.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -747,7 +747,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         }\n \n         impl<'tcx> VisitTags for Callback<'tcx> {\n-            fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+            fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n                 let Callback { active_thread: _, mutex_id: _, id: _, dest } = self;\n                 dest.visit_tags(visit);\n             }"}, {"sha": "6b043c6d2c9e1c723d2d242d1ff12e896f3a61c7", "filename": "src/tools/miri/src/shims/windows/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fsync.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -182,7 +182,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 }\n \n                 impl<'tcx> VisitTags for Callback<'tcx> {\n-                    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+                    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n                         let Callback { init_once_id: _, pending_place } = self;\n                         pending_place.visit_tags(visit);\n                     }\n@@ -315,7 +315,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 }\n \n                 impl<'tcx> VisitTags for Callback<'tcx> {\n-                    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+                    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n                         let Callback { thread: _, addr: _, dest } = self;\n                         dest.visit_tags(visit);\n                     }\n@@ -419,7 +419,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             }\n \n             impl<'tcx> VisitTags for Callback<'tcx> {\n-                fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+                fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n                     let Callback { thread: _, condvar_id: _, lock_id: _, mode: _, dest } = self;\n                     dest.visit_tags(visit);\n                 }"}, {"sha": "b460122196a53e676e2286df0eb23fc2c76d9e64", "filename": "src/tools/miri/src/tag_gc.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Ftag_gc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0149343326b5002a2a5623d8f5360324bbe302/src%2Ftools%2Fmiri%2Fsrc%2Ftag_gc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Ftag_gc.rs?ref=3a0149343326b5002a2a5623d8f5360324bbe302", "patch": "@@ -3,53 +3,53 @@ use rustc_data_structures::fx::FxHashSet;\n use crate::*;\n \n pub trait VisitTags {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag));\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag));\n }\n \n impl<T: VisitTags> VisitTags for Option<T> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         if let Some(x) = self {\n             x.visit_tags(visit);\n         }\n     }\n }\n \n impl<T: VisitTags> VisitTags for std::cell::RefCell<T> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         self.borrow().visit_tags(visit)\n     }\n }\n \n-impl VisitTags for SbTag {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+impl VisitTags for BorTag {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         visit(*self)\n     }\n }\n \n impl VisitTags for Provenance {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n-        if let Provenance::Concrete { sb, .. } = self {\n-            visit(*sb);\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n+        if let Provenance::Concrete { tag, .. } = self {\n+            visit(*tag);\n         }\n     }\n }\n \n impl VisitTags for Pointer<Provenance> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         let (prov, _offset) = self.into_parts();\n         prov.visit_tags(visit);\n     }\n }\n \n impl VisitTags for Pointer<Option<Provenance>> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         let (prov, _offset) = self.into_parts();\n         prov.visit_tags(visit);\n     }\n }\n \n impl VisitTags for Scalar<Provenance> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         match self {\n             Scalar::Ptr(ptr, _) => ptr.visit_tags(visit),\n             Scalar::Int(_) => (),\n@@ -58,7 +58,7 @@ impl VisitTags for Scalar<Provenance> {\n }\n \n impl VisitTags for Immediate<Provenance> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         match self {\n             Immediate::Scalar(s) => {\n                 s.visit_tags(visit);\n@@ -73,7 +73,7 @@ impl VisitTags for Immediate<Provenance> {\n }\n \n impl VisitTags for MemPlaceMeta<Provenance> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         match self {\n             MemPlaceMeta::Meta(m) => m.visit_tags(visit),\n             MemPlaceMeta::None => {}\n@@ -82,21 +82,21 @@ impl VisitTags for MemPlaceMeta<Provenance> {\n }\n \n impl VisitTags for MemPlace<Provenance> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         let MemPlace { ptr, meta } = self;\n         ptr.visit_tags(visit);\n         meta.visit_tags(visit);\n     }\n }\n \n impl VisitTags for MPlaceTy<'_, Provenance> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         (**self).visit_tags(visit)\n     }\n }\n \n impl VisitTags for Place<Provenance> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         match self {\n             Place::Ptr(p) => p.visit_tags(visit),\n             Place::Local { .. } => {\n@@ -107,13 +107,13 @@ impl VisitTags for Place<Provenance> {\n }\n \n impl VisitTags for PlaceTy<'_, Provenance> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         (**self).visit_tags(visit)\n     }\n }\n \n impl VisitTags for Operand<Provenance> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         match self {\n             Operand::Immediate(imm) => {\n                 imm.visit_tags(visit);\n@@ -126,7 +126,7 @@ impl VisitTags for Operand<Provenance> {\n }\n \n impl VisitTags for Allocation<Provenance, AllocExtra> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         for prov in self.provenance().provenances() {\n             prov.visit_tags(visit);\n         }\n@@ -136,7 +136,7 @@ impl VisitTags for Allocation<Provenance, AllocExtra> {\n }\n \n impl VisitTags for crate::MiriInterpCx<'_, '_> {\n-    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         // Memory.\n         self.memory.alloc_map().iter(|it| {\n             for (_id, (_kind, alloc)) in it {"}]}