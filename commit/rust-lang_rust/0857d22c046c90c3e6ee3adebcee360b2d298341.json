{"sha": "0857d22c046c90c3e6ee3adebcee360b2d298341", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NTdkMjJjMDQ2YzkwYzNlNmVlM2FkZWJjZWUzNjBiMmQyOTgzNDE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-08T06:03:41Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-08T06:03:41Z"}, "message": "rustc: Print out a real error message on unresolved types. Puts out burning tinderbox.", "tree": {"sha": "931ac195a7d135b9438966f6ee038d67d6895d08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/931ac195a7d135b9438966f6ee038d67d6895d08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0857d22c046c90c3e6ee3adebcee360b2d298341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0857d22c046c90c3e6ee3adebcee360b2d298341", "html_url": "https://github.com/rust-lang/rust/commit/0857d22c046c90c3e6ee3adebcee360b2d298341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0857d22c046c90c3e6ee3adebcee360b2d298341/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddec6b5f472088e26ec81cc829c0b377fef477ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddec6b5f472088e26ec81cc829c0b377fef477ac", "html_url": "https://github.com/rust-lang/rust/commit/ddec6b5f472088e26ec81cc829c0b377fef477ac"}], "stats": {"total": 64, "additions": 37, "deletions": 27}, "files": [{"sha": "3d0c612a085c439e87f502a765b497444098d926", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0857d22c046c90c3e6ee3adebcee360b2d298341/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0857d22c046c90c3e6ee3adebcee360b2d298341/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=0857d22c046c90c3e6ee3adebcee360b2d298341", "patch": "@@ -2537,42 +2537,47 @@ mod unify {\n     // Fixups and substitutions\n \n     fn fixup_vars(ty_ctxt tcx, @var_bindings vb, t typ) -> fixup_result {\n-        fn subst_vars(ty_ctxt tcx, @var_bindings vb, t typ) -> t {\n+        fn subst_vars(ty_ctxt tcx, @var_bindings vb,\n+                      @mutable option::t[int] unresolved, t typ) -> t {\n             alt (struct(tcx, typ)) {\n                 case (ty::ty_var(?vid)) {\n+                    if ((vid as uint) >= ufind::set_count(vb.sets)) {\n+                        *unresolved = some[int](vid);\n+                        ret typ;\n+                    }\n+\n                     auto root_id = ufind::find(vb.sets, vid as uint);\n                     alt (smallintmap::find[t](vb.types, root_id)) {\n                         case (none[t]) {\n-                            log_err \"unresolved type variable\";\n-                            fail;\n+                            *unresolved = some[int](vid);\n+                            ret typ;\n                         }\n                         case (some[t](?rt)) {\n-                            ret fold_ty(tcx, bind subst_vars(tcx, vb, _), rt);\n+                            ret fold_ty(tcx,\n+                                bind subst_vars(tcx, vb, unresolved, _), rt);\n                         }\n                     }\n                 }\n                 case (_) { ret typ; }\n             }\n         }\n \n-        // FIXME: Report errors better.\n-        ret fix_ok(fold_ty(tcx, bind subst_vars(tcx, vb, _), typ));\n+        auto unresolved = @mutable none[int];\n+        auto rty = fold_ty(tcx, bind subst_vars(tcx, vb, unresolved, _), typ);\n+\n+        auto ur = *unresolved;\n+        alt (ur) {\n+            case (none[int]) { ret fix_ok(rty); }\n+            case (some[int](?var_id)) { ret fix_err(var_id); }\n+        }\n     }\n \n-    fn resolve_type_var(&ty_ctxt tcx, &@var_bindings vb, int vid) -> t {\n+    fn resolve_type_var(&ty_ctxt tcx, &@var_bindings vb, int vid)\n+            -> fixup_result {\n         auto root_id = ufind::find(vb.sets, vid as uint);\n         alt (smallintmap::find[t](vb.types, root_id)) {\n-            case (none[t]) { ret mk_var(tcx, vid); }\n-            case (some[t](?rt)) {\n-                alt (fixup_vars(tcx, vb, rt)) {\n-                    case (fix_ok(?rty)) { ret rty; }\n-                    case (fix_err(_)) {\n-                        // TODO: antisocial\n-                        log_err \"failed to resolve type var\";\n-                        fail;\n-                    }\n-                }\n-            }\n+            case (none[t]) { ret fix_ok(mk_var(tcx, vid)); }\n+            case (some[t](?rt)) { ret fixup_vars(tcx, vb, rt); }\n         }\n     }\n }"}, {"sha": "db3f3ede0c7012674e84d31575ef7ca7f1ce5d1c", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0857d22c046c90c3e6ee3adebcee360b2d298341/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0857d22c046c90c3e6ee3adebcee360b2d298341/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=0857d22c046c90c3e6ee3adebcee360b2d298341", "patch": "@@ -1387,11 +1387,8 @@ mod writeback {\n         alt (ty::unify::fixup_vars(fcx.ccx.tcx, fcx.var_bindings, typ)) {\n             case (fix_ok(?new_type)) { ret new_type; }\n             case (fix_err(?vid)) {\n-                // TODO: We should try to do a variable ID -> local lookup if\n-                // we can and display this in terms of the local that had an\n-                // incomplete type.\n-                fcx.ccx.tcx.sess.span_err(sp, #fmt(\n-                    \"cannot determine type of variable ID `%d`\", vid));\n+                fcx.ccx.tcx.sess.span_err(sp,\n+                    \"cannot determine a type for this expression\");\n             }\n         }\n     }\n@@ -1434,11 +1431,19 @@ mod writeback {\n     fn visit_decl_pre(@fn_ctxt fcx, &@ast::decl d) {\n         alt (d.node) {\n             case (ast::decl_local(?l)) {\n-                // FIXME: Report errors better.\n                 auto var_id = fcx.locals.get(l.id);\n-                auto lty = ty::unify::resolve_type_var(fcx.ccx.tcx,\n+                auto fix_rslt = ty::unify::resolve_type_var(fcx.ccx.tcx,\n                     fcx.var_bindings, var_id);\n-                write::ty_only(fcx.ccx.tcx, l.ann.id, lty);\n+                alt (fix_rslt) {\n+                    case (fix_ok(?lty)) {\n+                        write::ty_only(fcx.ccx.tcx, l.ann.id, lty);\n+                    }\n+                    case (fix_err(_)) {\n+                        fcx.ccx.tcx.sess.span_err(d.span,\n+                            \"cannot determine a type for this local \" +\n+                            \"variable\");\n+                    }\n+                }\n             }\n             case (_) { /* no-op */ }\n         }"}, {"sha": "b492f103c2034e0950aad0d5928f71e755f00d7a", "filename": "src/test/compile-fail/vector-no-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0857d22c046c90c3e6ee3adebcee360b2d298341/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0857d22c046c90c3e6ee3adebcee360b2d298341/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs?ref=0857d22c046c90c3e6ee3adebcee360b2d298341", "patch": "@@ -1,6 +1,6 @@\n // xfail-stage0\n \n-// error-pattern:Ambiguous type\n+// error-pattern:cannot determine a type\n fn main() -> () {\n   auto foo = [];\n }"}]}