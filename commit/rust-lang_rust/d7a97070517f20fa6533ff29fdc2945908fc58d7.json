{"sha": "d7a97070517f20fa6533ff29fdc2945908fc58d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YTk3MDcwNTE3ZjIwZmE2NTMzZmYyOWZkYzI5NDU5MDhmYzU4ZDc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-09-10T12:11:25Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-09-10T12:34:43Z"}, "message": "Add missing examples on core traits' method", "tree": {"sha": "3fcb793203de6ee8a486081471d5d098b1f871f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fcb793203de6ee8a486081471d5d098b1f871f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a97070517f20fa6533ff29fdc2945908fc58d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a97070517f20fa6533ff29fdc2945908fc58d7", "html_url": "https://github.com/rust-lang/rust/commit/d7a97070517f20fa6533ff29fdc2945908fc58d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a97070517f20fa6533ff29fdc2945908fc58d7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02fe30971ef397bcff3460a9aaf175e0810c2c90", "url": "https://api.github.com/repos/rust-lang/rust/commits/02fe30971ef397bcff3460a9aaf175e0810c2c90", "html_url": "https://github.com/rust-lang/rust/commit/02fe30971ef397bcff3460a9aaf175e0810c2c90"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "bdf93baa1b8f9acf5181247807e9c36a9b24e675", "filename": "library/core/src/ops/arith.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/d7a97070517f20fa6533ff29fdc2945908fc58d7/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a97070517f20fa6533ff29fdc2945908fc58d7/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Farith.rs?ref=d7a97070517f20fa6533ff29fdc2945908fc58d7", "patch": "@@ -78,6 +78,12 @@ pub trait Add<Rhs = Self> {\n     type Output;\n \n     /// Performs the `+` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// assert_eq!(12 + 1, 13);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn add(self, rhs: Rhs) -> Self::Output;\n@@ -178,6 +184,12 @@ pub trait Sub<Rhs = Self> {\n     type Output;\n \n     /// Performs the `-` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// assert_eq!(12 - 1, 11);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn sub(self, rhs: Rhs) -> Self::Output;\n@@ -300,6 +312,12 @@ pub trait Mul<Rhs = Self> {\n     type Output;\n \n     /// Performs the `*` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// assert_eq!(12 * 2, 24);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn mul(self, rhs: Rhs) -> Self::Output;\n@@ -426,6 +444,12 @@ pub trait Div<Rhs = Self> {\n     type Output;\n \n     /// Performs the `/` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// assert_eq!(12 / 2, 6);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn div(self, rhs: Rhs) -> Self::Output;\n@@ -513,6 +537,12 @@ pub trait Rem<Rhs = Self> {\n     type Output;\n \n     /// Performs the `%` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// assert_eq!(12 % 10, 2);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn rem(self, rhs: Rhs) -> Self::Output;\n@@ -612,6 +642,13 @@ pub trait Neg {\n     type Output;\n \n     /// Performs the unary `-` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let x: i32 = 12;\n+    /// assert_eq!(-x, -12);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn neg(self) -> Self::Output;\n@@ -673,6 +710,14 @@ neg_impl! { isize i8 i16 i32 i64 i128 f32 f64 }\n #[doc(alias = \"+=\")]\n pub trait AddAssign<Rhs = Self> {\n     /// Performs the `+=` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut x: u32 = 12;\n+    /// x += 1;\n+    /// assert_eq!(x, 13);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn add_assign(&mut self, rhs: Rhs);\n }\n@@ -731,6 +776,14 @@ add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[doc(alias = \"-=\")]\n pub trait SubAssign<Rhs = Self> {\n     /// Performs the `-=` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut x: u32 = 12;\n+    /// x -= 1;\n+    /// assert_eq!(x, 11);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn sub_assign(&mut self, rhs: Rhs);\n }\n@@ -780,6 +833,14 @@ sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[doc(alias = \"*=\")]\n pub trait MulAssign<Rhs = Self> {\n     /// Performs the `*=` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut x: u32 = 12;\n+    /// x *= 2;\n+    /// assert_eq!(x, 24);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn mul_assign(&mut self, rhs: Rhs);\n }\n@@ -829,6 +890,14 @@ mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[doc(alias = \"/=\")]\n pub trait DivAssign<Rhs = Self> {\n     /// Performs the `/=` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut x: u32 = 12;\n+    /// x /= 2;\n+    /// assert_eq!(x, 6);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn div_assign(&mut self, rhs: Rhs);\n }\n@@ -881,6 +950,14 @@ div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[doc(alias = \"%=\")]\n pub trait RemAssign<Rhs = Self> {\n     /// Performs the `%=` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut x: u32 = 12;\n+    /// x %= 10;\n+    /// assert_eq!(x, 2);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn rem_assign(&mut self, rhs: Rhs);\n }"}]}