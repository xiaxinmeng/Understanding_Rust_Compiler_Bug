{"sha": "649fc3895cecb1e277a6703ad4a1a60b2d7a9f98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0OWZjMzg5NWNlY2IxZTI3N2E2NzAzYWQ0YTFhNjBiMmQ3YTlmOTg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-09T19:34:15Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-09T19:34:15Z"}, "message": "Use enum ParsePub instead of bool in field parsing + typo", "tree": {"sha": "507f217a9e43d6290857b82ab72bd8681286e6c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/507f217a9e43d6290857b82ab72bd8681286e6c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/649fc3895cecb1e277a6703ad4a1a60b2d7a9f98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/649fc3895cecb1e277a6703ad4a1a60b2d7a9f98", "html_url": "https://github.com/rust-lang/rust/commit/649fc3895cecb1e277a6703ad4a1a60b2d7a9f98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/649fc3895cecb1e277a6703ad4a1a60b2d7a9f98/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a01e263bcb2d826f2a398b4c34b59485a201274", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a01e263bcb2d826f2a398b4c34b59485a201274", "html_url": "https://github.com/rust-lang/rust/commit/2a01e263bcb2d826f2a398b4c34b59485a201274"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "c579a2c9c0aee9825aaae00c3c8d912175f03703", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/649fc3895cecb1e277a6703ad4a1a60b2d7a9f98/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649fc3895cecb1e277a6703ad4a1a60b2d7a9f98/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=649fc3895cecb1e277a6703ad4a1a60b2d7a9f98", "patch": "@@ -867,8 +867,8 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                 self.context.span_handler.span_err(span, \"empty tuple structs and enum variants \\\n                                                           are not allowed, use unit structs and \\\n                                                           enum variants instead\");\n-                self.context.span_handler.span_help(span, \"remove trailing () to make a unit \\\n-                                                           struct or unit enum varian\");\n+                self.context.span_handler.span_help(span, \"remove trailing `()` to make a unit \\\n+                                                           struct or unit enum variant\");\n             }\n         }\n         visit::walk_struct_def(self, s)"}, {"sha": "fde1058a785c0466147941e0a91eaba39729a675", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/649fc3895cecb1e277a6703ad4a1a60b2d7a9f98/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649fc3895cecb1e277a6703ad4a1a60b2d7a9f98/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=649fc3895cecb1e277a6703ad4a1a60b2d7a9f98", "patch": "@@ -113,6 +113,13 @@ pub enum BoundParsingMode {\n     Modified,\n }\n \n+/// `pub` should be parsed in struct fields and not parsed in variant fields\n+#[derive(Clone, Copy, PartialEq)]\n+pub enum ParsePub {\n+    Yes,\n+    No,\n+}\n+\n /// Possibly accept an `token::Interpolated` expression (a pre-parsed expression\n /// dropped into the token stream, which happens while parsing the result of\n /// macro expansion). Placement of these is not as complex as I feared it would\n@@ -4686,17 +4693,19 @@ impl<'a> Parser<'a> {\n                 VariantData::Unit(ast::DUMMY_NODE_ID)\n             } else {\n                 // If we see: `struct Foo<T> where T: Copy { ... }`\n-                VariantData::Struct(try!(self.parse_record_struct_body(true)), ast::DUMMY_NODE_ID)\n+                VariantData::Struct(try!(self.parse_record_struct_body(ParsePub::Yes)),\n+                                    ast::DUMMY_NODE_ID)\n             }\n         // No `where` so: `struct Foo<T>;`\n         } else if try!(self.eat(&token::Semi) ){\n             VariantData::Unit(ast::DUMMY_NODE_ID)\n         // Record-style struct definition\n         } else if self.token == token::OpenDelim(token::Brace) {\n-            VariantData::Struct(try!(self.parse_record_struct_body(true)), ast::DUMMY_NODE_ID)\n+            VariantData::Struct(try!(self.parse_record_struct_body(ParsePub::Yes)),\n+                                ast::DUMMY_NODE_ID)\n         // Tuple-style struct definition with optional where-clause.\n         } else if self.token == token::OpenDelim(token::Paren) {\n-            let body = VariantData::Tuple(try!(self.parse_tuple_struct_body(true)),\n+            let body = VariantData::Tuple(try!(self.parse_tuple_struct_body(ParsePub::Yes)),\n                                           ast::DUMMY_NODE_ID);\n             generics.where_clause = try!(self.parse_where_clause());\n             try!(self.expect(&token::Semi));\n@@ -4710,11 +4719,11 @@ impl<'a> Parser<'a> {\n         Ok((class_name, ItemStruct(vdata, generics), None))\n     }\n \n-    pub fn parse_record_struct_body(&mut self, allow_pub: bool) -> PResult<Vec<StructField>> {\n+    pub fn parse_record_struct_body(&mut self, parse_pub: ParsePub) -> PResult<Vec<StructField>> {\n         let mut fields = Vec::new();\n         if try!(self.eat(&token::OpenDelim(token::Brace)) ){\n             while self.token != token::CloseDelim(token::Brace) {\n-                fields.push(try!(self.parse_struct_decl_field(allow_pub)));\n+                fields.push(try!(self.parse_struct_decl_field(parse_pub)));\n             }\n \n             try!(self.bump());\n@@ -4728,7 +4737,7 @@ impl<'a> Parser<'a> {\n         Ok(fields)\n     }\n \n-    pub fn parse_tuple_struct_body(&mut self, allow_pub: bool) -> PResult<Vec<StructField>> {\n+    pub fn parse_tuple_struct_body(&mut self, parse_pub: ParsePub) -> PResult<Vec<StructField>> {\n         // This is the case where we find `struct Foo<T>(T) where T: Copy;`\n         // Unit like structs are handled in parse_item_struct function\n         let fields = try!(self.parse_unspanned_seq(\n@@ -4740,7 +4749,11 @@ impl<'a> Parser<'a> {\n                 let lo = p.span.lo;\n                 let struct_field_ = ast::StructField_ {\n                     kind: UnnamedField (\n-                        if allow_pub { try!(p.parse_visibility()) } else { Inherited }\n+                        if parse_pub == ParsePub::Yes {\n+                            try!(p.parse_visibility())\n+                        } else {\n+                            Inherited\n+                        }\n                     ),\n                     id: ast::DUMMY_NODE_ID,\n                     ty: try!(p.parse_ty_sum()),\n@@ -4776,12 +4789,12 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse an element of a struct definition\n-    fn parse_struct_decl_field(&mut self, allow_pub: bool) -> PResult<StructField> {\n+    fn parse_struct_decl_field(&mut self, parse_pub: ParsePub) -> PResult<StructField> {\n \n         let attrs = try!(self.parse_outer_attributes());\n \n         if try!(self.eat_keyword(keywords::Pub) ){\n-            if !allow_pub {\n+            if parse_pub == ParsePub::No {\n                 let span = self.last_span;\n                 self.span_err(span, \"`pub` is not allowed here\");\n             }\n@@ -5149,11 +5162,11 @@ impl<'a> Parser<'a> {\n             if self.check(&token::OpenDelim(token::Brace)) {\n                 // Parse a struct variant.\n                 all_nullary = false;\n-                struct_def = VariantData::Struct(try!(self.parse_record_struct_body(false)),\n+                struct_def = VariantData::Struct(try!(self.parse_record_struct_body(ParsePub::No)),\n                                                  ast::DUMMY_NODE_ID);\n             } else if self.check(&token::OpenDelim(token::Paren)) {\n                 all_nullary = false;\n-                struct_def = VariantData::Tuple(try!(self.parse_tuple_struct_body(false)),\n+                struct_def = VariantData::Tuple(try!(self.parse_tuple_struct_body(ParsePub::No)),\n                                                 ast::DUMMY_NODE_ID);\n             } else if try!(self.eat(&token::Eq) ){\n                 disr_expr = Some(try!(self.parse_expr_nopanic()));"}, {"sha": "e005de01649a53743da373fbf7689a71fc116014", "filename": "src/test/compile-fail/issue-12560-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/649fc3895cecb1e277a6703ad4a1a60b2d7a9f98/src%2Ftest%2Fcompile-fail%2Fissue-12560-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649fc3895cecb1e277a6703ad4a1a60b2d7a9f98/src%2Ftest%2Fcompile-fail%2Fissue-12560-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12560-1.rs?ref=649fc3895cecb1e277a6703ad4a1a60b2d7a9f98", "patch": "@@ -14,9 +14,9 @@\n \n enum Foo {\n     Bar(), //~ ERROR empty tuple structs and enum variants are not allowed\n-    //~^ HELP remove trailing () to make a unit struct or unit enum varian\n+    //~^ HELP remove trailing `()` to make a unit struct or unit enum variant\n     Baz(), //~ ERROR empty tuple structs and enum variants are not allowed\n-    //~^ HELP remove trailing () to make a unit struct or unit enum varian\n+    //~^ HELP remove trailing `()` to make a unit struct or unit enum variant\n     Bazar\n }\n "}]}