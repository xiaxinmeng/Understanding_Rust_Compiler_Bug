{"sha": "9b5b514c8dfe241fe88420c668eb040e2c36c686", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNWI1MTRjOGRmZTI0MWZlODg0MjBjNjY4ZWIwNDBlMmMzNmM2ODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-13T11:24:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-13T11:24:24Z"}, "message": "Auto merge of #42576 - nikomatsakis:incr-comp-less-tasks, r=michaelwoerister\n\nprune some tasks and depnode variants\n\nPick some low-hanging fruit towards the goal of removing the older tasks.\n\nr? @michaelwoerister", "tree": {"sha": "a248c8155c82d81c579f32673c15a336107fdbb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a248c8155c82d81c579f32673c15a336107fdbb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b5b514c8dfe241fe88420c668eb040e2c36c686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5b514c8dfe241fe88420c668eb040e2c36c686", "html_url": "https://github.com/rust-lang/rust/commit/9b5b514c8dfe241fe88420c668eb040e2c36c686", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b5b514c8dfe241fe88420c668eb040e2c36c686/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9adf969cd8f7657a31a260e8b736d212a4d2ab53", "url": "https://api.github.com/repos/rust-lang/rust/commits/9adf969cd8f7657a31a260e8b736d212a4d2ab53", "html_url": "https://github.com/rust-lang/rust/commit/9adf969cd8f7657a31a260e8b736d212a4d2ab53"}, {"sha": "36973f743fa5155382ff92e482a9ebdaf6a710a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/36973f743fa5155382ff92e482a9ebdaf6a710a3", "html_url": "https://github.com/rust-lang/rust/commit/36973f743fa5155382ff92e482a9ebdaf6a710a3"}], "stats": {"total": 278, "additions": 61, "deletions": 217}, "files": [{"sha": "c747c443b3a4ab76215e96853862963167836e28", "filename": "src/librustc/dep_graph/README.md", "status": "modified", "additions": 4, "deletions": 133, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Flibrustc%2Fdep_graph%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Flibrustc%2Fdep_graph%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2FREADME.md?ref=9b5b514c8dfe241fe88420c668eb040e2c36c686", "patch": "@@ -18,7 +18,7 @@ one of three things:\n 1. HIR nodes (like `Hir(DefId)`) represent the HIR input itself.\n 2. Data nodes (like `ItemSignature(DefId)`) represent some computed\n    information about a particular item.\n-3. Procedure notes (like `CoherenceCheckImpl(DefId)`) represent some\n+3. Procedure nodes (like `CoherenceCheckTrait(DefId)`) represent some\n    procedure that is executing. Usually this procedure is\n    performing some kind of check for errors. You can think of them as\n    computed values where the value being computed is `()` (and the\n@@ -57,139 +57,10 @@ recompile that item for sure. But we need the dep tracking map to tell\n us what *else* we have to recompile. Shared state is anything that is\n used to communicate results from one item to another.\n \n-### Identifying the current task\n+### Identifying the current task, tracking reads/writes, etc\n \n-The dep graph always tracks a current task: this is basically the\n-`DepNode` that the compiler is computing right now. Typically it would\n-be a procedure node, but it can also be a data node (as noted above,\n-the two are kind of equivalent).\n-\n-You set the current task by calling `dep_graph.in_task(node)`. For example:\n-\n-```rust\n-let _task = tcx.dep_graph.in_task(DepNode::Privacy);\n-```\n-\n-Now all the code until `_task` goes out of scope will be considered\n-part of the \"privacy task\".\n-\n-The tasks are maintained in a stack, so it is perfectly fine to nest\n-one task within another. Because pushing a task is considered to be\n-computing a value, when you nest a task `N2` inside of a task `N1`, we\n-automatically add an edge `N2 -> N1` (since `N1` presumably needed the\n-result of `N2` to complete):\n-\n-```rust\n-let _n1 = tcx.dep_graph.in_task(DepNode::N1);\n-let _n2 = tcx.dep_graph.in_task(DepNode::N2);\n-// this will result in an edge N1 -> n2\n-```\n-\n-### Ignore tasks\n-\n-Although it is rarely needed, you can also push a special \"ignore\"\n-task:\n-\n-```rust\n-let _ignore = tc.dep_graph.in_ignore();\n-```\n-\n-This will cause all read/write edges to be ignored until it goes out\n-of scope or until something else is pushed. For example, we could\n-suppress the edge between nested tasks like so:\n-\n-```rust\n-let _n1 = tcx.dep_graph.in_task(DepNode::N1);\n-let _ignore = tcx.dep_graph.in_ignore();\n-let _n2 = tcx.dep_graph.in_task(DepNode::N2);\n-// now no edge is added\n-```\n-\n-### Tracking reads and writes\n-\n-We need to identify what shared state is read/written by the current\n-task as it executes. The most fundamental way of doing that is to invoke\n-the `read` and `write` methods on `DepGraph`:\n-\n-```rust\n-// Adds an edge from DepNode::Hir(some_def_id) to the current task\n-tcx.dep_graph.read(DepNode::Hir(some_def_id))\n-\n-// Adds an edge from the current task to DepNode::ItemSignature(some_def_id)\n-tcx.dep_graph.write(DepNode::ItemSignature(some_def_id))\n-```\n-\n-However, you should rarely need to invoke those methods directly.\n-Instead, the idea is to *encapsulate* shared state into some API that\n-will invoke `read` and `write` automatically. The most common way to\n-do this is to use a `DepTrackingMap`, described in the next section,\n-but any sort of abstraction barrier will do. In general, the strategy\n-is that getting access to information implicitly adds an appropriate\n-`read`. So, for example, when you use the\n-`dep_graph::visit_all_items_in_krate` helper method, it will visit\n-each item `X`, start a task `Foo(X)` for that item, and automatically\n-add an edge `Hir(X) -> Foo(X)`. This edge is added because the code is\n-being given access to the HIR node for `X`, and hence it is expected\n-to read from it. Similarly, reading from the `tcache` map for item `X`\n-(which is a `DepTrackingMap`, described below) automatically invokes\n-`dep_graph.read(ItemSignature(X))`.\n-\n-**Note:** adding `Hir` nodes requires a bit of caution due to the\n-\"inlining\" that old trans and constant evaluation still use. See the\n-section on inlining below.\n-\n-To make this strategy work, a certain amount of indirection is\n-required. For example, modules in the HIR do not have direct pointers\n-to the items that they contain. Rather, they contain node-ids -- one\n-can then ask the HIR map for the item with a given node-id. This gives\n-us an opportunity to add an appropriate read edge.\n-\n-#### Explicit calls to read and write when starting a new subtask\n-\n-One time when you *may* need to call `read` and `write` directly is\n-when you push a new task onto the stack, either by calling `in_task`\n-as shown above or indirectly, such as with the `memoize` pattern\n-described below. In that case, any data that the task has access to\n-from the surrounding environment must be explicitly \"read\". For\n-example, in `librustc_typeck`, the collection code visits all items\n-and, among other things, starts a subtask producing its signature\n-(what follows is simplified pseudocode, of course):\n-\n-```rust\n-fn visit_item(item: &hir::Item) {\n-    // Here, current subtask is \"Collect(X)\", and an edge Hir(X) -> Collect(X)\n-    // has automatically been added by `visit_all_items_in_krate`.\n-    let sig = signature_of_item(item);\n-}\n-\n-fn signature_of_item(item: &hir::Item) {\n-    let def_id = tcx.map.local_def_id(item.id);\n-    let task = tcx.dep_graph.in_task(DepNode::ItemSignature(def_id));\n-    tcx.dep_graph.read(DepNode::Hir(def_id)); // <-- the interesting line\n-    ...\n-}\n-```\n-\n-Here you can see that, in `signature_of_item`, we started a subtask\n-corresponding to producing the `ItemSignature`. This subtask will read from\n-`item` -- but it gained access to `item` implicitly. This means that if it just\n-reads from `item`, there would be missing edges in the graph:\n-\n-    Hir(X) --+ // added by the explicit call to `read`\n-      |      |\n-      |      +---> ItemSignature(X) -> Collect(X)\n-      |                                 ^\n-      |                                 |\n-      +---------------------------------+ // added by `visit_all_items_in_krate`\n-\n-In particular, the edge from `Hir(X)` to `ItemSignature(X)` is only\n-present because we called `read` ourselves when entering the `ItemSignature(X)`\n-task.\n-\n-So, the rule of thumb: when entering a new task yourself, register\n-reads on any shared state that you inherit. (This actually comes up\n-fairly infrequently though: the main place you need caution is around\n-memoization.)\n+FIXME(#42293). This text needs to be rewritten for the new red-green\n+system, which doesn't fully exist yet.\n \n #### Dependency tracking map\n "}, {"sha": "fda29ca73662816b63adb0ce43b9666aadf238ab", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=9b5b514c8dfe241fe88420c668eb040e2c36c686", "patch": "@@ -315,15 +315,10 @@ define_dep_nodes!(\n     Coherence,\n     Resolve,\n     CoherenceCheckTrait(DefId),\n-    CoherenceCheckImpl(DefId),\n-    CoherenceOverlapCheck(DefId),\n-    CoherenceOverlapCheckSpecial(DefId),\n-    Variance,\n     PrivacyAccessLevels(CrateNum),\n \n     // Represents the MIR for a fn; also used as the task node for\n     // things read/modify that MIR.\n-    MirKrate,\n     Mir(DefId),\n     MirShim(DefIdList),\n \n@@ -332,8 +327,6 @@ define_dep_nodes!(\n     RvalueCheck(DefId),\n     Reachability,\n     MirKeys,\n-    LateLintCheck,\n-    TransCrateItem(DefId),\n     TransWriteMetadata,\n     CrateVariances,\n \n@@ -355,7 +348,6 @@ define_dep_nodes!(\n     InherentImpls(DefId),\n     TypeckBodiesKrate,\n     TypeckTables(DefId),\n-    UsedTraitImports(DefId),\n     ConstEval(DefId),\n     SymbolName(DefId),\n     SpecializationGraph(DefId),"}, {"sha": "a9e0ef511024fbed412ab4b8ec4fa4521d207ad5", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=9b5b514c8dfe241fe88420c668eb040e2c36c686", "patch": "@@ -25,7 +25,6 @@\n //! for all lint attributes.\n use self::TargetLint::*;\n \n-use dep_graph::{DepNode, DepKind};\n use middle::privacy::AccessLevels;\n use traits::Reveal;\n use ty::{self, TyCtxt};\n@@ -1341,8 +1340,6 @@ fn check_lint_name_cmdline(sess: &Session, lint_cx: &LintStore,\n ///\n /// Consumes the `lint_store` field of the `Session`.\n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let _task = tcx.dep_graph.in_task(DepNode::new_no_params(DepKind::LateLintCheck));\n-\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     let krate = tcx.hir.krate();"}, {"sha": "13e46a265c6953c6d6305910975cb274ea6ba49c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9b5b514c8dfe241fe88420c668eb040e2c36c686", "patch": "@@ -944,7 +944,9 @@ impl<'tcx> TraitPredicate<'tcx> {\n             self.input_types()\n                 .flat_map(|t| t.walk())\n                 .filter_map(|t| match t.sty {\n-                    ty::TyAdt(adt_def, _) => Some(adt_def.did),\n+                    ty::TyAdt(adt_def, ..) => Some(adt_def.did),\n+                    ty::TyClosure(def_id, ..) => Some(def_id),\n+                    ty::TyFnDef(def_id, ..) => Some(def_id),\n                     _ => None\n                 })\n                 .next()"}, {"sha": "f7b6b7376d1fa09610a8f556fe1edfbab25dd4f8", "filename": "src/librustc_incremental/persist/preds/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fmod.rs?ref=9b5b514c8dfe241fe88420c668eb040e2c36c686", "patch": "@@ -57,8 +57,7 @@ impl<'q> Predecessors<'q> {\n                 }\n                 // if -Z query-dep-graph is passed, save more extended data\n                 // to enable better unit testing\n-                DepKind::TypeckTables |\n-                DepKind::TransCrateItem => tcx.sess.opts.debugging_opts.query_dep_graph,\n+                DepKind::TypeckTables => tcx.sess.opts.debugging_opts.query_dep_graph,\n \n                 _ => false,\n             }"}, {"sha": "0dc2bc85e30e63d4722daf3d5eedf2acb812eb34", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=9b5b514c8dfe241fe88420c668eb040e2c36c686", "patch": "@@ -23,7 +23,6 @@ use common;\n use declare;\n use llvm;\n use monomorphize::Instance;\n-use rustc::dep_graph::DepKind;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n@@ -63,22 +62,9 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                   self.to_raw_string(),\n                   ccx.codegen_unit().name());\n \n-        // (*) This code executes in the context of a dep-node for the\n-        // entire CGU. In some cases, we introduce dep-nodes for\n-        // particular items that we are translating (these nodes will\n-        // have read edges coming into the CGU node). These smaller\n-        // nodes are not needed for correctness -- we always\n-        // invalidate an entire CGU at a time -- but they enable\n-        // finer-grained testing, since you can write tests that check\n-        // that the incoming edges to a particular fn are from a\n-        // particular set.\n-\n         match *self {\n             TransItem::Static(node_id) => {\n                 let tcx = ccx.tcx();\n-                let def_id = tcx.hir.local_def_id(node_id);\n-                let dep_node = def_id.to_dep_node(tcx, DepKind::TransCrateItem);\n-                let _task = ccx.tcx().dep_graph.in_task(dep_node); // (*)\n                 let item = tcx.hir.expect_item(node_id);\n                 if let hir::ItemStatic(_, m, _) = item.node {\n                     match consts::trans_static(&ccx, m, item.id, &item.attrs) {\n@@ -100,10 +86,6 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                 }\n             }\n             TransItem::Fn(instance) => {\n-                let _task = ccx.tcx().dep_graph.in_task(\n-                    instance.def_id()\n-                            .to_dep_node(ccx.tcx(), DepKind::TransCrateItem)); // (*)\n-\n                 base::trans_instance(&ccx, instance);\n             }\n         }"}, {"sha": "59ebae16d08ca9364406261cf17f55607e672309", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=9b5b514c8dfe241fe88420c668eb040e2c36c686", "patch": "@@ -15,7 +15,6 @@\n use rustc::traits;\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n use syntax::ast;\n-use rustc::dep_graph::DepKind;\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n@@ -38,10 +37,6 @@ pub fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n         return\n     }\n \n-    let _task =\n-      tcx.dep_graph.in_task(trait_def_id.to_dep_node(tcx,\n-                                                     DepKind::CoherenceOverlapCheck));\n-\n     // Trigger building the specialization graph for the trait of this impl.\n     // This will detect any overlap errors.\n     tcx.specialization_graph_of(trait_def_id);"}, {"sha": "007a80008a84acd56d69343d22ca8044b3b012b4", "filename": "src/test/compile-fail/dep-graph-assoc-type-trans.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fcompile-fail%2Fdep-graph-assoc-type-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fcompile-fail%2Fdep-graph-assoc-type-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-assoc-type-trans.rs?ref=9b5b514c8dfe241fe88420c668eb040e2c36c686", "patch": "@@ -36,7 +36,6 @@ mod y {\n     use Foo;\n \n     #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n-    #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn use_char_assoc() {\n         // Careful here: in the representation, <char as Foo>::T gets\n         // normalized away, so at a certain point we had no edge to"}, {"sha": "222c197200556ee3248421a340977148929300ec", "filename": "src/test/compile-fail/dep-graph-caller-callee.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fcompile-fail%2Fdep-graph-caller-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fcompile-fail%2Fdep-graph-caller-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-caller-callee.rs?ref=9b5b514c8dfe241fe88420c668eb040e2c36c686", "patch": "@@ -28,7 +28,6 @@ mod y {\n \n     // These dependencies SHOULD exist:\n     #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n-    #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn y() {\n         x::x();\n     }\n@@ -40,7 +39,6 @@ mod z {\n     // These are expected to yield errors, because changes to `x`\n     // affect the BODY of `y`, but not its signature.\n     #[rustc_then_this_would_need(TypeckTables)] //~ ERROR no path\n-    #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR no path\n     pub fn z() {\n         y::y();\n     }"}, {"sha": "85b3e69065d9b33ef2b5933a90b628d08492d22c", "filename": "src/test/compile-fail/dep-graph-trait-impl.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl.rs?ref=9b5b514c8dfe241fe88420c668eb040e2c36c686", "patch": "@@ -35,25 +35,21 @@ mod y {\n     use Foo;\n \n     #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n-    #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn with_char() {\n         char::method('a');\n     }\n \n     #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n-    #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn take_foo_with_char() {\n         take_foo::<char>('a');\n     }\n \n     #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n-    #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn with_u32() {\n         u32::method(22);\n     }\n \n     #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n-    #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn take_foo_with_u32() {\n         take_foo::<u32>(22);\n     }\n@@ -67,7 +63,6 @@ mod z {\n     // These are expected to yield errors, because changes to `x`\n     // affect the BODY of `y`, but not its signature.\n     #[rustc_then_this_would_need(TypeckTables)] //~ ERROR no path\n-    #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR no path\n     pub fn z() {\n         y::with_char();\n         y::with_u32();"}, {"sha": "079f2b52fd462a21c1107363fdca4636b34d6736", "filename": "src/test/compile-fail/dep-graph-unrelated.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9adf969cd8f7657a31a260e8b736d212a4d2ab53/src%2Ftest%2Fcompile-fail%2Fdep-graph-unrelated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9adf969cd8f7657a31a260e8b736d212a4d2ab53/src%2Ftest%2Fcompile-fail%2Fdep-graph-unrelated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-unrelated.rs?ref=9adf969cd8f7657a31a260e8b736d212a4d2ab53", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that two unrelated functions have no trans dependency.\n-\n-// compile-flags: -Z query-dep-graph\n-\n-#![feature(rustc_attrs)]\n-#![allow(dead_code)]\n-\n-#[rustc_if_this_changed]\n-fn main() { }\n-\n-#[rustc_then_this_would_need(TransCrateItem)] //~ ERROR no path from `main`\n-fn bar() { }"}, {"sha": "b828cc9c70ae8ec7d81d19418dbac41949fa89b0", "filename": "src/test/incremental/dirty_clean.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fdirty_clean.rs?ref=9b5b514c8dfe241fe88420c668eb040e2c36c686", "patch": "@@ -36,19 +36,15 @@ mod y {\n     use x;\n \n     #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"TransCrateItem\", cfg=\"cfail2\")]\n     pub fn y() {\n         //[cfail2]~^ ERROR `TypeckTables(y::y)` not found in dep graph, but should be clean\n-        //[cfail2]~| ERROR `TransCrateItem(y::y)` not found in dep graph, but should be clean\n         x::x();\n     }\n }\n \n mod z {\n     #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"TransCrateItem\", cfg=\"cfail2\")]\n     pub fn z() {\n         //[cfail2]~^ ERROR `TypeckTables(z::z)` found in dep graph, but should be dirty\n-        //[cfail2]~| ERROR `TransCrateItem(z::z)` found in dep graph, but should be dirty\n     }\n }"}, {"sha": "cb2236d375032f05986215ddccf0a3857f68e394", "filename": "src/test/incremental/issue-42602.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fincremental%2Fissue-42602.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fincremental%2Fissue-42602.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-42602.rs?ref=9b5b514c8dfe241fe88420c668eb040e2c36c686", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #42602. It used to be that we had\n+// a dep-graph like\n+//\n+//     typeck(foo) -> FnOnce -> typeck(bar)\n+//\n+// This was fixed by improving the resolution of the `FnOnce` trait\n+// selection node.\n+\n+// revisions:cfail1\n+// compile-flags:-Zquery-dep-graph\n+\n+#![feature(rustc_attrs)]\n+\n+fn main() {\n+    a::foo();\n+    b::bar();\n+}\n+\n+mod a {\n+    #[rustc_if_this_changed(HirBody)]\n+    pub fn foo() {\n+        let x = vec![1, 2, 3];\n+        let v = || ::std::mem::drop(x);\n+        v();\n+    }\n+}\n+\n+mod b {\n+    #[rustc_then_this_would_need(TypeckTables)] //[cfail1]~ ERROR no path\n+    pub fn bar() {\n+        let x = vec![1, 2, 3];\n+        let v = || ::std::mem::drop(x);\n+        v();\n+    }\n+}"}, {"sha": "043cb761da0938252a6e5eea3349ce29000dcf94", "filename": "src/test/incremental/krate-inlined.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fincremental%2Fkrate-inlined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fincremental%2Fkrate-inlined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fkrate-inlined.rs?ref=9b5b514c8dfe241fe88420c668eb040e2c36c686", "patch": "@@ -9,20 +9,22 @@\n // except according to those terms.\n \n // Regr. test that using HIR inlined from another krate does *not* add\n-// a dependency from the local Krate node.\n+// a dependency from the local Krate node. We can't easily test that\n+// directly anymore, so now we test that we get reuse.\n \n-// revisions: cfail1\n+// revisions: rpass1 rpass2\n // compile-flags: -Z query-dep-graph\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n+#![rustc_partition_reused(module=\"krate_inlined-x\", cfg=\"rpass2\")]\n \n-#![rustc_if_this_changed(Krate)]\n-\n-fn main() { }\n+fn main() {\n+    #[cfg(rpass2)]\n+    ()\n+}\n \n mod x {\n-    #[rustc_then_this_would_need(TransCrateItem)] //[cfail1]~ ERROR no path\n     fn method() {\n         // use some methods that require inlining HIR from another crate:\n         let mut v = vec![];"}, {"sha": "701c5fec49b55b5435728962e6e5afb566091bc6", "filename": "src/test/incremental/remapped_paths_cc/main.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs?ref=9b5b514c8dfe241fe88420c668eb040e2c36c686", "patch": "@@ -25,17 +25,13 @@\n \n extern crate extern_crate;\n \n-#[rustc_clean(label=\"TransCrateItem\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"TransCrateItem\", cfg=\"rpass3\")]\n fn main() {\n     some_mod::some_fn();\n }\n \n mod some_mod {\n     use extern_crate;\n \n-    #[rustc_clean(label=\"TransCrateItem\", cfg=\"rpass2\")]\n-    #[rustc_dirty(label=\"TransCrateItem\", cfg=\"rpass3\")]\n     pub fn some_fn() {\n         extern_crate::inline_fn();\n     }"}, {"sha": "36a26cf1755ab1f672e303b10b239da4b2a63b74", "filename": "src/test/incremental/string_constant.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fincremental%2Fstring_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5b514c8dfe241fe88420c668eb040e2c36c686/src%2Ftest%2Fincremental%2Fstring_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstring_constant.rs?ref=9b5b514c8dfe241fe88420c668eb040e2c36c686", "patch": "@@ -28,7 +28,6 @@ mod x {\n \n     #[cfg(rpass2)]\n     #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n-    #[rustc_dirty(label=\"TransCrateItem\", cfg=\"rpass2\")]\n     pub fn x() {\n         println!(\"{}\", \"2\");\n     }\n@@ -38,7 +37,6 @@ mod y {\n     use x;\n \n     #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"TransCrateItem\", cfg=\"rpass2\")]\n     pub fn y() {\n         x::x();\n     }\n@@ -48,7 +46,6 @@ mod z {\n     use y;\n \n     #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"TransCrateItem\", cfg=\"rpass2\")]\n     pub fn z() {\n         y::y();\n     }"}]}