{"sha": "dad8ddbfdd86556fa8a5a287d0256c74ead59f59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZDhkZGJmZGQ4NjU1NmZhOGE1YTI4N2QwMjU2Yzc0ZWFkNTlmNTk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-13T09:45:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-13T12:42:59Z"}, "message": "Inline functions from cg_ssa::callee and remove the mod\n\nFixes #65271", "tree": {"sha": "216c88c8888cd17fc896c0196462fde4865992d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/216c88c8888cd17fc896c0196462fde4865992d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dad8ddbfdd86556fa8a5a287d0256c74ead59f59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dad8ddbfdd86556fa8a5a287d0256c74ead59f59", "html_url": "https://github.com/rust-lang/rust/commit/dad8ddbfdd86556fa8a5a287d0256c74ead59f59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dad8ddbfdd86556fa8a5a287d0256c74ead59f59/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1ed3a878622ae6d593bc8aa5974b80831fca9f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ed3a878622ae6d593bc8aa5974b80831fca9f2", "html_url": "https://github.com/rust-lang/rust/commit/f1ed3a878622ae6d593bc8aa5974b80831fca9f2"}], "stats": {"total": 106, "additions": 40, "deletions": 66}, "files": [{"sha": "6b3caf80d85edb67b38568940e49749e0bc86ebb", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dad8ddbfdd86556fa8a5a287d0256c74ead59f59/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8ddbfdd86556fa8a5a287d0256c74ead59f59/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=dad8ddbfdd86556fa8a5a287d0256c74ead59f59", "patch": "@@ -20,7 +20,6 @@ use rustc::ty::layout::{\n use rustc::ty::{self, Ty, TyCtxt, Instance};\n use rustc::util::nodemap::FxHashMap;\n use rustc_target::spec::{HasTargetSpec, Target};\n-use rustc_codegen_ssa::callee::resolve_and_get_fn;\n use rustc_codegen_ssa::base::wants_msvc_seh;\n use crate::callee::get_fn;\n \n@@ -362,7 +361,14 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let tcx = self.tcx;\n         let llfn = match tcx.lang_items().eh_personality() {\n             Some(def_id) if !wants_msvc_seh(self.sess()) => {\n-                resolve_and_get_fn(self, def_id, tcx.intern_substs(&[]))\n+                self.get_fn(\n+                    ty::Instance::resolve(\n+                        tcx,\n+                        ty::ParamEnv::reveal_all(),\n+                        def_id,\n+                        tcx.intern_substs(&[]),\n+                    ).unwrap()\n+                )\n             }\n             _ => {\n                 let name = if wants_msvc_seh(self.sess()) {\n@@ -390,7 +396,14 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let tcx = self.tcx;\n         assert!(self.sess().target.target.options.custom_unwind_resume);\n         if let Some(def_id) = tcx.lang_items().eh_unwind_resume() {\n-            let llfn = resolve_and_get_fn(self, def_id, tcx.intern_substs(&[]));\n+            let llfn = self.get_fn(\n+                ty::Instance::resolve(\n+                    tcx,\n+                    ty::ParamEnv::reveal_all(),\n+                    def_id,\n+                    tcx.intern_substs(&[]),\n+                ).unwrap()\n+            );\n             unwresume.set(Some(llfn));\n             return llfn;\n         }"}, {"sha": "18680ba73d6b681baca3d4742d7e8624e002508d", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dad8ddbfdd86556fa8a5a287d0256c74ead59f59/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8ddbfdd86556fa8a5a287d0256c74ead59f59/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=dad8ddbfdd86556fa8a5a287d0256c74ead59f59", "patch": "@@ -36,7 +36,6 @@ use crate::mir::place::PlaceRef;\n use crate::back::write::{OngoingCodegen, start_async_codegen, submit_pre_lto_module_to_llvm,\n     submit_post_lto_module_to_llvm};\n use crate::{MemFlags, CrateInfo};\n-use crate::callee;\n use crate::common::{RealPredicate, TypeKind, IntPredicate};\n use crate::meth;\n use crate::mir;\n@@ -455,10 +454,13 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n \n         let (start_fn, args) = if use_start_lang_item {\n             let start_def_id = cx.tcx().require_lang_item(StartFnLangItem, None);\n-            let start_fn = callee::resolve_and_get_fn(\n-                cx,\n-                start_def_id,\n-                cx.tcx().intern_substs(&[main_ret_ty.into()]),\n+            let start_fn = cx.get_fn(\n+                ty::Instance::resolve(\n+                    cx.tcx(),\n+                    ty::ParamEnv::reveal_all(),\n+                    start_def_id,\n+                    cx.tcx().intern_substs(&[main_ret_ty.into()]),\n+                ).unwrap()\n             );\n             (start_fn, vec![bx.pointercast(rust_main, cx.type_ptr_to(cx.type_i8p())),\n                             arg_argc, arg_argv])"}, {"sha": "6ba6774cbf881cb72210a0595d34c17880ec6cff", "filename": "src/librustc_codegen_ssa/callee.rs", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f1ed3a878622ae6d593bc8aa5974b80831fca9f2/src%2Flibrustc_codegen_ssa%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ed3a878622ae6d593bc8aa5974b80831fca9f2/src%2Flibrustc_codegen_ssa%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcallee.rs?ref=f1ed3a878622ae6d593bc8aa5974b80831fca9f2", "patch": "@@ -1,53 +0,0 @@\n-use crate::traits::*;\n-use rustc::ty;\n-use rustc::ty::subst::SubstsRef;\n-use rustc::hir::def_id::DefId;\n-\n-pub fn resolve_and_get_fn<'tcx, Cx: CodegenMethods<'tcx>>(\n-    cx: &Cx,\n-    def_id: DefId,\n-    substs: SubstsRef<'tcx>,\n-) -> Cx::Value {\n-    cx.get_fn(\n-        ty::Instance::resolve(\n-            cx.tcx(),\n-            ty::ParamEnv::reveal_all(),\n-            def_id,\n-            substs\n-        ).unwrap()\n-    )\n-}\n-\n-pub fn resolve_and_get_fn_for_ptr<'tcx,\n-    Cx: Backend<'tcx> + MiscMethods<'tcx> + TypeMethods<'tcx>\n->(\n-    cx: &Cx,\n-    def_id: DefId,\n-    substs: SubstsRef<'tcx>,\n-) -> Cx::Value {\n-    cx.get_fn(\n-        ty::Instance::resolve_for_fn_ptr(\n-            cx.tcx(),\n-            ty::ParamEnv::reveal_all(),\n-            def_id,\n-            substs\n-        ).unwrap()\n-    )\n-}\n-\n-pub fn resolve_and_get_fn_for_vtable<'tcx,\n-    Cx: Backend<'tcx> + MiscMethods<'tcx> + TypeMethods<'tcx>\n->(\n-    cx: &Cx,\n-    def_id: DefId,\n-    substs: SubstsRef<'tcx>,\n-) -> Cx::Value {\n-    cx.get_fn(\n-        ty::Instance::resolve_for_vtable(\n-            cx.tcx(),\n-            ty::ParamEnv::reveal_all(),\n-            def_id,\n-            substs\n-        ).unwrap()\n-    )\n-}"}, {"sha": "55e465091aac49225c1f8ccc010d6de4fc13c615", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dad8ddbfdd86556fa8a5a287d0256c74ead59f59/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8ddbfdd86556fa8a5a287d0256c74ead59f59/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=dad8ddbfdd86556fa8a5a287d0256c74ead59f59", "patch": "@@ -41,7 +41,6 @@ pub mod traits;\n pub mod mir;\n pub mod debuginfo;\n pub mod base;\n-pub mod callee;\n pub mod glue;\n pub mod meth;\n pub mod mono_item;"}, {"sha": "5c177fd7d6d2b44264fb779e0afc9f7f885a8c58", "filename": "src/librustc_codegen_ssa/meth.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dad8ddbfdd86556fa8a5a287d0256c74ead59f59/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8ddbfdd86556fa8a5a287d0256c74ead59f59/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmeth.rs?ref=dad8ddbfdd86556fa8a5a287d0256c74ead59f59", "patch": "@@ -1,6 +1,5 @@\n use rustc_target::abi::call::FnType;\n \n-use crate::callee;\n use crate::traits::*;\n \n use rustc::ty::{self, Ty, Instance};\n@@ -92,7 +91,14 @@ pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n \n     let methods = methods.cloned().map(|opt_mth| {\n         opt_mth.map_or(nullptr, |(def_id, substs)| {\n-            callee::resolve_and_get_fn_for_vtable(cx, def_id, substs)\n+            cx.get_fn(\n+                ty::Instance::resolve_for_vtable(\n+                    cx.tcx(),\n+                    ty::ParamEnv::reveal_all(),\n+                    def_id,\n+                    substs,\n+                ).unwrap()\n+            )\n         })\n     });\n "}, {"sha": "2b9f8aabdd4657edbefd306bcf0d654ac9fbaf5a", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dad8ddbfdd86556fa8a5a287d0256c74ead59f59/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8ddbfdd86556fa8a5a287d0256c74ead59f59/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=dad8ddbfdd86556fa8a5a287d0256c74ead59f59", "patch": "@@ -10,7 +10,6 @@ use syntax::source_map::{DUMMY_SP, Span};\n \n use crate::base;\n use crate::MemFlags;\n-use crate::callee;\n use crate::common::{self, RealPredicate, IntPredicate};\n \n use crate::traits::*;\n@@ -190,7 +189,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     bug!(\"reifying a fn ptr that requires const arguments\");\n                                 }\n                                 OperandValue::Immediate(\n-                                    callee::resolve_and_get_fn_for_ptr(bx.cx(), def_id, substs))\n+                                    bx.get_fn(\n+                                        ty::Instance::resolve_for_fn_ptr(\n+                                            bx.tcx(),\n+                                            ty::ParamEnv::reveal_all(),\n+                                            def_id,\n+                                            substs\n+                                        ).unwrap()\n+                                    )\n+                                )\n                             }\n                             _ => {\n                                 bug!(\"{} cannot be reified to a fn ptr\", operand.layout.ty)"}]}