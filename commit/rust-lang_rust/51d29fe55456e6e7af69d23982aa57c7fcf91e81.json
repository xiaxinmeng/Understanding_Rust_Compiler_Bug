{"sha": "51d29fe55456e6e7af69d23982aa57c7fcf91e81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZDI5ZmU1NTQ1NmU2ZTdhZjY5ZDIzOTgyYWE1N2M3ZmNmOTFlODE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-01T11:06:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-01T11:06:27Z"}, "message": "Merge #7116\n\n7116: Fix deep syntax tree bug generated by proc-macro r=jonas-schievink a=edwin0cheng\n\nThis PR fixed a bug from `semver-parser` and `pest_derive` crates which generate a very deep syntax tree such that serde reject to de-serialize. To fix this bug, we disabled recursion limit in `serde` (by calling [`Deserializer::disable_recursion_limit`](https://docs.rs/serde_json/1.0.61/serde_json/struct.Deserializer.html#method.disable_recursion_limit))\r\n\r\nI have a feeling that we still need some way to protect against bad proc-macro generating huge syntax node, but I have no  idea right now.\r\n\r\nr? @jonas-schievink \r\n\r\nFixes #7103 \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "0deaf9b05ac36cf7ca34d632621f5d99aa94e793", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0deaf9b05ac36cf7ca34d632621f5d99aa94e793"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51d29fe55456e6e7af69d23982aa57c7fcf91e81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7wIzCRBK7hj4Ov3rIwAAdHIIABpuadu2MvO85NIOA6eXHIyq\nUdRF/56ORUmYbopkkfva0lH/TNdRNhHamAlhThc1fpy8nCOYW7gS8ywH2w7Y5gSW\n+8UR5r3tT6Sz2e+R1GZKvmkPxoyaJ7G/84VXRRDA+VhjB3MukZO3LENAZugsSoon\nHTGN3fi2Bs2pYjrVoNMa0/YymFfhNXVOuXDmbtiJRQdGFafWIhBO5dNF/TrH5lnE\nsCqKqy9+1XD4ZaWv8aylZENvJxwC07cn/4QvkK80qSIbyusvMQpjeh1JklyXb3hr\nGcomYgbMwC6C5NBnagkgDnaGs/JBImJnL0njiOQEfYN3FJi9GntJwRG7BFNXr4g=\n=Afki\n-----END PGP SIGNATURE-----\n", "payload": "tree 0deaf9b05ac36cf7ca34d632621f5d99aa94e793\nparent ff0c976979ad236e725a808fd2dba5e41ff4eace\nparent ae92baba6a3f70a5234dc4fcf15660c2c01deeee\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609499187 +0000\ncommitter GitHub <noreply@github.com> 1609499187 +0000\n\nMerge #7116\n\n7116: Fix deep syntax tree bug generated by proc-macro r=jonas-schievink a=edwin0cheng\n\nThis PR fixed a bug from `semver-parser` and `pest_derive` crates which generate a very deep syntax tree such that serde reject to de-serialize. To fix this bug, we disabled recursion limit in `serde` (by calling [`Deserializer::disable_recursion_limit`](https://docs.rs/serde_json/1.0.61/serde_json/struct.Deserializer.html#method.disable_recursion_limit))\r\n\r\nI have a feeling that we still need some way to protect against bad proc-macro generating huge syntax node, but I have no  idea right now.\r\n\r\nr? @jonas-schievink \r\n\r\nFixes #7103 \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51d29fe55456e6e7af69d23982aa57c7fcf91e81", "html_url": "https://github.com/rust-lang/rust/commit/51d29fe55456e6e7af69d23982aa57c7fcf91e81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51d29fe55456e6e7af69d23982aa57c7fcf91e81/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff0c976979ad236e725a808fd2dba5e41ff4eace", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0c976979ad236e725a808fd2dba5e41ff4eace", "html_url": "https://github.com/rust-lang/rust/commit/ff0c976979ad236e725a808fd2dba5e41ff4eace"}, {"sha": "ae92baba6a3f70a5234dc4fcf15660c2c01deeee", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae92baba6a3f70a5234dc4fcf15660c2c01deeee", "html_url": "https://github.com/rust-lang/rust/commit/ae92baba6a3f70a5234dc4fcf15660c2c01deeee"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "4cd572101614550c606e21bd36d5b68ee9e604dc", "filename": "crates/proc_macro_api/src/msg.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51d29fe55456e6e7af69d23982aa57c7fcf91e81/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d29fe55456e6e7af69d23982aa57c7fcf91e81/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs?ref=51d29fe55456e6e7af69d23982aa57c7fcf91e81", "patch": "@@ -58,7 +58,13 @@ pub trait Message: Serialize + DeserializeOwned {\n     fn read(inp: &mut impl BufRead) -> io::Result<Option<Self>> {\n         Ok(match read_json(inp)? {\n             None => None,\n-            Some(text) => Some(serde_json::from_str(&text)?),\n+            Some(text) => {\n+                let mut deserializer = serde_json::Deserializer::from_str(&text);\n+                // Note that some proc-macro generate very deep syntax tree\n+                // We have to disable the current limit of serde here\n+                deserializer.disable_recursion_limit();\n+                Some(Self::deserialize(&mut deserializer)?)\n+            }\n         })\n     }\n     fn write(self, out: &mut impl Write) -> io::Result<()> {"}, {"sha": "6d6ab8888683964ae20bd42bf52e5eeb1d974283", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/51d29fe55456e6e7af69d23982aa57c7fcf91e81/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d29fe55456e6e7af69d23982aa57c7fcf91e81/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=51d29fe55456e6e7af69d23982aa57c7fcf91e81", "patch": "@@ -92,10 +92,11 @@ fn client_loop(task_rx: Receiver<Task>, mut process: Process) {\n     for Task { req, result_tx } in task_rx {\n         match send_request(&mut stdin, &mut stdout, req) {\n             Ok(res) => result_tx.send(res).unwrap(),\n-            Err(_err) => {\n+            Err(err) => {\n                 log::error!(\n-                    \"proc macro server crashed, server process state: {:?}\",\n-                    process.child.try_wait()\n+                    \"proc macro server crashed, server process state: {:?}, server request error: {:?}\",\n+                    process.child.try_wait(),\n+                    err\n                 );\n                 let res = Response::Error(ResponseError {\n                     code: ErrorCode::ServerErrorEnd,"}]}