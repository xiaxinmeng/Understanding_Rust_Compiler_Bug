{"sha": "9b3d4be42120796c9845376a9ad315736fc85eca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliM2Q0YmU0MjEyMDc5NmM5ODQ1Mzc2YTlhZDMxNTczNmZjODVlY2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-03T10:26:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-03T10:26:38Z"}, "message": "Merge #4726\n\n4726: Groundwork for specifying the set of projects via config r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "029cef7da188bf032c3aa1fff456a37cbf963a0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/029cef7da188bf032c3aa1fff456a37cbf963a0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b3d4be42120796c9845376a9ad315736fc85eca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe13reCRBK7hj4Ov3rIwAAdHIIALAYGH4NoNi6c3ax9d728nRC\nj8MZVNEsLKY3lNVu4RPlyIfgH9hBMKYbC+CDCNKEE455BboGsbbYVzIWRtHWAsz9\nnyLWDqHljaP5ANnyN8QA3df/j5LmiESiG3YAKcvsnOmJcSJdSJX+r1T9nzSxmx/f\neSid1jlq7cRks4hsn3mDh/HCv6F3k8sSkuu9B8T7Ez8mkcLUT93to5dmNIy4EZRC\nDStRAlWg8Biy+RAPw+qXaVBUNtfNWrJx0NJtpENawaR0U7YDzcqvnpv/faKAnyVY\n2oXIts4GnVe6FSzcgZlhE6FsLkniX+8YhAdnaF0hHI83O3arB60uP4zzfYxJM7I=\n=Op9L\n-----END PGP SIGNATURE-----\n", "payload": "tree 029cef7da188bf032c3aa1fff456a37cbf963a0f\nparent 992e1256d05d1ec046e284e597b2932e50ccff49\nparent 8baa4c5d07690dc908b6299471c936c0d87ad871\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591179998 +0000\ncommitter GitHub <noreply@github.com> 1591179998 +0000\n\nMerge #4726\n\n4726: Groundwork for specifying the set of projects via config r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3d4be42120796c9845376a9ad315736fc85eca", "html_url": "https://github.com/rust-lang/rust/commit/9b3d4be42120796c9845376a9ad315736fc85eca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b3d4be42120796c9845376a9ad315736fc85eca/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "992e1256d05d1ec046e284e597b2932e50ccff49", "url": "https://api.github.com/repos/rust-lang/rust/commits/992e1256d05d1ec046e284e597b2932e50ccff49", "html_url": "https://github.com/rust-lang/rust/commit/992e1256d05d1ec046e284e597b2932e50ccff49"}, {"sha": "8baa4c5d07690dc908b6299471c936c0d87ad871", "url": "https://api.github.com/repos/rust-lang/rust/commits/8baa4c5d07690dc908b6299471c936c0d87ad871", "html_url": "https://github.com/rust-lang/rust/commit/8baa4c5d07690dc908b6299471c936c0d87ad871"}], "stats": {"total": 175, "additions": 110, "deletions": 65}, "files": [{"sha": "a9961269026a374d02857770d726af47e69c53f3", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9b3d4be42120796c9845376a9ad315736fc85eca/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3d4be42120796c9845376a9ad315736fc85eca/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=9b3d4be42120796c9845376a9ad315736fc85eca", "patch": "@@ -14,7 +14,7 @@ use std::{\n use anyhow::{bail, Context, Result};\n use ra_cfg::CfgOptions;\n use ra_db::{CrateGraph, CrateName, Edition, Env, ExternSource, ExternSourceId, FileId};\n-use rustc_hash::FxHashMap;\n+use rustc_hash::{FxHashMap, FxHashSet};\n use serde_json::from_reader;\n \n pub use crate::{\n@@ -57,25 +57,25 @@ impl PackageRoot {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum ProjectRoot {\n+#[derive(Debug, Clone, PartialEq, Eq, Hash, Ord, PartialOrd)]\n+pub enum ProjectManifest {\n     ProjectJson(PathBuf),\n     CargoToml(PathBuf),\n }\n \n-impl ProjectRoot {\n-    pub fn from_manifest_file(path: PathBuf) -> Result<ProjectRoot> {\n+impl ProjectManifest {\n+    pub fn from_manifest_file(path: PathBuf) -> Result<ProjectManifest> {\n         if path.ends_with(\"rust-project.json\") {\n-            return Ok(ProjectRoot::ProjectJson(path));\n+            return Ok(ProjectManifest::ProjectJson(path));\n         }\n         if path.ends_with(\"Cargo.toml\") {\n-            return Ok(ProjectRoot::CargoToml(path));\n+            return Ok(ProjectManifest::CargoToml(path));\n         }\n         bail!(\"project root must point to Cargo.toml or rust-project.json: {}\", path.display())\n     }\n \n-    pub fn discover_single(path: &Path) -> Result<ProjectRoot> {\n-        let mut candidates = ProjectRoot::discover(path)?;\n+    pub fn discover_single(path: &Path) -> Result<ProjectManifest> {\n+        let mut candidates = ProjectManifest::discover(path)?;\n         let res = match candidates.pop() {\n             None => bail!(\"no projects\"),\n             Some(it) => it,\n@@ -87,12 +87,12 @@ impl ProjectRoot {\n         Ok(res)\n     }\n \n-    pub fn discover(path: &Path) -> io::Result<Vec<ProjectRoot>> {\n+    pub fn discover(path: &Path) -> io::Result<Vec<ProjectManifest>> {\n         if let Some(project_json) = find_in_parent_dirs(path, \"rust-project.json\") {\n-            return Ok(vec![ProjectRoot::ProjectJson(project_json)]);\n+            return Ok(vec![ProjectManifest::ProjectJson(project_json)]);\n         }\n         return find_cargo_toml(path)\n-            .map(|paths| paths.into_iter().map(ProjectRoot::CargoToml).collect());\n+            .map(|paths| paths.into_iter().map(ProjectManifest::CargoToml).collect());\n \n         fn find_cargo_toml(path: &Path) -> io::Result<Vec<PathBuf>> {\n             match find_in_parent_dirs(path, \"Cargo.toml\") {\n@@ -128,16 +128,28 @@ impl ProjectRoot {\n                 .collect()\n         }\n     }\n+\n+    pub fn discover_all(paths: &[impl AsRef<Path>]) -> Vec<ProjectManifest> {\n+        let mut res = paths\n+            .iter()\n+            .filter_map(|it| ProjectManifest::discover(it.as_ref()).ok())\n+            .flatten()\n+            .collect::<FxHashSet<_>>()\n+            .into_iter()\n+            .collect::<Vec<_>>();\n+        res.sort();\n+        res\n+    }\n }\n \n impl ProjectWorkspace {\n     pub fn load(\n-        root: ProjectRoot,\n+        root: ProjectManifest,\n         cargo_features: &CargoConfig,\n         with_sysroot: bool,\n     ) -> Result<ProjectWorkspace> {\n         let res = match root {\n-            ProjectRoot::ProjectJson(project_json) => {\n+            ProjectManifest::ProjectJson(project_json) => {\n                 let file = File::open(&project_json).with_context(|| {\n                     format!(\"Failed to open json file {}\", project_json.display())\n                 })?;\n@@ -148,7 +160,7 @@ impl ProjectWorkspace {\n                     })?,\n                 }\n             }\n-            ProjectRoot::CargoToml(cargo_toml) => {\n+            ProjectManifest::CargoToml(cargo_toml) => {\n                 let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml, cargo_features)\n                     .with_context(|| {\n                         format!("}, {"sha": "8d071ab1ca2b8fac88f216bd2b39f3470cbe987c", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9b3d4be42120796c9845376a9ad315736fc85eca/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3d4be42120796c9845376a9ad315736fc85eca/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=9b3d4be42120796c9845376a9ad315736fc85eca", "patch": "@@ -4,9 +4,14 @@\n mod args;\n \n use lsp_server::Connection;\n-use rust_analyzer::{cli, config::Config, from_json, Result};\n+use rust_analyzer::{\n+    cli,\n+    config::{Config, LinkedProject},\n+    from_json, Result,\n+};\n \n use crate::args::HelpPrinted;\n+use ra_project_model::ProjectManifest;\n \n fn main() -> Result<()> {\n     setup_logging()?;\n@@ -97,28 +102,38 @@ fn run_server() -> Result<()> {\n         log::info!(\"Client '{}' {}\", client_info.name, client_info.version.unwrap_or_default());\n     }\n \n-    let cwd = std::env::current_dir()?;\n-    let root = initialize_params.root_uri.and_then(|it| it.to_file_path().ok()).unwrap_or(cwd);\n-\n-    let workspace_roots = initialize_params\n-        .workspace_folders\n-        .map(|workspaces| {\n-            workspaces.into_iter().filter_map(|it| it.uri.to_file_path().ok()).collect::<Vec<_>>()\n-        })\n-        .filter(|workspaces| !workspaces.is_empty())\n-        .unwrap_or_else(|| vec![root]);\n-\n     let config = {\n         let mut config = Config::default();\n         if let Some(value) = &initialize_params.initialization_options {\n             config.update(value);\n         }\n         config.update_caps(&initialize_params.capabilities);\n \n+        if config.linked_projects.is_empty() {\n+            let cwd = std::env::current_dir()?;\n+            let root =\n+                initialize_params.root_uri.and_then(|it| it.to_file_path().ok()).unwrap_or(cwd);\n+            let workspace_roots = initialize_params\n+                .workspace_folders\n+                .map(|workspaces| {\n+                    workspaces\n+                        .into_iter()\n+                        .filter_map(|it| it.uri.to_file_path().ok())\n+                        .collect::<Vec<_>>()\n+                })\n+                .filter(|workspaces| !workspaces.is_empty())\n+                .unwrap_or_else(|| vec![root]);\n+\n+            config.linked_projects = ProjectManifest::discover_all(&workspace_roots)\n+                .into_iter()\n+                .map(LinkedProject::from)\n+                .collect();\n+        }\n+\n         config\n     };\n \n-    rust_analyzer::main_loop(workspace_roots, config, connection)?;\n+    rust_analyzer::main_loop(config, connection)?;\n \n     log::info!(\"shutting down IO...\");\n     io_threads.join()?;"}, {"sha": "c7e86fe0c48b5b855c9db448add36b812e83b5e7", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b3d4be42120796c9845376a9ad315736fc85eca/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3d4be42120796c9845376a9ad315736fc85eca/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=9b3d4be42120796c9845376a9ad315736fc85eca", "patch": "@@ -8,7 +8,8 @@ use crossbeam_channel::{unbounded, Receiver};\n use ra_db::{ExternSourceId, FileId, SourceRootId};\n use ra_ide::{AnalysisChange, AnalysisHost};\n use ra_project_model::{\n-    get_rustc_cfg_options, CargoConfig, PackageRoot, ProcMacroClient, ProjectRoot, ProjectWorkspace,\n+    get_rustc_cfg_options, CargoConfig, PackageRoot, ProcMacroClient, ProjectManifest,\n+    ProjectWorkspace,\n };\n use ra_vfs::{RootEntry, Vfs, VfsChange, VfsTask, Watch};\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -28,7 +29,7 @@ pub fn load_cargo(\n     with_proc_macro: bool,\n ) -> Result<(AnalysisHost, FxHashMap<SourceRootId, PackageRoot>)> {\n     let root = std::env::current_dir()?.join(root);\n-    let root = ProjectRoot::discover_single(&root)?;\n+    let root = ProjectManifest::discover_single(&root)?;\n     let ws = ProjectWorkspace::load(\n         root,\n         &CargoConfig { load_out_dirs_from_check, ..Default::default() },"}, {"sha": "761bc9c2d92a3fb21e831885dead0defcb5e7165", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9b3d4be42120796c9845376a9ad315736fc85eca/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3d4be42120796c9845376a9ad315736fc85eca/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=9b3d4be42120796c9845376a9ad315736fc85eca", "patch": "@@ -12,14 +12,13 @@ use std::{ffi::OsString, path::PathBuf};\n use lsp_types::ClientCapabilities;\n use ra_flycheck::FlycheckConfig;\n use ra_ide::{AssistConfig, CompletionConfig, InlayHintsConfig};\n-use ra_project_model::CargoConfig;\n+use ra_project_model::{CargoConfig, JsonProject, ProjectManifest};\n use serde::Deserialize;\n \n #[derive(Debug, Clone)]\n pub struct Config {\n     pub client_caps: ClientCapsConfig,\n \n-    pub with_sysroot: bool,\n     pub publish_diagnostics: bool,\n     pub lru_capacity: Option<usize>,\n     pub proc_macro_srv: Option<(PathBuf, Vec<OsString>)>,\n@@ -35,6 +34,27 @@ pub struct Config {\n     pub assist: AssistConfig,\n     pub call_info_full: bool,\n     pub lens: LensConfig,\n+\n+    pub with_sysroot: bool,\n+    pub linked_projects: Vec<LinkedProject>,\n+}\n+\n+#[derive(Debug, Clone)]\n+pub enum LinkedProject {\n+    ProjectManifest(ProjectManifest),\n+    JsonProject(JsonProject),\n+}\n+\n+impl From<ProjectManifest> for LinkedProject {\n+    fn from(v: ProjectManifest) -> Self {\n+        LinkedProject::ProjectManifest(v)\n+    }\n+}\n+\n+impl From<JsonProject> for LinkedProject {\n+    fn from(v: JsonProject) -> Self {\n+        LinkedProject::JsonProject(v)\n+    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -141,6 +161,7 @@ impl Default for Config {\n             assist: AssistConfig::default(),\n             call_info_full: true,\n             lens: LensConfig::default(),\n+            linked_projects: Vec::new(),\n         }\n     }\n }"}, {"sha": "d901f21d7e7e13c9620f8fd7d7a0492a5ca42cf9", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9b3d4be42120796c9845376a9ad315736fc85eca/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3d4be42120796c9845376a9ad315736fc85eca/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=9b3d4be42120796c9845376a9ad315736fc85eca", "patch": "@@ -12,13 +12,11 @@ use std::{\n     fmt,\n     ops::Range,\n     panic,\n-    path::PathBuf,\n     sync::Arc,\n     time::{Duration, Instant},\n };\n \n use crossbeam_channel::{never, select, unbounded, RecvError, Sender};\n-use itertools::Itertools;\n use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestId, Response};\n use lsp_types::{\n     DidChangeTextDocumentParams, NumberOrString, TextDocumentContentChangeEvent, WorkDoneProgress,\n@@ -36,7 +34,7 @@ use serde::{de::DeserializeOwned, Serialize};\n use threadpool::ThreadPool;\n \n use crate::{\n-    config::{Config, FilesWatcher},\n+    config::{Config, FilesWatcher, LinkedProject},\n     diagnostics::{to_proto::url_from_path_with_drive_lowercasing, DiagnosticTask},\n     from_proto,\n     global_state::{GlobalState, GlobalStateSnapshot},\n@@ -70,7 +68,7 @@ impl fmt::Display for LspError {\n \n impl Error for LspError {}\n \n-pub fn main_loop(ws_roots: Vec<PathBuf>, config: Config, connection: Connection) -> Result<()> {\n+pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n     log::info!(\"initial config: {:#?}\", config);\n \n     // Windows scheduler implements priority boosts: if thread waits for an\n@@ -95,29 +93,24 @@ pub fn main_loop(ws_roots: Vec<PathBuf>, config: Config, connection: Connection)\n     let mut loop_state = LoopState::default();\n     let mut global_state = {\n         let workspaces = {\n-            // FIXME: support dynamic workspace loading.\n-            let project_roots: FxHashSet<_> = ws_roots\n-                .iter()\n-                .filter_map(|it| ra_project_model::ProjectRoot::discover(it).ok())\n-                .flatten()\n-                .collect();\n-\n-            if project_roots.is_empty() && config.notifications.cargo_toml_not_found {\n+            if config.linked_projects.is_empty() && config.notifications.cargo_toml_not_found {\n                 show_message(\n                     lsp_types::MessageType::Error,\n-                    format!(\n-                        \"rust-analyzer failed to discover workspace, no Cargo.toml found, dirs searched: {}\",\n-                        ws_roots.iter().format_with(\", \", |it, f| f(&it.display()))\n-                    ),\n+                    \"rust-analyzer failed to discover workspace\".to_string(),\n                     &connection.sender,\n                 );\n             };\n \n-            project_roots\n-                .into_iter()\n+            config\n+                .linked_projects\n+                .iter()\n+                .filter_map(|project| match project {\n+                    LinkedProject::ProjectManifest(it) => Some(it),\n+                    LinkedProject::JsonProject(_) => None,\n+                })\n                 .filter_map(|root| {\n                     ra_project_model::ProjectWorkspace::load(\n-                        root,\n+                        root.clone(),\n                         &config.cargo,\n                         config.with_sysroot,\n                     )"}, {"sha": "30d03b622b91f13c28091efb4faa5d487cfeb345", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9b3d4be42120796c9845376a9ad315736fc85eca/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3d4be42120796c9845376a9ad315736fc85eca/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=9b3d4be42120796c9845376a9ad315736fc85eca", "patch": "@@ -19,8 +19,9 @@ use serde_json::{to_string_pretty, Value};\n use tempfile::TempDir;\n use test_utils::{find_mismatch, parse_fixture};\n \n+use ra_project_model::ProjectManifest;\n use rust_analyzer::{\n-    config::{ClientCapsConfig, Config},\n+    config::{ClientCapsConfig, Config, LinkedProject},\n     main_loop,\n };\n \n@@ -42,7 +43,7 @@ impl<'a> Project<'a> {\n         self\n     }\n \n-    pub fn root(mut self, path: &str) -> Project<'a> {\n+    pub(crate) fn root(mut self, path: &str) -> Project<'a> {\n         self.roots.push(path.into());\n         self\n     }\n@@ -74,7 +75,16 @@ impl<'a> Project<'a> {\n             paths.push((path, entry.text));\n         }\n \n-        let roots = self.roots.into_iter().map(|root| tmp_dir.path().join(root)).collect();\n+        let mut roots =\n+            self.roots.into_iter().map(|root| tmp_dir.path().join(root)).collect::<Vec<_>>();\n+        if roots.is_empty() {\n+            roots.push(tmp_dir.path().to_path_buf());\n+        }\n+        let linked_projects = roots\n+            .into_iter()\n+            .map(|it| ProjectManifest::discover_single(&it).unwrap())\n+            .map(LinkedProject::from)\n+            .collect::<Vec<_>>();\n \n         let mut config = Config {\n             client_caps: ClientCapsConfig {\n@@ -84,14 +94,15 @@ impl<'a> Project<'a> {\n                 ..Default::default()\n             },\n             with_sysroot: self.with_sysroot,\n+            linked_projects,\n             ..Config::default()\n         };\n \n         if let Some(f) = &self.config {\n             f(&mut config)\n         }\n \n-        Server::new(tmp_dir, config, roots, paths)\n+        Server::new(tmp_dir, config, paths)\n     }\n }\n \n@@ -109,20 +120,12 @@ pub struct Server {\n }\n \n impl Server {\n-    fn new(\n-        dir: TempDir,\n-        config: Config,\n-        roots: Vec<PathBuf>,\n-        files: Vec<(PathBuf, String)>,\n-    ) -> Server {\n-        let path = dir.path().to_path_buf();\n-\n-        let roots = if roots.is_empty() { vec![path] } else { roots };\n+    fn new(dir: TempDir, config: Config, files: Vec<(PathBuf, String)>) -> Server {\n         let (connection, client) = Connection::memory();\n \n         let _thread = jod_thread::Builder::new()\n             .name(\"test server\".to_string())\n-            .spawn(move || main_loop(roots, config, connection).unwrap())\n+            .spawn(move || main_loop(config, connection).unwrap())\n             .expect(\"failed to spawn a thread\");\n \n         let res ="}]}