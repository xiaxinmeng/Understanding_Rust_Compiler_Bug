{"sha": "11195676a03cf08b13c41684de328869ac345ff8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMTk1Njc2YTAzY2YwOGIxM2M0MTY4NGRlMzI4ODY5YWMzNDVmZjg=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-08T03:16:54Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-10T10:23:35Z"}, "message": "Elimite `$crate` before invokng custom derives.", "tree": {"sha": "3ce9b0569f6a0fa57b46d6bfb3025721f35cfdde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ce9b0569f6a0fa57b46d6bfb3025721f35cfdde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11195676a03cf08b13c41684de328869ac345ff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11195676a03cf08b13c41684de328869ac345ff8", "html_url": "https://github.com/rust-lang/rust/commit/11195676a03cf08b13c41684de328869ac345ff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11195676a03cf08b13c41684de328869ac345ff8/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b46ce08df51f95e5d9f6dff9156b1d8e38cf4795", "url": "https://api.github.com/repos/rust-lang/rust/commits/b46ce08df51f95e5d9f6dff9156b1d8e38cf4795", "html_url": "https://github.com/rust-lang/rust/commit/b46ce08df51f95e5d9f6dff9156b1d8e38cf4795"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "f51ea3545e4c2aa2bc1fe460bbeb307c2de38e78", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/11195676a03cf08b13c41684de328869ac345ff8/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11195676a03cf08b13c41684de328869ac345ff8/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=11195676a03cf08b13c41684de328869ac345ff8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use {Module, Resolver};\n+use {Module, ModuleKind, Resolver};\n use build_reduced_graph::BuildReducedGraphVisitor;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefIndex};\n use rustc::hir::map::{self, DefCollector};\n@@ -21,7 +21,9 @@ use syntax::ext::base::{NormalTT, SyntaxExtension};\n use syntax::ext::expand::Expansion;\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n+use syntax::fold::Folder;\n use syntax::parse::token::intern;\n+use syntax::ptr::P;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::Span;\n \n@@ -97,6 +99,31 @@ impl<'a> base::Resolver for Resolver<'a> {\n         mark\n     }\n \n+    fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item> {\n+        struct EliminateCrateVar<'b, 'a: 'b>(&'b mut Resolver<'a>);\n+\n+        impl<'a, 'b> Folder for EliminateCrateVar<'a, 'b> {\n+            fn fold_path(&mut self, mut path: ast::Path) -> ast::Path {\n+                let ident = path.segments[0].identifier;\n+                if &ident.name.as_str() == \"$crate\" {\n+                    path.global = true;\n+                    let module = self.0.resolve_crate_var(ident.ctxt);\n+                    if module.is_local() {\n+                        path.segments.remove(0);\n+                    } else {\n+                        path.segments[0].identifier = match module.kind {\n+                            ModuleKind::Def(_, name) => ast::Ident::with_empty_ctxt(name),\n+                            _ => unreachable!(),\n+                        };\n+                    }\n+                }\n+                path\n+            }\n+        }\n+\n+        EliminateCrateVar(self).fold_item(item).expect_one(\"\")\n+    }\n+\n     fn visit_expansion(&mut self, mark: Mark, expansion: &Expansion) {\n         let invocation = self.invocations[&mark];\n         self.collect_def_ids(invocation, expansion);"}, {"sha": "63eee7df9e85d2632d665dee7a257ca13f7a575a", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11195676a03cf08b13c41684de328869ac345ff8/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11195676a03cf08b13c41684de328869ac345ff8/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=11195676a03cf08b13c41684de328869ac345ff8", "patch": "@@ -517,6 +517,7 @@ pub type NamedSyntaxExtension = (Name, SyntaxExtension);\n pub trait Resolver {\n     fn next_node_id(&mut self) -> ast::NodeId;\n     fn get_module_scope(&mut self, id: ast::NodeId) -> Mark;\n+    fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item>;\n \n     fn visit_expansion(&mut self, mark: Mark, expansion: &Expansion);\n     fn add_macro(&mut self, scope: Mark, def: ast::MacroDef, export: bool);\n@@ -539,6 +540,7 @@ pub struct DummyResolver;\n impl Resolver for DummyResolver {\n     fn next_node_id(&mut self) -> ast::NodeId { ast::DUMMY_NODE_ID }\n     fn get_module_scope(&mut self, _id: ast::NodeId) -> Mark { Mark::root() }\n+    fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item> { item }\n \n     fn visit_expansion(&mut self, _invoc: Mark, _expansion: &Expansion) {}\n     fn add_macro(&mut self, _scope: Mark, _def: ast::MacroDef, _export: bool) {}"}, {"sha": "e101757ad23220dfabebc1a5a1ba707b245ca084", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11195676a03cf08b13c41684de328869ac345ff8/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11195676a03cf08b13c41684de328869ac345ff8/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=11195676a03cf08b13c41684de328869ac345ff8", "patch": "@@ -73,7 +73,7 @@ impl MultiItemModifier for CustomDerive {\n         // Mark attributes as known, and used.\n         MarkAttrs(&self.attrs).visit_item(&item);\n \n-        let input = __internal::new_token_stream(item.clone());\n+        let input = __internal::new_token_stream(ecx.resolver.eliminate_crate_var(item.clone()));\n         let res = __internal::set_parse_sess(&ecx.parse_sess, || {\n             let inner = self.inner;\n             panic::catch_unwind(panic::AssertUnwindSafe(|| inner(input)))"}]}