{"sha": "88ad25f45e9adbf08871ce77449e1b1193d23df4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YWQyNWY0NWU5YWRiZjA4ODcxY2U3NzQ0OWUxYjExOTNkMjNkZjQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-20T15:44:41Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-26T09:29:35Z"}, "message": "Implement 128bit shl and shr binops", "tree": {"sha": "b6b6b3fd1bbc7efcb18fb580331353f058a128c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6b6b3fd1bbc7efcb18fb580331353f058a128c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88ad25f45e9adbf08871ce77449e1b1193d23df4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88ad25f45e9adbf08871ce77449e1b1193d23df4", "html_url": "https://github.com/rust-lang/rust/commit/88ad25f45e9adbf08871ce77449e1b1193d23df4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88ad25f45e9adbf08871ce77449e1b1193d23df4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "869372832788b8949ef03cd1a421542f5b96eb79", "url": "https://api.github.com/repos/rust-lang/rust/commits/869372832788b8949ef03cd1a421542f5b96eb79", "html_url": "https://github.com/rust-lang/rust/commit/869372832788b8949ef03cd1a421542f5b96eb79"}], "stats": {"total": 131, "additions": 126, "deletions": 5}, "files": [{"sha": "1c9f84b37e4fd03636262dd32797de7932b138b8", "filename": "src/abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88ad25f45e9adbf08871ce77449e1b1193d23df4/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ad25f45e9adbf08871ce77449e1b1193d23df4/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=88ad25f45e9adbf08871ce77449e1b1193d23df4", "patch": "@@ -270,6 +270,7 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n             .module\n             .declare_func_in_func(func_id, &mut self.bcx.func);\n         let call_inst = self.bcx.ins().call(func_ref, args);\n+        self.add_comment(call_inst, format!(\"easy_call {}\", name));\n         if output_ty.is_none() {\n             return None;\n         }"}, {"sha": "81388573c9ee09753be38ca5e28e4864e200cbaf", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 80, "deletions": 4, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/88ad25f45e9adbf08871ce77449e1b1193d23df4/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ad25f45e9adbf08871ce77449e1b1193d23df4/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=88ad25f45e9adbf08871ce77449e1b1193d23df4", "patch": "@@ -19,7 +19,13 @@ pub fn maybe_codegen<'a, 'tcx>(\n     let rhs_val = rhs.load_scalar(fx);\n \n     match bin_op {\n-        BinOp::Add | BinOp::Sub | BinOp::BitAnd | BinOp::BitOr | BinOp::BitXor => return None,\n+        BinOp::BitAnd | BinOp::BitOr | BinOp::BitXor => {\n+            assert!(!checked);\n+            return None;\n+        }\n+        BinOp::Add | BinOp::Sub => {\n+            return None; // FIXME implement checked versions\n+        }\n         BinOp::Offset => unreachable!(\"offset should only be used on pointers, not 128bit ints\"),\n         BinOp::Mul => {\n             let res = if checked {\n@@ -99,9 +105,79 @@ pub fn maybe_codegen<'a, 'tcx>(\n             return Some(res);\n         }\n         BinOp::Shl | BinOp::Shr => {\n-            // FIXME implement it\n-            let out_layout = fx.layout_of(out_ty);\n-            return Some(crate::trap::trap_unreachable_ret_value(fx, out_layout, format!(\"unimplemented 128bit binop {:?}\", bin_op)));\n+            let is_overflow = if checked {\n+                // rhs >= 128\n+\n+                // FIXME support non 128bit rhs\n+                /*let (rhs_lsb, rhs_msb) = fx.bcx.ins().isplit(rhs_val);\n+                let rhs_msb_gt_0 = fx.bcx.ins().icmp_imm(IntCC::NotEqual, rhs_msb, 0);\n+                let rhs_lsb_ge_128 = fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThan, rhs_lsb, 127);\n+                let is_overflow = fx.bcx.ins().bor(rhs_msb_gt_0, rhs_lsb_ge_128);*/\n+                let is_overflow = fx.bcx.ins().bconst(types::B1, false);\n+\n+                Some(fx.bcx.ins().bint(types::I8, is_overflow))\n+            } else {\n+                None\n+            };\n+\n+            // Optimize `val >> 64`, because compiler_builtins uses it to deconstruct an 128bit\n+            // integer into its lsb and msb.\n+            // https://github.com/rust-lang-nursery/compiler-builtins/blob/79a6a1603d5672cbb9187ff41ff4d9b5048ac1cb/src/int/mod.rs#L217\n+            if let Some(64) = resolve_value_imm(fx.bcx.func, rhs_val) {\n+                let (lhs_lsb, lhs_msb) = fx.bcx.ins().isplit(lhs_val);\n+                let all_zeros = fx.bcx.ins().iconst(types::I64, 0);\n+                let val = match (bin_op, is_signed) {\n+                    (BinOp::Shr, false) => {\n+                        let val = fx.bcx.ins().iconcat(lhs_msb, all_zeros);\n+                        Some(CValue::by_val(val, fx.layout_of(fx.tcx.types.u128)))\n+                    }\n+                    (BinOp::Shr, true) => {\n+                        let sign = fx.bcx.ins().icmp_imm(IntCC::SignedLessThan, lhs_msb, 0);\n+                        let all_ones = fx.bcx.ins().iconst(types::I64, u64::max_value() as i64);\n+                        let all_sign_bits = fx.bcx.ins().select(sign, all_zeros, all_ones);\n+\n+                        let val = fx.bcx.ins().iconcat(lhs_msb, all_sign_bits);\n+                        Some(CValue::by_val(val, fx.layout_of(fx.tcx.types.i128)))\n+                    }\n+                    (BinOp::Shl, _) => {\n+                        let val = fx.bcx.ins().iconcat(all_zeros, lhs_lsb);\n+                        Some(CValue::by_val(val, fx.layout_of(out_ty)))\n+                    }\n+                    _ => None\n+                };\n+                if let Some(val) = val {\n+                    if let Some(is_overflow) = is_overflow {\n+                        let val = val.load_scalar(fx);\n+                        return Some(CValue::by_val_pair(val, is_overflow, fx.layout_of(out_ty)))\n+                    } else {\n+                        return Some(val);\n+                    }\n+                }\n+            }\n+\n+            let truncated_rhs = clif_intcast(fx, rhs_val, types::I32, false);\n+            let truncated_rhs = CValue::by_val(truncated_rhs, fx.layout_of(fx.tcx.types.u32));\n+            let val = match (bin_op, is_signed) {\n+                (BinOp::Shl, false) => {\n+                    fx.easy_call(\"__ashlti3\", &[lhs, truncated_rhs], fx.tcx.types.u128)\n+                }\n+                (BinOp::Shl, true) => {\n+                    fx.easy_call(\"__ashlti3\", &[lhs, truncated_rhs], fx.tcx.types.i128)\n+                }\n+                (BinOp::Shr, false) => {\n+                    fx.easy_call(\"__lshrti3\", &[lhs, truncated_rhs], fx.tcx.types.u128)\n+                }\n+                (BinOp::Shr, true) => {\n+                    fx.easy_call(\"__ashrti3\", &[lhs, truncated_rhs], fx.tcx.types.i128)\n+                }\n+                (_, _) => unreachable!(),\n+            };\n+            if let Some(is_overflow) = is_overflow {\n+                let val = val.load_scalar(fx);\n+                Some(CValue::by_val_pair(val, is_overflow, fx.layout_of(out_ty)))\n+            } else {\n+                Some(val)\n+            }\n         }\n     }\n }"}, {"sha": "6a00d1341980b64094fe454b29ee6a27e63f513f", "filename": "src/common.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/88ad25f45e9adbf08871ce77449e1b1193d23df4/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ad25f45e9adbf08871ce77449e1b1193d23df4/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=88ad25f45e9adbf08871ce77449e1b1193d23df4", "patch": "@@ -1,5 +1,6 @@\n use rustc_target::spec::{HasTargetSpec, Target};\n \n+use cranelift::codegen::ir::{Opcode, InstructionData, ValueDef};\n use cranelift_module::Module;\n \n use crate::prelude::*;\n@@ -62,7 +63,7 @@ pub fn codegen_select(bcx: &mut FunctionBuilder, cond: Value, lhs: Value, rhs: V\n     let rhs_ty = bcx.func.dfg.value_type(rhs);\n     assert_eq!(lhs_ty, rhs_ty);\n     if lhs_ty == types::I8 || lhs_ty == types::I16 {\n-        // FIXME workaround for missing enocding for select.i8\n+        // FIXME workaround for missing encoding for select.i8\n         let lhs = bcx.ins().uextend(types::I32, lhs);\n         let rhs = bcx.ins().uextend(types::I32, rhs);\n         let res = bcx.ins().select(cond, lhs, rhs);\n@@ -118,6 +119,49 @@ pub fn clif_intcast<'a, 'tcx: 'a>(\n     }\n }\n \n+fn resolve_normal_value_imm(func: &Function, val: Value) -> Option<i64> {\n+    if let ValueDef::Result(inst, 0 /*param*/) = func.dfg.value_def(val) {\n+        if let InstructionData::UnaryImm {\n+            opcode: Opcode::Iconst,\n+            imm,\n+        } = func.dfg[inst] {\n+            Some(imm.into())\n+        } else {\n+            None\n+        }\n+    } else {\n+        None\n+    }\n+}\n+\n+fn resolve_128bit_value_imm(func: &Function, val: Value) -> Option<u128> {\n+    let (lsb, msb) = if let ValueDef::Result(inst, 0 /*param*/) = func.dfg.value_def(val) {\n+        if let InstructionData::Binary {\n+            opcode: Opcode::Iconcat,\n+            args: [lsb, msb],\n+        } = func.dfg[inst] {\n+            (lsb, msb)\n+        } else {\n+            return None;\n+        }\n+    } else {\n+        return None;\n+    };\n+\n+    let lsb = resolve_normal_value_imm(func, lsb)? as u64 as u128;\n+    let msb = resolve_normal_value_imm(func, msb)? as u64 as u128;\n+\n+    Some(msb << 64 | lsb)\n+}\n+\n+pub fn resolve_value_imm(func: &Function, val: Value) -> Option<u128> {\n+    if func.dfg.value_type(val) == types::I128 {\n+        resolve_128bit_value_imm(func, val)\n+    } else {\n+        resolve_normal_value_imm(func, val).map(|imm| imm as u64 as u128)\n+    }\n+}\n+\n pub struct FunctionCx<'a, 'tcx: 'a, B: Backend> {\n     // FIXME use a reference to `CodegenCx` instead of `tcx`, `module` and `constants` and `caches`\n     pub tcx: TyCtxt<'tcx>,"}]}