{"sha": "690439bb45e27f0fb76c05dcd8b5ae9adfc86c55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MDQzOWJiNDVlMjdmMGZiNzZjMDVkY2Q4YjVhZTlhZGZjODZjNTU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-30T08:41:26Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:06:05Z"}, "message": "Update ui tests", "tree": {"sha": "21f75bcdab2d0af98b68d6b425e70d8d1ff1e82e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21f75bcdab2d0af98b68d6b425e70d8d1ff1e82e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/690439bb45e27f0fb76c05dcd8b5ae9adfc86c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/690439bb45e27f0fb76c05dcd8b5ae9adfc86c55", "html_url": "https://github.com/rust-lang/rust/commit/690439bb45e27f0fb76c05dcd8b5ae9adfc86c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/690439bb45e27f0fb76c05dcd8b5ae9adfc86c55/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "374a096cb147b775e0eacb9d2a57f3686336078b", "url": "https://api.github.com/repos/rust-lang/rust/commits/374a096cb147b775e0eacb9d2a57f3686336078b", "html_url": "https://github.com/rust-lang/rust/commit/374a096cb147b775e0eacb9d2a57f3686336078b"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "9423f0a359c69bdf04de02bccd2b926cde56afcb", "filename": "src/test/ui/macros/macro-in-expression-context-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/690439bb45e27f0fb76c05dcd8b5ae9adfc86c55/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/690439bb45e27f0fb76c05dcd8b5ae9adfc86c55/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.rs?ref=690439bb45e27f0fb76c05dcd8b5ae9adfc86c55", "patch": "@@ -3,6 +3,6 @@ macro_rules! empty { () => () }\n fn main() {\n     match 42 {\n         _ => { empty!() }\n-//~^ ERROR expected expression, found `<eof>`\n+//~^ ERROR macro expansion ends with an incomplete expression\n     };\n }"}, {"sha": "64f675ecc1c4d1f3579e1eaff60cdc52ab3341cc", "filename": "src/test/ui/proc-macro/span-preservation.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/690439bb45e27f0fb76c05dcd8b5ae9adfc86c55/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/690439bb45e27f0fb76c05dcd8b5ae9adfc86c55/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs?ref=690439bb45e27f0fb76c05dcd8b5ae9adfc86c55", "patch": "@@ -1,3 +1,4 @@\n+//~ ERROR mismatched types\n // aux-build:span-preservation.rs\n \n // For each of these, we should get the appropriate type mismatch error message,\n@@ -9,13 +10,13 @@ use foo::foo;\n \n #[foo]\n fn a() {\n-    let x: usize = \"hello\";;;;;\n+    let x: usize = \"hello\";;;;; //~ ERROR mismatched types\n }\n \n #[foo]\n fn b(x: Option<isize>) -> usize {\n     match x {\n-        Some(x) => { return x },\n+        Some(x) => { return x }, //~ ERROR mismatched types\n         None => 10\n     }\n }\n@@ -31,8 +32,8 @@ fn c() {\n         b: usize\n     }\n \n-    let x = Foo { a: 10isize };\n-    let y = Foo { a: 10, b: 10isize };\n+    let x = Foo { a: 10isize }; //~ ERROR mismatched types\n+    let y = Foo { a: 10, b: 10isize }; //~ ERROR has no field named `b`\n }\n \n // FIXME: This doesn't work at the moment. See the one below. The pretty-printer\n@@ -45,7 +46,7 @@ extern fn bar() {\n \n #[foo]\n extern \"C\" fn baz() {\n-    0\n+    0 //~ ERROR mismatched types\n }\n \n fn main() {}"}, {"sha": "64d0173cb9c224355ed3ff7461b8b2757ec09ab5", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/690439bb45e27f0fb76c05dcd8b5ae9adfc86c55/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/690439bb45e27f0fb76c05dcd8b5ae9adfc86c55/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=690439bb45e27f0fb76c05dcd8b5ae9adfc86c55", "patch": "@@ -4,40 +4,40 @@ error[E0308]: mismatched types\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:12:20\n+  --> $DIR/span-preservation.rs:13:20\n    |\n-LL |     let x: usize = \"hello\";;;;;\n+LL |     let x: usize = \"hello\";;;;; //~ ERROR mismatched types\n    |                    ^^^^^^^ expected usize, found reference\n    |\n    = note: expected type `usize`\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:18:29\n+  --> $DIR/span-preservation.rs:19:29\n    |\n-LL |         Some(x) => { return x },\n+LL |         Some(x) => { return x }, //~ ERROR mismatched types\n    |                             ^ expected usize, found isize\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:34:22\n+  --> $DIR/span-preservation.rs:35:22\n    |\n-LL |     let x = Foo { a: 10isize };\n+LL |     let x = Foo { a: 10isize }; //~ ERROR mismatched types\n    |                      ^^^^^^^ expected usize, found isize\n \n error[E0560]: struct `c::Foo` has no field named `b`\n-  --> $DIR/span-preservation.rs:35:26\n+  --> $DIR/span-preservation.rs:36:26\n    |\n-LL |     let y = Foo { a: 10, b: 10isize };\n+LL |     let y = Foo { a: 10, b: 10isize }; //~ ERROR has no field named `b`\n    |                          ^ `c::Foo` does not have this field\n    |\n    = note: available fields are: `a`\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:48:5\n+  --> $DIR/span-preservation.rs:49:5\n    |\n LL | extern \"C\" fn baz() {\n    |                     - possibly return type missing here?\n-LL |     0\n+LL |     0 //~ ERROR mismatched types\n    |     ^ expected (), found integral variable\n    |\n    = note: expected type `()`"}, {"sha": "6b26f1214368ca8f104ed7e2db9dbbaa965fcc7d", "filename": "src/test/ui/suggestions/suggest-move-lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/690439bb45e27f0fb76c05dcd8b5ae9adfc86c55/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/690439bb45e27f0fb76c05dcd8b5ae9adfc86c55/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.rs?ref=690439bb45e27f0fb76c05dcd8b5ae9adfc86c55", "patch": "@@ -1,18 +1,18 @@\n-struct A<T, 'a> {\n+struct A<T, 'a> { //~ ERROR lifetime parameters must be declared\n     t: &'a T,\n }\n \n-struct B<T, 'a, U> {\n+struct B<T, 'a, U> { //~ ERROR lifetime parameters must be declared\n     t: &'a T,\n     u: U,\n }\n \n-struct C<T, U, 'a> {\n+struct C<T, U, 'a> { //~ ERROR lifetime parameters must be declared\n     t: &'a T,\n     u: U,\n }\n \n-struct D<T, U, 'a, 'b, V, 'c> {\n+struct D<T, U, 'a, 'b, V, 'c> { //~ ERROR lifetime parameters must be declared\n     t: &'a T,\n     u: &'b U,\n     v: &'c V,"}, {"sha": "72a2cbe6bf6de07798cdacc79e6b48c3f4907ca5", "filename": "src/test/ui/suggestions/suggest-move-lifetimes.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/690439bb45e27f0fb76c05dcd8b5ae9adfc86c55/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/690439bb45e27f0fb76c05dcd8b5ae9adfc86c55/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr?ref=690439bb45e27f0fb76c05dcd8b5ae9adfc86c55", "patch": "@@ -1,41 +1,41 @@\n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:1:13\n    |\n-LL | struct A<T, 'a> {\n+LL | struct A<T, 'a> { //~ ERROR lifetime parameters must be declared\n    |             ^^\n help: move the lifetime parameter prior to the first type parameter\n    |\n-LL | struct A<'a, T> {\n+LL | struct A<'a, T> { //~ ERROR lifetime parameters must be declared\n    |          ^^^ --\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:5:13\n    |\n-LL | struct B<T, 'a, U> {\n+LL | struct B<T, 'a, U> { //~ ERROR lifetime parameters must be declared\n    |             ^^\n help: move the lifetime parameter prior to the first type parameter\n    |\n-LL | struct B<'a, T, U> {\n+LL | struct B<'a, T, U> { //~ ERROR lifetime parameters must be declared\n    |          ^^^   --\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:10:16\n    |\n-LL | struct C<T, U, 'a> {\n+LL | struct C<T, U, 'a> { //~ ERROR lifetime parameters must be declared\n    |                ^^\n help: move the lifetime parameter prior to the first type parameter\n    |\n-LL | struct C<'a, T, U> {\n+LL | struct C<'a, T, U> { //~ ERROR lifetime parameters must be declared\n    |          ^^^    --\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:15:16\n    |\n-LL | struct D<T, U, 'a, 'b, V, 'c> {\n+LL | struct D<T, U, 'a, 'b, V, 'c> { //~ ERROR lifetime parameters must be declared\n    |                ^^  ^^     ^^\n help: move the lifetime parameter prior to the first type parameter\n    |\n-LL | struct D<'a, 'b, 'c, T, U, V> {\n+LL | struct D<'a, 'b, 'c, T, U, V> { //~ ERROR lifetime parameters must be declared\n    |          ^^^ ^^^ ^^^      ---\n \n error: aborting due to 4 previous errors"}]}