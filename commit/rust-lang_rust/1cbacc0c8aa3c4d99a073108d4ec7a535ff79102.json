{"sha": "1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "node_id": "C_kwDOAAsO6NoAKDFjYmFjYzBjOGFhM2M0ZDk5YTA3MzEwOGQ0ZWM3YTUzNWZmNzkxMDI", "commit": {"author": {"name": "aticu", "email": "15schnic@gmail.com", "date": "2022-06-12T15:46:57Z"}, "committer": {"name": "aticu", "email": "15schnic@gmail.com", "date": "2022-07-19T08:16:10Z"}, "message": "Add E0790 as more specific variant of E0283", "tree": {"sha": "757fd4f91afb91217782aebe83c7919919ce407f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/757fd4f91afb91217782aebe83c7919919ce407f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "html_url": "https://github.com/rust-lang/rust/commit/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/comments", "author": {"login": "aticu", "id": 16419880, "node_id": "MDQ6VXNlcjE2NDE5ODgw", "avatar_url": "https://avatars.githubusercontent.com/u/16419880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aticu", "html_url": "https://github.com/aticu", "followers_url": "https://api.github.com/users/aticu/followers", "following_url": "https://api.github.com/users/aticu/following{/other_user}", "gists_url": "https://api.github.com/users/aticu/gists{/gist_id}", "starred_url": "https://api.github.com/users/aticu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aticu/subscriptions", "organizations_url": "https://api.github.com/users/aticu/orgs", "repos_url": "https://api.github.com/users/aticu/repos", "events_url": "https://api.github.com/users/aticu/events{/privacy}", "received_events_url": "https://api.github.com/users/aticu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aticu", "id": 16419880, "node_id": "MDQ6VXNlcjE2NDE5ODgw", "avatar_url": "https://avatars.githubusercontent.com/u/16419880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aticu", "html_url": "https://github.com/aticu", "followers_url": "https://api.github.com/users/aticu/followers", "following_url": "https://api.github.com/users/aticu/following{/other_user}", "gists_url": "https://api.github.com/users/aticu/gists{/gist_id}", "starred_url": "https://api.github.com/users/aticu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aticu/subscriptions", "organizations_url": "https://api.github.com/users/aticu/orgs", "repos_url": "https://api.github.com/users/aticu/repos", "events_url": "https://api.github.com/users/aticu/events{/privacy}", "received_events_url": "https://api.github.com/users/aticu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c2df810b0b681fee63cae11ca63844792b6190", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c2df810b0b681fee63cae11ca63844792b6190", "html_url": "https://github.com/rust-lang/rust/commit/96c2df810b0b681fee63cae11ca63844792b6190"}], "stats": {"total": 446, "additions": 354, "deletions": 92}, "files": [{"sha": "97766b8368ab6a17a9487e06910a1a407b3fc48a", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -492,6 +492,7 @@ E0785: include_str!(\"./error_codes/E0785.md\"),\n E0786: include_str!(\"./error_codes/E0786.md\"),\n E0787: include_str!(\"./error_codes/E0787.md\"),\n E0788: include_str!(\"./error_codes/E0788.md\"),\n+E0790: include_str!(\"./error_codes/E0790.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "e5a3179aabf0597b99721f45fd6e8777309f94ea", "filename": "compiler/rustc_error_codes/src/error_codes/E0283.md", "status": "modified", "additions": 12, "deletions": 29, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0283.md", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0283.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0283.md?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -3,48 +3,31 @@ An implementation cannot be chosen unambiguously because of lack of information.\n Erroneous code example:\n \n ```compile_fail,E0283\n-trait Generator {\n-    fn create() -> u32;\n-}\n-\n-struct Impl;\n-\n-impl Generator for Impl {\n-    fn create() -> u32 { 1 }\n-}\n+struct Foo;\n \n-struct AnotherImpl;\n-\n-impl Generator for AnotherImpl {\n-    fn create() -> u32 { 2 }\n+impl Into<u32> for Foo {\n+    fn into(self) -> u32 { 1 }\n }\n \n fn main() {\n-    let cont: u32 = Generator::create();\n-    // error, impossible to choose one of Generator trait implementation\n-    // Should it be Impl or AnotherImpl, maybe something else?\n+    let foo = Foo;\n+    let bar: u32 = foo.into() * 1u32;\n }\n ```\n \n This error can be solved by adding type annotations that provide the missing\n-information to the compiler. In this case, the solution is to use a concrete\n-type:\n+information to the compiler. In this case, the solution is to specify the\n+fully-qualified method:\n \n ```\n-trait Generator {\n-    fn create() -> u32;\n-}\n+struct Foo;\n \n-struct AnotherImpl;\n-\n-impl Generator for AnotherImpl {\n-    fn create() -> u32 { 2 }\n+impl Into<u32> for Foo {\n+    fn into(self) -> u32 { 1 }\n }\n \n fn main() {\n-    let gen1 = AnotherImpl::create();\n-\n-    // if there are multiple methods with same name (different traits)\n-    let gen2 = <AnotherImpl as Generator>::create();\n+    let foo = Foo;\n+    let bar: u32 = <Foo as Into<u32>>::into(foo) * 1u32;\n }\n ```"}, {"sha": "93d9636626d44485f8e3a887c535602c684a2e6a", "filename": "compiler/rustc_error_codes/src/error_codes/E0790.md", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0790.md", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0790.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0790.md?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -0,0 +1,51 @@\n+You need to specify a specific implementation of the trait in order to call the\n+method.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0790\n+trait Generator {\n+    fn create() -> u32;\n+}\n+\n+struct Impl;\n+\n+impl Generator for Impl {\n+    fn create() -> u32 { 1 }\n+}\n+\n+struct AnotherImpl;\n+\n+impl Generator for AnotherImpl {\n+    fn create() -> u32 { 2 }\n+}\n+\n+fn main() {\n+    let cont: u32 = Generator::create();\n+    // error, impossible to choose one of Generator trait implementation\n+    // Should it be Impl or AnotherImpl, maybe something else?\n+}\n+```\n+\n+This error can be solved by adding type annotations that provide the missing\n+information to the compiler. In this case, the solution is to use a concrete\n+type:\n+\n+```\n+trait Generator {\n+    fn create() -> u32;\n+}\n+\n+struct AnotherImpl;\n+\n+impl Generator for AnotherImpl {\n+    fn create() -> u32 { 2 }\n+}\n+\n+fn main() {\n+    let gen1 = AnotherImpl::create();\n+\n+    // if there are multiple methods with same name (different traits)\n+    let gen2 = <AnotherImpl as Generator>::create();\n+}\n+```"}, {"sha": "541dace5cc2bb5f31964d42799e792ebdab6af2d", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -74,6 +74,10 @@ impl TraitImpls {\n     pub fn blanket_impls(&self) -> &[DefId] {\n         self.blanket_impls.as_slice()\n     }\n+\n+    pub fn non_blanket_impls(&self) -> &FxIndexMap<SimplifiedType, Vec<DefId>> {\n+        &self.non_blanket_impls\n+    }\n }\n \n impl<'tcx> TraitDef {"}, {"sha": "585159e309f6990ba3a34603fab472180fed6a79", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -2104,6 +2104,98 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         );\n                     }\n                 }\n+\n+                if let (Some(body_id), Some(ty::subst::GenericArgKind::Type(_))) =\n+                    (body_id, subst.map(|subst| subst.unpack()))\n+                {\n+                    struct FindExprBySpan<'hir> {\n+                        span: Span,\n+                        result: Option<&'hir hir::Expr<'hir>>,\n+                    }\n+\n+                    impl<'v> hir::intravisit::Visitor<'v> for FindExprBySpan<'v> {\n+                        fn visit_expr(&mut self, ex: &'v hir::Expr<'v>) {\n+                            if self.span == ex.span {\n+                                self.result = Some(ex);\n+                            } else {\n+                                hir::intravisit::walk_expr(self, ex);\n+                            }\n+                        }\n+                    }\n+\n+                    let mut expr_finder = FindExprBySpan { span, result: None };\n+\n+                    expr_finder.visit_expr(&self.tcx.hir().body(body_id).value);\n+\n+                    if let Some(hir::Expr {\n+                        kind: hir::ExprKind::Path(hir::QPath::Resolved(None, path)), .. }\n+                    ) = expr_finder.result\n+                        && let [\n+                            ..,\n+                            trait_path_segment @ hir::PathSegment {\n+                                res: Some(rustc_hir::def::Res::Def(rustc_hir::def::DefKind::Trait, trait_id)),\n+                                ..\n+                            },\n+                            hir::PathSegment {\n+                                ident: assoc_item_name,\n+                                res: Some(rustc_hir::def::Res::Def(_, item_id)),\n+                                ..\n+                            }\n+                        ] = path.segments\n+                        && data.trait_ref.def_id == *trait_id\n+                        && self.tcx.trait_of_item(item_id) == Some(*trait_id)\n+                        && !self.is_tainted_by_errors()\n+                    {\n+                        let (verb, noun) = match self.tcx.associated_item(item_id).kind {\n+                            ty::AssocKind::Const => (\"refer to the\", \"constant\"),\n+                            ty::AssocKind::Fn => (\"call\", \"function\"),\n+                            ty::AssocKind::Type => (\"refer to the\", \"type\"), // this is already covered by E0223, but this single match arm doesn't hurt here\n+                        };\n+\n+                        // Replace the more general E0283 with a more specific error\n+                        err.cancel();\n+                        err = self.tcx.sess.struct_span_err_with_code(\n+                            span,\n+                            &format!(\n+                                \"cannot {verb} associated {noun} on trait without specifying the corresponding `impl` type\",\n+                             ),\n+                            rustc_errors::error_code!(E0790),\n+                        );\n+\n+                        if let Some(local_def_id) = data.trait_ref.def_id.as_local()\n+                            && let Some(hir::Node::Item(hir::Item { ident: trait_name, kind: hir::ItemKind::Trait(_, _, _, _, trait_item_refs), .. })) = self.tcx.hir().find_by_def_id(local_def_id)\n+                            && let Some(method_ref) = trait_item_refs.iter().find(|item_ref| item_ref.ident == *assoc_item_name) {\n+                            err.span_label(method_ref.span, format!(\"`{}::{}` defined here\", trait_name, assoc_item_name));\n+                        }\n+\n+                        err.span_label(span, format!(\"cannot {verb} associated {noun} of trait\"));\n+\n+                        let trait_impls = self.tcx.trait_impls_of(data.trait_ref.def_id);\n+\n+                        if trait_impls.blanket_impls().is_empty()\n+                            && let Some((impl_ty, _)) = trait_impls.non_blanket_impls().iter().next()\n+                            && let Some(impl_def_id) = impl_ty.def() {\n+                            let message = if trait_impls.non_blanket_impls().len() == 1 {\n+                                \"use the fully-qualified path to the only available implementation\".to_string()\n+                            } else {\n+                                format!(\n+                                    \"use a fully-qualified path to a specific available implementation ({} found)\",\n+                                    trait_impls.non_blanket_impls().len()\n+                                )\n+                            };\n+\n+                            err.multipart_suggestion(\n+                                message,\n+                                vec![\n+                                    (trait_path_segment.ident.span.shrink_to_lo(), format!(\"<{} as \", self.tcx.def_path(impl_def_id).to_string_no_crate_verbose())),\n+                                    (trait_path_segment.ident.span.shrink_to_hi(), format!(\">\"))\n+                                ],\n+                                Applicability::MaybeIncorrect\n+                            );\n+                        }\n+                    }\n+                };\n+\n                 err\n             }\n "}, {"sha": "67ef4e74cf2e0824b449f485150739b36796ba7a", "filename": "src/test/ui/associated-consts/issue-63496.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.rs?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -2,8 +2,8 @@ trait A {\n     const C: usize;\n \n     fn f() -> ([u8; A::C], [u8; A::C]);\n-    //~^ ERROR: type annotations needed\n-    //~| ERROR: type annotations needed\n+    //~^ ERROR: E0790\n+    //~| ERROR: E0790\n }\n \n fn main() {}"}, {"sha": "f2a4e01adea43a4ddfadd372e7d4ab766577191b", "filename": "src/test/ui/associated-consts/issue-63496.stderr", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -1,27 +1,21 @@\n-error[E0283]: type annotations needed\n+error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/issue-63496.rs:4:21\n    |\n+LL |     const C: usize;\n+   |     --------------- `A::C` defined here\n+LL |\n LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n-   |                     ^^^^\n-   |                     |\n-   |                     cannot infer type\n-   |                     help: use the fully qualified path to an implementation: `<Type as A>::C`\n-   |\n-   = note: cannot satisfy `_: A`\n-   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n+   |                     ^^^^ cannot refer to the associated constant of trait\n \n-error[E0283]: type annotations needed\n+error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/issue-63496.rs:4:33\n    |\n+LL |     const C: usize;\n+   |     --------------- `A::C` defined here\n+LL |\n LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n-   |                                 ^^^^\n-   |                                 |\n-   |                                 cannot infer type\n-   |                                 help: use the fully qualified path to an implementation: `<Type as A>::C`\n-   |\n-   = note: cannot satisfy `_: A`\n-   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n+   |                                 ^^^^ cannot refer to the associated constant of trait\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0790`."}, {"sha": "d2b51184c999aa666aed784c9bb100eaecfff806", "filename": "src/test/ui/associated-item/issue-48027.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.rs?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -1,6 +1,6 @@\n trait Bar {\n     const X: usize;\n-    fn return_n(&self) -> [u8; Bar::X]; //~ ERROR: type annotations needed\n+    fn return_n(&self) -> [u8; Bar::X]; //~ ERROR: E0790\n }\n \n impl dyn Bar {} //~ ERROR: the trait `Bar` cannot be made into an object"}, {"sha": "45ea419336b2c72c1dca32e9a1ac0a8ff558f0ef", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -13,19 +13,15 @@ LL |     const X: usize;\n    |           ^ ...because it contains this associated `const`\n    = help: consider moving `X` to another trait\n \n-error[E0283]: type annotations needed\n+error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/issue-48027.rs:3:32\n    |\n+LL |     const X: usize;\n+   |     --------------- `Bar::X` defined here\n LL |     fn return_n(&self) -> [u8; Bar::X];\n-   |                                ^^^^^^\n-   |                                |\n-   |                                cannot infer type\n-   |                                help: use the fully qualified path to an implementation: `<Type as Bar>::X`\n-   |\n-   = note: cannot satisfy `_: Bar`\n-   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n+   |                                ^^^^^^ cannot refer to the associated constant of trait\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0038, E0283.\n+Some errors have detailed explanations: E0038, E0790.\n For more information about an error, try `rustc --explain E0038`."}, {"sha": "2fb27bf3cd1ebc96198a68de9641c208638ebd84", "filename": "src/test/ui/associated-types/associated-types-unconstrained.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.rs?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -12,5 +12,5 @@ impl Foo for isize {\n \n pub fn main() {\n     let x: isize = Foo::bar();\n-    //~^ ERROR type annotations needed\n+    //~^ ERROR E0790\n }"}, {"sha": "e51a8f3bd1a3ae05363f2db0ff0862ae66d0956d", "filename": "src/test/ui/associated-types/associated-types-unconstrained.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -1,11 +1,12 @@\n-error[E0283]: type annotations needed\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n   --> $DIR/associated-types-unconstrained.rs:14:20\n    |\n+LL |     fn bar() -> isize;\n+   |     ------------------ `Foo::bar` defined here\n+...\n LL |     let x: isize = Foo::bar();\n-   |                    ^^^^^^^^ cannot infer type\n-   |\n-   = note: cannot satisfy `_: Foo`\n+   |                    ^^^^^^^^ cannot call associated function of trait\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0790`."}, {"sha": "0643af4b7e8c6659d524e0d68c6b6031220909e6", "filename": "src/test/ui/error-codes/E0283.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Ferror-codes%2FE0283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Ferror-codes%2FE0283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.rs?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -27,7 +27,7 @@ impl Generator for AnotherImpl {\n }\n \n fn main() {\n-    let cont: u32 = Generator::create(); //~ ERROR E0283\n+    let cont: u32 = Generator::create(); //~ ERROR E0790\n }\n \n fn buzz() {"}, {"sha": "90a28874ead8c7a073e535597305186689b0270b", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -1,10 +1,16 @@\n-error[E0283]: type annotations needed\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n   --> $DIR/E0283.rs:30:21\n    |\n+LL |     fn create() -> u32;\n+   |     ------------------- `Generator::create` defined here\n+...\n LL |     let cont: u32 = Generator::create();\n-   |                     ^^^^^^^^^^^^^^^^^ cannot infer type\n+   |                     ^^^^^^^^^^^^^^^^^ cannot call associated function of trait\n+   |\n+help: use a fully-qualified path to a specific available implementation (2 found)\n    |\n-   = note: cannot satisfy `_: Generator`\n+LL |     let cont: u32 = <::Impl as Generator>::create();\n+   |                     ++++++++++          +\n \n error[E0283]: type annotations needed\n   --> $DIR/E0283.rs:35:24\n@@ -27,4 +33,5 @@ LL |     let bar = <Impl as Into<T>>::into(foo_impl) * 1u32;\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0283`.\n+Some errors have detailed explanations: E0283, E0790.\n+For more information about an error, try `rustc --explain E0283`."}, {"sha": "d99006d2df734964e081bd98a39b809262bdcf71", "filename": "src/test/ui/error-codes/E0790.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Ferror-codes%2FE0790.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Ferror-codes%2FE0790.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0790.rs?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -0,0 +1,53 @@\n+mod inner {\n+    pub trait MyTrait {\n+        const MY_ASSOC_CONST: ();\n+\n+        fn my_fn();\n+    }\n+\n+    pub struct MyStruct;\n+\n+    impl MyTrait for MyStruct {\n+        const MY_ASSOC_CONST: () = ();\n+\n+        fn my_fn() {}\n+    }\n+\n+    fn call() {\n+        MyTrait::my_fn(); //~ ERROR E0790\n+    }\n+\n+    fn use_const() {\n+        let _ = MyTrait::MY_ASSOC_CONST; //~ ERROR E0790\n+    }\n+}\n+\n+fn call_inner() {\n+    inner::MyTrait::my_fn(); //~ ERROR E0790\n+}\n+\n+fn use_const_inner() {\n+    let _ = inner::MyTrait::MY_ASSOC_CONST; //~ ERROR E0790\n+}\n+\n+trait MyTrait2 {\n+    fn my_fn();\n+}\n+\n+struct Impl1;\n+\n+impl MyTrait2 for Impl1 {\n+    fn my_fn() {}\n+}\n+\n+struct Impl2;\n+\n+impl MyTrait2 for Impl2 {\n+    fn my_fn() {}\n+}\n+\n+fn call_multiple_impls() {\n+    MyTrait2::my_fn(); //~ ERROR E0790\n+}\n+\n+fn main() {}"}, {"sha": "6e173a9682a0c2f7442e9196bdb53949af28f1bb", "filename": "src/test/ui/error-codes/E0790.stderr", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -0,0 +1,73 @@\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n+  --> $DIR/E0790.rs:17:9\n+   |\n+LL |         fn my_fn();\n+   |         ----------- `MyTrait::my_fn` defined here\n+...\n+LL |         MyTrait::my_fn();\n+   |         ^^^^^^^^^^^^^^ cannot call associated function of trait\n+   |\n+help: use the fully-qualified path to the only available implementation\n+   |\n+LL |         <::inner::MyStruct as MyTrait>::my_fn();\n+   |         +++++++++++++++++++++        +\n+\n+error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n+  --> $DIR/E0790.rs:21:17\n+   |\n+LL |         const MY_ASSOC_CONST: ();\n+   |         ------------------------- `MyTrait::MY_ASSOC_CONST` defined here\n+...\n+LL |         let _ = MyTrait::MY_ASSOC_CONST;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ cannot refer to the associated constant of trait\n+   |\n+help: use the fully-qualified path to the only available implementation\n+   |\n+LL |         let _ = <::inner::MyStruct as MyTrait>::MY_ASSOC_CONST;\n+   |                 +++++++++++++++++++++        +\n+\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n+  --> $DIR/E0790.rs:26:5\n+   |\n+LL |         fn my_fn();\n+   |         ----------- `MyTrait::my_fn` defined here\n+...\n+LL |     inner::MyTrait::my_fn();\n+   |     ^^^^^^^^^^^^^^^^^^^^^ cannot call associated function of trait\n+   |\n+help: use the fully-qualified path to the only available implementation\n+   |\n+LL |     inner::<::inner::MyStruct as MyTrait>::my_fn();\n+   |            +++++++++++++++++++++        +\n+\n+error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n+  --> $DIR/E0790.rs:30:13\n+   |\n+LL |         const MY_ASSOC_CONST: ();\n+   |         ------------------------- `MyTrait::MY_ASSOC_CONST` defined here\n+...\n+LL |     let _ = inner::MyTrait::MY_ASSOC_CONST;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot refer to the associated constant of trait\n+   |\n+help: use the fully-qualified path to the only available implementation\n+   |\n+LL |     let _ = inner::<::inner::MyStruct as MyTrait>::MY_ASSOC_CONST;\n+   |                    +++++++++++++++++++++        +\n+\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n+  --> $DIR/E0790.rs:50:5\n+   |\n+LL |     fn my_fn();\n+   |     ----------- `MyTrait2::my_fn` defined here\n+...\n+LL |     MyTrait2::my_fn();\n+   |     ^^^^^^^^^^^^^^^ cannot call associated function of trait\n+   |\n+help: use a fully-qualified path to a specific available implementation (2 found)\n+   |\n+LL |     <::Impl1 as MyTrait2>::my_fn();\n+   |     +++++++++++         +\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0790`."}, {"sha": "d4e1df22770948d7ecaba87a6fc9625b55d97c0f", "filename": "src/test/ui/issues/issue-54954.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -1,5 +1,5 @@\n const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n-//~^ ERROR type annotations needed\n+//~^ ERROR E0790\n \n trait Tt {\n     const fn const_val<T: Sized>() -> usize {"}, {"sha": "668985c2b5914c6bcc4c74d23c720cd8fce360c9", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -4,13 +4,17 @@ error[E0379]: functions in traits cannot be declared const\n LL |     const fn const_val<T: Sized>() -> usize {\n    |     ^^^^^ functions in traits cannot be const\n \n-error[E0283]: type annotations needed\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n   --> $DIR/issue-54954.rs:1:24\n    |\n-LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n-   |\n-   = note: cannot satisfy `_: Tt`\n+LL |   const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot call associated function of trait\n+...\n+LL | /     const fn const_val<T: Sized>() -> usize {\n+LL | |\n+LL | |         core::mem::size_of::<T>()\n+LL | |     }\n+   | |_____- `Tt::const_val` defined here\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-54954.rs:11:15\n@@ -26,5 +30,5 @@ LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0080, E0283, E0379.\n+Some errors have detailed explanations: E0080, E0379, E0790.\n For more information about an error, try `rustc --explain E0080`."}, {"sha": "2a8a1eaa6d3a3054ad5c5494ed28039a3d7a91ad", "filename": "src/test/ui/issues/issue-58022.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fissues%2Fissue-58022.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fissues%2Fissue-58022.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.rs?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -2,7 +2,7 @@ pub trait Foo: Sized {\n     const SIZE: usize;\n \n     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n-    //~^ ERROR: type annotations needed\n+    //~^ ERROR: E0790\n }\n \n pub struct Bar<T: ?Sized>(T);"}, {"sha": "6d24209ad3c7eea3ea990fdc7dad7fc1256effd8", "filename": "src/test/ui/issues/issue-58022.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -4,19 +4,16 @@ error[E0423]: expected function, tuple struct or tuple variant, found trait `Foo\n LL |         Foo(Box::new(*slice))\n    |         ^^^ not a function, tuple struct or tuple variant\n \n-error[E0283]: type annotations needed\n+error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/issue-58022.rs:4:25\n    |\n+LL |     const SIZE: usize;\n+   |     ------------------ `Foo::SIZE` defined here\n+LL |\n LL |     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n-   |                         ^^^^^^^^^\n-   |                         |\n-   |                         cannot infer type\n-   |                         help: use the fully qualified path to an implementation: `<Type as Foo>::SIZE`\n-   |\n-   = note: cannot satisfy `_: Foo`\n-   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n+   |                         ^^^^^^^^^ cannot refer to the associated constant of trait\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0283, E0423.\n-For more information about an error, try `rustc --explain E0283`.\n+Some errors have detailed explanations: E0423, E0790.\n+For more information about an error, try `rustc --explain E0423`."}, {"sha": "f4e94c4f7867c024c1d880b6a059543fb2b6b600", "filename": "src/test/ui/traits/static-method-generic-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.rs?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -22,7 +22,7 @@ mod base {\n \n pub fn foo() {\n     let _f: base::Foo = base::HasNew::new();\n-    //~^ ERROR type annotations needed\n+    //~^ ERROR E0790\n }\n \n fn main() { }"}, {"sha": "f1b8f23ecc7dbbd5bf4479a93448f175ebc6b1ed", "filename": "src/test/ui/traits/static-method-generic-inference.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr?ref=1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "patch": "@@ -1,11 +1,17 @@\n-error[E0283]: type annotations needed\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n   --> $DIR/static-method-generic-inference.rs:24:25\n    |\n+LL |         fn new() -> T;\n+   |         -------------- `HasNew::new` defined here\n+...\n LL |     let _f: base::Foo = base::HasNew::new();\n-   |                         ^^^^^^^^^^^^^^^^^ cannot infer type\n+   |                         ^^^^^^^^^^^^^^^^^ cannot call associated function of trait\n    |\n-   = note: cannot satisfy `_: HasNew<Foo>`\n+help: use the fully-qualified path to the only available implementation\n+   |\n+LL |     let _f: base::Foo = base::<::base::Foo as HasNew>::new();\n+   |                               +++++++++++++++       +\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0790`."}]}