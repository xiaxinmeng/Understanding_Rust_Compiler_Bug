{"sha": "819c9315c38732d98b5288ec4664f0a3fc455c38", "node_id": "C_kwDOAAsO6NoAKDgxOWM5MzE1YzM4NzMyZDk4YjUyODhlYzQ2NjRmMGEzZmM0NTVjMzg", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-10T15:47:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-10T15:47:40Z"}, "message": "Rollup merge of #104186 - chenyukang:yukang/fix-104086-let-binding-issue, r=oli-obk\n\nTighten the 'introduce new binding' suggestion\n\nFixes #104086", "tree": {"sha": "f564df089a4501cb42d29641ed84fea47f16abf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f564df089a4501cb42d29641ed84fea47f16abf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/819c9315c38732d98b5288ec4664f0a3fc455c38", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjbR0cCRBK7hj4Ov3rIwAAdUUIAA2RWvk24gWhgWRx6CILOYjQ\n9jfWcB3aA/I7+EPVSqD+jBkObG+eDF+GNgL63GTunfzwtdemi1zSi21t0U2mM3Sq\nwDvKmf2TaFKULsbYvt3OcTtBb/Qq46oMJSV+i39y0uJd0MtbV6t3UjvlEFxGUtaF\nQBarOk8yq6N8id2U1Sd7gzek9yewe4PoFbem2D30yPoj7xFOmp4nULvXwKWmKkj/\npiAc/A5D6v/42nn65L4UrVZ4L30WQEqPCqYgk1XNcDHKoVA0swfDfI8ckmhXAaA/\nRUxFZKLz4c/DTw8W6sTWfFzd/GP7fmjgOJt3m9poaBKq8IuUW+Msb8+JxTtSK+o=\n=YgMz\n-----END PGP SIGNATURE-----\n", "payload": "tree f564df089a4501cb42d29641ed84fea47f16abf2\nparent 8f2c1f846945c24aeaf773c9b3c76ddae98db36c\nparent c69872bb6c0657241a5b3cf8944861dbd3ff7468\nauthor Manish Goregaokar <manishsmail@gmail.com> 1668095260 -0500\ncommitter GitHub <noreply@github.com> 1668095260 -0500\n\nRollup merge of #104186 - chenyukang:yukang/fix-104086-let-binding-issue, r=oli-obk\n\nTighten the 'introduce new binding' suggestion\n\nFixes #104086\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/819c9315c38732d98b5288ec4664f0a3fc455c38", "html_url": "https://github.com/rust-lang/rust/commit/819c9315c38732d98b5288ec4664f0a3fc455c38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/819c9315c38732d98b5288ec4664f0a3fc455c38/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f2c1f846945c24aeaf773c9b3c76ddae98db36c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f2c1f846945c24aeaf773c9b3c76ddae98db36c", "html_url": "https://github.com/rust-lang/rust/commit/8f2c1f846945c24aeaf773c9b3c76ddae98db36c"}, {"sha": "c69872bb6c0657241a5b3cf8944861dbd3ff7468", "url": "https://api.github.com/repos/rust-lang/rust/commits/c69872bb6c0657241a5b3cf8944861dbd3ff7468", "html_url": "https://github.com/rust-lang/rust/commit/c69872bb6c0657241a5b3cf8944861dbd3ff7468"}], "stats": {"total": 200, "additions": 182, "deletions": 18}, "files": [{"sha": "ede67813883d6b2643464e886c8f769156b6c7e8", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/819c9315c38732d98b5288ec4664f0a3fc455c38/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/819c9315c38732d98b5288ec4664f0a3fc455c38/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=819c9315c38732d98b5288ec4664f0a3fc455c38", "patch": "@@ -527,6 +527,7 @@ struct DiagnosticMetadata<'ast> {\n \n     /// Used to detect possible new binding written without `let` and to provide structured suggestion.\n     in_assignment: Option<&'ast Expr>,\n+    is_assign_rhs: bool,\n \n     /// If we are currently in a trait object definition. Used to point at the bounds when\n     /// encountering a struct or enum.\n@@ -3963,10 +3964,15 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.resolve_expr(elem, Some(expr));\n                 self.visit_expr(idx);\n             }\n-            ExprKind::Assign(..) => {\n-                let old = self.diagnostic_metadata.in_assignment.replace(expr);\n-                visit::walk_expr(self, expr);\n-                self.diagnostic_metadata.in_assignment = old;\n+            ExprKind::Assign(ref lhs, ref rhs, _) => {\n+                if !self.diagnostic_metadata.is_assign_rhs {\n+                    self.diagnostic_metadata.in_assignment = Some(expr);\n+                }\n+                self.visit_expr(lhs);\n+                self.diagnostic_metadata.is_assign_rhs = true;\n+                self.diagnostic_metadata.in_assignment = None;\n+                self.visit_expr(rhs);\n+                self.diagnostic_metadata.is_assign_rhs = false;\n             }\n             _ => {\n                 visit::walk_expr(self, expr);"}, {"sha": "2587a9c4b3498aa8085a9c599fe927a939dc8827", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/819c9315c38732d98b5288ec4664f0a3fc455c38/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/819c9315c38732d98b5288ec4664f0a3fc455c38/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=819c9315c38732d98b5288ec4664f0a3fc455c38", "patch": "@@ -1810,29 +1810,22 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         false\n     }\n \n-    fn let_binding_suggestion(&self, err: &mut Diagnostic, ident_span: Span) -> bool {\n-        // try to give a suggestion for this pattern: `name = 1`, which is common in other languages\n-        let mut added_suggestion = false;\n-        if let Some(Expr { kind: ExprKind::Assign(lhs, _rhs, _), .. }) = self.diagnostic_metadata.in_assignment &&\n+    // try to give a suggestion for this pattern: `name = blah`, which is common in other languages\n+    // suggest `let name = blah` to introduce a new binding\n+    fn let_binding_suggestion(&mut self, err: &mut Diagnostic, ident_span: Span) -> bool {\n+        if let Some(Expr { kind: ExprKind::Assign(lhs, .. ), .. }) = self.diagnostic_metadata.in_assignment &&\n             let ast::ExprKind::Path(None, _) = lhs.kind {\n-                let sm = self.r.session.source_map();\n-                let line_span = sm.span_extend_to_line(ident_span);\n-                let ident_name = sm.span_to_snippet(ident_span).unwrap();\n-                // HACK(chenyukang): make sure ident_name is at the starting of the line to protect against macros\n-                if sm\n-                    .span_to_snippet(line_span)\n-                    .map_or(false, |s| s.trim().starts_with(&ident_name))\n-                {\n+                if !ident_span.from_expansion() {\n                     err.span_suggestion_verbose(\n                         ident_span.shrink_to_lo(),\n                         \"you might have meant to introduce a new binding\",\n                         \"let \".to_string(),\n                         Applicability::MaybeIncorrect,\n                     );\n-                    added_suggestion = true;\n+                    return true;\n                 }\n             }\n-        added_suggestion\n+        false\n     }\n \n     fn find_module(&mut self, def_id: DefId) -> Option<(Module<'a>, ImportSuggestion)> {"}, {"sha": "d22ad27d0e031f066fca66ea24e63348e92ddfd3", "filename": "src/test/ui/suggestions/issue-104086-suggest-let.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/819c9315c38732d98b5288ec4664f0a3fc455c38/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104086-suggest-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/819c9315c38732d98b5288ec4664f0a3fc455c38/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104086-suggest-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104086-suggest-let.rs?ref=819c9315c38732d98b5288ec4664f0a3fc455c38", "patch": "@@ -0,0 +1,30 @@\n+fn main() {\n+    x = x = x;\n+    //~^ ERROR cannot find value `x` in this scope\n+    //~| ERROR cannot find value `x` in this scope\n+    //~| ERROR cannot find value `x` in this scope\n+\n+    x = y = y = y;\n+    //~^ ERROR cannot find value `y` in this scope\n+    //~| ERROR cannot find value `y` in this scope\n+    //~| ERROR cannot find value `y` in this scope\n+    //~| ERROR cannot find value `x` in this scope\n+\n+    x = y = y;\n+    //~^ ERROR cannot find value `x` in this scope\n+    //~| ERROR cannot find value `y` in this scope\n+    //~| ERROR cannot find value `y` in this scope\n+\n+    x = x = y;\n+    //~^ ERROR cannot find value `x` in this scope\n+    //~| ERROR cannot find value `x` in this scope\n+    //~| ERROR cannot find value `y` in this scope\n+\n+    x = x; // will suggest add `let`\n+    //~^ ERROR cannot find value `x` in this scope\n+    //~| ERROR cannot find value `x` in this scope\n+\n+    x = y // will suggest add `let`\n+    //~^ ERROR cannot find value `x` in this scope\n+    //~| ERROR cannot find value `y` in this scope\n+}"}, {"sha": "fb4ea3121ac677b7a4b6dababc59f7c1952f6ddb", "filename": "src/test/ui/suggestions/issue-104086-suggest-let.stderr", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/819c9315c38732d98b5288ec4664f0a3fc455c38/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104086-suggest-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/819c9315c38732d98b5288ec4664f0a3fc455c38/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104086-suggest-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104086-suggest-let.stderr?ref=819c9315c38732d98b5288ec4664f0a3fc455c38", "patch": "@@ -0,0 +1,135 @@\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:2:5\n+   |\n+LL |     x = x = x;\n+   |     ^\n+   |\n+help: you might have meant to introduce a new binding\n+   |\n+LL |     let x = x = x;\n+   |     +++\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:2:9\n+   |\n+LL |     x = x = x;\n+   |         ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:2:13\n+   |\n+LL |     x = x = x;\n+   |             ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:7:5\n+   |\n+LL |     x = y = y = y;\n+   |     ^\n+   |\n+help: you might have meant to introduce a new binding\n+   |\n+LL |     let x = y = y = y;\n+   |     +++\n+\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:7:9\n+   |\n+LL |     x = y = y = y;\n+   |         ^ not found in this scope\n+\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:7:13\n+   |\n+LL |     x = y = y = y;\n+   |             ^ not found in this scope\n+\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:7:17\n+   |\n+LL |     x = y = y = y;\n+   |                 ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:13:5\n+   |\n+LL |     x = y = y;\n+   |     ^\n+   |\n+help: you might have meant to introduce a new binding\n+   |\n+LL |     let x = y = y;\n+   |     +++\n+\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:13:9\n+   |\n+LL |     x = y = y;\n+   |         ^ not found in this scope\n+\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:13:13\n+   |\n+LL |     x = y = y;\n+   |             ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:18:5\n+   |\n+LL |     x = x = y;\n+   |     ^\n+   |\n+help: you might have meant to introduce a new binding\n+   |\n+LL |     let x = x = y;\n+   |     +++\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:18:9\n+   |\n+LL |     x = x = y;\n+   |         ^ not found in this scope\n+\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:18:13\n+   |\n+LL |     x = x = y;\n+   |             ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:23:5\n+   |\n+LL |     x = x; // will suggest add `let`\n+   |     ^\n+   |\n+help: you might have meant to introduce a new binding\n+   |\n+LL |     let x = x; // will suggest add `let`\n+   |     +++\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:23:9\n+   |\n+LL |     x = x; // will suggest add `let`\n+   |         ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:27:5\n+   |\n+LL |     x = y // will suggest add `let`\n+   |     ^\n+   |\n+help: you might have meant to introduce a new binding\n+   |\n+LL |     let x = y // will suggest add `let`\n+   |     +++\n+\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/issue-104086-suggest-let.rs:27:9\n+   |\n+LL |     x = y // will suggest add `let`\n+   |         ^ not found in this scope\n+\n+error: aborting due to 17 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}]}