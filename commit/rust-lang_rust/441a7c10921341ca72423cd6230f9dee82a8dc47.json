{"sha": "441a7c10921341ca72423cd6230f9dee82a8dc47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MWE3YzEwOTIxMzQxY2E3MjQyM2NkNjIzMGY5ZGVlODJhOGRjNDc=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-09-21T14:13:15Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:34:26Z"}, "message": "Generalized mono_item.rs and base.rs:codegen_instance", "tree": {"sha": "b07bca0fd22cc58917c94fca2839cf9330526078", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b07bca0fd22cc58917c94fca2839cf9330526078"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/441a7c10921341ca72423cd6230f9dee82a8dc47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/441a7c10921341ca72423cd6230f9dee82a8dc47", "html_url": "https://github.com/rust-lang/rust/commit/441a7c10921341ca72423cd6230f9dee82a8dc47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/441a7c10921341ca72423cd6230f9dee82a8dc47/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a993fe353e1290d1e89345494ba389f6f1dae5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a993fe353e1290d1e89345494ba389f6f1dae5e", "html_url": "https://github.com/rust-lang/rust/commit/6a993fe353e1290d1e89345494ba389f6f1dae5e"}], "stats": {"total": 226, "additions": 136, "deletions": 90}, "files": [{"sha": "d55c156cead6ee2d9246dc89421e0b67d68fea83", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/441a7c10921341ca72423cd6230f9dee82a8dc47/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441a7c10921341ca72423cd6230f9dee82a8dc47/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=441a7c10921341ca72423cd6230f9dee82a8dc47", "patch": "@@ -39,7 +39,7 @@ use rustc::middle::weak_lang_items;\n use rustc::mir::mono::{Linkage, Visibility, Stats, CodegenUnitNameBuilder};\n use rustc::middle::cstore::{EncodedMetadata};\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::layout::{self, Align, TyLayout, LayoutOf, VariantIdx};\n+use rustc::ty::layout::{self, Align, TyLayout, LayoutOf, VariantIdx, HasTyCtxt};\n use rustc::ty::query::Providers;\n use rustc::middle::cstore::{self, LinkagePreference};\n use rustc::middle::exported_symbols;\n@@ -76,6 +76,7 @@ use interfaces::*;\n use std::any::Any;\n use std::cmp;\n use std::ffi::CString;\n+use std::marker;\n use std::ops::{Deref, DerefMut};\n use std::sync::mpsc;\n use std::time::{Instant, Duration};\n@@ -90,27 +91,29 @@ use mir::operand::OperandValue;\n \n use rustc_codegen_utils::check_for_rustc_errors_attr;\n \n-pub struct StatRecorder<'a, 'll: 'a, 'tcx: 'll> {\n-    cx: &'a CodegenCx<'ll, 'tcx>,\n+pub struct StatRecorder<'a, 'tcx, Cx: 'a + CodegenMethods<'tcx>> {\n+    cx: &'a Cx,\n     name: Option<String>,\n     istart: usize,\n+    _marker: marker::PhantomData<&'tcx ()>,\n }\n \n-impl StatRecorder<'a, 'll, 'tcx> {\n-    pub fn new(cx: &'a CodegenCx<'ll, 'tcx>, name: String) -> Self {\n-        let istart = cx.stats.borrow().n_llvm_insns;\n+impl<'a, 'tcx, Cx: CodegenMethods<'tcx>> StatRecorder<'a, 'tcx, Cx> {\n+    pub fn new(cx: &'a Cx, name: String) -> Self {\n+        let istart = cx.stats().borrow().n_llvm_insns;\n         StatRecorder {\n             cx,\n             name: Some(name),\n             istart,\n+            _marker: marker::PhantomData,\n         }\n     }\n }\n \n-impl Drop for StatRecorder<'a, 'll, 'tcx> {\n+impl<'a, 'tcx, Cx: CodegenMethods<'tcx>> Drop for StatRecorder<'a, 'tcx, Cx> {\n     fn drop(&mut self) {\n         if self.cx.sess().codegen_stats() {\n-            let mut stats = self.cx.stats.borrow_mut();\n+            let mut stats = self.cx.stats().borrow_mut();\n             let iend = stats.n_llvm_insns;\n             stats.fn_stats.push((self.name.take().unwrap(), iend - self.istart));\n             stats.n_fns += 1;\n@@ -449,10 +452,13 @@ pub fn memcpy_ty<'a, 'tcx: 'a, Builder: BuilderMethods<'a, 'tcx>>(\n     bx.memcpy(dst, dst_align, src, src_align, bx.cx().const_usize(size), flags);\n }\n \n-pub fn codegen_instance(cx: &CodegenCx<'_, 'tcx>, instance: Instance<'tcx>) {\n+pub fn codegen_instance<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+    cx: &'a Bx::CodegenCx,\n+    instance: Instance<'tcx>,\n+) {\n     let _s = if cx.sess().codegen_stats() {\n         let mut instance_name = String::new();\n-        DefPathBasedNames::new(cx.tcx, true, true)\n+        DefPathBasedNames::new(cx.tcx(), true, true)\n             .push_def_path(instance.def_id(), &mut instance_name);\n         Some(StatRecorder::new(cx, instance_name))\n     } else {\n@@ -464,16 +470,16 @@ pub fn codegen_instance(cx: &CodegenCx<'_, 'tcx>, instance: Instance<'tcx>) {\n     // release builds.\n     info!(\"codegen_instance({})\", instance);\n \n-    let sig = instance.fn_sig(cx.tcx);\n-    let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n+    let sig = instance.fn_sig(cx.tcx());\n+    let sig = cx.tcx().normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n \n-    let lldecl = cx.instances.borrow().get(&instance).cloned().unwrap_or_else(||\n+    let lldecl = cx.instances().borrow().get(&instance).cloned().unwrap_or_else(||\n         bug!(\"Instance `{:?}` not already declared\", instance));\n \n-    cx.stats.borrow_mut().n_closures += 1;\n+    cx.stats().borrow_mut().n_closures += 1;\n \n-    let mir = cx.tcx.instance_mir(instance.def);\n-    mir::codegen_mir::<Builder>(cx, lldecl, &mir, instance, sig);\n+    let mir = cx.tcx().instance_mir(instance.def);\n+    mir::codegen_mir::<Bx>(cx, lldecl, &mir, instance, sig);\n }\n \n pub fn set_link_section(llval: &Value, attrs: &CodegenFnAttrs) {"}, {"sha": "1ccab0ec81a8959e1ea2e63a7898651cf86f499e", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/441a7c10921341ca72423cd6230f9dee82a8dc47/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441a7c10921341ca72423cd6230f9dee82a8dc47/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=441a7c10921341ca72423cd6230f9dee82a8dc47", "patch": "@@ -417,6 +417,14 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn check_overflow(&self) -> bool {\n         self.check_overflow\n     }\n+\n+    fn stats(&self) -> &RefCell<Stats> {\n+        &self.stats\n+    }\n+\n+    fn codegen_unit(&self) -> &Arc<CodegenUnit<'tcx>> {\n+        &self.codegen_unit\n+    }\n }\n \n impl IntrinsicDeclarationMethods<'tcx> for CodegenCx<'b, 'tcx> {"}, {"sha": "e3cdc93e5d2132cd96d0d44b8c266b56acbd04bf", "filename": "src/librustc_codegen_llvm/interfaces/declare.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/441a7c10921341ca72423cd6230f9dee82a8dc47/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441a7c10921341ca72423cd6230f9dee82a8dc47/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdeclare.rs?ref=441a7c10921341ca72423cd6230f9dee82a8dc47", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n use super::backend::Backend;\n+use monomorphize::Instance;\n+use rustc::hir::def_id::DefId;\n+use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty;\n \n pub trait DeclareMethods<'tcx>: Backend<'tcx> {\n@@ -22,3 +25,20 @@ pub trait DeclareMethods<'tcx>: Backend<'tcx> {\n     fn get_declared_value(&self, name: &str) -> Option<Self::Value>;\n     fn get_defined_value(&self, name: &str) -> Option<Self::Value>;\n }\n+\n+pub trait PreDefineMethods<'tcx>: Backend<'tcx> {\n+    fn predefine_static(\n+        &self,\n+        def_id: DefId,\n+        linkage: Linkage,\n+        visibility: Visibility,\n+        symbol_name: &str,\n+    );\n+    fn predefine_fn(\n+        &self,\n+        instance: Instance<'tcx>,\n+        linkage: Linkage,\n+        visibility: Visibility,\n+        symbol_name: &str,\n+    );\n+}"}, {"sha": "a9e6f930a8d6338a276e0191e0f625633e0de8c4", "filename": "src/librustc_codegen_llvm/interfaces/misc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/441a7c10921341ca72423cd6230f9dee82a8dc47/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441a7c10921341ca72423cd6230f9dee82a8dc47/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmisc.rs?ref=441a7c10921341ca72423cd6230f9dee82a8dc47", "patch": "@@ -10,10 +10,13 @@\n \n use super::backend::Backend;\n use libc::c_uint;\n+use monomorphize::partitioning::CodegenUnit;\n+use rustc::mir::mono::Stats;\n use rustc::session::Session;\n use rustc::ty::{self, Instance, Ty};\n use rustc::util::nodemap::FxHashMap;\n use std::cell::RefCell;\n+use std::sync::Arc;\n \n pub trait MiscMethods<'tcx>: Backend<'tcx> {\n     fn vtables(\n@@ -26,4 +29,6 @@ pub trait MiscMethods<'tcx>: Backend<'tcx> {\n     fn eh_personality(&self) -> Self::Value;\n     fn eh_unwind_resume(&self) -> Self::Value;\n     fn sess(&self) -> &Session;\n+    fn stats(&self) -> &RefCell<Stats>;\n+    fn codegen_unit(&self) -> &Arc<CodegenUnit<'tcx>>;\n }"}, {"sha": "6ff662614167e2d45e24a49dbe39fe681271db34", "filename": "src/librustc_codegen_llvm/interfaces/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441a7c10921341ca72423cd6230f9dee82a8dc47/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441a7c10921341ca72423cd6230f9dee82a8dc47/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs?ref=441a7c10921341ca72423cd6230f9dee82a8dc47", "patch": "@@ -26,7 +26,7 @@ pub use self::backend::{Backend, BackendTypes};\n pub use self::builder::BuilderMethods;\n pub use self::consts::ConstMethods;\n pub use self::debuginfo::{DebugInfoBuilderMethods, DebugInfoMethods};\n-pub use self::declare::DeclareMethods;\n+pub use self::declare::{DeclareMethods, PreDefineMethods};\n pub use self::intrinsic::{IntrinsicCallMethods, IntrinsicDeclarationMethods};\n pub use self::misc::MiscMethods;\n pub use self::statics::StaticMethods;\n@@ -47,6 +47,7 @@ pub trait CodegenMethods<'tcx>:\n     + IntrinsicDeclarationMethods<'tcx>\n     + DeclareMethods<'tcx>\n     + AsmMethods<'tcx>\n+    + PreDefineMethods<'tcx>\n {\n }\n \n@@ -61,6 +62,7 @@ impl<'tcx, T> CodegenMethods<'tcx> for T where\n         + IntrinsicDeclarationMethods<'tcx>\n         + DeclareMethods<'tcx>\n         + AsmMethods<'tcx>\n+        + PreDefineMethods<'tcx>\n {}\n \n pub trait HasCodegen<'tcx>: Backend<'tcx> {"}, {"sha": "041cfbf00c6fe5648997a7d63788fc35b7e39036", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 78, "deletions": 73, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/441a7c10921341ca72423cd6230f9dee82a8dc47/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441a7c10921341ca72423cd6230f9dee82a8dc47/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=441a7c10921341ca72423cd6230f9dee82a8dc47", "patch": "@@ -25,24 +25,27 @@ use rustc::hir::def::Def;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty::TypeFoldable;\n-use rustc::ty::layout::LayoutOf;\n+use rustc::ty::layout::{LayoutOf, HasTyCtxt};\n use std::fmt;\n+use builder::Builder;\n use interfaces::*;\n \n pub use rustc::mir::mono::MonoItem;\n \n pub use rustc_mir::monomorphize::item::MonoItemExt as BaseMonoItemExt;\n \n-pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n-    fn define(&self, cx: &CodegenCx<'a, 'tcx>) {\n+pub trait MonoItemExt<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> :\n+    fmt::Debug + BaseMonoItemExt<'a, 'tcx>\n+{\n+    fn define(&self, cx: &'a Bx::CodegenCx) {\n         debug!(\"BEGIN IMPLEMENTING '{} ({})' in cgu {}\",\n-               self.to_string(cx.tcx),\n+               self.to_string(cx.tcx()),\n                self.to_raw_string(),\n-               cx.codegen_unit.name());\n+               cx.codegen_unit().name());\n \n         match *self.as_mono_item() {\n             MonoItem::Static(def_id) => {\n-                let tcx = cx.tcx;\n+                let tcx = cx.tcx();\n                 let is_mutable = match tcx.describe_def(def_id) {\n                     Some(Def::Static(_, is_mutable)) => is_mutable,\n                     Some(other) => {\n@@ -55,51 +58,51 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n                 cx.codegen_static(def_id, is_mutable);\n             }\n             MonoItem::GlobalAsm(node_id) => {\n-                let item = cx.tcx.hir.expect_item(node_id);\n+                let item = cx.tcx().hir.expect_item(node_id);\n                 if let hir::ItemKind::GlobalAsm(ref ga) = item.node {\n                     cx.codegen_global_asm(ga);\n                 } else {\n                     span_bug!(item.span, \"Mismatch between hir::Item type and MonoItem type\")\n                 }\n             }\n             MonoItem::Fn(instance) => {\n-                base::codegen_instance(&cx, instance);\n+                base::codegen_instance::<Bx>(&cx, instance);\n             }\n         }\n \n         debug!(\"END IMPLEMENTING '{} ({})' in cgu {}\",\n-               self.to_string(cx.tcx),\n+               self.to_string(cx.tcx()),\n                self.to_raw_string(),\n-               cx.codegen_unit.name());\n+               cx.codegen_unit().name());\n     }\n \n     fn predefine(&self,\n-                 cx: &CodegenCx<'a, 'tcx>,\n+                 cx: &'a Bx::CodegenCx,\n                  linkage: Linkage,\n                  visibility: Visibility) {\n         debug!(\"BEGIN PREDEFINING '{} ({})' in cgu {}\",\n-               self.to_string(cx.tcx),\n+               self.to_string(cx.tcx()),\n                self.to_raw_string(),\n-               cx.codegen_unit.name());\n+               cx.codegen_unit().name());\n \n-        let symbol_name = self.symbol_name(cx.tcx).as_str();\n+        let symbol_name = self.symbol_name(cx.tcx()).as_str();\n \n         debug!(\"symbol {}\", &symbol_name);\n \n         match *self.as_mono_item() {\n             MonoItem::Static(def_id) => {\n-                predefine_static(cx, def_id, linkage, visibility, &symbol_name);\n+                cx.predefine_static(def_id, linkage, visibility, &symbol_name);\n             }\n             MonoItem::Fn(instance) => {\n-                predefine_fn(cx, instance, linkage, visibility, &symbol_name);\n+                cx.predefine_fn(instance, linkage, visibility, &symbol_name);\n             }\n             MonoItem::GlobalAsm(..) => {}\n         }\n \n         debug!(\"END PREDEFINING '{} ({})' in cgu {}\",\n-               self.to_string(cx.tcx),\n+               self.to_string(cx.tcx()),\n                self.to_raw_string(),\n-               cx.codegen_unit.name());\n+               cx.codegen_unit().name());\n     }\n \n     fn to_raw_string(&self) -> String {\n@@ -119,68 +122,70 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {}\n+impl MonoItemExt<'a, 'tcx, Builder<'a, 'll, 'tcx>> for MonoItem<'tcx> {}\n \n-fn predefine_static<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                              def_id: DefId,\n-                              linkage: Linkage,\n-                              visibility: Visibility,\n-                              symbol_name: &str) {\n-    let instance = Instance::mono(cx.tcx, def_id);\n-    let ty = instance.ty(cx.tcx);\n-    let llty = cx.layout_of(ty).llvm_type(cx);\n-\n-    let g = cx.define_global(symbol_name, llty).unwrap_or_else(|| {\n-        cx.sess().span_fatal(cx.tcx.def_span(def_id),\n-            &format!(\"symbol `{}` is already defined\", symbol_name))\n-    });\n-\n-    unsafe {\n-        llvm::LLVMRustSetLinkage(g, base::linkage_to_llvm(linkage));\n-        llvm::LLVMRustSetVisibility(g, base::visibility_to_llvm(visibility));\n-    }\n+impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n+    fn predefine_static(&self,\n+                                  def_id: DefId,\n+                                  linkage: Linkage,\n+                                  visibility: Visibility,\n+                                  symbol_name: &str) {\n+        let instance = Instance::mono(self.tcx, def_id);\n+        let ty = instance.ty(self.tcx);\n+        let llty = self.layout_of(ty).llvm_type(self);\n \n-    cx.instances.borrow_mut().insert(instance, g);\n-}\n+        let g = self.define_global(symbol_name, llty).unwrap_or_else(|| {\n+            self.sess().span_fatal(self.tcx.def_span(def_id),\n+                &format!(\"symbol `{}` is already defined\", symbol_name))\n+        });\n \n-fn predefine_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                          instance: Instance<'tcx>,\n-                          linkage: Linkage,\n-                          visibility: Visibility,\n-                          symbol_name: &str) {\n-    assert!(!instance.substs.needs_infer() &&\n-            !instance.substs.has_param_types());\n-\n-    let mono_sig = instance.fn_sig(cx.tcx);\n-    let attrs = cx.tcx.codegen_fn_attrs(instance.def_id());\n-    let lldecl = cx.declare_fn(symbol_name, mono_sig);\n-    unsafe { llvm::LLVMRustSetLinkage(lldecl, base::linkage_to_llvm(linkage)) };\n-    base::set_link_section(lldecl, &attrs);\n-    if linkage == Linkage::LinkOnceODR ||\n-        linkage == Linkage::WeakODR {\n-        llvm::SetUniqueComdat(cx.llmod, lldecl);\n+        unsafe {\n+            llvm::LLVMRustSetLinkage(g, base::linkage_to_llvm(linkage));\n+            llvm::LLVMRustSetVisibility(g, base::visibility_to_llvm(visibility));\n+        }\n+\n+        self.instances.borrow_mut().insert(instance, g);\n     }\n \n-    // If we're compiling the compiler-builtins crate, e.g. the equivalent of\n-    // compiler-rt, then we want to implicitly compile everything with hidden\n-    // visibility as we're going to link this object all over the place but\n-    // don't want the symbols to get exported.\n-    if linkage != Linkage::Internal && linkage != Linkage::Private &&\n-       cx.tcx.is_compiler_builtins(LOCAL_CRATE) {\n-        unsafe {\n-            llvm::LLVMRustSetVisibility(lldecl, llvm::Visibility::Hidden);\n+    fn predefine_fn(&self,\n+                              instance: Instance<'tcx>,\n+                              linkage: Linkage,\n+                              visibility: Visibility,\n+                              symbol_name: &str) {\n+        assert!(!instance.substs.needs_infer() &&\n+                !instance.substs.has_param_types());\n+\n+        let mono_sig = instance.fn_sig(self.tcx());\n+        let attrs = self.tcx.codegen_fn_attrs(instance.def_id());\n+        let lldecl = self.declare_fn(symbol_name, mono_sig);\n+        unsafe { llvm::LLVMRustSetLinkage(lldecl, base::linkage_to_llvm(linkage)) };\n+        base::set_link_section(lldecl, &attrs);\n+        if linkage == Linkage::LinkOnceODR ||\n+            linkage == Linkage::WeakODR {\n+            llvm::SetUniqueComdat(self.llmod, lldecl);\n         }\n-    } else {\n-        unsafe {\n-            llvm::LLVMRustSetVisibility(lldecl, base::visibility_to_llvm(visibility));\n+\n+        // If we're compiling the compiler-builtins crate, e.g. the equivalent of\n+        // compiler-rt, then we want to implicitly compile everything with hidden\n+        // visibility as we're going to link this object all over the place but\n+        // don't want the symbols to get exported.\n+        if linkage != Linkage::Internal && linkage != Linkage::Private &&\n+           self.tcx.is_compiler_builtins(LOCAL_CRATE) {\n+            unsafe {\n+                llvm::LLVMRustSetVisibility(lldecl, llvm::Visibility::Hidden);\n+            }\n+        } else {\n+            unsafe {\n+                llvm::LLVMRustSetVisibility(lldecl, base::visibility_to_llvm(visibility));\n+            }\n         }\n-    }\n \n-    debug!(\"predefine_fn: mono_sig = {:?} instance = {:?}\", mono_sig, instance);\n-    if instance.def.is_inline(cx.tcx) {\n-        attributes::inline(cx, lldecl, attributes::InlineAttr::Hint);\n-    }\n-    attributes::from_fn_attrs(cx, lldecl, Some(instance.def.def_id()));\n+        debug!(\"predefine_fn: mono_sig = {:?} instance = {:?}\", mono_sig, instance);\n+        if instance.def.is_inline(self.tcx) {\n+            attributes::inline(self, lldecl, attributes::InlineAttr::Hint);\n+        }\n+        attributes::from_fn_attrs(self, lldecl, Some(instance.def.def_id()));\n \n-    cx.instances.borrow_mut().insert(instance, lldecl);\n+        self.instances.borrow_mut().insert(instance, lldecl);\n+    }\n }"}]}