{"sha": "69abc12b0044d641e714bdd73a299cfa4136b7b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YWJjMTJiMDA0NGQ2NDFlNzE0YmRkNzNhMjk5Y2ZhNDEzNmI3Yjg=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-04-27T21:10:49Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-04-29T00:23:45Z"}, "message": "Register new snapshots", "tree": {"sha": "b434c9c4a9b8260632c8a6c20823c95a8f5a02e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b434c9c4a9b8260632c8a6c20823c95a8f5a02e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69abc12b0044d641e714bdd73a299cfa4136b7b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69abc12b0044d641e714bdd73a299cfa4136b7b8", "html_url": "https://github.com/rust-lang/rust/commit/69abc12b0044d641e714bdd73a299cfa4136b7b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69abc12b0044d641e714bdd73a299cfa4136b7b8/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8871c17b76a1e0ab36ce2bb51008b53f596e5b3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8871c17b76a1e0ab36ce2bb51008b53f596e5b3c", "html_url": "https://github.com/rust-lang/rust/commit/8871c17b76a1e0ab36ce2bb51008b53f596e5b3c"}], "stats": {"total": 426, "additions": 29, "deletions": 397}, "files": [{"sha": "ab7030bee1554a52bccddfc7c2213d222fbeef23", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -355,7 +355,6 @@ impl<T: Clone> Arc<T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for Arc<T> {\n     /// Drops the `Arc<T>`.\n@@ -489,7 +488,6 @@ impl<T> Clone for Weak<T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for Weak<T> {\n     /// Drops the `Weak<T>`."}, {"sha": "c0974dcb2a0f06180518f1baaf4113aa8f8fb83d", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -73,7 +73,7 @@\n #![feature(allocator)]\n #![feature(custom_attribute)]\n #![feature(fundamental)]\n-#![feature(lang_items, unsafe_destructor)]\n+#![feature(lang_items)]\n #![feature(box_syntax)]\n #![feature(optin_builtin_traits)]\n #![feature(unboxed_closures)]"}, {"sha": "015d0330ed72d79f58257604fb6339295525e15f", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -375,7 +375,6 @@ impl<T> Deref for Rc<T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for Rc<T> {\n     /// Drops the `Rc<T>`.\n@@ -693,7 +692,6 @@ impl<T> Weak<T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for Weak<T> {\n     /// Drops the `Weak<T>`."}, {"sha": "adfcca14d8d5a138284b9ab09ee940c8293d3d17", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -35,7 +35,6 @@\n #![feature(core)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n-#![feature(unsafe_destructor)]\n #![cfg_attr(test, feature(test))]\n \n extern crate alloc;\n@@ -124,7 +123,6 @@ fn chunk(size: usize, is_copy: bool) -> Chunk {\n     }\n }\n \n-#[unsafe_destructor]\n impl<'longer_than_self> Drop for Arena<'longer_than_self> {\n     fn drop(&mut self) {\n         unsafe {\n@@ -510,7 +508,6 @@ impl<T> TypedArena<T> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<T> Drop for TypedArena<T> {\n     fn drop(&mut self) {\n         unsafe {"}, {"sha": "bca0e1427e4426ae687d4e7d2f34a499daf0dea6", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -270,14 +270,12 @@ impl<T> DoubleEndedIterator for RawItems<T> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<T> Drop for RawItems<T> {\n     fn drop(&mut self) {\n         for _ in self.by_ref() {}\n     }\n }\n \n-#[unsafe_destructor]\n impl<K, V> Drop for Node<K, V> {\n     fn drop(&mut self) {\n         if self.keys.is_null() ||\n@@ -1394,7 +1392,6 @@ impl<K, V> TraversalImpl for MoveTraversalImpl<K, V> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<K, V> Drop for MoveTraversalImpl<K, V> {\n     fn drop(&mut self) {\n         // We need to cleanup the stored values manually, as the RawItems destructor would run"}, {"sha": "ecbe9369e781f68ccdfd5c9b592a355f80c356aa", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -33,7 +33,6 @@\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n-#![feature(unsafe_destructor)]\n #![feature(unique)]\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(step_by)]"}, {"sha": "f6dc5cf7d90a0045146754af6fa4d52594463768", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -624,7 +624,6 @@ impl<T> LinkedList<T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for LinkedList<T> {\n     fn drop(&mut self) {"}, {"sha": "4f0b17a563b796198d19b0d913dd7b893ed482fb", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -1626,7 +1626,6 @@ impl<'a, T: Clone> Add<&'a [T]> for Vec<T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for Vec<T> {\n     fn drop(&mut self) {\n@@ -1808,7 +1807,6 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ExactSizeIterator for IntoIter<T> {}\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for IntoIter<T> {\n     fn drop(&mut self) {\n@@ -1867,7 +1865,6 @@ impl<'a, T> DoubleEndedIterator for Drain<'a, T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Drop for Drain<'a, T> {\n     fn drop(&mut self) {\n@@ -1914,7 +1911,6 @@ impl<'a, T> Deref for DerefVec<'a, T> {\n }\n \n // Prevent the inner `Vec<T>` from attempting to deallocate memory.\n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Drop for DerefVec<'a, T> {\n     fn drop(&mut self) {\n@@ -1983,7 +1979,6 @@ struct PartialVecZeroSized<T,U> {\n     marker: PhantomData<::core::cell::Cell<(T,U)>>,\n }\n \n-#[unsafe_destructor]\n impl<T,U> Drop for PartialVecNonZeroSized<T,U> {\n     fn drop(&mut self) {\n         unsafe {\n@@ -2009,7 +2004,6 @@ impl<T,U> Drop for PartialVecNonZeroSized<T,U> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<T,U> Drop for PartialVecZeroSized<T,U> {\n     fn drop(&mut self) {\n         unsafe {"}, {"sha": "3032b13855ba3b1b510fc6e7afa853d1f339dd6f", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -59,7 +59,6 @@ impl<T: Clone> Clone for VecDeque<T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for VecDeque<T> {\n     fn drop(&mut self) {\n@@ -1612,7 +1611,6 @@ pub struct Drain<'a, T: 'a> {\n     inner: &'a mut VecDeque<T>,\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: 'a> Drop for Drain<'a, T> {\n     fn drop(&mut self) {"}, {"sha": "57a95633b678f3ac0c9536450996f0dec1911a37", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -18,7 +18,6 @@\n #![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n-#![feature(unsafe_destructor)]\n #![feature(into_cow)]\n #![feature(step_by)]\n #![cfg_attr(test, feature(str_char))]"}, {"sha": "8a8da0d9faaeac1fb7332f4e63897167dfd6da29", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -18,7 +18,6 @@ struct DropCounter<'a> {\n     count: &'a mut u32\n }\n \n-#[unsafe_destructor]\n impl<'a> Drop for DropCounter<'a> {\n     fn drop(&mut self) {\n         *self.count += 1;"}, {"sha": "9ff447a87f1fea6730580fa1b17b7afb4727bf2e", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -493,7 +493,6 @@ impl<'b> BorrowRef<'b> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<'b> Drop for BorrowRef<'b> {\n     #[inline]\n     fn drop(&mut self) {\n@@ -557,7 +556,6 @@ struct BorrowRefMut<'b> {\n     _borrow: &'b Cell<BorrowFlag>,\n }\n \n-#[unsafe_destructor]\n impl<'b> Drop for BorrowRefMut<'b> {\n     #[inline]\n     fn drop(&mut self) {"}, {"sha": "73778bfd0380991efbc3e56e0eba93b56f1ce240", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -34,8 +34,7 @@ mod num;\n mod float;\n mod builders;\n \n-#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n-#[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n+#[unstable(feature = \"core\", reason = \"internal to format_args!\")]\n #[doc(hidden)]\n pub mod rt {\n     pub mod v1;\n@@ -148,8 +147,7 @@ enum Void {}\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n #[derive(Copy)]\n-#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n-#[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n+#[unstable(feature = \"core\", reason = \"internal to format_args!\")]\n #[doc(hidden)]\n pub struct ArgumentV1<'a> {\n     value: &'a Void,\n@@ -169,8 +167,7 @@ impl<'a> ArgumentV1<'a> {\n     }\n \n     #[doc(hidden)]\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n-    #[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n+    #[unstable(feature = \"core\", reason = \"internal to format_args!\")]\n     pub fn new<'b, T>(x: &'b T,\n                       f: fn(&T, &mut Formatter) -> Result) -> ArgumentV1<'b> {\n         unsafe {\n@@ -182,8 +179,7 @@ impl<'a> ArgumentV1<'a> {\n     }\n \n     #[doc(hidden)]\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n-    #[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n+    #[unstable(feature = \"core\", reason = \"internal to format_args!\")]\n     pub fn from_usize(x: &usize) -> ArgumentV1 {\n         ArgumentV1::new(x, ArgumentV1::show_usize)\n     }\n@@ -206,8 +202,7 @@ impl<'a> Arguments<'a> {\n     /// When using the format_args!() macro, this function is used to generate the\n     /// Arguments structure.\n     #[doc(hidden)] #[inline]\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n-    #[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n+    #[unstable(feature = \"core\", reason = \"internal to format_args!\")]\n     pub fn new_v1(pieces: &'a [&'a str],\n                   args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n         Arguments {\n@@ -224,8 +219,7 @@ impl<'a> Arguments<'a> {\n     /// created with `argumentusize`. However, failing to do so doesn't cause\n     /// unsafety, but will ignore invalid .\n     #[doc(hidden)] #[inline]\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n-    #[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n+    #[unstable(feature = \"core\", reason = \"internal to format_args!\")]\n     pub fn new_v1_formatted(pieces: &'a [&'a str],\n                             args: &'a [ArgumentV1<'a>],\n                             fmt: &'a [rt::v1::Argument]) -> Arguments<'a> {"}, {"sha": "2afd8abeb31aa5810f414924a06e080ac2e357c6", "filename": "src/libcore/fmt/rt/v1.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -14,69 +14,46 @@\n //! These definitions are similar to their `ct` equivalents, but differ in that\n //! these can be statically allocated and are slightly optimized for the runtime\n \n-#![cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n-#![cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n+#![unstable(feature = \"core\", reason = \"internal to format_args!\")]\n \n #[derive(Copy, Clone)]\n-#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n pub struct Argument {\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub position: Position,\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub format: FormatSpec,\n }\n \n #[derive(Copy, Clone)]\n-#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n pub struct FormatSpec {\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub fill: char,\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub align: Alignment,\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub flags: u32,\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub precision: Count,\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub width: Count,\n }\n \n /// Possible alignments that can be requested as part of a formatting directive.\n #[derive(Copy, Clone, PartialEq)]\n-#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n pub enum Alignment {\n     /// Indication that contents should be left-aligned.\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Left,\n     /// Indication that contents should be right-aligned.\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Right,\n     /// Indication that contents should be center-aligned.\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Center,\n     /// No alignment was requested.\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Unknown,\n }\n \n #[derive(Copy, Clone)]\n-#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n pub enum Count {\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Is(usize),\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Param(usize),\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     NextParam,\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Implied,\n }\n \n #[derive(Copy, Clone)]\n-#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n pub enum Position {\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Next,\n-    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     At(usize)\n }"}, {"sha": "9c6a293f421e7c913067ee45a2f58aa48c8e4a92", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -303,14 +303,8 @@ extern \"rust-intrinsic\" {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg(not(stage0))]\n     pub fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n \n-    /// dox\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg(stage0)]\n-    pub fn copy_nonoverlapping<T>(dst: *mut T, src: *const T, count: usize);\n-\n     /// Copies `count * size_of<T>` bytes from `src` to `dst`. The source\n     /// and destination may overlap.\n     ///\n@@ -340,14 +334,8 @@ extern \"rust-intrinsic\" {\n     /// ```\n     ///\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg(not(stage0))]\n     pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n \n-    /// dox\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg(stage0)]\n-    pub fn copy<T>(dst: *mut T, src: *const T, count: usize);\n-\n     /// Invokes memset on the specified pointer, setting `count * size_of::<T>()`\n     /// bytes of memory starting at `dst` to `c`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -572,7 +560,5 @@ extern \"rust-intrinsic\" {\n \n     /// Returns the value of the discriminant for the variant in 'v',\n     /// cast to a `u64`; if `T` has no discriminant, returns 0.\n-    // SNAP 5520801\n-    #[cfg(not(stage0))]\n     pub fn discriminant_value<T>(v: &T) -> u64;\n }"}, {"sha": "dd06c3d0987d98b7e0da0444eaaebf21f932093e", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -65,7 +65,7 @@\n \n #![feature(intrinsics, lang_items)]\n #![feature(on_unimplemented)]\n-#![feature(simd, unsafe_destructor)]\n+#![feature(simd)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(rustc_attrs)]"}, {"sha": "44e5390098bee7b194b3724e9099d9100337de48", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -35,20 +35,10 @@ use hash::Hasher;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang=\"send\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"]\n-#[cfg(not(stage0))]\n pub unsafe trait Send {\n     // empty.\n }\n \n-/// Types able to be transferred across thread boundaries.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[lang=\"send\"]\n-#[rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"]\n-#[cfg(stage0)]\n-pub unsafe trait Send : MarkerTrait {\n-    // empty.\n-}\n-\n unsafe impl Send for .. { }\n \n impl<T> !Send for *const T { }\n@@ -60,21 +50,10 @@ impl !Send for Managed { }\n #[lang=\"sized\"]\n #[rustc_on_unimplemented = \"`{Self}` does not have a constant size known at compile-time\"]\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n-#[cfg(not(stage0))]\n pub trait Sized {\n     // Empty.\n }\n \n-/// Types with a constant size known at compile-time.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[lang=\"sized\"]\n-#[rustc_on_unimplemented = \"`{Self}` does not have a constant size known at compile-time\"]\n-#[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n-#[cfg(stage0)]\n-pub trait Sized : MarkerTrait {\n-    // Empty.\n-}\n-\n /// Types that can be copied by simply copying bits (i.e. `memcpy`).\n ///\n /// By default, variable bindings have 'move semantics.' In other\n@@ -222,23 +201,13 @@ pub trait Copy : Clone {\n /// wrapper around the value(s) which can be mutated when behind a `&`\n /// reference; not doing this is undefined behaviour (for example,\n /// `transmute`-ing from `&T` to `&mut T` is illegal).\n-#[cfg(not(stage0))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang=\"sync\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be shared between threads safely\"]\n pub unsafe trait Sync {\n     // Empty\n }\n \n-/// dox\n-#[cfg(stage0)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[lang=\"sync\"]\n-#[rustc_on_unimplemented = \"`{Self}` cannot be shared between threads safely\"]\n-pub unsafe trait Sync : MarkerTrait {\n-    // Empty\n-}\n-\n unsafe impl Sync for .. { }\n \n impl<T> !Sync for *const T { }\n@@ -301,20 +270,6 @@ macro_rules! impls{\n         )\n }\n \n-/// dox\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(stage0)]\n-pub trait MarkerTrait : PhantomFn<Self,Self> { }\n-\n-#[cfg(stage0)]\n-impl<T: ?Sized> MarkerTrait for T {}\n-\n-/// dox\n-#[lang=\"phantom_fn\"]\n-#[cfg(stage0)]\n-pub trait PhantomFn<A:?Sized,R:?Sized=()> {\n-}\n-\n /// `PhantomData<T>` allows you to describe that a type acts as if it stores a value of type `T`,\n /// even though it does not. This allows you to inform the compiler about certain safety properties\n /// of your code.\n@@ -461,14 +416,6 @@ mod impls {\n #[rustc_reflect_like]\n #[unstable(feature = \"core\", reason = \"requires RFC and more experience\")]\n #[allow(deprecated)]\n-#[cfg(not(stage0))]\n pub trait Reflect {}\n \n-/// dox\n-#[rustc_reflect_like]\n-#[unstable(feature = \"core\", reason = \"requires RFC and more experience\")]\n-#[cfg(stage0)]\n-pub trait Reflect: MarkerTrait {}\n-\n impl Reflect for .. { }\n-"}, {"sha": "640703ca2f9c2d293f9b3351e95539e4a32df473", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -12,16 +12,10 @@\n \n use marker::Sized;\n use ops::Deref;\n-#[cfg(stage0)] use marker::MarkerTrait;\n \n /// Unsafe trait to indicate what types are usable with the NonZero struct\n-#[cfg(not(stage0))]\n pub unsafe trait Zeroable {}\n \n-/// Unsafe trait to indicate what types are usable with the NonZero struct\n-#[cfg(stage0)]\n-pub unsafe trait Zeroable: MarkerTrait {}\n-\n unsafe impl<T:?Sized> Zeroable for *const T {}\n unsafe impl<T:?Sized> Zeroable for *mut T {}\n unsafe impl Zeroable for isize {}"}, {"sha": "8a4f603ec472036be4366cadda7a0613f8a82534", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -508,8 +508,6 @@ macro_rules! neg_impl_numeric {\n macro_rules! neg_impl_unsigned {\n     ($($t:ty)*) => {\n         neg_impl_core!{ x => {\n-            #[cfg(stage0)]\n-            use ::num::wrapping::WrappingOps;\n             !x.wrapping_add(1)\n         }, $($t)*} }\n }\n@@ -1162,7 +1160,6 @@ pub trait FnOnce<Args> {\n     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n }\n \n-#[cfg(not(stage0))]\n mod impls {\n     use marker::Sized;\n     use super::{Fn, FnMut, FnOnce};"}, {"sha": "00326ecd3e7115ceeee01214c465ea276b819d4b", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -106,28 +106,11 @@ use cmp::Ordering::{self, Less, Equal, Greater};\n // FIXME #19649: intrinsic docs don't render, so these have no docs :(\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(not(stage0))]\n pub use intrinsics::copy_nonoverlapping;\n \n-/// dox\n-#[cfg(stage0)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n-    intrinsics::copy_nonoverlapping(dst, src, count)\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(not(stage0))]\n pub use intrinsics::copy;\n \n-/// dox\n-#[cfg(stage0)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n-    intrinsics::copy(dst, src, count)\n-}\n-\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use intrinsics::write_bytes;\n "}, {"sha": "1566972275284f3bf829f4cc5fee6041b68e8031", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -13,7 +13,6 @@\n \n #![feature(box_syntax)]\n #![feature(unboxed_closures)]\n-#![feature(unsafe_destructor)]\n #![feature(core)]\n #![feature(test)]\n #![feature(rand)]"}, {"sha": "ad096630127cb366c9cbf78e9c2be65e0a4f875b", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -44,8 +44,7 @@ fn test_get_resource() {\n        i: Rc<RefCell<isize>>,\n     }\n \n-    #[unsafe_destructor]\n-    impl Drop for R {\n+        impl Drop for R {\n        fn drop(&mut self) {\n             let ii = &*self.i;\n             let i = *ii.borrow();"}, {"sha": "767f17681b4c2c4977fa4796e0ce9d0b4eb25bde", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -34,7 +34,6 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n-#![feature(unsafe_destructor)]\n #![feature(staged_api)]\n #![feature(std_misc)]\n #![feature(path_ext)]"}, {"sha": "8cecc528d1a1f94747db7113359d13c16fbd916b", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -25,7 +25,6 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(unsafe_destructor)]\n #![feature(into_cow)]\n \n #[macro_use] extern crate log;"}, {"sha": "75673a6b83ab9a399ac0e67acb3fac21a858aa8a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -31,7 +31,6 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n-#![feature(unsafe_destructor)]\n #![feature(staged_api)]\n #![feature(exit_status)]\n #![feature(set_stdio)]"}, {"sha": "544fe7598192cda1397af3f388482522e967ffa1", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -37,7 +37,6 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n-#![feature(unsafe_destructor)]\n #![feature(staged_api)]\n #![feature(str_char)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "b591e37f893e254d919441924b5176aefd6f935e", "filename": "src/librustc_llvm/archive_ro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_llvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_llvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Farchive_ro.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -105,7 +105,6 @@ impl<'a> Iterator for Iter<'a> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<'a> Drop for Iter<'a> {\n     fn drop(&mut self) {\n         unsafe {"}, {"sha": "22f915af00f5fa11a6eae3aa9f4450dec76132e0", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -30,7 +30,6 @@\n #![feature(libc)]\n #![feature(link_args)]\n #![feature(staged_api)]\n-#![feature(unsafe_destructor)]\n \n extern crate libc;\n #[macro_use] #[no_link] extern crate rustc_bitflags;"}, {"sha": "3e2db80a9c556dbe55076575c8e75dd7c916540e", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -34,7 +34,6 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n-#![feature(unsafe_destructor)]\n #![feature(staged_api)]\n #![feature(unicode)]\n #![feature(path_ext)]"}, {"sha": "a049b9a4e49ff8879cf14f4f077de4b5f10e6f0b", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -125,7 +125,6 @@ pub struct _InsnCtxt {\n     _cannot_construct_outside_of_this_module: ()\n }\n \n-#[unsafe_destructor]\n impl Drop for _InsnCtxt {\n     fn drop(&mut self) {\n         TASK_LOCAL_INSN_KEY.with(|slot| {\n@@ -166,7 +165,6 @@ impl<'a, 'tcx> StatRecorder<'a, 'tcx> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<'a, 'tcx> Drop for StatRecorder<'a, 'tcx> {\n     fn drop(&mut self) {\n         if self.ccx.sess().trans_stats() {"}, {"sha": "20827f2ddfbf7209ce2a6fd142f7ebb5cd511b72", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -82,7 +82,6 @@ This API is completely unstable and subject to change.\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n-#![feature(unsafe_destructor)]\n #![feature(staged_api)]\n \n #[macro_use] extern crate log;"}, {"sha": "4841f36c7f74719d15e0a51fb20209f4399351f5", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -943,7 +943,6 @@ impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n     fn len(&self) -> usize { self.table.size() }\n }\n \n-#[unsafe_destructor]\n impl<'a, K: 'a, V: 'a> Drop for Drain<'a, K, V> {\n     fn drop(&mut self) {\n         for _ in self.by_ref() {}\n@@ -986,7 +985,6 @@ impl<K: Clone, V: Clone> Clone for RawTable<K, V> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<K, V> Drop for RawTable<K, V> {\n     fn drop(&mut self) {\n         if self.capacity == 0 || self.capacity == mem::POST_DROP_USIZE {"}, {"sha": "ed6023b2b81310013bd70277bb02e4cde06441ee", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -292,7 +292,6 @@ impl<W: Write+Seek> Seek for BufWriter<W> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<W: Write> Drop for BufWriter<W> {\n     fn drop(&mut self) {\n         if self.inner.is_some() {"}, {"sha": "561c37ad950b05708f6e4b6f53472a1fbb1b2504", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -70,8 +70,7 @@ fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>\n     where F: FnOnce(&mut Vec<u8>) -> Result<usize>\n {\n     struct Guard<'a> { s: &'a mut Vec<u8>, len: usize }\n-    #[unsafe_destructor]\n-    impl<'a> Drop for Guard<'a> {\n+        impl<'a> Drop for Guard<'a> {\n         fn drop(&mut self) {\n             unsafe { self.s.set_len(self.len); }\n         }"}, {"sha": "8473b24172edd917035ecb4833d6b795ee8b66fd", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -118,7 +118,6 @@\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n-#![feature(unsafe_destructor)]\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(macro_reexport)]\n #![feature(unique)]"}, {"sha": "fcebe9c5e98d60e7c59c8df0c655267af8e9af8c", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -38,30 +38,6 @@\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable]\n-#[cfg(stage0)]\n-macro_rules! panic {\n-    () => ({\n-        panic!(\"explicit panic\")\n-    });\n-    ($msg:expr) => ({\n-        $crate::rt::begin_unwind($msg, {\n-            // static requires less code at runtime, more constant data\n-            static _FILE_LINE: (&'static str, usize) = (file!(), line!() as usize);\n-            &_FILE_LINE\n-        })\n-    });\n-    ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::rt::begin_unwind_fmt(format_args!($fmt, $($arg)+), {\n-            // The leading _'s are to avoid dead code warnings if this is\n-            // used inside a dead function. Just `#[allow(dead_code)]` is\n-            // insufficient, since the user may have\n-            // `#[forbid(dead_code)]` and which cannot be overridden.\n-            static _FILE_LINE: (&'static str, u32) = (file!(), line!());\n-            &_FILE_LINE\n-        })\n-    });\n-}\n-\n /// The entry point for panic of Rust tasks.\n ///\n /// This macro is used to inject panic into a Rust task, causing the task to\n@@ -84,7 +60,6 @@ macro_rules! panic {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable]\n-#[cfg(not(stage0))]\n macro_rules! panic {\n     () => ({\n         panic!(\"explicit panic\")"}, {"sha": "a764b99e2805d88a3c722258a94687d20b285960", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -510,23 +510,6 @@ pub fn begin_unwind_fmt(msg: fmt::Arguments, file_line: &(&'static str, u32)) ->\n \n /// This is the entry point of unwinding for panic!() and assert!().\n #[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n-#[cfg(stage0)]\n-pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, usize)) -> ! {\n-    // Note that this should be the only allocation performed in this code path.\n-    // Currently this means that panic!() on OOM will invoke this code path,\n-    // but then again we're not really ready for panic on OOM anyway. If\n-    // we do start doing this, then we should propagate this allocation to\n-    // be performed in the parent of this thread instead of the thread that's\n-    // panicking.\n-\n-    // see below for why we do the `Any` coercion here.\n-    let (file, line) = *file_line;\n-    begin_unwind_inner(Box::new(msg), &(file, line as u32))\n-}\n-\n-/// This is the entry point of unwinding for panic!() and assert!().\n-#[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n-#[cfg(not(stage0))]\n pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, u32)) -> ! {\n     // Note that this should be the only allocation performed in this code path.\n     // Currently this means that panic!() on OOM will invoke this code path,"}, {"sha": "61932225d79660472bccf97e4748dc0cdb2cb775", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -619,7 +619,6 @@ impl<T> Clone for Sender<T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for Sender<T> {\n     fn drop(&mut self) {\n@@ -683,7 +682,6 @@ impl<T> Clone for SyncSender<T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for SyncSender<T> {\n     fn drop(&mut self) {\n@@ -930,7 +928,6 @@ impl <T> IntoIterator for Receiver<T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for Receiver<T> {\n     fn drop(&mut self) {"}, {"sha": "4ab5a796fcb43e3a0a38b570e987d59fa0cb4050", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -138,7 +138,6 @@ impl<T> Queue<T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for Queue<T> {\n     fn drop(&mut self) {"}, {"sha": "ab45b722c45237dbc6a47d29ed07e69a9687392d", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -367,7 +367,6 @@ impl<T> Packet<T> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<T> Drop for Packet<T> {\n     fn drop(&mut self) {\n         assert_eq!(self.state.load(Ordering::SeqCst), DISCONNECTED);"}, {"sha": "fde99e11040d2a69e95171b4e3cc68f9cc8938a2", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -315,15 +315,13 @@ impl<'rx, T: Send> Handle<'rx, T> {\n     }\n }\n \n-#[unsafe_destructor]\n impl Drop for Select {\n     fn drop(&mut self) {\n         assert!(self.head.is_null());\n         assert!(self.tail.is_null());\n     }\n }\n \n-#[unsafe_destructor]\n impl<'rx, T: Send> Drop for Handle<'rx, T> {\n     fn drop(&mut self) {\n         unsafe { self.remove() }"}, {"sha": "09a02923f140c2727a1f31df39e1447f48dec4ad", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -473,7 +473,6 @@ impl<T> Packet<T> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<T> Drop for Packet<T> {\n     fn drop(&mut self) {\n         // Note that this load is not only an assert for correctness about"}, {"sha": "f4b9c7d45fd2eb7afe6deb7aa107c7143af6d173", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -226,7 +226,6 @@ impl<T> Queue<T> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<T> Drop for Queue<T> {\n     fn drop(&mut self) {\n         unsafe {"}, {"sha": "1200e71d9afed23a3f84f1532fbbd8aa28abe99b", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -471,7 +471,6 @@ impl<T> Packet<T> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<T> Drop for Packet<T> {\n     fn drop(&mut self) {\n         // Note that this load is not only an assert for correctness about"}, {"sha": "4687df107f6b1157e375c3c5149057650a614c87", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -411,7 +411,6 @@ impl<T> Packet<T> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<T> Drop for Packet<T> {\n     fn drop(&mut self) {\n         assert_eq!(self.channels.load(Ordering::SeqCst), 0);"}, {"sha": "30c7407a96d97f161df7f2281f1e3abc446a08c9", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -244,7 +244,6 @@ impl<T> Mutex<T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for Mutex<T> {\n     fn drop(&mut self) {\n@@ -340,7 +339,6 @@ impl<'mutex, T> DerefMut for MutexGuard<'mutex, T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Drop for MutexGuard<'a, T> {\n     #[inline]"}, {"sha": "a133bb01b610b9acf50f21287b33bb78c49b334e", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -249,7 +249,6 @@ impl<T> RwLock<T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for RwLock<T> {\n     fn drop(&mut self) {\n@@ -387,15 +386,13 @@ impl<'rwlock, T> DerefMut for RwLockWriteGuard<'rwlock, T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Drop for RwLockReadGuard<'a, T> {\n     fn drop(&mut self) {\n         unsafe { self.__lock.lock.read_unlock(); }\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Drop for RwLockWriteGuard<'a, T> {\n     fn drop(&mut self) {"}, {"sha": "776b3c5064ced43f905e158b600ed4e9dc06fba1", "filename": "src/libstd/sync/semaphore.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fsemaphore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsync%2Fsemaphore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fsemaphore.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -100,7 +100,6 @@ impl Semaphore {\n     }\n }\n \n-#[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Drop for SemaphoreGuard<'a> {\n     fn drop(&mut self) {"}, {"sha": "48c74b8d89effc23c21e861bf5b94099f20b9fb3", "filename": "src/libstd/sys/common/remutex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -96,7 +96,6 @@ impl<T> ReentrantMutex<T> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<T> Drop for ReentrantMutex<T> {\n     fn drop(&mut self) {\n         // This is actually safe b/c we know that there is no further usage of\n@@ -138,7 +137,6 @@ impl<'mutex, T> Deref for ReentrantMutexGuard<'mutex, T> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<'a, T> Drop for ReentrantMutexGuard<'a, T> {\n     #[inline]\n     fn drop(&mut self) {"}, {"sha": "ae480380f95eb00710b6e37096b296bfe2f7c468", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -700,7 +700,6 @@ impl<'a, T: Send + 'a> JoinGuard<'a, T> {\n     }\n }\n \n-#[unsafe_destructor]\n #[unstable(feature = \"scoped\",\n            reason = \"memory unsafe if destructor is avoided, see #24292\")]\n impl<'a, T: Send + 'a> Drop for JoinGuard<'a, T> {"}, {"sha": "35684a1f39095b79df477a194f1a27a31961552b", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -171,8 +171,7 @@ impl<T> ScopedKey<T> {\n             key: &'a __impl::KeyInner<T>,\n             val: *mut T,\n         }\n-        #[unsafe_destructor]\n-        impl<'a, T> Drop for Reset<'a, T> {\n+                impl<'a, T> Drop for Reset<'a, T> {\n             fn drop(&mut self) {\n                 unsafe { self.key.set(self.val) }\n             }"}, {"sha": "28deb4eec3fac2ec14584ffb42e8c96a38742cab", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -93,10 +93,6 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n \n     (\"fundamental\", \"1.0.0\", Active),\n \n-    // Deprecate after snapshot\n-    // SNAP 5520801\n-    (\"unsafe_destructor\", \"1.0.0\", Active),\n-\n     // A temporary feature gate used to enable parser extensions needed\n     // to bootstrap fix for #5723.\n     (\"issue_5723_bootstrap\", \"1.0.0\", Accepted),\n@@ -209,8 +205,6 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"link_args\", Normal),\n     (\"macro_escape\", Normal),\n \n-    (\"unsafe_destructor\", Gated(\"unsafe_destructor\",\n-                                \"`#[unsafe_destructor]` does nothing anymore\")),\n     (\"staged_api\", Gated(\"staged_api\",\n                          \"staged_api is for use by rustc only\")),\n     (\"plugin\", Gated(\"plugin\","}, {"sha": "7c4b3866b2a99dbea1e238dc06d6225013fabd1c", "filename": "src/snapshots.txt", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -1,3 +1,13 @@\n+S 2015-04-27 857ef6e\n+  bitrig-x86_64 d28e2a5f8b478e69720703e751774f5e728a8edd\n+  freebsd-x86_64 18925db56f6298cc190d1f41615ab5871de1dda0\n+  linux-i386 0bc8cffdce611fb71fd7d3d8e7cdbfaf748a4f16\n+  linux-x86_64 94089740e48167c5975c92c139ae9c286764012f\n+  macos-i386 54cc35e76497e6e94fddf38d6e40e9d168491ddb\n+  macos-x86_64 43a1c1fba0d1dfee4c2ca310d506f8f5f51b3f6f\n+  winnt-i386 3db3adf2eaf37075043ec4ee41a5ea9b88810c44\n+  winnt-x86_64 82b6eaea67741517ce6d7901ad2a9fd223c3aaf1\n+\n S 2015-03-27 5520801\n   bitrig-x86_64 55a69b0ae5481ccda54c2fcfc54025a0945c4f57\n   freebsd-x86_64 0910bbad35e213f679d0433884fd51398eb3bc8d"}, {"sha": "e57c6dc718492239192883f86bdf39186cabb0ed", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -11,16 +11,13 @@\n #![crate_name=\"issue_2526\"]\n #![crate_type = \"lib\"]\n \n-#![feature(unsafe_destructor)]\n-\n use std::marker;\n \n struct arc_destruct<T: Sync> {\n     _data: isize,\n     _marker: marker::PhantomData<T>\n }\n \n-#[unsafe_destructor]\n impl<T: Sync> Drop for arc_destruct<T> {\n     fn drop(&mut self) {}\n }"}, {"sha": "e091dbfb00e4b4195e293c86b74df74afa482a8b", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unsafe_destructor, box_syntax, std_misc, collections)]\n+#![feature(box_syntax, std_misc, collections)]\n \n use std::env;\n use std::thread;\n@@ -54,7 +54,6 @@ struct r {\n   _l: Box<nillist>,\n }\n \n-#[unsafe_destructor]\n impl Drop for r {\n     fn drop(&mut self) {}\n }"}, {"sha": "309e286f48e509487cb004e3888a5ed87aee6f1a", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,13 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unsafe_destructor)]\n-\n struct defer<'a> {\n     x: &'a [&'a str],\n }\n \n-#[unsafe_destructor]\n impl<'a> Drop for defer<'a> {\n     fn drop(&mut self) {\n         unsafe {"}, {"sha": "f3c3f31e4afc629e8cf29c52bd300232abd6e21c", "filename": "src/test/compile-fail/dropck_arr_cycle_checked.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fdropck_arr_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fdropck_arr_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_arr_cycle_checked.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -13,8 +13,6 @@\n //\n // (Compare against compile-fail/dropck_vec_cycle_checked.rs)\n \n-#![feature(unsafe_destructor)]\n-\n use std::cell::Cell;\n use id::Id;\n \n@@ -69,7 +67,6 @@ struct CheckId<T:HasId> {\n #[allow(non_snake_case)]\n fn CheckId<T:HasId>(t: T) -> CheckId<T> { CheckId{ v: t } }\n \n-#[unsafe_destructor]\n impl<T:HasId> Drop for CheckId<T> {\n     fn drop(&mut self) {\n         assert!(self.v.count() > 0);"}, {"sha": "5db23721259a05e1365330cd973f43013f349795", "filename": "src/test/compile-fail/dropck_direct_cycle_with_drop.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fdropck_direct_cycle_with_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fdropck_direct_cycle_with_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_direct_cycle_with_drop.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -23,8 +23,6 @@\n //  `'a` in `&'a D<'a>` cannot be satisfied when `D<'a>` implements\n //  `Drop`.)\n \n-#![feature(unsafe_destructor)]\n-\n use std::cell::Cell;\n \n struct D<'a> {\n@@ -36,7 +34,6 @@ impl<'a> D<'a> {\n     fn new(name: String) -> D<'a> { D { name: name, p: Cell::new(None) } }\n }\n \n-#[unsafe_destructor]\n impl<'a> Drop for D<'a> {\n     fn drop(&mut self) {\n         println!(\"dropping {} whose sibling is {:?}\","}, {"sha": "10bfe70640ca820ae84c011c8e1b6f066764f087", "filename": "src/test/compile-fail/dropck_tarena_cycle_checked.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_cycle_checked.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -17,7 +17,6 @@\n //  for the error message we see here.)\n \n #![allow(unstable)]\n-#![feature(unsafe_destructor)]\n \n extern crate arena;\n \n@@ -76,7 +75,6 @@ struct CheckId<T:HasId> {\n #[allow(non_snake_case)]\n fn CheckId<T:HasId>(t: T) -> CheckId<T> { CheckId{ v: t } }\n \n-#[unsafe_destructor]\n impl<T:HasId> Drop for CheckId<T> {\n     fn drop(&mut self) {\n         assert!(self.v.count() > 0);"}, {"sha": "7a204e6143eeff0556150603406174155f746756", "filename": "src/test/compile-fail/dropck_tarena_unsound_drop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_unsound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_unsound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_unsound_drop.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -20,7 +20,6 @@\n // this was reduced to better understand its error message.)\n \n #![allow(unstable)]\n-#![feature(unsafe_destructor)]\n \n extern crate arena;\n \n@@ -35,7 +34,6 @@ struct CheckId<T:HasId> { v: T }\n // interface to CheckId does not (and cannot) know that, and therefore\n // when encountering the a value V of type CheckId<S>, we must\n // conservatively force the type S to strictly outlive V.\n-#[unsafe_destructor]\n impl<T:HasId> Drop for CheckId<T> {\n     fn drop(&mut self) {\n         assert!(self.v.count() > 0);"}, {"sha": "53a14fd8fac926a5d7069b79c954b52711f2a386", "filename": "src/test/compile-fail/dropck_vec_cycle_checked.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fdropck_vec_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fdropck_vec_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_vec_cycle_checked.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -12,8 +12,6 @@\n //\n // (Compare against compile-fail/dropck_arr_cycle_checked.rs)\n \n-#![feature(unsafe_destructor)]\n-\n use std::cell::Cell;\n use id::Id;\n \n@@ -68,7 +66,6 @@ struct CheckId<T:HasId> {\n #[allow(non_snake_case)]\n fn CheckId<T:HasId>(t: T) -> CheckId<T> { CheckId{ v: t } }\n \n-#[unsafe_destructor]\n impl<T:HasId> Drop for CheckId<T> {\n     fn drop(&mut self) {\n         assert!(self.v.count() > 0);"}, {"sha": "b4cb2469659788c7f16bb2f9e5af54bd2a754310", "filename": "src/test/compile-fail/exclusive-drop-and-copy.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fexclusive-drop-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fexclusive-drop-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexclusive-drop-and-copy.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unsafe_destructor)]\n-\n // issue #20126\n \n #[derive(Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented\n@@ -22,7 +20,6 @@ impl Drop for Foo {\n #[derive(Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented\n struct Bar<T>(::std::marker::PhantomData<T>);\n \n-#[unsafe_destructor]\n impl<T> Drop for Bar<T> {\n     fn drop(&mut self) {}\n }"}, {"sha": "9dd1e229e0af5a02b7fbe0e71d47941f27103498", "filename": "src/test/compile-fail/gated-unsafe-destructor.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8871c17b76a1e0ab36ce2bb51008b53f596e5b3c/src%2Ftest%2Fcompile-fail%2Fgated-unsafe-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8871c17b76a1e0ab36ce2bb51008b53f596e5b3c/src%2Ftest%2Fcompile-fail%2Fgated-unsafe-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-unsafe-destructor.rs?ref=8871c17b76a1e0ab36ce2bb51008b53f596e5b3c", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that `#[unsafe_destructor]` attribute is gated by `unsafe_destructor`\n-// feature gate.\n-//\n-// (This test can be removed entirely when we remove the\n-// `unsafe_destructor` feature itself.)\n-\n-struct D<'a>(&'a u32);\n-\n-#[unsafe_destructor]\n-//~^ ERROR `#[unsafe_destructor]` does nothing anymore\n-impl<'a> Drop for D<'a> {\n-    fn drop(&mut self) { }\n-}\n-\n-pub fn main() { }"}, {"sha": "b80d15bb6f3c68d322f6aa9238ed7a052c40470d", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unsafe_destructor)]\n-\n use std::thread;\n use std::rc::Rc;\n \n@@ -22,8 +20,7 @@ fn main() {\n       _x: Port<()>,\n     }\n \n-    #[unsafe_destructor]\n-    impl Drop for foo {\n+        impl Drop for foo {\n         fn drop(&mut self) {}\n     }\n "}, {"sha": "1e189528f18c7714b3b42d334bb929b3894af742", "filename": "src/test/compile-fail/reject-specialized-drops-8142.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Freject-specialized-drops-8142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Freject-specialized-drops-8142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freject-specialized-drops-8142.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -11,8 +11,6 @@\n // Issue 8142: Test that Drop impls cannot be specialized beyond the\n // predicates attached to the struct/enum definition itself.\n \n-#![feature(unsafe_destructor)]\n-\n trait Bound { fn foo(&self) { } }\n struct K<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n struct L<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n@@ -28,51 +26,39 @@ struct U;\n struct V<Tva, Tvb> { x: *const Tva, y: *const Tvb }\n struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n \n-#[unsafe_destructor]\n impl<'al,'adds_bnd:'al> Drop for K<'al,'adds_bnd> {                        // REJECT\n     //~^ ERROR The requirement `'adds_bnd : 'al` is added only by the Drop impl.\n     fn drop(&mut self) { } }\n \n-#[unsafe_destructor]\n impl<'al,'adds_bnd>     Drop for L<'al,'adds_bnd> where 'adds_bnd:'al {    // REJECT\n     //~^ ERROR The requirement `'adds_bnd : 'al` is added only by the Drop impl.\n     fn drop(&mut self) { } }\n \n-#[unsafe_destructor]\n impl<'ml>               Drop for M<'ml>         { fn drop(&mut self) { } } // ACCEPT\n \n-#[unsafe_destructor]\n impl                    Drop for N<'static>     { fn drop(&mut self) { } } // REJECT\n //~^ ERROR Implementations of Drop cannot be specialized\n \n-#[unsafe_destructor]\n impl<Cok_nobound> Drop for O<Cok_nobound> { fn drop(&mut self) { } } // ACCEPT\n \n-#[unsafe_destructor]\n impl              Drop for P<i8>          { fn drop(&mut self) { } } // REJECT\n //~^ ERROR Implementations of Drop cannot be specialized\n \n-#[unsafe_destructor]\n impl<Adds_bnd:Bound> Drop for Q<Adds_bnd> { fn drop(&mut self) { } } // REJECT\n //~^ ERROR The requirement `Adds_bnd : Bound` is added only by the Drop impl.\n \n-#[unsafe_destructor]\n impl<'rbnd,Adds_rbnd:'rbnd> Drop for R<Adds_rbnd> { fn drop(&mut self) { } } // REJECT\n //~^ ERROR The requirement `Adds_rbnd : 'rbnd` is added only by the Drop impl.\n \n-#[unsafe_destructor]\n impl<Bs:Bound>    Drop for S<Bs>          { fn drop(&mut self) { } } // ACCEPT\n \n-#[unsafe_destructor]\n impl<'t,Bt:'t>    Drop for T<'t,Bt>       { fn drop(&mut self) { } } // ACCEPT\n \n impl              Drop for U              { fn drop(&mut self) { } } // ACCEPT\n \n-#[unsafe_destructor]\n impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n //~^ERROR Implementations of Drop cannot be specialized\n \n-#[unsafe_destructor]\n impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n //~^ERROR Implementations of Drop cannot be specialized\n "}, {"sha": "6aa0834cb27df563544bc548788f737454940542", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,16 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unsafe_destructor)]\n-\n use std::cell::Cell;\n \n #[derive(Debug)]\n struct r<'a> {\n   i: &'a Cell<isize>,\n }\n \n-#[unsafe_destructor]\n impl<'a> Drop for r<'a> {\n     fn drop(&mut self) {\n         unsafe {"}, {"sha": "c30aa7b817bf4fcfce1f7d262a6f7cd21db0dcf0", "filename": "src/test/compile-fail/vec-must-not-hide-type-from-dropck.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fvec-must-not-hide-type-from-dropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Fcompile-fail%2Fvec-must-not-hide-type-from-dropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-must-not-hide-type-from-dropck.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -23,8 +23,6 @@\n // conditions above to be satisfied, meaning that if the dropck is\n // sound, it should reject this code.\n \n-#![feature(unsafe_destructor)]\n-\n use std::cell::Cell;\n use id::Id;\n \n@@ -91,7 +89,6 @@ struct CheckId<T:HasId> {\n #[allow(non_snake_case)]\n fn CheckId<T:HasId>(t: T) -> CheckId<T> { CheckId{ v: t } }\n \n-#[unsafe_destructor]\n impl<T:HasId> Drop for CheckId<T> {\n     fn drop(&mut self) {\n         assert!(self.v.count() > 0);"}, {"sha": "0c464c9bad728a4c91337890899363554cfcfbff", "filename": "src/test/run-pass/attr-no-drop-flag-size.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unsafe_destructor)]\n #![feature(unsafe_no_drop_flag)]\n \n use std::mem::size_of;\n@@ -19,7 +17,6 @@ struct Test<T> {\n     a: T\n }\n \n-#[unsafe_destructor]\n impl<T> Drop for Test<T> {\n     fn drop(&mut self) { }\n }"}, {"sha": "e55eae1e74fc6804db91cff6f68b974a324390c3", "filename": "src/test/run-pass/drop-trait-generic.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,13 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unsafe_destructor)]\n-\n struct S<T> {\n     x: T\n }\n \n-#[unsafe_destructor]\n impl<T> ::std::ops::Drop for S<T> {\n     fn drop(&mut self) {\n         println!(\"bye\");"}, {"sha": "b0c4f4ca272a03e52f3656a4c51b8395aca34714", "filename": "src/test/run-pass/dropck_tarena_sound_drop.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -16,9 +16,8 @@\n // shows a similar setup, but restricts `f` so that the struct `C<'a>`\n // is force-fed a lifetime equal to that of the borrowed arena.\n \n-\n #![allow(unstable)]\n-#![feature(unsafe_destructor, rustc_private)]\n+#![feature(rustc_private)]\n \n extern crate arena;\n \n@@ -33,7 +32,6 @@ struct CheckId<T:HasId> { v: T }\n // interface to CheckId does not (and cannot) know that, and therefore\n // when encountering the a value V of type CheckId<S>, we must\n // conservatively force the type S to strictly outlive V.\n-#[unsafe_destructor]\n impl<T:HasId> Drop for CheckId<T> {\n     fn drop(&mut self) {\n         assert!(self.v.count() > 0);"}, {"sha": "a270b003981669377b9a28a38d31a48f6f4d0964", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,10 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n-#![feature(unsafe_destructor)]\n \n use std::cell::Cell;\n \n@@ -24,7 +21,6 @@ struct r<'a> {\n \n struct BoxR<'a> { x: r<'a> }\n \n-#[unsafe_destructor]\n impl<'a> Drop for r<'a> {\n     fn drop(&mut self) {\n         self.i.set(self.i.get() + 1)"}, {"sha": "a1ada18984e9e7eb95b01752bfde5bdb3868d6bb", "filename": "src/test/run-pass/issue-15858.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-15858.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-15858.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15858.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unsafe_destructor)]\n-\n static mut DROP_RAN: bool = false;\n \n trait Bar {\n@@ -26,7 +23,6 @@ impl Bar for BarImpl {\n \n struct Foo<B: Bar>(B);\n \n-#[unsafe_destructor]\n impl<B: Bar> Drop for Foo<B> {\n     fn drop(&mut self) {\n         unsafe {"}, {"sha": "0c208773884d4841d57237eadd2c9bc01a1c79a5", "filename": "src/test/run-pass/issue-15924.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-15924.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-15924.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15924.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unsafe_destructor, rustc_private)]\n+#![feature(rustc_private)]\n \n extern crate serialize;\n \n@@ -22,7 +22,6 @@ struct Foo<T: Encodable> {\n     v: T,\n }\n \n-#[unsafe_destructor]\n impl<T: Encodable> Drop for Foo<T> {\n     fn drop(&mut self) {\n         json::encode(&self.v);"}, {"sha": "975557726ce8b2a7be680c2b7a3eccbe951aba4f", "filename": "src/test/run-pass/issue-16492.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-16492.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-16492.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16492.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-pretty\n \n-#![feature(unsafe_destructor)]\n-\n use std::rc::Rc;\n use std::cell::Cell;\n \n@@ -29,7 +27,6 @@ impl Field {\n     }\n }\n \n-#[unsafe_destructor] // because Field isn't Send\n impl Drop for Field {\n     fn drop(&mut self) {\n         println!(\"Dropping field {}\", self.number);\n@@ -50,7 +47,6 @@ struct HasDropImpl {\n     _three: Field\n }\n \n-#[unsafe_destructor] // because HasDropImpl isn't Send\n impl Drop for HasDropImpl {\n     fn drop(&mut self) {\n         println!(\"HasDropImpl.drop()\");"}, {"sha": "e713bbf127d8c05438607c2ce1af0e6366564624", "filename": "src/test/run-pass/issue-17216.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-17216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-17216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17216.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,14 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unsafe_destructor)]\n-\n struct Leak<'a> {\n     dropped: &'a mut bool\n }\n \n-#[unsafe_destructor]\n impl<'a> Drop for Leak<'a> {\n     fn drop(&mut self) {\n         *self.dropped = true;"}, {"sha": "a0f18d9f7f1c2b40d00b10ce53bbc12ba12ece1c", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n //\n \n-#![feature(unsafe_destructor, std_misc)]\n+#![feature(std_misc)]\n \n pub type Task = isize;\n \n@@ -165,8 +165,7 @@ pub mod pipes {\n         p: Option<*const packet<T>>,\n     }\n \n-    #[unsafe_destructor]\n-    impl<T:Send> Drop for send_packet<T> {\n+        impl<T:Send> Drop for send_packet<T> {\n         fn drop(&mut self) {\n             unsafe {\n                 if self.p != None {\n@@ -195,8 +194,7 @@ pub mod pipes {\n         p: Option<*const packet<T>>,\n     }\n \n-    #[unsafe_destructor]\n-    impl<T:Send> Drop for recv_packet<T> {\n+        impl<T:Send> Drop for recv_packet<T> {\n         fn drop(&mut self) {\n             unsafe {\n                 if self.p != None {"}, {"sha": "cdce059ae71f1e99e58f34362ba2bafdcd716744", "filename": "src/test/run-pass/issue-2735-2.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,17 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unsafe_destructor)]\n-\n use std::cell::Cell;\n \n // This test should behave exactly like issue-2735-3\n struct defer<'a> {\n     b: &'a Cell<bool>,\n }\n \n-#[unsafe_destructor]\n impl<'a> Drop for defer<'a> {\n     fn drop(&mut self) {\n         self.b.set(true);"}, {"sha": "d1e28faba8b5bf154777550d721a946f58b2702e", "filename": "src/test/run-pass/issue-2735-3.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,17 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unsafe_destructor)]\n-\n use std::cell::Cell;\n \n // This test should behave exactly like issue-2735-2\n struct defer<'a> {\n     b: &'a Cell<bool>,\n }\n \n-#[unsafe_destructor]\n impl<'a> Drop for defer<'a> {\n     fn drop(&mut self) {\n         self.b.set(true);"}, {"sha": "e604141dab812485fdf6a0b9d98391206f301f4e", "filename": "src/test/run-pass/issue-4252.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4252.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unsafe_destructor)]\n-\n trait X {\n     fn call<T: std::fmt::Debug>(&self, x: &T);\n     fn default_method<T: std::fmt::Debug>(&self, x: &T) {\n@@ -31,7 +29,6 @@ impl X for Y {\n     }\n }\n \n-#[unsafe_destructor]\n impl<T: X + std::fmt::Debug> Drop for Z<T> {\n     fn drop(&mut self) {\n         // These statements used to cause an ICE."}, {"sha": "43fa98124262a86e20dbd1f6608a0f60de23f715", "filename": "src/test/run-pass/issue-979.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fissue-979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-979.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,16 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unsafe_destructor)]\n-\n use std::cell::Cell;\n \n struct r<'a> {\n     b: &'a Cell<isize>,\n }\n \n-#[unsafe_destructor]\n impl<'a> Drop for r<'a> {\n     fn drop(&mut self) {\n         self.b.set(self.b.get() + 1);"}, {"sha": "6a5d86b522ed4fe1ac69c6b4b4005fcb41cc996a", "filename": "src/test/run-pass/newtype-struct-drop-run.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,16 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unsafe_destructor)]\n-\n // Make sure the destructor is run for newtype structs.\n \n use std::cell::Cell;\n \n struct Foo<'a>(&'a Cell<isize>);\n \n-#[unsafe_destructor]\n impl<'a> Drop for Foo<'a> {\n     fn drop(&mut self) {\n         let Foo(i) = *self;"}, {"sha": "e22edb3caede49ea89f1d9ec8c80679bdff05177", "filename": "src/test/run-pass/option-unwrap.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-unwrap.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,16 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unsafe_destructor)]\n-\n use std::cell::Cell;\n \n struct dtor<'a> {\n     x: &'a Cell<isize>,\n }\n \n-#[unsafe_destructor]\n impl<'a> Drop for dtor<'a> {\n     fn drop(&mut self) {\n         self.x.set(self.x.get() - 1);"}, {"sha": "cdb58d1ba4c01f1231ab2674feb480f1ff88b6fc", "filename": "src/test/run-pass/regions-no-bound-in-argument-cleanup.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unsafe_destructor)]\n-\n use std::marker;\n \n pub struct Foo<T>(marker::PhantomData<T>);\n@@ -24,7 +22,6 @@ impl<T> Iterator for Foo<T> {\n     }\n }\n \n-#[unsafe_destructor]\n impl<T> Drop for Foo<T> {\n     fn drop(&mut self) {\n         self.next();"}, {"sha": "4d0c2900a0fad5ab14390f02caf7f2abc7fcdb42", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,16 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unsafe_destructor)]\n-\n use std::cell::Cell;\n \n #[derive(Debug)]\n struct r<'a> {\n     i: &'a Cell<isize>,\n }\n \n-#[unsafe_destructor]\n impl<'a> Drop for r<'a> {\n     fn drop(&mut self) {\n         self.i.set(self.i.get() + 1);"}, {"sha": "5b2b8655442c892ea5a4ef108b561f3c1c41821d", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,15 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unsafe_destructor)]\n-\n use std::cell::Cell;\n \n struct shrinky_pointer<'a> {\n   i: &'a Cell<isize>,\n }\n \n-#[unsafe_destructor]\n impl<'a> Drop for shrinky_pointer<'a> {\n     fn drop(&mut self) {\n         println!(\"Hello!\"); self.i.set(self.i.get() - 1);"}, {"sha": "2914127246a0b8b5b92eac6acac65383aaa8bb22", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unsafe_destructor)]\n-\n // Ensures that class dtors run if the object is inside an enum\n // variant\n \n@@ -23,7 +20,6 @@ struct close_res<'a> {\n \n }\n \n-#[unsafe_destructor]\n impl<'a> Drop for close_res<'a> {\n     fn drop(&mut self) {\n         self.i.set(false);"}, {"sha": "449f533103a80b10e8f2e8dbccec47c4f8d866cc", "filename": "src/test/run-pass/unboxed-closures-infer-fnonce-move.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnonce-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnonce-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnonce-move.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,17 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unsafe_destructor)]\n-\n // Test that we are able to infer a suitable kind for this `move`\n // closure that is just called (`FnOnce`).\n \n use std::mem;\n \n struct DropMe<'a>(&'a mut i32);\n \n-#[unsafe_destructor]\n impl<'a> Drop for DropMe<'a> {\n     fn drop(&mut self) {\n         *self.0 += 1;"}, {"sha": "79a1aff853524b8b97d5cc6d7061403e002b1e14", "filename": "src/test/run-pass/unboxed-closures-infer-fnonce.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnonce.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,17 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unsafe_destructor)]\n-\n // Test that we are able to infer a suitable kind for this closure\n // that is just called (`FnOnce`).\n \n use std::mem;\n \n struct DropMe<'a>(&'a mut i32);\n \n-#[unsafe_destructor]\n impl<'a> Drop for DropMe<'a> {\n     fn drop(&mut self) {\n         *self.0 += 1;"}, {"sha": "86d34d38f744f50073d0a3e88e6a4eea6ff881b9", "filename": "src/test/run-pass/vec-slice-drop.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69abc12b0044d641e714bdd73a299cfa4136b7b8/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs?ref=69abc12b0044d641e714bdd73a299cfa4136b7b8", "patch": "@@ -8,17 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unsafe_destructor)]\n-\n use std::cell::Cell;\n \n // Make sure that destructors get run on slice literals\n struct foo<'a> {\n     x: &'a Cell<isize>,\n }\n \n-#[unsafe_destructor]\n impl<'a> Drop for foo<'a> {\n     fn drop(&mut self) {\n         self.x.set(self.x.get() + 1);"}]}