{"sha": "3538cb38fceb82bbde827aeb44e96e25c4873b7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MzhjYjM4ZmNlYjgyYmJkZTgyN2FlYjQ0ZTk2ZTI1YzQ4NzNiN2M=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-09T11:13:08Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-14T21:52:30Z"}, "message": "Only hash the Hir owner (including its bodies)", "tree": {"sha": "096e17d3d64f98ec059a5a031f325ddca7e08536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/096e17d3d64f98ec059a5a031f325ddca7e08536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3538cb38fceb82bbde827aeb44e96e25c4873b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3538cb38fceb82bbde827aeb44e96e25c4873b7c", "html_url": "https://github.com/rust-lang/rust/commit/3538cb38fceb82bbde827aeb44e96e25c4873b7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3538cb38fceb82bbde827aeb44e96e25c4873b7c/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d73268b05c07487c43ca9d09023db0bc47251e91", "url": "https://api.github.com/repos/rust-lang/rust/commits/d73268b05c07487c43ca9d09023db0bc47251e91", "html_url": "https://github.com/rust-lang/rust/commit/d73268b05c07487c43ca9d09023db0bc47251e91"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "a33ccf1b97051f0d7990e17d18020b745a2347ee", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3538cb38fceb82bbde827aeb44e96e25c4873b7c/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3538cb38fceb82bbde827aeb44e96e25c4873b7c/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=3538cb38fceb82bbde827aeb44e96e25c4873b7c", "patch": "@@ -203,12 +203,22 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         let owner = HirOwner { parent: entry.parent, node: entry.node };\n \n         let arena = self.arena;\n+        let krate = self.krate;\n \n         let items = self.owner_items_map.entry(id.owner).or_insert_with(|| {\n-            arena.alloc(HirOwnerItems { items: IndexVec::new(), bodies: FxHashMap::default() })\n+            arena.alloc(HirOwnerItems {\n+                // Insert a dummy node which will be overwritten\n+                // when we call `insert_entry` on the HIR owner.\n+                owner: Node::Crate(&krate.item),\n+                items: IndexVec::new(),\n+                bodies: FxHashMap::default(),\n+            })\n         });\n \n         if i == 0 {\n+            // Overwrite the dummy node with the real HIR owner.\n+            items.owner = entry.node;\n+\n             self.owner_map.insert(id.owner, self.arena.alloc(owner));\n         // FIXME: feature(impl_trait_in_bindings) broken and trigger this assert\n         //assert!(self.owner_map.insert(id.owner, self.arena.alloc(owner)).is_none());"}, {"sha": "edb52666923496d2625bcff082c983d135ac81f2", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3538cb38fceb82bbde827aeb44e96e25c4873b7c/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3538cb38fceb82bbde827aeb44e96e25c4873b7c/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=3538cb38fceb82bbde827aeb44e96e25c4873b7c", "patch": "@@ -5,10 +5,12 @@\n pub mod exports;\n pub mod map;\n \n+use crate::ich::StableHashingContext;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n use rustc_data_structures::cold_path;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::print;\n use rustc_hir::Body;\n@@ -25,19 +27,39 @@ pub struct HirOwner<'tcx> {\n     node: Node<'tcx>,\n }\n \n-#[derive(HashStable, Clone)]\n+#[derive(Clone)]\n pub struct HirItem<'tcx> {\n     parent: ItemLocalId,\n     node: Node<'tcx>,\n }\n \n-#[derive(HashStable)]\n+impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for HirItem<'tcx> {\n+    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n+        let HirItem { parent, node } = self;\n+        hcx.while_hashing_hir_bodies(false, |hcx| {\n+            parent.hash_stable(hcx, hasher);\n+            node.hash_stable(hcx, hasher);\n+        });\n+    }\n+}\n+\n pub struct HirOwnerItems<'tcx> {\n-    //owner: &'tcx HirOwner<'tcx>,\n+    owner: Node<'tcx>,\n     items: IndexVec<ItemLocalId, Option<HirItem<'tcx>>>,\n     bodies: FxHashMap<ItemLocalId, &'tcx Body<'tcx>>,\n }\n \n+impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for HirOwnerItems<'tcx> {\n+    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n+        // We ignore the `items` and `bodies` fields since these refer to information reachable\n+        // when hashing `owner` with its bodies.\n+        let HirOwnerItems { owner, items: _, bodies: _ } = *self;\n+        hcx.while_hashing_hir_bodies(true, |hcx| {\n+            owner.hash_stable(hcx, hasher);\n+        });\n+    }\n+}\n+\n /// A wrapper type which allows you to access HIR.\n #[derive(Clone)]\n pub struct Hir<'tcx> {"}]}