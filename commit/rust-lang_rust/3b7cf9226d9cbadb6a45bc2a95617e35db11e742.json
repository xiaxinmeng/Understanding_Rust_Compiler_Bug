{"sha": "3b7cf9226d9cbadb6a45bc2a95617e35db11e742", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiN2NmOTIyNmQ5Y2JhZGI2YTQ1YmMyYTk1NjE3ZTM1ZGIxMWU3NDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-16T10:50:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-16T10:50:04Z"}, "message": "Source-ify name_definition", "tree": {"sha": "4ebe3806e786a90df5aa033e58a9131308ebefe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ebe3806e786a90df5aa033e58a9131308ebefe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b7cf9226d9cbadb6a45bc2a95617e35db11e742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7cf9226d9cbadb6a45bc2a95617e35db11e742", "html_url": "https://github.com/rust-lang/rust/commit/3b7cf9226d9cbadb6a45bc2a95617e35db11e742", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b7cf9226d9cbadb6a45bc2a95617e35db11e742/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "272af56a5c5a0e89fc3c2db41e125f0f16df0d0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/272af56a5c5a0e89fc3c2db41e125f0f16df0d0c", "html_url": "https://github.com/rust-lang/rust/commit/272af56a5c5a0e89fc3c2db41e125f0f16df0d0c"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "821796e5f69cda58b4cccd161b07a878a496055a", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3b7cf9226d9cbadb6a45bc2a95617e35db11e742/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7cf9226d9cbadb6a45bc2a95617e35db11e742/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=3b7cf9226d9cbadb6a45bc2a95617e35db11e742", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use hir::Source;\n-use ra_db::{FileId, SourceDatabase};\n+use ra_db::SourceDatabase;\n use ra_syntax::{\n     algo::find_node_at_offset,\n     ast::{self, DocCommentsOwner},\n@@ -27,7 +27,7 @@ pub(crate) fn goto_definition(\n         return Some(RangeInfo::new(name_ref.syntax().text_range(), navs.to_vec()));\n     }\n     if let Some(name) = find_node_at_offset::<ast::Name>(&syntax, position.offset) {\n-        let navs = name_definition(db, position.file_id, &name)?;\n+        let navs = name_definition(db, Source::new(position.file_id.into(), &name))?;\n         return Some(RangeInfo::new(name.syntax().text_range(), navs));\n     }\n     None\n@@ -86,35 +86,34 @@ pub(crate) fn reference_definition(\n \n pub(crate) fn name_definition(\n     db: &RootDatabase,\n-    file_id: FileId,\n-    name: &ast::Name,\n+    name: Source<&ast::Name>,\n ) -> Option<Vec<NavigationTarget>> {\n-    let parent = name.syntax().parent()?;\n+    let parent = name.ast.syntax().parent()?;\n \n     if let Some(module) = ast::Module::cast(parent.clone()) {\n         if module.has_semi() {\n-            let src = hir::Source { file_id: file_id.into(), ast: module };\n+            let src = name.with_ast(module);\n             if let Some(child_module) = hir::Module::from_declaration(db, src) {\n                 let nav = child_module.to_nav(db);\n                 return Some(vec![nav]);\n             }\n         }\n     }\n \n-    if let Some(nav) = named_target(db, file_id, &parent) {\n+    if let Some(nav) = named_target(db, name.with_ast(&parent)) {\n         return Some(vec![nav]);\n     }\n \n     None\n }\n \n-fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option<NavigationTarget> {\n+fn named_target(db: &RootDatabase, node: Source<&SyntaxNode>) -> Option<NavigationTarget> {\n     match_ast! {\n-        match node {\n+        match (node.ast) {\n             ast::StructDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -123,7 +122,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::EnumDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -132,7 +131,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::EnumVariant(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -141,7 +140,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::FnDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -150,7 +149,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::TypeAliasDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -159,7 +158,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::ConstDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -168,7 +167,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::StaticDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -177,7 +176,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::TraitDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -186,7 +185,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::RecordFieldDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -195,7 +194,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::Module(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -204,7 +203,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::MacroCall(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     None,"}]}