{"sha": "b853e8a6194637751bffbcfdd5bb51c7bfecdff5", "node_id": "C_kwDOAAsO6NoAKGI4NTNlOGE2MTk0NjM3NzUxYmZmYmNmZGQ1YmI1MWM3YmZlY2RmZjU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-25T09:18:01Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-26T00:53:41Z"}, "message": "Turn `ArgAbi::pad` into a `bool`.\n\nBecause it's only ever set to `None` or `Some(Reg::i32())`.", "tree": {"sha": "2c15425811ff1409c2ee32eb0f47b0d046bdce68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c15425811ff1409c2ee32eb0f47b0d046bdce68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b853e8a6194637751bffbcfdd5bb51c7bfecdff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b853e8a6194637751bffbcfdd5bb51c7bfecdff5", "html_url": "https://github.com/rust-lang/rust/commit/b853e8a6194637751bffbcfdd5bb51c7bfecdff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feeaa4db3cb990463871e35b16b3449023cb791d", "url": "https://api.github.com/repos/rust-lang/rust/commits/feeaa4db3cb990463871e35b16b3449023cb791d", "html_url": "https://github.com/rust-lang/rust/commit/feeaa4db3cb990463871e35b16b3449023cb791d"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "3186b363e359f8d804df49f061a159aa50453267", "filename": "compiler/rustc_codegen_gcc/src/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_codegen_gcc%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_codegen_gcc%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fabi.rs?ref=b853e8a6194637751bffbcfdd5bb51c7bfecdff5", "patch": "@@ -126,8 +126,8 @@ impl<'gcc, 'tcx> FnAbiGccExt<'gcc, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n \n         for arg in self.args.iter() {\n             // add padding\n-            if let Some(ty) = arg.pad {\n-                argument_tys.push(ty.gcc_type(cx));\n+            if arg.pad_i32 {\n+                argument_tys.push(Reg::i32().gcc_type(cx));\n             }\n \n             let arg_ty = match arg.mode {"}, {"sha": "168cf3d0b58fef4a0d20fbd9c545c2a2b3bae34d", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=b853e8a6194637751bffbcfdd5bb51c7bfecdff5", "patch": "@@ -345,8 +345,8 @@ impl<'ll, 'tcx> FnAbiLlvmExt<'ll, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n \n         for arg in args {\n             // add padding\n-            if let Some(ty) = arg.pad {\n-                llargument_tys.push(ty.llvm_type(cx));\n+            if arg.pad_i32 {\n+                llargument_tys.push(Reg::i32().llvm_type(cx));\n             }\n \n             let llarg_ty = match &arg.mode {\n@@ -440,7 +440,7 @@ impl<'ll, 'tcx> FnAbiLlvmExt<'ll, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n             _ => {}\n         }\n         for arg in self.args.iter() {\n-            if arg.pad.is_some() {\n+            if arg.pad_i32 {\n                 apply(&ArgAttributes::new());\n             }\n             match &arg.mode {\n@@ -516,7 +516,7 @@ impl<'ll, 'tcx> FnAbiLlvmExt<'ll, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n             }\n         }\n         for arg in self.args.iter() {\n-            if arg.pad.is_some() {\n+            if arg.pad_i32 {\n                 apply(bx.cx, &ArgAttributes::new());\n             }\n             match &arg.mode {"}, {"sha": "5b3f41263e7275ab10de6f0fe5bfbcf7ed6b88e4", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=b853e8a6194637751bffbcfdd5bb51c7bfecdff5", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::ty::{self, Instance, Ty, TypeVisitable};\n use rustc_span::source_map::Span;\n use rustc_span::{sym, Symbol};\n use rustc_symbol_mangling::typeid::typeid_for_fnabi;\n-use rustc_target::abi::call::{ArgAbi, FnAbi, PassMode};\n+use rustc_target::abi::call::{ArgAbi, FnAbi, PassMode, Reg};\n use rustc_target::abi::{self, HasDataLayout, WrappingRange};\n use rustc_target::spec::abi::Abi;\n \n@@ -1159,8 +1159,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         arg: &ArgAbi<'tcx, Ty<'tcx>>,\n     ) {\n         // Fill padding with undef value, where applicable.\n-        if let Some(ty) = arg.pad {\n-            llargs.push(bx.const_undef(bx.reg_backend_type(&ty)))\n+        if arg.pad_i32 {\n+            llargs.push(bx.const_undef(bx.reg_backend_type(&Reg::i32())))\n         }\n \n         if arg.is_ignore() {"}, {"sha": "f13b658b2ffbe585122c40dde5426b0d5d86c75e", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=b853e8a6194637751bffbcfdd5bb51c7bfecdff5", "patch": "@@ -283,7 +283,7 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                 for i in 0..tupled_arg_tys.len() {\n                     let arg = &fx.fn_abi.args[idx];\n                     idx += 1;\n-                    if arg.pad.is_some() {\n+                    if arg.pad_i32 {\n                         llarg_idx += 1;\n                     }\n                     let pr_field = place.project_field(bx, i);\n@@ -309,7 +309,7 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n             let arg = &fx.fn_abi.args[idx];\n             idx += 1;\n-            if arg.pad.is_some() {\n+            if arg.pad_i32 {\n                 llarg_idx += 1;\n             }\n "}, {"sha": "2fcdf6ded9819a01a07af478441efb77ad593f20", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=b853e8a6194637751bffbcfdd5bb51c7bfecdff5", "patch": "@@ -216,7 +216,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         };\n         // Padding must be fully equal.\n-        let pad_compat = || caller_abi.pad == callee_abi.pad;\n+        let pad_compat = || caller_abi.pad_i32 == callee_abi.pad_i32;\n         // When comparing the PassMode, we have to be smart about comparing the attributes.\n         let arg_attr_compat = |a1: &ArgAttributes, a2: &ArgAttributes| {\n             // There's only one regular attribute that matters for the call ABI: InReg."}, {"sha": "ff8f32362148ca4cdbb6f4eadd6236cb207b76b2", "filename": "compiler/rustc_target/src/abi/call/mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips.rs?ref=b853e8a6194637751bffbcfdd5bb51c7bfecdff5", "patch": "@@ -24,7 +24,7 @@ where\n     if arg.layout.is_aggregate() {\n         arg.cast_to(Uniform { unit: Reg::i32(), total: size });\n         if !offset.is_aligned(align) {\n-            arg.pad_with(Reg::i32());\n+            arg.pad_with_i32();\n         }\n     } else {\n         arg.extend_integer_width_to(32);"}, {"sha": "33f533e68f0e8c883f35993f7fb8bb343bd23453", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=b853e8a6194637751bffbcfdd5bb51c7bfecdff5", "patch": "@@ -465,7 +465,7 @@ pub struct ArgAbi<'a, Ty> {\n     pub layout: TyAndLayout<'a, Ty>,\n \n     /// Dummy argument, which is emitted before the real argument.\n-    pub pad: Option<Reg>,\n+    pub pad_i32: bool,\n \n     pub mode: PassMode,\n }\n@@ -486,7 +486,7 @@ impl<'a, Ty> ArgAbi<'a, Ty> {\n             Abi::Vector { .. } => PassMode::Direct(ArgAttributes::new()),\n             Abi::Aggregate { .. } => PassMode::Direct(ArgAttributes::new()),\n         };\n-        ArgAbi { layout, pad: None, mode }\n+        ArgAbi { layout, pad_i32: false, mode }\n     }\n \n     fn indirect_pass_mode(layout: &TyAndLayout<'a, Ty>) -> PassMode {\n@@ -551,8 +551,8 @@ impl<'a, Ty> ArgAbi<'a, Ty> {\n         self.mode = PassMode::Cast(Box::new(target.into()));\n     }\n \n-    pub fn pad_with(&mut self, reg: Reg) {\n-        self.pad = Some(reg);\n+    pub fn pad_with_i32(&mut self) {\n+        self.pad_i32 = true;\n     }\n \n     pub fn is_indirect(&self) -> bool {\n@@ -737,6 +737,6 @@ mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n     // These are in alphabetical order, which is easy to maintain.\n-    static_assert_size!(ArgAbi<'_, usize>, 72);\n-    static_assert_size!(FnAbi<'_, usize>, 96);\n+    static_assert_size!(ArgAbi<'_, usize>, 64);\n+    static_assert_size!(FnAbi<'_, usize>, 88);\n }"}, {"sha": "ff8f32362148ca4cdbb6f4eadd6236cb207b76b2", "filename": "compiler/rustc_target/src/abi/call/sparc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b853e8a6194637751bffbcfdd5bb51c7bfecdff5/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc.rs?ref=b853e8a6194637751bffbcfdd5bb51c7bfecdff5", "patch": "@@ -24,7 +24,7 @@ where\n     if arg.layout.is_aggregate() {\n         arg.cast_to(Uniform { unit: Reg::i32(), total: size });\n         if !offset.is_aligned(align) {\n-            arg.pad_with(Reg::i32());\n+            arg.pad_with_i32();\n         }\n     } else {\n         arg.extend_integer_width_to(32);"}]}