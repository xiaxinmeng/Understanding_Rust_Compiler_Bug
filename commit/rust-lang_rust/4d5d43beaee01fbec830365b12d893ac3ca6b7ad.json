{"sha": "4d5d43beaee01fbec830365b12d893ac3ca6b7ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNWQ0M2JlYWVlMDFmYmVjODMwMzY1YjEyZDg5M2FjM2NhNmI3YWQ=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-05-29T23:22:22Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-04T23:30:41Z"}, "message": "Warn when invoking polymorphic functions with non copyable types. Closes #2466.", "tree": {"sha": "4b340c2a66bb5dc661bb80d64a84d13c3e189e36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b340c2a66bb5dc661bb80d64a84d13c3e189e36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d5d43beaee01fbec830365b12d893ac3ca6b7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d5d43beaee01fbec830365b12d893ac3ca6b7ad", "html_url": "https://github.com/rust-lang/rust/commit/4d5d43beaee01fbec830365b12d893ac3ca6b7ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d5d43beaee01fbec830365b12d893ac3ca6b7ad/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a4e53487faa94f3ccb966abf278d7ab5e22711a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4e53487faa94f3ccb966abf278d7ab5e22711a", "html_url": "https://github.com/rust-lang/rust/commit/5a4e53487faa94f3ccb966abf278d7ab5e22711a"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "10f095bba34c482f496ddbc92431741640923c7f", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4d5d43beaee01fbec830365b12d893ac3ca6b7ad/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5d43beaee01fbec830365b12d893ac3ca6b7ad/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=4d5d43beaee01fbec830365b12d893ac3ca6b7ad", "patch": "@@ -9,6 +9,7 @@ import util::ppaux::{ty_to_str, tys_to_str};\n import syntax::print::pprust::expr_to_str;\n import freevars::freevar_entry;\n import dvec::extensions;\n+import lint::non_implicitly_copyable_typarams;\n \n // Kind analysis pass.\n //\n@@ -56,19 +57,26 @@ type rval_map = std::map::hashmap<node_id, ()>;\n \n type ctx = {tcx: ty::ctxt,\n             method_map: typeck::method_map,\n-            last_use_map: liveness::last_use_map};\n+            last_use_map: liveness::last_use_map,\n+            current_item: node_id};\n \n-fn check_crate(tcx: ty::ctxt, method_map: typeck::method_map,\n-               last_use_map: liveness::last_use_map, crate: @crate) {\n+fn check_crate(tcx: ty::ctxt,\n+               method_map: typeck::method_map,\n+               last_use_map: liveness::last_use_map,\n+               crate: @crate) {\n     let ctx = {tcx: tcx,\n                method_map: method_map,\n-               last_use_map: last_use_map};\n+               last_use_map: last_use_map,\n+               current_item: -1};\n     let visit = visit::mk_vt(@{\n         visit_expr: check_expr,\n         visit_stmt: check_stmt,\n         visit_block: check_block,\n         visit_fn: check_fn,\n-        visit_ty: check_ty\n+        visit_ty: check_ty,\n+        visit_item: fn@(i: @item, cx: ctx, v: visit::vt<ctx>) {\n+            visit::visit_item(i, {current_item: i.id with cx}, v);\n+        }\n         with *visit::default_visitor()\n     });\n     visit::visit_crate(*crate, ctx, visit);\n@@ -280,7 +288,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n                   tys_to_str(cx.tcx, ts), ts.len(), *bounds, (*bounds).len());\n             }\n             vec::iter2(ts, *bounds) {|ty, bound|\n-                check_bounds(cx, e.span, ty, bound)\n+                check_bounds(cx, e.id, e.span, ty, bound)\n             }\n         }\n       }\n@@ -311,7 +319,7 @@ fn check_ty(aty: @ty, cx: ctx, v: visit::vt<ctx>) {\n             let did = ast_util::def_id_of_def(cx.tcx.def_map.get(id));\n             let bounds = ty::lookup_item_type(cx.tcx, did).bounds;\n             vec::iter2(ts, *bounds) {|ty, bound|\n-                check_bounds(cx, aty.span, ty, bound)\n+                check_bounds(cx, aty.id, aty.span, ty, bound)\n             }\n         }\n       }\n@@ -320,15 +328,29 @@ fn check_ty(aty: @ty, cx: ctx, v: visit::vt<ctx>) {\n     visit::visit_ty(aty, cx, v);\n }\n \n-fn check_bounds(cx: ctx, sp: span, ty: ty::t, bounds: ty::param_bounds) {\n+fn check_bounds(cx: ctx, id: node_id, sp: span,\n+                ty: ty::t, bounds: ty::param_bounds) {\n     let kind = ty::type_kind(cx.tcx, ty);\n     let p_kind = ty::param_bounds_to_kind(bounds);\n     if !ty::kind_lteq(p_kind, kind) {\n-        cx.tcx.sess.span_err(\n-            sp, \"instantiating a type parameter with an incompatible type \" +\n-            \"(needs `\" + kind_to_str(p_kind) +\n-            \"`, got `\" + kind_to_str(kind) +\n-            \"`, missing `\" + kind_to_str(p_kind - kind) + \"`)\");\n+        // If the only reason the kind check fails is because the\n+        // argument type isn't implicitly copyable, consult the warning\n+        // settings to figure out what to do.\n+        let implicit = ty::kind_implicitly_copyable() - ty::kind_copyable();\n+        if ty::kind_lteq(p_kind, kind | implicit) {\n+            cx.tcx.sess.span_lint(\n+                non_implicitly_copyable_typarams,\n+                id, cx.current_item, sp,\n+                \"instantiating copy type parameter with a \\\n+                 not implicitly copyable type\");\n+        } else {\n+            cx.tcx.sess.span_err(\n+                sp,\n+                \"instantiating a type parameter with an incompatible type \" +\n+                \"(needs `\" + kind_to_str(p_kind) +\n+                \"`, got `\" + kind_to_str(kind) +\n+                \"`, missing `\" + kind_to_str(p_kind - kind) + \"`)\");\n+        }\n     }\n }\n "}, {"sha": "a3ef8615982a8183f05830241d140578828f07a9", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d5d43beaee01fbec830365b12d893ac3ca6b7ad/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5d43beaee01fbec830365b12d893ac3ca6b7ad/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=4d5d43beaee01fbec830365b12d893ac3ca6b7ad", "patch": "@@ -44,6 +44,7 @@ enum lint {\n     path_statement,\n     old_vecs,\n     unrecognized_warning,\n+    non_implicitly_copyable_typarams,\n }\n \n // This is pretty unfortunate. We really want some sort of \"deriving Enum\"\n@@ -56,6 +57,7 @@ fn int_to_lint(i: int) -> lint {\n       3 { path_statement }\n       4 { old_vecs }\n       5 { unrecognized_warning }\n+      6 { non_implicitly_copyable_typarams }\n     }\n }\n \n@@ -103,6 +105,11 @@ fn get_lint_dict() -> lint_dict {\n         (\"unrecognized_warning\",\n          @{lint: unrecognized_warning,\n            desc: \"unrecognized warning attribute\",\n+           default: warn}),\n+\n+        (\"non_implicitly_copyable_typarams\",\n+         @{lint: non_implicitly_copyable_typarams,\n+           desc: \"passing non implicitly copyable types as copy type params\",\n            default: warn})\n \n     ];"}, {"sha": "84d541731df26cc97fdd73cecadac95129e10b8a", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d5d43beaee01fbec830365b12d893ac3ca6b7ad/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5d43beaee01fbec830365b12d893ac3ca6b7ad/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=4d5d43beaee01fbec830365b12d893ac3ca6b7ad", "patch": "@@ -112,7 +112,8 @@ export ty_var_id;\n export ty_to_def_id;\n export ty_fn_args;\n export type_constr;\n-export kind, kind_sendable, kind_copyable, kind_noncopyable, kind_const;\n+export kind, kind_implicitly_copyable, kind_sendable, kind_copyable;\n+export kind_noncopyable, kind_const;\n export kind_can_be_copied, kind_can_be_sent, kind_can_be_implicitly_copied;\n export proto_kind, kind_lteq, type_kind;\n export operators;\n@@ -455,7 +456,7 @@ fn param_bounds_to_kind(bounds: param_bounds) -> kind {\n     for vec::each(*bounds) {|bound|\n         alt bound {\n           bound_copy {\n-            kind = raise_kind(kind, kind_copyable());\n+            kind = raise_kind(kind, kind_implicitly_copyable());\n           }\n           bound_send { kind = raise_kind(kind, kind_send_only()); }\n           bound_const { kind = raise_kind(kind, kind_const()); }"}]}