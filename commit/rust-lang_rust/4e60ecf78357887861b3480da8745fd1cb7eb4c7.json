{"sha": "4e60ecf78357887861b3480da8745fd1cb7eb4c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNjBlY2Y3ODM1Nzg4Nzg2MWIzNDgwZGE4NzQ1ZmQxY2I3ZWI0Yzc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-06T21:21:42Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-23T12:56:50Z"}, "message": "Iterate on deprecation.", "tree": {"sha": "d25dba54e8c21877d08fb7247d3e6755eb439d10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d25dba54e8c21877d08fb7247d3e6755eb439d10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e60ecf78357887861b3480da8745fd1cb7eb4c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e60ecf78357887861b3480da8745fd1cb7eb4c7", "html_url": "https://github.com/rust-lang/rust/commit/4e60ecf78357887861b3480da8745fd1cb7eb4c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e60ecf78357887861b3480da8745fd1cb7eb4c7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4468473e1b2d3bdb9e7da438acc1448d810771ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/4468473e1b2d3bdb9e7da438acc1448d810771ef", "html_url": "https://github.com/rust-lang/rust/commit/4468473e1b2d3bdb9e7da438acc1448d810771ef"}], "stats": {"total": 11, "additions": 1, "deletions": 10}, "files": [{"sha": "ec95a74fc7e6a108cc4f70c5a280944cd1a33602", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e60ecf78357887861b3480da8745fd1cb7eb4c7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e60ecf78357887861b3480da8745fd1cb7eb4c7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=4e60ecf78357887861b3480da8745fd1cb7eb4c7", "patch": "@@ -775,6 +775,7 @@ impl EncodeContext<'a, 'tcx> {\n             }\n             self.encode_stability(def_id);\n             self.encode_const_stability(def_id);\n+            self.encode_deprecation(def_id);\n         }\n     }\n \n@@ -807,7 +808,6 @@ impl EncodeContext<'a, 'tcx> {\n             f.did.index\n         }));\n         self.encode_ident_span(def_id, variant.ident);\n-        self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n             // FIXME(eddyb) encode signature only in `encode_enum_variant_ctor`.\n@@ -837,7 +837,6 @@ impl EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n-        self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n@@ -893,7 +892,6 @@ impl EncodeContext<'a, 'tcx> {\n                 tcx.hir().local_def_id(item_id.id).local_def_index\n             }));\n         }\n-        self.encode_deprecation(def_id);\n     }\n \n     fn encode_field(\n@@ -910,7 +908,6 @@ impl EncodeContext<'a, 'tcx> {\n \n         record!(self.tables.kind[def_id] <- EntryKind::Field);\n         self.encode_ident_span(def_id, field.ident);\n-        self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n@@ -930,7 +927,6 @@ impl EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data), adt_def.repr));\n-        self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n@@ -1032,7 +1028,6 @@ impl EncodeContext<'a, 'tcx> {\n             }\n         }\n         self.encode_ident_span(def_id, ast_item.ident);\n-        self.encode_deprecation(def_id);\n         match trait_item.kind {\n             ty::AssocKind::Const | ty::AssocKind::Fn => {\n                 self.encode_item_type(def_id);\n@@ -1131,7 +1126,6 @@ impl EncodeContext<'a, 'tcx> {\n             }\n         }\n         self.encode_ident_span(def_id, impl_item.ident);\n-        self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n         if impl_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n@@ -1404,7 +1398,6 @@ impl EncodeContext<'a, 'tcx> {\n             }\n             _ => {}\n         }\n-        self.encode_deprecation(def_id);\n         match item.kind {\n             hir::ItemKind::Static(..)\n             | hir::ItemKind::Const(..)\n@@ -1486,7 +1479,6 @@ impl EncodeContext<'a, 'tcx> {\n         let def_id = self.tcx.hir().local_def_id(macro_def.hir_id).to_def_id();\n         record!(self.tables.kind[def_id] <- EntryKind::MacroDef(self.lazy(macro_def.ast.clone())));\n         self.encode_ident_span(def_id, macro_def.ident);\n-        self.encode_deprecation(def_id);\n     }\n \n     fn encode_info_for_generic_param(&mut self, def_id: DefId, kind: EntryKind, encode_type: bool) {\n@@ -1813,7 +1805,6 @@ impl EncodeContext<'a, 'tcx> {\n             }\n         }\n         self.encode_ident_span(def_id, nitem.ident);\n-        self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n         self.encode_inherent_implementations(def_id);\n         if let hir::ForeignItemKind::Fn(..) = nitem.kind {"}]}