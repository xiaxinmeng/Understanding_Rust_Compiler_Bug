{"sha": "4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMjA4ZjZhM2FmYjQyNTI4ODc4YjBmMzQ2NGUzMzdjNGJmM2JiYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-15T09:27:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-15T09:27:21Z"}, "message": "Auto merge of #81035 - JohnTitor:rollup-9m03awf, r=JohnTitor\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #80254 (Don't try to add nested predicate to Rustdoc auto-trait `ParamEnv`)\n - #80834 (Remove unreachable panics from VecDeque::{front/back}[_mut])\n - #80944 (Use Option::map_or instead of `.map(..).unwrap_or(..)`)\n - #81008 (Don't ICE when computing a layout of a generator tainted by errors)\n - #81023 (Remove doctree::Variant)\n\nFailed merges:\n\n - #81033 (Remove useless `clean::Variant` struct)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "21529ff86f6f364980511a8cb4cb7a0001ae29c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21529ff86f6f364980511a8cb4cb7a0001ae29c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "html_url": "https://github.com/rust-lang/rust/commit/4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcf622eb70aebe16d40c5f88fa2a41fa7019541c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf622eb70aebe16d40c5f88fa2a41fa7019541c", "html_url": "https://github.com/rust-lang/rust/commit/dcf622eb70aebe16d40c5f88fa2a41fa7019541c"}, {"sha": "7286be15fa3f18ea4bd5b6ce481426f7d78e4a57", "url": "https://api.github.com/repos/rust-lang/rust/commits/7286be15fa3f18ea4bd5b6ce481426f7d78e4a57", "html_url": "https://github.com/rust-lang/rust/commit/7286be15fa3f18ea4bd5b6ce481426f7d78e4a57"}], "stats": {"total": 298, "additions": 181, "deletions": 117}, "files": [{"sha": "9079e26eb509ed33e8756f60f98e9b6af012a8f6", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -273,7 +273,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         if !generic_args.parenthesized && !has_lifetimes {\n             generic_args.args = self\n                 .elided_path_lifetimes(\n-                    first_generic_span.map(|s| s.shrink_to_lo()).unwrap_or(segment.ident.span),\n+                    first_generic_span.map_or(segment.ident.span, |s| s.shrink_to_lo()),\n                     expected_lifetimes,\n                 )\n                 .map(GenericArg::Lifetime)"}, {"sha": "7bd805f91c8575ee0f629cedddfde4a8ac928100", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -370,7 +370,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(\n                         &self,\n                         negative_impls,\n-                        span.to(of_trait.as_ref().map(|t| t.path.span).unwrap_or(span)),\n+                        span.to(of_trait.as_ref().map_or(span, |t| t.path.span)),\n                         \"negative trait bounds are not yet fully implemented; \\\n                          use marker types for now\"\n                     );"}, {"sha": "e225730dce061fee34b834f2288f605acbec523e", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -1002,8 +1002,7 @@ pub unsafe fn with_llvm_pmb(\n     // reasonable defaults and prepare it to actually populate the pass\n     // manager.\n     let builder = llvm::LLVMPassManagerBuilderCreate();\n-    let opt_size =\n-        config.opt_size.map(|x| to_llvm_opt_settings(x).1).unwrap_or(llvm::CodeGenOptSizeNone);\n+    let opt_size = config.opt_size.map_or(llvm::CodeGenOptSizeNone, |x| to_llvm_opt_settings(x).1);\n     let inline_threshold = config.inline_threshold;\n     let pgo_gen_path = get_pgo_gen_path(config);\n     let pgo_use_path = get_pgo_use_path(config);"}, {"sha": "b9ae796325023eec4dd6aed9ae7b0f4a6460a219", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -1832,8 +1832,9 @@ impl<'tcx> VariantInfo<'_, 'tcx> {\n     fn source_info(&self, cx: &CodegenCx<'ll, 'tcx>) -> Option<SourceInfo<'ll>> {\n         match self {\n             VariantInfo::Generator { def_id, variant_index, .. } => {\n-                let span =\n-                    cx.tcx.generator_layout(*def_id).variant_source_info[*variant_index].span;\n+                let span = cx.tcx.generator_layout(*def_id).unwrap().variant_source_info\n+                    [*variant_index]\n+                    .span;\n                 if !span.is_dummy() {\n                     let loc = cx.lookup_debug_loc(span.lo());\n                     return Some(SourceInfo {"}, {"sha": "ff77db9eab8522b35c5c2b76a44f1e9c56faabb3", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -166,7 +166,7 @@ fn get_linker(\n         _ => match flavor {\n             LinkerFlavor::Lld(f) => Command::lld(linker, f),\n             LinkerFlavor::Msvc if sess.opts.cg.linker.is_none() && sess.target.linker.is_none() => {\n-                Command::new(msvc_tool.as_ref().map(|t| t.path()).unwrap_or(linker))\n+                Command::new(msvc_tool.as_ref().map_or(linker, |t| t.path()))\n             }\n             _ => Command::new(linker),\n         },"}, {"sha": "b16d5a9e2b421c73be811e8a22c302163132e8d2", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -166,7 +166,7 @@ impl SelfProfilerRef {\n         // If there is no SelfProfiler then the filter mask is set to NONE,\n         // ensuring that nothing ever tries to actually access it.\n         let event_filter_mask =\n-            profiler.as_ref().map(|p| p.event_filter_mask).unwrap_or(EventFilter::empty());\n+            profiler.as_ref().map_or(EventFilter::empty(), |p| p.event_filter_mask);\n \n         SelfProfilerRef {\n             profiler,"}, {"sha": "15b984acac590b19af1f8a8d58e05062f55f68c4", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -1236,7 +1236,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     }\n \n     // If backtraces are enabled, also print the query stack\n-    let backtrace = env::var_os(\"RUST_BACKTRACE\").map(|x| &x != \"0\").unwrap_or(false);\n+    let backtrace = env::var_os(\"RUST_BACKTRACE\").map_or(false, |x| &x != \"0\");\n \n     let num_frames = if backtrace { None } else { Some(2) };\n "}, {"sha": "e184e929b07454bd3067045a076e160e26e19600", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -804,7 +804,7 @@ impl HandlerInner {\n     }\n \n     fn treat_err_as_bug(&self) -> bool {\n-        self.flags.treat_err_as_bug.map(|c| self.err_count() >= c).unwrap_or(false)\n+        self.flags.treat_err_as_bug.map_or(false, |c| self.err_count() >= c)\n     }\n \n     fn print_error_count(&mut self, registry: &Registry) {\n@@ -913,7 +913,7 @@ impl HandlerInner {\n         // This is technically `self.treat_err_as_bug()` but `delay_span_bug` is called before\n         // incrementing `err_count` by one, so we need to +1 the comparing.\n         // FIXME: Would be nice to increment err_count in a more coherent way.\n-        if self.flags.treat_err_as_bug.map(|c| self.err_count() + 1 >= c).unwrap_or(false) {\n+        if self.flags.treat_err_as_bug.map_or(false, |c| self.err_count() + 1 >= c) {\n             // FIXME: don't abort here if report_delayed_bugs is off\n             self.span_bug(sp, msg);\n         }"}, {"sha": "b07bce94870c1c9bdd33cbf4e11916abf178108f", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -423,7 +423,7 @@ impl<'a> StripUnconfigured<'a> {\n \n     /// If attributes are not allowed on expressions, emit an error for `attr`\n     pub fn maybe_emit_expr_attr_err(&self, attr: &Attribute) {\n-        if !self.features.map(|features| features.stmt_expr_attributes).unwrap_or(true) {\n+        if !self.features.map_or(true, |features| features.stmt_expr_attributes) {\n             let mut err = feature_err(\n                 &self.sess.parse_sess,\n                 sym::stmt_expr_attributes,"}, {"sha": "1aed42a24e2b3b44870ef66bc226336a76cf92c2", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -500,7 +500,7 @@ fn inner_parse_loop<'root, 'tt>(\n                 if idx == len && item.sep.is_some() {\n                     // We have a separator, and it is the current token. We can advance past the\n                     // separator token.\n-                    if item.sep.as_ref().map(|sep| token_name_eq(token, sep)).unwrap_or(false) {\n+                    if item.sep.as_ref().map_or(false, |sep| token_name_eq(token, sep)) {\n                         item.idx += 1;\n                         next_items.push(item);\n                     }"}, {"sha": "8373304ea9134589f4bed6345434a6ebff797612", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -203,7 +203,7 @@ fn macro_rules_dummy_expander<'cx>(\n }\n \n fn trace_macros_note(cx_expansions: &mut FxHashMap<Span, Vec<String>>, sp: Span, message: String) {\n-    let sp = sp.macro_backtrace().last().map(|trace| trace.call_site).unwrap_or(sp);\n+    let sp = sp.macro_backtrace().last().map_or(sp, |trace| trace.call_site);\n     cx_expansions.entry(sp).or_default().push(message);\n }\n "}, {"sha": "c8049495d223c281581d66393e61980d315805ed", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -99,10 +99,10 @@ pub(super) fn parse(\n                                 }\n                                 _ => token.span,\n                             },\n-                            tree => tree.as_ref().map(tokenstream::TokenTree::span).unwrap_or(span),\n+                            tree => tree.as_ref().map_or(span, tokenstream::TokenTree::span),\n                         }\n                     }\n-                    tree => tree.as_ref().map(tokenstream::TokenTree::span).unwrap_or(start_sp),\n+                    tree => tree.as_ref().map_or(start_sp, tokenstream::TokenTree::span),\n                 };\n                 if node_id != DUMMY_NODE_ID {\n                     // Macros loaded from other crates have dummy node ids.\n@@ -250,7 +250,7 @@ fn parse_kleene_op(\n             Some(op) => Ok(Ok((op, token.span))),\n             None => Ok(Err(token)),\n         },\n-        tree => Err(tree.as_ref().map(tokenstream::TokenTree::span).unwrap_or(span)),\n+        tree => Err(tree.as_ref().map_or(span, tokenstream::TokenTree::span)),\n     }\n }\n "}, {"sha": "3673e5c8bf3a5f8618b472cfc65aa3bece50242e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -561,7 +561,7 @@ impl WhereClause<'_> {\n     ///  in `fn foo<T>(t: T) where T: Foo,` so we don't suggest two trailing commas.\n     pub fn tail_span_for_suggestion(&self) -> Span {\n         let end = self.span_for_predicates_or_empty_place().shrink_to_hi();\n-        self.predicates.last().map(|p| p.span()).unwrap_or(end).shrink_to_hi().to(end)\n+        self.predicates.last().map_or(end, |p| p.span()).shrink_to_hi().to(end)\n     }\n }\n "}, {"sha": "fee6f87ae42c365528197df53444490c76ec3876", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -2118,7 +2118,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 let consider = format!(\n                     \"{} {}...\",\n                     msg,\n-                    if type_param_span.map(|(_, _, is_impl_trait)| is_impl_trait).unwrap_or(false) {\n+                    if type_param_span.map_or(false, |(_, _, is_impl_trait)| is_impl_trait) {\n                         format!(\" `{}` to `{}`\", sub, bound_kind)\n                     } else {\n                         format!(\"`{}: {}`\", bound_kind, sub)"}, {"sha": "27545c126857bfcc400eb190a87f473a64e7153c", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -1533,7 +1533,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 // Note: if these two lines are combined into one we get\n                 // dynamic borrow errors on `self.inner`.\n                 let known = self.inner.borrow_mut().type_variables().probe(v).known();\n-                known.map(|t| self.shallow_resolve_ty(t)).unwrap_or(typ)\n+                known.map_or(typ, |t| self.shallow_resolve_ty(t))\n             }\n \n             ty::Infer(ty::IntVar(v)) => self"}, {"sha": "424f91b3f883e6269c61c559ea803a3ac25ce60c", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -647,8 +647,7 @@ pub fn transparent_newtype_field<'a, 'tcx>(\n     let param_env = tcx.param_env(variant.def_id);\n     for field in &variant.fields {\n         let field_ty = tcx.type_of(field.did);\n-        let is_zst =\n-            tcx.layout_of(param_env.and(field_ty)).map(|layout| layout.is_zst()).unwrap_or(false);\n+        let is_zst = tcx.layout_of(param_env.and(field_ty)).map_or(false, |layout| layout.is_zst());\n \n         if !is_zst {\n             return Some(field);"}, {"sha": "bc7363a69a6e844abd2fa8edc9a13718f8889f41", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -529,8 +529,8 @@ trait UnusedDelimLint {\n             pprust::expr_to_string(value)\n         };\n         let keep_space = (\n-            left_pos.map(|s| s >= value.span.lo()).unwrap_or(false),\n-            right_pos.map(|s| s <= value.span.hi()).unwrap_or(false),\n+            left_pos.map_or(false, |s| s >= value.span.lo()),\n+            right_pos.map_or(false, |s| s <= value.span.hi()),\n         );\n         self.emit_unused_delims(cx, value.span, &expr_text, ctx.into(), keep_space);\n     }"}, {"sha": "d264462bf089517cc407bd5ea0e536d27fdec7b6", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -429,7 +429,7 @@ fn add_query_description_impl(\n     };\n \n     let (tcx, desc) = modifiers.desc;\n-    let tcx = tcx.as_ref().map(|t| quote! { #t }).unwrap_or(quote! { _ });\n+    let tcx = tcx.as_ref().map_or(quote! { _ }, |t| quote! { #t });\n \n     let desc = quote! {\n         #[allow(unused_variables)]"}, {"sha": "a7bf79d7e6743b1af03aec612b1bd41f6670a3d2", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -326,7 +326,7 @@ impl<'a> CrateLoader<'a> {\n         self.verify_no_symbol_conflicts(&crate_root)?;\n \n         let private_dep =\n-            self.sess.opts.externs.get(&name.as_str()).map(|e| e.is_private_dep).unwrap_or(false);\n+            self.sess.opts.externs.get(&name.as_str()).map_or(false, |e| e.is_private_dep);\n \n         // Claim this crate number and cache it\n         let cnum = self.cstore.alloc_new_crate_num();"}, {"sha": "8d0994320e383ec040265ac183fb99e984612ff6", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -132,7 +132,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n \n impl Collector<'tcx> {\n     fn register_native_lib(&mut self, span: Option<Span>, lib: NativeLib) {\n-        if lib.name.as_ref().map(|&s| s == kw::Empty).unwrap_or(false) {\n+        if lib.name.as_ref().map_or(false, |&s| s == kw::Empty) {\n             match span {\n                 Some(span) => {\n                     struct_span_err!("}, {"sha": "06bb1347dc1de80ac44ff2dd0a0ed04fe450016b", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -815,7 +815,7 @@ impl<'hir> Map<'hir> {\n     /// Given a node ID, gets a list of attributes associated with the AST\n     /// corresponding to the node-ID.\n     pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {\n-        let attrs = self.find_entry(id).map(|entry| match entry.node {\n+        self.find_entry(id).map_or(&[], |entry| match entry.node {\n             Node::Param(a) => &a.attrs[..],\n             Node::Local(l) => &l.attrs[..],\n             Node::Item(i) => &i.attrs[..],\n@@ -842,8 +842,7 @@ impl<'hir> Map<'hir> {\n             | Node::Block(..)\n             | Node::Lifetime(..)\n             | Node::Visibility(..) => &[],\n-        });\n-        attrs.unwrap_or(&[])\n+        })\n     }\n \n     /// Gets the span of the definition of the specified HIR node."}, {"sha": "a2638d8bddad020373aa9a1e94161389175121d5", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -82,7 +82,7 @@ impl<'tcx> ConstKind<'tcx> {\n     /// Tries to evaluate the constant if it is `Unevaluated`. If that doesn't succeed, return the\n     /// unevaluated constant.\n     pub fn eval(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Self {\n-        self.try_eval(tcx, param_env).and_then(Result::ok).map(ConstKind::Value).unwrap_or(self)\n+        self.try_eval(tcx, param_env).and_then(Result::ok).map_or(self, ConstKind::Value)\n     }\n \n     #[inline]"}, {"sha": "c3ad4c1c126d23eca6a81303aff08d4ec11fc3aa", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -1338,7 +1338,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn serialize_query_result_cache(self, encoder: &mut FileEncoder) -> FileEncodeResult {\n-        self.queries.on_disk_cache.as_ref().map(|c| c.serialize(self, encoder)).unwrap_or(Ok(()))\n+        self.queries.on_disk_cache.as_ref().map_or(Ok(()), |c| c.serialize(self, encoder))\n     }\n \n     /// If `true`, we should use the MIR-based borrowck, but also\n@@ -2601,7 +2601,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn is_late_bound(self, id: HirId) -> bool {\n-        self.is_late_bound_map(id.owner).map(|set| set.contains(&id.local_id)).unwrap_or(false)\n+        self.is_late_bound_map(id.owner).map_or(false, |set| set.contains(&id.local_id))\n     }\n \n     pub fn object_lifetime_defaults(self, id: HirId) -> Option<&'tcx [ObjectLifetimeDefault]> {"}, {"sha": "6ca5dcc532d22209dcba6aeb79cbaa17a3868960", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -535,7 +535,7 @@ fn polymorphize<'tcx>(\n     } else {\n         None\n     };\n-    let has_upvars = upvars_ty.map(|ty| ty.tuple_fields().count() > 0).unwrap_or(false);\n+    let has_upvars = upvars_ty.map_or(false, |ty| ty.tuple_fields().count() > 0);\n     debug!(\"polymorphize: upvars_ty={:?} has_upvars={:?}\", upvars_ty, has_upvars);\n \n     struct PolymorphizationFolder<'tcx> {"}, {"sha": "195e840866aec802a1b1edbcabea2fb3ddb31381", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -1466,10 +1466,12 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n     ) -> Result<&'tcx Layout, LayoutError<'tcx>> {\n         use SavedLocalEligibility::*;\n         let tcx = self.tcx;\n-\n         let subst_field = |ty: Ty<'tcx>| ty.subst(tcx, substs);\n \n-        let info = tcx.generator_layout(def_id);\n+        let info = match tcx.generator_layout(def_id) {\n+            None => return Err(LayoutError::Unknown(ty)),\n+            Some(info) => info,\n+        };\n         let (ineligible_locals, assignments) = self.generator_saved_local_eligibility(&info);\n \n         // Build a prefix layout, including \"promoting\" all ineligible"}, {"sha": "1399fc76e02d693f3310d511334260013f929cbd", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -3068,8 +3068,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.trait_def(trait_def_id).has_auto_impl\n     }\n \n-    pub fn generator_layout(self, def_id: DefId) -> &'tcx GeneratorLayout<'tcx> {\n-        self.optimized_mir(def_id).generator_layout.as_ref().unwrap()\n+    /// Returns layout of a generator. Layout might be unavailable if the\n+    /// generator is tainted by errors.\n+    pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {\n+        self.optimized_mir(def_id).generator_layout.as_ref()\n     }\n \n     /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements."}, {"sha": "d43c5135d90d59e56dc681790468a0ce52198106", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -605,7 +605,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     #[inline]\n     pub fn variant_range(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> Range<VariantIdx> {\n         // FIXME requires optimized MIR\n-        let num_variants = tcx.generator_layout(def_id).variant_fields.len();\n+        let num_variants = tcx.generator_layout(def_id).unwrap().variant_fields.len();\n         VariantIdx::new(0)..VariantIdx::new(num_variants)\n     }\n \n@@ -666,7 +666,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         def_id: DefId,\n         tcx: TyCtxt<'tcx>,\n     ) -> impl Iterator<Item = impl Iterator<Item = Ty<'tcx>> + Captures<'tcx>> {\n-        let layout = tcx.generator_layout(def_id);\n+        let layout = tcx.generator_layout(def_id).unwrap();\n         layout.variant_fields.iter().map(move |variant| {\n             variant.iter().map(move |field| layout.field_tys[*field].subst(tcx, self.substs))\n         })"}, {"sha": "288eda32e414e4a10968ccc6320058e0160bca61", "filename": "compiler/rustc_mir/src/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fborrow_set.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -149,7 +149,7 @@ impl<'tcx> BorrowSet<'tcx> {\n     }\n \n     crate fn activations_at_location(&self, location: Location) -> &[BorrowIndex] {\n-        self.activation_map.get(&location).map(|activations| &activations[..]).unwrap_or(&[])\n+        self.activation_map.get(&location).map_or(&[], |activations| &activations[..])\n     }\n \n     crate fn len(&self) -> usize {"}, {"sha": "a3d09c3a8d4c1b42fcba180bf0305d4b079c9ae3", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -75,7 +75,7 @@ impl BorrowExplanation {\n                     LaterUseKind::FakeLetRead => \"stored here\",\n                     LaterUseKind::Other => \"used here\",\n                 };\n-                if !borrow_span.map(|sp| sp.overlaps(var_or_use_span)).unwrap_or(false) {\n+                if !borrow_span.map_or(false, |sp| sp.overlaps(var_or_use_span)) {\n                     err.span_label(\n                         var_or_use_span,\n                         format!(\"{}borrow later {}\", borrow_desc, message),"}, {"sha": "7e9594dd6bfd77fdb502e993edc8cc64cfd26ab5", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -370,7 +370,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     #[inline(always)]\n     pub fn cur_span(&self) -> Span {\n-        self.stack().last().map(|f| f.current_span()).unwrap_or(self.tcx.span)\n+        self.stack().last().map_or(self.tcx.span, |f| f.current_span())\n     }\n \n     #[inline(always)]"}, {"sha": "89f34cd07aa4b15c33ee5e871ed1dc9af7c2ebc7", "filename": "compiler/rustc_mir/src/interpret/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -47,8 +47,7 @@ where\n                         let index = index\n                             .try_into()\n                             .expect(\"more generic parameters than can fit into a `u32`\");\n-                        let is_used =\n-                            unused_params.contains(index).map(|unused| !unused).unwrap_or(true);\n+                        let is_used = unused_params.contains(index).map_or(true, |unused| !unused);\n                         // Only recurse when generic parameters in fns, closures and generators\n                         // are used and require substitution.\n                         match (is_used, subst.needs_subst()) {"}, {"sha": "b9fcd32250dcf3b4c05826f9a606b8156fa6dd54", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -247,8 +247,7 @@ where\n             for (mono_item, linkage) in cgu.items() {\n                 let symbol_name = mono_item.symbol_name(tcx).name;\n                 let symbol_hash_start = symbol_name.rfind('h');\n-                let symbol_hash =\n-                    symbol_hash_start.map(|i| &symbol_name[i..]).unwrap_or(\"<no hash>\");\n+                let symbol_hash = symbol_hash_start.map_or(\"<no hash>\", |i| &symbol_name[i..]);\n \n                 debug!(\n                     \" - {} [{:?}] [{}] estimated size {}\","}, {"sha": "05a88828070fb797d99a10a22f440b9f2a9c4493", "filename": "compiler/rustc_mir/src/transform/simplify_try.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -113,7 +113,7 @@ fn get_arm_identity_info<'a, 'tcx>(\n         test: impl Fn(&'a Statement<'tcx>) -> bool,\n         mut action: impl FnMut(usize, &'a Statement<'tcx>),\n     ) {\n-        while stmt_iter.peek().map(|(_, stmt)| test(stmt)).unwrap_or(false) {\n+        while stmt_iter.peek().map_or(false, |(_, stmt)| test(stmt)) {\n             let (idx, stmt) = stmt_iter.next().unwrap();\n \n             action(idx, stmt);\n@@ -635,7 +635,7 @@ impl<'a, 'tcx> SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n                     })\n                     .peekable();\n \n-                let bb_first = iter_bbs_reachable.peek().map(|(idx, _)| *idx).unwrap_or(&targets_and_values[0]);\n+                let bb_first = iter_bbs_reachable.peek().map_or(&targets_and_values[0], |(idx, _)| *idx);\n                 let mut all_successors_equivalent = StatementEquality::TrivialEqual;\n \n                 // All successor basic blocks must be equal or contain statements that are pairwise considered equal."}, {"sha": "d7c08a2d1af6b1de7fa62839263f48b238fe9d2a", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -952,7 +952,7 @@ fn is_useful<'p, 'tcx>(\n     assert!(rows.iter().all(|r| r.len() == v.len()));\n \n     // FIXME(Nadrieril): Hack to work around type normalization issues (see #72476).\n-    let ty = matrix.heads().next().map(|r| r.ty).unwrap_or(v.head().ty);\n+    let ty = matrix.heads().next().map_or(v.head().ty, |r| r.ty);\n     let pcx = PatCtxt { cx, ty, span: v.head().span, is_top_level };\n \n     debug!(\"is_useful_expand_first_col: ty={:#?}, expanding {:#?}\", pcx.ty, v.head());"}, {"sha": "35435baea7019c0b7bc9f5af5ac3b503c97133a1", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -511,7 +511,7 @@ impl<'a> Parser<'a> {\n         //\n         // `x.foo::<u32>>>(3)`\n         let parsed_angle_bracket_args =\n-            segment.args.as_ref().map(|args| args.is_angle_bracketed()).unwrap_or(false);\n+            segment.args.as_ref().map_or(false, |args| args.is_angle_bracketed());\n \n         debug!(\n             \"check_trailing_angle_brackets: parsed_angle_bracket_args={:?}\","}, {"sha": "f7b16bd991bfdbefdd63d40777d1292fd48e0849", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -347,7 +347,7 @@ impl<'a> Parser<'a> {\n         let mut pos = pos;\n         // This handles the raw string case, the raw argument is the number of #\n         // in r###\"...\"### (we need to add one because of the `r`).\n-        let raw = self.style.map(|raw| raw + 1).unwrap_or(0);\n+        let raw = self.style.map_or(0, |raw| raw + 1);\n         for skip in &self.skips {\n             if pos > *skip {\n                 pos += 1;\n@@ -814,7 +814,7 @@ fn find_skips_from_snippet(\n         skips\n     }\n \n-    let r_start = str_style.map(|r| r + 1).unwrap_or(0);\n+    let r_start = str_style.map_or(0, |r| r + 1);\n     let r_end = str_style.unwrap_or(0);\n     let s = &snippet[r_start + 1..snippet.len() - r_end - 1];\n     (find_skips(s, str_style.is_some()), true)"}, {"sha": "151e056a5b356e053bdb70d97c0633f99f5ab21b", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -953,7 +953,7 @@ impl<K: DepKind> DepGraph<K> {\n     // Returns true if the given node has been marked as green during the\n     // current compilation session. Used in various assertions\n     pub fn is_green(&self, dep_node: &DepNode<K>) -> bool {\n-        self.node_color(dep_node).map(|c| c.is_green()).unwrap_or(false)\n+        self.node_color(dep_node).map_or(false, |c| c.is_green())\n     }\n \n     // This method loads all on-disk cacheable query results into memory, so"}, {"sha": "9de35a8006123069747bd9eb821cae33fe125bee", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -1925,7 +1925,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     {\n                         // Check if we wrote `str::from_utf8` instead of `std::str::from_utf8`\n                         let item_span =\n-                            path.iter().last().map(|segment| segment.ident.span).unwrap_or(span);\n+                            path.iter().last().map_or(span, |segment| segment.ident.span);\n \n                         let mut hm = self.r.session.confused_type_with_std_module.borrow_mut();\n                         hm.insert(item_span, span);"}, {"sha": "3945afb4724a88bbf9485a266725650daa336163", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -264,7 +264,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 // The current function has a `self' parameter, but we were unable to resolve\n                 // a reference to `self`. This can only happen if the `self` identifier we\n                 // are resolving came from a different hygiene context.\n-                if fn_kind.decl().inputs.get(0).map(|p| p.is_self()).unwrap_or(false) {\n+                if fn_kind.decl().inputs.get(0).map_or(false, |p| p.is_self()) {\n                     err.span_label(*span, \"this function has a `self` parameter, but a macro invocation can only access identifiers it receives from parameters\");\n                 } else {\n                     let doesnt = if is_assoc_fn {\n@@ -1452,8 +1452,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             }\n         } else {\n             let needs_placeholder = |def_id: DefId, kind: CtorKind| {\n-                let has_no_fields =\n-                    self.r.field_names.get(&def_id).map(|f| f.is_empty()).unwrap_or(false);\n+                let has_no_fields = self.r.field_names.get(&def_id).map_or(false, |f| f.is_empty());\n                 match kind {\n                     CtorKind::Const => false,\n                     CtorKind::Fn | CtorKind::Fictive if has_no_fields => false,"}, {"sha": "c5b8f7d647ca7b0342df375c419ea129f0d57292", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -1052,7 +1052,7 @@ pub struct ResolverArenas<'a> {\n impl<'a> ResolverArenas<'a> {\n     fn alloc_module(&'a self, module: ModuleData<'a>) -> Module<'a> {\n         let module = self.modules.alloc(module);\n-        if module.def_id().map(|def_id| def_id.is_local()).unwrap_or(true) {\n+        if module.def_id().map_or(true, |def_id| def_id.is_local()) {\n             self.local_modules.borrow_mut().push(module);\n         }\n         module\n@@ -3031,7 +3031,7 @@ impl<'a> Resolver<'a> {\n         let duplicate = new_binding.res().opt_def_id() == old_binding.res().opt_def_id();\n         let has_dummy_span = new_binding.span.is_dummy() || old_binding.span.is_dummy();\n         let from_item =\n-            self.extern_prelude.get(&ident).map(|entry| entry.introduced_by_item).unwrap_or(true);\n+            self.extern_prelude.get(&ident).map_or(true, |entry| entry.introduced_by_item);\n         // Only suggest removing an import if both bindings are to the same def, if both spans\n         // aren't dummy spans. Further, if both bindings are imports, then the ident must have\n         // been introduced by a item."}, {"sha": "129123349a0281ebd27871f60b41bee4c6176770", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -670,7 +670,7 @@ impl<'tcx> SaveContext<'tcx> {\n     ) -> Option<Ref> {\n         // Returns true if the path is function type sugar, e.g., `Fn(A) -> B`.\n         fn fn_type(seg: &hir::PathSegment<'_>) -> bool {\n-            seg.args.map(|args| args.parenthesized).unwrap_or(false)\n+            seg.args.map_or(false, |args| args.parenthesized)\n         }\n \n         let res = self.get_path_res(id);"}, {"sha": "6d01854228662ba94f042dd8fb10baaa465bf9be", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -1358,7 +1358,7 @@ pub fn build_session(\n \n     let optimization_fuel_crate = sopts.debugging_opts.fuel.as_ref().map(|i| i.0.clone());\n     let optimization_fuel = Lock::new(OptimizationFuel {\n-        remaining: sopts.debugging_opts.fuel.as_ref().map(|i| i.1).unwrap_or(0),\n+        remaining: sopts.debugging_opts.fuel.as_ref().map_or(0, |i| i.1),\n         out_of_fuel: false,\n     });\n     let print_fuel_crate = sopts.debugging_opts.print_fuel.clone();"}, {"sha": "4e0ce0d344de4fd23f46f517205490a7bb8c6494", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -539,7 +539,7 @@ impl SourceMap {\n \n     pub fn is_line_before_span_empty(&self, sp: Span) -> bool {\n         match self.span_to_prev_source(sp) {\n-            Ok(s) => s.split('\\n').last().map(|l| l.trim_start().is_empty()).unwrap_or(false),\n+            Ok(s) => s.split('\\n').last().map_or(false, |l| l.trim_start().is_empty()),\n             Err(_) => false,\n         }\n     }\n@@ -568,7 +568,7 @@ impl SourceMap {\n         // asserting that the line numbers here are all indeed 1-based.\n         let hi_line = hi.line.saturating_sub(1);\n         for line_index in lo.line.saturating_sub(1)..hi_line {\n-            let line_len = lo.file.get_line(line_index).map(|s| s.chars().count()).unwrap_or(0);\n+            let line_len = lo.file.get_line(line_index).map_or(0, |s| s.chars().count());\n             lines.push(LineInfo { line_index, start_col, end_col: CharPos::from_usize(line_len) });\n             start_col = CharPos::from_usize(0);\n         }"}, {"sha": "3f22829b049fed28e8bed734e24abc72af3407b8", "filename": "compiler/rustc_span/src/source_map/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -107,7 +107,7 @@ fn t7() {\n fn span_from_selection(input: &str, selection: &str) -> Span {\n     assert_eq!(input.len(), selection.len());\n     let left_index = selection.find('~').unwrap() as u32;\n-    let right_index = selection.rfind('~').map(|x| x as u32).unwrap_or(left_index);\n+    let right_index = selection.rfind('~').map_or(left_index, |x| x as u32);\n     Span::with_root_ctxt(BytePos(left_index), BytePos(right_index + 1))\n }\n "}, {"sha": "f8fe141746fdbf13f80348e6bc750bd8757d431f", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -636,12 +636,10 @@ impl AutoTraitFinder<'tcx> {\n             let bound_predicate = predicate.bound_atom();\n             match bound_predicate.skip_binder() {\n                 ty::PredicateAtom::Trait(p, _) => {\n-                    if self.is_param_no_infer(p.trait_ref.substs)\n-                        && !only_projections\n-                        && is_new_pred\n-                    {\n-                        self.add_user_pred(computed_preds, predicate);\n-                    }\n+                    // Add this to `predicates` so that we end up calling `select`\n+                    // with it. If this predicate ends up being unimplemented,\n+                    // then `evaluate_predicates` will handle adding it the `ParamEnv`\n+                    // if possible.\n                     predicates.push_back(bound_predicate.rebind(p));\n                 }\n                 ty::PredicateAtom::Projection(p) => {"}, {"sha": "795cf2e19decccd21f6c5641e3f0b0332af2a918", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -830,7 +830,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     .collect::<Vec<ArgKind>>(),\n             ),\n             Node::Ctor(ref variant_data) => {\n-                let span = variant_data.ctor_hir_id().map(|id| hir.span(id)).unwrap_or(DUMMY_SP);\n+                let span = variant_data.ctor_hir_id().map_or(DUMMY_SP, |id| hir.span(id));\n                 let span = sm.guess_head_span(span);\n                 (span, vec![ArgKind::empty(); variant_data.fields().len()])\n             }"}, {"sha": "8e339eb26b26cd52ee7af7fdfac31bc731bc7a1c", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -1259,8 +1259,8 @@ pub(super) fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, adt: &'tcx ty\n         let layout = tcx.layout_of(param_env.and(ty));\n         // We are currently checking the type this field came from, so it must be local\n         let span = tcx.hir().span_if_local(field.did).unwrap();\n-        let zst = layout.map(|layout| layout.is_zst()).unwrap_or(false);\n-        let align1 = layout.map(|layout| layout.align.abi.bytes() == 1).unwrap_or(false);\n+        let zst = layout.map_or(false, |layout| layout.is_zst());\n+        let align1 = layout.map_or(false, |layout| layout.align.abi.bytes() == 1);\n         (span, zst, align1)\n     });\n "}, {"sha": "0036edda36da553f28f105ef3eafef3cefb553d2", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -364,13 +364,14 @@ fn check_region_bounds_on_impl_item<'tcx>(\n     if trait_params != impl_params {\n         let item_kind = assoc_item_kind_str(impl_m);\n         let def_span = tcx.sess.source_map().guess_head_span(span);\n-        let span = tcx.hir().get_generics(impl_m.def_id).map(|g| g.span).unwrap_or(def_span);\n+        let span = tcx.hir().get_generics(impl_m.def_id).map_or(def_span, |g| g.span);\n         let generics_span = if let Some(sp) = tcx.hir().span_if_local(trait_m.def_id) {\n             let def_sp = tcx.sess.source_map().guess_head_span(sp);\n-            Some(tcx.hir().get_generics(trait_m.def_id).map(|g| g.span).unwrap_or(def_sp))\n+            Some(tcx.hir().get_generics(trait_m.def_id).map_or(def_sp, |g| g.span))\n         } else {\n             None\n         };\n+\n         tcx.sess.emit_err(LifetimesOrBoundsMismatchOnTrait {\n             span,\n             item_kind,"}, {"sha": "47799c95fc0a79c5d86d13dd941c4f9cf78cef2f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -904,8 +904,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             // Return directly on cache hit. This is useful to avoid doubly reporting\n             // errors with default match binding modes. See #44614.\n-            let def =\n-                cached_result.map(|(kind, def_id)| Res::Def(kind, def_id)).unwrap_or(Res::Err);\n+            let def = cached_result.map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id));\n             return (def, Some(ty), slice::from_ref(&**item_segment));\n         }\n         let item_name = item_segment.ident;\n@@ -932,7 +931,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Write back the new resolution.\n         self.write_resolution(hir_id, result);\n         (\n-            result.map(|(kind, def_id)| Res::Def(kind, def_id)).unwrap_or(Res::Err),\n+            result.map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),\n             Some(ty),\n             slice::from_ref(&**item_segment),\n         )"}, {"sha": "4afa6689b92c7e26f13f2b2420c92e1b599b4cbd", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -816,7 +816,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         Some(match &elem.kind {\n                             // Point at the tail expression when possible.\n                             hir::ExprKind::Block(block, _) => {\n-                                block.expr.as_ref().map(|e| e.span).unwrap_or(block.span)\n+                                block.expr.as_ref().map_or(block.span, |e| e.span)\n                             }\n                             _ => elem.span,\n                         })\n@@ -888,7 +888,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Write back the new resolution.\n                 self.write_resolution(hir_id, result);\n \n-                (result.map(|(kind, def_id)| Res::Def(kind, def_id)).unwrap_or(Res::Err), ty)\n+                (result.map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)), ty)\n             }\n             QPath::LangItem(lang_item, span) => {\n                 self.resolve_lang_item_path(lang_item, span, hir_id)"}, {"sha": "e6bfa5e1497fe6cb23c813beffbd8b4eefe560fc", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -1193,7 +1193,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .any(|imp_did| {\n                             let imp = self.tcx.impl_trait_ref(imp_did).unwrap();\n                             let imp_simp = simplify_type(self.tcx, imp.self_ty(), true);\n-                            imp_simp.map(|s| s == simp_rcvr_ty).unwrap_or(false)\n+                            imp_simp.map_or(false, |s| s == simp_rcvr_ty)\n                         })\n                     {\n                         explicitly_negative.push(candidate);\n@@ -1270,11 +1270,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             match ty.kind() {\n                 ty::Adt(def, _) => def.did.is_local(),\n                 ty::Foreign(did) => did.is_local(),\n-\n-                ty::Dynamic(ref tr, ..) => {\n-                    tr.principal().map(|d| d.def_id().is_local()).unwrap_or(false)\n-                }\n-\n+                ty::Dynamic(ref tr, ..) => tr.principal().map_or(false, |d| d.def_id().is_local()),\n                 ty::Param(_) => true,\n \n                 // Everything else (primitive types, etc.) is effectively"}, {"sha": "2c720ce025b0b2a0e641ae18eb5ddbcf452a4461", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -108,7 +108,7 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                 .impl_trait_ref(tcx.hir().local_def_id(item.hir_id))\n                 .map_or(false, |trait_ref| tcx.trait_is_auto(trait_ref.def_id));\n             if let (hir::Defaultness::Default { .. }, true) = (impl_.defaultness, is_auto) {\n-                let sp = impl_.of_trait.as_ref().map(|t| t.path.span).unwrap_or(item.span);\n+                let sp = impl_.of_trait.as_ref().map_or(item.span, |t| t.path.span);\n                 let mut err =\n                     tcx.sess.struct_span_err(sp, \"impls of auto traits cannot be default\");\n                 err.span_labels(impl_.defaultness_span, \"default because of this\");"}, {"sha": "a6677328f8f8827b5864c7cb9799d27ec16b58b8", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -1656,7 +1656,7 @@ fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ImplPolarity {\n             ..\n         }) => {\n             if is_rustc_reservation {\n-                let span = span.to(of_trait.as_ref().map(|t| t.path.span).unwrap_or(*span));\n+                let span = span.to(of_trait.as_ref().map_or(*span, |t| t.path.span));\n                 tcx.sess.span_err(span, \"reservation impls can't be negative\");\n             }\n             ty::ImplPolarity::Negative"}, {"sha": "fef52a3f87c95189877c09cc20a62dddb1f0d8c9", "filename": "compiler/rustc_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -654,9 +654,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         // Then we see that to get the same result, we must start with\n         // `deref { deref { place_foo }}` instead of `place_foo` since the pattern is now `Some(x,)`\n         // and not `&&Some(x,)`, even though its assigned type is that of `&&Some(x,)`.\n-        for _ in\n-            0..self.typeck_results.pat_adjustments().get(pat.hir_id).map(|v| v.len()).unwrap_or(0)\n-        {\n+        for _ in 0..self.typeck_results.pat_adjustments().get(pat.hir_id).map_or(0, |v| v.len()) {\n             debug!(\"cat_pattern: applying adjustment to place_with_id={:?}\", place_with_id);\n             place_with_id = self.cat_deref(pat, place_with_id)?;\n         }"}, {"sha": "02008e180b34d3dc65b8362ce23386a8991c0215", "filename": "compiler/rustc_typeck/src/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -99,7 +99,7 @@ impl<'cx, 'tcx> ItemLikeVisitor<'tcx> for InferVisitor<'cx, 'tcx> {\n         // we walk the crates again and re-calculate predicates for all\n         // items.\n         let item_predicates_len: usize =\n-            self.global_inferred_outlives.get(&item_did.to_def_id()).map(|p| p.len()).unwrap_or(0);\n+            self.global_inferred_outlives.get(&item_did.to_def_id()).map_or(0, |p| p.len());\n         if item_required_predicates.len() > item_predicates_len {\n             *self.predicates_added = true;\n             self.global_inferred_outlives.insert(item_did.to_def_id(), item_required_predicates);"}, {"sha": "5b61e8911a59a40fa810403ebf22fb59799cced1", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -1292,7 +1292,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn front(&self) -> Option<&T> {\n-        if !self.is_empty() { Some(&self[0]) } else { None }\n+        self.get(0)\n     }\n \n     /// Provides a mutable reference to the front element, or `None` if the\n@@ -1316,7 +1316,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn front_mut(&mut self) -> Option<&mut T> {\n-        if !self.is_empty() { Some(&mut self[0]) } else { None }\n+        self.get_mut(0)\n     }\n \n     /// Provides a reference to the back element, or `None` if the `VecDeque` is\n@@ -1336,7 +1336,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn back(&self) -> Option<&T> {\n-        if !self.is_empty() { Some(&self[self.len() - 1]) } else { None }\n+        self.get(self.len().wrapping_sub(1))\n     }\n \n     /// Provides a mutable reference to the back element, or `None` if the\n@@ -1360,8 +1360,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn back_mut(&mut self) -> Option<&mut T> {\n-        let len = self.len();\n-        if !self.is_empty() { Some(&mut self[len - 1]) } else { None }\n+        self.get_mut(self.len().wrapping_sub(1))\n     }\n \n     /// Removes the first element and returns it, or `None` if the `VecDeque` is"}, {"sha": "5ec79c586dcacb21d5613750341b17009dc03292", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -1837,19 +1837,6 @@ impl Clean<VariantStruct> for rustc_hir::VariantData<'_> {\n     }\n }\n \n-impl Clean<Item> for doctree::Variant<'_> {\n-    fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        let what_rustc_thinks = Item::from_hir_id_and_parts(\n-            self.id,\n-            Some(self.name),\n-            VariantItem(Variant { kind: self.def.clean(cx) }),\n-            cx,\n-        );\n-        // don't show `pub` for variants, which are always public\n-        Item { visibility: Inherited, ..what_rustc_thinks }\n-    }\n-}\n-\n impl Clean<Item> for ty::VariantDef {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let kind = match self.ctor_kind {"}, {"sha": "4710c91f929bdb10d06eadddd10207bbade9d141", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -48,12 +48,6 @@ crate enum StructType {\n     Unit,\n }\n \n-crate struct Variant<'hir> {\n-    crate name: Symbol,\n-    crate id: hir::HirId,\n-    crate def: &'hir hir::VariantData<'hir>,\n-}\n-\n #[derive(Debug)]\n crate struct Import<'hir> {\n     crate name: Symbol,"}, {"sha": "cbf420bada994cfd338634428bc0afb110cfeda5", "filename": "src/test/codegen/vecdeque_no_panic.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/src%2Ftest%2Fcodegen%2Fvecdeque_no_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/src%2Ftest%2Fcodegen%2Fvecdeque_no_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvecdeque_no_panic.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -0,0 +1,19 @@\n+// This test checks that `VecDeque::front[_mut]()` and `VecDeque::back[_mut]()` can't panic.\n+\n+// compile-flags: -O\n+// ignore-debug: the debug assertions get in the way\n+\n+#![crate_type = \"lib\"]\n+\n+use std::collections::VecDeque;\n+\n+// CHECK-LABEL: @dont_panic\n+#[no_mangle]\n+pub fn dont_panic(v: &mut VecDeque<usize>) {\n+    // CHECK-NOT: expect\n+    // CHECK-NOT: panic\n+    v.front();\n+    v.front_mut();\n+    v.back();\n+    v.back_mut();\n+}"}, {"sha": "585a0864bb25d5fe529dfbad84a3af930780827f", "filename": "src/test/rustdoc/issue-80233-normalize-auto-trait.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/src%2Ftest%2Frustdoc%2Fissue-80233-normalize-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/src%2Ftest%2Frustdoc%2Fissue-80233-normalize-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-80233-normalize-auto-trait.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -0,0 +1,37 @@\n+// Regression test for issue #80233\n+// Tests that we don't ICE when processing auto traits\n+\n+#![crate_type = \"lib\"]\n+pub trait Trait1 {}\n+\n+pub trait Trait2 {\n+    type Type2;\n+}\n+\n+pub trait Trait3 {\n+    type Type3;\n+}\n+\n+impl Trait2 for Struct1 {\n+    type Type2 = Struct1;\n+}\n+\n+impl<I: Trait2> Trait2 for Vec<I> {\n+    type Type2 = Vec<I::Type2>;\n+}\n+\n+impl<T: Trait1> Trait3 for T {\n+    type Type3 = Struct1;\n+}\n+\n+impl<T: Trait3> Trait3 for Vec<T> {\n+    type Type3 = Vec<T::Type3>;\n+}\n+\n+pub struct Struct1 {}\n+\n+// @has issue_80233_normalize_auto_trait/struct.Question.html\n+// @has - '//code' 'impl<T> Send for Question<T>'\n+pub struct Question<T: Trait1> {\n+    pub ins: <<Vec<T> as Trait3>::Type3 as Trait2>::Type2,\n+}"}, {"sha": "059867277ad436d75c3753991be44e9ba7ecb71c", "filename": "src/test/ui/generator/layout-error.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -0,0 +1,28 @@\n+// Verifies that computing a layout of a generator tainted by type errors\n+// doesn't ICE. Regression test for #80998.\n+//\n+// edition:2018\n+\n+#![feature(type_alias_impl_trait)]\n+use std::future::Future;\n+\n+pub struct Task<F: Future>(F);\n+impl<F: Future> Task<F> {\n+    fn new() -> Self {\n+        todo!()\n+    }\n+    fn spawn(&self, _: impl FnOnce() -> F) {\n+        todo!()\n+    }\n+}\n+\n+fn main() {\n+    async fn cb() {\n+        let a = Foo; //~ ERROR cannot find value `Foo` in this scope\n+    }\n+\n+    type F = impl Future;\n+    // Check that statics are inhabited computes they layout.\n+    static POOL: Task<F> = Task::new();\n+    Task::spawn(&POOL, || cb());\n+}"}, {"sha": "b1a258f4f2ca7d10214377632981648d158528e1", "filename": "src/test/ui/generator/layout-error.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e208f6a3afb42528878b0f3464e337c4bf3bbc8/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.stderr?ref=4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find value `Foo` in this scope\n+  --> $DIR/layout-error.rs:21:17\n+   |\n+LL |         let a = Foo;\n+   |                 ^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}