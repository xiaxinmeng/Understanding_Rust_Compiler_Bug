{"sha": "ece38b3c7e16be1bedb45e552a127fe75bdb726a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZTM4YjNjN2UxNmJlMWJlZGI0NWU1NTJhMTI3ZmU3NWJkYjcyNmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-01T21:03:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-06T05:07:40Z"}, "message": "core::rt: Add `MegaPipe`, an unbounded, multiple producer/consumer, lock-free queue", "tree": {"sha": "1c2f1a333ba70446e93ccc7fef2c2e9879a635fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c2f1a333ba70446e93ccc7fef2c2e9879a635fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ece38b3c7e16be1bedb45e552a127fe75bdb726a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ece38b3c7e16be1bedb45e552a127fe75bdb726a", "html_url": "https://github.com/rust-lang/rust/commit/ece38b3c7e16be1bedb45e552a127fe75bdb726a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ece38b3c7e16be1bedb45e552a127fe75bdb726a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d257fd9a6c3ce9bd02f9e30d15d91d39a5aee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/51d257fd9a6c3ce9bd02f9e30d15d91d39a5aee9", "html_url": "https://github.com/rust-lang/rust/commit/51d257fd9a6c3ce9bd02f9e30d15d91d39a5aee9"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "ef2091f789c08108bf7820f75fc1f416feb4d418", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/ece38b3c7e16be1bedb45e552a127fe75bdb726a/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece38b3c7e16be1bedb45e552a127fe75bdb726a/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=ece38b3c7e16be1bedb45e552a127fe75bdb726a", "patch": "@@ -471,6 +471,44 @@ impl<T> Clone for SharedPort<T> {\n     }\n }\n \n+// XXX: Need better name\n+type MegaPipe<T> = (SharedPort<T>, SharedChan<T>);\n+\n+pub fn megapipe<T: Owned>() -> MegaPipe<T> {\n+    let (port, chan) = stream();\n+    (SharedPort::new(port), SharedChan::new(chan))\n+}\n+\n+impl<T: Owned> GenericChan<T> for MegaPipe<T> {\n+    fn send(&self, val: T) {\n+        match *self {\n+            (_, ref c) => c.send(val)\n+        }\n+    }\n+}\n+\n+impl<T: Owned> GenericSmartChan<T> for MegaPipe<T> {\n+    fn try_send(&self, val: T) -> bool {\n+        match *self {\n+            (_, ref c) => c.try_send(val)\n+        }\n+    }\n+}\n+\n+impl<T: Owned> GenericPort<T> for MegaPipe<T> {\n+    fn recv(&self) -> T {\n+        match *self {\n+            (ref p, _) => p.recv()\n+        }\n+    }\n+\n+    fn try_recv(&self) -> Option<T> {\n+        match *self {\n+            (ref p, _) => p.try_recv()\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::*;\n@@ -834,5 +872,38 @@ mod test {\n             assert!(recvd == send_total);\n         }\n     }\n+\n+    #[test]\n+    fn megapipe_stress() {\n+        use rand;\n+        use rand::RngUtil;\n+\n+        do run_in_mt_newsched_task {\n+            let (end_port, end_chan) = stream::<()>();\n+            let end_chan = SharedChan::new(end_chan);\n+            let pipe = megapipe();\n+            let total = stress_factor() + 10;\n+            let mut rng = rand::rng();\n+            for total.times {\n+                let msgs = rng.gen_uint_range(0, 10);\n+                let pipe_clone = pipe.clone();\n+                let end_chan_clone = end_chan.clone();\n+                do spawntask_random {\n+                    for msgs.times {\n+                        pipe_clone.send(());\n+                    }\n+                    for msgs.times {\n+                        pipe_clone.recv();\n+                    }\n+                }\n+\n+                end_chan_clone.send(());\n+            }\n+\n+            for total.times {\n+                end_port.recv();\n+            }\n+        }\n+    }\n }\n "}]}