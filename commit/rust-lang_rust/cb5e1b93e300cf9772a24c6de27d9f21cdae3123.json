{"sha": "cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNWUxYjkzZTMwMGNmOTc3MmEyNGM2ZGUyN2Q5ZjIxY2RhZTMxMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-19T00:22:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-19T00:22:25Z"}, "message": "Auto merge of #55004 - oli-obk:sized_static, r=cramertj\n\nCheck the type of statics and constants for `Sized`ness\n\nfixes #54410", "tree": {"sha": "530ad9bc10b8a19feb6b52c9f04dbcc072ec5ecc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/530ad9bc10b8a19feb6b52c9f04dbcc072ec5ecc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "html_url": "https://github.com/rust-lang/rust/commit/cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45088b11f55e57a65fa1ebcf6e3b6014152eb516", "url": "https://api.github.com/repos/rust-lang/rust/commits/45088b11f55e57a65fa1ebcf6e3b6014152eb516", "html_url": "https://github.com/rust-lang/rust/commit/45088b11f55e57a65fa1ebcf6e3b6014152eb516"}, {"sha": "10a01c1bcd18c33a817751858ebcc022437917ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/10a01c1bcd18c33a817751858ebcc022437917ef", "html_url": "https://github.com/rust-lang/rust/commit/10a01c1bcd18c33a817751858ebcc022437917ef"}], "stats": {"total": 168, "additions": 91, "deletions": 77}, "files": [{"sha": "016ea5cba66093a7549ea473e5754dd9297d2c5a", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "patch": "@@ -118,12 +118,17 @@ pub fn check_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: Def\n         hir::ItemKind::Fn(..) => {\n             check_item_fn(tcx, item);\n         }\n-        hir::ItemKind::Static(..) => {\n-            check_item_type(tcx, item);\n+        hir::ItemKind::Static(ref ty, ..) => {\n+            check_item_type(tcx, item.id, ty.span);\n         }\n-        hir::ItemKind::Const(..) => {\n-            check_item_type(tcx, item);\n+        hir::ItemKind::Const(ref ty, ..) => {\n+            check_item_type(tcx, item.id, ty.span);\n         }\n+        hir::ItemKind::ForeignMod(ref module) => for it in module.items.iter() {\n+            if let hir::ForeignItemKind::Static(ref ty, ..) = it.node {\n+                check_item_type(tcx, it.id, ty.span);\n+            }\n+        },\n         hir::ItemKind::Struct(ref struct_def, ref ast_generics) => {\n             check_type_defn(tcx, item, false, |fcx| {\n                 vec![fcx.non_enum_variant(struct_def)]\n@@ -335,14 +340,23 @@ fn check_item_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item: &hir::Item) {\n     })\n }\n \n-fn check_item_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item: &hir::Item) {\n-    debug!(\"check_item_type: {:?}\", item);\n-\n-    for_item(tcx, item).with_fcx(|fcx, _this| {\n-        let ty = fcx.tcx.type_of(fcx.tcx.hir.local_def_id(item.id));\n-        let item_ty = fcx.normalize_associated_types_in(item.span, &ty);\n-\n-        fcx.register_wf_obligation(item_ty, item.span, ObligationCauseCode::MiscObligation);\n+fn check_item_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId, ty_span: Span) {\n+    debug!(\"check_item_type: {:?}\", item_id);\n+\n+    for_id(tcx, item_id, ty_span).with_fcx(|fcx, _this| {\n+        let ty = fcx.tcx.type_of(fcx.tcx.hir.local_def_id(item_id));\n+        let item_ty = fcx.normalize_associated_types_in(ty_span, &ty);\n+\n+        fcx.register_wf_obligation(item_ty, ty_span, ObligationCauseCode::MiscObligation);\n+        fcx.register_bound(\n+            item_ty,\n+            fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem),\n+            traits::ObligationCause::new(\n+                ty_span,\n+                fcx.body_id,\n+                traits::MiscObligation,\n+            ),\n+        );\n \n         vec![] // no implied bounds in a const etc\n     });"}, {"sha": "19ec9a4aa1745745edcb36ce6c38fb0e559f802d", "filename": "src/test/ui/consts/const-array-oob.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr?ref=cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "patch": "@@ -7,10 +7,10 @@ LL | const BLUB: [u32; FOO[4]] = [5, 6];\n    = note: #[deny(const_err)] on by default\n \n error[E0080]: could not evaluate constant expression\n-  --> $DIR/const-array-oob.rs:18:1\n+  --> $DIR/const-array-oob.rs:18:13\n    |\n LL | const BLUB: [u32; FOO[4]] = [5, 6];\n-   | ^^^^^^^^^^^^^^^^^^------^^^^^^^^^^^\n+   |             ^^^^^^------^\n    |                   |\n    |                   index out of bounds: the len is 3 but the index is 4\n "}, {"sha": "e9fc8ec0c374e2f8be45a42954b9a2ca5c4421c3", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.rs?ref=cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "patch": "@@ -20,9 +20,9 @@ use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n const A_I8_T\n-    //~^ ERROR could not evaluate constant expression\n     : [u32; (i8::MAX as i8 + 1i8) as usize]\n     //~^ ERROR attempt to add with overflow\n+    //~| ERROR could not evaluate constant expression\n     = [0; (i8::MAX as usize) + 1];\n \n fn main() {"}, {"sha": "b12aa032b6070e7eac16f3721a3e7f8822b5c99b", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr?ref=cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "patch": "@@ -1,21 +1,18 @@\n error: attempt to add with overflow\n-  --> $DIR/const-eval-overflow-4.rs:24:13\n+  --> $DIR/const-eval-overflow-4.rs:23:13\n    |\n LL |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n    |             ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: #[deny(const_err)] on by default\n \n error[E0080]: could not evaluate constant expression\n-  --> $DIR/const-eval-overflow-4.rs:22:1\n+  --> $DIR/const-eval-overflow-4.rs:23:7\n    |\n-LL | / const A_I8_T\n-LL | |     //~^ ERROR could not evaluate constant expression\n-LL | |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n-   | |             --------------------- attempt to add with overflow\n-LL | |     //~^ ERROR attempt to add with overflow\n-LL | |     = [0; (i8::MAX as usize) + 1];\n-   | |__________________________________^\n+LL |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n+   |       ^^^^^^---------------------^^^^^^^^^^\n+   |             |\n+   |             attempt to add with overflow\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8671e609ac8e52900766441ede11440a259b5505", "filename": "src/test/ui/consts/const-unsized.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr?ref=cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "patch": "@@ -1,42 +1,38 @@\n error[E0277]: the size for values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n-  --> $DIR/const-unsized.rs:13:29\n+  --> $DIR/const-unsized.rs:13:16\n    |\n LL | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: constant expressions must have a statically known size\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/const-unsized.rs:16:24\n+  --> $DIR/const-unsized.rs:16:18\n    |\n LL | const CONST_FOO: str = *\"foo\";\n-   |                        ^^^^^^ doesn't have a size known at compile-time\n+   |                  ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: constant expressions must have a statically known size\n \n error[E0277]: the size for values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n-  --> $DIR/const-unsized.rs:19:31\n+  --> $DIR/const-unsized.rs:19:18\n    |\n LL | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                  ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: constant expressions must have a statically known size\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/const-unsized.rs:22:26\n+  --> $DIR/const-unsized.rs:22:20\n    |\n LL | static STATIC_BAR: str = *\"bar\";\n-   |                          ^^^^^^ doesn't have a size known at compile-time\n+   |                    ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: constant expressions must have a statically known size\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c77452d9abe20ad0c5c71d47003621287c4d3ebf", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr?ref=cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: could not evaluate constant expression\n-  --> $DIR/infinite-recursion-const-fn.rs:15:1\n+  --> $DIR/infinite-recursion-const-fn.rs:15:12\n    |\n LL | const fn a() -> usize { b() }\n    |                         ---\n@@ -59,7 +59,7 @@ LL | const fn b() -> usize { a() }\n    |                         inside call to `a`\n    |                         inside call to `a`\n LL | const ARR: [i32; a()] = [5; 6]; //~ ERROR could not evaluate constant expression\n-   | ^^^^^^^^^^^^^^^^^---^^^^^^^^^^^\n+   |            ^^^^^^---^\n    |                  |\n    |                  inside call to `a`\n "}, {"sha": "7c44319db0db22ad3e17ed36e3ec522ac4ccf960", "filename": "src/test/ui/issues/issue-24446.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fissues%2Fissue-24446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fissues%2Fissue-24446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24446.rs?ref=cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "patch": "@@ -10,8 +10,7 @@\n \n fn main() {\n     static foo: Fn() -> u32 = || -> u32 {\n-        //~^ ERROR mismatched types\n-        //~| ERROR the size for values of type\n+        //~^ ERROR the size for values of type\n         0\n     };\n }"}, {"sha": "d4921443cad76bb508835f376590a97ace7b13d7", "filename": "src/test/ui/issues/issue-24446.stderr", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr?ref=cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "patch": "@@ -1,33 +1,12 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-24446.rs:12:31\n-   |\n-LL |       static foo: Fn() -> u32 = || -> u32 {\n-   |  _______________________________^\n-LL | |         //~^ ERROR mismatched types\n-LL | |         //~| ERROR the size for values of type\n-LL | |         0\n-LL | |     };\n-   | |_____^ expected trait std::ops::Fn, found closure\n-   |\n-   = note: expected type `(dyn std::ops::Fn() -> u32 + 'static)`\n-              found type `[closure@$DIR/issue-24446.rs:12:31: 16:6]`\n-\n error[E0277]: the size for values of type `(dyn std::ops::Fn() -> u32 + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-24446.rs:12:31\n+  --> $DIR/issue-24446.rs:12:17\n    |\n-LL |       static foo: Fn() -> u32 = || -> u32 {\n-   |  _______________________________^\n-LL | |         //~^ ERROR mismatched types\n-LL | |         //~| ERROR the size for values of type\n-LL | |         0\n-LL | |     };\n-   | |_____^ doesn't have a size known at compile-time\n+LL |     static foo: Fn() -> u32 = || -> u32 {\n+   |                 ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() -> u32 + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: constant expressions must have a statically known size\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0277, E0308.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "e3e8ca985b97007afa48f9678864e5ef933f3aba", "filename": "src/test/ui/issues/issue-54410.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fissues%2Fissue-54410.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fissues%2Fissue-54410.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54410.rs?ref=cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "patch": "@@ -0,0 +1,8 @@\n+extern \"C\" {\n+    pub static mut symbol: [i8];\n+    //~^ ERROR the size for values of type `[i8]` cannot be known at compilation time\n+}\n+\n+fn main() {\n+    println!(\"{:p}\", unsafe { &symbol });\n+}"}, {"sha": "ae6888f067e688ba0b3e20b3fa2c615af307b6c2", "filename": "src/test/ui/issues/issue-54410.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fissues%2Fissue-54410.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fissues%2Fissue-54410.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54410.stderr?ref=cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the size for values of type `[i8]` cannot be known at compilation time\n+  --> $DIR/issue-54410.rs:2:28\n+   |\n+LL |     pub static mut symbol: [i8];\n+   |                            ^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[i8]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "0ee0637232ca4d444237c8b054ac4623a3ba2af9", "filename": "src/test/ui/static_sized_requirement.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fstatic_sized_requirement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fstatic_sized_requirement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic_sized_requirement.rs?ref=cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "patch": "@@ -0,0 +1,12 @@\n+// compile-pass\n+\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+#![crate_type = \"lib\"]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+extern {\n+    pub static A: u32;\n+}"}, {"sha": "5145ba1881d5bc26e45f68e02c5af5ea9aec86e3", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-static.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-static.stderr?ref=cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "patch": "@@ -1,11 +1,8 @@\n error[E0277]: the trait bound `usize: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-static.rs:19:1\n+  --> $DIR/trait-bounds-on-structs-and-enums-static.rs:19:11\n    |\n-LL | / static X: Foo<usize> = Foo {\n-LL | | //~^ ERROR E0277\n-LL | |     x: 1,\n-LL | | };\n-   | |__^ the trait `Trait` is not implemented for `usize`\n+LL | static X: Foo<usize> = Foo {\n+   |           ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n    |\n note: required by `Foo`\n   --> $DIR/trait-bounds-on-structs-and-enums-static.rs:15:1"}, {"sha": "78e831ef880fc293e8cd74489bda87251a84bbf6", "filename": "src/test/ui/wf/wf-const-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr?ref=cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `NotCopy: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-const-type.rs:20:1\n+  --> $DIR/wf-const-type.rs:20:12\n    |\n LL | const FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `NotCopy`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `NotCopy`\n    |\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `std::option::Option<NotCopy>`\n note: required by `IsCopy`"}, {"sha": "c9656d8654655adeaeeb772cd09f81dbcbab946f", "filename": "src/test/ui/wf/wf-static-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb5e1b93e300cf9772a24c6de27d9f21cdae3123/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr?ref=cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `NotCopy: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-static-type.rs:20:1\n+  --> $DIR/wf-static-type.rs:20:13\n    |\n LL | static FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `NotCopy`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `NotCopy`\n    |\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `std::option::Option<NotCopy>`\n note: required by `IsCopy`"}, {"sha": "09ce4b519535c77d17b818b6dc0b72c6668642c1", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=cb5e1b93e300cf9772a24c6de27d9f21cdae3123", "patch": "@@ -1 +1 @@\n-Subproject commit 5dbac98885199bbd7c0f189d7405b5523434d1e3\n+Subproject commit 09ce4b519535c77d17b818b6dc0b72c6668642c1"}]}