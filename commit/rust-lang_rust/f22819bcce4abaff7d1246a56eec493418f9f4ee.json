{"sha": "f22819bcce4abaff7d1246a56eec493418f9f4ee", "node_id": "C_kwDOAAsO6NoAKGYyMjgxOWJjY2U0YWJhZmY3ZDEyNDZhNTZlZWM0OTM0MThmOWY0ZWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-12T16:32:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-12T16:32:24Z"}, "message": "Auto merge of #100456 - Dylan-DPC:rollup-fn17z9f, r=Dylan-DPC\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #100022 (Optimize thread ID generation)\n - #100030 (cleanup code w/ pointers in std a little)\n - #100229 (add -Zextra-const-ub-checks to enable more UB checking in const-eval)\n - #100247 (Generalize trait object generic param check to aliases.)\n - #100255 (Adding more verbose documentation for `std::fmt::Write`)\n - #100366 (errors: don't fail on broken primary translations)\n - #100396 (Suggest const and static for global variable)\n - #100409 (rustdoc: don't generate DOM element for operator)\n - #100443 (Add two let else regression tests)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2fc9ac8d3bfe8d748c4b0971b05b472efca99120", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fc9ac8d3bfe8d748c4b0971b05b472efca99120"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f22819bcce4abaff7d1246a56eec493418f9f4ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f22819bcce4abaff7d1246a56eec493418f9f4ee", "html_url": "https://github.com/rust-lang/rust/commit/f22819bcce4abaff7d1246a56eec493418f9f4ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f22819bcce4abaff7d1246a56eec493418f9f4ee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0068b8bf4b150b506ef0871be4e8652fd4308f84", "url": "https://api.github.com/repos/rust-lang/rust/commits/0068b8bf4b150b506ef0871be4e8652fd4308f84", "html_url": "https://github.com/rust-lang/rust/commit/0068b8bf4b150b506ef0871be4e8652fd4308f84"}, {"sha": "3bc30bb012889eeeb08d5241dfe64fc47ed33537", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc30bb012889eeeb08d5241dfe64fc47ed33537", "html_url": "https://github.com/rust-lang/rust/commit/3bc30bb012889eeeb08d5241dfe64fc47ed33537"}], "stats": {"total": 842, "additions": 584, "deletions": 258}, "files": [{"sha": "684877cae76776f025de733a7e9afea14017cdd1", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -236,6 +236,16 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     const PANIC_ON_ALLOC_FAIL: bool = false; // will be raised as a proper error\n \n+    #[inline(always)]\n+    fn enforce_alignment(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+        ecx.tcx.sess.opts.unstable_opts.extra_const_ub_checks\n+    }\n+\n+    #[inline(always)]\n+    fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+        ecx.tcx.sess.opts.unstable_opts.extra_const_ub_checks\n+    }\n+\n     fn load_mir(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         instance: ty::InstanceDef<'tcx>,"}, {"sha": "9b9919fcc2a3da2f695c836ef1c9b74307898374", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -436,24 +436,12 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     type AllocExtra = ();\n     type FrameExtra = ();\n \n-    #[inline(always)]\n-    fn enforce_alignment(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n-        // We do not check for alignment to avoid having to carry an `Align`\n-        // in `ConstValue::ByRef`.\n-        false\n-    }\n-\n     #[inline(always)]\n     fn force_int_for_alignment_check(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n         // We do not support `force_int`.\n         false\n     }\n \n-    #[inline(always)]\n-    fn enforce_validity(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n-        false // for now, we don't enforce validity\n-    }\n-\n     #[inline(always)]\n     fn enforce_number_init(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n         true"}, {"sha": "f1b1855c3ec743193f4d75d9b2803072936afce2", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -1005,6 +1005,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// It will error if the bits at the destination do not match the ones described by the layout.\n     #[inline(always)]\n     pub fn validate_operand(&self, op: &OpTy<'tcx, M::Provenance>) -> InterpResult<'tcx> {\n+        // Note that we *could* actually be in CTFE here with `-Zextra-const-ub-checks`, but it's\n+        // still correct to not use `ctfe_mode`: that mode is for validation of the final constant\n+        // value, it rules out things like `UnsafeCell` in awkward places. It also can make checking\n+        // recurse through references which, for now, we don't want here, either.\n         self.validate_operand_internal(op, vec![], None, None)\n     }\n }"}, {"sha": "753e2f07c042eb81cf74b4b961d1fbf88cb44645", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 49, "deletions": 31, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -273,40 +273,58 @@ pub trait Emitter {\n             DiagnosticMessage::FluentIdentifier(identifier, attr) => (identifier, attr),\n         };\n \n-        let bundle = match self.fluent_bundle() {\n-            Some(bundle) if bundle.has_message(&identifier) => bundle,\n-            _ => self.fallback_fluent_bundle(),\n-        };\n+        let translate_with_bundle = |bundle: &'a FluentBundle| -> Option<(Cow<'_, str>, Vec<_>)> {\n+            let message = bundle.get_message(&identifier)?;\n+            let value = match attr {\n+                Some(attr) => message.get_attribute(attr)?.value(),\n+                None => message.value()?,\n+            };\n+            debug!(?message, ?value);\n \n-        let message = bundle.get_message(&identifier).expect(\"missing diagnostic in fluent bundle\");\n-        let value = match attr {\n-            Some(attr) => {\n-                if let Some(attr) = message.get_attribute(attr) {\n-                    attr.value()\n-                } else {\n-                    panic!(\"missing attribute `{attr}` in fluent message `{identifier}`\")\n-                }\n-            }\n-            None => {\n-                if let Some(value) = message.value() {\n-                    value\n-                } else {\n-                    panic!(\"missing value in fluent message `{identifier}`\")\n-                }\n-            }\n+            let mut errs = vec![];\n+            let translated = bundle.format_pattern(value, Some(&args), &mut errs);\n+            debug!(?translated, ?errs);\n+            Some((translated, errs))\n         };\n \n-        let mut err = vec![];\n-        let translated = bundle.format_pattern(value, Some(&args), &mut err);\n-        trace!(?translated, ?err);\n-        debug_assert!(\n-            err.is_empty(),\n-            \"identifier: {:?}, args: {:?}, errors: {:?}\",\n-            identifier,\n-            args,\n-            err\n-        );\n-        translated\n+        self.fluent_bundle()\n+            .and_then(|bundle| translate_with_bundle(bundle))\n+            // If `translate_with_bundle` returns `None` with the primary bundle, this is likely\n+            // just that the primary bundle doesn't contain the message being translated, so\n+            // proceed to the fallback bundle.\n+            //\n+            // However, when errors are produced from translation, then that means the translation\n+            // is broken (e.g. `{$foo}` exists in a translation but `foo` isn't provided).\n+            //\n+            // In debug builds, assert so that compiler devs can spot the broken translation and\n+            // fix it..\n+            .inspect(|(_, errs)| {\n+                debug_assert!(\n+                    errs.is_empty(),\n+                    \"identifier: {:?}, attr: {:?}, args: {:?}, errors: {:?}\",\n+                    identifier,\n+                    attr,\n+                    args,\n+                    errs\n+                );\n+            })\n+            // ..otherwise, for end users, an error about this wouldn't be useful or actionable, so\n+            // just hide it and try with the fallback bundle.\n+            .filter(|(_, errs)| errs.is_empty())\n+            .or_else(|| translate_with_bundle(self.fallback_fluent_bundle()))\n+            .map(|(translated, errs)| {\n+                // Always bail out for errors with the fallback bundle.\n+                assert!(\n+                    errs.is_empty(),\n+                    \"identifier: {:?}, attr: {:?}, args: {:?}, errors: {:?}\",\n+                    identifier,\n+                    attr,\n+                    args,\n+                    errs\n+                );\n+                translated\n+            })\n+            .expect(\"failed to find message in primary or fallback fluent bundles\")\n     }\n \n     /// Formats the substitutions of the primary_span"}, {"sha": "f83e972efd56ec23e783ac898af6cfadf72fc91f", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -6,9 +6,10 @@\n #![feature(drain_filter)]\n #![feature(if_let_guard)]\n #![cfg_attr(bootstrap, feature(let_chains))]\n+#![feature(adt_const_params)]\n #![feature(let_else)]\n #![feature(never_type)]\n-#![feature(adt_const_params)]\n+#![feature(result_option_inspect)]\n #![feature(rustc_attrs)]\n #![allow(incomplete_features)]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "1c087b93b4965de083b51cdbb2f7398e47a1f129", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -183,6 +183,18 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n \n     type MemoryKind = !;\n \n+    #[inline(always)]\n+    fn enforce_alignment(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+        // We do not check for alignment to avoid having to carry an `Align`\n+        // in `ConstValue::ByRef`.\n+        false\n+    }\n+\n+    #[inline(always)]\n+    fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+        false // for now, we don't enforce validity\n+    }\n+\n     fn load_mir(\n         _ecx: &InterpCx<'mir, 'tcx, Self>,\n         _instance: ty::InstanceDef<'tcx>,"}, {"sha": "197c038489835cb2c76f3985147e73ef201dfe44", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -68,7 +68,12 @@ impl<'a> Parser<'a> {\n             if !self.maybe_consume_incorrect_semicolon(&items) {\n                 let msg = &format!(\"expected item, found {token_str}\");\n                 let mut err = self.struct_span_err(self.token.span, msg);\n-                err.span_label(self.token.span, \"expected item\");\n+                let label = if self.is_kw_followed_by_ident(kw::Let) {\n+                    \"consider using `const` or `static` instead of `let` for global variables\"\n+                } else {\n+                    \"expected item\"\n+                };\n+                err.span_label(self.token.span, label);\n                 return Err(err);\n             }\n         }"}, {"sha": "0032dd7d113f8ea1bd448c9bf9d74772b6d7d909", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -1310,6 +1310,8 @@ options! {\n         \"emit the bc module with thin LTO info (default: yes)\"),\n     export_executable_symbols: bool = (false, parse_bool, [TRACKED],\n         \"export symbols from executables, as if they were dynamic libraries\"),\n+    extra_const_ub_checks: bool = (false, parse_bool, [TRACKED],\n+        \"turns on more checks to detect const UB, which can be slow (default: no)\"),\n     #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::fewer_names` instead of this field\"))]\n     fewer_names: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) \\"}, {"sha": "1e6cb53f3eeaed8247baf6006e4df396442714ce", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 77, "deletions": 79, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -44,7 +44,7 @@ use rustc_trait_selection::traits::error_reporting::{\n };\n use rustc_trait_selection::traits::wf::object_region_bounds;\n \n-use smallvec::SmallVec;\n+use smallvec::{smallvec, SmallVec};\n use std::collections::BTreeSet;\n use std::slice;\n \n@@ -368,36 +368,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             return (tcx.intern_substs(&[]), arg_count);\n         }\n \n-        let is_object = self_ty.map_or(false, |ty| ty == self.tcx().types.trait_object_dummy_self);\n-\n         struct SubstsForAstPathCtxt<'a, 'tcx> {\n             astconv: &'a (dyn AstConv<'tcx> + 'a),\n             def_id: DefId,\n             generic_args: &'a GenericArgs<'a>,\n             span: Span,\n-            missing_type_params: Vec<Symbol>,\n             inferred_params: Vec<Span>,\n             infer_args: bool,\n-            is_object: bool,\n-        }\n-\n-        impl<'tcx, 'a> SubstsForAstPathCtxt<'tcx, 'a> {\n-            fn default_needs_object_self(&mut self, param: &ty::GenericParamDef) -> bool {\n-                let tcx = self.astconv.tcx();\n-                if let GenericParamDefKind::Type { has_default, .. } = param.kind {\n-                    if self.is_object && has_default {\n-                        let default_ty = tcx.at(self.span).type_of(param.def_id);\n-                        let self_param = tcx.types.self_param;\n-                        if default_ty.walk().any(|arg| arg == self_param.into()) {\n-                            // There is no suitable inference default for a type parameter\n-                            // that references self, in an object type.\n-                            return true;\n-                        }\n-                    }\n-                }\n-\n-                false\n-            }\n         }\n \n         impl<'a, 'tcx> CreateSubstsForGenericArgsCtxt<'a, 'tcx> for SubstsForAstPathCtxt<'a, 'tcx> {\n@@ -500,41 +477,23 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     GenericParamDefKind::Type { has_default, .. } => {\n                         if !infer_args && has_default {\n                             // No type parameter provided, but a default exists.\n-\n-                            // If we are converting an object type, then the\n-                            // `Self` parameter is unknown. However, some of the\n-                            // other type parameters may reference `Self` in their\n-                            // defaults. This will lead to an ICE if we are not\n-                            // careful!\n-                            if self.default_needs_object_self(param) {\n-                                self.missing_type_params.push(param.name);\n-                                tcx.ty_error().into()\n-                            } else {\n-                                // This is a default type parameter.\n-                                let substs = substs.unwrap();\n-                                if substs.iter().any(|arg| match arg.unpack() {\n-                                    GenericArgKind::Type(ty) => ty.references_error(),\n-                                    _ => false,\n-                                }) {\n-                                    // Avoid ICE #86756 when type error recovery goes awry.\n-                                    return tcx.ty_error().into();\n-                                }\n-                                self.astconv\n-                                    .normalize_ty(\n-                                        self.span,\n-                                        EarlyBinder(tcx.at(self.span).type_of(param.def_id))\n-                                            .subst(tcx, substs),\n-                                    )\n-                                    .into()\n+                            let substs = substs.unwrap();\n+                            if substs.iter().any(|arg| match arg.unpack() {\n+                                GenericArgKind::Type(ty) => ty.references_error(),\n+                                _ => false,\n+                            }) {\n+                                // Avoid ICE #86756 when type error recovery goes awry.\n+                                return tcx.ty_error().into();\n                             }\n+                            self.astconv\n+                                .normalize_ty(\n+                                    self.span,\n+                                    EarlyBinder(tcx.at(self.span).type_of(param.def_id))\n+                                        .subst(tcx, substs),\n+                                )\n+                                .into()\n                         } else if infer_args {\n-                            // No type parameters were provided, we can infer all.\n-                            let param = if !self.default_needs_object_self(param) {\n-                                Some(param)\n-                            } else {\n-                                None\n-                            };\n-                            self.astconv.ty_infer(param, self.span).into()\n+                            self.astconv.ty_infer(Some(param), self.span).into()\n                         } else {\n                             // We've already errored above about the mismatch.\n                             tcx.ty_error().into()\n@@ -564,10 +523,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             def_id,\n             span,\n             generic_args,\n-            missing_type_params: vec![],\n             inferred_params: vec![],\n             infer_args,\n-            is_object,\n         };\n         let substs = Self::create_substs_for_generic_args(\n             tcx,\n@@ -579,13 +536,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             &mut substs_ctx,\n         );\n \n-        self.complain_about_missing_type_params(\n-            substs_ctx.missing_type_params,\n-            def_id,\n-            span,\n-            generic_args.args.is_empty(),\n-        );\n-\n         debug!(\n             \"create_substs_for_ast_path(generic_params={:?}, self_ty={:?}) -> {:?}\",\n             generics, self_ty, substs\n@@ -1490,23 +1440,71 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // Erase the `dummy_self` (`trait_object_dummy_self`) used above.\n         let existential_trait_refs = regular_traits.iter().map(|i| {\n             i.trait_ref().map_bound(|trait_ref: ty::TraitRef<'tcx>| {\n-                if trait_ref.self_ty() != dummy_self {\n-                    // FIXME: There appears to be a missing filter on top of `expand_trait_aliases`,\n-                    // which picks up non-supertraits where clauses - but also, the object safety\n-                    // completely ignores trait aliases, which could be object safety hazards. We\n-                    // `delay_span_bug` here to avoid an ICE in stable even when the feature is\n-                    // disabled. (#66420)\n-                    tcx.sess.delay_span_bug(\n-                        DUMMY_SP,\n-                        &format!(\n-                            \"trait_ref_to_existential called on {:?} with non-dummy Self\",\n-                            trait_ref,\n-                        ),\n+                assert_eq!(trait_ref.self_ty(), dummy_self);\n+\n+                // Verify that `dummy_self` did not leak inside default type parameters.  This\n+                // could not be done at path creation, since we need to see through trait aliases.\n+                let mut missing_type_params = vec![];\n+                let mut references_self = false;\n+                let generics = tcx.generics_of(trait_ref.def_id);\n+                let substs: Vec<_> = trait_ref\n+                    .substs\n+                    .iter()\n+                    .enumerate()\n+                    .skip(1) // Remove `Self` for `ExistentialPredicate`.\n+                    .map(|(index, arg)| {\n+                        if let ty::GenericArgKind::Type(ty) = arg.unpack() {\n+                            debug!(?ty);\n+                            if ty == dummy_self {\n+                                let param = &generics.params[index];\n+                                missing_type_params.push(param.name);\n+                                tcx.ty_error().into()\n+                            } else if ty.walk().any(|arg| arg == dummy_self.into()) {\n+                                references_self = true;\n+                                tcx.ty_error().into()\n+                            } else {\n+                                arg\n+                            }\n+                        } else {\n+                            arg\n+                        }\n+                    })\n+                    .collect();\n+                let substs = tcx.intern_substs(&substs[..]);\n+\n+                let span = i.bottom().1;\n+                let empty_generic_args = trait_bounds.iter().any(|hir_bound| {\n+                    hir_bound.trait_ref.path.res == Res::Def(DefKind::Trait, trait_ref.def_id)\n+                        && hir_bound.span.contains(span)\n+                });\n+                self.complain_about_missing_type_params(\n+                    missing_type_params,\n+                    trait_ref.def_id,\n+                    span,\n+                    empty_generic_args,\n+                );\n+\n+                if references_self {\n+                    let def_id = i.bottom().0.def_id();\n+                    let mut err = struct_span_err!(\n+                        tcx.sess,\n+                        i.bottom().1,\n+                        E0038,\n+                        \"the {} `{}` cannot be made into an object\",\n+                        tcx.def_kind(def_id).descr(def_id),\n+                        tcx.item_name(def_id),\n+                    );\n+                    err.note(\n+                        rustc_middle::traits::ObjectSafetyViolation::SupertraitSelf(smallvec![])\n+                            .error_msg(),\n                     );\n+                    err.emit();\n                 }\n-                ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref)\n+\n+                ty::ExistentialTraitRef { def_id: trait_ref.def_id, substs }\n             })\n         });\n+\n         let existential_projections = bounds.projection_bounds.iter().map(|(bound, _)| {\n             bound.map_bound(|b| {\n                 if b.projection_ty.self_ty() != dummy_self {"}, {"sha": "6756eecd0e0f8ca6bc446b899595a56de3ef6b1a", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -74,7 +74,7 @@ use crate::ptr;\n ///         {\n ///             return null_mut();\n ///         };\n-///         (self.arena.get() as *mut u8).add(allocated)\n+///         self.arena.get().cast::<u8>().add(allocated)\n ///     }\n ///     unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n /// }"}, {"sha": "7ec565edb34835f229599b51e8af995b259d71a9", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -119,6 +119,10 @@ pub trait Write {\n     ///\n     /// This function will return an instance of [`Error`] on error.\n     ///\n+    /// The purpose of std::fmt::Error is to abort the formatting operation when the underlying\n+    /// destination encounters some error preventing it from accepting more text; it should\n+    /// generally be propagated rather than handled, at least when implementing formatting traits.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "c25b159c533a19ae0f951745301db71fbc18ac77", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -1267,20 +1267,21 @@ impl<T: ?Sized> *const T {\n     /// Accessing adjacent `u8` as `u16`\n     ///\n     /// ```\n-    /// # fn foo(n: usize) {\n-    /// # use std::mem::align_of;\n+    /// use std::mem::align_of;\n+    ///\n     /// # unsafe {\n-    /// let x = [5u8, 6u8, 7u8, 8u8, 9u8];\n-    /// let ptr = x.as_ptr().add(n) as *const u8;\n+    /// let x = [5_u8, 6, 7, 8, 9];\n+    /// let ptr = x.as_ptr();\n     /// let offset = ptr.align_offset(align_of::<u16>());\n-    /// if offset < x.len() - n - 1 {\n-    ///     let u16_ptr = ptr.add(offset) as *const u16;\n-    ///     assert_ne!(*u16_ptr, 500);\n+    ///\n+    /// if offset < x.len() - 1 {\n+    ///     let u16_ptr = ptr.add(offset).cast::<u16>();\n+    ///     assert!(*u16_ptr == u16::from_ne_bytes([5, 6]) || *u16_ptr == u16::from_ne_bytes([6, 7]));\n     /// } else {\n     ///     // while the pointer can be aligned via `offset`, it would point\n     ///     // outside the allocation\n     /// }\n-    /// # } }\n+    /// # }\n     /// ```\n     #[stable(feature = \"align_offset\", since = \"1.36.0\")]\n     #[rustc_const_unstable(feature = \"const_align_offset\", issue = \"90962\")]"}, {"sha": "fff06b458c7c132a43580491672863369bb4b5f5", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -1545,20 +1545,23 @@ impl<T: ?Sized> *mut T {\n     /// Accessing adjacent `u8` as `u16`\n     ///\n     /// ```\n-    /// # fn foo(n: usize) {\n-    /// # use std::mem::align_of;\n+    /// use std::mem::align_of;\n+    ///\n     /// # unsafe {\n-    /// let x = [5u8, 6u8, 7u8, 8u8, 9u8];\n-    /// let ptr = x.as_ptr().add(n) as *const u8;\n+    /// let mut x = [5_u8, 6, 7, 8, 9];\n+    /// let ptr = x.as_mut_ptr();\n     /// let offset = ptr.align_offset(align_of::<u16>());\n-    /// if offset < x.len() - n - 1 {\n-    ///     let u16_ptr = ptr.add(offset) as *const u16;\n-    ///     assert_ne!(*u16_ptr, 500);\n+    ///\n+    /// if offset < x.len() - 1 {\n+    ///     let u16_ptr = ptr.add(offset).cast::<u16>();\n+    ///     *u16_ptr = 0;\n+    ///\n+    ///     assert!(x == [0, 0, 7, 8, 9] || x == [5, 0, 0, 8, 9]);\n     /// } else {\n     ///     // while the pointer can be aligned via `offset`, it would point\n     ///     // outside the allocation\n     /// }\n-    /// # } }\n+    /// # }\n     /// ```\n     #[stable(feature = \"align_offset\", since = \"1.36.0\")]\n     #[rustc_const_unstable(feature = \"const_align_offset\", issue = \"90962\")]"}, {"sha": "f43b780ec9a900a18f202d2e8e3cf55a574894d1", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -92,7 +92,7 @@ impl<'a, T> Iter<'a, T> {\n             assume(!ptr.is_null());\n \n             let end = if mem::size_of::<T>() == 0 {\n-                (ptr as *const u8).wrapping_add(slice.len()) as *const T\n+                ptr.wrapping_byte_add(slice.len())\n             } else {\n                 ptr.add(slice.len())\n             };\n@@ -228,7 +228,7 @@ impl<'a, T> IterMut<'a, T> {\n             assume(!ptr.is_null());\n \n             let end = if mem::size_of::<T>() == 0 {\n-                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T\n+                ptr.wrapping_byte_add(slice.len())\n             } else {\n                 ptr.add(slice.len())\n             };"}, {"sha": "d874f08317f6142c27d86d010b39569d42b5fab5", "filename": "library/core/tests/const_ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fcore%2Ftests%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fcore%2Ftests%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fconst_ptr.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -3,7 +3,7 @@ const DATA: [u16; 2] = [u16::from_ne_bytes([0x01, 0x23]), u16::from_ne_bytes([0x\n \n const fn unaligned_ptr() -> *const u16 {\n     // Since DATA.as_ptr() is aligned to two bytes, adding 1 byte to that produces an unaligned *const u16\n-    unsafe { (DATA.as_ptr() as *const u8).add(1) as *const u16 }\n+    unsafe { DATA.as_ptr().byte_add(1) }\n }\n \n #[test]\n@@ -67,7 +67,7 @@ fn write() {\n     const fn write_unaligned() -> [u16; 2] {\n         let mut two_aligned = [0u16; 2];\n         unsafe {\n-            let unaligned_ptr = (two_aligned.as_mut_ptr() as *mut u8).add(1) as *mut u16;\n+            let unaligned_ptr = two_aligned.as_mut_ptr().byte_add(1);\n             ptr::write_unaligned(unaligned_ptr, u16::from_ne_bytes([0x23, 0x45]));\n         }\n         two_aligned\n@@ -91,7 +91,7 @@ fn mut_ptr_write() {\n     const fn write_unaligned() -> [u16; 2] {\n         let mut two_aligned = [0u16; 2];\n         unsafe {\n-            let unaligned_ptr = (two_aligned.as_mut_ptr() as *mut u8).add(1) as *mut u16;\n+            let unaligned_ptr = two_aligned.as_mut_ptr().byte_add(1);\n             unaligned_ptr.write_unaligned(u16::from_ne_bytes([0x23, 0x45]));\n         }\n         two_aligned"}, {"sha": "df9b1073a0994d533e97ba18e54fd8afff623e95", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -14,6 +14,7 @@\n #![feature(const_maybe_uninit_assume_init_read)]\n #![feature(const_nonnull_new)]\n #![feature(const_num_from_num)]\n+#![feature(const_pointer_byte_offsets)]\n #![feature(const_ptr_as_ref)]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n@@ -74,6 +75,7 @@\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n #![feature(result_into_ok_or_err)]\n+#![feature(pointer_byte_offsets)]\n #![feature(portable_simd)]\n #![feature(ptr_metadata)]\n #![feature(once_cell)]"}, {"sha": "66fa1efbf103f26115a00c5e78bbf8edb433a1f3", "filename": "library/std/src/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -115,7 +115,7 @@ pub unsafe trait UserSafe {\n     /// * the pointer is null.\n     /// * the pointed-to range is not in user memory.\n     unsafe fn check_ptr(ptr: *const Self) {\n-        let is_aligned = |p| -> bool { 0 == (p as usize) & (Self::align_of() - 1) };\n+        let is_aligned = |p: *const u8| -> bool { 0 == p.addr() & (Self::align_of() - 1) };\n \n         assert!(is_aligned(ptr as *const u8));\n         assert!(is_user_range(ptr as _, mem::size_of_val(unsafe { &*ptr })));"}, {"sha": "d715ae45401e654d88c251a0db98e2c1e6038196", "filename": "library/std/src/sys/unsupported/alloc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Falloc.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -1,22 +1,23 @@\n use crate::alloc::{GlobalAlloc, Layout, System};\n+use crate::ptr::null_mut;\n \n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n unsafe impl GlobalAlloc for System {\n     #[inline]\n     unsafe fn alloc(&self, _layout: Layout) -> *mut u8 {\n-        0 as *mut u8\n+        null_mut()\n     }\n \n     #[inline]\n     unsafe fn alloc_zeroed(&self, _layout: Layout) -> *mut u8 {\n-        0 as *mut u8\n+        null_mut()\n     }\n \n     #[inline]\n     unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n \n     #[inline]\n     unsafe fn realloc(&self, _ptr: *mut u8, _layout: Layout, _new_size: usize) -> *mut u8 {\n-        0 as *mut u8\n+        null_mut()\n     }\n }"}, {"sha": "479669647c12843c743b19ebabd9b6743e6919f2", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -170,7 +170,6 @@ use crate::ptr::addr_of_mut;\n use crate::str;\n use crate::sync::Arc;\n use crate::sys::thread as imp;\n-use crate::sys_common::mutex;\n use crate::sys_common::thread;\n use crate::sys_common::thread_info;\n use crate::sys_common::thread_parker::Parker;\n@@ -1033,24 +1032,48 @@ pub struct ThreadId(NonZeroU64);\n impl ThreadId {\n     // Generate a new unique thread ID.\n     fn new() -> ThreadId {\n-        // It is UB to attempt to acquire this mutex reentrantly!\n-        static GUARD: mutex::StaticMutex = mutex::StaticMutex::new();\n-        static mut COUNTER: u64 = 1;\n-\n-        unsafe {\n-            let guard = GUARD.lock();\n-\n-            // If we somehow use up all our bits, panic so that we're not\n-            // covering up subtle bugs of IDs being reused.\n-            if COUNTER == u64::MAX {\n-                drop(guard); // in case the panic handler ends up calling `ThreadId::new()`, avoid reentrant lock acquire.\n-                panic!(\"failed to generate unique thread ID: bitspace exhausted\");\n-            }\n-\n-            let id = COUNTER;\n-            COUNTER += 1;\n+        #[cold]\n+        fn exhausted() -> ! {\n+            panic!(\"failed to generate unique thread ID: bitspace exhausted\")\n+        }\n \n-            ThreadId(NonZeroU64::new(id).unwrap())\n+        cfg_if::cfg_if! {\n+            if #[cfg(target_has_atomic = \"64\")] {\n+                use crate::sync::atomic::{AtomicU64, Ordering::Relaxed};\n+\n+                static COUNTER: AtomicU64 = AtomicU64::new(0);\n+\n+                let mut last = COUNTER.load(Relaxed);\n+                loop {\n+                    let Some(id) = last.checked_add(1) else {\n+                        exhausted();\n+                    };\n+\n+                    match COUNTER.compare_exchange_weak(last, id, Relaxed, Relaxed) {\n+                        Ok(_) => return ThreadId(NonZeroU64::new(id).unwrap()),\n+                        Err(id) => last = id,\n+                    }\n+                }\n+            } else {\n+                use crate::sys_common::mutex::StaticMutex;\n+\n+                // It is UB to attempt to acquire this mutex reentrantly!\n+                static GUARD: StaticMutex = StaticMutex::new();\n+                static mut COUNTER: u64 = 0;\n+\n+                unsafe {\n+                    let guard = GUARD.lock();\n+\n+                    let Some(id) = COUNTER.checked_add(1) else {\n+                        drop(guard); // in case the panic handler ends up calling `ThreadId::new()`, avoid reentrant lock acquire.\n+                        exhausted();\n+                    };\n+\n+                    COUNTER = id;\n+                    drop(guard);\n+                    ThreadId(NonZeroU64::new(id).unwrap())\n+                }\n+            }\n         }\n     }\n "}, {"sha": "27ccff9a2768fe345649b08c52ea76b4d9f33a41", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -163,7 +163,6 @@ enum Class {\n     // Keywords that do pointer/reference stuff.\n     RefKeyWord,\n     Self_(Span),\n-    Op,\n     Macro(Span),\n     MacroNonTerminal,\n     String,\n@@ -187,7 +186,6 @@ impl Class {\n             Class::KeyWord => \"kw\",\n             Class::RefKeyWord => \"kw-2\",\n             Class::Self_(_) => \"self\",\n-            Class::Op => \"op\",\n             Class::Macro(_) => \"macro\",\n             Class::MacroNonTerminal => \"macro-nonterminal\",\n             Class::String => \"string\",\n@@ -212,7 +210,6 @@ impl Class {\n             | Self::Attribute\n             | Self::KeyWord\n             | Self::RefKeyWord\n-            | Self::Op\n             | Self::MacroNonTerminal\n             | Self::String\n             | Self::Number\n@@ -516,7 +513,7 @@ impl<'a> Classifier<'a> {\n             // or a reference or pointer type. Unless, of course, it looks like\n             // a logical and or a multiplication operator: `&&` or `* `.\n             TokenKind::Star => match self.tokens.peek() {\n-                Some((TokenKind::Whitespace, _)) => Class::Op,\n+                Some((TokenKind::Whitespace, _)) => return no_highlight(sink),\n                 Some((TokenKind::Ident, \"mut\")) => {\n                     self.next();\n                     sink(Highlight::Token { text: \"*mut\", class: Some(Class::RefKeyWord) });\n@@ -532,15 +529,15 @@ impl<'a> Classifier<'a> {\n             TokenKind::And => match self.tokens.peek() {\n                 Some((TokenKind::And, _)) => {\n                     self.next();\n-                    sink(Highlight::Token { text: \"&&\", class: Some(Class::Op) });\n+                    sink(Highlight::Token { text: \"&&\", class: None });\n                     return;\n                 }\n                 Some((TokenKind::Eq, _)) => {\n                     self.next();\n-                    sink(Highlight::Token { text: \"&=\", class: Some(Class::Op) });\n+                    sink(Highlight::Token { text: \"&=\", class: None });\n                     return;\n                 }\n-                Some((TokenKind::Whitespace, _)) => Class::Op,\n+                Some((TokenKind::Whitespace, _)) => return no_highlight(sink),\n                 Some((TokenKind::Ident, \"mut\")) => {\n                     self.next();\n                     sink(Highlight::Token { text: \"&mut\", class: Some(Class::RefKeyWord) });\n@@ -553,15 +550,15 @@ impl<'a> Classifier<'a> {\n             TokenKind::Eq => match lookahead {\n                 Some(TokenKind::Eq) => {\n                     self.next();\n-                    sink(Highlight::Token { text: \"==\", class: Some(Class::Op) });\n+                    sink(Highlight::Token { text: \"==\", class: None });\n                     return;\n                 }\n                 Some(TokenKind::Gt) => {\n                     self.next();\n                     sink(Highlight::Token { text: \"=>\", class: None });\n                     return;\n                 }\n-                _ => Class::Op,\n+                _ => return no_highlight(sink),\n             },\n             TokenKind::Minus if lookahead == Some(TokenKind::Gt) => {\n                 self.next();\n@@ -578,7 +575,7 @@ impl<'a> Classifier<'a> {\n             | TokenKind::Percent\n             | TokenKind::Bang\n             | TokenKind::Lt\n-            | TokenKind::Gt => Class::Op,\n+            | TokenKind::Gt => return no_highlight(sink),\n \n             // Miscellaneous, no highlighting.\n             TokenKind::Dot"}, {"sha": "ae4dba116d637329226c0529ddf5e1f61c25928e", "filename": "src/librustdoc/html/highlight/fixtures/decorations.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdecorations.html", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdecorations.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdecorations.html?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -1,2 +1,2 @@\n-<span class=\"example\"><span class=\"kw\">let</span> <span class=\"ident\">x</span> <span class=\"op\">=</span> <span class=\"number\">1</span>;</span>\n-<span class=\"kw\">let</span> <span class=\"ident\">y</span> <span class=\"op\">=</span> <span class=\"number\">2</span>;\n\\ No newline at end of file\n+<span class=\"example\"><span class=\"kw\">let</span> <span class=\"ident\">x</span> = <span class=\"number\">1</span>;</span>\n+<span class=\"kw\">let</span> <span class=\"ident\">y</span> = <span class=\"number\">2</span>;\n\\ No newline at end of file"}, {"sha": "17f23278ec1f2e4f5c0e7391e8cf284c673588b9", "filename": "src/librustdoc/html/highlight/fixtures/highlight.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fhighlight.html", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fhighlight.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fhighlight.html?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -1,4 +1,4 @@\n <span class=\"kw\">use</span> <span class=\"ident\"><span class=\"kw\">crate</span>::a::foo</span>;\n <span class=\"kw\">use</span> <span class=\"ident\"><span class=\"self\">self</span>::whatever</span>;\n-<span class=\"kw\">let</span> <span class=\"ident\">x</span> <span class=\"op\">=</span> <span class=\"ident\"><span class=\"kw\">super</span>::b::foo</span>;\n-<span class=\"kw\">let</span> <span class=\"ident\">y</span> <span class=\"op\">=</span> <span class=\"ident\"><span class=\"self\">Self</span>::whatever</span>;\n\\ No newline at end of file\n+<span class=\"kw\">let</span> <span class=\"ident\">x</span> = <span class=\"ident\"><span class=\"kw\">super</span>::b::foo</span>;\n+<span class=\"kw\">let</span> <span class=\"ident\">y</span> = <span class=\"ident\"><span class=\"self\">Self</span>::whatever</span>;\n\\ No newline at end of file"}, {"sha": "ea797fd99d3f45e81f76db3212755e337af60882", "filename": "src/librustdoc/html/highlight/fixtures/sample.html", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -8,23 +8,23 @@\n .lifetime { color: #B76514; }\n .question-mark { color: #ff9011; }\n </style>\n-<pre><code><span class=\"attribute\">#![<span class=\"ident\">crate_type</span> <span class=\"op\">=</span> <span class=\"string\">&quot;lib&quot;</span>]</span>\n+<pre><code><span class=\"attribute\">#![<span class=\"ident\">crate_type</span> = <span class=\"string\">&quot;lib&quot;</span>]</span>\n \n <span class=\"kw\">use</span> <span class=\"ident\">std::path</span>::{<span class=\"ident\">Path</span>, <span class=\"ident\">PathBuf</span>};\n \n-<span class=\"attribute\">#[<span class=\"ident\">cfg</span>(<span class=\"ident\">target_os</span> <span class=\"op\">=</span> <span class=\"string\">&quot;linux&quot;</span>)]</span>\n+<span class=\"attribute\">#[<span class=\"ident\">cfg</span>(<span class=\"ident\">target_os</span> = <span class=\"string\">&quot;linux&quot;</span>)]</span>\n <span class=\"kw\">fn</span> <span class=\"ident\">main</span>() -&gt; () {\n-    <span class=\"kw\">let</span> <span class=\"ident\">foo</span> <span class=\"op\">=</span> <span class=\"bool-val\">true</span> <span class=\"op\">&amp;&amp;</span> <span class=\"bool-val\">false</span> <span class=\"op\">|</span><span class=\"op\">|</span> <span class=\"bool-val\">true</span>;\n-    <span class=\"kw\">let</span> <span class=\"kw\">_</span>: <span class=\"kw-2\">*const</span> () <span class=\"op\">=</span> <span class=\"number\">0</span>;\n-    <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"kw-2\">&amp;</span><span class=\"ident\">foo</span>;\n-    <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"op\">&amp;&amp;</span><span class=\"ident\">foo</span>;\n-    <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"kw-2\">*</span><span class=\"ident\">foo</span>;\n+    <span class=\"kw\">let</span> <span class=\"ident\">foo</span> = <span class=\"bool-val\">true</span> &amp;&amp; <span class=\"bool-val\">false</span> || <span class=\"bool-val\">true</span>;\n+    <span class=\"kw\">let</span> <span class=\"kw\">_</span>: <span class=\"kw-2\">*const</span> () = <span class=\"number\">0</span>;\n+    <span class=\"kw\">let</span> <span class=\"kw\">_</span> = <span class=\"kw-2\">&amp;</span><span class=\"ident\">foo</span>;\n+    <span class=\"kw\">let</span> <span class=\"kw\">_</span> = &amp;&amp;<span class=\"ident\">foo</span>;\n+    <span class=\"kw\">let</span> <span class=\"kw\">_</span> = <span class=\"kw-2\">*</span><span class=\"ident\">foo</span>;\n     <span class=\"macro\">mac!</span>(<span class=\"ident\">foo</span>, <span class=\"kw-2\">&amp;mut</span> <span class=\"ident\">bar</span>);\n-    <span class=\"macro\">assert!</span>(<span class=\"self\">self</span>.<span class=\"ident\">length</span> <span class=\"op\">&lt;</span> <span class=\"ident\">N</span> <span class=\"op\">&amp;&amp;</span> <span class=\"ident\">index</span> <span class=\"op\">&lt;</span><span class=\"op\">=</span> <span class=\"self\">self</span>.<span class=\"ident\">length</span>);\n+    <span class=\"macro\">assert!</span>(<span class=\"self\">self</span>.<span class=\"ident\">length</span> &lt; <span class=\"ident\">N</span> &amp;&amp; <span class=\"ident\">index</span> &lt;= <span class=\"self\">self</span>.<span class=\"ident\">length</span>);\n     <span class=\"ident\">::std::env::var</span>(<span class=\"string\">&quot;gateau&quot;</span>).<span class=\"ident\">is_ok</span>();\n     <span class=\"attribute\">#[<span class=\"ident\">rustfmt::skip</span>]</span>\n-    <span class=\"kw\">let</span> <span class=\"ident\">s</span>:<span class=\"ident\">std::path::PathBuf</span> <span class=\"op\">=</span> <span class=\"ident\">std::path::PathBuf::new</span>();\n-    <span class=\"kw\">let</span> <span class=\"kw-2\">mut</span> <span class=\"ident\">s</span> <span class=\"op\">=</span> <span class=\"ident\">String::new</span>();\n+    <span class=\"kw\">let</span> <span class=\"ident\">s</span>:<span class=\"ident\">std::path::PathBuf</span> = <span class=\"ident\">std::path::PathBuf::new</span>();\n+    <span class=\"kw\">let</span> <span class=\"kw-2\">mut</span> <span class=\"ident\">s</span> = <span class=\"ident\">String::new</span>();\n \n     <span class=\"kw\">match</span> <span class=\"kw-2\">&amp;</span><span class=\"ident\">s</span> {\n         <span class=\"kw-2\">ref</span> <span class=\"kw-2\">mut</span> <span class=\"ident\">x</span> =&gt; {}"}, {"sha": "ac8bd28f6c362e765035327cb11a814458122963", "filename": "src/librustdoc/html/highlight/fixtures/union.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Funion.html", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Funion.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Funion.html?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -4,5 +4,5 @@\n }\n \n <span class=\"kw\">fn</span> <span class=\"ident\">main</span>() {\n-    <span class=\"kw\">let</span> <span class=\"ident\">union</span> <span class=\"op\">=</span> <span class=\"number\">0</span>;\n+    <span class=\"kw\">let</span> <span class=\"ident\">union</span> = <span class=\"number\">0</span>;\n }"}, {"sha": "b8218867a8bc8a42717568082817ced6c8371c6b", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -238,7 +238,7 @@ details.rustdoc-toggle > summary::before {\n pre.rust .number, pre.rust .string { color: #b8cc52; }\n pre.rust .kw, pre.rust .kw-2, pre.rust .prelude-ty,\n pre.rust .bool-val, pre.rust .prelude-val,\n-pre.rust .op, pre.rust .lifetime { color: #ff7733; }\n+pre.rust .lifetime { color: #ff7733; }\n pre.rust .macro, pre.rust .macro-nonterminal { color: #a37acc; }\n pre.rust .question-mark {\n \tcolor: #ff9011;\n@@ -250,7 +250,7 @@ pre.rust .self {\n pre.rust .attribute {\n \tcolor: #e6e1cf;\n }\n-pre.rust .attribute .ident, pre.rust .attribute .op {\n+pre.rust .attribute .ident {\n \tcolor: #e6e1cf;\n }\n "}, {"sha": "20e86c7f9a0721a127439132cb4b9adf25f6147b", "filename": "src/test/run-make/translation/Makefile", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -9,16 +9,29 @@ FAKEROOT=$(TMPDIR)/fakeroot\n \n all: normal custom sysroot\n \n-normal: basic-translation.rs\n+# Check that the test works normally, using the built-in fallback bundle.\n+normal: test.rs\n \t$(RUSTC) $< 2>&1 | grep \"struct literal body without path\"\n \n-custom: basic-translation.rs basic-translation.ftl\n-\t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/basic-translation.ftl 2>&1 | grep \"this is a test message\"\n+# Check that a primary bundle can be loaded and will be preferentially used\n+# where possible.\n+custom: test.rs working.ftl\n+\t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/working.ftl 2>&1 | grep \"this is a test message\"\n+\n+# Check that a primary bundle with a broken message (e.g. a interpolated\n+# variable is missing) will use the fallback bundle.\n+missing: test.rs missing.ftl\n+\t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/missing.ftl 2>&1 | grep \"struct literal body without path\"\n+\n+# Check that a primary bundle without the desired message will use the fallback\n+# bundle.\n+broken: test.rs broken.ftl\n+\t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/broken.ftl 2>&1 | grep \"struct literal body without path\"\n \n # Check that a locale can be loaded from the sysroot given a language\n # identifier by making a local copy of the sysroot and adding the custom locale\n # to it.\n-sysroot: basic-translation.rs basic-translation.ftl\n+sysroot: test.rs working.ftl\n \tmkdir $(FAKEROOT)\n \tln -s $(SYSROOT)/* $(FAKEROOT)\n \trm -f $(FAKEROOT)/lib\n@@ -31,7 +44,7 @@ sysroot: basic-translation.rs basic-translation.ftl\n \tmkdir $(FAKEROOT)/lib/rustlib/src\n \tln -s $(SYSROOT)/lib/rustlib/src/* $(FAKEROOT)/lib/rustlib/src\n \tmkdir -p $(FAKEROOT)/share/locale/zh-CN/\n-\tln -s $(CURDIR)/basic-translation.ftl $(FAKEROOT)/share/locale/zh-CN/basic-translation.ftl\n+\tln -s $(CURDIR)/working.ftl $(FAKEROOT)/share/locale/zh-CN/basic-translation.ftl\n \t$(RUSTC) $< --sysroot $(FAKEROOT) -Ztranslate-lang=zh-CN 2>&1 | grep \"this is a test message\"\n \n # Check that the compiler errors out when the sysroot requested cannot be\n@@ -43,7 +56,7 @@ sysroot-missing:\n # Check that the compiler errors out when the sysroot requested cannot be\n # found. This test might start failing if there actually exists a Klingon\n # translation of rustc's error messages.\n-sysroot-invalid: basic-translation.rs basic-translation.ftl\n+sysroot-invalid: test.rs working.ftl\n \tmkdir $(FAKEROOT)\n \tln -s $(SYSROOT)/* $(FAKEROOT)\n \trm -f $(FAKEROOT)/lib"}, {"sha": "1482dd2824aed6a0e42931912ddc4bbd0ef502c4", "filename": "src/test/run-make/translation/broken.ftl", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Frun-make%2Ftranslation%2Fbroken.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Frun-make%2Ftranslation%2Fbroken.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2Fbroken.ftl?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -0,0 +1,3 @@\n+# `foo` isn't provided by this diagnostic so it is expected that the fallback message is used.\n+parser-struct-literal-body-without-path = this is a {$foo} message\n+    .suggestion = this is a test suggestion"}, {"sha": "43076b1d6ae79b3335b2af99235a6f4a18fd42bf", "filename": "src/test/run-make/translation/missing.ftl", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Frun-make%2Ftranslation%2Fmissing.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Frun-make%2Ftranslation%2Fmissing.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2Fmissing.ftl?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -0,0 +1,3 @@\n+# `parser-struct-literal-body-without-path` isn't provided by this resource at all, so the\n+# fallback should be used.\n+foo = bar"}, {"sha": "b8f5bff315337cba90a3b6a1feebf7efb90c2c03", "filename": "src/test/run-make/translation/test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Frun-make%2Ftranslation%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Frun-make%2Ftranslation%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2Ftest.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "previous_filename": "src/test/run-make/translation/basic-translation.rs"}, {"sha": "4681b879cda6a3deb25d9474a2d0efec0e9183cc", "filename": "src/test/run-make/translation/working.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Frun-make%2Ftranslation%2Fworking.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Frun-make%2Ftranslation%2Fworking.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2Fworking.ftl?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "previous_filename": "src/test/run-make/translation/basic-translation.ftl"}, {"sha": "236469ce9797a643843f62a538ee68962571db55", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -38,6 +38,7 @@\n     -Z                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n     -Z                           emit-thin-lto=val -- emit the bc module with thin LTO info (default: yes)\n     -Z               export-executable-symbols=val -- export symbols from executables, as if they were dynamic libraries\n+    -Z                   extra-const-ub-checks=val -- turns on more checks to detect const UB, which can be slow (default: no)\n     -Z                             fewer-names=val -- reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) (default: no)\n     -Z              force-unstable-if-unmarked=val -- force all crates to be `rustc_private` unstable (default: no)\n     -Z                                    fuel=val -- set the optimization fuel quota for a crate"}, {"sha": "131c53ec24bc46b05c799d95c7edefe4b2aaf87a", "filename": "src/test/rustdoc/macro_rules-matchers.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -6,16 +6,13 @@\n // @has 'foo/macro.todo.html'\n // @has - '//span[@class=\"macro\"]' 'macro_rules!'\n // @has - '//span[@class=\"ident\"]' 'todo'\n-// Note: the only op is the `+`\n-// @count - '//pre[@class=\"rust macro\"]//span[@class=\"op\"]' 1\n \n // @has - '{ () =&gt; { ... }; ($('\n // @has - '//span[@class=\"macro-nonterminal\"]' '$'\n // @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n // @has - ':'\n // @has - '//span[@class=\"ident\"]' 'tt'\n-// @has - '),'\n-// @has - '//span[@class=\"op\"]' '+'\n+// @has - ')+'\n // @has - ') =&gt; { ... }; }'\n pub use std::todo;\n "}, {"sha": "2b88cf0b4411eaccca994ec545e4584f6f9c00cf", "filename": "src/test/ui/associated-types/issue-22560.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -1,25 +1,3 @@\n-error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-22560.rs:9:23\n-   |\n-LL | trait Sub<Rhs=Self> {\n-   | ------------------- type parameter `Rhs` must be specified for this\n-...\n-LL | type Test = dyn Add + Sub;\n-   |                       ^^^ help: set the type parameter to the desired type: `Sub<Rhs>`\n-   |\n-   = note: because of the default `Self` reference, type parameters must be specified on object types\n-\n-error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-22560.rs:9:17\n-   |\n-LL | trait Add<Rhs=Self> {\n-   | ------------------- type parameter `Rhs` must be specified for this\n-...\n-LL | type Test = dyn Add + Sub;\n-   |                 ^^^ help: set the type parameter to the desired type: `Add<Rhs>`\n-   |\n-   = note: because of the default `Self` reference, type parameters must be specified on object types\n-\n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/issue-22560.rs:9:23\n    |\n@@ -28,7 +6,7 @@ LL | type Test = dyn Add + Sub;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Add<[type error]> + Sub<[type error]> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Add + Sub {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0191]: the value of the associated types `Output` (from trait `Add`), `Output` (from trait `Sub`) must be specified\n@@ -50,6 +28,28 @@ help: specify the associated types\n LL | type Test = dyn Add<Output = Type> + Sub<Output = Type>;\n    |                 ~~~~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~\n \n+error[E0393]: the type parameter `Rhs` must be explicitly specified\n+  --> $DIR/issue-22560.rs:9:17\n+   |\n+LL | trait Add<Rhs=Self> {\n+   | ------------------- type parameter `Rhs` must be specified for this\n+...\n+LL | type Test = dyn Add + Sub;\n+   |                 ^^^ help: set the type parameter to the desired type: `Add<Rhs>`\n+   |\n+   = note: because of the default `Self` reference, type parameters must be specified on object types\n+\n+error[E0393]: the type parameter `Rhs` must be explicitly specified\n+  --> $DIR/issue-22560.rs:9:23\n+   |\n+LL | trait Sub<Rhs=Self> {\n+   | ------------------- type parameter `Rhs` must be specified for this\n+...\n+LL | type Test = dyn Add + Sub;\n+   |                       ^^^ help: set the type parameter to the desired type: `Sub<Rhs>`\n+   |\n+   = note: because of the default `Self` reference, type parameters must be specified on object types\n+\n error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0191, E0225, E0393."}, {"sha": "97c9e1505197f72c9f8554b6a133bff6bd8afa67", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -0,0 +1,45 @@\n+// revisions: no_flag with_flag\n+// [no_flag] check-pass\n+// [with_flag] compile-flags: -Zextra-const-ub-checks\n+#![feature(const_ptr_read)]\n+\n+use std::mem::transmute;\n+\n+const INVALID_BOOL: () = unsafe {\n+    let _x: bool = transmute(3u8);\n+    //[with_flag]~^ ERROR: evaluation of constant value failed\n+    //[with_flag]~| invalid value\n+};\n+\n+const INVALID_PTR_IN_INT: () = unsafe {\n+    let _x: usize = transmute(&3u8);\n+    //[with_flag]~^ ERROR: evaluation of constant value failed\n+    //[with_flag]~| invalid value\n+};\n+\n+const INVALID_SLICE_TO_USIZE_TRANSMUTE: () = unsafe {\n+    let x: &[u8] = &[0; 32];\n+    let _x: (usize, usize) = transmute(x);\n+    //[with_flag]~^ ERROR: evaluation of constant value failed\n+    //[with_flag]~| invalid value\n+};\n+\n+const UNALIGNED_PTR: () = unsafe {\n+    let _x: &u32 = transmute(&[0u8; 4]);\n+    //[with_flag]~^ ERROR: evaluation of constant value failed\n+    //[with_flag]~| invalid value\n+};\n+\n+const UNALIGNED_READ: () = {\n+    INNER; //[with_flag]~ERROR any use of this value will cause an error\n+    //[with_flag]~| previously accepted\n+    // There is an error here but its span is in the standard library so we cannot match it...\n+    // so we have this in a *nested* const, such that the *outer* const fails to use it.\n+    const INNER: () = unsafe {\n+        let x = &[0u8; 4];\n+        let ptr = x.as_ptr().cast::<u32>();\n+        ptr.read();\n+    };\n+};\n+\n+fn main() {}"}, {"sha": "1706db7ac43cac4993977dd90d28c658101f72fa", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.with_flag.stderr", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -0,0 +1,71 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/detect-extra-ub.rs:9:20\n+   |\n+LL |     let _x: bool = transmute(3u8);\n+   |                    ^^^^^^^^^^^^^^ constructing invalid value: encountered 0x03, but expected a boolean\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/detect-extra-ub.rs:15:21\n+   |\n+LL |     let _x: usize = transmute(&3u8);\n+   |                     ^^^^^^^^^^^^^^^ constructing invalid value: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/detect-extra-ub.rs:22:30\n+   |\n+LL |     let _x: (usize, usize) = transmute(x);\n+   |                              ^^^^^^^^^^^^ constructing invalid value at .0: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/detect-extra-ub.rs:28:20\n+   |\n+LL |     let _x: &u32 = transmute(&[0u8; 4]);\n+   |                    ^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 4 byte alignment but found 1)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         accessing memory with alignment 1, but alignment 4 is required\n+   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+  ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { read(self) }\n+   |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+  ::: $DIR/detect-extra-ub.rs:41:9\n+   |\n+LL |         ptr.read();\n+   |         ---------- inside `INNER` at $DIR/detect-extra-ub.rs:41:9\n+\n+error: any use of this value will cause an error\n+  --> $DIR/detect-extra-ub.rs:34:5\n+   |\n+LL | const UNALIGNED_READ: () = {\n+   | ------------------------\n+LL |     INNER;\n+   |     ^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/detect-extra-ub.rs:34:5\n+   |\n+LL | const UNALIGNED_READ: () = {\n+   | ------------------------\n+LL |     INNER;\n+   |     ^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "6175b7df1107ad78029a5ffc4f4231a2d105a05b", "filename": "src/test/ui/cycle-trait/cycle-trait-default-type-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -3,7 +3,6 @@\n \n trait Foo<X = Box<dyn Foo>> {\n     //~^ ERROR cycle detected\n-    //~| ERROR cycle detected\n }\n \n fn main() { }"}, {"sha": "9d715f49471463f94d333cc8c2bab63389117b37", "filename": "src/test/ui/cycle-trait/cycle-trait-default-type-trait.stderr", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -10,30 +10,11 @@ note: cycle used when collecting item types in top-level module\n    |\n LL | / trait Foo<X = Box<dyn Foo>> {\n LL | |\n-LL | |\n-LL | | }\n-LL | |\n-LL | | fn main() { }\n-   | |_____________^\n-\n-error[E0391]: cycle detected when computing type of `Foo::X`\n-  --> $DIR/cycle-trait-default-type-trait.rs:4:23\n-   |\n-LL | trait Foo<X = Box<dyn Foo>> {\n-   |                       ^^^\n-   |\n-   = note: ...which immediately requires computing type of `Foo::X` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/cycle-trait-default-type-trait.rs:4:1\n-   |\n-LL | / trait Foo<X = Box<dyn Foo>> {\n-LL | |\n-LL | |\n LL | | }\n LL | |\n LL | | fn main() { }\n    | |_____________^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0391`."}, {"sha": "731615a6bd8d4d37e5540d9fee4683d391306e98", "filename": "src/test/ui/issues/issue-21950.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -1,3 +1,12 @@\n+error[E0191]: the value of the associated type `Output` (from trait `Add`) must be specified\n+  --> $DIR/issue-21950.rs:10:25\n+   |\n+LL |     type Output;\n+   |     ----------- `Output` defined here\n+...\n+LL |     let x = &10 as &dyn Add;\n+   |                         ^^^ help: specify the associated type: `Add<Output = Type>`\n+\n error[E0393]: the type parameter `Rhs` must be explicitly specified\n   --> $DIR/issue-21950.rs:10:25\n    |\n@@ -9,15 +18,6 @@ LL |     let x = &10 as &dyn Add;\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n-error[E0191]: the value of the associated type `Output` (from trait `Add`) must be specified\n-  --> $DIR/issue-21950.rs:10:25\n-   |\n-LL |     type Output;\n-   |     ----------- `Output` defined here\n-...\n-LL |     let x = &10 as &dyn Add;\n-   |                         ^^^ help: specify the associated type: `Add<Output = Type>`\n-\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0191, E0393."}, {"sha": "e35bbd88830622fd0a24553a66e9ae78fcd6456d", "filename": "src/test/ui/let-else/issue-94176.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Flet-else%2Fissue-94176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Flet-else%2Fissue-94176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-94176.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -0,0 +1,10 @@\n+// Issue #94176: wrong span for the error message of a mismatched type error,\n+// if the function uses a `let else` construct.\n+#![feature(let_else)]\n+\n+pub fn test(a: Option<u32>) -> Option<u32> { //~ ERROR mismatched types\n+    let Some(_) = a else { return None; };\n+    println!(\"Foo\");\n+}\n+\n+fn main() {}"}, {"sha": "0cb97aceebfd5835311787240e3c1a3fa6a2b2ed", "filename": "src/test/ui/let-else/issue-94176.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Flet-else%2Fissue-94176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Flet-else%2Fissue-94176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-94176.stderr?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-94176.rs:5:32\n+   |\n+LL | pub fn test(a: Option<u32>) -> Option<u32> {\n+   |        ----                    ^^^^^^^^^^^ expected enum `Option`, found `()`\n+   |        |\n+   |        implicitly returns `()` as its body has no tail or `return` expression\n+   |\n+   = note:   expected enum `Option<u32>`\n+           found unit type `()`\n+help: consider returning the local binding `a`\n+   |\n+LL ~     println!(\"Foo\");\n+LL +     a\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "49633d943beea40db752c46684e55d765c1f4ed3", "filename": "src/test/ui/let-else/let-else-then-diverge.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -0,0 +1,19 @@\n+//\n+// popped up in in #94012, where an alternative desugaring was\n+// causing unreachable code errors\n+\n+#![feature(let_else)]\n+#![deny(unused_variables)]\n+#![deny(unreachable_code)]\n+\n+fn let_else_diverge() -> bool {\n+    let Some(_) = Some(\"test\") else {\n+        let x = 5; //~ ERROR unused variable: `x`\n+        return false;\n+    };\n+    return true;\n+}\n+\n+fn main() {\n+    let_else_diverge();\n+}"}, {"sha": "ceb61029d38634f1c0feda6ef7f27d86640a6c2d", "filename": "src/test/ui/let-else/let-else-then-diverge.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.stderr?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -0,0 +1,14 @@\n+error: unused variable: `x`\n+  --> $DIR/let-else-then-diverge.rs:11:13\n+   |\n+LL |         let x = 5;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/let-else-then-diverge.rs:6:9\n+   |\n+LL | #![deny(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d6216cb7ac275d9b385a8fde24b35788e003cb44", "filename": "src/test/ui/parser/suggest-const-for-global-var.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fparser%2Fsuggest-const-for-global-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fparser%2Fsuggest-const-for-global-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest-const-for-global-var.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -0,0 +1,6 @@\n+let X: i32 = 12;\n+//~^ ERROR expected item, found keyword `let`\n+\n+fn main() {\n+    println!(\"{}\", X);\n+}"}, {"sha": "94e44ec7f6ce1de4a2cb7198820b02da71c185e4", "filename": "src/test/ui/parser/suggest-const-for-global-var.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fparser%2Fsuggest-const-for-global-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Fparser%2Fsuggest-const-for-global-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest-const-for-global-var.stderr?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -0,0 +1,8 @@\n+error: expected item, found keyword `let`\n+  --> $DIR/suggest-const-for-global-var.rs:1:1\n+   |\n+LL | let X: i32 = 12;\n+   | ^^^ consider using `const` or `static` instead of `let` for global variables\n+\n+error: aborting due to previous error\n+"}, {"sha": "d44e1c2a9753048d794d117cbeff8ca3b8b05b33", "filename": "src/test/ui/traits/alias/generic-default-in-dyn.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Ftraits%2Falias%2Fgeneric-default-in-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Ftraits%2Falias%2Fgeneric-default-in-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fgeneric-default-in-dyn.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -0,0 +1,10 @@\n+trait SendEqAlias<T> = PartialEq;\n+//~^ ERROR trait aliases are experimental\n+\n+struct Foo<T>(dyn SendEqAlias<T>);\n+//~^ ERROR the type parameter `Rhs` must be explicitly specified [E0393]\n+\n+struct Bar<T>(dyn SendEqAlias<T>, T);\n+//~^ ERROR the type parameter `Rhs` must be explicitly specified [E0393]\n+\n+fn main() {}"}, {"sha": "76a068e864a3c6380ac1822aa379441f38ca6baf", "filename": "src/test/ui/traits/alias/generic-default-in-dyn.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Ftraits%2Falias%2Fgeneric-default-in-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Ftraits%2Falias%2Fgeneric-default-in-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fgeneric-default-in-dyn.stderr?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -0,0 +1,39 @@\n+error[E0658]: trait aliases are experimental\n+  --> $DIR/generic-default-in-dyn.rs:1:1\n+   |\n+LL | trait SendEqAlias<T> = PartialEq;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #41517 <https://github.com/rust-lang/rust/issues/41517> for more information\n+   = help: add `#![feature(trait_alias)]` to the crate attributes to enable\n+\n+error[E0393]: the type parameter `Rhs` must be explicitly specified\n+  --> $DIR/generic-default-in-dyn.rs:4:19\n+   |\n+LL | struct Foo<T>(dyn SendEqAlias<T>);\n+   |                   ^^^^^^^^^^^^^^ missing reference to `Rhs`\n+   |\n+  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL | pub trait PartialEq<Rhs: ?Sized = Self> {\n+   | --------------------------------------- type parameter `Rhs` must be specified for this\n+   |\n+   = note: because of the default `Self` reference, type parameters must be specified on object types\n+\n+error[E0393]: the type parameter `Rhs` must be explicitly specified\n+  --> $DIR/generic-default-in-dyn.rs:7:19\n+   |\n+LL | struct Bar<T>(dyn SendEqAlias<T>, T);\n+   |                   ^^^^^^^^^^^^^^ missing reference to `Rhs`\n+   |\n+  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL | pub trait PartialEq<Rhs: ?Sized = Self> {\n+   | --------------------------------------- type parameter `Rhs` must be specified for this\n+   |\n+   = note: because of the default `Self` reference, type parameters must be specified on object types\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0393, E0658.\n+For more information about an error, try `rustc --explain E0393`."}, {"sha": "6b99431f5bbcfe1fae131936ab8f8fd7c15e358c", "filename": "src/test/ui/traits/alias/self-in-generics.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -0,0 +1,8 @@\n+#![feature(trait_alias)]\n+\n+pub trait SelfInput = Fn(&mut Self);\n+\n+pub fn f(_f: &dyn SelfInput) {}\n+//~^ ERROR the trait alias `SelfInput` cannot be made into an object [E0038]\n+\n+fn main() {}"}, {"sha": "a1056872ea641b9a56fceda37d5180e062973710", "filename": "src/test/ui/traits/alias/self-in-generics.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.stderr?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "patch": "@@ -0,0 +1,11 @@\n+error[E0038]: the trait alias `SelfInput` cannot be made into an object\n+  --> $DIR/self-in-generics.rs:5:19\n+   |\n+LL | pub fn f(_f: &dyn SelfInput) {}\n+   |                   ^^^^^^^^^\n+   |\n+   = note: it cannot use `Self` as a type parameter in a supertrait or `where`-clause\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "158b5a9855752b126a189f45b788f730da0bc09c", "filename": "src/test/ui/traits/unspecified-self-in-trait-ref.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Ftraits%2Funspecified-self-in-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Ftraits%2Funspecified-self-in-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Funspecified-self-in-trait-ref.rs?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "previous_filename": "src/test/ui/unspecified-self-in-trait-ref.rs"}, {"sha": "7869176bb3ad2a3ffc6fa2cd74caec27d72d66d5", "filename": "src/test/ui/traits/unspecified-self-in-trait-ref.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Ftraits%2Funspecified-self-in-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f22819bcce4abaff7d1246a56eec493418f9f4ee/src%2Ftest%2Fui%2Ftraits%2Funspecified-self-in-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Funspecified-self-in-trait-ref.stderr?ref=f22819bcce4abaff7d1246a56eec493418f9f4ee", "previous_filename": "src/test/ui/unspecified-self-in-trait-ref.stderr"}]}