{"sha": "680053848928a94f933c5a453c031b458e9766e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MDA1Mzg0ODkyOGE5NGY5MzNjNWE0NTNjMDMxYjQ1OGU5NzY2ZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-13T18:42:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-13T18:42:49Z"}, "message": "Auto merge of #26984 - nham:errorck-ignore-long-diag, r=brson\n\nCurrently errorck yields bogus `duplicate error code` messages when an error code occurs inside of a long diagnostic message (see https://github.com/rust-lang/rust/pull/26982), because errorck just goes line by line checking for error codes and recording them all.\r\n\r\nA simplistic approach to fixing this is just to detect the beginning of a long diagnostic raw string literal (`r##\"`) and skip lines until the end of the raw string literal is encountered. I'm not completely confident in this approach, but I think a more robust approach would be more complicated and I wanted to get feedback before pursuing that.", "tree": {"sha": "48c7db7af180be9656a845938e744e3c10d7dc9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48c7db7af180be9656a845938e744e3c10d7dc9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/680053848928a94f933c5a453c031b458e9766e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/680053848928a94f933c5a453c031b458e9766e0", "html_url": "https://github.com/rust-lang/rust/commit/680053848928a94f933c5a453c031b458e9766e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/680053848928a94f933c5a453c031b458e9766e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fbcebaaec518a0a39f0b835cd52e9edfaba9cc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbcebaaec518a0a39f0b835cd52e9edfaba9cc2", "html_url": "https://github.com/rust-lang/rust/commit/0fbcebaaec518a0a39f0b835cd52e9edfaba9cc2"}, {"sha": "4630fc75a7a9f61d53153452e5f3c13a8d7e3233", "url": "https://api.github.com/repos/rust-lang/rust/commits/4630fc75a7a9f61d53153452e5f3c13a8d7e3233", "html_url": "https://github.com/rust-lang/rust/commit/4630fc75a7a9f61d53153452e5f3c13a8d7e3233"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "48736542f20c7fda99c1d0c316049ed892a5a86f", "filename": "src/etc/errorck.py", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/680053848928a94f933c5a453c031b458e9766e0/src%2Fetc%2Ferrorck.py", "raw_url": "https://github.com/rust-lang/rust/raw/680053848928a94f933c5a453c031b458e9766e0/src%2Fetc%2Ferrorck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ferrorck.py?ref=680053848928a94f933c5a453c031b458e9766e0", "patch": "@@ -23,6 +23,18 @@\n errcode_map = {}\n error_re = re.compile(\"(E\\d\\d\\d\\d)\")\n \n+# In the register_long_diagnostics! macro, entries look like this:\n+#\n+# EXXXX: r##\"\n+# <Long diagnostic message>\n+# \"##,\n+#\n+# These two variables are for detecting the beginning and end of diagnostic\n+# messages so that duplicate error codes are not reported when a code occurs\n+# inside a diagnostic message\n+long_diag_begin = \"r##\\\"\"\n+long_diag_end = \"\\\"##\"\n+\n for (dirpath, dirnames, filenames) in os.walk(src_dir):\n     if \"src/test\" in dirpath or \"src/llvm\" in dirpath:\n         # Short circuit for fast\n@@ -35,7 +47,14 @@\n         path = os.path.join(dirpath, filename)\n \n         with open(path, 'r') as f:\n+            inside_long_diag = False\n             for line_num, line in enumerate(f, start=1):\n+                if inside_long_diag:\n+                    # Skip duplicate error code checking for this line\n+                    if long_diag_end in line:\n+                        inside_long_diag = False\n+                    continue\n+\n                 match = error_re.search(line)\n                 if match:\n                     errcode = match.group(1)\n@@ -47,6 +66,9 @@\n                     else:\n                         errcode_map[errcode] = new_record\n \n+                if long_diag_begin in line:\n+                    inside_long_diag = True\n+\n errors = False\n all_errors = []\n "}]}