{"sha": "aaee3f27eec3e14e28436cdcc6ffe469d400c789", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZWUzZjI3ZWVjM2UxNGUyODQzNmNkY2M2ZmZlNDY5ZDQwMGM3ODk=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-12-30T17:44:11Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-01T16:59:12Z"}, "message": "Don't mix feature gates and hard errors, decide on one per op and stick with it", "tree": {"sha": "bc04631ea569577adbbe0bd9d62b0d2efe038a38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc04631ea569577adbbe0bd9d62b0d2efe038a38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaee3f27eec3e14e28436cdcc6ffe469d400c789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaee3f27eec3e14e28436cdcc6ffe469d400c789", "html_url": "https://github.com/rust-lang/rust/commit/aaee3f27eec3e14e28436cdcc6ffe469d400c789", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaee3f27eec3e14e28436cdcc6ffe469d400c789/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "html_url": "https://github.com/rust-lang/rust/commit/3ed14033f7c087492a73c70bb11c1f7bae1b06c9"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "cb6d16bc2077bab76da798bc41a4270ce0959199", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aaee3f27eec3e14e28436cdcc6ffe469d400c789/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaee3f27eec3e14e28436cdcc6ffe469d400c789/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=aaee3f27eec3e14e28436cdcc6ffe469d400c789", "patch": "@@ -237,13 +237,6 @@ impl NonConstOp for TransientCellBorrow {\n /// it in the future for static items.\n pub struct CellBorrow;\n impl NonConstOp for CellBorrow {\n-    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        match ccx.const_kind() {\n-            // The borrow checker does a much better job at handling these than we do.\n-            hir::ConstContext::ConstFn => Status::Unstable(sym::const_refs_to_cell),\n-            _ => Status::Forbidden,\n-        }\n-    }\n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         struct_span_err!(\n             ccx.tcx.sess,"}, {"sha": "4770d6590324c7e7a8b6dbcf071415a695864ebc", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aaee3f27eec3e14e28436cdcc6ffe469d400c789/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaee3f27eec3e14e28436cdcc6ffe469d400c789/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=aaee3f27eec3e14e28436cdcc6ffe469d400c789", "patch": "@@ -582,14 +582,24 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 );\n \n                 if borrowed_place_has_mut_interior {\n-                    // Locals without StorageDead follow the \"enclosing scope\" rule, meaning\n-                    // they are essentially anonymous static items themselves.\n-                    // Note: This is only sound if every local that has a `StorageDead` has a\n-                    // `StorageDead` in every control flow path leading to a `return` terminator.\n-                    if self.local_has_storage_dead(place.local) {\n-                        self.check_op(ops::TransientCellBorrow);\n-                    } else {\n-                        self.check_op(ops::CellBorrow);\n+                    match self.const_kind() {\n+                        // In a const fn all borrows are transient or point to the places given via\n+                        // references in the arguments. The borrow checker guarantees that.\n+                        // NOTE: Once we have heap allocations during CTFE we need to figure out\n+                        // how to prevent `const fn` to create long-lived allocations that point\n+                        // to (interior) mutable memory.\n+                        hir::ConstContext::ConstFn => self.check_op(ops::TransientCellBorrow),\n+                        _ => {\n+                            // Locals without StorageDead follow the \"enclosing scope\" rule, meaning\n+                            // they are essentially anonymous static items themselves.\n+                            // Note: This is only sound if every local that has a `StorageDead` has a\n+                            // `StorageDead` in every control flow path leading to a `return` terminator.\n+                            if self.local_has_storage_dead(place.local) {\n+                                self.check_op(ops::TransientCellBorrow);\n+                            } else {\n+                                self.check_op(ops::CellBorrow);\n+                            }\n+                        }\n                     }\n                 }\n             }"}]}