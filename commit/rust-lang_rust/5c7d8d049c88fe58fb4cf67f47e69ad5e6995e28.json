{"sha": "5c7d8d049c88fe58fb4cf67f47e69ad5e6995e28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjN2Q4ZDA0OWM4OGZlNThmYjRjZjY3ZjQ3ZTY5YWQ1ZTY5OTVlMjg=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-22T19:17:40Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-22T19:17:40Z"}, "message": "Only call `collect_tokens` when we have an attribute to parse", "tree": {"sha": "5c9ce4be1f7d09232a81d8f8d7604018a831ee27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c9ce4be1f7d09232a81d8f8d7604018a831ee27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c7d8d049c88fe58fb4cf67f47e69ad5e6995e28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl+R2t4ACgkQtAh+UQ6Y\nsWQMjw/7BmyDAsglfvtP/VsfAb6V31/VVNgwu7IDie852JCR5zznAl2MuRu96far\njJAxlyBcB20/RFdC4+EjAm+XlDhhcOoCN9Qu/b9naCPjL4AbFlRJU0lA3bGUSEbx\njbTO2FMAuiljGATvbbv+3dl8ewh2lzA3v815VtEk253BheZHvC+jgh1SGTtpF2uy\nMSPD79JkJY5XEaXhnItmyzuvWbIii1LCjfDagOkJi1VyWz6RWXAmQtlpOPXcTT2w\n+GSMTDR+pZbaeNWw6ZcuFTKyhX55vEXZsTUS0J2lgATsd4JLIGj+vL07YAC/WQKK\nXBcuQWKPkL4xZMBEGQeMW2lo4rcl+8zX2I8pnjoGNQN4h/C8NhYMLslc/fnMJz9J\nnhIiTEI/ZE7V0BIzccELM3J4788McPaHmLAkKuHcWTo0p7SjP2AfuYBtWxSQESt/\nE3UVmhu+OK0w7GWicm7Fo1zf8YwLefbe5sOBAaLal7vWd4hJItnFevwroOdgNi+t\nY9aWZ63GgZB5YnJOSj5pkh5I6RmDjmw+DFFCzpYC9dWGFpO9A8ZcMwASpXI6eITz\n7GbxCikREbXTExyvGBTWzSPKpI8pN4f2hJUsVXHw2/GeN390QG2/5OEodKXrDAMB\nt2kj+JjuvyDKFA/MnuqFsXzJwu9OGZszp7TibflELWw/rJl8RaM=\n=A8g0\n-----END PGP SIGNATURE-----", "payload": "tree 5c9ce4be1f7d09232a81d8f8d7604018a831ee27\nparent 920bed121337538e4dbf58a73750157f5666cb72\nauthor Aaron Hill <aa1ronham@gmail.com> 1603394260 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1603394260 -0400\n\nOnly call `collect_tokens` when we have an attribute to parse\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c7d8d049c88fe58fb4cf67f47e69ad5e6995e28", "html_url": "https://github.com/rust-lang/rust/commit/5c7d8d049c88fe58fb4cf67f47e69ad5e6995e28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c7d8d049c88fe58fb4cf67f47e69ad5e6995e28/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920bed121337538e4dbf58a73750157f5666cb72", "url": "https://api.github.com/repos/rust-lang/rust/commits/920bed121337538e4dbf58a73750157f5666cb72", "html_url": "https://github.com/rust-lang/rust/commit/920bed121337538e4dbf58a73750157f5666cb72"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "053b7e0b75fe4cf731f4d6c59c80bc92f6c03f89", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5c7d8d049c88fe58fb4cf67f47e69ad5e6995e28/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c7d8d049c88fe58fb4cf67f47e69ad5e6995e28/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=5c7d8d049c88fe58fb4cf67f47e69ad5e6995e28", "patch": "@@ -29,9 +29,9 @@ impl<'a> Parser<'a> {\n         let mut attrs: Vec<ast::Attribute> = Vec::new();\n         let mut just_parsed_doc_comment = false;\n         loop {\n-            let (attr, tokens) = self.collect_tokens(|this| {\n-                debug!(\"parse_outer_attributes: self.token={:?}\", this.token);\n-                if this.check(&token::Pound) {\n+            debug!(\"parse_outer_attributes: self.token={:?}\", self.token);\n+            let (attr, tokens) = if self.check(&token::Pound) {\n+                self.collect_tokens(|this| {\n                     let inner_error_reason = if just_parsed_doc_comment {\n                         \"an inner attribute is not permitted following an outer doc comment\"\n                     } else if !attrs.is_empty() {\n@@ -47,7 +47,9 @@ impl<'a> Parser<'a> {\n                     let attr = this.parse_attribute_with_inner_parse_policy(inner_parse_policy)?;\n                     just_parsed_doc_comment = false;\n                     Ok(Some(attr))\n-                } else if let token::DocComment(comment_kind, attr_style, data) = this.token.kind {\n+                })?\n+            } else if let token::DocComment(comment_kind, attr_style, data) = self.token.kind {\n+                self.collect_tokens(|this| {\n                     let attr =\n                         attr::mk_doc_comment(comment_kind, attr_style, data, this.token.span);\n                     if attr.style != ast::AttrStyle::Outer {\n@@ -67,10 +69,11 @@ impl<'a> Parser<'a> {\n                     this.bump();\n                     just_parsed_doc_comment = true;\n                     Ok(Some(attr))\n-                } else {\n-                    Ok(None)\n-                }\n-            })?;\n+                })?\n+            } else {\n+                (None, None)\n+            };\n+\n             if let Some(mut attr) = attr {\n                 attr.tokens = tokens;\n                 attrs.push(attr);\n@@ -192,26 +195,29 @@ impl<'a> Parser<'a> {\n     crate fn parse_inner_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n         let mut attrs: Vec<ast::Attribute> = vec![];\n         loop {\n-            let (attr, tokens) = self.collect_tokens(|this| {\n-                // Only try to parse if it is an inner attribute (has `!`).\n-                if this.check(&token::Pound) && this.look_ahead(1, |t| t == &token::Not) {\n-                    let attr = this.parse_attribute(true)?;\n-                    assert_eq!(attr.style, ast::AttrStyle::Inner);\n-                    Ok(Some(attr))\n-                } else if let token::DocComment(comment_kind, attr_style, data) = this.token.kind {\n-                    // We need to get the position of this token before we bump.\n-                    let attr =\n-                        attr::mk_doc_comment(comment_kind, attr_style, data, this.token.span);\n-                    if attr.style == ast::AttrStyle::Inner {\n-                        this.bump();\n+            // Only try to parse if it is an inner attribute (has `!`).\n+            let (attr, tokens) =\n+                if self.check(&token::Pound) && self.look_ahead(1, |t| t == &token::Not) {\n+                    self.collect_tokens(|this| {\n+                        let attr = this.parse_attribute(true)?;\n+                        assert_eq!(attr.style, ast::AttrStyle::Inner);\n                         Ok(Some(attr))\n-                    } else {\n-                        Ok(None)\n-                    }\n+                    })?\n+                } else if let token::DocComment(comment_kind, attr_style, data) = self.token.kind {\n+                    self.collect_tokens(|this| {\n+                        // We need to get the position of this token before we bump.\n+                        let attr =\n+                            attr::mk_doc_comment(comment_kind, attr_style, data, this.token.span);\n+                        if attr.style == ast::AttrStyle::Inner {\n+                            this.bump();\n+                            Ok(Some(attr))\n+                        } else {\n+                            Ok(None)\n+                        }\n+                    })?\n                 } else {\n-                    Ok(None)\n-                }\n-            })?;\n+                    (None, None)\n+                };\n             if let Some(mut attr) = attr {\n                 attr.tokens = tokens;\n                 attrs.push(attr);"}]}