{"sha": "72ac8ce9aa50d4456239755076a5dd869232006e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYWM4Y2U5YWE1MGQ0NDU2MjM5NzU1MDc2YTVkZDg2OTIzMjAwNmU=", "commit": {"author": {"name": "CrLF0710", "email": "crlf0710@gmail.com", "date": "2019-07-07T04:16:13Z"}, "committer": {"name": "CrLF0710", "email": "crlf0710@gmail.com", "date": "2019-07-07T04:16:13Z"}, "message": "Stablize Euclidean Modulo (feature euclidean_division)", "tree": {"sha": "135a6a05bec166ac3d2b588e4a9a5c55f13049fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/135a6a05bec166ac3d2b588e4a9a5c55f13049fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72ac8ce9aa50d4456239755076a5dd869232006e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72ac8ce9aa50d4456239755076a5dd869232006e", "html_url": "https://github.com/rust-lang/rust/commit/72ac8ce9aa50d4456239755076a5dd869232006e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72ac8ce9aa50d4456239755076a5dd869232006e/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0bd5f236d9bea38b8c9048f379fec179b09984c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0bd5f236d9bea38b8c9048f379fec179b09984c", "html_url": "https://github.com/rust-lang/rust/commit/b0bd5f236d9bea38b8c9048f379fec179b09984c"}], "stats": {"total": 61, "additions": 20, "deletions": 41}, "files": [{"sha": "67e30e7ffcb24d371d9f4c691d6e4c3cab5b62aa", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/72ac8ce9aa50d4456239755076a5dd869232006e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ac8ce9aa50d4456239755076a5dd869232006e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=72ac8ce9aa50d4456239755076a5dd869232006e", "patch": "@@ -717,13 +717,12 @@ returning `None` if `rhs == 0` or the division results in overflow.\n Basic usage:\n \n ```\n-#![feature(euclidean_division)]\n assert_eq!((\", stringify!($SelfT),\n \"::min_value() + 1).checked_div_euclid(-1), Some(\", stringify!($Max), \"));\n assert_eq!(\", stringify!($SelfT), \"::min_value().checked_div_euclid(-1), None);\n assert_eq!((1\", stringify!($SelfT), \").checked_div_euclid(0), None);\n ```\"),\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -774,14 +773,13 @@ if `rhs == 0` or the division results in overflow.\n Basic usage:\n \n ```\n-#![feature(euclidean_division)]\n use std::\", stringify!($SelfT), \";\n \n assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(2), Some(1));\n assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem_euclid(-1), None);\n ```\"),\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1210,11 +1208,10 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-#![feature(euclidean_division)]\n assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euclid(10), 10);\n assert_eq!((-128i8).wrapping_div_euclid(-1), -128);\n ```\"),\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1269,11 +1266,10 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-#![feature(euclidean_division)]\n assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\n assert_eq!((-128i8).wrapping_rem_euclid(-1), 0);\n ```\"),\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1566,15 +1562,14 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-#![feature(euclidean_division)]\n use std::\", stringify!($SelfT), \";\n \n assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euclid(2), (2, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_div_euclid(-1), (\", stringify!($SelfT),\n \"::MIN, true));\n ```\"),\n             #[inline]\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n@@ -1636,13 +1631,12 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-#![feature(euclidean_division)]\n use std::\", stringify!($SelfT), \";\n \n assert_eq!(5\", stringify!($SelfT), \".overflowing_rem_euclid(2), (1, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem_euclid(-1), (0, true));\n ```\"),\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1873,7 +1867,6 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-#![feature(euclidean_division)]\n let a: \", stringify!($SelfT), \" = 7; // or any other integer type\n let b = 4;\n \n@@ -1882,7 +1875,7 @@ assert_eq!(a.div_euclid(-b), -1); // 7 >= -4 * -1\n assert_eq!((-a).div_euclid(b), -2); // -7 >= 4 * -2\n assert_eq!((-a).div_euclid(-b), 2); // -7 >= -4 * 2\n ```\"),\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1913,7 +1906,6 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-#![feature(euclidean_division)]\n let a: \", stringify!($SelfT), \" = 7; // or any other integer type\n let b = 4;\n \n@@ -1922,7 +1914,7 @@ assert_eq!((-a).rem_euclid(b), 1);\n assert_eq!(a.rem_euclid(-b), 3);\n assert_eq!((-a).rem_euclid(-b), 1);\n ```\"),\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2753,11 +2745,10 @@ if `rhs == 0`.\n Basic usage:\n \n ```\n-#![feature(euclidean_division)]\n assert_eq!(128\", stringify!($SelfT), \".checked_div_euclid(2), Some(64));\n assert_eq!(1\", stringify!($SelfT), \".checked_div_euclid(0), None);\n ```\"),\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2805,11 +2796,10 @@ if `rhs == 0`.\n Basic usage:\n \n ```\n-#![feature(euclidean_division)]\n assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(2), Some(1));\n assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n ```\"),\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3127,10 +3117,9 @@ is exactly equal to `self.wrapping_div(rhs)`.\n Basic usage:\n \n ```\n-#![feature(euclidean_division)]\n assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euclid(10), 10);\n ```\"),\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3179,10 +3168,9 @@ is exactly equal to `self.wrapping_rem(rhs)`.\n Basic usage:\n \n ```\n-#![feature(euclidean_division)]\n assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\n ```\"),\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3448,11 +3436,10 @@ This function will panic if `rhs` is 0.\n Basic usage\n \n ```\n-#![feature(euclidean_division)]\n assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euclid(2), (2, false));\n ```\"),\n             #[inline]\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n@@ -3508,11 +3495,10 @@ This function will panic if `rhs` is 0.\n Basic usage\n \n ```\n-#![feature(euclidean_division)]\n assert_eq!(5\", stringify!($SelfT), \".overflowing_rem_euclid(2), (1, false));\n ```\"),\n             #[inline]\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n@@ -3696,10 +3682,9 @@ is exactly equal to `self / rhs`.\n Basic usage:\n \n ```\n-#![feature(euclidean_division)]\n assert_eq!(7\", stringify!($SelfT), \".div_euclid(4), 1); // or any other integer type\n ```\"),\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3722,10 +3707,9 @@ is exactly equal to `self % rhs`.\n Basic usage:\n \n ```\n-#![feature(euclidean_division)]\n assert_eq!(7\", stringify!($SelfT), \".rem_euclid(4), 3); // or any other integer type\n ```\"),\n-            #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+            #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]"}, {"sha": "955ae155310a197ab0ff6f117934462914dcf07d", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ac8ce9aa50d4456239755076a5dd869232006e/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ac8ce9aa50d4456239755076a5dd869232006e/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=72ac8ce9aa50d4456239755076a5dd869232006e", "patch": "@@ -4,7 +4,6 @@\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n #![feature(dec2flt)]\n-#![feature(euclidean_division)]\n #![feature(exact_size_is_empty)]\n #![feature(fixed_size_array)]\n #![feature(flt2dec)]"}, {"sha": "f649170c40372d12bb48817a41ba308ace79e6e2", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72ac8ce9aa50d4456239755076a5dd869232006e/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ac8ce9aa50d4456239755076a5dd869232006e/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=72ac8ce9aa50d4456239755076a5dd869232006e", "patch": "@@ -256,7 +256,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(euclidean_division)]\n     /// let a: f32 = 7.0;\n     /// let b = 4.0;\n     /// assert_eq!(a.div_euclid(b), 1.0); // 7.0 > 4.0 * 1.0\n@@ -265,7 +264,7 @@ impl f32 {\n     /// assert_eq!((-a).div_euclid(-b), 2.0); // -7.0 >= -4.0 * 2.0\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+    #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n     pub fn div_euclid(self, rhs: f32) -> f32 {\n         let q = (self / rhs).trunc();\n         if self % rhs < 0.0 {\n@@ -288,7 +287,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(euclidean_division)]\n     /// let a: f32 = 7.0;\n     /// let b = 4.0;\n     /// assert_eq!(a.rem_euclid(b), 3.0);\n@@ -299,7 +297,7 @@ impl f32 {\n     /// assert!((-std::f32::EPSILON).rem_euclid(3.0) != 0.0);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+    #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n     pub fn rem_euclid(self, rhs: f32) -> f32 {\n         let r = self % rhs;\n         if r < 0.0 {"}, {"sha": "f61630997dcdb42003790d0acaf9092f346e8d32", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72ac8ce9aa50d4456239755076a5dd869232006e/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ac8ce9aa50d4456239755076a5dd869232006e/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=72ac8ce9aa50d4456239755076a5dd869232006e", "patch": "@@ -232,7 +232,6 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(euclidean_division)]\n     /// let a: f64 = 7.0;\n     /// let b = 4.0;\n     /// assert_eq!(a.div_euclid(b), 1.0); // 7.0 > 4.0 * 1.0\n@@ -241,7 +240,7 @@ impl f64 {\n     /// assert_eq!((-a).div_euclid(-b), 2.0); // -7.0 >= -4.0 * 2.0\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+    #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n     pub fn div_euclid(self, rhs: f64) -> f64 {\n         let q = (self / rhs).trunc();\n         if self % rhs < 0.0 {\n@@ -264,7 +263,6 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(euclidean_division)]\n     /// let a: f64 = 7.0;\n     /// let b = 4.0;\n     /// assert_eq!(a.rem_euclid(b), 3.0);\n@@ -275,7 +273,7 @@ impl f64 {\n     /// assert!((-std::f64::EPSILON).rem_euclid(3.0) != 0.0);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n+    #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n     pub fn rem_euclid(self, rhs: f64) -> f64 {\n         let r = self % rhs;\n         if r < 0.0 {"}]}