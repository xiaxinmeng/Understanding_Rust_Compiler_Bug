{"sha": "05b989e16e7c6a7d4364f33f2612e540a50b1a27", "node_id": "C_kwDOAAsO6NoAKDA1Yjk4OWUxNmU3YzZhN2Q0MzY0ZjMzZjI2MTJlNTQwYTUwYjFhMjc", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-01T19:03:49Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T14:26:54Z"}, "message": "Skip lifetimes in binders when visiting", "tree": {"sha": "5bd0b800319ab45fef380545ef5508f08912d01e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bd0b800319ab45fef380545ef5508f08912d01e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05b989e16e7c6a7d4364f33f2612e540a50b1a27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLr1y4ACgkQgTGiTgx5\n7684+w/+I4uUqNve3T7Vw8hIqe+8o4NK5M+wRENMrx+sD56JMN4hgrGl91Cu5dYi\nDFPLm3a7l45Qt+/QvHMrdOAX6DXZpWrhZeE7nqEMjbteSrNAoO5KKccjzQ/IMn99\nM2pHXEQqTGy6QuzE16IHzxfNIfc4gG/DIKgfyMnJcy0Wqf55ORHmYrpPUd6P1gnl\nCKqUvWmD6ozDBIfmWi3sbvbm8ZhjyiFth5Ik5aiSJxVjAevJW9a9xbh5xcTWkMCw\npGjHNxTmypO6mVvgSgdU4qDTOyhR1umOXLiXuNOc4175w2PAh80AQrnipG7nlEnm\nNMQCc2GhrSGfga+zgBECfGej76dtS6NUDH0QGyfEt1tI/qXzCg6WNVgvt4TFEbjW\nsO+niBiWUZfX9LB0czkMwAoj75yM3gqLO1Og3JD7gt9yfd78WOLAl1jBSeEeqeDV\nuGcqyvF9AhST5a1C92bY1petH1wk9mG5phfRJnQwMS/kwCevfrQmlamSvlP7avL2\nUIbdqnbwKU1z+cZPUUCeAxzCR+bIg5IqhpecbQW2oq+e4wJB2ZMtJCNKsiQOykxZ\nK/Q15BygzIs5rCC4L7S1eLycretKpylvDFk+4Qc5IwBMRlPU3JAcfp/aiqvUMgqU\nnNOIcaLARza09d9mm2/f39OwMOG8hCnuTgQaaGzO2h4lZqTIoN8=\n=Jc07\n-----END PGP SIGNATURE-----", "payload": "tree 5bd0b800319ab45fef380545ef5508f08912d01e\nparent 4f334f2b970c3149365d4d98f02090d52767e44f\nauthor Santiago Pastorino <spastorino@gmail.com> 1659380629 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659623214 -0300\n\nSkip lifetimes in binders when visiting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05b989e16e7c6a7d4364f33f2612e540a50b1a27", "html_url": "https://github.com/rust-lang/rust/commit/05b989e16e7c6a7d4364f33f2612e540a50b1a27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05b989e16e7c6a7d4364f33f2612e540a50b1a27/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f334f2b970c3149365d4d98f02090d52767e44f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f334f2b970c3149365d4d98f02090d52767e44f", "html_url": "https://github.com/rust-lang/rust/commit/4f334f2b970c3149365d4d98f02090d52767e44f"}], "stats": {"total": 154, "additions": 76, "deletions": 78}, "files": [{"sha": "c21afa26f4fe5acd8ebf2f3e6b29ce776213494f", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 37, "deletions": 55, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/05b989e16e7c6a7d4364f33f2612e540a50b1a27/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b989e16e7c6a7d4364f33f2612e540a50b1a27/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=05b989e16e7c6a7d4364f33f2612e540a50b1a27", "patch": "@@ -1353,12 +1353,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }),\n                 );\n \n-                let (lifetimes_in_bounds, binders_to_ignore) =\n-                    lifetime_collector::lifetimes_in_bounds(bounds);\n+                let lifetimes_in_bounds =\n+                    lifetime_collector::lifetimes_in_bounds(&lctx.resolver, bounds);\n                 debug!(?lifetimes_in_bounds);\n-                debug!(?binders_to_ignore);\n \n-                lctx.create_and_capture_lifetime_defs(&lifetimes_in_bounds, &binders_to_ignore);\n+                lctx.create_and_capture_lifetime_defs(&lifetimes_in_bounds);\n \n                 let ret = lctx.lower_param_bounds(bounds, itctx);\n \n@@ -1447,11 +1446,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::OwnerNode::Item(self.arena.alloc(opaque_ty_item))\n     }\n \n-    fn create_and_capture_lifetime_defs(\n-        &mut self,\n-        lifetimes_in_bounds: &[&Lifetime],\n-        binders_to_ignore: &FxHashMap<NodeId, Vec<NodeId>>,\n-    ) {\n+    fn create_and_capture_lifetime_defs(&mut self, lifetimes_in_bounds: &[&Lifetime]) {\n         for lifetime in lifetimes_in_bounds {\n             let ident = lifetime.ident;\n             let span = ident.span;\n@@ -1461,53 +1456,41 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n             if let Some(mut captured_lifetimes) = self.captured_lifetimes.take() {\n                 match res {\n-                    LifetimeRes::Param { param, binder } => {\n-                        if !binders_to_ignore\n-                            .get(&lifetime.id)\n-                            .unwrap_or(&Vec::new())\n-                            .contains(&binder)\n-                        {\n-                            match captured_lifetimes.captures.entry(param) {\n-                                Entry::Occupied(_) => {}\n-                                Entry::Vacant(v) => {\n-                                    let node_id = self.next_node_id();\n-                                    let name = ParamName::Plain(ident);\n-\n-                                    self.create_def(\n-                                        captured_lifetimes.parent_def_id,\n-                                        node_id,\n-                                        DefPathData::LifetimeNs(name.ident().name),\n-                                    );\n-\n-                                    v.insert((span, node_id, name, res));\n-                                }\n+                    LifetimeRes::Param { param, binder: _ } => {\n+                        match captured_lifetimes.captures.entry(param) {\n+                            Entry::Occupied(_) => {}\n+                            Entry::Vacant(v) => {\n+                                let node_id = self.next_node_id();\n+                                let name = ParamName::Plain(ident);\n+\n+                                self.create_def(\n+                                    captured_lifetimes.parent_def_id,\n+                                    node_id,\n+                                    DefPathData::LifetimeNs(name.ident().name),\n+                                );\n+\n+                                v.insert((span, node_id, name, res));\n                             }\n                         }\n                     }\n \n-                    LifetimeRes::Fresh { param, binder } => {\n+                    LifetimeRes::Fresh { param, binder: _ } => {\n                         debug_assert_eq!(ident.name, kw::UnderscoreLifetime);\n-                        if !binders_to_ignore\n-                            .get(&lifetime.id)\n-                            .unwrap_or(&Vec::new())\n-                            .contains(&binder)\n-                        {\n-                            let param = self.local_def_id(param);\n-                            match captured_lifetimes.captures.entry(param) {\n-                                Entry::Occupied(_) => {}\n-                                Entry::Vacant(v) => {\n-                                    let node_id = self.next_node_id();\n-\n-                                    let name = ParamName::Fresh;\n-\n-                                    self.create_def(\n-                                        captured_lifetimes.parent_def_id,\n-                                        node_id,\n-                                        DefPathData::LifetimeNs(kw::UnderscoreLifetime),\n-                                    );\n-\n-                                    v.insert((span, node_id, name, res));\n-                                }\n+                        let param = self.local_def_id(param);\n+                        match captured_lifetimes.captures.entry(param) {\n+                            Entry::Occupied(_) => {}\n+                            Entry::Vacant(v) => {\n+                                let node_id = self.next_node_id();\n+\n+                                let name = ParamName::Fresh;\n+\n+                                self.create_def(\n+                                    captured_lifetimes.parent_def_id,\n+                                    node_id,\n+                                    DefPathData::LifetimeNs(kw::UnderscoreLifetime),\n+                                );\n+\n+                                v.insert((span, node_id, name, res));\n                             }\n                         }\n                     }\n@@ -1758,12 +1741,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }),\n             );\n \n-            let (lifetimes_in_bounds, binders_to_ignore) =\n-                lifetime_collector::lifetimes_in_ret_ty(output);\n+            let lifetimes_in_bounds =\n+                lifetime_collector::lifetimes_in_ret_ty(&this.resolver, output);\n             debug!(?lifetimes_in_bounds);\n-            debug!(?binders_to_ignore);\n \n-            this.create_and_capture_lifetime_defs(&lifetimes_in_bounds, &binders_to_ignore);\n+            this.create_and_capture_lifetime_defs(&lifetimes_in_bounds);\n \n             // We have to be careful to get elision right here. The\n             // idea is that we create a lifetime parameter for each"}, {"sha": "f67cbd69e47498a496a1cda13aa4b597459101f4", "filename": "compiler/rustc_ast_lowering/src/lifetime_collector.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/05b989e16e7c6a7d4364f33f2612e540a50b1a27/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b989e16e7c6a7d4364f33f2612e540a50b1a27/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs?ref=05b989e16e7c6a7d4364f33f2612e540a50b1a27", "patch": "@@ -1,21 +1,32 @@\n+use super::ResolverAstLoweringExt;\n use rustc_ast::visit::{self, BoundKind, LifetimeCtxt, Visitor};\n use rustc_ast::{\n     FnRetTy, GenericBounds, Lifetime, NodeId, PolyTraitRef, TraitBoundModifier, Ty, TyKind,\n };\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def::LifetimeRes;\n+use rustc_middle::ty::ResolverAstLowering;\n \n-struct LifetimeCollectVisitor<'ast> {\n+struct LifetimeCollectVisitor<'this, 'ast: 'this> {\n+    resolver: &'this ResolverAstLowering,\n     current_binders: Vec<NodeId>,\n-    binders_to_ignore: FxHashMap<NodeId, Vec<NodeId>>,\n     collected_lifetimes: Vec<&'ast Lifetime>,\n }\n \n-impl<'ast> Visitor<'ast> for LifetimeCollectVisitor<'ast> {\n+impl<'this, 'ast: 'this> LifetimeCollectVisitor<'this, 'ast> {\n+    fn new(resolver: &'this ResolverAstLowering) -> Self {\n+        Self { resolver, current_binders: Vec::new(), collected_lifetimes: Vec::new() }\n+    }\n+}\n+\n+impl<'this, 'ast: 'this> Visitor<'ast> for LifetimeCollectVisitor<'this, 'ast> {\n     fn visit_lifetime(&mut self, lifetime: &'ast Lifetime, _: LifetimeCtxt) {\n-        if !self.collected_lifetimes.contains(&lifetime) {\n-            self.collected_lifetimes.push(lifetime);\n+        let res = self.resolver.get_lifetime_res(lifetime.id).unwrap_or(LifetimeRes::Error);\n+\n+        if res.binder().map_or(true, |b| !self.current_binders.contains(&b)) {\n+            if !self.collected_lifetimes.contains(&lifetime) {\n+                self.collected_lifetimes.push(lifetime);\n+            }\n         }\n-        self.binders_to_ignore.insert(lifetime.id, self.current_binders.clone());\n     }\n \n     fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n@@ -37,26 +48,22 @@ impl<'ast> Visitor<'ast> for LifetimeCollectVisitor<'ast> {\n     }\n }\n \n-pub fn lifetimes_in_ret_ty(ret_ty: &FnRetTy) -> (Vec<&Lifetime>, FxHashMap<NodeId, Vec<NodeId>>) {\n-    let mut visitor = LifetimeCollectVisitor {\n-        current_binders: Vec::new(),\n-        binders_to_ignore: FxHashMap::default(),\n-        collected_lifetimes: Vec::new(),\n-    };\n+pub fn lifetimes_in_ret_ty<'this, 'ast: 'this>(\n+    resolver: &'this ResolverAstLowering,\n+    ret_ty: &'ast FnRetTy,\n+) -> Vec<&'ast Lifetime> {\n+    let mut visitor = LifetimeCollectVisitor::new(resolver);\n     visitor.visit_fn_ret_ty(ret_ty);\n-    (visitor.collected_lifetimes, visitor.binders_to_ignore)\n+    visitor.collected_lifetimes\n }\n \n-pub fn lifetimes_in_bounds(\n-    bounds: &GenericBounds,\n-) -> (Vec<&Lifetime>, FxHashMap<NodeId, Vec<NodeId>>) {\n-    let mut visitor = LifetimeCollectVisitor {\n-        current_binders: Vec::new(),\n-        binders_to_ignore: FxHashMap::default(),\n-        collected_lifetimes: Vec::new(),\n-    };\n+pub fn lifetimes_in_bounds<'this, 'ast: 'this>(\n+    resolver: &'this ResolverAstLowering,\n+    bounds: &'ast GenericBounds,\n+) -> Vec<&'ast Lifetime> {\n+    let mut visitor = LifetimeCollectVisitor::new(resolver);\n     for bound in bounds {\n         visitor.visit_param_bound(bound, BoundKind::Bound);\n     }\n-    (visitor.collected_lifetimes, visitor.binders_to_ignore)\n+    visitor.collected_lifetimes\n }"}, {"sha": "2a89947f927625d1b51b4f7778759685326bad3e", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05b989e16e7c6a7d4364f33f2612e540a50b1a27/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b989e16e7c6a7d4364f33f2612e540a50b1a27/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=05b989e16e7c6a7d4364f33f2612e540a50b1a27", "patch": "@@ -747,3 +747,12 @@ pub enum LifetimeRes {\n     /// HACK: This is used to recover the NodeId of an elided lifetime.\n     ElidedAnchor { start: NodeId, end: NodeId },\n }\n+\n+impl LifetimeRes {\n+    pub fn binder(&self) -> Option<NodeId> {\n+        match self {\n+            LifetimeRes::Param { binder, .. } | LifetimeRes::Fresh { binder, .. } => Some(*binder),\n+            _ => None,\n+        }\n+    }\n+}"}]}