{"sha": "6099d17afe622c2784caa2c215b7970a4424f908", "node_id": "C_kwDOAAsO6NoAKDYwOTlkMTdhZmU2MjJjMjc4NGNhYTJjMjE1Yjc5NzBhNDQyNGY5MDg", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-08-30T14:29:41Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-08-30T17:09:04Z"}, "message": "rustdoc: Resugar async fn return type in `clean`, not `html`\n\nThis way it also happens for json output.\n\nFixes #101199", "tree": {"sha": "cedbcb4cb92b4ab27f5ab9bc53e174dae3c6c930", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cedbcb4cb92b4ab27f5ab9bc53e174dae3c6c930"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6099d17afe622c2784caa2c215b7970a4424f908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6099d17afe622c2784caa2c215b7970a4424f908", "html_url": "https://github.com/rust-lang/rust/commit/6099d17afe622c2784caa2c215b7970a4424f908", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6099d17afe622c2784caa2c215b7970a4424f908/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0631ea5d73f4a3199c776687b12c20c50a91f0d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0631ea5d73f4a3199c776687b12c20c50a91f0d2", "html_url": "https://github.com/rust-lang/rust/commit/0631ea5d73f4a3199c776687b12c20c50a91f0d2"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "41f9eb3cdf6bd5bb040ab7359fd2764cfe831e1d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6099d17afe622c2784caa2c215b7970a4424f908/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6099d17afe622c2784caa2c215b7970a4424f908/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6099d17afe622c2784caa2c215b7970a4424f908", "patch": "@@ -886,7 +886,10 @@ fn clean_function<'tcx>(\n         // NOTE: generics must be cleaned before args\n         let generics = clean_generics(generics, cx);\n         let args = clean_args_from_types_and_body_id(cx, sig.decl.inputs, body_id);\n-        let decl = clean_fn_decl_with_args(cx, sig.decl, args);\n+        let mut decl = clean_fn_decl_with_args(cx, sig.decl, args);\n+        if sig.header.is_async() {\n+            decl.output = decl.sugared_async_return_type();\n+        }\n         (generics, decl)\n     });\n     Box::new(Function { decl, generics })"}, {"sha": "6f49f00f93e5eb98abd62017ee1adaf0c7ca62c3", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6099d17afe622c2784caa2c215b7970a4424f908/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6099d17afe622c2784caa2c215b7970a4424f908/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=6099d17afe622c2784caa2c215b7970a4424f908", "patch": "@@ -1310,22 +1310,19 @@ impl clean::FnDecl {\n     ///   <br>Used to determine line-wrapping.\n     /// * `indent`: The number of spaces to indent each successive line with, if line-wrapping is\n     ///   necessary.\n-    /// * `asyncness`: Whether the function is async or not.\n     pub(crate) fn full_print<'a, 'tcx: 'a>(\n         &'a self,\n         header_len: usize,\n         indent: usize,\n-        asyncness: hir::IsAsync,\n         cx: &'a Context<'tcx>,\n     ) -> impl fmt::Display + 'a + Captures<'tcx> {\n-        display_fn(move |f| self.inner_full_print(header_len, indent, asyncness, f, cx))\n+        display_fn(move |f| self.inner_full_print(header_len, indent, f, cx))\n     }\n \n     fn inner_full_print(\n         &self,\n         header_len: usize,\n         indent: usize,\n-        asyncness: hir::IsAsync,\n         f: &mut fmt::Formatter<'_>,\n         cx: &Context<'_>,\n     ) -> fmt::Result {\n@@ -1390,15 +1387,9 @@ impl clean::FnDecl {\n             args_plain.push_str(\", ...\");\n         }\n \n-        let arrow_plain;\n-        let arrow = if let hir::IsAsync::Async = asyncness {\n-            let output = self.sugared_async_return_type();\n-            arrow_plain = format!(\"{:#}\", output.print(cx));\n-            if f.alternate() { arrow_plain.clone() } else { format!(\"{}\", output.print(cx)) }\n-        } else {\n-            arrow_plain = format!(\"{:#}\", self.output.print(cx));\n-            if f.alternate() { arrow_plain.clone() } else { format!(\"{}\", self.output.print(cx)) }\n-        };\n+        let arrow_plain = format!(\"{:#}\", self.output.print(cx));\n+        let arrow =\n+            if f.alternate() { arrow_plain.clone() } else { format!(\"{}\", self.output.print(cx)) };\n \n         let declaration_len = header_len + args_plain.len() + arrow_plain.len();\n         let output = if declaration_len > 80 {"}, {"sha": "bc3d2d93da9bf9ea4b3386681442ef3b87c0e0c0", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6099d17afe622c2784caa2c215b7970a4424f908/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6099d17afe622c2784caa2c215b7970a4424f908/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6099d17afe622c2784caa2c215b7970a4424f908", "patch": "@@ -821,7 +821,7 @@ fn assoc_method(\n         href = href,\n         name = name,\n         generics = g.print(cx),\n-        decl = d.full_print(header_len, indent, header.asyncness, cx),\n+        decl = d.full_print(header_len, indent, cx),\n         notable_traits = notable_traits_decl(d, cx),\n         where_clause = print_where_clause(g, cx, indent, end_newline),\n     )"}, {"sha": "af8e27ce1a10ff527e52c65d0083395feae9a65e", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6099d17afe622c2784caa2c215b7970a4424f908/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6099d17afe622c2784caa2c215b7970a4424f908/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=6099d17afe622c2784caa2c215b7970a4424f908", "patch": "@@ -530,7 +530,7 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n                 name = name,\n                 generics = f.generics.print(cx),\n                 where_clause = print_where_clause(&f.generics, cx, 0, Ending::Newline),\n-                decl = f.decl.full_print(header_len, 0, header.asyncness, cx),\n+                decl = f.decl.full_print(header_len, 0, cx),\n                 notable_traits = notable_traits_decl(&f.decl, cx),\n             );\n         });"}, {"sha": "b89781ca92da659f1a694b40c5ada4323987928e", "filename": "src/test/rustdoc-json/fns/async_return.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6099d17afe622c2784caa2c215b7970a4424f908/src%2Ftest%2Frustdoc-json%2Ffns%2Fasync_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6099d17afe622c2784caa2c215b7970a4424f908/src%2Ftest%2Frustdoc-json%2Ffns%2Fasync_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fasync_return.rs?ref=6099d17afe622c2784caa2c215b7970a4424f908", "patch": "@@ -0,0 +1,36 @@\n+// edition:2021\n+// ignore-tidy-linelength\n+\n+// Regression test for <https://github.com/rust-lang/rust/issues/101199>\n+\n+use std::future::Future;\n+\n+// @is \"$.index[*][?(@.name=='get_int')].inner.decl.output\" '{\"inner\": \"i32\", \"kind\": \"primitive\"}'\n+// @is \"$.index[*][?(@.name=='get_int')].inner.header.async\" false\n+pub fn get_int() -> i32 {\n+    42\n+}\n+\n+// @is \"$.index[*][?(@.name=='get_int_async')].inner.decl.output\" '{\"inner\": \"i32\", \"kind\": \"primitive\"}'\n+// @is \"$.index[*][?(@.name=='get_int_async')].inner.header.async\" true\n+pub async fn get_int_async() -> i32 {\n+    42\n+}\n+\n+// @is \"$.index[*][?(@.name=='get_int_future')].inner.decl.output.kind\" '\"impl_trait\"'\n+// @is \"$.index[*][?(@.name=='get_int_future')].inner.decl.output.inner[0].trait_bound.trait.name\" '\"Future\"'\n+// @is \"$.index[*][?(@.name=='get_int_future')].inner.decl.output.inner[0].trait_bound.trait.args.angle_bracketed.bindings[0].name\" '\"Output\"'\n+// @is \"$.index[*][?(@.name=='get_int_future')].inner.decl.output.inner[0].trait_bound.trait.args.angle_bracketed.bindings[0].binding.equality.type\" '{\"inner\": \"i32\", \"kind\": \"primitive\"}'\n+// @is \"$.index[*][?(@.name=='get_int_future')].inner.header.async\" false\n+pub fn get_int_future() -> impl Future<Output = i32> {\n+    async { 42 }\n+}\n+\n+// @is \"$.index[*][?(@.name=='get_int_future_async')].inner.decl.output.kind\" '\"impl_trait\"'\n+// @is \"$.index[*][?(@.name=='get_int_future_async')].inner.decl.output.inner[0].trait_bound.trait.name\" '\"Future\"'\n+// @is \"$.index[*][?(@.name=='get_int_future_async')].inner.decl.output.inner[0].trait_bound.trait.args.angle_bracketed.bindings[0].name\" '\"Output\"'\n+// @is \"$.index[*][?(@.name=='get_int_future_async')].inner.decl.output.inner[0].trait_bound.trait.args.angle_bracketed.bindings[0].binding.equality.type\" '{\"inner\": \"i32\", \"kind\": \"primitive\"}'\n+// @is \"$.index[*][?(@.name=='get_int_future_async')].inner.header.async\" true\n+pub async fn get_int_future_async() -> impl Future<Output = i32> {\n+    async { 42 }\n+}"}]}