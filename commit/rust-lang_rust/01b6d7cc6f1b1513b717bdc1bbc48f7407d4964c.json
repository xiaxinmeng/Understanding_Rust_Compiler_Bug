{"sha": "01b6d7cc6f1b1513b717bdc1bbc48f7407d4964c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYjZkN2NjNmYxYjE1MTNiNzE3YmRjMWJiYzQ4Zjc0MDdkNDk2NGM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-30T16:35:00Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-07-08T13:17:36Z"}, "message": "libsyntax_pos: Tweak some visibilities", "tree": {"sha": "75602daab58611327a4a3d67bc85a8d19088543f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75602daab58611327a4a3d67bc85a8d19088543f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01b6d7cc6f1b1513b717bdc1bbc48f7407d4964c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01b6d7cc6f1b1513b717bdc1bbc48f7407d4964c", "html_url": "https://github.com/rust-lang/rust/commit/01b6d7cc6f1b1513b717bdc1bbc48f7407d4964c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01b6d7cc6f1b1513b717bdc1bbc48f7407d4964c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c0315cfd9750db7793b83bc59dfd353c5dd1624", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0315cfd9750db7793b83bc59dfd353c5dd1624", "html_url": "https://github.com/rust-lang/rust/commit/0c0315cfd9750db7793b83bc59dfd353c5dd1624"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "ff23c2fb534d530b151d2dc09405ce95b06582d7", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/01b6d7cc6f1b1513b717bdc1bbc48f7407d4964c/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b6d7cc6f1b1513b717bdc1bbc48f7407d4964c/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=01b6d7cc6f1b1513b717bdc1bbc48f7407d4964c", "patch": "@@ -27,16 +27,16 @@ use std::fmt;\n \n /// A SyntaxContext represents a chain of macro expansions (represented by marks).\n #[derive(Clone, Copy, PartialEq, Eq, Default, PartialOrd, Ord, Hash)]\n-pub struct SyntaxContext(pub(super) u32);\n+pub struct SyntaxContext(u32);\n \n #[derive(Copy, Clone, Debug)]\n-pub struct SyntaxContextData {\n-    pub outer_mark: Mark,\n-    pub prev_ctxt: SyntaxContext,\n+struct SyntaxContextData {\n+    outer_mark: Mark,\n+    prev_ctxt: SyntaxContext,\n     // This context, but with all transparent and semi-transparent marks filtered away.\n-    pub opaque: SyntaxContext,\n+    opaque: SyntaxContext,\n     // This context, but with all transparent marks filtered away.\n-    pub opaque_and_semitransparent: SyntaxContext,\n+    opaque_and_semitransparent: SyntaxContext,\n }\n \n /// A mark is a unique id associated with a macro expansion.\n@@ -198,15 +198,15 @@ impl Mark {\n }\n \n #[derive(Debug)]\n-pub struct HygieneData {\n+crate struct HygieneData {\n     marks: Vec<MarkData>,\n     syntax_contexts: Vec<SyntaxContextData>,\n     markings: HashMap<(SyntaxContext, Mark), SyntaxContext>,\n     default_edition: Edition,\n }\n \n impl HygieneData {\n-    pub fn new() -> Self {\n+    crate fn new() -> Self {\n         HygieneData {\n             marks: vec![MarkData {\n                 parent: Mark::root(),\n@@ -249,6 +249,14 @@ impl SyntaxContext {\n         SyntaxContext(0)\n     }\n \n+    crate fn as_u32(self) -> u32 {\n+        self.0\n+    }\n+\n+    crate fn from_u32(raw: u32) -> SyntaxContext {\n+        SyntaxContext(raw)\n+    }\n+\n     // Allocate a new SyntaxContext with the given ExpnInfo. This is used when\n     // deserializing Spans from the incr. comp. cache.\n     // FIXME(mw): This method does not restore MarkData::parent or"}, {"sha": "61af70af47d85a42287a303669ffbcdf77977156", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b6d7cc6f1b1513b717bdc1bbc48f7407d4964c/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b6d7cc6f1b1513b717bdc1bbc48f7407d4964c/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=01b6d7cc6f1b1513b717bdc1bbc48f7407d4964c", "patch": "@@ -19,10 +19,10 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(const_fn)]\n+#![feature(crate_visibility_modifier)]\n #![feature(custom_attribute)]\n #![feature(non_exhaustive)]\n #![feature(optin_builtin_traits)]\n-#![allow(unused_attributes)]\n #![feature(specialization)]\n #![feature(stdsimd)]\n "}, {"sha": "473aa1bd1b8a471e2e1c6de98169c8cc9965818d", "filename": "src/libsyntax_pos/span_encoding.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01b6d7cc6f1b1513b717bdc1bbc48f7407d4964c/src%2Flibsyntax_pos%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b6d7cc6f1b1513b717bdc1bbc48f7407d4964c/src%2Flibsyntax_pos%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fspan_encoding.rs?ref=01b6d7cc6f1b1513b717bdc1bbc48f7407d4964c", "patch": "@@ -100,7 +100,7 @@ const INTERNED_INDEX_OFFSET: u32 = 1;\n \n #[inline]\n fn encode(sd: &SpanData) -> Span {\n-    let (base, len, ctxt) = (sd.lo.0, sd.hi.0 - sd.lo.0, sd.ctxt.0);\n+    let (base, len, ctxt) = (sd.lo.0, sd.hi.0 - sd.lo.0, sd.ctxt.as_u32());\n \n     let val = if (base >> INLINE_SIZES[BASE_INDEX]) == 0 &&\n                  (len >> INLINE_SIZES[LEN_INDEX]) == 0 &&\n@@ -132,7 +132,7 @@ fn decode(span: Span) -> SpanData {\n         let index = extract(INTERNED_INDEX_OFFSET, INTERNED_INDEX_SIZE);\n         return with_span_interner(|interner| *interner.get(index));\n     };\n-    SpanData { lo: BytePos(base), hi: BytePos(base + len), ctxt: SyntaxContext(ctxt) }\n+    SpanData { lo: BytePos(base), hi: BytePos(base + len), ctxt: SyntaxContext::from_u32(ctxt) }\n }\n \n #[derive(Default)]"}]}