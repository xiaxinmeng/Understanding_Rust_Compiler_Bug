{"sha": "58844aee421eccc5399d6a5bec278de5149e8117", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ODQ0YWVlNDIxZWNjYzUzOTlkNmE1YmVjMjc4ZGU1MTQ5ZTgxMTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-06T01:42:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-06T01:42:58Z"}, "message": "rt: Make stack unwinding work more correctly with stack growth", "tree": {"sha": "ffdddc49fd0eeee46bd6d7d9be4892d767af87df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffdddc49fd0eeee46bd6d7d9be4892d767af87df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58844aee421eccc5399d6a5bec278de5149e8117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58844aee421eccc5399d6a5bec278de5149e8117", "html_url": "https://github.com/rust-lang/rust/commit/58844aee421eccc5399d6a5bec278de5149e8117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58844aee421eccc5399d6a5bec278de5149e8117/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a731f165df26cb7575133d549ffd2f548bb3de99", "url": "https://api.github.com/repos/rust-lang/rust/commits/a731f165df26cb7575133d549ffd2f548bb3de99", "html_url": "https://github.com/rust-lang/rust/commit/a731f165df26cb7575133d549ffd2f548bb3de99"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "a34ec4d86619321857cd2844130c6eac6a9a753c", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58844aee421eccc5399d6a5bec278de5149e8117/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/58844aee421eccc5399d6a5bec278de5149e8117/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=58844aee421eccc5399d6a5bec278de5149e8117", "patch": "@@ -131,6 +131,9 @@ rust_task::~rust_task()\n     //   (ref_count == 1 && this == sched->root_task));\n \n     // Delete all the stacks. There may be more than one if the task failed\n+    // FIXME: This is not correct. During unwinding we need to delete\n+    // the stacks and record the stack limit, otherwise the stack\n+    // stack is corrupted when destructors are running.\n     while (stk != NULL) {\n         del_stk(this, stk);\n     }"}, {"sha": "653db471fc0154f2d824a1d07b9e839ebc0fccee", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58844aee421eccc5399d6a5bec278de5149e8117/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/58844aee421eccc5399d6a5bec278de5149e8117/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=58844aee421eccc5399d6a5bec278de5149e8117", "patch": "@@ -228,8 +228,8 @@ upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n     try {\n         sched->c_context.call_shim_on_c_stack(args, fn_ptr);\n     } catch (...) {\n-        //task = rust_scheduler::get_task();\n-        //task->record_stack_limit();\n+        task = rust_scheduler::get_task();\n+        task->record_stack_limit();\n         throw;\n     }\n     task = rust_scheduler::get_task();"}, {"sha": "4e92a144085a0c04752344c1fbeab254c3e7d104", "filename": "src/test/run-fail/morestack2.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/58844aee421eccc5399d6a5bec278de5149e8117/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58844aee421eccc5399d6a5bec278de5149e8117/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=58844aee421eccc5399d6a5bec278de5149e8117", "patch": "@@ -0,0 +1,35 @@\n+// xfail-test\n+// error-pattern:explicit failure\n+// compile-flags:--stack-growth\n+\n+// This time we're testing that the stack limits are restored\n+// correctly after calling into the C stack and unwinding.\n+// See the hack in upcall_call_shim_on_c_stack where it messes\n+// with the stack limit.\n+\n+native mod rustrt {\n+    fn pin_task();\n+}\n+\n+fn getbig_call_c_and_fail(i: int) {\n+    if i != 0 {\n+        getbig_call_c_and_fail(i - 1);\n+    } else {\n+        rustrt::pin_task();\n+        fail;\n+    }\n+}\n+\n+resource and_then_get_big_again(_i: ()) {\n+    fn getbig(i: int) {\n+        if i != 0 {\n+            getbig(i - 1);\n+        }\n+    }\n+    getbig(100000);\n+}\n+\n+fn main() {\n+    let r = and_then_get_big_again(());\n+    getbig_call_c_and_fail(100000);\n+}\n\\ No newline at end of file"}]}