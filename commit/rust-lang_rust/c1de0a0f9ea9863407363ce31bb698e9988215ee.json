{"sha": "c1de0a0f9ea9863407363ce31bb698e9988215ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZGUwYTBmOWVhOTg2MzQwNzM2M2NlMzFiYjY5OGU5OTg4MjE1ZWU=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-02-17T21:57:14Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-02-19T23:58:06Z"}, "message": "Added a Pattern impl that delegates to the dereference of a type.\n\nThis allows to match with a `&String` or `&&str`, for example.", "tree": {"sha": "ee58e9afdedaddd01673998442a0916d0b801e35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee58e9afdedaddd01673998442a0916d0b801e35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1de0a0f9ea9863407363ce31bb698e9988215ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1de0a0f9ea9863407363ce31bb698e9988215ee", "html_url": "https://github.com/rust-lang/rust/commit/c1de0a0f9ea9863407363ce31bb698e9988215ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1de0a0f9ea9863407363ce31bb698e9988215ee/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee930b0262520e25c5b66b037c65dab538ce5e64", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee930b0262520e25c5b66b037c65dab538ce5e64", "html_url": "https://github.com/rust-lang/rust/commit/ee930b0262520e25c5b66b037c65dab538ce5e64"}], "stats": {"total": 121, "additions": 99, "deletions": 22}, "files": [{"sha": "a93083020334ec36677c4ec8e426f54b12fd6747", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c1de0a0f9ea9863407363ce31bb698e9988215ee/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1de0a0f9ea9863407363ce31bb698e9988215ee/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=c1de0a0f9ea9863407363ce31bb698e9988215ee", "patch": "@@ -75,7 +75,7 @@ macro_rules! delegate_iter {\n     };\n     (pattern $te:ty : $ti:ty) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a, P: CharEq> Iterator for $ti {\n+        impl<'a, P: Pattern<'a>> Iterator for $ti {\n             type Item = $te;\n \n             #[inline]\n@@ -88,7 +88,8 @@ macro_rules! delegate_iter {\n             }\n         }\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a, P: CharEq> DoubleEndedIterator for $ti {\n+        impl<'a, P: Pattern<'a>> DoubleEndedIterator for $ti\n+        where P::Searcher: DoubleEndedSearcher<'a> {\n             #[inline]\n             fn next_back(&mut self) -> Option<$te> {\n                 self.0.next_back()\n@@ -97,7 +98,8 @@ macro_rules! delegate_iter {\n     };\n     (pattern forward $te:ty : $ti:ty) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a, P: CharEq> Iterator for $ti {\n+        impl<'a, P: Pattern<'a>> Iterator for $ti\n+        where P::Searcher: DoubleEndedSearcher<'a> {\n             type Item = $te;\n \n             #[inline]\n@@ -610,7 +612,8 @@ where P::Searcher: DoubleEndedSearcher<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, Sep: CharEq> Iterator for CharSplitsN<'a, Sep> {\n+impl<'a, P: Pattern<'a>> Iterator for CharSplitsN<'a, P>\n+where P::Searcher: DoubleEndedSearcher<'a> {\n     type Item = &'a str;\n \n     #[inline]\n@@ -1379,7 +1382,7 @@ impl StrExt for str {\n         Split(CharSplits {\n             start: 0,\n             end: self.len(),\n-            matcher: pat.into_matcher(self),\n+            matcher: pat.into_searcher(self),\n             allow_trailing_empty: true,\n             finished: false,\n         })\n@@ -1413,7 +1416,7 @@ impl StrExt for str {\n \n     #[inline]\n     fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P> {\n-        MatchIndices(pat.into_matcher(self))\n+        MatchIndices(pat.into_searcher(self))\n     }\n \n     #[inline]\n@@ -1487,7 +1490,7 @@ impl StrExt for str {\n     where P::Searcher: DoubleEndedSearcher<'a> {\n         let mut i = 0;\n         let mut j = self.len();\n-        let mut matcher = pat.into_matcher(self);\n+        let mut matcher = pat.into_searcher(self);\n         if let Some((a, b)) = matcher.next_reject() {\n             i = a;\n             j = b; // Rember earliest known match, correct it below if\n@@ -1505,7 +1508,7 @@ impl StrExt for str {\n     #[inline]\n     fn trim_left_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str {\n         let mut i = 0;\n-        let mut matcher = pat.into_matcher(self);\n+        let mut matcher = pat.into_searcher(self);\n         if let Some((a, _)) = matcher.next_reject() {\n             i = a;\n         }\n@@ -1519,7 +1522,7 @@ impl StrExt for str {\n     fn trim_right_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n     where P::Searcher: ReverseSearcher<'a> {\n         let mut j = self.len();\n-        let mut matcher = pat.into_matcher(self);\n+        let mut matcher = pat.into_searcher(self);\n         if let Some((_, b)) = matcher.next_reject_back() {\n             j = b;\n         }\n@@ -1591,12 +1594,12 @@ impl StrExt for str {\n     }\n \n     fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {\n-        pat.into_matcher(self).next_match().map(|(i, _)| i)\n+        pat.into_searcher(self).next_match().map(|(i, _)| i)\n     }\n \n     fn rfind<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>\n     where P::Searcher: ReverseSearcher<'a> {\n-        pat.into_matcher(self).next_match_back().map(|(i, _)| i)\n+        pat.into_searcher(self).next_match_back().map(|(i, _)| i)\n     }\n \n     fn find_str<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {"}, {"sha": "501fc27b37626072e61c01a1ec357070577f5bcc", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 75, "deletions": 11, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/c1de0a0f9ea9863407363ce31bb698e9988215ee/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1de0a0f9ea9863407363ce31bb698e9988215ee/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=c1de0a0f9ea9863407363ce31bb698e9988215ee", "patch": "@@ -17,16 +17,16 @@ use super::CharEq;\n \n pub trait Pattern<'a>: Sized {\n     type Searcher: Searcher<'a>;\n-    fn into_matcher(self, haystack: &'a str) -> Self::Searcher;\n+    fn into_searcher(self, haystack: &'a str) -> Self::Searcher;\n \n     #[inline]\n     fn is_contained_in(self, haystack: &'a str) -> bool {\n-        self.into_matcher(haystack).next_match().is_some()\n+        self.into_searcher(haystack).next_match().is_some()\n     }\n \n     #[inline]\n     fn match_starts_at(self, haystack: &'a str, idx: usize) -> bool {\n-        let mut matcher = self.into_matcher(haystack);\n+        let mut matcher = self.into_searcher(haystack);\n         loop {\n             match matcher.next() {\n                 SearchStep::Match(i, _) if i == idx => return true,\n@@ -42,7 +42,7 @@ pub trait Pattern<'a>: Sized {\n     #[inline]\n     fn match_ends_at(self, haystack: &'a str, idx: usize) -> bool\n     where Self::Searcher: ReverseSearcher<'a> {\n-        let mut matcher = self.into_matcher(haystack);\n+        let mut matcher = self.into_searcher(haystack);\n         loop {\n             match matcher.next_back() {\n                 SearchStep::Match(_, j) if idx == j => return true,\n@@ -115,25 +115,27 @@ pub unsafe trait ReverseSearcher<'a>: Searcher<'a> {\n \n pub trait DoubleEndedSearcher<'a>: ReverseSearcher<'a> {}\n \n-// Impl for CharEq\n+// Impl for a CharEq wrapper\n \n-pub struct CharEqSearcher<'a, C> {\n+struct CharEqPattern<C: CharEq>(C);\n+\n+pub struct CharEqSearcher<'a, C: CharEq> {\n     char_eq: C,\n     haystack: &'a str,\n     char_indices: super::CharIndices<'a>,\n     #[allow(dead_code)]\n     ascii_only: bool,\n }\n \n-impl<'a, C: CharEq> Pattern<'a> for C {\n+impl<'a, C: CharEq> Pattern<'a> for CharEqPattern<C> {\n     type Searcher = CharEqSearcher<'a, C>;\n \n     #[inline]\n-    fn into_matcher(self, haystack: &'a str) -> CharEqSearcher<'a, C> {\n+    fn into_searcher(self, haystack: &'a str) -> CharEqSearcher<'a, C> {\n         CharEqSearcher {\n-            ascii_only: self.only_ascii(),\n+            ascii_only: self.0.only_ascii(),\n             haystack: haystack,\n-            char_eq: self,\n+            char_eq: self.0,\n             char_indices: haystack.char_indices(),\n         }\n     }\n@@ -203,7 +205,7 @@ impl<'a, 'b> Pattern<'a> for &'b str {\n     type Searcher = StrSearcher<'a, 'b>;\n \n     #[inline]\n-    fn into_matcher(self, haystack: &'a str) -> StrSearcher<'a, 'b> {\n+    fn into_searcher(self, haystack: &'a str) -> StrSearcher<'a, 'b> {\n         StrSearcher {\n             haystack: haystack,\n             needle: self,\n@@ -293,3 +295,65 @@ where F: FnOnce(&mut StrSearcher) -> SearchStep,\n         SearchStep::Done\n     }\n }\n+\n+macro_rules! associated_items {\n+    ($t:ty, $s:ident, $e:expr) => {\n+        // FIXME: #22463\n+        //type Searcher = $t;\n+\n+        fn into_searcher(self, haystack: &'a str) -> $t {\n+            let $s = self;\n+            $e.into_searcher(haystack)\n+        }\n+\n+        #[inline]\n+        fn is_contained_in(self, haystack: &'a str) -> bool {\n+            let $s = self;\n+            $e.is_contained_in(haystack)\n+        }\n+\n+        #[inline]\n+        fn match_starts_at(self, haystack: &'a str, idx: usize) -> bool {\n+            let $s = self;\n+            $e.match_starts_at(haystack, idx)\n+        }\n+\n+        // FIXME: #21750\n+        /*#[inline]\n+        fn match_ends_at(self, haystack: &'a str, idx: usize) -> bool\n+        where $t: ReverseSearcher<'a> {\n+            let $s = self;\n+            $e.match_ends_at(haystack, idx)\n+        }*/\n+    }\n+}\n+\n+// CharEq delegation impls\n+\n+impl<'a, 'b> Pattern<'a> for &'b [char] {\n+    type Searcher =   <CharEqPattern<Self> as Pattern<'a>>::Searcher;\n+    associated_items!(<CharEqPattern<Self> as Pattern<'a>>::Searcher,\n+                      s, CharEqPattern(s));\n+}\n+\n+impl<'a> Pattern<'a> for char {\n+    type Searcher =   <CharEqPattern<Self> as Pattern<'a>>::Searcher;\n+    associated_items!(<CharEqPattern<Self> as Pattern<'a>>::Searcher,\n+                      s, CharEqPattern(s));\n+}\n+\n+impl<'a, F> Pattern<'a> for F where F: FnMut(char) -> bool {\n+    type Searcher =   <CharEqPattern<Self> as Pattern<'a>>::Searcher;\n+    associated_items!(<CharEqPattern<Self> as Pattern<'a>>::Searcher,\n+                      s, CharEqPattern(s));\n+}\n+\n+// Deref-forward impl\n+\n+use ops::Deref;\n+\n+impl<'a, 'b, P: 'b + ?Sized, T: Deref<Target = P> + ?Sized> Pattern<'a> for &'b T where &'b P: Pattern<'a> {\n+    type Searcher =   <&'b P as Pattern<'a>>::Searcher;\n+    associated_items!(<&'b P as Pattern<'a>>::Searcher,\n+                      s, (&**s));\n+}"}, {"sha": "acd8cc42c7298fcd9baa7a6da28abb430b593217", "filename": "src/libcoretest/str.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1de0a0f9ea9863407363ce31bb698e9988215ee/src%2Flibcoretest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1de0a0f9ea9863407363ce31bb698e9988215ee/src%2Flibcoretest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fstr.rs?ref=c1de0a0f9ea9863407363ce31bb698e9988215ee", "patch": "@@ -8,6 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[test]\n+fn test_pattern_deref_forward() {\n+    let data = \"aabcdaa\";\n+    assert!(data.contains(\"bcd\"));\n+    assert!(data.contains(&\"bcd\"));\n+    assert!(data.contains(&&\"bcd\"));\n+    assert!(data.contains(&\"bcd\".to_string()));\n+    assert!(data.contains(&&\"bcd\".to_string()));\n+}\n+\n #[test]\n fn test_empty_match_indices() {\n     let data = \"a\u00e4\u4e2d!\";"}]}