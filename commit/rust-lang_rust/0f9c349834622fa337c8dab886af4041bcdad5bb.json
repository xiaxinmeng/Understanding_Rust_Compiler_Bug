{"sha": "0f9c349834622fa337c8dab886af4041bcdad5bb", "node_id": "C_kwDOAAsO6NoAKDBmOWMzNDk4MzQ2MjJmYTMzN2M4ZGFiODg2YWY0MDQxYmNkYWQ1YmI", "commit": {"author": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-09-27T15:43:30Z"}, "committer": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-09-27T15:43:30Z"}, "message": "lock types", "tree": {"sha": "260131df16901742d1b5056fea5b16c26ef1526f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/260131df16901742d1b5056fea5b16c26ef1526f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f9c349834622fa337c8dab886af4041bcdad5bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f9c349834622fa337c8dab886af4041bcdad5bb", "html_url": "https://github.com/rust-lang/rust/commit/0f9c349834622fa337c8dab886af4041bcdad5bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f9c349834622fa337c8dab886af4041bcdad5bb/comments", "author": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac8dd1b2f24dc62c962172b27433106b4e84dc62", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8dd1b2f24dc62c962172b27433106b4e84dc62", "html_url": "https://github.com/rust-lang/rust/commit/ac8dd1b2f24dc62c962172b27433106b4e84dc62"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "9d150b69f6a6df4aa108049ae4aaea32be8819ff", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c349834622fa337c8dab886af4041bcdad5bb/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c349834622fa337c8dab886af4041bcdad5bb/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=0f9c349834622fa337c8dab886af4041bcdad5bb", "patch": "@@ -297,6 +297,7 @@\n #![feature(maybe_uninit_slice)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(min_specialization)]\n+#![cfg_attr(not(bootstrap), feature(must_not_suspend))]\n #![feature(needs_panic_runtime)]\n #![feature(negative_impls)]\n #![feature(never_type)]"}, {"sha": "9abd4b547c77e40f8ae7fab19639e74b6be3bfe7", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c349834622fa337c8dab886af4041bcdad5bb/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c349834622fa337c8dab886af4041bcdad5bb/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=0f9c349834622fa337c8dab886af4041bcdad5bb", "patch": "@@ -188,6 +188,12 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> {}\n /// [`lock`]: Mutex::lock\n /// [`try_lock`]: Mutex::try_lock\n #[must_use = \"if unused the Mutex will immediately unlock\"]\n+#[cfg_attr(\n+    not(bootstrap),\n+    must_not_suspend = \"Holding a MutexGuard across suspend \\\n+                      points can cause deadlocks, delays, \\\n+                      and cause Future's to not implement `Send`\"\n+)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct MutexGuard<'a, T: ?Sized + 'a> {\n     lock: &'a Mutex<T>,"}, {"sha": "1523d36323fd98626f6774ee20ba3240ded64da0", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c349834622fa337c8dab886af4041bcdad5bb/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c349834622fa337c8dab886af4041bcdad5bb/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=0f9c349834622fa337c8dab886af4041bcdad5bb", "patch": "@@ -95,6 +95,12 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n /// [`read`]: RwLock::read\n /// [`try_read`]: RwLock::try_read\n #[must_use = \"if unused the RwLock will immediately unlock\"]\n+#[cfg_attr(\n+    not(bootstrap),\n+    must_not_suspend = \"Holding a RwLockReadGuard across suspend \\\n+                      points can cause deadlocks, delays, \\\n+                      and cause Future's to not implement `Send`\"\n+)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n     lock: &'a RwLock<T>,\n@@ -115,6 +121,12 @@ unsafe impl<T: ?Sized + Sync> Sync for RwLockReadGuard<'_, T> {}\n /// [`write`]: RwLock::write\n /// [`try_write`]: RwLock::try_write\n #[must_use = \"if unused the RwLock will immediately unlock\"]\n+#[cfg_attr(\n+    not(bootstrap),\n+    must_not_suspend = \"Holding a RwLockWriteGuard across suspend \\\n+                      points can cause deadlocks, delays, \\\n+                      and cause Future's to not implement `Send`\"\n+)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockWriteGuard<'a, T: ?Sized + 'a> {\n     lock: &'a RwLock<T>,"}, {"sha": "7bb895e7d36438f143181273f304f4d2c017f374", "filename": "src/test/ui/lint/must_not_suspend/mutex.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c349834622fa337c8dab886af4041bcdad5bb/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c349834622fa337c8dab886af4041bcdad5bb/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.rs?ref=0f9c349834622fa337c8dab886af4041bcdad5bb", "patch": "@@ -0,0 +1,13 @@\n+// edition:2018\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+async fn other() {}\n+\n+pub async fn uhoh(m: std::sync::Mutex<()>) {\n+    let _guard = m.lock().unwrap(); //~ ERROR `MutexGuard` held across\n+    other().await;\n+}\n+\n+fn main() {\n+}"}, {"sha": "69638fc20107c7b92f2d0e574c8a132b682033cc", "filename": "src/test/ui/lint/must_not_suspend/mutex.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c349834622fa337c8dab886af4041bcdad5bb/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c349834622fa337c8dab886af4041bcdad5bb/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr?ref=0f9c349834622fa337c8dab886af4041bcdad5bb", "patch": "@@ -0,0 +1,26 @@\n+error: `MutexGuard` held across a suspend point, but should not be\n+  --> $DIR/mutex.rs:8:9\n+   |\n+LL |     let _guard = m.lock().unwrap();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |     ------------- the value is held across this suspend point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/mutex.rs:3:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+note: Holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Future's to not implement `Send`\n+  --> $DIR/mutex.rs:8:9\n+   |\n+LL |     let _guard = m.lock().unwrap();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/mutex.rs:8:9\n+   |\n+LL |     let _guard = m.lock().unwrap();\n+   |         ^^^^^^\n+\n+error: aborting due to previous error\n+"}]}