{"sha": "c9db3e0fbc84d8409285698486375f080d361ef3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZGIzZTBmYmM4NGQ4NDA5Mjg1Njk4NDg2Mzc1ZjA4MGQzNjFlZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-08T12:55:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-08T12:55:15Z"}, "message": "Auto merge of #87489 - bdalrhm:rustdoc-line-num, r=CraftSpider\n\n`rustdoc`: compute correct line number for indented rust code blocks.\n\nThis PR fixes a bug in `rustdoc` where it computes the wrong line number for indented rust code blocks (and subsequent blocks) it finds in markdown strings. To fix this issue, we decrement the line number if we find characters between the code block and the preceding line ending. I noticed this issue as I was trying to use `rustdoc` to extract examples from The Rust Reference and run them through the [Rust Model Checker](https://github.com/model-checking/rmc).", "tree": {"sha": "b44b6179fe3798d2e3c12fd6de2fb3a43869884d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b44b6179fe3798d2e3c12fd6de2fb3a43869884d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9db3e0fbc84d8409285698486375f080d361ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9db3e0fbc84d8409285698486375f080d361ef3", "html_url": "https://github.com/rust-lang/rust/commit/c9db3e0fbc84d8409285698486375f080d361ef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9db3e0fbc84d8409285698486375f080d361ef3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "434cb437b55d61bcb54a01921de7ac752e6dee13", "url": "https://api.github.com/repos/rust-lang/rust/commits/434cb437b55d61bcb54a01921de7ac752e6dee13", "html_url": "https://github.com/rust-lang/rust/commit/434cb437b55d61bcb54a01921de7ac752e6dee13"}, {"sha": "e66dafcd247d542198b31bd413f65906facd4fd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e66dafcd247d542198b31bd413f65906facd4fd4", "html_url": "https://github.com/rust-lang/rust/commit/e66dafcd247d542198b31bd413f65906facd4fd4"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "5cd5254f3282d00f6dc4be2d0a37ede3613ed41d", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9db3e0fbc84d8409285698486375f080d361ef3/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9db3e0fbc84d8409285698486375f080d361ef3/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=c9db3e0fbc84d8409285698486375f080d361ef3", "patch": "@@ -692,6 +692,12 @@ crate fn find_testable_code<T: doctest::Tester>(\n                     .join(\"\\n\");\n \n                 nb_lines += doc[prev_offset..offset.start].lines().count();\n+                // If there are characters between the preceding line ending and\n+                // this code block, `str::lines` will return an additional line,\n+                // which we subtract here.\n+                if nb_lines != 0 && !&doc[prev_offset..offset.start].ends_with(\"\\n\") {\n+                    nb_lines -= 1;\n+                }\n                 let line = tests.get_line() + nb_lines + 1;\n                 tests.add_test(text, block_info, line);\n                 prev_offset = offset.start;"}, {"sha": "1e4cf3381f6a38d98fe6c1d59e57184a3fcae8ea", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c9db3e0fbc84d8409285698486375f080d361ef3/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9db3e0fbc84d8409285698486375f080d361ef3/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=c9db3e0fbc84d8409285698486375f080d361ef3", "patch": "@@ -1,4 +1,4 @@\n-use super::{plain_text_summary, short_markdown_summary};\n+use super::{find_testable_code, plain_text_summary, short_markdown_summary};\n use super::{ErrorCodes, IdMap, Ignore, LangString, Markdown, MarkdownHtml};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n \n@@ -300,3 +300,25 @@ fn test_markdown_html_escape() {\n     t(\"Struct<'a, T>\", \"<p>Struct&lt;\u2019a, T&gt;</p>\\n\");\n     t(\"Struct<br>\", \"<p>Struct&lt;br&gt;</p>\\n\");\n }\n+\n+#[test]\n+fn test_find_testable_code_line() {\n+    fn t(input: &str, expect: &[usize]) {\n+        impl crate::doctest::Tester for Vec<usize> {\n+            fn add_test(&mut self, _test: String, _config: LangString, line: usize) {\n+                self.push(line);\n+            }\n+        }\n+        let mut lines = Vec::<usize>::new();\n+        find_testable_code(input, &mut lines, ErrorCodes::No, false, None);\n+        assert_eq!(lines, expect);\n+    }\n+\n+    t(\"\", &[]);\n+    t(\"```rust\\n```\", &[1]);\n+    t(\" ```rust\\n```\", &[1]);\n+    t(\"\\n```rust\\n```\", &[2]);\n+    t(\"\\n ```rust\\n```\", &[2]);\n+    t(\"```rust\\n```\\n```rust\\n```\", &[1, 3]);\n+    t(\"```rust\\n```\\n ```rust\\n```\", &[1, 3]);\n+}"}]}