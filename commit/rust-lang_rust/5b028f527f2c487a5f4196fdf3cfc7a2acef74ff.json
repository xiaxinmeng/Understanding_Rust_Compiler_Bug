{"sha": "5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMDI4ZjUyN2YyYzQ4N2E1ZjQxOTZmZGYzY2ZjN2EyYWNlZjc0ZmY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-01-19T09:03:57Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-01-19T09:04:59Z"}, "message": "Remove support for the '.' after a nullary tag in a pattern\n\n(Commit also includes lots of changes to remove '.'s that a git\nmerge messed up, or else it was monkeys.)", "tree": {"sha": "5888a216866e8d94d3211dbf39bb943d64d47017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5888a216866e8d94d3211dbf39bb943d64d47017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "html_url": "https://github.com/rust-lang/rust/commit/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9df03068897602d4377a35c0ae3cf2467666a039", "url": "https://api.github.com/repos/rust-lang/rust/commits/9df03068897602d4377a35c0ae3cf2467666a039", "html_url": "https://github.com/rust-lang/rust/commit/9df03068897602d4377a35c0ae3cf2467666a039"}], "stats": {"total": 255, "additions": 125, "deletions": 130}, "files": [{"sha": "c7a195db90a211eb74f2a1ea076d4212b2f39987", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -583,9 +583,9 @@ fn link_binary(sess: session,\n             ret str::connect(parts, \".\");\n         }\n         ret alt config.os {\n-              session::os_macos. { rmext(rmlib(filename)) }\n-              session::os_linux. { rmext(rmlib(filename)) }\n-              session::os_freebsd. { rmext(rmlib(filename)) }\n+              session::os_macos { rmext(rmlib(filename)) }\n+              session::os_linux { rmext(rmlib(filename)) }\n+              session::os_freebsd { rmext(rmlib(filename)) }\n               _ { rmext(filename) }\n             };\n     }"}, {"sha": "b848ca9459092145911dc341ef4e1229fcdd99aa", "filename": "src/comp/back/rpath.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Frpath.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -102,9 +102,9 @@ fn get_rpath_relative_to_output(os: session::os,\n                                 &&lib: fs::path) -> str {\n     // Mac doesn't appear to support $ORIGIN\n     let prefix = alt os {\n-        session::os_linux. { \"$ORIGIN\" + fs::path_sep() }\n-        session::os_freebsd. { \"$ORIGIN\" + fs::path_sep() }\n-        session::os_macos. { \"@executable_path\" + fs::path_sep() }\n+        session::os_linux { \"$ORIGIN\" + fs::path_sep() }\n+        session::os_freebsd { \"$ORIGIN\" + fs::path_sep() }\n+        session::os_macos { \"@executable_path\" + fs::path_sep() }\n     };\n \n     prefix + get_relative_to("}, {"sha": "be5e4ea65fbf00f590d71f3bab3594a4648dd3fa", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -24,19 +24,19 @@ fn default_configuration(sess: session, argv0: str, input: str) ->\n    ast::crate_cfg {\n     let libc =\n         alt sess.targ_cfg.os {\n-          session::os_win32. { \"msvcrt.dll\" }\n-          session::os_macos. { \"libc.dylib\" }\n-          session::os_linux. { \"libc.so.6\" }\n-          session::os_freebsd. { \"libc.so.7\" }\n+          session::os_win32 { \"msvcrt.dll\" }\n+          session::os_macos { \"libc.dylib\" }\n+          session::os_linux { \"libc.so.6\" }\n+          session::os_freebsd { \"libc.so.7\" }\n           _ { \"libc.so\" }\n         };\n \n     let mk = attr::mk_name_value_item_str;\n \n     let arch = alt sess.targ_cfg.arch {\n-      session::arch_x86. { \"x86\" }\n-      session::arch_x86_64. { \"x86_64\" }\n-      session::arch_arm. { \"arm\" }\n+      session::arch_x86 { \"x86\" }\n+      session::arch_x86_64 { \"x86_64\" }\n+      session::arch_arm { \"arm\" }\n     };\n \n     ret [ // Target bindings.\n@@ -340,14 +340,14 @@ fn build_target_config(sopts: @session::options,\n                           \"Unknown architecture! \" + sopts.target_triple) }\n     };\n     let (int_type, uint_type, float_type) = alt arch {\n-      session::arch_x86. {(ast::ty_i32, ast::ty_u32, ast::ty_f64)}\n-      session::arch_x86_64. {(ast::ty_i64, ast::ty_u64, ast::ty_f64)}\n-      session::arch_arm. {(ast::ty_i32, ast::ty_u32, ast::ty_f64)}\n+      session::arch_x86 {(ast::ty_i32, ast::ty_u32, ast::ty_f64)}\n+      session::arch_x86_64 {(ast::ty_i64, ast::ty_u64, ast::ty_f64)}\n+      session::arch_arm {(ast::ty_i32, ast::ty_u32, ast::ty_f64)}\n     };\n     let target_strs = alt arch {\n-      session::arch_x86. {x86::get_target_strs(os)}\n-      session::arch_x86_64. {x86_64::get_target_strs(os)}\n-      session::arch_arm. {x86::get_target_strs(os)}\n+      session::arch_x86 {x86::get_target_strs(os)}\n+      session::arch_x86_64 {x86_64::get_target_strs(os)}\n+      session::arch_arm {x86::get_target_strs(os)}\n     };\n     let target_cfg: @session::config =\n         @{os: os, arch: arch, target_strs: target_strs, int_type: int_type,\n@@ -406,7 +406,7 @@ fn build_session_options(match: getopts::match,\n     let no_asm_comments = getopts::opt_present(match, \"no-asm-comments\");\n     alt output_type {\n       // unless we're emitting huamn-readable assembly, omit comments.\n-      link::output_type_llvm_assembly. | link::output_type_assembly. {}\n+      link::output_type_llvm_assembly | link::output_type_assembly {}\n       _ { no_asm_comments = true; }\n     }\n     let opt_level: uint =\n@@ -540,10 +540,10 @@ fn build_output_filenames(ifile: str,\n         alt sopts.output_type {\n           link::output_type_none { \"none\" }\n           link::output_type_bitcode { \"bc\" }\n-          link::output_type_assembly. { \"s\" }\n-          link::output_type_llvm_assembly. { \"ll\" }\n+          link::output_type_assembly { \"s\" }\n+          link::output_type_llvm_assembly { \"ll\" }\n           // Object and exe output both use the '.o' extension here\n-          link::output_type_object. | link::output_type_exe. {\n+          link::output_type_object | link::output_type_exe {\n             \"o\"\n           }\n         };"}, {"sha": "bd4c04715989ed470b7adc3d9e7d30e025fa6f6b", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -102,7 +102,7 @@ fn run_compiler(args: [str], demitter: diagnostic::emitter) {\n                     bind parse_pretty(sess, _));\n     alt pretty {\n       some::<pp_mode>(ppm) { pretty_print_input(sess, cfg, ifile, ppm); ret; }\n-      none::<pp_mode>. {/* continue */ }\n+      none::<pp_mode> {/* continue */ }\n     }\n     let ls = opt_present(match, \"ls\");\n     if ls {"}, {"sha": "e4e39730350d07f87a0eb6ad81cf5f5f885f6c89", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -128,10 +128,10 @@ fn default_native_lib_naming(sess: session::session, static: bool) ->\n    {prefix: str, suffix: str} {\n     if static { ret {prefix: \"lib\", suffix: \".rlib\"}; }\n     alt sess.targ_cfg.os {\n-      session::os_win32. { ret {prefix: \"\", suffix: \".dll\"}; }\n-      session::os_macos. { ret {prefix: \"lib\", suffix: \".dylib\"}; }\n-      session::os_linux. { ret {prefix: \"lib\", suffix: \".so\"}; }\n-      session::os_freebsd. { ret {prefix: \"lib\", suffix: \".so\"}; }\n+      session::os_win32 { ret {prefix: \"\", suffix: \".dll\"}; }\n+      session::os_macos { ret {prefix: \"lib\", suffix: \".dylib\"}; }\n+      session::os_linux { ret {prefix: \"lib\", suffix: \".so\"}; }\n+      session::os_freebsd { ret {prefix: \"lib\", suffix: \".so\"}; }\n     }\n }\n "}, {"sha": "096fc2fb99d03f4172ba476f8f52bb9ed571f221", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -583,7 +583,7 @@ fn create_ty(cx: @crate_ctxt, t: ty::t, ty: @ast::ty)\n         ret create_pointer_type(cx, t, ty.span, md);\n       }\n \n-      ast::ty_infer. {\n+      ast::ty_infer {\n         let inferred = t_to_ty(cx, t, ty.span);\n         ret create_ty(cx, t, inferred);\n       }"}, {"sha": "86093c5febb5d4dbc76a3244eb9aeeab917578b6", "filename": "src/comp/middle/gc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fgc.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -105,8 +105,7 @@ fn type_is_gc_relevant(cx: ty::ctxt, ty: ty::t) -> bool {\n     alt ty::struct(cx, ty) {\n       ty::ty_nil | ty::ty_bot | ty::ty_bool | ty::ty_int(_) |\n       ty::ty_float(_) | ty::ty_uint(_) | ty::ty_str |\n-      ty::ty_type | ty::ty_native(_) | ty::ty_ptr(_) | ty::ty_type. |\n-      ty::ty_native(_) {\n+      ty::ty_type | ty::ty_ptr(_) | ty::ty_native(_) {\n         ret false;\n       }\n "}, {"sha": "0eebf4e1ef9e4df728ab833ac02673bfa542b037", "filename": "src/comp/middle/mut.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Fmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Fmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmut.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -187,9 +187,9 @@ fn check_lval(cx: @ctx, dest: @expr, msg: msg) {\n         } else if !root.ds[0].mut {\n             let name =\n                 alt root.ds[0].kind {\n-                  mut::unbox. { \"immutable box\" }\n-                  mut::field. { \"immutable field\" }\n-                  mut::index. { \"immutable vec content\" }\n+                  mut::unbox { \"immutable box\" }\n+                  mut::field { \"immutable field\" }\n+                  mut::index { \"immutable vec content\" }\n                 };\n             mk_err(cx, dest.span, msg, name);\n         }"}, {"sha": "9986400dfa32501871168f43bd8219ab033d96bd", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -246,25 +246,25 @@ fn tag_kind(ccx: @crate_ctxt, did: ast::def_id) -> tag_kind {\n // Returns the code corresponding to the pointer size on this architecture.\n fn s_int(tcx: ty_ctxt) -> u8 {\n     ret alt tcx.sess.targ_cfg.arch {\n-        session::arch_x86. { shape_i32 }\n-        session::arch_x86_64. { shape_i64 }\n-        session::arch_arm. { shape_i32 }\n+        session::arch_x86 { shape_i32 }\n+        session::arch_x86_64 { shape_i64 }\n+        session::arch_arm { shape_i32 }\n     };\n }\n \n fn s_uint(tcx: ty_ctxt) -> u8 {\n     ret alt tcx.sess.targ_cfg.arch {\n-        session::arch_x86. { shape_u32 }\n-        session::arch_x86_64. { shape_u64 }\n-        session::arch_arm. { shape_u32 }\n+        session::arch_x86 { shape_u32 }\n+        session::arch_x86_64 { shape_u64 }\n+        session::arch_arm { shape_u32 }\n     };\n }\n \n fn s_float(tcx: ty_ctxt) -> u8 {\n     ret alt tcx.sess.targ_cfg.arch {\n-        session::arch_x86. { shape_f64 }\n-        session::arch_x86_64. { shape_f64 }\n-        session::arch_arm. { shape_f64 }\n+        session::arch_x86 { shape_f64 }\n+        session::arch_x86_64 { shape_f64 }\n+        session::arch_arm { shape_f64 }\n     };\n }\n "}, {"sha": "c519461887dc7f1ea026baccd241ebf451c49122", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -1904,8 +1904,8 @@ fn call_memmove(cx: @block_ctxt, dst: ValueRef, src: ValueRef,\n \n     let ccx = bcx_ccx(cx);\n     let key = alt ccx.sess.targ_cfg.arch {\n-      session::arch_x86. | session::arch_arm. { \"llvm.memmove.p0i8.p0i8.i32\" }\n-      session::arch_x86_64. { \"llvm.memmove.p0i8.p0i8.i64\" }\n+      session::arch_x86 | session::arch_arm { \"llvm.memmove.p0i8.p0i8.i32\" }\n+      session::arch_x86_64 { \"llvm.memmove.p0i8.p0i8.i64\" }\n     };\n     let i = ccx.intrinsics;\n     assert (i.contains_key(key));\n@@ -2915,10 +2915,10 @@ fn trans_cast(cx: @block_ctxt, e: @ast::expr, id: ast::node_id,\n \n     let newval =\n         alt {in: k_in, out: k_out} {\n-          {in: integral, out: integral.} {\n+          {in: integral, out: integral} {\n             int_cast(e_res.bcx, ll_t_out, ll_t_in, e_res.val, s_in)\n           }\n-          {in: float, out: float.} {\n+          {in: float, out: float} {\n             float_cast(e_res.bcx, ll_t_out, ll_t_in, e_res.val)\n           }\n           {in: integral, out: float} {\n@@ -2937,10 +2937,10 @@ fn trans_cast(cx: @block_ctxt, e: @ast::expr, id: ast::node_id,\n           {in: pointer, out: integral} {\n             PtrToInt(e_res.bcx, e_res.val, ll_t_out)\n           }\n-          {in: pointer, out: pointer.} {\n+          {in: pointer, out: pointer} {\n             PointerCast(e_res.bcx, e_res.val, ll_t_out)\n           }\n-          {in: tag_, out: integral} | {in: tag_., out: float} {\n+          {in: tag_, out: integral} | {in: tag_, out: float} {\n             let cx = e_res.bcx;\n             let lltagty = T_opaque_tag_ptr(ccx);\n             let av_tag = PointerCast(cx, e_res.val, lltagty);\n@@ -3559,11 +3559,11 @@ fn trans_expr(bcx: @block_ctxt, e: @ast::expr, dest: dest) -> @block_ctxt {\n         assert dest == ignore;\n         ret trans_check_expr(bcx, a, \"Assertion\");\n       }\n-      ast::expr_check(ast::checked_expr., a) {\n+      ast::expr_check(ast::checked_expr, a) {\n         assert dest == ignore;\n         ret trans_check_expr(bcx, a, \"Predicate\");\n       }\n-      ast::expr_check(ast::claimed_expr., a) {\n+      ast::expr_check(ast::claimed_expr, a) {\n         assert dest == ignore;\n         /* Claims are turned on and off by a global variable\n            that the RTS sets. This case generates code to\n@@ -3945,8 +3945,8 @@ fn zero_alloca(cx: @block_ctxt, llptr: ValueRef, t: ty::t)\n         Store(bcx, C_null(llty), llptr);\n     } else {\n         let key = alt ccx.sess.targ_cfg.arch {\n-          session::arch_x86. | session::arch_arm. { \"llvm.memset.p0i8.i32\" }\n-          session::arch_x86_64. { \"llvm.memset.p0i8.i64\" }\n+          session::arch_x86 | session::arch_arm { \"llvm.memset.p0i8.i32\" }\n+          session::arch_x86_64 { \"llvm.memset.p0i8.i64\" }\n         };\n         let i = ccx.intrinsics;\n         let memset = i.get(key);\n@@ -4841,9 +4841,9 @@ fn trans_native_mod(lcx: @local_ctxt, native_mod: ast::native_mod,\n     let ccx = lcx_ccx(lcx);\n     let cc = lib::llvm::LLVMCCallConv;\n     alt abi {\n-      ast::native_abi_rust_intrinsic. { ret; }\n-      ast::native_abi_cdecl. { cc = lib::llvm::LLVMCCallConv; }\n-      ast::native_abi_stdcall. { cc = lib::llvm::LLVMX86StdcallCallConv; }\n+      ast::native_abi_rust_intrinsic { ret; }\n+      ast::native_abi_cdecl { cc = lib::llvm::LLVMCCallConv; }\n+      ast::native_abi_stdcall { cc = lib::llvm::LLVMX86StdcallCallConv; }\n     }\n \n     for native_item in native_mod.items {\n@@ -5143,7 +5143,7 @@ fn collect_native_item(ccx: @crate_ctxt,\n                 }\n             };\n         alt fn_abi {\n-          ast::native_abi_rust_intrinsic. {\n+          ast::native_abi_rust_intrinsic {\n             // For intrinsics: link the function directly to the intrinsic\n             // function itself.\n             let fn_type = type_of_fn_from_ty(\n@@ -5157,7 +5157,7 @@ fn collect_native_item(ccx: @crate_ctxt,\n             ccx.item_symbols.insert(id, ri_name);\n           }\n \n-          ast::native_abi_cdecl. | ast::native_abi_stdcall. {\n+          ast::native_abi_cdecl | ast::native_abi_stdcall {\n             // For true external functions: create a rust wrapper\n             // and link to that.  The rust wrapper will handle\n             // switching to the C stack."}, {"sha": "1e58ea53f9f13c13d77ddc22db470481f85e8753", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -419,18 +419,18 @@ fn build_closure(bcx0: @block_ctxt,\n         let nid = ast_util::def_id_of_def(cap_var.def).node;\n         let ty = ty::node_id_to_monotype(tcx, nid);\n         alt cap_var.mode {\n-          capture::cap_ref. {\n+          capture::cap_ref {\n             assert ck == ty::ck_block;\n             ty = ty::mk_mut_ptr(tcx, ty);\n             env_vals += [env_ref(lv.val, ty, lv.kind)];\n           }\n-          capture::cap_copy. {\n+          capture::cap_copy {\n             env_vals += [env_copy(lv.val, ty, lv.kind)];\n           }\n-          capture::cap_move. {\n+          capture::cap_move {\n             env_vals += [env_move(lv.val, ty, lv.kind)];\n           }\n-          capture::cap_drop. {\n+          capture::cap_drop {\n             bcx = drop_ty(bcx, lv.val, ty);\n           }\n         }\n@@ -481,7 +481,7 @@ fn load_environment(enclosing_cx: @block_ctxt,\n     let i = 0u;\n     vec::iter(cap_vars) { |cap_var|\n         alt cap_var.mode {\n-          capture::cap_drop. { /* ignore */ }\n+          capture::cap_drop { /* ignore */ }\n           _ {\n             check type_is_tup_like(bcx, cbox_ty);\n             let upvarptr = GEP_tup_like("}, {"sha": "0a2045dcb2b144fa870fcbbaf675057f1927b7c3", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -483,9 +483,9 @@ fn T_bool() -> TypeRef { ret T_i1(); }\n \n fn T_int(targ_cfg: @session::config) -> TypeRef {\n     ret alt targ_cfg.arch {\n-      session::arch_x86. { T_i32() }\n-      session::arch_x86_64. { T_i64() }\n-      session::arch_arm. { T_i32() }\n+      session::arch_x86 { T_i32() }\n+      session::arch_x86_64 { T_i64() }\n+      session::arch_arm { T_i32() }\n     };\n }\n \n@@ -520,9 +520,9 @@ fn T_float_ty(cx: @crate_ctxt, t: ast::float_ty) -> TypeRef {\n \n fn T_float(targ_cfg: @session::config) -> TypeRef {\n     ret alt targ_cfg.arch {\n-      session::arch_x86. { T_f64() }\n-      session::arch_x86_64. { T_f64() }\n-      session::arch_arm. { T_f64() }\n+      session::arch_x86 { T_f64() }\n+      session::arch_x86_64 { T_f64() }\n+      session::arch_arm { T_f64() }\n     };\n }\n "}, {"sha": "03802e04d88f4587322dc82858e6c58c3cfb19e7", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -2534,7 +2534,7 @@ fn type_err_to_str(err: ty::type_err) -> str {\n         fn to_str(s: ast::ret_style) -> str {\n             alt s {\n               ast::noreturn { \"non-returning\" }\n-              ast::return_val. { \"return-by-value\" }\n+              ast::return_val { \"return-by-value\" }\n             }\n         }\n         ret to_str(actual) + \" function found where \" + to_str(expect) +"}, {"sha": "cb159a54c8ce7885ab20f89cd92a9375b1b72bf9", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -358,7 +358,7 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n         }\n         typ = ty::mk_constr(tcx, ast_ty_to_ty(tcx, mode, t), out_cs);\n       }\n-      ast::ty_infer. {\n+      ast::ty_infer {\n         alt mode {\n           m_check_tyvar(fcx) { ret next_ty_var(fcx); }\n           _ { tcx.sess.span_bug(ast_ty.span,\n@@ -539,7 +539,7 @@ fn ast_ty_to_ty_crate(ccx: @crate_ctxt, &&ast_ty: @ast::ty) -> ty::t {\n fn ast_ty_to_ty_crate_infer(ccx: @crate_ctxt, &&ast_ty: @ast::ty) ->\n    option::t<ty::t> {\n     alt ast_ty.node {\n-      ast::ty_infer. { none }\n+      ast::ty_infer { none }\n       _ { some(ast_ty_to_ty_crate(ccx, ast_ty)) }\n     }\n }\n@@ -2406,9 +2406,9 @@ fn check_block_no_value(fcx: @fn_ctxt, blk: ast::blk) -> bool {\n \n fn check_block(fcx0: @fn_ctxt, blk: ast::blk) -> bool {\n     let fcx = alt blk.node.rules {\n-      ast::unchecked_blk. { @{purity: ast::impure_fn with *fcx0} }\n-      ast::unsafe_blk. { @{purity: ast::unsafe_fn with *fcx0} }\n-      ast::default_blk. { fcx0 }\n+      ast::unchecked_blk { @{purity: ast::impure_fn with *fcx0} }\n+      ast::unsafe_blk { @{purity: ast::unsafe_fn with *fcx0} }\n+      ast::default_blk { fcx0 }\n     };\n     let bot = false;\n     let warned = false;\n@@ -2745,7 +2745,7 @@ fn check_main_fn_ty(tcx: ty::ctxt, main_id: ast::node_id) {\n     let main_t = ty::node_id_to_monotype(tcx, main_id);\n     alt ty::struct(tcx, main_t) {\n       ty::ty_fn({proto: ast::proto_bare, inputs, output,\n-                 ret_style: ast::return_val., constraints}) {\n+                 ret_style: ast::return_val, constraints}) {\n         let ok = vec::len(constraints) == 0u;\n         ok &= ty::type_is_nil(tcx, output);\n         let num_args = vec::len(inputs);"}, {"sha": "4d9b697297fbf8a522d860da5b3ef18a97c61d09", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -453,7 +453,7 @@ fn noop_fold_local(l: local_, fld: ast_fold) -> local_ {\n          pat: fld.fold_pat(l.pat),\n          init:\n              alt l.init {\n-               option::none::<initializer>. { l.init }\n+               option::none::<initializer> { l.init }\n                option::some::<initializer>(init) {\n                  option::some::<initializer>({op: init.op,\n                                               expr: fld.fold_expr(init.expr)})"}, {"sha": "0da193c20785b9ed1dade38f48b1e476b5545579", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -1485,8 +1485,6 @@ fn parse_pat(p: parser) -> @ast::pat {\n             }\n         } else if is_plain_ident(p) &&\n                       alt p.look_ahead(1u) {\n-                    // Take this out once the libraries change\n-                        token::DOT |\n                         token::LPAREN | token::LBRACKET |\n                             token::LT {\n                           false\n@@ -1508,8 +1506,6 @@ fn parse_pat(p: parser) -> @ast::pat {\n                 args = a.node;\n                 hi = a.span.hi;\n               }\n-              // take this out once the libraries change\n-              token::DOT. { args = []; p.bump(); }\n               _ { args = []; }\n             }\n             // at this point, we're not sure whether it's a tag or a bind"}, {"sha": "f4aa5646d0b7b89012c4152eacc5d4a63ba33d96", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -275,7 +275,7 @@ fn print_type(s: ps, &&ty: @ast::ty) {\n         word(s.s, \"]\");\n       }\n       ast::ty_ptr(mt) { word(s.s, \"*\"); print_mt(s, mt); }\n-      ast::ty_task. { word(s.s, \"task\"); }\n+      ast::ty_task { word(s.s, \"task\"); }\n       ast::ty_port(t) {\n         word(s.s, \"port<\");\n         print_type(s, t);\n@@ -506,7 +506,7 @@ fn print_outer_attributes(s: ps, attrs: [ast::attribute]) {\n     let count = 0;\n     for attr: ast::attribute in attrs {\n         alt attr.node.style {\n-          ast::attr_outer. { print_attribute(s, attr); count += 1; }\n+          ast::attr_outer { print_attribute(s, attr); count += 1; }\n           _ {/* fallthrough */ }\n         }\n     }\n@@ -517,7 +517,7 @@ fn print_inner_attributes(s: ps, attrs: [ast::attribute]) {\n     let count = 0;\n     for attr: ast::attribute in attrs {\n         alt attr.node.style {\n-          ast::attr_inner. {\n+          ast::attr_inner {\n             print_attribute(s, attr);\n             word(s.s, \";\");\n             count += 1;\n@@ -576,9 +576,9 @@ fn print_possibly_embedded_block(s: ps, blk: ast::blk, embedded: embed_type,\n fn print_possibly_embedded_block_(s: ps, blk: ast::blk, embedded: embed_type,\n                                   indented: uint, attrs: [ast::attribute]) {\n     alt blk.node.rules {\n-      ast::unchecked_blk. { word(s.s, \"unchecked\"); }\n-      ast::unsafe_blk. { word(s.s, \"unsafe\"); }\n-      ast::default_blk. { }\n+      ast::unchecked_blk { word(s.s, \"unchecked\"); }\n+      ast::unsafe_blk { word(s.s, \"unsafe\"); }\n+      ast::default_blk { }\n     }\n \n     maybe_print_comment(s, blk.span.lo);\n@@ -950,8 +950,8 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n       }\n       ast::expr_check(m, expr) {\n         alt m {\n-          ast::claimed_expr. { word_nbsp(s, \"claim\"); }\n-          ast::checked_expr. { word_nbsp(s, \"check\"); }\n+          ast::claimed_expr { word_nbsp(s, \"claim\"); }\n+          ast::checked_expr { word_nbsp(s, \"check\"); }\n         }\n         popen(s);\n         print_expr(s, expr);\n@@ -989,7 +989,7 @@ fn print_expr_parens_if_not_bot(s: ps, ex: @ast::expr) {\n fn print_local_decl(s: ps, loc: @ast::local) {\n     print_pat(s, loc.node.pat);\n     alt loc.node.ty.node {\n-      ast::ty_infer. { }\n+      ast::ty_infer { }\n       _ { word_space(s, \":\"); print_type(s, loc.node.ty); }\n     }\n }\n@@ -1072,7 +1072,7 @@ fn print_pat(s: ps, &&pat: @ast::pat) {\n             popen(s);\n             commasep(s, inconsistent, args, print_pat);\n             pclose(s);\n-        } else { word(s.s, \".\"); }  // FIXME\n+        } else { }\n       }\n       ast::pat_rec(fields, etc) {\n         word(s.s, \"{\");\n@@ -1479,13 +1479,13 @@ fn maybe_print_comment(s: ps, pos: uint) {\n \n fn print_comment(s: ps, cmnt: lexer::cmnt) {\n     alt cmnt.style {\n-      lexer::mixed. {\n+      lexer::mixed {\n         assert (vec::len(cmnt.lines) == 1u);\n         zerobreak(s.s);\n         word(s.s, cmnt.lines[0]);\n         zerobreak(s.s);\n       }\n-      lexer::isolated. {\n+      lexer::isolated {\n         pprust::hardbreak_if_not_bol(s);\n         for line: str in cmnt.lines {\n             // Don't print empty lines because they will end up as trailing\n@@ -1494,7 +1494,7 @@ fn print_comment(s: ps, cmnt: lexer::cmnt) {\n             hardbreak(s.s);\n         }\n       }\n-      lexer::trailing. {\n+      lexer::trailing {\n         word(s.s, \" \");\n         if vec::len(cmnt.lines) == 1u {\n             word(s.s, cmnt.lines[0]);"}, {"sha": "11ccd1cc71f29c7bbe13e577f5a2d83e6e1871f2", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -47,7 +47,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n             s += \" -> \";\n             alt cf {\n               ast::noreturn { s += \"!\"; }\n-              ast::return_val. { s += ty_to_str(cx, output); }\n+              ast::return_val { s += ty_to_str(cx, output); }\n             }\n         }\n         s += constrs_str(constrs);"}, {"sha": "f40a1a77964a9954c2866104ef2003e843ad599d", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -165,7 +165,7 @@ fn safe_to_replace_expr(e: ast::expr_, _tm: test_mode) -> bool {\n \n fn safe_to_replace_ty(t: ast::ty_, _tm: test_mode) -> bool {\n     alt t {\n-      ast::ty_infer. { false } // always implicit, always top level\n+      ast::ty_infer { false } // always implicit, always top level\n       ast::ty_bot { false }   // in source, can only appear as the out type of a function\n       ast::ty_mac(_) { false }\n       _ { true }"}, {"sha": "1868c79e97bfd8644a4180a99187fdfef5f66488", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -451,7 +451,7 @@ fn filter_map<T: copy, U: copy>(v: [const T], f: block(T) -> option::t<U>)\n     let result = [];\n     for elem: T in v {\n         alt f(copy elem) {\n-          none. {/* no-op */ }\n+          none {/* no-op */ }\n           some(result_elem) { result += [result_elem]; }\n         }\n     }"}, {"sha": "0dc31f11ab0e1189b252a357b73ba1f038a2e688", "filename": "src/libstd/linux_os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Flibstd%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Flibstd%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flinux_os.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -97,8 +97,8 @@ fn fclose(file: libc::FILE) {\n \n fn fsync_fd(fd: fd_t, level: io::fsync::level) -> c_int {\n     alt level {\n-      io::fsync::fsync. | io::fsync::fullfsync. { ret libc::fsync(fd); }\n-      io::fsync::fdatasync. { ret libc::fdatasync(fd); }\n+      io::fsync::fsync | io::fsync::fullfsync { ret libc::fsync(fd); }\n+      io::fsync::fdatasync { ret libc::fdatasync(fd); }\n     }\n }\n "}, {"sha": "ad042b06c25855a43a1566bcd6b504ac1f9b5fac", "filename": "src/libstd/macos_os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Flibstd%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Flibstd%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacos_os.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -100,7 +100,7 @@ fn waitpid(pid: pid_t) -> i32 {\n \n fn fsync_fd(fd: fd_t, level: io::fsync::level) -> c_int {\n     alt level {\n-      io::fsync::fsync. { ret libc::fsync(fd); }\n+      io::fsync::fsync { ret libc::fsync(fd); }\n       _ {\n         // According to man fnctl, the ok retval is only specified to be !=-1\n         if (libc::fcntl(libc_constants::F_FULLFSYNC, fd) == -1 as c_int)"}, {"sha": "ac42820bf70fd183bb5ba3e9ff1ce8e4e8f3d7dd", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -155,7 +155,7 @@ fn fold_fn(\n                 none { doc }\n             }\n         }\n-        // FIXME: Warning when documenting a non-existant arg\n+        // FIXME: Warning when documenting a non-existent arg\n     }\n \n     fn merge_ret_attrs("}, {"sha": "7665cf307378c2c9341e7aae15660e669e1eb9d5", "filename": "src/test/bench/99bob-pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Fbench%2F99bob-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Fbench%2F99bob-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-pattern.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -23,7 +23,7 @@ fn show(b: bottle) {\n         #debug(\"Take one down and pass it around, \\\n                 no more bottles of beer on the wall.\");\n       }\n-      dual. {\n+      dual {\n         #debug(\"2 bottles of beer on the wall, 2 bottles of beer,\");\n         #debug(\"Take one down and pass it around, \\\n                 1 bottle of beer on the wall.\");\n@@ -40,7 +40,7 @@ fn next(b: bottle) -> bottle {\n     alt b {\n       none { ret none; }\n       single { ret none; }\n-      dual. { ret single; }\n+      dual { ret single; }\n       multiple(3) { ret dual; }\n       multiple(n) { ret multiple(n - 1); }\n     }"}, {"sha": "e10a7fe7301b2035f05a13c41f023c8d933c345b", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -116,8 +116,8 @@ mod map_reduce {\n                     // #error(\"all done\");\n                     state.is_done = true;\n                   }\n-                  ref. { state.ref_count += 1; }\n-                  release. { state.ref_count -= 1; }\n+                  ref { state.ref_count += 1; }\n+                  release { state.ref_count -= 1; }\n                 }\n             }\n             ret none;"}, {"sha": "8d1e80b77ae8bfcb13aa0cf6c0f76a3d79df98fa", "filename": "src/test/compile-fail/alt-tag-nullary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Fcompile-fail%2Falt-tag-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Fcompile-fail%2Falt-tag-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-tag-nullary.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -3,5 +3,5 @@\n tag a { A; }\n tag b { B; }\n \n-fn main() { let x: a = A; alt x { B. { } } }\n+fn main() { let x: a = A; alt x { B { } } }\n "}, {"sha": "dcca16590a57499924e02b1eda23d2a9c9868f67", "filename": "src/test/run-fail/alt-bot-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-fail%2Falt-bot-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-fail%2Falt-bot-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Falt-bot-fail.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -4,6 +4,6 @@ fn foo(s: str) { }\n \n fn main() {\n     let i =\n-        alt some::<int>(3) { none::<int>. { fail } some::<int>(_) { fail } };\n+        alt some::<int>(3) { none::<int> { fail } some::<int>(_) { fail } };\n     foo(i);\n }"}, {"sha": "829477ce71a8374eb565939cd27eb7a3748a0501", "filename": "src/test/run-fail/non-exhaustive-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fnon-exhaustive-match.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -6,4 +6,4 @@\n // error-pattern:non-exhaustive match failure\n tag t { a; b; }\n \n-fn main() { let x = a; alt x { b. { } } }\n+fn main() { let x = a; alt x { b { } } }"}, {"sha": "687cf30f97fe95676ef73fc59405b3d4fc9d37c9", "filename": "src/test/run-pass/alt-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-join.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -12,7 +12,7 @@ fn foo<T>(y: option::t<T>) {\n        entire if expression */\n \n     if true {\n-    } else { alt y { none::<T>. { x = 17; } _ { x = 42; } } rs += [x]; }\n+    } else { alt y { none::<T> { x = 17; } _ { x = 42; } } rs += [x]; }\n     ret;\n }\n "}, {"sha": "bc2d3463959eb41ee9bb4453a6a68d29bb791586", "filename": "src/test/run-pass/alt-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Falt-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Falt-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-path.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -4,6 +4,6 @@ mod m1 {\n     tag foo { foo1; foo2; }\n }\n \n-fn bar(x: m1::foo) { alt x { m1::foo1. { } } }\n+fn bar(x: m1::foo) { alt x { m1::foo1 { } } }\n \n fn main() { }"}, {"sha": "e9c94962452b460e5f273a993176d02c3548be5c", "filename": "src/test/run-pass/alt-pattern-no-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -1,7 +1,7 @@\n tag maybe<T> { nothing; just(T); }\n \n fn foo(x: maybe<int>) {\n-    alt x { nothing. { #error(\"A\"); } just(a) { #error(\"B\"); } }\n+    alt x { nothing { #error(\"A\"); } just(a) { #error(\"B\"); } }\n }\n \n fn main() { }"}, {"sha": "67b4a9b6a128e97297f2733eabd4c36ae29f1d5b", "filename": "src/test/run-pass/alt-phi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Falt-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Falt-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-phi.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -7,8 +7,8 @@ fn foo(it: block(int)) { it(10); }\n fn main() {\n     let x = true;\n     alt a {\n-      a. { x = true; foo {|_i|} }\n-      b. { x = false; }\n-      c. { x = false; }\n+      a { x = true; foo {|_i|} }\n+      b { x = false; }\n+      c { x = false; }\n     }\n }"}, {"sha": "884a4da8a3d81731876ffb6dd5481c0444d609bc", "filename": "src/test/run-pass/alt-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Falt-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Falt-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-str.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -7,7 +7,7 @@ fn main() {\n \n \n     alt tag1(\"test\") {\n-      tag2. { fail; }\n+      tag2 { fail; }\n       tag1(\"not-test\") { fail; }\n       tag1(\"test\") { }\n       _ { fail; }"}, {"sha": "cbdadda8e88104f1dad99bdd628f59248a20ce4f", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -49,7 +49,7 @@ fn main() {\n     while true {\n         let msg = recv(p);\n         alt msg {\n-          closed. { #debug(\"Got close message\"); break; }\n+          closed { #debug(\"Got close message\"); break; }\n           received(data) {\n             #debug(\"Got data. Length is:\");\n             log(debug, vec::len::<u8>(data));"}, {"sha": "29ffe6e4bc0ff6e8e9037ebaee21d7cd354c0b0e", "filename": "src/test/run-pass/nested-alts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-alts.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -5,10 +5,10 @@ fn foo() {\n     alt some::<int>(5) {\n       some::<int>(x) {\n         let bar;\n-        alt none::<int> { none::<int>. { bar = 5; } _ { baz(); } }\n+        alt none::<int> { none::<int> { bar = 5; } _ { baz(); } }\n         log(debug, bar);\n       }\n-      none::<int>. { #debug(\"hello\"); }\n+      none::<int> { #debug(\"hello\"); }\n     }\n }\n "}, {"sha": "661d5cc7a3886524a68135860f1acbdd33d470be", "filename": "src/test/run-pass/nullary-or-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Fnullary-or-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Fnullary-or-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullary-or-pattern.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -1,7 +1,7 @@\n tag blah { a; b; }\n \n fn or_alt(q: blah) -> int {\n-  alt q { a. | b. { 42 } }\n+  alt q { a | b { 42 } }\n }\n \n fn main() {"}, {"sha": "cc86fbd3e8bd3a3b3e72e10822c48112cb67f3af", "filename": "src/test/run-pass/or-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2For-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2For-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2For-pattern.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -1,7 +1,7 @@\n tag blah { a(int, int, uint); b(int, int); c; }\n \n fn or_alt(q: blah) -> int {\n-    alt q { a(x, y, _) | b(x, y) { ret x + y; } c. { ret 0; } }\n+    alt q { a(x, y, _) | b(x, y) { ret x + y; } c { ret 0; } }\n }\n \n fn main() {"}, {"sha": "fd499bddd8f67ab33564945852b77424bad6517e", "filename": "src/test/run-pass/simple-alt-generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -4,5 +4,5 @@ tag opt<T> { none; }\n \n fn main() {\n     let x = none::<int>;\n-    alt x { none::<int>. { #debug(\"hello world\"); } }\n+    alt x { none::<int> { #debug(\"hello world\"); } }\n }"}, {"sha": "34b2ce242ca2c8cc5f83d887c300014fc6aded14", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -7,7 +7,7 @@ tag clam<T> { a(T, int); b; }\n fn uhoh<T>(v: [clam<T>]) {\n     alt v[1] {\n       a::<T>(t, u) { #debug(\"incorrect\"); log(debug, u); fail; }\n-      b::<T>. { #debug(\"correct\"); }\n+      b::<T> { #debug(\"correct\"); }\n     }\n }\n "}, {"sha": "588b4107f130ce7f816d17663b56e7df12b5b374", "filename": "src/test/run-pass/tag-variant-disr-val.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -26,12 +26,12 @@ fn test_color(color: color, val: int, name: str) unsafe {\n \n fn get_color_alt(color: color) -> str {\n     alt color {\n-      red. {\"red\"}\n-      green. {\"green\"}\n-      blue. {\"blue\"}\n-      black. {\"black\"}\n-      white. {\"white\"}\n-      imaginary. {\"imaginary\"}\n+      red {\"red\"}\n+      green {\"green\"}\n+      blue {\"blue\"}\n+      black {\"black\"}\n+      white {\"white\"}\n+      imaginary {\"imaginary\"}\n       _ {\"unknown\"}\n     }\n }"}, {"sha": "8b273543549599394ae3af9b1b8d7b0812f3bde7", "filename": "src/test/run-pass/use-uninit-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -2,7 +2,7 @@\n \n fn foo<T>(o: myoption<T>) -> int {\n     let x: int = 5;\n-    alt o { none::<T>. { } some::<T>(t) { x += 1; } }\n+    alt o { none::<T> { } some::<T>(t) { x += 1; } }\n     ret x;\n }\n "}, {"sha": "cccb1ac14d77103d5d9baee0c053e1b23dda3591", "filename": "src/test/run-pass/use-uninit-alt2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b028f527f2c487a5f4196fdf3cfc7a2acef74ff/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs?ref=5b028f527f2c487a5f4196fdf3cfc7a2acef74ff", "patch": "@@ -2,7 +2,7 @@\n \n fn foo<T>(o: myoption<T>) -> int {\n     let x: int;\n-    alt o { none::<T>. { fail; } some::<T>(t) { x = 5; } }\n+    alt o { none::<T> { fail; } some::<T>(t) { x = 5; } }\n     ret x;\n }\n "}]}