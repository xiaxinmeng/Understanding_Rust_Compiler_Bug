{"sha": "215ec38624818c4df9889c702fecb10c33b646ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNWVjMzg2MjQ4MThjNGRmOTg4OWM3MDJmZWNiMTBjMzNiNjQ2ZWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-15T17:15:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-27T13:25:20Z"}, "message": "track call IDs", "tree": {"sha": "625d6334833ce4fc5002a1f2e3549fa24d5d89e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/625d6334833ce4fc5002a1f2e3549fa24d5d89e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/215ec38624818c4df9889c702fecb10c33b646ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/215ec38624818c4df9889c702fecb10c33b646ee", "html_url": "https://github.com/rust-lang/rust/commit/215ec38624818c4df9889c702fecb10c33b646ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/215ec38624818c4df9889c702fecb10c33b646ee/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9370d2b74d38720fed7887fc708b8fa67fe7adb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9370d2b74d38720fed7887fc708b8fa67fe7adb", "html_url": "https://github.com/rust-lang/rust/commit/e9370d2b74d38720fed7887fc708b8fa67fe7adb"}], "stats": {"total": 81, "additions": 65, "deletions": 16}, "files": [{"sha": "3211f9c5bd9514dbfe23b1b936443f54218b999c", "filename": "src/lib.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/215ec38624818c4df9889c702fecb10c33b646ee/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215ec38624818c4df9889c702fecb10c33b646ee/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=215ec38624818c4df9889c702fecb10c33b646ee", "patch": "@@ -289,7 +289,7 @@ impl<'tcx> Evaluator<'tcx> {\n             env_vars: HashMap::default(),\n             tls: TlsData::default(),\n             validate,\n-            stacked_borrows: stacked_borrows::State::new(),\n+            stacked_borrows: stacked_borrows::State::default(),\n         }\n     }\n }\n@@ -301,7 +301,8 @@ type MiriEvalContext<'a, 'mir, 'tcx> = EvalContext<'a, 'mir, 'tcx, Evaluator<'tc\n impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     type MemoryKinds = MiriMemoryKind;\n \n-    type MemoryExtra = ();\n+    type FrameExtra = stacked_borrows::CallId;\n+    type MemoryExtra = stacked_borrows::MemoryState;\n     type AllocExtra = stacked_borrows::Stacks;\n     type PointerTag = Borrow;\n \n@@ -538,4 +539,19 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n             ecx.retag(fn_entry, place)\n         }\n     }\n+\n+    #[inline(always)]\n+    fn stack_push(\n+        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+    ) -> EvalResult<'tcx, stacked_borrows::CallId> {\n+        Ok(ecx.memory().extra.borrow_mut().new_call())\n+    }\n+\n+    #[inline(always)]\n+    fn stack_pop(\n+        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        extra: stacked_borrows::CallId,\n+    ) -> EvalResult<'tcx> {\n+        Ok(ecx.memory().extra.borrow_mut().end_call(extra))\n+    }\n }"}, {"sha": "067e3bb8445f0a5f952d2dbfc9d4319fe414659d", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 47, "deletions": 14, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/215ec38624818c4df9889c702fecb10c33b646ee/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215ec38624818c4df9889c702fecb10c33b646ee/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=215ec38624818c4df9889c702fecb10c33b646ee", "patch": "@@ -1,4 +1,6 @@\n use std::cell::RefCell;\n+use std::collections::HashSet;\n+use std::rc::Rc;\n \n use rustc::ty::{self, layout::Size};\n use rustc::hir::{Mutability, MutMutable, MutImmutable};\n@@ -10,6 +12,7 @@ use crate::{\n };\n \n pub type Timestamp = u64;\n+pub type CallId = u64;\n \n /// Information about which kind of borrow was used to create the reference this is tagged\n /// with.\n@@ -80,15 +83,6 @@ pub struct Stack {\n     frozen_since: Option<Timestamp>, // virtual frozen \"item\" on top of the stack\n }\n \n-impl Default for Stack {\n-    fn default() -> Self {\n-        Stack {\n-            borrows: vec![BorStackItem::Shr],\n-            frozen_since: None,\n-        }\n-    }\n-}\n-\n impl Stack {\n     #[inline(always)]\n     pub fn is_frozen(&self) -> bool {\n@@ -107,17 +101,50 @@ pub enum RefKind {\n     Raw,\n }\n \n+/// Extra global state in the memory, available to the memory access hooks\n+#[derive(Debug)]\n+pub struct BarrierTracking {\n+    next_id: CallId,\n+    active_calls: HashSet<CallId>,\n+}\n+pub type MemoryState = Rc<RefCell<BarrierTracking>>;\n+\n+impl Default for BarrierTracking {\n+    fn default() -> Self {\n+        BarrierTracking {\n+            next_id: 0,\n+            active_calls: HashSet::default(),\n+        }\n+    }\n+}\n+\n+impl BarrierTracking {\n+    pub fn new_call(&mut self) -> CallId {\n+        let id = self.next_id;\n+        trace!(\"new_call: Assigning ID {}\", id);\n+        self.active_calls.insert(id);\n+        self.next_id += 1;\n+        id\n+    }\n+\n+    pub fn end_call(&mut self, id: CallId) {\n+        assert!(self.active_calls.remove(&id));\n+    }\n+}\n+\n /// Extra global machine state\n #[derive(Clone, Debug)]\n pub struct State {\n     clock: Timestamp\n }\n \n-impl State {\n-    pub fn new() -> State {\n+impl Default for State {\n+    fn default() -> Self {\n         State { clock: 0 }\n     }\n+}\n \n+impl State {\n     fn increment_clock(&mut self) -> Timestamp {\n         let val = self.clock;\n         self.clock = val + 1;\n@@ -130,6 +157,7 @@ impl State {\n pub struct Stacks {\n     // Even reading memory can have effects on the stack, so we need a `RefCell` here.\n     stacks: RefCell<RangeMap<Stack>>,\n+    barrier_tracking: MemoryState,\n }\n \n /// Core per-location operations: deref, access, create.\n@@ -358,11 +386,16 @@ impl<'tcx> Stacks {\n }\n \n /// Hooks and glue\n-impl AllocationExtra<Borrow, ()> for Stacks {\n+impl AllocationExtra<Borrow, MemoryState> for Stacks {\n     #[inline(always)]\n-    fn memory_allocated<'tcx>(size: Size, _extra: &()) -> Self {\n+    fn memory_allocated<'tcx>(size: Size, extra: &MemoryState) -> Self {\n+        let stack = Stack {\n+            borrows: vec![BorStackItem::Shr],\n+            frozen_since: None,\n+        };\n         Stacks {\n-            stacks: RefCell::new(RangeMap::new(size, Stack::default()))\n+            stacks: RefCell::new(RangeMap::new(size, stack)),\n+            barrier_tracking: Rc::clone(extra),\n         }\n     }\n "}]}