{"sha": "e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZjkxYmZhNTc4ZTU3YzFlZjRiZTMzNDNlYmI0ZTg5NTBlNWRhZTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-25T10:17:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-25T10:17:40Z"}, "message": "Merge #4605\n\n4605: Reorganize TypeScript r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "cb0ab7180b97dfdf8347c15d6e445628f7802367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb0ab7180b97dfdf8347c15d6e445628f7802367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJey5tECRBK7hj4Ov3rIwAAdHIIAC8Omlz+SIFq11i4aA5spDTf\n4BHY3/Q96FYKBw+J7wmUO0PLp4lZrDd3MXvXVE/1DSWAnR/oFnO7aDn0+Pe1dwcy\nEoW09qLK6TYxNk+6Vy26xKZSDVZjfT9GBbeKBqyZQ/xUXJSdftBg1BvRiETLSzfO\njBPWgHBH0TvSu4aq+N2Nb5uABsVa40MqN5WjJD6+AcbVla7nWhM6/kww4NDPRyGd\n2ssyJfBseht41Ju9O9L6BAcwHJJshzVwQSCKihBPEGE4jmRH4H0gj9xSMiP9ccKD\nAHE+djsgYI/rwrM14a6kybbHo5CXsR+EY0Zmxz20Zn+GjerwRZOa5Hus99IlaSs=\n=E091\n-----END PGP SIGNATURE-----\n", "payload": "tree cb0ab7180b97dfdf8347c15d6e445628f7802367\nparent 1527feb744c7911b6ca482554f0399d3ef0ebfdc\nparent 6058b8b0f6a24ad5b905d99d780a31b9e3d578d7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590401860 +0000\ncommitter GitHub <noreply@github.com> 1590401860 +0000\n\nMerge #4605\n\n4605: Reorganize TypeScript r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6", "html_url": "https://github.com/rust-lang/rust/commit/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1527feb744c7911b6ca482554f0399d3ef0ebfdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1527feb744c7911b6ca482554f0399d3ef0ebfdc", "html_url": "https://github.com/rust-lang/rust/commit/1527feb744c7911b6ca482554f0399d3ef0ebfdc"}, {"sha": "6058b8b0f6a24ad5b905d99d780a31b9e3d578d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6058b8b0f6a24ad5b905d99d780a31b9e3d578d7", "html_url": "https://github.com/rust-lang/rust/commit/6058b8b0f6a24ad5b905d99d780a31b9e3d578d7"}], "stats": {"total": 881, "additions": 382, "deletions": 499}, "files": [{"sha": "4fdd167bd5f70bd0769807fa886d4c25612dea8d", "filename": "editors/code/src/ast_inspector.ts", "status": "renamed", "additions": 5, "deletions": 83, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6/editors%2Fcode%2Fsrc%2Fast_inspector.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6/editors%2Fcode%2Fsrc%2Fast_inspector.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fast_inspector.ts?ref=e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6", "patch": "@@ -1,93 +1,15 @@\n import * as vscode from 'vscode';\n-import * as ra from '../rust-analyzer-api';\n-\n-import { Ctx, Cmd, Disposable } from '../ctx';\n-import { isRustDocument, RustEditor, isRustEditor, sleep } from '../util';\n-\n-const AST_FILE_SCHEME = \"rust-analyzer\";\n-\n-// Opens the virtual file that will show the syntax tree\n-//\n-// The contents of the file come from the `TextDocumentContentProvider`\n-export function syntaxTree(ctx: Ctx): Cmd {\n-    const tdcp = new TextDocumentContentProvider(ctx);\n-\n-    void new AstInspector(ctx);\n-\n-    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider(AST_FILE_SCHEME, tdcp));\n-    ctx.pushCleanup(vscode.languages.setLanguageConfiguration(\"ra_syntax_tree\", {\n-        brackets: [[\"[\", \")\"]],\n-    }));\n-\n-    return async () => {\n-        const editor = vscode.window.activeTextEditor;\n-        const rangeEnabled = !!editor && !editor.selection.isEmpty;\n-\n-        const uri = rangeEnabled\n-            ? vscode.Uri.parse(`${tdcp.uri.toString()}?range=true`)\n-            : tdcp.uri;\n-\n-        const document = await vscode.workspace.openTextDocument(uri);\n-\n-        tdcp.eventEmitter.fire(uri);\n-\n-        void await vscode.window.showTextDocument(document, {\n-            viewColumn: vscode.ViewColumn.Two,\n-            preserveFocus: true\n-        });\n-    };\n-}\n-\n-class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {\n-    readonly uri = vscode.Uri.parse('rust-analyzer://syntaxtree/tree.rast');\n-    readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n-\n-\n-    constructor(private readonly ctx: Ctx) {\n-        vscode.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, ctx.subscriptions);\n-        vscode.window.onDidChangeActiveTextEditor(this.onDidChangeActiveTextEditor, this, ctx.subscriptions);\n-    }\n-\n-    private onDidChangeTextDocument(event: vscode.TextDocumentChangeEvent) {\n-        if (isRustDocument(event.document)) {\n-            // We need to order this after language server updates, but there's no API for that.\n-            // Hence, good old sleep().\n-            void sleep(10).then(() => this.eventEmitter.fire(this.uri));\n-        }\n-    }\n-    private onDidChangeActiveTextEditor(editor: vscode.TextEditor | undefined) {\n-        if (editor && isRustEditor(editor)) {\n-            this.eventEmitter.fire(this.uri);\n-        }\n-    }\n-\n-    provideTextDocumentContent(uri: vscode.Uri, ct: vscode.CancellationToken): vscode.ProviderResult<string> {\n-        const rustEditor = this.ctx.activeRustEditor;\n-        if (!rustEditor) return '';\n-\n-        // When the range based query is enabled we take the range of the selection\n-        const range = uri.query === 'range=true' && !rustEditor.selection.isEmpty\n-            ? this.ctx.client.code2ProtocolConverter.asRange(rustEditor.selection)\n-            : null;\n-\n-        const params = { textDocument: { uri: rustEditor.document.uri.toString() }, range, };\n-        return this.ctx.client.sendRequest(ra.syntaxTree, params, ct);\n-    }\n-\n-    get onDidChange(): vscode.Event<vscode.Uri> {\n-        return this.eventEmitter.event;\n-    }\n-}\n \n+import { Ctx, Disposable } from './ctx';\n+import { RustEditor, isRustEditor } from './util';\n \n // FIXME: consider implementing this via the Tree View API?\n // https://code.visualstudio.com/api/extension-guides/tree-view\n-class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, Disposable {\n+export class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, Disposable {\n     private readonly astDecorationType = vscode.window.createTextEditorDecorationType({\n         borderColor: new vscode.ThemeColor('rust_analyzer.syntaxTreeBorder'),\n         borderStyle: \"solid\",\n         borderWidth: \"2px\",\n-\n     });\n     private rustEditor: undefined | RustEditor;\n \n@@ -113,7 +35,7 @@ class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, D\n     });\n \n     constructor(ctx: Ctx) {\n-        ctx.pushCleanup(vscode.languages.registerHoverProvider({ scheme: AST_FILE_SCHEME }, this));\n+        ctx.pushCleanup(vscode.languages.registerHoverProvider({ scheme: 'rust-analyzer' }, this));\n         ctx.pushCleanup(vscode.languages.registerDefinitionProvider({ language: \"rust\" }, this));\n         vscode.workspace.onDidCloseTextDocument(this.onDidCloseTextDocument, this, ctx.subscriptions);\n         vscode.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, ctx.subscriptions);\n@@ -146,7 +68,7 @@ class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, D\n     }\n \n     private findAstTextEditor(): undefined | vscode.TextEditor {\n-        return vscode.window.visibleTextEditors.find(it => it.document.uri.scheme === AST_FILE_SCHEME);\n+        return vscode.window.visibleTextEditors.find(it => it.document.uri.scheme === 'rust-analyzer');\n     }\n \n     private setRustEditor(newRustEditor: undefined | RustEditor) {", "previous_filename": "editors/code/src/commands/syntax_tree.ts"}, {"sha": "573af5aa580d4cae26208756d8242605747681c0", "filename": "editors/code/src/commands.ts", "status": "added", "additions": 370, "deletions": 0, "changes": 370, "blob_url": "https://github.com/rust-lang/rust/blob/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6", "patch": "@@ -0,0 +1,370 @@\n+import * as vscode from 'vscode';\n+import * as lc from 'vscode-languageclient';\n+import * as ra from './rust-analyzer-api';\n+\n+import { Ctx, Cmd } from './ctx';\n+import { applySnippetWorkspaceEdit } from './snippets';\n+import { spawnSync } from 'child_process';\n+import { RunnableQuickPick, selectRunnable, createTask } from './run';\n+import { AstInspector } from './ast_inspector';\n+import { isRustDocument, sleep, isRustEditor } from './util';\n+\n+export * from './ast_inspector';\n+export * from './run';\n+\n+export function analyzerStatus(ctx: Ctx): Cmd {\n+    const tdcp = new class implements vscode.TextDocumentContentProvider {\n+        readonly uri = vscode.Uri.parse('rust-analyzer-status://status');\n+        readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+\n+        provideTextDocumentContent(_uri: vscode.Uri): vscode.ProviderResult<string> {\n+            if (!vscode.window.activeTextEditor) return '';\n+\n+            return ctx.client.sendRequest(ra.analyzerStatus, null);\n+        }\n+\n+        get onDidChange(): vscode.Event<vscode.Uri> {\n+            return this.eventEmitter.event;\n+        }\n+    }();\n+\n+    let poller: NodeJS.Timer | undefined = undefined;\n+\n+    ctx.pushCleanup(\n+        vscode.workspace.registerTextDocumentContentProvider(\n+            'rust-analyzer-status',\n+            tdcp,\n+        ),\n+    );\n+\n+    ctx.pushCleanup({\n+        dispose() {\n+            if (poller !== undefined) {\n+                clearInterval(poller);\n+            }\n+        },\n+    });\n+\n+    return async () => {\n+        if (poller === undefined) {\n+            poller = setInterval(() => tdcp.eventEmitter.fire(tdcp.uri), 1000);\n+        }\n+        const document = await vscode.workspace.openTextDocument(tdcp.uri);\n+        return vscode.window.showTextDocument(document, vscode.ViewColumn.Two, true);\n+    };\n+}\n+\n+export function matchingBrace(ctx: Ctx): Cmd {\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        const client = ctx.client;\n+        if (!editor || !client) return;\n+\n+        const response = await client.sendRequest(ra.matchingBrace, {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            positions: editor.selections.map(s =>\n+                client.code2ProtocolConverter.asPosition(s.active),\n+            ),\n+        });\n+        editor.selections = editor.selections.map((sel, idx) => {\n+            const active = client.protocol2CodeConverter.asPosition(\n+                response[idx],\n+            );\n+            const anchor = sel.isEmpty ? active : sel.anchor;\n+            return new vscode.Selection(anchor, active);\n+        });\n+        editor.revealRange(editor.selection);\n+    };\n+}\n+\n+export function joinLines(ctx: Ctx): Cmd {\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        const client = ctx.client;\n+        if (!editor || !client) return;\n+\n+        const items: lc.TextEdit[] = await client.sendRequest(ra.joinLines, {\n+            ranges: editor.selections.map((it) => client.code2ProtocolConverter.asRange(it)),\n+            textDocument: { uri: editor.document.uri.toString() },\n+        });\n+        editor.edit((builder) => {\n+            client.protocol2CodeConverter.asTextEdits(items).forEach((edit) => {\n+                builder.replace(edit.range, edit.newText);\n+            });\n+        });\n+    };\n+}\n+\n+export function onEnter(ctx: Ctx): Cmd {\n+    async function handleKeypress() {\n+        const editor = ctx.activeRustEditor;\n+        const client = ctx.client;\n+\n+        if (!editor || !client) return false;\n+\n+        const change = await client.sendRequest(ra.onEnter, {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            position: client.code2ProtocolConverter.asPosition(\n+                editor.selection.active,\n+            ),\n+        }).catch(_error => {\n+            // client.logFailedRequest(OnEnterRequest.type, error);\n+            return null;\n+        });\n+        if (!change) return false;\n+\n+        const workspaceEdit = client.protocol2CodeConverter.asWorkspaceEdit(change);\n+        await applySnippetWorkspaceEdit(workspaceEdit);\n+        return true;\n+    }\n+\n+    return async () => {\n+        if (await handleKeypress()) return;\n+\n+        await vscode.commands.executeCommand('default:type', { text: '\\n' });\n+    };\n+}\n+\n+export function parentModule(ctx: Ctx): Cmd {\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        const client = ctx.client;\n+        if (!editor || !client) return;\n+\n+        const response = await client.sendRequest(ra.parentModule, {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            position: client.code2ProtocolConverter.asPosition(\n+                editor.selection.active,\n+            ),\n+        });\n+        const loc = response[0];\n+        if (loc == null) return;\n+\n+        const uri = client.protocol2CodeConverter.asUri(loc.uri);\n+        const range = client.protocol2CodeConverter.asRange(loc.range);\n+\n+        const doc = await vscode.workspace.openTextDocument(uri);\n+        const e = await vscode.window.showTextDocument(doc);\n+        e.selection = new vscode.Selection(range.start, range.start);\n+        e.revealRange(range, vscode.TextEditorRevealType.InCenter);\n+    };\n+}\n+\n+export function ssr(ctx: Ctx): Cmd {\n+    return async () => {\n+        const client = ctx.client;\n+        if (!client) return;\n+\n+        const options: vscode.InputBoxOptions = {\n+            value: \"() ==>> ()\",\n+            prompt: \"Enter request, for example 'Foo($a:expr) ==> Foo::new($a)' \",\n+            validateInput: async (x: string) => {\n+                try {\n+                    await client.sendRequest(ra.ssr, { query: x, parseOnly: true });\n+                } catch (e) {\n+                    return e.toString();\n+                }\n+                return null;\n+            }\n+        };\n+        const request = await vscode.window.showInputBox(options);\n+        if (!request) return;\n+\n+        const edit = await client.sendRequest(ra.ssr, { query: request, parseOnly: false });\n+\n+        await vscode.workspace.applyEdit(client.protocol2CodeConverter.asWorkspaceEdit(edit));\n+    };\n+}\n+\n+export function serverVersion(ctx: Ctx): Cmd {\n+    return async () => {\n+        const { stdout } = spawnSync(ctx.serverPath, [\"--version\"], { encoding: \"utf8\" });\n+        const commitHash = stdout.slice(`rust-analyzer `.length).trim();\n+        const { releaseTag } = ctx.config.package;\n+\n+        void vscode.window.showInformationMessage(\n+            `rust-analyzer version: ${releaseTag ?? \"unreleased\"} (${commitHash})`\n+        );\n+    };\n+}\n+\n+export function toggleInlayHints(ctx: Ctx): Cmd {\n+    return async () => {\n+        await vscode\n+            .workspace\n+            .getConfiguration(`${ctx.config.rootSection}.inlayHints`)\n+            .update('enable', !ctx.config.inlayHints.enable, vscode.ConfigurationTarget.Workspace);\n+    };\n+}\n+\n+export function run(ctx: Ctx): Cmd {\n+    let prevRunnable: RunnableQuickPick | undefined;\n+\n+    return async () => {\n+        const item = await selectRunnable(ctx, prevRunnable);\n+        if (!item) return;\n+\n+        item.detail = 'rerun';\n+        prevRunnable = item;\n+        const task = createTask(item.runnable);\n+        return await vscode.tasks.executeTask(task);\n+    };\n+}\n+\n+// Opens the virtual file that will show the syntax tree\n+//\n+// The contents of the file come from the `TextDocumentContentProvider`\n+export function syntaxTree(ctx: Ctx): Cmd {\n+    const tdcp = new class implements vscode.TextDocumentContentProvider {\n+        readonly uri = vscode.Uri.parse('rust-analyzer://syntaxtree/tree.rast');\n+        readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+        constructor() {\n+            vscode.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, ctx.subscriptions);\n+            vscode.window.onDidChangeActiveTextEditor(this.onDidChangeActiveTextEditor, this, ctx.subscriptions);\n+        }\n+\n+        private onDidChangeTextDocument(event: vscode.TextDocumentChangeEvent) {\n+            if (isRustDocument(event.document)) {\n+                // We need to order this after language server updates, but there's no API for that.\n+                // Hence, good old sleep().\n+                void sleep(10).then(() => this.eventEmitter.fire(this.uri));\n+            }\n+        }\n+        private onDidChangeActiveTextEditor(editor: vscode.TextEditor | undefined) {\n+            if (editor && isRustEditor(editor)) {\n+                this.eventEmitter.fire(this.uri);\n+            }\n+        }\n+\n+        provideTextDocumentContent(uri: vscode.Uri, ct: vscode.CancellationToken): vscode.ProviderResult<string> {\n+            const rustEditor = ctx.activeRustEditor;\n+            if (!rustEditor) return '';\n+\n+            // When the range based query is enabled we take the range of the selection\n+            const range = uri.query === 'range=true' && !rustEditor.selection.isEmpty\n+                ? ctx.client.code2ProtocolConverter.asRange(rustEditor.selection)\n+                : null;\n+\n+            const params = { textDocument: { uri: rustEditor.document.uri.toString() }, range, };\n+            return ctx.client.sendRequest(ra.syntaxTree, params, ct);\n+        }\n+\n+        get onDidChange(): vscode.Event<vscode.Uri> {\n+            return this.eventEmitter.event;\n+        }\n+    };\n+\n+    void new AstInspector(ctx);\n+\n+    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider('rust-analyzer', tdcp));\n+    ctx.pushCleanup(vscode.languages.setLanguageConfiguration(\"ra_syntax_tree\", {\n+        brackets: [[\"[\", \")\"]],\n+    }));\n+\n+    return async () => {\n+        const editor = vscode.window.activeTextEditor;\n+        const rangeEnabled = !!editor && !editor.selection.isEmpty;\n+\n+        const uri = rangeEnabled\n+            ? vscode.Uri.parse(`${tdcp.uri.toString()}?range=true`)\n+            : tdcp.uri;\n+\n+        const document = await vscode.workspace.openTextDocument(uri);\n+\n+        tdcp.eventEmitter.fire(uri);\n+\n+        void await vscode.window.showTextDocument(document, {\n+            viewColumn: vscode.ViewColumn.Two,\n+            preserveFocus: true\n+        });\n+    };\n+}\n+\n+\n+// Opens the virtual file that will show the syntax tree\n+//\n+// The contents of the file come from the `TextDocumentContentProvider`\n+export function expandMacro(ctx: Ctx): Cmd {\n+    function codeFormat(expanded: ra.ExpandedMacro): string {\n+        let result = `// Recursive expansion of ${expanded.name}! macro\\n`;\n+        result += '// ' + '='.repeat(result.length - 3);\n+        result += '\\n\\n';\n+        result += expanded.expansion;\n+\n+        return result;\n+    }\n+\n+    const tdcp = new class implements vscode.TextDocumentContentProvider {\n+        uri = vscode.Uri.parse('rust-analyzer://expandMacro/[EXPANSION].rs');\n+        eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+        async provideTextDocumentContent(_uri: vscode.Uri): Promise<string> {\n+            const editor = vscode.window.activeTextEditor;\n+            const client = ctx.client;\n+            if (!editor || !client) return '';\n+\n+            const position = editor.selection.active;\n+\n+            const expanded = await client.sendRequest(ra.expandMacro, {\n+                textDocument: { uri: editor.document.uri.toString() },\n+                position,\n+            });\n+\n+            if (expanded == null) return 'Not available';\n+\n+            return codeFormat(expanded);\n+        }\n+\n+        get onDidChange(): vscode.Event<vscode.Uri> {\n+            return this.eventEmitter.event;\n+        }\n+    }();\n+\n+    ctx.pushCleanup(\n+        vscode.workspace.registerTextDocumentContentProvider(\n+            'rust-analyzer',\n+            tdcp,\n+        ),\n+    );\n+\n+    return async () => {\n+        const document = await vscode.workspace.openTextDocument(tdcp.uri);\n+        tdcp.eventEmitter.fire(tdcp.uri);\n+        return vscode.window.showTextDocument(\n+            document,\n+            vscode.ViewColumn.Two,\n+            true,\n+        );\n+    };\n+}\n+\n+export function collectGarbage(ctx: Ctx): Cmd {\n+    return async () => ctx.client.sendRequest(ra.collectGarbage, null);\n+}\n+\n+export function showReferences(ctx: Ctx): Cmd {\n+    return (uri: string, position: lc.Position, locations: lc.Location[]) => {\n+        const client = ctx.client;\n+        if (client) {\n+            vscode.commands.executeCommand(\n+                'editor.action.showReferences',\n+                vscode.Uri.parse(uri),\n+                client.protocol2CodeConverter.asPosition(position),\n+                locations.map(client.protocol2CodeConverter.asLocation),\n+            );\n+        }\n+    };\n+}\n+\n+export function applyActionGroup(_ctx: Ctx): Cmd {\n+    return async (actions: { label: string; edit: vscode.WorkspaceEdit }[]) => {\n+        const selectedAction = await vscode.window.showQuickPick(actions);\n+        if (!selectedAction) return;\n+        await applySnippetWorkspaceEdit(selectedAction.edit);\n+    };\n+}\n+\n+export function applySnippetWorkspaceEditCommand(_ctx: Ctx): Cmd {\n+    return async (edit: vscode.WorkspaceEdit) => {\n+        await applySnippetWorkspaceEdit(edit);\n+    };\n+}"}, {"sha": "09daa3402cf674926929e746c35b12e60ba77700", "filename": "editors/code/src/commands/analyzer_status.ts", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts?ref=1527feb744c7911b6ca482554f0399d3ef0ebfdc", "patch": "@@ -1,51 +0,0 @@\n-import * as vscode from 'vscode';\n-\n-import * as ra from '../rust-analyzer-api';\n-import { Ctx, Cmd } from '../ctx';\n-\n-// Shows status of rust-analyzer (for debugging)\n-export function analyzerStatus(ctx: Ctx): Cmd {\n-    let poller: NodeJS.Timer | undefined = undefined;\n-    const tdcp = new TextDocumentContentProvider(ctx);\n-\n-    ctx.pushCleanup(\n-        vscode.workspace.registerTextDocumentContentProvider(\n-            'rust-analyzer-status',\n-            tdcp,\n-        ),\n-    );\n-\n-    ctx.pushCleanup({\n-        dispose() {\n-            if (poller !== undefined) {\n-                clearInterval(poller);\n-            }\n-        },\n-    });\n-\n-    return async () => {\n-        if (poller === undefined) {\n-            poller = setInterval(() => tdcp.eventEmitter.fire(tdcp.uri), 1000);\n-        }\n-        const document = await vscode.workspace.openTextDocument(tdcp.uri);\n-        return vscode.window.showTextDocument(document, vscode.ViewColumn.Two, true);\n-    };\n-}\n-\n-class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {\n-    readonly uri = vscode.Uri.parse('rust-analyzer-status://status');\n-    readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n-\n-    constructor(private readonly ctx: Ctx) {\n-    }\n-\n-    provideTextDocumentContent(_uri: vscode.Uri): vscode.ProviderResult<string> {\n-        if (!vscode.window.activeTextEditor) return '';\n-\n-        return this.ctx.client.sendRequest(ra.analyzerStatus, null);\n-    }\n-\n-    get onDidChange(): vscode.Event<vscode.Uri> {\n-        return this.eventEmitter.event;\n-    }\n-}"}, {"sha": "23f2ef1d5e362c832092e532080c411b577134b8", "filename": "editors/code/src/commands/expand_macro.ts", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts?ref=1527feb744c7911b6ca482554f0399d3ef0ebfdc", "patch": "@@ -1,66 +0,0 @@\n-import * as vscode from 'vscode';\n-import * as ra from '../rust-analyzer-api';\n-\n-import { Ctx, Cmd } from '../ctx';\n-\n-// Opens the virtual file that will show the syntax tree\n-//\n-// The contents of the file come from the `TextDocumentContentProvider`\n-export function expandMacro(ctx: Ctx): Cmd {\n-    const tdcp = new TextDocumentContentProvider(ctx);\n-    ctx.pushCleanup(\n-        vscode.workspace.registerTextDocumentContentProvider(\n-            'rust-analyzer',\n-            tdcp,\n-        ),\n-    );\n-\n-    return async () => {\n-        const document = await vscode.workspace.openTextDocument(tdcp.uri);\n-        tdcp.eventEmitter.fire(tdcp.uri);\n-        return vscode.window.showTextDocument(\n-            document,\n-            vscode.ViewColumn.Two,\n-            true,\n-        );\n-    };\n-}\n-\n-function codeFormat(expanded: ra.ExpandedMacro): string {\n-    let result = `// Recursive expansion of ${expanded.name}! macro\\n`;\n-    result += '// ' + '='.repeat(result.length - 3);\n-    result += '\\n\\n';\n-    result += expanded.expansion;\n-\n-    return result;\n-}\n-\n-class TextDocumentContentProvider\n-    implements vscode.TextDocumentContentProvider {\n-    uri = vscode.Uri.parse('rust-analyzer://expandMacro/[EXPANSION].rs');\n-    eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n-\n-    constructor(private readonly ctx: Ctx) {\n-    }\n-\n-    async provideTextDocumentContent(_uri: vscode.Uri): Promise<string> {\n-        const editor = vscode.window.activeTextEditor;\n-        const client = this.ctx.client;\n-        if (!editor || !client) return '';\n-\n-        const position = editor.selection.active;\n-\n-        const expanded = await client.sendRequest(ra.expandMacro, {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            position,\n-        });\n-\n-        if (expanded == null) return 'Not available';\n-\n-        return codeFormat(expanded);\n-    }\n-\n-    get onDidChange(): vscode.Event<vscode.Uri> {\n-        return this.eventEmitter.event;\n-    }\n-}"}, {"sha": "0bf1ee6e671e12ba46b06663b20d9c20ee4face4", "filename": "editors/code/src/commands/join_lines.ts", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts?ref=1527feb744c7911b6ca482554f0399d3ef0ebfdc", "patch": "@@ -1,22 +0,0 @@\n-import * as ra from '../rust-analyzer-api';\n-import * as lc from 'vscode-languageclient';\n-\n-import { Ctx, Cmd } from '../ctx';\n-\n-export function joinLines(ctx: Ctx): Cmd {\n-    return async () => {\n-        const editor = ctx.activeRustEditor;\n-        const client = ctx.client;\n-        if (!editor || !client) return;\n-\n-        const items: lc.TextEdit[] = await client.sendRequest(ra.joinLines, {\n-            ranges: editor.selections.map((it) => client.code2ProtocolConverter.asRange(it)),\n-            textDocument: { uri: editor.document.uri.toString() },\n-        });\n-        editor.edit((builder) => {\n-            client.protocol2CodeConverter.asTextEdits(items).forEach((edit) => {\n-                builder.replace(edit.range, edit.newText);\n-            });\n-        });\n-    };\n-}"}, {"sha": "9c418b887c21117d72667fca3f7422a1a3252b0e", "filename": "editors/code/src/commands/matching_brace.ts", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts?ref=1527feb744c7911b6ca482554f0399d3ef0ebfdc", "patch": "@@ -1,27 +0,0 @@\n-import * as vscode from 'vscode';\n-import * as ra from '../rust-analyzer-api';\n-\n-import { Ctx, Cmd } from '../ctx';\n-\n-export function matchingBrace(ctx: Ctx): Cmd {\n-    return async () => {\n-        const editor = ctx.activeRustEditor;\n-        const client = ctx.client;\n-        if (!editor || !client) return;\n-\n-        const response = await client.sendRequest(ra.matchingBrace, {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            positions: editor.selections.map(s =>\n-                client.code2ProtocolConverter.asPosition(s.active),\n-            ),\n-        });\n-        editor.selections = editor.selections.map((sel, idx) => {\n-            const active = client.protocol2CodeConverter.asPosition(\n-                response[idx],\n-            );\n-            const anchor = sel.isEmpty ? active : sel.anchor;\n-            return new vscode.Selection(anchor, active);\n-        });\n-        editor.revealRange(editor.selection);\n-    };\n-}"}, {"sha": "a7871c31eed0bde9d209833eb2e9ff82b06df673", "filename": "editors/code/src/commands/on_enter.ts", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts?ref=1527feb744c7911b6ca482554f0399d3ef0ebfdc", "patch": "@@ -1,35 +0,0 @@\n-import * as vscode from 'vscode';\n-import * as ra from '../rust-analyzer-api';\n-\n-import { Cmd, Ctx } from '../ctx';\n-import { applySnippetWorkspaceEdit } from '.';\n-\n-async function handleKeypress(ctx: Ctx) {\n-    const editor = ctx.activeRustEditor;\n-    const client = ctx.client;\n-\n-    if (!editor || !client) return false;\n-\n-    const change = await client.sendRequest(ra.onEnter, {\n-        textDocument: { uri: editor.document.uri.toString() },\n-        position: client.code2ProtocolConverter.asPosition(\n-            editor.selection.active,\n-        ),\n-    }).catch(_error => {\n-        // client.logFailedRequest(OnEnterRequest.type, error);\n-        return null;\n-    });\n-    if (!change) return false;\n-\n-    const workspaceEdit = client.protocol2CodeConverter.asWorkspaceEdit(change);\n-    await applySnippetWorkspaceEdit(workspaceEdit);\n-    return true;\n-}\n-\n-export function onEnter(ctx: Ctx): Cmd {\n-    return async () => {\n-        if (await handleKeypress(ctx)) return;\n-\n-        await vscode.commands.executeCommand('default:type', { text: '\\n' });\n-    };\n-}"}, {"sha": "8f78ddd71c63ad19ed28342fde235a229d540543", "filename": "editors/code/src/commands/parent_module.ts", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts?ref=1527feb744c7911b6ca482554f0399d3ef0ebfdc", "patch": "@@ -1,29 +0,0 @@\n-import * as vscode from 'vscode';\n-import * as ra from '../rust-analyzer-api';\n-\n-import { Ctx, Cmd } from '../ctx';\n-\n-export function parentModule(ctx: Ctx): Cmd {\n-    return async () => {\n-        const editor = ctx.activeRustEditor;\n-        const client = ctx.client;\n-        if (!editor || !client) return;\n-\n-        const response = await client.sendRequest(ra.parentModule, {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            position: client.code2ProtocolConverter.asPosition(\n-                editor.selection.active,\n-            ),\n-        });\n-        const loc = response[0];\n-        if (loc == null) return;\n-\n-        const uri = client.protocol2CodeConverter.asUri(loc.uri);\n-        const range = client.protocol2CodeConverter.asRange(loc.range);\n-\n-        const doc = await vscode.workspace.openTextDocument(uri);\n-        const e = await vscode.window.showTextDocument(doc);\n-        e.selection = new vscode.Selection(range.start, range.start);\n-        e.revealRange(range, vscode.TextEditorRevealType.InCenter);\n-    };\n-}"}, {"sha": "d64ac726e2cc6ad8afb07ff22a1b00d18def2b9e", "filename": "editors/code/src/commands/server_version.ts", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fserver_version.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fserver_version.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fserver_version.ts?ref=1527feb744c7911b6ca482554f0399d3ef0ebfdc", "patch": "@@ -1,15 +0,0 @@\n-import * as vscode from \"vscode\";\n-import { spawnSync } from \"child_process\";\n-import { Ctx, Cmd } from '../ctx';\n-\n-export function serverVersion(ctx: Ctx): Cmd {\n-    return async () => {\n-        const { stdout } = spawnSync(ctx.serverPath, [\"--version\"], { encoding: \"utf8\" });\n-        const commitHash = stdout.slice(`rust-analyzer `.length).trim();\n-        const { releaseTag } = ctx.config.package;\n-\n-        void vscode.window.showInformationMessage(\n-            `rust-analyzer version: ${releaseTag ?? \"unreleased\"} (${commitHash})`\n-        );\n-    };\n-}"}, {"sha": "5d40a64d28e9067548f5e528a89749484c95fbea", "filename": "editors/code/src/commands/ssr.ts", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts?ref=1527feb744c7911b6ca482554f0399d3ef0ebfdc", "patch": "@@ -1,30 +0,0 @@\n-import * as vscode from 'vscode';\n-import * as ra from \"../rust-analyzer-api\";\n-\n-import { Ctx, Cmd } from '../ctx';\n-\n-export function ssr(ctx: Ctx): Cmd {\n-    return async () => {\n-        const client = ctx.client;\n-        if (!client) return;\n-\n-        const options: vscode.InputBoxOptions = {\n-            value: \"() ==>> ()\",\n-            prompt: \"Enter request, for example 'Foo($a:expr) ==> Foo::new($a)' \",\n-            validateInput: async (x: string) => {\n-                try {\n-                    await client.sendRequest(ra.ssr, { query: x, parseOnly: true });\n-                } catch (e) {\n-                    return e.toString();\n-                }\n-                return null;\n-            }\n-        };\n-        const request = await vscode.window.showInputBox(options);\n-        if (!request) return;\n-\n-        const edit = await client.sendRequest(ra.ssr, { query: request, parseOnly: false });\n-\n-        await vscode.workspace.applyEdit(client.protocol2CodeConverter.asWorkspaceEdit(edit));\n-    };\n-}"}, {"sha": "7606af8d0cb08c44e0c6ac02aab6f8b1aa27aa74", "filename": "editors/code/src/commands/toggle_inlay_hints.ts", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Ftoggle_inlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fcommands%2Ftoggle_inlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Ftoggle_inlay_hints.ts?ref=1527feb744c7911b6ca482554f0399d3ef0ebfdc", "patch": "@@ -1,11 +0,0 @@\n-import * as vscode from 'vscode';\n-import { Ctx, Cmd } from '../ctx';\n-\n-export function toggleInlayHints(ctx: Ctx): Cmd {\n-    return async () => {\n-        await vscode\n-            .workspace\n-            .getConfiguration(`${ctx.config.rootSection}.inlayHints`)\n-            .update('enable', !ctx.config.inlayHints.enable, vscode.ConfigurationTarget.Workspace);\n-    };\n-}"}, {"sha": "31ac81ee88d2ae056b6410bba0a89d9c79605e98", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6", "patch": "@@ -92,7 +92,6 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('runSingle', commands.runSingle);\n     ctx.registerCommand('debugSingle', commands.debugSingle);\n     ctx.registerCommand('showReferences', commands.showReferences);\n-    ctx.registerCommand('applySourceChange', commands.applySourceChange);\n     ctx.registerCommand('applySnippetWorkspaceEdit', commands.applySnippetWorkspaceEditCommand);\n     ctx.registerCommand('applyActionGroup', commands.applyActionGroup);\n "}, {"sha": "8f0487d74a1ec99c5755b85d16e4295235753088", "filename": "editors/code/src/run.ts", "status": "renamed", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6", "patch": "@@ -1,13 +1,13 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n-import * as ra from '../rust-analyzer-api';\n+import * as ra from './rust-analyzer-api';\n \n-import { Ctx, Cmd } from '../ctx';\n-import { startDebugSession, getDebugConfiguration } from '../debug';\n+import { Ctx, Cmd } from './ctx';\n+import { startDebugSession, getDebugConfiguration } from './debug';\n \n const quickPickButtons = [{ iconPath: new vscode.ThemeIcon(\"save\"), tooltip: \"Save as a launch.json configurtation.\" }];\n \n-async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick, debuggeeOnly = false, showButtons: boolean = true): Promise<RunnableQuickPick | undefined> {\n+export async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick, debuggeeOnly = false, showButtons: boolean = true): Promise<RunnableQuickPick | undefined> {\n     const editor = ctx.activeRustEditor;\n     const client = ctx.client;\n     if (!editor || !client) return;\n@@ -83,20 +83,6 @@ async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick, debugg\n     });\n }\n \n-export function run(ctx: Ctx): Cmd {\n-    let prevRunnable: RunnableQuickPick | undefined;\n-\n-    return async () => {\n-        const item = await selectRunnable(ctx, prevRunnable);\n-        if (!item) return;\n-\n-        item.detail = 'rerun';\n-        prevRunnable = item;\n-        const task = createTask(item.runnable);\n-        return await vscode.tasks.executeTask(task);\n-    };\n-}\n-\n export function runSingle(ctx: Ctx): Cmd {\n     return async (runnable: ra.Runnable) => {\n         const editor = ctx.activeRustEditor;\n@@ -165,7 +151,7 @@ export function newDebugConfig(ctx: Ctx): Cmd {\n     };\n }\n \n-class RunnableQuickPick implements vscode.QuickPickItem {\n+export class RunnableQuickPick implements vscode.QuickPickItem {\n     public label: string;\n     public description?: string | undefined;\n     public detail?: string | undefined;\n@@ -184,7 +170,7 @@ interface CargoTaskDefinition extends vscode.TaskDefinition {\n     env?: { [key: string]: string };\n }\n \n-function createTask(spec: ra.Runnable): vscode.Task {\n+export function createTask(spec: ra.Runnable): vscode.Task {\n     const TASK_SOURCE = 'Rust';\n     const definition: CargoTaskDefinition = {\n         type: 'cargo',", "previous_filename": "editors/code/src/commands/runnables.ts"}, {"sha": "794530162dc095fd81e2d3b3200b49f651e8435b", "filename": "editors/code/src/snippets.ts", "status": "renamed", "additions": 1, "deletions": 55, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6/editors%2Fcode%2Fsrc%2Fsnippets.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6/editors%2Fcode%2Fsrc%2Fsnippets.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsnippets.ts?ref=e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6", "patch": "@@ -1,60 +1,6 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n-import * as ra from '../rust-analyzer-api';\n \n-import { Ctx, Cmd } from '../ctx';\n-import * as sourceChange from '../source_change';\n-import { assert } from '../util';\n-\n-export * from './analyzer_status';\n-export * from './matching_brace';\n-export * from './join_lines';\n-export * from './on_enter';\n-export * from './parent_module';\n-export * from './syntax_tree';\n-export * from './expand_macro';\n-export * from './runnables';\n-export * from './ssr';\n-export * from './server_version';\n-export * from './toggle_inlay_hints';\n-\n-export function collectGarbage(ctx: Ctx): Cmd {\n-    return async () => ctx.client.sendRequest(ra.collectGarbage, null);\n-}\n-\n-export function showReferences(ctx: Ctx): Cmd {\n-    return (uri: string, position: lc.Position, locations: lc.Location[]) => {\n-        const client = ctx.client;\n-        if (client) {\n-            vscode.commands.executeCommand(\n-                'editor.action.showReferences',\n-                vscode.Uri.parse(uri),\n-                client.protocol2CodeConverter.asPosition(position),\n-                locations.map(client.protocol2CodeConverter.asLocation),\n-            );\n-        }\n-    };\n-}\n-\n-export function applySourceChange(ctx: Ctx): Cmd {\n-    return async (change: ra.SourceChange) => {\n-        await sourceChange.applySourceChange(ctx, change);\n-    };\n-}\n-\n-export function applyActionGroup(_ctx: Ctx): Cmd {\n-    return async (actions: { label: string; edit: vscode.WorkspaceEdit }[]) => {\n-        const selectedAction = await vscode.window.showQuickPick(actions);\n-        if (!selectedAction) return;\n-        await applySnippetWorkspaceEdit(selectedAction.edit);\n-    };\n-}\n-\n-export function applySnippetWorkspaceEditCommand(_ctx: Ctx): Cmd {\n-    return async (edit: vscode.WorkspaceEdit) => {\n-        await applySnippetWorkspaceEdit(edit);\n-    };\n-}\n+import { assert } from './util';\n \n export async function applySnippetWorkspaceEdit(edit: vscode.WorkspaceEdit) {\n     assert(edit.entries().length === 1, `bad ws edit: ${JSON.stringify(edit)}`);", "previous_filename": "editors/code/src/commands/index.ts"}, {"sha": "af8f1df51126aac4d2cdb7971af470174aab3b56", "filename": "editors/code/src/source_change.ts", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fsource_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fsource_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsource_change.ts?ref=1527feb744c7911b6ca482554f0399d3ef0ebfdc", "patch": "@@ -1,54 +0,0 @@\n-import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n-import * as ra from './rust-analyzer-api';\n-\n-import { Ctx } from './ctx';\n-\n-export async function applySourceChange(ctx: Ctx, change: ra.SourceChange) {\n-    const client = ctx.client;\n-    if (!client) return;\n-\n-    const wsEdit = client.protocol2CodeConverter.asWorkspaceEdit(\n-        change.workspaceEdit,\n-    );\n-    let created;\n-    let moved;\n-    if (change.workspaceEdit.documentChanges) {\n-        for (const docChange of change.workspaceEdit.documentChanges) {\n-            if (lc.CreateFile.is(docChange)) {\n-                created = docChange.uri;\n-            } else if (lc.RenameFile.is(docChange)) {\n-                moved = docChange.newUri;\n-            }\n-        }\n-    }\n-    const toOpen = created || moved;\n-    const toReveal = change.cursorPosition;\n-    await vscode.workspace.applyEdit(wsEdit);\n-    if (toOpen) {\n-        const toOpenUri = vscode.Uri.parse(toOpen);\n-        const doc = await vscode.workspace.openTextDocument(toOpenUri);\n-        await vscode.window.showTextDocument(doc);\n-    } else if (toReveal) {\n-        const uri = client.protocol2CodeConverter.asUri(\n-            toReveal.textDocument.uri,\n-        );\n-        const position = client.protocol2CodeConverter.asPosition(\n-            toReveal.position,\n-        );\n-        const editor = vscode.window.activeTextEditor;\n-        if (!editor || !editor.selection.isEmpty) {\n-            return;\n-        }\n-\n-        if (editor.document.uri !== uri) {\n-            const doc = await vscode.workspace.openTextDocument(uri);\n-            await vscode.window.showTextDocument(doc);\n-        }\n-        editor.selection = new vscode.Selection(position, position);\n-        editor.revealRange(\n-            new vscode.Range(position, position),\n-            vscode.TextEditorRevealType.Default,\n-        );\n-    }\n-}"}]}