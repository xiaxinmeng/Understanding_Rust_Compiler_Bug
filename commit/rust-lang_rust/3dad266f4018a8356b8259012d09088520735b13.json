{"sha": "3dad266f4018a8356b8259012d09088520735b13", "node_id": "C_kwDOAAsO6NoAKDNkYWQyNjZmNDAxOGE4MzU2YjgyNTkwMTJkMDkwODg1MjA3MzViMTM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-19T23:57:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T21:12:07Z"}, "message": "consistently use VTable over Vtable (matching stable stdlib API RawWakerVTable)", "tree": {"sha": "19d613b9daeae18dc9b68078bff5204a15ab8b6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19d613b9daeae18dc9b68078bff5204a15ab8b6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dad266f4018a8356b8259012d09088520735b13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dad266f4018a8356b8259012d09088520735b13", "html_url": "https://github.com/rust-lang/rust/commit/3dad266f4018a8356b8259012d09088520735b13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dad266f4018a8356b8259012d09088520735b13/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "114da8499642b0b29d624c7e30c8f07e25933ff6", "url": "https://api.github.com/repos/rust-lang/rust/commits/114da8499642b0b29d624c7e30c8f07e25933ff6", "html_url": "https://github.com/rust-lang/rust/commit/114da8499642b0b29d624c7e30c8f07e25933ff6"}], "stats": {"total": 178, "additions": 90, "deletions": 88}, "files": [{"sha": "2380f3e1df022c37d604cae0fbaf99800edad829", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -197,7 +197,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n                 let (alloc_id, offset) = ptr.into_parts(); // we know the `offset` is relative\n                 // For vtables, get the underlying data allocation.\n                 let alloc_id = match fx.tcx.global_alloc(alloc_id) {\n-                    GlobalAlloc::Vtable(ty, trait_ref) => fx.tcx.vtable_allocation((ty, trait_ref)),\n+                    GlobalAlloc::VTable(ty, trait_ref) => fx.tcx.vtable_allocation((ty, trait_ref)),\n                     _ => alloc_id,\n                 };\n                 let base_addr = match fx.tcx.global_alloc(alloc_id) {\n@@ -221,7 +221,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n                             fx.module.declare_func_in_func(func_id, &mut fx.bcx.func);\n                         fx.bcx.ins().func_addr(fx.pointer_type, local_func_id)\n                     }\n-                    GlobalAlloc::Vtable(..) => bug!(\"vtables are already handled\"),\n+                    GlobalAlloc::VTable(..) => bug!(\"vtables are already handled\"),\n                     GlobalAlloc::Static(def_id) => {\n                         assert!(fx.tcx.is_static(def_id));\n                         let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);\n@@ -364,7 +364,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 //println!(\"alloc_id {}\", alloc_id);\n                 let alloc = match tcx.global_alloc(alloc_id) {\n                     GlobalAlloc::Memory(alloc) => alloc,\n-                    GlobalAlloc::Function(_) | GlobalAlloc::Static(_) | GlobalAlloc::Vtable(..) => {\n+                    GlobalAlloc::Function(_) | GlobalAlloc::Static(_) | GlobalAlloc::VTable(..) => {\n                         unreachable!()\n                     }\n                 };\n@@ -442,7 +442,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 GlobalAlloc::Memory(target_alloc) => {\n                     data_id_for_alloc_id(cx, module, alloc_id, target_alloc.inner().mutability)\n                 }\n-                GlobalAlloc::Vtable(ty, trait_ref) => {\n+                GlobalAlloc::VTable(ty, trait_ref) => {\n                     let alloc_id = tcx.vtable_allocation((ty, trait_ref));\n                     data_id_for_alloc_id(cx, module, alloc_id, Mutability::Not)\n                 }"}, {"sha": "d1afca18427d6d54a6a6222690a62fcf07058d94", "filename": "compiler/rustc_codegen_gcc/src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -185,7 +185,7 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                 let (alloc_id, offset) = ptr.into_parts();\n                 // For vtables, get the underlying data allocation.\n                 let alloc_id = match self.tcx.global_alloc(alloc_id) {\n-                    GlobalAlloc::Vtable(ty, trait_ref) => {\n+                    GlobalAlloc::VTable(ty, trait_ref) => {\n                         self.tcx.vtable_allocation((ty, trait_ref))\n                     }\n                     _ => alloc_id,\n@@ -208,7 +208,7 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                         GlobalAlloc::Function(fn_instance) => {\n                             self.get_fn_addr(fn_instance)\n                         },\n-                        GlobalAlloc::Vtable(..) => panic!(\"vtables are already handled\"),\n+                        GlobalAlloc::VTable(..) => panic!(\"vtables are already handled\"),\n                         GlobalAlloc::Static(def_id) => {\n                             assert!(self.tcx.is_static(def_id));\n                             self.get_static(def_id).get_address(None)"}, {"sha": "f83b35974380212c4049a280723f185963953d00", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -242,7 +242,7 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 let (alloc_id, offset) = ptr.into_parts();\n                 // For vtables, get the underlying data allocation.\n                 let alloc_id = match self.tcx.global_alloc(alloc_id) {\n-                    GlobalAlloc::Vtable(ty, trait_ref) => {\n+                    GlobalAlloc::VTable(ty, trait_ref) => {\n                         self.tcx.vtable_allocation((ty, trait_ref))\n                     }\n                     _ => alloc_id,\n@@ -264,7 +264,7 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                         self.get_fn_addr(fn_instance.polymorphize(self.tcx)),\n                         self.data_layout().instruction_address_space,\n                     ),\n-                    GlobalAlloc::Vtable(..) => bug!(\"vtables are already handled\"),\n+                    GlobalAlloc::VTable(..) => bug!(\"vtables are already handled\"),\n                     GlobalAlloc::Static(def_id) => {\n                         assert!(self.tcx.is_static(def_id));\n                         assert!(!self.tcx.is_thread_local_static(def_id));"}, {"sha": "863f1f09a16dc941de96f5d3d16509a169598c2f", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -101,7 +101,7 @@ pub fn const_alloc_to_llvm<'ll>(cx: &CodegenCx<'ll, '_>, alloc: ConstAllocation<\n \n         let address_space = match cx.tcx.global_alloc(alloc_id) {\n             GlobalAlloc::Function(..) => cx.data_layout().instruction_address_space,\n-            GlobalAlloc::Static(..) | GlobalAlloc::Memory(..) | GlobalAlloc::Vtable(..) => {\n+            GlobalAlloc::Static(..) | GlobalAlloc::Memory(..) | GlobalAlloc::VTable(..) => {\n                 AddressSpace::DATA\n             }\n         };"}, {"sha": "bd84100e0e883797d0ccaf4594c1d17a66260401", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -1420,7 +1420,7 @@ fn build_vtable_type_di_node<'ll, 'tcx>(\n         cx,\n         type_map::stub(\n             cx,\n-            Stub::VtableTy { vtable_holder },\n+            Stub::VTableTy { vtable_holder },\n             unique_type_id,\n             &vtable_type_name,\n             (size, pointer_align),"}, {"sha": "ce2f419c4acdc64bf963a8a3796d4cf9929a1c07", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/type_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Ftype_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Ftype_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Ftype_map.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -146,7 +146,7 @@ impl<'ll> DINodeCreationResult<'ll> {\n pub enum Stub<'ll> {\n     Struct,\n     Union,\n-    VtableTy { vtable_holder: &'ll DIType },\n+    VTableTy { vtable_holder: &'ll DIType },\n }\n \n pub struct StubInfo<'ll, 'tcx> {\n@@ -180,9 +180,9 @@ pub(super) fn stub<'ll, 'tcx>(\n     let unique_type_id_str = unique_type_id.generate_unique_id_string(cx.tcx);\n \n     let metadata = match kind {\n-        Stub::Struct | Stub::VtableTy { .. } => {\n+        Stub::Struct | Stub::VTableTy { .. } => {\n             let vtable_holder = match kind {\n-                Stub::VtableTy { vtable_holder } => Some(vtable_holder),\n+                Stub::VTableTy { vtable_holder } => Some(vtable_holder),\n                 _ => None,\n             };\n             unsafe {"}, {"sha": "d95194e320be1c18ba9da65138163539ab0d21dd", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -171,7 +171,7 @@ pub fn unsized_info<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                 );\n                 let new_vptr = bx.load(ptr_ty, gep, ptr_align);\n                 bx.nonnull_metadata(new_vptr);\n-                // Vtable loads are invariant.\n+                // VTable loads are invariant.\n                 bx.set_invariant_load(new_vptr);\n                 new_vptr\n             } else {"}, {"sha": "27d791d90a51aed975810fb20486f932fa068179", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -39,7 +39,7 @@ impl<'a, 'tcx> VirtualIndex {\n             let gep = bx.inbounds_gep(llty, llvtable, &[bx.const_usize(self.0)]);\n             let ptr = bx.load(llty, gep, ptr_align);\n             bx.nonnull_metadata(ptr);\n-            // Vtable loads are invariant.\n+            // VTable loads are invariant.\n             bx.set_invariant_load(ptr);\n             ptr\n         }\n@@ -58,7 +58,7 @@ impl<'a, 'tcx> VirtualIndex {\n         let usize_align = bx.tcx().data_layout.pointer_align.abi;\n         let gep = bx.inbounds_gep(llty, llvtable, &[bx.const_usize(self.0)]);\n         let ptr = bx.load(llty, gep, usize_align);\n-        // Vtable loads are invariant.\n+        // VTable loads are invariant.\n         bx.set_invariant_load(ptr);\n         ptr\n     }"}, {"sha": "86914f50383e800f5c38aaddcac7149849f11ffd", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -63,7 +63,7 @@ pub enum AllocKind {\n     /// A function allocation (that fn ptrs point to).\n     Function,\n     /// A (symbolic) vtable allocation.\n-    Vtable,\n+    VTable,\n     /// A dead allocation.\n     Dead,\n }\n@@ -293,7 +293,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 Some(GlobalAlloc::Function(..)) => {\n                     err_ub_format!(\"deallocating {alloc_id:?}, which is a function\")\n                 }\n-                Some(GlobalAlloc::Vtable(..)) => {\n+                Some(GlobalAlloc::VTable(..)) => {\n                     err_ub_format!(\"deallocating {alloc_id:?}, which is a vtable\")\n                 }\n                 Some(GlobalAlloc::Static(..) | GlobalAlloc::Memory(..)) => {\n@@ -484,7 +484,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 (mem, None)\n             }\n             Some(GlobalAlloc::Function(..)) => throw_ub!(DerefFunctionPointer(id)),\n-            Some(GlobalAlloc::Vtable(..)) => throw_ub!(DerefVtablePointer(id)),\n+            Some(GlobalAlloc::VTable(..)) => throw_ub!(DerefVTablePointer(id)),\n             None => throw_ub!(PointerUseAfterFree(id)),\n             Some(GlobalAlloc::Static(def_id)) => {\n                 assert!(self.tcx.is_static(def_id));\n@@ -688,9 +688,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 (alloc.size(), alloc.align, AllocKind::LiveData)\n             }\n             Some(GlobalAlloc::Function(_)) => bug!(\"We already checked function pointers above\"),\n-            Some(GlobalAlloc::Vtable(..)) => {\n+            Some(GlobalAlloc::VTable(..)) => {\n                 // No data to be accessed here. But vtables are pointer-aligned.\n-                return (Size::ZERO, self.tcx.data_layout.pointer_align.abi, AllocKind::Vtable);\n+                return (Size::ZERO, self.tcx.data_layout.pointer_align.abi, AllocKind::VTable);\n             }\n             // The rest must be dead.\n             None => {\n@@ -746,11 +746,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         trace!(\"get_ptr_vtable({:?})\", ptr);\n         let (alloc_id, offset, _tag) = self.ptr_get_alloc_id(ptr)?;\n         if offset.bytes() != 0 {\n-            throw_ub!(InvalidVtablePointer(Pointer::new(alloc_id, offset)))\n+            throw_ub!(InvalidVTablePointer(Pointer::new(alloc_id, offset)))\n         }\n         match self.tcx.try_get_global_alloc(alloc_id) {\n-            Some(GlobalAlloc::Vtable(ty, trait_ref)) => Ok((ty, trait_ref)),\n-            _ => throw_ub!(InvalidVtablePointer(Pointer::new(alloc_id, offset))),\n+            Some(GlobalAlloc::VTable(ty, trait_ref)) => Ok((ty, trait_ref)),\n+            _ => throw_ub!(InvalidVTablePointer(Pointer::new(alloc_id, offset))),\n         }\n     }\n \n@@ -871,10 +871,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> std::fmt::Debug for DumpAllocs<'a,\n                         Some(GlobalAlloc::Function(func)) => {\n                             write!(fmt, \" (fn: {func})\")?;\n                         }\n-                        Some(GlobalAlloc::Vtable(ty, Some(trait_ref))) => {\n+                        Some(GlobalAlloc::VTable(ty, Some(trait_ref))) => {\n                             write!(fmt, \" (vtable: impl {trait_ref} for {ty})\")?;\n                         }\n-                        Some(GlobalAlloc::Vtable(ty, None)) => {\n+                        Some(GlobalAlloc::VTable(ty, None)) => {\n                             write!(fmt, \" (vtable: impl <auto trait> for {ty})\")?;\n                         }\n                         Some(GlobalAlloc::Static(did)) => {"}, {"sha": "90e06f55cbf575cbf29e38b5f1027a0b8361a422", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -364,7 +364,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // caller_fn_abi is not relevant here, we interpret the arguments directly for each intrinsic.\n                 M::call_intrinsic(self, instance, args, destination, target, unwind)\n             }\n-            ty::InstanceDef::VtableShim(..)\n+            ty::InstanceDef::VTableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n             | ty::InstanceDef::ClosureOnceShim { .. }\n             | ty::InstanceDef::FnPtrShim(..)"}, {"sha": "f2e104da04a418965c78b76b2183696fded344d4", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -318,7 +318,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     self.ecx.get_ptr_vtable(vtable),\n                     self.path,\n                     err_ub!(DanglingIntPointer(..)) |\n-                    err_ub!(InvalidVtablePointer(..)) =>\n+                    err_ub!(InvalidVTablePointer(..)) =>\n                         { \"{vtable}\" } expected { \"a vtable pointer\" },\n                 );\n                 // FIXME: check if the type/trait match what ty::Dynamic says?"}, {"sha": "cecb55578d332b02224e4af05065f3a1b261465c", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -266,7 +266,7 @@ pub enum UndefinedBehaviorInfo {\n     // Trying to access the data behind a function pointer.\n     DerefFunctionPointer(AllocId),\n     // Trying to access the data behind a vtable pointer.\n-    DerefVtablePointer(AllocId),\n+    DerefVTablePointer(AllocId),\n     /// The value validity check found a problem.\n     /// Should only be thrown by `validity.rs` and always point out which part of the value\n     /// is the problem.\n@@ -285,7 +285,7 @@ pub enum UndefinedBehaviorInfo {\n     /// Using a pointer-not-to-a-function as function pointer.\n     InvalidFunctionPointer(Pointer),\n     /// Using a pointer-not-to-a-vtable as vtable pointer.\n-    InvalidVtablePointer(Pointer),\n+    InvalidVTablePointer(Pointer),\n     /// Using a string that is not valid UTF-8,\n     InvalidStr(std::str::Utf8Error),\n     /// Using uninitialized data where it is not allowed.\n@@ -349,7 +349,7 @@ impl fmt::Display for UndefinedBehaviorInfo {\n             ),\n             WriteToReadOnly(a) => write!(f, \"writing to {a:?} which is read-only\"),\n             DerefFunctionPointer(a) => write!(f, \"accessing {a:?} which contains a function\"),\n-            DerefVtablePointer(a) => write!(f, \"accessing {a:?} which contains a vtable\"),\n+            DerefVTablePointer(a) => write!(f, \"accessing {a:?} which contains a vtable\"),\n             ValidationFailure { path: None, msg } => {\n                 write!(f, \"constructing invalid value: {msg}\")\n             }\n@@ -366,7 +366,7 @@ impl fmt::Display for UndefinedBehaviorInfo {\n             InvalidFunctionPointer(p) => {\n                 write!(f, \"using {p:?} as function pointer but it does not point to a function\")\n             }\n-            InvalidVtablePointer(p) => {\n+            InvalidVTablePointer(p) => {\n                 write!(f, \"using {p:?} as vtable pointer but it does not point to a vtable\")\n             }\n             InvalidStr(err) => write!(f, \"this string is not valid UTF-8: {err}\"),"}, {"sha": "7ef4dfe7c0dd8b50ea4426717c35217653c60a7b", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -196,7 +196,7 @@ impl fmt::Debug for AllocId {\n enum AllocDiscriminant {\n     Alloc,\n     Fn,\n-    Vtable,\n+    VTable,\n     Static,\n }\n \n@@ -216,9 +216,9 @@ pub fn specialized_encode_alloc_id<'tcx, E: TyEncoder<I = TyCtxt<'tcx>>>(\n             AllocDiscriminant::Fn.encode(encoder);\n             fn_instance.encode(encoder);\n         }\n-        GlobalAlloc::Vtable(ty, poly_trait_ref) => {\n+        GlobalAlloc::VTable(ty, poly_trait_ref) => {\n             trace!(\"encoding {:?} with {ty:#?}, {poly_trait_ref:#?}\", alloc_id);\n-            AllocDiscriminant::Vtable.encode(encoder);\n+            AllocDiscriminant::VTable.encode(encoder);\n             ty.encode(encoder);\n             poly_trait_ref.encode(encoder);\n         }\n@@ -314,7 +314,7 @@ impl<'s> AllocDecodingSession<'s> {\n                         }\n                         AllocDiscriminant::Fn\n                         | AllocDiscriminant::Static\n-                        | AllocDiscriminant::Vtable => {\n+                        | AllocDiscriminant::VTable => {\n                             // Fns and statics cannot be cyclic, and their `AllocId`\n                             // is determined later by interning.\n                             *entry =\n@@ -364,7 +364,7 @@ impl<'s> AllocDecodingSession<'s> {\n                     let alloc_id = decoder.interner().create_fn_alloc(instance);\n                     alloc_id\n                 }\n-                AllocDiscriminant::Vtable => {\n+                AllocDiscriminant::VTable => {\n                     assert!(alloc_id.is_none());\n                     trace!(\"creating static alloc ID\");\n                     let ty = <Ty<'_> as Decodable<D>>::decode(decoder);\n@@ -400,7 +400,7 @@ pub enum GlobalAlloc<'tcx> {\n     /// The alloc ID is used as a function pointer.\n     Function(Instance<'tcx>),\n     /// This alloc ID points to a symbolic (not-reified) vtable.\n-    Vtable(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>),\n+    VTable(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>),\n     /// The alloc ID points to a \"lazy\" static variable that did not get computed (yet).\n     /// This is also used to break the cycle in recursive statics.\n     Static(DefId),\n@@ -429,12 +429,12 @@ impl<'tcx> GlobalAlloc<'tcx> {\n         }\n     }\n \n-    /// Panics if the `GlobalAlloc` is not `GlobalAlloc::Vtable`\n+    /// Panics if the `GlobalAlloc` is not `GlobalAlloc::VTable`\n     #[track_caller]\n     #[inline]\n     pub fn unwrap_vtable(&self) -> (Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>) {\n         match *self {\n-            GlobalAlloc::Vtable(ty, poly_trait_ref) => (ty, poly_trait_ref),\n+            GlobalAlloc::VTable(ty, poly_trait_ref) => (ty, poly_trait_ref),\n             _ => bug!(\"expected vtable, got {:?}\", self),\n         }\n     }\n@@ -490,7 +490,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     fn reserve_and_set_dedup(self, alloc: GlobalAlloc<'tcx>) -> AllocId {\n         let mut alloc_map = self.alloc_map.lock();\n         match alloc {\n-            GlobalAlloc::Function(..) | GlobalAlloc::Static(..) | GlobalAlloc::Vtable(..) => {}\n+            GlobalAlloc::Function(..) | GlobalAlloc::Static(..) | GlobalAlloc::VTable(..) => {}\n             GlobalAlloc::Memory(..) => bug!(\"Trying to dedup-reserve memory with real data!\"),\n         }\n         if let Some(&alloc_id) = alloc_map.dedup.get(&alloc) {\n@@ -541,7 +541,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty: Ty<'tcx>,\n         poly_trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n     ) -> AllocId {\n-        self.reserve_and_set_dedup(GlobalAlloc::Vtable(ty, poly_trait_ref))\n+        self.reserve_and_set_dedup(GlobalAlloc::VTable(ty, poly_trait_ref))\n     }\n \n     /// Interns the `Allocation` and return a new `AllocId`, even if there's already an identical"}, {"sha": "21ae121e1ce69b5626abb6a643dd5ccb376b7c32", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -362,7 +362,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n                             // the codegen tests and can even make item order\n                             // unstable.\n                             InstanceDef::Item(def) => def.did.as_local().map(Idx::index),\n-                            InstanceDef::VtableShim(..)\n+                            InstanceDef::VTableShim(..)\n                             | InstanceDef::ReifyShim(..)\n                             | InstanceDef::Intrinsic(..)\n                             | InstanceDef::FnPtrShim(..)"}, {"sha": "78b5131bac65e0f205c744e561ca5a966bd63046", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -725,10 +725,12 @@ pub fn write_allocations<'tcx>(\n             // gracefully handle it and allow buggy rustc to be debugged via allocation printing.\n             None => write!(w, \" (deallocated)\")?,\n             Some(GlobalAlloc::Function(inst)) => write!(w, \" (fn: {inst})\")?,\n-            Some(GlobalAlloc::Vtable(ty, Some(trait_ref))) => {\n+            Some(GlobalAlloc::VTable(ty, Some(trait_ref))) => {\n                 write!(w, \" (vtable: impl {trait_ref} for {ty})\")?\n             }\n-            Some(GlobalAlloc::Vtable(ty, None)) => write!(w, \" (vtable: impl <auto trait> for {ty})\")?,\n+            Some(GlobalAlloc::VTable(ty, None)) => {\n+                write!(w, \" (vtable: impl <auto trait> for {ty})\")?\n+            }\n             Some(GlobalAlloc::Static(did)) if !tcx.is_foreign_item(did) => {\n                 match tcx.eval_static_initializer(did) {\n                     Ok(alloc) => {"}, {"sha": "891608764017c57ba720b703b529920e6141ced0", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -394,7 +394,7 @@ macro_rules! make_mir_visitor {\n                         ty::InstanceDef::Item(_def_id) => {}\n \n                         ty::InstanceDef::Intrinsic(_def_id) |\n-                        ty::InstanceDef::VtableShim(_def_id) |\n+                        ty::InstanceDef::VTableShim(_def_id) |\n                         ty::InstanceDef::ReifyShim(_def_id) |\n                         ty::InstanceDef::Virtual(_def_id, _) |\n                         ty::InstanceDef::ClosureOnceShim { call_once: _def_id, track_caller: _ } |"}, {"sha": "33a46f809b0d34c55f867f2d827900366f70c14f", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -49,7 +49,7 @@ pub enum InstanceDef<'tcx> {\n     ///\n     /// The generated shim will take `Self` via `*mut Self` - conceptually this is `&owned Self` -\n     /// and dereference the argument to call the original function.\n-    VtableShim(DefId),\n+    VTableShim(DefId),\n \n     /// `fn()` pointer where the function itself cannot be turned into a pointer.\n     ///\n@@ -145,7 +145,7 @@ impl<'tcx> InstanceDef<'tcx> {\n     pub fn def_id(self) -> DefId {\n         match self {\n             InstanceDef::Item(def) => def.did,\n-            InstanceDef::VtableShim(def_id)\n+            InstanceDef::VTableShim(def_id)\n             | InstanceDef::ReifyShim(def_id)\n             | InstanceDef::FnPtrShim(def_id, _)\n             | InstanceDef::Virtual(def_id, _)\n@@ -161,7 +161,7 @@ impl<'tcx> InstanceDef<'tcx> {\n         match self {\n             ty::InstanceDef::Item(def) => Some(def.did),\n             ty::InstanceDef::DropGlue(def_id, Some(_)) => Some(def_id),\n-            InstanceDef::VtableShim(..)\n+            InstanceDef::VTableShim(..)\n             | InstanceDef::ReifyShim(..)\n             | InstanceDef::FnPtrShim(..)\n             | InstanceDef::Virtual(..)\n@@ -176,7 +176,7 @@ impl<'tcx> InstanceDef<'tcx> {\n     pub fn with_opt_param(self) -> ty::WithOptConstParam<DefId> {\n         match self {\n             InstanceDef::Item(def) => def,\n-            InstanceDef::VtableShim(def_id)\n+            InstanceDef::VTableShim(def_id)\n             | InstanceDef::ReifyShim(def_id)\n             | InstanceDef::FnPtrShim(def_id, _)\n             | InstanceDef::Virtual(def_id, _)\n@@ -273,7 +273,7 @@ impl<'tcx> InstanceDef<'tcx> {\n             | InstanceDef::Intrinsic(..)\n             | InstanceDef::ReifyShim(..)\n             | InstanceDef::Virtual(..)\n-            | InstanceDef::VtableShim(..) => true,\n+            | InstanceDef::VTableShim(..) => true,\n         }\n     }\n }\n@@ -290,7 +290,7 @@ impl<'tcx> fmt::Display for Instance<'tcx> {\n \n         match self.def {\n             InstanceDef::Item(_) => Ok(()),\n-            InstanceDef::VtableShim(_) => write!(f, \" - shim(vtable)\"),\n+            InstanceDef::VTableShim(_) => write!(f, \" - shim(vtable)\"),\n             InstanceDef::ReifyShim(_) => write!(f, \" - shim(reify)\"),\n             InstanceDef::Intrinsic(_) => write!(f, \" - intrinsic\"),\n             InstanceDef::Virtual(_, num) => write!(f, \" - virtual#{}\", num),\n@@ -434,7 +434,7 @@ impl<'tcx> Instance<'tcx> {\n             && tcx.generics_of(def_id).has_self;\n         if is_vtable_shim {\n             debug!(\" => associated item with unsizeable self: Self\");\n-            Some(Instance { def: InstanceDef::VtableShim(def_id), substs })\n+            Some(Instance { def: InstanceDef::VTableShim(def_id), substs })\n         } else {\n             Instance::resolve(tcx, param_env, def_id, substs).ok().flatten().map(|mut resolved| {\n                 match resolved.def {"}, {"sha": "ab76ad5098413bdc63aca405fb540c39d7eb06e1", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -2771,7 +2771,7 @@ impl<'tcx> ty::Instance<'tcx> {\n                     _ => unreachable!(),\n                 };\n \n-                if let ty::InstanceDef::VtableShim(..) = self.def {\n+                if let ty::InstanceDef::VTableShim(..) = self.def {\n                     // Modify `fn(self, ...)` to `fn(self: *mut Self, ...)`.\n                     sig = sig.map_bound(|mut sig| {\n                         let mut inputs_and_output = sig.inputs_and_output.to_vec();"}, {"sha": "78a0e24063ca588b1937391356f62c3dc1262df3", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -2135,7 +2135,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     }\n                 }\n             }\n-            ty::InstanceDef::VtableShim(..)\n+            ty::InstanceDef::VTableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n             | ty::InstanceDef::Intrinsic(..)\n             | ty::InstanceDef::FnPtrShim(..)"}, {"sha": "09b9c806691285c67db9811d6931205649828719", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -1287,7 +1287,7 @@ pub trait PrettyPrinter<'tcx>:\n                                     p!(write(\"<static({:?})>\", def_id))\n                                 }\n                                 Some(GlobalAlloc::Function(_)) => p!(\"<function>\"),\n-                                Some(GlobalAlloc::Vtable(..)) => p!(\"<vtable>\"),\n+                                Some(GlobalAlloc::VTable(..)) => p!(\"<vtable>\"),\n                                 None => p!(\"<dangling pointer>\"),\n                             }\n                             return Ok(self);"}, {"sha": "a4be3d02d19359e1d9cb908d0589654e81ff9054", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -624,7 +624,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n         match self {\n             ty::InstanceDef::Item(def_id) => Some(ty::InstanceDef::Item(def_id)),\n-            ty::InstanceDef::VtableShim(def_id) => Some(ty::InstanceDef::VtableShim(def_id)),\n+            ty::InstanceDef::VTableShim(def_id) => Some(ty::InstanceDef::VTableShim(def_id)),\n             ty::InstanceDef::ReifyShim(def_id) => Some(ty::InstanceDef::ReifyShim(def_id)),\n             ty::InstanceDef::Intrinsic(def_id) => Some(ty::InstanceDef::Intrinsic(def_id)),\n             ty::InstanceDef::FnPtrShim(def_id, ty) => {\n@@ -927,7 +927,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n             substs: self.substs.try_fold_with(folder)?,\n             def: match self.def {\n                 Item(def) => Item(def.try_fold_with(folder)?),\n-                VtableShim(did) => VtableShim(did.try_fold_with(folder)?),\n+                VTableShim(did) => VTableShim(did.try_fold_with(folder)?),\n                 ReifyShim(did) => ReifyShim(did.try_fold_with(folder)?),\n                 Intrinsic(did) => Intrinsic(did.try_fold_with(folder)?),\n                 FnPtrShim(did, ty) => {\n@@ -954,7 +954,7 @@ impl<'tcx> TypeVisitable<'tcx> for ty::instance::Instance<'tcx> {\n         self.substs.visit_with(visitor)?;\n         match self.def {\n             Item(def) => def.visit_with(visitor),\n-            VtableShim(did) | ReifyShim(did) | Intrinsic(did) | Virtual(did, _) => {\n+            VTableShim(did) | ReifyShim(did) | Intrinsic(did) | Virtual(did, _) => {\n                 did.visit_with(visitor)\n             }\n             FnPtrShim(did, ty) | CloneShim(did, ty) => {"}, {"sha": "1e46b0a0e8164d21f92aca83153d1ed6b87f7225", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -246,7 +246,7 @@ impl<'tcx> Inliner<'tcx> {\n             // not get any optimizations run on it. Any subsequent inlining may cause cycles, but we\n             // do not need to catch this here, we can wait until the inliner decides to continue\n             // inlining a second time.\n-            InstanceDef::VtableShim(_)\n+            InstanceDef::VTableShim(_)\n             | InstanceDef::ReifyShim(_)\n             | InstanceDef::FnPtrShim(..)\n             | InstanceDef::ClosureOnceShim { .. }"}, {"sha": "7810218fd6744edf09c9309fc9b507fc0e9e00c6", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -79,7 +79,7 @@ pub(crate) fn mir_callgraph_reachable<'tcx>(\n                 // These have MIR and if that MIR is inlined, substituted and then inlining is run\n                 // again, a function item can end up getting inlined. Thus we'll be able to cause\n                 // a cycle that way\n-                InstanceDef::VtableShim(_)\n+                InstanceDef::VTableShim(_)\n                 | InstanceDef::ReifyShim(_)\n                 | InstanceDef::FnPtrShim(..)\n                 | InstanceDef::ClosureOnceShim { .. }"}, {"sha": "3620e94bec7d750cc79fc02dddd63bd3ba94e612", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -32,7 +32,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n \n     let mut result = match instance {\n         ty::InstanceDef::Item(..) => bug!(\"item {:?} passed to make_shim\", instance),\n-        ty::InstanceDef::VtableShim(def_id) => {\n+        ty::InstanceDef::VTableShim(def_id) => {\n             build_call_shim(tcx, instance, Some(Adjustment::Deref), CallKind::Direct(def_id))\n         }\n         ty::InstanceDef::FnPtrShim(def_id, ty) => {\n@@ -113,7 +113,7 @@ enum Adjustment {\n     /// We get passed `&[mut] self` and call the target with `*self`.\n     ///\n     /// This either copies `self` (if `Self: Copy`, eg. for function items), or moves out of it\n-    /// (for `VtableShim`, which effectively is passed `&own Self`).\n+    /// (for `VTableShim`, which effectively is passed `&own Self`).\n     Deref,\n \n     /// We get passed `self: Self` and call the target with `&mut self`.\n@@ -569,7 +569,7 @@ fn build_call_shim<'tcx>(\n \n     // FIXME(eddyb) avoid having this snippet both here and in\n     // `Instance::fn_sig` (introduce `InstanceDef::fn_sig`?).\n-    if let ty::InstanceDef::VtableShim(..) = instance {\n+    if let ty::InstanceDef::VTableShim(..) = instance {\n         // Modify fn(self, ...) to fn(self: *mut Self, ...)\n         let mut inputs_and_output = sig.inputs_and_output.to_vec();\n         let self_arg = &mut inputs_and_output[0];"}, {"sha": "86331056d44400d44aaf976d8b228fd170da9152", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -25,7 +25,7 @@\n //! codegen unit:\n //!\n //! - Constants\n-//! - Vtables\n+//! - VTables\n //! - Object Shims\n //!\n //!\n@@ -992,7 +992,7 @@ fn visit_instance_use<'tcx>(\n             }\n         }\n         ty::InstanceDef::DropGlue(_, Some(_))\n-        | ty::InstanceDef::VtableShim(..)\n+        | ty::InstanceDef::VTableShim(..)\n         | ty::InstanceDef::ReifyShim(..)\n         | ty::InstanceDef::ClosureOnceShim { .. }\n         | ty::InstanceDef::Item(..)\n@@ -1427,7 +1427,7 @@ fn collect_miri<'tcx>(tcx: TyCtxt<'tcx>, alloc_id: AllocId, output: &mut MonoIte\n                 output.push(create_fn_mono_item(tcx, fn_instance, DUMMY_SP));\n             }\n         }\n-        GlobalAlloc::Vtable(ty, trait_ref) => {\n+        GlobalAlloc::VTable(ty, trait_ref) => {\n             // FIXME(RJ) no ideas if this is correct. There is this nice\n             // `create_mono_items_for_vtable_methods` method but I wouldn't know how to call it from\n             // here. So instead we just generate the actual vtable and recurse."}, {"sha": "15276569c32f5accec4b07611bb4f2263ee26641", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -271,7 +271,7 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n         MonoItem::Fn(instance) => {\n             let def_id = match instance.def {\n                 ty::InstanceDef::Item(def) => def.did,\n-                ty::InstanceDef::VtableShim(..)\n+                ty::InstanceDef::VTableShim(..)\n                 | ty::InstanceDef::ReifyShim(..)\n                 | ty::InstanceDef::FnPtrShim(..)\n                 | ty::InstanceDef::ClosureOnceShim { .. }\n@@ -425,7 +425,7 @@ fn mono_item_visibility<'tcx>(\n         InstanceDef::DropGlue(def_id, Some(_)) => def_id,\n \n         // These are all compiler glue and such, never exported, always hidden.\n-        InstanceDef::VtableShim(..)\n+        InstanceDef::VTableShim(..)\n         | InstanceDef::ReifyShim(..)\n         | InstanceDef::FnPtrShim(..)\n         | InstanceDef::Virtual(..)"}, {"sha": "eda61df7700d7a064e15f1d6210bc6be2a271442", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -37,7 +37,7 @@ mod values;\n use self::values::Value;\n \n pub use rustc_query_system::query::QueryConfig;\n-pub(crate) use rustc_query_system::query::{QueryDescription, QueryVtable};\n+pub(crate) use rustc_query_system::query::{QueryDescription, QueryVTable};\n \n mod on_disk_cache;\n pub use on_disk_cache::OnDiskCache;"}, {"sha": "eda4401c81d01bc7b1a3239e1c8c2aa26d02f9ce", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -340,11 +340,11 @@ macro_rules! define_queries {\n \n             #[inline]\n             fn make_vtable(tcx: QueryCtxt<'tcx>, key: &Self::Key) ->\n-                QueryVtable<QueryCtxt<$tcx>, Self::Key, Self::Value>\n+                QueryVTable<QueryCtxt<$tcx>, Self::Key, Self::Value>\n             {\n                 let compute = get_provider!([$($modifiers)*][tcx, $name, key]);\n                 let cache_on_disk = Self::cache_on_disk(tcx.tcx, key);\n-                QueryVtable {\n+                QueryVTable {\n                     anon: is_anon!([$($modifiers)*]),\n                     eval_always: is_eval_always!([$($modifiers)*]),\n                     dep_kind: dep_graph::DepKind::$name,"}, {"sha": "964914a1326bda7156d948cba563b0842fd6247d", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -19,7 +19,7 @@ pub trait QueryConfig {\n     type Stored: Clone;\n }\n \n-pub struct QueryVtable<CTX: QueryContext, K, V> {\n+pub struct QueryVTable<CTX: QueryContext, K, V> {\n     pub anon: bool,\n     pub dep_kind: CTX::DepKind,\n     pub eval_always: bool,\n@@ -31,7 +31,7 @@ pub struct QueryVtable<CTX: QueryContext, K, V> {\n     pub try_load_from_disk: Option<fn(CTX, SerializedDepNodeIndex) -> Option<V>>,\n }\n \n-impl<CTX: QueryContext, K, V> QueryVtable<CTX, K, V> {\n+impl<CTX: QueryContext, K, V> QueryVTable<CTX, K, V> {\n     pub(crate) fn to_dep_node(&self, tcx: CTX::DepContext, key: &K) -> DepNode<CTX::DepKind>\n     where\n         K: crate::dep_graph::DepNodeParams<CTX::DepContext>,\n@@ -69,7 +69,7 @@ pub trait QueryDescription<CTX: QueryContext>: QueryConfig {\n         CTX: 'a;\n \n     // Don't use this method to compute query results, instead use the methods on TyCtxt\n-    fn make_vtable(tcx: CTX, key: &Self::Key) -> QueryVtable<CTX, Self::Key, Self::Value>;\n+    fn make_vtable(tcx: CTX, key: &Self::Key) -> QueryVTable<CTX, Self::Key, Self::Value>;\n \n     fn cache_on_disk(tcx: CTX::DepContext, key: &Self::Key) -> bool;\n }"}, {"sha": "fb2258434f4d3ef6475934f78a137ea2c20392c9", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -12,7 +12,7 @@ pub use self::caches::{\n };\n \n mod config;\n-pub use self::config::{QueryConfig, QueryDescription, QueryVtable};\n+pub use self::config::{QueryConfig, QueryDescription, QueryVTable};\n \n use crate::dep_graph::{DepNodeIndex, HasDepContext, SerializedDepNodeIndex};\n "}, {"sha": "5e8ea07d00f99de86820522afa5665e5ea08a43b", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -4,7 +4,7 @@\n \n use crate::dep_graph::{DepContext, DepNode, DepNodeIndex, DepNodeParams};\n use crate::query::caches::QueryCache;\n-use crate::query::config::{QueryDescription, QueryVtable};\n+use crate::query::config::{QueryDescription, QueryVTable};\n use crate::query::job::{report_cycle, QueryInfo, QueryJob, QueryJobId, QueryJobInfo};\n use crate::query::{QueryContext, QueryMap, QuerySideEffects, QueryStackFrame};\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -331,7 +331,7 @@ fn try_execute_query<CTX, C>(\n     span: Span,\n     key: C::Key,\n     dep_node: Option<DepNode<CTX::DepKind>>,\n-    query: &QueryVtable<CTX, C::Key, C::Value>,\n+    query: &QueryVTable<CTX, C::Key, C::Value>,\n ) -> (C::Stored, Option<DepNodeIndex>)\n where\n     C: QueryCache,\n@@ -368,7 +368,7 @@ fn execute_job<CTX, K, V>(\n     tcx: CTX,\n     key: K,\n     mut dep_node_opt: Option<DepNode<CTX::DepKind>>,\n-    query: &QueryVtable<CTX, K, V>,\n+    query: &QueryVTable<CTX, K, V>,\n     job_id: QueryJobId,\n ) -> (V, DepNodeIndex)\n where\n@@ -437,7 +437,7 @@ fn try_load_from_disk_and_cache_in_memory<CTX, K, V>(\n     tcx: CTX,\n     key: &K,\n     dep_node: &DepNode<CTX::DepKind>,\n-    query: &QueryVtable<CTX, K, V>,\n+    query: &QueryVTable<CTX, K, V>,\n ) -> Option<(V, DepNodeIndex)>\n where\n     K: Clone,\n@@ -530,7 +530,7 @@ fn incremental_verify_ich<CTX, K, V: Debug>(\n     tcx: CTX::DepContext,\n     result: &V,\n     dep_node: &DepNode<CTX::DepKind>,\n-    query: &QueryVtable<CTX, K, V>,\n+    query: &QueryVTable<CTX, K, V>,\n ) where\n     CTX: QueryContext,\n {\n@@ -642,7 +642,7 @@ fn incremental_verify_ich_cold(sess: &Session, dep_node: DebugArg<'_>, result: D\n fn ensure_must_run<CTX, K, V>(\n     tcx: CTX,\n     key: &K,\n-    query: &QueryVtable<CTX, K, V>,\n+    query: &QueryVTable<CTX, K, V>,\n ) -> (bool, Option<DepNode<CTX::DepKind>>)\n where\n     K: crate::dep_graph::DepNodeParams<CTX::DepContext>,"}, {"sha": "9241fd82c745fde4a857c5598faaba111c2edd34", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -67,7 +67,7 @@ pub(super) fn mangle<'tcx>(\n         )\n         .unwrap();\n \n-    if let ty::InstanceDef::VtableShim(..) = instance.def {\n+    if let ty::InstanceDef::VTableShim(..) = instance.def {\n         let _ = printer.write_str(\"{{vtable-shim}}\");\n     }\n \n@@ -129,7 +129,7 @@ fn get_symbol_hash<'tcx>(\n                 }\n \n                 // We want to avoid accidental collision between different types of instances.\n-                // Especially, `VtableShim`s and `ReifyShim`s may overlap with their original\n+                // Especially, `VTableShim`s and `ReifyShim`s may overlap with their original\n                 // instances without this.\n                 discriminant(&instance.def).hash_stable(hcx, &mut hasher);\n             });"}, {"sha": "79e3f10526c99e2ee686a941ce8c736a18f53313", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -42,7 +42,7 @@ pub(super) fn mangle<'tcx>(\n \n     // Append `::{shim:...#0}` to shims that can coexist with a non-shim instance.\n     let shim_kind = match instance.def {\n-        ty::InstanceDef::VtableShim(_) => Some(\"vtable\"),\n+        ty::InstanceDef::VTableShim(_) => Some(\"vtable\"),\n         ty::InstanceDef::ReifyShim(_) => Some(\"reify\"),\n \n         _ => None,"}, {"sha": "7aaddc2bd7aab545fbdd576f558e998ae500f1eb", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dad266f4018a8356b8259012d09088520735b13/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=3dad266f4018a8356b8259012d09088520735b13", "patch": "@@ -69,7 +69,7 @@ enum PointerKind<'tcx> {\n     /// No metadata attached, ie pointer to sized type or foreign type\n     Thin,\n     /// A trait object\n-    Vtable(Option<DefId>),\n+    VTable(Option<DefId>),\n     /// Slice\n     Length,\n     /// The unsize info of this projection\n@@ -102,7 +102,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         Ok(match *t.kind() {\n             ty::Slice(_) | ty::Str => Some(PointerKind::Length),\n-            ty::Dynamic(ref tty, ..) => Some(PointerKind::Vtable(tty.principal_def_id())),\n+            ty::Dynamic(ref tty, ..) => Some(PointerKind::VTable(tty.principal_def_id())),\n             ty::Adt(def, substs) if def.is_struct() => match def.non_enum_variant().fields.last() {\n                 None => Some(PointerKind::Thin),\n                 Some(f) => {\n@@ -951,7 +951,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         match fcx.pointer_kind(m_cast.ty, self.span)? {\n             None => Err(CastError::UnknownCastPtrKind),\n             Some(PointerKind::Thin) => Ok(CastKind::AddrPtrCast),\n-            Some(PointerKind::Vtable(_)) => Err(CastError::IntToFatCast(Some(\"a vtable\"))),\n+            Some(PointerKind::VTable(_)) => Err(CastError::IntToFatCast(Some(\"a vtable\"))),\n             Some(PointerKind::Length) => Err(CastError::IntToFatCast(Some(\"a length\"))),\n             Some(\n                 PointerKind::OfProjection(_)"}]}