{"sha": "f74d0fb568936b75120094b25a5638c1fc49c51e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NGQwZmI1Njg5MzZiNzUxMjAwOTRiMjVhNTYzOGMxZmM0OWM1MWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-06-29T15:51:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-29T15:51:21Z"}, "message": "Rollup merge of #34355 - jseyfried:paren_expression_ids_nonunique, r=nrc\n\nGive `ast::ExprKind::Paren` no-op expressions the same ids as their children.\n\nHaving `ast::ExprKind::Paren` expressions share ids with their children\n - reduces the number of unused `NodeId`s in the hir map and\n - guarantees that `tcx.map.expect_expr(ast_expr.id)` is the hir corresponding to `ast_expr`.\n\nThis fixes the bug from #34327, which was introduced in #33296 when I assumed the above guarantee.\n\nr? @nrc", "tree": {"sha": "2074531ad3334163fb1a80e31668e48fea747aa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2074531ad3334163fb1a80e31668e48fea747aa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f74d0fb568936b75120094b25a5638c1fc49c51e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f74d0fb568936b75120094b25a5638c1fc49c51e", "html_url": "https://github.com/rust-lang/rust/commit/f74d0fb568936b75120094b25a5638c1fc49c51e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f74d0fb568936b75120094b25a5638c1fc49c51e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "366de839ae9794411419c5b579c829e18adde613", "url": "https://api.github.com/repos/rust-lang/rust/commits/366de839ae9794411419c5b579c829e18adde613", "html_url": "https://github.com/rust-lang/rust/commit/366de839ae9794411419c5b579c829e18adde613"}, {"sha": "8557a2e18c755ef269aa54b067cfc323e97d9a11", "url": "https://api.github.com/repos/rust-lang/rust/commits/8557a2e18c755ef269aa54b067cfc323e97d9a11", "html_url": "https://github.com/rust-lang/rust/commit/8557a2e18c755ef269aa54b067cfc323e97d9a11"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "ed6f09eed645f7741951542aaeea87665667266c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f74d0fb568936b75120094b25a5638c1fc49c51e/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74d0fb568936b75120094b25a5638c1fc49c51e/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=f74d0fb568936b75120094b25a5638c1fc49c51e", "patch": "@@ -1102,7 +1102,6 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n \n pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mut T) -> Expr {\n     Expr {\n-        id: folder.new_id(id),\n         node: match node {\n             ExprKind::Box(e) => {\n                 ExprKind::Box(folder.fold_expr(e))\n@@ -1270,9 +1269,19 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n                         fields.move_map(|x| folder.fold_field(x)),\n                         maybe_expr.map(|x| folder.fold_expr(x)))\n             },\n-            ExprKind::Paren(ex) => ExprKind::Paren(folder.fold_expr(ex)),\n+            ExprKind::Paren(ex) => {\n+                let sub_expr = folder.fold_expr(ex);\n+                return Expr {\n+                    // Nodes that are equal modulo `Paren` sugar no-ops should have the same ids.\n+                    id: sub_expr.id,\n+                    node: ExprKind::Paren(sub_expr),\n+                    span: folder.new_span(span),\n+                    attrs: fold_attrs(attrs.into(), folder).into(),\n+                };\n+            }\n             ExprKind::Try(ex) => ExprKind::Try(folder.fold_expr(ex)),\n         },\n+        id: folder.new_id(id),\n         span: folder.new_span(span),\n         attrs: fold_attrs(attrs.into(), folder).into(),\n     }"}, {"sha": "20a54228d016cdb222a1975dc219332586227349", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f74d0fb568936b75120094b25a5638c1fc49c51e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74d0fb568936b75120094b25a5638c1fc49c51e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f74d0fb568936b75120094b25a5638c1fc49c51e", "patch": "@@ -553,10 +553,6 @@ impl<'a> Parser<'a> {\n         self.expect_one_of(edible, inedible)\n     }\n \n-    pub fn commit_stmt_expecting(&mut self, edible: token::Token) -> PResult<'a, ()> {\n-        self.commit_stmt(&[edible], &[])\n-    }\n-\n     /// returns the span of expr, if it was not interpolated or the span of the interpolated token\n     fn interpolated_or_expr_span(&self,\n                                  expr: PResult<'a, P<Expr>>)\n@@ -4122,7 +4118,7 @@ impl<'a> Parser<'a> {\n                 _ => { // all other kinds of statements:\n                     let mut hi = span.hi;\n                     if classify::stmt_ends_with_semi(&node) {\n-                        self.commit_stmt_expecting(token::Semi)?;\n+                        self.commit_stmt(&[token::Semi], &[])?;\n                         hi = self.last_span.hi;\n                     }\n "}]}