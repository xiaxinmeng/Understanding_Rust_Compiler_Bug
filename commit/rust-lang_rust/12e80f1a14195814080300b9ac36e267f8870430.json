{"sha": "12e80f1a14195814080300b9ac36e267f8870430", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZTgwZjFhMTQxOTU4MTQwODAzMDBiOWFjMzZlMjY3Zjg4NzA0MzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-24T01:06:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-24T01:06:19Z"}, "message": "auto merge of #14379 : brson/rust/simd, r=alexcrichton\n\nFollowup to https://github.com/mozilla/rust/pull/14331 and https://github.com/mozilla/rust/pull/12524", "tree": {"sha": "6d50d802b700643a827bf40a0cbeac49a211cd93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d50d802b700643a827bf40a0cbeac49a211cd93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12e80f1a14195814080300b9ac36e267f8870430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12e80f1a14195814080300b9ac36e267f8870430", "html_url": "https://github.com/rust-lang/rust/commit/12e80f1a14195814080300b9ac36e267f8870430", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12e80f1a14195814080300b9ac36e267f8870430/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44626874574db4040f3fc2964a35ddf50927ef1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/44626874574db4040f3fc2964a35ddf50927ef1a", "html_url": "https://github.com/rust-lang/rust/commit/44626874574db4040f3fc2964a35ddf50927ef1a"}, {"sha": "02d1ce830beeb7dfbda3eb84347d55f3e45f9fb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/02d1ce830beeb7dfbda3eb84347d55f3e45f9fb8", "html_url": "https://github.com/rust-lang/rust/commit/02d1ce830beeb7dfbda3eb84347d55f3e45f9fb8"}], "stats": {"total": 118, "additions": 78, "deletions": 40}, "files": [{"sha": "9f7592a80bd180621d923635455c0e5226281517", "filename": "src/libcore/finally.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibcore%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibcore%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffinally.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -20,7 +20,7 @@ also be used. See that function for more details.\n # Example\n \n ```\n-use std::unstable::finally::Finally;\n+use std::finally::Finally;\n \n (|| {\n     // ...\n@@ -75,7 +75,7 @@ impl<T> Finally<T> for fn() -> T {\n  * # Example\n  *\n  * ```\n- * use std::unstable::finally::try_finally;\n+ * use std::finally::try_finally;\n  *\n  * struct State<'a> { buffer: &'a mut [u8], len: uint }\n  * # let mut buf = [];"}, {"sha": "56cbe2e2a30d187ec32bea4f82fc34ed6f1febe0", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -53,7 +53,7 @@\n        html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![no_std]\n-#![feature(globs, macro_rules, managed_boxes, phase)]\n+#![feature(globs, macro_rules, managed_boxes, phase, simd)]\n #![deny(missing_doc)]\n \n #[cfg(test)] extern crate realcore = \"core\";\n@@ -124,6 +124,7 @@ pub mod iter;\n pub mod option;\n pub mod raw;\n pub mod result;\n+pub mod simd;\n pub mod slice;\n pub mod str;\n pub mod tuple;"}, {"sha": "99b802f9918f10e8c8528f9093e8cc9e64bbe65e", "filename": "src/libcore/simd.rs", "status": "renamed", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -8,54 +8,89 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! SIMD vectors\n+//! SIMD vectors.\n+//!\n+//! These types can be used for accessing basic SIMD operations. Each of them\n+//! implements the standard arithmetic operator traits (Add, Sub, Mul, Div,\n+//! Rem, Shl, Shr) through compiler magic, rather than explicitly. Currently\n+//! comparison operators are not implemented. To use SSE3+, you must enable\n+//! the features, like `-C target-feature=sse3,sse4.1,sse4.2`, or a more\n+//! specific `target-cpu`. No other SIMD intrinsics or high-level wrappers are\n+//! provided beyond this module.\n+//!\n+//! ```rust\n+//! #[allow(experimental)];\n+//!\n+//! fn main() {\n+//!     use std::simd::f32x4;\n+//!     let a = f32x4(40.0, 41.0, 42.0, 43.0);\n+//!     let b = f32x4(1.0, 1.1, 3.4, 9.8);\n+//!     println!(\"{}\", a + b);\n+//! }\n+//! ```\n+//!\n+//! ## Stability Note\n+//!\n+//! These are all experimental. The inferface may change entirely, without\n+//! warning.\n \n #![allow(non_camel_case_types)]\n+#![allow(missing_doc)]\n \n #[experimental]\n #[simd]\n+#[deriving(Show)]\n pub struct i8x16(pub i8, pub i8, pub i8, pub i8,\n                  pub i8, pub i8, pub i8, pub i8,\n                  pub i8, pub i8, pub i8, pub i8,\n                  pub i8, pub i8, pub i8, pub i8);\n \n #[experimental]\n #[simd]\n+#[deriving(Show)]\n pub struct i16x8(pub i16, pub i16, pub i16, pub i16,\n                  pub i16, pub i16, pub i16, pub i16);\n \n #[experimental]\n #[simd]\n+#[deriving(Show)]\n pub struct i32x4(pub i32, pub i32, pub i32, pub i32);\n \n #[experimental]\n #[simd]\n+#[deriving(Show)]\n pub struct i64x2(pub i64, pub i64);\n \n #[experimental]\n #[simd]\n+#[deriving(Show)]\n pub struct u8x16(pub u8, pub u8, pub u8, pub u8,\n                  pub u8, pub u8, pub u8, pub u8,\n                  pub u8, pub u8, pub u8, pub u8,\n                  pub u8, pub u8, pub u8, pub u8);\n \n #[experimental]\n #[simd]\n+#[deriving(Show)]\n pub struct u16x8(pub u16, pub u16, pub u16, pub u16,\n                  pub u16, pub u16, pub u16, pub u16);\n \n #[experimental]\n #[simd]\n+#[deriving(Show)]\n pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n \n #[experimental]\n #[simd]\n+#[deriving(Show)]\n pub struct u64x2(pub u64, pub u64);\n \n #[experimental]\n #[simd]\n+#[deriving(Show)]\n pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n \n #[experimental]\n #[simd]\n+#[deriving(Show)]\n pub struct f64x2(pub f64, pub f64);", "previous_filename": "src/libstd/unstable/simd.rs"}, {"sha": "bc52bc9946c087c15fafe4ed8fb6538dcad7c2f4", "filename": "src/libstd/io/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Fio%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Fio%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftest.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -37,7 +37,7 @@ macro_rules! iotest (\n             use io::net::unix::*;\n             use io::timer::*;\n             use io::process::*;\n-            use unstable::running_on_valgrind;\n+            use rt::running_on_valgrind;\n             use str;\n \n             fn f() $b"}, {"sha": "ca70fd162b7d8f7d3fb417075cd66dc56f2bdd61", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -103,7 +103,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/\")]\n #![feature(macro_rules, globs, asm, managed_boxes, thread_local, link_args,\n-           simd, linkage, default_type_params, phase, concat_idents, quad_precision_float)]\n+           linkage, default_type_params, phase, concat_idents, quad_precision_float)]\n \n // Don't link to std. We are std.\n #![no_std]\n@@ -144,13 +144,15 @@ pub use core::clone;\n #[cfg(not(test))] pub use core::cmp;\n pub use core::container;\n pub use core::default;\n+pub use core::finally;\n pub use core::intrinsics;\n pub use core::iter;\n #[cfg(not(test))] pub use core::kinds;\n pub use core::mem;\n #[cfg(not(test))] pub use core::ops;\n pub use core::ptr;\n pub use core::raw;\n+pub use core::simd;\n pub use core::tuple;\n #[cfg(not(test))] pub use core::ty;\n pub use core::result;"}, {"sha": "4316fb21d415047ecbef2d5a04107dbb4061718f", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -144,7 +144,7 @@ mod imp {\n     mod tests {\n         use prelude::*;\n         use super::*;\n-        use unstable::finally::Finally;\n+        use finally::Finally;\n \n         #[test]\n         fn smoke_test() {"}, {"sha": "d2131ad44fb301cabf0e674d45b6935aa74739f2", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -76,6 +76,10 @@ pub use self::util::{Stdio, Stdout, Stderr};\n \n pub use alloc::{heap, libc_heap};\n \n+// Used by I/O tests\n+#[experimental]\n+pub use self::util::running_on_valgrind;\n+\n // FIXME: these probably shouldn't be public...\n #[doc(hidden)]\n pub mod shouldnt_be_public {"}, {"sha": "3e61f3ff23624050614b0570ab0ec863b9aad0e0", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -36,7 +36,7 @@ use rt::unwind::Unwinder;\n use str::SendStr;\n use sync::atomics::{AtomicUint, SeqCst};\n use task::{TaskResult, TaskOpts};\n-use unstable::finally::Finally;\n+use finally::Finally;\n \n /// The Task struct represents all state associated with a rust\n /// task. There are at this point two primary \"subtypes\" of task,"}, {"sha": "103fbdc0bc93d2f58ce9f1e51595a375f4826757", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -15,11 +15,11 @@ use io::IoResult;\n use io;\n use iter::Iterator;\n use libc;\n+use libc::uintptr_t;\n use option::{Some, None, Option};\n use os;\n use result::Ok;\n use str::{Str, StrSlice};\n-use unstable::running_on_valgrind;\n use slice::ImmutableVector;\n \n // Indicates whether we should perform expensive sanity checks, including rtassert!\n@@ -162,3 +162,15 @@ memory and partly incapable of presentation to others.\",\n         unsafe { intrinsics::abort() }\n     }\n }\n+\n+/// Dynamically inquire about whether we're running under V.\n+/// You should usually not use this unless your test definitely\n+/// can't run correctly un-altered. Valgrind is there to help\n+/// you notice weirdness in normal, un-doctored code paths!\n+pub fn running_on_valgrind() -> bool {\n+    unsafe { rust_running_on_valgrind() != 0 }\n+}\n+\n+extern {\n+    fn rust_running_on_valgrind() -> uintptr_t;\n+}"}, {"sha": "e1242e24537572d4d4c183d2d8bb2212ce4ab25a", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -110,7 +110,7 @@ use option::{None, Option, Some};\n use ptr::RawPtr;\n use ptr;\n use rt::heap::{allocate, deallocate};\n-use unstable::finally::try_finally;\n+use finally::try_finally;\n use vec::Vec;\n \n pub use core::slice::{ref_slice, mut_ref_slice, Splits, Windows};"}, {"sha": "d8de6463fabbd73c7feb9da30b987f5daec9b4c2", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -10,24 +10,8 @@\n \n #![doc(hidden)]\n \n-use libc::uintptr_t;\n-\n-pub use core::finally;\n-\n pub mod dynamic_lib;\n \n-pub mod simd;\n pub mod sync;\n pub mod mutex;\n \n-/// Dynamically inquire about whether we're running under V.\n-/// You should usually not use this unless your test definitely\n-/// can't run correctly un-altered. Valgrind is there to help\n-/// you notice weirdness in normal, un-doctored code paths!\n-pub fn running_on_valgrind() -> bool {\n-    unsafe { rust_running_on_valgrind() != 0 }\n-}\n-\n-extern {\n-    fn rust_running_on_valgrind() -> uintptr_t;\n-}"}, {"sha": "aae790f887a61caf4f1a595f0ae4cf740ec026a5", "filename": "src/libsync/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Flibsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fraw.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -18,7 +18,7 @@\n use std::kinds::marker;\n use std::mem;\n use std::sync::atomics;\n-use std::unstable::finally::Finally;\n+use std::finally::Finally;\n \n use mutex;\n "}, {"sha": "70abebd321a94862215e0bc867f8cb381751f610", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -17,7 +17,7 @@ extern crate sync;\n \n use std::io;\n use std::os;\n-use std::unstable::simd::f64x2;\n+use std::simd::f64x2;\n use sync::Future;\n use sync::Arc;\n "}, {"sha": "9fbb7364054d51c6b0d13020c1a7c6f8a7b38a37", "filename": "src/test/compile-fail/simd-binop.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Ftest%2Fcompile-fail%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Ftest%2Fcompile-fail%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-binop.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -12,26 +12,26 @@\n \n #![allow(experimental)]\n \n-use std::unstable::simd::f32x4;\n+use std::simd::f32x4;\n \n fn main() {\n \n     let _ = f32x4(0.0, 0.0, 0.0, 0.0) == f32x4(0.0, 0.0, 0.0, 0.0);\n-    //~^ ERROR binary comparison operation `==` not supported for floating point SIMD vector `std::unstable::simd::f32x4`\n+    //~^ ERROR binary comparison operation `==` not supported for floating point SIMD vector `core::simd::f32x4`\n \n     let _ = f32x4(0.0, 0.0, 0.0, 0.0) != f32x4(0.0, 0.0, 0.0, 0.0);\n-    //~^ ERROR binary comparison operation `!=` not supported for floating point SIMD vector `std::unstable::simd::f32x4`\n+    //~^ ERROR binary comparison operation `!=` not supported for floating point SIMD vector `core::simd::f32x4`\n \n     let _ = f32x4(0.0, 0.0, 0.0, 0.0) < f32x4(0.0, 0.0, 0.0, 0.0);\n-    //~^ ERROR binary comparison operation `<` not supported for floating point SIMD vector `std::unstable::simd::f32x4`\n+    //~^ ERROR binary comparison operation `<` not supported for floating point SIMD vector `core::simd::f32x4`\n \n     let _ = f32x4(0.0, 0.0, 0.0, 0.0) <= f32x4(0.0, 0.0, 0.0, 0.0);\n-    //~^ ERROR binary comparison operation `<=` not supported for floating point SIMD vector `std::unstable::simd::f32x4`\n+    //~^ ERROR binary comparison operation `<=` not supported for floating point SIMD vector `core::simd::f32x4`\n \n     let _ = f32x4(0.0, 0.0, 0.0, 0.0) >= f32x4(0.0, 0.0, 0.0, 0.0);\n-    //~^ ERROR binary comparison operation `>=` not supported for floating point SIMD vector `std::unstable::simd::f32x4`\n+    //~^ ERROR binary comparison operation `>=` not supported for floating point SIMD vector `core::simd::f32x4`\n \n     let _ = f32x4(0.0, 0.0, 0.0, 0.0) > f32x4(0.0, 0.0, 0.0, 0.0);\n-    //~^ ERROR binary comparison operation `>` not supported for floating point SIMD vector `std::unstable::simd::f32x4`\n+    //~^ ERROR binary comparison operation `>` not supported for floating point SIMD vector `core::simd::f32x4`\n \n }"}, {"sha": "5f9f56bf3c0f4800e52d8ed641a87a445d127a6d", "filename": "src/test/compile-fail/simd-experimental.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Ftest%2Fcompile-fail%2Fsimd-experimental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Ftest%2Fcompile-fail%2Fsimd-experimental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-experimental.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -10,7 +10,7 @@\n \n #![deny(experimental)]\n \n-use std::unstable::simd;\n+use std::simd;\n \n fn main() {\n     let _ = simd::i64x2(0, 0); //~ ERROR: experimental"}, {"sha": "b84405ee7270e76271bd289cb26dfc27cedd923c", "filename": "src/test/debuginfo/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimd.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -43,7 +43,7 @@\n #![allow(experimental)]\n #![allow(unused_variable)]\n \n-use std::unstable::simd::{i8x16, i16x8,i32x4,i64x2,u8x16,u16x8,u32x4,u64x2,f32x4,f64x2};\n+use std::simd::{i8x16, i16x8,i32x4,i64x2,u8x16,u16x8,u32x4,u64x2,f32x4,f64x2};\n \n fn main() {\n "}, {"sha": "7f2c9e14af10d747728660012a1b616c79548566", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -15,7 +15,7 @@ extern crate native;\n \n use std::os;\n use std::io::process::Command;\n-use std::unstable::finally::Finally;\n+use std::finally::Finally;\n use std::str;\n \n #[start]"}, {"sha": "7f9be78d5832db8aac58f5f06f2c57aa029a1e6a", "filename": "src/test/run-pass/simd-binop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-binop.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(experimental)]\n \n-use std::unstable::simd::{i32x4, f32x4, u32x4};\n+use std::simd::{i32x4, f32x4, u32x4};\n \n fn eq_u32x4(u32x4(x0, x1, x2, x3): u32x4, u32x4(y0, y1, y2, y3): u32x4) -> bool {\n     (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)"}, {"sha": "966db25a128a797849065b9f8a3d8350ac3cfc3b", "filename": "src/test/run-pass/simd-issue-10604.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e80f1a14195814080300b9ac36e267f8870430/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e80f1a14195814080300b9ac36e267f8870430/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs?ref=12e80f1a14195814080300b9ac36e267f8870430", "patch": "@@ -13,5 +13,5 @@\n #![feature(simd)]\n \n pub fn main() {\n-    let _o = None::<std::unstable::simd::i32x4>;\n+    let _o = None::<std::simd::i32x4>;\n }"}]}