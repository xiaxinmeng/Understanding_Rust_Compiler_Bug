{"sha": "c9949c040c53534344c5efbd437d169e6dba2a47", "node_id": "C_kwDOAAsO6NoAKGM5OTQ5YzA0MGM1MzUzNDM0NGM1ZWZiZDQzN2QxNjllNmRiYTJhNDc", "commit": {"author": {"name": "rainy-me", "email": "github@yue.coffee", "date": "2021-11-13T17:32:10Z"}, "committer": {"name": "rainy-me", "email": "github@yue.coffee", "date": "2021-11-13T17:32:10Z"}, "message": "add missing match arms end of last arm", "tree": {"sha": "d1a8c9e39a9e8a08c798257c80e828d129e27e77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1a8c9e39a9e8a08c798257c80e828d129e27e77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9949c040c53534344c5efbd437d169e6dba2a47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9949c040c53534344c5efbd437d169e6dba2a47", "html_url": "https://github.com/rust-lang/rust/commit/c9949c040c53534344c5efbd437d169e6dba2a47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9949c040c53534344c5efbd437d169e6dba2a47/comments", "author": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e756e05aab5410f6176fce26bf021453708b9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e756e05aab5410f6176fce26bf021453708b9b", "html_url": "https://github.com/rust-lang/rust/commit/d1e756e05aab5410f6176fce26bf021453708b9b"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "f16112feeff2df19179bf2ef153c5f9a4b61eedf", "filename": "crates/ide_assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c9949c040c53534344c5efbd437d169e6dba2a47/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9949c040c53534344c5efbd437d169e6dba2a47/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=c9949c040c53534344c5efbd437d169e6dba2a47", "patch": "@@ -178,6 +178,19 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n                             None => Cursor::Before(first_new_arm.syntax()),\n                         };\n                     let snippet = render_snippet(cap, new_match_arm_list.syntax(), cursor);\n+                    // remove the second last line if it only contains trailing whitespace\n+                    let lines = snippet.lines().collect_vec();\n+                    let snippet = lines\n+                        .iter()\n+                        .enumerate()\n+                        .filter_map(|(index, &line)| {\n+                            if index + 2 == lines.len() && line.trim().is_empty() {\n+                                return None;\n+                            }\n+                            return Some(line);\n+                        })\n+                        .join(\"\\n\");\n+\n                     builder.replace_snippet(cap, old_range, snippet);\n                 }\n                 _ => builder.replace(old_range, new_match_arm_list.to_string()),\n@@ -197,6 +210,19 @@ fn cursor_at_trivial_match_arm_list(\n         return Some(());\n     }\n \n+    // match x {\n+    //     bar => baz,\n+    //     $0\n+    // }\n+    if let Some(last_arm) = match_arm_list.arms().last() {\n+        let last_arm_range = last_arm.syntax().text_range();\n+        let match_expr_range = match_expr.syntax().text_range();\n+        if last_arm_range.end() <= ctx.offset() && ctx.offset() < match_expr_range.end() {\n+            cov_mark::hit!(add_missing_match_arms_end_of_last_arm);\n+            return Some(());\n+        }\n+    }\n+\n     // match { _$0 => {...} }\n     let wild_pat = ctx.find_node_at_offset_with_descend::<ast::WildcardPat>()?;\n     let arm = wild_pat.syntax().parent().and_then(ast::MatchArm::cast)?;\n@@ -676,6 +702,42 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn add_missing_match_arms_end_of_last_arm() {\n+        cov_mark::check!(add_missing_match_arms_end_of_last_arm);\n+        check_assist(\n+            add_missing_match_arms,\n+            r#\"\n+enum A { One, Two }\n+enum B { One, Two }\n+\n+fn main() {\n+    let a = A::One;\n+    let b = B::One;\n+    match (a, b) {\n+        (A::Two, B::One) => {},\n+        $0\n+    }\n+}\n+\"#,\n+            r#\"\n+enum A { One, Two }\n+enum B { One, Two }\n+\n+fn main() {\n+    let a = A::One;\n+    let b = B::One;\n+    match (a, b) {\n+        (A::Two, B::One) => {},\n+        $0(A::One, B::One) => todo!(),\n+        (A::One, B::Two) => todo!(),\n+        (A::Two, B::Two) => todo!(),\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn add_missing_match_arms_tuple_of_enum() {\n         check_assist("}]}