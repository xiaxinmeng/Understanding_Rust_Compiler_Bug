{"sha": "6018f115aa7365db39a9df1f883123076403a97b", "node_id": "C_kwDOAAsO6NoAKDYwMThmMTE1YWE3MzY1ZGIzOWE5ZGYxZjg4MzEyMzA3NjQwM2E5N2I", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-11-09T22:24:22Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-11-11T01:51:02Z"}, "message": "emit errors when using `RangeFrom` and `RangeTo`", "tree": {"sha": "7307a96b871152d5c6b6442b895a424ad8e15807", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7307a96b871152d5c6b6442b895a424ad8e15807"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6018f115aa7365db39a9df1f883123076403a97b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6018f115aa7365db39a9df1f883123076403a97b", "html_url": "https://github.com/rust-lang/rust/commit/6018f115aa7365db39a9df1f883123076403a97b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6018f115aa7365db39a9df1f883123076403a97b/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "004986b79b933a5c9ec160b977f791b154c8d275", "url": "https://api.github.com/repos/rust-lang/rust/commits/004986b79b933a5c9ec160b977f791b154c8d275", "html_url": "https://github.com/rust-lang/rust/commit/004986b79b933a5c9ec160b977f791b154c8d275"}], "stats": {"total": 62, "additions": 45, "deletions": 17}, "files": [{"sha": "06e6e4350fcbcb9271aac6bb5b8a850692a211b6", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6018f115aa7365db39a9df1f883123076403a97b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6018f115aa7365db39a9df1f883123076403a97b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=6018f115aa7365db39a9df1f883123076403a97b", "patch": "@@ -1211,18 +1211,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr<'_>,\n         expected_ty: Ty<'tcx>,\n     ) -> bool {\n-        if let ExprKind::Struct(QPath::LangItem(LangItem::Range, ..), [start, _], _) = expr.kind\n-            && expected_ty.is_floating_point()\n-        {\n-            err.span_suggestion_verbose(\n-                self.tcx.sess.source_map().next_point(start.span),\n-                \"remove the unnecessary `.` operator to to use a floating point literal\",\n-                \"\",\n-                Applicability::MachineApplicable,\n-            );\n-            return true;\n+        if !expected_ty.is_floating_point() {\n+            return false;\n+        }\n+        match expr.kind {\n+            ExprKind::Struct(QPath::LangItem(LangItem::Range, ..), [start, end], _) => {\n+                err.span_suggestion_verbose(\n+                    start.span.shrink_to_hi().with_hi(end.span.lo()),\n+                    \"remove the unnecessary `.` operator for a floating point literal\",\n+                    '.',\n+                    Applicability::MaybeIncorrect,\n+                );\n+                true\n+            }\n+            ExprKind::Struct(QPath::LangItem(LangItem::RangeFrom, ..), [start], _) => {\n+                err.span_suggestion_verbose(\n+                    expr.span.with_lo(start.span.hi()),\n+                    \"remove the unnecessary `.` operator for a floating point literal\",\n+                    '.',\n+                    Applicability::MaybeIncorrect,\n+                );\n+                true\n+            }\n+            ExprKind::Struct(QPath::LangItem(LangItem::RangeTo, ..), [end], _) => {\n+                err.span_suggestion_verbose(\n+                    expr.span.until(end.span),\n+                    \"remove the unnecessary `.` operator and add an integer part for a floating point literal\",\n+                    \"0.\",\n+                    Applicability::MaybeIncorrect,\n+                );\n+                true\n+            }\n+            _ => false,\n         }\n-        false\n     }\n \n     fn is_loop(&self, id: hir::HirId) -> bool {"}, {"sha": "c1a944562683a802277f24947f2275d884283c27", "filename": "src/test/ui/suggestions/unnecessary_dot_for_floating_point_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6018f115aa7365db39a9df1f883123076403a97b/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6018f115aa7365db39a9df1f883123076403a97b/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.rs?ref=6018f115aa7365db39a9df1f883123076403a97b", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let _: f64 = 0..10; //~ ERROR mismatched types\n-    let _: f64 = 0..; //~ ERROR mismatched types\n+    let _: f64 = 1..; //~ ERROR mismatched types\n     let _: f64 = ..10; //~ ERROR mismatched types\n     let _: f64 = std::ops::Range { start: 0, end: 1 }; //~ ERROR mismatched types\n }"}, {"sha": "773f1392ae7655827c2e619bf95beefdcefb48a8", "filename": "src/test/ui/suggestions/unnecessary_dot_for_floating_point_literal.stderr", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6018f115aa7365db39a9df1f883123076403a97b/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6018f115aa7365db39a9df1f883123076403a97b/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.stderr?ref=6018f115aa7365db39a9df1f883123076403a97b", "patch": "@@ -8,22 +8,25 @@ LL |     let _: f64 = 0..10;\n    |\n    = note: expected type `f64`\n             found struct `std::ops::Range<{integer}>`\n-help: remove the unnecessary `.` operator to to use a floating point literal\n-   |\n-LL -     let _: f64 = 0..10;\n-LL +     let _: f64 = 0.10;\n+help: remove the unnecessary `.` operator for a floating point literal\n    |\n+LL |     let _: f64 = 0.10;\n+   |                   ~\n \n error[E0308]: mismatched types\n   --> $DIR/unnecessary_dot_for_floating_point_literal.rs:3:18\n    |\n-LL |     let _: f64 = 0..;\n+LL |     let _: f64 = 1..;\n    |            ---   ^^^ expected `f64`, found struct `RangeFrom`\n    |            |\n    |            expected due to this\n    |\n    = note: expected type `f64`\n             found struct `RangeFrom<{integer}>`\n+help: remove the unnecessary `.` operator for a floating point literal\n+   |\n+LL |     let _: f64 = 1.;\n+   |                   ~\n \n error[E0308]: mismatched types\n   --> $DIR/unnecessary_dot_for_floating_point_literal.rs:4:18\n@@ -35,6 +38,10 @@ LL |     let _: f64 = ..10;\n    |\n    = note: expected type `f64`\n             found struct `RangeTo<{integer}>`\n+help: remove the unnecessary `.` operator and add an integer part for a floating point literal\n+   |\n+LL |     let _: f64 = 0.10;\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/unnecessary_dot_for_floating_point_literal.rs:5:18"}]}