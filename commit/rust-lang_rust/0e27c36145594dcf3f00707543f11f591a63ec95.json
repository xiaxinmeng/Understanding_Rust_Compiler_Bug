{"sha": "0e27c36145594dcf3f00707543f11f591a63ec95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMjdjMzYxNDU1OTRkY2YzZjAwNzA3NTQzZjExZjU5MWE2M2VjOTU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-09T02:09:57Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-10T05:59:12Z"}, "message": "Add various comments.\n\nLots of details I wish I'd known when I first looked at this code.", "tree": {"sha": "d0a943ab3d99ce9c3370cbd0844eba0b6f51c911", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0a943ab3d99ce9c3370cbd0844eba0b6f51c911"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e27c36145594dcf3f00707543f11f591a63ec95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e27c36145594dcf3f00707543f11f591a63ec95", "html_url": "https://github.com/rust-lang/rust/commit/0e27c36145594dcf3f00707543f11f591a63ec95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e27c36145594dcf3f00707543f11f591a63ec95/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2cae7bbc3880ec2874b32756c7c5dc52997a552", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2cae7bbc3880ec2874b32756c7c5dc52997a552", "html_url": "https://github.com/rust-lang/rust/commit/c2cae7bbc3880ec2874b32756c7c5dc52997a552"}], "stats": {"total": 52, "additions": 43, "deletions": 9}, "files": [{"sha": "ee4a581123f889e8cf0e656238528988f119718e", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0e27c36145594dcf3f00707543f11f591a63ec95/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e27c36145594dcf3f00707543f11f591a63ec95/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=0e27c36145594dcf3f00707543f11f591a63ec95", "patch": "@@ -344,9 +344,22 @@ impl Decodable for Ident {\n     }\n }\n \n-/// A symbol is an interned or gensymed string. The use of `newtype_index!` means\n-/// that `Option<Symbol>` only takes up 4 bytes, because `newtype_index!` reserves\n-/// the last 256 values for tagging purposes.\n+/// A symbol is an interned or gensymed string. A gensym is a symbol that is\n+/// never equal to any other symbol. E.g.:\n+/// ```\n+/// assert_eq!(Symbol::intern(\"x\"), Symbol::intern(\"x\"))\n+/// assert_ne!(Symbol::gensym(\"x\"), Symbol::intern(\"x\"))\n+/// assert_ne!(Symbol::gensym(\"x\"), Symbol::gensym(\"x\"))\n+/// ```\n+/// Conceptually, a gensym can be thought of as a normal symbol with an\n+/// invisible unique suffix. Gensyms are useful when creating new identifiers\n+/// that must not match any existing identifiers, e.g. during macro expansion\n+/// and syntax desugaring.\n+///\n+/// Internally, a Symbol is implemented as an index, and all operations\n+/// (including hashing, equality, and ordering) operate on that index. The use\n+/// of `newtype_index!` means that `Option<Symbol>` only takes up 4 bytes,\n+/// because `newtype_index!` reserves the last 256 values for tagging purposes.\n ///\n /// Note that `Symbol` cannot directly be a `newtype_index!` because it implements\n /// `fmt::Debug`, `Encodable`, and `Decodable` in special ways.\n@@ -380,6 +393,7 @@ impl Symbol {\n         with_interner(|interner| interner.gensymed(self))\n     }\n \n+    // WARNING: this function is deprecated and will be removed in the future.\n     pub fn is_gensymed(self) -> bool {\n         with_interner(|interner| interner.is_gensymed(self))\n     }\n@@ -510,6 +524,8 @@ impl Interner {\n         symbol.0.as_usize() >= self.strings.len()\n     }\n \n+    // Get the symbol as a string. `Symbol::as_str()` should be used in\n+    // preference to this function.\n     pub fn get(&self, symbol: Symbol) -> &str {\n         match self.strings.get(symbol.0.as_usize()) {\n             Some(string) => string,\n@@ -614,11 +630,17 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n     GLOBALS.with(|globals| f(&mut *globals.symbol_interner.lock()))\n }\n \n-/// Represents a string stored in the interner. Because the interner outlives any thread\n-/// which uses this type, we can safely treat `string` which points to interner data,\n-/// as an immortal string, as long as this type never crosses between threads.\n-// FIXME: ensure that the interner outlives any thread which uses `LocalInternedString`,\n-// by creating a new thread right after constructing the interner.\n+/// An alternative to `Symbol` and `InternedString`, useful when the chars\n+/// within the symbol need to be accessed. It is best used for temporary\n+/// values.\n+///\n+/// Because the interner outlives any thread which uses this type, we can\n+/// safely treat `string` which points to interner data, as an immortal string,\n+/// as long as this type never crosses between threads.\n+//\n+// FIXME: ensure that the interner outlives any thread which uses\n+// `LocalInternedString`, by creating a new thread right after constructing the\n+// interner.\n #[derive(Clone, Copy, Hash, PartialOrd, Eq, Ord)]\n pub struct LocalInternedString {\n     string: &'static str,\n@@ -711,7 +733,19 @@ impl Encodable for LocalInternedString {\n     }\n }\n \n-/// Represents a string stored in the string interner.\n+/// An alternative to `Symbol` that is focused on string contents. It has two\n+/// main differences to `Symbol`.\n+///\n+/// First, its implementations of `Hash`, `PartialOrd` and `Ord` work with the\n+/// string chars rather than the symbol integer. This is useful when hash\n+/// stability is required across compile sessions, or a guaranteed sort\n+/// ordering is required.\n+///\n+/// Second, gensym-ness is irrelevant. E.g.:\n+/// ```\n+/// assert_ne!(Symbol::gensym(\"x\"), Symbol::gensym(\"x\"))\n+/// assert_eq!(Symbol::gensym(\"x\").as_interned_str(), Symbol::gensym(\"x\").as_interned_str())\n+/// ```\n #[derive(Clone, Copy, Eq)]\n pub struct InternedString {\n     symbol: Symbol,"}]}