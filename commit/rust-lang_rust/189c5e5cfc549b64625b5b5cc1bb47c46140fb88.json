{"sha": "189c5e5cfc549b64625b5b5cc1bb47c46140fb88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OWM1ZTVjZmM1NDliNjQ2MjViNWI1Y2MxYmI0N2M0NjE0MGZiODg=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-08-28T15:25:41Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-08-28T15:25:58Z"}, "message": "Rustup to rustc 1.13.0-nightly (a23064af5 2016-08-27)", "tree": {"sha": "05448e4cdfd70ca0d11312b642922ebf0402b04e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05448e4cdfd70ca0d11312b642922ebf0402b04e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/189c5e5cfc549b64625b5b5cc1bb47c46140fb88", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJXwwKHAAoJEF5CfHlMukXonAQP/3phpb3wAFsoqx1oni2uj8ny\ncYKxwyMgJoZ40+iLB+xy1rZA9f6ZZDNQdljbuTCXFSuRml+ha4UTW3UTRo1O1r7C\nfB85kmN3tmyDbLdVt6u5apFPbqT9X9KXrPavQUaRqGbauGuqA3In3kgyR5PKjm27\n4P5Ik10Kkn8jWVKVT7V3bAVRzA/s9QW8KMYjOG5NgHDimbiUDTk2ZL9g8DdWBC5r\nh6s7v/fcXisOxESFKZCtkCRUSzBskMHbXBF/rsTUANf1Jz6ooqe/T7jMNKXGWMMY\nyn1KCqy9wCFaTTaZUp4Z70yGfi2xPC6RrACZ4fkLamoeNKW+mMUJ16xl1LU5zoPC\nWjnhfqGN8pCpEV0kVlvJ9STGwW9CIs8fdqjo7wBBnJDLb9pemjvtwpCzd6XvX655\nMsoHVshIhZ0u9qicY4M7KKZQh1tG40TB381bvKfcSuvraYqp6OvIf/fHVXRi5zV9\n43LPZguQ97visa6EULDniDl9VrUv/z+yGYaq9LP+nJGDSvcV//zZEnyZ0L1hJK9F\nrObfO7q7IwbRWOWjNRQ7eCCkKAIimogmMfBim87iHktaA8EC9dsyTmdSrLw9y5Zr\n1rnHu4cC0d201ofEucRWMoYRVOPUV+gYRZa3zh4fgBfju2TBtRHRTru+znYtZPO3\n4NOxQ9Wfw+GMU83fuULW\n=Eh6L\n-----END PGP SIGNATURE-----", "payload": "tree 05448e4cdfd70ca0d11312b642922ebf0402b04e\nparent e338f6a4f018021a2ffc2574991ec4c3b9329642\nauthor mcarton <cartonmartin+git@gmail.com> 1472397941 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1472397958 +0200\n\nRustup to rustc 1.13.0-nightly (a23064af5 2016-08-27)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/189c5e5cfc549b64625b5b5cc1bb47c46140fb88", "html_url": "https://github.com/rust-lang/rust/commit/189c5e5cfc549b64625b5b5cc1bb47c46140fb88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/189c5e5cfc549b64625b5b5cc1bb47c46140fb88/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e338f6a4f018021a2ffc2574991ec4c3b9329642", "url": "https://api.github.com/repos/rust-lang/rust/commits/e338f6a4f018021a2ffc2574991ec4c3b9329642", "html_url": "https://github.com/rust-lang/rust/commit/e338f6a4f018021a2ffc2574991ec4c3b9329642"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "a5f3b1c12f6c3ef5df04980c316640ad70958611", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/189c5e5cfc549b64625b5b5cc1bb47c46140fb88/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c5e5cfc549b64625b5b5cc1bb47c46140fb88/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=189c5e5cfc549b64625b5b5cc1bb47c46140fb88", "patch": "@@ -107,7 +107,7 @@ fn check_hash_peq<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, span: Span, trait_re\n \n             // Only care about `impl PartialEq<Foo> for Foo`\n             // For `impl PartialEq<B> for A, input_types is [A, B]\n-            if trait_ref.input_types()[1] == ty {\n+            if trait_ref.substs.type_at(1) == ty {\n                 let mess = if peq_is_automatically_derived {\n                     \"you are implementing `Hash` explicitly but have derived `PartialEq`\"\n                 } else {"}, {"sha": "30c7e067d289bc72959d0a42a9b8a240595565bb", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/189c5e5cfc549b64625b5b5cc1bb47c46140fb88/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c5e5cfc549b64625b5b5cc1bb47c46140fb88/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=189c5e5cfc549b64625b5b5cc1bb47c46140fb88", "patch": "@@ -144,7 +144,7 @@ impl<'a, 'tcx: 'a+'gcx, 'gcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx, 'g\n         }\n \n     }\n-    fn borrow(&mut self, borrow_id: NodeId, _: Span, cmt: cmt<'tcx>, _: ty::Region, _: ty::BorrowKind,\n+    fn borrow(&mut self, borrow_id: NodeId, _: Span, cmt: cmt<'tcx>, _: &ty::Region, _: ty::BorrowKind,\n               loan_cause: LoanCause) {\n \n         if let Categorization::Local(lid) = cmt.cat {"}, {"sha": "02366c4a52fb80e698a7f6968d58ccd68c77b5eb", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/189c5e5cfc549b64625b5b5cc1bb47c46140fb88/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c5e5cfc549b64625b5b5cc1bb47c46140fb88/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=189c5e5cfc549b64625b5b5cc1bb47c46140fb88", "patch": "@@ -1083,12 +1083,12 @@ fn get_error_type<'a>(cx: &LateContext, ty: ty::Ty<'a>) -> Option<ty::Ty<'a>> {\n     if !match_type(cx, ty, &paths::RESULT) {\n         return None;\n     }\n+\n     if let ty::TyEnum(_, substs) = ty.sty {\n-        if let Some(err_ty) = substs.types.get(1) {\n-            return Some(err_ty);\n-        }\n+        substs.types().nth(1)\n+    } else {\n+        None\n     }\n-    None\n }\n \n /// This checks whether a given type is known to implement Debug."}, {"sha": "db2c003b61d73a569f3c76f6630b401c6d331be7", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/189c5e5cfc549b64625b5b5cc1bb47c46140fb88/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c5e5cfc549b64625b5b5cc1bb47c46140fb88/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=189c5e5cfc549b64625b5b5cc1bb47c46140fb88", "patch": "@@ -59,7 +59,7 @@ impl LateLintPass for MutexAtomic {\n         let ty = cx.tcx.expr_ty(expr);\n         if let ty::TyStruct(_, subst) = ty.sty {\n             if match_type(cx, ty, &paths::MUTEX) {\n-                let mutex_param = &subst.types[0].sty;\n+                let mutex_param = &subst.type_at(0).sty;\n                 if let Some(atomic_name) = get_atomic_name(mutex_param) {\n                     let msg = format!(\"Consider using an {} instead of a Mutex here. If you just want the locking \\\n                                        behaviour and not the internal type, consider using Mutex<()>.\","}, {"sha": "9e9ff65ac5ed3b773369aa0a96f385d9210decd9", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/189c5e5cfc549b64625b5b5cc1bb47c46140fb88/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c5e5cfc549b64625b5b5cc1bb47c46140fb88/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=189c5e5cfc549b64625b5b5cc1bb47c46140fb88", "patch": "@@ -279,7 +279,7 @@ pub fn implements_trait<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>,\n                                                         trait_id,\n                                                         0,\n                                                         ty,\n-                                                        ty_params);\n+                                                        &ty_params);\n \n         traits::SelectionContext::new(&infcx).evaluate_obligation_conservatively(&obligation)\n     })"}, {"sha": "053cc69d7e75845267ce223fb5a0519e088ae106", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/189c5e5cfc549b64625b5b5cc1bb47c46140fb88/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c5e5cfc549b64625b5b5cc1bb47c46140fb88/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=189c5e5cfc549b64625b5b5cc1bb47c46140fb88", "patch": "@@ -89,7 +89,7 @@ fn check_vec_macro(cx: &LateContext, vec_args: &higher::VecArgs, span: Span) {\n /// Return the item type of the vector (ie. the `T` in `Vec<T>`).\n fn vec_type(ty: ty::Ty) -> ty::Ty {\n     if let ty::TyStruct(_, substs) = ty.sty {\n-        substs.types[0]\n+        substs.type_at(0)\n     } else {\n         panic!(\"The type of `vec!` is a not a struct?\");\n     }"}]}