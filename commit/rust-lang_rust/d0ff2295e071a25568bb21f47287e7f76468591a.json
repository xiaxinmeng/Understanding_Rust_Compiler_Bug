{"sha": "d0ff2295e071a25568bb21f47287e7f76468591a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZmYyMjk1ZTA3MWEyNTU2OGJiMjFmNDcyODdlN2Y3NjQ2ODU5MWE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-29T10:23:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-29T10:23:15Z"}, "message": "Rollup merge of #71217 - estebank:tail-borrow-sugg, r=pnkfelix\n\nSuggest `;` or assignment to drop borrows in tail exprs\n\nAddress the diagnostics part of #70844.\n\n```\nerror[E0597]: `counter` does not live long enough\n  --> $DIR/issue-54556-niconii.rs:22:20\n   |\nLL |     if let Ok(_) = counter.lock() { }\n   |                    ^^^^^^^-------\n   |                    |\n   |                    borrowed value does not live long enough\n   |                    a temporary with access to the borrow is created here ...\n...\nLL | }\n   | -\n   | |\n   | `counter` dropped here while still borrowed\n   | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::result::Result<MutexGuard<'_>, ()>`\n   |\nhelp: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n   |\nLL |     if let Ok(_) = counter.lock() { };\n   |                                      ^\n```", "tree": {"sha": "d03d4f09a48ee98451c5d40b89ab00acbf6752c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d03d4f09a48ee98451c5d40b89ab00acbf6752c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0ff2295e071a25568bb21f47287e7f76468591a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeqVWUCRBK7hj4Ov3rIwAAdHIIAIv8uIfTWxkIQRy/DMFCTdSG\n3j5MtiilBavq8SMqf5gq9VhxFwzlsbj9WYQ6742cV4smRStpe7a5vsN4BXoBEEyF\nzLnnnHNUNWPUiYZnRMWKJOFhmCXYZKqio2+ZRw3Di+4+raaVx8wd7P42ojFpsNxH\n5zIjRpDeRzV7CEELa/p1YQtbQnp5fVlEWy8ztPLIQaitSyGvOc2jK4+M5Ifq0J35\ncVBEqdHviYUpQi6BU16eRS09noq98QndfQIoKlC+z4AupZp/j6CNlD1g1TPhT98w\nVt2ZwDfrrayyQl+obkfuv3HBKV/oLojF7xt/Fv2m/g2cJaQcUVd7nqZHpKIaFlo=\n=wOsf\n-----END PGP SIGNATURE-----\n", "payload": "tree d03d4f09a48ee98451c5d40b89ab00acbf6752c4\nparent 92019986aa6532256277ca999006bdc77e9a95ad\nparent 2c6094e5d043087e6f7539bd5d484ff3ba4dcf5d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588155795 +0200\ncommitter GitHub <noreply@github.com> 1588155795 +0200\n\nRollup merge of #71217 - estebank:tail-borrow-sugg, r=pnkfelix\n\nSuggest `;` or assignment to drop borrows in tail exprs\n\nAddress the diagnostics part of #70844.\n\n```\nerror[E0597]: `counter` does not live long enough\n  --> $DIR/issue-54556-niconii.rs:22:20\n   |\nLL |     if let Ok(_) = counter.lock() { }\n   |                    ^^^^^^^-------\n   |                    |\n   |                    borrowed value does not live long enough\n   |                    a temporary with access to the borrow is created here ...\n...\nLL | }\n   | -\n   | |\n   | `counter` dropped here while still borrowed\n   | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::result::Result<MutexGuard<'_>, ()>`\n   |\nhelp: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n   |\nLL |     if let Ok(_) = counter.lock() { };\n   |                                      ^\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ff2295e071a25568bb21f47287e7f76468591a", "html_url": "https://github.com/rust-lang/rust/commit/d0ff2295e071a25568bb21f47287e7f76468591a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0ff2295e071a25568bb21f47287e7f76468591a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92019986aa6532256277ca999006bdc77e9a95ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/92019986aa6532256277ca999006bdc77e9a95ad", "html_url": "https://github.com/rust-lang/rust/commit/92019986aa6532256277ca999006bdc77e9a95ad"}, {"sha": "2c6094e5d043087e6f7539bd5d484ff3ba4dcf5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6094e5d043087e6f7539bd5d484ff3ba4dcf5d", "html_url": "https://github.com/rust-lang/rust/commit/2c6094e5d043087e6f7539bd5d484ff3ba4dcf5d"}], "stats": {"total": 153, "additions": 117, "deletions": 36}, "files": [{"sha": "4d7104531753c386ddd43a356f1d3ff808680074", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=d0ff2295e071a25568bb21f47287e7f76468591a", "patch": "@@ -672,6 +672,9 @@ pub struct BlockTailInfo {\n     /// Examples include `{ ...; tail };` and `let _ = { ...; tail };`\n     /// but not e.g., `let _x = { ...; tail };`\n     pub tail_result_is_ignored: bool,\n+\n+    /// `Span` of the tail expression.\n+    pub span: Span,\n }\n \n /// A MIR local."}, {"sha": "5253acbba7f1c0feb30370f68b9e804bedd53ed4", "filename": "src/librustc_mir/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=d0ff2295e071a25568bb21f47287e7f76468591a", "patch": "@@ -156,23 +156,32 @@ impl BorrowExplanation {\n                         err.span_label(body.source_info(drop_loc).span, message);\n \n                         if let Some(info) = &local_decl.is_block_tail {\n-                            // FIXME: use span_suggestion instead, highlighting the\n-                            // whole block tail expression.\n-                            let msg = if info.tail_result_is_ignored {\n-                                \"The temporary is part of an expression at the end of a block. \\\n-                                 Consider adding semicolon after the expression so its temporaries \\\n-                                 are dropped sooner, before the local variables declared by the \\\n-                                 block are dropped.\"\n+                            if info.tail_result_is_ignored {\n+                                err.span_suggestion_verbose(\n+                                    info.span.shrink_to_hi(),\n+                                    \"consider adding semicolon after the expression so its \\\n+                                     temporaries are dropped sooner, before the local variables \\\n+                                     declared by the block are dropped\",\n+                                    \";\".to_string(),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n                             } else {\n-                                \"The temporary is part of an expression at the end of a block. \\\n-                                 Consider forcing this temporary to be dropped sooner, before \\\n-                                 the block's local variables are dropped. \\\n-                                 For example, you could save the expression's value in a new \\\n-                                 local variable `x` and then make `x` be the expression \\\n-                                 at the end of the block.\"\n+                                err.note(\n+                                    \"the temporary is part of an expression at the end of a \\\n+                                     block;\\nconsider forcing this temporary to be dropped sooner, \\\n+                                     before the block's local variables are dropped\",\n+                                );\n+                                err.multipart_suggestion(\n+                                    \"for example, you could save the expression's value in a new \\\n+                                     local variable `x` and then make `x` be the expression at the \\\n+                                     end of the block\",\n+                                    vec![\n+                                        (info.span.shrink_to_lo(), \"let x = \".to_string()),\n+                                        (info.span.shrink_to_hi(), \"; x\".to_string()),\n+                                    ],\n+                                    Applicability::MaybeIncorrect,\n+                                );\n                             };\n-\n-                            err.note(msg);\n                         }\n                     }\n                 }"}, {"sha": "c2fe41169c117bbc999517b4e5d11e0130f0aa02", "filename": "src/librustc_mir_build/build/block.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs?ref=d0ff2295e071a25568bb21f47287e7f76468591a", "patch": "@@ -173,7 +173,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         if let Some(expr) = expr {\n             let tail_result_is_ignored =\n                 destination_ty.is_unit() || this.block_context.currently_ignores_tail_results();\n-            this.block_context.push(BlockFrame::TailExpr { tail_result_is_ignored });\n+            let span = match expr {\n+                ExprRef::Hair(expr) => expr.span,\n+                ExprRef::Mirror(ref expr) => expr.span,\n+            };\n+            this.block_context.push(BlockFrame::TailExpr { tail_result_is_ignored, span });\n \n             unpack!(block = this.into(destination, block, expr));\n             let popped = this.block_context.pop();"}, {"sha": "49d6ce39ddfa4df17b2edd99a8e754a4e1b15c72", "filename": "src/librustc_mir_build/build/expr/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs?ref=d0ff2295e071a25568bb21f47287e7f76468591a", "patch": "@@ -151,7 +151,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                 }\n                             }\n                             this.block_context\n-                                .push(BlockFrame::TailExpr { tail_result_is_ignored: true });\n+                                .push(BlockFrame::TailExpr { tail_result_is_ignored: true, span: expr.span });\n                             return Some(expr.span);\n                         }\n                     }"}, {"sha": "4c5c7f79b6cba61a1c2c18193fb47532315dd1b7", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=d0ff2295e071a25568bb21f47287e7f76468591a", "patch": "@@ -242,6 +242,9 @@ enum BlockFrame {\n         ///\n         /// Example: `let _ = { STMT_1; EXPR };`\n         tail_result_is_ignored: bool,\n+\n+        /// `Span` of the tail expression.\n+        span: Span,\n     },\n \n     /// Generic mark meaning that the block occurred as a subexpression\n@@ -369,8 +372,8 @@ impl BlockContext {\n             match bf {\n                 BlockFrame::SubExpr => continue,\n                 BlockFrame::Statement { .. } => break,\n-                &BlockFrame::TailExpr { tail_result_is_ignored } => {\n-                    return Some(BlockTailInfo { tail_result_is_ignored });\n+                &BlockFrame::TailExpr { tail_result_is_ignored, span } => {\n+                    return Some(BlockTailInfo { tail_result_is_ignored, span });\n                 }\n             }\n         }\n@@ -394,7 +397,7 @@ impl BlockContext {\n \n             // otherwise: use accumulated is_ignored state.\n             Some(\n-                BlockFrame::TailExpr { tail_result_is_ignored: ignored }\n+                BlockFrame::TailExpr { tail_result_is_ignored: ignored, .. }\n                 | BlockFrame::Statement { ignores_expr_result: ignored },\n             ) => *ignored,\n         }"}, {"sha": "2dca92e2be1f346897b72ebe35107a6ef999a63b", "filename": "src/test/ui/nll/issue-54382-use-span-of-tail-of-block.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr?ref=d0ff2295e071a25568bb21f47287e7f76468591a", "patch": "@@ -13,7 +13,10 @@ LL |\n LL |     ;\n    |     - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+   |\n+LL |             D(\"other\").next(&_thing1);\n+   |                                      ^\n \n error: aborting due to previous error\n "}, {"sha": "b4791fd22b4ad6c6d7bafead9d497aa537f5db67", "filename": "src/test/ui/nll/issue-54556-niconii.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr?ref=d0ff2295e071a25568bb21f47287e7f76468591a", "patch": "@@ -13,7 +13,10 @@ LL | }\n    | `counter` dropped here while still borrowed\n    | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::result::Result<MutexGuard<'_>, ()>`\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+   |\n+LL |     if let Ok(_) = counter.lock() { };\n+   |                                      ^\n \n error: aborting due to previous error\n "}, {"sha": "77065f0b8d21302c2432cd3b135d4945d9853aed", "filename": "src/test/ui/nll/issue-54556-stephaneyfx.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr?ref=d0ff2295e071a25568bb21f47287e7f76468591a", "patch": "@@ -12,7 +12,12 @@ LL | }\n    | `stmt` dropped here while still borrowed\n    | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::iter::Map<Rows<'_>, [closure@$DIR/issue-54556-stephaneyfx.rs:28:14: 28:23]>`\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+   = note: the temporary is part of an expression at the end of a block;\n+           consider forcing this temporary to be dropped sooner, before the block's local variables are dropped\n+help: for example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block\n+   |\n+LL |     let x = rows.map(|row| row).next(); x\n+   |     ^^^^^^^                           ^^^\n \n error: aborting due to previous error\n "}, {"sha": "047fdbc9148aced01d6601d9d4698a9f050d2444", "filename": "src/test/ui/nll/issue-54556-temps-in-tail-diagnostic.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr?ref=d0ff2295e071a25568bb21f47287e7f76468591a", "patch": "@@ -12,7 +12,10 @@ LL |\n LL |     ;\n    |     - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+   |\n+LL |         D(&_thing1).end();\n+   |                          ^\n \n error: aborting due to previous error\n "}, {"sha": "85920a8e7394c41953e6bfbf07146c8c5168bae9", "filename": "src/test/ui/nll/issue-54556-used-vs-unused-tails.stderr", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.stderr?ref=d0ff2295e071a25568bb21f47287e7f76468591a", "patch": "@@ -8,7 +8,10 @@ LL |     {              let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; //\n    |                                                     | borrowed value does not live long enough\n    |                                                     a temporary with access to the borrow is created here ...\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+   |\n+LL |     {              let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end();    } ; // suggest `;`\n+   |                                                                  ^\n \n error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:13:55\n@@ -20,7 +23,10 @@ LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }  } ; //\n    |                                                     | borrowed value does not live long enough\n    |                                                     a temporary with access to the borrow is created here ...\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+   |\n+LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end(); }  } ; // suggest `;`\n+   |                                                                  ^\n \n error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:16:55\n@@ -32,7 +38,10 @@ LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }; }   //\n    |                                                     | borrowed value does not live long enough\n    |                                                     a temporary with access to the borrow is created here ...\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+   |\n+LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end(); }; }   // suggest `;`\n+   |                                                                  ^\n \n error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:19:55\n@@ -44,7 +53,10 @@ LL |     let _ =      { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; //\n    |                                                     | borrowed value does not live long enough\n    |                                                     a temporary with access to the borrow is created here ...\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+   |\n+LL |     let _ =      { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end();    } ; // suggest `;`\n+   |                                                                  ^\n \n error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:22:55\n@@ -56,7 +68,10 @@ LL |     let _u =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   } ; //\n    |                                                     | borrowed value does not live long enough\n    |                                                     a temporary with access to the borrow is created here ...\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+   |\n+LL |     let _u =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit();   } ; // suggest `;`\n+   |                                                                   ^\n \n error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:25:55\n@@ -68,7 +83,12 @@ LL |     let _x =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; //\n    |                                                     | borrowed value does not live long enough\n    |                                                     a temporary with access to the borrow is created here ...\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+   = note: the temporary is part of an expression at the end of a block;\n+           consider forcing this temporary to be dropped sooner, before the block's local variables are dropped\n+help: for example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block\n+   |\n+LL |     let _x =     { let mut _t1 = D(Box::new(\"t1\")); let x = D(&_t1).end(); x    } ; // `let x = ...; x`\n+   |                                                     ^^^^^^^              ^^^\n \n error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:30:55\n@@ -80,7 +100,12 @@ LL |     _y =         { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() } ; // `l\n    |                                                     | borrowed value does not live long enough\n    |                                                     a temporary with access to the borrow is created here ...\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+   = note: the temporary is part of an expression at the end of a block;\n+           consider forcing this temporary to be dropped sooner, before the block's local variables are dropped\n+help: for example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block\n+   |\n+LL |     _y =         { let mut _t1 = D(Box::new(\"t1\")); let x = D(&_t1).end(); x } ; // `let x = ...; x`\n+   |                                                     ^^^^^^^              ^^^\n \n error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:37:55\n@@ -93,7 +118,10 @@ LL | fn f_local_ref() { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   }  //\n    |                                                     | borrowed value does not live long enough\n    |                                                     a temporary with access to the borrow is created here ...\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+   |\n+LL | fn f_local_ref() { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit();   }  // suggest `;`\n+   |                                                                   ^\n \n error[E0597]: `_t1` does not live long enough\n   --> $DIR/issue-54556-used-vs-unused-tails.rs:40:55\n@@ -106,7 +134,12 @@ LL | fn f() -> String { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()   }   //\n    |                                                     | borrowed value does not live long enough\n    |                                                     a temporary with access to the borrow is created here ...\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+   = note: the temporary is part of an expression at the end of a block;\n+           consider forcing this temporary to be dropped sooner, before the block's local variables are dropped\n+help: for example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block\n+   |\n+LL | fn f() -> String { let mut _t1 = D(Box::new(\"t1\")); let x = D(&_t1).end(); x   }   // `let x = ...; x`\n+   |                                                     ^^^^^^^              ^^^\n \n error: aborting due to 9 previous errors\n "}, {"sha": "b5cd29f99c6b49323bad4389772d4634816f8e1e", "filename": "src/test/ui/span/destructor-restrictions.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr?ref=d0ff2295e071a25568bb21f47287e7f76468591a", "patch": "@@ -11,7 +11,12 @@ LL |     };\n    |     |\n    |     `*a` dropped here while still borrowed\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+   = note: the temporary is part of an expression at the end of a block;\n+           consider forcing this temporary to be dropped sooner, before the block's local variables are dropped\n+help: for example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block\n+   |\n+LL |         let x = *a.borrow() + 1; x\n+   |         ^^^^^^^                ^^^\n \n error: aborting due to previous error\n "}, {"sha": "46702d364a8f398b4bf204e779f9bc75325a03cb", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0ff2295e071a25568bb21f47287e7f76468591a/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr?ref=d0ff2295e071a25568bb21f47287e7f76468591a", "patch": "@@ -12,7 +12,12 @@ LL | }\n    | `y` dropped here while still borrowed\n    | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::cell::Ref<'_, std::string::String>`\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+   = note: the temporary is part of an expression at the end of a block;\n+           consider forcing this temporary to be dropped sooner, before the block's local variables are dropped\n+help: for example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block\n+   |\n+LL |     let x = y.borrow().clone(); x\n+   |     ^^^^^^^                   ^^^\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:17:9\n@@ -27,7 +32,12 @@ LL |     };\n    |     |\n    |     `y` dropped here while still borrowed\n    |\n-   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+   = note: the temporary is part of an expression at the end of a block;\n+           consider forcing this temporary to be dropped sooner, before the block's local variables are dropped\n+help: for example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block\n+   |\n+LL |         let x = y.borrow().clone(); x\n+   |         ^^^^^^^                   ^^^\n \n error: aborting due to 2 previous errors\n "}]}