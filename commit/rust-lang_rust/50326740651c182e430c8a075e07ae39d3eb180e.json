{"sha": "50326740651c182e430c8a075e07ae39d3eb180e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMzI2NzQwNjUxYzE4MmU0MzBjOGEwNzVlMDdhZTM5ZDNlYjE4MGU=", "commit": {"author": {"name": "Jake Vossen", "email": "jake@vossen.dev", "date": "2020-09-30T16:54:27Z"}, "committer": {"name": "Jake Vossen", "email": "jake@vossen.dev", "date": "2020-09-30T16:54:27Z"}, "message": "fixed merge conflicts", "tree": {"sha": "6043e7f8ef8f64bc0009643796e767a8457ffd4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6043e7f8ef8f64bc0009643796e767a8457ffd4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50326740651c182e430c8a075e07ae39d3eb180e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50326740651c182e430c8a075e07ae39d3eb180e", "html_url": "https://github.com/rust-lang/rust/commit/50326740651c182e430c8a075e07ae39d3eb180e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50326740651c182e430c8a075e07ae39d3eb180e/comments", "author": {"login": "jakevossen5", "id": 16298666, "node_id": "MDQ6VXNlcjE2Mjk4NjY2", "avatar_url": "https://avatars.githubusercontent.com/u/16298666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevossen5", "html_url": "https://github.com/jakevossen5", "followers_url": "https://api.github.com/users/jakevossen5/followers", "following_url": "https://api.github.com/users/jakevossen5/following{/other_user}", "gists_url": "https://api.github.com/users/jakevossen5/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevossen5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevossen5/subscriptions", "organizations_url": "https://api.github.com/users/jakevossen5/orgs", "repos_url": "https://api.github.com/users/jakevossen5/repos", "events_url": "https://api.github.com/users/jakevossen5/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevossen5/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakevossen5", "id": 16298666, "node_id": "MDQ6VXNlcjE2Mjk4NjY2", "avatar_url": "https://avatars.githubusercontent.com/u/16298666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevossen5", "html_url": "https://github.com/jakevossen5", "followers_url": "https://api.github.com/users/jakevossen5/followers", "following_url": "https://api.github.com/users/jakevossen5/following{/other_user}", "gists_url": "https://api.github.com/users/jakevossen5/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevossen5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevossen5/subscriptions", "organizations_url": "https://api.github.com/users/jakevossen5/orgs", "repos_url": "https://api.github.com/users/jakevossen5/repos", "events_url": "https://api.github.com/users/jakevossen5/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevossen5/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f69a88b7d345e09e076ae65e4c8538c6f034b47c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f69a88b7d345e09e076ae65e4c8538c6f034b47c", "html_url": "https://github.com/rust-lang/rust/commit/f69a88b7d345e09e076ae65e4c8538c6f034b47c"}], "stats": {"total": 43, "additions": 0, "deletions": 43}, "files": [{"sha": "c4246fa1d958168275f2358d4e1c810f065c7604", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/50326740651c182e430c8a075e07ae39d3eb180e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50326740651c182e430c8a075e07ae39d3eb180e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=50326740651c182e430c8a075e07ae39d3eb180e", "patch": "@@ -646,13 +646,8 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Generator(did, substs, movability) => {\n                 p!(write(\"[\"));\n                 match movability {\n-<<<<<<< HEAD\n                     hir::Movability::Movable => {}\n                     hir::Movability::Static => p!(\"static \"),\n-=======\n-                    hir::Movability::Movable => p!(\"[generator\"),\n-                    hir::Movability::Static => p!(\"[static generator\"),\n->>>>>>> 4bc0ae233aa... updated p! macro to accept literals\n                 }\n \n                 if !self.tcx().sess.verbose() {\n@@ -691,7 +686,6 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(in_binder(&types));\n             }\n             ty::Closure(did, substs) => {\n-<<<<<<< HEAD\n                 p!(write(\"[\"));\n                 if !self.tcx().sess.verbose() {\n                     p!(write(\"closure\"));\n@@ -703,33 +697,6 @@ pub trait PrettyPrinter<'tcx>:\n                         } else {\n                             let span = self.tcx().hir().span(hir_id);\n                             p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n-=======\n-                p!(\"[closure\");\n-\n-                // FIXME(eddyb) should use `def_span`.\n-                if let Some(did) = did.as_local() {\n-                    let hir_id = self.tcx().hir().local_def_id_to_hir_id(did);\n-                    if self.tcx().sess.opts.debugging_opts.span_free_formats {\n-                        p!(\"@\", print_def_path(did.to_def_id(), substs));\n-                    } else {\n-                        let span = self.tcx().hir().span(hir_id);\n-                        p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n-                    }\n-\n-                    if substs.as_closure().is_valid() {\n-                        let upvar_tys = substs.as_closure().upvar_tys();\n-                        let mut sep = \" \";\n-                        for (&var_id, upvar_ty) in self\n-                            .tcx()\n-                            .upvars_mentioned(did)\n-                            .as_ref()\n-                            .iter()\n-                            .flat_map(|v| v.keys())\n-                            .zip(upvar_tys)\n-                        {\n-                            p!(write(\"{}{}:\", sep, self.tcx().hir().name(var_id)), print(upvar_ty));\n-                            sep = \", \";\n->>>>>>> 4bc0ae233aa... updated p! macro to accept literals\n                         }\n                     } else {\n                         p!(write(\"@{}\", self.tcx().def_path_str(did)));\n@@ -756,17 +723,7 @@ pub trait PrettyPrinter<'tcx>:\n                         }\n                     }\n                 }\n-<<<<<<< HEAD\n                 p!(\"]\");\n-=======\n-\n-                if self.tcx().sess.verbose() && substs.as_closure().is_valid() {\n-                    p!(\" closure_kind_ty=\", print(substs.as_closure().kind_ty()));\n-                    p!(\" closure_sig_as_fn_ptr_ty=\", print(substs.as_closure().sig_as_fn_ptr_ty()));\n-                }\n-\n-                p!(\"]\")\n->>>>>>> 4bc0ae233aa... updated p! macro to accept literals\n             }\n             ty::Array(ty, sz) => {\n                 p!(\"[\", print(ty), \"; \");"}]}