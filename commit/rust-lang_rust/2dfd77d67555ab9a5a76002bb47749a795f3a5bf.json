{"sha": "2dfd77d67555ab9a5a76002bb47749a795f3a5bf", "node_id": "C_kwDOAAsO6NoAKDJkZmQ3N2Q2NzU1NWFiOWE1YTc2MDAyYmI0Nzc0OWE3OTVmM2E1YmY", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-02-02T16:42:37Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-02-03T15:17:51Z"}, "message": "Fix ret > 1 bound if shadowed by const\n\nPrior to a change, it would only look at types in bounds. When it started looking for consts,\nshadowing type variables with a const would cause an ICE, so now defer looking at consts only if\nthere are no types present.", "tree": {"sha": "79ebd4003c143deb2e9e696b057ea95ffbc712a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79ebd4003c143deb2e9e696b057ea95ffbc712a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dfd77d67555ab9a5a76002bb47749a795f3a5bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dfd77d67555ab9a5a76002bb47749a795f3a5bf", "html_url": "https://github.com/rust-lang/rust/commit/2dfd77d67555ab9a5a76002bb47749a795f3a5bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dfd77d67555ab9a5a76002bb47749a795f3a5bf/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5f9c40e6a9ecc62432e71e886cef83a4c2c9b98", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f9c40e6a9ecc62432e71e886cef83a4c2c9b98", "html_url": "https://github.com/rust-lang/rust/commit/d5f9c40e6a9ecc62432e71e886cef83a4c2c9b98"}], "stats": {"total": 95, "additions": 63, "deletions": 32}, "files": [{"sha": "49f846562a3cc5cf8fdab2e1150bd3f5f21652f9", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2dfd77d67555ab9a5a76002bb47749a795f3a5bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dfd77d67555ab9a5a76002bb47749a795f3a5bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=2dfd77d67555ab9a5a76002bb47749a795f3a5bf", "patch": "@@ -160,12 +160,11 @@ impl<'tcx> AssocItems<'tcx> {\n         &self,\n         tcx: TyCtxt<'_>,\n         ident: Ident,\n+        // Sorted in order of what kinds to look at\n         kinds: &[AssocKind],\n         parent_def_id: DefId,\n     ) -> Option<&ty::AssocItem> {\n-        self.filter_by_name_unhygienic(ident.name)\n-            .filter(|item| kinds.contains(&item.kind))\n-            .find(|item| tcx.hygienic_eq(ident, item.ident(tcx), parent_def_id))\n+        kinds.iter().find_map(|kind| self.find_by_name_and_kind(tcx, ident, *kind, parent_def_id))\n     }\n \n     /// Returns the associated item with the given name in the given `Namespace`, if one exists."}, {"sha": "0ad2242f6677c7044fc8592bd1bb1c349c52dbf4", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2dfd77d67555ab9a5a76002bb47749a795f3a5bf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dfd77d67555ab9a5a76002bb47749a795f3a5bf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=2dfd77d67555ab9a5a76002bb47749a795f3a5bf", "patch": "@@ -887,15 +887,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .find_by_name_and_kind(self.tcx(), assoc_name, ty::AssocKind::Type, trait_def_id)\n             .is_some()\n     }\n-    fn trait_defines_associated_named(&self, trait_def_id: DefId, assoc_name: Ident) -> bool {\n+    fn trait_defines_associated_const_named(&self, trait_def_id: DefId, assoc_name: Ident) -> bool {\n         self.tcx()\n             .associated_items(trait_def_id)\n-            .find_by_name_and_kinds(\n-                self.tcx(),\n-                assoc_name,\n-                &[ty::AssocKind::Type, ty::AssocKind::Const],\n-                trait_def_id,\n-            )\n+            .find_by_name_and_kind(self.tcx(), assoc_name, ty::AssocKind::Const, trait_def_id)\n             .is_some()\n     }\n \n@@ -1145,13 +1140,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         // We have already adjusted the item name above, so compare with `ident.normalize_to_macros_2_0()` instead\n         // of calling `filter_by_name_and_kind`.\n-        let assoc_item = tcx\n-            .associated_items(candidate.def_id())\n-            .filter_by_name_unhygienic(assoc_ident.name)\n-            .find(|i| {\n-                (i.kind == ty::AssocKind::Type || i.kind == ty::AssocKind::Const)\n-                    && i.ident(tcx).normalize_to_macros_2_0() == assoc_ident\n-            })\n+        let find_item_of_kind = |kind| {\n+            tcx.associated_items(candidate.def_id())\n+                .filter_by_name_unhygienic(assoc_ident.name)\n+                .find(|i| i.kind == kind && i.ident(tcx).normalize_to_macros_2_0() == assoc_ident)\n+        };\n+        let assoc_item = find_item_of_kind(ty::AssocKind::Type)\n+            .or_else(|| find_item_of_kind(ty::AssocKind::Const))\n             .expect(\"missing associated type\");\n \n         if !assoc_item.vis.is_accessible_from(def_scope, tcx) {\n@@ -1657,11 +1652,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         I: Iterator<Item = ty::PolyTraitRef<'tcx>>,\n     {\n         let mut matching_candidates = all_candidates()\n-            .filter(|r| self.trait_defines_associated_named(r.def_id(), assoc_name));\n-\n-        let bound = match matching_candidates.next() {\n-            Some(bound) => bound,\n-            None => {\n+            .filter(|r| self.trait_defines_associated_type_named(r.def_id(), assoc_name));\n+        let mut const_candidates = all_candidates()\n+            .filter(|r| self.trait_defines_associated_const_named(r.def_id(), assoc_name));\n+\n+        let (bound, next_cand) = match (matching_candidates.next(), const_candidates.next()) {\n+            (Some(bound), _) => (bound, matching_candidates.next()),\n+            (None, Some(bound)) => (bound, const_candidates.next()),\n+            (None, None) => {\n                 self.complain_about_assoc_type_not_found(\n                     all_candidates,\n                     &ty_param_name(),\n@@ -1671,10 +1669,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 return Err(ErrorReported);\n             }\n         };\n-\n         debug!(\"one_bound_for_assoc_type: bound = {:?}\", bound);\n \n-        if let Some(bound2) = matching_candidates.next() {\n+        if let Some(bound2) = next_cand {\n             debug!(\"one_bound_for_assoc_type: bound2 = {:?}\", bound2);\n \n             let is_equality = is_equality();\n@@ -1759,6 +1756,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 return Err(ErrorReported);\n             }\n         }\n+\n         Ok(bound)\n     }\n \n@@ -1893,14 +1891,17 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         // We have already adjusted the item name above, so compare with `ident.normalize_to_macros_2_0()` instead\n         // of calling `filter_by_name_and_kind`.\n-        let item = tcx\n-            .associated_items(trait_did)\n-            .in_definition_order()\n-            .find(|i| {\n-                i.kind.namespace() == Namespace::TypeNS\n-                    && i.ident(tcx).normalize_to_macros_2_0() == assoc_ident\n-            })\n-            .expect(\"missing associated type\");\n+        let item = tcx.associated_items(trait_did).in_definition_order().find(|i| {\n+            i.kind.namespace() == Namespace::TypeNS\n+                && i.ident(tcx).normalize_to_macros_2_0() == assoc_ident\n+        });\n+        // Assume that if it's not matched, there must be a const defined with the same name\n+        // but it was used in a type position.\n+        let Some(item) = item else {\n+            let msg = format!(\"found associated const `{assoc_ident}` when type was expected\");\n+            tcx.sess.struct_span_err(span, &msg).emit();\n+            return Err(ErrorReported);\n+        };\n \n         let ty = self.projected_ty_from_poly_trait_ref(span, item.def_id, assoc_segment, bound);\n         let ty = self.normalize_ty(span, ty);"}, {"sha": "cfdb391d39d51ccea43d539ebfd5d883c54a3c85", "filename": "src/test/ui/associated-consts/shadowed-const.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2dfd77d67555ab9a5a76002bb47749a795f3a5bf/src%2Ftest%2Fui%2Fassociated-consts%2Fshadowed-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dfd77d67555ab9a5a76002bb47749a795f3a5bf/src%2Ftest%2Fui%2Fassociated-consts%2Fshadowed-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fshadowed-const.rs?ref=2dfd77d67555ab9a5a76002bb47749a795f3a5bf", "patch": "@@ -0,0 +1,23 @@\n+// Checking that none of these ICE, which was introduced in\n+// https://github.com/rust-lang/rust/issues/93553\n+trait Foo {\n+    type Bar;\n+}\n+\n+trait Baz: Foo {\n+    const Bar: Self::Bar;\n+}\n+\n+trait Baz2: Foo {\n+    const Bar: u32;\n+\n+    fn foo() -> Self::Bar;\n+}\n+\n+trait Baz3 {\n+  const BAR: usize;\n+  const QUX: Self::BAR;\n+  //~^ ERROR found associated const\n+}\n+\n+fn main() {}"}, {"sha": "fe21d2aec00bcafa34e81257b564050fcc088533", "filename": "src/test/ui/associated-consts/shadowed-const.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dfd77d67555ab9a5a76002bb47749a795f3a5bf/src%2Ftest%2Fui%2Fassociated-consts%2Fshadowed-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dfd77d67555ab9a5a76002bb47749a795f3a5bf/src%2Ftest%2Fui%2Fassociated-consts%2Fshadowed-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fshadowed-const.stderr?ref=2dfd77d67555ab9a5a76002bb47749a795f3a5bf", "patch": "@@ -0,0 +1,8 @@\n+error: found associated const `BAR` when type was expected\n+  --> $DIR/shadowed-const.rs:19:14\n+   |\n+LL |   const QUX: Self::BAR;\n+   |              ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}