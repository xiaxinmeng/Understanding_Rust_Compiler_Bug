{"sha": "c0e853f274c42665373b719a5bd7b3f95afe10c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZTg1M2YyNzRjNDI2NjUzNzNiNzE5YTViZDdiM2Y5NWFmZTEwYzI=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-08-25T12:31:18Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-30T09:00:21Z"}, "message": "remove lazy_normalization_consts", "tree": {"sha": "d5b4e4b153008f20bff4f75dc078d541b0d65436", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5b4e4b153008f20bff4f75dc078d541b0d65436"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0e853f274c42665373b719a5bd7b3f95afe10c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e853f274c42665373b719a5bd7b3f95afe10c2", "html_url": "https://github.com/rust-lang/rust/commit/c0e853f274c42665373b719a5bd7b3f95afe10c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0e853f274c42665373b719a5bd7b3f95afe10c2/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "html_url": "https://github.com/rust-lang/rust/commit/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc"}], "stats": {"total": 124, "additions": 10, "deletions": 114}, "files": [{"sha": "222b17615e2d4c676d25243d6354c5d8033241ed", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -545,9 +545,6 @@ declare_features! (\n     /// Allows capturing variables in scope using format_args!\n     (active, format_args_capture, \"1.46.0\", Some(67984), None),\n \n-    /// Lazily evaluate constants. This allows constants to depend on type parameters.\n-    (incomplete, lazy_normalization_consts, \"1.46.0\", Some(72219), None),\n-\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n "}, {"sha": "853415c4173b561d26ff7e1a7cb6e9ff7d663204", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -307,7 +307,7 @@ pub enum Res<Id = hir::HirId> {\n     /// We do however allow `Self` in repeat expression even if it is generic to not break code\n     /// which already works on stable while causing the `const_evaluatable_unchecked` future compat lint.\n     ///\n-    /// FIXME(lazy_normalization_consts): Remove this bodge once that feature is stable.\n+    /// FIXME(generic_const_exprs): Remove this bodge once that feature is stable.\n     SelfTy(\n         /// Optionally, the trait associated with this `Self` type.\n         Option<DefId>,"}, {"sha": "6a97a6c43c11e564ef12427fc7aa15225aafc1e4", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -678,7 +678,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n     fn const_equate(&mut self, _a: &'tcx Const<'tcx>, _b: &'tcx Const<'tcx>) {\n         span_bug!(\n             self.cause.span(self.infcx.tcx),\n-            \"lazy_normalization_consts: unreachable `const_equate`\"\n+            \"generic_const_exprs: unreachable `const_equate`\"\n         );\n     }\n "}, {"sha": "a9ee921399ab155883f159cd284d3c4caa27d4c9", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1421,7 +1421,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn lazy_normalization(self) -> bool {\n         let features = self.features();\n         // Note: We do not enable lazy normalization for `min_const_generics`.\n-        features.const_generics || features.lazy_normalization_consts\n+        features.const_generics || features.generic_const_exprs\n     }\n \n     #[inline]"}, {"sha": "3345c8a3fe9c056d45ef0992771bf9cf3ed17af2", "filename": "src/test/rustdoc/const-generics/lazy_normalization_consts/const-equate-pred.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Frustdoc%2Fconst-generics%2Flazy_normalization_consts%2Fconst-equate-pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Frustdoc%2Fconst-generics%2Flazy_normalization_consts%2Fconst-equate-pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Flazy_normalization_consts%2Fconst-equate-pred.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n-#![feature(lazy_normalization_consts)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // Checking if `Send` is implemented for `Hasher` requires us to evaluate a `ConstEquate` predicate,"}, {"sha": "df1c99e8671e8ad894d39cddbd447c457f3d12c2", "filename": "src/test/ui/const-generics/backcompat/trait-resolution-breakage.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fbackcompat%2Ftrait-resolution-breakage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fbackcompat%2Ftrait-resolution-breakage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbackcompat%2Ftrait-resolution-breakage.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "previous_filename": "src/test/ui/lazy_normalization_consts/trait-resolution-breakage.rs"}, {"sha": "3f90d22ae2d221f1d4cf1592d92717c0e391f0f6", "filename": "src/test/ui/const-generics/backcompat/unevaluated-consts.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fbackcompat%2Funevaluated-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fbackcompat%2Funevaluated-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbackcompat%2Funevaluated-consts.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "previous_filename": "src/test/ui/lazy_normalization_consts/unevaluated-consts.rs"}, {"sha": "46ae9403c03ceca08d12b6a89088576ed75abea4", "filename": "src/test/ui/lazy_normalization_consts/feature-gate-lazy_normalization_consts.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,10 +0,0 @@\n-pub const fn sof<T>() -> usize {\n-    10\n-}\n-\n-fn test<T>() {\n-    let _: [u8; sof::<T>()];\n-    //~^ ERROR generic parameters may not be used in const operations\n-}\n-\n-fn main() {}"}, {"sha": "fdbde21a41089fd34c6454628ab8e0ca6ee3c36c", "filename": "src/test/ui/lazy_normalization_consts/feature-gate-lazy_normalization_consts.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,11 +0,0 @@\n-error: generic parameters may not be used in const operations\n-  --> $DIR/feature-gate-lazy_normalization_consts.rs:6:23\n-   |\n-LL |     let _: [u8; sof::<T>()];\n-   |                       ^ cannot perform const operation using `T`\n-   |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n-error: aborting due to previous error\n-"}, {"sha": "1fd0c45841b0d212dd195272e79887570c1f86df", "filename": "src/test/ui/lazy_normalization_consts/issue-47814.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-47814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-47814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-47814.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,16 +0,0 @@\n-// check-pass\n-#![feature(lazy_normalization_consts)]\n-#![allow(incomplete_features)]\n-pub struct ArpIPv4<'a> {\n-    _s: &'a u8\n-}\n-\n-impl<'a> ArpIPv4<'a> {\n-    const LENGTH: usize = 20;\n-\n-    pub fn to_buffer() -> [u8; Self::LENGTH] {\n-        unimplemented!()\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "4607f3e99b51fd122aacfcb4390435215c10f991", "filename": "src/test/ui/lazy_normalization_consts/issue-57739.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-57739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-57739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-57739.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,17 +0,0 @@\n-#![feature(lazy_normalization_consts)]\n-//~^ WARN the feature `lazy_normalization_consts` is incomplete\n-trait ArraySizeTrait {\n-    const SIZE: usize = 0;\n-}\n-\n-impl<T: ?Sized> ArraySizeTrait for T {\n-    const SIZE: usize = 1;\n-}\n-\n-struct SomeArray<T: ArraySizeTrait> {\n-    array: [u8; T::SIZE],\n-    //~^ ERROR constant expression depends on a generic parameter\n-    phantom: std::marker::PhantomData<T>,\n-}\n-\n-fn main() {}"}, {"sha": "ce0495dd8b0cbaa3a0b137715e6d7f03122530f2", "filename": "src/test/ui/lazy_normalization_consts/issue-57739.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-57739.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-57739.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-57739.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,19 +0,0 @@\n-warning: the feature `lazy_normalization_consts` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-57739.rs:1:12\n-   |\n-LL | #![feature(lazy_normalization_consts)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #72219 <https://github.com/rust-lang/rust/issues/72219> for more information\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-57739.rs:12:12\n-   |\n-LL |     array: [u8; T::SIZE],\n-   |            ^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "e10040652c78d36dbce7febd3c60b08c3f11d699", "filename": "src/test/ui/lazy_normalization_consts/issue-73980.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,16 +0,0 @@\n-// check-pass\n-#![feature(lazy_normalization_consts)]\n-#![allow(incomplete_features)]\n-\n-pub struct X<P, Q>(P, Q);\n-pub struct L<T: ?Sized>(T);\n-\n-impl<T: ?Sized> L<T> {\n-    const S: usize = 1;\n-}\n-\n-impl<T> X<T, [u8; L::<T>::S]> {}\n-//~^ WARN cannot use constants which depend on generic parameters\n-//~| WARN this was previously accepted by the compiler but is being phased out\n-\n-fn main() {}"}, {"sha": "5ed1ca362f411c69cf1a02321fcdc7082f217a96", "filename": "src/test/ui/lazy_normalization_consts/issue-73980.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,12 +0,0 @@\n-warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/issue-73980.rs:12:9\n-   |\n-LL | impl<T> X<T, [u8; L::<T>::S]> {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n-\n-warning: 1 warning emitted\n-"}, {"sha": "d2d0f33681244a896768027c998c5939b517d64d", "filename": "src/test/ui/polymorphization/promoted-function-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function-2.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,8 +1,8 @@\n // build-fail\n // compile-flags:-Zpolymorphize=on\n #![crate_type = \"lib\"]\n-#![feature(lazy_normalization_consts, rustc_attrs)]\n-//~^ WARN the feature `lazy_normalization_consts` is incomplete\n+#![feature(generic_const_exprs, rustc_attrs)]\n+//~^ WARN the feature `generic_const_exprs` is incomplete\n \n #[rustc_polymorphize_error]\n fn test<T>() {"}, {"sha": "4d7bab6aaa0c6407a1458d3f631cd798da37167e", "filename": "src/test/ui/polymorphization/promoted-function-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function-2.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,11 +1,11 @@\n-warning: the feature `lazy_normalization_consts` is incomplete and may not be safe to use and/or cause compiler crashes\n+warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/promoted-function-2.rs:4:12\n    |\n-LL | #![feature(lazy_normalization_consts, rustc_attrs)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![feature(generic_const_exprs, rustc_attrs)]\n+   |            ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #72219 <https://github.com/rust-lang/rust/issues/72219> for more information\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n \n error: item has unused generic parameters\n   --> $DIR/promoted-function-2.rs:8:4"}]}