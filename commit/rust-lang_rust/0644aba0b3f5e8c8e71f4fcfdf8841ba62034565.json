{"sha": "0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NDRhYmEwYjNmNWU4YzhlNzFmNGZjZmRmODg0MWJhNjIwMzQ1NjU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-12T07:51:31Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-14T07:40:32Z"}, "message": "Remove the type parameter from `syntax::visit::Visitor`", "tree": {"sha": "d72122a139b9547cd08fe0cd3c13651db2727437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d72122a139b9547cd08fe0cd3c13651db2727437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "html_url": "https://github.com/rust-lang/rust/commit/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "683e480ffe0ea355d038b4e9c0efeb9c1475a2d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/683e480ffe0ea355d038b4e9c0efeb9c1475a2d3", "html_url": "https://github.com/rust-lang/rust/commit/683e480ffe0ea355d038b4e9c0efeb9c1475a2d3"}], "stats": {"total": 357, "additions": 169, "deletions": 188}, "files": [{"sha": "a1c04dfcab5e66be6616e59a307ff81eaa5fbff4", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -95,7 +95,7 @@ impl<'a> CheckAttrVisitor<'a> {\n     }\n }\n \n-impl<'a, 'v> Visitor<'v> for CheckAttrVisitor<'a> {\n+impl<'a> Visitor for CheckAttrVisitor<'a> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         let target = Target::from_item(item);\n         for attr in &item.attrs {"}, {"sha": "8841f4ad39ada77d7f74d62d5a883cac2ec4b3a0", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -138,8 +138,8 @@ impl<'a> LoweringContext<'a> {\n             lctx: &'lcx mut LoweringContext<'interner>,\n         }\n \n-        impl<'lcx, 'interner> Visitor<'lcx> for ItemLowerer<'lcx, 'interner> {\n-            fn visit_item(&mut self, item: &'lcx Item) {\n+        impl<'lcx, 'interner> Visitor for ItemLowerer<'lcx, 'interner> {\n+            fn visit_item(&mut self, item: &Item) {\n                 self.items.insert(item.id, self.lctx.lower_item(item));\n                 visit::walk_item(self, item);\n             }"}, {"sha": "5afe8cbaff7e87c87897d5097c4a3eb4e1283fd3", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -98,7 +98,7 @@ impl<'ast> DefCollector<'ast> {\n         self.parent_def = parent;\n     }\n \n-    fn visit_ast_const_integer(&mut self, expr: &'ast Expr) {\n+    fn visit_ast_const_integer(&mut self, expr: &Expr) {\n         // Find the node which will be used after lowering.\n         if let ExprKind::Paren(ref inner) = expr.node {\n             return self.visit_ast_const_integer(inner);\n@@ -124,8 +124,8 @@ impl<'ast> DefCollector<'ast> {\n     }\n }\n \n-impl<'ast> visit::Visitor<'ast> for DefCollector<'ast> {\n-    fn visit_item(&mut self, i: &'ast Item) {\n+impl<'ast> visit::Visitor for DefCollector<'ast> {\n+    fn visit_item(&mut self, i: &Item) {\n         debug!(\"visit_item: {:?}\", i);\n \n         // Pick the def data. This need not be unique, but the more\n@@ -183,23 +183,23 @@ impl<'ast> visit::Visitor<'ast> for DefCollector<'ast> {\n         });\n     }\n \n-    fn visit_foreign_item(&mut self, foreign_item: &'ast ForeignItem) {\n+    fn visit_foreign_item(&mut self, foreign_item: &ForeignItem) {\n         let def = self.create_def(foreign_item.id, DefPathData::ValueNs(foreign_item.ident.name));\n \n         self.with_parent(def, |this| {\n             visit::walk_foreign_item(this, foreign_item);\n         });\n     }\n \n-    fn visit_generics(&mut self, generics: &'ast Generics) {\n+    fn visit_generics(&mut self, generics: &Generics) {\n         for ty_param in generics.ty_params.iter() {\n             self.create_def(ty_param.id, DefPathData::TypeParam(ty_param.ident.name));\n         }\n \n         visit::walk_generics(self, generics);\n     }\n \n-    fn visit_trait_item(&mut self, ti: &'ast TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &TraitItem) {\n         let def_data = match ti.node {\n             TraitItemKind::Method(..) | TraitItemKind::Const(..) =>\n                 DefPathData::ValueNs(ti.ident.name),\n@@ -216,7 +216,7 @@ impl<'ast> visit::Visitor<'ast> for DefCollector<'ast> {\n         });\n     }\n \n-    fn visit_impl_item(&mut self, ii: &'ast ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &ImplItem) {\n         let def_data = match ii.node {\n             ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n                 DefPathData::ValueNs(ii.ident.name),\n@@ -234,7 +234,7 @@ impl<'ast> visit::Visitor<'ast> for DefCollector<'ast> {\n         });\n     }\n \n-    fn visit_pat(&mut self, pat: &'ast Pat) {\n+    fn visit_pat(&mut self, pat: &Pat) {\n         let parent_def = self.parent_def;\n \n         if let PatKind::Ident(_, id, _) = pat.node {\n@@ -246,7 +246,7 @@ impl<'ast> visit::Visitor<'ast> for DefCollector<'ast> {\n         self.parent_def = parent_def;\n     }\n \n-    fn visit_expr(&mut self, expr: &'ast Expr) {\n+    fn visit_expr(&mut self, expr: &Expr) {\n         let parent_def = self.parent_def;\n \n         if let ExprKind::Repeat(_, ref count) = expr.node {\n@@ -262,18 +262,18 @@ impl<'ast> visit::Visitor<'ast> for DefCollector<'ast> {\n         self.parent_def = parent_def;\n     }\n \n-    fn visit_ty(&mut self, ty: &'ast Ty) {\n+    fn visit_ty(&mut self, ty: &Ty) {\n         if let TyKind::FixedLengthVec(_, ref length) = ty.node {\n             self.visit_ast_const_integer(length);\n         }\n         visit::walk_ty(self, ty);\n     }\n \n-    fn visit_lifetime_def(&mut self, def: &'ast LifetimeDef) {\n+    fn visit_lifetime_def(&mut self, def: &LifetimeDef) {\n         self.create_def(def.lifetime.id, DefPathData::LifetimeDef(def.lifetime.name));\n     }\n \n-    fn visit_macro_def(&mut self, macro_def: &'ast MacroDef) {\n+    fn visit_macro_def(&mut self, macro_def: &MacroDef) {\n         self.create_def(macro_def.id, DefPathData::MacroDef(macro_def.ident.name));\n     }\n }"}, {"sha": "9ebf4dfa0178ca61ffcd1afc5f90f5a070831a5e", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -905,7 +905,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n+impl<'a> ast_visit::Visitor for EarlyContext<'a> {\n     fn visit_item(&mut self, it: &ast::Item) {\n         self.with_lint_attrs(&it.attrs, |cx| {\n             run_lints!(cx, check_item, early_passes, it);\n@@ -939,8 +939,8 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n         ast_visit::walk_stmt(self, s);\n     }\n \n-    fn visit_fn(&mut self, fk: ast_visit::FnKind<'v>, decl: &'v ast::FnDecl,\n-                body: &'v ast::Block, span: Span, id: ast::NodeId) {\n+    fn visit_fn(&mut self, fk: ast_visit::FnKind, decl: &ast::FnDecl,\n+                body: &ast::Block, span: Span, id: ast::NodeId) {\n         run_lints!(self, check_fn, early_passes, fk, decl, body, span, id);\n         ast_visit::walk_fn(self, fk, decl, body, span);\n         run_lints!(self, check_fn_post, early_passes, fk, decl, body, span, id);"}, {"sha": "31024ee8eca09ed686dc82e361322548caf533a8", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -58,8 +58,8 @@ pub struct CrateReader<'a> {\n     local_crate_name: String,\n }\n \n-impl<'a, 'ast> visit::Visitor<'ast> for LocalCrateReader<'a> {\n-    fn visit_item(&mut self, a: &'ast ast::Item) {\n+impl<'a> visit::Visitor for LocalCrateReader<'a> {\n+    fn visit_item(&mut self, a: &ast::Item) {\n         self.process_item(a);\n         visit::walk_item(self, a);\n     }"}, {"sha": "4dd54beba389322b35ec0512c8cca309fc645272", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -57,7 +57,7 @@ impl<'a> AstValidator<'a> {\n     }\n }\n \n-impl<'a, 'v> Visitor<'v> for AstValidator<'a> {\n+impl<'a> Visitor for AstValidator<'a> {\n     fn visit_lifetime(&mut self, lt: &Lifetime) {\n         if lt.name.as_str() == \"'_\" {\n             self.session.add_lint("}, {"sha": "314513a974ecdb826b728523403a5056c635a062", "filename": "src/librustc_passes/no_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_passes%2Fno_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_passes%2Fno_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fno_asm.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -29,7 +29,7 @@ struct CheckNoAsm<'a> {\n     sess: &'a Session,\n }\n \n-impl<'a, 'v> Visitor<'v> for CheckNoAsm<'a> {\n+impl<'a> Visitor for CheckNoAsm<'a> {\n     fn visit_expr(&mut self, e: &ast::Expr) {\n         match e.node {\n             ast::ExprKind::InlineAsm(_) => span_err!(self.sess, e.span, E0472,"}, {"sha": "88123f66c1a718869d8a70402775dc31c1342bdc", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -503,7 +503,7 @@ struct BuildReducedGraphVisitor<'a, 'b: 'a> {\n     parent: Module<'b>,\n }\n \n-impl<'a, 'b, 'v> Visitor<'v> for BuildReducedGraphVisitor<'a, 'b> {\n+impl<'a, 'b> Visitor for BuildReducedGraphVisitor<'a, 'b> {\n     fn visit_item(&mut self, item: &Item) {\n         let old_parent = self.parent;\n         self.resolver.build_reduced_graph_for_item(item, &mut self.parent);"}, {"sha": "7fa363c92bee0b93462b147a8d7fecec47663dc0", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b, 'v> Visitor<'v> for UnusedImportCheckVisitor<'a, 'b> {\n+impl<'a, 'b> Visitor for UnusedImportCheckVisitor<'a, 'b> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         visit::walk_item(self, item);\n         // Ignore is_public import statements because there's no way to be sure"}, {"sha": "554cf1b6c858eca36573cb390d4382b8bed3600f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -500,7 +500,7 @@ pub enum Namespace {\n     ValueNS,\n }\n \n-impl<'a, 'v> Visitor<'v> for Resolver<'a> {\n+impl<'a> Visitor for Resolver<'a> {\n     fn visit_item(&mut self, item: &Item) {\n         self.resolve_item(item);\n     }\n@@ -562,9 +562,9 @@ impl<'a, 'v> Visitor<'v> for Resolver<'a> {\n         });\n     }\n     fn visit_fn(&mut self,\n-                function_kind: FnKind<'v>,\n-                declaration: &'v FnDecl,\n-                block: &'v Block,\n+                function_kind: FnKind,\n+                declaration: &FnDecl,\n+                block: &Block,\n                 _: Span,\n                 node_id: NodeId) {\n         let rib_kind = match function_kind {"}, {"sha": "044e611ca34ae007d8eebf49a64289153a02bf80", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -1013,7 +1013,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n     }\n }\n \n-impl<'v, 'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'v> for DumpVisitor<'l, 'tcx, 'll, D> {\n+impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         use syntax::ast::ItemKind::*;\n         self.process_macro_use(item.span, item.id);"}, {"sha": "203225035e0a0b9141207d700de66467ec8b9fe6", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -686,7 +686,7 @@ impl PathCollector {\n     }\n }\n \n-impl<'v> Visitor<'v> for PathCollector {\n+impl Visitor for PathCollector {\n     fn visit_pat(&mut self, p: &ast::Pat) {\n         match p.node {\n             PatKind::Struct(ref path, _, _) => {"}, {"sha": "ff2683468e0936fc844d6fa5dab1ec3d452a9ea4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -573,7 +573,7 @@ struct PatIdentFinder {\n     ident_accumulator: Vec<ast::Ident>\n }\n \n-impl<'v> Visitor<'v> for PatIdentFinder {\n+impl Visitor for PatIdentFinder {\n     fn visit_pat(&mut self, pattern: &ast::Pat) {\n         match *pattern {\n             ast::Pat { id: _, node: PatKind::Ident(_, ref path1, ref inner), span: _ } => {\n@@ -1226,7 +1226,7 @@ mod tests {\n         path_accumulator: Vec<ast::Path> ,\n     }\n \n-    impl<'v> Visitor<'v> for PathExprFinderContext {\n+    impl Visitor for PathExprFinderContext {\n         fn visit_expr(&mut self, expr: &ast::Expr) {\n             if let ast::ExprKind::Path(None, ref p) = expr.node {\n                 self.path_accumulator.push(p.clone());\n@@ -1248,7 +1248,7 @@ mod tests {\n         ident_accumulator: Vec<ast::Ident>\n     }\n \n-    impl<'v> Visitor<'v> for IdentFinder {\n+    impl Visitor for IdentFinder {\n         fn visit_ident(&mut self, _: codemap::Span, id: ast::Ident){\n             self.ident_accumulator.push(id);\n         }"}, {"sha": "2ac394021df403f86866319360a9efa580e13527", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -849,7 +849,7 @@ macro_rules! gate_feature_post {\n     }}\n }\n \n-impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n+impl<'a> Visitor for PostExpansionVisitor<'a> {\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n         if !self.context.cm.span_allows_unstable(attr.span) {\n             self.context.check_attribute(attr, false);\n@@ -1045,9 +1045,9 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_fn(&mut self,\n-                fn_kind: FnKind<'v>,\n-                fn_decl: &'v ast::FnDecl,\n-                block: &'v ast::Block,\n+                fn_kind: FnKind,\n+                fn_decl: &ast::FnDecl,\n+                block: &ast::Block,\n                 span: Span,\n                 _node_id: NodeId) {\n         // check for const fn declarations\n@@ -1086,7 +1086,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n         visit::walk_fn(self, fn_kind, fn_decl, block, span);\n     }\n \n-    fn visit_trait_item(&mut self, ti: &'v ast::TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &ast::TraitItem) {\n         match ti.node {\n             ast::TraitItemKind::Const(..) => {\n                 gate_feature_post!(&self, associated_consts,\n@@ -1107,7 +1107,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n         visit::walk_trait_item(self, ti);\n     }\n \n-    fn visit_impl_item(&mut self, ii: &'v ast::ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &ast::ImplItem) {\n         if ii.defaultness == ast::Defaultness::Default {\n             gate_feature_post!(&self, specialization,\n                               ii.span,\n@@ -1130,7 +1130,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n         visit::walk_impl_item(self, ii);\n     }\n \n-    fn visit_vis(&mut self, vis: &'v ast::Visibility) {\n+    fn visit_vis(&mut self, vis: &ast::Visibility) {\n         let span = match *vis {\n             ast::Visibility::Crate(span) => span,\n             ast::Visibility::Restricted { ref path, .. } => path.span,"}, {"sha": "0d8a1599c6bbccfeda489c2a54d549342ae684ef", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -991,8 +991,8 @@ mod tests {\n         struct PatIdentVisitor {\n             spans: Vec<Span>\n         }\n-        impl<'v> ::visit::Visitor<'v> for PatIdentVisitor {\n-            fn visit_pat(&mut self, p: &'v ast::Pat) {\n+        impl ::visit::Visitor for PatIdentVisitor {\n+            fn visit_pat(&mut self, p: &ast::Pat) {\n                 match p.node {\n                     PatKind::Ident(_ , ref spannedident, _) => {\n                         self.spans.push(spannedident.span.clone());"}, {"sha": "928ffb202d0b331594608d40be1c3cc00ed4c22d", "filename": "src/libsyntax/show_span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibsyntax%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibsyntax%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fshow_span.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -44,7 +44,7 @@ struct ShowSpanVisitor<'a> {\n     mode: Mode,\n }\n \n-impl<'a, 'v> Visitor<'v> for ShowSpanVisitor<'a> {\n+impl<'a> Visitor for ShowSpanVisitor<'a> {\n     fn visit_expr(&mut self, e: &ast::Expr) {\n         if let Mode::Expression = self.mode {\n             self.span_diagnostic.span_warn(e.span, \"expression\");"}, {"sha": "5d6f0323d8cf821f83b871c2650bd17914e27b4c", "filename": "src/libsyntax/util/node_count.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibsyntax%2Futil%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibsyntax%2Futil%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fnode_count.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -26,133 +26,133 @@ impl NodeCounter {\n     }\n }\n \n-impl<'v> Visitor<'v> for NodeCounter {\n+impl Visitor for NodeCounter {\n     fn visit_ident(&mut self, span: Span, ident: Ident) {\n         self.count += 1;\n         walk_ident(self, span, ident);\n     }\n-    fn visit_mod(&mut self, m: &'v Mod, _s: Span, _n: NodeId) {\n+    fn visit_mod(&mut self, m: &Mod, _s: Span, _n: NodeId) {\n         self.count += 1;\n         walk_mod(self, m)\n     }\n-    fn visit_foreign_item(&mut self, i: &'v ForeignItem) {\n+    fn visit_foreign_item(&mut self, i: &ForeignItem) {\n         self.count += 1;\n         walk_foreign_item(self, i)\n     }\n-    fn visit_item(&mut self, i: &'v Item) {\n+    fn visit_item(&mut self, i: &Item) {\n         self.count += 1;\n         walk_item(self, i)\n     }\n-    fn visit_local(&mut self, l: &'v Local) {\n+    fn visit_local(&mut self, l: &Local) {\n         self.count += 1;\n         walk_local(self, l)\n     }\n-    fn visit_block(&mut self, b: &'v Block) {\n+    fn visit_block(&mut self, b: &Block) {\n         self.count += 1;\n         walk_block(self, b)\n     }\n-    fn visit_stmt(&mut self, s: &'v Stmt) {\n+    fn visit_stmt(&mut self, s: &Stmt) {\n         self.count += 1;\n         walk_stmt(self, s)\n     }\n-    fn visit_arm(&mut self, a: &'v Arm) {\n+    fn visit_arm(&mut self, a: &Arm) {\n         self.count += 1;\n         walk_arm(self, a)\n     }\n-    fn visit_pat(&mut self, p: &'v Pat) {\n+    fn visit_pat(&mut self, p: &Pat) {\n         self.count += 1;\n         walk_pat(self, p)\n     }\n-    fn visit_decl(&mut self, d: &'v Decl) {\n+    fn visit_decl(&mut self, d: &Decl) {\n         self.count += 1;\n         walk_decl(self, d)\n     }\n-    fn visit_expr(&mut self, ex: &'v Expr) {\n+    fn visit_expr(&mut self, ex: &Expr) {\n         self.count += 1;\n         walk_expr(self, ex)\n     }\n-    fn visit_ty(&mut self, t: &'v Ty) {\n+    fn visit_ty(&mut self, t: &Ty) {\n         self.count += 1;\n         walk_ty(self, t)\n     }\n-    fn visit_generics(&mut self, g: &'v Generics) {\n+    fn visit_generics(&mut self, g: &Generics) {\n         self.count += 1;\n         walk_generics(self, g)\n     }\n-    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: &'v Block, s: Span, _: NodeId) {\n+    fn visit_fn(&mut self, fk: FnKind, fd: &FnDecl, b: &Block, s: Span, _: NodeId) {\n         self.count += 1;\n         walk_fn(self, fk, fd, b, s)\n     }\n-    fn visit_trait_item(&mut self, ti: &'v TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &TraitItem) {\n         self.count += 1;\n         walk_trait_item(self, ti)\n     }\n-    fn visit_impl_item(&mut self, ii: &'v ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &ImplItem) {\n         self.count += 1;\n         walk_impl_item(self, ii)\n     }\n-    fn visit_trait_ref(&mut self, t: &'v TraitRef) {\n+    fn visit_trait_ref(&mut self, t: &TraitRef) {\n         self.count += 1;\n         walk_trait_ref(self, t)\n     }\n-    fn visit_ty_param_bound(&mut self, bounds: &'v TyParamBound) {\n+    fn visit_ty_param_bound(&mut self, bounds: &TyParamBound) {\n         self.count += 1;\n         walk_ty_param_bound(self, bounds)\n     }\n-    fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: &'v TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, t: &PolyTraitRef, m: &TraitBoundModifier) {\n         self.count += 1;\n         walk_poly_trait_ref(self, t, m)\n     }\n-    fn visit_variant_data(&mut self, s: &'v VariantData, _: Ident,\n-                        _: &'v Generics, _: NodeId, _: Span) {\n+    fn visit_variant_data(&mut self, s: &VariantData, _: Ident,\n+                          _: &Generics, _: NodeId, _: Span) {\n         self.count += 1;\n         walk_struct_def(self, s)\n     }\n-    fn visit_struct_field(&mut self, s: &'v StructField) {\n+    fn visit_struct_field(&mut self, s: &StructField) {\n         self.count += 1;\n         walk_struct_field(self, s)\n     }\n-    fn visit_enum_def(&mut self, enum_definition: &'v EnumDef,\n-                      generics: &'v Generics, item_id: NodeId, _: Span) {\n+    fn visit_enum_def(&mut self, enum_definition: &EnumDef,\n+                      generics: &Generics, item_id: NodeId, _: Span) {\n         self.count += 1;\n         walk_enum_def(self, enum_definition, generics, item_id)\n     }\n-    fn visit_variant(&mut self, v: &'v Variant, g: &'v Generics, item_id: NodeId) {\n+    fn visit_variant(&mut self, v: &Variant, g: &Generics, item_id: NodeId) {\n         self.count += 1;\n         walk_variant(self, v, g, item_id)\n     }\n-    fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n+    fn visit_lifetime(&mut self, lifetime: &Lifetime) {\n         self.count += 1;\n         walk_lifetime(self, lifetime)\n     }\n-    fn visit_lifetime_def(&mut self, lifetime: &'v LifetimeDef) {\n+    fn visit_lifetime_def(&mut self, lifetime: &LifetimeDef) {\n         self.count += 1;\n         walk_lifetime_def(self, lifetime)\n     }\n-    fn visit_mac(&mut self, _mac: &'v Mac) {\n+    fn visit_mac(&mut self, _mac: &Mac) {\n         self.count += 1;\n         walk_mac(self, _mac)\n     }\n-    fn visit_path(&mut self, path: &'v Path, _id: NodeId) {\n+    fn visit_path(&mut self, path: &Path, _id: NodeId) {\n         self.count += 1;\n         walk_path(self, path)\n     }\n-    fn visit_path_list_item(&mut self, prefix: &'v Path, item: &'v PathListItem) {\n+    fn visit_path_list_item(&mut self, prefix: &Path, item: &PathListItem) {\n         self.count += 1;\n         walk_path_list_item(self, prefix, item)\n     }\n-    fn visit_path_parameters(&mut self, path_span: Span, path_parameters: &'v PathParameters) {\n+    fn visit_path_parameters(&mut self, path_span: Span, path_parameters: &PathParameters) {\n         self.count += 1;\n         walk_path_parameters(self, path_span, path_parameters)\n     }\n-    fn visit_assoc_type_binding(&mut self, type_binding: &'v TypeBinding) {\n+    fn visit_assoc_type_binding(&mut self, type_binding: &TypeBinding) {\n         self.count += 1;\n         walk_assoc_type_binding(self, type_binding)\n     }\n-    fn visit_attribute(&mut self, _attr: &'v Attribute) {\n+    fn visit_attribute(&mut self, _attr: &Attribute) {\n         self.count += 1;\n     }\n-    fn visit_macro_def(&mut self, macro_def: &'v MacroDef) {\n+    fn visit_macro_def(&mut self, macro_def: &MacroDef) {\n         self.count += 1;\n         walk_macro_def(self, macro_def)\n     }"}, {"sha": "0b48c9f7032badd41c8dcd1e9d325eedb6a02681", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 90, "deletions": 109, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -49,84 +49,84 @@ pub enum FnKind<'a> {\n /// explicitly, you need to override each method.  (And you also need\n /// to monitor future changes to `Visitor` in case a new method with a\n /// new default implementation gets introduced.)\n-pub trait Visitor<'v> : Sized {\n+pub trait Visitor: Sized {\n     fn visit_name(&mut self, _span: Span, _name: Name) {\n         // Nothing to do.\n     }\n     fn visit_ident(&mut self, span: Span, ident: Ident) {\n         walk_ident(self, span, ident);\n     }\n-    fn visit_mod(&mut self, m: &'v Mod, _s: Span, _n: NodeId) { walk_mod(self, m) }\n-    fn visit_foreign_item(&mut self, i: &'v ForeignItem) { walk_foreign_item(self, i) }\n-    fn visit_item(&mut self, i: &'v Item) { walk_item(self, i) }\n-    fn visit_local(&mut self, l: &'v Local) { walk_local(self, l) }\n-    fn visit_block(&mut self, b: &'v Block) { walk_block(self, b) }\n-    fn visit_stmt(&mut self, s: &'v Stmt) { walk_stmt(self, s) }\n-    fn visit_arm(&mut self, a: &'v Arm) { walk_arm(self, a) }\n-    fn visit_pat(&mut self, p: &'v Pat) { walk_pat(self, p) }\n-    fn visit_decl(&mut self, d: &'v Decl) { walk_decl(self, d) }\n-    fn visit_expr(&mut self, ex: &'v Expr) { walk_expr(self, ex) }\n-    fn visit_expr_post(&mut self, _ex: &'v Expr) { }\n-    fn visit_ty(&mut self, t: &'v Ty) { walk_ty(self, t) }\n-    fn visit_generics(&mut self, g: &'v Generics) { walk_generics(self, g) }\n-    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: &'v Block, s: Span, _: NodeId) {\n+    fn visit_mod(&mut self, m: &Mod, _s: Span, _n: NodeId) { walk_mod(self, m) }\n+    fn visit_foreign_item(&mut self, i: &ForeignItem) { walk_foreign_item(self, i) }\n+    fn visit_item(&mut self, i: &Item) { walk_item(self, i) }\n+    fn visit_local(&mut self, l: &Local) { walk_local(self, l) }\n+    fn visit_block(&mut self, b: &Block) { walk_block(self, b) }\n+    fn visit_stmt(&mut self, s: &Stmt) { walk_stmt(self, s) }\n+    fn visit_arm(&mut self, a: &Arm) { walk_arm(self, a) }\n+    fn visit_pat(&mut self, p: &Pat) { walk_pat(self, p) }\n+    fn visit_decl(&mut self, d: &Decl) { walk_decl(self, d) }\n+    fn visit_expr(&mut self, ex: &Expr) { walk_expr(self, ex) }\n+    fn visit_expr_post(&mut self, _ex: &Expr) { }\n+    fn visit_ty(&mut self, t: &Ty) { walk_ty(self, t) }\n+    fn visit_generics(&mut self, g: &Generics) { walk_generics(self, g) }\n+    fn visit_fn(&mut self, fk: FnKind, fd: &FnDecl, b: &Block, s: Span, _: NodeId) {\n         walk_fn(self, fk, fd, b, s)\n     }\n-    fn visit_trait_item(&mut self, ti: &'v TraitItem) { walk_trait_item(self, ti) }\n-    fn visit_impl_item(&mut self, ii: &'v ImplItem) { walk_impl_item(self, ii) }\n-    fn visit_trait_ref(&mut self, t: &'v TraitRef) { walk_trait_ref(self, t) }\n-    fn visit_ty_param_bound(&mut self, bounds: &'v TyParamBound) {\n+    fn visit_trait_item(&mut self, ti: &TraitItem) { walk_trait_item(self, ti) }\n+    fn visit_impl_item(&mut self, ii: &ImplItem) { walk_impl_item(self, ii) }\n+    fn visit_trait_ref(&mut self, t: &TraitRef) { walk_trait_ref(self, t) }\n+    fn visit_ty_param_bound(&mut self, bounds: &TyParamBound) {\n         walk_ty_param_bound(self, bounds)\n     }\n-    fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: &'v TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, t: &PolyTraitRef, m: &TraitBoundModifier) {\n         walk_poly_trait_ref(self, t, m)\n     }\n-    fn visit_variant_data(&mut self, s: &'v VariantData, _: Ident,\n-                        _: &'v Generics, _: NodeId, _: Span) {\n+    fn visit_variant_data(&mut self, s: &VariantData, _: Ident,\n+                          _: &Generics, _: NodeId, _: Span) {\n         walk_struct_def(self, s)\n     }\n-    fn visit_struct_field(&mut self, s: &'v StructField) { walk_struct_field(self, s) }\n-    fn visit_enum_def(&mut self, enum_definition: &'v EnumDef,\n-                      generics: &'v Generics, item_id: NodeId, _: Span) {\n+    fn visit_struct_field(&mut self, s: &StructField) { walk_struct_field(self, s) }\n+    fn visit_enum_def(&mut self, enum_definition: &EnumDef,\n+                      generics: &Generics, item_id: NodeId, _: Span) {\n         walk_enum_def(self, enum_definition, generics, item_id)\n     }\n-    fn visit_variant(&mut self, v: &'v Variant, g: &'v Generics, item_id: NodeId) {\n+    fn visit_variant(&mut self, v: &Variant, g: &Generics, item_id: NodeId) {\n         walk_variant(self, v, g, item_id)\n     }\n-    fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n+    fn visit_lifetime(&mut self, lifetime: &Lifetime) {\n         walk_lifetime(self, lifetime)\n     }\n-    fn visit_lifetime_def(&mut self, lifetime: &'v LifetimeDef) {\n+    fn visit_lifetime_def(&mut self, lifetime: &LifetimeDef) {\n         walk_lifetime_def(self, lifetime)\n     }\n-    fn visit_mac(&mut self, _mac: &'v Mac) {\n+    fn visit_mac(&mut self, _mac: &Mac) {\n         panic!(\"visit_mac disabled by default\");\n         // NB: see note about macros above.\n         // if you really want a visitor that\n         // works on macros, use this\n         // definition in your trait impl:\n         // visit::walk_mac(self, _mac)\n     }\n-    fn visit_path(&mut self, path: &'v Path, _id: NodeId) {\n+    fn visit_path(&mut self, path: &Path, _id: NodeId) {\n         walk_path(self, path)\n     }\n-    fn visit_path_list_item(&mut self, prefix: &'v Path, item: &'v PathListItem) {\n+    fn visit_path_list_item(&mut self, prefix: &Path, item: &PathListItem) {\n         walk_path_list_item(self, prefix, item)\n     }\n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v PathSegment) {\n+    fn visit_path_segment(&mut self, path_span: Span, path_segment: &PathSegment) {\n         walk_path_segment(self, path_span, path_segment)\n     }\n-    fn visit_path_parameters(&mut self, path_span: Span, path_parameters: &'v PathParameters) {\n+    fn visit_path_parameters(&mut self, path_span: Span, path_parameters: &PathParameters) {\n         walk_path_parameters(self, path_span, path_parameters)\n     }\n-    fn visit_assoc_type_binding(&mut self, type_binding: &'v TypeBinding) {\n+    fn visit_assoc_type_binding(&mut self, type_binding: &TypeBinding) {\n         walk_assoc_type_binding(self, type_binding)\n     }\n-    fn visit_attribute(&mut self, _attr: &'v Attribute) {}\n-    fn visit_macro_def(&mut self, macro_def: &'v MacroDef) {\n+    fn visit_attribute(&mut self, _attr: &Attribute) {}\n+    fn visit_macro_def(&mut self, macro_def: &MacroDef) {\n         walk_macro_def(self, macro_def)\n     }\n-    fn visit_vis(&mut self, vis: &'v Visibility) {\n+    fn visit_vis(&mut self, vis: &Visibility) {\n         walk_vis(self, vis)\n     }\n }\n@@ -145,46 +145,45 @@ macro_rules! walk_list {\n     }\n }\n \n-pub fn walk_opt_name<'v, V: Visitor<'v>>(visitor: &mut V, span: Span, opt_name: Option<Name>) {\n+pub fn walk_opt_name<V: Visitor>(visitor: &mut V, span: Span, opt_name: Option<Name>) {\n     if let Some(name) = opt_name {\n         visitor.visit_name(span, name);\n     }\n }\n \n-pub fn walk_opt_ident<'v, V: Visitor<'v>>(visitor: &mut V, span: Span, opt_ident: Option<Ident>) {\n+pub fn walk_opt_ident<V: Visitor>(visitor: &mut V, span: Span, opt_ident: Option<Ident>) {\n     if let Some(ident) = opt_ident {\n         visitor.visit_ident(span, ident);\n     }\n }\n \n-pub fn walk_opt_sp_ident<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                             opt_sp_ident: &Option<Spanned<Ident>>) {\n+pub fn walk_opt_sp_ident<V: Visitor>(visitor: &mut V, opt_sp_ident: &Option<Spanned<Ident>>) {\n     if let Some(ref sp_ident) = *opt_sp_ident {\n         visitor.visit_ident(sp_ident.span, sp_ident.node);\n     }\n }\n \n-pub fn walk_ident<'v, V: Visitor<'v>>(visitor: &mut V, span: Span, ident: Ident) {\n+pub fn walk_ident<V: Visitor>(visitor: &mut V, span: Span, ident: Ident) {\n     visitor.visit_name(span, ident.name);\n }\n \n-pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate) {\n+pub fn walk_crate<V: Visitor>(visitor: &mut V, krate: &Crate) {\n     visitor.visit_mod(&krate.module, krate.span, CRATE_NODE_ID);\n     walk_list!(visitor, visit_attribute, &krate.attrs);\n     walk_list!(visitor, visit_macro_def, &krate.exported_macros);\n }\n \n-pub fn walk_macro_def<'v, V: Visitor<'v>>(visitor: &mut V, macro_def: &'v MacroDef) {\n+pub fn walk_macro_def<V: Visitor>(visitor: &mut V, macro_def: &MacroDef) {\n     visitor.visit_ident(macro_def.span, macro_def.ident);\n     walk_opt_ident(visitor, macro_def.span, macro_def.imported_from);\n     walk_list!(visitor, visit_attribute, &macro_def.attrs);\n }\n \n-pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod) {\n+pub fn walk_mod<V: Visitor>(visitor: &mut V, module: &Mod) {\n     walk_list!(visitor, visit_item, &module.items);\n }\n \n-pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local) {\n+pub fn walk_local<V: Visitor>(visitor: &mut V, local: &Local) {\n     for attr in local.attrs.as_attr_slice() {\n         visitor.visit_attribute(attr);\n     }\n@@ -193,33 +192,27 @@ pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local) {\n     walk_list!(visitor, visit_expr, &local.init);\n }\n \n-pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime) {\n+pub fn walk_lifetime<V: Visitor>(visitor: &mut V, lifetime: &Lifetime) {\n     visitor.visit_name(lifetime.span, lifetime.name);\n }\n \n-pub fn walk_lifetime_def<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                              lifetime_def: &'v LifetimeDef) {\n+pub fn walk_lifetime_def<V: Visitor>(visitor: &mut V, lifetime_def: &LifetimeDef) {\n     visitor.visit_lifetime(&lifetime_def.lifetime);\n     walk_list!(visitor, visit_lifetime, &lifetime_def.bounds);\n }\n \n-pub fn walk_poly_trait_ref<'v, V>(visitor: &mut V,\n-                                  trait_ref: &'v PolyTraitRef,\n-                                  _modifier: &'v TraitBoundModifier)\n-    where V: Visitor<'v>\n+pub fn walk_poly_trait_ref<V>(visitor: &mut V, trait_ref: &PolyTraitRef, _: &TraitBoundModifier)\n+    where V: Visitor,\n {\n     walk_list!(visitor, visit_lifetime_def, &trait_ref.bound_lifetimes);\n     visitor.visit_trait_ref(&trait_ref.trait_ref);\n }\n \n-pub fn walk_trait_ref<'v,V>(visitor: &mut V,\n-                                   trait_ref: &'v TraitRef)\n-    where V: Visitor<'v>\n-{\n+pub fn walk_trait_ref<V: Visitor>(visitor: &mut V, trait_ref: &TraitRef) {\n     visitor.visit_path(&trait_ref.path, trait_ref.ref_id)\n }\n \n-pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n+pub fn walk_item<V: Visitor>(visitor: &mut V, item: &Item) {\n     visitor.visit_vis(&item.vis);\n     visitor.visit_ident(item.span, item.ident);\n     match item.node {\n@@ -298,25 +291,24 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n     walk_list!(visitor, visit_attribute, &item.attrs);\n }\n \n-pub fn walk_enum_def<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                         enum_definition: &'v EnumDef,\n-                                         generics: &'v Generics,\n-                                         item_id: NodeId) {\n+pub fn walk_enum_def<V: Visitor>(visitor: &mut V,\n+                                 enum_definition: &EnumDef,\n+                                 generics: &Generics,\n+                                 item_id: NodeId) {\n     walk_list!(visitor, visit_variant, &enum_definition.variants, generics, item_id);\n }\n \n-pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                        variant: &'v Variant,\n-                                        generics: &'v Generics,\n-                                        item_id: NodeId) {\n+pub fn walk_variant<V>(visitor: &mut V, variant: &Variant, generics: &Generics, item_id: NodeId)\n+    where V: Visitor,\n+{\n     visitor.visit_ident(variant.span, variant.node.name);\n     visitor.visit_variant_data(&variant.node.data, variant.node.name,\n                              generics, item_id, variant.span);\n     walk_list!(visitor, visit_expr, &variant.node.disr_expr);\n     walk_list!(visitor, visit_attribute, &variant.node.attrs);\n }\n \n-pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n+pub fn walk_ty<V: Visitor>(visitor: &mut V, typ: &Ty) {\n     match typ.node {\n         TyKind::Vec(ref ty) | TyKind::Paren(ref ty) => {\n             visitor.visit_ty(ty)\n@@ -362,28 +354,25 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n     }\n }\n \n-pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path) {\n+pub fn walk_path<V: Visitor>(visitor: &mut V, path: &Path) {\n     for segment in &path.segments {\n         visitor.visit_path_segment(path.span, segment);\n     }\n }\n \n-pub fn walk_path_list_item<'v, V: Visitor<'v>>(visitor: &mut V, _prefix: &'v Path,\n-                                               item: &'v PathListItem) {\n+pub fn walk_path_list_item<V: Visitor>(visitor: &mut V, _prefix: &Path, item: &PathListItem) {\n     walk_opt_ident(visitor, item.span, item.node.name());\n     walk_opt_ident(visitor, item.span, item.node.rename());\n }\n \n-pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                             path_span: Span,\n-                                             segment: &'v PathSegment) {\n+pub fn walk_path_segment<V: Visitor>(visitor: &mut V, path_span: Span, segment: &PathSegment) {\n     visitor.visit_ident(path_span, segment.identifier);\n     visitor.visit_path_parameters(path_span, &segment.parameters);\n }\n \n-pub fn walk_path_parameters<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                                _path_span: Span,\n-                                                path_parameters: &'v PathParameters) {\n+pub fn walk_path_parameters<V>(visitor: &mut V, _path_span: Span, path_parameters: &PathParameters)\n+    where V: Visitor,\n+{\n     match *path_parameters {\n         PathParameters::AngleBracketed(ref data) => {\n             walk_list!(visitor, visit_ty, &data.types);\n@@ -397,13 +386,12 @@ pub fn walk_path_parameters<'v, V: Visitor<'v>>(visitor: &mut V,\n     }\n }\n \n-pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                                   type_binding: &'v TypeBinding) {\n+pub fn walk_assoc_type_binding<V: Visitor>(visitor: &mut V, type_binding: &TypeBinding) {\n     visitor.visit_ident(type_binding.span, type_binding.ident);\n     visitor.visit_ty(&type_binding.ty);\n }\n \n-pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n+pub fn walk_pat<V: Visitor>(visitor: &mut V, pattern: &Pat) {\n     match pattern.node {\n         PatKind::TupleStruct(ref path, ref children, _) => {\n             visitor.visit_path(path, pattern.id);\n@@ -449,8 +437,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n     }\n }\n \n-pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                             foreign_item: &'v ForeignItem) {\n+pub fn walk_foreign_item<V: Visitor>(visitor: &mut V, foreign_item: &ForeignItem) {\n     visitor.visit_vis(&foreign_item.vis);\n     visitor.visit_ident(foreign_item.span, foreign_item.ident);\n \n@@ -465,8 +452,7 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V,\n     walk_list!(visitor, visit_attribute, &foreign_item.attrs);\n }\n \n-pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                               bound: &'v TyParamBound) {\n+pub fn walk_ty_param_bound<V: Visitor>(visitor: &mut V, bound: &TyParamBound) {\n     match *bound {\n         TraitTyParamBound(ref typ, ref modifier) => {\n             visitor.visit_poly_trait_ref(typ, modifier);\n@@ -477,7 +463,7 @@ pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V,\n     }\n }\n \n-pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) {\n+pub fn walk_generics<V: Visitor>(visitor: &mut V, generics: &Generics) {\n     for param in &generics.ty_params {\n         visitor.visit_ident(param.span, param.ident);\n         walk_list!(visitor, visit_ty_param_bound, &param.bounds);\n@@ -511,22 +497,21 @@ pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics\n     }\n }\n \n-pub fn walk_fn_ret_ty<'v, V: Visitor<'v>>(visitor: &mut V, ret_ty: &'v FunctionRetTy) {\n+pub fn walk_fn_ret_ty<V: Visitor>(visitor: &mut V, ret_ty: &FunctionRetTy) {\n     if let FunctionRetTy::Ty(ref output_ty) = *ret_ty {\n         visitor.visit_ty(output_ty)\n     }\n }\n \n-pub fn walk_fn_decl<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &'v FnDecl) {\n+pub fn walk_fn_decl<V: Visitor>(visitor: &mut V, function_declaration: &FnDecl) {\n     for argument in &function_declaration.inputs {\n         visitor.visit_pat(&argument.pat);\n         visitor.visit_ty(&argument.ty)\n     }\n     walk_fn_ret_ty(visitor, &function_declaration.output)\n }\n \n-pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                        function_kind: FnKind<'v>) {\n+pub fn walk_fn_kind<V: Visitor>(visitor: &mut V, function_kind: FnKind) {\n     match function_kind {\n         FnKind::ItemFn(_, generics, _, _, _, _) => {\n             visitor.visit_generics(generics);\n@@ -538,17 +523,15 @@ pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V,\n     }\n }\n \n-pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                   function_kind: FnKind<'v>,\n-                                   function_declaration: &'v FnDecl,\n-                                   function_body: &'v Block,\n-                                   _span: Span) {\n-    walk_fn_decl(visitor, function_declaration);\n-    walk_fn_kind(visitor, function_kind);\n-    visitor.visit_block(function_body)\n+pub fn walk_fn<V>(visitor: &mut V, kind: FnKind, declaration: &FnDecl, body: &Block, _span: Span)\n+    where V: Visitor,\n+{\n+    walk_fn_decl(visitor, declaration);\n+    walk_fn_kind(visitor, kind);\n+    visitor.visit_block(body)\n }\n \n-pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v TraitItem) {\n+pub fn walk_trait_item<V: Visitor>(visitor: &mut V, trait_item: &TraitItem) {\n     visitor.visit_ident(trait_item.span, trait_item.ident);\n     walk_list!(visitor, visit_attribute, &trait_item.attrs);\n     match trait_item.node {\n@@ -571,7 +554,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n     }\n }\n \n-pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem) {\n+pub fn walk_impl_item<V: Visitor>(visitor: &mut V, impl_item: &ImplItem) {\n     visitor.visit_vis(&impl_item.vis);\n     visitor.visit_ident(impl_item.span, impl_item.ident);\n     walk_list!(visitor, visit_attribute, &impl_item.attrs);\n@@ -593,25 +576,23 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n     }\n }\n \n-pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                           struct_definition: &'v VariantData) {\n+pub fn walk_struct_def<V: Visitor>(visitor: &mut V, struct_definition: &VariantData) {\n     walk_list!(visitor, visit_struct_field, struct_definition.fields());\n }\n \n-pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                             struct_field: &'v StructField) {\n+pub fn walk_struct_field<V: Visitor>(visitor: &mut V, struct_field: &StructField) {\n     visitor.visit_vis(&struct_field.vis);\n     walk_opt_ident(visitor, struct_field.span, struct_field.ident);\n     visitor.visit_ty(&struct_field.ty);\n     walk_list!(visitor, visit_attribute, &struct_field.attrs);\n }\n \n-pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block) {\n+pub fn walk_block<V: Visitor>(visitor: &mut V, block: &Block) {\n     walk_list!(visitor, visit_stmt, &block.stmts);\n     walk_list!(visitor, visit_expr, &block.expr);\n }\n \n-pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) {\n+pub fn walk_stmt<V: Visitor>(visitor: &mut V, statement: &Stmt) {\n     match statement.node {\n         StmtKind::Decl(ref declaration, _) => visitor.visit_decl(declaration),\n         StmtKind::Expr(ref expression, _) | StmtKind::Semi(ref expression, _) => {\n@@ -626,18 +607,18 @@ pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) {\n     }\n }\n \n-pub fn walk_decl<'v, V: Visitor<'v>>(visitor: &mut V, declaration: &'v Decl) {\n+pub fn walk_decl<V: Visitor>(visitor: &mut V, declaration: &Decl) {\n     match declaration.node {\n         DeclKind::Local(ref local) => visitor.visit_local(local),\n         DeclKind::Item(ref item) => visitor.visit_item(item),\n     }\n }\n \n-pub fn walk_mac<'v, V: Visitor<'v>>(_: &mut V, _: &'v Mac) {\n+pub fn walk_mac<V: Visitor>(_: &mut V, _: &Mac) {\n     // Empty!\n }\n \n-pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n+pub fn walk_expr<V: Visitor>(visitor: &mut V, expression: &Expr) {\n     for attr in expression.attrs.as_attr_slice() {\n         visitor.visit_attribute(attr);\n     }\n@@ -787,14 +768,14 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n     visitor.visit_expr_post(expression)\n }\n \n-pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm) {\n+pub fn walk_arm<V: Visitor>(visitor: &mut V, arm: &Arm) {\n     walk_list!(visitor, visit_pat, &arm.pats);\n     walk_list!(visitor, visit_expr, &arm.guard);\n     visitor.visit_expr(&arm.body);\n     walk_list!(visitor, visit_attribute, &arm.attrs);\n }\n \n-pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility) {\n+pub fn walk_vis<V: Visitor>(visitor: &mut V, vis: &Visibility) {\n     if let Visibility::Restricted { ref path, id } = *vis {\n         visitor.visit_path(path, id);\n     }"}, {"sha": "3661454b4330caa3eba6dc0e9bfa7b53431d4f8d", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0644aba0b3f5e8c8e71f4fcfdf8841ba62034565/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=0644aba0b3f5e8c8e71f4fcfdf8841ba62034565", "patch": "@@ -353,8 +353,8 @@ fn find_type_parameters(ty: &ast::Ty, ty_param_names: &[ast::Name]) -> Vec<P<ast\n         types: Vec<P<ast::Ty>>,\n     }\n \n-    impl<'a> visit::Visitor<'a> for Visitor<'a> {\n-        fn visit_ty(&mut self, ty: &'a ast::Ty) {\n+    impl<'a> visit::Visitor for Visitor<'a> {\n+        fn visit_ty(&mut self, ty: &ast::Ty) {\n             match ty.node {\n                 ast::TyKind::Path(_, ref path) if !path.global => {\n                     match path.segments.first() {"}]}