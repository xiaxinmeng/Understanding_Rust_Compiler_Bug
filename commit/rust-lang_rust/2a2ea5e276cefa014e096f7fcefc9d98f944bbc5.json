{"sha": "2a2ea5e276cefa014e096f7fcefc9d98f944bbc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMmVhNWUyNzZjZWZhMDE0ZTA5NmY3ZmNlZmM5ZDk4Zjk0NGJiYzU=", "commit": {"author": {"name": "Dmitry Ermolov", "email": "epdmitry@yandex.ru", "date": "2013-08-07T22:37:13Z"}, "committer": {"name": "Dmitry Ermolov", "email": "epdmitry@yandex.ru", "date": "2013-08-09T11:51:49Z"}, "message": "Implement `lower_bound_iter`/`upper_bound_iter` for TrieMap/TrieSet", "tree": {"sha": "00d431902f50890a875edc9c166b82a3d6baa09d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00d431902f50890a875edc9c166b82a3d6baa09d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a2ea5e276cefa014e096f7fcefc9d98f944bbc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a2ea5e276cefa014e096f7fcefc9d98f944bbc5", "html_url": "https://github.com/rust-lang/rust/commit/2a2ea5e276cefa014e096f7fcefc9d98f944bbc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a2ea5e276cefa014e096f7fcefc9d98f944bbc5/comments", "author": {"login": "dim-an", "id": 88889, "node_id": "MDQ6VXNlcjg4ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/88889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dim-an", "html_url": "https://github.com/dim-an", "followers_url": "https://api.github.com/users/dim-an/followers", "following_url": "https://api.github.com/users/dim-an/following{/other_user}", "gists_url": "https://api.github.com/users/dim-an/gists{/gist_id}", "starred_url": "https://api.github.com/users/dim-an/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dim-an/subscriptions", "organizations_url": "https://api.github.com/users/dim-an/orgs", "repos_url": "https://api.github.com/users/dim-an/repos", "events_url": "https://api.github.com/users/dim-an/events{/privacy}", "received_events_url": "https://api.github.com/users/dim-an/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dim-an", "id": 88889, "node_id": "MDQ6VXNlcjg4ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/88889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dim-an", "html_url": "https://github.com/dim-an", "followers_url": "https://api.github.com/users/dim-an/followers", "following_url": "https://api.github.com/users/dim-an/following{/other_user}", "gists_url": "https://api.github.com/users/dim-an/gists{/gist_id}", "starred_url": "https://api.github.com/users/dim-an/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dim-an/subscriptions", "organizations_url": "https://api.github.com/users/dim-an/orgs", "repos_url": "https://api.github.com/users/dim-an/repos", "events_url": "https://api.github.com/users/dim-an/events{/privacy}", "received_events_url": "https://api.github.com/users/dim-an/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "094e4260f8b0a1d1cddf235373d2588cefd167b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/094e4260f8b0a1d1cddf235373d2588cefd167b9", "html_url": "https://github.com/rust-lang/rust/commit/094e4260f8b0a1d1cddf235373d2588cefd167b9"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "6c9221915179a744ad032b9624550cd6f635577c", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/2a2ea5e276cefa014e096f7fcefc9d98f944bbc5/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a2ea5e276cefa014e096f7fcefc9d98f944bbc5/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=2a2ea5e276cefa014e096f7fcefc9d98f944bbc5", "patch": "@@ -156,6 +156,53 @@ impl<T> TrieMap<T> {\n             remaining_max: self.length\n         }\n     }\n+\n+    // If `upper` is true then returns upper_bound else returns lower_bound.\n+    #[inline]\n+    fn bound_iter<'a>(&'a self, key: uint, upper: bool) -> TrieMapIterator<'a, T> {\n+        let mut node: &'a TrieNode<T> = &self.root;\n+        let mut idx = 0;\n+        let mut it = TrieMapIterator {\n+            stack: ~[],\n+            remaining_min: 0,\n+            remaining_max: self.length\n+        };\n+        loop {\n+            let children = &node.children;\n+            let child_id = chunk(key, idx);\n+            match children[child_id] {\n+                Internal(ref n) => {\n+                    node = &**n;\n+                    it.stack.push(children.slice_from(child_id + 1).iter());\n+                }\n+                External(stored, _) => {\n+                    if stored < key || (upper && stored == key) {\n+                        it.stack.push(children.slice_from(child_id + 1).iter());\n+                    } else {\n+                        it.stack.push(children.slice_from(child_id).iter());\n+                    }\n+                    return it;\n+                }\n+                Nothing => {\n+                    it.stack.push(children.slice_from(child_id + 1).iter());\n+                    return it\n+                }\n+            }\n+            idx += 1;\n+        }\n+    }\n+\n+    /// Get an iterator pointing to the first key-value pair whose key is not less than `key`.\n+    /// If all keys in the map are less than `key` an empty iterator is returned.\n+    pub fn lower_bound_iter<'a>(&'a self, key: uint) -> TrieMapIterator<'a, T> {\n+        self.bound_iter(key, false)\n+    }\n+\n+    /// Get an iterator pointing to the first key-value pair whose key is greater than `key`.\n+    /// If all keys in the map are not greater than `key` an empty iterator is returned.\n+    pub fn upper_bound_iter<'a>(&'a self, key: uint) -> TrieMapIterator<'a, T> {\n+        self.bound_iter(key, true)\n+    }\n }\n \n impl<T, Iter: Iterator<(uint, T)>> FromIterator<(uint, T), Iter> for TrieMap<T> {\n@@ -233,6 +280,18 @@ impl TrieSet {\n     pub fn iter<'a>(&'a self) -> TrieSetIterator<'a> {\n         TrieSetIterator{iter: self.map.iter()}\n     }\n+\n+    /// Get an iterator pointing to the first value that is not less than `val`.\n+    /// If all values in the set are less than `val` an empty iterator is returned.\n+    pub fn lower_bound_iter<'a>(&'a self, val: uint) -> TrieSetIterator<'a> {\n+        TrieSetIterator{iter: self.map.lower_bound_iter(val)}\n+    }\n+\n+    /// Get an iterator pointing to the first value that key is greater than `val`.\n+    /// If all values in the set are not greater than `val` an empty iterator is returned.\n+    pub fn upper_bound_iter<'a>(&'a self, val: uint) -> TrieSetIterator<'a> {\n+        TrieSetIterator{iter: self.map.upper_bound_iter(val)}\n+    }\n }\n \n impl<Iter: Iterator<uint>> FromIterator<uint, Iter> for TrieSet {\n@@ -645,6 +704,49 @@ mod test_map {\n         }\n         assert_eq!(i, last - first);\n     }\n+\n+    #[test]\n+    fn test_bound_iter() {\n+        let empty_map : TrieMap<uint> = TrieMap::new();\n+        assert_eq!(empty_map.lower_bound_iter(0).next(), None);\n+        assert_eq!(empty_map.upper_bound_iter(0).next(), None);\n+\n+        let last = 999u;\n+        let step = 3u;\n+        let value = 42u;\n+\n+        let mut map : TrieMap<uint> = TrieMap::new();\n+        do uint::range_step(0u, last, step as int) |x| {\n+            assert!(x % step == 0);\n+            map.insert(x, value);\n+            true\n+        };\n+\n+        for i in range(0u, last - step) {\n+            let mut lb = map.lower_bound_iter(i);\n+            let mut ub = map.upper_bound_iter(i);\n+            let next_key = i - i % step + step;\n+            let next_pair = (next_key, &value);\n+            if (i % step == 0) {\n+                assert_eq!(lb.next(), Some((i, &value)));\n+            } else {\n+                assert_eq!(lb.next(), Some(next_pair));\n+            }\n+            assert_eq!(ub.next(), Some(next_pair));\n+        }\n+\n+        let mut lb = map.lower_bound_iter(last - step);\n+        assert_eq!(lb.next(), Some((last - step, &value)));\n+        let mut ub = map.upper_bound_iter(last - step);\n+        assert_eq!(ub.next(), None);\n+\n+        for i in range(last - step + 1, last) {\n+            let mut lb = map.lower_bound_iter(i);\n+            assert_eq!(lb.next(), None);\n+            let mut ub = map.upper_bound_iter(i);\n+            assert_eq!(ub.next(), None);\n+        }\n+    }\n }\n \n #[cfg(test)]"}]}