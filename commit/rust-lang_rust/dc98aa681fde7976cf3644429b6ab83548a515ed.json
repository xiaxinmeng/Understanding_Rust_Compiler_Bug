{"sha": "dc98aa681fde7976cf3644429b6ab83548a515ed", "node_id": "C_kwDOAAsO6NoAKGRjOThhYTY4MWZkZTc5NzZjZjM2NDQ0MjliNmFiODM1NDhhNTE1ZWQ", "commit": {"author": {"name": "fee1-dead", "email": "ent3rm4n@gmail.com", "date": "2022-12-28T07:51:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-28T07:51:37Z"}, "message": "Rollup merge of #94145 - ssomers:binary_heap_tests, r=jyn514\n\nTest leaking of BinaryHeap Drain iterators\n\nAdd test cases about forgetting the `BinaryHeap::Drain` iterator, and slightly fortifies some other test cases.\n\nConsists of separate commits that I don't think are relevant on their own (but I'll happily turn these into more PRs if desired).", "tree": {"sha": "bb00c3d6ef49bd0e1669aa2bb674a60d399523fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb00c3d6ef49bd0e1669aa2bb674a60d399523fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc98aa681fde7976cf3644429b6ab83548a515ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjq/WJCRBK7hj4Ov3rIwAASGwIAHAvrbLItIjB+W/VKAJqimdn\nQEkZW951QE7FAWdkiH5erFPNtyMc08JQzHV9tn3kGVZjVToefr78hn6hJr4dW6dm\n0rigPISX1MKBKyQLux04/EbPJtVBppNOp64H/cvrhDXlcgMkfw1unhwilDPJX3ig\nLUun8LsuaUkPe7FvPCIVkT1r3eb2cq1P1shDrX9z39exoNelL60m0Qg/YeaphUP7\n80L8WLcMaLNSiQq7OlLiCB5Y1ryMd/oS2B9qU01u9du7qbrE1Qw/PGvQxfFkK1AL\nJ/7b3+8Xexn1jI6Qy+JTz7xrFW5d7k0xZHxeSKT7Km12JVyH9QAK0qKrRnxwwsY=\n=y8wS\n-----END PGP SIGNATURE-----\n", "payload": "tree bb00c3d6ef49bd0e1669aa2bb674a60d399523fc\nparent 6a4624d73b34153811f7642b89bd396306aa7843\nparent a80e685e11a6876d3ec1e54f4e5fafd92c6c4eb2\nauthor fee1-dead <ent3rm4n@gmail.com> 1672213897 +0800\ncommitter GitHub <noreply@github.com> 1672213897 +0800\n\nRollup merge of #94145 - ssomers:binary_heap_tests, r=jyn514\n\nTest leaking of BinaryHeap Drain iterators\n\nAdd test cases about forgetting the `BinaryHeap::Drain` iterator, and slightly fortifies some other test cases.\n\nConsists of separate commits that I don't think are relevant on their own (but I'll happily turn these into more PRs if desired).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc98aa681fde7976cf3644429b6ab83548a515ed", "html_url": "https://github.com/rust-lang/rust/commit/dc98aa681fde7976cf3644429b6ab83548a515ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc98aa681fde7976cf3644429b6ab83548a515ed/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a4624d73b34153811f7642b89bd396306aa7843", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a4624d73b34153811f7642b89bd396306aa7843", "html_url": "https://github.com/rust-lang/rust/commit/6a4624d73b34153811f7642b89bd396306aa7843"}, {"sha": "a80e685e11a6876d3ec1e54f4e5fafd92c6c4eb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a80e685e11a6876d3ec1e54f4e5fafd92c6c4eb2", "html_url": "https://github.com/rust-lang/rust/commit/a80e685e11a6876d3ec1e54f4e5fafd92c6c4eb2"}], "stats": {"total": 169, "additions": 109, "deletions": 60}, "files": [{"sha": "fe08e0e10e818440c1e1cc9f3b05ae25748c18bb", "filename": "library/alloc/src/collections/binary_heap/tests.rs", "status": "modified", "additions": 74, "deletions": 24, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs?ref=dc98aa681fde7976cf3644429b6ab83548a515ed", "patch": "@@ -1,8 +1,8 @@\n use super::*;\n use crate::boxed::Box;\n+use crate::testing::crash_test::{CrashTestDummy, Panic};\n use std::iter::TrustedLen;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n-use std::sync::atomic::{AtomicU32, Ordering};\n \n #[test]\n fn test_iterator() {\n@@ -291,33 +291,83 @@ fn test_drain_sorted() {\n \n #[test]\n fn test_drain_sorted_leak() {\n-    static DROPS: AtomicU32 = AtomicU32::new(0);\n-\n-    #[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]\n-    struct D(u32, bool);\n-\n-    impl Drop for D {\n-        fn drop(&mut self) {\n-            DROPS.fetch_add(1, Ordering::SeqCst);\n-\n-            if self.1 {\n-                panic!(\"panic in `drop`\");\n-            }\n-        }\n-    }\n-\n+    let d0 = CrashTestDummy::new(0);\n+    let d1 = CrashTestDummy::new(1);\n+    let d2 = CrashTestDummy::new(2);\n+    let d3 = CrashTestDummy::new(3);\n+    let d4 = CrashTestDummy::new(4);\n+    let d5 = CrashTestDummy::new(5);\n     let mut q = BinaryHeap::from(vec![\n-        D(0, false),\n-        D(1, false),\n-        D(2, false),\n-        D(3, true),\n-        D(4, false),\n-        D(5, false),\n+        d0.spawn(Panic::Never),\n+        d1.spawn(Panic::Never),\n+        d2.spawn(Panic::Never),\n+        d3.spawn(Panic::InDrop),\n+        d4.spawn(Panic::Never),\n+        d5.spawn(Panic::Never),\n     ]);\n \n-    catch_unwind(AssertUnwindSafe(|| drop(q.drain_sorted()))).ok();\n+    catch_unwind(AssertUnwindSafe(|| drop(q.drain_sorted()))).unwrap_err();\n+\n+    assert_eq!(d0.dropped(), 1);\n+    assert_eq!(d1.dropped(), 1);\n+    assert_eq!(d2.dropped(), 1);\n+    assert_eq!(d3.dropped(), 1);\n+    assert_eq!(d4.dropped(), 1);\n+    assert_eq!(d5.dropped(), 1);\n+    assert!(q.is_empty());\n+}\n \n-    assert_eq!(DROPS.load(Ordering::SeqCst), 6);\n+#[test]\n+fn test_drain_forget() {\n+    let a = CrashTestDummy::new(0);\n+    let b = CrashTestDummy::new(1);\n+    let c = CrashTestDummy::new(2);\n+    let mut q =\n+        BinaryHeap::from(vec![a.spawn(Panic::Never), b.spawn(Panic::Never), c.spawn(Panic::Never)]);\n+\n+    catch_unwind(AssertUnwindSafe(|| {\n+        let mut it = q.drain();\n+        it.next();\n+        mem::forget(it);\n+    }))\n+    .unwrap();\n+    // Behaviour after leaking is explicitly unspecified and order is arbitrary,\n+    // so it's fine if these start failing, but probably worth knowing.\n+    assert!(q.is_empty());\n+    assert_eq!(a.dropped() + b.dropped() + c.dropped(), 1);\n+    assert_eq!(a.dropped(), 0);\n+    assert_eq!(b.dropped(), 0);\n+    assert_eq!(c.dropped(), 1);\n+    drop(q);\n+    assert_eq!(a.dropped(), 0);\n+    assert_eq!(b.dropped(), 0);\n+    assert_eq!(c.dropped(), 1);\n+}\n+\n+#[test]\n+fn test_drain_sorted_forget() {\n+    let a = CrashTestDummy::new(0);\n+    let b = CrashTestDummy::new(1);\n+    let c = CrashTestDummy::new(2);\n+    let mut q =\n+        BinaryHeap::from(vec![a.spawn(Panic::Never), b.spawn(Panic::Never), c.spawn(Panic::Never)]);\n+\n+    catch_unwind(AssertUnwindSafe(|| {\n+        let mut it = q.drain_sorted();\n+        it.next();\n+        mem::forget(it);\n+    }))\n+    .unwrap();\n+    // Behaviour after leaking is explicitly unspecified,\n+    // so it's fine if these start failing, but probably worth knowing.\n+    assert_eq!(q.len(), 2);\n+    assert_eq!(a.dropped(), 0);\n+    assert_eq!(b.dropped(), 0);\n+    assert_eq!(c.dropped(), 1);\n+    drop(q);\n+    assert_eq!(a.dropped(), 1);\n+    assert_eq!(b.dropped(), 1);\n+    assert_eq!(c.dropped(), 1);\n }\n \n #[test]"}, {"sha": "700b1463bfd51f961e8b7bb2cb43e991c9473d4e", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=dc98aa681fde7976cf3644429b6ab83548a515ed", "patch": "@@ -1,12 +1,12 @@\n-use super::super::testing::crash_test::{CrashTestDummy, Panic};\n-use super::super::testing::ord_chaos::{Cyclic3, Governed, Governor};\n-use super::super::testing::rng::DeterministicRng;\n use super::Entry::{Occupied, Vacant};\n use super::*;\n use crate::boxed::Box;\n use crate::fmt::Debug;\n use crate::rc::Rc;\n use crate::string::{String, ToString};\n+use crate::testing::crash_test::{CrashTestDummy, Panic};\n+use crate::testing::ord_chaos::{Cyclic3, Governed, Governor};\n+use crate::testing::rng::DeterministicRng;\n use crate::vec::Vec;\n use std::cmp::Ordering;\n use std::convert::TryFrom;"}, {"sha": "7552f2fc04ce8baf63f9db30ff7c7e07b254e542", "filename": "library/alloc/src/collections/btree/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs?ref=dc98aa681fde7976cf3644429b6ab83548a515ed", "patch": "@@ -21,6 +21,3 @@ trait Recover<Q: ?Sized> {\n     fn take(&mut self, key: &Q) -> Option<Self::Key>;\n     fn replace(&mut self, key: Self::Key) -> Option<Self::Key>;\n }\n-\n-#[cfg(test)]\n-mod testing;"}, {"sha": "7b8d41a603176b07a1e3a6b648ab9cbac577f14d", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=dc98aa681fde7976cf3644429b6ab83548a515ed", "patch": "@@ -1,6 +1,6 @@\n-use super::super::testing::crash_test::{CrashTestDummy, Panic};\n-use super::super::testing::rng::DeterministicRng;\n use super::*;\n+use crate::testing::crash_test::{CrashTestDummy, Panic};\n+use crate::testing::rng::DeterministicRng;\n use crate::vec::Vec;\n use std::cmp::Ordering;\n use std::hash::{Hash, Hasher};"}, {"sha": "5d5af22bb292fcecb63aa65bf80c3f9a551c6732", "filename": "library/alloc/src/collections/linked_list/tests.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs?ref=dc98aa681fde7976cf3644429b6ab83548a515ed", "patch": "@@ -1,4 +1,5 @@\n use super::*;\n+use crate::testing::crash_test::{CrashTestDummy, Panic};\n use crate::vec::Vec;\n \n use std::panic::{catch_unwind, AssertUnwindSafe};\n@@ -984,35 +985,34 @@ fn drain_filter_complex() {\n \n #[test]\n fn drain_filter_drop_panic_leak() {\n-    static mut DROPS: i32 = 0;\n-\n-    struct D(bool);\n-\n-    impl Drop for D {\n-        fn drop(&mut self) {\n-            unsafe {\n-                DROPS += 1;\n-            }\n-\n-            if self.0 {\n-                panic!(\"panic in `drop`\");\n-            }\n-        }\n-    }\n-\n+    let d0 = CrashTestDummy::new(0);\n+    let d1 = CrashTestDummy::new(1);\n+    let d2 = CrashTestDummy::new(2);\n+    let d3 = CrashTestDummy::new(3);\n+    let d4 = CrashTestDummy::new(4);\n+    let d5 = CrashTestDummy::new(5);\n+    let d6 = CrashTestDummy::new(6);\n+    let d7 = CrashTestDummy::new(7);\n     let mut q = LinkedList::new();\n-    q.push_back(D(false));\n-    q.push_back(D(false));\n-    q.push_back(D(false));\n-    q.push_back(D(false));\n-    q.push_back(D(false));\n-    q.push_front(D(false));\n-    q.push_front(D(true));\n-    q.push_front(D(false));\n-\n-    catch_unwind(AssertUnwindSafe(|| drop(q.drain_filter(|_| true)))).ok();\n-\n-    assert_eq!(unsafe { DROPS }, 8);\n+    q.push_back(d3.spawn(Panic::Never));\n+    q.push_back(d4.spawn(Panic::Never));\n+    q.push_back(d5.spawn(Panic::Never));\n+    q.push_back(d6.spawn(Panic::Never));\n+    q.push_back(d7.spawn(Panic::Never));\n+    q.push_front(d2.spawn(Panic::Never));\n+    q.push_front(d1.spawn(Panic::InDrop));\n+    q.push_front(d0.spawn(Panic::Never));\n+\n+    catch_unwind(AssertUnwindSafe(|| drop(q.drain_filter(|_| true)))).unwrap_err();\n+\n+    assert_eq!(d0.dropped(), 1);\n+    assert_eq!(d1.dropped(), 1);\n+    assert_eq!(d2.dropped(), 1);\n+    assert_eq!(d3.dropped(), 1);\n+    assert_eq!(d4.dropped(), 1);\n+    assert_eq!(d5.dropped(), 1);\n+    assert_eq!(d6.dropped(), 1);\n+    assert_eq!(d7.dropped(), 1);\n     assert!(q.is_empty());\n }\n "}, {"sha": "b7d5c5c2437af818e086d708165c5db7695ec22e", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=dc98aa681fde7976cf3644429b6ab83548a515ed", "patch": "@@ -206,6 +206,8 @@\n extern crate std;\n #[cfg(test)]\n extern crate test;\n+#[cfg(test)]\n+mod testing;\n \n // Module with internal macros used by other modules (needs to be included before other modules).\n #[macro_use]"}, {"sha": "bcf5f5f72510e199093cf978e87411166e3003bc", "filename": "library/alloc/src/testing/crash_test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Ftesting%2Fcrash_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Ftesting%2Fcrash_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftesting%2Fcrash_test.rs?ref=dc98aa681fde7976cf3644429b6ab83548a515ed", "previous_filename": "library/alloc/src/collections/btree/testing/crash_test.rs"}, {"sha": "7a094f8a59522216ad1891e2beac432695737300", "filename": "library/alloc/src/testing/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Ftesting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Ftesting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftesting%2Fmod.rs?ref=dc98aa681fde7976cf3644429b6ab83548a515ed", "previous_filename": "library/alloc/src/collections/btree/testing/mod.rs"}, {"sha": "96ce7c15790463b3770285f6395859d64ea9afdc", "filename": "library/alloc/src/testing/ord_chaos.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Ftesting%2Ford_chaos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Ftesting%2Ford_chaos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftesting%2Ford_chaos.rs?ref=dc98aa681fde7976cf3644429b6ab83548a515ed", "previous_filename": "library/alloc/src/collections/btree/testing/ord_chaos.rs"}, {"sha": "ecf543bee035a38a9adc7f08360c5c57876290c7", "filename": "library/alloc/src/testing/rng.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Ftesting%2Frng.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc98aa681fde7976cf3644429b6ab83548a515ed/library%2Falloc%2Fsrc%2Ftesting%2Frng.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftesting%2Frng.rs?ref=dc98aa681fde7976cf3644429b6ab83548a515ed", "previous_filename": "library/alloc/src/collections/btree/testing/rng.rs"}]}