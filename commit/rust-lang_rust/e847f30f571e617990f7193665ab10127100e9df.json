{"sha": "e847f30f571e617990f7193665ab10127100e9df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NDdmMzBmNTcxZTYxNzk5MGY3MTkzNjY1YWIxMDEyNzEwMGU5ZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-25T22:21:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-25T22:21:44Z"}, "message": "Auto merge of #45532 - kennytm:rollup, r=kennytm\n\nRollup of 7 pull requests\n\n- Successful merges: #45059, #45212, #45398, #45483, #45496, #45508, #45526\n- Failed merges:", "tree": {"sha": "a2a8f24bd05e4c97879826ee4454cdb3bfc92461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2a8f24bd05e4c97879826ee4454cdb3bfc92461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e847f30f571e617990f7193665ab10127100e9df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e847f30f571e617990f7193665ab10127100e9df", "html_url": "https://github.com/rust-lang/rust/commit/e847f30f571e617990f7193665ab10127100e9df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e847f30f571e617990f7193665ab10127100e9df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9d24165948a926263444bfe763f9861cb683246", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d24165948a926263444bfe763f9861cb683246", "html_url": "https://github.com/rust-lang/rust/commit/f9d24165948a926263444bfe763f9861cb683246"}, {"sha": "851d1c736571b38e68001023167199225377e3b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/851d1c736571b38e68001023167199225377e3b9", "html_url": "https://github.com/rust-lang/rust/commit/851d1c736571b38e68001023167199225377e3b9"}], "stats": {"total": 133, "additions": 101, "deletions": 32}, "files": [{"sha": "4540f620872287f5d692a8ecc3eb6c5bdf8046fe", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -860,10 +860,18 @@ fn run_cargo(build: &Build, cargo: &mut Command, stamp: &Path) {\n             // have a hash in the name, but there's a version of this file in\n             // the `deps` folder which *does* have a hash in the name. That's\n             // the one we'll want to we'll probe for it later.\n-            toplevel.push((filename.file_stem().unwrap()\n-                                    .to_str().unwrap().to_string(),\n-                            filename.extension().unwrap().to_owned()\n-                                    .to_str().unwrap().to_string()));\n+            //\n+            // We do not use `Path::file_stem` or `Path::extension` here,\n+            // because some generated files may have multiple extensions e.g.\n+            // `std-<hash>.dll.lib` on Windows. The aforementioned methods only\n+            // split the file name by the last extension (`.lib`) while we need\n+            // to split by all extensions (`.dll.lib`).\n+            let filename = filename.file_name().unwrap().to_str().unwrap();\n+            let mut parts = filename.splitn(2, '.');\n+            let file_stem = parts.next().unwrap().to_owned();\n+            let extension = parts.next().unwrap().to_owned();\n+\n+            toplevel.push((file_stem, extension));\n         }\n     }\n "}, {"sha": "07849a20d00458d446b1d936d22ddfcd5059a0a3", "filename": "src/ci/docker/asmjs/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -31,4 +31,4 @@ ENV TARGETS=asmjs-unknown-emscripten\n \n ENV RUST_CONFIGURE_ARGS --target=$TARGETS\n \n-ENV SCRIPT python2.7 ../x.py test --target $TARGETS src/test/run-pass\n+ENV SCRIPT python2.7 ../x.py test --target $TARGETS"}, {"sha": "b3c11ed1b5ac4d245ee0f0c1e462dbe4b20fbd70", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -665,16 +665,36 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<T> Hash for *const T {\n+    impl<T: ?Sized> Hash for *const T {\n         fn hash<H: Hasher>(&self, state: &mut H) {\n-            state.write_usize(*self as usize)\n+            if mem::size_of::<Self>() == mem::size_of::<usize>() {\n+                // Thin pointer\n+                state.write_usize(*self as *const () as usize);\n+            } else {\n+                // Fat pointer\n+                let (a, b) = unsafe {\n+                    *(self as *const Self as *const (usize, usize))\n+                };\n+                state.write_usize(a);\n+                state.write_usize(b);\n+            }\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<T> Hash for *mut T {\n+    impl<T: ?Sized> Hash for *mut T {\n         fn hash<H: Hasher>(&self, state: &mut H) {\n-            state.write_usize(*self as usize)\n+            if mem::size_of::<Self>() == mem::size_of::<usize>() {\n+                // Thin pointer\n+                state.write_usize(*self as *const () as usize);\n+            } else {\n+                // Fat pointer\n+                let (a, b) = unsafe {\n+                    *(self as *const Self as *const (usize, usize))\n+                };\n+                state.write_usize(a);\n+                state.write_usize(b);\n+            }\n         }\n     }\n }"}, {"sha": "8716421b424deb3106639ead19edc26954838fd3", "filename": "src/libcore/tests/hash/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -79,6 +79,14 @@ fn test_writer_hasher() {\n \n     let ptr = 5_usize as *mut i32;\n     assert_eq!(hash(&ptr), 5);\n+\n+    let cs: &mut [u8] = &mut [1, 2, 3];\n+    let ptr = cs.as_ptr();\n+    let slice_ptr = cs as *const [u8];\n+    assert_eq!(hash(&slice_ptr), hash(&ptr) + cs.len() as u64);\n+\n+    let slice_ptr = cs as *mut [u8];\n+    assert_eq!(hash(&slice_ptr), hash(&ptr) + cs.len() as u64);\n }\n \n struct Custom { hash: u64 }"}, {"sha": "1d9027275db82a5f1125e203227e4811fb4e4073", "filename": "src/librustc_back/target/sparcv9_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Flibrustc_back%2Ftarget%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Flibrustc_back%2Ftarget%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fsparcv9_sun_solaris.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> TargetResult {\n     // llvm calls this \"v9\"\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n+    base.exe_allocation_crate = None;\n \n     Ok(Target {\n         llvm_target: \"sparcv9-sun-solaris\".to_string(),"}, {"sha": "add128cc2cf6a16633cbe13ef75c0412dc36cc3c", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -744,7 +744,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         let mut err = self.cannot_reassign_immutable(span,\n                                                      &self.loan_path_to_string(lp),\n                                                      Origin::Ast);\n-        err.span_label(span, \"re-assignment of immutable variable\");\n+        err.span_label(span, \"cannot assign twice to immutable variable\");\n         if span != assign.span {\n             err.span_label(assign.span, format!(\"first assignment to `{}`\",\n                                               self.loan_path_to_string(lp)));"}, {"sha": "ee2ef00be57b6d1751ca4592c67592ea5bf465e7", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -1161,7 +1161,7 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n         self.tcx.cannot_reassign_immutable(span,\n                                            &self.describe_lvalue(lvalue),\n                                            Origin::Mir)\n-                .span_label(span, \"re-assignment of immutable variable\")\n+                .span_label(span, \"cannot assign twice to immutable variable\")\n                 .span_label(assigned_span, format!(\"first assignment to `{}`\",\n                                                    self.describe_lvalue(lvalue)))\n                 .emit();"}, {"sha": "5451da2148e7ddc5dfd96c83597634371f108041", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -232,7 +232,7 @@ pub trait BorrowckErrors {\n                                  -> DiagnosticBuilder\n     {\n         struct_span_err!(self, span, E0384,\n-                         \"re-assignment of immutable variable `{}`{OGN}\",\n+                         \"cannot assign twice to immutable variable `{}`{OGN}\",\n                          desc, OGN=o)\n     }\n "}, {"sha": "9978435a11243f6170f36f2af841afc7427246f0", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -171,10 +171,11 @@ nav.sub {\n \n .sidebar {\n \twidth: 200px;\n-\tposition: absolute;\n+\tposition: fixed;\n \tleft: 0;\n \ttop: 0;\n-\tmin-height: 100%;\n+\theight: 100vh;\n+\toverflow: auto;\n }\n \n .sidebar .current {"}, {"sha": "c19ece6a314e0bf7537a5d4e19c7bad234476b9c", "filename": "src/libstd/process.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -1310,6 +1310,25 @@ pub fn abort() -> ! {\n     unsafe { ::sys::abort_internal() };\n }\n \n+/// Returns the OS-assigned process identifier associated with this process.\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```no_run\n+/// #![feature(getpid)]\n+/// use std::process;\n+///\n+/// println!(\"My pid is {}\", process::id());\n+/// ```\n+///\n+///\n+#[unstable(feature = \"getpid\", issue = \"44971\", reason = \"recently added\")]\n+pub fn id() -> u32 {\n+    ::sys::os::getpid()\n+}\n+\n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use io::prelude::*;"}, {"sha": "c27e2ee172c6bbe5cf7b06419d6bbe4972dbec4c", "filename": "src/libstd/sys/redox/os.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -209,3 +209,7 @@ pub fn exit(code: i32) -> ! {\n     let _ = syscall::exit(code as usize);\n     unreachable!();\n }\n+\n+pub fn getpid() -> u32 {\n+    syscall::getpid().unwrap() as u32\n+}"}, {"sha": "40b73f1b3070407a376274a4566e24bbee50e854", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -511,3 +511,7 @@ pub fn home_dir() -> Option<PathBuf> {\n pub fn exit(code: i32) -> ! {\n     unsafe { libc::exit(code as c_int) }\n }\n+\n+pub fn getpid() -> u32 {\n+    unsafe { libc::getpid() as u32 }\n+}"}, {"sha": "b94482435597e4be2b8ceea0fc7914ea16cd7d12", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -318,6 +318,10 @@ pub fn exit(code: i32) -> ! {\n     unsafe { c::ExitProcess(code as c::UINT) }\n }\n \n+pub fn getpid() -> u32 {\n+    unsafe { c::GetCurrentProcessId() as u32 }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use io::Error;"}, {"sha": "f2629fa52ffddc6ff1ff1b8a48159e1e5363f140", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -27,8 +27,8 @@ pub fn main() {\n     foo(x);\n     unsafe {\n         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n-        //~^ ERROR re-assignment of immutable variable `x`\n-        //~| NOTE re-assignment of immutable\n+        //~^ ERROR cannot assign twice to immutable variable `x`\n+        //~| NOTE cannot assign twice to immutable\n     }\n     foo(x);\n }"}, {"sha": "5b3b7d44bd2b9d7f3956336a56feafa1a35ba1ba", "filename": "src/test/compile-fail/assign-imm-local-twice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -12,8 +12,8 @@ fn test() {\n     let v: isize;\n     v = 1; //~ NOTE first assignment\n     println!(\"v={}\", v);\n-    v = 2; //~ ERROR re-assignment of immutable variable\n-           //~| NOTE re-assignment of immutable\n+    v = 2; //~ ERROR cannot assign twice to immutable variable\n+           //~| NOTE cannot assign twice to immutable\n     println!(\"v={}\", v);\n }\n "}, {"sha": "ea30911b3cc797434b2d03c78142bc4300f9c697", "filename": "src/test/compile-fail/borrowck/borrowck-match-binding-is-assignment.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -26,39 +26,39 @@ struct S {\n pub fn main() {\n     match 1 {\n         x => {\n-            x += 1; //[ast]~ ERROR re-assignment of immutable variable `x`\n+            x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n                     //[mir]~^ ERROR (Mir) [E0384]\n                     //[mir]~| ERROR (Ast) [E0384]\n         }\n     }\n \n     match E::Foo(1) {\n         E::Foo(x) => {\n-            x += 1; //[ast]~ ERROR re-assignment of immutable variable `x`\n+            x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n                     //[mir]~^ ERROR (Mir) [E0384]\n                     //[mir]~| ERROR (Ast) [E0384]\n         }\n     }\n \n     match (S { bar: 1 }) {\n         S { bar: x } => {\n-            x += 1; //[ast]~ ERROR re-assignment of immutable variable `x`\n+            x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n                     //[mir]~^ ERROR (Mir) [E0384]\n                     //[mir]~| ERROR (Ast) [E0384]\n         }\n     }\n \n     match (1,) {\n         (x,) => {\n-            x += 1; //[ast]~ ERROR re-assignment of immutable variable `x`\n+            x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n                     //[mir]~^ ERROR (Mir) [E0384]\n                     //[mir]~| ERROR (Ast) [E0384]\n         }\n     }\n \n     match [1,2,3] {\n         [x,_,_] => {\n-            x += 1; //[ast]~ ERROR re-assignment of immutable variable `x`\n+            x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n                     //[mir]~^ ERROR (Mir) [E0384]\n                     //[mir]~| ERROR (Ast) [E0384]\n         }"}, {"sha": "fa8f264eb5a5f6abd2ef265629b1fbb96c0f2f30", "filename": "src/test/compile-fail/liveness-assign-imm-local-in-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-loop.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -11,8 +11,8 @@\n fn test() {\n     let v: isize;\n     loop {\n-        v = 1; //~ ERROR re-assignment of immutable variable\n-        //~^ NOTE re-assignment of immutable variable\n+        v = 1; //~ ERROR cannot assign twice to immutable variable\n+        //~^ NOTE cannot assign twice to immutable variable\n         v.clone(); // just to prevent liveness warnings\n     }\n }"}, {"sha": "bfdd4347de74e5416368968b354ed18ee5a87c77", "filename": "src/test/compile-fail/liveness-assign-imm-local-in-op-eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-op-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-op-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-op-eq.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -11,8 +11,8 @@\n fn test() {\n     let v: isize;\n     v = 2;  //~ NOTE first assignment\n-    v += 1; //~ ERROR re-assignment of immutable variable\n-            //~| NOTE re-assignment of immutable\n+    v += 1; //~ ERROR cannot assign twice to immutable variable\n+            //~| NOTE cannot assign twice to immutable\n     v.clone();\n }\n "}, {"sha": "f35c1c69acdf89e45b31d4953e9923f1c94d3f98", "filename": "src/test/compile-fail/liveness-assign-imm-local-with-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-with-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-with-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-with-init.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -11,8 +11,8 @@\n fn test() {\n     let v: isize = 1; //~ NOTE first assignment\n     v.clone();\n-    v = 2; //~ ERROR re-assignment of immutable variable\n-           //~| NOTE re-assignment of immutable\n+    v = 2; //~ ERROR cannot assign twice to immutable variable\n+           //~| NOTE cannot assign twice to immutable\n     v.clone();\n }\n "}, {"sha": "1c7bc9d73037cff87dd97b559d2ba5790fb3554d", "filename": "src/test/compile-fail/mut-pattern-internal-mutability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e847f30f571e617990f7193665ab10127100e9df/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847f30f571e617990f7193665ab10127100e9df/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs?ref=e847f30f571e617990f7193665ab10127100e9df", "patch": "@@ -15,9 +15,9 @@ fn main() {\n     let foo = &mut 1;\n \n     let &mut x = foo;\n-    x += 1; //[ast]~ ERROR re-assignment of immutable variable\n-            //[mir]~^ ERROR re-assignment of immutable variable `x` (Ast)\n-            //[mir]~| ERROR re-assignment of immutable variable `x` (Mir)\n+    x += 1; //[ast]~ ERROR cannot assign twice to immutable variable\n+            //[mir]~^ ERROR cannot assign twice to immutable variable `x` (Ast)\n+            //[mir]~| ERROR cannot assign twice to immutable variable `x` (Mir)\n \n     // explicitly mut-ify internals\n     let &mut mut x = foo;"}]}