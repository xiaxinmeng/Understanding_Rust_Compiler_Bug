{"sha": "f6360b4eabb695ad37fae6aa6b589639852c0b4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MzYwYjRlYWJiNjk1YWQzN2ZhZTZhYTZiNTg5NjM5ODUyYzBiNGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-16T03:28:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-16T03:28:45Z"}, "message": "auto merge of #6527 : thestinger/rust/deep_clone, r=pcwalton", "tree": {"sha": "86c821b8ad23d43a767f21a45d9130fd626f47b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86c821b8ad23d43a767f21a45d9130fd626f47b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6360b4eabb695ad37fae6aa6b589639852c0b4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6360b4eabb695ad37fae6aa6b589639852c0b4e", "html_url": "https://github.com/rust-lang/rust/commit/f6360b4eabb695ad37fae6aa6b589639852c0b4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6360b4eabb695ad37fae6aa6b589639852c0b4e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2329651770d026ff422ad40dabe576965f46c852", "url": "https://api.github.com/repos/rust-lang/rust/commits/2329651770d026ff422ad40dabe576965f46c852", "html_url": "https://github.com/rust-lang/rust/commit/2329651770d026ff422ad40dabe576965f46c852"}, {"sha": "d6a8343470dd40b3db4dea39041aec9e9f92a465", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a8343470dd40b3db4dea39041aec9e9f92a465", "html_url": "https://github.com/rust-lang/rust/commit/d6a8343470dd40b3db4dea39041aec9e9f92a465"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "9c1c83b47cacd998093a660afce3d2387927545b", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f6360b4eabb695ad37fae6aa6b589639852c0b4e/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6360b4eabb695ad37fae6aa6b589639852c0b4e/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=f6360b4eabb695ad37fae6aa6b589639852c0b4e", "patch": "@@ -22,6 +22,8 @@ by convention implementing the `Clone` trait and calling the\n \n */\n \n+use core::kinds::Const;\n+\n pub trait Clone {\n     /// Return a deep copy of the owned object tree. Types with shared ownership like managed boxes\n     /// are cloned with a shallow copy.\n@@ -78,11 +80,32 @@ clone_impl!(char)\n \n pub trait DeepClone {\n     /// Return a deep copy of the object tree. Types with shared ownership are also copied via a\n-    /// deep copy, unlike `Clone`. Note that this is currently unimplemented for managed boxes, as\n-    /// it would need to handle cycles.\n+    /// deep copy, unlike `Clone`.\n     fn deep_clone(&self) -> Self;\n }\n \n+impl<T: DeepClone> DeepClone for ~T {\n+    /// Return a deep copy of the owned box.\n+    #[inline(always)]\n+    fn deep_clone(&self) -> ~T { ~(**self).deep_clone() }\n+}\n+\n+// FIXME: #6525: should also be implemented for `T: Owned + DeepClone`\n+impl<T: Const + DeepClone> DeepClone for @T {\n+    /// Return a deep copy of the managed box. The `Const` trait is required to prevent performing\n+    /// a deep clone of a potentially cyclical type.\n+    #[inline(always)]\n+    fn deep_clone(&self) -> @T { @(**self).deep_clone() }\n+}\n+\n+// FIXME: #6525: should also be implemented for `T: Owned + DeepClone`\n+impl<T: Const + DeepClone> DeepClone for @mut T {\n+    /// Return a deep copy of the managed box. The `Const` trait is required to prevent performing\n+    /// a deep clone of a potentially cyclical type.\n+    #[inline(always)]\n+    fn deep_clone(&self) -> @mut T { @mut (**self).deep_clone() }\n+}\n+\n macro_rules! deep_clone_impl(\n     ($t:ty) => {\n         impl DeepClone for $t {\n@@ -93,12 +116,6 @@ macro_rules! deep_clone_impl(\n     }\n )\n \n-impl<T: DeepClone> DeepClone for ~T {\n-    /// Return a deep copy of the owned box.\n-    #[inline(always)]\n-    fn deep_clone(&self) -> ~T { ~(**self).deep_clone() }\n-}\n-\n deep_clone_impl!(int)\n deep_clone_impl!(i8)\n deep_clone_impl!(i16)\n@@ -121,21 +138,29 @@ deep_clone_impl!(char)\n \n #[test]\n fn test_owned_clone() {\n-    let a: ~int = ~5i;\n+    let a = ~5i;\n     let b: ~int = a.clone();\n     assert!(a == b);\n }\n \n #[test]\n fn test_managed_clone() {\n-    let a: @int = @5i;\n+    let a = @5i;\n     let b: @int = a.clone();\n     assert!(a == b);\n }\n \n+#[test]\n+fn test_managed_mut_deep_clone() {\n+    let x = @mut 5i;\n+    let y: @mut int = x.deep_clone();\n+    *x = 20;\n+    assert_eq!(*y, 5);\n+}\n+\n #[test]\n fn test_managed_mut_clone() {\n-    let a: @mut int = @mut 5i;\n+    let a = @mut 5i;\n     let b: @mut int = a.clone();\n     assert!(a == b);\n     *b = 10;"}]}