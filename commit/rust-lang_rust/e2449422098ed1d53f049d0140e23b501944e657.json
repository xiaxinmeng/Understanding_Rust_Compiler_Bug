{"sha": "e2449422098ed1d53f049d0140e23b501944e657", "node_id": "C_kwDOAAsO6NoAKGUyNDQ5NDIyMDk4ZWQxZDUzZjA0OWQwMTQwZTIzYjUwMTk0NGU2NTc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-29T17:13:40Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-30T13:11:22Z"}, "message": "internal: Set Durability to HIGH for enable_proc_attr_macros input", "tree": {"sha": "361b676fda3868612103bd2460093f647610be0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/361b676fda3868612103bd2460093f647610be0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2449422098ed1d53f049d0140e23b501944e657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2449422098ed1d53f049d0140e23b501944e657", "html_url": "https://github.com/rust-lang/rust/commit/e2449422098ed1d53f049d0140e23b501944e657", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2449422098ed1d53f049d0140e23b501944e657/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5390949c119ce53e3467bb05e19c38eef5dac3b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5390949c119ce53e3467bb05e19c38eef5dac3b8", "html_url": "https://github.com/rust-lang/rust/commit/5390949c119ce53e3467bb05e19c38eef5dac3b8"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "dcc21db7409f7df158668dbf19f7bd7a31ab24f1", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=e2449422098ed1d53f049d0140e23b501944e657", "patch": "@@ -590,7 +590,7 @@ impl<'a> AssocItemCollector<'a> {\n                 ) {\n                     self.attr_calls.push((ast_id, call_id));\n                     // If proc attribute macro expansion is disabled, skip expanding it here\n-                    if !self.db.enable_proc_attr_macros() {\n+                    if !self.db.expand_proc_attr_macros() {\n                         continue 'attrs;\n                     }\n                     let loc = self.db.lookup_intern_macro_call(call_id);"}, {"sha": "8d236aca3674d5e19d377c9ec145a52f39dd8d95", "filename": "crates/hir-def/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fhir-def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fhir-def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdb.rs?ref=e2449422098ed1d53f049d0140e23b501944e657", "patch": "@@ -66,7 +66,7 @@ pub trait InternDatabase: SourceDatabase {\n #[salsa::query_group(DefDatabaseStorage)]\n pub trait DefDatabase: InternDatabase + ExpandDatabase + Upcast<dyn ExpandDatabase> {\n     #[salsa::input]\n-    fn enable_proc_attr_macros(&self) -> bool;\n+    fn expand_proc_attr_macros(&self) -> bool;\n \n     #[salsa::invoke(ItemTree::file_item_tree_query)]\n     fn file_item_tree(&self, file_id: HirFileId) -> Arc<ItemTree>;"}, {"sha": "84c7a80e150367ee50e89c70fb95732df18ad131", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e2449422098ed1d53f049d0140e23b501944e657", "patch": "@@ -1282,7 +1282,7 @@ impl DefCollector<'_> {\n                     let loc: MacroCallLoc = self.db.lookup_intern_macro_call(call_id);\n \n                     // If proc attribute macro expansion is disabled, skip expanding it here\n-                    if !self.db.enable_proc_attr_macros() {\n+                    if !self.db.expand_proc_attr_macros() {\n                         self.def_map.diagnostics.push(DefDiagnostic::unresolved_proc_macro(\n                             directive.module_id,\n                             loc.kind,"}, {"sha": "a6d388105bbe47b860ba8f450ffae9819a59e786", "filename": "crates/hir-def/src/test_db.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftest_db.rs?ref=e2449422098ed1d53f049d0140e23b501944e657", "patch": "@@ -6,8 +6,9 @@ use std::{\n };\n \n use base_db::{\n-    salsa, AnchoredPath, CrateId, FileId, FileLoader, FileLoaderDelegate, FilePosition,\n-    SourceDatabase, Upcast,\n+    salsa::{self, Durability},\n+    AnchoredPath, CrateId, FileId, FileLoader, FileLoaderDelegate, FilePosition, SourceDatabase,\n+    Upcast,\n };\n use hir_expand::{db::ExpandDatabase, InFile};\n use stdx::hash::NoHashHashSet;\n@@ -35,7 +36,7 @@ pub(crate) struct TestDB {\n impl Default for TestDB {\n     fn default() -> Self {\n         let mut this = Self { storage: Default::default(), events: Default::default() };\n-        this.set_enable_proc_attr_macros(true);\n+        this.set_expand_proc_attr_macros_with_durability(true, Durability::HIGH);\n         this\n     }\n }"}, {"sha": "10e08f01720dddc82045a59967dc8eb6193c7797", "filename": "crates/hir-ty/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs?ref=e2449422098ed1d53f049d0140e23b501944e657", "patch": "@@ -6,7 +6,8 @@ use std::{\n };\n \n use base_db::{\n-    salsa, AnchoredPath, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase, Upcast,\n+    salsa::{self, Durability},\n+    AnchoredPath, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase, Upcast,\n };\n use hir_def::{db::DefDatabase, ModuleId};\n use hir_expand::db::ExpandDatabase;\n@@ -30,7 +31,7 @@ pub(crate) struct TestDB {\n impl Default for TestDB {\n     fn default() -> Self {\n         let mut this = Self { storage: Default::default(), events: Default::default() };\n-        this.set_enable_proc_attr_macros(true);\n+        this.set_expand_proc_attr_macros_with_durability(true, Durability::HIGH);\n         this\n     }\n }"}, {"sha": "6e161ca43969d40d568c27bd7fb0dfb858b7004b", "filename": "crates/ide-assists/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fide-assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fide-assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests.rs?ref=e2449422098ed1d53f049d0140e23b501944e657", "patch": "@@ -3,7 +3,7 @@ mod generated;\n mod sourcegen;\n \n use expect_test::expect;\n-use hir::{db::DefDatabase, Semantics};\n+use hir::Semantics;\n use ide_db::{\n     base_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt},\n     imports::insert_use::{ImportGranularity, InsertUseConfig},\n@@ -161,7 +161,7 @@ fn check_with_config(\n     assist_label: Option<&str>,\n ) {\n     let (mut db, file_with_caret_id, range_or_offset) = RootDatabase::with_range_or_offset(before);\n-    db.set_enable_proc_attr_macros(true);\n+    db.enable_proc_attr_macros();\n     let text_without_caret = db.file_text(file_with_caret_id).to_string();\n \n     let frange = FileRange { file_id: file_with_caret_id, range: range_or_offset.into() };"}, {"sha": "05e6aaf09d97e7f2d17c77729d3b8ee9f9724963", "filename": "crates/ide-completion/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fide-completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fide-completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests.rs?ref=e2449422098ed1d53f049d0140e23b501944e657", "patch": "@@ -23,7 +23,7 @@ mod type_pos;\n mod use_tree;\n mod visibility;\n \n-use hir::{db::DefDatabase, PrefixKind};\n+use hir::PrefixKind;\n use ide_db::{\n     base_db::{fixture::ChangeFixture, FileLoader, FilePosition},\n     imports::insert_use::{ImportGranularity, InsertUseConfig},\n@@ -120,7 +120,7 @@ fn completion_list_with_config(\n pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n     let mut database = RootDatabase::default();\n-    database.set_enable_proc_attr_macros(true);\n+    database.enable_proc_attr_macros();\n     database.apply_change(change_fixture.change);\n     let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n     let offset = range_or_offset.expect_offset();"}, {"sha": "bd8b48b03624d2b1f7212105465d54a94dbb73a7", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=e2449422098ed1d53f049d0140e23b501944e657", "patch": "@@ -140,11 +140,15 @@ impl RootDatabase {\n         db.set_proc_macros_with_durability(Default::default(), Durability::HIGH);\n         db.set_local_roots_with_durability(Default::default(), Durability::HIGH);\n         db.set_library_roots_with_durability(Default::default(), Durability::HIGH);\n-        db.set_enable_proc_attr_macros(false);\n+        db.set_expand_proc_attr_macros_with_durability(false, Durability::HIGH);\n         db.update_parse_query_lru_capacity(lru_capacity);\n         db\n     }\n \n+    pub fn enable_proc_attr_macros(&mut self) {\n+        self.set_expand_proc_attr_macros_with_durability(true, Durability::HIGH);\n+    }\n+\n     pub fn update_parse_query_lru_capacity(&mut self, lru_capacity: Option<usize>) {\n         let lru_capacity = lru_capacity.unwrap_or(base_db::DEFAULT_LRU_CAP);\n         base_db::ParseQuery.in_db_mut(self).set_lru_capacity(lru_capacity);"}, {"sha": "79665b9eed5d40dc7106ed24a7e47915d3413e5a", "filename": "crates/ide/src/fixture.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fide%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2449422098ed1d53f049d0140e23b501944e657/crates%2Fide%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffixture.rs?ref=e2449422098ed1d53f049d0140e23b501944e657", "patch": "@@ -1,5 +1,4 @@\n //! Utilities for creating `Analysis` instances for tests.\n-use hir::db::DefDatabase;\n use ide_db::base_db::fixture::ChangeFixture;\n use test_utils::{extract_annotations, RangeOrOffset};\n \n@@ -9,7 +8,7 @@ use crate::{Analysis, AnalysisHost, FileId, FilePosition, FileRange};\n pub(crate) fn file(ra_fixture: &str) -> (Analysis, FileId) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n-    host.db.set_enable_proc_attr_macros(true);\n+    host.db.enable_proc_attr_macros();\n     host.db.apply_change(change_fixture.change);\n     (host.analysis(), change_fixture.files[0])\n }\n@@ -18,7 +17,7 @@ pub(crate) fn file(ra_fixture: &str) -> (Analysis, FileId) {\n pub(crate) fn position(ra_fixture: &str) -> (Analysis, FilePosition) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n-    host.db.set_enable_proc_attr_macros(true);\n+    host.db.enable_proc_attr_macros();\n     host.db.apply_change(change_fixture.change);\n     let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n     let offset = range_or_offset.expect_offset();\n@@ -29,7 +28,7 @@ pub(crate) fn position(ra_fixture: &str) -> (Analysis, FilePosition) {\n pub(crate) fn range(ra_fixture: &str) -> (Analysis, FileRange) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n-    host.db.set_enable_proc_attr_macros(true);\n+    host.db.enable_proc_attr_macros();\n     host.db.apply_change(change_fixture.change);\n     let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n     let range = range_or_offset.expect_range();\n@@ -40,7 +39,7 @@ pub(crate) fn range(ra_fixture: &str) -> (Analysis, FileRange) {\n pub(crate) fn range_or_position(ra_fixture: &str) -> (Analysis, FileId, RangeOrOffset) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n-    host.db.set_enable_proc_attr_macros(true);\n+    host.db.enable_proc_attr_macros();\n     host.db.apply_change(change_fixture.change);\n     let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n     (host.analysis(), file_id, range_or_offset)\n@@ -50,7 +49,7 @@ pub(crate) fn range_or_position(ra_fixture: &str) -> (Analysis, FileId, RangeOrO\n pub(crate) fn annotations(ra_fixture: &str) -> (Analysis, FilePosition, Vec<(FileRange, String)>) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n-    host.db.set_enable_proc_attr_macros(true);\n+    host.db.enable_proc_attr_macros();\n     host.db.apply_change(change_fixture.change);\n     let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n     let offset = range_or_offset.expect_offset();\n@@ -71,7 +70,7 @@ pub(crate) fn annotations(ra_fixture: &str) -> (Analysis, FilePosition, Vec<(Fil\n pub(crate) fn annotations_without_marker(ra_fixture: &str) -> (Analysis, Vec<(FileRange, String)>) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n-    host.db.set_enable_proc_attr_macros(true);\n+    host.db.enable_proc_attr_macros();\n     host.db.apply_change(change_fixture.change);\n \n     let annotations = change_fixture"}, {"sha": "85a410f7b47c4328536a407222e7fa7cd644582d", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2449422098ed1d53f049d0140e23b501944e657/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2449422098ed1d53f049d0140e23b501944e657/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=e2449422098ed1d53f049d0140e23b501944e657", "patch": "@@ -4,7 +4,6 @@ use std::{convert::identity, path::Path, sync::Arc};\n \n use anyhow::Result;\n use crossbeam_channel::{unbounded, Receiver};\n-use hir::db::DefDatabase;\n use ide::{AnalysisHost, Change};\n use ide_db::{\n     base_db::{CrateGraph, ProcMacros},\n@@ -143,7 +142,7 @@ fn load_crate_graph(\n     let mut host = AnalysisHost::new(lru_cap);\n     let mut analysis_change = Change::new();\n \n-    host.raw_database_mut().set_enable_proc_attr_macros(true);\n+    host.raw_database_mut().enable_proc_attr_macros();\n \n     // wait until Vfs has loaded all roots\n     for task in receiver {"}, {"sha": "ec90cb17f7c13f8a60b36f28f3092c89b52c680f", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e2449422098ed1d53f049d0140e23b501944e657/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2449422098ed1d53f049d0140e23b501944e657/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=e2449422098ed1d53f049d0140e23b501944e657", "patch": "@@ -19,8 +19,8 @@ use hir::db::DefDatabase;\n use ide::Change;\n use ide_db::{\n     base_db::{\n-        CrateGraph, Env, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, ProcMacroKind,\n-        ProcMacroLoadResult, ProcMacroPaths, ProcMacros, SourceRoot, VfsPath,\n+        salsa::Durability, CrateGraph, Env, ProcMacro, ProcMacroExpander, ProcMacroExpansionError,\n+        ProcMacroKind, ProcMacroLoadResult, ProcMacroPaths, ProcMacros, SourceRoot, VfsPath,\n     },\n     FxHashMap,\n };\n@@ -88,12 +88,13 @@ impl GlobalState {\n             self.reload_flycheck();\n         }\n \n-        if self.analysis_host.raw_database().enable_proc_attr_macros()\n+        if self.analysis_host.raw_database().expand_proc_attr_macros()\n             != self.config.expand_proc_attr_macros()\n         {\n-            self.analysis_host\n-                .raw_database_mut()\n-                .set_enable_proc_attr_macros(self.config.expand_proc_attr_macros());\n+            self.analysis_host.raw_database_mut().set_expand_proc_attr_macros_with_durability(\n+                self.config.expand_proc_attr_macros(),\n+                Durability::HIGH,\n+            );\n         }\n     }\n "}]}