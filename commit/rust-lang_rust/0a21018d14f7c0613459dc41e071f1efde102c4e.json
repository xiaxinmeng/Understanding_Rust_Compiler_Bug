{"sha": "0a21018d14f7c0613459dc41e071f1efde102c4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMjEwMThkMTRmN2MwNjEzNDU5ZGM0MWUwNzFmMWVmZGUxMDJjNGU=", "commit": {"author": {"name": "msizanoen", "email": "qtmlabs@protonmail.com", "date": "2019-10-22T08:47:07Z"}, "committer": {"name": "msizanoen1", "email": "qtmlabs@protonmail.com", "date": "2019-10-31T06:12:35Z"}, "message": "Implement dual proc macro hashing\nThis changes the mechanism of `-Z dual-proc-macro` to record the host\nproc macro hash in the transistive dependency information and use it\nduring dependency resolution instead of resolving only by name.", "tree": {"sha": "13950ea887814567cde07922414ace83ff5d3e63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13950ea887814567cde07922414ace83ff5d3e63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a21018d14f7c0613459dc41e071f1efde102c4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a21018d14f7c0613459dc41e071f1efde102c4e", "html_url": "https://github.com/rust-lang/rust/commit/0a21018d14f7c0613459dc41e071f1efde102c4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a21018d14f7c0613459dc41e071f1efde102c4e/comments", "author": {"login": "msizanoen1", "id": 55322658, "node_id": "MDQ6VXNlcjU1MzIyNjU4", "avatar_url": "https://avatars.githubusercontent.com/u/55322658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msizanoen1", "html_url": "https://github.com/msizanoen1", "followers_url": "https://api.github.com/users/msizanoen1/followers", "following_url": "https://api.github.com/users/msizanoen1/following{/other_user}", "gists_url": "https://api.github.com/users/msizanoen1/gists{/gist_id}", "starred_url": "https://api.github.com/users/msizanoen1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msizanoen1/subscriptions", "organizations_url": "https://api.github.com/users/msizanoen1/orgs", "repos_url": "https://api.github.com/users/msizanoen1/repos", "events_url": "https://api.github.com/users/msizanoen1/events{/privacy}", "received_events_url": "https://api.github.com/users/msizanoen1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msizanoen1", "id": 55322658, "node_id": "MDQ6VXNlcjU1MzIyNjU4", "avatar_url": "https://avatars.githubusercontent.com/u/55322658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msizanoen1", "html_url": "https://github.com/msizanoen1", "followers_url": "https://api.github.com/users/msizanoen1/followers", "following_url": "https://api.github.com/users/msizanoen1/following{/other_user}", "gists_url": "https://api.github.com/users/msizanoen1/gists{/gist_id}", "starred_url": "https://api.github.com/users/msizanoen1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msizanoen1/subscriptions", "organizations_url": "https://api.github.com/users/msizanoen1/orgs", "repos_url": "https://api.github.com/users/msizanoen1/repos", "events_url": "https://api.github.com/users/msizanoen1/events{/privacy}", "received_events_url": "https://api.github.com/users/msizanoen1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f16be42dd64669b784559e98662d9712ce13fab", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f16be42dd64669b784559e98662d9712ce13fab", "html_url": "https://github.com/rust-lang/rust/commit/2f16be42dd64669b784559e98662d9712ce13fab"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "1f4086227327e2af7111e594112e3b17a363b43b", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=0a21018d14f7c0613459dc41e071f1efde102c4e", "patch": "@@ -216,6 +216,7 @@ pub trait CrateStore {\n     fn crate_is_private_dep_untracked(&self, cnum: CrateNum) -> bool;\n     fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator;\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n+    fn crate_host_hash_untracked(&self, cnum: CrateNum) -> Option<Svh>;\n     fn item_generics_cloned_untracked(&self, def: DefId, sess: &Session) -> ty::Generics;\n     fn postorder_cnums_untracked(&self) -> Vec<CrateNum>;\n "}, {"sha": "86ed2419e048b0a5934a95c43b55d97388f0e795", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=0a21018d14f7c0613459dc41e071f1efde102c4e", "patch": "@@ -754,6 +754,10 @@ rustc_queries! {\n             eval_always\n             desc { \"looking up the hash a crate\" }\n         }\n+        query crate_host_hash(_: CrateNum) -> Option<Svh> {\n+            eval_always\n+            desc { \"looking up the hash of a host version of a crate\" }\n+        }\n         query original_crate_name(_: CrateNum) -> Symbol {\n             eval_always\n             desc { \"looking up the original name a crate\" }"}, {"sha": "25e953ee257ec9b3c0c66051a986d4a6ec2152dd", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=0a21018d14f7c0613459dc41e071f1efde102c4e", "patch": "@@ -3015,6 +3015,10 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         assert_eq!(cnum, LOCAL_CRATE);\n         tcx.arena.alloc_slice(&tcx.cstore.crates_untracked())\n     };\n+    providers.crate_host_hash = |tcx, cnum| {\n+        assert_ne!(cnum, LOCAL_CRATE);\n+        tcx.cstore.crate_host_hash_untracked(cnum)\n+    };\n     providers.postorder_cnums = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         tcx.arena.alloc_slice(&tcx.cstore.postorder_cnums_untracked())"}, {"sha": "07c49d91797d46fb1a0928436ab8052c39c5fee4", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=0a21018d14f7c0613459dc41e071f1efde102c4e", "patch": "@@ -191,6 +191,7 @@ impl<'a> CrateLoader<'a> {\n \n         let Library { source, metadata } = lib;\n         let crate_root = metadata.get_root();\n+        let host_hash = host_lib.as_ref().map(|lib| lib.metadata.get_root().hash);\n         self.verify_no_symbol_conflicts(span, &crate_root);\n \n         let private_dep = self.sess.opts.externs.get(&name.as_str())\n@@ -245,6 +246,7 @@ impl<'a> CrateLoader<'a> {\n             def_path_table,\n             trait_impls,\n             root: crate_root,\n+            host_hash,\n             blob: metadata,\n             cnum_map,\n             cnum,\n@@ -283,9 +285,7 @@ impl<'a> CrateLoader<'a> {\n                 LoadResult::Previous(cnum) => return Some((LoadResult::Previous(cnum), None)),\n                 LoadResult::Loaded(library) => Some(LoadResult::Loaded(library))\n             };\n-            // Don't look for a matching hash when looking for the host crate.\n-            // It won't be the same as the target crate hash\n-            locate_ctxt.hash = None;\n+            locate_ctxt.hash = locate_ctxt.host_hash;\n             // Use the locate_ctxt when looking for the host proc macro crate, as that is required\n             // so we want it to affect the error message\n             (locate_ctxt, result)\n@@ -334,10 +334,15 @@ impl<'a> CrateLoader<'a> {\n         dep: Option<(&'b CratePaths, &'b CrateDep)>,\n     ) -> Result<CrateNum, LoadError<'b>> {\n         info!(\"resolving crate `{}`\", name);\n-        let (root, hash, extra_filename, path_kind) = match dep {\n-            Some((root, dep)) =>\n-                (Some(root), Some(&dep.hash), Some(&dep.extra_filename[..]), PathKind::Dependency),\n-            None => (None, None, None, PathKind::Crate),\n+        let (root, hash, host_hash, extra_filename, path_kind) = match dep {\n+            Some((root, dep)) => (\n+                Some(root),\n+                Some(&dep.hash),\n+                dep.host_hash.as_ref(),\n+                Some(&dep.extra_filename[..]),\n+                PathKind::Dependency\n+            ),\n+            None => (None, None, None, None, PathKind::Crate),\n         };\n         let result = if let Some(cnum) = self.existing_match(name, hash, path_kind) {\n             (LoadResult::Previous(cnum), None)\n@@ -348,6 +353,7 @@ impl<'a> CrateLoader<'a> {\n                 span,\n                 crate_name: name,\n                 hash,\n+                host_hash,\n                 extra_filename,\n                 filesearch: self.sess.target_filesearch(path_kind),\n                 target: &self.sess.target.target,"}, {"sha": "b7596d2018f7efa7dbbccf165a0f379fa4ddac4a", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=0a21018d14f7c0613459dc41e071f1efde102c4e", "patch": "@@ -10,6 +10,7 @@ use rustc::mir::interpret::AllocDecodingState;\n use rustc_index::vec::IndexVec;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::sync::{Lrc, Lock, MetadataRef, Once, AtomicCell};\n+use rustc_data_structures::svh::Svh;\n use syntax::ast;\n use syntax::edition::Edition;\n use syntax_expand::base::SyntaxExtension;\n@@ -87,6 +88,8 @@ crate struct CrateMetadata {\n     /// Whether or not this crate should be consider a private dependency\n     /// for purposes of the 'exported_private_dependencies' lint\n     crate private_dep: bool,\n+    /// The hash for the host proc macro. Used to support `-Z dual-proc-macro`.\n+    crate host_hash: Option<Svh>,\n \n     // --- Data used only for improving diagnostics ---\n "}, {"sha": "2e6ed1d187a68ed58a09e9eb27893bb24acf3968", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=0a21018d14f7c0613459dc41e071f1efde102c4e", "patch": "@@ -505,6 +505,10 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).root.hash\n     }\n \n+    fn crate_host_hash_untracked(&self, cnum: CrateNum) -> Option<Svh> {\n+        self.get_crate_data(cnum).host_hash\n+    }\n+\n     /// Returns the `DefKey` for a given `DefId`. This indicates the\n     /// parent `DefId` as well as some idea of what kind of data the\n     /// `DefId` refers to."}, {"sha": "f2b0cfa53050863090a428edeccce8dbec1cc98a", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=0a21018d14f7c0613459dc41e071f1efde102c4e", "patch": "@@ -1418,6 +1418,7 @@ impl EncodeContext<'tcx> {\n                 let dep = CrateDep {\n                     name: self.tcx.original_crate_name(cnum),\n                     hash: self.tcx.crate_hash(cnum),\n+                    host_hash: self.tcx.crate_host_hash(cnum),\n                     kind: self.tcx.dep_kind(cnum),\n                     extra_filename: self.tcx.extra_filename(cnum),\n                 };"}, {"sha": "4a263250f9b0d799fba07133e41ca264b6b8f5c4", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=0a21018d14f7c0613459dc41e071f1efde102c4e", "patch": "@@ -258,6 +258,7 @@ crate struct Context<'a> {\n     pub span: Span,\n     pub crate_name: Symbol,\n     pub hash: Option<&'a Svh>,\n+    pub host_hash: Option<&'a Svh>,\n     pub extra_filename: Option<&'a str>,\n     // points to either self.sess.target.target or self.sess.host, must match triple\n     pub target: &'a Target,\n@@ -929,6 +930,7 @@ pub fn find_plugin_registrar(\n         span,\n         crate_name: name,\n         hash: None,\n+        host_hash: None,\n         extra_filename: None,\n         filesearch: sess.host_filesearch(PathKind::Crate),\n         target: &sess.host,"}, {"sha": "8bece2511166e5923bf3207acfd9be3954331f9b", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a21018d14f7c0613459dc41e071f1efde102c4e/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=0a21018d14f7c0613459dc41e071f1efde102c4e", "patch": "@@ -217,6 +217,7 @@ crate struct CrateRoot<'tcx> {\n crate struct CrateDep {\n     pub name: ast::Name,\n     pub hash: Svh,\n+    pub host_hash: Option<Svh>,\n     pub kind: DepKind,\n     pub extra_filename: String,\n }"}]}