{"sha": "ff2c609d662f0ffae9aafa6ff9f60441473e958e", "node_id": "C_kwDOAAsO6NoAKGZmMmM2MDlkNjYyZjBmZmFlOWFhZmE2ZmY5ZjYwNDQxNDczZTk1OGU", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-03-03T03:10:46Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-03-03T07:39:00Z"}, "message": "Match unmatched backticks in compiler/ that are part of rustdoc", "tree": {"sha": "a338e1cc18f26471b3c782edcd7e97cfec18132f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a338e1cc18f26471b3c782edcd7e97cfec18132f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff2c609d662f0ffae9aafa6ff9f60441473e958e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2c609d662f0ffae9aafa6ff9f60441473e958e", "html_url": "https://github.com/rust-lang/rust/commit/ff2c609d662f0ffae9aafa6ff9f60441473e958e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff2c609d662f0ffae9aafa6ff9f60441473e958e/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13471d3b2046cce78181dde6cfc146c09f55e29e", "url": "https://api.github.com/repos/rust-lang/rust/commits/13471d3b2046cce78181dde6cfc146c09f55e29e", "html_url": "https://github.com/rust-lang/rust/commit/13471d3b2046cce78181dde6cfc146c09f55e29e"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "b20157f2c7c8985ad8832ba0364e63eaafeb0b69", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -1607,7 +1607,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::OwnerNode::Item(self.arena.alloc(opaque_ty_item))\n     }\n \n-    /// Given a `parent_def_id`, a list of `lifetimes_in_bounds and a `remapping` hash to be\n+    /// Given a `parent_def_id`, a list of `lifetimes_in_bounds` and a `remapping` hash to be\n     /// filled, this function creates new definitions for `Param` and `Fresh` lifetimes, inserts the\n     /// new definition, adds it to the remapping with the definition of the given lifetime and\n     /// returns a list of lifetimes to be lowered afterwards."}, {"sha": "f34a688e35018ca0d2966fb176d3c2f2bf9a234e", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -415,7 +415,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     /// fn foo<'a, 'b>(x: &'a u32) -> &'b u32 { x }\n     /// ```\n     ///\n-    /// Here we would be invoked with `fr = 'a` and `outlived_fr = `'b`.\n+    /// Here we would be invoked with `fr = 'a` and `outlived_fr = 'b`.\n     pub(crate) fn report_region_error(\n         &mut self,\n         fr: RegionVid,"}, {"sha": "21b5bd7cb94dea7be8e2be6e147ad277bd0309ff", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -889,7 +889,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// from a universe it can't name; at present, the only way for\n     /// this to be true is if `scc` outlives `'static`. This is\n     /// actually stricter than necessary: ideally, we'd support bounds\n-    /// like `for<'a: 'b`>` that might then allow us to approximate\n+    /// like `for<'a: 'b>` that might then allow us to approximate\n     /// `'a` with `'b` and not `'static`. But it will have to do for\n     /// now.\n     fn add_incompatible_universe(&mut self, scc: ConstraintSccIndex) {"}, {"sha": "8132800f107a7b385680235bb0622a267e558776", "filename": "compiler/rustc_borrowck/src/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -235,7 +235,7 @@ pub(crate) struct RegionValues<N: Idx> {\n     free_regions: SparseBitMatrix<N, RegionVid>,\n \n     /// Placeholders represent bound regions -- so something like `'a`\n-    /// in for<'a> fn(&'a u32)`.\n+    /// in `for<'a> fn(&'a u32)`.\n     placeholders: SparseBitMatrix<N, PlaceholderIndex>,\n }\n "}, {"sha": "4a432328c4d1bcb7891ccb8d8aeaea5d1c532ecf", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -2223,7 +2223,7 @@ fn determine_place_ancestry_relation<'tcx>(\n ///     || drop(&*m.a.field_of_a)\n ///     // Here we really do want to capture `*m.a` because that outlives `'static`\n ///\n-///     // If we capture `m`, then the closure no longer outlives `'static'\n+///     // If we capture `m`, then the closure no longer outlives `'static`\n ///     // it is constrained to `'a`\n /// }\n /// ```"}, {"sha": "c550e553bb032990d92d9e19947a0b4d41072163", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -18,7 +18,7 @@\n //! the HIR doesn't change as a result of the annotations, which might\n //! perturb the reuse results.\n //!\n-//! `#![rustc_expected_cgu_reuse(module=\"spike\", cfg=\"rpass2\", kind=\"post-lto\")]\n+//! `#![rustc_expected_cgu_reuse(module=\"spike\", cfg=\"rpass2\", kind=\"post-lto\")]`\n //! allows for doing a more fine-grained check to see if pre- or post-lto data\n //! was re-used.\n "}, {"sha": "cbf169afb18c19a84084d6820cc8c9d9d6561a1e", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -1870,7 +1870,7 @@ impl<R: Idx, C: Idx> SparseBitMatrix<R, C> {\n         }\n     }\n \n-    /// Subtracts `set from `row`. `set` can be either `BitSet` or\n+    /// Subtracts `set` from `row`. `set` can be either `BitSet` or\n     /// `HybridBitSet`. Has no effect if `row` does not exist.\n     ///\n     /// Returns true if the row was changed."}, {"sha": "678c4a0beb63e8421c2bed59c2ac3839625688c0", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> InferCtxt<'tcx> {\n \n     /// Like [Self::canonicalize_query], but preserves distinct universes. For\n     /// example, canonicalizing `&'?0: Trait<'?1>`, where `'?0` is in `U1` and\n-    /// `'?1` is in `U3` would be canonicalized to have ?0` in `U1` and `'?1`\n+    /// `'?1` is in `U3` would be canonicalized to have `?0` in `U1` and `'?1`\n     /// in `U2`.\n     ///\n     /// This is used for Chalk integration."}, {"sha": "2c480355085efc5fcb9ef24a049010e825cb12d3", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -70,7 +70,7 @@ pub enum RegionResolutionError<'tcx> {\n     /// `o` requires that `a <= b`, but this does not hold\n     ConcreteFailure(SubregionOrigin<'tcx>, Region<'tcx>, Region<'tcx>),\n \n-    /// `GenericBoundFailure(p, s, a)\n+    /// `GenericBoundFailure(p, s, a)`:\n     ///\n     /// The parameter/associated-type `p` must be known to outlive the lifetime\n     /// `a` (but none of the known bounds are sufficient)."}, {"sha": "573cd91a2a2a65946704be04e95947626562eb28", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -50,7 +50,7 @@ where\n     ///\n     /// - Covariant means `a <: b`.\n     /// - Contravariant means `b <: a`.\n-    /// - Invariant means `a == b.\n+    /// - Invariant means `a == b`.\n     /// - Bivariant means that it doesn't matter.\n     ambient_variance: ty::Variance,\n "}, {"sha": "872f617474c066e616090af3a1072be297c6c96a", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -249,7 +249,7 @@ pub enum VerifyBound<'tcx> {\n /// in that case we can show `'b: 'c`. But if `'?x` winds up being something\n /// else, the bound isn't relevant.\n ///\n-/// In the [`VerifyBound`], this struct is enclosed in `Binder to account\n+/// In the [`VerifyBound`], this struct is enclosed in `Binder` to account\n /// for cases like\n ///\n /// ```rust"}, {"sha": "5b2100b5da9d1510b8e848bf17ab3a9c5be94c29", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -1288,7 +1288,7 @@ declare_lint! {\n }\n \n declare_lint_pass!(\n-    /// Explains corresponding feature flag must be enabled for the `#[track_caller] attribute to\n+    /// Explains corresponding feature flag must be enabled for the `#[track_caller]` attribute to\n     /// do anything\n     UngatedAsyncFnTrackCaller => [UNGATED_ASYNC_FN_TRACK_CALLER]\n );"}, {"sha": "5133da3429a9c54b6de756ee5e4491300c79ec0f", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -1672,7 +1672,7 @@ rustc_queries! {\n \n     /// Does lifetime resolution on items. Importantly, we can't resolve\n     /// lifetimes directly on things like trait methods, because of trait params.\n-    /// See `rustc_resolve::late::lifetimes for details.\n+    /// See `rustc_resolve::late::lifetimes` for details.\n     query resolve_bound_vars(_: hir::OwnerId) -> &'tcx ResolveBoundVars {\n         arena_cache\n         desc { \"resolving lifetimes\" }"}, {"sha": "527ec9f6e1cfef0c19bddd4241d5e922cca8c0fc", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -16,7 +16,7 @@ pub use int::*;\n pub use kind::*;\n pub use valtree::*;\n \n-/// Use this rather than `ConstData, whenever possible.\n+/// Use this rather than `ConstData`, whenever possible.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n #[rustc_pass_by_value]\n pub struct Const<'tcx>(pub(super) Interned<'tcx, ConstData<'tcx>>);"}, {"sha": "7c8deefa76ee47cc0601f6cf36997d74c3d75931", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -310,7 +310,7 @@ pub struct CommonLifetimes<'tcx> {\n     pub re_vars: Vec<Region<'tcx>>,\n \n     /// Pre-interned values of the form:\n-    /// `ReLateBound(DebruijnIndex(i), BoundRegion { var: v, kind: BrAnon(v, None) })\n+    /// `ReLateBound(DebruijnIndex(i), BoundRegion { var: v, kind: BrAnon(v, None) })`\n     /// for small values of `i` and `v`.\n     pub re_late_bounds: Vec<Vec<Region<'tcx>>>,\n }\n@@ -2450,7 +2450,7 @@ impl<'tcx> TyCtxtAt<'tcx> {\n         self.tcx.ty_error_with_message(self.span, \"TyKind::Error constructed but no error reported\")\n     }\n \n-    /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` with the given `msg to\n+    /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` with the given `msg` to\n     /// ensure it gets used.\n     #[track_caller]\n     pub fn ty_error_with_message(self, msg: &str) -> Ty<'tcx> {"}, {"sha": "2959ca272f71eae49031b724796ae3daa0a6101f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -2444,7 +2444,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         None\n     }\n \n-    /// Check if the given `DefId` is `#\\[automatically_derived\\], *and*\n+    /// Check if the given `DefId` is `#\\[automatically_derived\\]`, *and*\n     /// whether it was produced by expanding a builtin derive macro.\n     pub fn is_builtin_derived(self, def_id: DefId) -> bool {\n         if self.is_automatically_derived(def_id)"}, {"sha": "012ad8bfa6e1854e8ddd5170b597734dc4967a1d", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -694,7 +694,7 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n     /// `prev.span.hi()` will be greater than (further right of) `prev_original_span.hi()`.\n     /// If prev.span() was split off to the right of a closure, prev.span().lo() will be\n     /// greater than prev_original_span.lo(). The actual span of `prev_original_span` is\n-    /// not as important as knowing that `prev()` **used to have the same span** as `curr(),\n+    /// not as important as knowing that `prev()` **used to have the same span** as `curr()`,\n     /// which means their sort order is still meaningful for determining the dominator\n     /// relationship.\n     ///"}, {"sha": "053bf5c234acfe96044a005ce41b8c791df05a2c", "filename": "compiler/rustc_passes/src/liveness/rwu_table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_passes%2Fsrc%2Fliveness%2Frwu_table.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_passes%2Fsrc%2Fliveness%2Frwu_table.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness%2Frwu_table.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -9,7 +9,7 @@ pub(super) struct RWU {\n }\n \n /// Conceptually, this is like a `Vec<Vec<RWU>>`. But the number of\n-/// RWU`s can get very large, so it uses a more compact representation.\n+/// RWU's can get very large, so it uses a more compact representation.\n pub(super) struct RWUTable {\n     /// Total number of live nodes.\n     live_nodes: usize,"}, {"sha": "52f0b65fad6724cab3806964bcc3783ba7152ef6", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -368,7 +368,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     /// This is a variation of `fn resolve_ident_in_lexical_scope` that can be run during\n     /// expansion and import resolution (perhaps they can be merged in the future).\n     /// The function is used for resolving initial segments of macro paths (e.g., `foo` in\n-    /// `foo::bar!(); or `foo!();`) and also for import paths on 2018 edition.\n+    /// `foo::bar!();` or `foo!();`) and also for import paths on 2018 edition.\n     #[instrument(level = \"debug\", skip(self, scope_set))]\n     pub(crate) fn early_resolve_ident_in_lexical_scope(\n         &mut self,"}, {"sha": "58b0d7639612aca1f6b9baa1399aecfbdc2db1f8", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -2792,7 +2792,7 @@ pub enum PpMode {\n     HirTree,\n     /// `-Zunpretty=thir-tree`\n     ThirTree,\n-    /// `-Zunpretty=`thir-flat`\n+    /// `-Zunpretty=thir-flat`\n     ThirFlat,\n     /// `-Zunpretty=mir`\n     Mir,"}, {"sha": "870ecc2a9707ac7eb393d7af8b8d061687befdf0", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -1175,7 +1175,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n /// paths you want to take. To make things worse, it was possible for\n /// cycles to arise, where you basically had a setup like `<MyType<$0>\n /// as Trait>::Foo == $0`. Here, normalizing `<MyType<$0> as\n-/// Trait>::Foo> to `[type error]` would lead to an obligation of\n+/// Trait>::Foo>` to `[type error]` would lead to an obligation of\n /// `<MyType<[type error]> as Trait>::Foo`. We are supposed to report\n /// an error for this obligation, but we legitimately should not,\n /// because it contains `[type error]`. Yuck! (See issue #29857 for"}, {"sha": "af8040d00b57528ee767e0f44390bbc91f4586ec", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2c609d662f0ffae9aafa6ff9f60441473e958e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=ff2c609d662f0ffae9aafa6ff9f60441473e958e", "patch": "@@ -151,7 +151,7 @@ struct TraitObligationStack<'prev, 'tcx> {\n     /// you don't want to cache that `B: AutoTrait` or `A: AutoTrait`\n     /// is `EvaluatedToOk`; this is because they were only considered\n     /// ok on the premise that if `A: AutoTrait` held, but we indeed\n-    /// encountered a problem (later on) with `A: AutoTrait. So we\n+    /// encountered a problem (later on) with `A: AutoTrait`. So we\n     /// currently set a flag on the stack node for `B: AutoTrait` (as\n     /// well as the second instance of `A: AutoTrait`) to suppress\n     /// caching."}]}