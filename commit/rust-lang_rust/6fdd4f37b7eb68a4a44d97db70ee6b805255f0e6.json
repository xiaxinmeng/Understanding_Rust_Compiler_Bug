{"sha": "6fdd4f37b7eb68a4a44d97db70ee6b805255f0e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZGQ0ZjM3YjdlYjY4YTRhNDRkOTdkYjcwZWU2YjgwNTI1NWYwZTY=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-04-03T20:30:21Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-04-03T20:53:46Z"}, "message": "Use a macro to expand the specialized Fuse", "tree": {"sha": "45a2c7622e9e7c12b6884f737ed40d1dfc4f136b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45a2c7622e9e7c12b6884f737ed40d1dfc4f136b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fdd4f37b7eb68a4a44d97db70ee6b805255f0e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fdd4f37b7eb68a4a44d97db70ee6b805255f0e6", "html_url": "https://github.com/rust-lang/rust/commit/6fdd4f37b7eb68a4a44d97db70ee6b805255f0e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fdd4f37b7eb68a4a44d97db70ee6b805255f0e6/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8d6fc1d106a6b3fa2dbd4085b69e56d64cfd941", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d6fc1d106a6b3fa2dbd4085b69e56d64cfd941", "html_url": "https://github.com/rust-lang/rust/commit/f8d6fc1d106a6b3fa2dbd4085b69e56d64cfd941"}], "stats": {"total": 64, "additions": 23, "deletions": 41}, "files": [{"sha": "23bc215aa779d09d1f6d2dc0ed38641617e6b818", "filename": "src/libcore/iter/adapters/fuse.rs", "status": "modified", "additions": 23, "deletions": 41, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6fdd4f37b7eb68a4a44d97db70ee6b805255f0e6/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fdd4f37b7eb68a4a44d97db70ee6b805255f0e6/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs?ref=6fdd4f37b7eb68a4a44d97db70ee6b805255f0e6", "patch": "@@ -188,34 +188,16 @@ where\n     }\n }\n \n-// NOTE: for `I: FusedIterator`, we assume that the iterator is always `Some`\n-impl<I: FusedIterator> Fuse<I> {\n-    #[inline(always)]\n-    fn as_inner(&self) -> &I {\n-        match self.iter {\n-            Some(ref iter) => iter,\n+// NOTE: for `I: FusedIterator`, we assume that the iterator is always `Some`.\n+// Implementing this as a directly-expanded macro helps codegen performance.\n+macro_rules! unchecked {\n+    ($self:ident) => {\n+        match $self {\n+            Fuse { iter: Some(iter) } => iter,\n             // SAFETY: the specialized iterator never sets `None`\n-            None => unsafe { intrinsics::unreachable() },\n+            Fuse { iter: None } => unsafe { intrinsics::unreachable() },\n         }\n-    }\n-\n-    #[inline(always)]\n-    fn as_inner_mut(&mut self) -> &mut I {\n-        match self.iter {\n-            Some(ref mut iter) => iter,\n-            // SAFETY: the specialized iterator never sets `None`\n-            None => unsafe { intrinsics::unreachable() },\n-        }\n-    }\n-\n-    #[inline(always)]\n-    fn into_inner(self) -> I {\n-        match self.iter {\n-            Some(iter) => iter,\n-            // SAFETY: the specialized iterator never sets `None`\n-            None => unsafe { intrinsics::unreachable() },\n-        }\n-    }\n+    };\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -225,27 +207,27 @@ where\n {\n     #[inline]\n     fn next(&mut self) -> Option<<I as Iterator>::Item> {\n-        self.as_inner_mut().next()\n+        unchecked!(self).next()\n     }\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<I::Item> {\n-        self.as_inner_mut().nth(n)\n+        unchecked!(self).nth(n)\n     }\n \n     #[inline]\n     fn last(self) -> Option<I::Item> {\n-        self.into_inner().last()\n+        unchecked!(self).last()\n     }\n \n     #[inline]\n     fn count(self) -> usize {\n-        self.into_inner().count()\n+        unchecked!(self).count()\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.as_inner().size_hint()\n+        unchecked!(self).size_hint()\n     }\n \n     #[inline]\n@@ -255,23 +237,23 @@ where\n         Fold: FnMut(Acc, Self::Item) -> R,\n         R: Try<Ok = Acc>,\n     {\n-        self.as_inner_mut().try_fold(init, fold)\n+        unchecked!(self).try_fold(init, fold)\n     }\n \n     #[inline]\n     fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        self.into_inner().fold(init, fold)\n+        unchecked!(self).fold(init, fold)\n     }\n \n     #[inline]\n     fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n     where\n         P: FnMut(&Self::Item) -> bool,\n     {\n-        self.as_inner_mut().find(predicate)\n+        unchecked!(self).find(predicate)\n     }\n }\n \n@@ -282,12 +264,12 @@ where\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n-        self.as_inner_mut().next_back()\n+        unchecked!(self).next_back()\n     }\n \n     #[inline]\n     fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n-        self.as_inner_mut().nth_back(n)\n+        unchecked!(self).nth_back(n)\n     }\n \n     #[inline]\n@@ -297,23 +279,23 @@ where\n         Fold: FnMut(Acc, Self::Item) -> R,\n         R: Try<Ok = Acc>,\n     {\n-        self.as_inner_mut().try_rfold(init, fold)\n+        unchecked!(self).try_rfold(init, fold)\n     }\n \n     #[inline]\n     fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        self.into_inner().rfold(init, fold)\n+        unchecked!(self).rfold(init, fold)\n     }\n \n     #[inline]\n     fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n     where\n         P: FnMut(&Self::Item) -> bool,\n     {\n-        self.as_inner_mut().rfind(predicate)\n+        unchecked!(self).rfind(predicate)\n     }\n }\n \n@@ -323,11 +305,11 @@ where\n     I: ExactSizeIterator + FusedIterator,\n {\n     fn len(&self) -> usize {\n-        self.as_inner().len()\n+        unchecked!(self).len()\n     }\n \n     fn is_empty(&self) -> bool {\n-        self.as_inner().is_empty()\n+        unchecked!(self).is_empty()\n     }\n }\n "}]}