{"sha": "66c28729016301da78f294aaff15d29567d9d02c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YzI4NzI5MDE2MzAxZGE3OGYyOTRhYWZmMTVkMjk1NjdkOWQwMmM=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-12-20T22:17:56Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-12-20T22:17:56Z"}, "message": "Inline a single-use closure", "tree": {"sha": "2946945eb3bb7626511439e4e3929823bd6dbc2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2946945eb3bb7626511439e4e3929823bd6dbc2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66c28729016301da78f294aaff15d29567d9d02c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66c28729016301da78f294aaff15d29567d9d02c", "html_url": "https://github.com/rust-lang/rust/commit/66c28729016301da78f294aaff15d29567d9d02c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66c28729016301da78f294aaff15d29567d9d02c/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f499601dd879159dbb593d2451756364f013285d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f499601dd879159dbb593d2451756364f013285d", "html_url": "https://github.com/rust-lang/rust/commit/f499601dd879159dbb593d2451756364f013285d"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "2775ed51c51a029dc43bf895682c2bc6d50d8333", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66c28729016301da78f294aaff15d29567d9d02c/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c28729016301da78f294aaff15d29567d9d02c/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=66c28729016301da78f294aaff15d29567d9d02c", "patch": "@@ -1771,7 +1771,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             path\n         );\n         let ns = source.namespace();\n-        let is_expected = &|res| source.is_expected(res);\n \n         let report_errors = |this: &mut Self, res: Option<Res>| {\n             if this.should_report_errs() {\n@@ -1874,7 +1873,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             crate_lint,\n         ) {\n             Ok(Some(partial_res)) if partial_res.unresolved_segments() == 0 => {\n-                if is_expected(partial_res.base_res()) || partial_res.base_res() == Res::Err {\n+                if source.is_expected(partial_res.base_res()) || partial_res.base_res() == Res::Err\n+                {\n                     partial_res\n                 } else {\n                     report_errors(self, Some(partial_res.base_res()))"}]}