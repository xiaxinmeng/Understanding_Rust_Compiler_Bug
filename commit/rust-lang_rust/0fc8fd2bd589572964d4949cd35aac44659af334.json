{"sha": "0fc8fd2bd589572964d4949cd35aac44659af334", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYzhmZDJiZDU4OTU3Mjk2NGQ0OTQ5Y2QzNWFhYzQ0NjU5YWYzMzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-26T11:03:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-26T11:03:14Z"}, "message": "**Inline Variable** works with field shorthand", "tree": {"sha": "fc5745bf0264d14ab5d0346b25d6b14b1ae0da45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc5745bf0264d14ab5d0346b25d6b14b1ae0da45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fc8fd2bd589572964d4949cd35aac44659af334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fc8fd2bd589572964d4949cd35aac44659af334", "html_url": "https://github.com/rust-lang/rust/commit/0fc8fd2bd589572964d4949cd35aac44659af334", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fc8fd2bd589572964d4949cd35aac44659af334/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f647edcb080f50e01762a31eebd9ca94c982c768", "url": "https://api.github.com/repos/rust-lang/rust/commits/f647edcb080f50e01762a31eebd9ca94c982c768", "html_url": "https://github.com/rust-lang/rust/commit/f647edcb080f50e01762a31eebd9ca94c982c768"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "587eb5feb078818fa82acf4949829a6ac18dd85f", "filename": "crates/assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0fc8fd2bd589572964d4949cd35aac44659af334/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc8fd2bd589572964d4949cd35aac44659af334/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=0fc8fd2bd589572964d4949cd35aac44659af334", "patch": "@@ -1,4 +1,4 @@\n-use ide_db::defs::Definition;\n+use ide_db::{defs::Definition, search::ReferenceKind};\n use syntax::{\n     ast::{self, AstNode, AstToken},\n     TextRange,\n@@ -119,7 +119,13 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n             for (desc, should_wrap) in refs.iter().zip(wrap_in_parens) {\n                 let replacement =\n                     if should_wrap { init_in_paren.clone() } else { init_str.clone() };\n-                builder.replace(desc.file_range.range, replacement)\n+                match desc.kind {\n+                    ReferenceKind::FieldShorthandForLocal => {\n+                        mark::hit!(inline_field_shorthand);\n+                        builder.insert(desc.file_range.range.end(), format!(\": {}\", replacement))\n+                    }\n+                    _ => builder.replace(desc.file_range.range, replacement),\n+                }\n             }\n         },\n     )\n@@ -666,6 +672,27 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn inline_field_shorthand() {\n+        mark::check!(inline_field_shorthand);\n+        check_assist(\n+            inline_local_variable,\n+            r\"\n+struct S { foo: i32}\n+fn main() {\n+    let <|>foo = 92;\n+    S { foo }\n+}\n+\",\n+            r\"\n+struct S { foo: i32}\n+fn main() {\n+    S { foo: 92 }\n+}\n+\",\n+        );\n+    }\n+\n     #[test]\n     fn test_not_applicable_if_variable_unused() {\n         mark::check!(test_not_applicable_if_variable_unused);"}]}