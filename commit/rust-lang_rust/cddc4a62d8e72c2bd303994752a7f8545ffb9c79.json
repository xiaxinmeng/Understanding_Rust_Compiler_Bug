{"sha": "cddc4a62d8e72c2bd303994752a7f8545ffb9c79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZGM0YTYyZDhlNzJjMmJkMzAzOTk0NzUyYTdmODU0NWZmYjljNzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-26T20:47:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-26T20:47:31Z"}, "message": "Auto merge of #46975 - matthewjasper:mir-moveck-asm, r=arielb1\n\n[MIR Borrowck] Moveck inline asm statements\n\nCloses #45695\n\nNew behavior:\n* Input operands to `asm!` are moved, direct output operands are initialized.\n* Direct, non-read-write outputs match the assignment changes in #46752 (Shallow writes, end borrows).", "tree": {"sha": "750bf9b683570f597b19e6083097fa885208e1f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/750bf9b683570f597b19e6083097fa885208e1f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cddc4a62d8e72c2bd303994752a7f8545ffb9c79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cddc4a62d8e72c2bd303994752a7f8545ffb9c79", "html_url": "https://github.com/rust-lang/rust/commit/cddc4a62d8e72c2bd303994752a7f8545ffb9c79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cddc4a62d8e72c2bd303994752a7f8545ffb9c79/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "503153e9506890c31749768474506e0b4e3eb4ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/503153e9506890c31749768474506e0b4e3eb4ef", "html_url": "https://github.com/rust-lang/rust/commit/503153e9506890c31749768474506e0b4e3eb4ef"}, {"sha": "1a308ba90a1f63233ad4de828085415473a1bc9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a308ba90a1f63233ad4de828085415473a1bc9b", "html_url": "https://github.com/rust-lang/rust/commit/1a308ba90a1f63233ad4de828085415473a1bc9b"}], "stats": {"total": 175, "additions": 171, "deletions": 4}, "files": [{"sha": "4eb664e4856b4d85fad84270bb37ce2818660b43", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cddc4a62d8e72c2bd303994752a7f8545ffb9c79/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cddc4a62d8e72c2bd303994752a7f8545ffb9c79/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=cddc4a62d8e72c2bd303994752a7f8545ffb9c79", "patch": "@@ -392,7 +392,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                         self.mutate_place(\n                             context,\n                             (output, span),\n-                            Deep,\n+                            if o.is_rw { Deep } else { Shallow(None) },\n                             if o.is_rw { WriteAndRead } else { JustWrite },\n                             flow_state,\n                         );"}, {"sha": "6c1b8675764a3839404124c82cf0c37d8e73e82d", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cddc4a62d8e72c2bd303994752a7f8545ffb9c79/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cddc4a62d8e72c2bd303994752a7f8545ffb9c79/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=cddc4a62d8e72c2bd303994752a7f8545ffb9c79", "patch": "@@ -416,7 +416,20 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                 self.kill_borrows_on_local(sets, &local, is_activations)\n             }\n \n-            mir::StatementKind::InlineAsm { .. } |\n+            mir::StatementKind::InlineAsm { ref outputs, ref asm, .. } => {\n+                for (output, kind) in outputs.iter().zip(&asm.outputs) {\n+                    if !kind.is_indirect && !kind.is_rw {\n+                        // Make sure there are no remaining borrows for direct\n+                        // output variables.\n+                        if let Place::Local(ref local) = *output {\n+                            // FIXME: Handle the case in which we're assigning over\n+                            // a projection (`foo.bar`).\n+                            self.kill_borrows_on_local(sets, local, is_activations);\n+                        }\n+                    }\n+                }\n+            }\n+\n             mir::StatementKind::SetDiscriminant { .. } |\n             mir::StatementKind::StorageLive(..) |\n             mir::StatementKind::Validate(..) |"}, {"sha": "cd36282eca0a65408f5a773f7a448adbcb1d7340", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cddc4a62d8e72c2bd303994752a7f8545ffb9c79/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cddc4a62d8e72c2bd303994752a7f8545ffb9c79/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=cddc4a62d8e72c2bd303994752a7f8545ffb9c79", "patch": "@@ -278,6 +278,16 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                 }\n                 self.gather_rvalue(rval);\n             }\n+            StatementKind::InlineAsm { ref outputs, ref inputs, ref asm } => {\n+                for (output, kind) in outputs.iter().zip(&asm.outputs) {\n+                    if !kind.is_indirect {\n+                        self.gather_init(output, InitKind::Deep);\n+                    }\n+                }\n+                for input in inputs {\n+                    self.gather_operand(input);\n+                }\n+            }\n             StatementKind::StorageLive(_) => {}\n             StatementKind::StorageDead(local) => {\n                 self.gather_move(&Place::Local(local));\n@@ -286,7 +296,6 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                 span_bug!(stmt.source_info.span,\n                           \"SetDiscriminant should not exist during borrowck\");\n             }\n-            StatementKind::InlineAsm { .. } |\n             StatementKind::EndRegion(_) |\n             StatementKind::Validate(..) |\n             StatementKind::Nop => {}"}, {"sha": "02462bf1be7d730bea070ea7af8eb3e1eb5e5972", "filename": "src/test/compile-fail/asm-out-read-uninit.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cddc4a62d8e72c2bd303994752a7f8545ffb9c79/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cddc4a62d8e72c2bd303994752a7f8545ffb9c79/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs?ref=cddc4a62d8e72c2bd303994752a7f8545ffb9c79", "patch": "@@ -13,6 +13,9 @@\n // ignore-powerpc\n // ignore-sparc\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z borrowck=mir\n+\n #![feature(asm)]\n \n fn foo(x: isize) { println!(\"{}\", x); }\n@@ -24,7 +27,9 @@ fn foo(x: isize) { println!(\"{}\", x); }\n pub fn main() {\n     let x: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x)); //~ ERROR use of possibly uninitialized variable: `x`\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n+        //[ast]~^ ERROR use of possibly uninitialized variable: `x`\n+        //[mir]~^^ ERROR use of possibly uninitialized variable: `x`\n     }\n     foo(x);\n }"}, {"sha": "6bccc8386809323ad28749c577532af7dce64221", "filename": "src/test/compile-fail/borrowck/borrowck-asm.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/cddc4a62d8e72c2bd303994752a7f8545ffb9c79/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cddc4a62d8e72c2bd303994752a7f8545ffb9c79/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-asm.rs?ref=cddc4a62d8e72c2bd303994752a7f8545ffb9c79", "patch": "@@ -0,0 +1,97 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-s390x\n+// ignore-emscripten\n+// ignore-powerpc\n+// ignore-sparc\n+\n+// revisions: ast mir\n+//[mir]compile-flags: -Z borrowck=mir -Z nll\n+\n+#![feature(asm)]\n+\n+#[cfg(any(target_arch = \"x86\",\n+            target_arch = \"x86_64\",\n+            target_arch = \"arm\",\n+            target_arch = \"aarch64\"))]\n+mod test_cases {\n+    fn is_move() {\n+        let y: &mut isize;\n+        let x = &mut 0isize;\n+        unsafe {\n+            asm!(\"nop\" : : \"r\"(x));\n+        }\n+        let z = x;  //[ast]~ ERROR use of moved value: `x`\n+                    //[mir]~^ ERROR use of moved value: `x`\n+    }\n+\n+    fn in_is_read() {\n+        let mut x = 3;\n+        let y = &mut x;\n+        unsafe {\n+            asm!(\"nop\" : : \"r\"(x)); //[ast]~ ERROR cannot use\n+                                    //[mir]~^ ERROR cannot use\n+        }\n+        let z = y;\n+    }\n+\n+    fn out_is_assign() {\n+        let x = 3;\n+        unsafe {\n+            asm!(\"nop\" : \"=r\"(x));  //[ast]~ ERROR cannot assign twice\n+                                    //[mir]~^ ERROR cannot assign twice\n+        }\n+        let mut a = &mut 3;\n+        let b = &*a;\n+        unsafe {\n+            asm!(\"nop\" : \"=r\"(a));  //[ast]~ ERROR cannot assign to `a` because it is borrowed\n+                                    // No MIR error, this is a shallow write.\n+        }\n+        let c = b;\n+        let d = *a;\n+    }\n+\n+    fn rw_is_assign() {\n+        let x = 3;\n+        unsafe {\n+            asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign twice\n+                                    //[mir]~^ ERROR cannot assign twice\n+        }\n+    }\n+\n+    fn indirect_is_not_init() {\n+        let x: i32;\n+        unsafe {\n+            asm!(\"nop\" : \"=*r\"(x)); //[ast]~ ERROR use of possibly uninitialized variable\n+                                    //[mir]~^ ERROR use of possibly uninitialized variable\n+        }\n+    }\n+\n+    fn rw_is_read() {\n+        let mut x = &mut 3;\n+        let y = &*x;\n+        unsafe {\n+            asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign to `x` because it is borrowed\n+                                    //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n+        }\n+        let z = y;\n+    }\n+\n+    fn two_moves() {\n+        let x = &mut 2;\n+        unsafe {\n+            asm!(\"nop\" : : \"r\"(x), \"r\"(x) );    //[ast]~ ERROR use of moved value\n+                                                //[mir]~^ ERROR use of moved value\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "246dd83fbef298f26a68c7e0daa7a042c7106204", "filename": "src/test/run-pass/asm-in-moved.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cddc4a62d8e72c2bd303994752a7f8545ffb9c79/src%2Ftest%2Frun-pass%2Fasm-in-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cddc4a62d8e72c2bd303994752a7f8545ffb9c79/src%2Ftest%2Frun-pass%2Fasm-in-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-in-moved.rs?ref=cddc4a62d8e72c2bd303994752a7f8545ffb9c79", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: ast mir\n+//[mir]compile-flags: -Z borrowck=mir\n+\n+#![feature(asm)]\n+\n+use std::cell::Cell;\n+\n+#[repr(C)]\n+struct NoisyDrop<'a>(&'a Cell<&'static str>);\n+impl<'a> Drop for NoisyDrop<'a> {\n+    fn drop(&mut self) {\n+        self.0.set(\"destroyed\");\n+    }\n+}\n+\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn main() {\n+    let status = Cell::new(\"alive\");\n+    {\n+        let _y: Box<NoisyDrop>;\n+        let x = Box::new(NoisyDrop(&status));\n+        unsafe {\n+            asm!(\"mov $1, $0\" : \"=r\"(_y) : \"r\"(x));\n+        }\n+        assert_eq!(status.get(), \"alive\");\n+    }\n+    assert_eq!(status.get(), \"destroyed\");\n+}\n+\n+#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n+fn main() {}"}, {"sha": "6acb9054af5cc93b005bf015735f2ddcb6547f89", "filename": "src/test/run-pass/asm-out-assign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cddc4a62d8e72c2bd303994752a7f8545ffb9c79/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cddc4a62d8e72c2bd303994752a7f8545ffb9c79/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs?ref=cddc4a62d8e72c2bd303994752a7f8545ffb9c79", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions ast mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n #![feature(asm)]\n "}]}