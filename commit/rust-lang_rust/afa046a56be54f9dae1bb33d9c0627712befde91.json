{"sha": "afa046a56be54f9dae1bb33d9c0627712befde91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYTA0NmE1NmJlNTRmOWRhZTFiYjMzZDljMDYyNzcxMmJlZmRlOTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-13T01:47:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-13T01:47:18Z"}, "message": "rustc: Use linked lists instead of hash tables for region binding scopes\n\nHash tables are overkill.", "tree": {"sha": "eabf1193b0604cc03908e1be07f7f8d2ecb3c1f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eabf1193b0604cc03908e1be07f7f8d2ecb3c1f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afa046a56be54f9dae1bb33d9c0627712befde91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afa046a56be54f9dae1bb33d9c0627712befde91", "html_url": "https://github.com/rust-lang/rust/commit/afa046a56be54f9dae1bb33d9c0627712befde91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afa046a56be54f9dae1bb33d9c0627712befde91/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4571175568bcce1544d7c6da5e38841cb2377735", "url": "https://api.github.com/repos/rust-lang/rust/commits/4571175568bcce1544d7c6da5e38841cb2377735", "html_url": "https://github.com/rust-lang/rust/commit/4571175568bcce1544d7c6da5e38841cb2377735"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "debb76714689fc02e5e984a00cfd3d553fcf3e02", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/afa046a56be54f9dae1bb33d9c0627712befde91/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa046a56be54f9dae1bb33d9c0627712befde91/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=afa046a56be54f9dae1bb33d9c0627712befde91", "patch": "@@ -8,6 +8,8 @@ import middle::ty;\n import syntax::{ast, visit};\n import util::common::new_def_hash;\n \n+import std::list;\n+import std::list::list;\n import std::map;\n import std::map::hashmap;\n \n@@ -19,6 +21,12 @@ enum parent {\n     pa_crate\n }\n \n+/* Records the binding site of a region name. */\n+type binding = {\n+    name: str,\n+    id: ast::def_id\n+};\n+\n type region_map = {\n     /*\n      * Mapping from blocks and function expression to their parent block or\n@@ -37,7 +45,7 @@ type ctxt = {\n     sess: session,\n     def_map: resolve::def_map,\n     region_map: @region_map,\n-    names_in_scope: hashmap<str,ast::def_id>,\n+    mut bindings: @list<binding>,\n \n     /*\n      * A list of local IDs that will be parented to the next block we\n@@ -106,12 +114,14 @@ fn resolve_ty(ty: @ast::ty, cx: ctxt, visitor: visit::vt<ctxt>) {\n                 ast::re_named(ident) {\n                     // If at item scope, introduce or reuse a binding. If at\n                     // block scope, require that the binding be introduced.\n-                    alt cx.names_in_scope.find(ident) {\n-                        some(def_id) { region = ty::re_named(def_id); }\n+                    let bindings = cx.bindings;\n+                    alt list::find(*bindings, {|b| ident == b.name}) {\n+                        some(binding) { region = ty::re_named(binding.id); }\n                         none {\n                             let def_id = {crate: ast::local_crate,\n                                           node: region_id};\n-                            cx.names_in_scope.insert(ident, def_id);\n+                            let binding = {name: ident, id: def_id};\n+                            cx.bindings = @list::cons(binding, cx.bindings);\n                             region = ty::re_named(def_id);\n \n                             alt cx.parent {\n@@ -248,7 +258,7 @@ fn resolve_expr(expr: @ast::expr, cx: ctxt, visitor: visit::vt<ctxt>) {\n \n fn resolve_item(item: @ast::item, cx: ctxt, visitor: visit::vt<ctxt>) {\n     // Items create a new outer block scope as far as we're concerned.\n-    let new_cx: ctxt = {names_in_scope: map::new_str_hash(),\n+    let new_cx: ctxt = {bindings: @list::nil,\n                         parent: pa_item(item.id),\n                         in_alt: false\n                         with cx};\n@@ -263,7 +273,7 @@ fn resolve_crate(sess: session, def_map: resolve::def_map, crate: @ast::crate)\n                                   ast_type_to_region: map::new_int_hash(),\n                                   local_blocks: map::new_int_hash(),\n                                   region_name_to_fn: new_def_hash()},\n-                    names_in_scope: map::new_str_hash(),\n+                    mut bindings: @list::nil,\n                     mut queued_locals: [],\n                     parent: pa_crate,\n                     in_alt: false};"}]}