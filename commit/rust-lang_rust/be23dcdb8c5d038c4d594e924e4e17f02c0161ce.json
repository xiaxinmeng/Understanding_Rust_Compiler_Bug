{"sha": "be23dcdb8c5d038c4d594e924e4e17f02c0161ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMjNkY2RiOGM1ZDAzOGM0ZDU5NGU5MjRlNGUxN2YwMmMwMTYxY2U=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-09-07T08:53:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-07T08:53:33Z"}, "message": "Merge pull request #47 from oli-obk/unreachable_bugs\n\nreplace all `unreachable!` and `panic!` calls with `bug!`", "tree": {"sha": "e56a72c9543a411eadd79ea783f291e4ca18ade2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e56a72c9543a411eadd79ea783f291e4ca18ade2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be23dcdb8c5d038c4d594e924e4e17f02c0161ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be23dcdb8c5d038c4d594e924e4e17f02c0161ce", "html_url": "https://github.com/rust-lang/rust/commit/be23dcdb8c5d038c4d594e924e4e17f02c0161ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f718e77c2d65fde66fdbb4b0dcaaf80c38d5ad5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f718e77c2d65fde66fdbb4b0dcaaf80c38d5ad5f", "html_url": "https://github.com/rust-lang/rust/commit/f718e77c2d65fde66fdbb4b0dcaaf80c38d5ad5f"}, {"sha": "7be27ecb5316d8661e4335f53d0e4398b7e3a680", "url": "https://api.github.com/repos/rust-lang/rust/commits/7be27ecb5316d8661e4335f53d0e4398b7e3a680", "html_url": "https://github.com/rust-lang/rust/commit/7be27ecb5316d8661e4335f53d0e4398b7e3a680"}], "stats": {"total": 104, "additions": 48, "deletions": 56}, "files": [{"sha": "cc0132e4090d9ec75bf3c20825bd181095be252b", "filename": "src/bin/miri.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=be23dcdb8c5d038c4d594e924e4e17f02c0161ce", "patch": "@@ -41,12 +41,12 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n             let mut memory_size = 100*1024*1024; // 100MB\n             let mut step_limit = 1000_000;\n             let mut stack_limit = 100;\n-            fn extract_str(lit: &syntax::ast::Lit) -> syntax::parse::token::InternedString {\n+            let extract_int = |lit: &syntax::ast::Lit| -> u64 {\n                 match lit.node {\n-                    syntax::ast::LitKind::Str(ref s, _) => s.clone(),\n-                    _ => panic!(\"attribute values need to be strings\"),\n+                    syntax::ast::LitKind::Int(i, _) => i,\n+                    _ => state.session.span_fatal(lit.span, \"expected an integer literal\"),\n                 }\n-            }\n+            };\n             for attr in krate.attrs.iter() {\n                 match attr.node.value.node {\n                     MetaItemKind::List(ref name, _) if name != \"miri\" => {}\n@@ -55,9 +55,9 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n                             NestedMetaItemKind::MetaItem(ref inner) => match inner.node {\n                                 MetaItemKind::NameValue(ref name, ref value) => {\n                                     match &**name {\n-                                        \"memory_size\" => memory_size = extract_str(value).parse().expect(\"not a number\"),\n-                                        \"step_limit\" => step_limit = extract_str(value).parse().expect(\"not a number\"),\n-                                        \"stack_limit\" => stack_limit = extract_str(value).parse().expect(\"not a number\"),\n+                                        \"memory_size\" => memory_size = extract_int(value) as usize,\n+                                        \"step_limit\" => step_limit = extract_int(value),\n+                                        \"stack_limit\" => stack_limit = extract_int(value) as usize,\n                                         _ => state.session.span_err(item.span, \"unknown miri attribute\"),\n                                     }\n                                 }"}, {"sha": "92bac85e56eb9ab28f25ad418bf1f088056237b3", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=be23dcdb8c5d038c4d594e924e4e17f02c0161ce", "patch": "@@ -187,9 +187,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.write_f64(ptr, f)?;\n                 Ok(ptr)\n             },\n-            Float(ConstFloat::FInfer{..}) => unreachable!(),\n-            Integral(ConstInt::Infer(_)) => unreachable!(),\n-            Integral(ConstInt::InferSigned(_)) => unreachable!(),\n+            Float(ConstFloat::FInfer{..}) |\n+            Integral(ConstInt::Infer(_)) |\n+            Integral(ConstInt::InferSigned(_)) => bug!(\"uninferred constants only exist before typeck\"),\n             Integral(ConstInt::I8(i)) => i2p!(i, 1),\n             Integral(ConstInt::U8(i)) => i2p!(i, 1),\n             Integral(ConstInt::Isize(ConstIsize::Is16(i))) |\n@@ -359,7 +359,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         use rustc::ty::layout::Layout::*;\n         let tup_layout = match *dest_layout {\n             Univariant { ref variant, .. } => variant,\n-            _ => panic!(\"checked bin op returns something other than a tuple\"),\n+            _ => bug!(\"checked bin op returns something other than a tuple\"),\n         };\n \n         let overflowed = self.intrinsic_overflowing(op, left, right, dest)?;\n@@ -446,8 +446,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     Array { .. } => {\n                         let elem_size = match dest_ty.sty {\n                             ty::TyArray(elem_ty, _) => self.type_size(elem_ty) as u64,\n-                            _ => panic!(\"tried to assign {:?} to non-array type {:?}\",\n-                                        kind, dest_ty),\n+                            _ => bug!(\"tried to assign {:?} to non-array type {:?}\", kind, dest_ty),\n                         };\n                         let offsets = (0..).map(|i| i * elem_size);\n                         self.assign_fields(dest, offsets, operands)?;\n@@ -463,7 +462,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 .map(|s| s.bytes());\n                             self.assign_fields(dest, offsets, operands)?;\n                         } else {\n-                            panic!(\"tried to assign {:?} to Layout::General\", kind);\n+                            bug!(\"tried to assign {:?} to Layout::General\", kind);\n                         }\n                     }\n \n@@ -480,7 +479,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 self.memory.write_isize(dest, 0)?;\n                             }\n                         } else {\n-                            panic!(\"tried to assign {:?} to Layout::RawNullablePointer\", kind);\n+                            bug!(\"tried to assign {:?} to Layout::RawNullablePointer\", kind);\n                         }\n                     }\n \n@@ -497,7 +496,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 try!(self.memory.write_isize(dest, 0));\n                             }\n                         } else {\n-                            panic!(\"tried to assign {:?} to Layout::RawNullablePointer\", kind);\n+                            bug!(\"tried to assign {:?} to Layout::RawNullablePointer\", kind);\n                         }\n                     }\n \n@@ -513,7 +512,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 self.memory.write_uint(dest, val, size)?;\n                             }\n                         } else {\n-                            panic!(\"tried to assign {:?} to Layout::CEnum\", kind);\n+                            bug!(\"tried to assign {:?} to Layout::CEnum\", kind);\n                         }\n                     }\n \n@@ -524,7 +523,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Repeat(ref operand, _) => {\n                 let (elem_size, elem_align, length) = match dest_ty.sty {\n                     ty::TyArray(elem_ty, n) => (self.type_size(elem_ty), self.type_align(elem_ty), n),\n-                    _ => panic!(\"tried to assign array-repeat to non-array type {:?}\", dest_ty),\n+                    _ => bug!(\"tried to assign array-repeat to non-array type {:?}\", dest_ty),\n                 };\n \n                 let src = self.eval_operand(operand)?;\n@@ -542,9 +541,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     ty::TySlice(_) => if let LvalueExtra::Length(n) = src.extra {\n                         n\n                     } else {\n-                        panic!(\"Rvalue::Len of a slice given non-slice pointer: {:?}\", src);\n+                        bug!(\"Rvalue::Len of a slice given non-slice pointer: {:?}\", src);\n                     },\n-                    _ => panic!(\"Rvalue::Len expected array or slice, got {:?}\", ty),\n+                    _ => bug!(\"Rvalue::Len expected array or slice, got {:?}\", ty),\n                 };\n                 self.memory.write_usize(dest, len)?;\n             }\n@@ -559,7 +558,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         self.memory.write_usize(len_ptr, len)?;\n                     }\n                     LvalueExtra::DowncastVariant(..) =>\n-                        panic!(\"attempted to take a reference to an enum downcast lvalue\"),\n+                        bug!(\"attempted to take a reference to an enum downcast lvalue\"),\n                 }\n             }\n \n@@ -615,7 +614,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             let fn_ptr = self.memory.create_fn_ptr(def_id, substs, fn_ty);\n                             self.memory.write_ptr(dest, fn_ptr)?;\n                         },\n-                        ref other => panic!(\"reify fn pointer on {:?}\", other),\n+                        ref other => bug!(\"reify fn pointer on {:?}\", other),\n                     },\n \n                     UnsafeFnPointer => match dest_ty.sty {\n@@ -626,7 +625,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             let fn_ptr = self.memory.create_fn_ptr(fn_def.def_id, fn_def.substs, unsafe_fn_ty);\n                             self.memory.write_ptr(dest, fn_ptr)?;\n                         },\n-                        ref other => panic!(\"fn to unsafe fn cast on {:?}\", other),\n+                        ref other => bug!(\"fn to unsafe fn cast on {:?}\", other),\n                     },\n                 }\n             }\n@@ -649,10 +648,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let field = &variant.fields[index];\n                 field.ty(self.tcx, substs)\n             }\n-            _ => panic!(\n-                \"non-enum for StructWrappedNullablePointer: {}\",\n-                ty,\n-            ),\n+            _ => bug!(\"non-enum for StructWrappedNullablePointer: {}\", ty),\n         };\n \n         self.field_path_offset(inner_ty, path)\n@@ -772,15 +768,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 if let LvalueExtra::DowncastVariant(variant_idx) = base.extra {\n                                     &variants[variant_idx]\n                                 } else {\n-                                    panic!(\"field access on enum had no variant index\");\n+                                    bug!(\"field access on enum had no variant index\");\n                                 }\n                             }\n                             RawNullablePointer { .. } => {\n                                 assert_eq!(field.index(), 0);\n                                 return Ok(base);\n                             }\n                             StructWrappedNullablePointer { ref nonnull, .. } => nonnull,\n-                            _ => panic!(\"field access on non-product type: {:?}\", base_layout),\n+                            _ => bug!(\"field access on non-product type: {:?}\", base_layout),\n                         };\n \n                         let offset = variant.field_offset(field.index()).bytes();\n@@ -799,7 +795,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             RawNullablePointer { .. } | StructWrappedNullablePointer { .. } => {\n                                 return Ok(base);\n                             }\n-                            _ => panic!(\"variant downcast on non-aggregate: {:?}\", base_layout),\n+                            _ => bug!(\"variant downcast on non-aggregate: {:?}\", base_layout),\n                         }\n                     },\n \n@@ -822,7 +818,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let elem_size = match base_ty.sty {\n                             ty::TyArray(elem_ty, _) |\n                             ty::TySlice(elem_ty) => self.type_size(elem_ty),\n-                            _ => panic!(\"indexing expected an array or slice, got {:?}\", base_ty),\n+                            _ => bug!(\"indexing expected an array or slice, got {:?}\", base_ty),\n                         };\n                         let n_ptr = self.eval_operand(operand)?;\n                         let n = self.memory.read_usize(n_ptr)?;\n@@ -901,7 +897,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n             }\n \n-            _ => panic!(\"primitive read of non-primitive type: {:?}\", ty),\n+            _ => bug!(\"primitive read of non-primitive type: {:?}\", ty),\n         };\n         Ok(val)\n     }"}, {"sha": "bdf8a5a946bd00a65709f62057538e74d8eb7de0", "filename": "src/interpreter/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/src%2Finterpreter%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/src%2Finterpreter%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator.rs?ref=be23dcdb8c5d038c4d594e924e4e17f02c0161ce", "patch": "@@ -198,7 +198,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 arg_srcs.push((src, ty));\n                             }\n                         }\n-                        ty => panic!(\"expected tuple as last argument in function with 'rust-call' ABI, got {:?}\", ty),\n+                        ty => bug!(\"expected tuple as last argument in function with 'rust-call' ABI, got {:?}\", ty),\n                     }\n                 }\n \n@@ -522,7 +522,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 //                   ty: def_ty(tcx, def_id, substs)\n                 // }\n             }\n-            vtable => unreachable!(\"resolved vtable bad vtable {:?} in trans\", vtable),\n+            vtable => bug!(\"resolved vtable bad vtable {:?} in trans\", vtable),\n         }\n     }\n "}, {"sha": "3cf0bc97557b1d914862d6d4bac2bd176d5a6e05", "filename": "src/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=be23dcdb8c5d038c4d594e924e4e17f02c0161ce", "patch": "@@ -303,7 +303,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n                     println!(\"(deallocated)\");\n                     continue;\n                 },\n-                (Some(_), Some(_)) => unreachable!(),\n+                (Some(_), Some(_)) => bug!(\"miri invariant broken: an allocation id exists that points to both a function and a memory location\"),\n             };\n \n             for i in 0..alloc.bytes.len() {\n@@ -481,7 +481,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             2 => Ok(self.layout.i16_align.abi() as usize),\n             4 => Ok(self.layout.i32_align.abi() as usize),\n             8 => Ok(self.layout.i64_align.abi() as usize),\n-            _ => panic!(\"bad integer size\"),\n+            _ => bug!(\"bad integer size\"),\n         }\n     }\n "}, {"sha": "6b24bf7530f857c7980423864aa92ad02b3a353a", "filename": "src/primval.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=be23dcdb8c5d038c4d594e924e4e17f02c0161ce", "patch": "@@ -49,8 +49,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n                 BitOr  => $v($l | $r),\n \n                 // these have already been handled\n-                Shl => unreachable!(),\n-                Shr => unreachable!(),\n+                Shl | Shr => bug!(\"`{}` operation should already have been handled\", bin_op.to_hir_binop().as_str()),\n \n                 Eq => Bool($l == $r),\n                 Ne => Bool($l != $r),\n@@ -72,11 +71,8 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n                 Rem    => $v($l % $r),\n \n                 // invalid float ops\n-                BitXor => unreachable!(),\n-                BitAnd => unreachable!(),\n-                BitOr  => unreachable!(),\n-                Shl => unreachable!(),\n-                Shr => unreachable!(),\n+                BitXor | BitAnd | BitOr |\n+                Shl | Shr => bug!(\"`{}` is not a valid operation on floats\", bin_op.to_hir_binop().as_str()),\n \n                 Eq => Bool($l == $r),\n                 Ne => Bool($l != $r),\n@@ -108,7 +104,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n                 I16(_) | U16(_) => 16,\n                 I32(_) | U32(_) => 32,\n                 I64(_) | U64(_) => 64,\n-                _ => unreachable!(),\n+                _ => bug!(\"bad MIR: bitshift lhs is not integral\"),\n             };\n             assert!(type_bits.is_power_of_two());\n             // turn into `u32` because `overflowing_sh{l,r}` only take `u32`\n@@ -121,7 +117,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n                 U16(i) => i as u32,\n                 U32(i) => i as u32,\n                 U64(i) => i as u32,\n-                _ => panic!(\"bad MIR: bitshift rhs is not integral\"),\n+                _ => bug!(\"bad MIR: bitshift rhs is not integral\"),\n             };\n             // apply mask\n             let r = r & (type_bits - 1);\n@@ -130,7 +126,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n                     match bin_op {\n                         Shl => overflow!($v, U32, $l, overflowing_shl, $r),\n                         Shr => overflow!($v, U32, $l, overflowing_shr, $r),\n-                        _ => unreachable!(),\n+                        _ => bug!(\"it has already been checked that this is a shift op\"),\n                     }\n                 })\n             }\n@@ -143,7 +139,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n                 U16(l) => shift!(U16, l, r),\n                 U32(l) => shift!(U32, l, r),\n                 U64(l) => shift!(U64, l, r),\n-                _ => unreachable!(),\n+                _ => bug!(\"bad MIR: bitshift lhs is not integral (should already have been checked)\"),\n             };\n             return Ok((val, false));\n         },\n@@ -168,7 +164,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n             Le => Bool(l <= r),\n             Gt => Bool(l > r),\n             Ge => Bool(l >= r),\n-            _ => panic!(\"invalid char op: {:?}\", bin_op),\n+            _ => bug!(\"invalid char op: {:?}\", bin_op),\n         },\n \n         (Bool(l), Bool(r)) => {"}, {"sha": "d3911a65f2f30d1d5f8160241c642fb45fde2e21", "filename": "tests/compile-fail/oom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/tests%2Fcompile-fail%2Foom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/tests%2Fcompile-fail%2Foom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foom.rs?ref=be23dcdb8c5d038c4d594e924e4e17f02c0161ce", "patch": "@@ -1,5 +1,5 @@\n-#![feature(custom_attribute)]\n-#![miri(memory_size=\"0\")]\n+#![feature(custom_attribute, attr_literals)]\n+#![miri(memory_size=0)]\n \n fn bar() {\n     let x = 5;"}, {"sha": "d0344e4faeb3a750d73e5d210238e453a32d7e95", "filename": "tests/compile-fail/oom2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/tests%2Fcompile-fail%2Foom2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/tests%2Fcompile-fail%2Foom2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foom2.rs?ref=be23dcdb8c5d038c4d594e924e4e17f02c0161ce", "patch": "@@ -1,5 +1,5 @@\n-#![feature(custom_attribute)]\n-#![miri(memory_size=\"1000\")]\n+#![feature(custom_attribute, attr_literals)]\n+#![miri(memory_size=1000)]\n \n fn bar(i: i32) {\n     if i < 1000 {"}, {"sha": "2a78fbe5398f032ebabdc36ada0d810ff264d3ef", "filename": "tests/compile-fail/stack_limit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/tests%2Fcompile-fail%2Fstack_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/tests%2Fcompile-fail%2Fstack_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstack_limit.rs?ref=be23dcdb8c5d038c4d594e924e4e17f02c0161ce", "patch": "@@ -1,5 +1,5 @@\n-#![feature(custom_attribute)]\n-#![miri(stack_limit=\"2\")]\n+#![feature(custom_attribute, attr_literals)]\n+#![miri(stack_limit=2)]\n \n fn bar() {\n     foo();"}, {"sha": "edd4c31866910642e97e6813084c7c27240367ec", "filename": "tests/compile-fail/timeout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/tests%2Fcompile-fail%2Ftimeout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be23dcdb8c5d038c4d594e924e4e17f02c0161ce/tests%2Fcompile-fail%2Ftimeout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftimeout.rs?ref=be23dcdb8c5d038c4d594e924e4e17f02c0161ce", "patch": "@@ -1,6 +1,6 @@\n //error-pattern: reached the configured maximum execution time\n-#![feature(custom_attribute)]\n-#![miri(step_limit=\"1000\")]\n+#![feature(custom_attribute, attr_literals)]\n+#![miri(step_limit=1000)]\n \n fn main() {\n     for i in 0..1000000 {"}]}