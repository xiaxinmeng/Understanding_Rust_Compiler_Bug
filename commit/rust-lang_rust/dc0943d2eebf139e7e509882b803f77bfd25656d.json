{"sha": "dc0943d2eebf139e7e509882b803f77bfd25656d", "node_id": "C_kwDOAAsO6NoAKGRjMDk0M2QyZWViZjEzOWU3ZTUwOTg4MmI4MDNmNzdiZmQyNTY1NmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-29T03:04:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-29T03:04:06Z"}, "message": "Auto merge of #112055 - matthiaskrgr:rollup-y3exx8c, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #112029 (Recover upon mistyped error on typo'd `const` in const param def)\n - #112037 (Add details about `unsafe_op_in_unsafe_fn` to E0133)\n - #112039 (compiler: update solaris/illumos to enable tsan support.)\n - #112042 (Migrate GUI colors test to original CSS color format)\n - #112045 (Followup to #111973)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f676e20f47d2b60f37c2828f39b2cfbcb29d0fc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f676e20f47d2b60f37c2828f39b2cfbcb29d0fc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc0943d2eebf139e7e509882b803f77bfd25656d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc0943d2eebf139e7e509882b803f77bfd25656d", "html_url": "https://github.com/rust-lang/rust/commit/dc0943d2eebf139e7e509882b803f77bfd25656d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc0943d2eebf139e7e509882b803f77bfd25656d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8447b963893b410f1dbce2cd752a898dc3ed8d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8447b963893b410f1dbce2cd752a898dc3ed8d4", "html_url": "https://github.com/rust-lang/rust/commit/f8447b963893b410f1dbce2cd752a898dc3ed8d4"}, {"sha": "e71b3b3cfac1ea515bc3cf2a6495f9261f265f43", "url": "https://api.github.com/repos/rust-lang/rust/commits/e71b3b3cfac1ea515bc3cf2a6495f9261f265f43", "html_url": "https://github.com/rust-lang/rust/commit/e71b3b3cfac1ea515bc3cf2a6495f9261f265f43"}], "stats": {"total": 146, "additions": 135, "deletions": 11}, "files": [{"sha": "8ca3f03ce156fec63cf82b37bd82fcd506be6721", "filename": "compiler/rustc_error_codes/src/error_codes/E0133.md", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dc0943d2eebf139e7e509882b803f77bfd25656d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0133.md", "raw_url": "https://github.com/rust-lang/rust/raw/dc0943d2eebf139e7e509882b803f77bfd25656d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0133.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0133.md?ref=dc0943d2eebf139e7e509882b803f77bfd25656d", "patch": "@@ -1,4 +1,4 @@\n-Unsafe code was used outside of an unsafe function or block.\n+Unsafe code was used outside of an unsafe block.\n \n Erroneous code example:\n \n@@ -30,4 +30,21 @@ fn main() {\n \n See the [unsafe section][unsafe-section] of the Book for more details.\n \n+#### Unsafe code in functions\n+\n+Unsafe code is currently accepted in unsafe functions, but that is being phased\n+out in favor of requiring unsafe blocks here too.\n+\n+```\n+unsafe fn f() { return; }\n+\n+unsafe fn g() {\n+    f(); // Is accepted, but no longer recommended\n+    unsafe { f(); } // Recommended way to write this\n+}\n+```\n+\n+Linting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\n+is `allow` by default but will be upgraded to `warn` in a future edition.\n+\n [unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html"}, {"sha": "8ab38c4fb8bea8f3512a92053b234d01197bd6e8", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dc0943d2eebf139e7e509882b803f77bfd25656d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0943d2eebf139e7e509882b803f77bfd25656d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=dc0943d2eebf139e7e509882b803f77bfd25656d", "patch": "@@ -43,6 +43,15 @@ impl<'a> Parser<'a> {\n     fn parse_ty_param(&mut self, preceding_attrs: AttrVec) -> PResult<'a, GenericParam> {\n         let ident = self.parse_ident()?;\n \n+        // We might have a typo'd `Const` that was parsed as a type parameter.\n+        if self.may_recover()\n+            && ident.name.as_str().to_ascii_lowercase() == kw::Const.as_str()\n+            && self.check_ident()\n+        // `Const` followed by IDENT\n+        {\n+            return Ok(self.recover_const_param_with_mistyped_const(preceding_attrs, ident)?);\n+        }\n+\n         // Parse optional colon and param bounds.\n         let mut colon_span = None;\n         let bounds = if self.eat(&token::Colon) {\n@@ -120,6 +129,41 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    pub(crate) fn recover_const_param_with_mistyped_const(\n+        &mut self,\n+        preceding_attrs: AttrVec,\n+        mistyped_const_ident: Ident,\n+    ) -> PResult<'a, GenericParam> {\n+        let ident = self.parse_ident()?;\n+        self.expect(&token::Colon)?;\n+        let ty = self.parse_ty()?;\n+\n+        // Parse optional const generics default value.\n+        let default = if self.eat(&token::Eq) { Some(self.parse_const_arg()?) } else { None };\n+\n+        let mut err = self.struct_span_err(\n+            mistyped_const_ident.span,\n+            format!(\"`const` keyword was mistyped as `{}`\", mistyped_const_ident.as_str()),\n+        );\n+        err.span_suggestion_verbose(\n+            mistyped_const_ident.span,\n+            \"use the `const` keyword\",\n+            kw::Const.as_str(),\n+            Applicability::MachineApplicable,\n+        );\n+        err.emit();\n+\n+        Ok(GenericParam {\n+            ident,\n+            id: ast::DUMMY_NODE_ID,\n+            attrs: preceding_attrs,\n+            bounds: Vec::new(),\n+            kind: GenericParamKind::Const { ty, kw_span: mistyped_const_ident.span, default },\n+            is_placeholder: false,\n+            colon_span: None,\n+        })\n+    }\n+\n     /// Parses a (possibly empty) list of lifetime and type parameters, possibly including\n     /// a trailing comma and erroneous trailing attributes.\n     pub(super) fn parse_generic_params(&mut self) -> PResult<'a, ThinVec<ast::GenericParam>> {"}, {"sha": "d2906d6c4ae99e4edd551975b8c87236cfb181f8", "filename": "compiler/rustc_target/src/spec/x86_64_pc_solaris.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc0943d2eebf139e7e509882b803f77bfd25656d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0943d2eebf139e7e509882b803f77bfd25656d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs?ref=dc0943d2eebf139e7e509882b803f77bfd25656d", "patch": "@@ -7,7 +7,7 @@ pub fn target() -> Target {\n     base.vendor = \"pc\".into();\n     base.max_atomic_width = Some(64);\n     base.stack_probes = StackProbeType::X86;\n-    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI;\n+    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n     Target {\n         llvm_target: \"x86_64-pc-solaris\".into(),"}, {"sha": "ca5b62e279c1c51904e28c1b857786d2f94891f3", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_illumos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc0943d2eebf139e7e509882b803f77bfd25656d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0943d2eebf139e7e509882b803f77bfd25656d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs?ref=dc0943d2eebf139e7e509882b803f77bfd25656d", "patch": "@@ -5,7 +5,7 @@ pub fn target() -> Target {\n     base.add_pre_link_args(LinkerFlavor::Unix(Cc::Yes), &[\"-m64\", \"-std=c99\"]);\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI;\n+    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n     Target {\n         // LLVM does not currently have a separate illumos target,"}, {"sha": "62003ddf5153bc6e432018aa9e4a0800438eb081", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc0943d2eebf139e7e509882b803f77bfd25656d/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0943d2eebf139e7e509882b803f77bfd25656d/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=dc0943d2eebf139e7e509882b803f77bfd25656d", "patch": "@@ -3113,8 +3113,9 @@ impl<T> [T] {\n     ///\n     /// # Current implementation\n     ///\n-    /// The current algorithm is based on the quickselect portion of the same quicksort algorithm\n-    /// used for [`sort_unstable`].\n+    /// The current algorithm is an introselect implementation based on Pattern Defeating Quicksort, which is also\n+    /// the basis for [`sort_unstable`]. The fallback algorithm is Median of Medians using Tukey's Ninther for\n+    /// pivot selection, which guarantees linear runtime for all inputs.\n     ///\n     /// [`sort_unstable`]: slice::sort_unstable\n     ///"}, {"sha": "bf096f62c4838b3cb112eea9b504aef98ee8f0b3", "filename": "tests/rustdoc-gui/search-result-display.goml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc0943d2eebf139e7e509882b803f77bfd25656d/tests%2Frustdoc-gui%2Fsearch-result-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/dc0943d2eebf139e7e509882b803f77bfd25656d/tests%2Frustdoc-gui%2Fsearch-result-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsearch-result-display.goml?ref=dc0943d2eebf139e7e509882b803f77bfd25656d", "patch": "@@ -57,22 +57,22 @@ define-function: (\n \n call-function: (\"check-filter\", {\n     \"theme\": \"ayu\",\n-    \"border\": \"rgb(92, 103, 115)\",\n+    \"border\": \"#5c6773\",\n     \"filter\": \"invert(0.41) sepia(0.12) saturate(4.87) hue-rotate(171deg) brightness(0.94) contrast(0.94)\",\n-    \"hover_border\": \"rgb(224, 224, 224)\",\n+    \"hover_border\": \"#e0e0e0\",\n     \"hover_filter\": \"invert(0.98) sepia(0.12) saturate(0.81) hue-rotate(343deg) brightness(1.13) contrast(0.76)\",\n })\n call-function: (\"check-filter\", {\n     \"theme\": \"dark\",\n-    \"border\": \"rgb(224, 224, 224)\",\n+    \"border\": \"#e0e0e0\",\n     \"filter\": \"invert(0.94) sepia(0) saturate(7.21) hue-rotate(255deg) brightness(0.9) contrast(0.9)\",\n-    \"hover_border\": \"rgb(33, 150, 243)\",\n+    \"hover_border\": \"#2196f3\",\n     \"hover_filter\": \"invert(0.69) sepia(0.6) saturate(66.13) hue-rotate(184deg) brightness(1) contrast(0.91)\",\n })\n call-function: (\"check-filter\", {\n     \"theme\": \"light\",\n-    \"border\": \"rgb(224, 224, 224)\",\n+    \"border\": \"#e0e0e0\",\n     \"filter\": \"invert(1) sepia(0) saturate(42.23) hue-rotate(289deg) brightness(1.14) contrast(0.76)\",\n-    \"hover_border\": \"rgb(113, 113, 113)\",\n+    \"hover_border\": \"#717171\",\n     \"hover_filter\": \"invert(0.44) sepia(0.18) saturate(0.23) hue-rotate(317deg) brightness(0.96) contrast(0.93)\",\n })"}, {"sha": "85d3ebba57a3b7af027dcd2ceef517dc7cebd167", "filename": "tests/ui/parser/typod-const-in-const-param-def.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dc0943d2eebf139e7e509882b803f77bfd25656d/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0943d2eebf139e7e509882b803f77bfd25656d/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.rs?ref=dc0943d2eebf139e7e509882b803f77bfd25656d", "patch": "@@ -0,0 +1,16 @@\n+pub fn foo<Const N: u8>() {}\n+//~^ ERROR `const` keyword was mistyped as `Const`\n+\n+pub fn bar<Const>() {}\n+// OK\n+\n+pub fn baz<Const N: u8, T>() {}\n+//~^ ERROR `const` keyword was mistyped as `Const`\n+\n+pub fn qux<T, Const N: u8>() {}\n+//~^ ERROR `const` keyword was mistyped as `Const`\n+\n+pub fn quux<T, Const N: u8, U>() {}\n+//~^ ERROR `const` keyword was mistyped as `Const`\n+\n+fn main() {}"}, {"sha": "75d73c6ea878a59b90066e7e6335656ef4f0d30e", "filename": "tests/ui/parser/typod-const-in-const-param-def.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/dc0943d2eebf139e7e509882b803f77bfd25656d/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc0943d2eebf139e7e509882b803f77bfd25656d/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.stderr?ref=dc0943d2eebf139e7e509882b803f77bfd25656d", "patch": "@@ -0,0 +1,46 @@\n+error: `const` keyword was mistyped as `Const`\n+  --> $DIR/typod-const-in-const-param-def.rs:1:12\n+   |\n+LL | pub fn foo<Const N: u8>() {}\n+   |            ^^^^^\n+   |\n+help: use the `const` keyword\n+   |\n+LL | pub fn foo<const N: u8>() {}\n+   |            ~~~~~\n+\n+error: `const` keyword was mistyped as `Const`\n+  --> $DIR/typod-const-in-const-param-def.rs:7:12\n+   |\n+LL | pub fn baz<Const N: u8, T>() {}\n+   |            ^^^^^\n+   |\n+help: use the `const` keyword\n+   |\n+LL | pub fn baz<const N: u8, T>() {}\n+   |            ~~~~~\n+\n+error: `const` keyword was mistyped as `Const`\n+  --> $DIR/typod-const-in-const-param-def.rs:10:15\n+   |\n+LL | pub fn qux<T, Const N: u8>() {}\n+   |               ^^^^^\n+   |\n+help: use the `const` keyword\n+   |\n+LL | pub fn qux<T, const N: u8>() {}\n+   |               ~~~~~\n+\n+error: `const` keyword was mistyped as `Const`\n+  --> $DIR/typod-const-in-const-param-def.rs:13:16\n+   |\n+LL | pub fn quux<T, Const N: u8, U>() {}\n+   |                ^^^^^\n+   |\n+help: use the `const` keyword\n+   |\n+LL | pub fn quux<T, const N: u8, U>() {}\n+   |                ~~~~~\n+\n+error: aborting due to 4 previous errors\n+"}]}