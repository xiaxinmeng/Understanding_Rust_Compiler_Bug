{"sha": "f7ef71d491fe432eab3c3c9d2ee80a6678ebb952", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZWY3MWQ0OTFmZTQzMmVhYjNjM2M5ZDJlZTgwYTY2NzhlYmI5NTI=", "commit": {"author": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2013-05-01T09:52:08Z"}, "committer": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2013-05-01T09:52:08Z"}, "message": "compiletest: expanded to ARM test automation", "tree": {"sha": "afe394857339c3767ef86777d2bf905234e1a715", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afe394857339c3767ef86777d2bf905234e1a715"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7ef71d491fe432eab3c3c9d2ee80a6678ebb952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ef71d491fe432eab3c3c9d2ee80a6678ebb952", "html_url": "https://github.com/rust-lang/rust/commit/f7ef71d491fe432eab3c3c9d2ee80a6678ebb952", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7ef71d491fe432eab3c3c9d2ee80a6678ebb952/comments", "author": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c126e9bbcb4d02c40787afc46f5865874220d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c126e9bbcb4d02c40787afc46f5865874220d7", "html_url": "https://github.com/rust-lang/rust/commit/57c126e9bbcb4d02c40787afc46f5865874220d7"}], "stats": {"total": 165, "additions": 158, "deletions": 7}, "files": [{"sha": "73322fe1bdeaca0fd94d765a6826e37791d50001", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f7ef71d491fe432eab3c3c9d2ee80a6678ebb952/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ef71d491fe432eab3c3c9d2ee80a6678ebb952/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=f7ef71d491fe432eab3c3c9d2ee80a6678ebb952", "patch": "@@ -64,6 +64,18 @@ pub struct config {\n     // Run tests using the new runtime\n     newrt: bool,\n \n+    // Host System to be built\n+    host: ~str,\n+\n+    // Target System to be executed\n+    target: ~str,\n+\n+    // Extra parameter to run arm-linux-androideabi\n+    adb_path: ~str,\n+\n+    // check if can be run or not\n+    flag_runnable: bool,\n+\n     // Explain what's going on\n     verbose: bool\n "}, {"sha": "70e09fc7bab7e147b9e7a3e2175cddc745bbe9b1", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f7ef71d491fe432eab3c3c9d2ee80a6678ebb952/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/f7ef71d491fe432eab3c3c9d2ee80a6678ebb952/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=f7ef71d491fe432eab3c3c9d2ee80a6678ebb952", "patch": "@@ -60,7 +60,11 @@ pub fn parse_config(args: ~[~str]) -> config {\n           getopts::optflag(~\"verbose\"),\n           getopts::optopt(~\"logfile\"),\n           getopts::optflag(~\"jit\"),\n-          getopts::optflag(~\"newrt\")];\n+          getopts::optflag(~\"newrt\"),\n+          getopts::optopt(~\"host\"),\n+          getopts::optopt(~\"target\"),\n+          getopts::optopt(~\"adb-path\")\n+         ];\n \n     assert!(!args.is_empty());\n     let args_ = vec::tail(args);\n@@ -93,6 +97,22 @@ pub fn parse_config(args: ~[~str]) -> config {\n         rustcflags: getopts::opt_maybe_str(matches, ~\"rustcflags\"),\n         jit: getopts::opt_present(matches, ~\"jit\"),\n         newrt: getopts::opt_present(matches, ~\"newrt\"),\n+        host: opt_str(getopts::opt_maybe_str(matches, ~\"host\")),\n+        target: opt_str(getopts::opt_maybe_str(matches, ~\"target\")),\n+        adb_path: opt_str(getopts::opt_maybe_str(matches, ~\"adb-path\")),\n+        flag_runnable:\n+            if (getopts::opt_maybe_str(matches, ~\"host\") ==\n+                getopts::opt_maybe_str(matches, ~\"target\")) { true }\n+            else {\n+                match getopts::opt_maybe_str(matches, ~\"target\") {\n+                    Some(~\"arm-linux-androideabi\") => {\n+                        if (getopts::opt_maybe_str(matches, ~\"adb-path\") !=\n+                            option::None) { true }\n+                        else { false }\n+                    }\n+                    _ => { false }\n+                }\n+            },\n         verbose: getopts::opt_present(matches, ~\"verbose\")\n     }\n }\n@@ -113,6 +133,10 @@ pub fn log_config(config: config) {\n     logv(c, fmt!(\"rustcflags: %s\", opt_str(config.rustcflags)));\n     logv(c, fmt!(\"jit: %b\", config.jit));\n     logv(c, fmt!(\"newrt: %b\", config.newrt));\n+    logv(c, fmt!(\"host: %s\", config.host));\n+    logv(c, fmt!(\"target: %s\", config.target));\n+    logv(c, fmt!(\"adb_path: %s\", config.adb_path));\n+    logv(c, fmt!(\"flag_runnable: %b\", config.flag_runnable));\n     logv(c, fmt!(\"verbose: %b\", config.verbose));\n     logv(c, fmt!(\"\\n\"));\n }"}, {"sha": "4b07835163c00383cd2babf05c5ee8962a9414a4", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 121, "deletions": 6, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/f7ef71d491fe432eab3c3c9d2ee80a6678ebb952/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ef71d491fe432eab3c3c9d2ee80a6678ebb952/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=f7ef71d491fe432eab3c3c9d2ee80a6678ebb952", "patch": "@@ -77,8 +77,10 @@ fn run_rfail_test(config: config, props: TestProps, testfile: &Path) {\n         fatal_ProcRes(~\"run-fail test isn't valgrind-clean!\", ProcRes);\n     }\n \n-    check_correct_failure_status(ProcRes);\n-    check_error_patterns(props, testfile, ProcRes);\n+    if (config.flag_runnable) {\n+        check_correct_failure_status(ProcRes);\n+        check_error_patterns(props, testfile, ProcRes);\n+    }\n }\n \n fn check_correct_failure_status(ProcRes: ProcRes) {\n@@ -483,10 +485,96 @@ fn exec_compiled_test(config: config, props: TestProps,\n         props.exec_env\n     };\n \n-    compose_and_run(config, testfile,\n-                    make_run_args(config, props, testfile),\n-                    env,\n-                    config.run_lib_path, None)\n+    if (config.host == config.target) {\n+        compose_and_run(config, testfile,\n+                        make_run_args(config, props, testfile),\n+                        env,\n+                        config.run_lib_path, None)\n+    }\n+    else {\n+        let args = make_run_args(config, props, testfile);\n+        let cmdline = make_cmdline(~\"\", args.prog, args.args);\n+\n+        let defaultRes = match config.mode {\n+            mode_run_fail => ProcRes {status: 101, stdout: ~\"\", stderr: ~\"\", cmdline: cmdline},\n+            _             => ProcRes {status: 0, stdout: ~\"\", stderr: ~\"\", cmdline: cmdline}\n+        };\n+\n+        match (config.target, config.flag_runnable) {\n+\n+            (~\"arm-linux-androideabi\", true) => {\n+\n+                // get bare program string\n+                let mut tvec = ~[];\n+                let tstr = args.prog;\n+                for str::each_split_char(tstr, '/') |ts| { tvec.push(ts.to_owned()) }\n+                let prog_short = tvec.pop();\n+\n+                // copy to target\n+                let copy_result = procsrv::run(~\"\", config.adb_path,\n+                    ~[~\"push\", args.prog, ~\"/system/tmp\"],\n+                    ~[(~\"\",~\"\")], Some(~\"\"));\n+\n+                if config.verbose {\n+                    io::stdout().write_str(fmt!(\"push (%s) %s %s %s\",\n+                        config.target, args.prog,\n+                        copy_result.out, copy_result.err));\n+                }\n+\n+                // execute program\n+                logv(config, fmt!(\"executing (%s) %s\", config.target, cmdline));\n+\n+                // NOTE : adb shell dose not forward to each stdout and stderr of internal result \n+                //        but forward to stdout only\n+                let mut newargs_out = ~[];\n+                let mut newargs_err = ~[];\n+                let subargs = args.args;\n+                newargs_out.push(~\"shell\");\n+                newargs_err.push(~\"shell\");\n+\n+                let mut newcmd_out = ~\"\";\n+                let mut newcmd_err = ~\"\";\n+                newcmd_out.push_str(~\"LD_LIBRARY_PATH=/system/tmp; \");\n+                newcmd_err.push_str(~\"LD_LIBRARY_PATH=/system/tmp; \");\n+                newcmd_out.push_str(~\"export LD_LIBRARY_PATH; \");\n+                newcmd_err.push_str(~\"export LD_LIBRARY_PATH; \");\n+                newcmd_out.push_str(~\"cd /system/tmp; \");\n+                newcmd_err.push_str(~\"cd /system/tmp; \");\n+                newcmd_out.push_str(\"./\");\n+                newcmd_err.push_str(\"./\");\n+                newcmd_out.push_str(prog_short);\n+                newcmd_err.push_str(prog_short);\n+\n+                for vec::each(subargs) |tv| {\n+                    newcmd_out.push_str(\" \");\n+                    newcmd_err.push_str(\" \");\n+                    newcmd_out.push_str(tv.to_owned());\n+                    newcmd_err.push_str(tv.to_owned());\n+                }\n+\n+                newcmd_out.push_str(\" 2>/dev/null\");\n+                newcmd_err.push_str(\" 1>/dev/null\");\n+\n+                newargs_out.push(newcmd_out);\n+                newargs_err.push(newcmd_err);\n+\n+                let exe_result_out = procsrv::run(~\"\", config.adb_path,\n+                    newargs_out, ~[(~\"\",~\"\")], Some(~\"\"));\n+                let exe_result_err = procsrv::run(~\"\", config.adb_path,\n+                    newargs_err, ~[(~\"\",~\"\")], Some(~\"\"));\n+\n+                dump_output(config, testfile, exe_result_out.out, exe_result_err.out);\n+\n+                match exe_result_err.out {\n+                    ~\"\" => ProcRes {status: exe_result_out.status, stdout: exe_result_out.out,\n+                        stderr: exe_result_err.out, cmdline: cmdline },\n+                    _   => ProcRes {status: 101, stdout: exe_result_out.out,\n+                        stderr: exe_result_err.out, cmdline: cmdline }\n+                }\n+            }\n+            _=> defaultRes\n+        }\n+    }\n }\n \n fn compose_and_run_compiler(\n@@ -516,6 +604,33 @@ fn compose_and_run_compiler(\n                      abs_ab.to_str()),\n                 auxres);\n         }\n+        if (config.host != config.target)\n+        {\n+            match (config.target, config.flag_runnable) {\n+\n+                (~\"arm-linux-androideabi\", true) => {\n+\n+                    let tstr = aux_output_dir_name(config, testfile).to_str();\n+\n+                    for os::list_dir_path(&Path(tstr)).each |file| {\n+\n+                        if (file.filetype() == Some(~\".so\")) {\n+\n+                            let copy_result = procsrv::run(~\"\", config.adb_path,\n+                                ~[~\"push\", file.to_str(), ~\"/system/tmp\"],\n+                                ~[(~\"\",~\"\")], Some(~\"\"));\n+\n+                            if config.verbose {\n+                                io::stdout().write_str(fmt!(\"push (%s) %s %s %s\",\n+                                    config.target, file.to_str(),\n+                                    copy_result.out, copy_result.err));\n+                            }\n+                        }\n+                    }\n+                }\n+                _=> ()\n+            }\n+        }\n     }\n \n     compose_and_run(config, testfile, args, ~[],"}]}