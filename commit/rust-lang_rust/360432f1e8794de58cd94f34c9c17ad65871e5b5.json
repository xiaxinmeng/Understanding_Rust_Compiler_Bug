{"sha": "360432f1e8794de58cd94f34c9c17ad65871e5b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MDQzMmYxZTg3OTRkZTU4Y2Q5NGYzNGM5YzE3YWQ2NTg3MWU1YjU=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-04-15T02:23:21Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-04-18T05:47:35Z"}, "message": "libcore => 2018", "tree": {"sha": "c4529f81addb47358f885fda80e881198a592578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4529f81addb47358f885fda80e881198a592578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/360432f1e8794de58cd94f34c9c17ad65871e5b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/360432f1e8794de58cd94f34c9c17ad65871e5b5", "html_url": "https://github.com/rust-lang/rust/commit/360432f1e8794de58cd94f34c9c17ad65871e5b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/360432f1e8794de58cd94f34c9c17ad65871e5b5/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9387927ae2c0d2a283f6c48b705f25d38bb6e692", "url": "https://api.github.com/repos/rust-lang/rust/commits/9387927ae2c0d2a283f6c48b705f25d38bb6e692", "html_url": "https://github.com/rust-lang/rust/commit/9387927ae2c0d2a283f6c48b705f25d38bb6e692"}], "stats": {"total": 674, "additions": 342, "deletions": 332}, "files": [{"sha": "ede5fff5f4a0e7ca52eedec48a1d423ba20154b5", "filename": "src/libcore/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2FCargo.toml?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -4,6 +4,7 @@ name = \"core\"\n version = \"0.0.0\"\n autotests = false\n autobenches = false\n+edition = \"2018\"\n \n [lib]\n name = \"core\""}, {"sha": "18354945a1e514c0166913b84c9dac440ec2fbd0", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -2,12 +2,12 @@\n \n #![stable(feature = \"alloc_module\", since = \"1.28.0\")]\n \n-use cmp;\n-use fmt;\n-use mem;\n-use usize;\n-use ptr::{self, NonNull};\n-use num::NonZeroUsize;\n+use crate::cmp;\n+use crate::fmt;\n+use crate::mem;\n+use crate::usize;\n+use crate::ptr::{self, NonNull};\n+use crate::num::NonZeroUsize;\n \n /// Represents the combination of a starting address and\n /// a total capacity of the returned block."}, {"sha": "a4827aa36edd051295a31bb21e3ff60808560f47", "filename": "src/libcore/any.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -61,8 +61,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use fmt;\n-use intrinsics;\n+use crate::fmt;\n+use crate::intrinsics;\n \n ///////////////////////////////////////////////////////////////////////////////\n // Any trait"}, {"sha": "3c445db69bbb4c1c5a76ea9551a129c90f666286", "filename": "src/libcore/array.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -9,13 +9,13 @@\n                       integer constants\",\n             issue = \"27778\")]\n \n-use borrow::{Borrow, BorrowMut};\n-use cmp::Ordering;\n-use convert::TryFrom;\n-use fmt;\n-use hash::{Hash, self};\n-use marker::Unsize;\n-use slice::{Iter, IterMut};\n+use crate::borrow::{Borrow, BorrowMut};\n+use crate::cmp::Ordering;\n+use crate::convert::TryFrom;\n+use crate::fmt;\n+use crate::hash::{Hash, self};\n+use crate::marker::Unsize;\n+use crate::slice::{Iter, IterMut};\n \n /// Utility trait implemented only on arrays of fixed size\n ///"}, {"sha": "953fe9ca2b9f8d7a7754fcd1bb0c3024916a092b", "filename": "src/libcore/ascii.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fascii.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -11,9 +11,9 @@\n \n #![stable(feature = \"core_ascii\", since = \"1.26.0\")]\n \n-use fmt;\n-use ops::Range;\n-use iter::FusedIterator;\n+use crate::fmt;\n+use crate::ops::Range;\n+use crate::iter::FusedIterator;\n \n /// An iterator over the escaped version of a byte.\n ///"}, {"sha": "dea2963d9ac8377eeb54045acbb3a5d0285f202e", "filename": "src/libcore/benches/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Flib.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,7 +1,6 @@\n #![feature(flt2dec)]\n #![feature(test)]\n \n-extern crate core;\n extern crate test;\n \n mod any;"}, {"sha": "1c55e62539a85c378c876b77483af79d2cc7ff88", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -186,12 +186,12 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use cmp::Ordering;\n-use fmt::{self, Debug, Display};\n-use marker::Unsize;\n-use mem;\n-use ops::{Deref, DerefMut, CoerceUnsized};\n-use ptr;\n+use crate::cmp::Ordering;\n+use crate::fmt::{self, Debug, Display};\n+use crate::marker::Unsize;\n+use crate::mem;\n+use crate::ops::{Deref, DerefMut, CoerceUnsized};\n+use crate::ptr;\n \n /// A mutable memory location.\n ///"}, {"sha": "ec273746111ee67f34efbc3cdbdd189092f1183f", "filename": "src/libcore/char/convert.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fconvert.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,9 +1,10 @@\n //! Character conversions.\n \n-use convert::TryFrom;\n-use fmt;\n-use mem::transmute;\n-use str::FromStr;\n+use crate::convert::TryFrom;\n+use crate::fmt;\n+use crate::mem::transmute;\n+use crate::str::FromStr;\n+\n use super::MAX;\n \n /// Converts a `u32` to a `char`."}, {"sha": "ed92eca08bf7f033e12b6c7715cacbd39de633ac", "filename": "src/libcore/char/decode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fdecode.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,6 +1,7 @@\n //! UTF-8 and UTF-16 decoding iterators\n \n-use fmt;\n+use crate::fmt;\n+\n use super::from_u32_unchecked;\n \n /// An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s."}, {"sha": "18557e0c11d8922f15749c6d0a6b92d7076d2396", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,10 +1,11 @@\n //! impl char {}\n \n-use slice;\n-use str::from_utf8_unchecked_mut;\n+use crate::slice;\n+use crate::str::from_utf8_unchecked_mut;\n+use crate::unicode::printable::is_printable;\n+use crate::unicode::tables::{conversions, derived_property, general_category, property};\n+\n use super::*;\n-use unicode::printable::is_printable;\n-use unicode::tables::{conversions, derived_property, general_category, property};\n \n #[lang = \"char\"]\n impl char {"}, {"sha": "39186273d62db706bb6694c76cd8235e045459f4", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -37,12 +37,12 @@ pub use self::decode::{decode_utf16, DecodeUtf16, DecodeUtf16Error};\n \n // unstable re-exports\n #[unstable(feature = \"unicode_version\", issue = \"49726\")]\n-pub use unicode::tables::UNICODE_VERSION;\n+pub use crate::unicode::tables::UNICODE_VERSION;\n #[unstable(feature = \"unicode_version\", issue = \"49726\")]\n-pub use unicode::version::UnicodeVersion;\n+pub use crate::unicode::version::UnicodeVersion;\n \n-use fmt::{self, Write};\n-use iter::FusedIterator;\n+use crate::fmt::{self, Write};\n+use crate::iter::FusedIterator;\n \n // UTF-8 ranges and tags for encoding characters\n const TAG_CONT: u8     = 0b1000_0000;"}, {"sha": "9e32acb97d36001d1f4c1a9f142b977dc0ea4eee", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -142,13 +142,13 @@ pub trait Clone : Sized {\n #[unstable(feature = \"derive_clone_copy\",\n            reason = \"deriving hack, should not be public\",\n            issue = \"0\")]\n-pub struct AssertParamIsClone<T: Clone + ?Sized> { _field: ::marker::PhantomData<T> }\n+pub struct AssertParamIsClone<T: Clone + ?Sized> { _field: crate::marker::PhantomData<T> }\n #[doc(hidden)]\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"derive_clone_copy\",\n            reason = \"deriving hack, should not be public\",\n            issue = \"0\")]\n-pub struct AssertParamIsCopy<T: Copy + ?Sized> { _field: ::marker::PhantomData<T> }\n+pub struct AssertParamIsCopy<T: Copy + ?Sized> { _field: crate::marker::PhantomData<T> }\n \n /// Implementations of `Clone` for primitive types.\n ///"}, {"sha": "59088e432917704f35a84b8c395e2c4eeb33242b", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -265,7 +265,7 @@ pub trait Eq: PartialEq<Self> {\n #[unstable(feature = \"derive_eq\",\n            reason = \"deriving hack, should not be public\",\n            issue = \"0\")]\n-pub struct AssertParamIsEq<T: Eq + ?Sized> { _field: ::marker::PhantomData<T> }\n+pub struct AssertParamIsEq<T: Eq + ?Sized> { _field: crate::marker::PhantomData<T> }\n \n /// An `Ordering` is the result of a comparison between two values.\n ///\n@@ -884,7 +884,7 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n \n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types\n mod impls {\n-    use cmp::Ordering::{self, Less, Greater, Equal};\n+    use crate::cmp::Ordering::{self, Less, Greater, Equal};\n \n     macro_rules! partial_eq_impl {\n         ($($t:ty)*) => ($("}, {"sha": "cf92babcb400c6acc4418142cf0306354a839cc2", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -40,7 +40,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use fmt;\n+use crate::fmt;\n \n /// An identity function.\n ///"}, {"sha": "004fafc5a0b65d295c754ede6bd9eb295c98d289", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -4,7 +4,7 @@\n \n //! Utilities related to FFI bindings.\n \n-use ::fmt;\n+use crate::fmt;\n \n /// Equivalent to C's `void` type when used as a [pointer].\n ///"}, {"sha": "e78381ba0c482f05add8886a5a2b18e5890f43b5", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,4 +1,4 @@\n-use fmt;\n+use crate::fmt;\n \n struct PadAdapter<'a> {\n     buf: &'a mut (dyn fmt::Write + 'a),"}, {"sha": "5fc2cd4b8d0a32d6d70a0504a6251f8aedfe3cff", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,6 +1,6 @@\n-use fmt::{Formatter, Result, LowerExp, UpperExp, Display, Debug};\n-use mem::MaybeUninit;\n-use num::flt2dec;\n+use crate::fmt::{Formatter, Result, LowerExp, UpperExp, Display, Debug};\n+use crate::mem::MaybeUninit;\n+use crate::num::flt2dec;\n \n // Don't inline this so callers don't use the stack space this function\n // requires unless they have to."}, {"sha": "1ccd6ec898f8b617bd319fa71437ef45f19ae870", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -2,14 +2,14 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use cell::{UnsafeCell, Cell, RefCell, Ref, RefMut};\n-use marker::PhantomData;\n-use mem;\n-use num::flt2dec;\n-use ops::Deref;\n-use result;\n-use slice;\n-use str;\n+use crate::cell::{UnsafeCell, Cell, RefCell, Ref, RefMut};\n+use crate::marker::PhantomData;\n+use crate::mem;\n+use crate::num::flt2dec;\n+use crate::ops::Deref;\n+use crate::result;\n+use crate::slice;\n+use crate::str;\n \n mod float;\n mod num;"}, {"sha": "6ad9cc62239531df4de2bc566be2ec50d08cc51d", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,12 +1,12 @@\n //! Integer and floating-point number formatting\n \n \n-use fmt;\n-use ops::{Div, Rem, Sub};\n-use str;\n-use slice;\n-use ptr;\n-use mem::MaybeUninit;\n+use crate::fmt;\n+use crate::ops::{Div, Rem, Sub};\n+use crate::str;\n+use crate::slice;\n+use crate::ptr;\n+use crate::mem::MaybeUninit;\n \n #[doc(hidden)]\n trait Int: PartialEq + PartialOrd + Div<Output=Self> + Rem<Output=Self> +\n@@ -196,7 +196,7 @@ macro_rules! impl_Display {\n \n             unsafe {\n                 // need at least 16 bits for the 4-characters-at-a-time to work.\n-                assert!(::mem::size_of::<$u>() >= 2);\n+                assert!(crate::mem::size_of::<$u>() >= 2);\n \n                 // eagerly decode 4 characters at a time\n                 while n >= 10000 {"}, {"sha": "ea54b5a66996af925877ea3e810ddc8885ad1981", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -2,10 +2,10 @@\n             reason = \"futures in libcore are unstable\",\n             issue = \"50547\")]\n \n-use marker::Unpin;\n-use ops;\n-use pin::Pin;\n-use task::{Context, Poll};\n+use crate::marker::Unpin;\n+use crate::ops;\n+use crate::pin::Pin;\n+use crate::task::{Context, Poll};\n \n /// A future represents an asynchronous computation.\n ///"}, {"sha": "46f7f90e4649de21786d5fe7f8e130892ffb7293", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -81,8 +81,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use fmt;\n-use marker;\n+use crate::fmt;\n+use crate::marker;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n@@ -541,8 +541,9 @@ impl<H> Eq for BuildHasherDefault<H> {}\n //////////////////////////////////////////////////////////////////////////////\n \n mod impls {\n-    use mem;\n-    use slice;\n+    use crate::mem;\n+    use crate::slice;\n+\n     use super::*;\n \n     macro_rules! impl_write {"}, {"sha": "19aeafd882ef12c1ca5e3cc39ce7282f535da02e", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -2,10 +2,10 @@\n \n #![allow(deprecated)] // the types in this module are deprecated\n \n-use marker::PhantomData;\n-use ptr;\n-use cmp;\n-use mem;\n+use crate::marker::PhantomData;\n+use crate::ptr;\n+use crate::cmp;\n+use crate::mem;\n \n /// An implementation of SipHash 1-3.\n ///\n@@ -269,7 +269,7 @@ impl<S: Sip> super::Hasher for Hasher<S> {\n     #[inline]\n     fn write_usize(&mut self, i: usize) {\n         let bytes = unsafe {\n-            ::slice::from_raw_parts(&i as *const usize as *const u8, mem::size_of::<usize>())\n+            crate::slice::from_raw_parts(&i as *const usize as *const u8, mem::size_of::<usize>())\n         };\n         self.short_write(bytes);\n     }"}, {"sha": "94eddbeda2b8642455cb0b6e0f955f26a545f41f", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -2,7 +2,7 @@\n \n //! Hints to compiler that affects how code should be emitted or optimized.\n \n-use intrinsics;\n+use crate::intrinsics;\n \n /// Informs the compiler that this point in the code is not reachable, enabling\n /// further optimizations."}, {"sha": "dd5b92857be63e1c72a53e9830280c5e60288027", "filename": "src/libcore/internal_macros.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Finternal_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Finternal_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Finternal_macros.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -81,24 +81,22 @@ macro_rules! forward_ref_op_assign {\n macro_rules! impl_fn_for_zst {\n     ($(\n         $( #[$attr: meta] )*\n-        // FIXME: when libcore is in the 2018 edition, use `?` repetition in\n-        // $( <$( $li : lifetime ),+> )?\n-        struct $Name: ident impl$( <$( $lifetime : lifetime ),+> )* Fn =\n+        struct $Name: ident impl$( <$( $lifetime : lifetime ),+> )? Fn =\n             |$( $arg: ident: $ArgTy: ty ),*| -> $ReturnTy: ty\n             $body: block;\n     )+) => {\n         $(\n             $( #[$attr] )*\n             struct $Name;\n \n-            impl $( <$( $lifetime ),+> )* Fn<($( $ArgTy, )*)> for $Name {\n+            impl $( <$( $lifetime ),+> )? Fn<($( $ArgTy, )*)> for $Name {\n                 #[inline]\n                 extern \"rust-call\" fn call(&self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n                     $body\n                 }\n             }\n \n-            impl $( <$( $lifetime ),+> )* FnMut<($( $ArgTy, )*)> for $Name {\n+            impl $( <$( $lifetime ),+> )? FnMut<($( $ArgTy, )*)> for $Name {\n                 #[inline]\n                 extern \"rust-call\" fn call_mut(\n                     &mut self,\n@@ -108,7 +106,7 @@ macro_rules! impl_fn_for_zst {\n                 }\n             }\n \n-            impl $( <$( $lifetime ),+> )* FnOnce<($( $ArgTy, )*)> for $Name {\n+            impl $( <$( $lifetime ),+> )? FnOnce<($( $ArgTy, )*)> for $Name {\n                 type Output = $ReturnTy;\n \n                 #[inline]"}, {"sha": "782a7ba45598455de4b03064c000aeb7bad862ad", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -39,7 +39,7 @@\n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n #[rustc_deprecated(reason = \"no longer an intrinsic - use `ptr::drop_in_place` directly\",\n                    since = \"1.18.0\")]\n-pub use ptr::drop_in_place;\n+pub use crate::ptr::drop_in_place;\n \n extern \"rust-intrinsic\" {\n     // N.B., these intrinsics take raw pointers because they mutate aliased\n@@ -1291,7 +1291,7 @@ extern \"rust-intrinsic\" {\n     /// platforms this is a `*mut *mut T` which is filled in by the compiler and\n     /// on MSVC it's `*mut [usize; 2]`. For more information see the compiler's\n     /// source as well as std's catch implementation.\n-    pub fn try(f: fn(*mut u8), data: *mut u8, local_ptr: *mut u8) -> i32;\n+    pub fn r#try(f: fn(*mut u8), data: *mut u8, local_ptr: *mut u8) -> i32;\n \n     /// Emits a `!nontemporal` store according to LLVM (see their docs).\n     /// Probably will never become stable."}, {"sha": "11e13149bc2c9248176b0fa3f58ede1334bec4f1", "filename": "src/libcore/iter/adapters/chain.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,5 +1,6 @@\n-use ops::Try;\n-use usize;\n+use crate::ops::Try;\n+use crate::usize;\n+\n use super::super::{Iterator, DoubleEndedIterator, FusedIterator, TrustedLen};\n \n /// An iterator that strings two iterators together."}, {"sha": "8eb81fbb2c6e4f19af9c96f7f5ed27e1f4cdb75a", "filename": "src/libcore/iter/adapters/flatten.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fflatten.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,5 +1,6 @@\n-use fmt;\n-use ops::Try;\n+use crate::fmt;\n+use crate::ops::Try;\n+\n use super::super::{Iterator, DoubleEndedIterator, FusedIterator};\n use super::Map;\n "}, {"sha": "ce18b4b97ad661e1874e36ee71dda430489e65c4", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,8 +1,9 @@\n-use cmp;\n-use fmt;\n-use ops::Try;\n-use usize;\n-use intrinsics;\n+use crate::cmp;\n+use crate::fmt;\n+use crate::ops::Try;\n+use crate::usize;\n+use crate::intrinsics;\n+\n use super::{Iterator, DoubleEndedIterator, ExactSizeIterator, FusedIterator, TrustedLen};\n use super::LoopState;\n "}, {"sha": "06f047d92872e31ac1f372d593a1fadee4a2bb09", "filename": "src/libcore/iter/adapters/zip.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fzip.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,4 +1,5 @@\n-use cmp;\n+use crate::cmp;\n+\n use super::super::{Iterator, DoubleEndedIterator, ExactSizeIterator, FusedIterator, TrustedLen};\n \n /// An iterator that iterates two other iterators simultaneously."}, {"sha": "fd7498119bf49f26014d7ddb81ff50c65a58f56d", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -306,7 +306,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use ops::Try;\n+use crate::ops::Try;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::traits::Iterator;"}, {"sha": "f8a975cc8d47fc3d37f4cb663300c6d540efe1cc", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,7 +1,7 @@\n-use convert::TryFrom;\n-use mem;\n-use ops::{self, Add, Sub, Try};\n-use usize;\n+use crate::convert::TryFrom;\n+use crate::mem;\n+use crate::ops::{self, Add, Sub, Try};\n+use crate::usize;\n \n use super::{FusedIterator, TrustedLen};\n \n@@ -321,7 +321,7 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n         }\n \n         if let Some(plus_n) = self.start.add_usize(n) {\n-            use cmp::Ordering::*;\n+            use crate::cmp::Ordering::*;\n \n             match plus_n.partial_cmp(&self.end) {\n                 Some(Less) => {"}, {"sha": "c4f6fbf0ff2225f7e437c45baf8ba509552ff012", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,6 +1,6 @@\n-use fmt;\n-use marker;\n-use usize;\n+use crate::fmt;\n+use crate::marker;\n+use crate::usize;\n \n use super::{FusedIterator, TrustedLen};\n \n@@ -283,7 +283,7 @@ pub const fn empty<T>() -> Empty<T> {\n #[derive(Clone, Debug)]\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub struct Once<T> {\n-    inner: ::option::IntoIter<T>\n+    inner: crate::option::IntoIter<T>\n }\n \n #[stable(feature = \"iter_once\", since = \"1.2.0\")]"}, {"sha": "7815fe9c59d08636a4af8950bc4c53811641e096", "filename": "src/libcore/iter/traits/accum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,5 +1,5 @@\n-use ops::{Mul, Add};\n-use num::Wrapping;\n+use crate::ops::{Mul, Add};\n+use crate::num::Wrapping;\n \n /// Trait to represent types that can be created by summing up an iterator.\n ///"}, {"sha": "06de95c082724bdfcefa15e972374ee46aed10ae", "filename": "src/libcore/iter/traits/double_ended.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,5 +1,5 @@\n-use ops::Try;\n-use iter::LoopState;\n+use crate::ops::Try;\n+use crate::iter::LoopState;\n \n /// An iterator able to yield elements from both ends.\n ///"}, {"sha": "9da593c86bdfb598d31235935c868a74bdeab3f1", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,5 +1,5 @@\n-use cmp::Ordering;\n-use ops::Try;\n+use crate::cmp::Ordering;\n+use crate::ops::Try;\n \n use super::super::LoopState;\n use super::super::{Chain, Cycle, Copied, Cloned, Enumerate, Filter, FilterMap, Fuse};"}, {"sha": "0d660b002da60ae9e491e5e3c447a12935721536", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -63,6 +63,10 @@\n #![warn(missing_debug_implementations)]\n #![deny(intra_doc_link_resolution_failure)] // rustdoc is run without -D warnings\n \n+#![deny(rust_2018_idioms)]\n+#![allow(explicit_outlives_requirements)]\n+#![allow(elided_lifetimes_in_paths)]\n+\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n #![feature(asm)]"}, {"sha": "74f685a6de20ed64373a15386853e0433254ea92", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -6,10 +6,10 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use cell::UnsafeCell;\n-use cmp;\n-use hash::Hash;\n-use hash::Hasher;\n+use crate::cell::UnsafeCell;\n+use crate::cmp;\n+use crate::hash::Hash;\n+use crate::hash::Hasher;\n \n /// Types that can be transferred across thread boundaries.\n ///"}, {"sha": "e2bd4b4a39a9d2b06249e2db31124be01023891c", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -5,18 +5,18 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use clone;\n-use cmp;\n-use fmt;\n-use hash;\n-use intrinsics;\n-use marker::{Copy, PhantomData, Sized};\n-use ptr;\n-use ops::{Deref, DerefMut};\n+use crate::clone;\n+use crate::cmp;\n+use crate::fmt;\n+use crate::hash;\n+use crate::intrinsics;\n+use crate::marker::{Copy, PhantomData, Sized};\n+use crate::ptr;\n+use crate::ops::{Deref, DerefMut};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(inline)]\n-pub use intrinsics::transmute;\n+pub use crate::intrinsics::transmute;\n \n /// Takes ownership and \"forgets\" about the value **without running its destructor**.\n ///"}, {"sha": "64699e85d0c8828950202d61b486053d109e5b29", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -17,8 +17,8 @@\n             issue = \"0\")]\n #![macro_use]\n \n-use mem;\n-use intrinsics;\n+use crate::mem;\n+use crate::intrinsics;\n \n /// Arithmetic operations required by bignums.\n pub trait FullOps: Sized {\n@@ -128,7 +128,7 @@ macro_rules! define_bignum {\n \n             /// Makes a bignum from `u64` value.\n             pub fn from_u64(mut v: u64) -> $name {\n-                use mem;\n+                use crate::mem;\n \n                 let mut base = [0; $n];\n                 let mut sz = 0;\n@@ -150,7 +150,7 @@ macro_rules! define_bignum {\n             /// Returns the `i`-th bit where bit 0 is the least significant one.\n             /// In other words, the bit with weight `2^i`.\n             pub fn get_bit(&self, i: usize) -> u8 {\n-                use mem;\n+                use crate::mem;\n \n                 let digitbits = mem::size_of::<$ty>() * 8;\n                 let d = i / digitbits;\n@@ -166,7 +166,7 @@ macro_rules! define_bignum {\n             /// Returns the number of bits necessary to represent this value. Note that zero\n             /// is considered to need 0 bits.\n             pub fn bit_length(&self) -> usize {\n-                use mem;\n+                use crate::mem;\n \n                 // Skip over the most significant digits which are zero.\n                 let digits = self.digits();\n@@ -190,8 +190,8 @@ macro_rules! define_bignum {\n \n             /// Adds `other` to itself and returns its own mutable reference.\n             pub fn add<'a>(&'a mut self, other: &$name) -> &'a mut $name {\n-                use cmp;\n-                use num::bignum::FullOps;\n+                use crate::cmp;\n+                use crate::num::bignum::FullOps;\n \n                 let mut sz = cmp::max(self.size, other.size);\n                 let mut carry = false;\n@@ -209,7 +209,7 @@ macro_rules! define_bignum {\n             }\n \n             pub fn add_small(&mut self, other: $ty) -> &mut $name {\n-                use num::bignum::FullOps;\n+                use crate::num::bignum::FullOps;\n \n                 let (mut carry, v) = self.base[0].full_add(other, false);\n                 self.base[0] = v;\n@@ -228,8 +228,8 @@ macro_rules! define_bignum {\n \n             /// Subtracts `other` from itself and returns its own mutable reference.\n             pub fn sub<'a>(&'a mut self, other: &$name) -> &'a mut $name {\n-                use cmp;\n-                use num::bignum::FullOps;\n+                use crate::cmp;\n+                use crate::num::bignum::FullOps;\n \n                 let sz = cmp::max(self.size, other.size);\n                 let mut noborrow = true;\n@@ -246,7 +246,7 @@ macro_rules! define_bignum {\n             /// Multiplies itself by a digit-sized `other` and returns its own\n             /// mutable reference.\n             pub fn mul_small(&mut self, other: $ty) -> &mut $name {\n-                use num::bignum::FullOps;\n+                use crate::num::bignum::FullOps;\n \n                 let mut sz = self.size;\n                 let mut carry = 0;\n@@ -265,7 +265,7 @@ macro_rules! define_bignum {\n \n             /// Multiplies itself by `2^bits` and returns its own mutable reference.\n             pub fn mul_pow2(&mut self, bits: usize) -> &mut $name {\n-                use mem;\n+                use crate::mem;\n \n                 let digitbits = mem::size_of::<$ty>() * 8;\n                 let digits = bits / digitbits;\n@@ -306,8 +306,8 @@ macro_rules! define_bignum {\n \n             /// Multiplies itself by `5^e` and returns its own mutable reference.\n             pub fn mul_pow5(&mut self, mut e: usize) -> &mut $name {\n-                use mem;\n-                use num::bignum::SMALL_POW5;\n+                use crate::mem;\n+                use crate::num::bignum::SMALL_POW5;\n \n                 // There are exactly n trailing zeros on 2^n, and the only relevant digit sizes\n                 // are consecutive powers of two, so this is well suited index for the table.\n@@ -338,7 +338,7 @@ macro_rules! define_bignum {\n             pub fn mul_digits<'a>(&'a mut self, other: &[$ty]) -> &'a mut $name {\n                 // the internal routine. works best when aa.len() <= bb.len().\n                 fn mul_inner(ret: &mut [$ty; $n], aa: &[$ty], bb: &[$ty]) -> usize {\n-                    use num::bignum::FullOps;\n+                    use crate::num::bignum::FullOps;\n \n                     let mut retsz = 0;\n                     for (i, &a) in aa.iter().enumerate() {\n@@ -375,7 +375,7 @@ macro_rules! define_bignum {\n             /// Divides itself by a digit-sized `other` and returns its own\n             /// mutable reference *and* the remainder.\n             pub fn div_rem_small(&mut self, other: $ty) -> (&mut $name, $ty) {\n-                use num::bignum::FullOps;\n+                use crate::num::bignum::FullOps;\n \n                 assert!(other > 0);\n \n@@ -392,7 +392,7 @@ macro_rules! define_bignum {\n             /// Divide self by another bignum, overwriting `q` with the quotient and `r` with the\n             /// remainder.\n             pub fn div_rem(&self, d: &$name, q: &mut $name, r: &mut $name) {\n-                use mem;\n+                use crate::mem;\n \n                 // Stupid slow base-2 long division taken from\n                 // https://en.wikipedia.org/wiki/Division_algorithm\n@@ -429,38 +429,38 @@ macro_rules! define_bignum {\n             }\n         }\n \n-        impl ::cmp::PartialEq for $name {\n+        impl crate::cmp::PartialEq for $name {\n             fn eq(&self, other: &$name) -> bool { self.base[..] == other.base[..] }\n         }\n \n-        impl ::cmp::Eq for $name {\n+        impl crate::cmp::Eq for $name {\n         }\n \n-        impl ::cmp::PartialOrd for $name {\n-            fn partial_cmp(&self, other: &$name) -> ::option::Option<::cmp::Ordering> {\n-                ::option::Option::Some(self.cmp(other))\n+        impl crate::cmp::PartialOrd for $name {\n+            fn partial_cmp(&self, other: &$name) -> crate::option::Option<crate::cmp::Ordering> {\n+                crate::option::Option::Some(self.cmp(other))\n             }\n         }\n \n-        impl ::cmp::Ord for $name {\n-            fn cmp(&self, other: &$name) -> ::cmp::Ordering {\n-                use cmp::max;\n+        impl crate::cmp::Ord for $name {\n+            fn cmp(&self, other: &$name) -> crate::cmp::Ordering {\n+                use crate::cmp::max;\n                 let sz = max(self.size, other.size);\n                 let lhs = self.base[..sz].iter().cloned().rev();\n                 let rhs = other.base[..sz].iter().cloned().rev();\n                 lhs.cmp(rhs)\n             }\n         }\n \n-        impl ::clone::Clone for $name {\n+        impl crate::clone::Clone for $name {\n             fn clone(&self) -> $name {\n                 $name { size: self.size, base: self.base }\n             }\n         }\n \n-        impl ::fmt::Debug for $name {\n-            fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result {\n-                use mem;\n+        impl crate::fmt::Debug for $name {\n+            fn fmt(&self, f: &mut crate::fmt::Formatter) -> crate::fmt::Result {\n+                use crate::mem;\n \n                 let sz = if self.size < 1 {1} else {self.size};\n                 let digitlen = mem::size_of::<$ty>() * 2;\n@@ -469,7 +469,7 @@ macro_rules! define_bignum {\n                 for &v in self.base[..sz-1].iter().rev() {\n                     write!(f, \"_{:01$x}\", v, digitlen)?;\n                 }\n-                ::result::Result::Ok(())\n+                crate::result::Result::Ok(())\n             }\n         }\n     )"}, {"sha": "fa3c8075378ca40a14a472903bfa7377d4dc1e2a", "filename": "src/libcore/num/dec2flt/algorithm.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,11 +1,11 @@\n //! The various algorithms from the paper.\n \n-use cmp::min;\n-use cmp::Ordering::{Less, Equal, Greater};\n-use num::diy_float::Fp;\n-use num::dec2flt::table;\n-use num::dec2flt::rawfp::{self, Unpacked, RawFloat, fp_to_float, next_float, prev_float};\n-use num::dec2flt::num::{self, Big};\n+use crate::cmp::min;\n+use crate::cmp::Ordering::{Less, Equal, Greater};\n+use crate::num::diy_float::Fp;\n+use crate::num::dec2flt::table;\n+use crate::num::dec2flt::rawfp::{self, Unpacked, RawFloat, fp_to_float, next_float, prev_float};\n+use crate::num::dec2flt::num::{self, Big};\n \n /// Number of significand bits in Fp\n const P: u32 = 64;\n@@ -35,7 +35,7 @@ mod fpu_precision {\n // computations are performed in the desired precision.\n #[cfg(all(target_arch=\"x86\", not(target_feature=\"sse2\")))]\n mod fpu_precision {\n-    use mem::size_of;\n+    use crate::mem::size_of;\n \n     /// A structure used to preserve the original value of the FPU control word, so that it can be\n     /// restored when the structure is dropped."}, {"sha": "dcfa2d352a818c9ef59eac1fc692846c50e95602", "filename": "src/libcore/num/dec2flt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -82,8 +82,8 @@\n             reason = \"internal routines only exposed for testing\",\n             issue = \"0\")]\n \n-use fmt;\n-use str::FromStr;\n+use crate::fmt;\n+use crate::str::FromStr;\n \n use self::parse::{parse_decimal, Decimal, Sign, ParseResult};\n use self::num::digits_to_big;"}, {"sha": "4d50516ce546bb79e4461ee0c98a0da10fd04614", "filename": "src/libcore/num/dec2flt/num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fdec2flt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fdec2flt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fnum.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -2,9 +2,9 @@\n \n // FIXME This module's name is a bit unfortunate, since other modules also import `core::num`.\n \n-use cmp::Ordering::{self, Less, Equal, Greater};\n+use crate::cmp::Ordering::{self, Less, Equal, Greater};\n \n-pub use num::bignum::Big32x40 as Big;\n+pub use crate::num::bignum::Big32x40 as Big;\n \n /// Test whether truncating all bits less significant than `ones_place` introduces\n /// a relative error less, equal, or greater than 0.5 ULP."}, {"sha": "fdbdaa238e0f2f63896eb81d19f33fe07b2599c0", "filename": "src/libcore/num/dec2flt/rawfp.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -17,15 +17,15 @@\n //! Many functions in this module only handle normal numbers. The dec2flt routines conservatively\n //! take the universally-correct slow path (Algorithm M) for very small and very large numbers.\n //! That algorithm needs only next_float() which does handle subnormals and zeros.\n-use cmp::Ordering::{Less, Equal, Greater};\n-use convert::{TryFrom, TryInto};\n-use ops::{Add, Mul, Div, Neg};\n-use fmt::{Debug, LowerExp};\n-use num::diy_float::Fp;\n-use num::FpCategory::{Infinite, Zero, Subnormal, Normal, Nan};\n-use num::FpCategory;\n-use num::dec2flt::num::{self, Big};\n-use num::dec2flt::table;\n+use crate::cmp::Ordering::{Less, Equal, Greater};\n+use crate::convert::{TryFrom, TryInto};\n+use crate::ops::{Add, Mul, Div, Neg};\n+use crate::fmt::{Debug, LowerExp};\n+use crate::num::diy_float::Fp;\n+use crate::num::FpCategory::{Infinite, Zero, Subnormal, Normal, Nan};\n+use crate::num::FpCategory;\n+use crate::num::dec2flt::num::{self, Big};\n+use crate::num::dec2flt::table;\n \n #[derive(Copy, Clone, Debug)]\n pub struct Unpacked {"}, {"sha": "3f8d142c8457adfd00837e5bd816e699e5ed32cd", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -7,8 +7,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use mem;\n-use num::FpCategory;\n+use crate::mem;\n+use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f32`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "7f19101fe6ef801d193ca8b9dc962e13e7cf8dbd", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -7,8 +7,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use mem;\n-use num::FpCategory;\n+use crate::mem;\n+use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f64`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "6c75d00f6b24af5162b1f1acb3069d8ed649c8f2", "filename": "src/libcore/num/flt2dec/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,8 +1,8 @@\n //! Decodes a floating-point value into individual parts and error ranges.\n \n-use {f32, f64};\n-use num::FpCategory;\n-use num::dec2flt::rawfp::RawFloat;\n+use crate::{f32, f64};\n+use crate::num::FpCategory;\n+use crate::num::dec2flt::rawfp::RawFloat;\n \n /// Decoded unsigned finite value, such that:\n ///"}, {"sha": "6d42a77744966cad5240f5cffbae10f280a045b4", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -120,7 +120,7 @@ functions.\n             reason = \"internal routines only exposed for testing\",\n             issue = \"0\")]\n \n-use i16;\n+use crate::i16;\n pub use self::decoder::{decode, DecodableFloat, FullDecoded, Decoded};\n \n pub mod estimator;"}, {"sha": "35fb4b927589ff6bc5e875cced022253e135af95", "filename": "src/libcore/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -4,12 +4,12 @@\n //! [^1]: Burger, R. G. and Dybvig, R. K. 1996. Printing floating-point numbers\n //!   quickly and accurately. SIGPLAN Not. 31, 5 (May. 1996), 108-116.\n \n-use cmp::Ordering;\n+use crate::cmp::Ordering;\n \n-use num::flt2dec::{Decoded, MAX_SIG_DIGITS, round_up};\n-use num::flt2dec::estimator::estimate_scaling_factor;\n-use num::bignum::Digit32 as Digit;\n-use num::bignum::Big32x40 as Big;\n+use crate::num::flt2dec::{Decoded, MAX_SIG_DIGITS, round_up};\n+use crate::num::flt2dec::estimator::estimate_scaling_factor;\n+use crate::num::bignum::Digit32 as Digit;\n+use crate::num::bignum::Big32x40 as Big;\n \n static POW10: [Digit; 10] = [1, 10, 100, 1000, 10000, 100000,\n                              1000000, 10000000, 100000000, 1000000000];"}, {"sha": "61b50ec8ca566cba3125ce588902b8bdf56f4792", "filename": "src/libcore/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -5,8 +5,8 @@\n //! [^1]: Florian Loitsch. 2010. Printing floating-point numbers quickly and\n //!   accurately with integers. SIGPLAN Not. 45, 6 (June 2010), 233-243.\n \n-use num::diy_float::Fp;\n-use num::flt2dec::{Decoded, MAX_SIG_DIGITS, round_up};\n+use crate::num::diy_float::Fp;\n+use crate::num::flt2dec::{Decoded, MAX_SIG_DIGITS, round_up};\n \n \n // see the comments in `format_shortest_opt` for the rationale.\n@@ -418,7 +418,7 @@ pub fn format_shortest_opt(d: &Decoded,\n ///\n /// This should be used for most cases.\n pub fn format_shortest(d: &Decoded, buf: &mut [u8]) -> (/*#digits*/ usize, /*exp*/ i16) {\n-    use num::flt2dec::strategy::dragon::format_shortest as fallback;\n+    use crate::num::flt2dec::strategy::dragon::format_shortest as fallback;\n     match format_shortest_opt(d, buf) {\n         Some(ret) => ret,\n         None => fallback(d, buf),\n@@ -675,7 +675,7 @@ pub fn format_exact_opt(d: &Decoded, buf: &mut [u8], limit: i16)\n ///\n /// This should be used for most cases.\n pub fn format_exact(d: &Decoded, buf: &mut [u8], limit: i16) -> (/*#digits*/ usize, /*exp*/ i16) {\n-    use num::flt2dec::strategy::dragon::format_exact as fallback;\n+    use crate::num::flt2dec::strategy::dragon::format_exact as fallback;\n     match format_exact_opt(d, buf, limit) {\n         Some(ret) => ret,\n         None => fallback(d, buf, limit),"}, {"sha": "24afc945e9313ccf9b2c0befcf827f32c91ce6d1", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -2,12 +2,12 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use convert::{TryFrom, Infallible};\n-use fmt;\n-use intrinsics;\n-use mem;\n-use ops;\n-use str::FromStr;\n+use crate::convert::{TryFrom, Infallible};\n+use crate::fmt;\n+use crate::intrinsics;\n+use crate::mem;\n+use crate::ops;\n+use crate::str::FromStr;\n \n macro_rules! impl_nonzero_fmt {\n     ( #[$stability: meta] ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n@@ -3939,7 +3939,7 @@ impl u8 {\n     #[inline]\n     pub fn is_ascii_alphabetic(&self) -> bool {\n         match *self {\n-            b'A'...b'Z' | b'a'...b'z' => true,\n+            b'A'..=b'Z' | b'a'..=b'z' => true,\n             _ => false\n         }\n     }\n@@ -3974,7 +3974,7 @@ impl u8 {\n     #[inline]\n     pub fn is_ascii_uppercase(&self) -> bool {\n         match *self {\n-            b'A'...b'Z' => true,\n+            b'A'..=b'Z' => true,\n             _ => false\n         }\n     }\n@@ -4009,7 +4009,7 @@ impl u8 {\n     #[inline]\n     pub fn is_ascii_lowercase(&self) -> bool {\n         match *self {\n-            b'a'...b'z' => true,\n+            b'a'..=b'z' => true,\n             _ => false\n         }\n     }\n@@ -4047,7 +4047,7 @@ impl u8 {\n     #[inline]\n     pub fn is_ascii_alphanumeric(&self) -> bool {\n         match *self {\n-            b'0'...b'9' | b'A'...b'Z' | b'a'...b'z' => true,\n+            b'0'..=b'9' | b'A'..=b'Z' | b'a'..=b'z' => true,\n             _ => false\n         }\n     }\n@@ -4082,7 +4082,7 @@ impl u8 {\n     #[inline]\n     pub fn is_ascii_digit(&self) -> bool {\n         match *self {\n-            b'0'...b'9' => true,\n+            b'0'..=b'9' => true,\n             _ => false\n         }\n     }\n@@ -4120,7 +4120,7 @@ impl u8 {\n     #[inline]\n     pub fn is_ascii_hexdigit(&self) -> bool {\n         match *self {\n-            b'0'...b'9' | b'A'...b'F' | b'a'...b'f' => true,\n+            b'0'..=b'9' | b'A'..=b'F' | b'a'..=b'f' => true,\n             _ => false\n         }\n     }\n@@ -4159,7 +4159,7 @@ impl u8 {\n     #[inline]\n     pub fn is_ascii_punctuation(&self) -> bool {\n         match *self {\n-            b'!'...b'/' | b':'...b'@' | b'['...b'`' | b'{'...b'~' => true,\n+            b'!'..=b'/' | b':'..=b'@' | b'['..=b'`' | b'{'..=b'~' => true,\n             _ => false\n         }\n     }\n@@ -4194,7 +4194,7 @@ impl u8 {\n     #[inline]\n     pub fn is_ascii_graphic(&self) -> bool {\n         match *self {\n-            b'!'...b'~' => true,\n+            b'!'..=b'~' => true,\n             _ => false\n         }\n     }\n@@ -4283,7 +4283,7 @@ impl u8 {\n     #[inline]\n     pub fn is_ascii_control(&self) -> bool {\n         match *self {\n-            b'\\0'...b'\\x1F' | b'\\x7F' => true,\n+            b'\\0'..=b'\\x1F' | b'\\x7F' => true,\n             _ => false\n         }\n     }\n@@ -4573,7 +4573,7 @@ try_from_lower_bounded!(isize, usize);\n #[cfg(target_pointer_width = \"16\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n-    use convert::TryFrom;\n+    use crate::convert::TryFrom;\n \n     try_from_upper_bounded!(usize, u8);\n     try_from_unbounded!(usize, u16, u32, u64, u128);\n@@ -4596,7 +4596,7 @@ mod ptr_try_from_impls {\n #[cfg(target_pointer_width = \"32\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n-    use convert::TryFrom;\n+    use crate::convert::TryFrom;\n \n     try_from_upper_bounded!(usize, u8, u16);\n     try_from_unbounded!(usize, u32, u64, u128);\n@@ -4622,7 +4622,7 @@ mod ptr_try_from_impls {\n #[cfg(target_pointer_width = \"64\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n-    use convert::TryFrom;\n+    use crate::convert::TryFrom;\n \n     try_from_upper_bounded!(usize, u8, u16, u32);\n     try_from_unbounded!(usize, u64, u128);\n@@ -4826,7 +4826,7 @@ impl fmt::Display for ParseIntError {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use num::dec2flt::ParseFloatError;\n+pub use crate::num::dec2flt::ParseFloatError;\n \n // Conversion traits for primitive integer and float types\n // Conversions T -> T are covered by a blanket impl and therefore excluded"}, {"sha": "a3491bc3dc66490ff555ad22794fb288eade45f7", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,6 +1,6 @@\n use super::Wrapping;\n \n-use ops::*;\n+use crate::ops::*;\n \n #[allow(unused_macros)]\n macro_rules! sh_impl_signed {"}, {"sha": "5d1d3efd4120f2994b0296da0e1fce596fbd1664", "filename": "src/libcore/ops/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fmod.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -152,7 +152,7 @@ mod function;\n mod generator;\n mod index;\n mod range;\n-mod try;\n+mod r#try;\n mod unsize;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -187,7 +187,7 @@ pub use self::range::{Range, RangeFrom, RangeFull, RangeTo};\n pub use self::range::{RangeInclusive, RangeToInclusive, RangeBounds, Bound};\n \n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-pub use self::try::Try;\n+pub use self::r#try::Try;\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n pub use self::generator::{Generator, GeneratorState};"}, {"sha": "e13df04c2ceddf5ccece84c454c6e09cce115bc4", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,5 +1,5 @@\n-use fmt;\n-use hash::{Hash, Hasher};\n+use crate::fmt;\n+use crate::hash::{Hash, Hasher};\n \n /// An unbounded range (`..`).\n ///"}, {"sha": "09231ee06ce89ca69cff2ce6075a370e008ace5d", "filename": "src/libcore/ops/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fops%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fops%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Funsize.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,4 +1,4 @@\n-use marker::Unsize;\n+use crate::marker::Unsize;\n \n /// Trait that indicates that this is a pointer or a wrapper for one,\n /// where unsizing can be performed on the pointee."}, {"sha": "7ce9a73a782055b5a0964dd05de2e5789abc6039", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -135,9 +135,9 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use iter::{FromIterator, FusedIterator, TrustedLen};\n-use {hint, mem, ops::{self, Deref}};\n-use pin::Pin;\n+use crate::iter::{FromIterator, FusedIterator, TrustedLen};\n+use crate::{hint, mem, ops::{self, Deref}};\n+use crate::pin::Pin;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n // `Iterator`, which is one. The compiler assumes that the `next` method of"}, {"sha": "bcb87bdd098fc9f6b7ae4e1a4f26815b8ce25866", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -4,8 +4,8 @@\n             reason = \"newly available in libcore\",\n             issue = \"44489\")]\n \n-use any::Any;\n-use fmt;\n+use crate::any::Any;\n+use crate::fmt;\n \n /// A struct providing information about a panic.\n ///"}, {"sha": "4b991b8792576850c7f963cdebd9f3f4c2204cb2", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -26,8 +26,8 @@\n                       and related macros\",\n             issue = \"0\")]\n \n-use fmt;\n-use panic::{Location, PanicInfo};\n+use crate::fmt;\n+use crate::panic::{Location, PanicInfo};\n \n #[cold]\n // never inline unless panic_immediate_abort to avoid code"}, {"sha": "538e1aa481cfe8faa7899b9a7eb32e460b9480e7", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -263,10 +263,10 @@\n \n #![stable(feature = \"pin\", since = \"1.33.0\")]\n \n-use fmt;\n-use marker::{Sized, Unpin};\n-use cmp::{self, PartialEq, PartialOrd};\n-use ops::{Deref, DerefMut, Receiver, CoerceUnsized, DispatchFromDyn};\n+use crate::fmt;\n+use crate::marker::{Sized, Unpin};\n+use crate::cmp::{self, PartialEq, PartialOrd};\n+use crate::ops::{Deref, DerefMut, Receiver, CoerceUnsized, DispatchFromDyn};\n \n /// A pinned pointer.\n ///"}, {"sha": "501a41d0d1c761a6d9561b803c3f0ccbac21e195", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -9,38 +9,38 @@\n // Re-exported core operators\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n-pub use marker::{Copy, Send, Sized, Sync, Unpin};\n+pub use crate::marker::{Copy, Send, Sized, Sync, Unpin};\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n-pub use ops::{Drop, Fn, FnMut, FnOnce};\n+pub use crate::ops::{Drop, Fn, FnMut, FnOnce};\n \n // Re-exported functions\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n-pub use mem::drop;\n+pub use crate::mem::drop;\n \n // Re-exported types and traits\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n-pub use clone::Clone;\n+pub use crate::clone::Clone;\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n-pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n+pub use crate::cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n-pub use convert::{AsRef, AsMut, Into, From};\n+pub use crate::convert::{AsRef, AsMut, Into, From};\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n-pub use default::Default;\n+pub use crate::default::Default;\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n-pub use iter::{Iterator, Extend, IntoIterator};\n+pub use crate::iter::{Iterator, Extend, IntoIterator};\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n-pub use iter::{DoubleEndedIterator, ExactSizeIterator};\n+pub use crate::iter::{DoubleEndedIterator, ExactSizeIterator};\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n-pub use option::Option::{self, Some, None};\n+pub use crate::option::Option::{self, Some, None};\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n-pub use result::Result::{self, Ok, Err};\n+pub use crate::result::Result::{self, Ok, Err};"}, {"sha": "32dcb5bff36910c218e3ce509b4545f8cf473f99", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -63,24 +63,24 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use convert::From;\n-use intrinsics;\n-use ops::{CoerceUnsized, DispatchFromDyn};\n-use fmt;\n-use hash;\n-use marker::{PhantomData, Unsize};\n-use mem::{self, MaybeUninit};\n+use crate::convert::From;\n+use crate::intrinsics;\n+use crate::ops::{CoerceUnsized, DispatchFromDyn};\n+use crate::fmt;\n+use crate::hash;\n+use crate::marker::{PhantomData, Unsize};\n+use crate::mem::{self, MaybeUninit};\n \n-use cmp::Ordering::{self, Less, Equal, Greater};\n+use crate::cmp::Ordering::{self, Less, Equal, Greater};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use intrinsics::copy_nonoverlapping;\n+pub use crate::intrinsics::copy_nonoverlapping;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use intrinsics::copy;\n+pub use crate::intrinsics::copy;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use intrinsics::write_bytes;\n+pub use crate::intrinsics::write_bytes;\n \n /// Executes the destructor (if any) of the pointed-to value.\n ///\n@@ -2402,7 +2402,7 @@ pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n         }\n     }\n \n-    let stride = ::mem::size_of::<T>();\n+    let stride = mem::size_of::<T>();\n     let a_minus_one = a.wrapping_sub(1);\n     let pmoda = p as usize & a_minus_one;\n \n@@ -2580,7 +2580,7 @@ pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {\n /// ```\n #[stable(feature = \"ptr_hash\", since = \"1.35.0\")]\n pub fn hash<T: ?Sized, S: hash::Hasher>(hashee: *const T, into: &mut S) {\n-    use hash::Hash;\n+    use crate::hash::Hash;\n     hashee.hash(into);\n }\n "}, {"sha": "0277e52a9a64889ecd411514cb4f457998364983", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -230,9 +230,9 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use fmt;\n-use iter::{FromIterator, FusedIterator, TrustedLen};\n-use ops::{self, Deref};\n+use crate::fmt;\n+use crate::iter::{FromIterator, FusedIterator, TrustedLen};\n+use crate::ops::{self, Deref};\n \n /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).\n ///"}, {"sha": "45ab016c4962826d7953ddb6dd337ac349339b6e", "filename": "src/libcore/slice/memchr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmemchr.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,8 +1,8 @@\n // Original implementation taken from rust-memchr.\n // Copyright 2015 Andrew Gallant, bluss and Nicolas Koch\n \n-use cmp;\n-use mem;\n+use crate::cmp;\n+use crate::mem;\n \n const LO_U64: u64 = 0x0101010101010101;\n const HI_U64: u64 = 0x8080808080808080;\n@@ -32,7 +32,7 @@ fn repeat_byte(b: u8) -> usize {\n #[cfg(not(target_pointer_width = \"16\"))]\n #[inline]\n fn repeat_byte(b: u8) -> usize {\n-    (b as usize) * (::usize::MAX / 255)\n+    (b as usize) * (crate::usize::MAX / 255)\n }\n \n /// Returns the first index matching the byte `x` in `text`."}, {"sha": "44d56c60b7899c486e690851e01faf0edaa49a4f", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -20,20 +20,20 @@\n // * The `raw` and `bytes` submodules.\n // * Boilerplate trait implementations.\n \n-use cmp::Ordering::{self, Less, Equal, Greater};\n-use cmp;\n-use fmt;\n-use intrinsics::assume;\n-use isize;\n-use iter::*;\n-use ops::{FnMut, Try, self};\n-use option::Option;\n-use option::Option::{None, Some};\n-use result::Result;\n-use result::Result::{Ok, Err};\n-use ptr;\n-use mem;\n-use marker::{Copy, Send, Sync, Sized, self};\n+use crate::cmp::Ordering::{self, Less, Equal, Greater};\n+use crate::cmp;\n+use crate::fmt;\n+use crate::intrinsics::assume;\n+use crate::isize;\n+use crate::iter::*;\n+use crate::ops::{FnMut, Try, self};\n+use crate::option::Option;\n+use crate::option::Option::{None, Some};\n+use crate::result::Result;\n+use crate::result::Result::{Ok, Err};\n+use crate::ptr;\n+use crate::mem;\n+use crate::marker::{Copy, Send, Sync, Sized, self};\n \n #[unstable(feature = \"slice_internals\", issue = \"0\",\n            reason = \"exposed from core to be reused in std; use the memchr crate\")]\n@@ -2256,13 +2256,14 @@ impl<T> [T] {\n         // Luckily since all this is constant-evaluated... performance here matters not!\n         #[inline]\n         fn gcd(a: usize, b: usize) -> usize {\n+            use crate::intrinsics;\n             // iterative stein\u2019s algorithm\n             // We should still make this `const fn` (and revert to recursive algorithm if we do)\n             // because relying on llvm to consteval all this is\u2026 well, it makes me uncomfortable.\n             let (ctz_a, mut ctz_b) = unsafe {\n                 if a == 0 { return b; }\n                 if b == 0 { return a; }\n-                (::intrinsics::cttz_nonzero(a), ::intrinsics::cttz_nonzero(b))\n+                (intrinsics::cttz_nonzero(a), intrinsics::cttz_nonzero(b))\n             };\n             let k = ctz_a.min(ctz_b);\n             let mut a = a >> ctz_a;\n@@ -2271,21 +2272,21 @@ impl<T> [T] {\n                 // remove all factors of 2 from b\n                 b >>= ctz_b;\n                 if a > b {\n-                    ::mem::swap(&mut a, &mut b);\n+                    mem::swap(&mut a, &mut b);\n                 }\n                 b = b - a;\n                 unsafe {\n                     if b == 0 {\n                         break;\n                     }\n-                    ctz_b = ::intrinsics::cttz_nonzero(b);\n+                    ctz_b = intrinsics::cttz_nonzero(b);\n                 }\n             }\n             a << k\n         }\n-        let gcd: usize = gcd(::mem::size_of::<T>(), ::mem::size_of::<U>());\n-        let ts: usize = ::mem::size_of::<U>() / gcd;\n-        let us: usize = ::mem::size_of::<T>() / gcd;\n+        let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());\n+        let ts: usize = mem::size_of::<U>() / gcd;\n+        let us: usize = mem::size_of::<T>() / gcd;\n \n         // Armed with this knowledge, we can find how many `U`s we can fit!\n         let us_len = self.len() / ts * us;\n@@ -2326,15 +2327,15 @@ impl<T> [T] {\n     #[stable(feature = \"slice_align_to\", since = \"1.30.0\")]\n     pub unsafe fn align_to<U>(&self) -> (&[T], &[U], &[T]) {\n         // Note that most of this function will be constant-evaluated,\n-        if ::mem::size_of::<U>() == 0 || ::mem::size_of::<T>() == 0 {\n+        if mem::size_of::<U>() == 0 || mem::size_of::<T>() == 0 {\n             // handle ZSTs specially, which is \u2013 don't handle them at all.\n             return (self, &[], &[]);\n         }\n \n         // First, find at what point do we split between the first and 2nd slice. Easy with\n         // ptr.align_offset.\n         let ptr = self.as_ptr();\n-        let offset = ::ptr::align_offset(ptr, ::mem::align_of::<U>());\n+        let offset = crate::ptr::align_offset(ptr, mem::align_of::<U>());\n         if offset > self.len() {\n             (self, &[], &[])\n         } else {\n@@ -2379,15 +2380,15 @@ impl<T> [T] {\n     #[stable(feature = \"slice_align_to\", since = \"1.30.0\")]\n     pub unsafe fn align_to_mut<U>(&mut self) -> (&mut [T], &mut [U], &mut [T]) {\n         // Note that most of this function will be constant-evaluated,\n-        if ::mem::size_of::<U>() == 0 || ::mem::size_of::<T>() == 0 {\n+        if mem::size_of::<U>() == 0 || mem::size_of::<T>() == 0 {\n             // handle ZSTs specially, which is \u2013 don't handle them at all.\n             return (self, &mut [], &mut []);\n         }\n \n         // First, find at what point do we split between the first and 2nd slice. Easy with\n         // ptr.align_offset.\n         let ptr = self.as_ptr();\n-        let offset = ::ptr::align_offset(ptr, ::mem::align_of::<U>());\n+        let offset = crate::ptr::align_offset(ptr, mem::align_of::<U>());\n         if offset > self.len() {\n             (self, &mut [], &mut [])\n         } else {"}, {"sha": "f69b219715aa16ae1094ea0ec7373f393d9c9c7f", "filename": "src/libcore/slice/rotate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fslice%2Frotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fslice%2Frotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Frotate.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,6 +1,6 @@\n-use cmp;\n-use mem::{self, MaybeUninit};\n-use ptr;\n+use crate::cmp;\n+use crate::mem::{self, MaybeUninit};\n+use crate::ptr;\n \n /// Rotation is much faster if it has access to a little bit of memory. This\n /// union provides a RawVec-like interface, but to a fixed-size stack buffer."}, {"sha": "c293b1900187e8ca0021d4d3e1daa9a41565da51", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -6,9 +6,9 @@\n //! Unstable sorting is compatible with libcore because it doesn't allocate memory, unlike our\n //! stable sorting implementation.\n \n-use cmp;\n-use mem::{self, MaybeUninit};\n-use ptr;\n+use crate::cmp;\n+use crate::mem::{self, MaybeUninit};\n+use crate::ptr;\n \n /// When dropped, copies from `src` into `dest`.\n struct CopyOnDrop<T> {"}, {"sha": "16dd4fe6135bed8f2b26812d315d2dc2ad74d49f", "filename": "src/libcore/str/lossy.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Flossy.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,8 +1,7 @@\n-use char;\n-use str as core_str;\n-use fmt;\n-use fmt::Write;\n-use mem;\n+use crate::char;\n+use crate::str as core_str;\n+use crate::fmt::{self, Write};\n+use crate::mem;\n \n /// Lossy UTF-8 string.\n #[unstable(feature = \"str_internals\", issue = \"0\")]"}, {"sha": "f4bb887dd2943339360d11724da8f789264f0172", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -7,14 +7,14 @@\n use self::pattern::Pattern;\n use self::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n \n-use char;\n-use fmt::{self, Write};\n-use iter::{Map, Cloned, FusedIterator, TrustedLen, TrustedRandomAccess, Filter};\n-use iter::{Flatten, FlatMap, Chain};\n-use slice::{self, SliceIndex, Split as SliceSplit};\n-use mem;\n-use ops::Try;\n-use option;\n+use crate::char;\n+use crate::fmt::{self, Write};\n+use crate::iter::{Map, Cloned, FusedIterator, TrustedLen, TrustedRandomAccess, Filter};\n+use crate::iter::{Flatten, FlatMap, Chain};\n+use crate::slice::{self, SliceIndex, Split as SliceSplit};\n+use crate::mem;\n+use crate::ops::Try;\n+use crate::option;\n \n pub mod pattern;\n \n@@ -1557,9 +1557,9 @@ Section: Trait implementations\n */\n \n mod traits {\n-    use cmp::Ordering;\n-    use ops;\n-    use slice::{self, SliceIndex};\n+    use crate::cmp::Ordering;\n+    use crate::ops;\n+    use crate::slice::{self, SliceIndex};\n \n     /// Implements ordering of strings.\n     ///"}, {"sha": "5dd4aec5e5a57ace8c7731753efceddc368c16fe", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -7,10 +7,10 @@\n             reason = \"API not fully fleshed out and ready to be stabilized\",\n             issue = \"27721\")]\n \n-use cmp;\n-use fmt;\n-use slice::memchr;\n-use usize;\n+use crate::cmp;\n+use crate::fmt;\n+use crate::slice::memchr;\n+use crate::usize;\n \n // Pattern\n "}, {"sha": "7ae91b3049814f3443e75252f762c58d645d6af5", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -118,11 +118,11 @@\n \n use self::Ordering::*;\n \n-use intrinsics;\n-use cell::UnsafeCell;\n-use fmt;\n+use crate::intrinsics;\n+use crate::cell::UnsafeCell;\n+use crate::fmt;\n \n-use hint::spin_loop;\n+use crate::hint::spin_loop;\n \n /// Signals the processor that it is entering a busy-wait spin-loop.\n ///\n@@ -195,7 +195,7 @@ pub struct AtomicPtr<T> {\n impl<T> Default for AtomicPtr<T> {\n     /// Creates a null `AtomicPtr<T>`.\n     fn default() -> AtomicPtr<T> {\n-        AtomicPtr::new(::ptr::null_mut())\n+        AtomicPtr::new(crate::ptr::null_mut())\n     }\n }\n "}, {"sha": "ecf03afb88e2acbb1f35bda97ad29f2296b58c25", "filename": "src/libcore/task/poll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fpoll.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -2,8 +2,8 @@\n             reason = \"futures in libcore are unstable\",\n             issue = \"50547\")]\n \n-use ops::Try;\n-use result::Result;\n+use crate::ops::Try;\n+use crate::result::Result;\n \n /// Indicates whether a value is available or if the current task has been\n /// scheduled to receive a wakeup instead."}, {"sha": "1d3140070f351b24e35069a8d6a4cacb80ff8f8a", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -2,8 +2,8 @@\n             reason = \"futures in libcore are unstable\",\n             issue = \"50547\")]\n \n-use fmt;\n-use marker::{PhantomData, Unpin};\n+use crate::fmt;\n+use crate::marker::{PhantomData, Unpin};\n \n /// A `RawWaker` allows the implementor of a task executor to create a [`Waker`]\n /// which provides customized wakeup behavior."}, {"sha": "fcdeb57f482a96a38ecf59787e8a8f5d21602a9c", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -35,7 +35,6 @@\n \n extern crate core;\n extern crate test;\n-extern crate rand;\n \n mod any;\n mod array;"}, {"sha": "92409465d7f2a0e87d621894347cd8acfa42e21e", "filename": "src/libcore/tests/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -6,7 +6,7 @@ mod tests {\n     use core::ops::{Shl, Shr, Not, BitXor, BitAnd, BitOr};\n     use core::mem;\n \n-    use num;\n+    use crate::num;\n \n     #[test]\n     fn test_overflows() {"}, {"sha": "04ed14f3d0897073ee3567f53e21997c0b8e66f6", "filename": "src/libcore/tests/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -2,11 +2,12 @@ macro_rules! uint_module { ($T:ident, $T_i:ident) => (\n #[cfg(test)]\n mod tests {\n     use core::$T_i::*;\n-    use num;\n     use core::ops::{BitOr, BitAnd, BitXor, Shl, Shr, Not};\n     use std::str::FromStr;\n     use std::mem;\n \n+    use crate::num;\n+\n     #[test]\n     fn test_overflows() {\n         assert!(MAX > 0);"}, {"sha": "9bb187e7de9f6d68a996a688cd9099d2f6cfc161", "filename": "src/libcore/time.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -12,9 +12,9 @@\n //! assert_eq!(Duration::new(5, 0), Duration::from_secs(5));\n //! ```\n \n-use {fmt, u64};\n-use iter::Sum;\n-use ops::{Add, Sub, Mul, Div, AddAssign, SubAssign, MulAssign, DivAssign};\n+use crate::{fmt, u64};\n+use crate::iter::Sum;\n+use crate::ops::{Add, Sub, Mul, Div, AddAssign, SubAssign, MulAssign, DivAssign};\n \n const NANOS_PER_SEC: u32 = 1_000_000_000;\n const NANOS_PER_MILLI: u32 = 1_000_000;\n@@ -921,7 +921,7 @@ impl fmt::Debug for Duration {\n             // Determine the end of the buffer: if precision is set, we just\n             // use as many digits from the buffer (capped to 9). If it isn't\n             // set, we only use all digits up to the last non-zero one.\n-            let end = f.precision().map(|p| ::cmp::min(p, 9)).unwrap_or(pos);\n+            let end = f.precision().map(|p| crate::cmp::min(p, 9)).unwrap_or(pos);\n \n             // If we haven't emitted a single fractional digit and the precision\n             // wasn't set to a non-zero value, we don't print the decimal point.\n@@ -931,7 +931,7 @@ impl fmt::Debug for Duration {\n                 // We are only writing ASCII digits into the buffer and it was\n                 // initialized with '0's, so it contains valid UTF8.\n                 let s = unsafe {\n-                    ::str::from_utf8_unchecked(&buf[..end])\n+                    crate::str::from_utf8_unchecked(&buf[..end])\n                 };\n \n                 // If the user request a precision > 9, we pad '0's at the end."}, {"sha": "f05780f4a62700699830989ac597358062fcc9c9", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,7 +1,7 @@\n // See src/libstd/primitive_docs.rs for documentation.\n \n-use cmp::*;\n-use cmp::Ordering::*;\n+use crate::cmp::*;\n+use crate::cmp::Ordering::*;\n \n // macro for implementing n-ary tuple functions and operations\n macro_rules! tuple_impls {"}, {"sha": "272727def61d60b28bd54dcd51772e41c6d73d00", "filename": "src/libcore/unicode/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Funicode%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Funicode%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fmod.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -8,13 +8,13 @@ pub(crate) mod version;\n \n // For use in liballoc, not re-exported in libstd.\n pub mod derived_property {\n-    pub use unicode::tables::derived_property::{Case_Ignorable, Cased};\n+    pub use crate::unicode::tables::derived_property::{Case_Ignorable, Cased};\n }\n pub mod conversions {\n-    pub use unicode::tables::conversions::{to_lower, to_upper};\n+    pub use crate::unicode::tables::conversions::{to_lower, to_upper};\n }\n \n // For use in libsyntax\n pub mod property {\n-    pub use unicode::tables::property::Pattern_White_Space;\n+    pub use crate::unicode::tables::property::Pattern_White_Space;\n }"}, {"sha": "758cdb0b7cfbaf913ed9798bcf40006887f6444a", "filename": "src/libcore/unicode/tables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Funicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Funicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Ftables.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -2,8 +2,8 @@\n \n #![allow(missing_docs, non_upper_case_globals, non_snake_case)]\n \n-use unicode::version::UnicodeVersion;\n-use unicode::bool_trie::{BoolTrie, SmallBoolTrie};\n+use crate::unicode::version::UnicodeVersion;\n+use crate::unicode::bool_trie::{BoolTrie, SmallBoolTrie};\n \n /// The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n /// `char` and `str` methods are based on."}, {"sha": "bf01ceb8b2d3e5bbb4dcd484e0c91a319236cc3a", "filename": "src/libcore/unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360432f1e8794de58cd94f34c9c17ad65871e5b5/src%2Flibcore%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funit.rs?ref=360432f1e8794de58cd94f34c9c17ad65871e5b5", "patch": "@@ -1,4 +1,4 @@\n-use iter::FromIterator;\n+use crate::iter::FromIterator;\n \n /// Collapses all unit items from an iterator into one.\n ///"}]}