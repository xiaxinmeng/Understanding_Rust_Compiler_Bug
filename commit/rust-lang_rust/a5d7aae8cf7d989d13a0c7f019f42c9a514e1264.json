{"sha": "a5d7aae8cf7d989d13a0c7f019f42c9a514e1264", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZDdhYWU4Y2Y3ZDk4OWQxM2EwYzdmMDE5ZjQyYzlhNTE0ZTEyNjQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-01-17T15:23:50Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-01-23T09:44:52Z"}, "message": "Make ty::Generics::type_param_to_index use DefId instead of DefIndex as key.", "tree": {"sha": "fc53632391fcb0d205ae59da27f151c2f6f4453e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc53632391fcb0d205ae59da27f151c2f6f4453e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5d7aae8cf7d989d13a0c7f019f42c9a514e1264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d7aae8cf7d989d13a0c7f019f42c9a514e1264", "html_url": "https://github.com/rust-lang/rust/commit/a5d7aae8cf7d989d13a0c7f019f42c9a514e1264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5d7aae8cf7d989d13a0c7f019f42c9a514e1264/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a084cd0ed2ec8f4c4706e843c3b4ed2e07ac3b7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a084cd0ed2ec8f4c4706e843c3b4ed2e07ac3b7f", "html_url": "https://github.com/rust-lang/rust/commit/a084cd0ed2ec8f4c4706e843c3b4ed2e07ac3b7f"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "2c3454e7b5c7bb61cdd5b48daaa2471686758885", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5d7aae8cf7d989d13a0c7f019f42c9a514e1264/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d7aae8cf7d989d13a0c7f019f42c9a514e1264/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a5d7aae8cf7d989d13a0c7f019f42c9a514e1264", "patch": "@@ -17,7 +17,7 @@ pub use self::fold::TypeFoldable;\n \n use hir::{map as hir_map, FreevarMap, TraitMap};\n use hir::def::{Def, CtorKind, ExportMap};\n-use hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use hir::map::DefPathData;\n use hir::svh::Svh;\n use ich::Fingerprint;\n@@ -39,7 +39,6 @@ use util::nodemap::{NodeSet, DefIdMap, FxHashMap, FxHashSet};\n \n use serialize::{self, Encodable, Encoder};\n use std::cell::RefCell;\n-use std::collections::BTreeMap;\n use std::cmp;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n@@ -758,9 +757,8 @@ pub struct Generics {\n     pub regions: Vec<RegionParameterDef>,\n     pub types: Vec<TypeParameterDef>,\n \n-    /// Reverse map to each `TypeParameterDef`'s `index` field, from\n-    /// `def_id.index` (`def_id.krate` is the same as the item's).\n-    pub type_param_to_index: BTreeMap<DefIndex, u32>,\n+    /// Reverse map to each `TypeParameterDef`'s `index` field\n+    pub type_param_to_index: FxHashMap<DefId, u32>,\n \n     pub has_self: bool,\n     pub has_late_bound_regions: Option<Span>,"}, {"sha": "42bc3a25a8d3f729b349e9c087776e5b09e30dcd", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5d7aae8cf7d989d13a0c7f019f42c9a514e1264/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d7aae8cf7d989d13a0c7f019f42c9a514e1264/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a5d7aae8cf7d989d13a0c7f019f42c9a514e1264", "patch": "@@ -979,7 +979,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 let item_id = tcx.hir.get_parent_node(node_id);\n                 let item_def_id = tcx.hir.local_def_id(item_id);\n                 let generics = tcx.generics_of(item_def_id);\n-                let index = generics.type_param_to_index[&tcx.hir.local_def_id(node_id).index];\n+                let index = generics.type_param_to_index[&tcx.hir.local_def_id(node_id)];\n                 tcx.mk_param(index, tcx.hir.name(node_id))\n             }\n             Def::SelfTy(_, Some(def_id)) => {"}, {"sha": "6702ac2354d79954143401fd4cf91989248a9ca2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5d7aae8cf7d989d13a0c7f019f42c9a514e1264/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d7aae8cf7d989d13a0c7f019f42c9a514e1264/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a5d7aae8cf7d989d13a0c7f019f42c9a514e1264", "patch": "@@ -1629,7 +1629,7 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n         let item_id = tcx.hir.ty_param_owner(node_id);\n         let item_def_id = tcx.hir.local_def_id(item_id);\n         let generics = tcx.generics_of(item_def_id);\n-        let index = generics.type_param_to_index[&def_id.index];\n+        let index = generics.type_param_to_index[&def_id];\n         ty::GenericPredicates {\n             parent: None,\n             predicates: self.param_env.caller_bounds.iter().filter(|predicate| {"}, {"sha": "71ffb57ab48c75f2383489f608162af1bfa6193e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a5d7aae8cf7d989d13a0c7f019f42c9a514e1264/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d7aae8cf7d989d13a0c7f019f42c9a514e1264/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a5d7aae8cf7d989d13a0c7f019f42c9a514e1264", "patch": "@@ -40,8 +40,6 @@ use util::nodemap::FxHashMap;\n \n use rustc_const_math::ConstInt;\n \n-use std::collections::BTreeMap;\n-\n use syntax::{abi, ast};\n use syntax::codemap::Spanned;\n use syntax::symbol::{Symbol, keywords};\n@@ -240,7 +238,7 @@ fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let param_owner = tcx.hir.ty_param_owner(param_id);\n     let param_owner_def_id = tcx.hir.local_def_id(param_owner);\n     let generics = tcx.generics_of(param_owner_def_id);\n-    let index = generics.type_param_to_index[&def_id.index];\n+    let index = generics.type_param_to_index[&def_id];\n     let ty = tcx.mk_param(index, tcx.hir.ty_param_name(param_id));\n \n     // Don't look for bounds where the type parameter isn't in scope.\n@@ -1024,10 +1022,9 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         });\n     }\n \n-    let mut type_param_to_index = BTreeMap::new();\n-    for param in &types {\n-        type_param_to_index.insert(param.def_id.index, param.index);\n-    }\n+    let type_param_to_index = types.iter()\n+                                   .map(|param| (param.def_id, param.index))\n+                                   .collect();\n \n     tcx.alloc_generics(ty::Generics {\n         parent: parent_def_id,"}]}