{"sha": "9353170dfb3298746800eab8d2be846b5b503866", "node_id": "C_kwDOAAsO6NoAKDkzNTMxNzBkZmIzMjk4NzQ2ODAwZWFiOGQyYmU4NDZiNWI1MDM4NjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-03T01:47:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-03T01:47:52Z"}, "message": "Auto merge of #10730 - blyxyas:no_std_mul_add, r=Jarcho\n\n`imprecise_flops`: Globally ignore `#[no_std]` crates\n\nReally small fix.\nFixes #10728\nchangelog: [`imprecise_flops`]: Fix false positives with `#[no_std]`", "tree": {"sha": "f1e283afd91f9e286be5895babcf0a101d55e613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1e283afd91f9e286be5895babcf0a101d55e613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9353170dfb3298746800eab8d2be846b5b503866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9353170dfb3298746800eab8d2be846b5b503866", "html_url": "https://github.com/rust-lang/rust/commit/9353170dfb3298746800eab8d2be846b5b503866", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9353170dfb3298746800eab8d2be846b5b503866/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "824f2e701c2c03b355ced3beae9898c45ce80db3", "url": "https://api.github.com/repos/rust-lang/rust/commits/824f2e701c2c03b355ced3beae9898c45ce80db3", "html_url": "https://github.com/rust-lang/rust/commit/824f2e701c2c03b355ced3beae9898c45ce80db3"}, {"sha": "0dd2501e0d06684de5836a00d5e039f25793fd74", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd2501e0d06684de5836a00d5e039f25793fd74", "html_url": "https://github.com/rust-lang/rust/commit/0dd2501e0d06684de5836a00d5e039f25793fd74"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "a1a2c398a8a0262eecb1f114d019bf0ae760b96c", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9353170dfb3298746800eab8d2be846b5b503866/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353170dfb3298746800eab8d2be846b5b503866/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=9353170dfb3298746800eab8d2be846b5b503866", "patch": "@@ -453,9 +453,6 @@ fn is_float_mul_expr<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<(&'\n \n // TODO: Fix rust-lang/rust-clippy#4735\n fn check_mul_add(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-    if is_no_std_crate(cx) {\n-        return; // The suggested methods are not available in core\n-    }\n     if let ExprKind::Binary(\n         Spanned {\n             node: op @ (BinOpKind::Add | BinOpKind::Sub),\n@@ -570,9 +567,6 @@ fn are_negated<'a>(cx: &LateContext<'_>, expr1: &'a Expr<'a>, expr2: &'a Expr<'a\n }\n \n fn check_custom_abs(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-    if is_no_std_crate(cx) {\n-        return; // The suggested methods are not available in core\n-    }\n     if_chain! {\n         if let Some(higher::If { cond, then, r#else: Some(r#else) }) = higher::If::hir(expr);\n         let if_body_expr = peel_blocks(then);\n@@ -737,15 +731,15 @@ fn check_radians(cx: &LateContext<'_>, expr: &Expr<'_>) {\n \n impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        // All of these operations are currently not const.\n+        // All of these operations are currently not const and are in std.\n         if in_constant(cx, expr.hir_id) {\n             return;\n         }\n \n         if let ExprKind::MethodCall(path, receiver, args, _) = &expr.kind {\n             let recv_ty = cx.typeck_results().expr_ty(receiver);\n \n-            if recv_ty.is_floating_point() {\n+            if recv_ty.is_floating_point() && !is_no_std_crate(cx) {\n                 match path.ident.name.as_str() {\n                     \"ln\" => check_ln1p(cx, expr, receiver),\n                     \"log\" => check_log_base(cx, expr, receiver, args),\n@@ -756,10 +750,12 @@ impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n                 }\n             }\n         } else {\n-            check_expm1(cx, expr);\n-            check_mul_add(cx, expr);\n-            check_custom_abs(cx, expr);\n-            check_log_division(cx, expr);\n+            if !is_no_std_crate(cx) {\n+                check_expm1(cx, expr);\n+                check_mul_add(cx, expr);\n+                check_custom_abs(cx, expr);\n+                check_log_division(cx, expr);\n+            }\n             check_radians(cx, expr);\n         }\n     }"}]}