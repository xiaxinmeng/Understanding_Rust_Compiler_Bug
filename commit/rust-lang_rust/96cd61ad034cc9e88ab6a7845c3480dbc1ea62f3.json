{"sha": "96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2Y2Q2MWFkMDM0Y2M5ZTg4YWI2YTc4NDVjMzQ4MGRiYzFlYTYyZjM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-11T01:49:51Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-12T02:21:03Z"}, "message": "std: convert {vec,str}::to_owned to methods.", "tree": {"sha": "02a109c7703430ff9595c631e3ba4621c0374f1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02a109c7703430ff9595c631e3ba4621c0374f1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "html_url": "https://github.com/rust-lang/rust/commit/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e06579bc0935ed1dcbddef41bc1b6a8850a2059c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e06579bc0935ed1dcbddef41bc1b6a8850a2059c", "html_url": "https://github.com/rust-lang/rust/commit/e06579bc0935ed1dcbddef41bc1b6a8850a2059c"}], "stats": {"total": 194, "additions": 95, "deletions": 99}, "files": [{"sha": "36ffbb731c87d406e774dbde967ca3b9bcf8eecc", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -450,7 +450,7 @@ pub mod flatteners {\n                               T: Decodable<D>>(\n                               buf: &[u8])\n                               -> T {\n-        let buf = vec::to_owned(buf);\n+        let buf = buf.to_owned();\n         let buf_reader = @BufReader::new(buf);\n         let reader = buf_reader as @Reader;\n         let mut deser: D = FromReader::from_reader(reader);"}, {"sha": "9fe9ad6401045b646e931a6f831689f0a2eb2301", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -345,7 +345,7 @@ pub fn getopts(args: &[~str], opts: &[Opt]) -> Result {\n         }\n         i += 1;\n     }\n-    return Ok(Matches {opts: vec::to_owned(opts),\n+    return Ok(Matches {opts: opts.to_owned(),\n                vals: vals,\n                free: free});\n }\n@@ -447,7 +447,7 @@ pub fn opt_default(mm: &Matches, nm: &str, def: &str) -> Option<~str> {\n     let vals = opt_vals(mm, nm);\n     if vals.is_empty() { return None::<~str>; }\n     return match vals[0] { Val(ref s) => Some::<~str>(copy *s),\n-                           _      => Some::<~str>(str::to_owned(def)) }\n+                           _      => Some::<~str>(def.to_owned()) }\n }\n \n #[deriving(Eq)]\n@@ -487,10 +487,10 @@ pub mod groups {\n                   desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup { short_name: str::to_owned(short_name),\n-                long_name: str::to_owned(long_name),\n-                hint: str::to_owned(hint),\n-                desc: str::to_owned(desc),\n+        return OptGroup { short_name: short_name.to_owned(),\n+                long_name: long_name.to_owned(),\n+                hint: hint.to_owned(),\n+                desc: desc.to_owned(),\n                 hasarg: Yes,\n                 occur: Req};\n     }\n@@ -500,10 +500,10 @@ pub mod groups {\n                   desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::to_owned(short_name),\n-                long_name: str::to_owned(long_name),\n-                hint: str::to_owned(hint),\n-                desc: str::to_owned(desc),\n+        return OptGroup {short_name: short_name.to_owned(),\n+                long_name: long_name.to_owned(),\n+                hint: hint.to_owned(),\n+                desc: desc.to_owned(),\n                 hasarg: Yes,\n                 occur: Optional};\n     }\n@@ -513,10 +513,10 @@ pub mod groups {\n                    desc: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::to_owned(short_name),\n-                long_name: str::to_owned(long_name),\n+        return OptGroup {short_name: short_name.to_owned(),\n+                long_name: long_name.to_owned(),\n                 hint: ~\"\",\n-                desc: str::to_owned(desc),\n+                desc: desc.to_owned(),\n                 hasarg: No,\n                 occur: Optional};\n     }\n@@ -526,10 +526,10 @@ pub mod groups {\n                       desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::to_owned(short_name),\n-                long_name: str::to_owned(long_name),\n-                hint: str::to_owned(hint),\n-                desc: str::to_owned(desc),\n+        return OptGroup {short_name: short_name.to_owned(),\n+                long_name: long_name.to_owned(),\n+                hint: hint.to_owned(),\n+                desc: desc.to_owned(),\n                 hasarg: Maybe,\n                 occur: Optional};\n     }\n@@ -542,10 +542,10 @@ pub mod groups {\n                     desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::to_owned(short_name),\n-                long_name: str::to_owned(long_name),\n-                hint: str::to_owned(hint),\n-                desc: str::to_owned(desc),\n+        return OptGroup {short_name: short_name.to_owned(),\n+                long_name: long_name.to_owned(),\n+                hint: hint.to_owned(),\n+                desc: desc.to_owned(),\n                 hasarg: Yes,\n                 occur: Multi};\n     }\n@@ -654,7 +654,7 @@ pub mod groups {\n             row\n         });\n \n-        return str::to_owned(brief) +\n+        return brief.to_owned() +\n                \"\\n\\nOptions:\\n\" +\n                rows.connect(\"\\n\") +\n                \"\\n\\n\";"}, {"sha": "01edbbe366d5d75e237ad30659bf3cabe7f55303", "filename": "src/libextra/md4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibextra%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibextra%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fmd4.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -30,7 +30,7 @@ pub fn md4(msg: &[u8]) -> Quad {\n     let orig_len: u64 = (msg.len() * 8u) as u64;\n \n     // pad message\n-    let mut msg = vec::append(vec::to_owned(msg), [0x80u8]);\n+    let mut msg = vec::append(msg.to_owned(), [0x80u8]);\n     let mut bitlen = orig_len + 8u64;\n     while (bitlen + 64u64) % 512u64 > 0u64 {\n         msg.push(0u8);"}, {"sha": "bd6425d779c45407b9114e5521bc35c0d6fbbbc4", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -564,7 +564,7 @@ impl BigUint {\n     /// Creates and initializes an BigUint.\n \n     pub fn from_slice(slice: &[BigDigit]) -> BigUint {\n-        return BigUint::new(vec::to_owned(slice));\n+        return BigUint::new(slice.to_owned());\n     }\n \n     /// Creates and initializes an BigUint."}, {"sha": "a9034074d93fd071bdb783a09498610b69e9d0e2", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -57,7 +57,7 @@ impl<'self> Stats for &'self [f64] {\n \n     fn median(self) -> f64 {\n         assert!(self.len() != 0);\n-        let mut tmp = vec::to_owned(self);\n+        let mut tmp = self.to_owned();\n         sort::tim_sort(tmp);\n         if tmp.len() & 1 == 0 {\n             let m = tmp.len() / 2;"}, {"sha": "8b754f8c560e515c527a18934167ade4f11fcfef", "filename": "src/libextra/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -1029,7 +1029,7 @@ mod tests {\n \n         fn test(s: &str, format: &str) -> bool {\n             match strptime(s, format) {\n-              Ok(ref tm) => tm.strftime(format) == str::to_owned(s),\n+              Ok(ref tm) => tm.strftime(format) == s.to_owned(),\n               Err(e) => fail!(e)\n             }\n         }"}, {"sha": "5ca25c11ba02f6b9d7a82964afa4e5d66bfeb265", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -328,7 +328,7 @@ pub fn check_variants_T<T:Copy>(crate: @ast::crate,\n     if L < 100 {\n         do under(uint::min(L, 20)) |i| {\n             error!(\"Replacing... #%?\", uint::to_str(i));\n-            let fname = str::to_owned(filename.to_str());\n+            let fname = filename.to_str();\n             do under(uint::min(L, 30)) |j| {\n                 let fname = fname.to_str();\n                 error!(\"With... %?\", stringifier(things[j], intr));"}, {"sha": "2b6f4067ccae59a435a87c7b457698f5d7e37f5a", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -96,9 +96,9 @@ pub fn default_configuration(sess: Session, argv0: @~str, input: &input) ->\n     };\n \n     return ~[ // Target bindings.\n-         attr::mk_word_item(@str::to_owned(os::FAMILY)),\n+         attr::mk_word_item(@os::FAMILY.to_owned()),\n          mk(@~\"target_os\", @tos),\n-         mk(@~\"target_family\", @str::to_owned(os::FAMILY)),\n+         mk(@~\"target_family\", @os::FAMILY.to_owned()),\n          mk(@~\"target_arch\", @arch),\n          mk(@~\"target_endian\", @end),\n          mk(@~\"target_word_size\", @wordsz),"}, {"sha": "980d318ec62f9be62a0333a9c0c93015ad6e0ef4", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -570,7 +570,7 @@ pub fn maybe_get_item_ast(cdata: cmd, tcx: ty::ctxt,\n     let item_doc = lookup_item(id, cdata.data);\n     let path = {\n         let item_path = item_path(item_doc);\n-        vec::to_owned(item_path.init())\n+        item_path.init().to_owned()\n     };\n     match decode_inlined_item(cdata, tcx, copy path, item_doc) {\n       Some(ref ii) => csearch::found((/*bad*/copy *ii)),"}, {"sha": "e06d07504fcc9bb168045b01e950b9afaacdd749", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -1516,7 +1516,7 @@ pub fn encode_metadata(parms: EncodeParams, crate: &crate) -> ~[u8] {\n \n     let writer_bytes: &mut ~[u8] = wr.bytes;\n \n-    vec::to_owned(metadata_encoding_version) +\n+    metadata_encoding_version.to_owned() +\n         flate::deflate_bytes(*writer_bytes)\n }\n "}, {"sha": "aab6e8634989a96af9b99c31e50e3cf13dea0f62", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -81,7 +81,7 @@ pub fn mk_filesearch(maybe_sysroot: &Option<@Path>,\n     @FileSearchImpl {\n         sysroot: sysroot,\n         addl_lib_search_paths: addl_lib_search_paths,\n-        target_triple: str::to_owned(target_triple)\n+        target_triple: target_triple.to_owned()\n     } as @FileSearch\n }\n \n@@ -107,7 +107,7 @@ pub fn search<T:Copy>(filesearch: @FileSearch, pick: pick<T>) -> Option<T> {\n \n pub fn relative_target_lib_path(target_triple: &str) -> Path {\n     Path(libdir()).push_many([~\"rustc\",\n-                              str::to_owned(target_triple),\n+                              target_triple.to_owned(),\n                               libdir()])\n }\n "}, {"sha": "370804cb7507ed8915bb27f1b1c28c28b2262b00", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -80,7 +80,7 @@ fn libname(cx: &Context) -> (~str, ~str) {\n         os_freebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n     };\n \n-    (str::to_owned(dll_prefix), str::to_owned(dll_suffix))\n+    (dll_prefix.to_owned(), dll_suffix.to_owned())\n }\n \n fn find_library_crate_aux("}, {"sha": "00d06f0a3d8c9366040a909df3b7c47206513ade", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -495,7 +495,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                 match cx.tcx.def_map.find(&pat_id) {\n                     Some(&def_variant(_, id)) => {\n                         if variant(id) == *ctor_id {\n-                            Some(vec::to_owned(r.tail()))\n+                            Some(r.tail().to_owned())\n                         } else {\n                             None\n                         }\n@@ -533,7 +533,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             _ => fail!(\"type error\")\n                         };\n                         if match_ {\n-                            Some(vec::to_owned(r.tail()))\n+                            Some(r.tail().to_owned())\n                         } else {\n                             None\n                         }\n@@ -580,7 +580,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             _ => fail!(\"type error\")\n                         };\n                         if match_ {\n-                            Some(vec::to_owned(r.tail()))\n+                            Some(r.tail().to_owned())\n                         } else {\n                             None\n                         }\n@@ -590,7 +590,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             Some(args) => args,\n                             None => vec::from_elem(arity, wild())\n                         };\n-                        Some(vec::append(args, vec::to_owned(r.tail())))\n+                        Some(vec::append(args, r.tail().to_owned()))\n                     }\n                     def_variant(_, _) => None,\n \n@@ -602,7 +602,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             Some(args) => new_args = args,\n                             None => new_args = vec::from_elem(arity, wild())\n                         }\n-                        Some(vec::append(new_args, vec::to_owned(r.tail())))\n+                        Some(vec::append(new_args, r.tail().to_owned()))\n                     }\n                     _ => None\n                 }\n@@ -620,7 +620,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                                     _ => wild()\n                                 }\n                             });\n-                            Some(vec::append(args, vec::to_owned(r.tail())))\n+                            Some(vec::append(args, r.tail().to_owned()))\n                         } else {\n                             None\n                         }\n@@ -651,7 +651,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                                 _ => wild()\n                             }\n                         });\n-                        Some(vec::append(args, vec::to_owned(r.tail())))\n+                        Some(vec::append(args, r.tail().to_owned()))\n                     }\n                 }\n             }\n@@ -687,14 +687,14 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                     single => true,\n                     _ => fail!(\"type error\")\n                 };\n-                if match_ { Some(vec::to_owned(r.tail())) } else { None }\n+                if match_ { Some(r.tail().to_owned()) } else { None }\n             }\n             pat_range(lo, hi) => {\n                 let (c_lo, c_hi) = match *ctor_id {\n                     val(ref v) => ((/*bad*/copy *v), (/*bad*/copy *v)),\n                     range(ref lo, ref hi) =>\n                         ((/*bad*/copy *lo), (/*bad*/copy *hi)),\n-                    single => return Some(vec::to_owned(r.tail())),\n+                    single => return Some(r.tail().to_owned()),\n                     _ => fail!(\"type error\")\n                 };\n                 let v_lo = eval_const_expr(cx.tcx, lo);\n@@ -704,7 +704,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                 let m2 = compare_const_vals(&c_hi, &v_hi);\n                 match (m1, m2) {\n                     (Some(val1), Some(val2)) if val1 >= 0 && val2 <= 0 => {\n-                        Some(vec::to_owned(r.tail()))\n+                        Some(r.tail().to_owned())\n                     },\n                     (Some(_), Some(_)) => None,\n                     _ => {\n@@ -745,7 +745,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n }\n \n pub fn default(cx: @MatchCheckCtxt, r: &[@pat]) -> Option<~[@pat]> {\n-    if is_wild(cx, r[0]) { Some(vec::to_owned(r.tail())) }\n+    if is_wild(cx, r[0]) { Some(r.tail().to_owned()) }\n     else { None }\n }\n "}, {"sha": "1a2fd45163758adf4d024b647ce5a3f63b58a3e9", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -218,7 +218,7 @@ fn mk_struct(cx: @CrateContext, tys: &[ty::t], packed: bool) -> Struct {\n         size: machine::llsize_of_alloc(cx, llty_rec) /*bad*/as u64,\n         align: machine::llalign_of_min(cx, llty_rec) /*bad*/as u64,\n         packed: packed,\n-        fields: vec::to_owned(tys)\n+        fields: tys.to_owned()\n     }\n }\n "}, {"sha": "bee63a35a2488f6f3dde543fcf130b6da0d4e6d4", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -114,7 +114,7 @@ impl get_insn_ctxt for @CrateContext {\n     fn insn_ctxt(&self, s: &str) -> icx_popper {\n         debug!(\"new insn_ctxt: %s\", s);\n         if self.sess.count_llvm_insns() {\n-            self.stats.llvm_insn_ctxt.push(str::to_owned(s));\n+            self.stats.llvm_insn_ctxt.push(s.to_owned());\n         }\n         icx_popper(*self)\n     }"}, {"sha": "df3bc753ae1884c3ded7357778226f04d20e6ad1", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -3898,7 +3898,7 @@ pub fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n           }\n \n           ast_map::node_variant(ref variant, _, path) => {\n-            vec::append_one(vec::to_owned(vec::init(*path)),\n+            vec::append_one(path.init().to_owned(),\n                             ast_map::path_name((*variant).node.name))\n           }\n "}, {"sha": "5fec0882a0adffa2b1f79cb00d061c461408c924", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -131,13 +131,13 @@ fn first_sentence_(s: &str) -> ~str {\n     });\n     match idx {\n         Some(idx) if idx > 2u => {\n-            str::to_owned(s.slice(0, idx - 1))\n+            s.slice_to(idx - 1).to_owned()\n         }\n         _ => {\n             if s.ends_with(\".\") {\n-                str::to_owned(s)\n+                s.to_owned()\n             } else {\n-                str::to_owned(s)\n+                s.to_owned()\n             }\n         }\n     }"}, {"sha": "142489df6c1c03ac1ac8c6aee6afbcaf96079b7f", "filename": "src/libstd/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -761,7 +761,7 @@ impl<T:Reader> ReaderUtil for T {\n     fn read_lines(&self) -> ~[~str] {\n         do vec::build |push| {\n             for self.each_line |line| {\n-                push(str::to_owned(line));\n+                push(line.to_owned());\n             }\n         }\n     }"}, {"sha": "c8ffe007b9043f9613a62db58f2d4bb0d571f7c3", "filename": "src/libstd/path.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -515,7 +515,7 @@ impl GenericPath for PosixPath {\n     fn with_filestem(&self, s: &str) -> PosixPath {\n         match self.filetype() {\n             None => self.with_filename(s),\n-            Some(ref t) => self.with_filename(str::to_owned(s) + *t),\n+            Some(ref t) => self.with_filename(s.to_owned() + *t),\n         }\n     }\n \n@@ -657,7 +657,7 @@ impl GenericPath for WindowsPath {\n             (None, None) => {\n                 host = None;\n                 device = None;\n-                rest = str::to_owned(s);\n+                rest = s.to_owned();\n             }\n         }\n \n@@ -729,7 +729,7 @@ impl GenericPath for WindowsPath {\n     fn with_filestem(&self, s: &str) -> WindowsPath {\n         match self.filetype() {\n             None => self.with_filename(s),\n-            Some(ref t) => self.with_filename(str::to_owned(s) + *t),\n+            Some(ref t) => self.with_filename(s.to_owned() + *t),\n         }\n     }\n \n@@ -984,7 +984,7 @@ mod tests {\n     fn test_posix_paths() {\n         fn t(wp: &PosixPath, s: &str) {\n             let ss = wp.to_str();\n-            let sss = str::to_owned(s);\n+            let sss = s.to_owned();\n             if (ss != sss) {\n                 debug!(\"got %s\", ss);\n                 debug!(\"expected %s\", sss);\n@@ -1042,7 +1042,7 @@ mod tests {\n     fn test_normalize() {\n         fn t(wp: &PosixPath, s: &str) {\n             let ss = wp.to_str();\n-            let sss = str::to_owned(s);\n+            let sss = s.to_owned();\n             if (ss != sss) {\n                 debug!(\"got %s\", ss);\n                 debug!(\"expected %s\", sss);\n@@ -1105,7 +1105,7 @@ mod tests {\n     fn test_windows_paths() {\n         fn t(wp: &WindowsPath, s: &str) {\n             let ss = wp.to_str();\n-            let sss = str::to_owned(s);\n+            let sss = s.to_owned();\n             if (ss != sss) {\n                 debug!(\"got %s\", ss);\n                 debug!(\"expected %s\", sss);"}, {"sha": "f78502059300560bafcc6a06a9b635aed1206ea9", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -577,7 +577,7 @@ impl<R: Rng> RngUtil for R {\n \n     /// Shuffle a vec\n     fn shuffle<T:Copy>(&mut self, values: &[T]) -> ~[T] {\n-        let mut m = vec::to_owned(values);\n+        let mut m = values.to_owned();\n         self.shuffle_mut(m);\n         m\n     }"}, {"sha": "9d8618e557147141dd91c317a8e99de7495bc6ee", "filename": "src/libstd/str.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -107,23 +107,17 @@ pub fn from_bytes_slice<'a>(vector: &'a [u8]) -> &'a str {\n     }\n }\n \n-/// Copy a slice into a new unique str\n-#[inline(always)]\n-pub fn to_owned(s: &str) -> ~str {\n-    unsafe { raw::slice_bytes_owned(s, 0, s.len()) }\n-}\n-\n impl ToStr for ~str {\n     #[inline(always)]\n-    fn to_str(&self) -> ~str { to_owned(*self) }\n+    fn to_str(&self) -> ~str { self.to_owned() }\n }\n impl<'self> ToStr for &'self str {\n     #[inline(always)]\n-    fn to_str(&self) -> ~str { to_owned(*self) }\n+    fn to_str(&self) -> ~str { self.to_owned() }\n }\n impl ToStr for @str {\n     #[inline(always)]\n-    fn to_str(&self) -> ~str { to_owned(*self) }\n+    fn to_str(&self) -> ~str { self.to_owned() }\n }\n \n /**\n@@ -409,7 +403,7 @@ Section: Transforming strings\n  */\n pub fn to_bytes(s: &str) -> ~[u8] {\n     unsafe {\n-        let mut v: ~[u8] = ::cast::transmute(to_owned(s));\n+        let mut v: ~[u8] = ::cast::transmute(s.to_owned());\n         vec::raw::set_len(&mut v, s.len());\n         v\n     }\n@@ -1237,7 +1231,7 @@ impl<'self> StrUtil for &'self str {\n             // NB: len includes the trailing null.\n             assert!(len > 0);\n             if unsafe { *(ptr::offset(buf,len-1)) != 0 } {\n-                to_owned(self).as_c_str(f)\n+                self.to_owned().as_c_str(f)\n             } else {\n                 f(buf as *libc::c_char)\n             }\n@@ -1526,7 +1520,9 @@ pub mod traits {\n     impl<'self> Add<&'self str,~str> for ~str {\n         #[inline(always)]\n         fn add(&self, rhs: & &'self str) -> ~str {\n-            append(copy *self, (*rhs))\n+            let mut s = self.to_owned();\n+            s.push_str(*rhs);\n+            s\n         }\n     }\n }\n@@ -1893,10 +1889,13 @@ impl<'self> StrSlice<'self> for &'self str {\n         }\n     }\n \n-\n+    /// Copy a slice into a new unique str\n     #[inline]\n-    fn to_owned(&self) -> ~str { to_owned(*self) }\n+    fn to_owned(&self) -> ~str {\n+        unsafe { raw::slice_bytes_owned(*self, 0, self.len()) }\n+    }\n \n+    /// Copy a slice into a new @str\n     #[inline]\n     fn to_managed(&self) -> @str {\n         let v = at_vec::from_fn(self.len() + 1, |i| {\n@@ -2252,7 +2251,7 @@ impl OwnedStr for ~str {\n impl Clone for ~str {\n     #[inline(always)]\n     fn clone(&self) -> ~str {\n-        to_owned(*self)\n+        self.to_owned()\n     }\n }\n \n@@ -3135,6 +3134,11 @@ mod tests {\n         assert_eq!(\"abc\".to_managed(), @\"abc\");\n         assert_eq!(\"abcdef\".slice(1, 5).to_managed(), @\"bcde\");\n     }\n+    #[test]\n+    fn test_to_owned() {\n+        assert_eq!(\"abc\".to_owned(), ~\"abc\");\n+        assert_eq!(\"abcdef\".slice(1, 5).to_owned(), ~\"bcde\");\n+    }\n \n     #[test]\n     fn test_total_ord() {"}, {"sha": "52cb20458ea54fe44ca5fa1792ede62589973f2d", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -171,11 +171,6 @@ pub fn from_elem<T:Copy>(n_elts: uint, t: T) -> ~[T] {\n     }\n }\n \n-/// Creates a new unique vector with the same contents as the slice\n-pub fn to_owned<T:Copy>(t: &[T]) -> ~[T] {\n-    from_fn(t.len(), |i| t[i])\n-}\n-\n /// Creates a new vector with a capacity of `capacity`\n pub fn with_capacity<T>(capacity: uint) -> ~[T] {\n     let mut vec = ~[];\n@@ -1787,7 +1782,7 @@ pub trait CopyableVector<T> {\n \n /// Extension methods for vectors\n impl<'self,T:Copy> CopyableVector<T> for &'self [T] {\n-    /// Returns a copy of `v`.\n+    /// Creates a new unique vector with the same contents as the slice\n     #[inline]\n     fn to_owned(&self) -> ~[T] {\n         let mut result = ~[];\n@@ -1796,7 +1791,6 @@ impl<'self,T:Copy> CopyableVector<T> for &'self [T] {\n             result.push(copy *e);\n         }\n         result\n-\n     }\n }\n \n@@ -3361,19 +3355,19 @@ mod tests {\n         let mut results: ~[~[int]];\n \n         results = ~[];\n-        for each_permutation([]) |v| { results.push(to_owned(v)); }\n+        for each_permutation([]) |v| { results.push(v.to_owned()); }\n         assert_eq!(results, ~[~[]]);\n \n         results = ~[];\n-        for each_permutation([7]) |v| { results.push(to_owned(v)); }\n+        for each_permutation([7]) |v| { results.push(v.to_owned()); }\n         assert_eq!(results, ~[~[7]]);\n \n         results = ~[];\n-        for each_permutation([1,1]) |v| { results.push(to_owned(v)); }\n+        for each_permutation([1,1]) |v| { results.push(v.to_owned()); }\n         assert_eq!(results, ~[~[1,1],~[1,1]]);\n \n         results = ~[];\n-        for each_permutation([5,2,0]) |v| { results.push(to_owned(v)); }\n+        for each_permutation([5,2,0]) |v| { results.push(v.to_owned()); }\n         assert!(results ==\n             ~[~[5,2,0],~[5,0,2],~[2,5,0],~[2,0,5],~[0,5,2],~[0,2,5]]);\n     }"}, {"sha": "da5874f7b0522f9a04bb41aadcee59d601dd8857", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -259,7 +259,7 @@ pub fn last_meta_item_list_by_name(items: ~[@ast::meta_item], name: &str)\n \n pub fn sort_meta_items(items: &[@ast::meta_item]) -> ~[@ast::meta_item] {\n     // This is sort of stupid here, converting to a vec of mutables and back\n-    let mut v = vec::to_owned(items);\n+    let mut v = items.to_owned();\n     do extra::sort::quick_sort(v) |ma, mb| {\n         get_meta_item_name(*ma) <= get_meta_item_name(*mb)\n     }"}, {"sha": "113ade04960fcdf6fb8d92414c54b8d07dc37a34", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -45,7 +45,7 @@ pub fn expand_asm(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n                -> base::MacResult {\n     let p = parse::new_parser_from_tts(cx.parse_sess(),\n                                        cx.cfg(),\n-                                       vec::to_owned(tts));\n+                                       tts.to_owned());\n \n     let mut asm = ~\"\";\n     let mut outputs = ~[];"}, {"sha": "3cb3bfca1f8be5479175541f66ab3fca4f466d87", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -367,7 +367,7 @@ pub fn get_exprs_from_tts(cx: @ExtCtxt, tts: &[ast::token_tree])\n                        -> ~[@ast::expr] {\n     let p = parse::new_parser_from_tts(cx.parse_sess(),\n                                        cx.cfg(),\n-                                       vec::to_owned(tts));\n+                                       tts.to_owned());\n     let mut es = ~[];\n     while *p.token != token::EOF {\n         if es.len() != 0 {"}, {"sha": "5c8bc5947910b51774594b0374a00770911d4cd8", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -28,7 +28,7 @@ pub fn expand_syntax_ext(cx: @ExtCtxt,\n     cx.print_backtrace();\n     io::stdout().write_line(\n         print::pprust::tt_to_str(\n-            ast::tt_delim(vec::to_owned(tt)),\n+            ast::tt_delim(tt.to_owned()),\n             get_ident_interner()));\n \n     //trivial expression"}, {"sha": "adcca16e4ef048c2ea4080e311a342f74f557217", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -40,8 +40,6 @@ pub mod rt {\n     use parse;\n     use print::pprust;\n \n-    use core::str;\n-\n     pub use ast::*;\n     pub use parse::token::*;\n     pub use parse::new_parser_from_tts;\n@@ -128,7 +126,7 @@ pub mod rt {\n \n     impl<'self> ToSource for &'self str {\n         fn to_source(&self) -> ~str {\n-            let lit = dummy_spanned(ast::lit_str(@str::to_owned(*self)));\n+            let lit = dummy_spanned(ast::lit_str(@self.to_owned()));\n             pprust::lit_to_str(@lit)\n         }\n     }\n@@ -661,7 +659,7 @@ fn expand_tts(cx: @ExtCtxt,\n     let p = parse::new_parser_from_tts(\n         cx.parse_sess(),\n         cx.cfg(),\n-        vec::to_owned(tts)\n+        tts.to_owned()\n     );\n     *p.quote_depth += 1u;\n     let tts = p.parse_all_token_trees();"}, {"sha": "f779f26b812624b43b5a79d9a63bf8d12a604683", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -29,7 +29,7 @@ pub fn expand_trace_macros(cx: @ExtCtxt,\n     let tt_rdr = new_tt_reader(\n         copy cx.parse_sess().span_diagnostic,\n         None,\n-        vec::to_owned(tt)\n+        tt.to_owned()\n     );\n     let rdr = tt_rdr as @reader;\n     let rust_parser = Parser("}, {"sha": "ab2ba7b6b98e30414aa3ab8371b59520a06caeea", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -84,7 +84,7 @@ pub fn add_new_extension(cx: @ExtCtxt,\n             io::println(fmt!(\"%s! { %s }\",\n                              cx.str_of(name),\n                              print::pprust::tt_to_str(\n-                                 ast::tt_delim(vec::to_owned(arg)),\n+                                 ast::tt_delim(arg.to_owned()),\n                                  get_ident_interner())));\n         }\n \n@@ -101,7 +101,7 @@ pub fn add_new_extension(cx: @ExtCtxt,\n                 let arg_rdr = new_tt_reader(\n                     s_d,\n                     None,\n-                    vec::to_owned(arg)\n+                    arg.to_owned()\n                 ) as @reader;\n                 match parse(cx.parse_sess(), cx.cfg(), arg_rdr, *mtcs) {\n                   success(named_matches) => {"}, {"sha": "42908a339d200dbea1210087747f71cbaeebfaa7", "filename": "src/test/run-pass/struct-order-of-eval-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-1.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -14,5 +14,5 @@ struct S { f0: ~str, f1: int }\n \n pub fn main() {\n     let s = ~\"Hello, world!\";\n-    let _s = S { f0: str::to_owned(s), ..S { f0: s, f1: 23 } };\n+    let _s = S { f0: s.to_owned(), ..S { f0: s, f1: 23 } };\n }"}, {"sha": "b6851a728882a94fe4fafe912ef436f7b7722505", "filename": "src/test/run-pass/struct-order-of-eval-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-2.rs?ref=96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "patch": "@@ -14,5 +14,5 @@ struct S { f0: ~str, f1: ~str }\n \n pub fn main() {\n     let s = ~\"Hello, world!\";\n-    let _s = S { f1: str::to_owned(s), f0: s };\n+    let _s = S { f1: s.to_owned(), f0: s };\n }"}]}