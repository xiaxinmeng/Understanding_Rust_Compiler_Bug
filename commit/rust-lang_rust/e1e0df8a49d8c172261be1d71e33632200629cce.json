{"sha": "e1e0df8a49d8c172261be1d71e33632200629cce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZTBkZjhhNDlkOGMxNzIyNjFiZTFkNzFlMzM2MzIyMDA2MjljY2U=", "commit": {"author": {"name": "Nathan", "email": "nathan.whitaker01@gmail.com", "date": "2019-07-22T21:17:37Z"}, "committer": {"name": "nathanwhit", "email": "nathan.whitaker01@gmail.com", "date": "2019-07-23T00:42:08Z"}, "message": "Remove uses of mem::uninitialized in std::sys::cloudabi\n\nUsages still appear in cloudabi tests and in the reentrant mutex implementation", "tree": {"sha": "8cb6c49cb0cd51eb638b16979fd891ae7dfd26db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cb6c49cb0cd51eb638b16979fd891ae7dfd26db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1e0df8a49d8c172261be1d71e33632200629cce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e0df8a49d8c172261be1d71e33632200629cce", "html_url": "https://github.com/rust-lang/rust/commit/e1e0df8a49d8c172261be1d71e33632200629cce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1e0df8a49d8c172261be1d71e33632200629cce/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e649e903440bfd919bfc9db848c28df6d795a116", "url": "https://api.github.com/repos/rust-lang/rust/commits/e649e903440bfd919bfc9db848c28df6d795a116", "html_url": "https://github.com/rust-lang/rust/commit/e649e903440bfd919bfc9db848c28df6d795a116"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "fbc68c610ee39beb023b1b8129855364c88865ce", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1e0df8a49d8c172261be1d71e33632200629cce/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e0df8a49d8c172261be1d71e33632200629cce/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e1e0df8a49d8c172261be1d71e33632200629cce", "patch": "@@ -273,6 +273,7 @@\n #![feature(link_args)]\n #![feature(linkage)]\n #![feature(maybe_uninit_ref)]\n+#![feature(maybe_uninit_slice)]\n #![feature(mem_take)]\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]"}, {"sha": "bce76a082e64bdff88617f123e9098c9310340c0", "filename": "src/libstd/sys/cloudabi/condvar.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e1e0df8a49d8c172261be1d71e33632200629cce/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e0df8a49d8c172261be1d71e33632200629cce/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs?ref=e1e0df8a49d8c172261be1d71e33632200629cce", "patch": "@@ -79,16 +79,21 @@ impl Condvar {\n             },\n             ..mem::zeroed()\n         };\n-        let mut event: abi::event = mem::uninitialized();\n-        let mut nevents: usize = mem::uninitialized();\n-        let ret = abi::poll(&subscription, &mut event, 1, &mut nevents);\n+        let mut event: mem::MaybeUninit<abi::event> = mem::MaybeUninit::uninit();\n+        let mut nevents: mem::MaybeUninit<usize> = mem::MaybeUninit::uninit();\n+        let ret = abi::poll(\n+            &subscription,\n+            event.as_mut_ptr(),\n+            1,\n+            nevents.get_mut()\n+        );\n         assert_eq!(\n             ret,\n             abi::errno::SUCCESS,\n             \"Failed to wait on condition variable\"\n         );\n         assert_eq!(\n-            event.error,\n+            event.assume_init().error,\n             abi::errno::SUCCESS,\n             \"Failed to wait on condition variable\"\n         );\n@@ -131,21 +136,27 @@ impl Condvar {\n                 ..mem::zeroed()\n             },\n         ];\n-        let mut events: [abi::event; 2] = mem::uninitialized();\n-        let mut nevents: usize = mem::uninitialized();\n-        let ret = abi::poll(subscriptions.as_ptr(), events.as_mut_ptr(), 2, &mut nevents);\n+        let mut events: [mem::MaybeUninit<abi::event>; 2] = [mem::MaybeUninit::uninit(); 2];\n+        let mut nevents: mem::MaybeUninit<usize> = mem::MaybeUninit::uninit();\n+        let ret = abi::poll(\n+            subscriptions.as_ptr(),\n+            mem::MaybeUninit::first_ptr_mut(&mut events),\n+            2,\n+            nevents.get_mut()\n+        );\n         assert_eq!(\n             ret,\n             abi::errno::SUCCESS,\n             \"Failed to wait on condition variable\"\n         );\n+        let nevents = nevents.assume_init();\n         for i in 0..nevents {\n             assert_eq!(\n-                events[i].error,\n+                events[i].assume_init().error,\n                 abi::errno::SUCCESS,\n                 \"Failed to wait on condition variable\"\n             );\n-            if events[i].type_ == abi::eventtype::CONDVAR {\n+            if events[i].assume_init().type_ == abi::eventtype::CONDVAR {\n                 return true;\n             }\n         }"}, {"sha": "091b31002fdebb9cf816db9a688f86063e616ec9", "filename": "src/libstd/sys/cloudabi/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1e0df8a49d8c172261be1d71e33632200629cce/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e0df8a49d8c172261be1d71e33632200629cce/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs?ref=e1e0df8a49d8c172261be1d71e33632200629cce", "patch": "@@ -61,8 +61,11 @@ pub use libc::strlen;\n \n pub fn hashmap_random_keys() -> (u64, u64) {\n     unsafe {\n-        let mut v = mem::uninitialized();\n-        libc::arc4random_buf(&mut v as *mut _ as *mut libc::c_void, mem::size_of_val(&v));\n-        v\n+        let mut v: mem::MaybeUninit<(u64, u64)> = mem::MaybeUninit::uninit();\n+        libc::arc4random_buf(\n+            v.as_mut_ptr() as *mut libc::c_void,\n+            mem::size_of_val(v.get_ref())\n+        );\n+        v.assume_init()\n     }\n }"}, {"sha": "fc5ffb8756083d0f28f52543efe14ffa19ba98ab", "filename": "src/libstd/sys/cloudabi/time.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1e0df8a49d8c172261be1d71e33632200629cce/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e0df8a49d8c172261be1d71e33632200629cce/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs?ref=e1e0df8a49d8c172261be1d71e33632200629cce", "patch": "@@ -18,8 +18,8 @@ pub fn checked_dur2intervals(dur: &Duration) -> Option<abi::timestamp> {\n impl Instant {\n     pub fn now() -> Instant {\n         unsafe {\n-            let mut t = mem::uninitialized();\n-            let ret = abi::clock_time_get(abi::clockid::MONOTONIC, 0, &mut t);\n+            let mut t: mem::MaybeUninit<abi::timestamp> = mem::MaybeUninit::uninit();\n+            let ret = abi::clock_time_get(abi::clockid::MONOTONIC, 0, t.get_mut());\n             assert_eq!(ret, abi::errno::SUCCESS);\n             Instant { t }\n         }\n@@ -59,8 +59,8 @@ pub struct SystemTime {\n impl SystemTime {\n     pub fn now() -> SystemTime {\n         unsafe {\n-            let mut t = mem::uninitialized();\n-            let ret = abi::clock_time_get(abi::clockid::REALTIME, 0, &mut t);\n+            let mut t: mem::MaybeUninit<abi::timestamp> = mem::MaybeUninit::uninit();\n+            let ret = abi::clock_time_get(abi::clockid::REALTIME, 0, t.get_mut());\n             assert_eq!(ret, abi::errno::SUCCESS);\n             SystemTime { t }\n         }"}]}