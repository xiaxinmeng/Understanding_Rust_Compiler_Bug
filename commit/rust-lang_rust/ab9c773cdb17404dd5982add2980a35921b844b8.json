{"sha": "ab9c773cdb17404dd5982add2980a35921b844b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiOWM3NzNjZGIxNzQwNGRkNTk4MmFkZDI5ODBhMzU5MjFiODQ0Yjg=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-24T20:04:41Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-26T02:15:09Z"}, "message": "librustc: remove unused DefUpvar field.", "tree": {"sha": "06c8733b1934af7613b118b6369c84aad90d08cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06c8733b1934af7613b118b6369c84aad90d08cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab9c773cdb17404dd5982add2980a35921b844b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9c773cdb17404dd5982add2980a35921b844b8", "html_url": "https://github.com/rust-lang/rust/commit/ab9c773cdb17404dd5982add2980a35921b844b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab9c773cdb17404dd5982add2980a35921b844b8/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11ef6f1349d0917c099d7c88d630b0e5f6ee4393", "url": "https://api.github.com/repos/rust-lang/rust/commits/11ef6f1349d0917c099d7c88d630b0e5f6ee4393", "html_url": "https://github.com/rust-lang/rust/commit/11ef6f1349d0917c099d7c88d630b0e5f6ee4393"}], "stats": {"total": 45, "additions": 15, "deletions": 30}, "files": [{"sha": "fcc2be985a5561771d7ad024a4469580db10bec4", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=ab9c773cdb17404dd5982add2980a35921b844b8", "patch": "@@ -448,10 +448,8 @@ impl tr for def::Def {\n           def::DefPrimTy(p) => def::DefPrimTy(p),\n           def::DefTyParam(s, index, def_id, n) => def::DefTyParam(s, index, def_id.tr(dcx), n),\n           def::DefUse(did) => def::DefUse(did.tr(dcx)),\n-          def::DefUpvar(nid1, nid2, nid3) => {\n-            def::DefUpvar(dcx.tr_id(nid1),\n-                           dcx.tr_id(nid2),\n-                           dcx.tr_id(nid3))\n+          def::DefUpvar(nid1, nid2) => {\n+            def::DefUpvar(dcx.tr_id(nid1), dcx.tr_id(nid2))\n           }\n           def::DefStruct(did) => def::DefStruct(did.tr(dcx)),\n           def::DefRegion(nid) => def::DefRegion(dcx.tr_id(nid)),"}, {"sha": "2043dde72f47b26488697253566438d41b4b3a4c", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=ab9c773cdb17404dd5982add2980a35921b844b8", "patch": "@@ -43,9 +43,7 @@ pub enum Def {\n     DefTyParam(ParamSpace, u32, ast::DefId, ast::Name),\n     DefUse(ast::DefId),\n     DefUpvar(ast::NodeId,  // id of closed over local\n-             ast::NodeId,  // expr node that creates the closure\n-             ast::NodeId), // block node for the closest enclosing proc\n-                           // or unboxed closure, DUMMY_NODE_ID otherwise\n+             ast::NodeId), // expr node that creates the closure\n \n     /// Note that if it's a tuple struct's definition, the node id of the ast::DefId\n     /// may either refer to the item definition's id or the StructDef.ctor_id.\n@@ -145,7 +143,7 @@ impl Def {\n             }\n             DefLocal(id) |\n             DefSelfTy(id) |\n-            DefUpvar(id, _, _) |\n+            DefUpvar(id, _) |\n             DefRegion(id) |\n             DefTyParamBinder(id) |\n             DefLabel(id) => {"}, {"sha": "fa49196e6c54cd5273111861b580338fb639cd7e", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=ab9c773cdb17404dd5982add2980a35921b844b8", "patch": "@@ -593,7 +593,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n               }))\n           }\n \n-          def::DefUpvar(var_id, fn_node_id, _) => {\n+          def::DefUpvar(var_id, fn_node_id) => {\n               let ty = try!(self.node_ty(fn_node_id));\n               match ty.sty {\n                   ty::ty_closure(closure_id, _, _) => {"}, {"sha": "084675cfe06fbb224e6ffc13f59181b77020a268", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ab9c773cdb17404dd5982add2980a35921b844b8", "patch": "@@ -243,7 +243,7 @@ enum RibKind {\n \n     // We passed through a closure scope at the given node ID.\n     // Translate upvars as appropriate.\n-    ClosureRibKind(NodeId /* func id */, NodeId /* body id if proc or unboxed */),\n+    ClosureRibKind(NodeId /* func id */),\n \n     // We passed through an impl or trait and are now in one of its\n     // methods. Allow references to ty params that impl or trait\n@@ -2605,18 +2605,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             DlDef(d @ DefLocal(_)) => {\n                 let node_id = d.def_id().node;\n                 let mut def = d;\n-                let mut last_proc_body_id = ast::DUMMY_NODE_ID;\n                 for rib in ribs.iter() {\n                     match rib.kind {\n                         NormalRibKind => {\n                             // Nothing to do. Continue.\n                         }\n-                        ClosureRibKind(function_id, maybe_proc_body) => {\n+                        ClosureRibKind(function_id) => {\n                             let prev_def = def;\n-                            if maybe_proc_body != ast::DUMMY_NODE_ID {\n-                                last_proc_body_id = maybe_proc_body;\n-                            }\n-                            def = DefUpvar(node_id, function_id, last_proc_body_id);\n+                            def = DefUpvar(node_id, function_id);\n \n                             let mut seen = self.freevars_seen.borrow_mut();\n                             let seen = match seen.entry(function_id) {\n@@ -4523,7 +4519,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n             ExprClosure(capture_clause, _, ref fn_decl, ref block) => {\n                 self.capture_mode_map.insert(expr.id, capture_clause);\n-                self.resolve_function(ClosureRibKind(expr.id, ast::DUMMY_NODE_ID),\n+                self.resolve_function(ClosureRibKind(expr.id),\n                                       Some(&**fn_decl), NoTypeParameters,\n                                       &**block);\n             }"}, {"sha": "77ae119a02486ca0571124653f328848a0d77aae", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=ab9c773cdb17404dd5982add2980a35921b844b8", "patch": "@@ -1228,19 +1228,19 @@ pub fn trans_match<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n fn is_discr_reassigned(bcx: Block, discr: &ast::Expr, body: &ast::Expr) -> bool {\n     let (vid, field) = match discr.node {\n         ast::ExprPath(_) | ast::ExprQPath(_) => match bcx.def(discr.id) {\n-            def::DefLocal(vid) | def::DefUpvar(vid, _, _) => (vid, None),\n+            def::DefLocal(vid) | def::DefUpvar(vid, _) => (vid, None),\n             _ => return false\n         },\n         ast::ExprField(ref base, field) => {\n             let vid = match bcx.tcx().def_map.borrow().get(&base.id) {\n-                Some(&def::DefLocal(vid)) | Some(&def::DefUpvar(vid, _, _)) => vid,\n+                Some(&def::DefLocal(vid)) | Some(&def::DefUpvar(vid, _)) => vid,\n                 _ => return false\n             };\n             (vid, Some(mc::NamedField(field.node.name)))\n         },\n         ast::ExprTupField(ref base, field) => {\n             let vid = match bcx.tcx().def_map.borrow().get(&base.id) {\n-                Some(&def::DefLocal(vid)) | Some(&def::DefUpvar(vid, _, _)) => vid,\n+                Some(&def::DefLocal(vid)) | Some(&def::DefUpvar(vid, _)) => vid,\n                 _ => return false\n             };\n             (vid, Some(mc::PositionalField(field.node)))"}, {"sha": "595212ad053b83a6f1b87a9af50e554ec1a7b759", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=ab9c773cdb17404dd5982add2980a35921b844b8", "patch": "@@ -1263,7 +1263,7 @@ pub fn trans_local_var<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let _icx = push_ctxt(\"trans_local_var\");\n \n     match def {\n-        def::DefUpvar(nid, _, _) => {\n+        def::DefUpvar(nid, _) => {\n             // Can't move upvars, so this is never a ZeroMemLastUse.\n             let local_ty = node_id_type(bcx, nid);\n             match bcx.fcx.llupvars.borrow().get(&nid) {"}, {"sha": "5b172598ebb57298f4d66a49862c797110dae006", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ab9c773cdb17404dd5982add2980a35921b844b8", "patch": "@@ -4622,7 +4622,7 @@ pub fn type_scheme_for_def<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                      defn: def::Def)\n                                      -> TypeScheme<'tcx> {\n     match defn {\n-      def::DefLocal(nid) | def::DefUpvar(nid, _, _) => {\n+      def::DefLocal(nid) | def::DefUpvar(nid, _) => {\n           let typ = fcx.local_ty(sp, nid);\n           return no_params(typ);\n       }"}, {"sha": "f2a3d6609252ffd3726191067f20da806cf02448", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab9c773cdb17404dd5982add2980a35921b844b8/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=ab9c773cdb17404dd5982add2980a35921b844b8", "patch": "@@ -177,16 +177,9 @@ pub struct Rcx<'a, 'tcx: 'a> {\n fn region_of_def(fcx: &FnCtxt, def: def::Def) -> ty::Region {\n     let tcx = fcx.tcx();\n     match def {\n-        def::DefLocal(node_id) => {\n+        def::DefLocal(node_id) | def::DefUpvar(node_id, _) => {\n             tcx.region_maps.var_region(node_id)\n         }\n-        def::DefUpvar(node_id, _, body_id) => {\n-            if body_id == ast::DUMMY_NODE_ID {\n-                tcx.region_maps.var_region(node_id)\n-            } else {\n-                ReScope(CodeExtent::from_node_id(body_id))\n-            }\n-        }\n         _ => {\n             tcx.sess.bug(&format!(\"unexpected def in region_of_def: {:?}\",\n                                  def)[])"}]}