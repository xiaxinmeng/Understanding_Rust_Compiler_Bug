{"sha": "2937cce70c7c860b215f2d6f22f45c0dfe8ba914", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MzdjY2U3MGM3Yzg2MGIyMTVmMmQ2ZjIyZjQ1YzBkZmU4YmE5MTQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-04-17T04:19:50Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-04-21T17:08:27Z"}, "message": "syntax: Replace String::from_str with the stable String::from", "tree": {"sha": "d0d5c140d1798c75117efab252c1e566339c00d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0d5c140d1798c75117efab252c1e566339c00d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2937cce70c7c860b215f2d6f22f45c0dfe8ba914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2937cce70c7c860b215f2d6f22f45c0dfe8ba914", "html_url": "https://github.com/rust-lang/rust/commit/2937cce70c7c860b215f2d6f22f45c0dfe8ba914", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2937cce70c7c860b215f2d6f22f45c0dfe8ba914/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855365895228a78041ae16946eeaef5e45a37a64", "url": "https://api.github.com/repos/rust-lang/rust/commits/855365895228a78041ae16946eeaef5e45a37a64", "html_url": "https://github.com/rust-lang/rust/commit/855365895228a78041ae16946eeaef5e45a37a64"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "78f06ce5fd5d07f8025a4c5e1b688d0ce32afbcb", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2937cce70c7c860b215f2d6f22f45c0dfe8ba914/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2937cce70c7c860b215f2d6f22f45c0dfe8ba914/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=2937cce70c7c860b215f2d6f22f45c0dfe8ba914", "patch": "@@ -238,7 +238,7 @@ pub fn name_to_dummy_lifetime(name: Name) -> Lifetime {\n pub fn impl_pretty_name(trait_ref: &Option<TraitRef>, ty: Option<&Ty>) -> Ident {\n     let mut pretty = match ty {\n         Some(t) => pprust::ty_to_string(t),\n-        None => String::from_str(\"..\")\n+        None => String::from(\"..\")\n     };\n \n     match *trait_ref {"}, {"sha": "0ad70c3379b989f29c87ed40eecc292aef278004", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2937cce70c7c860b215f2d6f22f45c0dfe8ba914/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2937cce70c7c860b215f2d6f22f45c0dfe8ba914/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=2937cce70c7c860b215f2d6f22f45c0dfe8ba914", "patch": "@@ -557,9 +557,9 @@ impl CodeMap {\n         // FIXME #12884: no efficient/safe way to remove from the start of a string\n         // and reuse the allocation.\n         let mut src = if src.starts_with(\"\\u{feff}\") {\n-            String::from_str(&src[3..])\n+            String::from(&src[3..])\n         } else {\n-            String::from_str(&src[..])\n+            String::from(&src[..])\n         };\n \n         // Append '\\n' in case it's not already there."}, {"sha": "a7453636c445c6c6d7d546e022d5f06b68760dee", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2937cce70c7c860b215f2d6f22f45c0dfe8ba914/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2937cce70c7c860b215f2d6f22f45c0dfe8ba914/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=2937cce70c7c860b215f2d6f22f45c0dfe8ba914", "patch": "@@ -644,7 +644,7 @@ fn highlight_lines(err: &mut EmitterWriter,\n             }\n \n             try!(write!(&mut err.dst, \"{}\", s));\n-            let mut s = String::from_str(\"^\");\n+            let mut s = String::from(\"^\");\n             let count = match lastc {\n                 // Most terminals have a tab stop every eight columns by default\n                 '\\t' => 8 - col%8,"}, {"sha": "02f1a52aaf339acfe0aa01cc668ba0dbe9463062", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2937cce70c7c860b215f2d6f22f45c0dfe8ba914/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2937cce70c7c860b215f2d6f22f45c0dfe8ba914/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=2937cce70c7c860b215f2d6f22f45c0dfe8ba914", "patch": "@@ -246,7 +246,7 @@ fn read_block_comment(rdr: &mut StringReader,\n     rdr.bump();\n     rdr.bump();\n \n-    let mut curr_line = String::from_str(\"/*\");\n+    let mut curr_line = String::from(\"/*\");\n \n     // doc-comments are not really comments, they are attributes\n     if (rdr.curr_is('*') && !rdr.nextch_is('*')) || rdr.curr_is('!') {"}, {"sha": "0fcf47d9e711d35a4b6d4306baaefb06226460dd", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2937cce70c7c860b215f2d6f22f45c0dfe8ba914/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2937cce70c7c860b215f2d6f22f45c0dfe8ba914/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2937cce70c7c860b215f2d6f22f45c0dfe8ba914", "patch": "@@ -4834,7 +4834,7 @@ impl<'a> Parser<'a> {\n         let mut included_mod_stack = self.sess.included_mod_stack.borrow_mut();\n         match included_mod_stack.iter().position(|p| *p == path) {\n             Some(i) => {\n-                let mut err = String::from_str(\"circular modules: \");\n+                let mut err = String::from(\"circular modules: \");\n                 let len = included_mod_stack.len();\n                 for p in &included_mod_stack[i.. len] {\n                     err.push_str(&p.to_string_lossy());"}, {"sha": "15aaf9cf390fd18c0110aed288fdec802858cc29", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2937cce70c7c860b215f2d6f22f45c0dfe8ba914/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2937cce70c7c860b215f2d6f22f45c0dfe8ba914/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=2937cce70c7c860b215f2d6f22f45c0dfe8ba914", "patch": "@@ -131,7 +131,7 @@ pub fn buf_str(toks: &[Token],\n     assert_eq!(n, szs.len());\n     let mut i = left;\n     let mut l = lim;\n-    let mut s = string::String::from_str(\"[\");\n+    let mut s = string::String::from(\"[\");\n     while i != right && l != 0 {\n         l -= 1;\n         if i != left {"}, {"sha": "5a57e09fcfff2a4fb5b9625da34a5db36e085271", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2937cce70c7c860b215f2d6f22f45c0dfe8ba914/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2937cce70c7c860b215f2d6f22f45c0dfe8ba914/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2937cce70c7c860b215f2d6f22f45c0dfe8ba914", "patch": "@@ -2794,13 +2794,13 @@ impl<'a> State<'a> {\n         match lit.node {\n             ast::LitStr(ref st, style) => self.print_string(&st, style),\n             ast::LitByte(byte) => {\n-                let mut res = String::from_str(\"b'\");\n+                let mut res = String::from(\"b'\");\n                 res.extend(ascii::escape_default(byte).map(|c| c as char));\n                 res.push('\\'');\n                 word(&mut self.s, &res[..])\n             }\n             ast::LitChar(ch) => {\n-                let mut res = String::from_str(\"'\");\n+                let mut res = String::from(\"'\");\n                 res.extend(ch.escape_default());\n                 res.push('\\'');\n                 word(&mut self.s, &res[..])"}]}