{"sha": "9a3d04ae7629f6f273643b3a14f106726842be6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhM2QwNGFlNzYyOWY2ZjI3MzY0M2IzYTE0ZjEwNjcyNjg0MmJlNmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-27T22:09:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-31T22:17:12Z"}, "message": "std: Switch field privacy as necessary", "tree": {"sha": "7d8d5fc852d9256b31c7ac892ab3df07f0cfe62c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d8d5fc852d9256b31c7ac892ab3df07f0cfe62c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a3d04ae7629f6f273643b3a14f106726842be6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3d04ae7629f6f273643b3a14f106726842be6a", "html_url": "https://github.com/rust-lang/rust/commit/9a3d04ae7629f6f273643b3a14f106726842be6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a3d04ae7629f6f273643b3a14f106726842be6a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2a5c7a179ab0fc0e415918c1fc5d280a9e02ede", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a5c7a179ab0fc0e415918c1fc5d280a9e02ede", "html_url": "https://github.com/rust-lang/rust/commit/f2a5c7a179ab0fc0e415918c1fc5d280a9e02ede"}], "stats": {"total": 1782, "additions": 889, "deletions": 893}, "files": [{"sha": "c9112caa1b9613048564105fe91897b492317d33", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -25,7 +25,7 @@ use option::{Option, Some, None};\n \n /// Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero.\n #[deriving(Clone, Eq, Ord, TotalOrd, TotalEq, Hash)]\n-pub struct Ascii { priv chr: u8 }\n+pub struct Ascii { chr: u8 }\n \n impl Ascii {\n     /// Converts an ascii character into a `u8`."}, {"sha": "ca1a05a264743676f83b90db6e528f7f9379cf6b", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -86,8 +86,8 @@ use raw::Slice;\n /// This structure wraps a `*libc::c_char`, and will automatically free the\n /// memory it is pointing to when it goes out of scope.\n pub struct CString {\n-    priv buf: *libc::c_char,\n-    priv owns_buffer_: bool,\n+    buf: *libc::c_char,\n+    owns_buffer_: bool,\n }\n \n impl Clone for CString {\n@@ -373,8 +373,8 @@ fn check_for_null(v: &[u8], buf: *mut libc::c_char) {\n ///\n /// Use with the `std::iter` module.\n pub struct CChars<'a> {\n-    priv ptr: *libc::c_char,\n-    priv marker: marker::ContravariantLifetime<'a>,\n+    ptr: *libc::c_char,\n+    marker: marker::ContravariantLifetime<'a>,\n }\n \n impl<'a> Iterator<libc::c_char> for CChars<'a> {"}, {"sha": "3b6b914cf14e55f81993c07b960bd63715f2d693", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -44,9 +44,9 @@ use raw;\n \n /// The type representing a foreign chunk of memory\n pub struct CVec<T> {\n-    priv base: *mut T,\n-    priv len: uint,\n-    priv dtor: Option<proc:Send()>,\n+    base: *mut T,\n+    len: uint,\n+    dtor: Option<proc:Send()>,\n }\n \n #[unsafe_destructor]"}, {"sha": "102b87a3733f3332c0ecd8275a726d58bb879bed", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -21,8 +21,8 @@ use ty::Unsafe;\n \n /// A mutable memory location that admits only `Copy` data.\n pub struct Cell<T> {\n-    priv value: Unsafe<T>,\n-    priv noshare: marker::NoShare,\n+    value: Unsafe<T>,\n+    noshare: marker::NoShare,\n }\n \n impl<T:Copy> Cell<T> {\n@@ -69,10 +69,10 @@ impl<T: fmt::Show> fmt::Show for Cell<T> {\n \n /// A mutable memory location with dynamically checked borrow rules\n pub struct RefCell<T> {\n-    priv value: Unsafe<T>,\n-    priv borrow: BorrowFlag,\n-    priv nocopy: marker::NoCopy,\n-    priv noshare: marker::NoShare,\n+    value: Unsafe<T>,\n+    borrow: BorrowFlag,\n+    nocopy: marker::NoCopy,\n+    noshare: marker::NoShare,\n }\n \n // Values [1, MAX-1] represent the number of `Ref` active\n@@ -202,7 +202,7 @@ impl<T: Eq> Eq for RefCell<T> {\n \n /// Wraps a borrowed reference to a value in a `RefCell` box.\n pub struct Ref<'b, T> {\n-    priv parent: &'b RefCell<T>\n+    parent: &'b RefCell<T>\n }\n \n #[unsafe_destructor]\n@@ -222,7 +222,7 @@ impl<'b, T> Deref<T> for Ref<'b, T> {\n \n /// Wraps a mutable borrowed reference to a value in a `RefCell` box.\n pub struct RefMut<'b, T> {\n-    priv parent: &'b mut RefCell<T>\n+    parent: &'b mut RefCell<T>\n }\n \n #[unsafe_destructor]"}, {"sha": "e951077ac83294ab3bd120c23c1985fe35574551", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -289,34 +289,34 @@ static RESCHED_FREQ: int = 256;\n /// The receiving-half of Rust's channel type. This half can only be owned by\n /// one task\n pub struct Receiver<T> {\n-    priv inner: Flavor<T>,\n-    priv receives: Cell<uint>,\n+    inner: Flavor<T>,\n+    receives: Cell<uint>,\n     // can't share in an arc\n-    priv marker: marker::NoShare,\n+    marker: marker::NoShare,\n }\n \n /// An iterator over messages on a receiver, this iterator will block\n /// whenever `next` is called, waiting for a new message, and `None` will be\n /// returned when the corresponding channel has hung up.\n pub struct Messages<'a, T> {\n-    priv rx: &'a Receiver<T>\n+    rx: &'a Receiver<T>\n }\n \n /// The sending-half of Rust's asynchronous channel type. This half can only be\n /// owned by one task, but it can be cloned to send to other tasks.\n pub struct Sender<T> {\n-    priv inner: Flavor<T>,\n-    priv sends: Cell<uint>,\n+    inner: Flavor<T>,\n+    sends: Cell<uint>,\n     // can't share in an arc\n-    priv marker: marker::NoShare,\n+    marker: marker::NoShare,\n }\n \n /// The sending-half of Rust's synchronous channel type. This half can only be\n /// owned by one task, but it can be cloned to send to other tasks.\n pub struct SyncSender<T> {\n-    priv inner: UnsafeArc<sync::Packet<T>>,\n+    inner: UnsafeArc<sync::Packet<T>>,\n     // can't share in an arc\n-    priv marker: marker::NoShare,\n+    marker: marker::NoShare,\n }\n \n /// This enumeration is the list of the possible reasons that try_recv could not"}, {"sha": "84191ed6b28c52475638e6f25f8d2e6ef3c61cfa", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -62,10 +62,10 @@ use uint;\n /// The \"receiver set\" of the select interface. This structure is used to manage\n /// a set of receivers which are being selected over.\n pub struct Select {\n-    priv head: *mut Handle<'static, ()>,\n-    priv tail: *mut Handle<'static, ()>,\n-    priv next_id: Cell<uint>,\n-    priv marker1: marker::NoSend,\n+    head: *mut Handle<'static, ()>,\n+    tail: *mut Handle<'static, ()>,\n+    next_id: Cell<uint>,\n+    marker1: marker::NoSend,\n }\n \n /// A handle to a receiver which is currently a member of a `Select` set of\n@@ -74,16 +74,16 @@ pub struct Select {\n pub struct Handle<'rx, T> {\n     /// The ID of this handle, used to compare against the return value of\n     /// `Select::wait()`\n-    priv id: uint,\n-    priv selector: &'rx Select,\n-    priv next: *mut Handle<'static, ()>,\n-    priv prev: *mut Handle<'static, ()>,\n-    priv added: bool,\n-    priv packet: &'rx Packet,\n+    id: uint,\n+    selector: &'rx Select,\n+    next: *mut Handle<'static, ()>,\n+    prev: *mut Handle<'static, ()>,\n+    added: bool,\n+    packet: &'rx Packet,\n \n     // due to our fun transmutes, we be sure to place this at the end. (nothing\n     // previous relies on T)\n-    priv rx: &'rx Receiver<T>,\n+    rx: &'rx Receiver<T>,\n }\n \n struct Packets { cur: *mut Handle<'static, ()> }"}, {"sha": "5f8a043b83036f15df21cd44583983f9df0728be", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -508,29 +508,29 @@ pub type Result = io::IoResult<()>;\n /// traits.\n pub struct Formatter<'a> {\n     /// Flags for formatting (packed version of rt::Flag)\n-    flags: uint,\n+    pub flags: uint,\n     /// Character used as 'fill' whenever there is alignment\n-    fill: char,\n+    pub fill: char,\n     /// Boolean indication of whether the output should be left-aligned\n-    align: parse::Alignment,\n+    pub align: parse::Alignment,\n     /// Optionally specified integer width that the output should be\n-    width: Option<uint>,\n+    pub width: Option<uint>,\n     /// Optionally specified precision for numeric types\n-    precision: Option<uint>,\n+    pub precision: Option<uint>,\n \n     /// Output buffer.\n-    buf: &'a mut io::Writer,\n-    priv curarg: slice::Items<'a, Argument<'a>>,\n-    priv args: &'a [Argument<'a>],\n+    pub buf: &'a mut io::Writer,\n+    curarg: slice::Items<'a, Argument<'a>>,\n+    args: &'a [Argument<'a>],\n }\n \n /// This struct represents the generic \"argument\" which is taken by the Xprintf\n /// family of functions. It contains a function to format the given value. At\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n pub struct Argument<'a> {\n-    priv formatter: extern \"Rust\" fn(&any::Void, &mut Formatter) -> Result,\n-    priv value: &'a any::Void,\n+    formatter: extern \"Rust\" fn(&any::Void, &mut Formatter) -> Result,\n+    value: &'a any::Void,\n }\n \n impl<'a> Arguments<'a> {\n@@ -555,8 +555,8 @@ impl<'a> Arguments<'a> {\n /// string at compile-time so usage of the `write` and `format` functions can\n /// be safely performed.\n pub struct Arguments<'a> {\n-    priv fmt: &'a [rt::Piece<'a>],\n-    priv args: &'a [Argument<'a>],\n+    fmt: &'a [rt::Piece<'a>],\n+    args: &'a [Argument<'a>],\n }\n \n /// When a format is not otherwise specified, types are formatted by ascribing"}, {"sha": "b10a9584df98f7f3dbf59e7a778f78b3be50ba47", "filename": "src/libstd/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fnum.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -108,7 +108,7 @@ radix!(UpperHex, 16, \"0x\", x @  0 .. 9 => '0' as u8 + x,\n /// A radix with in the range of `2..36`.\n #[deriving(Clone, Eq)]\n pub struct Radix {\n-    priv base: u8,\n+    base: u8,\n }\n \n impl Radix {"}, {"sha": "4752f3a75f473557133b83ffe14fb09b5bf20bf2", "filename": "src/libstd/fmt/parse.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Ffmt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Ffmt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fparse.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -37,30 +37,30 @@ pub enum Piece<'a> {\n #[deriving(Eq)]\n pub struct Argument<'a> {\n     /// Where to find this argument\n-    position: Position<'a>,\n+    pub position: Position<'a>,\n     /// How to format the argument\n-    format: FormatSpec<'a>,\n+    pub format: FormatSpec<'a>,\n     /// If not `None`, what method to invoke on the argument\n-    method: Option<~Method<'a>>\n+    pub method: Option<~Method<'a>>\n }\n \n /// Specification for the formatting of an argument in the format string.\n #[deriving(Eq)]\n pub struct FormatSpec<'a> {\n     /// Optionally specified character to fill alignment with\n-    fill: Option<char>,\n+    pub fill: Option<char>,\n     /// Optionally specified alignment\n-    align: Alignment,\n+    pub align: Alignment,\n     /// Packed version of various flags provided\n-    flags: uint,\n+    pub flags: uint,\n     /// The integer precision to use\n-    precision: Count<'a>,\n+    pub precision: Count<'a>,\n     /// The string width requested for the resulting format\n-    width: Count<'a>,\n+    pub width: Count<'a>,\n     /// The descriptor string representing the name of the format desired for\n     /// this argument, this can be empty or any number of characters, although\n     /// it is required to be one word.\n-    ty: &'a str\n+    pub ty: &'a str\n }\n \n /// Enum describing where an argument for a format can be located.\n@@ -154,9 +154,9 @@ pub enum PluralSelector {\n pub struct PluralArm<'a> {\n     /// A selector can either be specified by a keyword or with an integer\n     /// literal.\n-    selector: PluralSelector,\n+    pub selector: PluralSelector,\n     /// Array of pieces which are the format of this arm\n-    result: ~[Piece<'a>],\n+    pub result: ~[Piece<'a>],\n }\n \n /// Enum of the 5 CLDR plural keywords. There is one more, \"other\", but that\n@@ -182,9 +182,9 @@ pub enum PluralKeyword {\n #[deriving(Eq)]\n pub struct SelectArm<'a> {\n     /// String selector which guards this arm\n-    selector: &'a str,\n+    pub selector: &'a str,\n     /// Array of pieces which are the format of this arm\n-    result: ~[Piece<'a>],\n+    pub result: ~[Piece<'a>],\n }\n \n /// The parser structure for interpreting the input format string. This is\n@@ -194,11 +194,11 @@ pub struct SelectArm<'a> {\n /// This is a recursive-descent parser for the sake of simplicity, and if\n /// necessary there's probably lots of room for improvement performance-wise.\n pub struct Parser<'a> {\n-    priv input: &'a str,\n-    priv cur: str::CharOffsets<'a>,\n-    priv depth: uint,\n+    input: &'a str,\n+    cur: str::CharOffsets<'a>,\n+    depth: uint,\n     /// Error messages accumulated during parsing\n-    errors: ~[~str],\n+    pub errors: ~[~str],\n }\n \n impl<'a> Iterator<Piece<'a>> for Parser<'a> {"}, {"sha": "01c2c06c3fbadb1f2bc8bcf6c81ee86449b46a3b", "filename": "src/libstd/fmt/rt.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Frt.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -28,17 +28,17 @@ pub enum Piece<'a> {\n }\n \n pub struct Argument<'a> {\n-    position: Position,\n-    format: FormatSpec,\n-    method: Option<&'a Method<'a>>\n+    pub position: Position,\n+    pub format: FormatSpec,\n+    pub method: Option<&'a Method<'a>>\n }\n \n pub struct FormatSpec {\n-    fill: char,\n-    align: parse::Alignment,\n-    flags: uint,\n-    precision: Count,\n-    width: Count,\n+    pub fill: char,\n+    pub align: parse::Alignment,\n+    pub flags: uint,\n+    pub precision: Count,\n+    pub width: Count,\n }\n \n pub enum Count {\n@@ -60,11 +60,11 @@ pub enum PluralSelector {\n }\n \n pub struct PluralArm<'a> {\n-    selector: PluralSelector,\n-    result: &'a [Piece<'a>],\n+    pub selector: PluralSelector,\n+    pub result: &'a [Piece<'a>],\n }\n \n pub struct SelectArm<'a> {\n-    selector: &'a str,\n-    result: &'a [Piece<'a>],\n+    pub selector: &'a str,\n+    pub result: &'a [Piece<'a>],\n }"}, {"sha": "bd383218ba134cc908a34c0aa8abea4435f118a0", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -29,14 +29,14 @@ use managed;\n                   task annihilation. For now, cycles need to be broken manually by using `Rc<T>` \\\n                   with a non-owning `Weak<T>` pointer. A tracing garbage collector is planned.\"]\n pub struct Gc<T> {\n-    priv ptr: @T,\n-    priv marker: marker::NoSend,\n+    ptr: @T,\n+    marker: marker::NoSend,\n }\n \n #[cfg(test)]\n pub struct Gc<T> {\n-    priv ptr: @T,\n-    priv marker: marker::NoSend,\n+    ptr: @T,\n+    marker: marker::NoSend,\n }\n \n impl<T: 'static> Gc<T> {"}, {"sha": "d780c30d8508f1061dfc7c534d8cbe2279879ad6", "filename": "src/libstd/hash/sip.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash%2Fsip.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -36,15 +36,15 @@ use super::{Hash, Hasher};\n \n /// `SipState` computes a SipHash 2-4 hash over a stream of bytes.\n pub struct SipState {\n-    priv k0: u64,\n-    priv k1: u64,\n-    priv length: uint, // how many bytes we've processed\n-    priv v0: u64,      // hash state\n-    priv v1: u64,\n-    priv v2: u64,\n-    priv v3: u64,\n-    priv tail: [u8, ..8], // unprocessed bytes\n-    priv ntail: uint,  // how many bytes in tail are valid\n+    k0: u64,\n+    k1: u64,\n+    length: uint, // how many bytes we've processed\n+    v0: u64,      // hash state\n+    v1: u64,\n+    v2: u64,\n+    v3: u64,\n+    tail: [u8, ..8], // unprocessed bytes\n+    ntail: uint,  // how many bytes in tail are valid\n }\n \n // sadly, these macro definitions can't appear later,\n@@ -231,8 +231,8 @@ impl Default for SipState {\n /// `SipHasher` computes the SipHash algorithm from a stream of bytes.\n #[deriving(Clone)]\n pub struct SipHasher {\n-    priv k0: u64,\n-    priv k1: u64,\n+    k0: u64,\n+    k1: u64,\n }\n \n impl SipHasher {"}, {"sha": "6fe6b3c3639222d24092dddbf9908ba8068e1b5a", "filename": "src/libstd/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fintrinsics.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -53,19 +53,19 @@ pub type GlueFn = extern \"Rust\" fn(*i8);\n #[cfg(not(test))]\n pub struct TyDesc {\n     // sizeof(T)\n-    size: uint,\n+    pub size: uint,\n \n     // alignof(T)\n-    align: uint,\n+    pub align: uint,\n \n     // Called when a value of type `T` is no longer needed\n-    drop_glue: GlueFn,\n+    pub drop_glue: GlueFn,\n \n     // Called by reflection visitor to visit a value of type `T`\n-    visit_glue: GlueFn,\n+    pub visit_glue: GlueFn,\n \n     // Name corresponding to the type\n-    name: &'static str\n+    pub name: &'static str,\n }\n \n #[lang=\"opaque\"]\n@@ -454,7 +454,7 @@ extern \"rust-intrinsic\" {\n #[deriving(Eq, Hash, Show, TotalEq)]\n #[cfg(not(test))]\n pub struct TypeId {\n-    priv t: u64,\n+    t: u64,\n }\n \n #[cfg(not(test))]"}, {"sha": "4da297a25fd55cef5b616456d339005b010bb08d", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -43,10 +43,10 @@ use vec::Vec;\n /// }\n /// ```\n pub struct BufferedReader<R> {\n-    priv inner: R,\n-    priv buf: Vec<u8>,\n-    priv pos: uint,\n-    priv cap: uint,\n+    inner: R,\n+    buf: Vec<u8>,\n+    pos: uint,\n+    cap: uint,\n }\n \n impl<R: Reader> BufferedReader<R> {\n@@ -135,9 +135,9 @@ impl<R: Reader> Reader for BufferedReader<R> {\n /// writer.flush();\n /// ```\n pub struct BufferedWriter<W> {\n-    priv inner: Option<W>,\n-    priv buf: Vec<u8>,\n-    priv pos: uint\n+    inner: Option<W>,\n+    buf: Vec<u8>,\n+    pos: uint\n }\n \n impl<W: Writer> BufferedWriter<W> {\n@@ -220,7 +220,7 @@ impl<W: Writer> Drop for BufferedWriter<W> {\n ///\n /// This writer will be flushed when it is dropped.\n pub struct LineBufferedWriter<W> {\n-    priv inner: BufferedWriter<W>,\n+    inner: BufferedWriter<W>,\n }\n \n impl<W: Writer> LineBufferedWriter<W> {\n@@ -303,7 +303,7 @@ impl<W: Reader> Reader for InternalBufferedWriter<W> {\n /// }\n /// ```\n pub struct BufferedStream<S> {\n-    priv inner: BufferedReader<InternalBufferedWriter<S>>\n+    inner: BufferedReader<InternalBufferedWriter<S>>\n }\n \n impl<S: Stream> BufferedStream<S> {\n@@ -391,7 +391,7 @@ mod test {\n \n     /// A dummy reader intended at testing short-reads propagation.\n     pub struct ShortReader {\n-        priv lengths: ~[uint],\n+        lengths: ~[uint],\n     }\n \n     impl Reader for ShortReader {"}, {"sha": "06e020721358bae3aa7e5526f94ff035e8caf548", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -36,10 +36,10 @@ use slice::{bytes, CloneableVector, MutableVector, ImmutableVector};\n /// }\n /// ```\n pub struct ChanReader {\n-    priv buf: Option<~[u8]>,  // A buffer of bytes received but not consumed.\n-    priv pos: uint,           // How many of the buffered bytes have already be consumed.\n-    priv rx: Receiver<~[u8]>,   // The rx to pull data from.\n-    priv closed: bool,        // Whether the pipe this rx connects to has been closed.\n+    buf: Option<~[u8]>,  // A buffer of bytes received but not consumed.\n+    pos: uint,           // How many of the buffered bytes have already be consumed.\n+    rx: Receiver<~[u8]>,   // The rx to pull data from.\n+    closed: bool,        // Whether the pipe this rx connects to has been closed.\n }\n \n impl ChanReader {\n@@ -98,7 +98,7 @@ impl Reader for ChanReader {\n /// writer.write(\"hello, world\".as_bytes());\n /// ```\n pub struct ChanWriter {\n-    priv tx: Sender<~[u8]>,\n+    tx: Sender<~[u8]>,\n }\n \n impl ChanWriter {"}, {"sha": "a9fe3be585ccdc09471b2609cc12973036653bdb", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -38,7 +38,7 @@ use ptr::RawPtr;\n /// Any error other than `EndOfFile` that is produced by the underlying Reader\n /// is returned by the iterator and should be handled by the caller.\n pub struct Bytes<'r, T> {\n-    priv reader: &'r mut T,\n+    reader: &'r mut T,\n }\n \n impl<'r, R: Reader> Bytes<'r, R> {"}, {"sha": "b6efdfad9d3a8127cd11aaca13c2e7b6b0c49d56", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -78,9 +78,9 @@ use vec::Vec;\n /// configured at creation time, via the `FileAccess` parameter to\n /// `File::open_mode()`.\n pub struct File {\n-    priv fd: ~RtioFileStream:Send,\n-    priv path: Path,\n-    priv last_nread: int,\n+    fd: ~RtioFileStream:Send,\n+    path: Path,\n+    last_nread: int,\n }\n \n impl File {\n@@ -498,7 +498,7 @@ pub fn walk_dir(path: &Path) -> IoResult<Directories> {\n \n /// An iterator which walks over a directory\n pub struct Directories {\n-    priv stack: ~[Path],\n+    stack: ~[Path],\n }\n \n impl Iterator<Path> for Directories {"}, {"sha": "e9c6b5b01da90e40966dc6a020ed9c388841a9bf", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -52,8 +52,8 @@ fn combine(seek: SeekStyle, cur: uint, end: uint, offset: i64) -> IoResult<u64>\n /// assert_eq!(w.unwrap(), ~[0, 1, 2]);\n /// ```\n pub struct MemWriter {\n-    priv buf: ~[u8],\n-    priv pos: uint,\n+    buf: ~[u8],\n+    pos: uint,\n }\n \n impl MemWriter {\n@@ -132,8 +132,8 @@ impl Seek for MemWriter {\n /// assert_eq!(r.read_to_end().unwrap(), ~[0, 1, 2]);\n /// ```\n pub struct MemReader {\n-    priv buf: ~[u8],\n-    priv pos: uint\n+    buf: ~[u8],\n+    pos: uint\n }\n \n impl MemReader {\n@@ -219,8 +219,8 @@ impl Buffer for MemReader {\n /// assert!(buf == [0, 1, 2, 0]);\n /// ```\n pub struct BufWriter<'a> {\n-    priv buf: &'a mut [u8],\n-    priv pos: uint\n+    buf: &'a mut [u8],\n+    pos: uint\n }\n \n impl<'a> BufWriter<'a> {\n@@ -275,8 +275,8 @@ impl<'a> Seek for BufWriter<'a> {\n /// assert_eq!(r.read_to_end().unwrap(), ~[0, 1, 2, 3]);\n /// ```\n pub struct BufReader<'a> {\n-    priv buf: &'a [u8],\n-    priv pos: uint\n+    buf: &'a [u8],\n+    pos: uint\n }\n \n impl<'a> BufReader<'a> {"}, {"sha": "50f8b0b28c4c05ad1ae43c1ee0441e80c72a73e8", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -283,11 +283,11 @@ pub type IoResult<T> = Result<T, IoError>;\n pub struct IoError {\n     /// An enumeration which can be matched against for determining the flavor\n     /// of error.\n-    kind: IoErrorKind,\n+    pub kind: IoErrorKind,\n     /// A human-readable description about the error\n-    desc: &'static str,\n+    pub desc: &'static str,\n     /// Detailed information about this error, not always available\n-    detail: Option<~str>\n+    pub detail: Option<~str>\n }\n \n impl fmt::Show for IoError {\n@@ -1023,7 +1023,7 @@ impl<T: Reader + Writer> Stream for T {}\n /// Any error other than `EndOfFile` that is produced by the underlying Reader\n /// is returned by the iterator and should be handled by the caller.\n pub struct Lines<'r, T> {\n-    priv buffer: &'r mut T,\n+    buffer: &'r mut T,\n }\n \n impl<'r, T: Buffer> Iterator<IoResult<~str>> for Lines<'r, T> {\n@@ -1050,7 +1050,7 @@ impl<'r, T: Buffer> Iterator<IoResult<~str>> for Lines<'r, T> {\n /// Any error other than `EndOfFile` that is produced by the underlying Reader\n /// is returned by the iterator and should be handled by the caller.\n pub struct Chars<'r, T> {\n-    priv buffer: &'r mut T\n+    buffer: &'r mut T\n }\n \n impl<'r, T: Buffer> Iterator<IoResult<char>> for Chars<'r, T> {\n@@ -1290,7 +1290,7 @@ pub trait Acceptor<T> {\n /// connection attempt was successful.  A successful connection will be wrapped\n /// in `Ok`. A failed connection is represented as an `Err`.\n pub struct IncomingConnections<'a, A> {\n-    priv inc: &'a mut A,\n+    inc: &'a mut A,\n }\n \n impl<'a, T, A: Acceptor<T>> Iterator<IoResult<T>> for IncomingConnections<'a, A> {\n@@ -1389,27 +1389,27 @@ pub enum FileType {\n #[deriving(Hash)]\n pub struct FileStat {\n     /// The path that this stat structure is describing\n-    path: Path,\n+    pub path: Path,\n     /// The size of the file, in bytes\n-    size: u64,\n+    pub size: u64,\n     /// The kind of file this path points to (directory, file, pipe, etc.)\n-    kind: FileType,\n+    pub kind: FileType,\n     /// The file permissions currently on the file\n-    perm: FilePermission,\n+    pub perm: FilePermission,\n \n     // FIXME(#10301): These time fields are pretty useless without an actual\n     //                time representation, what are the milliseconds relative\n     //                to?\n \n     /// The time that the file was created at, in platform-dependent\n     /// milliseconds\n-    created: u64,\n+    pub created: u64,\n     /// The time that this file was last modified, in platform-dependent\n     /// milliseconds\n-    modified: u64,\n+    pub modified: u64,\n     /// The time that this file was last accessed, in platform-dependent\n     /// milliseconds\n-    accessed: u64,\n+    pub accessed: u64,\n \n     /// Information returned by stat() which is not guaranteed to be\n     /// platform-independent. This information may be useful on some platforms,\n@@ -1419,7 +1419,7 @@ pub struct FileStat {\n     /// Usage of this field is discouraged, but if access is desired then the\n     /// fields are located here.\n     #[unstable]\n-    unstable: UnstableFileStat,\n+    pub unstable: UnstableFileStat,\n }\n \n /// This structure represents all of the possible information which can be\n@@ -1430,25 +1430,25 @@ pub struct FileStat {\n #[deriving(Hash)]\n pub struct UnstableFileStat {\n     /// The ID of the device containing the file.\n-    device: u64,\n+    pub device: u64,\n     /// The file serial number.\n-    inode: u64,\n+    pub inode: u64,\n     /// The device ID.\n-    rdev: u64,\n+    pub rdev: u64,\n     /// The number of hard links to this file.\n-    nlink: u64,\n+    pub nlink: u64,\n     /// The user ID of the file.\n-    uid: u64,\n+    pub uid: u64,\n     /// The group ID of the file.\n-    gid: u64,\n+    pub gid: u64,\n     /// The optimal block size for I/O.\n-    blksize: u64,\n+    pub blksize: u64,\n     /// The blocks allocated for this file.\n-    blocks: u64,\n+    pub blocks: u64,\n     /// User-defined flags for the file.\n-    flags: u64,\n+    pub flags: u64,\n     /// The file generation number.\n-    gen: u64,\n+    pub gen: u64,\n }\n \n /// A set of permissions for a file or directory is represented by a set of"}, {"sha": "4006665e886c6a3d671db65d70648e229dc180e1", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -57,18 +57,18 @@ pub enum Protocol {\n /// For details on these fields, see their corresponding definitions via\n /// `man -s 3 getaddrinfo`\n pub struct Hint {\n-    family: uint,\n-    socktype: Option<SocketType>,\n-    protocol: Option<Protocol>,\n-    flags: uint,\n+    pub family: uint,\n+    pub socktype: Option<SocketType>,\n+    pub protocol: Option<Protocol>,\n+    pub flags: uint,\n }\n \n pub struct Info {\n-    address: SocketAddr,\n-    family: uint,\n-    socktype: Option<SocketType>,\n-    protocol: Option<Protocol>,\n-    flags: uint,\n+    pub address: SocketAddr,\n+    pub family: uint,\n+    pub socktype: Option<SocketType>,\n+    pub protocol: Option<Protocol>,\n+    pub flags: uint,\n }\n \n /// Easy name resolution. Given a hostname, returns the list of IP addresses for"}, {"sha": "10e1ffacd951b0ca47111ac20818730705280f66", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -58,8 +58,8 @@ impl fmt::Show for IpAddr {\n \n #[deriving(Eq, TotalEq, Clone, Hash)]\n pub struct SocketAddr {\n-    ip: IpAddr,\n-    port: Port,\n+    pub ip: IpAddr,\n+    pub port: Port,\n }\n \n impl fmt::Show for SocketAddr {"}, {"sha": "b4dcd204479a41c08e396ae4e86aa3774d7d9dd6", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -17,8 +17,6 @@\n //! A TCP connection implements the `Reader` and `Writer` traits, while the TCP\n //! listener (socket server) implements the `Listener` and `Acceptor` traits.\n \n-#![deny(missing_doc)]\n-\n use clone::Clone;\n use io::IoResult;\n use io::net::ip::SocketAddr;\n@@ -46,7 +44,7 @@ use rt::rtio::{RtioTcpAcceptor, RtioTcpStream};\n /// drop(stream); // close the connection\n /// ```\n pub struct TcpStream {\n-    priv obj: ~RtioTcpStream:Send\n+    obj: ~RtioTcpStream:Send\n }\n \n impl TcpStream {\n@@ -128,7 +126,7 @@ impl Writer for TcpStream {\n /// # }\n /// ```\n pub struct TcpListener {\n-    priv obj: ~RtioTcpListener:Send\n+    obj: ~RtioTcpListener:Send\n }\n \n impl TcpListener {\n@@ -161,7 +159,7 @@ impl Listener<TcpStream, TcpAcceptor> for TcpListener {\n /// a `TcpListener`'s `listen` method, and this object can be used to accept new\n /// `TcpStream` instances.\n pub struct TcpAcceptor {\n-    priv obj: ~RtioTcpAcceptor:Send\n+    obj: ~RtioTcpAcceptor:Send\n }\n \n impl Acceptor<TcpStream> for TcpAcceptor {"}, {"sha": "8dd59e859b877dddace4b86e7157df95f60c95f0", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -54,7 +54,7 @@ use rt::rtio::{RtioSocket, RtioUdpSocket, IoFactory, LocalIo};\n /// drop(socket); // close the socket\n /// ```\n pub struct UdpSocket {\n-    priv obj: ~RtioUdpSocket:Send\n+    obj: ~RtioUdpSocket:Send\n }\n \n impl UdpSocket {\n@@ -115,8 +115,8 @@ impl Clone for UdpSocket {\n /// A type that allows convenient usage of a UDP stream connected to one\n /// address via the `Reader` and `Writer` traits.\n pub struct UdpStream {\n-    priv socket: UdpSocket,\n-    priv connected_to: SocketAddr\n+    socket: UdpSocket,\n+    connected_to: SocketAddr\n }\n \n impl UdpStream {"}, {"sha": "0d64a7b141ec6c06fd521c0a405b363cef665fb5", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -36,7 +36,7 @@ use rt::rtio::{RtioUnixAcceptor, RtioPipe};\n \n /// A stream which communicates over a named pipe.\n pub struct UnixStream {\n-    priv obj: PipeStream,\n+    obj: PipeStream,\n }\n \n impl UnixStream {\n@@ -83,7 +83,7 @@ impl Writer for UnixStream {\n /// A value that can listen for incoming named pipe connection requests.\n pub struct UnixListener {\n     /// The internal, opaque runtime Unix listener.\n-    priv obj: ~RtioUnixListener:Send,\n+    obj: ~RtioUnixListener:Send,\n }\n \n impl UnixListener {\n@@ -125,7 +125,7 @@ impl Listener<UnixStream, UnixAcceptor> for UnixListener {\n /// A value that can accept named pipe connections, returned from `listen()`.\n pub struct UnixAcceptor {\n     /// The internal, opaque runtime Unix acceptor.\n-    priv obj: ~RtioUnixAcceptor:Send,\n+    obj: ~RtioUnixAcceptor:Send,\n }\n \n impl Acceptor<UnixStream> for UnixAcceptor {"}, {"sha": "75ec3d8614e8293ab150ba5c2fc2891afff7bffb", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -23,7 +23,7 @@ use rt::rtio::{RtioPipe, LocalIo};\n /// A synchronous, in-memory pipe.\n pub struct PipeStream {\n     /// The internal, opaque runtime pipe object.\n-    priv obj: ~RtioPipe:Send,\n+    obj: ~RtioPipe:Send,\n }\n \n impl PipeStream {"}, {"sha": "1f067021825dbcdb38db975a91162a29eedbd5ca", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -10,8 +10,6 @@\n \n //! Bindings for executing child processes\n \n-#![deny(missing_doc)]\n-\n use prelude::*;\n \n use fmt;\n@@ -53,23 +51,23 @@ use rt::rtio::{RtioProcess, IoFactory, LocalIo};\n /// assert!(child.wait().success());\n /// ```\n pub struct Process {\n-    priv handle: ~RtioProcess:Send,\n+    handle: ~RtioProcess:Send,\n \n     /// Handle to the child's stdin, if the `stdin` field of this process's\n     /// `ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.\n-    stdin: Option<io::PipeStream>,\n+    pub stdin: Option<io::PipeStream>,\n \n     /// Handle to the child's stdout, if the `stdout` field of this process's\n     /// `ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.\n-    stdout: Option<io::PipeStream>,\n+    pub stdout: Option<io::PipeStream>,\n \n     /// Handle to the child's stderr, if the `stderr` field of this process's\n     /// `ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.\n-    stderr: Option<io::PipeStream>,\n+    pub stderr: Option<io::PipeStream>,\n \n     /// Extra I/O handles as configured by the original `ProcessConfig` when\n     /// this process was created. This is by default empty.\n-    extra_io: ~[Option<io::PipeStream>],\n+    pub extra_io: ~[Option<io::PipeStream>],\n }\n \n /// This configuration describes how a new process should be spawned. A blank\n@@ -88,65 +86,65 @@ pub struct Process {\n /// ```\n pub struct ProcessConfig<'a> {\n     /// Path to the program to run\n-    program: &'a str,\n+    pub program: &'a str,\n \n     /// Arguments to pass to the program (doesn't include the program itself)\n-    args: &'a [~str],\n+    pub args: &'a [~str],\n \n     /// Optional environment to specify for the program. If this is None, then\n     /// it will inherit the current process's environment.\n-    env: Option<&'a [(~str, ~str)]>,\n+    pub env: Option<&'a [(~str, ~str)]>,\n \n     /// Optional working directory for the new process. If this is None, then\n     /// the current directory of the running process is inherited.\n-    cwd: Option<&'a Path>,\n+    pub cwd: Option<&'a Path>,\n \n     /// Configuration for the child process's stdin handle (file descriptor 0).\n     /// This field defaults to `CreatePipe(true, false)` so the input can be\n     /// written to.\n-    stdin: StdioContainer,\n+    pub stdin: StdioContainer,\n \n     /// Configuration for the child process's stdout handle (file descriptor 1).\n     /// This field defaults to `CreatePipe(false, true)` so the output can be\n     /// collected.\n-    stdout: StdioContainer,\n+    pub stdout: StdioContainer,\n \n     /// Configuration for the child process's stdout handle (file descriptor 2).\n     /// This field defaults to `CreatePipe(false, true)` so the output can be\n     /// collected.\n-    stderr: StdioContainer,\n+    pub stderr: StdioContainer,\n \n     /// Any number of streams/file descriptors/pipes may be attached to this\n     /// process. This list enumerates the file descriptors and such for the\n     /// process to be spawned, and the file descriptors inherited will start at\n     /// 3 and go to the length of this array. The first three file descriptors\n     /// (stdin/stdout/stderr) are configured with the `stdin`, `stdout`, and\n     /// `stderr` fields.\n-    extra_io: &'a [StdioContainer],\n+    pub extra_io: &'a [StdioContainer],\n \n     /// Sets the child process's user id. This translates to a `setuid` call in\n     /// the child process. Setting this value on windows will cause the spawn to\n     /// fail. Failure in the `setuid` call on unix will also cause the spawn to\n     /// fail.\n-    uid: Option<uint>,\n+    pub uid: Option<uint>,\n \n     /// Similar to `uid`, but sets the group id of the child process. This has\n     /// the same semantics as the `uid` field.\n-    gid: Option<uint>,\n+    pub gid: Option<uint>,\n \n     /// If true, the child process is spawned in a detached state. On unix, this\n     /// means that the child is the leader of a new process group.\n-    detach: bool,\n+    pub detach: bool,\n }\n \n /// The output of a finished process.\n pub struct ProcessOutput {\n     /// The status (exit code) of the process.\n-    status: ProcessExit,\n+    pub status: ProcessExit,\n     /// The data that the process wrote to stdout.\n-    output: ~[u8],\n+    pub output: ~[u8],\n     /// The data that the process wrote to stderr.\n-    error: ~[u8],\n+    pub error: ~[u8],\n }\n \n /// Describes what to do with a standard io stream for a child process."}, {"sha": "494cc6f6b02d4c9c7565d07567b0b4067bd775cb", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -81,15 +81,15 @@ pub enum Signum {\n /// ```\n pub struct Listener {\n     /// A map from signums to handles to keep the handles in memory\n-    priv handles: ~[(Signum, ~RtioSignal)],\n+    handles: ~[(Signum, ~RtioSignal)],\n     /// This is where all the handles send signums, which are received by\n     /// the clients from the receiver.\n-    priv tx: Sender<Signum>,\n+    tx: Sender<Signum>,\n \n     /// Clients of Listener can `recv()` on this receiver. This is exposed to\n     /// allow selection over it as well as manipulation of the receiver\n     /// directly.\n-    rx: Receiver<Signum>,\n+    pub rx: Receiver<Signum>,\n }\n \n impl Listener {"}, {"sha": "ae98333ca9614b2aa85f158977585000f045a09d", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -293,7 +293,7 @@ pub fn println_args(fmt: &fmt::Arguments) {\n \n /// Representation of a reader of a standard input stream\n pub struct StdReader {\n-    priv inner: StdSource\n+    inner: StdSource\n }\n \n impl Reader for StdReader {\n@@ -322,7 +322,7 @@ impl Reader for StdReader {\n \n /// Representation of a writer to a standard output stream\n pub struct StdWriter {\n-    priv inner: StdSource\n+    inner: StdSource\n }\n \n impl StdWriter {"}, {"sha": "4ff1c7faaece2821d8c38ee4c7f2145dfb7ad236", "filename": "src/libstd/io/tempfile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftempfile.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -24,7 +24,7 @@ use sync::atomics;\n /// A wrapper for a path to temporary directory implementing automatic\n /// scope-based deletion.\n pub struct TempDir {\n-    priv path: Option<Path>\n+    path: Option<Path>\n }\n \n impl TempDir {"}, {"sha": "839fcab8f86a4308c66d2d6f0f291b54cb1ff91f", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -63,7 +63,7 @@ use rt::rtio::{IoFactory, LocalIo, RtioTimer};\n /// # }\n /// ```\n pub struct Timer {\n-    priv obj: ~RtioTimer:Send,\n+    obj: ~RtioTimer:Send,\n }\n \n /// Sleep the current task for `msecs` milliseconds."}, {"sha": "a294ba17289ca498c377783f7eb2a8e1fde1bd15", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -17,8 +17,8 @@ use slice::bytes::MutableByteVector;\n \n /// Wraps a `Reader`, limiting the number of bytes that can be read from it.\n pub struct LimitReader<R> {\n-    priv limit: uint,\n-    priv inner: R\n+    limit: uint,\n+    inner: R\n }\n \n impl<R: Reader> LimitReader<R> {\n@@ -85,7 +85,7 @@ impl Reader for NullReader {\n \n /// A `Writer` which multiplexes writes to a set of `Writers`.\n pub struct MultiWriter {\n-    priv writers: ~[~Writer]\n+    writers: ~[~Writer]\n }\n \n impl MultiWriter {\n@@ -118,8 +118,8 @@ impl Writer for MultiWriter {\n /// A `Reader` which chains input from multiple `Readers`, reading each to\n /// completion before moving onto the next.\n pub struct ChainedReader<I, R> {\n-    priv readers: I,\n-    priv cur_reader: Option<R>,\n+    readers: I,\n+    cur_reader: Option<R>,\n }\n \n impl<R: Reader, I: Iterator<R>> ChainedReader<I, R> {\n@@ -156,8 +156,8 @@ impl<R: Reader, I: Iterator<R>> Reader for ChainedReader<I, R> {\n /// A `Reader` which forwards input from another `Reader`, passing it along to\n /// a `Writer` as well. Similar to the `tee(1)` command.\n pub struct TeeReader<R, W> {\n-    priv reader: R,\n-    priv writer: W\n+    reader: R,\n+    writer: W,\n }\n \n impl<R: Reader, W: Writer> TeeReader<R, W> {"}, {"sha": "d7424fc9f61a1eaad347b7a9b9c702d1659cd121", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -751,7 +751,7 @@ impl<A, B, T: ExactSize<A>, U: ExactSize<B>> ExactSize<(A, B)> for Zip<T, U> {}\n /// An double-ended iterator with the direction inverted\n #[deriving(Clone)]\n pub struct Rev<T> {\n-    priv iter: T\n+    iter: T\n }\n \n impl<A, T: DoubleEndedIterator<A>> Iterator<A> for Rev<T> {\n@@ -778,7 +778,7 @@ impl<A, T: DoubleEndedIterator<A> + RandomAccessIterator<A>> RandomAccessIterato\n \n /// A mutable reference to an iterator\n pub struct ByRef<'a, T> {\n-    priv iter: &'a mut T\n+    iter: &'a mut T\n }\n \n impl<'a, A, T: Iterator<A>> Iterator<A> for ByRef<'a, T> {\n@@ -1036,8 +1036,8 @@ impl<A, T: Clone + Iterator<A>> CloneableIterator for T {\n /// An iterator that repeats endlessly\n #[deriving(Clone)]\n pub struct Cycle<T> {\n-    priv orig: T,\n-    priv iter: T,\n+    orig: T,\n+    iter: T,\n }\n \n impl<A, T: Clone + Iterator<A>> Iterator<A> for Cycle<T> {\n@@ -1087,9 +1087,9 @@ impl<A, T: Clone + RandomAccessIterator<A>> RandomAccessIterator<A> for Cycle<T>\n /// An iterator which strings two iterators together\n #[deriving(Clone)]\n pub struct Chain<T, U> {\n-    priv a: T,\n-    priv b: U,\n-    priv flag: bool\n+    a: T,\n+    b: U,\n+    flag: bool\n }\n \n impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for Chain<T, U> {\n@@ -1156,8 +1156,8 @@ for Chain<T, U> {\n /// An iterator which iterates two other iterators simultaneously\n #[deriving(Clone)]\n pub struct Zip<T, U> {\n-    priv a: T,\n-    priv b: U\n+    a: T,\n+    b: U\n }\n \n impl<A, B, T: Iterator<A>, U: Iterator<B>> Iterator<(A, B)> for Zip<T, U> {\n@@ -1234,8 +1234,8 @@ RandomAccessIterator<(A, B)> for Zip<T, U> {\n \n /// An iterator which maps the values of `iter` with `f`\n pub struct Map<'a, A, B, T> {\n-    priv iter: T,\n-    priv f: 'a |A| -> B\n+    iter: T,\n+    f: 'a |A| -> B\n }\n \n impl<'a, A, B, T> Map<'a, A, B, T> {\n@@ -1283,8 +1283,8 @@ impl<'a, A, B, T: RandomAccessIterator<A>> RandomAccessIterator<B> for Map<'a, A\n \n /// An iterator which filters the elements of `iter` with `predicate`\n pub struct Filter<'a, A, T> {\n-    priv iter: T,\n-    priv predicate: 'a |&A| -> bool\n+    iter: T,\n+    predicate: 'a |&A| -> bool\n }\n \n impl<'a, A, T: Iterator<A>> Iterator<A> for Filter<'a, A, T> {\n@@ -1327,8 +1327,8 @@ impl<'a, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Filter<'a, A,\n \n /// An iterator which uses `f` to both filter and map elements from `iter`\n pub struct FilterMap<'a, A, B, T> {\n-    priv iter: T,\n-    priv f: 'a |A| -> Option<B>\n+    iter: T,\n+    f: 'a |A| -> Option<B>\n }\n \n impl<'a, A, B, T: Iterator<A>> Iterator<B> for FilterMap<'a, A, B, T> {\n@@ -1371,8 +1371,8 @@ for FilterMap<'a, A, B, T> {\n /// An iterator which yields the current count and the element during iteration\n #[deriving(Clone)]\n pub struct Enumerate<T> {\n-    priv iter: T,\n-    priv count: uint\n+    iter: T,\n+    count: uint\n }\n \n impl<A, T: Iterator<A>> Iterator<(uint, A)> for Enumerate<T> {\n@@ -1425,8 +1425,8 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<(uint, A)> for Enumerat\n \n /// An iterator with a `peek()` that returns an optional reference to the next element.\n pub struct Peekable<A, T> {\n-    priv iter: T,\n-    priv peeked: Option<A>,\n+    iter: T,\n+    peeked: Option<A>,\n }\n \n impl<A, T: Iterator<A>> Iterator<A> for Peekable<A, T> {\n@@ -1475,9 +1475,9 @@ impl<'a, A, T: Iterator<A>> Peekable<A, T> {\n \n /// An iterator which rejects elements while `predicate` is true\n pub struct SkipWhile<'a, A, T> {\n-    priv iter: T,\n-    priv flag: bool,\n-    priv predicate: 'a |&A| -> bool\n+    iter: T,\n+    flag: bool,\n+    predicate: 'a |&A| -> bool\n }\n \n impl<'a, A, T: Iterator<A>> Iterator<A> for SkipWhile<'a, A, T> {\n@@ -1513,9 +1513,9 @@ impl<'a, A, T: Iterator<A>> Iterator<A> for SkipWhile<'a, A, T> {\n \n /// An iterator which only accepts elements while `predicate` is true\n pub struct TakeWhile<'a, A, T> {\n-    priv iter: T,\n-    priv flag: bool,\n-    priv predicate: 'a |&A| -> bool\n+    iter: T,\n+    flag: bool,\n+    predicate: 'a |&A| -> bool\n }\n \n impl<'a, A, T: Iterator<A>> Iterator<A> for TakeWhile<'a, A, T> {\n@@ -1548,8 +1548,8 @@ impl<'a, A, T: Iterator<A>> Iterator<A> for TakeWhile<'a, A, T> {\n /// An iterator which skips over `n` elements of `iter`.\n #[deriving(Clone)]\n pub struct Skip<T> {\n-    priv iter: T,\n-    priv n: uint\n+    iter: T,\n+    n: uint\n }\n \n impl<A, T: Iterator<A>> Iterator<A> for Skip<T> {\n@@ -1612,8 +1612,8 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Skip<T> {\n /// An iterator which only iterates over the first `n` iterations of `iter`.\n #[deriving(Clone)]\n pub struct Take<T> {\n-    priv iter: T,\n-    priv n: uint\n+    iter: T,\n+    n: uint\n }\n \n impl<A, T: Iterator<A>> Iterator<A> for Take<T> {\n@@ -1661,11 +1661,11 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Take<T> {\n \n /// An iterator to maintain state while iterating another iterator\n pub struct Scan<'a, A, B, T, St> {\n-    priv iter: T,\n-    priv f: 'a |&mut St, A| -> Option<B>,\n+    iter: T,\n+    f: 'a |&mut St, A| -> Option<B>,\n \n     /// The current internal state to be passed to the closure next.\n-    state: St\n+    pub state: St,\n }\n \n impl<'a, A, B, T: Iterator<A>, St> Iterator<B> for Scan<'a, A, B, T, St> {\n@@ -1685,10 +1685,10 @@ impl<'a, A, B, T: Iterator<A>, St> Iterator<B> for Scan<'a, A, B, T, St> {\n /// and yields the elements of the produced iterators\n ///\n pub struct FlatMap<'a, A, T, U> {\n-    priv iter: T,\n-    priv f: 'a |A| -> U,\n-    priv frontiter: Option<U>,\n-    priv backiter: Option<U>,\n+    iter: T,\n+    f: 'a |A| -> U,\n+    frontiter: Option<U>,\n+    backiter: Option<U>,\n }\n \n impl<'a, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for FlatMap<'a, A, T, U> {\n@@ -1744,8 +1744,8 @@ impl<'a,\n /// yields `None` once.\n #[deriving(Clone)]\n pub struct Fuse<T> {\n-    priv iter: T,\n-    priv done: bool\n+    iter: T,\n+    done: bool\n }\n \n impl<A, T: Iterator<A>> Iterator<A> for Fuse<T> {\n@@ -1816,8 +1816,8 @@ impl<T> Fuse<T> {\n /// An iterator that calls a function with a reference to each\n /// element before yielding it.\n pub struct Inspect<'a, A, T> {\n-    priv iter: T,\n-    priv f: 'a |&A|\n+    iter: T,\n+    f: 'a |&A|\n }\n \n impl<'a, A, T> Inspect<'a, A, T> {\n@@ -1869,9 +1869,9 @@ for Inspect<'a, A, T> {\n \n /// An iterator which just modifies the contained state throughout iteration.\n pub struct Unfold<'a, A, St> {\n-    priv f: 'a |&mut St| -> Option<A>,\n+    f: 'a |&mut St| -> Option<A>,\n     /// Internal state that will be yielded on the next iteration\n-    state: St\n+    pub state: St,\n }\n \n impl<'a, A, St> Unfold<'a, A, St> {\n@@ -1905,9 +1905,9 @@ impl<'a, A, St> Iterator<A> for Unfold<'a, A, St> {\n #[deriving(Clone)]\n pub struct Counter<A> {\n     /// The current state the counter is at (next value to be yielded)\n-    priv state: A,\n+    state: A,\n     /// The amount that this iterator is stepping by\n-    priv step: A\n+    step: A,\n }\n \n /// Creates a new counter with the specified start/step\n@@ -1933,9 +1933,9 @@ impl<A: Add<A, A> + Clone> Iterator<A> for Counter<A> {\n /// An iterator over the range [start, stop)\n #[deriving(Clone)]\n pub struct Range<A> {\n-    priv state: A,\n-    priv stop: A,\n-    priv one: A\n+    state: A,\n+    stop: A,\n+    one: A\n }\n \n /// Return an iterator over the range [start, stop)\n@@ -2007,8 +2007,8 @@ impl<A: Int + Ord + Clone + ToPrimitive> DoubleEndedIterator<A> for Range<A> {\n /// An iterator over the range [start, stop]\n #[deriving(Clone)]\n pub struct RangeInclusive<A> {\n-    priv range: Range<A>,\n-    priv done: bool\n+    range: Range<A>,\n+    done: bool,\n }\n \n /// Return an iterator over the range [start, stop]\n@@ -2070,10 +2070,10 @@ impl<A: Sub<A, A> + Int + Ord + Clone + ToPrimitive> DoubleEndedIterator<A>\n /// An iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n #[deriving(Clone)]\n pub struct RangeStep<A> {\n-    priv state: A,\n-    priv stop: A,\n-    priv step: A,\n-    priv rev: bool\n+    state: A,\n+    stop: A,\n+    step: A,\n+    rev: bool,\n }\n \n /// Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n@@ -2102,11 +2102,11 @@ impl<A: CheckedAdd + Ord + Clone> Iterator<A> for RangeStep<A> {\n /// An iterator over the range [start, stop] by `step`. It handles overflow by stopping.\n #[deriving(Clone)]\n pub struct RangeStepInclusive<A> {\n-    priv state: A,\n-    priv stop: A,\n-    priv step: A,\n-    priv rev: bool,\n-    priv done: bool\n+    state: A,\n+    stop: A,\n+    step: A,\n+    rev: bool,\n+    done: bool,\n }\n \n /// Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.\n@@ -2137,7 +2137,7 @@ impl<A: CheckedAdd + Ord + Clone + Eq> Iterator<A> for RangeStepInclusive<A> {\n /// An iterator that repeats an element endlessly\n #[deriving(Clone)]\n pub struct Repeat<A> {\n-    priv element: A\n+    element: A\n }\n \n impl<A: Clone> Repeat<A> {"}, {"sha": "f9827d7fa59a73415b6ee4b270e70e79aedff396", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -193,7 +193,7 @@ pub mod marker {\n     /// \"interior\" mutability:\n     ///\n     /// ```\n-    /// pub struct Cell<T> { priv value: T }\n+    /// pub struct Cell<T> { value: T }\n     /// # fn main() {}\n     /// ```\n     ///"}, {"sha": "ab75031e914f7537ebeca16f58240a38d7d31d17", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -57,7 +57,9 @@\n // Don't link to std. We are std.\n #![no_std]\n \n-#![deny(missing_doc)]\n+// #![deny(missing_doc)] // NOTE: uncomment after a stage0 snap\n+#![allow(missing_doc)] // NOTE: remove after a stage0 snap\n+#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n \n // When testing libstd, bring in libuv as the I/O backend so tests can print\n // things and all of the std::io tests have an I/O interface to run on top"}, {"sha": "52e01f4dbfda9422e1774912b53f650a8fc21633", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 439, "deletions": 439, "changes": 878, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -244,25 +244,25 @@ pub mod types {\n                 pub type pthread_t = c_ulong;\n \n                 pub struct glob_t {\n-                    gl_pathc: size_t,\n-                    gl_pathv: **c_char,\n-                    gl_offs:  size_t,\n-\n-                    __unused1: *c_void,\n-                    __unused2: *c_void,\n-                    __unused3: *c_void,\n-                    __unused4: *c_void,\n-                    __unused5: *c_void,\n+                    pub gl_pathc: size_t,\n+                    pub gl_pathv: **c_char,\n+                    pub gl_offs:  size_t,\n+\n+                    pub __unused1: *c_void,\n+                    pub __unused2: *c_void,\n+                    pub __unused3: *c_void,\n+                    pub __unused4: *c_void,\n+                    pub __unused5: *c_void,\n                 }\n \n                 pub struct timeval {\n-                    tv_sec: time_t,\n-                    tv_usec: suseconds_t,\n+                    pub tv_sec: time_t,\n+                    pub tv_usec: suseconds_t,\n                 }\n \n                 pub struct timespec {\n-                    tv_sec: time_t,\n-                    tv_nsec: c_long,\n+                    pub tv_sec: time_t,\n+                    pub tv_nsec: c_long,\n                 }\n \n                 pub enum timezone {}\n@@ -277,54 +277,54 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 pub struct sockaddr {\n-                    sa_family: sa_family_t,\n-                    sa_data: [u8, ..14],\n+                    pub sa_family: sa_family_t,\n+                    pub sa_data: [u8, ..14],\n                 }\n                 pub struct sockaddr_storage {\n-                    ss_family: sa_family_t,\n-                    __ss_align: i64,\n-                    __ss_pad2: [u8, ..112],\n+                    pub ss_family: sa_family_t,\n+                    pub __ss_align: i64,\n+                    pub __ss_pad2: [u8, ..112],\n                 }\n                 pub struct sockaddr_in {\n-                    sin_family: sa_family_t,\n-                    sin_port: in_port_t,\n-                    sin_addr: in_addr,\n-                    sin_zero: [u8, ..8],\n+                    pub sin_family: sa_family_t,\n+                    pub sin_port: in_port_t,\n+                    pub sin_addr: in_addr,\n+                    pub sin_zero: [u8, ..8],\n                 }\n                 pub struct in_addr {\n-                    s_addr: in_addr_t,\n+                    pub s_addr: in_addr_t,\n                 }\n                 pub struct sockaddr_in6 {\n-                    sin6_family: sa_family_t,\n-                    sin6_port: in_port_t,\n-                    sin6_flowinfo: u32,\n-                    sin6_addr: in6_addr,\n-                    sin6_scope_id: u32,\n+                    pub sin6_family: sa_family_t,\n+                    pub sin6_port: in_port_t,\n+                    pub sin6_flowinfo: u32,\n+                    pub sin6_addr: in6_addr,\n+                    pub sin6_scope_id: u32,\n                 }\n                 pub struct in6_addr {\n-                    s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16, ..8]\n                 }\n                 pub struct ip_mreq {\n-                    imr_multiaddr: in_addr,\n-                    imr_interface: in_addr,\n+                    pub imr_multiaddr: in_addr,\n+                    pub imr_interface: in_addr,\n                 }\n                 pub struct ip6_mreq {\n-                    ipv6mr_multiaddr: in6_addr,\n-                    ipv6mr_interface: c_uint,\n+                    pub ipv6mr_multiaddr: in6_addr,\n+                    pub ipv6mr_interface: c_uint,\n                 }\n                 pub struct addrinfo {\n-                    ai_flags: c_int,\n-                    ai_family: c_int,\n-                    ai_socktype: c_int,\n-                    ai_protocol: c_int,\n-                    ai_addrlen: socklen_t,\n-                    ai_addr: *sockaddr,\n-                    ai_canonname: *c_char,\n-                    ai_next: *addrinfo\n+                    pub ai_flags: c_int,\n+                    pub ai_family: c_int,\n+                    pub ai_socktype: c_int,\n+                    pub ai_protocol: c_int,\n+                    pub ai_addrlen: socklen_t,\n+                    pub ai_addr: *sockaddr,\n+                    pub ai_canonname: *c_char,\n+                    pub ai_next: *addrinfo,\n                 }\n                 pub struct sockaddr_un {\n-                    sun_family: sa_family_t,\n-                    sun_path: [c_char, ..108]\n+                    pub sun_family: sa_family_t,\n+                    pub sun_path: [c_char, ..108]\n                 }\n             }\n         }\n@@ -395,35 +395,35 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 pub struct stat {\n-                    st_dev: dev_t,\n-                    __pad1: c_short,\n-                    st_ino: ino_t,\n-                    st_mode: mode_t,\n-                    st_nlink: nlink_t,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    st_rdev: dev_t,\n-                    __pad2: c_short,\n-                    st_size: off_t,\n-                    st_blksize: blksize_t,\n-                    st_blocks: blkcnt_t,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_long,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_long,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_long,\n-                    __unused4: c_long,\n-                    __unused5: c_long,\n+                    pub st_dev: dev_t,\n+                    pub __pad1: c_short,\n+                    pub st_ino: ino_t,\n+                    pub st_mode: mode_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: dev_t,\n+                    pub __pad2: c_short,\n+                    pub st_size: off_t,\n+                    pub st_blksize: blksize_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub __unused4: c_long,\n+                    pub __unused5: c_long,\n                 }\n \n                 pub struct utimbuf {\n-                    actime: time_t,\n-                    modtime: time_t,\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n                 }\n \n                 pub struct pthread_attr_t {\n-                    __size: [u32, ..9]\n+                    pub __size: [u32, ..9]\n                 }\n             }\n             #[cfg(target_arch = \"arm\")]\n@@ -437,34 +437,34 @@ pub mod types {\n                 pub type blkcnt_t = u32;\n \n                 pub struct stat {\n-                    st_dev: c_ulonglong,\n-                    __pad0: [c_uchar, ..4],\n-                    __st_ino: ino_t,\n-                    st_mode: c_uint,\n-                    st_nlink: c_uint,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    st_rdev: c_ulonglong,\n-                    __pad3: [c_uchar, ..4],\n-                    st_size: c_longlong,\n-                    st_blksize: blksize_t,\n-                    st_blocks: c_ulonglong,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_ulong,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_ulong,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_ulong,\n-                    st_ino: c_ulonglong\n+                    pub st_dev: c_ulonglong,\n+                    pub __pad0: [c_uchar, ..4],\n+                    pub __st_ino: ino_t,\n+                    pub st_mode: c_uint,\n+                    pub st_nlink: c_uint,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: c_ulonglong,\n+                    pub __pad3: [c_uchar, ..4],\n+                    pub st_size: c_longlong,\n+                    pub st_blksize: blksize_t,\n+                    pub st_blocks: c_ulonglong,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_ulong,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_ulong,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_ulong,\n+                    pub st_ino: c_ulonglong,\n                 }\n \n                 pub struct utimbuf {\n-                    actime: time_t,\n-                    modtime: time_t,\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n                 }\n \n                 pub struct pthread_attr_t {\n-                    __size: [u32, ..9]\n+                    pub __size: [u32, ..9]\n                 }\n             }\n             #[cfg(target_arch = \"mips\")]\n@@ -479,35 +479,35 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 pub struct stat {\n-                    st_dev: c_ulong,\n-                    st_pad1: [c_long, ..3],\n-                    st_ino: ino_t,\n-                    st_mode: mode_t,\n-                    st_nlink: nlink_t,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    st_rdev: c_ulong,\n-                    st_pad2: [c_long, ..2],\n-                    st_size: off_t,\n-                    st_pad3: c_long,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_long,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_long,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_long,\n-                    st_blksize: blksize_t,\n-                    st_blocks: blkcnt_t,\n-                    st_pad5: [c_long, ..14],\n+                    pub st_dev: c_ulong,\n+                    pub st_pad1: [c_long, ..3],\n+                    pub st_ino: ino_t,\n+                    pub st_mode: mode_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: c_ulong,\n+                    pub st_pad2: [c_long, ..2],\n+                    pub st_size: off_t,\n+                    pub st_pad3: c_long,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub st_blksize: blksize_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_pad5: [c_long, ..14],\n                 }\n \n                 pub struct utimbuf {\n-                    actime: time_t,\n-                    modtime: time_t,\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n                 }\n \n                 pub struct pthread_attr_t {\n-                    __size: [u32, ..9]\n+                    pub __size: [u32, ..9]\n                 }\n             }\n             pub mod posix08 {}\n@@ -563,33 +563,33 @@ pub mod types {\n                 pub type blksize_t = i64;\n                 pub type blkcnt_t = i64;\n                 pub struct stat {\n-                    st_dev: dev_t,\n-                    st_ino: ino_t,\n-                    st_nlink: nlink_t,\n-                    st_mode: mode_t,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    __pad0: c_int,\n-                    st_rdev: dev_t,\n-                    st_size: off_t,\n-                    st_blksize: blksize_t,\n-                    st_blocks: blkcnt_t,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_long,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_long,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_long,\n-                    __unused: [c_long, ..3],\n+                    pub st_dev: dev_t,\n+                    pub st_ino: ino_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_mode: mode_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub __pad0: c_int,\n+                    pub st_rdev: dev_t,\n+                    pub st_size: off_t,\n+                    pub st_blksize: blksize_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub __unused: [c_long, ..3],\n                 }\n \n                 pub struct utimbuf {\n-                    actime: time_t,\n-                    modtime: time_t,\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n                 }\n \n                 pub struct pthread_attr_t {\n-                    __size: [u64, ..7]\n+                    pub __size: [u64, ..7]\n                 }\n             }\n             pub mod posix08 {\n@@ -613,29 +613,29 @@ pub mod types {\n                 pub type pthread_t = uintptr_t;\n \n                 pub struct glob_t {\n-                    gl_pathc:  size_t,\n-                    __unused1: size_t,\n-                    gl_offs:   size_t,\n-                    __unused2: c_int,\n-                    gl_pathv:  **c_char,\n-\n-                    __unused3: *c_void,\n-\n-                    __unused4: *c_void,\n-                    __unused5: *c_void,\n-                    __unused6: *c_void,\n-                    __unused7: *c_void,\n-                    __unused8: *c_void,\n+                    pub gl_pathc:  size_t,\n+                    pub __unused1: size_t,\n+                    pub gl_offs:   size_t,\n+                    pub __unused2: c_int,\n+                    pub gl_pathv:  **c_char,\n+\n+                    pub __unused3: *c_void,\n+\n+                    pub __unused4: *c_void,\n+                    pub __unused5: *c_void,\n+                    pub __unused6: *c_void,\n+                    pub __unused7: *c_void,\n+                    pub __unused8: *c_void,\n                 }\n \n                 pub struct timeval {\n-                    tv_sec: time_t,\n-                    tv_usec: suseconds_t,\n+                    pub tv_sec: time_t,\n+                    pub tv_usec: suseconds_t,\n                 }\n \n                 pub struct timespec {\n-                    tv_sec: time_t,\n-                    tv_nsec: c_long,\n+                    pub tv_sec: time_t,\n+                    pub tv_nsec: c_long,\n                 }\n \n                 pub enum timezone {}\n@@ -650,60 +650,60 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 pub struct sockaddr {\n-                    sa_len: u8,\n-                    sa_family: sa_family_t,\n-                    sa_data: [u8, ..14],\n+                    pub sa_len: u8,\n+                    pub sa_family: sa_family_t,\n+                    pub sa_data: [u8, ..14],\n                 }\n                 pub struct sockaddr_storage {\n-                    ss_len: u8,\n-                    ss_family: sa_family_t,\n-                    __ss_pad1: [u8, ..6],\n-                    __ss_align: i64,\n-                    __ss_pad2: [u8, ..112],\n+                    pub ss_len: u8,\n+                    pub ss_family: sa_family_t,\n+                    pub __ss_pad1: [u8, ..6],\n+                    pub __ss_align: i64,\n+                    pub __ss_pad2: [u8, ..112],\n                 }\n                 pub struct sockaddr_in {\n-                    sin_len: u8,\n-                    sin_family: sa_family_t,\n-                    sin_port: in_port_t,\n-                    sin_addr: in_addr,\n-                    sin_zero: [u8, ..8],\n+                    pub sin_len: u8,\n+                    pub sin_family: sa_family_t,\n+                    pub sin_port: in_port_t,\n+                    pub sin_addr: in_addr,\n+                    pub sin_zero: [u8, ..8],\n                 }\n                 pub struct in_addr {\n-                    s_addr: in_addr_t,\n+                    pub s_addr: in_addr_t,\n                 }\n                 pub struct sockaddr_in6 {\n-                    sin6_len: u8,\n-                    sin6_family: sa_family_t,\n-                    sin6_port: in_port_t,\n-                    sin6_flowinfo: u32,\n-                    sin6_addr: in6_addr,\n-                    sin6_scope_id: u32,\n+                    pub sin6_len: u8,\n+                    pub sin6_family: sa_family_t,\n+                    pub sin6_port: in_port_t,\n+                    pub sin6_flowinfo: u32,\n+                    pub sin6_addr: in6_addr,\n+                    pub sin6_scope_id: u32,\n                 }\n                 pub struct in6_addr {\n-                    s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16, ..8]\n                 }\n                 pub struct ip_mreq {\n-                    imr_multiaddr: in_addr,\n-                    imr_interface: in_addr,\n+                    pub imr_multiaddr: in_addr,\n+                    pub imr_interface: in_addr,\n                 }\n                 pub struct ip6_mreq {\n-                    ipv6mr_multiaddr: in6_addr,\n-                    ipv6mr_interface: c_uint,\n+                    pub ipv6mr_multiaddr: in6_addr,\n+                    pub ipv6mr_interface: c_uint,\n                 }\n                 pub struct addrinfo {\n-                    ai_flags: c_int,\n-                    ai_family: c_int,\n-                    ai_socktype: c_int,\n-                    ai_protocol: c_int,\n-                    ai_addrlen: socklen_t,\n-                    ai_canonname: *c_char,\n-                    ai_addr: *sockaddr,\n-                    ai_next: *addrinfo\n+                    pub ai_flags: c_int,\n+                    pub ai_family: c_int,\n+                    pub ai_socktype: c_int,\n+                    pub ai_protocol: c_int,\n+                    pub ai_addrlen: socklen_t,\n+                    pub ai_canonname: *c_char,\n+                    pub ai_addr: *sockaddr,\n+                    pub ai_next: *addrinfo,\n                 }\n                 pub struct sockaddr_un {\n-                    sun_len: u8,\n-                    sun_family: sa_family_t,\n-                    sun_path: [c_char, ..104]\n+                    pub sun_len: u8,\n+                    pub sun_family: sa_family_t,\n+                    pub sun_path: [c_char, ..104]\n                 }\n             }\n         }\n@@ -759,33 +759,33 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n                 pub type fflags_t = u32;\n                 pub struct stat {\n-                    st_dev: dev_t,\n-                    st_ino: ino_t,\n-                    st_mode: mode_t,\n-                    st_nlink: nlink_t,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    st_rdev: dev_t,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_long,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_long,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_long,\n-                    st_size: off_t,\n-                    st_blocks: blkcnt_t,\n-                    st_blksize: blksize_t,\n-                    st_flags: fflags_t,\n-                    st_gen: uint32_t,\n-                    st_lspare: int32_t,\n-                    st_birthtime: time_t,\n-                    st_birthtime_nsec: c_long,\n-                    __unused: [uint8_t, ..2],\n+                    pub st_dev: dev_t,\n+                    pub st_ino: ino_t,\n+                    pub st_mode: mode_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: dev_t,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub st_size: off_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_blksize: blksize_t,\n+                    pub st_flags: fflags_t,\n+                    pub st_gen: uint32_t,\n+                    pub st_lspare: int32_t,\n+                    pub st_birthtime: time_t,\n+                    pub st_birthtime_nsec: c_long,\n+                    pub __unused: [uint8_t, ..2],\n                 }\n \n                 pub struct utimbuf {\n-                    actime: time_t,\n-                    modtime: time_t,\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n                 }\n \n                 pub type pthread_attr_t = *c_void;\n@@ -809,36 +809,36 @@ pub mod types {\n                 use libc::types::os::arch::posix88::{dev_t, ino_t};\n                 use libc::types::os::arch::posix88::mode_t;\n \n-                // Note: this is the struct called stat64 in win32. Not stat,\n+                // pub Note: this is the struct called stat64 in win32. Not stat,\n                 // nor stati64.\n                 pub struct stat {\n-                    st_dev: dev_t,\n-                    st_ino: ino_t,\n-                    st_mode: mode_t,\n-                    st_nlink: c_short,\n-                    st_uid: c_short,\n-                    st_gid: c_short,\n-                    st_rdev: dev_t,\n-                    st_size: int64,\n-                    st_atime: time64_t,\n-                    st_mtime: time64_t,\n-                    st_ctime: time64_t,\n+                    pub st_dev: dev_t,\n+                    pub st_ino: ino_t,\n+                    pub st_mode: mode_t,\n+                    pub st_nlink: c_short,\n+                    pub st_uid: c_short,\n+                    pub st_gid: c_short,\n+                    pub st_rdev: dev_t,\n+                    pub st_size: int64,\n+                    pub st_atime: time64_t,\n+                    pub st_mtime: time64_t,\n+                    pub st_ctime: time64_t,\n                 }\n \n                 // note that this is called utimbuf64 in win32\n                 pub struct utimbuf {\n-                    actime: time64_t,\n-                    modtime: time64_t,\n+                    pub actime: time64_t,\n+                    pub modtime: time64_t,\n                 }\n \n                 pub struct timeval {\n-                    tv_sec: time_t,\n-                    tv_usec: suseconds_t,\n+                    pub tv_sec: time_t,\n+                    pub tv_usec: suseconds_t,\n                 }\n \n                 pub struct timespec {\n-                    tv_sec: time_t,\n-                    tv_nsec: c_long,\n+                    pub tv_sec: time_t,\n+                    pub tv_nsec: c_long,\n                 }\n \n                 pub enum timezone {}\n@@ -853,54 +853,54 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 pub struct sockaddr {\n-                    sa_family: sa_family_t,\n-                    sa_data: [u8, ..14],\n+                    pub sa_family: sa_family_t,\n+                    pub sa_data: [u8, ..14],\n                 }\n                 pub struct sockaddr_storage {\n-                    ss_family: sa_family_t,\n-                    __ss_align: i64,\n-                    __ss_pad2: [u8, ..112],\n+                    pub ss_family: sa_family_t,\n+                    pub __ss_align: i64,\n+                    pub __ss_pad2: [u8, ..112],\n                 }\n                 pub struct sockaddr_in {\n-                    sin_family: sa_family_t,\n-                    sin_port: in_port_t,\n-                    sin_addr: in_addr,\n-                    sin_zero: [u8, ..8],\n+                    pub sin_family: sa_family_t,\n+                    pub sin_port: in_port_t,\n+                    pub sin_addr: in_addr,\n+                    pub sin_zero: [u8, ..8],\n                 }\n                 pub struct in_addr {\n-                    s_addr: in_addr_t,\n+                    pub s_addr: in_addr_t,\n                 }\n                 pub struct sockaddr_in6 {\n-                    sin6_family: sa_family_t,\n-                    sin6_port: in_port_t,\n-                    sin6_flowinfo: u32,\n-                    sin6_addr: in6_addr,\n-                    sin6_scope_id: u32,\n+                    pub sin6_family: sa_family_t,\n+                    pub sin6_port: in_port_t,\n+                    pub sin6_flowinfo: u32,\n+                    pub sin6_addr: in6_addr,\n+                    pub sin6_scope_id: u32,\n                 }\n                 pub struct in6_addr {\n-                    s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16, ..8]\n                 }\n                 pub struct ip_mreq {\n-                    imr_multiaddr: in_addr,\n-                    imr_interface: in_addr,\n+                    pub imr_multiaddr: in_addr,\n+                    pub imr_interface: in_addr,\n                 }\n                 pub struct ip6_mreq {\n-                    ipv6mr_multiaddr: in6_addr,\n-                    ipv6mr_interface: c_uint,\n+                    pub ipv6mr_multiaddr: in6_addr,\n+                    pub ipv6mr_interface: c_uint,\n                 }\n                 pub struct addrinfo {\n-                    ai_flags: c_int,\n-                    ai_family: c_int,\n-                    ai_socktype: c_int,\n-                    ai_protocol: c_int,\n-                    ai_addrlen: size_t,\n-                    ai_canonname: *c_char,\n-                    ai_addr: *sockaddr,\n-                    ai_next: *addrinfo\n+                    pub ai_flags: c_int,\n+                    pub ai_family: c_int,\n+                    pub ai_socktype: c_int,\n+                    pub ai_protocol: c_int,\n+                    pub ai_addrlen: size_t,\n+                    pub ai_canonname: *c_char,\n+                    pub ai_addr: *sockaddr,\n+                    pub ai_next: *addrinfo,\n                 }\n                 pub struct sockaddr_un {\n-                    sun_family: sa_family_t,\n-                    sun_path: [c_char, ..108]\n+                    pub sun_family: sa_family_t,\n+                    pub sun_path: [c_char, ..108]\n                 }\n             }\n         }\n@@ -1038,47 +1038,47 @@ pub mod types {\n                 pub type int64 = i64;\n \n                 pub struct STARTUPINFO {\n-                    cb: DWORD,\n-                    lpReserved: LPWSTR,\n-                    lpDesktop: LPWSTR,\n-                    lpTitle: LPWSTR,\n-                    dwX: DWORD,\n-                    dwY: DWORD,\n-                    dwXSize: DWORD,\n-                    dwYSize: DWORD,\n-                    dwXCountChars: DWORD,\n-                    dwYCountCharts: DWORD,\n-                    dwFillAttribute: DWORD,\n-                    dwFlags: DWORD,\n-                    wShowWindow: WORD,\n-                    cbReserved2: WORD,\n-                    lpReserved2: LPBYTE,\n-                    hStdInput: HANDLE,\n-                    hStdOutput: HANDLE,\n-                    hStdError: HANDLE\n+                    pub cb: DWORD,\n+                    pub lpReserved: LPWSTR,\n+                    pub lpDesktop: LPWSTR,\n+                    pub lpTitle: LPWSTR,\n+                    pub dwX: DWORD,\n+                    pub dwY: DWORD,\n+                    pub dwXSize: DWORD,\n+                    pub dwYSize: DWORD,\n+                    pub dwXCountChars: DWORD,\n+                    pub dwYCountCharts: DWORD,\n+                    pub dwFillAttribute: DWORD,\n+                    pub dwFlags: DWORD,\n+                    pub wShowWindow: WORD,\n+                    pub cbReserved2: WORD,\n+                    pub lpReserved2: LPBYTE,\n+                    pub hStdInput: HANDLE,\n+                    pub hStdOutput: HANDLE,\n+                    pub hStdError: HANDLE,\n                 }\n                 pub type LPSTARTUPINFO = *mut STARTUPINFO;\n \n                 pub struct PROCESS_INFORMATION {\n-                    hProcess: HANDLE,\n-                    hThread: HANDLE,\n-                    dwProcessId: DWORD,\n-                    dwThreadId: DWORD\n+                    pub hProcess: HANDLE,\n+                    pub hThread: HANDLE,\n+                    pub dwProcessId: DWORD,\n+                    pub dwThreadId: DWORD,\n                 }\n                 pub type LPPROCESS_INFORMATION = *mut PROCESS_INFORMATION;\n \n                 pub struct SYSTEM_INFO {\n-                    wProcessorArchitecture: WORD,\n-                    wReserved: WORD,\n-                    dwPageSize: DWORD,\n-                    lpMinimumApplicationAddress: LPVOID,\n-                    lpMaximumApplicationAddress: LPVOID,\n-                    dwActiveProcessorMask: DWORD,\n-                    dwNumberOfProcessors: DWORD,\n-                    dwProcessorType: DWORD,\n-                    dwAllocationGranularity: DWORD,\n-                    wProcessorLevel: WORD,\n-                    wProcessorRevision: WORD\n+                    pub wProcessorArchitecture: WORD,\n+                    pub wReserved: WORD,\n+                    pub dwPageSize: DWORD,\n+                    pub lpMinimumApplicationAddress: LPVOID,\n+                    pub lpMaximumApplicationAddress: LPVOID,\n+                    pub dwActiveProcessorMask: DWORD,\n+                    pub dwNumberOfProcessors: DWORD,\n+                    pub dwProcessorType: DWORD,\n+                    pub dwAllocationGranularity: DWORD,\n+                    pub wProcessorLevel: WORD,\n+                    pub wProcessorRevision: WORD,\n                 }\n                 pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n \n@@ -1101,68 +1101,68 @@ pub mod types {\n                 }\n \n                 pub struct MEMORY_BASIC_INFORMATION {\n-                    BaseAddress: LPVOID,\n-                    AllocationBase: LPVOID,\n-                    AllocationProtect: DWORD,\n-                    RegionSize: SIZE_T,\n-                    State: DWORD,\n-                    Protect: DWORD,\n-                    Type: DWORD\n+                    pub BaseAddress: LPVOID,\n+                    pub AllocationBase: LPVOID,\n+                    pub AllocationProtect: DWORD,\n+                    pub RegionSize: SIZE_T,\n+                    pub State: DWORD,\n+                    pub Protect: DWORD,\n+                    pub Type: DWORD,\n                 }\n                 pub type LPMEMORY_BASIC_INFORMATION = *mut MEMORY_BASIC_INFORMATION;\n \n                 pub struct OVERLAPPED {\n-                    Internal: *c_ulong,\n-                    InternalHigh: *c_ulong,\n-                    Offset: DWORD,\n-                    OffsetHigh: DWORD,\n-                    hEvent: HANDLE,\n+                    pub Internal: *c_ulong,\n+                    pub InternalHigh: *c_ulong,\n+                    pub Offset: DWORD,\n+                    pub OffsetHigh: DWORD,\n+                    pub hEvent: HANDLE,\n                 }\n \n                 pub type LPOVERLAPPED = *mut OVERLAPPED;\n \n                 pub struct FILETIME {\n-                    dwLowDateTime: DWORD,\n-                    dwHighDateTime: DWORD,\n+                    pub dwLowDateTime: DWORD,\n+                    pub dwHighDateTime: DWORD,\n                 }\n \n                 pub type LPFILETIME = *mut FILETIME;\n \n                 pub struct GUID {\n-                    Data1: DWORD,\n-                    Data2: DWORD,\n-                    Data3: DWORD,\n-                    Data4: [BYTE, ..8],\n+                    pub Data1: DWORD,\n+                    pub Data2: DWORD,\n+                    pub Data3: DWORD,\n+                    pub Data4: [BYTE, ..8],\n                 }\n \n                 pub struct WSAPROTOCOLCHAIN {\n-                    ChainLen: c_int,\n-                    ChainEntries: [DWORD, ..MAX_PROTOCOL_CHAIN],\n+                    pub ChainLen: c_int,\n+                    pub ChainEntries: [DWORD, ..MAX_PROTOCOL_CHAIN],\n                 }\n \n                 pub type LPWSAPROTOCOLCHAIN = *mut WSAPROTOCOLCHAIN;\n \n                 pub struct WSAPROTOCOL_INFO {\n-                    dwServiceFlags1: DWORD,\n-                    dwServiceFlags2: DWORD,\n-                    dwServiceFlags3: DWORD,\n-                    dwServiceFlags4: DWORD,\n-                    dwProviderFlags: DWORD,\n-                    ProviderId: GUID,\n-                    dwCatalogEntryId: DWORD,\n-                    ProtocolChain: WSAPROTOCOLCHAIN,\n-                    iVersion: c_int,\n-                    iAddressFamily: c_int,\n-                    iMaxSockAddr: c_int,\n-                    iMinSockAddr: c_int,\n-                    iSocketType: c_int,\n-                    iProtocol: c_int,\n-                    iProtocolMaxOffset: c_int,\n-                    iNetworkByteOrder: c_int,\n-                    iSecurityScheme: c_int,\n-                    dwMessageSize: DWORD,\n-                    dwProviderReserved: DWORD,\n-                    szProtocol: [u8, ..WSAPROTOCOL_LEN+1],\n+                    pub dwServiceFlags1: DWORD,\n+                    pub dwServiceFlags2: DWORD,\n+                    pub dwServiceFlags3: DWORD,\n+                    pub dwServiceFlags4: DWORD,\n+                    pub dwProviderFlags: DWORD,\n+                    pub ProviderId: GUID,\n+                    pub dwCatalogEntryId: DWORD,\n+                    pub ProtocolChain: WSAPROTOCOLCHAIN,\n+                    pub iVersion: c_int,\n+                    pub iAddressFamily: c_int,\n+                    pub iMaxSockAddr: c_int,\n+                    pub iMinSockAddr: c_int,\n+                    pub iSocketType: c_int,\n+                    pub iProtocol: c_int,\n+                    pub iProtocolMaxOffset: c_int,\n+                    pub iNetworkByteOrder: c_int,\n+                    pub iSecurityScheme: c_int,\n+                    pub dwMessageSize: DWORD,\n+                    pub dwProviderReserved: DWORD,\n+                    pub szProtocol: [u8, ..WSAPROTOCOL_LEN+1],\n                 }\n \n                 pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;\n@@ -1184,29 +1184,29 @@ pub mod types {\n                 pub type pthread_t = uintptr_t;\n \n                 pub struct glob_t {\n-                    gl_pathc:  size_t,\n-                    __unused1: c_int,\n-                    gl_offs:   size_t,\n-                    __unused2: c_int,\n-                    gl_pathv:  **c_char,\n-\n-                    __unused3: *c_void,\n-\n-                    __unused4: *c_void,\n-                    __unused5: *c_void,\n-                    __unused6: *c_void,\n-                    __unused7: *c_void,\n-                    __unused8: *c_void,\n+                    pub gl_pathc:  size_t,\n+                    pub __unused1: c_int,\n+                    pub gl_offs:   size_t,\n+                    pub __unused2: c_int,\n+                    pub gl_pathv:  **c_char,\n+\n+                    pub __unused3: *c_void,\n+\n+                    pub __unused4: *c_void,\n+                    pub __unused5: *c_void,\n+                    pub __unused6: *c_void,\n+                    pub __unused7: *c_void,\n+                    pub __unused8: *c_void,\n                 }\n \n                 pub struct timeval {\n-                    tv_sec: time_t,\n-                    tv_usec: suseconds_t,\n+                    pub tv_sec: time_t,\n+                    pub tv_usec: suseconds_t,\n                 }\n \n                 pub struct timespec {\n-                    tv_sec: time_t,\n-                    tv_nsec: c_long,\n+                    pub tv_sec: time_t,\n+                    pub tv_nsec: c_long,\n                 }\n \n                 pub enum timezone {}\n@@ -1222,60 +1222,60 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 pub struct sockaddr {\n-                    sa_len: u8,\n-                    sa_family: sa_family_t,\n-                    sa_data: [u8, ..14],\n+                    pub sa_len: u8,\n+                    pub sa_family: sa_family_t,\n+                    pub sa_data: [u8, ..14],\n                 }\n                 pub struct sockaddr_storage {\n-                    ss_len: u8,\n-                    ss_family: sa_family_t,\n-                    __ss_pad1: [u8, ..6],\n-                    __ss_align: i64,\n-                    __ss_pad2: [u8, ..112],\n+                    pub ss_len: u8,\n+                    pub ss_family: sa_family_t,\n+                    pub __ss_pad1: [u8, ..6],\n+                    pub __ss_align: i64,\n+                    pub __ss_pad2: [u8, ..112],\n                 }\n                 pub struct sockaddr_in {\n-                    sin_len: u8,\n-                    sin_family: sa_family_t,\n-                    sin_port: in_port_t,\n-                    sin_addr: in_addr,\n-                    sin_zero: [u8, ..8],\n+                    pub sin_len: u8,\n+                    pub sin_family: sa_family_t,\n+                    pub sin_port: in_port_t,\n+                    pub sin_addr: in_addr,\n+                    pub sin_zero: [u8, ..8],\n                 }\n                 pub struct in_addr {\n-                    s_addr: in_addr_t,\n+                    pub s_addr: in_addr_t,\n                 }\n                 pub struct sockaddr_in6 {\n-                    sin6_len: u8,\n-                    sin6_family: sa_family_t,\n-                    sin6_port: in_port_t,\n-                    sin6_flowinfo: u32,\n-                    sin6_addr: in6_addr,\n-                    sin6_scope_id: u32,\n+                    pub sin6_len: u8,\n+                    pub sin6_family: sa_family_t,\n+                    pub sin6_port: in_port_t,\n+                    pub sin6_flowinfo: u32,\n+                    pub sin6_addr: in6_addr,\n+                    pub sin6_scope_id: u32,\n                 }\n                 pub struct in6_addr {\n-                    s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16, ..8]\n                 }\n                 pub struct ip_mreq {\n-                    imr_multiaddr: in_addr,\n-                    imr_interface: in_addr,\n+                    pub imr_multiaddr: in_addr,\n+                    pub imr_interface: in_addr,\n                 }\n                 pub struct ip6_mreq {\n-                    ipv6mr_multiaddr: in6_addr,\n-                    ipv6mr_interface: c_uint,\n+                    pub ipv6mr_multiaddr: in6_addr,\n+                    pub ipv6mr_interface: c_uint,\n                 }\n                 pub struct addrinfo {\n-                    ai_flags: c_int,\n-                    ai_family: c_int,\n-                    ai_socktype: c_int,\n-                    ai_protocol: c_int,\n-                    ai_addrlen: socklen_t,\n-                    ai_canonname: *c_char,\n-                    ai_addr: *sockaddr,\n-                    ai_next: *addrinfo\n+                    pub ai_flags: c_int,\n+                    pub ai_family: c_int,\n+                    pub ai_socktype: c_int,\n+                    pub ai_protocol: c_int,\n+                    pub ai_addrlen: socklen_t,\n+                    pub ai_canonname: *c_char,\n+                    pub ai_addr: *sockaddr,\n+                    pub ai_next: *addrinfo,\n                 }\n                 pub struct sockaddr_un {\n-                    sun_len: u8,\n-                    sun_family: sa_family_t,\n-                    sun_path: [c_char, ..104]\n+                    pub sun_len: u8,\n+                    pub sun_family: sa_family_t,\n+                    pub sun_path: [c_char, ..104]\n                 }\n             }\n         }\n@@ -1330,38 +1330,38 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 pub struct stat {\n-                    st_dev: dev_t,\n-                    st_mode: mode_t,\n-                    st_nlink: nlink_t,\n-                    st_ino: ino_t,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    st_rdev: dev_t,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_long,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_long,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_long,\n-                    st_birthtime: time_t,\n-                    st_birthtime_nsec: c_long,\n-                    st_size: off_t,\n-                    st_blocks: blkcnt_t,\n-                    st_blksize: blksize_t,\n-                    st_flags: uint32_t,\n-                    st_gen: uint32_t,\n-                    st_lspare: int32_t,\n-                    st_qspare: [int64_t, ..2],\n+                    pub st_dev: dev_t,\n+                    pub st_mode: mode_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_ino: ino_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: dev_t,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub st_birthtime: time_t,\n+                    pub st_birthtime_nsec: c_long,\n+                    pub st_size: off_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_blksize: blksize_t,\n+                    pub st_flags: uint32_t,\n+                    pub st_gen: uint32_t,\n+                    pub st_lspare: int32_t,\n+                    pub st_qspare: [int64_t, ..2],\n                 }\n \n                 pub struct utimbuf {\n-                    actime: time_t,\n-                    modtime: time_t,\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n                 }\n \n                 pub struct pthread_attr_t {\n-                    __sig: c_long,\n-                    __opaque: [c_char, ..36]\n+                    pub __sig: c_long,\n+                    pub __opaque: [c_char, ..36]\n                 }\n             }\n             pub mod posix08 {\n@@ -1370,8 +1370,8 @@ pub mod types {\n             }\n             pub mod extra {\n                 pub struct mach_timebase_info {\n-                    numer: u32,\n-                    denom: u32,\n+                    pub numer: u32,\n+                    pub denom: u32,\n                 }\n \n                 pub type mach_timebase_info_data_t = mach_timebase_info;\n@@ -1428,38 +1428,38 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 pub struct stat {\n-                    st_dev: dev_t,\n-                    st_mode: mode_t,\n-                    st_nlink: nlink_t,\n-                    st_ino: ino_t,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    st_rdev: dev_t,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_long,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_long,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_long,\n-                    st_birthtime: time_t,\n-                    st_birthtime_nsec: c_long,\n-                    st_size: off_t,\n-                    st_blocks: blkcnt_t,\n-                    st_blksize: blksize_t,\n-                    st_flags: uint32_t,\n-                    st_gen: uint32_t,\n-                    st_lspare: int32_t,\n-                    st_qspare: [int64_t, ..2],\n+                    pub st_dev: dev_t,\n+                    pub st_mode: mode_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_ino: ino_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: dev_t,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub st_birthtime: time_t,\n+                    pub st_birthtime_nsec: c_long,\n+                    pub st_size: off_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_blksize: blksize_t,\n+                    pub st_flags: uint32_t,\n+                    pub st_gen: uint32_t,\n+                    pub st_lspare: int32_t,\n+                    pub st_qspare: [int64_t, ..2],\n                 }\n \n                 pub struct utimbuf {\n-                    actime: time_t,\n-                    modtime: time_t,\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n                 }\n \n                 pub struct pthread_attr_t {\n-                    __sig: c_long,\n-                    __opaque: [c_char, ..56]\n+                    pub __sig: c_long,\n+                    pub __opaque: [c_char, ..56]\n                 }\n             }\n             pub mod posix08 {\n@@ -1468,8 +1468,8 @@ pub mod types {\n             }\n             pub mod extra {\n                 pub struct mach_timebase_info {\n-                    numer: u32,\n-                    denom: u32,\n+                    pub numer: u32,\n+                    pub denom: u32,\n                 }\n \n                 pub type mach_timebase_info_data_t = mach_timebase_info;"}, {"sha": "be1c87ba7886ccb2e96264ae60cce78855ec1046", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -535,7 +535,7 @@ impl<T> Default for Option<T> {\n /// methods on `Option`.\n #[deriving(Clone)]\n pub struct Item<A> {\n-    priv opt: Option<A>\n+    opt: Option<A>\n }\n \n impl<A> Iterator<A> for Item<A> {"}, {"sha": "5485aaec08567c9ade59d81d3460a81c9840fcc3", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -370,10 +370,10 @@ pub fn unsetenv(n: &str) {\n pub struct Pipe {\n     /// A file descriptor representing the reading end of the pipe. Data written\n     /// on the `out` file descriptor can be read from this file descriptor.\n-    input: c_int,\n+    pub input: c_int,\n     /// A file descriptor representing the write end of the pipe. Data written\n     /// to this file descriptor can be read from the `input` file descriptor.\n-    out: c_int,\n+    pub out: c_int,\n }\n \n /// Creates a new low-level OS in-memory pipe.\n@@ -946,11 +946,11 @@ pub fn page_size() -> uint {\n /// let it leave scope by accident if you want it to stick around.\n pub struct MemoryMap {\n     /// Pointer to the memory created or modified by this map.\n-    data: *mut u8,\n+    pub data: *mut u8,\n     /// Number of bytes this map applies to\n-    len: uint,\n+    pub len: uint,\n     /// Type of mapping\n-    kind: MemoryMapKind\n+    pub kind: MemoryMapKind,\n }\n \n /// Type of memory map"}, {"sha": "a0097469e56a23c7257f5da23126b285c8c8df3d", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -488,8 +488,8 @@ pub trait GenericPathUnsafe {\n \n /// Helper struct for printing paths with format!()\n pub struct Display<'a, P> {\n-    priv path: &'a P,\n-    priv filename: bool\n+    path: &'a P,\n+    filename: bool\n }\n \n impl<'a, P: GenericPath> fmt::Show for Display<'a, P> {"}, {"sha": "098b3edb69d0d0a76db88ab3127900082ba59d88", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -40,8 +40,8 @@ pub type RevStrComponents<'a> = Map<'a, &'a [u8], Option<&'a str>,\n /// Represents a POSIX file path\n #[deriving(Clone)]\n pub struct Path {\n-    priv repr: ~[u8], // assumed to never be empty or contain NULs\n-    priv sepidx: Option<uint> // index of the final separator in repr\n+    repr: ~[u8], // assumed to never be empty or contain NULs\n+    sepidx: Option<uint> // index of the final separator in repr\n }\n \n /// The standard path separator character"}, {"sha": "ca9b351210d949f7a61665bb18204590c67c14a6", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -81,9 +81,9 @@ pub type RevComponents<'a> = Map<'a, Option<&'a str>, &'a [u8],\n // preserved by the data structure; let the Windows API error out on them.\n #[deriving(Clone)]\n pub struct Path {\n-    priv repr: ~str, // assumed to never be empty\n-    priv prefix: Option<PathPrefix>,\n-    priv sepidx: Option<uint> // index of the final separator in the non-prefix portion of repr\n+    repr: ~str, // assumed to never be empty\n+    prefix: Option<PathPrefix>,\n+    sepidx: Option<uint> // index of the final separator in the non-prefix portion of repr\n }\n \n impl Eq for Path {"}, {"sha": "b285b42ee5ec21da3acc52a9414971d14dee55ed", "filename": "src/libstd/raw.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fraw.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -21,48 +21,48 @@ use cast;\n \n /// The representation of a Rust managed box\n pub struct Box<T> {\n-    ref_count: uint,\n-    drop_glue: fn(ptr: *mut u8),\n-    prev: *mut Box<T>,\n-    next: *mut Box<T>,\n-    data: T\n+    pub ref_count: uint,\n+    pub drop_glue: fn(ptr: *mut u8),\n+    pub prev: *mut Box<T>,\n+    pub next: *mut Box<T>,\n+    pub data: T,\n }\n \n /// The representation of a Rust vector\n pub struct Vec<T> {\n-    fill: uint,\n-    alloc: uint,\n-    data: T\n+    pub fill: uint,\n+    pub alloc: uint,\n+    pub data: T,\n }\n \n /// The representation of a Rust string\n pub type String = Vec<u8>;\n \n /// The representation of a Rust slice\n pub struct Slice<T> {\n-    data: *T,\n-    len: uint\n+    pub data: *T,\n+    pub len: uint,\n }\n \n /// The representation of a Rust closure\n pub struct Closure {\n-    code: *(),\n-    env: *(),\n+    pub code: *(),\n+    pub env: *(),\n }\n \n /// The representation of a Rust procedure (`proc()`)\n pub struct Procedure {\n-    code: *(),\n-    env: *(),\n+    pub code: *(),\n+    pub env: *(),\n }\n \n /// The representation of a Rust trait object.\n ///\n /// This struct does not have a `Repr` implementation\n /// because there is no way to refer to all trait objects generically.\n pub struct TraitObject {\n-    vtable: *(),\n-    data: *(),\n+    pub vtable: *(),\n+    pub data: *(),\n }\n \n /// This trait is meant to map equivalences between raw structs and their"}, {"sha": "ff6e494b948c60dfd045568c075e1e2374d733c1", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -43,9 +43,9 @@ struct RcBox<T> {\n /// Immutable reference counted pointer type\n #[unsafe_no_drop_flag]\n pub struct Rc<T> {\n-    priv ptr: *mut RcBox<T>,\n-    priv nosend: marker::NoSend,\n-    priv noshare: marker::NoShare\n+    ptr: *mut RcBox<T>,\n+    nosend: marker::NoSend,\n+    noshare: marker::NoShare\n }\n \n impl<T> Rc<T> {\n@@ -151,9 +151,9 @@ impl<T: TotalOrd> TotalOrd for Rc<T> {\n /// Weak reference to a reference-counted box\n #[unsafe_no_drop_flag]\n pub struct Weak<T> {\n-    priv ptr: *mut RcBox<T>,\n-    priv nosend: marker::NoSend,\n-    priv noshare: marker::NoShare\n+    ptr: *mut RcBox<T>,\n+    nosend: marker::NoSend,\n+    noshare: marker::NoShare\n }\n \n impl<T> Weak<T> {"}, {"sha": "997b65c2e1f9274ebbfe0d0fddc49503a67c81cf", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -40,7 +40,7 @@ pub fn align(size: uint, align: uint) -> uint {\n \n /// Adaptor to wrap around visitors implementing MovePtr.\n pub struct MovePtrAdaptor<V> {\n-    priv inner: V\n+    inner: V\n }\n pub fn MovePtrAdaptor<V:TyVisitor + MovePtr>(v: V) -> MovePtrAdaptor<V> {\n     MovePtrAdaptor { inner: v }"}, {"sha": "9d1d406e803b7752566b1b00b96d1744715abc91", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -101,11 +101,11 @@ enum VariantState {\n }\n \n pub struct ReprVisitor<'a> {\n-    priv ptr: *u8,\n-    priv ptr_stk: ~[*u8],\n-    priv var_stk: ~[VariantState],\n-    priv writer: &'a mut io::Writer,\n-    priv last_err: Option<io::IoError>,\n+    ptr: *u8,\n+    ptr_stk: ~[*u8],\n+    var_stk: ~[VariantState],\n+    writer: &'a mut io::Writer,\n+    last_err: Option<io::IoError>,\n }\n \n pub fn ReprVisitor<'a>(ptr: *u8,"}, {"sha": "4fd610d7423602141e35cbc305111c1afc7c2380", "filename": "src/libstd/rt/libunwind.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flibunwind.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -17,8 +17,7 @@ use libc;\n \n #[cfg(not(target_arch = \"arm\"))]\n #[repr(C)]\n-pub enum _Unwind_Action\n-{\n+pub enum _Unwind_Action {\n     _UA_SEARCH_PHASE = 1,\n     _UA_CLEANUP_PHASE = 2,\n     _UA_HANDLER_FRAME = 4,\n@@ -28,14 +27,13 @@ pub enum _Unwind_Action\n \n #[cfg(target_arch = \"arm\")]\n #[repr(C)]\n-pub enum _Unwind_State\n-{\n-  _US_VIRTUAL_UNWIND_FRAME = 0,\n-  _US_UNWIND_FRAME_STARTING = 1,\n-  _US_UNWIND_FRAME_RESUME = 2,\n-  _US_ACTION_MASK = 3,\n-  _US_FORCE_UNWIND = 8,\n-  _US_END_OF_STACK = 16\n+pub enum _Unwind_State {\n+    _US_VIRTUAL_UNWIND_FRAME = 0,\n+    _US_UNWIND_FRAME_STARTING = 1,\n+    _US_UNWIND_FRAME_RESUME = 2,\n+    _US_ACTION_MASK = 3,\n+    _US_FORCE_UNWIND = 8,\n+    _US_END_OF_STACK = 16\n }\n \n #[repr(C)]\n@@ -69,9 +67,9 @@ pub static unwinder_private_data_size: int = 20;\n pub static unwinder_private_data_size: int = 2;\n \n pub struct _Unwind_Exception {\n-    exception_class: _Unwind_Exception_Class,\n-    exception_cleanup: _Unwind_Exception_Cleanup_Fn,\n-    private: [_Unwind_Word, ..unwinder_private_data_size],\n+    pub exception_class: _Unwind_Exception_Class,\n+    pub exception_cleanup: _Unwind_Exception_Cleanup_Fn,\n+    pub private: [_Unwind_Word, ..unwinder_private_data_size],\n }\n \n pub enum _Unwind_Context {}"}, {"sha": "163e69f96867563edbfaaac54c580fc334fcadea", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -33,14 +33,14 @@ static MAGIC: u32 = 0xbadc0ffe;\n pub type Box = raw::Box<()>;\n \n pub struct MemoryRegion {\n-    priv allocations: Vec<*AllocHeader>,\n-    priv live_allocations: uint,\n+    allocations: Vec<*AllocHeader>,\n+    live_allocations: uint,\n }\n \n pub struct LocalHeap {\n-    priv memory_region: MemoryRegion,\n+    memory_region: MemoryRegion,\n \n-    priv live_allocs: *mut raw::Box<()>,\n+    live_allocs: *mut raw::Box<()>,\n }\n \n impl LocalHeap {"}, {"sha": "e486932ac3c374faad58eba083f56fbeac69b808", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -31,7 +31,7 @@ pub use self::compiled::*;\n /// Encapsulates a borrowed value. When this value goes out of scope, the\n /// pointer is returned.\n pub struct Borrowed<T> {\n-    priv val: *(),\n+    val: *(),\n }\n \n #[unsafe_destructor]"}, {"sha": "54708d19a1b4fdff06ac2edec71dece59a9e40f7", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -61,11 +61,11 @@ pub trait RemoteCallback {\n /// libuv (it does translation to windows under the hood).\n pub struct FileOpenConfig {\n     /// Path to file to be opened\n-    path: Path,\n+    pub path: Path,\n     /// Flags for file access mode (as per open(2))\n-    flags: int,\n+    pub flags: int,\n     /// File creation mode, ignored unless O_CREAT is passed as part of flags\n-    priv mode: int\n+    pub mode: int\n }\n \n /// Description of what to do when a file handle is closed\n@@ -83,7 +83,7 @@ pub enum CloseBehavior {\n }\n \n pub struct LocalIo<'a> {\n-    priv factory: &'a mut IoFactory,\n+    factory: &'a mut IoFactory,\n }\n \n #[unsafe_destructor]"}, {"sha": "d9700ea998018868917e99a2cac19b8790275e34", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -43,18 +43,18 @@ use unstable::finally::Finally;\n /// in the struct. This contains a pointer to another struct that holds\n /// the type-specific state.\n pub struct Task {\n-    heap: LocalHeap,\n-    gc: GarbageCollector,\n-    storage: LocalStorage,\n-    unwinder: Unwinder,\n-    death: Death,\n-    destroyed: bool,\n-    name: Option<SendStr>,\n-\n-    stdout: Option<~Writer:Send>,\n-    stderr: Option<~Writer:Send>,\n-\n-    priv imp: Option<~Runtime:Send>,\n+    pub heap: LocalHeap,\n+    pub gc: GarbageCollector,\n+    pub storage: LocalStorage,\n+    pub unwinder: Unwinder,\n+    pub death: Death,\n+    pub destroyed: bool,\n+    pub name: Option<SendStr>,\n+\n+    pub stdout: Option<~Writer:Send>,\n+    pub stderr: Option<~Writer:Send>,\n+\n+    imp: Option<~Runtime:Send>,\n }\n \n pub struct GarbageCollector;\n@@ -77,11 +77,11 @@ pub enum DeathAction {\n \n /// Per-task state related to task death, killing, failure, etc.\n pub struct Death {\n-    on_exit: Option<DeathAction>,\n+    pub on_exit: Option<DeathAction>,\n }\n \n pub struct BlockedTasks {\n-    priv inner: UnsafeArc<AtomicUint>,\n+    inner: UnsafeArc<AtomicUint>,\n }\n \n impl Task {"}, {"sha": "c35ffac064cfd8e1378434937189cac219c0e1f2", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -28,9 +28,9 @@ type StartFn = extern \"C\" fn(*libc::c_void) -> imp::rust_thread_return;\n /// This struct represents a native thread's state. This is used to join on an\n /// existing thread created in the join-able state.\n pub struct Thread<T> {\n-    priv native: imp::rust_thread,\n-    priv joined: bool,\n-    priv packet: ~Option<T>,\n+    native: imp::rust_thread,\n+    joined: bool,\n+    packet: ~Option<T>,\n }\n \n static DEFAULT_STACK_SIZE: uint = 1024 * 1024;"}, {"sha": "68d63949ae6015013294e34a34ccab20cb3e2eba", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -75,8 +75,8 @@ use intrinsics;\n use uw = rt::libunwind;\n \n pub struct Unwinder {\n-    priv unwinding: bool,\n-    priv cause: Option<~Any:Send>\n+    unwinding: bool,\n+    cause: Option<~Any:Send>\n }\n \n impl Unwinder {"}, {"sha": "bb6cb7a3e25d15bcd1202e2d1394860537cd9672", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -233,10 +233,10 @@ pub fn mut_ref_slice<'a, A>(s: &'a mut A) -> &'a mut [A] {\n /// An iterator over the slices of a vector separated by elements that\n /// match a predicate function.\n pub struct Splits<'a, T> {\n-    priv v: &'a [T],\n-    priv n: uint,\n-    priv pred: 'a |t: &T| -> bool,\n-    priv finished: bool\n+    v: &'a [T],\n+    n: uint,\n+    pred: 'a |t: &T| -> bool,\n+    finished: bool\n }\n \n impl<'a, T> Iterator<&'a [T]> for Splits<'a, T> {\n@@ -282,10 +282,10 @@ impl<'a, T> Iterator<&'a [T]> for Splits<'a, T> {\n /// An iterator over the slices of a vector separated by elements that\n /// match a predicate function, from back to front.\n pub struct RevSplits<'a, T> {\n-    priv v: &'a [T],\n-    priv n: uint,\n-    priv pred: 'a |t: &T| -> bool,\n-    priv finished: bool\n+    v: &'a [T],\n+    n: uint,\n+    pred: 'a |t: &T| -> bool,\n+    finished: bool\n }\n \n impl<'a, T> Iterator<&'a [T]> for RevSplits<'a, T> {\n@@ -411,9 +411,9 @@ pub fn unzip<T, U, V: Iterator<(T, U)>>(mut iter: V) -> (~[T], ~[U]) {\n /// The last generated swap is always (0, 1), and it returns the\n /// sequence to its initial order.\n pub struct ElementSwaps {\n-    priv sdir: ~[SizeDirection],\n+    sdir: ~[SizeDirection],\n     /// If true, emit the last swap that returns the sequence to initial state\n-    priv emit_reset: bool,\n+    emit_reset: bool,\n }\n \n impl ElementSwaps {\n@@ -486,8 +486,8 @@ impl Iterator<(uint, uint)> for ElementSwaps {\n ///\n /// Generates even and odd permutations alternately.\n pub struct Permutations<T> {\n-    priv swaps: ElementSwaps,\n-    priv v: ~[T],\n+    swaps: ElementSwaps,\n+    v: ~[T],\n }\n \n impl<T: Clone> Iterator<~[T]> for Permutations<T> {\n@@ -508,8 +508,8 @@ impl<T: Clone> Iterator<~[T]> for Permutations<T> {\n /// a vector.\n #[deriving(Clone)]\n pub struct Windows<'a, T> {\n-    priv v: &'a [T],\n-    priv size: uint\n+    v: &'a [T],\n+    size: uint\n }\n \n impl<'a, T> Iterator<&'a [T]> for Windows<'a, T> {\n@@ -542,8 +542,8 @@ impl<'a, T> Iterator<&'a [T]> for Windows<'a, T> {\n /// the last slice of the iteration will be the remainder.\n #[deriving(Clone)]\n pub struct Chunks<'a, T> {\n-    priv v: &'a [T],\n-    priv size: uint\n+    v: &'a [T],\n+    size: uint\n }\n \n impl<'a, T> Iterator<&'a [T]> for Chunks<'a, T> {\n@@ -2632,17 +2632,17 @@ impl<A> Default for ~[A] {\n \n /// Immutable slice iterator\n pub struct Items<'a, T> {\n-    priv ptr: *T,\n-    priv end: *T,\n-    priv marker: marker::ContravariantLifetime<'a>\n+    ptr: *T,\n+    end: *T,\n+    marker: marker::ContravariantLifetime<'a>\n }\n \n /// Mutable slice iterator\n pub struct MutItems<'a, T> {\n-    priv ptr: *mut T,\n-    priv end: *mut T,\n-    priv marker: marker::ContravariantLifetime<'a>,\n-    priv marker2: marker::NoCopy\n+    ptr: *mut T,\n+    end: *mut T,\n+    marker: marker::ContravariantLifetime<'a>,\n+    marker2: marker::NoCopy\n }\n \n macro_rules! iterator {\n@@ -2735,9 +2735,9 @@ pub type RevMutItems<'a, T> = Rev<MutItems<'a, T>>;\n /// An iterator over the subslices of the vector which are separated\n /// by elements that match `pred`.\n pub struct MutSplits<'a, T> {\n-    priv v: &'a mut [T],\n-    priv pred: 'a |t: &T| -> bool,\n-    priv finished: bool\n+    v: &'a mut [T],\n+    pred: 'a |t: &T| -> bool,\n+    finished: bool\n }\n \n impl<'a, T> Iterator<&'a mut [T]> for MutSplits<'a, T> {\n@@ -2800,8 +2800,8 @@ impl<'a, T> DoubleEndedIterator<&'a mut [T]> for MutSplits<'a, T> {\n /// the vector len is not evenly divided by the chunk size, the last slice of the iteration will be\n /// the remainder.\n pub struct MutChunks<'a, T> {\n-    priv v: &'a mut [T],\n-    priv chunk_size: uint\n+    v: &'a mut [T],\n+    chunk_size: uint\n }\n \n impl<'a, T> Iterator<&'a mut [T]> for MutChunks<'a, T> {\n@@ -2849,8 +2849,8 @@ impl<'a, T> DoubleEndedIterator<&'a mut [T]> for MutChunks<'a, T> {\n \n /// An iterator that moves out of a vector.\n pub struct MoveItems<T> {\n-    priv allocation: *mut u8, // the block of memory allocated for the vector\n-    priv iter: Items<'static, T>\n+    allocation: *mut u8, // the block of memory allocated for the vector\n+    iter: Items<'static, T>\n }\n \n impl<T> Iterator<T> for MoveItems<T> {"}, {"sha": "408d236ccc6e743a9faa8b10830fa6ce904f7874", "filename": "src/libstd/str.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -275,7 +275,7 @@ Section: Iterators\n #[deriving(Clone)]\n pub struct Chars<'a> {\n     /// The slice remaining to be iterated\n-    priv string: &'a str,\n+    string: &'a str,\n }\n \n impl<'a> Iterator<char> for Chars<'a> {\n@@ -320,8 +320,8 @@ impl<'a> DoubleEndedIterator<char> for Chars<'a> {\n #[deriving(Clone)]\n pub struct CharOffsets<'a> {\n     /// The original string to be iterated\n-    priv string: &'a str,\n-    priv iter: Chars<'a>,\n+    string: &'a str,\n+    iter: Chars<'a>,\n }\n \n impl<'a> Iterator<(uint, char)> for CharOffsets<'a> {\n@@ -371,12 +371,12 @@ pub type RevBytes<'a> = Rev<Bytes<'a>>;\n #[deriving(Clone)]\n pub struct CharSplits<'a, Sep> {\n     /// The slice remaining to be iterated\n-    priv string: &'a str,\n-    priv sep: Sep,\n+    string: &'a str,\n+    sep: Sep,\n     /// Whether an empty string at the end is allowed\n-    priv allow_trailing_empty: bool,\n-    priv only_ascii: bool,\n-    priv finished: bool,\n+    allow_trailing_empty: bool,\n+    only_ascii: bool,\n+    finished: bool,\n }\n \n /// An iterator over the substrings of a string, separated by `sep`,\n@@ -387,10 +387,10 @@ pub type RevCharSplits<'a, Sep> = Rev<CharSplits<'a, Sep>>;\n /// splitting at most `count` times.\n #[deriving(Clone)]\n pub struct CharSplitsN<'a, Sep> {\n-    priv iter: CharSplits<'a, Sep>,\n+    iter: CharSplits<'a, Sep>,\n     /// The number of splits remaining\n-    priv count: uint,\n-    priv invert: bool,\n+    count: uint,\n+    invert: bool,\n }\n \n /// An iterator over the words of a string, separated by a sequence of whitespace\n@@ -503,18 +503,18 @@ impl<'a, Sep: CharEq> Iterator<&'a str> for CharSplitsN<'a, Sep> {\n /// substring within a larger string\n #[deriving(Clone)]\n pub struct MatchIndices<'a> {\n-    priv haystack: &'a str,\n-    priv needle: &'a str,\n-    priv position: uint,\n+    haystack: &'a str,\n+    needle: &'a str,\n+    position: uint,\n }\n \n /// An iterator over the substrings of a string separated by a given\n /// search string\n #[deriving(Clone)]\n pub struct StrSplits<'a> {\n-    priv it: MatchIndices<'a>,\n-    priv last_end: uint,\n-    priv finished: bool\n+    it: MatchIndices<'a>,\n+    last_end: uint,\n+    finished: bool\n }\n \n impl<'a> Iterator<(uint, uint)> for MatchIndices<'a> {\n@@ -597,10 +597,10 @@ enum NormalizationForm {\n /// Use with the `std::iter` module.\n #[deriving(Clone)]\n pub struct Normalizations<'a> {\n-    priv kind: NormalizationForm,\n-    priv iter: Chars<'a>,\n-    priv buffer: ~[(char, u8)],\n-    priv sorted: bool\n+    kind: NormalizationForm,\n+    iter: Chars<'a>,\n+    buffer: ~[(char, u8)],\n+    sorted: bool\n }\n \n impl<'a> Iterator<char> for Normalizations<'a> {\n@@ -856,7 +856,7 @@ pub fn is_utf16(v: &[u16]) -> bool {\n /// of `u16`s.\n #[deriving(Clone)]\n pub struct UTF16Items<'a> {\n-    priv iter: slice::Items<'a, u16>\n+    iter: slice::Items<'a, u16>\n }\n /// The possibilities for values decoded from a `u16` stream.\n #[deriving(Eq, TotalEq, Clone, Show)]\n@@ -1061,9 +1061,9 @@ pub fn utf8_char_width(b: u8) -> uint {\n /// for iterating over the UTF-8 bytes of a string.\n pub struct CharRange {\n     /// Current `char`\n-    ch: char,\n+    pub ch: char,\n     /// Index of the first byte of the next `char`\n-    next: uint\n+    pub next: uint,\n }\n \n // Return the initial codepoint accumulator for the first byte."}, {"sha": "0d0bd740e41e010f254bd25342016883b5442b45", "filename": "src/libstd/sync/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Farc.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -35,7 +35,7 @@ use ty::Unsafe;\n /// Enforces no shared-memory safety.\n #[unsafe_no_drop_flag]\n pub struct UnsafeArc<T> {\n-    priv data: *mut ArcData<T>,\n+    data: *mut ArcData<T>,\n }\n \n struct ArcData<T> {"}, {"sha": "234eae1f97b7f8ef5e0ac69220b85fcba7adb190", "filename": "src/libstd/sync/atomics.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomics.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -116,26 +116,26 @@ use ty::Unsafe;\n \n /// An atomic boolean type.\n pub struct AtomicBool {\n-    priv v: Unsafe<uint>,\n-    priv nocopy: marker::NoCopy\n+    v: Unsafe<uint>,\n+    nocopy: marker::NoCopy\n }\n \n /// A signed atomic integer type, supporting basic atomic arithmetic operations\n pub struct AtomicInt {\n-    priv v: Unsafe<int>,\n-    priv nocopy: marker::NoCopy\n+    v: Unsafe<int>,\n+    nocopy: marker::NoCopy\n }\n \n /// An unsigned atomic integer type, supporting basic atomic arithmetic operations\n pub struct AtomicUint {\n-    priv v: Unsafe<uint>,\n-    priv nocopy: marker::NoCopy\n+    v: Unsafe<uint>,\n+    nocopy: marker::NoCopy\n }\n \n /// An unsafe atomic pointer. Only supports basic atomic operations\n pub struct AtomicPtr<T> {\n-    priv p: Unsafe<uint>,\n-    priv nocopy: marker::NoCopy\n+    p: Unsafe<uint>,\n+    nocopy: marker::NoCopy\n }\n \n /// An atomic, nullable unique pointer\n@@ -144,7 +144,7 @@ pub struct AtomicPtr<T> {\n /// owned heap objects across tasks.\n #[unsafe_no_drop_flag]\n pub struct AtomicOption<T> {\n-    priv p: Unsafe<uint>,\n+    p: Unsafe<uint>,\n }\n \n /// Atomic memory orderings"}, {"sha": "d01c89878ded994f2f6c9199c618bb2335b2d588", "filename": "src/libstd/sync/deque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fdeque.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -86,14 +86,14 @@ struct Deque<T> {\n ///\n /// There may only be one worker per deque.\n pub struct Worker<T> {\n-    priv deque: UnsafeArc<Deque<T>>,\n+    deque: UnsafeArc<Deque<T>>,\n }\n \n /// The stealing half of the work-stealing deque. Stealers have access to the\n /// opposite end of the deque from the worker, and they only have access to the\n /// `steal` method.\n pub struct Stealer<T> {\n-    priv deque: UnsafeArc<Deque<T>>,\n+    deque: UnsafeArc<Deque<T>>,\n }\n \n /// When stealing some data, this is an enumeration of the possible outcomes.\n@@ -116,7 +116,7 @@ pub enum Stolen<T> {\n /// will only use this structure when allocating a new buffer or deallocating a\n /// previous one.\n pub struct BufferPool<T> {\n-    priv pool: Exclusive<~[~Buffer<T>]>,\n+    pool: Exclusive<~[~Buffer<T>]>,\n }\n \n /// An internal buffer used by the chase-lev deque. This structure is actually"}, {"sha": "12c05c0d61ceaaa8cce127f651056e3b11bb8241", "filename": "src/libstd/sync/mpmc_bounded_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -54,7 +54,7 @@ struct State<T> {\n }\n \n pub struct Queue<T> {\n-    priv state: UnsafeArc<State<T>>,\n+    state: UnsafeArc<State<T>>,\n }\n \n impl<T: Send> State<T> {"}, {"sha": "142a6239df6dabfd50f23b8b1d5f9c9277d3c6bb", "filename": "src/libstd/sync/mpsc_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fsync%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fsync%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc_queue.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -67,8 +67,8 @@ struct Node<T> {\n /// may be safely shared so long as it is guaranteed that there is only one\n /// popper at a time (many pushers are allowed).\n pub struct Queue<T> {\n-    priv head: AtomicPtr<Node<T>>,\n-    priv tail: *mut Node<T>,\n+    head: AtomicPtr<Node<T>>,\n+    tail: *mut Node<T>,\n }\n \n impl<T> Node<T> {"}, {"sha": "4e043ecf17180b9322679dc9af2ef57e77cfb3f1", "filename": "src/libstd/sync/spsc_queue.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fsync%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fsync%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fspsc_queue.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -55,19 +55,19 @@ struct Node<T> {\n /// time.\n pub struct Queue<T> {\n     // consumer fields\n-    priv tail: *mut Node<T>, // where to pop from\n-    priv tail_prev: AtomicPtr<Node<T>>, // where to pop from\n+    tail: *mut Node<T>, // where to pop from\n+    tail_prev: AtomicPtr<Node<T>>, // where to pop from\n \n     // producer fields\n-    priv head: *mut Node<T>,      // where to push to\n-    priv first: *mut Node<T>,     // where to get new nodes from\n-    priv tail_copy: *mut Node<T>, // between first/tail\n+    head: *mut Node<T>,      // where to push to\n+    first: *mut Node<T>,     // where to get new nodes from\n+    tail_copy: *mut Node<T>, // between first/tail\n \n     // Cache maintenance fields. Additions and subtractions are stored\n     // separately in order to allow them to use nonatomic addition/subtraction.\n-    priv cache_bound: uint,\n-    priv cache_additions: AtomicUint,\n-    priv cache_subtractions: AtomicUint,\n+    cache_bound: uint,\n+    cache_additions: AtomicUint,\n+    cache_subtractions: AtomicUint,\n }\n \n impl<T: Send> Node<T> {"}, {"sha": "a3d919921ae6d2b281e6a3d46975ebe7cf9a6bb4", "filename": "src/libstd/task.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -60,15 +60,15 @@ pub type TaskResult = Result<(), ~Any:Send>;\n /// Task configuration options\n pub struct TaskOpts {\n     /// Enable lifecycle notifications on the given channel\n-    notify_chan: Option<Sender<TaskResult>>,\n+    pub notify_chan: Option<Sender<TaskResult>>,\n     /// A name for the task-to-be, for identification in failure messages\n-    name: Option<SendStr>,\n+    pub name: Option<SendStr>,\n     /// The size of the stack for the spawned task\n-    stack_size: Option<uint>,\n+    pub stack_size: Option<uint>,\n     /// Task-local stdout\n-    stdout: Option<~Writer:Send>,\n+    pub stdout: Option<~Writer:Send>,\n     /// Task-local stderr\n-    stderr: Option<~Writer:Send>,\n+    pub stderr: Option<~Writer:Send>,\n }\n \n /**\n@@ -85,9 +85,9 @@ pub struct TaskOpts {\n // the run function move them in.\n pub struct TaskBuilder {\n     /// Options to spawn the new task with\n-    opts: TaskOpts,\n-    priv gen_body: Option<proc:Send(v: proc:Send()) -> proc:Send()>,\n-    priv nocopy: Option<marker::NoCopy>,\n+    pub opts: TaskOpts,\n+    gen_body: Option<proc:Send(v: proc:Send()) -> proc:Send()>,\n+    nocopy: Option<marker::NoCopy>,\n }\n \n /**"}, {"sha": "dc4e55deb4b15e29dcab4e9d2aa2a90c79b4bd30", "filename": "src/libstd/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fty.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -48,10 +48,10 @@ use kinds::marker;\n #[lang=\"unsafe\"]\n pub struct Unsafe<T> {\n     /// Wrapped value\n-    value: T,\n+    pub value: T,\n \n     /// Invariance marker\n-    marker1: marker::InvariantType<T>\n+    pub marker1: marker::InvariantType<T>\n }\n \n impl<T> Unsafe<T> {"}, {"sha": "441a60a5186265d05db84f7d4b206e58143a5329", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -22,7 +22,7 @@ use ops::*;\n use option::*;\n use result::*;\n \n-pub struct DynamicLibrary { priv handle: *u8}\n+pub struct DynamicLibrary { handle: *u8}\n \n impl Drop for DynamicLibrary {\n     fn drop(&mut self) {"}, {"sha": "c2db8ad9586ee4a90a83237cfd7efe7ebf00aa53", "filename": "src/libstd/unstable/mutex.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Funstable%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Funstable%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmutex.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -67,15 +67,15 @@ use ops::Drop;\n /// Prefer the `NativeMutex` type where possible, since that does not\n /// require manual deallocation.\n pub struct StaticNativeMutex {\n-    priv inner: imp::Mutex,\n+    inner: imp::Mutex,\n }\n \n /// A native mutex with a destructor for clean-up.\n ///\n /// See `StaticNativeMutex` for a version that is suitable for storing in\n /// statics.\n pub struct NativeMutex {\n-    priv inner: StaticNativeMutex\n+    inner: StaticNativeMutex\n }\n \n /// Automatically unlocks the mutex that it was created from on\n@@ -86,7 +86,7 @@ pub struct NativeMutex {\n /// then.\n #[must_use]\n pub struct LockGuard<'a> {\n-    priv lock: &'a StaticNativeMutex\n+    lock: &'a StaticNativeMutex\n }\n \n pub static NATIVE_MUTEX_INIT: StaticNativeMutex = StaticNativeMutex {\n@@ -372,8 +372,8 @@ mod imp {\n     }\n \n     pub struct Mutex {\n-        priv lock: Unsafe<pthread_mutex_t>,\n-        priv cond: Unsafe<pthread_cond_t>,\n+        lock: Unsafe<pthread_mutex_t>,\n+        cond: Unsafe<pthread_cond_t>,\n     }\n \n     pub static MUTEX_INIT: Mutex = Mutex {\n@@ -447,8 +447,8 @@ mod imp {\n \n     pub struct Mutex {\n         // pointers for the lock/cond handles, atomically updated\n-        priv lock: atomics::AtomicUint,\n-        priv cond: atomics::AtomicUint,\n+        lock: atomics::AtomicUint,\n+        cond: atomics::AtomicUint,\n     }\n \n     pub static MUTEX_INIT: Mutex = Mutex {"}, {"sha": "f1dd7aa150b1de97c23170424c974dc970eacc06", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -30,7 +30,7 @@ struct ExData<T> {\n  * need to block or deschedule while accessing shared state, use extra::sync::RWArc.\n  */\n pub struct Exclusive<T> {\n-    priv x: UnsafeArc<ExData<T>>\n+    x: UnsafeArc<ExData<T>>\n }\n \n impl<T:Send> Clone for Exclusive<T> {"}, {"sha": "5e42aaecbb93cef63f6d157a33cafaf3c30b7863", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d04ae7629f6f273643b3a14f106726842be6a/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=9a3d04ae7629f6f273643b3a14f106726842be6a", "patch": "@@ -56,9 +56,9 @@ use slice::{MutableTotalOrdVector, Vector};\n /// ```\n #[unsafe_no_drop_flag]\n pub struct Vec<T> {\n-    priv len: uint,\n-    priv cap: uint,\n-    priv ptr: *mut T\n+    len: uint,\n+    cap: uint,\n+    ptr: *mut T\n }\n \n impl<T> Vec<T> {\n@@ -1308,8 +1308,8 @@ impl<T:fmt::Show> fmt::Show for Vec<T> {\n \n /// An iterator that moves out of a vector.\n pub struct MoveItems<T> {\n-    priv allocation: *mut c_void, // the block of memory allocated for the vector\n-    priv iter: Items<'static, T>\n+    allocation: *mut c_void, // the block of memory allocated for the vector\n+    iter: Items<'static, T>\n }\n \n impl<T> Iterator<T> for MoveItems<T> {"}]}