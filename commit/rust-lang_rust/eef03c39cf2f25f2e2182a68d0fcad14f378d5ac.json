{"sha": "eef03c39cf2f25f2e2182a68d0fcad14f378d5ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZjAzYzM5Y2YyZjI1ZjJlMjE4MmE2OGQwZmNhZDE0ZjM3OGQ1YWM=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-20T12:07:11Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-20T12:07:35Z"}, "message": "Update to stop unsolicited copying and mark methods as unsafe", "tree": {"sha": "8d3af5043f639f731061e621c508d74c4bec8442", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d3af5043f639f731061e621c508d74c4bec8442"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eef03c39cf2f25f2e2182a68d0fcad14f378d5ac", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eef03c39cf2f25f2e2182a68d0fcad14f378d5ac", "html_url": "https://github.com/rust-lang/rust/commit/eef03c39cf2f25f2e2182a68d0fcad14f378d5ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eef03c39cf2f25f2e2182a68d0fcad14f378d5ac/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e091a27a6ee0d32fcda0830ec5f9a7ad585d9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e091a27a6ee0d32fcda0830ec5f9a7ad585d9e", "html_url": "https://github.com/rust-lang/rust/commit/d1e091a27a6ee0d32fcda0830ec5f9a7ad585d9e"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "dfd38584364104022f01f15a5d623ecc488dc6f3", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/eef03c39cf2f25f2e2182a68d0fcad14f378d5ac/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eef03c39cf2f25f2e2182a68d0fcad14f378d5ac/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=eef03c39cf2f25f2e2182a68d0fcad14f378d5ac", "patch": "@@ -210,7 +210,7 @@ pub unsafe fn array_each<T>(arr: **T, cb: &fn(*T)) {\n pub trait Ptr<T> {\n     fn is_null(&const self) -> bool;\n     fn is_not_null(&const self) -> bool;\n-    fn to_option(&const self) -> Option<T>;\n+    unsafe fn to_option(&const self) -> Option<&T>;\n     fn offset(&self, count: uint) -> Self;\n }\n \n@@ -224,11 +224,20 @@ impl<T> Ptr<T> for *T {\n     #[inline(always)]\n     fn is_not_null(&const self) -> bool { is_not_null(*self) }\n \n-    /// Returns `None` if the pointer is null, or else returns the value wrapped in `Some`.\n+    ///\n+    /// Returns `None` if the pointer is null, or else returns the value wrapped\n+    /// in `Some`.\n+    ///\n+    /// # Safety Notes\n+    ///\n+    /// While this method is useful for null-safety, it is important to note\n+    /// that this is still an unsafe operation because the returned value could\n+    /// be pointing to invalid memory.\n+    ///\n     #[inline(always)]\n-    fn to_option(&const self) -> Option<T> {\n+    unsafe fn to_option(&const self) -> Option<&T> {\n         if self.is_null() { None } else {\n-            Some(unsafe { **self })\n+            Some(cast::transmute(*self))\n         }\n     }\n \n@@ -247,11 +256,20 @@ impl<T> Ptr<T> for *mut T {\n     #[inline(always)]\n     fn is_not_null(&const self) -> bool { is_not_null(*self) }\n \n-    /// Returns `None` if the pointer is null, or else returns the value wrapped in `Some`.\n+    ///\n+    /// Returns `None` if the pointer is null, or else returns the value wrapped\n+    /// in `Some`.\n+    ///\n+    /// # Safety Notes\n+    ///\n+    /// While this method is useful for null-safety, it is important to note\n+    /// that this is still an unsafe operation because the returned value could\n+    /// be pointing to invalid memory.\n+    ///\n     #[inline(always)]\n-    fn to_option(&const self) -> Option<T> {\n+    unsafe fn to_option(&const self) -> Option<&T> {\n         if self.is_null() { None } else {\n-            Some(unsafe { **self })\n+            Some(cast::transmute(*self))\n         }\n     }\n \n@@ -442,19 +460,19 @@ pub mod ptr_tests {\n     }\n \n     #[test]\n-    #[allow(unused_mut)]\n     fn test_to_option() {\n         let p: *int = null();\n+        // FIXME (#6641): Usage of unsafe methods in safe code doesn't cause an error.\n         assert_eq!(p.to_option(), None);\n \n         let q: *int = &2;\n-        assert_eq!(q.to_option(), Some(2));\n+        assert_eq!(q.to_option().unwrap(), &2);     // FIXME (#6641)\n \n         let p: *mut int = mut_null();\n-        assert_eq!(p.to_option(), None);\n+        assert_eq!(p.to_option(), None);            // FIXME (#6641)\n \n         let q: *mut int = &mut 2;\n-        assert_eq!(q.to_option(), Some(2));\n+        assert_eq!(q.to_option().unwrap(), &2);     // FIXME (#6641)\n     }\n \n     #[test]"}]}