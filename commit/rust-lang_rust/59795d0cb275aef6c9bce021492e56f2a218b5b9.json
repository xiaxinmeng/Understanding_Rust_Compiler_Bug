{"sha": "59795d0cb275aef6c9bce021492e56f2a218b5b9", "node_id": "C_kwDOAAsO6NoAKDU5Nzk1ZDBjYjI3NWFlZjZjOWJjZTAyMTQ5MmU1NmYyYTIxOGI1Yjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-14T18:16:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-14T18:16:03Z"}, "message": "Rollup merge of #100526 - Nilstrieb:tests!, r=Mark-Simulacrum\n\nAdd tests for the drop behavior of some control flow constructs\n\nIn #100513 it was shown that the drop behaviour of let_chains is not correct currently. Since drop behaviour is something pretty subtle, this adds explicit tests for the drop behavior of `if`, `if let` and `match` to make sure that it does not regress in the future.\n\nThe `println!`s were left in to make debugging easier in case something goes wrong, but they are not required for the test.", "tree": {"sha": "6e77649de55a0a57466b0827cb4963fb5d9ecfaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e77649de55a0a57466b0827cb4963fb5d9ecfaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59795d0cb275aef6c9bce021492e56f2a218b5b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+TvjCRBK7hj4Ov3rIwAAywcIABEpDkNoapLiBkp4emGjiMEI\nhwg1qsxsI2S7RzhwuGxi/31ku22NOZ6NhNSGWCFM8gglEBfIqa/cV0SaPswEZbww\nqEyU8Yc/H81b0zHtaoGPF05yfgfj4ex0m42JFfQx/ICL0Udggwi1EPqyETzSKX/n\noL+CE8NFtYU7LZiXutTKcTIKPxMhY1pL2+g+guSY9sFPp2pWTRr49eIbsJk1gVQ7\nW8iCJtN9QOiOS0fGN8XjstR+jL/k8Gs9v1UOoAZ7MfVUZi1TtTLVWLtG4Dg8bXie\nx109bcVVnNarEqKifgoTNTTmPNmYwop9VK6dubopP68NN88okWTKud+MnMmxxY8=\n=+mBs\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e77649de55a0a57466b0827cb4963fb5d9ecfaf\nparent 923fe98241dd172ad83af2c21ff0c4793e868de1\nparent f6c2816f4779eae60e9d2eb12f72b6450c789864\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660500963 +0200\ncommitter GitHub <noreply@github.com> 1660500963 +0200\n\nRollup merge of #100526 - Nilstrieb:tests!, r=Mark-Simulacrum\n\nAdd tests for the drop behavior of some control flow constructs\n\nIn #100513 it was shown that the drop behaviour of let_chains is not correct currently. Since drop behaviour is something pretty subtle, this adds explicit tests for the drop behavior of `if`, `if let` and `match` to make sure that it does not regress in the future.\n\nThe `println!`s were left in to make debugging easier in case something goes wrong, but they are not required for the test.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59795d0cb275aef6c9bce021492e56f2a218b5b9", "html_url": "https://github.com/rust-lang/rust/commit/59795d0cb275aef6c9bce021492e56f2a218b5b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59795d0cb275aef6c9bce021492e56f2a218b5b9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "923fe98241dd172ad83af2c21ff0c4793e868de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/923fe98241dd172ad83af2c21ff0c4793e868de1", "html_url": "https://github.com/rust-lang/rust/commit/923fe98241dd172ad83af2c21ff0c4793e868de1"}, {"sha": "f6c2816f4779eae60e9d2eb12f72b6450c789864", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6c2816f4779eae60e9d2eb12f72b6450c789864", "html_url": "https://github.com/rust-lang/rust/commit/f6c2816f4779eae60e9d2eb12f72b6450c789864"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "e42150dcc09d289a7d366504709af51233004b36", "filename": "src/test/ui/drop/drop_order.rs", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/59795d0cb275aef6c9bce021492e56f2a218b5b9/src%2Ftest%2Fui%2Fdrop%2Fdrop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59795d0cb275aef6c9bce021492e56f2a218b5b9/src%2Ftest%2Fui%2Fdrop%2Fdrop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdrop_order.rs?ref=59795d0cb275aef6c9bce021492e56f2a218b5b9", "patch": "@@ -0,0 +1,145 @@\n+// run-pass\n+\n+use std::cell::RefCell;\n+use std::convert::TryInto;\n+\n+#[derive(Default)]\n+struct DropOrderCollector(RefCell<Vec<u32>>);\n+\n+struct LoudDrop<'a>(&'a DropOrderCollector, u32);\n+\n+impl Drop for LoudDrop<'_> {\n+    fn drop(&mut self) {\n+        println!(\"{}\", self.1);\n+        self.0.0.borrow_mut().push(self.1);\n+    }\n+}\n+\n+impl DropOrderCollector {\n+    fn option_loud_drop(&self, n: u32) -> Option<LoudDrop> {\n+        Some(LoudDrop(self, n))\n+    }\n+\n+    fn loud_drop(&self, n: u32) -> LoudDrop {\n+        LoudDrop(self, n)\n+    }\n+\n+    fn print(&self, n: u32) {\n+        println!(\"{}\", n);\n+        self.0.borrow_mut().push(n)\n+    }\n+\n+    fn if_(&self) {\n+        if self.option_loud_drop(1).is_some() {\n+            self.print(2);\n+        }\n+\n+        if self.option_loud_drop(3).is_none() {\n+            unreachable!();\n+        } else if self.option_loud_drop(4).is_some() {\n+            self.print(5);\n+        }\n+\n+        if {\n+            if self.option_loud_drop(7).is_some() && self.option_loud_drop(6).is_some() {\n+                self.loud_drop(8);\n+                true\n+            } else {\n+                false\n+            }\n+        } {\n+            self.print(9);\n+        }\n+    }\n+\n+    fn if_let(&self) {\n+        if let None = self.option_loud_drop(2) {\n+            unreachable!();\n+        } else {\n+            self.print(1);\n+        }\n+\n+        if let Some(_) = self.option_loud_drop(4) {\n+            self.print(3);\n+        }\n+\n+        if let Some(_d) = self.option_loud_drop(6) {\n+            self.print(5);\n+        }\n+    }\n+\n+    fn match_(&self) {\n+        match self.option_loud_drop(2) {\n+            _any => self.print(1),\n+        }\n+\n+        match self.option_loud_drop(4) {\n+            _ => self.print(3),\n+        }\n+\n+        match self.option_loud_drop(6) {\n+            Some(_) => self.print(5),\n+            _ => unreachable!(),\n+        }\n+\n+        match {\n+            let _ = self.loud_drop(7);\n+            let _d = self.loud_drop(9);\n+            self.print(8);\n+            ()\n+        } {\n+            () => self.print(10),\n+        }\n+\n+        match {\n+            match self.option_loud_drop(14) {\n+                _ => {\n+                    self.print(11);\n+                    self.option_loud_drop(13)\n+                }\n+            }\n+        } {\n+            _ => self.print(12),\n+        }\n+\n+        match {\n+            loop {\n+                break match self.option_loud_drop(16) {\n+                    _ => {\n+                        self.print(15);\n+                        self.option_loud_drop(18)\n+                    }\n+                };\n+            }\n+        } {\n+            _ => self.print(17),\n+        }\n+    }\n+\n+    fn assert_sorted(self) {\n+        assert!(\n+            self.0\n+                .into_inner()\n+                .into_iter()\n+                .enumerate()\n+                .all(|(idx, item)| idx + 1 == item.try_into().unwrap())\n+        );\n+    }\n+}\n+\n+fn main() {\n+    println!(\"-- if --\");\n+    let collector = DropOrderCollector::default();\n+    collector.if_();\n+    collector.assert_sorted();\n+\n+    println!(\"-- if let --\");\n+    let collector = DropOrderCollector::default();\n+    collector.if_let();\n+    collector.assert_sorted();\n+\n+    println!(\"-- match --\");\n+    let collector = DropOrderCollector::default();\n+    collector.match_();\n+    collector.assert_sorted();\n+}"}]}