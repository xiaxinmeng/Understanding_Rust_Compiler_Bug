{"sha": "b2d6705fe2e7eb51e3d3cf7421da8513ad1e948e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZDY3MDVmZTJlN2ViNTFlM2QzY2Y3NDIxZGE4NTEzYWQxZTk0OGU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-21T12:01:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-21T12:01:29Z"}, "message": "Implement u/i128 <-> float casts\n\nFixes #668", "tree": {"sha": "2b1e264bba7ed33f3912da73b60dc0eb45e81fb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b1e264bba7ed33f3912da73b60dc0eb45e81fb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2d6705fe2e7eb51e3d3cf7421da8513ad1e948e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d6705fe2e7eb51e3d3cf7421da8513ad1e948e", "html_url": "https://github.com/rust-lang/rust/commit/b2d6705fe2e7eb51e3d3cf7421da8513ad1e948e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2d6705fe2e7eb51e3d3cf7421da8513ad1e948e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fcd54088c71cf64d723fe928f3da188f6d9952e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fcd54088c71cf64d723fe928f3da188f6d9952e", "html_url": "https://github.com/rust-lang/rust/commit/3fcd54088c71cf64d723fe928f3da188f6d9952e"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "14a9a567d42b02d08860ce53fd1d9604de888cb0", "filename": "example/std_example.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2d6705fe2e7eb51e3d3cf7421da8513ad1e948e/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d6705fe2e7eb51e3d3cf7421da8513ad1e948e/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=b2d6705fe2e7eb51e3d3cf7421da8513ad1e948e", "patch": "@@ -55,6 +55,17 @@ fn main() {\n     assert_eq!(0xFEDCBA987654321123456789ABCDEFu128 as i128 >> 64, 0xFEDCBA98765432i128);\n     assert_eq!(353985398u128 * 932490u128, 330087843781020u128);\n \n+    // Check that all u/i128 <-> float casts work correctly.\n+    assert_eq!(100u128 as f32, 100.0);\n+    assert_eq!(100u128 as f64, 100.0);\n+    assert_eq!(100.0f32 as u128, 100);\n+    assert_eq!(100.0f64 as u128, 100);\n+    assert_eq!(100i128 as f32, 100.0);\n+    assert_eq!(100i128 as f64, 100.0);\n+    assert_eq!(100.0f32 as i128, 100);\n+    assert_eq!(100.0f64 as i128, 100);\n+\n+\n     let _a = 1u32 << 2u8;\n \n     unsafe {"}, {"sha": "5e038543771a192ee6f7d71237753720f3f8ab80", "filename": "src/cast.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b2d6705fe2e7eb51e3d3cf7421da8513ad1e948e/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d6705fe2e7eb51e3d3cf7421da8513ad1e948e/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=b2d6705fe2e7eb51e3d3cf7421da8513ad1e948e", "patch": "@@ -55,6 +55,17 @@ pub fn clif_int_or_float_cast(\n ) -> Value {\n     let from_ty = fx.bcx.func.dfg.value_type(from);\n \n+    macro call_float_cvt_intrinsic($fmt:literal, $sign_name:literal, $from_ty:expr, $to_ty:expr) {\n+        let intrinsic_sign_name = if from_signed { \"\" } else { $sign_name };\n+        let intrinsic_float_name = match to_ty {\n+            types::F32 => \"s\",\n+            types::F64 => \"d\",\n+            _ => unreachable!(\"{:?}\", to_ty),\n+        };\n+        let intrinsic_name = format!($fmt, sign=intrinsic_sign_name, flt=intrinsic_float_name);\n+        return fx.easy_call(&intrinsic_name, &[CValue::by_val(from, fx.layout_of($from_ty))], $to_ty).load_scalar(fx);\n+    }\n+\n     if from_ty.is_int() && to_ty.is_int() {\n         // int-like -> int-like\n         clif_intcast(\n@@ -65,7 +76,21 @@ pub fn clif_int_or_float_cast(\n         )\n     } else if from_ty.is_int() && to_ty.is_float() {\n         if from_ty == types::I128 {\n-            unimpl!(\"u/i128 -> float\");\n+            // _______ss__f_\n+            // __float  tisf: i128 -> f32\n+            // __float  tidf: i128 -> f64\n+            // __floatuntisf: u128 -> f32\n+            // __floatuntidf: u128 -> f64\n+            call_float_cvt_intrinsic!(\"__float{sign}ti{flt}f\", \"un\", if from_signed {\n+                fx.tcx.types.i128\n+            } else {\n+                fx.tcx.types.u128\n+            },\n+            match to_ty {\n+                types::F32 => fx.tcx.types.f32,\n+                types::F64 => fx.tcx.types.f64,\n+                _ => unreachable!(),\n+            });\n         }\n \n         // int-like -> float\n@@ -76,7 +101,21 @@ pub fn clif_int_or_float_cast(\n         }\n     } else if from_ty.is_float() && to_ty.is_int() {\n         if to_ty == types::I128 {\n-            unimpl!(\"float -> u/i128\");\n+            // _____sssf___\n+            // __fix   sfti: f32 -> i128\n+            // __fix   dfti: f64 -> i128\n+            // __fixunssfti: f32 -> u128\n+            // __fixunsdfti: f64 -> u128\n+            call_float_cvt_intrinsic!(\"__fix{sign}{flt}fti\", \"uns\", match from_ty {\n+                types::F32 => fx.tcx.types.f32,\n+                types::F64 => fx.tcx.types.f64,\n+                _ => unreachable!(),\n+            },\n+            if to_signed {\n+                fx.tcx.types.i128\n+            } else {\n+                fx.tcx.types.u128\n+            });\n         }\n \n         // float -> int-like"}]}