{"sha": "2fc3c69e5419292e92663a5f1e39203478925661", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYzNjNjllNTQxOTI5MmU5MjY2M2E1ZjFlMzkyMDM0Nzg5MjU2NjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-13T08:31:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-13T08:31:26Z"}, "message": "Auto merge of #87956 - m-ou-se:closure-migration-macro-body, r=Aaron1011\n\nFix closure migration suggestion when the body is a macro.\n\nFixes https://github.com/rust-lang/rust/issues/87955\n\nBefore:\n```\nwarning: changes to closure capture in Rust 2021 will affect drop order\n --> src/main.rs:5:13\n  |\n5 |     let _ = || panic!(a.0);\n  |             ^^^^^^^^^^---^\n  |                       |\n  |                       in Rust 2018, closure captures all of `a`, but in Rust 2021, it only captures `a.0`\n6 | }\n  | - in Rust 2018, `a` would be dropped here, but in Rust 2021, only `a.0` would be dropped here alongside the closure\n  |\n\nhelp: add a dummy let to cause `a` to be fully captured\n  |\n20~     ($msg:expr $(,)?) => ({ let _ = &a;\n21+         $crate::rt::begin_panic($msg)\n22~     }),\n  |\n```\n\nAfter:\n```\nwarning: changes to closure capture in Rust 2021 will affect drop order\n --> src/main.rs:5:13\n  |\n5 |     let _ = || panic!(a.0);\n  |             ^^^^^^^^^^---^\n  |                       |\n  |                       in Rust 2018, closure captures all of `a`, but in Rust 2021, it only captures `a.0`\n6 | }\n  | - in Rust 2018, `a` would be dropped here, but in Rust 2021, only `a.0` would be dropped here alongside the closure\n  |\nhelp: add a dummy let to cause `a` to be fully captured\n  |\n5 |     let _ = || { let _ = &a; panic!(a.0) };\n  |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```", "tree": {"sha": "b6df21d26052fbfae4abeb42dc58f85530349574", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6df21d26052fbfae4abeb42dc58f85530349574"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fc3c69e5419292e92663a5f1e39203478925661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc3c69e5419292e92663a5f1e39203478925661", "html_url": "https://github.com/rust-lang/rust/commit/2fc3c69e5419292e92663a5f1e39203478925661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fc3c69e5419292e92663a5f1e39203478925661/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04c9901a0838d20e6ac0bcda94ea1a8c239bb0d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/04c9901a0838d20e6ac0bcda94ea1a8c239bb0d7", "html_url": "https://github.com/rust-lang/rust/commit/04c9901a0838d20e6ac0bcda94ea1a8c239bb0d7"}, {"sha": "26c590d1b38617602a84ccdd0878c3681d242669", "url": "https://api.github.com/repos/rust-lang/rust/commits/26c590d1b38617602a84ccdd0878c3681d242669", "html_url": "https://github.com/rust-lang/rust/commit/26c590d1b38617602a84ccdd0878c3681d242669"}], "stats": {"total": 78, "additions": 72, "deletions": 6}, "files": [{"sha": "b28c4d9b5eecd6b499bc540fc159e79ebf063745", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2fc3c69e5419292e92663a5f1e39203478925661/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc3c69e5419292e92663a5f1e39203478925661/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=2fc3c69e5419292e92663a5f1e39203478925661", "patch": "@@ -47,7 +47,7 @@ use rustc_middle::ty::{\n };\n use rustc_session::lint;\n use rustc_span::sym;\n-use rustc_span::{MultiSpan, Span, Symbol};\n+use rustc_span::{MultiSpan, Span, Symbol, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n use rustc_data_structures::stable_map::FxHashMap;\n@@ -644,8 +644,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                     diagnostics_builder.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\");\n-                    let closure_body_span = self.tcx.hir().span(body_id.hir_id);\n-                    let (sugg, app) =\n+\n+                    let mut closure_body_span = self.tcx.hir().span(body_id.hir_id);\n+\n+                    // If the body was entirely expanded from a macro\n+                    // invocation, i.e. the body is not contained inside the\n+                    // closure span, then we walk up the expansion until we\n+                    // find the span before the expansion.\n+                    while !closure_body_span.is_dummy() && !closure_span.contains(closure_body_span) {\n+                        closure_body_span = closure_body_span.parent().unwrap_or(DUMMY_SP);\n+                    }\n+\n+                    let (span, sugg, app) =\n                         match self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n                             Ok(s) => {\n                                 let trimmed = s.trim_start();\n@@ -666,9 +676,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 } else {\n                                     format!(\"{{ {}; {} }}\", migration_string, s)\n                                 };\n-                                (sugg, Applicability::MachineApplicable)\n+                                (closure_body_span, sugg, Applicability::MachineApplicable)\n                             }\n-                            Err(_) => (migration_string.clone(), Applicability::HasPlaceholders),\n+                            Err(_) => (closure_span, migration_string.clone(), Applicability::HasPlaceholders),\n                         };\n \n                     let diagnostic_msg = format!(\n@@ -677,7 +687,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     );\n \n                     diagnostics_builder.span_suggestion(\n-                        closure_body_span,\n+                        span,\n                         &diagnostic_msg,\n                         sugg,\n                         app,"}, {"sha": "3d9797e65790b0ed3e9660decf8dd3b605733487", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/macro.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2fc3c69e5419292e92663a5f1e39203478925661/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2fc3c69e5419292e92663a5f1e39203478925661/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.fixed?ref=2fc3c69e5419292e92663a5f1e39203478925661", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+// See https://github.com/rust-lang/rust/issues/87955\n+\n+#![deny(rust_2021_incompatible_closure_captures)]\n+//~^ NOTE: the lint level is defined here\n+\n+fn main() {\n+    let a = (\"hey\".to_string(), \"123\".to_string());\n+    let _ = || { let _ = &a; dbg!(a.0) };\n+    //~^ ERROR: drop order\n+    //~| NOTE: only captures `a.0`\n+    //~| NOTE: for more information, see\n+    //~| HELP: add a dummy let to cause `a` to be fully captured\n+}\n+//~^ NOTE: dropped here"}, {"sha": "ffceaf0dd22b5a6dbdc4abe0353075bb1dacd24b", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/macro.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2fc3c69e5419292e92663a5f1e39203478925661/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc3c69e5419292e92663a5f1e39203478925661/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.rs?ref=2fc3c69e5419292e92663a5f1e39203478925661", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+// See https://github.com/rust-lang/rust/issues/87955\n+\n+#![deny(rust_2021_incompatible_closure_captures)]\n+//~^ NOTE: the lint level is defined here\n+\n+fn main() {\n+    let a = (\"hey\".to_string(), \"123\".to_string());\n+    let _ = || dbg!(a.0);\n+    //~^ ERROR: drop order\n+    //~| NOTE: only captures `a.0`\n+    //~| NOTE: for more information, see\n+    //~| HELP: add a dummy let to cause `a` to be fully captured\n+}\n+//~^ NOTE: dropped here"}, {"sha": "8ce5844d490f03e09221e92c245b43c4d52b70fd", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/macro.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2fc3c69e5419292e92663a5f1e39203478925661/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fc3c69e5419292e92663a5f1e39203478925661/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr?ref=2fc3c69e5419292e92663a5f1e39203478925661", "patch": "@@ -0,0 +1,24 @@\n+error: changes to closure capture in Rust 2021 will affect drop order\n+  --> $DIR/macro.rs:10:13\n+   |\n+LL |     let _ = || dbg!(a.0);\n+   |             ^^^^^^^^---^\n+   |                     |\n+   |                     in Rust 2018, closure captures all of `a`, but in Rust 2021, it only captures `a.0`\n+...\n+LL | }\n+   | - in Rust 2018, `a` would be dropped here, but in Rust 2021, only `a.0` would be dropped here alongside the closure\n+   |\n+note: the lint level is defined here\n+  --> $DIR/macro.rs:5:9\n+   |\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n+help: add a dummy let to cause `a` to be fully captured\n+   |\n+LL |     let _ = || { let _ = &a; dbg!(a.0) };\n+   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+"}]}