{"sha": "4184396f28d5612520f7b30718df9fff6918d239", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxODQzOTZmMjhkNTYxMjUyMGY3YjMwNzE4ZGY5ZmZmNjkxOGQyMzk=", "commit": {"author": {"name": "Dan Schatzberg", "email": "schatzberg.dan@gmail.com", "date": "2014-09-04T19:25:23Z"}, "committer": {"name": "Dan Schatzberg", "email": "schatzberg.dan@gmail.com", "date": "2014-10-02T15:22:05Z"}, "message": "Add lifetime bounds on Items and MutItems.\n\nThis also requires a fix for Vec's MoveItems. This resolves issue #16941", "tree": {"sha": "d3cf8319d19246c4a59be7c9ce558f6c67f15a20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3cf8319d19246c4a59be7c9ce558f6c67f15a20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4184396f28d5612520f7b30718df9fff6918d239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4184396f28d5612520f7b30718df9fff6918d239", "html_url": "https://github.com/rust-lang/rust/commit/4184396f28d5612520f7b30718df9fff6918d239", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4184396f28d5612520f7b30718df9fff6918d239/comments", "author": {"login": "dschatzberg", "id": 165988, "node_id": "MDQ6VXNlcjE2NTk4OA==", "avatar_url": "https://avatars.githubusercontent.com/u/165988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dschatzberg", "html_url": "https://github.com/dschatzberg", "followers_url": "https://api.github.com/users/dschatzberg/followers", "following_url": "https://api.github.com/users/dschatzberg/following{/other_user}", "gists_url": "https://api.github.com/users/dschatzberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/dschatzberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dschatzberg/subscriptions", "organizations_url": "https://api.github.com/users/dschatzberg/orgs", "repos_url": "https://api.github.com/users/dschatzberg/repos", "events_url": "https://api.github.com/users/dschatzberg/events{/privacy}", "received_events_url": "https://api.github.com/users/dschatzberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dschatzberg", "id": 165988, "node_id": "MDQ6VXNlcjE2NTk4OA==", "avatar_url": "https://avatars.githubusercontent.com/u/165988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dschatzberg", "html_url": "https://github.com/dschatzberg", "followers_url": "https://api.github.com/users/dschatzberg/followers", "following_url": "https://api.github.com/users/dschatzberg/following{/other_user}", "gists_url": "https://api.github.com/users/dschatzberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/dschatzberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dschatzberg/subscriptions", "organizations_url": "https://api.github.com/users/dschatzberg/orgs", "repos_url": "https://api.github.com/users/dschatzberg/repos", "events_url": "https://api.github.com/users/dschatzberg/events{/privacy}", "received_events_url": "https://api.github.com/users/dschatzberg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b419e9e7396852d698602c10216051fa9f3ec2b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b419e9e7396852d698602c10216051fa9f3ec2b8", "html_url": "https://github.com/rust-lang/rust/commit/b419e9e7396852d698602c10216051fa9f3ec2b8"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "6fdf2fce0a24434c36edc85c29e6eb2c86555998", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4184396f28d5612520f7b30718df9fff6918d239/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4184396f28d5612520f7b30718df9fff6918d239/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=4184396f28d5612520f7b30718df9fff6918d239", "patch": "@@ -845,11 +845,12 @@ impl<T> Vec<T> {\n     #[inline]\n     pub fn into_iter(self) -> MoveItems<T> {\n         unsafe {\n-            let iter = mem::transmute(self.as_slice().iter());\n             let ptr = self.ptr;\n             let cap = self.cap;\n+            let begin = self.ptr as *const T;\n+            let end = (self.ptr as uint + self.len()) as *const T;\n             mem::forget(self);\n-            MoveItems { allocation: ptr, cap: cap, iter: iter }\n+            MoveItems { allocation: ptr, cap: cap, ptr: begin, end: end }\n         }\n     }\n \n@@ -1773,7 +1774,8 @@ impl<T> MutableSeq<T> for Vec<T> {\n pub struct MoveItems<T> {\n     allocation: *mut T, // the block of memory allocated for the vector\n     cap: uint, // the capacity of the vector\n-    iter: Items<'static, T>\n+    ptr: *const T,\n+    end: *const T\n }\n \n impl<T> MoveItems<T> {\n@@ -1793,29 +1795,55 @@ impl<T> Iterator<T> for MoveItems<T> {\n     #[inline]\n     fn next<'a>(&'a mut self) -> Option<T> {\n         unsafe {\n-            // Unsafely transmute from Items<'static, T> to Items<'a,\n-            // T> because otherwise the type checker requires that T\n-            // be bounded by 'static.\n-            let iter: &mut Items<'a, T> = mem::transmute(&mut self.iter);\n-            iter.next().map(|x| ptr::read(x))\n+            if self.ptr == self.end {\n+                None\n+            } else {\n+                if mem::size_of::<T>() == 0 {\n+                    // purposefully don't use 'ptr.offset' because for\n+                    // vectors with 0-size elements this would return the\n+                    // same pointer.\n+                    self.ptr = mem::transmute(self.ptr as uint + 1);\n+\n+                    // Use a non-null pointer value\n+                    Some(ptr::read(mem::transmute(1u)))\n+                } else {\n+                    let old = self.ptr;\n+                    self.ptr = self.ptr.offset(1);\n+\n+                    Some(ptr::read(old))\n+                }\n+            }\n         }\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n-        self.iter.size_hint()\n+        let diff = (self.end as uint) - (self.ptr as uint);\n+        let size = mem::size_of::<T>();\n+        let exact = diff / (if size == 0 {1} else {size});\n+        (exact, Some(exact))\n     }\n }\n \n impl<T> DoubleEndedIterator<T> for MoveItems<T> {\n     #[inline]\n     fn next_back<'a>(&'a mut self) -> Option<T> {\n         unsafe {\n-            // Unsafely transmute from Items<'static, T> to Items<'a,\n-            // T> because otherwise the type checker requires that T\n-            // be bounded by 'static.\n-            let iter: &mut Items<'a, T> = mem::transmute(&mut self.iter);\n-            iter.next_back().map(|x| ptr::read(x))\n+            if self.end == self.ptr {\n+                None\n+            } else {\n+                if mem::size_of::<T>() == 0 {\n+                    // See above for why 'ptr.offset' isn't used\n+                    self.end = mem::transmute(self.end as uint - 1);\n+\n+                    // Use a non-null pointer value\n+                    Some(ptr::read(mem::transmute(1u)))\n+                } else {\n+                    self.end = self.end.offset(-1);\n+\n+                    Some(ptr::read(mem::transmute(self.end)))\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "6a8bea001bf1f56313658efd42951e02bf41d35d", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4184396f28d5612520f7b30718df9fff6918d239/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4184396f28d5612520f7b30718df9fff6918d239/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=4184396f28d5612520f7b30718df9fff6918d239", "patch": "@@ -1163,7 +1163,7 @@ macro_rules! iterator {\n \n /// Immutable slice iterator\n #[experimental = \"needs review\"]\n-pub struct Items<'a, T> {\n+pub struct Items<'a, T: 'a> {\n     ptr: *const T,\n     end: *const T,\n     marker: marker::ContravariantLifetime<'a>\n@@ -1206,7 +1206,7 @@ impl<'a, T> RandomAccessIterator<&'a T> for Items<'a, T> {\n \n /// Mutable slice iterator.\n #[experimental = \"needs review\"]\n-pub struct MutItems<'a, T> {\n+pub struct MutItems<'a, T: 'a> {\n     ptr: *mut T,\n     end: *mut T,\n     marker: marker::ContravariantLifetime<'a>,"}]}