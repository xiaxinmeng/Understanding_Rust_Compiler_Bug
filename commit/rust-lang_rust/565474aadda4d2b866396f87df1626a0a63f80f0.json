{"sha": "565474aadda4d2b866396f87df1626a0a63f80f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NTQ3NGFhZGRhNGQyYjg2NjM5NmY4N2RmMTYyNmEwYTYzZjgwZjA=", "commit": {"author": {"name": "Alexander Merritt", "email": "merritt.alex@gatech.edu", "date": "2016-06-16T02:37:39Z"}, "committer": {"name": "Alexander Merritt", "email": "merritt.alex@gatech.edu", "date": "2016-06-16T02:43:49Z"}, "message": "Correct use of 'nul' 'null' and capitalization\n\nr? @steveklabnik", "tree": {"sha": "8cf2e0666111a668965ab422e2a63f473397f27c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cf2e0666111a668965ab422e2a63f473397f27c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/565474aadda4d2b866396f87df1626a0a63f80f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/565474aadda4d2b866396f87df1626a0a63f80f0", "html_url": "https://github.com/rust-lang/rust/commit/565474aadda4d2b866396f87df1626a0a63f80f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/565474aadda4d2b866396f87df1626a0a63f80f0/comments", "author": {"login": "alexandermerritt", "id": 3632069, "node_id": "MDQ6VXNlcjM2MzIwNjk=", "avatar_url": "https://avatars.githubusercontent.com/u/3632069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexandermerritt", "html_url": "https://github.com/alexandermerritt", "followers_url": "https://api.github.com/users/alexandermerritt/followers", "following_url": "https://api.github.com/users/alexandermerritt/following{/other_user}", "gists_url": "https://api.github.com/users/alexandermerritt/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexandermerritt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexandermerritt/subscriptions", "organizations_url": "https://api.github.com/users/alexandermerritt/orgs", "repos_url": "https://api.github.com/users/alexandermerritt/repos", "events_url": "https://api.github.com/users/alexandermerritt/events{/privacy}", "received_events_url": "https://api.github.com/users/alexandermerritt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexandermerritt", "id": 3632069, "node_id": "MDQ6VXNlcjM2MzIwNjk=", "avatar_url": "https://avatars.githubusercontent.com/u/3632069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexandermerritt", "html_url": "https://github.com/alexandermerritt", "followers_url": "https://api.github.com/users/alexandermerritt/followers", "following_url": "https://api.github.com/users/alexandermerritt/following{/other_user}", "gists_url": "https://api.github.com/users/alexandermerritt/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexandermerritt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexandermerritt/subscriptions", "organizations_url": "https://api.github.com/users/alexandermerritt/orgs", "repos_url": "https://api.github.com/users/alexandermerritt/repos", "events_url": "https://api.github.com/users/alexandermerritt/events{/privacy}", "received_events_url": "https://api.github.com/users/alexandermerritt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb4a79b087158f396b984bdf552d2c90890b12a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb4a79b087158f396b984bdf552d2c90890b12a3", "html_url": "https://github.com/rust-lang/rust/commit/bb4a79b087158f396b984bdf552d2c90890b12a3"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "7fb5df3b7a9d114ba51e435cd2f1687b63dfe6ed", "filename": "src/doc/book/ffi.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/565474aadda4d2b866396f87df1626a0a63f80f0/src%2Fdoc%2Fbook%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/565474aadda4d2b866396f87df1626a0a63f80f0/src%2Fdoc%2Fbook%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fffi.md?ref=565474aadda4d2b866396f87df1626a0a63f80f0", "patch": "@@ -521,14 +521,14 @@ against `libc` and `libm` by default.\n \n # The \"nullable pointer optimization\"\n \n-Certain types are defined to not be `null`. This includes references (`&T`,\n+Certain types are defined to not be `NULL`. This includes references (`&T`,\n `&mut T`), boxes (`Box<T>`), and function pointers (`extern \"abi\" fn()`).\n-When interfacing with C, pointers that might be null are often used.\n+When interfacing with C, pointers that might be NULL are often used.\n As a special case, a generic `enum` that contains exactly two variants, one of\n which contains no data and the other containing a single field, is eligible\n for the \"nullable pointer optimization\". When such an enum is instantiated\n with one of the non-nullable types, it is represented as a single pointer,\n-and the non-data variant is represented as the null pointer. So\n+and the non-data variant is represented as the NULL pointer. So\n `Option<extern \"C\" fn(c_int) -> c_int>` is how one represents a nullable\n function pointer using the C ABI.\n "}, {"sha": "ae100aec3b5129c7ab43960e5458bd3dbd74b73e", "filename": "src/doc/book/raw-pointers.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565474aadda4d2b866396f87df1626a0a63f80f0/src%2Fdoc%2Fbook%2Fraw-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/565474aadda4d2b866396f87df1626a0a63f80f0/src%2Fdoc%2Fbook%2Fraw-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fraw-pointers.md?ref=565474aadda4d2b866396f87df1626a0a63f80f0", "patch": "@@ -17,7 +17,7 @@ Here are some things to remember about raw pointers that are different than\n other pointer types. They:\n \n - are not guaranteed to point to valid memory and are not even\n-  guaranteed to be non-null (unlike both `Box` and `&`);\n+  guaranteed to be non-NULL (unlike both `Box` and `&`);\n - do not have any automatic clean-up, unlike `Box`, and so require\n   manual resource management;\n - are plain-old-data, that is, they don't move ownership, again unlike"}, {"sha": "135778c38b50a2e8bc883b654a331da85389d3dc", "filename": "src/doc/book/strings.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565474aadda4d2b866396f87df1626a0a63f80f0/src%2Fdoc%2Fbook%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/565474aadda4d2b866396f87df1626a0a63f80f0/src%2Fdoc%2Fbook%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fstrings.md?ref=565474aadda4d2b866396f87df1626a0a63f80f0", "patch": "@@ -9,7 +9,7 @@ strings also work differently than in some other systems languages, such as C.\n Let\u2019s dig into the details. A \u2018string\u2019 is a sequence of Unicode scalar values\n encoded as a stream of UTF-8 bytes. All strings are guaranteed to be a valid\n encoding of UTF-8 sequences. Additionally, unlike some systems languages,\n-strings are not null-terminated and can contain null bytes.\n+strings are not NUL-terminated and can contain NUL bytes.\n \n Rust has two main types of strings: `&str` and `String`. Let\u2019s talk about\n `&str` first. These are called \u2018string slices\u2019. A string slice has a fixed"}, {"sha": "9cab586b82c4713d0ee73597876af5843733e945", "filename": "src/doc/book/unsafe.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/565474aadda4d2b866396f87df1626a0a63f80f0/src%2Fdoc%2Fbook%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/565474aadda4d2b866396f87df1626a0a63f80f0/src%2Fdoc%2Fbook%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Funsafe.md?ref=565474aadda4d2b866396f87df1626a0a63f80f0", "patch": "@@ -63,7 +63,7 @@ In addition, the following are all undefined behaviors in Rust, and must be\n avoided, even when writing `unsafe` code:\n \n * Data races\n-* Dereferencing a null/dangling raw pointer\n+* Dereferencing a NULL/dangling raw pointer\n * Reads of [undef][undef] (uninitialized) memory\n * Breaking the [pointer aliasing rules][aliasing] with raw pointers.\n * `&mut T` and `&T` follow LLVM\u2019s scoped [noalias][noalias] model, except if\n@@ -77,7 +77,7 @@ avoided, even when writing `unsafe` code:\n   * Using `std::ptr::copy_nonoverlapping_memory` (`memcpy32`/`memcpy64`\n     intrinsics) on overlapping buffers\n * Invalid values in primitive types, even in private fields/locals:\n-  * Null/dangling references or boxes\n+  * NULL/dangling references or boxes\n   * A value other than `false` (0) or `true` (1) in a `bool`\n   * A discriminant in an `enum` not included in its type definition\n   * A value in a `char` which is a surrogate or above `char::MAX`"}]}