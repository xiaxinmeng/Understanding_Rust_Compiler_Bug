{"sha": "9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNWI2ZWZkZjYyZGJjZDdiZGY4ZTc4YTVmNjljMWI2Njc4ZmQxNTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-20T23:44:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-20T23:44:52Z"}, "message": "Auto merge of #60293 - nagisa:rustdoc-all-the-auto-traits, r=eddyb\n\nrustdoc: generate implementors for all auto traits\n\nPreviously we would only generate a list of synthetic implementations\nfor two well known traits \u2013 Send and Sync. With this patch all the auto\ntraits known to rustc are considered. This includes such traits like\nUnpin and user\u2019s own traits.\n\nSadly the implementation still iterates through the list of crate items\nand checks them against the traits, which for non-std crates containing\ntheir own auto-traits will still not include types defined in std/core.\n\nIt is an improvement nontheless.", "tree": {"sha": "41950de7ed4a9b85d8bb8b2970836a335bf3e475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41950de7ed4a9b85d8bb8b2970836a335bf3e475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155", "html_url": "https://github.com/rust-lang/rust/commit/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d9981f04e8957345205c07adc2742886420ac37", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d9981f04e8957345205c07adc2742886420ac37", "html_url": "https://github.com/rust-lang/rust/commit/1d9981f04e8957345205c07adc2742886420ac37"}, {"sha": "4c8d00a3ec9cecfdff7b5da5a7157cc532e78ee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8d00a3ec9cecfdff7b5da5a7157cc532e78ee2", "html_url": "https://github.com/rust-lang/rust/commit/4c8d00a3ec9cecfdff7b5da5a7157cc532e78ee2"}], "stats": {"total": 107, "additions": 24, "deletions": 83}, "files": [{"sha": "5a4dc7be326d2a5a125d4aa67c0b656b503c277b", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155", "patch": "@@ -27,9 +27,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         let param_env = self.cx.tcx.param_env(param_env_def_id);\n \n         debug!(\"get_auto_trait_impls({:?})\", ty);\n-        let auto_traits = self.cx.send_trait.into_iter().chain(\n-            Some(self.cx.tcx.require_lang_item(lang_items::SyncTraitLangItem))\n-        );\n+        let auto_traits = self.cx.auto_traits.iter().cloned();\n         auto_traits.filter_map(|trait_def_id| {\n             let trait_ref = ty::TraitRef {\n                 def_id: trait_def_id,"}, {"sha": "41a56756a1480c5fb6affb69a0969377c6b1189e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 68, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155", "patch": "@@ -17,8 +17,8 @@ use rustc::middle::resolve_lifetime as rl;\n use rustc::middle::lang_items;\n use rustc::middle::stability;\n use rustc::mir::interpret::{GlobalId, ConstValue};\n-use rustc::hir::{self, HirVec};\n-use rustc::hir::def::{self, Res, DefKind, CtorKind};\n+use rustc::hir;\n+use rustc::hir::def::{CtorKind, DefKind, Res};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::ty::subst::{InternalSubsts, SubstsRef, UnpackedKind};\n use rustc::ty::{self, DefIdTree, TyCtxt, Region, RegionVid, Ty, AdtKind};\n@@ -4418,72 +4418,6 @@ where\n     r\n }\n \n-// Start of code copied from rust-clippy\n-\n-pub fn path_to_def_local(tcx: TyCtxt<'_>, path: &[Symbol]) -> Option<DefId> {\n-    let krate = tcx.hir().krate();\n-    let mut items = krate.module.item_ids.clone();\n-    let mut path_it = path.iter().peekable();\n-\n-    loop {\n-        let segment = path_it.next()?;\n-\n-        for item_id in mem::replace(&mut items, HirVec::new()).iter() {\n-            let item = tcx.hir().expect_item(item_id.id);\n-            if item.ident.name == *segment {\n-                if path_it.peek().is_none() {\n-                    return Some(tcx.hir().local_def_id_from_hir_id(item_id.id))\n-                }\n-\n-                items = match &item.node {\n-                    &hir::ItemKind::Mod(ref m) => m.item_ids.clone(),\n-                    _ => panic!(\"Unexpected item {:?} in path {:?} path\")\n-                };\n-                break;\n-            }\n-        }\n-    }\n-}\n-\n-pub fn path_to_def(tcx: TyCtxt<'_>, path: &[Symbol]) -> Option<DefId> {\n-    let crates = tcx.crates();\n-\n-    let krate = crates\n-        .iter()\n-        .find(|&&krate| tcx.crate_name(krate) == path[0]);\n-\n-    if let Some(krate) = krate {\n-        let krate = DefId {\n-            krate: *krate,\n-            index: CRATE_DEF_INDEX,\n-        };\n-        let mut items = tcx.item_children(krate);\n-        let mut path_it = path.iter().skip(1).peekable();\n-\n-        loop {\n-            let segment = path_it.next()?;\n-\n-            for item in mem::replace(&mut items, &[]).iter() {\n-                if item.ident.name == *segment {\n-                    if path_it.peek().is_none() {\n-                        return match item.res {\n-                            def::Res::Def(DefKind::Trait, did) => Some(did),\n-                            _ => None,\n-                        }\n-                    }\n-\n-                    items = tcx.item_children(item.res.def_id());\n-                    break;\n-                }\n-            }\n-        }\n-    } else {\n-        None\n-    }\n-}\n-\n-// End of code copied from rust-clippy\n-\n #[derive(Eq, PartialEq, Hash, Copy, Clone, Debug)]\n enum RegionTarget<'tcx> {\n     Region(Region<'tcx>),"}, {"sha": "7da501ef6cb7412943201f6baae81de558d2120d", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155", "patch": "@@ -67,13 +67,13 @@ pub struct DocContext<'tcx> {\n     pub ct_substs: RefCell<FxHashMap<DefId, clean::Constant>>,\n     /// Table DefId of `impl Trait` in argument position -> bounds\n     pub impl_trait_bounds: RefCell<FxHashMap<DefId, Vec<clean::GenericBound>>>,\n-    pub send_trait: Option<DefId>,\n     pub fake_def_ids: RefCell<FxHashMap<CrateNum, DefId>>,\n     pub all_fake_def_ids: RefCell<FxHashSet<DefId>>,\n     /// Auto-trait or blanket impls processed so far, as `(self_ty, trait_def_id)`.\n     // FIXME(eddyb) make this a `ty::TraitRef<'tcx>` set.\n     pub generated_synthetics: RefCell<FxHashSet<(Ty<'tcx>, DefId)>>,\n     pub all_traits: Vec<DefId>,\n+    pub auto_traits: Vec<DefId>,\n }\n \n impl<'tcx> DocContext<'tcx> {\n@@ -367,15 +367,10 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                                     .collect()\n             };\n \n-            let send_trait = if crate_name == Some(\"core\".to_string()) {\n-                clean::path_to_def_local(tcx, &[sym::marker, sym::Send])\n-            } else {\n-                clean::path_to_def(tcx, &[sym::core, sym::marker, sym::Send])\n-            };\n-\n             let mut renderinfo = RenderInfo::default();\n             renderinfo.access_levels = access_levels;\n \n+            let all_traits = tcx.all_traits(LOCAL_CRATE).to_vec();\n             let ctxt = DocContext {\n                 tcx,\n                 resolver,\n@@ -388,11 +383,13 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 lt_substs: Default::default(),\n                 ct_substs: Default::default(),\n                 impl_trait_bounds: Default::default(),\n-                send_trait: send_trait,\n                 fake_def_ids: Default::default(),\n                 all_fake_def_ids: Default::default(),\n                 generated_synthetics: Default::default(),\n-                all_traits: tcx.all_traits(LOCAL_CRATE).to_vec(),\n+                auto_traits: all_traits.iter().cloned().filter(|trait_def_id| {\n+                    tcx.trait_is_auto(*trait_def_id)\n+                }).collect(),\n+                all_traits,\n             };\n             debug!(\"crate: {:?}\", tcx.hir().krate());\n "}, {"sha": "d95f3a80365cd32afd3726a71a0f5d7aee3cdd1f", "filename": "src/test/rustdoc/empty-section.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Ftest%2Frustdoc%2Fempty-section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Ftest%2Frustdoc%2Fempty-section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-section.rs?ref=9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155", "patch": "@@ -8,3 +8,6 @@ pub struct Foo;\n // @!has - 'Auto Trait Implementations'\n impl !Send for Foo {}\n impl !Sync for Foo {}\n+impl !std::marker::Unpin for Foo {}\n+impl !std::panic::RefUnwindSafe for Foo {}\n+impl !std::panic::UnwindSafe for Foo {}"}, {"sha": "74502be622a4f0659f8c7309a21f9703640394b2", "filename": "src/test/rustdoc/issue-50159.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Ftest%2Frustdoc%2Fissue-50159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Ftest%2Frustdoc%2Fissue-50159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-50159.rs?ref=9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155", "patch": "@@ -14,7 +14,7 @@ impl<B, C> Signal2 for B where B: Signal<Item = C> {\n // @has - '//code' 'impl<B> Send for Switch<B> where <B as Signal>::Item: Send'\n // @has - '//code' 'impl<B> Sync for Switch<B> where <B as Signal>::Item: Sync'\n // @count - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]' 0\n-// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 2\n+// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 5\n pub struct Switch<B: Signal> {\n     pub inner: <B as Signal2>::Item2,\n }"}, {"sha": "38de5316b6cf55276451f87e2b852081ace7f1d5", "filename": "src/test/rustdoc/synthetic_auto/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs?ref=9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155", "patch": "@@ -2,7 +2,7 @@\n // @has - '//code' 'impl<T> Send for Foo<T> where T: Send'\n // @has - '//code' 'impl<T> Sync for Foo<T> where T: Sync'\n // @count - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]' 0\n-// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 2\n+// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 5\n pub struct Foo<T> {\n     field: T,\n }"}, {"sha": "341dd572f81c8802ff73e747eda4ac4a95753843", "filename": "src/test/rustdoc/synthetic_auto/crate-local.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcrate-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcrate-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcrate-local.rs?ref=9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155", "patch": "@@ -0,0 +1,9 @@\n+#![feature(optin_builtin_traits)]\n+\n+pub auto trait Banana {}\n+\n+// @has crate_local/struct.Peach.html\n+// @has - '//code' 'impl Banana for Peach'\n+// @has - '//code' 'impl Send for Peach'\n+// @has - '//code' 'impl Sync for Peach'\n+pub struct Peach;"}, {"sha": "458403462d64a9053ad9e0fb7a0716f3d9e53f14", "filename": "src/test/rustdoc/synthetic_auto/manual.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs?ref=9d5b6efdf62dbcd7bdf8e78a5f69c1b6678fd155", "patch": "@@ -6,7 +6,7 @@\n // 'impl<T> Send for Foo<T>'\n //\n // @count - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]' 1\n-// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 1\n+// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 4\n pub struct Foo<T> {\n     field: T,\n }"}]}