{"sha": "8e150816c2098f568717f4ebe5d0ac193671ae5b", "node_id": "C_kwDOAAsO6NoAKDhlMTUwODE2YzIwOThmNTY4NzE3ZjRlYmU1ZDBhYzE5MzY3MWFlNWI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-21T14:05:17Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-21T14:05:17Z"}, "message": "Remove unused field in ItemKind::KeywordItem", "tree": {"sha": "d0eb0a841b2b383f90088786a0a2d10f9da3108c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0eb0a841b2b383f90088786a0a2d10f9da3108c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e150816c2098f568717f4ebe5d0ac193671ae5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e150816c2098f568717f4ebe5d0ac193671ae5b", "html_url": "https://github.com/rust-lang/rust/commit/8e150816c2098f568717f4ebe5d0ac193671ae5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e150816c2098f568717f4ebe5d0ac193671ae5b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d60d88fe5cd55496b9ccb1511a9af4994b7c43d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d60d88fe5cd55496b9ccb1511a9af4994b7c43d0", "html_url": "https://github.com/rust-lang/rust/commit/d60d88fe5cd55496b9ccb1511a9af4994b7c43d0"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "4dd79af56300f78292f26974d0e9a24c04e7692c", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=8e150816c2098f568717f4ebe5d0ac193671ae5b", "patch": "@@ -496,8 +496,7 @@ impl Item {\n         // Primitives and Keywords are written in the source code as private modules.\n         // The modules need to be private so that nobody actually uses them, but the\n         // keywords and primitives that they are documenting are public.\n-        let visibility = if matches!(&kind, ItemKind::KeywordItem(..) | ItemKind::PrimitiveItem(..))\n-        {\n+        let visibility = if matches!(&kind, ItemKind::KeywordItem | ItemKind::PrimitiveItem(..)) {\n             Visibility::Public\n         } else {\n             cx.tcx.visibility(def_id).clean(cx)\n@@ -769,7 +768,7 @@ pub(crate) enum ItemKind {\n     AssocTypeItem(Typedef, Vec<GenericBound>),\n     /// An item that has been stripped by a rustdoc pass\n     StrippedItem(Box<ItemKind>),\n-    KeywordItem(Symbol),\n+    KeywordItem,\n }\n \n impl ItemKind {\n@@ -808,7 +807,7 @@ impl ItemKind {\n             | TyAssocTypeItem(..)\n             | AssocTypeItem(..)\n             | StrippedItem(_)\n-            | KeywordItem(_) => [].iter(),\n+            | KeywordItem => [].iter(),\n         }\n     }\n }"}, {"sha": "fa449a21b0c93dd2c909d333fe4247c062e76b66", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=8e150816c2098f568717f4ebe5d0ac193671ae5b", "patch": "@@ -69,7 +69,7 @@ pub(crate) fn krate(cx: &mut DocContext<'_>) -> Crate {\n             )\n         }));\n         m.items.extend(keywords.into_iter().map(|(def_id, kw)| {\n-            Item::from_def_id_and_parts(def_id, Some(kw), ItemKind::KeywordItem(kw), cx)\n+            Item::from_def_id_and_parts(def_id, Some(kw), ItemKind::KeywordItem, cx)\n         }));\n     }\n "}, {"sha": "c93897236db691f0e326052ac75837d25d285b18", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=8e150816c2098f568717f4ebe5d0ac193671ae5b", "patch": "@@ -69,7 +69,7 @@ pub(crate) trait DocFolder: Sized {\n             | AssocConstItem(..)\n             | TyAssocTypeItem(..)\n             | AssocTypeItem(..)\n-            | KeywordItem(_) => kind,\n+            | KeywordItem => kind,\n         }\n     }\n "}, {"sha": "b9774eb70ea02e8fbcc131c12ce835d23bd78b77", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=8e150816c2098f568717f4ebe5d0ac193671ae5b", "patch": "@@ -413,7 +413,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n             | clean::TyAssocTypeItem(..)\n             | clean::AssocTypeItem(..)\n             | clean::StrippedItem(..)\n-            | clean::KeywordItem(..) => {\n+            | clean::KeywordItem => {\n                 // FIXME: Do these need handling?\n                 // The person writing this comment doesn't know.\n                 // So would rather leave them to an expert,"}, {"sha": "0a7ee2005915baa6cbb977aefd12b44361962fdf", "filename": "src/librustdoc/formats/item_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fitem_type.rs?ref=8e150816c2098f568717f4ebe5d0ac193671ae5b", "patch": "@@ -91,7 +91,7 @@ impl<'a> From<&'a clean::Item> for ItemType {\n             clean::TyAssocConstItem(..) | clean::AssocConstItem(..) => ItemType::AssocConst,\n             clean::TyAssocTypeItem(..) | clean::AssocTypeItem(..) => ItemType::AssocType,\n             clean::ForeignTypeItem => ItemType::ForeignType,\n-            clean::KeywordItem(..) => ItemType::Keyword,\n+            clean::KeywordItem => ItemType::Keyword,\n             clean::TraitAliasItem(..) => ItemType::TraitAlias,\n             clean::ProcMacroItem(ref mac) => match mac.kind {\n                 MacroKind::Bang => ItemType::Macro,"}, {"sha": "0cee114b346b2aa4790a361daa3ebccf65069ad7", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=8e150816c2098f568717f4ebe5d0ac193671ae5b", "patch": "@@ -104,7 +104,7 @@ pub(super) fn print_item(\n         clean::StaticItem(..) | clean::ForeignStaticItem(..) => \"Static \",\n         clean::ConstantItem(..) => \"Constant \",\n         clean::ForeignTypeItem => \"Foreign Type \",\n-        clean::KeywordItem(..) => \"Keyword \",\n+        clean::KeywordItem => \"Keyword \",\n         clean::OpaqueTyItem(..) => \"Opaque Type \",\n         clean::TraitAliasItem(..) => \"Trait Alias \",\n         _ => {\n@@ -175,7 +175,7 @@ pub(super) fn print_item(\n         clean::StaticItem(ref i) | clean::ForeignStaticItem(ref i) => item_static(buf, cx, item, i),\n         clean::ConstantItem(ref c) => item_constant(buf, cx, item, c),\n         clean::ForeignTypeItem => item_foreign_type(buf, cx, item),\n-        clean::KeywordItem(_) => item_keyword(buf, cx, item),\n+        clean::KeywordItem => item_keyword(buf, cx, item),\n         clean::OpaqueTyItem(ref e) => item_opaque_ty(buf, cx, item, e),\n         clean::TraitAliasItem(ref ta) => item_trait_alias(buf, cx, item, ta),\n         _ => {"}, {"sha": "418d7c8353513527fa24aa4e86ec9cf21064af87", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=8e150816c2098f568717f4ebe5d0ac193671ae5b", "patch": "@@ -43,7 +43,7 @@ impl JsonRenderer<'_> {\n         let span = item.span(self.tcx);\n         let clean::Item { name, attrs: _, kind: _, visibility, item_id, cfg: _ } = item;\n         let inner = match *item.kind {\n-            clean::KeywordItem(_) => return None,\n+            clean::KeywordItem => return None,\n             clean::StrippedItem(ref inner) => {\n                 match &**inner {\n                     // We document non-empty stripped modules as with `Module::is_stripped` set to\n@@ -269,7 +269,7 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n             default: Some(t.item_type.unwrap_or(t.type_).into_tcx(tcx)),\n         },\n         // `convert_item` early returns `None` for stripped items and keywords.\n-        KeywordItem(_) => unreachable!(),\n+        KeywordItem => unreachable!(),\n         StrippedItem(inner) => {\n             match *inner {\n                 ModuleItem(m) => ItemEnum::Module(Module {"}, {"sha": "e80a94fe749de79e09bf62e92117d2943067905a", "filename": "src/librustdoc/passes/check_doc_test_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs?ref=8e150816c2098f568717f4ebe5d0ac193671ae5b", "patch": "@@ -69,7 +69,7 @@ pub(crate) fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -\n                 | clean::ExternCrateItem { .. }\n                 | clean::ImportItem(_)\n                 | clean::PrimitiveItem(_)\n-                | clean::KeywordItem(_)\n+                | clean::KeywordItem\n                 // check for trait impl\n                 | clean::ImplItem(clean::Impl { trait_: Some(_), .. })\n         )"}, {"sha": "0d419042a10a47508097a8bf2102445f2a4cab54", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=8e150816c2098f568717f4ebe5d0ac193671ae5b", "patch": "@@ -98,7 +98,7 @@ impl<'a> DocFolder for Stripper<'a> {\n             clean::PrimitiveItem(..) => {}\n \n             // Keywords are never stripped\n-            clean::KeywordItem(..) => {}\n+            clean::KeywordItem => {}\n         }\n \n         let fastreturn = match *i.kind {"}, {"sha": "0bb41977c97cac4d2bab4b8f61c02ca82898a663", "filename": "src/librustdoc/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e150816c2098f568717f4ebe5d0ac193671ae5b/src%2Flibrustdoc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit.rs?ref=8e150816c2098f568717f4ebe5d0ac193671ae5b", "patch": "@@ -43,7 +43,7 @@ pub(crate) trait DocVisitor: Sized {\n             | AssocConstItem(..)\n             | TyAssocTypeItem(..)\n             | AssocTypeItem(..)\n-            | KeywordItem(_) => {}\n+            | KeywordItem => {}\n         }\n     }\n "}]}