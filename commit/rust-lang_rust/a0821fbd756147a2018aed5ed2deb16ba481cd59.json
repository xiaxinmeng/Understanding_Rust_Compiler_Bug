{"sha": "a0821fbd756147a2018aed5ed2deb16ba481cd59", "node_id": "C_kwDOAAsO6NoAKGEwODIxZmJkNzU2MTQ3YTIwMThhZWQ1ZWQyZGViMTZiYTQ4MWNkNTk", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-04T21:28:23Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-04T21:28:23Z"}, "message": "Don't lint `derive_partial_eq_without_eq` on private types", "tree": {"sha": "c56db65d2c8f564e4c09f293a81975c2b31f9744", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c56db65d2c8f564e4c09f293a81975c2b31f9744"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0821fbd756147a2018aed5ed2deb16ba481cd59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0821fbd756147a2018aed5ed2deb16ba481cd59", "html_url": "https://github.com/rust-lang/rust/commit/a0821fbd756147a2018aed5ed2deb16ba481cd59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0821fbd756147a2018aed5ed2deb16ba481cd59/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9ddce8a223cb9916389c039777b6966ea448dc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ddce8a223cb9916389c039777b6966ea448dc8", "html_url": "https://github.com/rust-lang/rust/commit/d9ddce8a223cb9916389c039777b6966ea448dc8"}], "stats": {"total": 131, "additions": 95, "deletions": 36}, "files": [{"sha": "a98060fe9a655da792925d510d69f84294830ed9", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0821fbd756147a2018aed5ed2deb16ba481cd59/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0821fbd756147a2018aed5ed2deb16ba481cd59/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=a0821fbd756147a2018aed5ed2deb16ba481cd59", "patch": "@@ -11,7 +11,9 @@ use rustc_hir::{\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::subst::GenericArg;\n-use rustc_middle::ty::{self, BoundConstness, ImplPolarity, ParamEnv, PredicateKind, TraitPredicate, TraitRef, Ty};\n+use rustc_middle::ty::{\n+    self, BoundConstness, ImplPolarity, ParamEnv, PredicateKind, TraitPredicate, TraitRef, Ty, Visibility,\n+};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n@@ -459,6 +461,7 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n fn check_partial_eq_without_eq<'tcx>(cx: &LateContext<'tcx>, span: Span, trait_ref: &hir::TraitRef<'_>, ty: Ty<'tcx>) {\n     if_chain! {\n         if let ty::Adt(adt, substs) = ty.kind();\n+        if cx.tcx.visibility(adt.did()) == Visibility::Public;\n         if let Some(eq_trait_def_id) = cx.tcx.get_diagnostic_item(sym::Eq);\n         if let Some(peq_trait_def_id) = cx.tcx.get_diagnostic_item(sym::PartialEq);\n         if let Some(def_id) = trait_ref.trait_def_id();"}, {"sha": "25e7050d08e0f278fea302a0ad3b501be495dc54", "filename": "tests/ui/derive_partial_eq_without_eq.fixed", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a0821fbd756147a2018aed5ed2deb16ba481cd59/tests%2Fui%2Fderive_partial_eq_without_eq.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a0821fbd756147a2018aed5ed2deb16ba481cd59/tests%2Fui%2Fderive_partial_eq_without_eq.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_partial_eq_without_eq.fixed?ref=a0821fbd756147a2018aed5ed2deb16ba481cd59", "patch": "@@ -4,28 +4,28 @@\n #![warn(clippy::derive_partial_eq_without_eq)]\n \n // Don't warn on structs that aren't PartialEq\n-struct NotPartialEq {\n+pub struct NotPartialEq {\n     foo: u32,\n     bar: String,\n }\n \n // Eq can be derived but is missing\n #[derive(Debug, PartialEq, Eq)]\n-struct MissingEq {\n+pub struct MissingEq {\n     foo: u32,\n     bar: String,\n }\n \n // Eq is derived\n #[derive(PartialEq, Eq)]\n-struct NotMissingEq {\n+pub struct NotMissingEq {\n     foo: u32,\n     bar: String,\n }\n \n // Eq is manually implemented\n #[derive(PartialEq)]\n-struct ManualEqImpl {\n+pub struct ManualEqImpl {\n     foo: u32,\n     bar: String,\n }\n@@ -34,13 +34,13 @@ impl Eq for ManualEqImpl {}\n \n // Cannot be Eq because f32 isn't Eq\n #[derive(PartialEq)]\n-struct CannotBeEq {\n+pub struct CannotBeEq {\n     foo: u32,\n     bar: f32,\n }\n \n // Don't warn if PartialEq is manually implemented\n-struct ManualPartialEqImpl {\n+pub struct ManualPartialEqImpl {\n     foo: u32,\n     bar: String,\n }\n@@ -53,52 +53,74 @@ impl PartialEq for ManualPartialEqImpl {\n \n // Generic fields should be properly checked for Eq-ness\n #[derive(PartialEq)]\n-struct GenericNotEq<T: Eq, U: PartialEq> {\n+pub struct GenericNotEq<T: Eq, U: PartialEq> {\n     foo: T,\n     bar: U,\n }\n \n #[derive(PartialEq, Eq)]\n-struct GenericEq<T: Eq, U: Eq> {\n+pub struct GenericEq<T: Eq, U: Eq> {\n     foo: T,\n     bar: U,\n }\n \n #[derive(PartialEq, Eq)]\n-struct TupleStruct(u32);\n+pub struct TupleStruct(u32);\n \n #[derive(PartialEq, Eq)]\n-struct GenericTupleStruct<T: Eq>(T);\n+pub struct GenericTupleStruct<T: Eq>(T);\n \n #[derive(PartialEq)]\n-struct TupleStructNotEq(f32);\n+pub struct TupleStructNotEq(f32);\n \n #[derive(PartialEq, Eq)]\n-enum Enum {\n+pub enum Enum {\n     Foo(u32),\n     Bar { a: String, b: () },\n }\n \n #[derive(PartialEq, Eq)]\n-enum GenericEnum<T: Eq, U: Eq, V: Eq> {\n+pub enum GenericEnum<T: Eq, U: Eq, V: Eq> {\n     Foo(T),\n     Bar { a: U, b: V },\n }\n \n #[derive(PartialEq)]\n-enum EnumNotEq {\n+pub enum EnumNotEq {\n     Foo(u32),\n     Bar { a: String, b: f32 },\n }\n \n // Ensure that rustfix works properly when `PartialEq` has other derives on either side\n #[derive(Debug, PartialEq, Eq, Clone)]\n-struct RustFixWithOtherDerives;\n+pub struct RustFixWithOtherDerives;\n \n #[derive(PartialEq)]\n-struct Generic<T>(T);\n+pub struct Generic<T>(T);\n \n #[derive(PartialEq, Eq)]\n-struct GenericPhantom<T>(core::marker::PhantomData<T>);\n+pub struct GenericPhantom<T>(core::marker::PhantomData<T>);\n+\n+mod _hidden {\n+    #[derive(PartialEq, Eq)]\n+    pub struct Reexported;\n+\n+    #[derive(PartialEq, Eq)]\n+    pub struct InPubFn;\n+\n+    #[derive(PartialEq)]\n+    pub(crate) struct PubCrate;\n+\n+    #[derive(PartialEq)]\n+    pub(super) struct PubSuper;\n+}\n+\n+pub use _hidden::Reexported;\n+pub fn _from_mod() -> _hidden::InPubFn {\n+    _hidden::InPubFn\n+}\n+\n+#[derive(PartialEq)]\n+struct InternalTy;\n \n fn main() {}"}, {"sha": "88d6fbd1af7e8bf3ca35f614e1022dcdaca00be2", "filename": "tests/ui/derive_partial_eq_without_eq.rs", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a0821fbd756147a2018aed5ed2deb16ba481cd59/tests%2Fui%2Fderive_partial_eq_without_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0821fbd756147a2018aed5ed2deb16ba481cd59/tests%2Fui%2Fderive_partial_eq_without_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_partial_eq_without_eq.rs?ref=a0821fbd756147a2018aed5ed2deb16ba481cd59", "patch": "@@ -4,28 +4,28 @@\n #![warn(clippy::derive_partial_eq_without_eq)]\n \n // Don't warn on structs that aren't PartialEq\n-struct NotPartialEq {\n+pub struct NotPartialEq {\n     foo: u32,\n     bar: String,\n }\n \n // Eq can be derived but is missing\n #[derive(Debug, PartialEq)]\n-struct MissingEq {\n+pub struct MissingEq {\n     foo: u32,\n     bar: String,\n }\n \n // Eq is derived\n #[derive(PartialEq, Eq)]\n-struct NotMissingEq {\n+pub struct NotMissingEq {\n     foo: u32,\n     bar: String,\n }\n \n // Eq is manually implemented\n #[derive(PartialEq)]\n-struct ManualEqImpl {\n+pub struct ManualEqImpl {\n     foo: u32,\n     bar: String,\n }\n@@ -34,13 +34,13 @@ impl Eq for ManualEqImpl {}\n \n // Cannot be Eq because f32 isn't Eq\n #[derive(PartialEq)]\n-struct CannotBeEq {\n+pub struct CannotBeEq {\n     foo: u32,\n     bar: f32,\n }\n \n // Don't warn if PartialEq is manually implemented\n-struct ManualPartialEqImpl {\n+pub struct ManualPartialEqImpl {\n     foo: u32,\n     bar: String,\n }\n@@ -53,52 +53,74 @@ impl PartialEq for ManualPartialEqImpl {\n \n // Generic fields should be properly checked for Eq-ness\n #[derive(PartialEq)]\n-struct GenericNotEq<T: Eq, U: PartialEq> {\n+pub struct GenericNotEq<T: Eq, U: PartialEq> {\n     foo: T,\n     bar: U,\n }\n \n #[derive(PartialEq)]\n-struct GenericEq<T: Eq, U: Eq> {\n+pub struct GenericEq<T: Eq, U: Eq> {\n     foo: T,\n     bar: U,\n }\n \n #[derive(PartialEq)]\n-struct TupleStruct(u32);\n+pub struct TupleStruct(u32);\n \n #[derive(PartialEq)]\n-struct GenericTupleStruct<T: Eq>(T);\n+pub struct GenericTupleStruct<T: Eq>(T);\n \n #[derive(PartialEq)]\n-struct TupleStructNotEq(f32);\n+pub struct TupleStructNotEq(f32);\n \n #[derive(PartialEq)]\n-enum Enum {\n+pub enum Enum {\n     Foo(u32),\n     Bar { a: String, b: () },\n }\n \n #[derive(PartialEq)]\n-enum GenericEnum<T: Eq, U: Eq, V: Eq> {\n+pub enum GenericEnum<T: Eq, U: Eq, V: Eq> {\n     Foo(T),\n     Bar { a: U, b: V },\n }\n \n #[derive(PartialEq)]\n-enum EnumNotEq {\n+pub enum EnumNotEq {\n     Foo(u32),\n     Bar { a: String, b: f32 },\n }\n \n // Ensure that rustfix works properly when `PartialEq` has other derives on either side\n #[derive(Debug, PartialEq, Clone)]\n-struct RustFixWithOtherDerives;\n+pub struct RustFixWithOtherDerives;\n \n #[derive(PartialEq)]\n-struct Generic<T>(T);\n+pub struct Generic<T>(T);\n \n #[derive(PartialEq, Eq)]\n-struct GenericPhantom<T>(core::marker::PhantomData<T>);\n+pub struct GenericPhantom<T>(core::marker::PhantomData<T>);\n+\n+mod _hidden {\n+    #[derive(PartialEq)]\n+    pub struct Reexported;\n+\n+    #[derive(PartialEq)]\n+    pub struct InPubFn;\n+\n+    #[derive(PartialEq)]\n+    pub(crate) struct PubCrate;\n+\n+    #[derive(PartialEq)]\n+    pub(super) struct PubSuper;\n+}\n+\n+pub use _hidden::Reexported;\n+pub fn _from_mod() -> _hidden::InPubFn {\n+    _hidden::InPubFn\n+}\n+\n+#[derive(PartialEq)]\n+struct InternalTy;\n \n fn main() {}"}, {"sha": "b762efc47442691519e5bddb0afc87705fd3ff12", "filename": "tests/ui/derive_partial_eq_without_eq.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a0821fbd756147a2018aed5ed2deb16ba481cd59/tests%2Fui%2Fderive_partial_eq_without_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0821fbd756147a2018aed5ed2deb16ba481cd59/tests%2Fui%2Fderive_partial_eq_without_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_partial_eq_without_eq.stderr?ref=a0821fbd756147a2018aed5ed2deb16ba481cd59", "patch": "@@ -42,5 +42,17 @@ error: you are deriving `PartialEq` and can implement `Eq`\n LL | #[derive(Debug, PartialEq, Clone)]\n    |                 ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n \n-error: aborting due to 7 previous errors\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:105:14\n+   |\n+LL |     #[derive(PartialEq)]\n+   |              ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:108:14\n+   |\n+LL |     #[derive(PartialEq)]\n+   |              ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: aborting due to 9 previous errors\n "}]}