{"sha": "9d5a5211a4ab83fb891c6eb32f6ed6d63b6b027f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNWE1MjExYTRhYjgzZmI4OTFjNmViMzJmNmVkNmQ2M2I2YjAyN2Y=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-31T12:34:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-31T12:34:44Z"}, "message": "Small cleanup", "tree": {"sha": "30b6673dd36269294611b295721a603c82fbd3ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30b6673dd36269294611b295721a603c82fbd3ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d5a5211a4ab83fb891c6eb32f6ed6d63b6b027f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5a5211a4ab83fb891c6eb32f6ed6d63b6b027f", "html_url": "https://github.com/rust-lang/rust/commit/9d5a5211a4ab83fb891c6eb32f6ed6d63b6b027f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d5a5211a4ab83fb891c6eb32f6ed6d63b6b027f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e48033d066b26cb9e85c94cf47e6b8e388176e0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e48033d066b26cb9e85c94cf47e6b8e388176e0a", "html_url": "https://github.com/rust-lang/rust/commit/e48033d066b26cb9e85c94cf47e6b8e388176e0a"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "9aa1e7eea2748954a8987f65c6087f2da6fd437a", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d5a5211a4ab83fb891c6eb32f6ed6d63b6b027f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5a5211a4ab83fb891c6eb32f6ed6d63b6b027f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=9d5a5211a4ab83fb891c6eb32f6ed6d63b6b027f", "patch": "@@ -1,7 +1,11 @@\n //! This module is responsible for implementing handlers for Lanuage Server Protocol.\n //! The majority of requests are fulfilled by calling into the `ra_ide` crate.\n \n-use std::{fmt::Write as _, io::Write as _};\n+use std::{\n+    fmt::Write as _,\n+    io::Write as _,\n+    process::{self, Stdio},\n+};\n \n use either::Either;\n use lsp_server::ErrorCode;\n@@ -582,21 +586,19 @@ pub fn handle_formatting(\n     let file_line_index = world.analysis().file_line_index(file_id)?;\n     let end_position = TextUnit::of_str(&file).conv_with(&file_line_index);\n \n-    use std::process;\n     let mut rustfmt = process::Command::new(\"rustfmt\");\n     if let Some(&crate_id) = crate_ids.first() {\n         // Assume all crates are in the same edition\n         let edition = world.analysis().crate_edition(crate_id)?;\n         rustfmt.args(&[\"--edition\", &edition.to_string()]);\n     }\n-    rustfmt.stdin(process::Stdio::piped()).stdout(process::Stdio::piped());\n \n     if let Ok(path) = params.text_document.uri.to_file_path() {\n         if let Some(parent) = path.parent() {\n             rustfmt.current_dir(parent);\n         }\n     }\n-    let mut rustfmt = rustfmt.spawn()?;\n+    let mut rustfmt = rustfmt.stdin(Stdio::piped()).stdout(Stdio::piped()).spawn()?;\n \n     rustfmt.stdin.as_mut().unwrap().write_all(file.as_bytes())?;\n "}]}