{"sha": "c1416f88279ddf6223966c6f1102470c12a6f248", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNDE2Zjg4Mjc5ZGRmNjIyMzk2NmM2ZjExMDI0NzBjMTJhNmYyNDg=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-13T13:35:24Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-13T13:35:24Z"}, "message": "Merge pull request #154 from birkenfeld/travis_check_script\n\nupdate_lints: add a check mode for travis runs", "tree": {"sha": "3c0c95090d975c196516befed415bffa328bc9d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c0c95090d975c196516befed415bffa328bc9d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1416f88279ddf6223966c6f1102470c12a6f248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1416f88279ddf6223966c6f1102470c12a6f248", "html_url": "https://github.com/rust-lang/rust/commit/c1416f88279ddf6223966c6f1102470c12a6f248", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1416f88279ddf6223966c6f1102470c12a6f248/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d64553bc63b059b8685bf88e7cfc7e1fce2d45d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d64553bc63b059b8685bf88e7cfc7e1fce2d45d", "html_url": "https://github.com/rust-lang/rust/commit/1d64553bc63b059b8685bf88e7cfc7e1fce2d45d"}, {"sha": "e03b71606ba7682e46603302a679ecdc30ce8373", "url": "https://api.github.com/repos/rust-lang/rust/commits/e03b71606ba7682e46603302a679ecdc30ce8373", "html_url": "https://github.com/rust-lang/rust/commit/e03b71606ba7682e46603302a679ecdc30ce8373"}], "stats": {"total": 90, "additions": 54, "deletions": 36}, "files": [{"sha": "e14785c9211fa365e2347c48fd23e64f8ff264c6", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1416f88279ddf6223966c6f1102470c12a6f248/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c1416f88279ddf6223966c6f1102470c12a6f248/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=c1416f88279ddf6223966c6f1102470c12a6f248", "patch": "@@ -3,5 +3,6 @@ rust: nightly\n sudo: false\n \n script:\n+ - python util/update_lints.py -c\n  - cargo build\n  - cargo test"}, {"sha": "f6b65b952d49fe674e7cd26b466848da5297b752", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1416f88279ddf6223966c6f1102470c12a6f248/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c1416f88279ddf6223966c6f1102470c12a6f248/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c1416f88279ddf6223966c6f1102470c12a6f248", "patch": "@@ -38,8 +38,8 @@ redundant_closure    | warn    | using redundant closures, i.e. `|a| foo(a)` (wh\n result_unwrap_used   | allow   | using `Result.unwrap()`, which might be better handled\n single_match         | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n str_to_string        | warn    | using `to_string()` on a str, which should be `to_owned()`\n-string_add           | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n-string_add_assign    | allow   | expressions of the form `x = x + ..` where x is a `String`\n+string_add           | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n+string_add_assign    | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n string_to_string     | warn    | calling `String.to_string()` which is a no-op\n toplevel_ref_arg     | warn    | a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n zero_width_space     | deny    | using a zero-width space in a string literal, which is confusing"}, {"sha": "7b7bab49b5d7a0d9b70e9de1a9336acf48088738", "filename": "src/strings.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1416f88279ddf6223966c6f1102470c12a6f248/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1416f88279ddf6223966c6f1102470c12a6f248/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=c1416f88279ddf6223966c6f1102470c12a6f248", "patch": "@@ -14,13 +14,13 @@ use utils::{match_def_path, span_lint, walk_ptrs_ty, get_parent_expr};\n declare_lint! {\n     pub STRING_ADD_ASSIGN,\n     Allow,\n-    \"expressions of the form `x = x + ..` where x is a `String`\"\n+    \"using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\"\n }\n \n declare_lint! {\n     pub STRING_ADD,\n     Allow,\n-    \"using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\"\n+    \"using `x + ..` where x is a `String`; suggests using `push_str()` instead\"\n }\n \n #[derive(Copy, Clone)]\n@@ -48,13 +48,13 @@ impl LintPass for StringAdd {\n                 //TODO check for duplicates\n                  span_lint(cx, STRING_ADD, e.span,\n                         \"you added something to a string. \\\n-                        Consider using `String::push_str()` instead.\")\n+                         Consider using `String::push_str()` instead\")\n             }\n         } else if let &ExprAssign(ref target, ref  src) = &e.node {\n             if is_string(cx, target) && is_add(src, target) {\n                 span_lint(cx, STRING_ADD_ASSIGN, e.span,\n                     \"you assigned the result of adding something to this string. \\\n-                    Consider using `String::push_str()` instead.\")\n+                     Consider using `String::push_str()` instead\")\n             }\n         }\n     }"}, {"sha": "ed26637059f735ccd95b07a2fdb492418f9bc1e0", "filename": "util/update_lints.py", "status": "modified", "additions": 47, "deletions": 30, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c1416f88279ddf6223966c6f1102470c12a6f248/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/c1416f88279ddf6223966c6f1102470c12a6f248/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=c1416f88279ddf6223966c6f1102470c12a6f248", "patch": "@@ -1,5 +1,7 @@\n+#!/usr/bin/env python\n # Generate a Markdown table of all lints, and put it in README.md.\n # With -n option, only print the new table to stdout.\n+# With -c option, print a warning and set exit status to 1 if a file would be changed.\n \n import os\n import re\n@@ -31,27 +33,27 @@ def collect(lints, fn):\n                       desc.replace('\\\\\"', '\"')))\n \n \n-def write_tbl(lints, fp):\n+def gen_table(lints):\n     \"\"\"Write lint table in Markdown format.\"\"\"\n     # first and third column widths\n     w_name = max(len(l[1]) for l in lints)\n     w_desc = max(len(l[3]) for l in lints)\n     # header and underline\n-    fp.write('%-*s | default | meaning\\n' % (w_name, 'name'))\n-    fp.write('%s-|-%s-|-%s\\n' % ('-' * w_name, '-' * 7, '-' * w_desc))\n+    yield '%-*s | default | meaning\\n' % (w_name, 'name')\n+    yield '%s-|-%s-|-%s\\n' % ('-' * w_name, '-' * 7, '-' * w_desc)\n     # one table row per lint\n     for (_, name, default, meaning) in sorted(lints, key=lambda l: l[1]):\n-        fp.write('%-*s | %-7s | %s\\n' % (w_name, name, default, meaning))\n+        yield '%-*s | %-7s | %s\\n' % (w_name, name, default, meaning)\n \n \n-def write_group(lints, fp):\n+def gen_group(lints):\n     \"\"\"Write lint group (list of all lints in the form module::NAME).\"\"\"\n     for (module, name, _, _) in sorted(lints):\n-        fp.write('        %s::%s,\\n' % (module, name.upper()))\n+        yield '        %s::%s,\\n' % (module, name.upper())\n \n \n def replace_region(fn, region_start, region_end, callback,\n-                   replace_start=True):\n+                   replace_start=True, write_back=True):\n     \"\"\"Replace a region in a file delimited by two lines matching regexes.\n \n     A callback is called to write the new region.  If `replace_start` is true,\n@@ -63,24 +65,32 @@ def replace_region(fn, region_start, region_end, callback,\n         lines = list(fp)\n \n     # replace old region with new region\n-    with open(fn, 'w') as fp:\n-        in_old_region = False\n-        for line in lines:\n-            if in_old_region:\n-                if re.search(region_end, line):\n-                    in_old_region = False\n-                    fp.write(line)\n-            elif re.search(region_start, line):\n-                if not replace_start:\n-                    fp.write(line)\n-                # old region starts here\n-                in_old_region = True\n-                callback(fp)\n-            else:\n-                fp.write(line)\n-\n-\n-def main(print_only=False):\n+    new_lines = []\n+    in_old_region = False\n+    for line in lines:\n+        if in_old_region:\n+            if re.search(region_end, line):\n+                in_old_region = False\n+                new_lines.extend(callback())\n+                new_lines.append(line)\n+        elif re.search(region_start, line):\n+            if not replace_start:\n+                new_lines.append(line)\n+            # old region starts here\n+            in_old_region = True\n+        else:\n+            new_lines.append(line)\n+\n+    # write back to file\n+    if write_back:\n+        with open(fn, 'w') as fp:\n+            fp.writelines(new_lines)\n+\n+    # if something changed, return true\n+    return lines != new_lines\n+\n+\n+def main(print_only=False, check=False):\n     lints = []\n \n     # check directory\n@@ -95,16 +105,23 @@ def main(print_only=False):\n                 collect(lints, os.path.join(root, fn))\n \n     if print_only:\n-        write_tbl(lints, sys.stdout)\n+        sys.stdout.writelines(gen_table(lints))\n         return\n \n     # replace table in README.md\n-    replace_region('README.md', r'^name +\\|', '^$', lambda fp: write_tbl(lints, fp))\n+    changed = replace_region('README.md', r'^name +\\|', '^$',\n+                             lambda: gen_table(lints),\n+                             write_back=not check)\n \n     # same for \"clippy\" lint collection\n-    replace_region('src/lib.rs', r'reg.register_lint_group\\(\"clippy\"', r'\\]\\);',\n-                   lambda fp: write_group(lints, fp), replace_start=False)\n+    changed |= replace_region('src/lib.rs', r'reg.register_lint_group\\(\"clippy\"', r'\\]\\);',\n+                              lambda: gen_group(lints), replace_start=False,\n+                              write_back=not check)\n+\n+    if check and changed:\n+        print('Please run util/update_lints.py to regenerate lints lists.')\n+        return 1\n \n \n if __name__ == '__main__':\n-    main(print_only='-n' in sys.argv)\n+    sys.exit(main(print_only='-n' in sys.argv, check='-c' in sys.argv))"}]}