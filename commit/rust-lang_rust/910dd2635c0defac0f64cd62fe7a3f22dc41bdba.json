{"sha": "910dd2635c0defac0f64cd62fe7a3f22dc41bdba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMGRkMjYzNWMwZGVmYWMwZjY0Y2Q2MmZlN2EzZjIyZGM0MWJkYmE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-07-10T15:01:11Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-08-15T13:35:43Z"}, "message": "debuginfo: Add a \"no_debug\" attribute that allows to exclude functions from debuginfo generation.", "tree": {"sha": "2d4bb03813d58b8df4c3ab49fc27da5fe925428c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d4bb03813d58b8df4c3ab49fc27da5fe925428c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/910dd2635c0defac0f64cd62fe7a3f22dc41bdba", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/910dd2635c0defac0f64cd62fe7a3f22dc41bdba", "html_url": "https://github.com/rust-lang/rust/commit/910dd2635c0defac0f64cd62fe7a3f22dc41bdba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/910dd2635c0defac0f64cd62fe7a3f22dc41bdba/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d12b6d444ec083466020777be5bb9f19e9a6d3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d12b6d444ec083466020777be5bb9f19e9a6d3a", "html_url": "https://github.com/rust-lang/rust/commit/1d12b6d444ec083466020777be5bb9f19e9a6d3a"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "f9c4e0fd769af19391c84d7f891d55559672c020", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/910dd2635c0defac0f64cd62fe7a3f22dc41bdba/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910dd2635c0defac0f64cd62fe7a3f22dc41bdba/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=910dd2635c0defac0f64cd62fe7a3f22dc41bdba", "patch": "@@ -578,6 +578,7 @@ impl LintPass for UnusedAttribute {\n             \"packed\",\n             \"static_assert\",\n             \"thread_local\",\n+            \"no_debug\",\n \n             // not used anywhere (!?) but apparently we want to keep them around\n             \"comment\","}, {"sha": "0c481b68f67fd5b24e42fd1a2ca917121b70c103", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/910dd2635c0defac0f64cd62fe7a3f22dc41bdba/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910dd2635c0defac0f64cd62fe7a3f22dc41bdba/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=910dd2635c0defac0f64cd62fe7a3f22dc41bdba", "patch": "@@ -1128,6 +1128,10 @@ pub fn create_function_debug_context(cx: &CrateContext,\n \n     let (ident, fn_decl, generics, top_level_block, span, has_path) = match fnitem {\n         ast_map::NodeItem(ref item) => {\n+            if contains_nodebug_attribute(item.attrs.as_slice()) {\n+                return FunctionDebugContext { repr: FunctionWithoutDebugInfo };\n+            }\n+\n             match item.node {\n                 ast::ItemFn(fn_decl, _, _, ref generics, top_level_block) => {\n                     (item.ident, fn_decl, generics, top_level_block, item.span, true)\n@@ -1141,6 +1145,12 @@ pub fn create_function_debug_context(cx: &CrateContext,\n         ast_map::NodeImplItem(ref item) => {\n             match **item {\n                 ast::MethodImplItem(ref method) => {\n+                    if contains_nodebug_attribute(method.attrs.as_slice()) {\n+                        return FunctionDebugContext {\n+                            repr: FunctionWithoutDebugInfo\n+                        };\n+                    }\n+\n                     (method.pe_ident(),\n                      method.pe_fn_decl(),\n                      method.pe_generics(),\n@@ -1173,6 +1183,12 @@ pub fn create_function_debug_context(cx: &CrateContext,\n         ast_map::NodeTraitItem(ref trait_method) => {\n             match **trait_method {\n                 ast::ProvidedMethod(ref method) => {\n+                    if contains_nodebug_attribute(method.attrs.as_slice()) {\n+                        return FunctionDebugContext {\n+                            repr: FunctionWithoutDebugInfo\n+                        };\n+                    }\n+\n                     (method.pe_ident(),\n                      method.pe_fn_decl(),\n                      method.pe_generics(),\n@@ -3169,6 +3185,16 @@ fn set_debug_location(cx: &CrateContext, debug_location: DebugLocation) {\n //  Utility Functions\n //=-----------------------------------------------------------------------------\n \n+fn contains_nodebug_attribute(attributes: &[ast::Attribute]) -> bool {\n+    attributes.iter().any(|attr| {\n+        let meta_item: &ast::MetaItem = &*attr.node.value;\n+        match meta_item.node {\n+            ast::MetaWord(ref value) => value.get() == \"no_debug\",\n+            _ => false\n+        }\n+    })\n+}\n+\n /// Return codemap::Loc corresponding to the beginning of the span\n fn span_start(cx: &CrateContext, span: Span) -> codemap::Loc {\n     cx.sess().codemap().lookup_char_pos(span.lo)"}, {"sha": "e61ded4ee2659d8c1d0dbbb0150703fa52663cc5", "filename": "src/test/debuginfo/no-debug-attribute.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/910dd2635c0defac0f64cd62fe7a3f22dc41bdba/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910dd2635c0defac0f64cd62fe7a3f22dc41bdba/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs?ref=910dd2635c0defac0f64cd62fe7a3f22dc41bdba", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-android: FIXME(#10381)\n+// ignore-lldb\n+\n+// compile-flags:-g\n+\n+// gdb-command:break 'no-debug-attribute.rs':32\n+// gdb-command:break 'no-debug-attribute.rs':38\n+// gdb-command:run\n+\n+// gdb-command:info locals\n+// gdb-check:No locals.\n+// gdb-command:continue\n+\n+// gdb-command:info locals\n+// gdb-check:abc = 10\n+// gdb-command:continue\n+\n+#![allow(unused_variable)]\n+\n+fn function_with_debuginfo() {\n+    let abc = 10u;\n+    return (); // #break\n+}\n+\n+#[no_debug]\n+fn function_without_debuginfo() {\n+    let abc = -57i32;\n+    return (); // #break\n+}\n+\n+fn main() {\n+    function_without_debuginfo();\n+    function_with_debuginfo();\n+}\n+"}]}