{"sha": "b766abc88f78f36193ddefb1079dbc832346b358", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NjZhYmM4OGY3OGYzNjE5M2RkZWZiMTA3OWRiYzgzMjM0NmIzNTg=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-05T21:10:37Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-12-04T22:19:28Z"}, "message": "Simplify unscheduling of drops after moves", "tree": {"sha": "53a0ff0b117c404a847521f3490ae49560dbaa3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53a0ff0b117c404a847521f3490ae49560dbaa3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b766abc88f78f36193ddefb1079dbc832346b358", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b766abc88f78f36193ddefb1079dbc832346b358", "html_url": "https://github.com/rust-lang/rust/commit/b766abc88f78f36193ddefb1079dbc832346b358", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b766abc88f78f36193ddefb1079dbc832346b358/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2218520b8adf8b8e64b817537d9eb0a84840e2f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2218520b8adf8b8e64b817537d9eb0a84840e2f1", "html_url": "https://github.com/rust-lang/rust/commit/2218520b8adf8b8e64b817537d9eb0a84840e2f1"}], "stats": {"total": 52, "additions": 22, "deletions": 30}, "files": [{"sha": "5967c6fc80eb65db4159f3ede574ab6538d0d972", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b766abc88f78f36193ddefb1079dbc832346b358/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b766abc88f78f36193ddefb1079dbc832346b358/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=b766abc88f78f36193ddefb1079dbc832346b358", "patch": "@@ -121,8 +121,6 @@ struct Scope {\n     /// end of the vector (top of the stack) first.\n     drops: Vec<DropData>,\n \n-    moved_locals: Vec<Local>,\n-\n     /// The drop index that will drop everything in and below this scope on an\n     /// unwind path.\n     cached_unwind_block: Option<DropIdx>,\n@@ -406,7 +404,6 @@ impl<'tcx> Scopes<'tcx> {\n             region_scope: region_scope.0,\n             region_scope_span: region_scope.1.span,\n             drops: vec![],\n-            moved_locals: vec![],\n             cached_unwind_block: None,\n             cached_generator_drop_block: None,\n         });\n@@ -904,29 +901,32 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 return;\n             }\n \n-            Some(local_scope) => self\n-                .scopes\n-                .scopes\n-                .iter_mut()\n-                .rfind(|scope| scope.region_scope == local_scope)\n-                .unwrap_or_else(|| bug!(\"scope {:?} not found in scope list!\", local_scope)),\n+            Some(local_scope) => {\n+                let top_scope = self.scopes.scopes.last_mut().unwrap();\n+                assert!(\n+                    top_scope.region_scope == local_scope,\n+                    \"local scope ({:?}) is not the topmost scope!\",\n+                    local_scope\n+                );\n+\n+                top_scope\n+            }\n         };\n \n         // look for moves of a local variable, like `MOVE(_X)`\n-        let locals_moved = operands.iter().flat_map(|operand| match operand {\n-            Operand::Copy(_) | Operand::Constant(_) => None,\n-            Operand::Move(place) => place.as_local(),\n-        });\n+        let locals_moved = operands\n+            .iter()\n+            .filter_map(|operand| match operand {\n+                Operand::Copy(_) | Operand::Constant(_) => None,\n+                Operand::Move(place) => place.as_local(),\n+            })\n+            .collect::<FxHashSet<_>>();\n \n-        for local in locals_moved {\n-            // check if we have a Drop for this operand and -- if so\n-            // -- add it to the list of moved operands. Note that this\n-            // local might not have been an operand created for this\n-            // call, it could come from other places too.\n-            if scope.drops.iter().any(|drop| drop.local == local && drop.kind == DropKind::Value) {\n-                scope.moved_locals.push(local);\n-            }\n-        }\n+        // Remove the drops for the moved operands.\n+        scope\n+            .drops\n+            .retain(|drop| drop.kind == DropKind::Storage || !locals_moved.contains(&drop.local));\n+        scope.invalidate_cache();\n     }\n \n     // Other\n@@ -1174,14 +1174,6 @@ fn build_scope_drops<'tcx>(\n                 debug_assert_eq!(unwind_drops.drops[unwind_to].0.kind, drop_data.kind);\n                 unwind_to = unwind_drops.drops[unwind_to].1;\n \n-                // If the operand has been moved, and we are not on an unwind\n-                // path, then don't generate the drop. (We only take this into\n-                // account for non-unwind paths so as not to disturb the\n-                // caching mechanism.)\n-                if scope.moved_locals.iter().any(|&o| o == local) {\n-                    continue;\n-                }\n-\n                 unwind_drops.add_entry(block, unwind_to);\n \n                 let next = cfg.start_new_block();"}]}