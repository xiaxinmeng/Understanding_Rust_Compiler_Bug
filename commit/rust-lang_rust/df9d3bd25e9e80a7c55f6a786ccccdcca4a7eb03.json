{"sha": "df9d3bd25e9e80a7c55f6a786ccccdcca4a7eb03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOWQzYmQyNWU5ZTgwYTdjNTVmNmE3ODZjY2NjZGNjYTRhN2ViMDM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-30T21:22:12Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-11T22:33:04Z"}, "message": "Use shortest path", "tree": {"sha": "b12c62013351e2a69d2a5e7b823071c1e917c3e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b12c62013351e2a69d2a5e7b823071c1e917c3e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df9d3bd25e9e80a7c55f6a786ccccdcca4a7eb03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df9d3bd25e9e80a7c55f6a786ccccdcca4a7eb03", "html_url": "https://github.com/rust-lang/rust/commit/df9d3bd25e9e80a7c55f6a786ccccdcca4a7eb03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df9d3bd25e9e80a7c55f6a786ccccdcca4a7eb03/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ea2b475a99b982829e543616a7dc2694e749e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea2b475a99b982829e543616a7dc2694e749e70", "html_url": "https://github.com/rust-lang/rust/commit/1ea2b475a99b982829e543616a7dc2694e749e70"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "f7fd0c00a6fb4ef1b21f4e8370d84de5d02b6991", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/df9d3bd25e9e80a7c55f6a786ccccdcca4a7eb03/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9d3bd25e9e80a7c55f6a786ccccdcca4a7eb03/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=df9d3bd25e9e80a7c55f6a786ccccdcca4a7eb03", "patch": "@@ -10,7 +10,6 @@ use hir_expand::name::Name;\n \n // TODO don't import from super imports? or at least deprioritize\n // TODO use super?\n-// TODO use shortest path\n // TODO performance / memoize\n \n pub fn find_path(db: &impl DefDatabase, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n@@ -61,17 +60,17 @@ pub fn find_path(db: &impl DefDatabase, item: ItemInNs, from: ModuleId) -> Optio\n \n     // - otherwise, look for modules containing (reexporting) it and import it from one of those\n     let importable_locations = find_importable_locations(db, item, from);\n-    // XXX going in order for now\n+    let mut candidate_paths = Vec::new();\n     for (module_id, name) in importable_locations {\n         // TODO prevent infinite loops\n         let mut path = match find_path(db, ItemInNs::Types(ModuleDefId::ModuleId(module_id)), from) {\n             None => continue,\n             Some(path) => path,\n         };\n         path.segments.push(name);\n-        return Some(path);\n+        candidate_paths.push(path);\n     }\n-    None\n+    candidate_paths.into_iter().min_by_key(|path| path.segments.len())\n }\n \n fn find_importable_locations(db: &impl DefDatabase, item: ItemInNs, from: ModuleId) -> Vec<(ModuleId, Name)> {\n@@ -275,4 +274,20 @@ mod tests {\n         check_found_path(code, \"None\");\n         check_found_path(code, \"Some\");\n     }\n+\n+    #[test]\n+    fn shortest_path() {\n+        let code = r#\"\n+            //- /main.rs\n+            pub mod foo;\n+            pub mod baz;\n+            struct S;\n+            <|>\n+            //- /foo.rs\n+            pub mod bar { pub struct S; }\n+            //- /baz.rs\n+            pub use crate::foo::bar::S;\n+        \"#;\n+        check_found_path(code, \"baz::S\");\n+    }\n }"}]}