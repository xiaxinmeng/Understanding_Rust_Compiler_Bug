{"sha": "37481641b1101108eb394789dd2adf9e095e39d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NDgxNjQxYjExMDExMDhlYjM5NDc4OWRkMmFkZjllMDk1ZTM5ZDk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-25T09:01:43Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-25T09:01:43Z"}, "message": "Fold env into CheckItemRecursionVisitor.", "tree": {"sha": "f3b1a628d53e58052b11e6ae5628f3715bf2311d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3b1a628d53e58052b11e6ae5628f3715bf2311d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37481641b1101108eb394789dd2adf9e095e39d9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37481641b1101108eb394789dd2adf9e095e39d9", "html_url": "https://github.com/rust-lang/rust/commit/37481641b1101108eb394789dd2adf9e095e39d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37481641b1101108eb394789dd2adf9e095e39d9/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce1aae28273ded3be991d1f29339ce08a5fc220", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce1aae28273ded3be991d1f29339ce08a5fc220", "html_url": "https://github.com/rust-lang/rust/commit/1ce1aae28273ded3be991d1f29339ce08a5fc220"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "3a50306bb8766cc51a28ab5c943be59077c97be9", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/37481641b1101108eb394789dd2adf9e095e39d9/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37481641b1101108eb394789dd2adf9e095e39d9/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=37481641b1101108eb394789dd2adf9e095e39d9", "patch": "@@ -226,7 +226,9 @@ struct env {\n     idstack: @mut ~[NodeId]\n }\n \n-struct CheckItemRecursionVisitor;\n+struct CheckItemRecursionVisitor {\n+    env: env,\n+}\n \n // Make sure a const item doesn't recursively refer to itself\n // FIXME: Should use the dependency graph when it's available (#1356)\n@@ -242,34 +244,34 @@ pub fn check_item_recursion(sess: Session,\n         idstack: @mut ~[]\n     };\n \n-    let mut visitor = CheckItemRecursionVisitor;\n-    visitor.visit_item(it, env);\n+    let mut visitor = CheckItemRecursionVisitor { env: env };\n+    visitor.visit_item(it, ());\n }\n \n-impl Visitor<env> for CheckItemRecursionVisitor {\n-    fn visit_item(&mut self, it: @item, env: env) {\n-        if env.idstack.iter().any(|x| x == &(it.id)) {\n-            env.sess.span_fatal(env.root_it.span, \"recursive constant\");\n+impl Visitor<()> for CheckItemRecursionVisitor {\n+    fn visit_item(&mut self, it: @item, _: ()) {\n+        if self.env.idstack.iter().any(|x| x == &(it.id)) {\n+            self.env.sess.span_fatal(self.env.root_it.span, \"recursive constant\");\n         }\n-        env.idstack.push(it.id);\n-        visit::walk_item(self, it, env);\n-        env.idstack.pop();\n+        self.env.idstack.push(it.id);\n+        visit::walk_item(self, it, ());\n+        self.env.idstack.pop();\n     }\n \n-    fn visit_expr(&mut self, e: @Expr, env: env) {\n+    fn visit_expr(&mut self, e: @Expr, _: ()) {\n         match e.node {\n-            ExprPath(*) => match env.def_map.find(&e.id) {\n+            ExprPath(*) => match self.env.def_map.find(&e.id) {\n                 Some(&DefStatic(def_id, _)) if ast_util::is_local(def_id) =>\n-                    match env.ast_map.get_copy(&def_id.node) {\n+                    match self.env.ast_map.get_copy(&def_id.node) {\n                         ast_map::node_item(it, _) => {\n-                            self.visit_item(it, env);\n+                            self.visit_item(it, ());\n                         }\n                         _ => fail!(\"const not bound to an item\")\n                     },\n                 _ => ()\n             },\n             _ => ()\n         }\n-        visit::walk_expr(self, e, env);\n+        visit::walk_expr(self, e, ());\n     }\n }"}]}