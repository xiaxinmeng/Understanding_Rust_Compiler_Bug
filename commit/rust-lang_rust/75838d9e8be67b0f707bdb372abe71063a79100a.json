{"sha": "75838d9e8be67b0f707bdb372abe71063a79100a", "node_id": "C_kwDOAAsO6NoAKDc1ODM4ZDllOGJlNjdiMGY3MDdiZGIzNzJhYmU3MTA2M2E3OTEwMGE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-27T18:32:29Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-27T18:32:29Z"}, "message": "Implement more llvm simd intrinsics for AArch64", "tree": {"sha": "bd53a77188058ffb8b9dc562e9575e1b02b4bf70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd53a77188058ffb8b9dc562e9575e1b02b4bf70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75838d9e8be67b0f707bdb372abe71063a79100a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75838d9e8be67b0f707bdb372abe71063a79100a", "html_url": "https://github.com/rust-lang/rust/commit/75838d9e8be67b0f707bdb372abe71063a79100a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75838d9e8be67b0f707bdb372abe71063a79100a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "136798319874ee368f7a111332b5f14545c233f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/136798319874ee368f7a111332b5f14545c233f3", "html_url": "https://github.com/rust-lang/rust/commit/136798319874ee368f7a111332b5f14545c233f3"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "1daf14288243affd081879adea33d52b4d8effe8", "filename": "src/intrinsics/llvm_aarch64.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/75838d9e8be67b0f707bdb372abe71063a79100a/src%2Fintrinsics%2Fllvm_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75838d9e8be67b0f707bdb372abe71063a79100a/src%2Fintrinsics%2Fllvm_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm_aarch64.rs?ref=75838d9e8be67b0f707bdb372abe71063a79100a", "patch": "@@ -32,6 +32,14 @@ pub(crate) fn codegen_aarch64_llvm_intrinsic_call<'tcx>(\n             });\n         }\n \n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.rbit.v\") => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n+                fx.bcx.ins().bitrev(lane)\n+            });\n+        }\n+\n         _ if intrinsic.starts_with(\"llvm.aarch64.neon.sqadd.v\") => {\n             intrinsic_args!(fx, args => (x, y); intrinsic);\n \n@@ -48,6 +56,78 @@ pub(crate) fn codegen_aarch64_llvm_intrinsic_call<'tcx>(\n             });\n         }\n \n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.smax.v\") => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            simd_pair_for_each_lane(fx, x, y, ret, &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n+                let gt = fx.bcx.ins().icmp(IntCC::SignedGreaterThan, x_lane, y_lane);\n+                fx.bcx.ins().select(gt, x_lane, y_lane)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.umax.v\") => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            simd_pair_for_each_lane(fx, x, y, ret, &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n+                let gt = fx.bcx.ins().icmp(IntCC::UnsignedGreaterThan, x_lane, y_lane);\n+                fx.bcx.ins().select(gt, x_lane, y_lane)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.smaxv.i\") => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n+\n+            simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| {\n+                let gt = fx.bcx.ins().icmp(IntCC::SignedGreaterThan, a, b);\n+                fx.bcx.ins().select(gt, a, b)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.umaxv.i\") => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n+\n+            simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| {\n+                let gt = fx.bcx.ins().icmp(IntCC::UnsignedGreaterThan, a, b);\n+                fx.bcx.ins().select(gt, a, b)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.smin.v\") => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            simd_pair_for_each_lane(fx, x, y, ret, &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n+                let gt = fx.bcx.ins().icmp(IntCC::SignedLessThan, x_lane, y_lane);\n+                fx.bcx.ins().select(gt, x_lane, y_lane)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.umin.v\") => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            simd_pair_for_each_lane(fx, x, y, ret, &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n+                let gt = fx.bcx.ins().icmp(IntCC::UnsignedLessThan, x_lane, y_lane);\n+                fx.bcx.ins().select(gt, x_lane, y_lane)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.sminv.i\") => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n+\n+            simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| {\n+                let gt = fx.bcx.ins().icmp(IntCC::SignedLessThan, a, b);\n+                fx.bcx.ins().select(gt, a, b)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.uminv.i\") => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n+\n+            simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| {\n+                let gt = fx.bcx.ins().icmp(IntCC::UnsignedLessThan, a, b);\n+                fx.bcx.ins().select(gt, a, b)\n+            });\n+        }\n+\n         /*\n         _ if intrinsic.starts_with(\"llvm.aarch64.neon.sshl.v\")\n             || intrinsic.starts_with(\"llvm.aarch64.neon.sqshl.v\")"}]}