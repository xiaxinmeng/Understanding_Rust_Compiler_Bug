{"sha": "d4128beb3d8c647674ae43407d0ed6edd71ff420", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MTI4YmViM2Q4YzY0NzY3NGFlNDM0MDdkMGVkNmVkZDcxZmY0MjA=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-16T21:16:41Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-16T21:16:41Z"}, "message": "Avoid turning completion objects into builders", "tree": {"sha": "635a26e7266d155f2638360a022adc8b6d7b617c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/635a26e7266d155f2638360a022adc8b6d7b617c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4128beb3d8c647674ae43407d0ed6edd71ff420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4128beb3d8c647674ae43407d0ed6edd71ff420", "html_url": "https://github.com/rust-lang/rust/commit/d4128beb3d8c647674ae43407d0ed6edd71ff420", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4128beb3d8c647674ae43407d0ed6edd71ff420/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "410996893489f6c64b472e6128f099f1de229806", "url": "https://api.github.com/repos/rust-lang/rust/commits/410996893489f6c64b472e6128f099f1de229806", "html_url": "https://github.com/rust-lang/rust/commit/410996893489f6c64b472e6128f099f1de229806"}], "stats": {"total": 201, "additions": 117, "deletions": 84}, "files": [{"sha": "423782a0e0e728f426dd3bbe881fe00572ebbd07", "filename": "crates/assists/src/utils/insert_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs?ref=d4128beb3d8c647674ae43407d0ed6edd71ff420", "patch": "@@ -15,7 +15,7 @@ use syntax::{\n };\n use test_utils::mark;\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub enum ImportScope {\n     File(ast::SourceFile),\n     Module(ast::ItemList),"}, {"sha": "9b7d6c5809131b2819176037086402d516113267", "filename": "crates/completion/src/completions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions.rs?ref=d4128beb3d8c647674ae43407d0ed6edd71ff420", "patch": "@@ -90,7 +90,7 @@ impl Completions {\n             Some(it) => it,\n             None => return,\n         };\n-        if let Some(item) = render_macro(RenderContext::new(ctx), name, macro_) {\n+        if let Some(item) = render_macro(RenderContext::new(ctx), None, name, macro_) {\n             self.add(item);\n         }\n     }\n@@ -101,7 +101,7 @@ impl Completions {\n         func: hir::Function,\n         local_name: Option<String>,\n     ) {\n-        let item = render_fn(RenderContext::new(ctx), local_name, func);\n+        let item = render_fn(RenderContext::new(ctx), None, local_name, func);\n         self.add(item)\n     }\n \n@@ -123,7 +123,7 @@ impl Completions {\n         variant: hir::EnumVariant,\n         path: ModPath,\n     ) {\n-        let item = render_enum_variant(RenderContext::new(ctx), None, variant, Some(path));\n+        let item = render_enum_variant(RenderContext::new(ctx), None, None, variant, Some(path));\n         self.add(item);\n     }\n \n@@ -133,7 +133,7 @@ impl Completions {\n         variant: hir::EnumVariant,\n         local_name: Option<String>,\n     ) {\n-        let item = render_enum_variant(RenderContext::new(ctx), local_name, variant, None);\n+        let item = render_enum_variant(RenderContext::new(ctx), None, local_name, variant, None);\n         self.add(item);\n     }\n }"}, {"sha": "86c143b637f713bfbee8e25c574b1108947a26db", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=d4128beb3d8c647674ae43407d0ed6edd71ff420", "patch": "@@ -1,14 +1,14 @@\n //! Completion of names from the current scope, e.g. locals and imported items.\n \n-use assists::utils::{insert_use, mod_path_to_ast, ImportScope};\n+use assists::utils::ImportScope;\n use either::Either;\n use hir::{Adt, ModuleDef, ScopeDef, Type};\n use ide_db::imports_locator;\n-use syntax::{algo, AstNode};\n+use syntax::AstNode;\n use test_utils::mark;\n \n use crate::{\n-    render::{render_resolution, RenderContext},\n+    render::{render_resolution_with_import, RenderContext},\n     CompletionContext, Completions,\n };\n \n@@ -95,35 +95,13 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n                 )),\n             })\n             .filter(|(mod_path, _)| mod_path.len() > 1)\n-            .filter_map(|(mod_path, definition)| {\n-                let use_to_insert = mod_path_to_ast(&mod_path);\n-                let mut mod_path_without_last_segment = mod_path;\n-                let name_after_import = mod_path_without_last_segment.segments.pop()?.to_string();\n-\n-                let resolution_with_missing_import =\n-                    render_resolution(RenderContext::new(ctx), name_after_import, &definition)?;\n-                let lookup_string = resolution_with_missing_import.lookup().to_owned();\n-\n-                let mut text_edits =\n-                    resolution_with_missing_import.text_edit().to_owned().into_builder();\n-                let rewriter = insert_use(&import_scope, use_to_insert, ctx.config.merge);\n-                let old_ast = rewriter.rewrite_root()?;\n-                algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut text_edits);\n-\n-                let qualifier_string = mod_path_without_last_segment.to_string();\n-                let qualified_label = if qualifier_string.is_empty() {\n-                    resolution_with_missing_import.label().to_owned()\n-                } else {\n-                    format!(\"{}::{}\", qualifier_string, resolution_with_missing_import.label())\n-                };\n-\n-                Some(\n-                    resolution_with_missing_import\n-                        .into_builder()\n-                        .text_edit(text_edits.finish())\n-                        .label(qualified_label)\n-                        .lookup_by(lookup_string)\n-                        .build(),\n+            .filter_map(|(import_path, definition)| {\n+                render_resolution_with_import(\n+                    RenderContext::new(ctx),\n+                    import_path.clone(),\n+                    import_scope.clone(),\n+                    ctx.config.merge,\n+                    &definition,\n                 )\n             })\n             .take(20);"}, {"sha": "b13c3f37628a608a5875b6520e8aecbb69034353", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 47, "deletions": 29, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=d4128beb3d8c647674ae43407d0ed6edd71ff420", "patch": "@@ -2,8 +2,9 @@\n \n use std::fmt;\n \n-use hir::{Documentation, Mutability};\n-use syntax::TextRange;\n+use assists::utils::{insert_use, mod_path_to_ast, ImportScope, MergeBehaviour};\n+use hir::{Documentation, ModPath, Mutability};\n+use syntax::{algo, TextRange};\n use text_edit::TextEdit;\n \n use crate::config::SnippetCap;\n@@ -200,25 +201,7 @@ impl CompletionItem {\n             trigger_call_info: None,\n             score: None,\n             ref_match: None,\n-        }\n-    }\n-\n-    pub(crate) fn into_builder(self) -> Builder {\n-        Builder {\n-            source_range: self.source_range,\n-            completion_kind: self.completion_kind,\n-            label: self.label,\n-            insert_text: None,\n-            insert_text_format: self.insert_text_format,\n-            detail: self.detail,\n-            documentation: self.documentation,\n-            lookup: self.lookup,\n-            kind: self.kind,\n-            text_edit: Some(self.text_edit),\n-            deprecated: Some(self.deprecated),\n-            trigger_call_info: Some(self.trigger_call_info),\n-            score: self.score,\n-            ref_match: self.ref_match,\n+            import_data: None,\n         }\n     }\n \n@@ -278,6 +261,7 @@ impl CompletionItem {\n pub(crate) struct Builder {\n     source_range: TextRange,\n     completion_kind: CompletionKind,\n+    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n     label: String,\n     insert_text: Option<String>,\n     insert_text_format: InsertTextFormat,\n@@ -294,23 +278,50 @@ pub(crate) struct Builder {\n \n impl Builder {\n     pub(crate) fn build(self) -> CompletionItem {\n-        let label = self.label;\n-        let text_edit = match self.text_edit {\n+        let mut label = self.label;\n+        let mut lookup = self.lookup;\n+        let mut insert_text = self.insert_text;\n+        let mut text_edits = TextEdit::builder();\n+\n+        if let Some((import_path, import_scope, merge_behaviour)) = self.import_data {\n+            let import = mod_path_to_ast(&import_path);\n+            let mut import_path_without_last_segment = import_path;\n+            let _ = import_path_without_last_segment.segments.pop();\n+\n+            if !import_path_without_last_segment.segments.is_empty() {\n+                if lookup.is_none() {\n+                    lookup = Some(label.clone());\n+                }\n+                if insert_text.is_none() {\n+                    insert_text = Some(label.clone());\n+                }\n+                label = format!(\"{}::{}\", import_path_without_last_segment, label);\n+            }\n+\n+            let rewriter = insert_use(&import_scope, import, merge_behaviour);\n+            if let Some(old_ast) = rewriter.rewrite_root() {\n+                algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut text_edits);\n+            }\n+        }\n+\n+        let original_edit = match self.text_edit {\n             Some(it) => it,\n-            None => TextEdit::replace(\n-                self.source_range,\n-                self.insert_text.unwrap_or_else(|| label.clone()),\n-            ),\n+            None => {\n+                TextEdit::replace(self.source_range, insert_text.unwrap_or_else(|| label.clone()))\n+            }\n         };\n \n+        let mut resulting_edit = text_edits.finish();\n+        resulting_edit.union(original_edit).expect(\"Failed to unite text edits\");\n+\n         CompletionItem {\n             source_range: self.source_range,\n             label,\n             insert_text_format: self.insert_text_format,\n-            text_edit,\n+            text_edit: resulting_edit,\n             detail: self.detail,\n             documentation: self.documentation,\n-            lookup: self.lookup,\n+            lookup,\n             kind: self.kind,\n             completion_kind: self.completion_kind,\n             deprecated: self.deprecated.unwrap_or(false),\n@@ -379,6 +390,13 @@ impl Builder {\n         self.trigger_call_info = Some(true);\n         self\n     }\n+    pub(crate) fn import_data(\n+        mut self,\n+        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    ) -> Builder {\n+        self.import_data = import_data;\n+        self\n+    }\n     pub(crate) fn set_ref_match(\n         mut self,\n         ref_match: Option<(Mutability, CompletionScore)>,"}, {"sha": "e892d4de8590a6c76d00f452a4ff5baa11e3b737", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=d4128beb3d8c647674ae43407d0ed6edd71ff420", "patch": "@@ -9,7 +9,8 @@ pub(crate) mod type_alias;\n \n mod builder_ext;\n \n-use hir::{Documentation, HasAttrs, HirDisplay, Mutability, ScopeDef, Type};\n+use assists::utils::{ImportScope, MergeBehaviour};\n+use hir::{Documentation, HasAttrs, HirDisplay, ModPath, Mutability, ScopeDef, Type};\n use ide_db::RootDatabase;\n use syntax::TextRange;\n use test_utils::mark;\n@@ -42,7 +43,22 @@ pub(crate) fn render_resolution<'a>(\n     local_name: String,\n     resolution: &ScopeDef,\n ) -> Option<CompletionItem> {\n-    Render::new(ctx).render_resolution(local_name, resolution)\n+    Render::new(ctx).render_resolution(local_name, None, resolution)\n+}\n+\n+pub(crate) fn render_resolution_with_import<'a>(\n+    ctx: RenderContext<'a>,\n+    import: ModPath,\n+    import_scope: ImportScope,\n+    merge_behaviour: Option<MergeBehaviour>,\n+    resolution: &ScopeDef,\n+) -> Option<CompletionItem> {\n+    let local_name = import.segments.last()?.to_string();\n+    Render::new(ctx).render_resolution(\n+        local_name,\n+        Some((import, import_scope, merge_behaviour)),\n+        resolution,\n+    )\n }\n \n /// Interface for data and methods required for items rendering.\n@@ -131,6 +147,7 @@ impl<'a> Render<'a> {\n     fn render_resolution(\n         self,\n         local_name: String,\n+        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n         resolution: &ScopeDef,\n     ) -> Option<CompletionItem> {\n         use hir::ModuleDef::*;\n@@ -142,15 +159,15 @@ impl<'a> Render<'a> {\n \n         let kind = match resolution {\n             ScopeDef::ModuleDef(Function(func)) => {\n-                let item = render_fn(self.ctx, Some(local_name), *func);\n+                let item = render_fn(self.ctx, import_data, Some(local_name), *func);\n                 return Some(item);\n             }\n             ScopeDef::ModuleDef(EnumVariant(var)) => {\n-                let item = render_enum_variant(self.ctx, Some(local_name), *var, None);\n+                let item = render_enum_variant(self.ctx, import_data, Some(local_name), *var, None);\n                 return Some(item);\n             }\n             ScopeDef::MacroDef(mac) => {\n-                let item = render_macro(self.ctx, local_name, *mac);\n+                let item = render_macro(self.ctx, import_data, local_name, *mac);\n                 return item;\n             }\n \n@@ -175,6 +192,7 @@ impl<'a> Render<'a> {\n                     local_name,\n                 )\n                 .kind(CompletionItemKind::UnresolvedReference)\n+                .import_data(import_data)\n                 .build();\n                 return Some(item);\n             }\n@@ -227,7 +245,12 @@ impl<'a> Render<'a> {\n             }\n         }\n \n-        let item = item.kind(kind).set_documentation(docs).set_ref_match(ref_match).build();\n+        let item = item\n+            .kind(kind)\n+            .import_data(import_data)\n+            .set_documentation(docs)\n+            .set_ref_match(ref_match)\n+            .build();\n         Some(item)\n     }\n "}, {"sha": "6070e9b1d7935033dfa8cfcb7a8070db8b1b2287", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=d4128beb3d8c647674ae43407d0ed6edd71ff420", "patch": "@@ -1,5 +1,6 @@\n //! Renderer for `enum` variants.\n \n+use assists::utils::{ImportScope, MergeBehaviour};\n use hir::{HasAttrs, HirDisplay, ModPath, StructKind};\n use itertools::Itertools;\n use test_utils::mark;\n@@ -11,11 +12,12 @@ use crate::{\n \n pub(crate) fn render_enum_variant<'a>(\n     ctx: RenderContext<'a>,\n+    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n     local_name: Option<String>,\n     variant: hir::EnumVariant,\n     path: Option<ModPath>,\n ) -> CompletionItem {\n-    EnumVariantRender::new(ctx, local_name, variant, path).render()\n+    EnumVariantRender::new(ctx, local_name, variant, path).render(import_data)\n }\n \n #[derive(Debug)]\n@@ -60,7 +62,10 @@ impl<'a> EnumVariantRender<'a> {\n         }\n     }\n \n-    fn render(self) -> CompletionItem {\n+    fn render(\n+        self,\n+        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    ) -> CompletionItem {\n         let mut builder = CompletionItem::new(\n             CompletionKind::Reference,\n             self.ctx.source_range(),\n@@ -69,6 +74,7 @@ impl<'a> EnumVariantRender<'a> {\n         .kind(CompletionItemKind::EnumVariant)\n         .set_documentation(self.variant.docs(self.ctx.db()))\n         .set_deprecated(self.ctx.is_deprecated(self.variant))\n+        .import_data(import_data)\n         .detail(self.detail());\n \n         if self.variant_kind == StructKind::Tuple {"}, {"sha": "9dd5cd18c569031b9ffee4abd0aa327e0768feac", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=d4128beb3d8c647674ae43407d0ed6edd71ff420", "patch": "@@ -1,6 +1,7 @@\n //! Renderer for function calls.\n \n-use hir::{HasSource, Type};\n+use assists::utils::{ImportScope, MergeBehaviour};\n+use hir::{HasSource, ModPath, Type};\n use syntax::{ast::Fn, display::function_declaration};\n \n use crate::{\n@@ -10,10 +11,11 @@ use crate::{\n \n pub(crate) fn render_fn<'a>(\n     ctx: RenderContext<'a>,\n+    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n     local_name: Option<String>,\n     fn_: hir::Function,\n ) -> CompletionItem {\n-    FunctionRender::new(ctx, local_name, fn_).render()\n+    FunctionRender::new(ctx, local_name, fn_).render(import_data)\n }\n \n #[derive(Debug)]\n@@ -36,14 +38,18 @@ impl<'a> FunctionRender<'a> {\n         FunctionRender { ctx, name, fn_, ast_node }\n     }\n \n-    fn render(self) -> CompletionItem {\n+    fn render(\n+        self,\n+        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    ) -> CompletionItem {\n         let params = self.params();\n         CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), self.name.clone())\n             .kind(self.kind())\n             .set_documentation(self.ctx.docs(self.fn_))\n             .set_deprecated(self.ctx.is_deprecated(self.fn_))\n             .detail(self.detail())\n             .add_call_parens(self.ctx.completion, self.name, params)\n+            .import_data(import_data)\n             .build()\n     }\n "}, {"sha": "fead59e41c09bafed1495af05a3efdd751741892", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=d4128beb3d8c647674ae43407d0ed6edd71ff420", "patch": "@@ -1,6 +1,7 @@\n //! Renderer for macro invocations.\n \n-use hir::{Documentation, HasSource};\n+use assists::utils::{ImportScope, MergeBehaviour};\n+use hir::{Documentation, HasSource, ModPath};\n use syntax::display::macro_label;\n use test_utils::mark;\n \n@@ -11,10 +12,11 @@ use crate::{\n \n pub(crate) fn render_macro<'a>(\n     ctx: RenderContext<'a>,\n+    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n     name: String,\n     macro_: hir::MacroDef,\n ) -> Option<CompletionItem> {\n-    MacroRender::new(ctx, name, macro_).render()\n+    MacroRender::new(ctx, name, macro_).render(import_data)\n }\n \n #[derive(Debug)]\n@@ -36,7 +38,10 @@ impl<'a> MacroRender<'a> {\n         MacroRender { ctx, name, macro_, docs, bra, ket }\n     }\n \n-    fn render(&self) -> Option<CompletionItem> {\n+    fn render(\n+        &self,\n+        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    ) -> Option<CompletionItem> {\n         // FIXME: Currently proc-macro do not have ast-node,\n         // such that it does not have source\n         if self.macro_.is_proc_macro() {\n@@ -48,6 +53,7 @@ impl<'a> MacroRender<'a> {\n                 .kind(CompletionItemKind::Macro)\n                 .set_documentation(self.docs.clone())\n                 .set_deprecated(self.ctx.is_deprecated(self.macro_))\n+                .import_data(import_data)\n                 .detail(self.detail());\n \n         let needs_bang = self.needs_bang();"}, {"sha": "eb3c8caa2a7a9d114fa4749641ff88f2b87a6a1a", "filename": "crates/text_edit/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Ftext_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4128beb3d8c647674ae43407d0ed6edd71ff420/crates%2Ftext_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2Fsrc%2Flib.rs?ref=d4128beb3d8c647674ae43407d0ed6edd71ff420", "patch": "@@ -48,10 +48,6 @@ impl TextEdit {\n         TextEditBuilder::default()\n     }\n \n-    pub fn into_builder(self) -> TextEditBuilder {\n-        TextEditBuilder { indels: self.indels }\n-    }\n-\n     pub fn insert(offset: TextSize, text: String) -> TextEdit {\n         let mut builder = TextEdit::builder();\n         builder.insert(offset, text);"}]}