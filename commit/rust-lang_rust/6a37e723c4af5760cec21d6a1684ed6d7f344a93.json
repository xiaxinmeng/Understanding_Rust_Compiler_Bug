{"sha": "6a37e723c4af5760cec21d6a1684ed6d7f344a93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMzdlNzIzYzRhZjU3NjBjZWMyMWQ2YTE2ODRlZDZkN2YzNDRhOTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-15T14:08:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-15T14:08:03Z"}, "message": "detect outdated xargo version", "tree": {"sha": "4d4a5a8a1d9a484e9a3df2f29f863aeca702d21f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d4a5a8a1d9a484e9a3df2f29f863aeca702d21f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a37e723c4af5760cec21d6a1684ed6d7f344a93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a37e723c4af5760cec21d6a1684ed6d7f344a93", "html_url": "https://github.com/rust-lang/rust/commit/6a37e723c4af5760cec21d6a1684ed6d7f344a93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a37e723c4af5760cec21d6a1684ed6d7f344a93/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bc3a488025b5525173b64fc691785aa67fced47", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc3a488025b5525173b64fc691785aa67fced47", "html_url": "https://github.com/rust-lang/rust/commit/6bc3a488025b5525173b64fc691785aa67fced47"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "310bf4f583ea19e604b7974efa76a20427a3426f", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6a37e723c4af5760cec21d6a1684ed6d7f344a93/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a37e723c4af5760cec21d6a1684ed6d7f344a93/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=6a37e723c4af5760cec21d6a1684ed6d7f344a93", "patch": "@@ -3,7 +3,7 @@\n extern crate cargo_metadata;\n \n use std::path::{PathBuf, Path};\n-use std::io::{self, Write};\n+use std::io::{self, Write, BufRead};\n use std::process::Command;\n use std::fs::{self, File};\n \n@@ -114,6 +114,36 @@ fn list_targets() -> impl Iterator<Item=cargo_metadata::Target> {\n     package.targets.into_iter()\n }\n \n+fn xargo_version() -> Option<(u32, u32, u32)> {\n+    let out = Command::new(\"xargo\").arg(\"--version\").output().ok()?;\n+    if !out.status.success() {\n+        return None;\n+    }\n+    // Parse output. The first line looks like \"xargo 0.3.12 (b004f1c 2018-12-13)\".\n+    let line = out.stderr.lines().nth(0)\n+        .expect(\"malformed `xargo --version` output: not at least one line\")\n+        .expect(\"malformed `xargo --version` output: error reading first line\");\n+    let version = line.split(' ').nth(1)\n+        .expect(\"malformed `xargo --version` output: not at least two words\");\n+    let mut version_pieces = version.split('.');\n+    let major = version_pieces.next()\n+        .expect(\"malformed `xargo --version` output: not a major version piece\")\n+        .parse()\n+        .expect(\"malformed `xargo --version` output: major version is not an integer\");\n+    let minor = version_pieces.next()\n+        .expect(\"malformed `xargo --version` output: not a minor version piece\")\n+        .parse()\n+        .expect(\"malformed `xargo --version` output: minor version is not an integer\");\n+    let patch = version_pieces.next()\n+        .expect(\"malformed `xargo --version` output: not a patch version piece\")\n+        .parse()\n+        .expect(\"malformed `xargo --version` output: patch version is not an integer\");\n+    if !version_pieces.next().is_none() {\n+        panic!(\"malformed `xargo --version` output: more than three pieces in version\");\n+    }\n+    Some((major, minor, patch))\n+}\n+\n fn ask(question: &str) {\n     let mut buf = String::new();\n     print!(\"{} [Y/n] \", question);\n@@ -134,14 +164,14 @@ fn setup(ask_user: bool) {\n     }\n \n     // First, we need xargo\n-    if Command::new(\"xargo\").arg(\"--version\").output().is_err()\n-    {\n+    let xargo = xargo_version();\n+    if xargo.map_or(true, |v| v < (0, 3, 13)) {\n         if ask_user {\n-            ask(\"It seems you do not have xargo installed. I will run `cargo install xargo`. Proceed?\");\n+            ask(\"It seems you do not have a recent enough xargo installed. I will run `cargo install xargo -f`. Proceed?\");\n         } else {\n-            println!(\"Installing xargo: `cargo install xargo`\");\n+            println!(\"Installing xargo: `cargo install xargo -f`\");\n         }\n-        if !Command::new(\"cargo\").args(&[\"install\", \"xargo\"]).status().unwrap().success() {\n+        if !Command::new(\"cargo\").args(&[\"install\", \"xargo\", \"-f\"]).status().unwrap().success() {\n             show_error(format!(\"Failed to install xargo\"));\n         }\n     }"}]}