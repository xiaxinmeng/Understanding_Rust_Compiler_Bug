{"sha": "55d71c61b8797117ba0efa972514451a29c69c28", "node_id": "C_kwDOAAsO6NoAKDU1ZDcxYzYxYjg3OTcxMTdiYTBlZmE5NzI1MTQ0NTFhMjljNjljMjg", "commit": {"author": {"name": "Alex Saveau", "email": "saveau.alexandre@gmail.com", "date": "2022-10-17T04:01:28Z"}, "committer": {"name": "Alex Saveau", "email": "saveau.alexandre@gmail.com", "date": "2022-10-17T20:03:54Z"}, "message": "Remove all uses of array_assume_init\n\nSigned-off-by: Alex Saveau <saveau.alexandre@gmail.com>", "tree": {"sha": "822e4ffc1b40b9f573f341e6d6861e2f3ef71bc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/822e4ffc1b40b9f573f341e6d6861e2f3ef71bc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55d71c61b8797117ba0efa972514451a29c69c28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTBcJf70cgSZQv+KO8/jVsW6xadSAUCY021KgAKCRA/jVsW6xad\nSEnaAQCf3/9Mnudlcx5vpQMUP9WuED7PvuYVsq0kJKTlw9ExdgD/X7x+3lxQ37ra\njFKIVT6Bsf+aeG0DlYcroLl9jza7OA8=\n=EB4n\n-----END PGP SIGNATURE-----", "payload": "tree 822e4ffc1b40b9f573f341e6d6861e2f3ef71bc6\nparent 8be3ce9056d17f822704b8994f60668adf180fe8\nauthor Alex Saveau <saveau.alexandre@gmail.com> 1665979288 -0700\ncommitter Alex Saveau <saveau.alexandre@gmail.com> 1666037034 -0700\n\nRemove all uses of array_assume_init\n\nSigned-off-by: Alex Saveau <saveau.alexandre@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55d71c61b8797117ba0efa972514451a29c69c28", "html_url": "https://github.com/rust-lang/rust/commit/55d71c61b8797117ba0efa972514451a29c69c28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55d71c61b8797117ba0efa972514451a29c69c28/comments", "author": {"login": "SUPERCILEX", "id": 9490724, "node_id": "MDQ6VXNlcjk0OTA3MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9490724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SUPERCILEX", "html_url": "https://github.com/SUPERCILEX", "followers_url": "https://api.github.com/users/SUPERCILEX/followers", "following_url": "https://api.github.com/users/SUPERCILEX/following{/other_user}", "gists_url": "https://api.github.com/users/SUPERCILEX/gists{/gist_id}", "starred_url": "https://api.github.com/users/SUPERCILEX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SUPERCILEX/subscriptions", "organizations_url": "https://api.github.com/users/SUPERCILEX/orgs", "repos_url": "https://api.github.com/users/SUPERCILEX/repos", "events_url": "https://api.github.com/users/SUPERCILEX/events{/privacy}", "received_events_url": "https://api.github.com/users/SUPERCILEX/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SUPERCILEX", "id": 9490724, "node_id": "MDQ6VXNlcjk0OTA3MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9490724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SUPERCILEX", "html_url": "https://github.com/SUPERCILEX", "followers_url": "https://api.github.com/users/SUPERCILEX/followers", "following_url": "https://api.github.com/users/SUPERCILEX/following{/other_user}", "gists_url": "https://api.github.com/users/SUPERCILEX/gists{/gist_id}", "starred_url": "https://api.github.com/users/SUPERCILEX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SUPERCILEX/subscriptions", "organizations_url": "https://api.github.com/users/SUPERCILEX/orgs", "repos_url": "https://api.github.com/users/SUPERCILEX/repos", "events_url": "https://api.github.com/users/SUPERCILEX/events{/privacy}", "received_events_url": "https://api.github.com/users/SUPERCILEX/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8be3ce9056d17f822704b8994f60668adf180fe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8be3ce9056d17f822704b8994f60668adf180fe8", "html_url": "https://github.com/rust-lang/rust/commit/8be3ce9056d17f822704b8994f60668adf180fe8"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "ce36b116f139b11b5c54c462314572f0354e8660", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55d71c61b8797117ba0efa972514451a29c69c28/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d71c61b8797117ba0efa972514451a29c69c28/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=55d71c61b8797117ba0efa972514451a29c69c28", "patch": "@@ -125,9 +125,9 @@\n #![feature(iter_advance_by)]\n #![feature(iter_next_chunk)]\n #![feature(layout_for_ptr)]\n-#![feature(maybe_uninit_array_assume_init)]\n #![feature(maybe_uninit_slice)]\n #![feature(maybe_uninit_uninit_array)]\n+#![feature(maybe_uninit_uninit_array_transpose)]\n #![cfg_attr(test, feature(new_uninit))]\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(pattern)]"}, {"sha": "02cc7691a82db6af72b99fd9c735e17656ea048b", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55d71c61b8797117ba0efa972514451a29c69c28/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d71c61b8797117ba0efa972514451a29c69c28/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=55d71c61b8797117ba0efa972514451a29c69c28", "patch": "@@ -223,7 +223,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n \n             self.ptr = self.ptr.wrapping_byte_add(N);\n             // Safety: ditto\n-            return Ok(unsafe { MaybeUninit::array_assume_init(raw_ary) });\n+            return Ok(unsafe { raw_ary.transpose().assume_init() });\n         }\n \n         if len < N {\n@@ -241,7 +241,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n         return unsafe {\n             ptr::copy_nonoverlapping(self.ptr, raw_ary.as_mut_ptr() as *mut T, N);\n             self.ptr = self.ptr.add(N);\n-            Ok(MaybeUninit::array_assume_init(raw_ary))\n+            Ok(raw_ary.transpose().assume_init())\n         };\n     }\n "}, {"sha": "b91c630183d4fe707231b70e483f4b202d5dafde", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55d71c61b8797117ba0efa972514451a29c69c28/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d71c61b8797117ba0efa972514451a29c69c28/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=55d71c61b8797117ba0efa972514451a29c69c28", "patch": "@@ -104,8 +104,7 @@ impl<T, const N: usize> IntoIter<T, N> {\n     ///\n     /// ```\n     /// #![feature(array_into_iter_constructors)]\n-    ///\n-    /// #![feature(maybe_uninit_array_assume_init)]\n+    /// #![feature(maybe_uninit_uninit_array_transpose)]\n     /// #![feature(maybe_uninit_uninit_array)]\n     /// use std::array::IntoIter;\n     /// use std::mem::MaybeUninit;\n@@ -134,7 +133,7 @@ impl<T, const N: usize> IntoIter<T, N> {\n     ///     }\n     ///\n     ///     // SAFETY: We've initialized all N items\n-    ///     unsafe { Ok(MaybeUninit::array_assume_init(buffer)) }\n+    ///     unsafe { Ok(buffer.transpose().assume_init()) }\n     /// }\n     ///\n     /// let r: [_; 4] = next_chunk(&mut (10..16)).unwrap();"}, {"sha": "04dd821efdec0d2d8d66789323eb6181ff994571", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55d71c61b8797117ba0efa972514451a29c69c28/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d71c61b8797117ba0efa972514451a29c69c28/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=55d71c61b8797117ba0efa972514451a29c69c28", "patch": "@@ -912,7 +912,7 @@ where\n \n     mem::forget(guard);\n     // SAFETY: All elements of the array were populated in the loop above.\n-    let output = unsafe { MaybeUninit::array_assume_init(array) };\n+    let output = unsafe { array.transpose().assume_init() };\n     Ok(Try::from_output(output))\n }\n "}, {"sha": "b1f492381b136af2d04b57c1ce558712dbc0921e", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55d71c61b8797117ba0efa972514451a29c69c28/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d71c61b8797117ba0efa972514451a29c69c28/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=55d71c61b8797117ba0efa972514451a29c69c28", "patch": "@@ -49,8 +49,8 @@\n #![feature(slice_from_ptr_range)]\n #![feature(split_as_slice)]\n #![feature(maybe_uninit_uninit_array)]\n-#![feature(maybe_uninit_array_assume_init)]\n #![feature(maybe_uninit_write_slice)]\n+#![feature(maybe_uninit_uninit_array_transpose)]\n #![feature(min_specialization)]\n #![feature(numfmt)]\n #![feature(step_trait)]"}, {"sha": "b0cc08a15f0a0e7a85c9cff0f903cecca8618c90", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55d71c61b8797117ba0efa972514451a29c69c28/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d71c61b8797117ba0efa972514451a29c69c28/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=55d71c61b8797117ba0efa972514451a29c69c28", "patch": "@@ -163,18 +163,18 @@ fn assume_init_good() {\n \n #[test]\n fn uninit_array_assume_init() {\n-    let mut array: [MaybeUninit<i16>; 5] = MaybeUninit::uninit_array();\n+    let mut array = [MaybeUninit::<i16>::uninit(); 5];\n     array[0].write(3);\n     array[1].write(1);\n     array[2].write(4);\n     array[3].write(1);\n     array[4].write(5);\n \n-    let array = unsafe { MaybeUninit::array_assume_init(array) };\n+    let array = unsafe { array.transpose().assume_init() };\n \n     assert_eq!(array, [3, 1, 4, 1, 5]);\n \n-    let [] = unsafe { MaybeUninit::<!>::array_assume_init([]) };\n+    let [] = unsafe { [MaybeUninit::<!>::uninit(); 0].transpose().assume_init() };\n }\n \n #[test]"}]}