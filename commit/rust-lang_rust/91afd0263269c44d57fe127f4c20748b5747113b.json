{"sha": "91afd0263269c44d57fe127f4c20748b5747113b", "node_id": "C_kwDOAAsO6NoAKDkxYWZkMDI2MzI2OWM0NGQ1N2ZlMTI3ZjRjMjA3NDhiNTc0NzExM2I", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-11T02:28:50Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-14T14:16:49Z"}, "message": "Add bound_explicit_item_bounds and bound_item_bounds", "tree": {"sha": "2d3082011fd1fe4c5e4da1947588f482c5b1b607", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d3082011fd1fe4c5e4da1947588f482c5b1b607"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91afd0263269c44d57fe127f4c20748b5747113b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91afd0263269c44d57fe127f4c20748b5747113b", "html_url": "https://github.com/rust-lang/rust/commit/91afd0263269c44d57fe127f4c20748b5747113b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91afd0263269c44d57fe127f4c20748b5747113b/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0247faed2980a858e04fa57f78d585c8b066948d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0247faed2980a858e04fa57f78d585c8b066948d", "html_url": "https://github.com/rust-lang/rust/commit/0247faed2980a858e04fa57f78d585c8b066948d"}], "stats": {"total": 198, "additions": 121, "deletions": 77}, "files": [{"sha": "02caae7a90a91d5185e367273793cdd63fdc9a1e", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=91afd0263269c44d57fe127f4c20748b5747113b", "patch": "@@ -1849,10 +1849,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // Future::Output\n             let item_def_id = self.tcx.associated_item_def_ids(future_trait)[0];\n \n-            let bounds = self.tcx.explicit_item_bounds(*def_id);\n+            let bounds = self.tcx.bound_explicit_item_bounds(*def_id);\n \n-            for (predicate, _) in bounds {\n-                let predicate = EarlyBinder(*predicate).subst(self.tcx, substs);\n+            for predicate in bounds.transpose_iter().map(|e| e.map_bound(|(p, _)| *p)) {\n+                let predicate = predicate.subst(self.tcx, substs);\n                 let output = predicate\n                     .kind()\n                     .map_bound(|kind| match kind {"}, {"sha": "92c0ed84057a6f572478c1669860963ca6c1256f", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=91afd0263269c44d57fe127f4c20748b5747113b", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::{\n-    self, EarlyBinder, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable, TypeVisitor,\n+    self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable, TypeVisitor,\n };\n use rustc_span::Span;\n \n@@ -561,11 +561,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             obligations = self.at(&cause, param_env).eq(prev, hidden_ty)?.obligations;\n         }\n \n-        let item_bounds = tcx.explicit_item_bounds(def_id);\n+        let item_bounds = tcx.bound_explicit_item_bounds(def_id);\n \n-        for (predicate, _) in item_bounds {\n+        for predicate in item_bounds.transpose_iter().map(|e| e.map_bound(|(p, _)| *p)) {\n             debug!(?predicate);\n-            let predicate = EarlyBinder(*predicate).subst(tcx, substs);\n+            let predicate = predicate.subst(tcx, substs);\n \n             let predicate = predicate.fold_with(&mut BottomUpFolder {\n                 tcx,"}, {"sha": "4c0bc2e4337c712ffd96f09cc6d90f744c4abf20", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=91afd0263269c44d57fe127f4c20748b5747113b", "patch": "@@ -1,8 +1,6 @@\n use crate::mir::interpret::{AllocRange, ConstValue, GlobalAlloc, Pointer, Provenance, Scalar};\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n-use crate::ty::{\n-    self, ConstInt, DefIdTree, EarlyBinder, ParamConst, ScalarInt, Term, Ty, TyCtxt, TypeFoldable,\n-};\n+use crate::ty::{self, ConstInt, DefIdTree, ParamConst, ScalarInt, Term, Ty, TyCtxt, TypeFoldable};\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sso::SsoHashSet;\n@@ -776,14 +774,14 @@ pub trait PrettyPrinter<'tcx>:\n \n         // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n         // by looking up the projections associated with the def_id.\n-        let bounds = self.tcx().explicit_item_bounds(def_id);\n+        let bounds = self.tcx().bound_explicit_item_bounds(def_id);\n \n         let mut traits = BTreeMap::new();\n         let mut fn_traits = BTreeMap::new();\n         let mut is_sized = false;\n \n-        for (predicate, _) in bounds {\n-            let predicate = EarlyBinder(*predicate).subst(self.tcx(), substs);\n+        for predicate in bounds.transpose_iter().map(|e| e.map_bound(|(p, _)| *p)) {\n+            let predicate = predicate.subst(self.tcx(), substs);\n             let bound_predicate = predicate.kind();\n \n             match bound_predicate.skip_binder() {"}, {"sha": "a973a5c9b5053d6c311f371121f973db49315efc", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=91afd0263269c44d57fe127f4c20748b5747113b", "patch": "@@ -1109,6 +1109,30 @@ impl<T> EarlyBinder<Option<T>> {\n     }\n }\n \n+impl<T, U> EarlyBinder<(T, U)> {\n+    pub fn transpose_tuple2(self) -> (EarlyBinder<T>, EarlyBinder<U>) {\n+        (EarlyBinder(self.0.0), EarlyBinder(self.0.1))\n+    }\n+}\n+\n+pub struct EarlyBinderIter<T> {\n+    t: T,\n+}\n+\n+impl<T: IntoIterator> EarlyBinder<T> {\n+    pub fn transpose_iter(self) -> EarlyBinderIter<T::IntoIter> {\n+        EarlyBinderIter { t: self.0.into_iter() }\n+    }\n+}\n+\n+impl<T: Iterator> Iterator for EarlyBinderIter<T> {\n+    type Item = EarlyBinder<T::Item>;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.t.next().map(|i| EarlyBinder(i))\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub enum BoundVariableKind {"}, {"sha": "9c345c76d0e30c7b87e151e3ca03ef1b510a75b9", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=91afd0263269c44d57fe127f4c20748b5747113b", "patch": "@@ -604,6 +604,20 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn bound_impl_trait_ref(self, def_id: DefId) -> Option<EarlyBinder<ty::TraitRef<'tcx>>> {\n         self.impl_trait_ref(def_id).map(|i| EarlyBinder(i))\n     }\n+\n+    pub fn bound_explicit_item_bounds(\n+        self,\n+        def_id: DefId,\n+    ) -> EarlyBinder<&'tcx [(ty::Predicate<'tcx>, rustc_span::Span)]> {\n+        EarlyBinder(self.explicit_item_bounds(def_id))\n+    }\n+\n+    pub fn bound_item_bounds(\n+        self,\n+        def_id: DefId,\n+    ) -> EarlyBinder<&'tcx ty::List<ty::Predicate<'tcx>>> {\n+        EarlyBinder(self.item_bounds(def_id))\n+    }\n }\n \n struct OpaqueTypeExpander<'tcx> {"}, {"sha": "beaa56e1c1ca7f3cb85da0982f7544b36607f8cb", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=91afd0263269c44d57fe127f4c20748b5747113b", "patch": "@@ -1276,10 +1276,8 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n     // Check whether the self-type is itself a projection.\n     // If so, extract what we know from the trait and try to come up with a good answer.\n     let bounds = match *obligation.predicate.self_ty().kind() {\n-        ty::Projection(ref data) => {\n-            EarlyBinder(tcx.item_bounds(data.item_def_id)).subst(tcx, data.substs)\n-        }\n-        ty::Opaque(def_id, substs) => EarlyBinder(tcx.item_bounds(def_id)).subst(tcx, substs),\n+        ty::Projection(ref data) => tcx.bound_item_bounds(data.item_def_id).subst(tcx, data.substs),\n+        ty::Opaque(def_id, substs) => tcx.bound_item_bounds(def_id).subst(tcx, substs),\n         ty::Infer(ty::TyVar(_)) => {\n             // If the self-type is an inference variable, then it MAY wind up\n             // being a projected type, so induce an ambiguity."}, {"sha": "b9025c98fe7b71a421e3c9804d6c4df8aa6a1db1", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=91afd0263269c44d57fe127f4c20748b5747113b", "patch": "@@ -174,7 +174,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 _ => bug!(\"projection candidate for unexpected type: {:?}\", placeholder_self_ty),\n             };\n \n-            let candidate_predicate = EarlyBinder(tcx.item_bounds(def_id)[idx]).subst(tcx, substs);\n+            let candidate_predicate =\n+                tcx.bound_item_bounds(def_id).map_bound(|i| i[idx]).subst(tcx, substs);\n             let candidate = candidate_predicate\n                 .to_opt_poly_trait_pred()\n                 .expect(\"projection candidate is not a trait predicate\")\n@@ -500,21 +501,21 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // This maybe belongs in wf, but that can't (doesn't) handle\n             // higher-ranked things.\n             // Prevent, e.g., `dyn Iterator<Item = str>`.\n-            for bound in self.tcx().item_bounds(assoc_type) {\n-                let subst_bound = if defs.count() == 0 {\n-                    EarlyBinder(bound).subst(tcx, trait_predicate.trait_ref.substs)\n-                } else {\n-                    let mut substs = smallvec::SmallVec::with_capacity(defs.count());\n-                    substs.extend(trait_predicate.trait_ref.substs.iter());\n-                    let mut bound_vars: smallvec::SmallVec<[ty::BoundVariableKind; 8]> =\n-                        smallvec::SmallVec::with_capacity(\n-                            bound.kind().bound_vars().len() + defs.count(),\n-                        );\n-                    bound_vars.extend(bound.kind().bound_vars().into_iter());\n-                    InternalSubsts::fill_single(\n-                        &mut substs,\n-                        defs,\n-                        &mut |param, _| match param.kind {\n+            for bound in self.tcx().bound_item_bounds(assoc_type).transpose_iter() {\n+                let subst_bound =\n+                    if defs.count() == 0 {\n+                        bound.subst(tcx, trait_predicate.trait_ref.substs)\n+                    } else {\n+                        let mut substs = smallvec::SmallVec::with_capacity(defs.count());\n+                        substs.extend(trait_predicate.trait_ref.substs.iter());\n+                        let mut bound_vars: smallvec::SmallVec<[ty::BoundVariableKind; 8]> =\n+                            smallvec::SmallVec::with_capacity(\n+                                bound.0.kind().bound_vars().len() + defs.count(),\n+                            );\n+                        bound_vars.extend(bound.0.kind().bound_vars().into_iter());\n+                        InternalSubsts::fill_single(&mut substs, defs, &mut |param, _| match param\n+                            .kind\n+                        {\n                             GenericParamDefKind::Type { .. } => {\n                                 let kind = ty::BoundTyKind::Param(param.name);\n                                 let bound_var = ty::BoundVariableKind::Ty(kind);\n@@ -553,15 +554,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                 })\n                                 .into()\n                             }\n-                        },\n-                    );\n-                    let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n-                    let assoc_ty_substs = tcx.intern_substs(&substs);\n-\n-                    let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n-                    let bound = EarlyBinder(bound.kind().skip_binder()).subst(tcx, assoc_ty_substs);\n-                    tcx.mk_predicate(ty::Binder::bind_with_vars(bound, bound_vars))\n-                };\n+                        });\n+                        let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n+                        let assoc_ty_substs = tcx.intern_substs(&substs);\n+\n+                        let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n+                        let bound =\n+                            EarlyBinder(bound.0.kind().skip_binder()).subst(tcx, assoc_ty_substs);\n+                        tcx.mk_predicate(ty::Binder::bind_with_vars(bound, bound_vars))\n+                    };\n                 let normalized_bound = normalize_with_depth_to(\n                     self,\n                     obligation.param_env,"}, {"sha": "4f797b182c0b37940eae01ad6fdf1df1f84a4079", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=91afd0263269c44d57fe127f4c20748b5747113b", "patch": "@@ -1341,7 +1341,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n             }\n         };\n-        let bounds = EarlyBinder(tcx.item_bounds(def_id)).subst(tcx, substs);\n+        let bounds = tcx.bound_item_bounds(def_id).subst(tcx, substs);\n \n         // The bounds returned by `item_bounds` may contain duplicates after\n         // normalization, so try to deduplicate when possible to avoid"}, {"sha": "2ff32bdf9780502815a48fbfff71ae8146153826", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=91afd0263269c44d57fe127f4c20748b5747113b", "patch": "@@ -2447,10 +2447,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     true,\n                     None,\n                 );\n-                self.normalize_ty(\n-                    span,\n-                    EarlyBinder(tcx.at(span).type_of(def_id)).subst(tcx, substs),\n-                )\n+                EarlyBinder(self.normalize_ty(span, tcx.at(span).type_of(def_id)))\n+                    .subst(tcx, substs)\n             }\n             hir::TyKind::Array(ref ty, ref length) => {\n                 let length = match length {"}, {"sha": "c8fe046873603ec260af644723ce7a29595a0143", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=91afd0263269c44d57fe127f4c20748b5747113b", "patch": "@@ -12,7 +12,7 @@ use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_infer::infer::{InferOk, InferResult};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{self, EarlyBinder, Ty};\n+use rustc_middle::ty::{self, Ty};\n use rustc_span::source_map::Span;\n use rustc_span::DUMMY_SP;\n use rustc_target::spec::abi::Abi;\n@@ -175,19 +175,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> (Option<ExpectedSig<'tcx>>, Option<ty::ClosureKind>) {\n         match *expected_ty.kind() {\n             ty::Opaque(def_id, substs) => {\n-                let bounds = self.tcx.explicit_item_bounds(def_id);\n-                let sig = bounds.iter().find_map(|(pred, span)| match pred.kind().skip_binder() {\n-                    ty::PredicateKind::Projection(proj_predicate) => self\n-                        .deduce_sig_from_projection(\n-                            Some(*span),\n-                            pred.kind().rebind(EarlyBinder(proj_predicate).subst(self.tcx, substs)),\n-                        ),\n-                    _ => None,\n-                });\n+                let bounds = self.tcx.bound_explicit_item_bounds(def_id);\n+                let sig = bounds\n+                    .transpose_iter()\n+                    .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n+                    .find_map(|(pred, span)| match pred.0.kind().skip_binder() {\n+                        ty::PredicateKind::Projection(proj_predicate) => self\n+                            .deduce_sig_from_projection(\n+                                Some(span.0),\n+                                pred.0.kind().rebind(\n+                                    pred.map_bound(|_| proj_predicate).subst(self.tcx, substs),\n+                                ),\n+                            ),\n+                        _ => None,\n+                    });\n \n                 let kind = bounds\n-                    .iter()\n-                    .filter_map(|(pred, _)| match pred.kind().skip_binder() {\n+                    .transpose_iter()\n+                    .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n+                    .filter_map(|(pred, _)| match pred.0.kind().skip_binder() {\n                         ty::PredicateKind::Trait(tp) => {\n                             self.tcx.fn_trait_kind_from_lang_item(tp.def_id())\n                         }\n@@ -668,25 +674,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ),\n         };\n \n-        let item_bounds = self.tcx.explicit_item_bounds(def_id);\n+        let item_bounds = self.tcx.bound_explicit_item_bounds(def_id);\n \n         // Search for a pending obligation like\n         //\n         // `<R as Future>::Output = T`\n         //\n         // where R is the return type we are expecting. This type `T`\n         // will be our output.\n-        let output_ty = item_bounds.iter().find_map(|&(predicate, span)| {\n-            let bound_predicate = EarlyBinder(predicate).subst(self.tcx, substs).kind();\n-            if let ty::PredicateKind::Projection(proj_predicate) = bound_predicate.skip_binder() {\n-                self.deduce_future_output_from_projection(\n-                    span,\n-                    bound_predicate.rebind(proj_predicate),\n-                )\n-            } else {\n-                None\n-            }\n-        });\n+        let output_ty = item_bounds\n+            .transpose_iter()\n+            .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n+            .find_map(|(predicate, span)| {\n+                let bound_predicate = predicate.subst(self.tcx, substs).kind();\n+                if let ty::PredicateKind::Projection(proj_predicate) = bound_predicate.skip_binder()\n+                {\n+                    self.deduce_future_output_from_projection(\n+                        span.0,\n+                        bound_predicate.rebind(proj_predicate),\n+                    )\n+                } else {\n+                    None\n+                }\n+            });\n \n         debug!(\"deduce_future_output_from_obligations: output_ty={:?}\", output_ty);\n         output_ty"}, {"sha": "b857679520b8935b935291e0bf0be9918c190f01", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91afd0263269c44d57fe127f4c20748b5747113b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=91afd0263269c44d57fe127f4c20748b5747113b", "patch": "@@ -10,7 +10,7 @@ use rustc_infer::traits::util;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::util::ExplicitSelf;\n-use rustc_middle::ty::{self, DefIdTree, EarlyBinder};\n+use rustc_middle::ty::{self, DefIdTree};\n use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n@@ -1451,14 +1451,15 @@ pub fn check_type_bounds<'tcx>(\n         };\n \n         let obligations = tcx\n-            .explicit_item_bounds(trait_ty.def_id)\n-            .iter()\n-            .map(|&(bound, span)| {\n+            .bound_explicit_item_bounds(trait_ty.def_id)\n+            .transpose_iter()\n+            .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n+            .map(|(bound, span)| {\n                 debug!(?bound);\n-                let concrete_ty_bound = EarlyBinder(bound).subst(tcx, rebased_substs);\n+                let concrete_ty_bound = bound.subst(tcx, rebased_substs);\n                 debug!(\"check_type_bounds: concrete_ty_bound = {:?}\", concrete_ty_bound);\n \n-                traits::Obligation::new(mk_cause(span), param_env, concrete_ty_bound)\n+                traits::Obligation::new(mk_cause(span.0), param_env, concrete_ty_bound)\n             })\n             .collect();\n         debug!(\"check_type_bounds: item_bounds={:?}\", obligations);"}]}