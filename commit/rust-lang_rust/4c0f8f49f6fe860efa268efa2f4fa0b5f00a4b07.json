{"sha": "4c0f8f49f6fe860efa268efa2f4fa0b5f00a4b07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMGY4ZjQ5ZjZmZTg2MGVmYTI2OGVmYTJmNGZhMGI1ZjAwYTRiMDc=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-06-16T07:22:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-19T00:01:34Z"}, "message": "Fix comment formatting", "tree": {"sha": "37dcbf4da18565db2ce154d594cadad90f376466", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37dcbf4da18565db2ce154d594cadad90f376466"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c0f8f49f6fe860efa268efa2f4fa0b5f00a4b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0f8f49f6fe860efa268efa2f4fa0b5f00a4b07", "html_url": "https://github.com/rust-lang/rust/commit/4c0f8f49f6fe860efa268efa2f4fa0b5f00a4b07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c0f8f49f6fe860efa268efa2f4fa0b5f00a4b07/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b84d17d4d77b04e1b7784d95e0c3cb2dca16f344", "url": "https://api.github.com/repos/rust-lang/rust/commits/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344", "html_url": "https://github.com/rust-lang/rust/commit/b84d17d4d77b04e1b7784d95e0c3cb2dca16f344"}], "stats": {"total": 76, "additions": 36, "deletions": 40}, "files": [{"sha": "b64ee9bf4f702158889c7ed7713a07296377072e", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 36, "deletions": 40, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4c0f8f49f6fe860efa268efa2f4fa0b5f00a4b07/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0f8f49f6fe860efa268efa2f4fa0b5f00a4b07/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=4c0f8f49f6fe860efa268efa2f4fa0b5f00a4b07", "patch": "@@ -403,10 +403,8 @@ pub fn from_be32(x: u32) -> u32 { ByteOrder::from_big_endian(x) }\n #[stable]\n pub fn from_be64(x: u64) -> u64 { ByteOrder::from_big_endian(x) }\n \n-/**\n- * Swap the values at two mutable locations of the same type, without\n- * deinitialising or copying either one.\n- */\n+/// Swap the values at two mutable locations of the same type, without\n+/// deinitialising or copying either one.\n #[inline]\n #[stable]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n@@ -425,42 +423,40 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n     }\n }\n \n-/**\n- * Replace the value at a mutable location with a new one, returning the old\n- * value, without deinitialising or copying either one.\n- *\n- * This is primarily used for transferring and swapping ownership of a value\n- * in a mutable location. For example, this function allows consumption of\n- * one field of a struct by replacing it with another value. The normal approach\n- * doesn't always work:\n- *\n- * ```rust,ignore\n- * struct Buffer<T> { buf: Vec<T> }\n- *\n- * impl<T> Buffer<T> {\n- *     fn get_and_reset(&mut self) -> Vec<T> {\n- *         // error: cannot move out of dereference of `&mut`-pointer\n- *         let buf = self.buf;\n- *         self.buf = Vec::new();\n- *         buf\n- *     }\n- * }\n- * ```\n- *\n- * Note that `T` does not necessarily implement `Clone`, so it can't even\n- * clone and reset `self.buf`. But `replace` can be used to disassociate\n- * the original value of `self.buf` from `self`, allowing it to be returned:\n- *\n- * ```rust\n- * # struct Buffer<T> { buf: Vec<T> }\n- * impl<T> Buffer<T> {\n- *     fn get_and_reset(&mut self) -> Vec<T> {\n- *         use std::mem::replace;\n- *         replace(&mut self.buf, Vec::new())\n- *     }\n- * }\n- * ```\n- */\n+/// Replace the value at a mutable location with a new one, returning the old\n+/// value, without deinitialising or copying either one.\n+///\n+/// This is primarily used for transferring and swapping ownership of a value\n+/// in a mutable location. For example, this function allows consumption of\n+/// one field of a struct by replacing it with another value. The normal approach\n+/// doesn't always work:\n+///\n+/// ```rust,ignore\n+/// struct Buffer<T> { buf: Vec<T> }\n+///\n+/// impl<T> Buffer<T> {\n+///     fn get_and_reset(&mut self) -> Vec<T> {\n+///         // error: cannot move out of dereference of `&mut`-pointer\n+///         let buf = self.buf;\n+///         self.buf = Vec::new();\n+///         buf\n+///     }\n+/// }\n+/// ```\n+///\n+/// Note that `T` does not necessarily implement `Clone`, so it can't even\n+/// clone and reset `self.buf`. But `replace` can be used to disassociate\n+/// the original value of `self.buf` from `self`, allowing it to be returned:\n+///\n+/// ```rust\n+/// # struct Buffer<T> { buf: Vec<T> }\n+/// impl<T> Buffer<T> {\n+///     fn get_and_reset(&mut self) -> Vec<T> {\n+///         use std::mem::replace;\n+///         replace(&mut self.buf, Vec::new())\n+///     }\n+/// }\n+/// ```\n #[inline]\n #[stable]\n pub fn replace<T>(dest: &mut T, mut src: T) -> T {"}]}