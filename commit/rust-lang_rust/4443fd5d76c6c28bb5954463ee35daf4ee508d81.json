{"sha": "4443fd5d76c6c28bb5954463ee35daf4ee508d81", "node_id": "C_kwDOAAsO6NoAKDQ0NDNmZDVkNzZjNmMyOGJiNTk1NDQ2M2VlMzVkYWY0ZWU1MDhkODE", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-26T22:10:39Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-26T22:33:04Z"}, "message": "rustdoc: remove Clean trait impl for ProjectionTy", "tree": {"sha": "4e6a91f88462e3af166ec258213b028573b75303", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e6a91f88462e3af166ec258213b028573b75303"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4443fd5d76c6c28bb5954463ee35daf4ee508d81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4443fd5d76c6c28bb5954463ee35daf4ee508d81", "html_url": "https://github.com/rust-lang/rust/commit/4443fd5d76c6c28bb5954463ee35daf4ee508d81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4443fd5d76c6c28bb5954463ee35daf4ee508d81/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c11207ec89b856164bba03b8ecfe07b0b234ed21", "url": "https://api.github.com/repos/rust-lang/rust/commits/c11207ec89b856164bba03b8ecfe07b0b234ed21", "html_url": "https://github.com/rust-lang/rust/commit/c11207ec89b856164bba03b8ecfe07b0b234ed21"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "a9141b5f451411b06dc02f77b6edbd6328029706", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4443fd5d76c6c28bb5954463ee35daf4ee508d81/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4443fd5d76c6c28bb5954463ee35daf4ee508d81/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4443fd5d76c6c28bb5954463ee35daf4ee508d81", "patch": "@@ -421,7 +421,10 @@ impl<'tcx> Clean<'tcx, Term> for hir::Term<'tcx> {\n impl<'tcx> Clean<'tcx, WherePredicate> for ty::ProjectionPredicate<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> WherePredicate {\n         let ty::ProjectionPredicate { projection_ty, term } = self;\n-        WherePredicate::EqPredicate { lhs: projection_ty.clean(cx), rhs: term.clean(cx) }\n+        WherePredicate::EqPredicate {\n+            lhs: clean_projection(*projection_ty, cx, None),\n+            rhs: term.clean(cx),\n+        }\n     }\n }\n \n@@ -447,12 +450,6 @@ fn clean_projection<'tcx>(\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Type> for ty::ProjectionTy<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Type {\n-        clean_projection(*self, cx, None)\n-    }\n-}\n-\n fn compute_should_show_cast(self_def_id: Option<DefId>, trait_: &Path, self_type: &Type) -> bool {\n     !trait_.segments.is_empty()\n         && self_def_id\n@@ -734,8 +731,12 @@ fn clean_ty_generics<'tcx>(\n                             .filter(|b| !b.is_sized_bound(cx)),\n                     );\n \n-                    let proj = projection\n-                        .map(|p| (p.skip_binder().projection_ty.clean(cx), p.skip_binder().term));\n+                    let proj = projection.map(|p| {\n+                        (\n+                            clean_projection(p.skip_binder().projection_ty, cx, None),\n+                            p.skip_binder().term,\n+                        )\n+                    });\n                     if let Some(((_, trait_did, name), rhs)) = proj\n                         .as_ref()\n                         .and_then(|(lhs, rhs): &(Type, _)| Some((lhs.projection()?, rhs)))"}]}