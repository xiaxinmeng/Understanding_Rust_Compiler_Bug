{"sha": "fd5a08384d8ff297a50220df836f31610b23cf31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNWEwODM4NGQ4ZmYyOTdhNTAyMjBkZjgzNmYzMTYxMGIyM2NmMzE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-21T10:41:42Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-21T10:41:42Z"}, "message": "Move ast_util::pat_bindings over to new iter system.\n\nIssue #1056", "tree": {"sha": "56c45a1a10a675a8ca6d0aa97041d6a6418a8093", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56c45a1a10a675a8ca6d0aa97041d6a6418a8093"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd5a08384d8ff297a50220df836f31610b23cf31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5a08384d8ff297a50220df836f31610b23cf31", "html_url": "https://github.com/rust-lang/rust/commit/fd5a08384d8ff297a50220df836f31610b23cf31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd5a08384d8ff297a50220df836f31610b23cf31/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "html_url": "https://github.com/rust-lang/rust/commit/6bcb4a426c80a3ee19e7b32f25942a54c43e4387"}], "stats": {"total": 91, "additions": 41, "deletions": 50}, "files": [{"sha": "6f9d250fc4318e9fd9f4ac9165c92a11751e663c", "filename": "src/comp/middle/ast_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Fcomp%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Fcomp%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fast_map.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -46,17 +46,17 @@ fn map_fn(cx: ctx, f: _fn, _tp: [ty_param], _sp: codemap::span,\n }\n \n fn map_local(cx: ctx, loc: @local) {\n-    for each p in ast_util::pat_bindings(loc.node.pat) {\n+    ast_util::pat_bindings(loc.node.pat) {|p|\n         cx.map.insert(p.id, node_local(cx.local_id));\n         cx.local_id += 1u;\n-    }\n+    };\n }\n \n fn map_arm(cx: ctx, arm: arm) {\n-    for each p in ast_util::pat_bindings(arm.pats[0]) {\n+    ast_util::pat_bindings(arm.pats[0]) {|p|\n         cx.map.insert(p.id, node_local(cx.local_id));\n         cx.local_id += 1u;\n-    }\n+    };\n }\n \n fn map_item(cx: ctx, i: @item) {"}, {"sha": "377cf7564c677a377365eb2051e69c82df33cf56", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -744,10 +744,10 @@ fn lookup_in_ty_params(name: ident, ty_params: [ast::ty_param]) ->\n \n fn lookup_in_pat(name: ident, pat: @ast::pat) -> option::t<def_id> {\n     let found = none;\n-    for each bound in ast_util::pat_bindings(pat) {\n+    ast_util::pat_bindings(pat) {|bound|\n         let p_name = alt bound.node { ast::pat_bind(n) { n } };\n         if str::eq(p_name, name) { found = some(local_def(bound.id)); }\n-    }\n+    };\n     ret found;\n }\n \n@@ -1269,10 +1269,10 @@ fn check_item(e: @env, i: @ast::item, &&x: (), v: vt<()>) {\n }\n \n fn check_pat(ch: checker, p: @ast::pat) {\n-    for each p in ast_util::pat_bindings(p) {\n+    ast_util::pat_bindings(p) {|p|\n         let ident = alt p.node { pat_bind(n) { n } };\n         add_name(ch, p.span, ident);\n-    }\n+    };\n }\n \n fn check_arm(e: @env, a: ast::arm, &&x: (), v: vt<()>) {\n@@ -1317,11 +1317,11 @@ fn check_block(e: @env, b: ast::blk, &&x: (), v: vt<()>) {\n               ast::decl_local(locs) {\n                 let local_values = checker(*e, \"value\");\n                 for (_, loc) in locs {\n-                    for each p in ast_util::pat_bindings(loc.node.pat) {\n+                    ast_util::pat_bindings(loc.node.pat) {|p|\n                         let ident = alt p.node { pat_bind(n) { n } };\n                         add_name(local_values, p.span, ident);\n                         check_name(values, p.span, ident);\n-                    }\n+                    };\n                 }\n               }\n               ast::decl_item(it) {"}, {"sha": "6ffd10c02bdf04e058832c3b333c3579e88884ea", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -1055,10 +1055,10 @@ type binding = {lhs: [inst], rhs: option::t<initializer>};\n \n fn local_to_bindings(loc: @local) -> binding {\n     let lhs = [];\n-    for each p: @pat in pat_bindings(loc.node.pat) {\n+    pat_bindings(loc.node.pat) {|p|\n         let ident = alt p.node { pat_bind(name) { name } };\n         lhs += [{ident: ident, node: p.id}];\n-    }\n+    };\n     {lhs: lhs, rhs: loc.node.init}\n }\n "}, {"sha": "28d9c288aa7b46445ff9af2f2edd90092c8be4b9", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -13,11 +13,11 @@ import syntax::ast_util::respan;\n type ctxt = {cs: @mutable [sp_constr], tcx: ty::ctxt};\n \n fn collect_local(loc: @local, cx: ctxt, v: visit::vt<ctxt>) {\n-    for each p: @pat in pat_bindings(loc.node.pat) {\n+    pat_bindings(loc.node.pat) {|p|\n         let ident = alt p.node { pat_bind(id) { id } };\n         log \"collect_local: pushing \" + ident;;\n         *cx.cs += [respan(loc.span, ninit(p.id, ident))];\n-    }\n+    };\n     visit::visit_local(loc, cx, v);\n }\n "}, {"sha": "6a8ddfacae444a05bb6d2bf81ca478b9de5edfd4", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -109,14 +109,14 @@ fn find_pre_post_loop(fcx: fn_ctxt, l: @local, index: @expr, body: blk,\n                       id: node_id) {\n     find_pre_post_expr(fcx, index);\n     find_pre_post_block(fcx, body);\n-    for each p: @pat in pat_bindings(l.node.pat) {\n+    pat_bindings(l.node.pat) {|p|\n         let ident = alt p.node { pat_bind(id) { id } };\n         let v_init = ninit(p.id, ident);\n         relax_precond_block(fcx, bit_num(fcx, v_init) as node_id, body);\n         // Hack: for-loop index variables are frequently ignored,\n         // so we pretend they're used\n         use_var(fcx, p.id);\n-    }\n+    };\n \n     let loop_precond =\n         seq_preconds(fcx, [expr_pp(fcx.ccx, index), block_pp(fcx.ccx, body)]);\n@@ -577,9 +577,9 @@ fn find_pre_post_stmt(fcx: fn_ctxt, s: stmt) {\n                     /* LHS always becomes initialized,\n                      whether or not this is a move */\n                     find_pre_post_expr(fcx, an_init.expr);\n-                    for each p: @pat in pat_bindings(alocal.node.pat) {\n+                    pat_bindings(alocal.node.pat) {|p|\n                         copy_pre_post(fcx.ccx, p.id, an_init.expr);\n-                    }\n+                    };\n                     /* Inherit ann from initializer, and add var being\n                        initialized to the postcondition */\n                     copy_pre_post(fcx.ccx, id, an_init.expr);\n@@ -590,18 +590,15 @@ fn find_pre_post_stmt(fcx: fn_ctxt, s: stmt) {\n                       _ { }\n                     }\n \n-                    for each pat: @pat in pat_bindings(alocal.node.pat) {\n+                    pat_bindings(alocal.node.pat) {|pat|\n                         /* FIXME: This won't be necessary when typestate\n                         works well enough for pat_bindings to return a\n                         refinement-typed thing. */\n-                        let ident =\n-                            alt pat.node {\n-                              pat_bind(n) { n }\n-                              _ {\n-                                fcx.ccx.tcx.sess.span_bug(pat.span,\n-                                                          \"Impossible LHS\");\n-                              }\n-                            };\n+                        let ident = alt pat.node {\n+                          pat_bind(n) { n }\n+                          _ { fcx.ccx.tcx.sess.span_bug(pat.span,\n+                                                        \"Impossible LHS\"); }\n+                        };\n                         alt p {\n                           some(p) {\n                             copy_in_postcond(fcx, id,\n@@ -615,7 +612,7 @@ fn find_pre_post_stmt(fcx: fn_ctxt, s: stmt) {\n                           none. { }\n                         }\n                         gen(fcx, id, ninit(pat.id, ident));\n-                    }\n+                    };\n \n                     if an_init.op == init_move && is_path(an_init.expr) {\n                         forget_in_postcond(fcx, id, an_init.expr.id);\n@@ -628,7 +625,7 @@ fn find_pre_post_stmt(fcx: fn_ctxt, s: stmt) {\n                                seq_preconds(fcx, [prev_pp, e_pp]));\n                     /* Include the LHSs too, since those aren't in the\n                      postconds of the RHSs themselves */\n-                    for each pat: @pat in pat_bindings(alocal.node.pat) {\n+                    pat_bindings(alocal.node.pat) {|pat|\n                         alt pat.node {\n                           pat_bind(n) {\n                             set_in_postcond(bit_num(fcx, ninit(pat.id, n)),\n@@ -639,14 +636,14 @@ fn find_pre_post_stmt(fcx: fn_ctxt, s: stmt) {\n                                                       \"Impossible LHS\");\n                           }\n                         }\n-                    }\n+                    };\n                     copy_pre_post_(fcx.ccx, id, prev_pp.precondition,\n                                    prev_pp.postcondition);\n                   }\n                   none. {\n-                    for each p: @pat in pat_bindings(alocal.node.pat) {\n+                    pat_bindings(alocal.node.pat) {|p|\n                         clear_pp(node_id_to_ts_ann(fcx.ccx, p.id).conditions);\n-                    }\n+                    };\n                     clear_pp(node_id_to_ts_ann(fcx.ccx, id).conditions);\n                   }\n                 }"}, {"sha": "04b8a009cc281ef87b74e7b5fb38aa0cb2caa3da", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -209,10 +209,10 @@ fn find_pre_post_state_loop(fcx: fn_ctxt, pres: prestate, l: @local,\n     // Make sure the index vars are considered initialized\n     // in the body\n     let index_post = tritv_clone(expr_poststate(fcx.ccx, index));\n-    for each p: @pat in pat_bindings(l.node.pat) {\n+    pat_bindings(l.node.pat) {|p|\n         let ident = alt p.node { pat_bind(name) { name } };\n         set_in_poststate_ident(fcx, p.id, ident, index_post);\n-    }\n+    };\n \n     changed |= find_pre_post_state_block(fcx, index_post, body);\n "}, {"sha": "3d4fe27d98071139a77a46227ac9b09ccaff9c10", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -48,35 +48,29 @@ type pat_id_map = std::map::hashmap<str, node_id>;\n // use the node_id of their namesake in the first pattern.\n fn pat_id_map(pat: @pat) -> pat_id_map {\n     let map = std::map::new_str_hash::<node_id>();\n-    for each bound in pat_bindings(pat) {\n+    pat_bindings(pat) {|bound|\n         let name = alt bound.node { pat_bind(n) { n } };\n         map.insert(name, bound.id);\n-    }\n+    };\n     ret map;\n }\n \n // FIXME: could return a constrained type\n-iter pat_bindings(pat: @pat) -> @pat {\n+fn pat_bindings(pat: @pat, it: block(@pat)) {\n     alt pat.node {\n-      pat_bind(_) { put pat; }\n-      pat_tag(_, sub) {\n-        for p in sub { for each b in pat_bindings(p) { put b; } }\n-      }\n-      pat_rec(fields, _) {\n-        for f in fields { for each b in pat_bindings(f.pat) { put b; } }\n-      }\n-      pat_tup(elts) {\n-        for elt in elts { for each b in pat_bindings(elt) { put b; } }\n-      }\n-      pat_box(sub) { for each b in pat_bindings(sub) { put b; } }\n-      pat_uniq(sub) { for each b in pat_bindings(sub) { put b; } }\n+      pat_bind(_) { it(pat); }\n+      pat_tag(_, sub) { for p in sub { pat_bindings(p, it); } }\n+      pat_rec(fields, _) { for f in fields { pat_bindings(f.pat, it); } }\n+      pat_tup(elts) { for elt in elts { pat_bindings(elt, it); } }\n+      pat_box(sub) { pat_bindings(sub, it); }\n+      pat_uniq(sub) { pat_bindings(sub, it); }\n       pat_wild. | pat_lit(_) | pat_range(_, _) { }\n     }\n }\n \n fn pat_binding_ids(pat: @pat) -> [node_id] {\n     let found = [];\n-    for each b in pat_bindings(pat) { found += [b.id]; }\n+    pat_bindings(pat) {|b| found += [b.id]; };\n     ret found;\n }\n "}]}