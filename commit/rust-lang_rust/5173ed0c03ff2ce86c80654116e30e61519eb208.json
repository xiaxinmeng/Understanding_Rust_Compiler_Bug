{"sha": "5173ed0c03ff2ce86c80654116e30e61519eb208", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNzNlZDBjMDNmZjJjZTg2YzgwNjU0MTE2ZTMwZTYxNTE5ZWIyMDg=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2018-10-03T18:59:59Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2018-10-03T18:59:59Z"}, "message": "Don't suggest `to_string().to_string` in USELESS_FORMAT", "tree": {"sha": "2098d6a950f423700f8f49176db9bdb29c8ebc8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2098d6a950f423700f8f49176db9bdb29c8ebc8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5173ed0c03ff2ce86c80654116e30e61519eb208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5173ed0c03ff2ce86c80654116e30e61519eb208", "html_url": "https://github.com/rust-lang/rust/commit/5173ed0c03ff2ce86c80654116e30e61519eb208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5173ed0c03ff2ce86c80654116e30e61519eb208/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eebd5b20c215c4baa98a1ac569e543712451c33", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eebd5b20c215c4baa98a1ac569e543712451c33", "html_url": "https://github.com/rust-lang/rust/commit/7eebd5b20c215c4baa98a1ac569e543712451c33"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "30ad022f4763a0a00ec145c2c82cefaf70b669f2", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5173ed0c03ff2ce86c80654116e30e61519eb208/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5173ed0c03ff2ce86c80654116e30e61519eb208/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=5173ed0c03ff2ce86c80654116e30e61519eb208", "patch": "@@ -57,12 +57,24 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         if check_single_piece(&args[0]);\n                         if let Some(format_arg) = get_single_string_arg(cx, &args[1]);\n                         if check_unformatted(&args[2]);\n+                        if let ExprKind::AddrOf(_, ref format_arg) = format_arg.node;\n                         then {\n-                            let sugg = format!(\"{}.to_string()\", snippet(cx, format_arg, \"<arg>\").into_owned());\n+                            let (message, sugg) = if_chain! {\n+                                if let ExprKind::MethodCall(ref path, ref span, ref expr) = format_arg.node;\n+                                if path.ident.as_interned_str() == \"to_string\";\n+                                then {\n+                                    (\"`to_string()` is enough\",\n+                                    snippet(cx, format_arg.span, \"<arg>\").to_string())\n+                                } else {\n+                                    (\"consider using .to_string()\",\n+                                    format!(\"{}.to_string()\", snippet(cx, format_arg.span, \"<arg>\")))\n+                                }\n+                            };\n+\n                             span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n                                 db.span_suggestion_with_applicability(\n                                     expr.span,\n-                                    \"consider using .to_string()\",\n+                                    message,\n                                     sugg,\n                                     Applicability::MachineApplicable,\n                                 );\n@@ -113,9 +125,9 @@ fn check_single_piece(expr: &Expr) -> bool {\n /// ::std::fmt::Display::fmt)],\n /// }\n /// ```\n-/// and that type of `__arg0` is `&str` or `String`\n-/// then returns the span of first element of the matched tuple\n-fn get_single_string_arg(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<Span> {\n+/// and that the type of `__arg0` is `&str` or `String`,\n+/// then returns the span of first element of the matched tuple.\n+fn get_single_string_arg<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<&'a Expr> {\n     if_chain! {\n         if let ExprKind::AddrOf(_, ref expr) = expr.node;\n         if let ExprKind::Match(ref match_expr, ref arms, _) = expr.node;\n@@ -134,7 +146,7 @@ fn get_single_string_arg(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<Span>\n             let ty = walk_ptrs_ty(cx.tables.pat_ty(&pat[0]));\n             if ty.sty == ty::Str || match_type(cx, ty, &paths::STRING) {\n                 if let ExprKind::Tup(ref values) = match_expr.node {\n-                    return Some(values[0].span);\n+                    return Some(&values[0]);\n                 }\n             }\n         }"}, {"sha": "858c9fc8de5c3f461f683f82f9804568961b1d98", "filename": "tests/ui/format.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5173ed0c03ff2ce86c80654116e30e61519eb208/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5173ed0c03ff2ce86c80654116e30e61519eb208/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=5173ed0c03ff2ce86c80654116e30e61519eb208", "patch": "@@ -52,4 +52,8 @@ fn main() {\n     format!(\"{:.10}\", \"foo\"); // could not be \"foo\"[..10]\n     format!(\"{:.prec$}\", \"foo\", prec = 1);\n     format!(\"{:.prec$}\", \"foo\", prec = 10);\n+\n+    format!(\"{}\", 42.to_string());\n+    let x = std::path::PathBuf::from(\"/bar/foo/qux\");\n+    format!(\"{}\", x.display().to_string());\n }"}, {"sha": "520c1b794337deeb02e1f5d2210c7107d7b3e35e", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5173ed0c03ff2ce86c80654116e30e61519eb208/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5173ed0c03ff2ce86c80654116e30e61519eb208/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=5173ed0c03ff2ce86c80654116e30e61519eb208", "patch": "@@ -54,5 +54,21 @@ error: useless use of `format!`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 7 previous errors\n+error: useless use of `format!`\n+  --> $DIR/format.rs:56:5\n+   |\n+56 |     format!(\"{}\", 42.to_string());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: `to_string()` is enough: `42.to_string()`\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:58:5\n+   |\n+58 |     format!(\"{}\", x.display().to_string());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: `to_string()` is enough: `x.display().to_string()`\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 9 previous errors\n "}]}