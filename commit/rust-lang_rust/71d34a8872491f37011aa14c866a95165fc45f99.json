{"sha": "71d34a8872491f37011aa14c866a95165fc45f99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZDM0YTg4NzI0OTFmMzcwMTFhYTE0Yzg2NmE5NTE2NWZjNDVmOTk=", "commit": {"author": {"name": "Zack Corr", "email": "zack@z0w0.me", "date": "2013-01-15T13:57:03Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-02-16T02:04:10Z"}, "message": "rustpkg: More preliminary work", "tree": {"sha": "29fe7d133311e7a787da3aa727c2fbf68f2d255b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29fe7d133311e7a787da3aa727c2fbf68f2d255b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71d34a8872491f37011aa14c866a95165fc45f99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71d34a8872491f37011aa14c866a95165fc45f99", "html_url": "https://github.com/rust-lang/rust/commit/71d34a8872491f37011aa14c866a95165fc45f99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71d34a8872491f37011aa14c866a95165fc45f99/comments", "author": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "621c791dedaeb0b421e259feea6acef0df51ea27", "url": "https://api.github.com/repos/rust-lang/rust/commits/621c791dedaeb0b421e259feea6acef0df51ea27", "html_url": "https://github.com/rust-lang/rust/commit/621c791dedaeb0b421e259feea6acef0df51ea27"}], "stats": {"total": 174, "additions": 173, "deletions": 1}, "files": [{"sha": "10868c236367567a36c4a64d5eed9f58436e8cc9", "filename": "src/librustpkg/api.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/71d34a8872491f37011aa14c866a95165fc45f99/src%2Flibrustpkg%2Fapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d34a8872491f37011aa14c866a95165fc45f99/src%2Flibrustpkg%2Fapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fapi.rs?ref=71d34a8872491f37011aa14c866a95165fc45f99", "patch": "@@ -0,0 +1,20 @@\n+use core::*;\n+\n+pub struct Crate {\n+    file: ~str,\n+    flags: ~[~str],\n+    cfg: ~[~str]\n+}\n+\n+pub impl Crate {\n+    fn flag(flag: ~str) -> Crate {\n+        Crate {\n+            flags: vec::append(self.flags, flag),\n+            .. copy self\n+        }\n+    }\n+}\n+\n+pub fn build(_targets: ~[Crate]) {\n+    // TODO: magic\n+}"}, {"sha": "a21bd2dc9ec69833e71829f53d88641cd755fb21", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/71d34a8872491f37011aa14c866a95165fc45f99/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/71d34a8872491f37011aa14c866a95165fc45f99/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=71d34a8872491f37011aa14c866a95165fc45f99", "patch": "@@ -16,16 +16,62 @@\n        url = \"https://github.com/mozilla/rust/tree/master/src/librustpkg\")];\n \n #[crate_type = \"lib\"];\n-\n #[no_core];\n \n extern mod core(vers = \"0.6\");\n extern mod std(vers = \"0.6\");\n extern mod rustc(vers = \"0.6\");\n extern mod syntax(vers = \"0.6\");\n \n+use core::*;\n+use std::getopts;\n+use getopts::{optflag, optopt, opt_present};\n use rustc::metadata::{filesearch};\n \n+mod api;\n+mod usage;\n+mod util;\n+\n+use util::*;\n+\n pub fn main() {\n+    let args = os::args();\n+    let opts = ~[optflag(~\"h\"), optflag(~\"help\")];\n+    let matches = &match getopts::getopts(args, opts) {\n+        result::Ok(m) => m,\n+        result::Err(f) => {\n+            fail fmt!(\"%s\", getopts::fail_str(f));\n+        }\n+    };\n+    let help = opt_present(matches, ~\"h\") || opt_present(matches, ~\"help\");\n+    let mut args = copy matches.free;\n+\n+    args.shift();\n \n+    if (args.len() < 1) {\n+        return usage::general();\n+    }\n+\n+    let cmd = copy args[0];\n+\n+    if !is_cmd(cmd) {\n+        return usage::general();\n+    } else if help {\n+        match cmd {\n+            ~\"build\" => usage::build(),\n+            ~\"clean\" => usage::clean(),\n+            ~\"install\" => usage::install(),\n+            ~\"prefer\" => usage::prefer(),\n+            ~\"test\" => usage::test(),\n+            ~\"uninstall\" => usage::uninstall(),\n+            ~\"unprefer\" => usage::unprefer(),\n+            _ => usage::general()\n+        }\n+    }\n+\n+    Ctx { cmd: cmd, args: args }\n }\n+\n+pub use Crate = api::Crate;\n+pub use build = api::build;\n+pub use util = api::util;"}, {"sha": "64fbb99164665421d162e42639ce6f80180c7915", "filename": "src/librustpkg/usage.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/71d34a8872491f37011aa14c866a95165fc45f99/src%2Flibrustpkg%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d34a8872491f37011aa14c866a95165fc45f99/src%2Flibrustpkg%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fusage.rs?ref=71d34a8872491f37011aa14c866a95165fc45f99", "patch": "@@ -0,0 +1,100 @@\n+use core::io;\n+\n+pub fn general() {\n+    io::println(~\"Usage: rustpkg [options] <cmd> [args..]\n+\n+Where <cmd> is one of:\n+    build, clean, install, prefer, test, uninstall, unprefer\n+\n+Options:\n+\n+    -h, --help                  Display this message\n+    <cmd> -h, <cmd> --help      Display help for <cmd>\");\n+}\n+\n+pub fn build() {\n+    io::println(~\"rustpkg [options..] build\n+\n+Build all targets described in the package script in the current\n+directory.\n+\n+Options:\n+    -c, --cfg      Pass a cfg flag to the package script\");\n+}\n+\n+pub fn clean() {\n+    io::println(~\"rustpkg clean\n+\n+Remove all build files in the work cache for the package in the current\n+directory.\");\n+}\n+\n+pub fn install() {\n+    io::println(~\"rustpkg [options..] install [url] [target]\n+\n+Install a package from a URL by Git or cURL (FTP, HTTP, etc.).\n+If target is provided, Git will checkout the branch or tag before\n+continuing. If the URL is a TAR file (with or without compression),\n+extract it before installing. If a URL isn't provided, the package will\n+be built and installed from the current directory (which is\n+functionally the same as `rustpkg build` and installing the result).\n+\n+Examples:\n+    rustpkg install\n+    rustpkg install git://github.com/mozilla/servo.git\n+    rustpkg install git://github.com/mozilla/servo.git v0.1.2\n+    rustpkg install http://rust-lang.org/hello-world-0.3.4.tar.gz\n+\n+Options:\n+    -c, --cfg      Pass a cfg flag to the package script\n+    -p, --prefer   Prefer the package after installing\n+                   (see `rustpkg prefer -h`)\");\n+}\n+\n+pub fn uninstall() {\n+    io::println(~\"rustpkg uninstall <name>[@version]\n+\n+Remove a package by name and/or version. If version is omitted then all\n+versions of the package will be removed. If the package[s] is/are depended\n+on by another package then they cannot be removed.  If the package is preferred\n+(see `rustpkg prefer -h`), it will attempt to prefer the next latest\n+version of the package if another version is installed, otherwise it'll remove\n+the symlink.\");\n+}\n+\n+pub fn prefer() {\n+    io::println(~\"rustpkg [options..] prefer <name>[@version]\n+\n+By default all binaries are given a unique name so that multiple versions can\n+coexist. The prefer command will symlink the uniquely named binary to\n+the binary directory under its bare name. The user will need to confirm\n+if the symlink will overwrite another. If version is not supplied, the latest\n+version of the package will be preferred.\n+\n+Example:\n+    export PATH=$PATH:/home/user/.rustpkg/bin\n+    rustpkg prefer machine@1.2.4\n+    machine -v\n+    ==> v1.2.4\n+    rustpkg prefer machine@0.4.6\n+    machine -v\n+    ==> v0.4.6\");\n+}\n+\n+pub fn unprefer() {\n+    io::println(~\"rustpkg [options..] unprefer <name>\n+\n+Remove all symlinks from the store to the binary directory for a package\n+name. See `rustpkg prefer -h` for more information.\");\n+}\n+\n+pub fn test() {\n+    io::println(~\"rustpkg [options..] test\n+\n+Build all targets described in the package script in the current directory\n+with the test flag. The test bootstraps will be run afterwards and the output\n+and exit code will be redirected.\n+\n+Options:\n+    -c, --cfg      Pass a cfg flag to the package script\");\n+}"}, {"sha": "304c4864d4c4dc597cd6718e1c501afd615e7d93", "filename": "src/librustpkg/util.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71d34a8872491f37011aa14c866a95165fc45f99/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d34a8872491f37011aa14c866a95165fc45f99/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=71d34a8872491f37011aa14c866a95165fc45f99", "patch": "@@ -0,0 +1,6 @@\n+pub fn is_cmd(cmd: ~str) -> bool {\n+    let cmds = &[~\"build\", ~\"clean\", ~\"install\", ~\"prefer\", ~\"test\",\n+                 ~\"uninstall\", ~\"unprefer\"];\n+\n+    vec::contains(cmds, &cmd)\n+}"}]}