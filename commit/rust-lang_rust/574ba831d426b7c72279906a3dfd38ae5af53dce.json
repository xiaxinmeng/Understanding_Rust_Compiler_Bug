{"sha": "574ba831d426b7c72279906a3dfd38ae5af53dce", "node_id": "C_kwDOAAsO6NoAKDU3NGJhODMxZDQyNmI3YzcyMjc5OTA2YTNkZmQzOGFlNWFmNTNkY2U", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-09T23:47:59Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-10T01:51:21Z"}, "message": "Avoid repeating qualifiers on `static_assert_size` calls.\n\nSome of these don't need a `use` statement because there is already a\n`#[macro_use] extern crate rustc_data_structures` item in the crate.", "tree": {"sha": "4ceaef3a8fc23cd1eb3843429965923a00d3e14e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ceaef3a8fc23cd1eb3843429965923a00d3e14e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/574ba831d426b7c72279906a3dfd38ae5af53dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/574ba831d426b7c72279906a3dfd38ae5af53dce", "html_url": "https://github.com/rust-lang/rust/commit/574ba831d426b7c72279906a3dfd38ae5af53dce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/574ba831d426b7c72279906a3dfd38ae5af53dce/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03ce30962cf1b2a5158667eabae8bf6e8d1cb03", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03ce30962cf1b2a5158667eabae8bf6e8d1cb03", "html_url": "https://github.com/rust-lang/rust/commit/f03ce30962cf1b2a5158667eabae8bf6e8d1cb03"}], "stats": {"total": 106, "additions": 55, "deletions": 51}, "files": [{"sha": "5e8fd508f56fbd3dc51833d11a0c15b09329a58f", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/574ba831d426b7c72279906a3dfd38ae5af53dce/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574ba831d426b7c72279906a3dfd38ae5af53dce/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=574ba831d426b7c72279906a3dfd38ae5af53dce", "patch": "@@ -3030,22 +3030,23 @@ pub type ForeignItem = Item<ForeignItemKind>;\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {\n     use super::*;\n+    use rustc_data_structures::static_assert_size;\n     // These are in alphabetical order, which is easy to maintain.\n-    rustc_data_structures::static_assert_size!(AssocItemKind, 72);\n-    rustc_data_structures::static_assert_size!(Attribute, 152);\n-    rustc_data_structures::static_assert_size!(Block, 48);\n-    rustc_data_structures::static_assert_size!(Expr, 104);\n-    rustc_data_structures::static_assert_size!(Fn, 192);\n-    rustc_data_structures::static_assert_size!(ForeignItemKind, 72);\n-    rustc_data_structures::static_assert_size!(GenericBound, 88);\n-    rustc_data_structures::static_assert_size!(Generics, 72);\n-    rustc_data_structures::static_assert_size!(Impl, 200);\n-    rustc_data_structures::static_assert_size!(Item, 200);\n-    rustc_data_structures::static_assert_size!(ItemKind, 112);\n-    rustc_data_structures::static_assert_size!(Lit, 48);\n-    rustc_data_structures::static_assert_size!(Pat, 120);\n-    rustc_data_structures::static_assert_size!(Path, 40);\n-    rustc_data_structures::static_assert_size!(PathSegment, 24);\n-    rustc_data_structures::static_assert_size!(Stmt, 32);\n-    rustc_data_structures::static_assert_size!(Ty, 96);\n+    static_assert_size!(AssocItemKind, 72);\n+    static_assert_size!(Attribute, 152);\n+    static_assert_size!(Block, 48);\n+    static_assert_size!(Expr, 104);\n+    static_assert_size!(Fn, 192);\n+    static_assert_size!(ForeignItemKind, 72);\n+    static_assert_size!(GenericBound, 88);\n+    static_assert_size!(Generics, 72);\n+    static_assert_size!(Impl, 200);\n+    static_assert_size!(Item, 200);\n+    static_assert_size!(ItemKind, 112);\n+    static_assert_size!(Lit, 48);\n+    static_assert_size!(Pat, 120);\n+    static_assert_size!(Path, 40);\n+    static_assert_size!(PathSegment, 24);\n+    static_assert_size!(Stmt, 32);\n+    static_assert_size!(Ty, 96);\n }"}, {"sha": "fe80a55dfd28ce9fbd6bb9a4273c4e04ea7b2960", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/574ba831d426b7c72279906a3dfd38ae5af53dce/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574ba831d426b7c72279906a3dfd38ae5af53dce/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=574ba831d426b7c72279906a3dfd38ae5af53dce", "patch": "@@ -823,9 +823,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {\n     use super::*;\n+    use rustc_data_structures::static_assert_size;\n     // These are in alphabetical order, which is easy to maintain.\n-    rustc_data_structures::static_assert_size!(Immediate, 56);\n-    rustc_data_structures::static_assert_size!(ImmTy<'_>, 72);\n-    rustc_data_structures::static_assert_size!(Operand, 64);\n-    rustc_data_structures::static_assert_size!(OpTy<'_>, 88);\n+    static_assert_size!(Immediate, 56);\n+    static_assert_size!(ImmTy<'_>, 72);\n+    static_assert_size!(Operand, 64);\n+    static_assert_size!(OpTy<'_>, 88);\n }"}, {"sha": "97fe23cb5bcf3ee5f4e7741778635645c9730227", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/574ba831d426b7c72279906a3dfd38ae5af53dce/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574ba831d426b7c72279906a3dfd38ae5af53dce/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=574ba831d426b7c72279906a3dfd38ae5af53dce", "patch": "@@ -891,10 +891,11 @@ where\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {\n     use super::*;\n+    use rustc_data_structures::static_assert_size;\n     // These are in alphabetical order, which is easy to maintain.\n-    rustc_data_structures::static_assert_size!(MemPlaceMeta, 24);\n-    rustc_data_structures::static_assert_size!(MemPlace, 40);\n-    rustc_data_structures::static_assert_size!(MPlaceTy<'_>, 64);\n-    rustc_data_structures::static_assert_size!(Place, 48);\n-    rustc_data_structures::static_assert_size!(PlaceTy<'_>, 72);\n+    static_assert_size!(MemPlaceMeta, 24);\n+    static_assert_size!(MemPlace, 40);\n+    static_assert_size!(MPlaceTy<'_>, 64);\n+    static_assert_size!(Place, 48);\n+    static_assert_size!(PlaceTy<'_>, 72);\n }"}, {"sha": "7a87a3e4882601700eb7e5ebd1ef9272d4769d8a", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/574ba831d426b7c72279906a3dfd38ae5af53dce/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574ba831d426b7c72279906a3dfd38ae5af53dce/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=574ba831d426b7c72279906a3dfd38ae5af53dce", "patch": "@@ -3491,16 +3491,16 @@ impl<'hir> Node<'hir> {\n mod size_asserts {\n     use super::*;\n     // These are in alphabetical order, which is easy to maintain.\n-    rustc_data_structures::static_assert_size!(Block<'static>, 48);\n-    rustc_data_structures::static_assert_size!(Expr<'static>, 56);\n-    rustc_data_structures::static_assert_size!(ForeignItem<'static>, 72);\n-    rustc_data_structures::static_assert_size!(GenericBound<'_>, 48);\n-    rustc_data_structures::static_assert_size!(Generics<'static>, 56);\n-    rustc_data_structures::static_assert_size!(ImplItem<'static>, 88);\n-    rustc_data_structures::static_assert_size!(Impl<'static>, 80);\n-    rustc_data_structures::static_assert_size!(Item<'static>, 80);\n-    rustc_data_structures::static_assert_size!(Pat<'static>, 88);\n-    rustc_data_structures::static_assert_size!(QPath<'static>, 24);\n-    rustc_data_structures::static_assert_size!(TraitItem<'static>, 96);\n-    rustc_data_structures::static_assert_size!(Ty<'static>, 72);\n+    static_assert_size!(Block<'static>, 48);\n+    static_assert_size!(Expr<'static>, 56);\n+    static_assert_size!(ForeignItem<'static>, 72);\n+    static_assert_size!(GenericBound<'_>, 48);\n+    static_assert_size!(Generics<'static>, 56);\n+    static_assert_size!(ImplItem<'static>, 88);\n+    static_assert_size!(Impl<'static>, 80);\n+    static_assert_size!(Item<'static>, 80);\n+    static_assert_size!(Pat<'static>, 88);\n+    static_assert_size!(QPath<'static>, 24);\n+    static_assert_size!(TraitItem<'static>, 96);\n+    static_assert_size!(Ty<'static>, 72);\n }"}, {"sha": "5e26a52900eaf404ce2e4f819ddaf64bd116f7f6", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/574ba831d426b7c72279906a3dfd38ae5af53dce/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574ba831d426b7c72279906a3dfd38ae5af53dce/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=574ba831d426b7c72279906a3dfd38ae5af53dce", "patch": "@@ -814,8 +814,8 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n mod size_asserts {\n     use super::*;\n     // These are in alphabetical order, which is easy to maintain.\n-    rustc_data_structures::static_assert_size!(Block, 56);\n-    rustc_data_structures::static_assert_size!(Expr<'_>, 104);\n-    rustc_data_structures::static_assert_size!(Pat<'_>, 24);\n-    rustc_data_structures::static_assert_size!(Stmt<'_>, 120);\n+    static_assert_size!(Block, 56);\n+    static_assert_size!(Expr<'_>, 104);\n+    static_assert_size!(Pat<'_>, 24);\n+    static_assert_size!(Stmt<'_>, 120);\n }"}, {"sha": "91d5758077c94fd98b7f9d1c22425af573274dab", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/574ba831d426b7c72279906a3dfd38ae5af53dce/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574ba831d426b7c72279906a3dfd38ae5af53dce/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=574ba831d426b7c72279906a3dfd38ae5af53dce", "patch": "@@ -2495,14 +2495,15 @@ impl SubstParam {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {\n     use super::*;\n+    use rustc_data_structures::static_assert_size;\n     // These are in alphabetical order, which is easy to maintain.\n-    rustc_data_structures::static_assert_size!(Crate, 72); // frequently moved by-value\n-    rustc_data_structures::static_assert_size!(DocFragment, 32);\n-    rustc_data_structures::static_assert_size!(GenericArg, 80);\n-    rustc_data_structures::static_assert_size!(GenericArgs, 32);\n-    rustc_data_structures::static_assert_size!(GenericParamDef, 56);\n-    rustc_data_structures::static_assert_size!(Item, 56);\n-    rustc_data_structures::static_assert_size!(ItemKind, 112);\n-    rustc_data_structures::static_assert_size!(PathSegment, 40);\n-    rustc_data_structures::static_assert_size!(Type, 72);\n+    static_assert_size!(Crate, 72); // frequently moved by-value\n+    static_assert_size!(DocFragment, 32);\n+    static_assert_size!(GenericArg, 80);\n+    static_assert_size!(GenericArgs, 32);\n+    static_assert_size!(GenericParamDef, 56);\n+    static_assert_size!(Item, 56);\n+    static_assert_size!(ItemKind, 112);\n+    static_assert_size!(PathSegment, 40);\n+    static_assert_size!(Type, 72);\n }"}]}