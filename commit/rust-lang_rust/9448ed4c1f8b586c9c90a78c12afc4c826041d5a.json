{"sha": "9448ed4c1f8b586c9c90a78c12afc4c826041d5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NDhlZDRjMWY4YjU4NmM5YzkwYTc4YzEyYWZjNGM4MjYwNDFkNWE=", "commit": {"author": {"name": "Dario Gonzalez", "email": "dario.gonzalez@fortanix.com", "date": "2020-06-29T16:07:33Z"}, "committer": {"name": "Dario Gonzalez", "email": "dario.gonzalez@fortanix.com", "date": "2020-06-29T16:07:33Z"}, "message": "Obviate #[allow(improper_ctypes_definitions)]\n\nModifies the return type for `fn entry` so that allowing\nimproper_ctypes_definitions is no longer necessary. This change is\nderived from a similar pattern in `libstd/sys/sgx/abi/usercalls/raw.rs`\nwith `UsercallReturn`.", "tree": {"sha": "3e8878a4f6b10aee3b2e0da048991170cd529571", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e8878a4f6b10aee3b2e0da048991170cd529571"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9448ed4c1f8b586c9c90a78c12afc4c826041d5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9448ed4c1f8b586c9c90a78c12afc4c826041d5a", "html_url": "https://github.com/rust-lang/rust/commit/9448ed4c1f8b586c9c90a78c12afc4c826041d5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9448ed4c1f8b586c9c90a78c12afc4c826041d5a/comments", "author": {"login": "Goirad", "id": 20523291, "node_id": "MDQ6VXNlcjIwNTIzMjkx", "avatar_url": "https://avatars.githubusercontent.com/u/20523291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Goirad", "html_url": "https://github.com/Goirad", "followers_url": "https://api.github.com/users/Goirad/followers", "following_url": "https://api.github.com/users/Goirad/following{/other_user}", "gists_url": "https://api.github.com/users/Goirad/gists{/gist_id}", "starred_url": "https://api.github.com/users/Goirad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Goirad/subscriptions", "organizations_url": "https://api.github.com/users/Goirad/orgs", "repos_url": "https://api.github.com/users/Goirad/repos", "events_url": "https://api.github.com/users/Goirad/events{/privacy}", "received_events_url": "https://api.github.com/users/Goirad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Goirad", "id": 20523291, "node_id": "MDQ6VXNlcjIwNTIzMjkx", "avatar_url": "https://avatars.githubusercontent.com/u/20523291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Goirad", "html_url": "https://github.com/Goirad", "followers_url": "https://api.github.com/users/Goirad/followers", "following_url": "https://api.github.com/users/Goirad/following{/other_user}", "gists_url": "https://api.github.com/users/Goirad/gists{/gist_id}", "starred_url": "https://api.github.com/users/Goirad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Goirad/subscriptions", "organizations_url": "https://api.github.com/users/Goirad/orgs", "repos_url": "https://api.github.com/users/Goirad/repos", "events_url": "https://api.github.com/users/Goirad/events{/privacy}", "received_events_url": "https://api.github.com/users/Goirad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "html_url": "https://github.com/rust-lang/rust/commit/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "b0693b63a48fd19c3b863edd53daa79a7de9d438", "filename": "src/libstd/sys/sgx/abi/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9448ed4c1f8b586c9c90a78c12afc4c826041d5a/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9448ed4c1f8b586c9c90a78c12afc4c826041d5a/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs?ref=9448ed4c1f8b586c9c90a78c12afc4c826041d5a", "patch": "@@ -17,6 +17,9 @@ pub mod usercalls;\n #[cfg(not(test))]\n global_asm!(include_str!(\"entry.S\"));\n \n+#[repr(C)]\n+struct EntryReturn(u64, u64);\n+\n #[cfg(not(test))]\n #[no_mangle]\n unsafe extern \"C\" fn tcs_init(secondary: bool) {\n@@ -56,16 +59,15 @@ unsafe extern \"C\" fn tcs_init(secondary: bool) {\n // able to specify this\n #[cfg(not(test))]\n #[no_mangle]\n-#[allow(improper_ctypes_definitions)]\n-extern \"C\" fn entry(p1: u64, p2: u64, p3: u64, secondary: bool, p4: u64, p5: u64) -> (u64, u64) {\n+extern \"C\" fn entry(p1: u64, p2: u64, p3: u64, secondary: bool, p4: u64, p5: u64) -> EntryReturn {\n     // FIXME: how to support TLS in library mode?\n     let tls = Box::new(tls::Tls::new());\n     let _tls_guard = unsafe { tls.activate() };\n \n     if secondary {\n         super::thread::Thread::entry();\n \n-        (0, 0)\n+        EntryReturn(0, 0)\n     } else {\n         extern \"C\" {\n             fn main(argc: isize, argv: *const *const u8) -> isize;"}]}