{"sha": "d709e8d9d0c0629eb8727f4feaadb387bfde07c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MDllOGQ5ZDBjMDYyOWViODcyN2Y0ZmVhYWRiMzg3YmZkZTA3YzI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-12T20:46:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-12T20:46:50Z"}, "message": "Rollup merge of #62605 - estebank:emit-dropped-err, r=pnkfelix\n\nEmit dropped unemitted errors to aid in ICE debugging", "tree": {"sha": "3f2ed4209c88c23f6cb468ea3e6a86a0d4c86997", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f2ed4209c88c23f6cb468ea3e6a86a0d4c86997"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d709e8d9d0c0629eb8727f4feaadb387bfde07c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdKPG6CRBK7hj4Ov3rIwAAdHIIAGjjUjGBxKNcXsXtSs5shwBY\nuKpAhULIrzrebU2x32IRw6CRZQ/0C0KHHcZ7RFpt1g9D8PqVEUsexQNY/fLCPT4l\nlQthSKHAVmdYONnA7KmA9jQW9CtBRA8XkPOeziBnqwnkd9NHEraWvlWvTi2zeioh\nfRcGdjtC4KZ8ARDJbV5wu0r+tMk1knXG93zrg05xISj0ulNRdnUQ3h/fuVdMFndP\nB2ubSTpARWB3A0z8fkucs6dDbX3kbPixqtOmTwJJDYdEu8iFsguradML1K9umTbR\nGhepW0ny02ztKviXmvljT0e0u3sufGjquGJsL3Y/FJilEAZgrBheS7XsuItDmqg=\n=DFyQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f2ed4209c88c23f6cb468ea3e6a86a0d4c86997\nparent d69e9588f0f752bea54f8238f482f869567c676a\nparent c9f7a3d2060a7b2c6f691f4f4b32328edffcf5bd\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562964410 +0200\ncommitter GitHub <noreply@github.com> 1562964410 +0200\n\nRollup merge of #62605 - estebank:emit-dropped-err, r=pnkfelix\n\nEmit dropped unemitted errors to aid in ICE debugging\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d709e8d9d0c0629eb8727f4feaadb387bfde07c2", "html_url": "https://github.com/rust-lang/rust/commit/d709e8d9d0c0629eb8727f4feaadb387bfde07c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d709e8d9d0c0629eb8727f4feaadb387bfde07c2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d69e9588f0f752bea54f8238f482f869567c676a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d69e9588f0f752bea54f8238f482f869567c676a", "html_url": "https://github.com/rust-lang/rust/commit/d69e9588f0f752bea54f8238f482f869567c676a"}, {"sha": "c9f7a3d2060a7b2c6f691f4f4b32328edffcf5bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f7a3d2060a7b2c6f691f4f4b32328edffcf5bd", "html_url": "https://github.com/rust-lang/rust/commit/c9f7a3d2060a7b2c6f691f4f4b32328edffcf5bd"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "41d0638f7c6bdb0ffd44a214a90657329d977994", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d709e8d9d0c0629eb8727f4feaadb387bfde07c2/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d709e8d9d0c0629eb8727f4feaadb387bfde07c2/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=d709e8d9d0c0629eb8727f4feaadb387bfde07c2", "patch": "@@ -380,10 +380,13 @@ impl<'a> Debug for DiagnosticBuilder<'a> {\n impl<'a> Drop for DiagnosticBuilder<'a> {\n     fn drop(&mut self) {\n         if !panicking() && !self.cancelled() {\n-            let mut db = DiagnosticBuilder::new(self.handler,\n-                                                Level::Bug,\n-                                                \"Error constructed but not emitted\");\n+            let mut db = DiagnosticBuilder::new(\n+                self.handler,\n+                Level::Bug,\n+                \"the following error was constructed but not emitted\",\n+            );\n             db.emit();\n+            self.emit();\n             panic!();\n         }\n     }"}, {"sha": "871fc0e7062d614d455f3bff338b06a1aa915acf", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d709e8d9d0c0629eb8727f4feaadb387bfde07c2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d709e8d9d0c0629eb8727f4feaadb387bfde07c2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d709e8d9d0c0629eb8727f4feaadb387bfde07c2", "patch": "@@ -6666,12 +6666,13 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Reads a module from a source file.\n-    fn eval_src_mod(&mut self,\n-                    path: PathBuf,\n-                    directory_ownership: DirectoryOwnership,\n-                    name: String,\n-                    id_sp: Span)\n-                    -> PResult<'a, (ast::Mod, Vec<Attribute> )> {\n+    fn eval_src_mod(\n+        &mut self,\n+        path: PathBuf,\n+        directory_ownership: DirectoryOwnership,\n+        name: String,\n+        id_sp: Span,\n+    ) -> PResult<'a, (ast::Mod, Vec<Attribute>)> {\n         let mut included_mod_stack = self.sess.included_mod_stack.borrow_mut();\n         if let Some(i) = included_mod_stack.iter().position(|p| *p == path) {\n             let mut err = String::from(\"circular modules: \");"}, {"sha": "2ef32d37d44cd5ec6ec8a82205f7be4ad3b9f0fa", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d709e8d9d0c0629eb8727f4feaadb387bfde07c2/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d709e8d9d0c0629eb8727f4feaadb387bfde07c2/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=d709e8d9d0c0629eb8727f4feaadb387bfde07c2", "patch": "@@ -34,23 +34,23 @@ fn with_error_checking_parse<'a, T, F>(s: String, ps: &'a ParseSess, f: F) -> T\n }\n \n /// Parse a string, return a crate.\n-pub fn string_to_crate (source_str : String) -> ast::Crate {\n+pub fn string_to_crate(source_str : String) -> ast::Crate {\n     let ps = ParseSess::new(FilePathMapping::empty());\n     with_error_checking_parse(source_str, &ps, |p| {\n         p.parse_crate_mod()\n     })\n }\n \n /// Parse a string, return an expr\n-pub fn string_to_expr (source_str : String) -> P<ast::Expr> {\n+pub fn string_to_expr(source_str : String) -> P<ast::Expr> {\n     let ps = ParseSess::new(FilePathMapping::empty());\n     with_error_checking_parse(source_str, &ps, |p| {\n         p.parse_expr()\n     })\n }\n \n /// Parse a string, return an item\n-pub fn string_to_item (source_str : String) -> Option<P<ast::Item>> {\n+pub fn string_to_item(source_str : String) -> Option<P<ast::Item>> {\n     let ps = ParseSess::new(FilePathMapping::empty());\n     with_error_checking_parse(source_str, &ps, |p| {\n         p.parse_item()"}]}