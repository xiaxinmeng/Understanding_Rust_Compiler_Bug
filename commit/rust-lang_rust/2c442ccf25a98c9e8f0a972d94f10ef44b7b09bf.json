{"sha": "2c442ccf25a98c9e8f0a972d94f10ef44b7b09bf", "node_id": "C_kwDOAAsO6NoAKDJjNDQyY2NmMjVhOThjOWU4ZjBhOTcyZDk0ZjEwZWY0NGI3YjA5YmY", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-11-18T18:39:38Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-11-18T19:43:37Z"}, "message": "fix: correct some type alias issues", "tree": {"sha": "d8aed500e5098074de677656ecd92f3fe1f35eff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8aed500e5098074de677656ecd92f3fe1f35eff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c442ccf25a98c9e8f0a972d94f10ef44b7b09bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c442ccf25a98c9e8f0a972d94f10ef44b7b09bf", "html_url": "https://github.com/rust-lang/rust/commit/2c442ccf25a98c9e8f0a972d94f10ef44b7b09bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c442ccf25a98c9e8f0a972d94f10ef44b7b09bf/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0023abfb2c826d8a9ff74146ece513b22b86fdce", "url": "https://api.github.com/repos/rust-lang/rust/commits/0023abfb2c826d8a9ff74146ece513b22b86fdce", "html_url": "https://github.com/rust-lang/rust/commit/0023abfb2c826d8a9ff74146ece513b22b86fdce"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "63c32e012df7fd37ec0d28f97eb0cdf5885c5926", "filename": "src/items.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2c442ccf25a98c9e8f0a972d94f10ef44b7b09bf/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c442ccf25a98c9e8f0a972d94f10ef44b7b09bf/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=2c442ccf25a98c9e8f0a972d94f10ef44b7b09bf", "patch": "@@ -28,6 +28,7 @@ use crate::shape::{Indent, Shape};\n use crate::source_map::{LineRangeUtils, SpanUtils};\n use crate::spanned::Spanned;\n use crate::stmt::Stmt;\n+use crate::types::opaque_ty;\n use crate::utils::*;\n use crate::vertical::rewrite_with_alignment;\n use crate::visitor::FmtVisitor;\n@@ -581,13 +582,10 @@ impl<'a> FmtVisitor<'a> {\n         if self.get_context().config.reorder_impl_items() {\n             type TyOpt = Option<ptr::P<ast::Ty>>;\n             use crate::ast::AssocItemKind::*;\n-            let is_type = |ty: &TyOpt| {\n-                ty.as_ref()\n-                    .map_or(true, |t| !matches!(t.kind, ast::TyKind::ImplTrait(..)))\n-            };\n-            let is_opaque = |ty: &TyOpt| !is_type(ty);\n-            let both_type = |left: &TyOpt, right: &TyOpt| is_type(left) && is_type(right);\n-            let both_opaque = |left: &TyOpt, right: &TyOpt| is_opaque(left) && is_opaque(right);\n+            let is_type = |ty: &TyOpt| opaque_ty(ty).is_none();\n+            let is_opaque = |ty: &TyOpt| opaque_ty(ty).is_some();\n+            let both_type = |l: &TyOpt, r: &TyOpt| is_type(l) && is_type(r);\n+            let both_opaque = |l: &TyOpt, r: &TyOpt| is_opaque(l) && is_opaque(r);\n             let need_empty_line = |a: &ast::AssocItemKind, b: &ast::AssocItemKind| match (a, b) {\n                 (TyAlias(lty), TyAlias(rty))\n                     if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n@@ -1508,43 +1506,38 @@ pub(crate) fn rewrite_type_alias<'a, 'b>(\n         ref bounds,\n         ref ty,\n     } = *ty_alias_kind;\n-    let ty_opt = ty.as_ref().map(|t| &**t);\n+    let ty_opt = ty.as_ref();\n     let (ident, vis) = match visitor_kind {\n         Item(i) => (i.ident, &i.vis),\n         AssocTraitItem(i) | AssocImplItem(i) => (i.ident, &i.vis),\n         ForeignItem(i) => (i.ident, &i.vis),\n     };\n     let rw_info = &TyAliasRewriteInfo(context, indent, generics, ident, span);\n-\n+    let op_ty = opaque_ty(ty);\n     // Type Aliases are formatted slightly differently depending on the context\n     // in which they appear, whether they are opaque, and whether they are associated.\n     // https://rustc-dev-guide.rust-lang.org/opaque-types-type-alias-impl-trait.html\n     // https://github.com/rust-dev-tools/fmt-rfcs/blob/master/guide/items.md#type-aliases\n-    match (visitor_kind, ty_opt) {\n-        (Item(_), None) => {\n-            let op_ty = OpaqueType { bounds };\n-            rewrite_ty(rw_info, Some(bounds), Some(&op_ty), vis)\n+    match (visitor_kind, &op_ty) {\n+        (Item(_) | AssocTraitItem(_) | ForeignItem(_), Some(ref op_bounds)) => {\n+            let op = OpaqueType { bounds: op_bounds };\n+            rewrite_ty(rw_info, Some(bounds), Some(&op), vis)\n+        }\n+        (Item(_) | AssocTraitItem(_) | ForeignItem(_), None) => {\n+            rewrite_ty(rw_info, Some(bounds), ty_opt, vis)\n         }\n-        (Item(_), Some(ty)) => rewrite_ty(rw_info, Some(bounds), Some(&*ty), vis),\n         (AssocImplItem(_), _) => {\n-            let result = if let Some(ast::Ty {\n-                kind: ast::TyKind::ImplTrait(_, ref bounds),\n-                ..\n-            }) = ty_opt\n-            {\n-                let op_ty = OpaqueType { bounds };\n-                rewrite_ty(rw_info, None, Some(&op_ty), &DEFAULT_VISIBILITY)\n+            let result = if let Some(ref op_bounds) = op_ty {\n+                let op = OpaqueType { bounds: op_bounds };\n+                rewrite_ty(rw_info, Some(bounds), Some(&op), &DEFAULT_VISIBILITY)\n             } else {\n-                rewrite_ty(rw_info, None, ty.as_ref(), vis)\n+                rewrite_ty(rw_info, Some(bounds), ty_opt, vis)\n             }?;\n             match defaultness {\n                 ast::Defaultness::Default(..) => Some(format!(\"default {}\", result)),\n                 _ => Some(result),\n             }\n         }\n-        (AssocTraitItem(_), _) | (ForeignItem(_), _) => {\n-            rewrite_ty(rw_info, Some(bounds), ty.as_ref(), vis)\n-        }\n     }\n }\n \n@@ -1867,6 +1860,12 @@ fn rewrite_static(\n         Some(format!(\"{}{};\", prefix, ty_str))\n     }\n }\n+\n+// FIXME(calebcartwright) - This is a hack around a bug in the handling of TyKind::ImplTrait.\n+// This should be removed once that bug is resolved, with the type alias formatting using the\n+// defined Ty for the RHS directly.\n+// https://github.com/rust-lang/rustfmt/issues/4373\n+// https://github.com/rust-lang/rustfmt/issues/5027\n struct OpaqueType<'a> {\n     bounds: &'a ast::GenericBounds,\n }"}, {"sha": "891609783b61b285ccc19793f1b80f03266458a5", "filename": "src/types.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c442ccf25a98c9e8f0a972d94f10ef44b7b09bf/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c442ccf25a98c9e8f0a972d94f10ef44b7b09bf/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=2c442ccf25a98c9e8f0a972d94f10ef44b7b09bf", "patch": "@@ -2,6 +2,7 @@ use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n \n use rustc_ast::ast::{self, FnRetTy, Mutability};\n+use rustc_ast::ptr;\n use rustc_span::{symbol::kw, BytePos, Pos, Span};\n \n use crate::comment::{combine_strs_with_missing_comments, contains_comment};\n@@ -1031,6 +1032,13 @@ fn join_bounds_inner(\n     }\n }\n \n+pub(crate) fn opaque_ty(ty: &Option<ptr::P<ast::Ty>>) -> Option<&ast::GenericBounds> {\n+    ty.as_ref().and_then(|t| match &t.kind {\n+        ast::TyKind::ImplTrait(_, bounds) => Some(bounds),\n+        _ => None,\n+    })\n+}\n+\n pub(crate) fn can_be_overflowed_type(\n     context: &RewriteContext<'_>,\n     ty: &ast::Ty,"}]}