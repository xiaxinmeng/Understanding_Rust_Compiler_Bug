{"sha": "3d62c9adf35e8685f131be50afbcc711bb43cf60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNjJjOWFkZjM1ZTg2ODVmMTMxYmU1MGFmYmNjNzExYmI0M2NmNjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-22T21:48:25Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-22T21:48:25Z"}, "message": "rustc: Move the type serialization logic to an Encode module", "tree": {"sha": "fb670f7b0dbc4be175d04c004bb0e892edf4def4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb670f7b0dbc4be175d04c004bb0e892edf4def4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d62c9adf35e8685f131be50afbcc711bb43cf60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d62c9adf35e8685f131be50afbcc711bb43cf60", "html_url": "https://github.com/rust-lang/rust/commit/3d62c9adf35e8685f131be50afbcc711bb43cf60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d62c9adf35e8685f131be50afbcc711bb43cf60/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14d1c53a9c3570f91ede7d7ad9c8c1ad9ddef7f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d1c53a9c3570f91ede7d7ad9c8c1ad9ddef7f3", "html_url": "https://github.com/rust-lang/rust/commit/14d1c53a9c3570f91ede7d7ad9c8c1ad9ddef7f3"}], "stats": {"total": 205, "additions": 108, "deletions": 97}, "files": [{"sha": "7f6ccc82d1335a539c55f72b7fcc7d29e7fe9c56", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 104, "deletions": 96, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/3d62c9adf35e8685f131be50afbcc711bb43cf60/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d62c9adf35e8685f131be50afbcc711bb43cf60/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=3d62c9adf35e8685f131be50afbcc711bb43cf60", "patch": "@@ -49,115 +49,120 @@ const uint tag_index_table = 0x15u;\n // to/from def_ids in the string rep. Whatever format you choose should not\n // contain pipe characters.\n \n-// Callback to translate defs to strs or back.\n-type def_str = fn(ast.def_id) -> str;\n+mod Encode {\n \n-fn ty_str(ty.t t, def_str ds) -> str {\n-    ret sty_str(ty.struct(t), ds);\n-}\n+    type ctxt = rec(\n+        fn(ast.def_id) -> str ds    // Callback to translate defs to strs.\n+    );\n \n-fn mt_str(&ty.mt mt, def_str ds) -> str {\n-    auto mut_str;\n-    alt (mt.mut) {\n-        case (ast.imm)       { mut_str = \"\";  }\n-        case (ast.mut)       { mut_str = \"m\"; }\n-        case (ast.maybe_mut) { mut_str = \"?\"; }\n+    fn ty_str(@ctxt cx, ty.t t) -> str {\n+        ret sty_str(cx, ty.struct(t));\n     }\n-    ret mut_str + ty_str(mt.ty, ds);\n-}\n \n-fn sty_str(ty.sty st, def_str ds) -> str {\n-    alt (st) {\n-        case (ty.ty_nil) {ret \"n\";}\n-        case (ty.ty_bool) {ret \"b\";}\n-        case (ty.ty_int) {ret \"i\";}\n-        case (ty.ty_uint) {ret \"u\";}\n-        case (ty.ty_float) {ret \"l\";}\n-        case (ty.ty_machine(?mach)) {\n-            alt (mach) {\n-                case (common.ty_u8) {ret \"Mb\";}\n-                case (common.ty_u16) {ret \"Mw\";}\n-                case (common.ty_u32) {ret \"Ml\";}\n-                case (common.ty_u64) {ret \"Md\";}\n-                case (common.ty_i8) {ret \"MB\";}\n-                case (common.ty_i16) {ret \"MW\";}\n-                case (common.ty_i32) {ret \"ML\";}\n-                case (common.ty_i64) {ret \"MD\";}\n-                case (common.ty_f32) {ret \"Mf\";}\n-                case (common.ty_f64) {ret \"MF\";}\n-            }\n+    fn mt_str(@ctxt cx, &ty.mt mt) -> str {\n+        auto mut_str;\n+        alt (mt.mut) {\n+            case (ast.imm)       { mut_str = \"\";  }\n+            case (ast.mut)       { mut_str = \"m\"; }\n+            case (ast.maybe_mut) { mut_str = \"?\"; }\n         }\n-        case (ty.ty_char) {ret \"c\";}\n-        case (ty.ty_str) {ret \"s\";}\n-        case (ty.ty_tag(?def,?tys)) { // TODO restore def_id\n-            auto acc = \"t[\" + ds(def) + \"|\";\n-            for (ty.t t in tys) {acc += ty_str(t, ds);}\n-            ret acc + \"]\";\n-        }\n-        case (ty.ty_box(?mt)) {ret \"@\" + mt_str(mt, ds);}\n-        case (ty.ty_vec(?mt)) {ret \"V\" + mt_str(mt, ds);}\n-        case (ty.ty_port(?t)) {ret \"P\" + ty_str(t, ds);}\n-        case (ty.ty_chan(?t)) {ret \"C\" + ty_str(t, ds);}\n-        case (ty.ty_tup(?mts)) {\n-            auto acc = \"T[\";\n-            for (ty.mt mt in mts) {acc += mt_str(mt, ds);}\n-            ret acc + \"]\";\n-        }\n-        case (ty.ty_rec(?fields)) {\n-            auto acc = \"R[\";\n-            for (ty.field field in fields) {\n-                acc += field.ident + \"=\";\n-                acc += mt_str(field.mt, ds);\n+        ret mut_str + ty_str(cx, mt.ty);\n+    }\n+\n+    fn sty_str(@ctxt cx, ty.sty st) -> str {\n+        alt (st) {\n+            case (ty.ty_nil) {ret \"n\";}\n+            case (ty.ty_bool) {ret \"b\";}\n+            case (ty.ty_int) {ret \"i\";}\n+            case (ty.ty_uint) {ret \"u\";}\n+            case (ty.ty_float) {ret \"l\";}\n+            case (ty.ty_machine(?mach)) {\n+                alt (mach) {\n+                    case (common.ty_u8) {ret \"Mb\";}\n+                    case (common.ty_u16) {ret \"Mw\";}\n+                    case (common.ty_u32) {ret \"Ml\";}\n+                    case (common.ty_u64) {ret \"Md\";}\n+                    case (common.ty_i8) {ret \"MB\";}\n+                    case (common.ty_i16) {ret \"MW\";}\n+                    case (common.ty_i32) {ret \"ML\";}\n+                    case (common.ty_i64) {ret \"MD\";}\n+                    case (common.ty_f32) {ret \"Mf\";}\n+                    case (common.ty_f64) {ret \"MF\";}\n+                }\n             }\n-            ret acc + \"]\";\n-        }\n-        case (ty.ty_fn(?proto,?args,?out)) {\n-            ret proto_str(proto) + ty_fn_str(args, out, ds);\n-        }\n-        case (ty.ty_native_fn(?abi,?args,?out)) {\n-            auto abistr;\n-            alt (abi) {\n-                case (ast.native_abi_rust) {abistr = \"r\";}\n-                case (ast.native_abi_cdecl) {abistr = \"c\";}\n-                case (ast.native_abi_llvm) {abistr = \"l\";}\n+            case (ty.ty_char) {ret \"c\";}\n+            case (ty.ty_str) {ret \"s\";}\n+            case (ty.ty_tag(?def,?tys)) { // TODO restore def_id\n+                auto acc = \"t[\" + cx.ds(def) + \"|\";\n+                for (ty.t t in tys) {acc += ty_str(cx, t);}\n+                ret acc + \"]\";\n             }\n-            ret \"N\" + abistr + ty_fn_str(args, out, ds);\n-        }\n-        case (ty.ty_obj(?methods)) {\n-            auto acc = \"O[\";\n-            for (ty.method m in methods) {\n-                acc += proto_str(m.proto);\n-                acc += m.ident;\n-                acc += ty_fn_str(m.inputs, m.output, ds);\n+            case (ty.ty_box(?mt)) {ret \"@\" + mt_str(cx, mt);}\n+            case (ty.ty_vec(?mt)) {ret \"V\" + mt_str(cx, mt);}\n+            case (ty.ty_port(?t)) {ret \"P\" + ty_str(cx, t);}\n+            case (ty.ty_chan(?t)) {ret \"C\" + ty_str(cx, t);}\n+            case (ty.ty_tup(?mts)) {\n+                auto acc = \"T[\";\n+                for (ty.mt mt in mts) {acc += mt_str(cx, mt);}\n+                ret acc + \"]\";\n+            }\n+            case (ty.ty_rec(?fields)) {\n+                auto acc = \"R[\";\n+                for (ty.field field in fields) {\n+                    acc += field.ident + \"=\";\n+                    acc += mt_str(cx, field.mt);\n+                }\n+                ret acc + \"]\";\n             }\n-            ret acc + \"]\";\n+            case (ty.ty_fn(?proto,?args,?out)) {\n+                ret proto_str(proto) + ty_fn_str(cx, args, out);\n+            }\n+            case (ty.ty_native_fn(?abi,?args,?out)) {\n+                auto abistr;\n+                alt (abi) {\n+                    case (ast.native_abi_rust) {abistr = \"r\";}\n+                    case (ast.native_abi_cdecl) {abistr = \"c\";}\n+                    case (ast.native_abi_llvm) {abistr = \"l\";}\n+                }\n+                ret \"N\" + abistr + ty_fn_str(cx, args, out);\n+            }\n+            case (ty.ty_obj(?methods)) {\n+                auto acc = \"O[\";\n+                for (ty.method m in methods) {\n+                    acc += proto_str(m.proto);\n+                    acc += m.ident;\n+                    acc += ty_fn_str(cx, m.inputs, m.output);\n+                }\n+                ret acc + \"]\";\n+            }\n+            case (ty.ty_var(?id)) {ret \"X\" + common.istr(id);}\n+            case (ty.ty_native) {ret \"E\";}\n+            case (ty.ty_param(?id)) {ret \"p\" + common.uistr(id);}\n+            case (ty.ty_type) {ret \"Y\";}\n+\n+            // These two don't appear in crate metadata, but are here because\n+            // `hash_ty()` uses this function.\n+            case (ty.ty_bound_param(?id)) {ret \"o\" + common.uistr(id);}\n+            case (ty.ty_local(?def)) {ret \"L\" + cx.ds(def);}\n         }\n-        case (ty.ty_var(?id)) {ret \"X\" + common.istr(id);}\n-        case (ty.ty_native) {ret \"E\";}\n-        case (ty.ty_param(?id)) {ret \"p\" + common.uistr(id);}\n-        case (ty.ty_type) {ret \"Y\";}\n-\n-        // These two don't appear in crate metadata, but are here because\n-        // `hash_ty()` uses this function.\n-        case (ty.ty_bound_param(?id)) {ret \"o\" + common.uistr(id);}\n-        case (ty.ty_local(?def)) {ret \"L\" + ds(def);}\n     }\n-}\n \n-fn proto_str(ast.proto proto) -> str {\n-    alt (proto) {\n-        case (ast.proto_iter) {ret \"W\";}\n-        case (ast.proto_fn) {ret \"F\";}\n+    fn proto_str(ast.proto proto) -> str {\n+        alt (proto) {\n+            case (ast.proto_iter) {ret \"W\";}\n+            case (ast.proto_fn) {ret \"F\";}\n+        }\n     }\n-}\n \n-fn ty_fn_str(vec[ty.arg] args, ty.t out, def_str ds) -> str {\n-    auto acc = \"[\";\n-    for (ty.arg arg in args) {\n-        if (arg.mode == ast.alias) {acc += \"&\";}\n-        acc += ty_str(arg.ty, ds);\n+    fn ty_fn_str(@ctxt cx, vec[ty.arg] args, ty.t out) -> str {\n+        auto acc = \"[\";\n+        for (ty.arg arg in args) {\n+            if (arg.mode == ast.alias) {acc += \"&\";}\n+            acc += ty_str(cx, arg.ty);\n+        }\n+        ret acc + \"]\" + ty_str(cx, out);\n     }\n-    ret acc + \"]\" + ty_str(out, ds);\n+\n }\n \n \n@@ -329,8 +334,11 @@ fn encode_variant_id(&ebml.writer ebml_w, ast.def_id vid) {\n \n fn encode_type(&ebml.writer ebml_w, ty.t typ) {\n     ebml.start_tag(ebml_w, tag_items_data_item_type);\n+\n     auto f = def_to_str;\n-    ebml_w.writer.write(_str.bytes(ty_str(typ, f)));\n+    auto ty_str_ctxt = @rec(ds=f);\n+    ebml_w.writer.write(_str.bytes(Encode.ty_str(ty_str_ctxt, typ)));\n+\n     ebml.end_tag(ebml_w);\n }\n "}, {"sha": "8ab2c3c05a5eaec5cd67d737d9707fdbaea01ea4", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d62c9adf35e8685f131be50afbcc711bb43cf60/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d62c9adf35e8685f131be50afbcc711bb43cf60/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3d62c9adf35e8685f131be50afbcc711bb43cf60", "patch": "@@ -183,8 +183,11 @@ fn path_name(vec[str] path) -> str {\n \n fn mangle_name_by_type(@crate_ctxt ccx, vec[str] path, ty.t t) -> str {\n     ccx.sha.reset();\n+\n     auto f = metadata.def_to_str;\n-    ccx.sha.input_str(metadata.ty_str(t, f));\n+    auto cx = @rec(ds=f);\n+    ccx.sha.input_str(metadata.Encode.ty_str(cx, t));\n+\n     ret sep() + \"rust\" + sep()\n         + _str.substr(ccx.sha.result_str(), 0u, 16u) + sep()\n         + path_name(path);"}]}