{"sha": "3e25bcb02093bad56beb1dff6be7dd0d80115fb1", "node_id": "C_kwDOAAsO6NoAKDNlMjViY2IwMjA5M2JhZDU2YmViMWRmZjZiZTdkZDBkODAxMTVmYjE", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-11T01:39:00Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-13T18:39:44Z"}, "message": "Mention implementations that satisfy the trait", "tree": {"sha": "c421af1a084672cdf78014e384d155aa4c4cfd2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c421af1a084672cdf78014e384d155aa4c4cfd2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e25bcb02093bad56beb1dff6be7dd0d80115fb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e25bcb02093bad56beb1dff6be7dd0d80115fb1", "html_url": "https://github.com/rust-lang/rust/commit/3e25bcb02093bad56beb1dff6be7dd0d80115fb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e25bcb02093bad56beb1dff6be7dd0d80115fb1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3fba5e18afe1548f6c6926ee377833d4c53d904", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3fba5e18afe1548f6c6926ee377833d4c53d904", "html_url": "https://github.com/rust-lang/rust/commit/b3fba5e18afe1548f6c6926ee377833d4c53d904"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "64821b5686a95ad0c98606a164b4098513bd30a9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3e25bcb02093bad56beb1dff6be7dd0d80115fb1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e25bcb02093bad56beb1dff6be7dd0d80115fb1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3e25bcb02093bad56beb1dff6be7dd0d80115fb1", "patch": "@@ -980,6 +980,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 trait_ref,\n                                 obligation.cause.body_id,\n                                 &mut err,\n+                                true,\n                             ) {\n                                 // This is *almost* equivalent to\n                                 // `obligation.cause.code().peel_derives()`, but it gives us the\n@@ -1015,6 +1016,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                         trait_ref,\n                                         obligation.cause.body_id,\n                                         &mut err,\n+                                        true,\n                                     );\n                                 }\n                             }\n@@ -1432,6 +1434,7 @@ trait InferCtxtPrivExt<'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         body_id: hir::HirId,\n         err: &mut Diagnostic,\n+        other: bool,\n     ) -> bool;\n \n     /// Gets the parent trait chain start\n@@ -1887,7 +1890,9 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         body_id: hir::HirId,\n         err: &mut Diagnostic,\n+        other: bool,\n     ) -> bool {\n+        let other = if other { \"other \" } else { \"\" };\n         let report = |mut candidates: Vec<TraitRef<'tcx>>, err: &mut Diagnostic| {\n             candidates.sort();\n             candidates.dedup();\n@@ -1938,7 +1943,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             candidates.dedup();\n             let end = if candidates.len() <= 9 { candidates.len() } else { 8 };\n             err.help(&format!(\n-                \"the following other types implement trait `{}`:{}{}\",\n+                \"the following {other}types implement trait `{}`:{}{}\",\n                 trait_ref.print_only_trait_path(),\n                 candidates[..end].join(\"\"),\n                 if len > 9 { format!(\"\\nand {} others\", len - 8) } else { String::new() }\n@@ -2179,14 +2184,26 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             trait_ref.skip_binder().substs.types().any(|t| !t.is_ty_infer());\n                         // It doesn't make sense to talk about applicable impls if there are more\n                         // than a handful of them.\n-                        if impls.len() > 1 && impls.len() < 5 && has_non_region_infer {\n+                        if impls.len() > 1 && impls.len() < 10 && has_non_region_infer {\n                             self.annotate_source_of_ambiguity(&mut err, &impls, predicate);\n                         } else {\n                             if self.tainted_by_errors().is_some() {\n                                 err.cancel();\n                                 return;\n                             }\n                             err.note(&format!(\"cannot satisfy `{}`\", predicate));\n+                            let impl_candidates = self.find_similar_impl_candidates(\n+                                predicate.to_opt_poly_trait_pred().unwrap(),\n+                            );\n+                            if impl_candidates.len() < 10 {\n+                                self.report_similar_impl_candidates(\n+                                    impl_candidates,\n+                                    trait_ref,\n+                                    body_id.map(|id| id.hir_id).unwrap_or(obligation.cause.body_id),\n+                                    &mut err,\n+                                    false,\n+                                );\n+                            }\n                         }\n                     }\n                     _ => {"}, {"sha": "2cfc6f61f1a570951bfd58b3e680ec79ac62583f", "filename": "src/test/ui/const-generics/generic_arg_infer/issue-91614.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e25bcb02093bad56beb1dff6be7dd0d80115fb1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e25bcb02093bad56beb1dff6be7dd0d80115fb1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr?ref=3e25bcb02093bad56beb1dff6be7dd0d80115fb1", "patch": "@@ -5,6 +5,12 @@ LL |     let y = Mask::<_, _>::splat(false);\n    |         ^   ------------------- type must be known at this point\n    |\n    = note: cannot satisfy `_: MaskElement`\n+   = help: the following types implement trait `MaskElement`:\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n note: required by a bound in `Mask::<T, LANES>::splat`\n   --> $SRC_DIR/core/src/../../portable-simd/crates/core_simd/src/masks.rs:LL:COL\n    |"}, {"sha": "e0444042614bb683f4a6d0cd8c213b8d4f95977a", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72787.min.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e25bcb02093bad56beb1dff6be7dd0d80115fb1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e25bcb02093bad56beb1dff6be7dd0d80115fb1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr?ref=3e25bcb02093bad56beb1dff6be7dd0d80115fb1", "patch": "@@ -41,6 +41,7 @@ LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8>: True`\n+   = help: the trait `True` is implemented for `IsLessOrEqual<LHS, RHS>`\n \n error[E0283]: type annotations needed: cannot satisfy `IsLessOrEqual<I, 8>: True`\n   --> $DIR/issue-72787.rs:21:26\n@@ -49,6 +50,7 @@ LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8>: True`\n+   = help: the trait `True` is implemented for `IsLessOrEqual<LHS, RHS>`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "a332c6547b8390c36268abff095edfc39bbf8ee4", "filename": "src/test/ui/lifetimes/issue-34979.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e25bcb02093bad56beb1dff6be7dd0d80115fb1/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e25bcb02093bad56beb1dff6be7dd0d80115fb1/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr?ref=3e25bcb02093bad56beb1dff6be7dd0d80115fb1", "patch": "@@ -5,6 +5,7 @@ LL |     &'a (): Foo,\n    |             ^^^\n    |\n    = note: cannot satisfy `&'a (): Foo`\n+   = help: the trait `Foo` is implemented for `&'a T`\n \n error: aborting due to previous error\n "}, {"sha": "be7397fdb12dd5482373ef15cd81211b11a3fb1e", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e25bcb02093bad56beb1dff6be7dd0d80115fb1/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e25bcb02093bad56beb1dff6be7dd0d80115fb1/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=3e25bcb02093bad56beb1dff6be7dd0d80115fb1", "patch": "@@ -46,7 +46,15 @@ LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect(\n    |                                            |\n    |                                            required by a bound introduced by this call\n    |\n-   = note: cannot satisfy `u32: From<_>`\n+   = note: multiple `impl`s satisfying `u32: From<_>` found in the following crates: `core`, `std`:\n+           - impl From<Ipv4Addr> for u32;\n+           - impl From<NonZeroU32> for u32;\n+           - impl From<bool> for u32;\n+           - impl From<char> for u32;\n+           - impl From<u16> for u32;\n+           - impl From<u8> for u32;\n+           - impl<T> From<!> for T;\n+           - impl<T> From<T> for T;\n help: try using a fully qualified path to specify the expected types\n    |\n LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(<u32 as Into<T>>::into(0u32))).collect();"}, {"sha": "930708f9ad80c7d35ed8a153a869331f826a831e", "filename": "src/test/ui/traits/issue-85735.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e25bcb02093bad56beb1dff6be7dd0d80115fb1/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e25bcb02093bad56beb1dff6be7dd0d80115fb1/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr?ref=3e25bcb02093bad56beb1dff6be7dd0d80115fb1", "patch": "@@ -5,6 +5,9 @@ LL |     T: FnMut(&'a ()),\n    |        ^^^^^^^^^^^^^\n    |\n    = note: cannot satisfy `T: FnMut<(&'a (),)>`\n+   = help: the following types implement trait `FnMut<Args>`:\n+             &F\n+             &mut F\n \n error: aborting due to previous error\n "}]}