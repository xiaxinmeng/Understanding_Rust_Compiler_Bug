{"sha": "13b7aa4d7faafbed78d195c27f6868f6bd90c2f8", "node_id": "C_kwDOAAsO6NoAKDEzYjdhYTRkN2ZhYWZiZWQ3OGQxOTVjMjdmNjg2OGY2YmQ5MGMyZjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-20T11:54:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-20T11:54:00Z"}, "message": "Auto merge of #108524 - Zoxc:node-backtrace, r=cjgillot\n\nOptimize dep node backtrace and ignore fatal errors\n\nThis attempts to optimize https://github.com/rust-lang/rust/pull/91742 while also passing through fatal errors.\n\nr? `@cjgillot`", "tree": {"sha": "0a4caccd20ab334c2ba6e1e07a4f71fd6422e59d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a4caccd20ab334c2ba6e1e07a4f71fd6422e59d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13b7aa4d7faafbed78d195c27f6868f6bd90c2f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13b7aa4d7faafbed78d195c27f6868f6bd90c2f8", "html_url": "https://github.com/rust-lang/rust/commit/13b7aa4d7faafbed78d195c27f6868f6bd90c2f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13b7aa4d7faafbed78d195c27f6868f6bd90c2f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "356c651e6d013fe9ca1d47da278ba208a95dbcf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/356c651e6d013fe9ca1d47da278ba208a95dbcf9", "html_url": "https://github.com/rust-lang/rust/commit/356c651e6d013fe9ca1d47da278ba208a95dbcf9"}, {"sha": "f48ff4a2cf440088ef7f8a806190956ad4d38607", "url": "https://api.github.com/repos/rust-lang/rust/commits/f48ff4a2cf440088ef7f8a806190956ad4d38607", "html_url": "https://github.com/rust-lang/rust/commit/f48ff4a2cf440088ef7f8a806190956ad4d38607"}], "stats": {"total": 115, "additions": 64, "deletions": 51}, "files": [{"sha": "02cb9c452a8c10614586894edc41b71e392ed4eb", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 46, "deletions": 47, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/13b7aa4d7faafbed78d195c27f6868f6bd90c2f8/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13b7aa4d7faafbed78d195c27f6868f6bd90c2f8/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=13b7aa4d7faafbed78d195c27f6868f6bd90c2f8", "patch": "@@ -6,7 +6,6 @@ use rustc_data_structures::sharded::{self, Sharded};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{AtomicU32, AtomicU64, Lock, Lrc, Ordering};\n-use rustc_data_structures::OnDrop;\n use rustc_index::vec::IndexVec;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use smallvec::{smallvec, SmallVec};\n@@ -54,6 +53,11 @@ impl From<DepNodeIndex> for QueryInvocationId {\n     }\n }\n \n+pub struct MarkFrame<'a> {\n+    index: SerializedDepNodeIndex,\n+    parent: Option<&'a MarkFrame<'a>>,\n+}\n+\n #[derive(PartialEq)]\n pub enum DepNodeColor {\n     Red,\n@@ -710,32 +714,26 @@ impl<K: DepKind> DepGraphData<K> {\n         let prev_index = self.previous.node_to_index_opt(dep_node)?;\n \n         match self.colors.get(prev_index) {\n-            Some(DepNodeColor::Green(dep_node_index)) => return Some((prev_index, dep_node_index)),\n-            Some(DepNodeColor::Red) => return None,\n-            None => {}\n+            Some(DepNodeColor::Green(dep_node_index)) => Some((prev_index, dep_node_index)),\n+            Some(DepNodeColor::Red) => None,\n+            None => {\n+                // This DepNode and the corresponding query invocation existed\n+                // in the previous compilation session too, so we can try to\n+                // mark it as green by recursively marking all of its\n+                // dependencies green.\n+                self.try_mark_previous_green(qcx, prev_index, &dep_node, None)\n+                    .map(|dep_node_index| (prev_index, dep_node_index))\n+            }\n         }\n-\n-        let backtrace = backtrace_printer(qcx.dep_context().sess(), self, prev_index);\n-\n-        // This DepNode and the corresponding query invocation existed\n-        // in the previous compilation session too, so we can try to\n-        // mark it as green by recursively marking all of its\n-        // dependencies green.\n-        let ret = self\n-            .try_mark_previous_green(qcx, prev_index, &dep_node)\n-            .map(|dep_node_index| (prev_index, dep_node_index));\n-\n-        // We succeeded, no backtrace.\n-        backtrace.disable();\n-        return ret;\n     }\n \n-    #[instrument(skip(self, qcx, parent_dep_node_index), level = \"debug\")]\n+    #[instrument(skip(self, qcx, parent_dep_node_index, frame), level = \"debug\")]\n     fn try_mark_parent_green<Qcx: QueryContext<DepKind = K>>(\n         &self,\n         qcx: Qcx,\n         parent_dep_node_index: SerializedDepNodeIndex,\n         dep_node: &DepNode<K>,\n+        frame: Option<&MarkFrame<'_>>,\n     ) -> Option<()> {\n         let dep_dep_node_color = self.colors.get(parent_dep_node_index);\n         let dep_dep_node = &self.previous.index_to_node(parent_dep_node_index);\n@@ -767,7 +765,8 @@ impl<K: DepKind> DepGraphData<K> {\n                 dep_dep_node, dep_dep_node.hash,\n             );\n \n-            let node_index = self.try_mark_previous_green(qcx, parent_dep_node_index, dep_dep_node);\n+            let node_index =\n+                self.try_mark_previous_green(qcx, parent_dep_node_index, dep_dep_node, frame);\n \n             if node_index.is_some() {\n                 debug!(\"managed to MARK dependency {dep_dep_node:?} as green\",);\n@@ -777,7 +776,7 @@ impl<K: DepKind> DepGraphData<K> {\n \n         // We failed to mark it green, so we try to force the query.\n         debug!(\"trying to force dependency {dep_dep_node:?}\");\n-        if !qcx.dep_context().try_force_from_dep_node(*dep_dep_node) {\n+        if !qcx.dep_context().try_force_from_dep_node(*dep_dep_node, frame) {\n             // The DepNode could not be forced.\n             debug!(\"dependency {dep_dep_node:?} could not be forced\");\n             return None;\n@@ -816,13 +815,16 @@ impl<K: DepKind> DepGraphData<K> {\n     }\n \n     /// Try to mark a dep-node which existed in the previous compilation session as green.\n-    #[instrument(skip(self, qcx, prev_dep_node_index), level = \"debug\")]\n+    #[instrument(skip(self, qcx, prev_dep_node_index, frame), level = \"debug\")]\n     fn try_mark_previous_green<Qcx: QueryContext<DepKind = K>>(\n         &self,\n         qcx: Qcx,\n         prev_dep_node_index: SerializedDepNodeIndex,\n         dep_node: &DepNode<K>,\n+        frame: Option<&MarkFrame<'_>>,\n     ) -> Option<DepNodeIndex> {\n+        let frame = MarkFrame { index: prev_dep_node_index, parent: frame };\n+\n         #[cfg(not(parallel_compiler))]\n         {\n             debug_assert!(!self.dep_node_exists(dep_node));\n@@ -837,10 +839,7 @@ impl<K: DepKind> DepGraphData<K> {\n         let prev_deps = self.previous.edge_targets_from(prev_dep_node_index);\n \n         for &dep_dep_node_index in prev_deps {\n-            let backtrace = backtrace_printer(qcx.dep_context().sess(), self, dep_dep_node_index);\n-            let success = self.try_mark_parent_green(qcx, dep_dep_node_index, dep_node);\n-            backtrace.disable();\n-            success?;\n+            self.try_mark_parent_green(qcx, dep_dep_node_index, dep_node, Some(&frame))?;\n         }\n \n         // If we got here without hitting a `return` that means that all\n@@ -1414,25 +1413,25 @@ impl DepNodeColorMap {\n     }\n }\n \n-fn backtrace_printer<'a, K: DepKind>(\n-    sess: &'a rustc_session::Session,\n-    graph: &'a DepGraphData<K>,\n-    node: SerializedDepNodeIndex,\n-) -> OnDrop<impl Fn() + 'a> {\n-    OnDrop(\n-        #[inline(never)]\n-        #[cold]\n-        move || {\n-            let node = graph.previous.index_to_node(node);\n-            // Do not try to rely on DepNode's Debug implementation, since it may panic.\n-            let diag = rustc_errors::Diagnostic::new(\n-                rustc_errors::Level::FailureNote,\n-                &format!(\n-                    \"encountered while trying to mark dependency green: {:?}({})\",\n-                    node.kind, node.hash\n-                ),\n-            );\n-            sess.diagnostic().force_print_diagnostic(diag);\n-        },\n-    )\n+#[inline(never)]\n+#[cold]\n+pub(crate) fn print_markframe_trace<K: DepKind>(\n+    graph: &DepGraph<K>,\n+    frame: Option<&MarkFrame<'_>>,\n+) {\n+    let data = graph.data.as_ref().unwrap();\n+\n+    eprintln!(\"there was a panic while trying to force a dep node\");\n+    eprintln!(\"try_mark_green dep node stack:\");\n+\n+    let mut i = 0;\n+    let mut current = frame;\n+    while let Some(frame) = current {\n+        let node = data.previous.index_to_node(frame.index);\n+        eprintln!(\"#{i} {:?}\", node);\n+        current = frame.parent;\n+        i += 1;\n+    }\n+\n+    eprintln!(\"end of try_mark_green dep node stack\");\n }"}, {"sha": "40e7131987fabf44fc226b3d37d372f81e9cd376", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/13b7aa4d7faafbed78d195c27f6868f6bd90c2f8/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13b7aa4d7faafbed78d195c27f6868f6bd90c2f8/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=13b7aa4d7faafbed78d195c27f6868f6bd90c2f8", "patch": "@@ -17,8 +17,10 @@ use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_serialize::{opaque::FileEncoder, Encodable};\n use rustc_session::Session;\n \n-use std::fmt;\n use std::hash::Hash;\n+use std::{fmt, panic};\n+\n+use self::graph::{print_markframe_trace, MarkFrame};\n \n pub trait DepContext: Copy {\n     type DepKind: self::DepKind;\n@@ -53,11 +55,23 @@ pub trait DepContext: Copy {\n     }\n \n     /// Try to force a dep node to execute and see if it's green.\n-    #[instrument(skip(self), level = \"debug\")]\n-    fn try_force_from_dep_node(self, dep_node: DepNode<Self::DepKind>) -> bool {\n+    #[inline]\n+    #[instrument(skip(self, frame), level = \"debug\")]\n+    fn try_force_from_dep_node(\n+        self,\n+        dep_node: DepNode<Self::DepKind>,\n+        frame: Option<&MarkFrame<'_>>,\n+    ) -> bool {\n         let cb = self.dep_kind_info(dep_node.kind);\n         if let Some(f) = cb.force_from_dep_node {\n-            f(self, dep_node);\n+            if let Err(value) = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n+                f(self, dep_node);\n+            })) {\n+                if !value.is::<rustc_errors::FatalErrorMarker>() {\n+                    print_markframe_trace(self.dep_graph(), frame);\n+                }\n+                panic::resume_unwind(value)\n+            }\n             true\n         } else {\n             false"}]}