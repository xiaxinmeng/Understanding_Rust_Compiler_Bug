{"sha": "893f42a83466cf02b6fd6d3c82d5419cdad47474", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5M2Y0MmE4MzQ2NmNmMDJiNmZkNmQzYzgyZDU0MTljZGFkNDc0NzQ=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2016-12-03T01:10:59Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2017-01-04T22:53:44Z"}, "message": "book: use abort() over loop {} for panic\n\nDue to #28728 loop {} is very risky and can lead to fun debugging experiences like in #38136. Besides, aborting is probably better behavior than an infinite loop.", "tree": {"sha": "acb81b8fbdde79fd92501306148a44e247efeb08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acb81b8fbdde79fd92501306148a44e247efeb08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/893f42a83466cf02b6fd6d3c82d5419cdad47474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/893f42a83466cf02b6fd6d3c82d5419cdad47474", "html_url": "https://github.com/rust-lang/rust/commit/893f42a83466cf02b6fd6d3c82d5419cdad47474", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/893f42a83466cf02b6fd6d3c82d5419cdad47474/comments", "author": null, "committer": null, "parents": [{"sha": "0b399e5e99a44cf44d3860d353a8b7619d466410", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b399e5e99a44cf44d3860d353a8b7619d466410", "html_url": "https://github.com/rust-lang/rust/commit/0b399e5e99a44cf44d3860d353a8b7619d466410"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "0d6a142ca4f724c178f07987cc50e72f7a9dc962", "filename": "src/doc/book/lang-items.md", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/893f42a83466cf02b6fd6d3c82d5419cdad47474/src%2Fdoc%2Fbook%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/893f42a83466cf02b6fd6d3c82d5419cdad47474/src%2Fdoc%2Fbook%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Flang-items.md?ref=893f42a83466cf02b6fd6d3c82d5419cdad47474", "patch": "@@ -16,15 +16,12 @@ and one for deallocation. A freestanding program that uses the `Box`\n sugar for dynamic allocations via `malloc` and `free`:\n \n ```rust,ignore\n-#![feature(lang_items, box_syntax, start, libc)]\n+#![feature(lang_items, box_syntax, start, libc, core_intrinsics)]\n #![no_std]\n+use core::intrinsics;\n \n extern crate libc;\n \n-extern {\n-    fn abort() -> !;\n-}\n-\n #[lang = \"owned_box\"]\n pub struct Box<T>(*mut T);\n \n@@ -34,7 +31,7 @@ unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n \n     // Check if `malloc` failed:\n     if p as usize == 0 {\n-        abort();\n+        intrinsics::abort();\n     }\n \n     p\n@@ -58,7 +55,7 @@ fn main(argc: isize, argv: *const *const u8) -> isize {\n }\n \n #[lang = \"eh_personality\"] extern fn rust_eh_personality() {}\n-#[lang = \"panic_fmt\"] extern fn rust_begin_panic() -> ! { loop {} }\n+#[lang = \"panic_fmt\"] extern fn rust_begin_panic() -> ! { unsafe { intrinsics::abort() } }\n # #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n # #[no_mangle] pub extern fn rust_eh_register_frames () {}\n # #[no_mangle] pub extern fn rust_eh_unregister_frames () {}"}, {"sha": "79f0593be1780cffa167d3bb0cc95cd0a2fe0a8e", "filename": "src/doc/book/no-stdlib.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/893f42a83466cf02b6fd6d3c82d5419cdad47474/src%2Fdoc%2Fbook%2Fno-stdlib.md", "raw_url": "https://github.com/rust-lang/rust/raw/893f42a83466cf02b6fd6d3c82d5419cdad47474/src%2Fdoc%2Fbook%2Fno-stdlib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fno-stdlib.md?ref=893f42a83466cf02b6fd6d3c82d5419cdad47474", "patch": "@@ -37,9 +37,10 @@ The function marked `#[start]` is passed the command line parameters\n in the same format as C:\n \n ```rust,ignore\n-#![feature(lang_items)]\n+#![feature(lang_items, core_intrinsics)]\n #![feature(start)]\n #![no_std]\n+use core::intrinsics;\n \n // Pull in the system libc library for what crt0.o likely requires.\n extern crate libc;\n@@ -69,7 +70,7 @@ pub extern fn rust_eh_unwind_resume() {\n pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n                                _file: &'static str,\n                                _line: u32) -> ! {\n-    loop {}\n+    unsafe { intrinsics::abort() }\n }\n ```\n \n@@ -79,10 +80,11 @@ correct ABI and the correct name, which requires overriding the\n compiler's name mangling too:\n \n ```rust,ignore\n-#![feature(lang_items)]\n+#![feature(lang_items, core_intrinsics)]\n #![feature(start)]\n #![no_std]\n #![no_main]\n+use core::intrinsics;\n \n // Pull in the system libc library for what crt0.o likely requires.\n extern crate libc;\n@@ -112,7 +114,7 @@ pub extern fn rust_eh_unwind_resume() {\n pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n                                _file: &'static str,\n                                _line: u32) -> ! {\n-    loop {}\n+    unsafe { intrinsics::abort() }\n }\n ```\n "}]}