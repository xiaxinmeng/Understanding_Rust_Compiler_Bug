{"sha": "da7d79dfbe46bf017e654598e481c6cc3a818af8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhN2Q3OWRmYmU0NmJmMDE3ZTY1NDU5OGU0ODFjNmNjM2E4MThhZjg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-10T06:35:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-16T20:24:25Z"}, "message": "rt: Remove rust_stack", "tree": {"sha": "87061a03757790b4b5443abbd013bcf86f2f01d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87061a03757790b4b5443abbd013bcf86f2f01d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da7d79dfbe46bf017e654598e481c6cc3a818af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da7d79dfbe46bf017e654598e481c6cc3a818af8", "html_url": "https://github.com/rust-lang/rust/commit/da7d79dfbe46bf017e654598e481c6cc3a818af8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da7d79dfbe46bf017e654598e481c6cc3a818af8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8861ba6159fb93839c9c7d778aa26f0316f6b717", "url": "https://api.github.com/repos/rust-lang/rust/commits/8861ba6159fb93839c9c7d778aa26f0316f6b717", "html_url": "https://github.com/rust-lang/rust/commit/8861ba6159fb93839c9c7d778aa26f0316f6b717"}], "stats": {"total": 170, "additions": 10, "deletions": 160}, "files": [{"sha": "e6969a79f5a79abe95a97dd70a37a231e01b424b", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da7d79dfbe46bf017e654598e481c6cc3a818af8/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/da7d79dfbe46bf017e654598e481c6cc3a818af8/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=da7d79dfbe46bf017e654598e481c6cc3a818af8", "patch": "@@ -69,7 +69,6 @@ RUNTIME_CXXS_$(1)_$(2) := \\\n               rt/rust_builtin.cpp \\\n               rt/rust_run_program.cpp \\\n               rt/rust_rng.cpp \\\n-              rt/rust_stack.cpp \\\n               rt/rust_upcall.cpp \\\n               rt/rust_uv.cpp \\\n               rt/rust_crate_map.cpp \\"}, {"sha": "c95a4737d17c255e7a65827b1f2a8a79569f23c1", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da7d79dfbe46bf017e654598e481c6cc3a818af8/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/da7d79dfbe46bf017e654598e481c6cc3a818af8/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=da7d79dfbe46bf017e654598e481c6cc3a818af8", "patch": "@@ -681,6 +681,16 @@ rust_drop_env_lock() {\n     env_lock.unlock();\n }\n \n+extern \"C\" CDECL unsigned int\n+rust_valgrind_stack_register(void *start, void *end) {\n+  return VALGRIND_STACK_REGISTER(start, end);\n+}\n+\n+extern \"C\" CDECL void\n+rust_valgrind_stack_deregister(unsigned int id) {\n+  VALGRIND_STACK_DEREGISTER(id);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "a609ac573245d625e9831404ec8b821edb275fe0", "filename": "src/rt/rust_stack.cpp", "status": "removed", "additions": 0, "deletions": 105, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/8861ba6159fb93839c9c7d778aa26f0316f6b717/src%2Frt%2Frust_stack.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8861ba6159fb93839c9c7d778aa26f0316f6b717/src%2Frt%2Frust_stack.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_stack.cpp?ref=8861ba6159fb93839c9c7d778aa26f0316f6b717", "patch": "@@ -1,105 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-#include \"rust_stack.h\"\n-#include \"vg/valgrind.h\"\n-#include \"vg/memcheck.h\"\n-\n-#include <cstdio>\n-\n-#ifdef _LP64\n-const uintptr_t canary_value = 0xABCDABCDABCDABCD;\n-#else\n-const uintptr_t canary_value = 0xABCDABCD;\n-#endif\n-\n-void\n-register_valgrind_stack(stk_seg *stk) {\n-    stk->valgrind_id =\n-        VALGRIND_STACK_REGISTER(&stk->data[0],\n-                                stk->end);\n-}\n-\n-void\n-reuse_valgrind_stack(stk_seg *stk, uint8_t *sp) {\n-    // Establish that the stack is accessible.  This must be done when reusing\n-    // old stack segments, since the act of popping the stack previously\n-    // caused valgrind to consider the whole thing inaccessible.\n-    assert(sp >= stk->data && sp <= (uint8_t*) stk->end\n-           && \"Stack pointer must be inside stack segment\");\n-    size_t sz = stk->end - (uintptr_t)sp;\n-    (void) VALGRIND_MAKE_MEM_UNDEFINED(sp, sz);\n-    (void) sz;\n-}\n-\n-void\n-deregister_valgrind_stack(stk_seg *stk) {\n-    VALGRIND_STACK_DEREGISTER(stk->valgrind_id);\n-}\n-\n-void\n-add_stack_canary(stk_seg *stk) {\n-    stk->canary = canary_value;\n-}\n-\n-void\n-check_stack_canary(stk_seg *stk) {\n-    assert(stk->canary == canary_value && \"Somebody killed the canary\");\n-}\n-\n-// XXX: Duplication here between the local and exchange heap constructors\n-\n-stk_seg *\n-create_stack(memory_region *region, size_t sz) {\n-    size_t total_sz = sizeof(stk_seg) + sz;\n-    stk_seg *stk = (stk_seg *)region->malloc(total_sz, \"stack\");\n-    memset(stk, 0, sizeof(stk_seg));\n-    stk->end = (uintptr_t) &stk->data[sz];\n-    stk->is_big = 0;\n-    add_stack_canary(stk);\n-    register_valgrind_stack(stk);\n-    return stk;\n-}\n-\n-void\n-destroy_stack(memory_region *region, stk_seg *stk) {\n-    deregister_valgrind_stack(stk);\n-    region->free(stk);\n-}\n-\n-stk_seg *\n-create_exchange_stack(rust_exchange_alloc *exchange, size_t sz) {\n-    size_t total_sz = sizeof(stk_seg) + sz;\n-    stk_seg *stk = (stk_seg *)exchange->malloc(total_sz);\n-    memset(stk, 0, sizeof(stk_seg));\n-    stk->end = (uintptr_t) &stk->data[sz];\n-    stk->is_big = 0;\n-    add_stack_canary(stk);\n-    register_valgrind_stack(stk);\n-    return stk;\n-}\n-\n-void\n-destroy_exchange_stack(rust_exchange_alloc *exchange, stk_seg *stk) {\n-    deregister_valgrind_stack(stk);\n-    exchange->free(stk);\n-}\n-\n-\n-extern \"C\" CDECL unsigned int\n-rust_valgrind_stack_register(void *start, void *end) {\n-  return VALGRIND_STACK_REGISTER(start, end);\n-}\n-\n-extern \"C\" CDECL void\n-rust_valgrind_stack_deregister(unsigned int id) {\n-  VALGRIND_STACK_DEREGISTER(id);\n-}"}, {"sha": "3b34b91e309cf55ba27c7c760de7a75a87e4cd83", "filename": "src/rt/rust_stack.h", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8861ba6159fb93839c9c7d778aa26f0316f6b717/src%2Frt%2Frust_stack.h", "raw_url": "https://github.com/rust-lang/rust/raw/8861ba6159fb93839c9c7d778aa26f0316f6b717/src%2Frt%2Frust_stack.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_stack.h?ref=8861ba6159fb93839c9c7d778aa26f0316f6b717", "patch": "@@ -1,54 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#ifndef RUST_STACK_H\n-#define RUST_STACK_H\n-\n-#include \"rust_globals.h\"\n-#include \"rust_exchange_alloc.h\"\n-#include \"memory_region.h\"\n-\n-struct rust_task;\n-\n-struct stk_seg {\n-    stk_seg *prev;\n-    stk_seg *next;\n-    uintptr_t end;\n-    unsigned int valgrind_id;\n-    uint8_t is_big;\n-\n-    rust_task *task;\n-    uintptr_t canary;\n-\n-    uint8_t data[];\n-};\n-\n-stk_seg *\n-create_stack(memory_region *region, size_t sz);\n-\n-void\n-destroy_stack(memory_region *region, stk_seg *stk);\n-\n-stk_seg *\n-create_exchange_stack(rust_exchange_alloc *exchange, size_t sz);\n-\n-void\n-destroy_exchange_stack(rust_exchange_alloc *exchange, stk_seg *stk);\n-\n-// Must be called before each time a stack is reused to tell valgrind\n-// that the stack is accessible.\n-void\n-reuse_valgrind_stack(stk_seg *stk, uint8_t *sp);\n-\n-// Run a sanity check\n-void\n-check_stack_canary(stk_seg *stk);\n-\n-#endif /* RUST_STACK_H */"}]}