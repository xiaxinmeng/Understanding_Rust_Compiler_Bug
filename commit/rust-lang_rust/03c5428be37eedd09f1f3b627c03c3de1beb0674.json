{"sha": "03c5428be37eedd09f1f3b627c03c3de1beb0674", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYzU0MjhiZTM3ZWVkZDA5ZjFmM2I2MjdjMDNjM2RlMWJlYjA2NzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-07T18:34:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-13T15:22:07Z"}, "message": "short-circuit `dropck_outlives` for simple cases", "tree": {"sha": "b6fbe6d90b07b0b18c75c35fc7083c02ce6f9fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6fbe6d90b07b0b18c75c35fc7083c02ce6f9fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03c5428be37eedd09f1f3b627c03c3de1beb0674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03c5428be37eedd09f1f3b627c03c3de1beb0674", "html_url": "https://github.com/rust-lang/rust/commit/03c5428be37eedd09f1f3b627c03c3de1beb0674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03c5428be37eedd09f1f3b627c03c3de1beb0674/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e4e632ad8be2be00a1894c6c5946b730e12a5bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e4e632ad8be2be00a1894c6c5946b730e12a5bd", "html_url": "https://github.com/rust-lang/rust/commit/1e4e632ad8be2be00a1894c6c5946b730e12a5bd"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "0fe4daa36ed4a628b8bda5beaa76a0aa9e5ad096", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/03c5428be37eedd09f1f3b627c03c3de1beb0674/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03c5428be37eedd09f1f3b627c03c3de1beb0674/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=03c5428be37eedd09f1f3b627c03c3de1beb0674", "patch": "@@ -38,11 +38,16 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n     pub fn dropck_outlives(&self, ty: Ty<'tcx>) -> InferOk<'tcx, Vec<Kind<'tcx>>> {\n         debug!(\n             \"dropck_outlives(ty={:?}, param_env={:?})\",\n-            ty,\n-            self.param_env,\n+            ty, self.param_env,\n         );\n \n+        // Quick check: there are a number of cases that we know do not require\n+        // any destructor.\n         let tcx = self.infcx.tcx;\n+        if trivial_dropck_outlives(tcx, ty) {\n+            return InferOk { value: vec![], obligations: vec![] };\n+        }\n+\n         let gcx = tcx.global_tcx();\n         let (c_ty, orig_values) = self.infcx.canonicalize_query(&self.param_env.and(ty));\n         let span = self.cause.span;\n@@ -192,3 +197,68 @@ impl_stable_hash_for!(struct DtorckConstraint<'tcx> {\n     dtorck_types,\n     overflows\n });\n+\n+/// This returns true if the type `ty` is \"trivial\" for\n+/// dropck-outlives -- that is, if it doesn't require any types to\n+/// outlive. This is similar but not *quite* the same as the\n+/// `needs_drop` test in the compiler already -- that is, for every\n+/// type T for which this function return true, needs-drop would\n+/// return false. But the reverse does not hold: in particular,\n+/// `needs_drop` returns false for `PhantomData`, but it is not\n+/// trivial for dropck-outlives.\n+///\n+/// Note also that `needs_drop` requires a \"global\" type (i.e., one\n+/// with erased regions), but this funtcion does not.\n+fn trivial_dropck_outlives<'cx, 'tcx>(tcx: TyCtxt<'cx, '_, 'tcx>, ty: Ty<'tcx>) -> bool {\n+    match ty.sty {\n+        // None of these types have a destructor and hence they do not\n+        // require anything in particular to outlive the dtor's\n+        // execution.\n+        ty::TyInfer(ty::FreshIntTy(_))\n+        | ty::TyInfer(ty::FreshFloatTy(_))\n+        | ty::TyBool\n+        | ty::TyInt(_)\n+        | ty::TyUint(_)\n+        | ty::TyFloat(_)\n+        | ty::TyNever\n+        | ty::TyFnDef(..)\n+        | ty::TyFnPtr(_)\n+        | ty::TyChar\n+        | ty::TyGeneratorWitness(..)\n+        | ty::TyRawPtr(_)\n+        | ty::TyRef(..)\n+        | ty::TyStr\n+        | ty::TyForeign(..)\n+        | ty::TyError => true,\n+\n+        // [T; N] and [T] have same properties as T.\n+        ty::TyArray(ty, _) | ty::TySlice(ty) => trivial_dropck_outlives(tcx, ty),\n+\n+        // (T1..Tn) and closures have same properties as T1..Tn --\n+        // check if *any* of those are trivial.\n+        ty::TyTuple(ref tys, _) => tys.iter().cloned().all(|t| trivial_dropck_outlives(tcx, t)),\n+        ty::TyClosure(def_id, ref substs) => substs\n+            .upvar_tys(def_id, tcx)\n+            .all(|t| trivial_dropck_outlives(tcx, t)),\n+\n+        ty::TyAdt(def, _) => {\n+            if def.is_union() {\n+                // Unions never run have a dtor.\n+                true\n+            } else {\n+                // Other types might. Moreover, PhantomData doesn't\n+                // have a dtor, but it is considered to own its\n+                // content, so it is non-trivial.\n+                false\n+            }\n+        }\n+\n+        // The following *might* require a destructor: it would deeper inspection to tell.\n+        ty::TyDynamic(..)\n+        | ty::TyProjection(..)\n+        | ty::TyParam(_)\n+        | ty::TyAnon(..)\n+        | ty::TyInfer(_)\n+        | ty::TyGenerator(..) => false,\n+    }\n+}"}]}