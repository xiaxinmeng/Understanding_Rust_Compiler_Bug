{"sha": "b4e547d71aa379e702a737550e479116914b19cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZTU0N2Q3MWFhMzc5ZTcwMmE3Mzc1NTBlNDc5MTE2OTE0YjE5Y2Y=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-05T22:58:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-06T17:52:26Z"}, "message": "Remove struct ctors", "tree": {"sha": "e5abaa61a98462de027ca0f80e21b142269bd801", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5abaa61a98462de027ca0f80e21b142269bd801"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4e547d71aa379e702a737550e479116914b19cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4e547d71aa379e702a737550e479116914b19cf", "html_url": "https://github.com/rust-lang/rust/commit/b4e547d71aa379e702a737550e479116914b19cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4e547d71aa379e702a737550e479116914b19cf/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e36a997945ddc3964a1fe937bc5390cc5b526c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e36a997945ddc3964a1fe937bc5390cc5b526c8", "html_url": "https://github.com/rust-lang/rust/commit/5e36a997945ddc3964a1fe937bc5390cc5b526c8"}], "stats": {"total": 1574, "additions": 1017, "deletions": 557}, "files": [{"sha": "789ee70249f3a3fe3732d1fc1ec1979bcbe2417a", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -118,20 +118,22 @@ fn protocol(name: ~str, +span: span) -> protocol {\n     @protocol_(name, span)\n }\n \n+fn protocol_(name: ~str, span: span) -> protocol_ {\n+    protocol_ {\n+        name: name,\n+        span: span,\n+        states: DVec(),\n+        bounded: None\n+    }\n+}\n+\n struct protocol_ {\n     let name: ~str;\n     let span: span;\n     let states: DVec<state>;\n \n     let mut bounded: Option<bool>;\n \n-    new(name: ~str, span: span) {\n-        self.name = name;\n-        self.span = span;\n-        self.states = DVec();\n-        self.bounded = None;\n-    }\n-\n     /// Get a state.\n     fn get_state(name: ~str) -> state {\n         self.states.find(|i| i.name == name).get()"}, {"sha": "e900b7dd7b3813937bde4118781d43b60ad3cad1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 41, "deletions": 55, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -181,6 +181,37 @@ pure fn maybe_append(+lhs: ~[attribute], rhs: Option<~[attribute]>)\n \n /* ident is handled by common.rs */\n \n+fn parser(sess: parse_sess, cfg: ast::crate_cfg,\n+          +rdr: reader, ftype: file_type) -> parser {\n+\n+    let tok0 = rdr.next_token();\n+    let span0 = tok0.sp;\n+    let interner = rdr.interner();\n+\n+    parser {\n+        reader: move rdr,\n+        interner: move interner,\n+        sess: sess,\n+        cfg: cfg,\n+        file_type: ftype,\n+        token: tok0.tok,\n+        span: span0,\n+        last_span: span0,\n+        buffer: [mut\n+            {tok: tok0.tok, sp: span0},\n+            {tok: tok0.tok, sp: span0},\n+            {tok: tok0.tok, sp: span0},\n+            {tok: tok0.tok, sp: span0}\n+        ]/4,\n+        buffer_start: 0,\n+        buffer_end: 0,\n+        restriction: UNRESTRICTED,\n+        quote_depth: 0u,\n+        keywords: token::keyword_table(),\n+        restricted_keywords: token::restricted_keyword_table()\n+    }\n+}\n+\n struct parser {\n     let sess: parse_sess;\n     let cfg: crate_cfg;\n@@ -198,32 +229,6 @@ struct parser {\n     let keywords: hashmap<~str, ()>;\n     let restricted_keywords: hashmap<~str, ()>;\n \n-    new(sess: parse_sess, cfg: ast::crate_cfg, +rdr: reader, ftype: file_type)\n-    {\n-        self.reader <- rdr;\n-        self.interner = self.reader.interner();\n-        let tok0 = self.reader.next_token();\n-        let span0 = tok0.sp;\n-        self.sess = sess;\n-        self.cfg = cfg;\n-        self.file_type = ftype;\n-        self.token = tok0.tok;\n-        self.span = span0;\n-        self.last_span = span0;\n-        self.buffer = [mut\n-            {tok: tok0.tok, sp: span0},\n-            {tok: tok0.tok, sp: span0},\n-            {tok: tok0.tok, sp: span0},\n-            {tok: tok0.tok, sp: span0}\n-        ]/4;\n-        self.buffer_start = 0;\n-        self.buffer_end = 0;\n-        self.restriction = UNRESTRICTED;\n-        self.quote_depth = 0u;\n-        self.keywords = token::keyword_table();\n-        self.restricted_keywords = token::restricted_keyword_table();\n-    }\n-\n     drop {} /* do not copy the parser; its state is tied to outside state */\n \n     fn bump() {\n@@ -2594,7 +2599,6 @@ struct parser {\n         let class_name = self.parse_value_ident();\n         self.parse_region_param();\n         let ty_params = self.parse_ty_params();\n-        let class_path = self.ident_to_path_tys(class_name, ty_params);\n         let traits : ~[@trait_ref] = if self.eat(token::COLON)\n             { self.parse_trait_ref_list(token::LBRACE) }\n         else { ~[] };\n@@ -2610,7 +2614,7 @@ struct parser {\n             // It's a record-like struct.\n             fields = ~[];\n             while self.token != token::RBRACE {\n-                match self.parse_class_item(class_path) {\n+                match self.parse_class_item() {\n                   ctor_decl(a_fn_decl, attrs, blk, s) => {\n                       match the_ctor {\n                         Some((_, _, _, s_first)) => {\n@@ -2747,24 +2751,13 @@ struct parser {\n         }\n     }\n \n-    fn parse_ctor(attrs: ~[attribute],\n-                  result_ty: ast::ty_) -> class_contents {\n-        let lo = self.last_span.lo;\n-        let (decl_, _) = self.parse_fn_decl(|p| p.parse_arg());\n-        let decl = {output: @{id: self.get_id(),\n-                              node: result_ty, span: decl_.output.span},\n-                    .. decl_};\n-        let body = self.parse_block();\n-        ctor_decl(decl, attrs, body, mk_sp(lo, self.last_span.hi))\n-    }\n-\n     fn parse_dtor(attrs: ~[attribute]) -> class_contents {\n         let lo = self.last_span.lo;\n         let body = self.parse_block();\n         dtor_decl(body, attrs, mk_sp(lo, self.last_span.hi))\n     }\n \n-    fn parse_class_item(class_name_with_tps: @path) -> class_contents {\n+    fn parse_class_item() -> class_contents {\n         if self.eat_keyword(~\"priv\") {\n             // XXX: Remove after snapshot.\n             match self.token {\n@@ -2789,12 +2782,7 @@ struct parser {\n \n         let attrs = self.parse_outer_attributes();\n \n-        if self.eat_keyword(~\"new\") {\n-            // result type is always the type of the class\n-           return self.parse_ctor(attrs, ty_path(class_name_with_tps,\n-                                        self.get_id()));\n-        }\n-        else if self.eat_keyword(~\"drop\") {\n+        if self.eat_keyword(~\"drop\") {\n            return self.parse_dtor(attrs);\n         }\n         else {\n@@ -3019,12 +3007,12 @@ struct parser {\n         }\n     }\n \n-    fn parse_struct_def(path: @path) -> @struct_def {\n+    fn parse_struct_def() -> @struct_def {\n         let mut the_dtor: Option<(blk, ~[attribute], codemap::span)> = None;\n         let mut fields: ~[@struct_field] = ~[];\n         let mut methods: ~[@method] = ~[];\n         while self.token != token::RBRACE {\n-            match self.parse_class_item(path) {\n+            match self.parse_class_item() {\n                 ctor_decl(*) => {\n                     self.span_fatal(copy self.span,\n                                     ~\"deprecated explicit \\\n@@ -3076,7 +3064,7 @@ struct parser {\n         };\n     }\n \n-    fn parse_enum_def(ident: ast::ident, ty_params: ~[ast::ty_param])\n+    fn parse_enum_def(ty_params: ~[ast::ty_param])\n                    -> enum_def {\n         let mut variants: ~[variant] = ~[];\n         let mut all_nullary = true, have_disr = false;\n@@ -3092,8 +3080,7 @@ struct parser {\n                     self.fatal(~\"duplicate declaration of shared fields\");\n                 }\n                 self.expect(token::LBRACE);\n-                let path = self.ident_to_path_tys(ident, ty_params);\n-                common_fields = Some(self.parse_struct_def(path));\n+                common_fields = Some(self.parse_struct_def());\n                 again;\n             }\n \n@@ -3105,16 +3092,15 @@ struct parser {\n             if self.eat_keyword(~\"enum\") {\n                 ident = self.parse_ident();\n                 self.expect(token::LBRACE);\n-                let nested_enum_def = self.parse_enum_def(ident, ty_params);\n+                let nested_enum_def = self.parse_enum_def(ty_params);\n                 kind = enum_variant_kind(move nested_enum_def);\n                 needs_comma = false;\n             } else {\n                 ident = self.parse_value_ident();\n                 if self.eat(token::LBRACE) {\n                     // Parse a struct variant.\n                     all_nullary = false;\n-                    let path = self.ident_to_path_tys(ident, ty_params);\n-                    kind = struct_variant_kind(self.parse_struct_def(path));\n+                    kind = struct_variant_kind(self.parse_struct_def());\n                 } else if self.token == token::LPAREN {\n                     all_nullary = false;\n                     let arg_tys = self.parse_unspanned_seq(\n@@ -3176,7 +3162,7 @@ struct parser {\n         }\n         self.expect(token::LBRACE);\n \n-        let enum_definition = self.parse_enum_def(id, ty_params);\n+        let enum_definition = self.parse_enum_def(ty_params);\n         (id, item_enum(enum_definition, ty_params), None)\n     }\n "}, {"sha": "945f4c6b279a076d1bf9b2f1e17b9408ab03fa4d", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -422,7 +422,6 @@ fn restricted_keyword_table() -> hashmap<~str, ()> {\n         ~\"if\", ~\"impl\", ~\"import\",\n         ~\"let\", ~\"log\", ~\"loop\",\n         ~\"match\", ~\"mod\", ~\"module\", ~\"move\", ~\"mut\",\n-        ~\"new\",\n         ~\"owned\",\n         ~\"pure\",\n         ~\"ref\", ~\"return\","}, {"sha": "8b8325853ccd4fe35f5067d7b0dd4330bdf021b1", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -241,11 +241,10 @@ fn monitor(+f: fn~(diagnostic::emitter)) {\n \n         struct finally {\n             let ch: comm::Chan<monitor_msg>;\n-            new(ch: comm::Chan<monitor_msg>) { self.ch = ch; }\n             drop { comm::send(self.ch, done); }\n         }\n \n-        let _finally = finally(ch);\n+        let _finally = finally { ch: ch };\n \n         f(demitter)\n     } {"}, {"sha": "23566e59cf9f401578840b24a0b550eaa714b678", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1175,10 +1175,15 @@ fn fn_ty_param_tys(fn_ty: TypeRef) -> ~[TypeRef] unsafe {\n \n struct target_data_res {\n     let TD: TargetDataRef;\n-    new(TD: TargetDataRef) { self.TD = TD; }\n     drop { llvm::LLVMDisposeTargetData(self.TD); }\n }\n \n+fn target_data_res(TD: TargetDataRef) -> target_data_res {\n+    target_data_res {\n+        TD: TD\n+    }\n+}\n+\n type target_data = {lltd: TargetDataRef, dtor: @target_data_res};\n \n fn mk_target_data(string_rep: ~str) -> target_data {\n@@ -1191,10 +1196,15 @@ fn mk_target_data(string_rep: ~str) -> target_data {\n \n struct pass_manager_res {\n     let PM: PassManagerRef;\n-    new(PM: PassManagerRef) { self.PM = PM; }\n     drop { llvm::LLVMDisposePassManager(self.PM); }\n }\n \n+fn pass_manager_res(PM: PassManagerRef) -> pass_manager_res {\n+    pass_manager_res {\n+        PM: PM\n+    }\n+}\n+\n type pass_manager = {llpm: PassManagerRef, dtor: @pass_manager_res};\n \n fn mk_pass_manager() -> pass_manager {\n@@ -1206,10 +1216,15 @@ fn mk_pass_manager() -> pass_manager {\n \n struct object_file_res {\n     let ObjectFile: ObjectFileRef;\n-    new(ObjectFile: ObjectFileRef) { self.ObjectFile = ObjectFile; }\n     drop { llvm::LLVMDisposeObjectFile(self.ObjectFile); }\n }\n \n+fn object_file_res(ObjectFile: ObjectFileRef) -> object_file_res{\n+    object_file_res {\n+        ObjectFile: ObjectFile\n+    }\n+}\n+\n type object_file = {llof: ObjectFileRef, dtor: @object_file_res};\n \n fn mk_object_file(llmb: MemoryBufferRef) -> Option<object_file> {\n@@ -1222,10 +1237,15 @@ fn mk_object_file(llmb: MemoryBufferRef) -> Option<object_file> {\n \n struct section_iter_res {\n     let SI: SectionIteratorRef;\n-    new(SI: SectionIteratorRef) { self.SI = SI; }\n     drop { llvm::LLVMDisposeSectionIterator(self.SI); }\n }\n \n+fn section_iter_res(SI: SectionIteratorRef) -> section_iter_res {\n+    section_iter_res {\n+        SI: SI\n+    }\n+}\n+\n type section_iter = {llsi: SectionIteratorRef, dtor: @section_iter_res};\n \n fn mk_section_iter(llof: ObjectFileRef) -> section_iter {"}, {"sha": "4e2c7b8ee72c8feaba80b0bb90692d0cc478cd47", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -442,10 +442,12 @@ struct path_entry {\n     let path_string: ~str;\n     // The definition, implementation, or field that this path corresponds to.\n     let def_like: def_like;\n+}\n \n-    new(path_string: ~str, def_like: def_like) {\n-        self.path_string = path_string;\n-        self.def_like = def_like;\n+fn path_entry(path_string: ~str, def_like: def_like) -> path_entry {\n+    path_entry {\n+        path_string: path_string,\n+        def_like: def_like\n     }\n }\n "}, {"sha": "3d8771166b6430c377dcd354e85ec0b8822334ed", "filename": "src/rustc/middle/lang_items.rs", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -72,6 +72,41 @@ mod LanguageItems {\n     }\n }\n \n+fn LanguageItemCollector(crate: @crate, session: session,\n+                         items: &r/LanguageItems)\n+    -> LanguageItemCollector/&r {\n+\n+    let item_refs = str_hash();\n+\n+    item_refs.insert(~\"const\", &mut items.const_trait);\n+    item_refs.insert(~\"copy\", &mut items.copy_trait);\n+    item_refs.insert(~\"send\", &mut items.send_trait);\n+    item_refs.insert(~\"owned\", &mut items.owned_trait);\n+\n+    item_refs.insert(~\"add\", &mut items.add_trait);\n+    item_refs.insert(~\"sub\", &mut items.sub_trait);\n+    item_refs.insert(~\"mul\", &mut items.mul_trait);\n+    item_refs.insert(~\"div\", &mut items.div_trait);\n+    item_refs.insert(~\"modulo\", &mut items.modulo_trait);\n+    item_refs.insert(~\"neg\", &mut items.neg_trait);\n+    item_refs.insert(~\"bitxor\", &mut items.bitxor_trait);\n+    item_refs.insert(~\"bitand\", &mut items.bitand_trait);\n+    item_refs.insert(~\"bitor\", &mut items.bitor_trait);\n+    item_refs.insert(~\"shl\", &mut items.shl_trait);\n+    item_refs.insert(~\"shr\", &mut items.shr_trait);\n+    item_refs.insert(~\"index\", &mut items.index_trait);\n+\n+    item_refs.insert(~\"eq\", &mut items.eq_trait);\n+    item_refs.insert(~\"ord\", &mut items.ord_trait);\n+\n+    LanguageItemCollector {\n+        crate: crate,\n+        session: session,\n+        items: items,\n+        item_refs: item_refs\n+    }\n+}\n+\n struct LanguageItemCollector {\n     let items: &LanguageItems;\n \n@@ -80,34 +115,6 @@ struct LanguageItemCollector {\n \n     let item_refs: hashmap<~str,&mut Option<def_id>>;\n \n-    new(crate: @crate, session: session, items: &self/LanguageItems) {\n-        self.crate = crate;\n-        self.session = session;\n-        self.items = items;\n-        self.item_refs = str_hash();\n-\n-        self.item_refs.insert(~\"const\", &mut self.items.const_trait);\n-        self.item_refs.insert(~\"copy\", &mut self.items.copy_trait);\n-        self.item_refs.insert(~\"send\", &mut self.items.send_trait);\n-        self.item_refs.insert(~\"owned\", &mut self.items.owned_trait);\n-\n-        self.item_refs.insert(~\"add\", &mut self.items.add_trait);\n-        self.item_refs.insert(~\"sub\", &mut self.items.sub_trait);\n-        self.item_refs.insert(~\"mul\", &mut self.items.mul_trait);\n-        self.item_refs.insert(~\"div\", &mut self.items.div_trait);\n-        self.item_refs.insert(~\"modulo\", &mut self.items.modulo_trait);\n-        self.item_refs.insert(~\"neg\", &mut self.items.neg_trait);\n-        self.item_refs.insert(~\"bitxor\", &mut self.items.bitxor_trait);\n-        self.item_refs.insert(~\"bitand\", &mut self.items.bitand_trait);\n-        self.item_refs.insert(~\"bitor\", &mut self.items.bitor_trait);\n-        self.item_refs.insert(~\"shl\", &mut self.items.shl_trait);\n-        self.item_refs.insert(~\"shr\", &mut self.items.shr_trait);\n-        self.item_refs.insert(~\"index\", &mut self.items.index_trait);\n-\n-        self.item_refs.insert(~\"eq\", &mut self.items.eq_trait);\n-        self.item_refs.insert(~\"ord\", &mut self.items.ord_trait);\n-    }\n-\n     fn match_and_collect_meta_item(item_def_id: def_id,\n                                    meta_item: meta_item) {\n "}, {"sha": "1168260b519d4451bf6fdbc5b2a65d0acf150187", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 135, "deletions": 113, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -311,37 +311,43 @@ fn atom_hashmap<V:copy>() -> hashmap<Atom,V> {\n struct Rib {\n     let bindings: hashmap<Atom,def_like>;\n     let kind: RibKind;\n+}\n \n-    new(kind: RibKind) {\n-        self.bindings = atom_hashmap();\n-        self.kind = kind;\n+fn Rib(kind: RibKind) -> Rib {\n+    Rib {\n+        bindings: atom_hashmap(),\n+        kind: kind\n     }\n }\n \n+\n /// One import directive.\n struct ImportDirective {\n     let module_path: @DVec<Atom>;\n     let subclass: @ImportDirectiveSubclass;\n     let span: span;\n+}\n \n-    new(module_path: @DVec<Atom>,\n-        subclass: @ImportDirectiveSubclass,\n-        span: span) {\n-\n-        self.module_path = module_path;\n-        self.subclass = subclass;\n-        self.span = span;\n+fn ImportDirective(module_path: @DVec<Atom>,\n+                   subclass: @ImportDirectiveSubclass,\n+                   span: span) -> ImportDirective {\n+    ImportDirective {\n+        module_path: module_path,\n+        subclass: subclass,\n+        span: span\n     }\n }\n \n /// The item that an import resolves to.\n struct Target {\n     let target_module: @Module;\n     let bindings: @NameBindings;\n+}\n \n-    new(target_module: @Module, bindings: @NameBindings) {\n-        self.target_module = target_module;\n-        self.bindings = bindings;\n+fn Target(target_module: @Module, bindings: @NameBindings) -> Target {\n+    Target {\n+        target_module: target_module,\n+        bindings: bindings\n     }\n }\n \n@@ -360,18 +366,6 @@ struct ImportResolution {\n \n     let mut used: bool;\n \n-    new(span: span) {\n-        self.span = span;\n-\n-        self.outstanding_references = 0u;\n-\n-        self.module_target = None;\n-        self.value_target = None;\n-        self.type_target = None;\n-\n-        self.used = false;\n-    }\n-\n     fn target_for_namespace(namespace: Namespace) -> Option<Target> {\n         match namespace {\n             ModuleNS    => return copy self.module_target,\n@@ -381,6 +375,17 @@ struct ImportResolution {\n     }\n }\n \n+fn ImportResolution(span: span) -> ImportResolution {\n+    ImportResolution {\n+        span: span,\n+        outstanding_references: 0u,\n+        module_target: None,\n+        value_target: None,\n+        type_target: None,\n+        used: false\n+    }\n+}\n+\n /// The link from a module up to its nearest parent node.\n enum ParentLink {\n     NoParentLink,\n@@ -430,27 +435,25 @@ struct Module {\n     // The index of the import we're resolving.\n     let mut resolved_import_count: uint;\n \n-    new(parent_link: ParentLink, def_id: Option<def_id>) {\n-        self.parent_link = parent_link;\n-        self.def_id = def_id;\n-\n-        self.children = atom_hashmap();\n-        self.imports = DVec();\n-\n-        self.anonymous_children = int_hash();\n-\n-        self.exported_names = atom_hashmap();\n-\n-        self.import_resolutions = atom_hashmap();\n-        self.glob_count = 0u;\n-        self.resolved_import_count = 0u;\n-    }\n-\n     fn all_imports_resolved() -> bool {\n         return self.imports.len() == self.resolved_import_count;\n     }\n }\n \n+fn Module(parent_link: ParentLink, def_id: Option<def_id>) -> Module {\n+    Module {\n+        parent_link: parent_link,\n+        def_id: def_id,\n+        children: atom_hashmap(),\n+        imports: DVec(),\n+        anonymous_children: int_hash(),\n+        exported_names: atom_hashmap(),\n+        import_resolutions: atom_hashmap(),\n+        glob_count: 0u,\n+        resolved_import_count: 0u\n+    }\n+}\n+\n // XXX: This is a workaround due to is_none in the standard library mistakenly\n // requiring a T:copy.\n \n@@ -501,15 +504,6 @@ struct NameBindings {\n     let mut type_span: Option<span>;\n     let mut value_span: Option<span>;\n \n-    new() {\n-        self.module_def = NoModuleDef;\n-        self.type_def = None;\n-        self.value_def = None;\n-        self.module_span = None;\n-        self.type_span = None;\n-        self.value_span = None;\n-    }\n-\n     /// Creates a new module in this set of name bindings.\n     fn define_module(parent_link: ParentLink, def_id: Option<def_id>,\n                      sp: span) {\n@@ -598,38 +592,55 @@ struct NameBindings {\n     }\n }\n \n+fn NameBindings() -> NameBindings {\n+    NameBindings {\n+        module_def: NoModuleDef,\n+        type_def: None,\n+        value_def: None,\n+        module_span: None,\n+        type_span: None,\n+        value_span: None\n+    }\n+}\n+\n+\n /// Interns the names of the primitive types.\n struct PrimitiveTypeTable {\n     let primitive_types: hashmap<Atom,prim_ty>;\n \n-    new(intr: ident_interner) {\n-        self.primitive_types = atom_hashmap();\n-\n-        self.intern(intr, @~\"bool\",    ty_bool);\n-        self.intern(intr, @~\"char\",    ty_int(ty_char));\n-        self.intern(intr, @~\"float\",   ty_float(ty_f));\n-        self.intern(intr, @~\"f32\",     ty_float(ty_f32));\n-        self.intern(intr, @~\"f64\",     ty_float(ty_f64));\n-        self.intern(intr, @~\"int\",     ty_int(ty_i));\n-        self.intern(intr, @~\"i8\",      ty_int(ty_i8));\n-        self.intern(intr, @~\"i16\",     ty_int(ty_i16));\n-        self.intern(intr, @~\"i32\",     ty_int(ty_i32));\n-        self.intern(intr, @~\"i64\",     ty_int(ty_i64));\n-        self.intern(intr, @~\"str\",     ty_str);\n-        self.intern(intr, @~\"uint\",    ty_uint(ty_u));\n-        self.intern(intr, @~\"u8\",      ty_uint(ty_u8));\n-        self.intern(intr, @~\"u16\",     ty_uint(ty_u16));\n-        self.intern(intr, @~\"u32\",     ty_uint(ty_u32));\n-        self.intern(intr, @~\"u64\",     ty_uint(ty_u64));\n-    }\n-\n     fn intern(intr: ident_interner, string: @~str,\n               primitive_type: prim_ty) {\n         let atom = intr.intern(string);\n         self.primitive_types.insert(atom, primitive_type);\n     }\n }\n \n+fn PrimitiveTypeTable(intr: ident_interner) -> PrimitiveTypeTable {\n+    let table = PrimitiveTypeTable {\n+        primitive_types: atom_hashmap()\n+    };\n+\n+    table.intern(intr, @~\"bool\",    ty_bool);\n+    table.intern(intr, @~\"char\",    ty_int(ty_char));\n+    table.intern(intr, @~\"float\",   ty_float(ty_f));\n+    table.intern(intr, @~\"f32\",     ty_float(ty_f32));\n+    table.intern(intr, @~\"f64\",     ty_float(ty_f64));\n+    table.intern(intr, @~\"int\",     ty_int(ty_i));\n+    table.intern(intr, @~\"i8\",      ty_int(ty_i8));\n+    table.intern(intr, @~\"i16\",     ty_int(ty_i16));\n+    table.intern(intr, @~\"i32\",     ty_int(ty_i32));\n+    table.intern(intr, @~\"i64\",     ty_int(ty_i64));\n+    table.intern(intr, @~\"str\",     ty_str);\n+    table.intern(intr, @~\"uint\",    ty_uint(ty_u));\n+    table.intern(intr, @~\"u8\",      ty_uint(ty_u8));\n+    table.intern(intr, @~\"u16\",     ty_uint(ty_u16));\n+    table.intern(intr, @~\"u32\",     ty_uint(ty_u32));\n+    table.intern(intr, @~\"u64\",     ty_uint(ty_u64));\n+\n+    return table;\n+}\n+\n+\n fn namespace_to_str(ns: Namespace) -> ~str {\n     match ns {\n       TypeNS   => ~\"type\",\n@@ -638,6 +649,59 @@ fn namespace_to_str(ns: Namespace) -> ~str {\n     }\n }\n \n+fn Resolver(session: session, lang_items: LanguageItems,\n+            crate: @crate) -> Resolver {\n+\n+    let graph_root = @NameBindings();\n+\n+    (*graph_root).define_module(NoParentLink,\n+                                Some({ crate: 0, node: 0 }),\n+                                crate.span);\n+\n+    let current_module = (*graph_root).get_module();\n+\n+    let self = Resolver {\n+        session: session,\n+        lang_items: copy lang_items,\n+        crate: crate,\n+\n+        // The outermost module has def ID 0; this is not reflected in the\n+        // AST.\n+\n+        graph_root: graph_root,\n+\n+        unused_import_lint_level: unused_import_lint_level(session),\n+\n+        trait_info: new_def_hash(),\n+        structs: new_def_hash(),\n+\n+        unresolved_imports: 0u,\n+\n+        current_module: current_module,\n+        value_ribs: @DVec(),\n+        type_ribs: @DVec(),\n+        label_ribs: @DVec(),\n+\n+        xray_context: NoXray,\n+        current_trait_refs: None,\n+\n+        self_atom: syntax::parse::token::special_idents::self_,\n+        primitive_type_table: @PrimitiveTypeTable(session.\n+                                                  parse_sess.interner),\n+\n+        namespaces: ~[ ModuleNS, TypeNS, ValueNS ],\n+\n+        def_map: int_hash(),\n+        export_map: int_hash(),\n+        export_map2: int_hash(),\n+        trait_map: @int_hash(),\n+\n+        intr: session.intr()\n+    };\n+\n+    return self;\n+}\n+\n /// The main resolver class.\n struct Resolver {\n     let session: session;\n@@ -690,48 +754,6 @@ struct Resolver {\n     let export_map2: ExportMap2;\n     let trait_map: TraitMap;\n \n-    new(session: session, lang_items: LanguageItems, crate: @crate) {\n-        self.session = session;\n-        self.lang_items = copy lang_items;\n-        self.crate = crate;\n-\n-        // The outermost module has def ID 0; this is not reflected in the\n-        // AST.\n-\n-        self.graph_root = @NameBindings();\n-        (*self.graph_root).define_module(NoParentLink,\n-                                         Some({ crate: 0, node: 0 }),\n-                                         crate.span);\n-\n-        self.unused_import_lint_level = unused_import_lint_level(session);\n-\n-        self.trait_info = new_def_hash();\n-        self.structs = new_def_hash();\n-\n-        self.unresolved_imports = 0u;\n-\n-        self.current_module = (*self.graph_root).get_module();\n-        self.value_ribs = @DVec();\n-        self.type_ribs = @DVec();\n-        self.label_ribs = @DVec();\n-\n-        self.xray_context = NoXray;\n-        self.current_trait_refs = None;\n-\n-        self.self_atom = syntax::parse::token::special_idents::self_;\n-        self.primitive_type_table = @PrimitiveTypeTable(self.session.\n-                                                        parse_sess.interner);\n-\n-        self.namespaces = ~[ ModuleNS, TypeNS, ValueNS ];\n-\n-        self.def_map = int_hash();\n-        self.export_map = int_hash();\n-        self.export_map2 = int_hash();\n-        self.trait_map = @int_hash();\n-\n-        self.intr = session.intr();\n-    }\n-\n     /// The main name resolution procedure.\n     fn resolve(@self, this: @Resolver) {\n         self.build_reduced_graph(this);"}, {"sha": "3eef274e9d667d32f47e0edd0e268956887a1f96", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -56,14 +56,19 @@ use option::{is_none, is_some};\n \n struct icx_popper {\n     let ccx: @crate_ctxt;\n-    new(ccx: @crate_ctxt) { self.ccx = ccx; }\n     drop {\n       if self.ccx.sess.count_llvm_insns() {\n           vec::pop(*(self.ccx.stats.llvm_insn_ctxt));\n       }\n     }\n }\n \n+fn icx_popper(ccx: @crate_ctxt) -> icx_popper {\n+    icx_popper {\n+        ccx: ccx\n+    }\n+}\n+\n trait get_insn_ctxt {\n     fn insn_ctxt(s: &str) -> icx_popper;\n }"}, {"sha": "6b3e4063d67a9491668aa8e9f47bc5c2e25fa04e", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -95,10 +95,15 @@ type stats =\n \n struct BuilderRef_res {\n     let B: BuilderRef;\n-    new(B: BuilderRef) { self.B = B; }\n     drop { llvm::LLVMDisposeBuilder(self.B); }\n }\n \n+fn BuilderRef_res(B: BuilderRef) -> BuilderRef_res {\n+    BuilderRef_res {\n+        B: B\n+    }\n+}\n+\n // Crate context.  Every crate we compile has one of these.\n type crate_ctxt = {\n      sess: session::session,\n@@ -485,12 +490,21 @@ struct block_ {\n     // The function context for the function to which this block is\n     // attached.\n     let fcx: fn_ctxt;\n-    new(llbb: BasicBlockRef, parent: Option<block>, -kind: block_kind,\n-        is_lpad: bool, node_info: Option<node_info>, fcx: fn_ctxt) {\n-        // sigh\n-        self.llbb = llbb; self.terminated = false; self.unreachable = false;\n-        self.parent = parent; self.kind = kind; self.is_lpad = is_lpad;\n-        self.node_info = node_info; self.fcx = fcx;\n+}\n+\n+fn block_(llbb: BasicBlockRef, parent: Option<block>, -kind: block_kind,\n+          is_lpad: bool, node_info: Option<node_info>, fcx: fn_ctxt)\n+    -> block_ {\n+\n+    block_ {\n+        llbb: llbb,\n+        terminated: false,\n+        unreachable: false,\n+        parent: parent,\n+        kind: kind,\n+        is_lpad: is_lpad,\n+        node_info: node_info,\n+        fcx: fcx\n     }\n }\n "}, {"sha": "b356a1b7f67fb60e49885926e1cd8e00cf3dbe2f", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -63,6 +63,35 @@ fn get_mode_from_self_type(self_type: ast::self_ty_) -> ast::rmode {\n     }\n }\n \n+fn lookup(fcx: @fn_ctxt,\n+\n+        // In a call `a.b::<X, Y, ...>(...)`:\n+        expr: @ast::expr,        // The expression `a.b`.\n+        self_expr: @ast::expr,   // The expression `a`.\n+        borrow_lb: ast::node_id, // Scope to borrow the expression `a` for.\n+        node_id: ast::node_id,   // The node_id in which to store the type of\n+                                 // `a.b`.\n+        m_name: ast::ident,      // The ident `b`.\n+        self_ty: ty::t,          // The type of `a`.\n+        supplied_tps: ~[ty::t],  // The list of types X, Y, ... .\n+        include_private: bool) -> lookup {\n+\n+    lookup {\n+        fcx: fcx,\n+        expr: expr,\n+        self_expr: self_expr,\n+        borrow_lb: borrow_lb,\n+        node_id: node_id,\n+        m_name: m_name,\n+        self_ty: self_ty,\n+        derefs: 0u,\n+        candidates: DVec(),\n+        candidate_impls: new_def_hash(),\n+        supplied_tps: supplied_tps,\n+        include_private: include_private\n+    }\n+}\n+\n struct lookup {\n     let fcx: @fn_ctxt;\n     let expr: @ast::expr;\n@@ -77,33 +106,6 @@ struct lookup {\n     let supplied_tps: ~[ty::t];\n     let include_private: bool;\n \n-    new(fcx: @fn_ctxt,\n-\n-        // In a call `a.b::<X, Y, ...>(...)`:\n-        expr: @ast::expr,        // The expression `a.b`.\n-        self_expr: @ast::expr,   // The expression `a`.\n-        borrow_lb: ast::node_id, // Scope to borrow the expression `a` for.\n-        node_id: ast::node_id,   // The node_id in which to store the type of\n-                                 // `a.b`.\n-        m_name: ast::ident,      // The ident `b`.\n-        self_ty: ty::t,          // The type of `a`.\n-        supplied_tps: ~[ty::t],  // The list of types X, Y, ... .\n-        include_private: bool) {\n-\n-        self.fcx = fcx;\n-        self.expr = expr;\n-        self.self_expr = self_expr;\n-        self.borrow_lb = borrow_lb;\n-        self.node_id = node_id;\n-        self.m_name = m_name;\n-        self.self_ty = self_ty;\n-        self.derefs = 0u;\n-        self.candidates = DVec();\n-        self.candidate_impls = new_def_hash();\n-        self.supplied_tps = supplied_tps;\n-        self.include_private = include_private;\n-    }\n-\n     // Entrypoint:\n     fn method() -> Option<method_map_entry> {\n         debug!(\"method lookup(m_name=%s, self_ty=%s, %?)\","}, {"sha": "a01b0983e706ad6e4fc23e03d917fd5031effb5f", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -126,10 +126,22 @@ struct CoherenceInfo {\n     // Contains implementations of methods associated with a trait. For these,\n     // the associated trait must be imported at the call site.\n     let extension_methods: hashmap<def_id,@DVec<@Impl>>;\n+}\n+\n+fn CoherenceInfo() -> CoherenceInfo {\n+    CoherenceInfo {\n+        inherent_methods: new_def_hash(),\n+        extension_methods: new_def_hash()\n+    }\n+}\n \n-    new() {\n-        self.inherent_methods = new_def_hash();\n-        self.extension_methods = new_def_hash();\n+fn CoherenceChecker(crate_context: @crate_ctxt) -> CoherenceChecker {\n+    CoherenceChecker {\n+        crate_context: crate_context,\n+        inference_context: new_infer_ctxt(crate_context.tcx),\n+\n+        base_type_def_ids: new_def_hash(),\n+        privileged_implementations: int_hash()\n     }\n }\n \n@@ -147,14 +159,6 @@ struct CoherenceChecker {\n \n     let privileged_implementations: hashmap<node_id,()>;\n \n-    new(crate_context: @crate_ctxt) {\n-        self.crate_context = crate_context;\n-        self.inference_context = new_infer_ctxt(crate_context.tcx);\n-\n-        self.base_type_def_ids = new_def_hash();\n-        self.privileged_implementations = int_hash();\n-    }\n-\n     // Create a mapping containing a MethodInfo for every provided\n     // method in every trait.\n     fn build_provided_methods_map(crate: @crate) {"}, {"sha": "ee941c0ed01574288a6d3e3b4768caf0cdc7b870", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -16,10 +16,15 @@ fn indent<R>(op: fn() -> R) -> R {\n \n struct _indenter {\n     let _i: ();\n-    new(_i: ()) { self._i = (); }\n     drop { debug!(\"<<\"); }\n }\n \n+fn _indenter(_i: ()) -> _indenter {\n+    _indenter {\n+        _i: ()\n+    }\n+}\n+\n fn indenter() -> _indenter {\n     debug!(\">>\");\n     _indenter(())"}, {"sha": "1ed5adfa4a6782796ffa6dea2248710c409e372e", "filename": "src/rustdoc/demo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Frustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdemo.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -113,7 +113,6 @@ mod blade_runner {\n  */\n struct bored {\n   let bored: bool;\n-  new(bored: bool) { self.bored = bored; }\n   drop { log(error, self.bored); }\n }\n "}, {"sha": "3a0d119a091b60f275df7d42c6e6e13a8e7673ef", "filename": "src/test/auxiliary/cci_class.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -7,7 +7,13 @@ struct cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n }\n \n+    fn cat(in_x : uint, in_y : int) -> cat  {\n+        cat {\n+            meows: in_x,\n+            how_hungry: in_y\n+        }\n+    }\n+\n }"}, {"sha": "a6dee67eeb4a5f7d28295cc667b185e7d6d21b47", "filename": "src/test/auxiliary/cci_class_2.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -7,9 +7,14 @@ struct cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n-\n   fn speak() {}\n }\n \n+    fn cat(in_x : uint, in_y : int) -> cat {\n+        cat {\n+            meows: in_x,\n+            how_hungry: in_y\n+        }\n+    }\n+\n }"}, {"sha": "ec32b66680549a50de46e1adccba35a841444d24", "filename": "src/test/auxiliary/cci_class_3.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -7,11 +7,17 @@ struct cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n-\n   fn speak() { self.meows += 1u; }\n   fn meow_count() -> uint { self.meows }\n \n }\n \n+    fn cat(in_x : uint, in_y : int) -> cat {\n+        cat {\n+            meows: in_x,\n+            how_hungry: in_y\n+        }\n+    }\n+\n+\n }"}, {"sha": "78e9a3a599c837d1e42fa50da33f704cce185445", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -15,9 +15,6 @@ struct cat {\n   let mut how_hungry : int;\n   let name : ~str;\n \n-  new(in_x : uint, in_y : int, in_name: ~str)\n-    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n-\n   fn speak() { self.meow(); }\n \n   fn eat() -> bool {\n@@ -33,4 +30,12 @@ struct cat {\n   }\n }\n \n+    fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n+        cat {\n+            meows: in_x,\n+            how_hungry: in_y,\n+            name: in_name\n+        }\n+    }\n+\n }"}, {"sha": "b8b68fc9a51f36fa9c7900933a5582ee4b66c206", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -8,7 +8,13 @@ struct cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n }\n \n+    fn cat(in_x : uint, in_y : int) -> cat {\n+        cat {\n+            meows: in_x,\n+            how_hungry: in_y\n+        }\n+    }\n+\n }\n\\ No newline at end of file"}, {"sha": "9d8d5543cd3776cb352f1fe1ee4ccb36b50d05af", "filename": "src/test/auxiliary/cci_class_6.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -8,14 +8,20 @@ struct cat<U> {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int, -in_info: ~[U])\n-    { self.meows = in_x; self.how_hungry = in_y;\n-      self.info <- in_info; }\n-\n   fn speak<T>(stuff: ~[T]) {\n     self.meows += stuff.len();\n   }\n   fn meow_count() -> uint { self.meows }\n }\n \n+\n+fn cat<U>(in_x : uint, in_y : int, -in_info: ~[U]) -> cat<U> {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y,\n+        info: in_info\n+    }\n+}\n+\n+\n }"}, {"sha": "c12a8d2e92614be3016759504bc87e2378b30acd", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -18,9 +18,6 @@ struct cat : ToStr {\n   let mut how_hungry : int;\n   let name : ~str;\n \n-  new(in_x : uint, in_y : int, in_name: ~str)\n-    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n-\n   fn speak() { self.meow(); }\n \n   fn eat() -> bool {\n@@ -37,4 +34,15 @@ struct cat : ToStr {\n \n   fn to_str() -> ~str { self.name }\n }\n+\n+fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y,\n+        name: in_name\n+    }\n }\n+\n+}\n+\n+"}, {"sha": "ee7d57aa39784c3c9a853d3b6e6d3af855825f7e", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -9,10 +9,15 @@ export context;\n \n struct arc_destruct<T:const> {\n   let _data: int;\n-  new(data: int) { self._data = data; }\n   drop {}\n }\n \n+fn arc_destruct<T: const>(data: int) -> arc_destruct<T> {\n+    arc_destruct {\n+        _data: data\n+    }\n+}\n+\n fn arc<T: const>(_data: T) -> arc_destruct<T> {\n     arc_destruct(0)\n }\n@@ -24,11 +29,15 @@ fn init() -> arc_destruct<context_res> unsafe {\n struct context_res {\n     let ctx : int;\n \n-    new() { self.ctx = 0; }\n-\n     drop { }\n }\n \n+fn context_res() -> context_res {\n+    context_res {\n+        ctx: 0\n+    }\n+}\n+\n type context = arc_destruct<context_res>;\n \n impl context {"}, {"sha": "2193550c6501346ef049f0d7b6ca3f3f115ab329", "filename": "src/test/auxiliary/issue-3012-1.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -7,7 +7,13 @@ export socket_handle;\n \n struct socket_handle {\n     let sockfd: libc::c_int;\n-    new(x: libc::c_int) {self.sockfd = x;}\n     drop { /* c::close(self.sockfd); */ }\n }\n+\n+    fn socket_handle(x: libc::c_int) -> socket_handle {\n+        socket_handle {\n+            sockfd: x\n+        }\n+    }\n+\n }"}, {"sha": "7393ffd42f96ede83fdab26b01784799da84a423", "filename": "src/test/auxiliary/issue2170lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -5,6 +5,11 @@ fn foo(_x: i32) {\n \n struct rsrc {\n   let x: i32;\n-  new(x: i32) { self.x = x; }\n   drop { foo(self.x); }\n+}\n+\n+fn rsrc(x: i32) -> rsrc {\n+    rsrc {\n+        x: x\n+    }\n }\n\\ No newline at end of file"}, {"sha": "a9b87d466f0698ee3bd64526615694b85ee0d4c3", "filename": "src/test/auxiliary/test_comm.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftest_comm.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -29,9 +29,6 @@ fn port<T: send>() -> port<T> {\n \n struct port_ptr<T:send> {\n    let po: *rust_port;\n-   new(po: *rust_port) {\n-    debug!(\"in the port_ptr constructor\");\n-    self.po = po; }\n    drop unsafe {\n     debug!(\"in the port_ptr destructor\");\n        do task::unkillable {\n@@ -51,6 +48,12 @@ struct port_ptr<T:send> {\n   }\n }\n \n+fn port_ptr<T: send>(po: *rust_port) -> port_ptr<T> {\n+    debug!(\"in the port_ptr constructor\");\n+    port_ptr {\n+        po: po\n+    }\n+}\n \n /**\n  * Receive from a port.  If no data is available on the port then the"}, {"sha": "2191ba691ceb2adc37b36cb137654eba524ac3c7", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -42,10 +42,15 @@ enum st {\n \n struct r {\n   let _l: @nillist;\n-  new(l: @nillist) { self._l = l; }\n   drop {}\n }\n \n+fn r(l: @nillist) -> r {\n+    r {\n+        _l: l\n+    }\n+}\n+\n fn recurse_or_fail(depth: int, st: Option<st>) {\n     if depth == 0 {\n         debug!(\"unwinding %.4f\", precise_time_s());"}, {"sha": "5fe738aa7b1fd037888eac557d7d77b631f4f5a8", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -98,7 +98,6 @@ fn reduce(&&word: ~str, get: map_reduce::getter<int>) {\n \n struct box<T> {\n     let mut contents: Option<T>;\n-    new(+x: T) { self.contents = Some(x); }\n \n     fn swap(f: fn(+T) -> T) {\n         let mut tmp = None;\n@@ -113,6 +112,12 @@ struct box<T> {\n     }\n }\n \n+fn box<T>(+x: T) -> box<T> {\n+    box {\n+        contents: Some(x)\n+    }\n+}\n+\n mod map_reduce {\n     export putter;\n     export getter;\n@@ -345,10 +350,6 @@ fn is_word_char(c: char) -> bool {\n struct random_word_reader: word_reader {\n     let mut remaining: uint;\n     let rng: rand::Rng;\n-    new(count: uint) {\n-        self.remaining = count;\n-        self.rng = rand::Rng();\n-    }\n \n     fn read_word() -> Option<~str> {\n         if self.remaining > 0 {\n@@ -359,3 +360,10 @@ struct random_word_reader: word_reader {\n         else { None }\n     }\n }\n+\n+fn random_word_reader(count: uint) -> random_word_reader {\n+    random_word_reader {\n+        remaining: count,\n+        rng: rand::Rng()\n+    }\n+}"}, {"sha": "2fe4e49e0a84ba7fd10d3dddce98f5f8ef1fdcd3", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -6,7 +6,13 @@ struct cat {\n   let how_hungry : int;\n \n   fn speak() { self.meows += 1u; }\n-  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n+}\n+\n+fn cat(in_x : uint, in_y : int) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y\n+    }\n }\n \n fn main() {"}, {"sha": "3ab4a6a72f278d568f2faa50b62a55d13ce7458f", "filename": "src/test/compile-fail/block-must-not-have-result-res.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,7 +1,6 @@\n // error-pattern:mismatched types: expected `()` but found `bool`\n \n struct r {\n-  new() {}\n   drop { true }\n }\n "}, {"sha": "e643cd4ceaaf3d9a75ff8c00b5fd86bb56356bac", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,9 +1,14 @@\n struct defer {\n     x: &[&str];\n-    new(x: &[&str]) { self.x = x; }\n     drop { #error[\"%?\", self.x]; }\n }\n \n+fn defer(x: &r/[&r/str]) -> defer/&r {\n+    defer {\n+        x: x\n+    }\n+}\n+\n fn main() {\n     let _x = defer(~[\"Goodbye\", \"world!\"]); //~ ERROR illegal borrow\n }"}, {"sha": "b0a49db488a8a37d4a7dd513aa4a9b7a05f1d1ec", "filename": "src/test/compile-fail/borrowck-unary-move-2.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,6 +1,13 @@\n struct noncopyable {\n-    i: (); new() { self.i = (); } drop { #error[\"dropped\"]; }\n+    i: (); drop { #error[\"dropped\"]; }\n }\n+\n+fn noncopyable() -> noncopyable {\n+    noncopyable {\n+        i: ()\n+    }\n+}\n+\n enum wrapper = noncopyable;\n \n fn main() {"}, {"sha": "22f63d2e2ce34ce367b1a6ace43b40d052c491eb", "filename": "src/test/compile-fail/cap-clause-illegal-cap.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,6 +1,12 @@\n // error-pattern: copying a noncopyable value\n \n-struct foo { let x: int; new(x: int) { self.x = x; } drop { } }\n+struct foo { let x: int; drop { } }\n+\n+fn foo(x: int) -> foo {\n+    foo {\n+        x: x\n+    }\n+}\n \n fn to_lambda2(b: foo) -> fn@(uint) -> uint {\n     // test case where copy clause specifies a value that is not used"}, {"sha": "5d7eac5fd9c25e69a5e2a37e656de5a6aabedfeb", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -18,9 +18,6 @@ struct cat : noisy {\n   let mut how_hungry : int;\n   let name : str;\n \n-  new(in_x : uint, in_y : int, in_name: str)\n-    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n-\n   fn speak() { self.meow(); }\n \n   fn eat() -> bool {\n@@ -36,6 +33,14 @@ struct cat : noisy {\n   }\n }\n \n+fn cat(in_x : uint, in_y : int, in_name: str) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y,\n+        name: in_name\n+    }\n+}\n+\n fn main() {\n   let nyan : noisy  = cat(0u, 2, \"nyan\") as noisy;\n   nyan.eat();"}, {"sha": "d85a6e578273efe4407c9154bdca1c50d4e3dd05", "filename": "src/test/compile-fail/class-implements-int.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,6 +1,11 @@\n struct cat : int { //~ ERROR trait\n   let meows: uint;\n-  new(in_x : uint) { self.meows = in_x; }\n+}\n+\n+fn cat(in_x : uint) -> cat {\n+    cat {\n+        meows: in_x\n+    }\n }\n \n fn main() {"}, {"sha": "38680d4274d7cd71b097ef7c837f22257a4874a0", "filename": "src/test/compile-fail/class-method-missing.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -5,7 +5,12 @@ trait animal {\n \n struct cat : animal {\n   let meows: uint;\n-  new(in_x : uint) { self.meows = in_x; }\n+}\n+\n+fn cat(in_x : uint) -> cat {\n+    cat {\n+        meows: in_x\n+    }\n }\n \n fn main() {"}, {"sha": "95795bdd18280367e32294c429425736cfc70232", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -9,7 +9,7 @@ struct cat {\n     }\n   }\n \n-  new(in_x : uint) { self.meows = in_x; }\n }\n \n+\n  fn main() { }\n\\ No newline at end of file"}, {"sha": "6192f340121bfdf99467b284f1c61996b1181806", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -2,8 +2,13 @@\n \n struct foo {\n   let i: int;\n-  new(i:int) { self.i = i; }\n   drop {}\n }\n \n+fn foo(i:int) -> foo {\n+    foo {\n+        i: i\n+    }\n+}\n+\n fn main() { let x <- foo(10); let y = x; log(error, x); }"}, {"sha": "191420e5998463b5409286249b2b2d8acf4763ce", "filename": "src/test/compile-fail/issue-2063-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -4,8 +4,8 @@\n struct t { //~ ERROR this type cannot be instantiated\n   let x: x;\n   let to_str: ();\n-  new(x: x) { self.x = x; self.to_str = (); }\n }\n+\n enum x = @t; //~ ERROR this type cannot be instantiated\n \n fn main() {"}, {"sha": "273483415fc1b406aa6851a207ad00716c1d3546", "filename": "src/test/compile-fail/issue-2370-2.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-2370-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-2370-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2370-2.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,7 +1,9 @@\n // error-pattern: type cat cannot be dereferenced\n-struct cat { new() {} }\n+struct cat {\n+    x: ()\n+}\n \n fn main() {\n-  let kitty : cat = cat();\n-  log (error, *kitty);\n+    let kitty : cat = cat { x: () };\n+    log (error, *kitty);\n }\n\\ No newline at end of file"}, {"sha": "dd8de95fdaab4bf85fe70281b497b664ff270db0", "filename": "src/test/compile-fail/issue-2370.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-2370.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-2370.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2370.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,7 +1,9 @@\n // error-pattern: type cat cannot be dereferenced\n-struct cat { new() {} }\n+struct cat {\n+    foo: ()\n+}\n \n fn main() {\n-  let nyan = cat();\n-  log (error, *nyan);\n+    let nyan = cat { foo: () };\n+    log (error, *nyan);\n }\n\\ No newline at end of file"}, {"sha": "3469e9ea53a9816ab2f1928cad88f3b32f1c4e74", "filename": "src/test/compile-fail/issue-2487-b.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,8 +1,6 @@\n struct socket {\n     let sock: int;\n \n-    new() { self.sock = 1; }\n-\n     drop { }\n \n     fn set_identity()  {"}, {"sha": "a24e3bdee36100cec0ee9fb73ac6a6386c642d8b", "filename": "src/test/compile-fail/issue-2509-a.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-2509-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-2509-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2509-a.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,9 +1,5 @@\n struct c { //~ ERROR a struct must have at least one field\n-    new() { }\n }\n \n fn main() {\n-    let a = c();\n-    let x = ~[a];\n-    let _y = x[0];\n }"}, {"sha": "e8323acb56ba537b0e6ea7637da74e46369e40b3", "filename": "src/test/compile-fail/issue-2718-a.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,6 +1,5 @@\n struct send_packet<T: copy> {\n   let p: T;\n-  new(p: T) { self.p = p; }\n }\n \n "}, {"sha": "a879dae38596d8ad408804409b3da67ce0a4b31a", "filename": "src/test/compile-fail/issue-2825-b.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-2825-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-2825-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2825-b.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,14 +1,17 @@\n struct example {\n     let x: int;\n-    new() {\n-        self.x = 1;\n-    }\n     drop {} //~ ERROR First destructor declared\n     drop {\n         debug!(\"Goodbye, cruel world\");\n     }\n }\n \n+fn example() -> example {\n+    example {\n+        x: 1\n+    }\n+}\n+\n fn main(_args: ~[~str]) {\n   let e: example = example();\n }"}, {"sha": "82a76273bd473881bc479f66a56723d866737554", "filename": "src/test/compile-fail/issue-2825.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5e36a997945ddc3964a1fe937bc5390cc5b526c8/src%2Ftest%2Fcompile-fail%2Fissue-2825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e36a997945ddc3964a1fe937bc5390cc5b526c8/src%2Ftest%2Fcompile-fail%2Fissue-2825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2825.rs?ref=5e36a997945ddc3964a1fe937bc5390cc5b526c8", "patch": "@@ -1,13 +0,0 @@\n-struct example {\n-  let x: int;\n-  new() { //~ ERROR First constructor declared here\n-    self.x = 1;\n-  }\n-  new(x_: int) {\n-    self.x = x_;\n-  }\n-}\n-\n-fn main(_args: ~[~str]) {\n-  let e: example = example();\n-}"}, {"sha": "d267aa52bfd0be549664ea30a0b0a8c94fc8d1b9", "filename": "src/test/compile-fail/issue-3021-b.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -8,7 +8,6 @@ fn siphash(k0 : u64) {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture\n            //~^ ERROR unresolved name: k0\n         }\n-        new() { self.v0 = 0; }\n     }\n }\n "}, {"sha": "8254b867130ce56e0597e566a35289040e60965d", "filename": "src/test/compile-fail/lint-non-camel-case-class.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-class.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,10 +1,6 @@\n #[forbid(non_camel_case_types)]\n struct foo { //~ ERROR type, variant, or trait must be camel case\n     let bar: int;\n-\n-    new() {\n-        self.bar = 0;\n-    }\n }\n \n fn main() {"}, {"sha": "a3277db4fcec473e05169543f1e5183e85df2437", "filename": "src/test/compile-fail/liveness-ctor-access-self-with-uninit-fields.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5e36a997945ddc3964a1fe937bc5390cc5b526c8/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-access-self-with-uninit-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e36a997945ddc3964a1fe937bc5390cc5b526c8/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-access-self-with-uninit-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-access-self-with-uninit-fields.rs?ref=5e36a997945ddc3964a1fe937bc5390cc5b526c8", "patch": "@@ -1,11 +0,0 @@\n-struct cat {\n-  let how_hungry : int;\n-  fn meow() {}\n-  new() {\n-     self.meow();\n-     //~^ ERROR use of possibly uninitialized field: `self.how_hungry`\n-  }\n-}\n-\n-fn main() {\n-}"}, {"sha": "405c1a4b57b98cbe533d1aff921ec7d7911b5b1b", "filename": "src/test/compile-fail/liveness-ctor-field-never-init.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e36a997945ddc3964a1fe937bc5390cc5b526c8/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-field-never-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e36a997945ddc3964a1fe937bc5390cc5b526c8/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-field-never-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-field-never-init.rs?ref=5e36a997945ddc3964a1fe937bc5390cc5b526c8", "patch": "@@ -1,7 +0,0 @@\n-struct cat {\n-  let how_hungry : int;\n-  new() {} //~ ERROR field `self.how_hungry` is never initialized\n-}\n-\n-fn main() {\n-}"}, {"sha": "9a846efae4e2b4f3d37e85511d8c07e294083bb6", "filename": "src/test/compile-fail/liveness-ctor-uninit-field.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e36a997945ddc3964a1fe937bc5390cc5b526c8/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e36a997945ddc3964a1fe937bc5390cc5b526c8/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-field.rs?ref=5e36a997945ddc3964a1fe937bc5390cc5b526c8", "patch": "@@ -1,14 +0,0 @@\n-struct cat {\n-  let mut a: int;\n-  let mut b: int;\n-  let mut c: int;\n-\n-  new() {\n-     self.a = 3;\n-     self.b = self.a;\n-     self.a += self.c; //~ ERROR use of possibly uninitialized field: `self.c`\n-  }\n-}\n-\n-fn main() {\n-}"}, {"sha": "041812a575f3a2dbbd720c2eee16a0e831e4ddc2", "filename": "src/test/compile-fail/liveness-ctor-uninit-var.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e36a997945ddc3964a1fe937bc5390cc5b526c8/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e36a997945ddc3964a1fe937bc5390cc5b526c8/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-var.rs?ref=5e36a997945ddc3964a1fe937bc5390cc5b526c8", "patch": "@@ -1,22 +0,0 @@\n-struct cat {\n-  priv {\n-    let mut meows : uint;\n-  }\n-\n-  let how_hungry : int;\n-\n-  fn eat() {\n-    self.how_hungry -= 5;\n-  }\n-\n-  new(in_x : uint, in_y : int) {\n-    let foo;\n-    self.meows = in_x + (in_y as uint);\n-    self.how_hungry = foo; //~ ERROR use of possibly uninitialized variable: `foo`\n-  }\n-}\n-\n-fn main() {\n-  let nyan : cat = cat(52u, 99);\n-  nyan.eat();\n-}"}, {"sha": "656a7c492ebcaa955e528a6d417fb8875b94f582", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -50,10 +50,9 @@ fn f4b() -> int {\n // leave this in here just to trigger compile-fail:\n struct r {\n     let x: ();\n-    new() { self.x = (); }\n     drop {}\n }\n fn main() {\n-    let x = r();\n+    let x = r { x: () };\n     fn@() { copy x; }; //~ ERROR copying a noncopyable value\n }"}, {"sha": "5ebbf63a3cfb50f534f89d2cc744846cb202af65", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -10,7 +10,13 @@ struct cat {\n     self.how_hungry -= 5;\n   }\n \n-  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n+}\n+\n+fn cat(in_x : uint, in_y : int) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y\n+    }\n }\n \n fn main() {"}, {"sha": "da79c9cb0a65945c251383d4706e06d537474527", "filename": "src/test/compile-fail/mutable-class-fields.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -6,7 +6,13 @@ struct cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n+}\n+\n+fn cat(in_x : uint, in_y : int) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y\n+    }\n }\n \n fn main() {"}, {"sha": "6ee7987343543a711157f2594cd7a8c42bfc6dc2", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,9 +1,14 @@\n fn main() {\n     struct foo {\n       let _x: comm::Port<()>;\n-      new(x: comm::Port<()>) { self._x = x; }\n       drop {}\n     }\n+\n+    fn foo(x: comm::Port<()>) -> foo {\n+        foo {\n+            _x: x\n+        }\n+    }\n    \n     let x = ~mut Some(foo(comm::Port()));\n "}, {"sha": "7e3545fb89ba2ed503fb67905eba026616f264d6", "filename": "src/test/compile-fail/non-const.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-const.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -4,16 +4,26 @@ fn foo<T: const>(_x: T) { }\n \n struct r {\n   let x:int;\n-  new(x:int) { self.x = x; }\n   drop {}\n }\n \n+fn r(x:int) -> r {\n+    r {\n+        x: x\n+    }\n+}\n+\n struct r2 {\n   let x:@mut int;\n-  new(x:@mut int) { self.x = x; }\n   drop {}\n }\n \n+fn r2(x:@mut int) -> r2 {\n+    r2 {\n+        x: x\n+    }\n+}\n+\n fn main() {\n     foo({f: 3});\n     foo({mut f: 3}); //~ ERROR missing `const`"}, {"sha": "2e8c3a6a2138ae931d990c3604e744baae012493", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -4,14 +4,25 @@\n // copied\n struct bar {\n   let x: int;\n-  new(x:int) {self.x = x;}\n   drop {}\n }\n \n+fn bar(x:int) -> bar {\n+    bar {\n+        x: x\n+    }\n+}\n+\n struct foo {\n   let i: int;\n   let j: bar;\n-  new(i:int) { self.i = i; self.j = bar(5); }\n+}\n+\n+fn foo(i:int) -> foo {\n+    foo {\n+        i: i,\n+        j: bar(5)\n+    }\n }\n \n fn main() { let x <- foo(10); let y = x; log(error, x); }"}, {"sha": "d2b0cabf4a98fd35bd94bbd92ebff7ec380fb813", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -2,10 +2,15 @@\n \n struct r {\n   let i: @mut int;\n-  new(i: @mut int) { self.i = i; }\n   drop { *(self.i) = *(self.i) + 1; }\n }\n \n+fn r(i: @mut int) -> r {\n+    r {\n+        i: i\n+    }\n+}\n+\n fn main() {\n     let i = @mut 0;\n     {"}, {"sha": "52236642c870cb1e969de312cdf0d9a2f7b69c21", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -7,7 +7,13 @@ struct cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n+}\n+\n+fn cat(in_x : uint, in_y : int) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y\n+    }\n }\n \n fn main() {"}, {"sha": "577367e673bd61e361a8a644c0d20834355f0943", "filename": "src/test/compile-fail/record-with-resource.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -2,10 +2,15 @@\n \n struct my_resource {\n   let x: int;\n-  new(x: int) { self.x = x; }\n   drop { log(error, self.x); }\n }\n \n+fn my_resource(x: int) -> my_resource {\n+    my_resource {\n+        x: x\n+    }\n+}\n+\n fn main() {\n     {\n         let a = {x: 0, y: my_resource(20)};"}, {"sha": "d6ca910bc93a1b7a40b87e6cac963b85fe790971", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,10 +1,6 @@\n struct dog {\n     let mut cats_chased: uint;\n \n-    new() {\n-        self.cats_chased = 0u;\n-    }\n-\n     fn chase_cat() {\n         let p: &static/mut uint = &mut self.cats_chased; //~ ERROR illegal borrow\n         *p += 1u;\n@@ -16,6 +12,12 @@ struct dog {\n     }\n }\n \n+fn dog() -> dog {\n+    dog {\n+        cats_chased: 0u\n+    }\n+}\n+\n fn main() {\n     let d = dog();\n     d.chase_cat();"}, {"sha": "145cc0f722dca3d33a5a9f27df80f403e91ac9ea", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,10 +1,6 @@\n struct dog {\n     let mut food: uint;\n \n-    new() {\n-        self.food = 0u;\n-    }\n-\n     fn chase_cat() {\n         for uint::range(0u, 10u) |_i| {\n             let p: &static/mut uint = &mut self.food; //~ ERROR illegal borrow"}, {"sha": "4e272e80663b9581cd47868e758476a5c7ca14f5", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -4,7 +4,7 @@\n \n enum an_enum = &int;\n trait a_trait { fn foo() -> &self/int; }\n-struct a_class { let x:&self/int; new(x:&self/int) { self.x = x; } }\n+struct a_class { let x:&self/int; }\n \n fn a_fn1(e: an_enum/&a) -> an_enum/&b {\n     return e; //~ ERROR mismatched types: expected `an_enum/&b` but found `an_enum/&a`"}, {"sha": "ed2be33cb23c1444271122580b1b8ce9d1e7b853", "filename": "src/test/compile-fail/regions-in-rsrcs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,18 +1,15 @@\n struct yes0 {\n   let x: &uint;\n-  new(x: &uint) { self.x = x; }\n   drop {}\n }\n \n struct yes1 {\n   let x: &self/uint;\n-  new(x: &self/uint) { self.x = x; }\n   drop {}\n }\n \n struct yes2 {\n   let x: &foo/uint; //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n-  new(x: &foo/uint) { self.x = x; } //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n   drop {}\n }\n "}, {"sha": "d3e5c4aea3b3fb963ae85d40fdfa77ebf499c8b1", "filename": "src/test/compile-fail/tps-invariant-class.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,8 +1,10 @@\n struct box_impl<T> {\n     let mut f: T;\n+}\n \n-    new(f: T) {\n-        self.f = f;\n+fn box_impl<T>(f: T) -> box_impl<T> {\n+    box_impl {\n+        f: f\n     }\n }\n "}, {"sha": "e3dd18092d70294fbba4554d46faae7ff50a4598", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -2,12 +2,11 @@\n \n struct r {\n   let b:bool;\n-  new(b: bool) { self.b = b; }\n   drop {}\n }\n \n fn main() {\n-    let i <- ~r(true);\n+    let i <- ~r { b: true };\n     let j = i;\n     log(debug, i);\n }\n\\ No newline at end of file"}, {"sha": "d038699651543f03320ceb607f5adacc98e50308", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -2,7 +2,6 @@\n \n struct r {\n   let i: @mut int;\n-  new(i: @mut int) { self.i = i; }\n   drop { *(self.i) = *(self.i) + 1; }\n }\n \n@@ -13,8 +12,8 @@ fn f<T>(+i: ~[T], +j: ~[T]) {\n fn main() {\n     let i1 = @mut 0;\n     let i2 = @mut 1;\n-    let r1 <- ~[~r(i1)];\n-    let r2 <- ~[~r(i2)];\n+    let r1 <- ~[~r { i: i1 }];\n+    let r2 <- ~[~r { i: i2 }];\n     f(r1, r2);\n     log(debug, (r2, *i1));\n     log(debug, (r1, *i2));"}, {"sha": "66bc0ae544edd615aae21396ff4f295ff116a280", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -4,7 +4,13 @@\n struct foo {\n   let i: int;\n   let j: @~str;\n-  new(i:int, j: @~str) { self.i = i; self.j = j; }\n+}\n+\n+fn foo(i:int, j: @~str) -> foo {\n+    foo {\n+        i: i,\n+        j: j\n+    }\n }\n \n fn main() {"}, {"sha": "c501ea6d7b8230d5d6d20523c92bbc33f002d53a", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -22,7 +22,6 @@ fn getbig_call_c_and_fail(i: int) {\n \n struct and_then_get_big_again {\n   let x:int;\n-  new(x:int) {self.x = x;}\n   drop {\n     fn getbig(i: int) {\n         if i != 0 {\n@@ -33,6 +32,12 @@ struct and_then_get_big_again {\n   }\n }\n \n+fn and_then_get_big_again(x:int) -> and_then_get_big_again {\n+    and_then_get_big_again {\n+        x: x\n+    }\n+}\n+\n fn main() {\n     do task::spawn {\n         let r = and_then_get_big_again(4);"}, {"sha": "1db2a8b1a982a4ff08b17e5ad6b2fc54483e0e05", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -15,7 +15,6 @@ fn getbig_and_fail(&&i: int) {\n \n struct and_then_get_big_again {\n   let x:int;\n-  new(x:int) {self.x = x;}\n   drop {\n     fn getbig(i: int) {\n         if i != 0 {\n@@ -26,6 +25,12 @@ struct and_then_get_big_again {\n   }\n }\n \n+fn and_then_get_big_again(x:int) -> and_then_get_big_again {\n+    and_then_get_big_again {\n+        x: x\n+    }\n+}\n+\n fn main() {\n     do task::spawn {\n         getbig_and_fail(400);"}, {"sha": "2424db84521d4bfb95502772103e278aa88b8b16", "filename": "src/test/run-fail/morestack4.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack4.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -15,10 +15,15 @@ fn getbig_and_fail(&&i: int) {\n \n struct and_then_get_big_again {\n   let x:int;\n-  new(x:int) {self.x = x;}\n   drop {}\n }\n \n+fn and_then_get_big_again(x:int) -> and_then_get_big_again {\n+    and_then_get_big_again {\n+        x: x\n+    }\n+}\n+\n fn main() {\n     do task::spawn {\n         getbig_and_fail(1);"}, {"sha": "342be7edb1a6feef080e76d20dad93c3f784f1d1", "filename": "src/test/run-fail/rt-set-exit-status-fail2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -8,7 +8,12 @@ struct r {\n   drop {\n     os::set_exit_status(50);\n   }\n-  new(x:int) {self.x = x;}\n+}\n+\n+fn r(x:int) -> r {\n+    r {\n+        x: x\n+    }\n }\n \n fn main() {"}, {"sha": "dcf660b8f44da480bfc3a61068886a2304c88006", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -6,12 +6,17 @@ fn failfn() {\n \n struct r {\n   let v: *int;\n-  new(v: *int) { self.v = v; }\n   drop unsafe {\n     let _v2: ~int = unsafe::reinterpret_cast(&self.v);\n   }\n }\n \n+fn r(v: *int) -> r {\n+    r {\n+        v: v\n+    }\n+}\n+\n fn main() unsafe {\n     let i1 = ~0;\n     let i1p = unsafe::reinterpret_cast(&i1);"}, {"sha": "1cad6feef88fdda6530eea45a87d185e61084ad4", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -80,7 +80,13 @@ extern mod test {\n struct p {\n   let mut x: int;\n   let mut y: int;\n-  new(x: int, y: int) { self.x = x; self.y = y; }\n+}\n+\n+fn p(x: int, y: int) -> p {\n+    p {\n+        x: x,\n+        y: y\n+    }\n }\n \n impl p : cmp::Eq {"}, {"sha": "6d49bd26b4ccae4cf5293e63a4ce91af92712fce", "filename": "src/test/run-pass/boxed-class-type-substitution.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -9,9 +9,11 @@ fn empty<T>() -> Tree<T> { fail }\n \n struct Box {\n     let tree: Tree<@Box>;\n+}\n \n-    new() {\n-        self.tree = empty();\n+fn Box() -> Box {\n+    Box {\n+        tree: empty()\n     }\n }\n "}, {"sha": "0c89ecaf916dc38f2b8b87c2cd70abc6f6c54612", "filename": "src/test/run-pass/class-attributes-1.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,11 +1,12 @@\n // pp-exact - Make sure we actually print the attributes\n \n struct cat {\n-    #[cat_maker]\n-    new(name: ~str) { self.name = name; }\n     #[cat_dropper]\n     drop { error!(\"%s landed on hir feet\",self.name); }\n     name: ~str,\n }\n \n+#[cat_maker]\n+fn cat(name: ~str) -> cat { cat{name: name,} }\n+\n fn main() { let _kitty = cat(~\"Spotty\"); }"}, {"sha": "c5758ad1ecc0b3ebc5f7b7d00a92bda613be014a", "filename": "src/test/run-pass/class-attributes-2.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,17 +1,22 @@\n struct cat {\n   let name: ~str;\n-  #[cat_maker]\n-  /**\n-     Maybe it should technically be a kitten_maker.\n-  */\n-  new(name: ~str) { self.name = name; }\n   #[cat_dropper]\n   /**\n      Actually, cats don't always land on their feet when you drop them.\n   */\n   drop { error!(\"%s landed on hir feet\", self.name); }\n }\n \n+#[cat_maker]\n+/**\n+Maybe it should technically be a kitten_maker.\n+*/\n+fn cat(name: ~str) -> cat {\n+    cat {\n+        name: name\n+    }\n+}\n+\n fn main() {\n   let _kitty = cat(~\"Spotty\");\n }"}, {"sha": "391452f58274fc9ce8bd791e804097e76e61deca", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -21,11 +21,16 @@ struct dog : noisy {\n \n   let volume : @mut int;\n \n-  new() { self.volume = @mut 0; self.barks = @mut 0u; }\n-\n   fn speak() -> int { self.bark() }\n }\n \n+fn dog() -> dog {\n+    dog {\n+        volume: @mut 0,\n+        barks: @mut 0u\n+    }\n+}\n+\n struct cat : noisy {\n   priv {\n     let meows : @mut uint;\n@@ -42,14 +47,19 @@ struct cat : noisy {\n   let how_hungry : @mut int;\n   let name : ~str;\n \n-  new(in_x : uint, in_y : int, in_name: ~str)\n-    { self.meows = @mut in_x; self.how_hungry = @mut in_y;\n-      self.name = in_name; }\n-\n   fn speak() -> int { self.meow() as int }\n   fn meow_count() -> uint { *self.meows }\n }\n \n+fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n+    cat {\n+        meows: @mut in_x,\n+        how_hungry: @mut in_y,\n+        name: in_name\n+    }\n+}\n+\n+\n fn annoy_neighbors<T: noisy>(critter: T) {\n   for uint::range(0u, 10u) |i| { critter.speak(); }\n }"}, {"sha": "c88f3eb378255f0e8318868d5599e9b10079a324", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -17,9 +17,6 @@ struct cat : noisy {\n   let mut how_hungry : int;\n   let name : ~str;\n \n-  new(in_x : uint, in_y : int, in_name: ~str)\n-    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n-\n   fn speak() { self.meow(); }\n \n   fn eat() -> bool {\n@@ -35,6 +32,15 @@ struct cat : noisy {\n   }\n }\n \n+fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y,\n+        name: in_name\n+    }\n+}\n+\n+\n fn main() {\n   let nyan : noisy  = cat(0u, 2, ~\"nyan\") as noisy;\n   nyan.speak();"}, {"sha": "5637e31825a5bb914fe0388256654442582183be", "filename": "src/test/run-pass/class-dtor.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-dtor.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,11 +1,14 @@\n struct cat {\n   let done : extern fn(uint);\n   let meows : uint;\n-  new(done: extern fn(uint)) {\n-    self.meows = 0u;\n-    self.done = done;\n-  }\n   drop { self.done(self.meows); }\n }\n \n+fn cat(done: extern fn(uint)) -> cat {\n+    cat {\n+        meows: 0u,\n+        done: done\n+    }\n+}\n+\n fn main() {}"}, {"sha": "cf7a97e3873ad0828f46c98ab8b261d97d4e8450", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -10,8 +10,15 @@ mod kitty {\n     let name: ~str;\n \n     fn get_name() -> ~str {  self.name }\n-    new(in_name: ~str) { self.name = in_name; self.meows = 0u; }\n   }\n+\n+    fn cat(in_name: ~str) -> cat {\n+        cat {\n+            name: in_name,\n+            meows: 0u\n+        }\n+    }\n+\n }\n \n fn main() {"}, {"sha": "dee9e9c79deed75245f27f1cf831fdea0d3db81d", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -29,9 +29,6 @@ struct cat<T: copy> : map<int, T> {\n   let mut how_hungry : int;\n   let name : T;\n \n-  new(in_x : int, in_y : int, in_name: T)\n-    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n-\n   fn speak() { self.meow(); }\n \n   fn eat() -> bool {\n@@ -96,6 +93,13 @@ struct cat<T: copy> : map<int, T> {\n   fn clear() { }\n }\n \n+fn cat<T: copy>(in_x : int, in_y : int, in_name: T) -> cat<T> {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y,\n+        name: in_name\n+    }\n+}\n \n fn main() {\n   let nyan : cat<~str> = cat(0, 2, ~\"nyan\");"}, {"sha": "d7e288f7aa4fde61056c24191bb9b7fdaacaa54b", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -18,9 +18,6 @@ struct cat : noisy {\n   let mut how_hungry : int;\n   let name : ~str;\n \n-  new(in_x : uint, in_y : int, in_name: ~str)\n-    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n-\n   fn speak() { self.meow(); }\n \n   fn eat() -> bool {\n@@ -36,6 +33,15 @@ struct cat : noisy {\n   }\n }\n \n+fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y,\n+        name: in_name\n+    }\n+}\n+\n+\n fn main() {\n   let nyan = cat(0u, 2, ~\"nyan\");\n   nyan.eat();"}, {"sha": "7641f00d9191a5c0a4f9b1f0d50f83b8da7e8361", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -17,9 +17,6 @@ struct cat : noisy {\n   let mut how_hungry : int;\n   let name : ~str;\n \n-  new(in_x : uint, in_y : int, in_name: ~str)\n-    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n-\n   fn speak() { self.meow(); }\n \n   fn eat() -> bool {\n@@ -35,6 +32,15 @@ struct cat : noisy {\n   }\n }\n \n+fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y,\n+        name: in_name\n+    }\n+}\n+\n+\n fn make_speak<C: noisy>(c: C) {\n     c.speak();\n }"}, {"sha": "dbdb9e6a6884dbb0c295db304339a05b1aa6ba45", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -5,12 +5,17 @@ struct cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n-\n   fn speak() { self.meows += 1u; }\n   fn meow_count() -> uint { self.meows }\n }\n \n+fn cat(in_x : uint, in_y : int) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y\n+    }\n+}\n+\n fn main() {\n   let nyan : cat = cat(52u, 99);\n   let kitty = cat(1000u, 2);"}, {"sha": "f73cd61937bdd1ee243edad1d838d2d0b3f9befd", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -6,16 +6,20 @@ struct cat<U> {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int, -in_info: ~[U])\n-    { self.meows = in_x; self.how_hungry = in_y;\n-      self.info <- in_info; }\n-\n   fn speak<T>(stuff: ~[T]) {\n     self.meows += stuff.len();\n   }\n   fn meow_count() -> uint { self.meows }\n }\n \n+fn cat<U>(in_x : uint, in_y : int, -in_info: ~[U]) -> cat<U> {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y,\n+        info: move in_info\n+    }\n+}\n+\n fn main() {\n   let nyan : cat<int> = cat::<int>(52u, 99, ~[9]);\n   let kitty = cat(1000u, 2, ~[~\"tabby\"]);"}, {"sha": "6b8200a5f799a77e6fea160ee0cda9e014679b87", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -17,9 +17,6 @@ struct cat {\n   let mut how_hungry : int;\n   let name : ~str;\n \n-  new(in_x : uint, in_y : int, in_name: ~str)\n-    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n-\n   fn speak() { self.meow(); }\n \n   fn eat() -> bool {\n@@ -35,6 +32,14 @@ struct cat {\n   }\n }\n \n+fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y,\n+        name: in_name\n+    }\n+}\n+\n impl cat: ToStr {\n   fn to_str() -> ~str { self.name }\n }"}, {"sha": "a0a93bf9c46b02846d3e9c5be82041e8f8c96e6c", "filename": "src/test/run-pass/class-str-field.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-str-field.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -2,8 +2,12 @@ struct cat {\n \n   let name : ~str;\n \n-  new(in_name: ~str)\n-    { self.name = in_name; }\n+}\n+\n+fn cat(in_name: ~str) -> cat {\n+    cat {\n+        name: in_name\n+    }\n }\n \n fn main() {"}, {"sha": "504a3985e883d57be62fed41d33d857b28cbee4f", "filename": "src/test/run-pass/class-typarams.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-typarams.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -5,14 +5,20 @@ struct cat<U> {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n-\n   fn speak() {\n     self.meows += 1u;\n   }\n   fn meow_count() -> uint { self.meows }\n }\n \n+fn cat<U>(in_x : uint, in_y : int) -> cat<U> {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y\n+    }\n+}\n+\n+\n fn main() {\n   let _nyan : cat<int> = cat::<int>(52u, 99);\n   //  let kitty = cat(1000u, 2);"}, {"sha": "4d47c21281e1c5dffa7cc9d74b6431debb8f6733", "filename": "src/test/run-pass/classes-self-referential.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,7 +1,10 @@\n struct kitten {\n     let cat: Option<cat>;\n-    new(cat: Option<cat>) {\n-       self.cat = cat;\n+}\n+\n+fn kitten(cat: Option<cat>) -> kitten {\n+    kitten {\n+        cat: cat\n     }\n }\n "}, {"sha": "e2a39d41d571929db9ffba8dd4b3f6247f8447d5", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -5,11 +5,16 @@ struct cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n-\n   fn speak() {}\n }\n \n+fn cat(in_x : uint, in_y : int) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y\n+    }\n+}\n+\n fn main() {\n   let nyan : cat = cat(52u, 99);\n   let kitty = cat(1000u, 2);"}, {"sha": "61ca9ba09332a3a0124803b8b1eace7908da620e", "filename": "src/test/run-pass/classes-simple.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -5,7 +5,13 @@ struct cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n+}\n+\n+fn cat(in_x : uint, in_y : int) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y\n+    }\n }\n \n fn main() {"}, {"sha": "fdbe4a66c996ffac22757b6a9818a23c7f9611ec", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -13,9 +13,6 @@ struct cat {\n   let mut how_hungry : int;\n   let name : ~str;\n \n-  new(in_x : uint, in_y : int, in_name: ~str)\n-    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n-\n   fn speak() { self.meow(); }\n \n   fn eat() -> bool {\n@@ -31,6 +28,14 @@ struct cat {\n   }\n }\n \n+fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y,\n+        name: in_name\n+    }\n+}\n+\n fn main() {\n   let nyan = cat(0u, 2, ~\"nyan\");\n   nyan.eat();"}, {"sha": "3d85874b0630b57fc4f9dfc1348e6fcc6f8e1bc9", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -27,12 +27,23 @@ enum tg { bar, }\n #[cfg(bogus)]\n struct r {\n   let i: int;\n-  new(i:int) { self.i = i; }\n+}\n+\n+#[cfg(bogus)]\n+fn r(i:int) -> r {\n+    r {\n+        i: i\n+    }\n }\n \n struct r {\n   let i: int;\n-  new(i:int) { self.i = i; }\n+}\n+\n+fn r(i:int) -> r {\n+    r {\n+        i: i\n+    }\n }\n \n #[cfg(bogus)]"}, {"sha": "8872abe1b21bd4426c89c877eaa4d09661275f5a", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -34,9 +34,13 @@ fn select_based_on_unit_circle<T>(\n \n struct thing {\n     x: {mut a: @int};\n-    new (x: {mut a: @int}) { self.x = copy x; }\n }\n \n+fn thing(x: {mut a: @int}) -> thing {\n+    thing {\n+        x: copy x\n+    }\n+}\n \n impl thing {\n     fn foo(@self) -> int { *self.x.a }"}, {"sha": "d124748c56c2d05ef61a5f655ea506cfd43ca49b", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -3,12 +3,15 @@\n \n struct r {\n   let i: @mut int;\n-  new(i: @mut int) {\n-    self.i = i;\n-  }\n   drop { *(self.i) = *(self.i) + 1; }\n }\n \n+fn r(i: @mut int) -> r {\n+    r {\n+        i: i\n+    }\n+}\n+\n fn test_box() {\n     let i = @mut 0;\n     {"}, {"sha": "dcd460cdea95e80b24ad4a4c07fffe4d57a5abc3", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -3,11 +3,16 @@ trait clam<A: copy> {\n }\n struct foo<A: copy> : clam<A> {\n   let x: A;\n-  new(b: A) { self.x = b; }\n   fn chowder(y: A) {\n   }\n }\n \n+fn foo<A: copy>(b: A) -> foo<A> {\n+    foo {\n+        x: b\n+    }\n+}\n+\n fn f<A: copy>(x: clam<A>, a: A) {\n   x.chowder(a);\n }"}, {"sha": "fbc7a877c8189fc3e897863aedf4e30c9c88a14a", "filename": "src/test/run-pass/issue-2311-2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,10 +1,15 @@\n trait clam<A: copy> { }\n struct foo<A: copy> {\n   let x: A;\n-  new(b: A) { self.x = b; }\n    fn bar<B,C:clam<A>>(c: C) -> B {\n      fail;\n    }\n }\n \n+fn foo<A: copy>(b: A) -> foo<A> {\n+    foo {\n+        x: b\n+    }\n+}\n+\n fn main() { }"}, {"sha": "7ddbf1e1534a678d1e995de269537bd22e6c4a0e", "filename": "src/test/run-pass/issue-2445-b.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,11 +1,15 @@\n struct c1<T: copy> {\n   let x: T;\n-  new(x: T) {self.x = x;}\n-\n     fn f1(x: int) {\n     }\n }\n \n+fn c1<T: copy>(x: T) -> c1<T> {\n+    c1 {\n+        x: x\n+    }\n+}\n+\n impl<T: copy> c1<T> {\n     fn f2(x: int) {\n     }"}, {"sha": "e9d08b579da0830c4091f0124f40f26657ac979b", "filename": "src/test/run-pass/issue-2445.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -2,11 +2,15 @@ use dvec::DVec;\n \n struct c1<T: copy> {\n   let x: T;\n-  new(x: T) {self.x = x;}\n-\n     fn f1(x: T) {}\n }\n \n+fn c1<T: copy>(x: T) -> c1<T> {\n+    c1 {\n+        x: x\n+    }\n+}\n+\n impl<T: copy> c1<T> {\n     fn f2(x: T) {}\n }"}, {"sha": "837d6f4764cb003a87d478d372d17b3b32e79c24", "filename": "src/test/run-pass/issue-2487-a.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,8 +1,6 @@\n struct socket {\n     let sock: int;\n \n-    new() { self.sock = 1; }\n-\n     drop { }\n \n     fn set_identity()  {\n@@ -12,6 +10,12 @@ struct socket {\n     }\n }\n \n+fn socket() -> socket {\n+    socket {\n+        sock: 1\n+    }\n+}\n+\n fn closure(f: fn()) { f() }\n \n fn setsockopt_bytes(_sock: int) { }"}, {"sha": "fb0e5d1939e30742e926ce8c10188a84d4df6e87", "filename": "src/test/run-pass/issue-2502.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2502.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,13 +1,15 @@\n struct font {\n     let fontbuf: &self/~[u8];\n \n-    new(fontbuf: &self/~[u8]) {\n-        self.fontbuf = fontbuf;\n-    }\n-\n     fn buf() -> &self/~[u8] {\n         self.fontbuf\n     }\n }\n \n+fn font(fontbuf: &r/~[u8]) -> font/&r {\n+    font {\n+        fontbuf: fontbuf\n+    }\n+}\n+\n fn main() { }"}, {"sha": "93e4d13f1881c58156b883343ea0033e400e2d8f", "filename": "src/test/run-pass/issue-2550.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2550.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,8 +1,11 @@\n struct C {\n     let x: uint;\n \n-    new(x: uint) {\n-        self.x = x;\n+}\n+\n+fn C(x: uint) -> C {\n+    C {\n+        x: x\n     }\n }\n "}, {"sha": "b0cf990ce71e58092f07279b3e5703b48bc082c0", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,6 +1,11 @@\n struct cat {\n     let mut meow: fn@();\n-    new() { self.meow = fn@() { error!(\"meow\"); };}\n+}\n+\n+fn cat() -> cat {\n+    cat {\n+        meow: fn@() { error!(\"meow\"); }\n+    }\n }\n \n type kitty_info = {kitty: cat};"}, {"sha": "79e0c3813de21f46e3d33e05d8e89bff8697d20c", "filename": "src/test/run-pass/issue-2708.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2708.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -3,15 +3,17 @@ struct Font {\n     let cairo_font: uint;\n     let font_dtor: uint;\n \n-    new() {\n-        self.fontbuf = 0;\n-        self.cairo_font = 0;\n-        self.font_dtor = 0;\n-    }\n-\n     drop { }\n }\n \n+fn Font() -> Font {\n+    Font {\n+        fontbuf: 0,\n+        cairo_font: 0,\n+        font_dtor: 0\n+    }\n+}\n+\n fn main() {\n     let _f = @Font();\n }"}, {"sha": "7af8d3672c2999e61804bc3fc2f06ffba9292d02", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -137,7 +137,6 @@ mod pipes {\n \n     struct send_packet<T: send> {\n         let mut p: Option<*packet<T>>;\n-        new(p: *packet<T>) { self.p = Some(p); }\n         drop {\n             if self.p != None {\n                 let mut p = None;\n@@ -152,9 +151,14 @@ mod pipes {\n         }\n     }\n \n+    fn send_packet<T: send>(p: *packet<T>) -> send_packet<T> {\n+        send_packet {\n+            p: Some(p)\n+        }\n+    }\n+\n     struct recv_packet<T: send> {\n         let mut p: Option<*packet<T>>;\n-        new(p: *packet<T>) { self.p = Some(p); }\n         drop {\n             if self.p != None {\n                 let mut p = None;\n@@ -169,6 +173,12 @@ mod pipes {\n         }\n     }\n \n+    fn recv_packet<T: send>(p: *packet<T>) -> recv_packet<T> {\n+        recv_packet {\n+            p: Some(p)\n+        }\n+    }\n+\n     fn entangle<T: send>() -> (send_packet<T>, recv_packet<T>) {\n         let p = packet();\n         (send_packet(p), recv_packet(p))"}, {"sha": "6c99cb0ad2a728fa458a4da97cb5361b88c44173", "filename": "src/test/run-pass/issue-2735-2.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,12 +1,15 @@\n // This test should behave exactly like issue-2735-3\n struct defer {\n     let b: &mut bool;\n-    new(b: &mut bool) {\n-        self.b = b;\n-    }   \n     drop { *(self.b) = true; }\n }\n \n+fn defer(b: &r/mut bool) -> defer/&r {\n+    defer {\n+        b: b\n+    }\n+}\n+\n fn main() {\n     let mut dtor_ran = false;\n     let _  = defer(&mut dtor_ran);"}, {"sha": "4d06365e26f31d91a591f3cb763a4fe3f070583b", "filename": "src/test/run-pass/issue-2735-3.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,12 +1,15 @@\n // This test should behave exactly like issue-2735-2\n struct defer {\n     let b: &mut bool;\n-    new(b: &mut bool) {\n-        self.b = b;\n-    }   \n     drop { *(self.b) = true; }\n }\n \n+fn defer(b: &r/mut bool) -> defer/&r {\n+    defer {\n+        b: b\n+    }\n+}\n+\n fn main() {\n     let mut dtor_ran = false;\n     defer(&mut dtor_ran);"}, {"sha": "1a552946676aed023ce33403d6f363c3288c2636", "filename": "src/test/run-pass/issue-2748-a.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,8 +1,11 @@\n struct CMap {\n     let buf: &[u8];\n \n-    new(buf: &self/[u8]) {\n-        self.buf = buf;\n+}\n+\n+fn CMap(buf: &r/[u8]) -> CMap/&r {\n+    CMap {\n+        buf: buf\n     }\n }\n "}, {"sha": "ddcc0360d8b5497702889129e460510e0237e82d", "filename": "src/test/run-pass/issue-2936.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-2936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2936.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -8,12 +8,17 @@ fn foo<T, U: bar<T>>(b: U) -> T {\n \n struct cbar : bar<int> {\n     x: int;\n-    new(x: int) { self.x = x; }\n     fn get_bar() -> int {\n         self.x\n     }\n }\n \n+fn cbar(x: int) -> cbar {\n+    cbar {\n+        x: x\n+    }\n+}\n+\n fn main() {\n     let x: int = foo::<int, cbar>(cbar(5));\n     assert x == 5;"}, {"sha": "358f0a82a6e67b5363cbfc00d8ae35ef9a325028", "filename": "src/test/run-pass/issue-3220.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-3220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-3220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3220.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,4 +1,9 @@\n-struct thing { x: int; new () { self.x = 0; } drop { } }\n+struct thing { x: int; drop { } }\n+fn thing() -> thing {\n+    thing {\n+        x: 0\n+    }\n+}\n impl thing { fn f(self) {} }\n \n fn main() {"}, {"sha": "dd12d391abd8853339c22e2a38eb78576c1d061e", "filename": "src/test/run-pass/issue-979.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fissue-979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-979.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,11 +1,14 @@\n struct r {\n   let b: @mut int;\n-  new(b: @mut int) {\n-    self.b = b;\n-  }\n   drop { *(self.b) += 1; }\n }\n \n+fn r(b: @mut int) -> r {\n+    r {\n+        b: b\n+    }\n+}\n+\n fn main() {\n     let b = @mut 0;\n     {"}, {"sha": "e2b68db5a4871849429f629116b1a5762dbc32e2", "filename": "src/test/run-pass/nested-class.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fnested-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fnested-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-class.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -3,9 +3,14 @@ fn main() {\n   struct b {\n     let i: int;\n     fn do_stuff() -> int { return 37; }\n-    new(i:int) { self.i = i; }\n   }\n \n+    fn b(i:int) -> b {\n+        b {\n+            i: i\n+        }\n+    }\n+\n   //  fn b(x:int) -> int { fail; }\n \n   let z = b(42);"}, {"sha": "bbe6d59c280ab3fff152f041b90a4f1c558d3a94", "filename": "src/test/run-pass/private-class-field.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -6,7 +6,13 @@ struct cat {\n   let how_hungry : int;\n \n   fn meow_count() -> uint { self.meows }\n-  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n+}\n+\n+fn cat(in_x : uint, in_y : int) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y\n+    }\n }\n \n fn main() {"}, {"sha": "ab75956bbd821a1de86a8705222368012bffe65a", "filename": "src/test/run-pass/private-method.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-method.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -10,7 +10,13 @@ struct cat {\n     self.meows += 1u;\n     self.nap();\n   }\n-  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n+}\n+\n+fn cat(in_x : uint, in_y : int) -> cat {\n+    cat {\n+        meows: in_x,\n+        how_hungry: in_y\n+    }\n }\n \n fn main() {"}, {"sha": "1a18c788e0dadffc86707733fb980646f1c9f8a2", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,11 +1,14 @@\n struct r {\n   let i: @mut int;\n-  new(i: @mut int) {\n-    self.i = i;\n-  }\n   drop { *(self.i) += 1; }\n }\n \n+fn r(i: @mut int) -> r {\n+    r {\n+        i: i\n+    }\n+}\n+\n fn main() {\n     let i = @mut 0;\n     // Even though these look like copies, they are guaranteed not to be"}, {"sha": "14c7d2697528d07f1987cc93716fc7bf618318a1", "filename": "src/test/run-pass/resource-cycle.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -2,13 +2,6 @@\n \n struct r {\n   let v: *int;\n-  new(v: *int) unsafe {\n-    self.v = v;\n-    debug!(\"r's ctor: v = %x, self = %x, self.v = %x\",\n-           unsafe::reinterpret_cast::<*int, uint>(&v),\n-           unsafe::reinterpret_cast::<*r, uint>(&ptr::addr_of(self)),\n-           unsafe::reinterpret_cast::<**int, uint>(&ptr::addr_of(self.v)));\n-     }\n   drop unsafe {\n     debug!(\"r's dtor: self = %x, self.v = %x, self.v's value = %x\",\n            unsafe::reinterpret_cast::<*r, uint>(&ptr::addr_of(self)),\n@@ -17,6 +10,12 @@ struct r {\n     let v2: ~int = unsafe::reinterpret_cast(&self.v); }\n }\n \n+fn r(v: *int) -> r unsafe {\n+    r {\n+        v: v\n+    }\n+}\n+\n enum t = {\n     mut next: Option<@t>,\n     r: r"}, {"sha": "25fa567292ed97ba5c7ee0175b75fb74f7be2753", "filename": "src/test/run-pass/resource-cycle2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -8,12 +8,17 @@ type u = {\n \n struct r {\n   let v: u;\n-  new(v: u) { self.v = v; }\n   drop unsafe {\n     let v2: ~int = unsafe::reinterpret_cast(&self.v.c);\n   }\n }\n \n+fn r(v: u) -> r {\n+    r {\n+        v: v\n+    }\n+}\n+\n enum t = {\n     mut next: Option<@t>,\n     r: r"}, {"sha": "ca5ce6f1b7f05aa9373f8aaa6ef97f5b9e4fb5fc", "filename": "src/test/run-pass/resource-cycle3.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -12,15 +12,20 @@ struct r {\n   let v: u;\n   let w: int;\n   let x: *int;\n-  new(v: u, w: int, _x: *int) unsafe { self.v = v; self.w = w; \n-    self.x = unsafe::reinterpret_cast(&0);\n-    /* self.x = x; */ }\n   drop unsafe {\n     let _v2: ~int = unsafe::reinterpret_cast(&self.v.c);\n     // let _v3: ~int = unsafe::reinterpret_cast(self.x);\n   }\n }\n \n+fn r(v: u, w: int, _x: *int) -> r unsafe {\n+    r {\n+        v: v,\n+        w: w,\n+        x: unsafe::reinterpret_cast(&0)\n+    }\n+}\n+\n enum t = {\n     mut next: Option<@t>,\n     r: r"}, {"sha": "5bd8921ca539375922c542e0911d84dbd8cd9d49", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,10 +1,15 @@\n struct shrinky_pointer {\n   let i: @@mut int;\n   fn look_at() -> int { return **(self.i); }\n-  new(i: @@mut int) { self.i = i; }\n   drop { log(error, ~\"Hello!\"); **(self.i) -= 1; }\n }\n \n+fn shrinky_pointer(i: @@mut int) -> shrinky_pointer {\n+    shrinky_pointer {\n+        i: i\n+    }\n+}\n+\n fn main() {\n     let my_total = @@mut 10;\n     { let pt <- shrinky_pointer(my_total); assert (pt.look_at() == 10); }"}, {"sha": "79b4242df42b669fc124e9bd6d20b114c0099fb8", "filename": "src/test/run-pass/resource-generic.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-generic.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,11 +1,14 @@\n struct finish<T: copy> {\n   let arg: {val: T, fin: extern fn(T)};\n-  new(arg: {val: T, fin: extern fn(T)}) {\n-    self.arg = arg;\n-  }\n   drop { self.arg.fin(self.arg.val); }\n }\n \n+fn finish<T: copy>(arg: {val: T, fin: extern fn(T)}) -> finish<T> {\n+    finish {\n+        arg: arg\n+    }\n+}\n+\n fn main() {\n     let box = @mut 10;\n     fn dec_box(&&i: @mut int) { *i -= 1; }"}, {"sha": "2660a983941617c202b2a580cd7d9403ae959614", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -6,10 +6,15 @@ type closable = @mut bool;\n struct close_res {\n   let i: closable;\n  \n-  new(i: closable) { self.i = i; }\n   drop { *(self.i) = false; }\n }\n \n+fn close_res(i: closable) -> close_res {\n+    close_res {\n+        i: i\n+    }\n+}\n+\n enum option<T> { none, some(T), }\n \n fn sink(res: option<close_res>) { }"}, {"sha": "6fda3c54c387de597328ec1c819dc72ab7d5c853", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -3,10 +3,15 @@ use comm::*;\n \n struct test {\n   let f: int;\n-  new(f: int) { self.f = f; }\n   drop {}\n }\n \n+fn test(f: int) -> test {\n+    test {\n+        f: f\n+    }\n+}\n+\n fn main() {\n     let p = Port();\n     let c = Chan(p);"}, {"sha": "d7daa616abf5c61b4dcbb881a79dfc746af274c9", "filename": "src/test/run-pass/sendable-class.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendable-class.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -3,7 +3,13 @@\n struct foo {\n   let i: int;\n   let j: char;\n-  new(i:int, j: char) { self.i = i; self.j = j; }\n+}\n+\n+fn foo(i:int, j: char) -> foo {\n+    foo {\n+        i: i,\n+        j: j\n+    }\n }\n \n fn main() {"}, {"sha": "df05df61afb15a7e266c68b320a33e22471164a9", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -7,7 +7,6 @@ use std;\n \n struct notify {\n     let ch: comm::Chan<bool>; let v: @mut bool;\n-    new(ch: comm::Chan<bool>, v: @mut bool) { self.ch = ch; self.v = v; }\n     drop {\n         error!(\"notify: task=%? v=%x unwinding=%b b=%b\",\n                task::get_task(),\n@@ -19,6 +18,13 @@ struct notify {\n     }\n }\n \n+fn notify(ch: comm::Chan<bool>, v: @mut bool) -> notify {\n+    notify {\n+        ch: ch,\n+        v: v\n+    }\n+}\n+\n fn joinable(+f: fn~()) -> comm::Port<bool> {\n     fn wrapper(+c: comm::Chan<bool>, +f: fn()) {\n         let b = @mut false;"}, {"sha": "634bce5cb1284c685fb6824ab2015870dd42263d", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -4,10 +4,15 @@ fn u_foo<T: send>(unique: T) { }\n \n struct r {\n   let i: int;\n-  new(i:int) { self.i = i; }\n   drop {}\n }\n \n+fn r(i:int) -> r {\n+    r {\n+        i: i\n+    }\n+}\n+\n fn main() {\n     p_foo(r(10));\n     p_foo(@r(10));"}, {"sha": "101f890391e34952e86a45ada9c8e92d0575d2e3", "filename": "src/test/run-pass/unique-pinned-nocopy-2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,9 +1,14 @@\n struct r {\n   let i: @mut int;\n-  new(i: @mut int) { self.i = i; }\n   drop { *(self.i) = *(self.i) + 1; }\n }\n \n+fn r(i: @mut int) -> r {\n+    r {\n+        i: i\n+    }\n+}\n+\n fn main() {\n     let i = @mut 0;\n     {"}, {"sha": "f66dfdcfeee9f430f5e54e10b45dfcf07e916825", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -3,14 +3,18 @@ use std;\n \n struct complainer {\n   let c: comm::Chan<bool>;\n-  new(c: comm::Chan<bool>) {\n-    error!(\"Hello!\");\n-    self.c = c; }\n   drop { error!(\"About to send!\");\n     comm::send(self.c, true);\n     error!(\"Sent!\"); }\n }\n \n+fn complainer(c: comm::Chan<bool>) -> complainer {\n+    error!(\"Hello!\");\n+    complainer {\n+        c: c\n+    }\n+}\n+\n fn f(c: comm::Chan<bool>) {\n     let _c <- complainer(c);\n     fail;"}, {"sha": "ff1758ceef1bf1b11f2791d58adf88c0b93fe92e", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -3,10 +3,15 @@ use std;\n \n struct complainer {\n   let c: @int;\n-  new(c: @int) { self.c = c; }\n   drop {}\n }\n \n+fn complainer(c: @int) -> complainer {\n+    complainer {\n+        c: c\n+    }\n+}\n+\n fn f() {\n     let c <- complainer(@0);\n     fail;"}, {"sha": "1461e8960b45355fb529ce3ec49f525086e931d9", "filename": "src/test/run-pass/vec-slice-drop.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e547d71aa379e702a737550e479116914b19cf/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs?ref=b4e547d71aa379e702a737550e479116914b19cf", "patch": "@@ -1,10 +1,15 @@\n // Make sure that destructors get run on slice literals\n struct foo {\n     let x: @mut int;\n-    new(x: @mut int) { self.x = x; }\n     drop { *self.x += 1; }\n }\n \n+fn foo(x: @mut int) -> foo {\n+    foo {\n+        x: x\n+    }\n+}\n+\n fn main() {\n     let x = @mut 0;\n     {"}]}