{"sha": "7bade6ef730cff83f3591479a98916920f66decd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYWRlNmVmNzMwY2ZmODNmMzU5MTQ3OWE5ODkxNjkyMGY2NmRlY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-23T17:32:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-23T17:32:04Z"}, "message": "Auto merge of #77015 - davidtwco:check-attr-variant-closure-expr, r=lcnr\n\npasses: `check_attr` on more targets\n\nThis PR modifies `check_attr` so that:\n\n- Enum variants are now checked (some attributes would not have been prohibited on variants previously).\n- `check_expr_attributes` and `check_stmt_attributes` are removed as `check_attributes` can perform the same checks. This means that codegen attribute errors aren't shown if there are other errors first (e.g. from other attributes, as shown in `src/test/ui/macros/issue-68060.rs` changes below).", "tree": {"sha": "ffd6635bae41a124e6ddeb89d0c5bb55fbae3513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffd6635bae41a124e6ddeb89d0c5bb55fbae3513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bade6ef730cff83f3591479a98916920f66decd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bade6ef730cff83f3591479a98916920f66decd", "html_url": "https://github.com/rust-lang/rust/commit/7bade6ef730cff83f3591479a98916920f66decd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bade6ef730cff83f3591479a98916920f66decd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07a63e6d1fabf3560e8e1e17c1d56b10a06152d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a63e6d1fabf3560e8e1e17c1d56b10a06152d9", "html_url": "https://github.com/rust-lang/rust/commit/07a63e6d1fabf3560e8e1e17c1d56b10a06152d9"}, {"sha": "57e8fc56852e7728d7160242bf13c3ab6e066bd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e8fc56852e7728d7160242bf13c3ab6e066bd8", "html_url": "https://github.com/rust-lang/rust/commit/57e8fc56852e7728d7160242bf13c3ab6e066bd8"}], "stats": {"total": 245, "additions": 114, "deletions": 131}, "files": [{"sha": "cb9c0578e8d4950090eff1b5ad310b678791ed3d", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 33, "deletions": 58, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -104,7 +104,7 @@ impl CheckAttrVisitor<'tcx> {\n             return;\n         }\n \n-        if matches!(target, Target::Fn | Target::Method(_) | Target::ForeignFn) {\n+        if matches!(target, Target::Closure | Target::Fn | Target::Method(_) | Target::ForeignFn) {\n             self.tcx.ensure().codegen_fn_attrs(self.tcx.hir().local_def_id(hir_id));\n         }\n \n@@ -195,7 +195,7 @@ impl CheckAttrVisitor<'tcx> {\n     /// Checks if the `#[non_exhaustive]` attribute on an `item` is valid. Returns `true` if valid.\n     fn check_non_exhaustive(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n-            Target::Struct | Target::Enum => true,\n+            Target::Struct | Target::Enum | Target::Variant => true,\n             _ => {\n                 struct_span_err!(\n                     self.tcx.sess,\n@@ -587,6 +587,9 @@ impl CheckAttrVisitor<'tcx> {\n \n         for hint in &hints {\n             let (article, allowed_targets) = match hint.name_or_empty() {\n+                _ if !matches!(target, Target::Struct | Target::Enum | Target::Union) => {\n+                    (\"a\", \"struct, enum, or union\")\n+                }\n                 name @ sym::C | name @ sym::align => {\n                     is_c |= name == sym::C;\n                     match target {\n@@ -652,12 +655,16 @@ impl CheckAttrVisitor<'tcx> {\n                 }\n                 _ => continue,\n             };\n-            self.emit_repr_error(\n+\n+            struct_span_err!(\n+                self.tcx.sess,\n                 hint.span(),\n-                *span,\n-                &format!(\"attribute should be applied to {}\", allowed_targets),\n-                &format!(\"not {} {}\", article, allowed_targets),\n+                E0517,\n+                \"{}\",\n+                &format!(\"attribute should be applied to {} {}\", article, allowed_targets)\n             )\n+            .span_label(*span, &format!(\"not {} {}\", article, allowed_targets))\n+            .emit();\n         }\n \n         // Just point at all repr hints if there are any incompatibilities.\n@@ -703,56 +710,6 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n-    fn emit_repr_error(\n-        &self,\n-        hint_span: Span,\n-        label_span: Span,\n-        hint_message: &str,\n-        label_message: &str,\n-    ) {\n-        struct_span_err!(self.tcx.sess, hint_span, E0517, \"{}\", hint_message)\n-            .span_label(label_span, label_message)\n-            .emit();\n-    }\n-\n-    fn check_stmt_attributes(&self, stmt: &hir::Stmt<'_>) {\n-        // When checking statements ignore expressions, they will be checked later\n-        if let hir::StmtKind::Local(ref l) = stmt.kind {\n-            self.check_attributes(l.hir_id, &l.attrs, &stmt.span, Target::Statement, None);\n-            for attr in l.attrs.iter() {\n-                if self.tcx.sess.check_name(attr, sym::repr) {\n-                    self.emit_repr_error(\n-                        attr.span,\n-                        stmt.span,\n-                        \"attribute should not be applied to a statement\",\n-                        \"not a struct, enum, or union\",\n-                    );\n-                }\n-            }\n-        }\n-    }\n-\n-    fn check_expr_attributes(&self, expr: &hir::Expr<'_>) {\n-        let target = match expr.kind {\n-            hir::ExprKind::Closure(..) => Target::Closure,\n-            _ => Target::Expression,\n-        };\n-        self.check_attributes(expr.hir_id, &expr.attrs, &expr.span, target, None);\n-        for attr in expr.attrs.iter() {\n-            if self.tcx.sess.check_name(attr, sym::repr) {\n-                self.emit_repr_error(\n-                    attr.span,\n-                    expr.span,\n-                    \"attribute should not be applied to an expression\",\n-                    \"not defining a struct, enum, or union\",\n-                );\n-            }\n-        }\n-        if target == Target::Closure {\n-            self.tcx.ensure().codegen_fn_attrs(self.tcx.hir().local_def_id(expr.hir_id));\n-        }\n-    }\n-\n     fn check_used(&self, attrs: &'hir [Attribute], target: Target) {\n         for attr in attrs {\n             if self.tcx.sess.check_name(attr, sym::used) && target != Target::Static {\n@@ -808,14 +765,32 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     }\n \n     fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt<'tcx>) {\n-        self.check_stmt_attributes(stmt);\n+        // When checking statements ignore expressions, they will be checked later.\n+        if let hir::StmtKind::Local(ref l) = stmt.kind {\n+            self.check_attributes(l.hir_id, &l.attrs, &stmt.span, Target::Statement, None);\n+        }\n         intravisit::walk_stmt(self, stmt)\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n-        self.check_expr_attributes(expr);\n+        let target = match expr.kind {\n+            hir::ExprKind::Closure(..) => Target::Closure,\n+            _ => Target::Expression,\n+        };\n+\n+        self.check_attributes(expr.hir_id, &expr.attrs, &expr.span, target, None);\n         intravisit::walk_expr(self, expr)\n     }\n+\n+    fn visit_variant(\n+        &mut self,\n+        variant: &'tcx hir::Variant<'tcx>,\n+        generics: &'tcx hir::Generics<'tcx>,\n+        item_id: HirId,\n+    ) {\n+        self.check_attributes(variant.id, variant.attrs, &variant.span, Target::Variant, None);\n+        intravisit::walk_variant(self, variant, generics, item_id)\n+    }\n }\n \n fn is_c_like_enum(item: &Item<'_>) -> bool {"}, {"sha": "8965decc379893a5479196ffbd074a38acef32e2", "filename": "src/test/ui/attr-usage-repr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fattr-usage-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fattr-usage-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-repr.rs?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -1,6 +1,6 @@\n #![feature(repr_simd)]\n \n-#[repr(C)] //~ ERROR: attribute should be applied to struct, enum, or union\n+#[repr(C)] //~ ERROR: attribute should be applied to a struct, enum, or union\n fn f() {}\n \n #[repr(C)]\n@@ -12,7 +12,7 @@ struct SPacked(f64, f64);\n #[repr(simd)]\n struct SSimd(f64, f64);\n \n-#[repr(i8)] //~ ERROR: attribute should be applied to enum\n+#[repr(i8)] //~ ERROR: attribute should be applied to an enum\n struct SInt(f64, f64);\n \n #[repr(C)]\n@@ -21,10 +21,10 @@ enum EExtern { A, B }\n #[repr(align(8))]\n enum EAlign { A, B }\n \n-#[repr(packed)] //~ ERROR: attribute should be applied to struct\n+#[repr(packed)] //~ ERROR: attribute should be applied to a struct\n enum EPacked { A, B }\n \n-#[repr(simd)] //~ ERROR: attribute should be applied to struct\n+#[repr(simd)] //~ ERROR: attribute should be applied to a struct\n enum ESimd { A, B }\n \n #[repr(i8)]"}, {"sha": "42f65625a466f4e660ad44a5f17e2fab5659c5ac", "filename": "src/test/ui/attr-usage-repr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-repr.stderr?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -1,28 +1,28 @@\n-error[E0517]: attribute should be applied to struct, enum, or union\n+error[E0517]: attribute should be applied to a struct, enum, or union\n   --> $DIR/attr-usage-repr.rs:3:8\n    |\n LL | #[repr(C)]\n    |        ^\n LL | fn f() {}\n    | --------- not a struct, enum, or union\n \n-error[E0517]: attribute should be applied to enum\n+error[E0517]: attribute should be applied to an enum\n   --> $DIR/attr-usage-repr.rs:15:8\n    |\n LL | #[repr(i8)]\n    |        ^^\n LL | struct SInt(f64, f64);\n    | ---------------------- not an enum\n \n-error[E0517]: attribute should be applied to struct or union\n+error[E0517]: attribute should be applied to a struct or union\n   --> $DIR/attr-usage-repr.rs:24:8\n    |\n LL | #[repr(packed)]\n    |        ^^^^^^\n LL | enum EPacked { A, B }\n    | --------------------- not a struct or union\n \n-error[E0517]: attribute should be applied to struct\n+error[E0517]: attribute should be applied to a struct\n   --> $DIR/attr-usage-repr.rs:27:8\n    |\n LL | #[repr(simd)]"}, {"sha": "2f90d4d0baa5ee8938265825f2e88d18ddc5507d", "filename": "src/test/ui/error-codes/E0517.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Ferror-codes%2FE0517.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Ferror-codes%2FE0517.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0517.stderr?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -1,28 +1,28 @@\n-error[E0517]: attribute should be applied to struct, enum, or union\n+error[E0517]: attribute should be applied to a struct, enum, or union\n   --> $DIR/E0517.rs:1:8\n    |\n LL | #[repr(C)]\n    |        ^\n LL | type Foo = u8;\n    | -------------- not a struct, enum, or union\n \n-error[E0517]: attribute should be applied to struct or union\n+error[E0517]: attribute should be applied to a struct or union\n   --> $DIR/E0517.rs:4:8\n    |\n LL | #[repr(packed)]\n    |        ^^^^^^\n LL | enum Foo2 {Bar, Baz}\n    | -------------------- not a struct or union\n \n-error[E0517]: attribute should be applied to enum\n+error[E0517]: attribute should be applied to an enum\n   --> $DIR/E0517.rs:7:8\n    |\n LL | #[repr(u8)]\n    |        ^^\n LL | struct Foo3 {bar: bool, baz: bool}\n    | ---------------------------------- not an enum\n \n-error[E0517]: attribute should be applied to struct, enum, or union\n+error[E0517]: attribute should be applied to a struct, enum, or union\n   --> $DIR/E0517.rs:10:8\n    |\n LL |   #[repr(C)]"}, {"sha": "d92a4e8cc8df19897ba9a8504187ffab2399040c", "filename": "src/test/ui/inline-disallow-on-variant.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Finline-disallow-on-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Finline-disallow-on-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-disallow-on-variant.rs?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -0,0 +1,7 @@\n+enum Foo {\n+    #[inline]\n+    //~^ ERROR attribute should be applied\n+    Variant,\n+}\n+\n+fn main() {}"}, {"sha": "1b176579bbbcf5374bb9b09c2c3cc2c486785e15", "filename": "src/test/ui/inline-disallow-on-variant.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Finline-disallow-on-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Finline-disallow-on-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-disallow-on-variant.stderr?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -0,0 +1,12 @@\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-disallow-on-variant.rs:2:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |\n+LL |     Variant,\n+   |     ------- not a function or closure\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0518`."}, {"sha": "f56c6ea5656854bbf8fda0db213757e87676646f", "filename": "src/test/ui/issues/issue-31769.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fissues%2Fissue-31769.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fissues%2Fissue-31769.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31769.rs?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     #[inline] struct Foo;  //~ ERROR attribute should be applied to function or closure\n-    #[repr(C)] fn foo() {} //~ ERROR attribute should be applied to struct, enum, or union\n+    #[repr(C)] fn foo() {} //~ ERROR attribute should be applied to a struct, enum, or union\n }"}, {"sha": "03e2f931c847bcf0012c417bdfd613ff631c0300", "filename": "src/test/ui/issues/issue-31769.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fissues%2Fissue-31769.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fissues%2Fissue-31769.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31769.stderr?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -4,7 +4,7 @@ error[E0518]: attribute should be applied to function or closure\n LL |     #[inline] struct Foo;\n    |     ^^^^^^^^^ ----------- not a function or closure\n \n-error[E0517]: attribute should be applied to struct, enum, or union\n+error[E0517]: attribute should be applied to a struct, enum, or union\n   --> $DIR/issue-31769.rs:3:12\n    |\n LL |     #[repr(C)] fn foo() {}"}, {"sha": "4b3a0269baea266b934fc3e02073825b1cc501df", "filename": "src/test/ui/issues/issue-43988.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fissues%2Fissue-43988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fissues%2Fissue-43988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43988.rs?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -13,18 +13,17 @@ fn main() {\n \n     #[repr(nothing)]\n     let _x = 0;\n-    //~^^ ERROR attribute should not be applied to a statement\n+    //~^^ ERROR attribute should be applied to a struct, enum, or union\n \n     #[repr(something_not_real)]\n     loop {\n         ()\n     };\n-    //~^^^^ ERROR attribute should not be applied to an expression\n+    //~^^^^ ERROR attribute should be applied to a struct, enum, or union\n \n     #[repr]\n     let _y = \"123\";\n-    //~^^ ERROR attribute should not be applied to a statement\n-    //~| ERROR malformed `repr` attribute\n+    //~^^ ERROR malformed `repr` attribute\n \n     fn foo() {}\n \n@@ -33,6 +32,5 @@ fn main() {\n     //~^^ ERROR attribute should be applied to function or closure\n \n     let _z = #[repr] 1;\n-    //~^ ERROR attribute should not be applied to an expression\n-    //~| ERROR malformed `repr` attribute\n+    //~^ ERROR malformed `repr` attribute\n }"}, {"sha": "f1205d447e4ba97936baf6279b6f72c86be7492f", "filename": "src/test/ui/issues/issue-43988.stderr", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fissues%2Fissue-43988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fissues%2Fissue-43988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43988.stderr?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -5,7 +5,7 @@ LL |     #[repr]\n    |     ^^^^^^^ help: must be of the form: `#[repr(C)]`\n \n error: malformed `repr` attribute input\n-  --> $DIR/issue-43988.rs:35:14\n+  --> $DIR/issue-43988.rs:34:14\n    |\n LL |     let _z = #[repr] 1;\n    |              ^^^^^^^ help: must be of the form: `#[repr(C)]`\n@@ -26,47 +26,33 @@ LL |     #[inline(XYZ)]\n LL |     let _b = 4;\n    |     ----------- not a function or closure\n \n-error[E0517]: attribute should not be applied to a statement\n-  --> $DIR/issue-43988.rs:14:5\n+error[E0517]: attribute should be applied to a struct, enum, or union\n+  --> $DIR/issue-43988.rs:14:12\n    |\n LL |     #[repr(nothing)]\n-   |     ^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^\n LL |     let _x = 0;\n    |     ----------- not a struct, enum, or union\n \n-error[E0517]: attribute should not be applied to an expression\n-  --> $DIR/issue-43988.rs:18:5\n+error[E0517]: attribute should be applied to a struct, enum, or union\n+  --> $DIR/issue-43988.rs:18:12\n    |\n LL |       #[repr(something_not_real)]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^^^\n LL | /     loop {\n LL | |         ()\n LL | |     };\n-   | |_____- not defining a struct, enum, or union\n-\n-error[E0517]: attribute should not be applied to a statement\n-  --> $DIR/issue-43988.rs:24:5\n-   |\n-LL |     #[repr]\n-   |     ^^^^^^^\n-LL |     let _y = \"123\";\n-   |     --------------- not a struct, enum, or union\n+   | |_____- not a struct, enum, or union\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43988.rs:31:5\n+  --> $DIR/issue-43988.rs:30:5\n    |\n LL |     #[inline(ABC)]\n    |     ^^^^^^^^^^^^^^\n LL |     foo();\n    |     ----- not a function or closure\n \n-error[E0517]: attribute should not be applied to an expression\n-  --> $DIR/issue-43988.rs:35:14\n-   |\n-LL |     let _z = #[repr] 1;\n-   |              ^^^^^^^ - not defining a struct, enum, or union\n-\n-error: aborting due to 9 previous errors\n+error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0517, E0518.\n For more information about an error, try `rustc --explain E0517`."}, {"sha": "e3e400c79d658f651c36b82d1f39e95d32216192", "filename": "src/test/ui/issues/issue-74082.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fissues%2Fissue-74082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fissues%2Fissue-74082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74082.rs?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -1,9 +1,9 @@\n #![allow(dead_code)]\n \n-#[repr(i128)] //~ ERROR: attribute should be applied to enum\n+#[repr(i128)] //~ ERROR: attribute should be applied to an enum\n struct Foo;\n \n-#[repr(u128)] //~ ERROR: attribute should be applied to enum\n+#[repr(u128)] //~ ERROR: attribute should be applied to an enum\n struct Bar;\n \n fn main() {}"}, {"sha": "12f5a3b27bb3050dc7841269463a9c908e04f7c9", "filename": "src/test/ui/issues/issue-74082.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fissues%2Fissue-74082.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fissues%2Fissue-74082.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74082.stderr?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -1,12 +1,12 @@\n-error[E0517]: attribute should be applied to enum\n+error[E0517]: attribute should be applied to an enum\n   --> $DIR/issue-74082.rs:3:8\n    |\n LL | #[repr(i128)]\n    |        ^^^^\n LL | struct Foo;\n    | ----------- not an enum\n \n-error[E0517]: attribute should be applied to enum\n+error[E0517]: attribute should be applied to an enum\n   --> $DIR/issue-74082.rs:6:8\n    |\n LL | #[repr(u128)]"}, {"sha": "aa8f578adf61eff295986e53944eaf5d491f5e76", "filename": "src/test/ui/macros/issue-68060.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -3,10 +3,7 @@ fn main() {\n         .map(\n             #[target_feature(enable = \"\")]\n             //~^ ERROR: attribute should be applied to a function\n-            //~| ERROR: the feature named `` is not valid for this target\n-            //~| NOTE: `` is not valid for this target\n             #[track_caller]\n-            //~^ ERROR: `#[track_caller]` requires Rust ABI [E0737]\n             |_| (),\n             //~^ NOTE: not a function\n         )"}, {"sha": "1b58cf9c4ede54050a82a472857479a1d74ea49a", "filename": "src/test/ui/macros/issue-68060.stderr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -7,18 +7,5 @@ LL |             #[target_feature(enable = \"\")]\n LL |             |_| (),\n    |             ------ not a function\n \n-error: the feature named `` is not valid for this target\n-  --> $DIR/issue-68060.rs:4:30\n-   |\n-LL |             #[target_feature(enable = \"\")]\n-   |                              ^^^^^^^^^^^ `` is not valid for this target\n-\n-error[E0737]: `#[track_caller]` requires Rust ABI\n-  --> $DIR/issue-68060.rs:8:13\n-   |\n-LL |             #[track_caller]\n-   |             ^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0737`."}, {"sha": "90cad7e647b057d54b75626a30847a66b5e37075", "filename": "src/test/ui/repr/repr-disallow-on-variant.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Frepr%2Frepr-disallow-on-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Frepr%2Frepr-disallow-on-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-disallow-on-variant.rs?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -0,0 +1,9 @@\n+struct Test;\n+\n+enum Foo {\n+    #[repr(u8)]\n+    //~^ ERROR attribute should be applied to a struct, enum, or union\n+    Variant,\n+}\n+\n+fn main() {}"}, {"sha": "70b45e393fcf1a7182d4525b9151862eee4751dc", "filename": "src/test/ui/repr/repr-disallow-on-variant.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Frepr%2Frepr-disallow-on-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Frepr%2Frepr-disallow-on-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-disallow-on-variant.stderr?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -0,0 +1,12 @@\n+error[E0517]: attribute should be applied to a struct, enum, or union\n+  --> $DIR/repr-disallow-on-variant.rs:4:12\n+   |\n+LL |     #[repr(u8)]\n+   |            ^^\n+LL |\n+LL |     Variant,\n+   |     ------- not a struct, enum, or union\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0517`."}, {"sha": "870eda89c20d7cd0cb9b4d575287d882e7f3ca2a", "filename": "src/test/ui/repr/repr-no-niche-inapplicable-to-unions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.rs?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -5,10 +5,10 @@ use std::num::NonZeroU16 as N16;\n \n #[repr(no_niche)]\n pub union Cloaked1 { _A: N16 }\n-//~^^ ERROR attribute should be applied to struct or enum [E0517]\n+//~^^ ERROR attribute should be applied to a struct or enum [E0517]\n \n #[repr(no_niche)]\n pub union Cloaked2 { _A: N16, _B: (u8, N8) }\n-//~^^ ERROR attribute should be applied to struct or enum [E0517]\n+//~^^ ERROR attribute should be applied to a struct or enum [E0517]\n \n fn main() { }"}, {"sha": "9af929d409473991a78be237f0df950fc9543736", "filename": "src/test/ui/repr/repr-no-niche-inapplicable-to-unions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.stderr?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -1,12 +1,12 @@\n-error[E0517]: attribute should be applied to struct or enum\n+error[E0517]: attribute should be applied to a struct or enum\n   --> $DIR/repr-no-niche-inapplicable-to-unions.rs:6:8\n    |\n LL | #[repr(no_niche)]\n    |        ^^^^^^^^\n LL | pub union Cloaked1 { _A: N16 }\n    | ------------------------------ not a struct or enum\n \n-error[E0517]: attribute should be applied to struct or enum\n+error[E0517]: attribute should be applied to a struct or enum\n   --> $DIR/repr-no-niche-inapplicable-to-unions.rs:10:8\n    |\n LL | #[repr(no_niche)]"}, {"sha": "e537e3e1a63656f11f5dd04ab6204f3ae913778e", "filename": "src/test/ui/repr/repr-transparent-other-items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.rs?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -1,9 +1,9 @@\n // See also repr-transparent.rs\n \n-#[repr(transparent)] //~ ERROR should be applied to struct\n+#[repr(transparent)] //~ ERROR should be applied to a struct\n fn cant_repr_this() {}\n \n-#[repr(transparent)] //~ ERROR should be applied to struct\n+#[repr(transparent)] //~ ERROR should be applied to a struct\n static CANT_REPR_THIS: u32 = 0;\n \n fn main() {}"}, {"sha": "14e6f13e1ae446577cfab99bd37771a8e7c075a4", "filename": "src/test/ui/repr/repr-transparent-other-items.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bade6ef730cff83f3591479a98916920f66decd/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.stderr?ref=7bade6ef730cff83f3591479a98916920f66decd", "patch": "@@ -1,12 +1,12 @@\n-error[E0517]: attribute should be applied to struct, enum, or union\n+error[E0517]: attribute should be applied to a struct, enum, or union\n   --> $DIR/repr-transparent-other-items.rs:3:8\n    |\n LL | #[repr(transparent)]\n    |        ^^^^^^^^^^^\n LL | fn cant_repr_this() {}\n    | ---------------------- not a struct, enum, or union\n \n-error[E0517]: attribute should be applied to struct, enum, or union\n+error[E0517]: attribute should be applied to a struct, enum, or union\n   --> $DIR/repr-transparent-other-items.rs:6:8\n    |\n LL | #[repr(transparent)]"}]}