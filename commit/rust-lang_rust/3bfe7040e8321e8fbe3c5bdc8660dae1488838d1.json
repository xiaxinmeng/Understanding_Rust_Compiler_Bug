{"sha": "3bfe7040e8321e8fbe3c5bdc8660dae1488838d1", "node_id": "C_kwDOAAsO6NoAKDNiZmU3MDQwZTgzMjFlOGZiZTNjNWJkYzg2NjBkYWUxNDg4ODM4ZDE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-21T18:18:12Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-21T19:20:42Z"}, "message": "Add an option to hide adjustment hints outside of unsafe blocks", "tree": {"sha": "1df98eeaa4bb7aeb411b73a4eccb3fc37f642573", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1df98eeaa4bb7aeb411b73a4eccb3fc37f642573"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1", "html_url": "https://github.com/rust-lang/rust/commit/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "474835704568c4d494206282082d79f57068b060", "url": "https://api.github.com/repos/rust-lang/rust/commits/474835704568c4d494206282082d79f57068b060", "html_url": "https://github.com/rust-lang/rust/commit/474835704568c4d494206282082d79f57068b060"}], "stats": {"total": 185, "additions": 181, "deletions": 4}, "files": [{"sha": "7c2829c855c4c61a3741a648b9952cd632318553", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=3bfe7040e8321e8fbe3c5bdc8660dae1488838d1", "patch": "@@ -50,8 +50,8 @@ use hir_def::{\n     per_ns::PerNs,\n     resolver::{HasResolver, Resolver},\n     src::HasSource as _,\n-    AdtId, AssocItemId, AssocItemLoc, AttrDefId, ConstId, ConstParamId, DefWithBodyId, EnumId,\n-    EnumVariantId, FunctionId, GenericDefId, HasModule, ImplId, ItemContainerId, LifetimeParamId,\n+    AdtId, AssocItemId, AssocItemLoc, AttrDefId, ConstId, ConstParamId, EnumId, EnumVariantId,\n+    FunctionId, GenericDefId, HasModule, ImplId, ItemContainerId, LifetimeParamId,\n     LocalEnumVariantId, LocalFieldId, Lookup, MacroExpander, MacroId, ModuleId, StaticId, StructId,\n     TraitId, TypeAliasId, TypeOrConstParamId, TypeParamId, UnionId,\n };\n@@ -107,13 +107,16 @@ pub use {\n     hir_def::{\n         adt::StructKind,\n         attr::{Attr, Attrs, AttrsWithOwner, Documentation},\n+        body::{Body, BodySourceMap},\n         builtin_attr::AttributeTemplate,\n+        expr::Expr,\n         find_path::PrefixKind,\n         import_map,\n         nameres::ModuleSource,\n         path::{ModPath, PathKind},\n         type_ref::{Mutability, TypeRef},\n         visibility::Visibility,\n+        DefWithBodyId,\n     },\n     hir_expand::{\n         name::{known, Name},"}, {"sha": "eca76d05fdecdd105f00af2b195d7baa55ad45b6", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=3bfe7040e8321e8fbe3c5bdc8660dae1488838d1", "patch": "@@ -28,6 +28,7 @@ pub struct InlayHintsConfig {\n     pub parameter_hints: bool,\n     pub chaining_hints: bool,\n     pub adjustment_hints: AdjustmentHints,\n+    pub adjustment_hints_hide_outside_unsafe: bool,\n     pub closure_return_type_hints: ClosureReturnTypeHints,\n     pub binding_mode_hints: bool,\n     pub lifetime_elision_hints: LifetimeElisionHints,\n@@ -343,6 +344,7 @@ mod tests {\n         lifetime_elision_hints: LifetimeElisionHints::Never,\n         closure_return_type_hints: ClosureReturnTypeHints::Never,\n         adjustment_hints: AdjustmentHints::Never,\n+        adjustment_hints_hide_outside_unsafe: false,\n         binding_mode_hints: false,\n         hide_named_constructor_hints: false,\n         hide_closure_initialization_hints: false,"}, {"sha": "c853b924b2f4b7973ed52aaf3d59d8d98b15a43c", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "modified", "additions": 158, "deletions": 2, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=3bfe7040e8321e8fbe3c5bdc8660dae1488838d1", "patch": "@@ -3,10 +3,17 @@\n //! let _: u32  = /* <never-to-any> */ loop {};\n //! let _: &u32 = /* &* */ &mut 0;\n //! ```\n-use hir::{Adjust, AutoBorrow, Mutability, OverloadedDeref, PointerCast, Safety, Semantics};\n+use either::Either;\n+use hir::{\n+    db::DefDatabase, Adjust, AutoBorrow, InFile, Mutability, OverloadedDeref, PointerCast, Safety,\n+    Semantics,\n+};\n use ide_db::RootDatabase;\n \n-use syntax::ast::{self, AstNode};\n+use syntax::{\n+    ast::{self, AstNode},\n+    SyntaxNode,\n+};\n \n use crate::{AdjustmentHints, InlayHint, InlayHintsConfig, InlayKind};\n \n@@ -16,6 +23,10 @@ pub(super) fn hints(\n     config: &InlayHintsConfig,\n     expr: &ast::Expr,\n ) -> Option<()> {\n+    if config.adjustment_hints_hide_outside_unsafe && !is_inside_unsafe(sema, expr.syntax()) {\n+        return None;\n+    }\n+\n     if config.adjustment_hints == AdjustmentHints::Never {\n         return None;\n     }\n@@ -110,6 +121,59 @@ pub(super) fn hints(\n     Some(())\n }\n \n+fn is_inside_unsafe(sema: &Semantics<'_, RootDatabase>, node: &SyntaxNode) -> bool {\n+    let item_or_variant = |ancestor: SyntaxNode| {\n+        if ast::Item::can_cast(ancestor.kind()) {\n+            ast::Item::cast(ancestor).map(Either::Left)\n+        } else {\n+            ast::Variant::cast(ancestor).map(Either::Right)\n+        }\n+    };\n+    let Some(enclosing_item) = node.ancestors().find_map(item_or_variant) else { return false };\n+\n+    let def = match &enclosing_item {\n+        Either::Left(ast::Item::Fn(it)) => {\n+            sema.to_def(it).map(<_>::into).map(hir::DefWithBodyId::FunctionId)\n+        }\n+        Either::Left(ast::Item::Const(it)) => {\n+            sema.to_def(it).map(<_>::into).map(hir::DefWithBodyId::ConstId)\n+        }\n+        Either::Left(ast::Item::Static(it)) => {\n+            sema.to_def(it).map(<_>::into).map(hir::DefWithBodyId::StaticId)\n+        }\n+        Either::Left(_) => None,\n+        Either::Right(it) => sema.to_def(it).map(<_>::into).map(hir::DefWithBodyId::VariantId),\n+    };\n+    let Some(def) = def else { return false };\n+    let enclosing_node = enclosing_item.as_ref().either(|i| i.syntax(), |v| v.syntax());\n+\n+    if ast::Fn::cast(enclosing_node.clone()).and_then(|f| f.unsafe_token()).is_some() {\n+        return true;\n+    }\n+\n+    let (body, source_map) = sema.db.body_with_source_map(def);\n+\n+    let file_id = sema.hir_file_for(node);\n+\n+    let Some(mut parent) = node.parent() else { return false };\n+    loop {\n+        if &parent == enclosing_node {\n+            break false;\n+        }\n+\n+        if let Some(parent) = ast::Expr::cast(parent.clone()) {\n+            if let Some(expr_id) = source_map.node_expr(InFile { file_id, value: &parent }) {\n+                if let hir::Expr::Unsafe { .. } = body[expr_id] {\n+                    break true;\n+                }\n+            }\n+        }\n+\n+        let Some(parent_) = parent.parent() else { break false };\n+        parent = parent_;\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::{\n@@ -233,4 +297,96 @@ fn or_else() {\n             \"#,\n         )\n     }\n+\n+    #[test]\n+    fn adjustment_hints_unsafe_only() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                adjustment_hints: AdjustmentHints::Always,\n+                adjustment_hints_hide_outside_unsafe: true,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+unsafe fn enabled() {\n+    f(&&());\n+    //^^^^&\n+    //^^^^*\n+    //^^^^*\n+}\n+\n+fn disabled() {\n+    f(&&());\n+}\n+\n+fn mixed() {\n+    f(&&());\n+\n+    unsafe {\n+        f(&&());\n+        //^^^^&\n+        //^^^^*\n+        //^^^^*\n+    }\n+}\n+\n+const _: () = {\n+    f(&&());\n+\n+    unsafe {\n+        f(&&());\n+        //^^^^&\n+        //^^^^*\n+        //^^^^*\n+    }\n+};\n+\n+static STATIC: () = {\n+    f(&&());\n+\n+    unsafe {\n+        f(&&());\n+        //^^^^&\n+        //^^^^*\n+        //^^^^*\n+    }\n+};\n+\n+enum E {\n+    Disable = { f(&&()); 0 },\n+    Enable = unsafe { f(&&()); 1 },\n+                      //^^^^&\n+                      //^^^^*\n+                      //^^^^*\n+}\n+\n+const fn f(_: &()) {}\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn adjustment_hints_unsafe_only_with_item() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                adjustment_hints: AdjustmentHints::Always,\n+                adjustment_hints_hide_outside_unsafe: true,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+fn a() {\n+    struct Struct;\n+    impl Struct {\n+        fn by_ref(&self) {}\n+    }\n+\n+    _ = Struct.by_ref();\n+\n+    _ = unsafe { Struct.by_ref() };\n+               //^^^^^^(\n+               //^^^^^^&\n+               //^^^^^^)\n+}\n+            \"#,\n+        );\n+    }\n }"}, {"sha": "4f1946ed4870095fbfbb398f6fb704cfb5502897", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=3bfe7040e8321e8fbe3c5bdc8660dae1488838d1", "patch": "@@ -113,6 +113,7 @@ impl StaticIndex<'_> {\n                     closure_return_type_hints: crate::ClosureReturnTypeHints::WithBlock,\n                     lifetime_elision_hints: crate::LifetimeElisionHints::Never,\n                     adjustment_hints: crate::AdjustmentHints::Never,\n+                    adjustment_hints_hide_outside_unsafe: false,\n                     hide_named_constructor_hints: false,\n                     hide_closure_initialization_hints: false,\n                     param_names_for_lifetime_elision_hints: false,"}, {"sha": "35d0d8f9772e13312a6a2e3d0e3cbfbe53a1f7c5", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=3bfe7040e8321e8fbe3c5bdc8660dae1488838d1", "patch": "@@ -329,6 +329,8 @@ config_data! {\n         inlayHints_closureReturnTypeHints_enable: ClosureReturnTypeHintsDef  = \"\\\"never\\\"\",\n         /// Whether to show inlay hints for type adjustments.\n         inlayHints_expressionAdjustmentHints_enable: AdjustmentHintsDef = \"\\\"never\\\"\",\n+        /// Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.\n+        inlayHints_expressionAdjustmentHints_hideOutsideUnsafe: bool = \"false\",\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n         inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n@@ -1224,6 +1226,9 @@ impl Config {\n                 },\n                 AdjustmentHintsDef::Reborrow => ide::AdjustmentHints::ReborrowOnly,\n             },\n+            adjustment_hints_hide_outside_unsafe: self\n+                .data\n+                .inlayHints_expressionAdjustmentHints_hideOutsideUnsafe,\n             binding_mode_hints: self.data.inlayHints_bindingModeHints_enable,\n             param_names_for_lifetime_elision_hints: self\n                 .data"}, {"sha": "7cff2cbb6a460c10bf43c7be67abe2a733caa17c", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=3bfe7040e8321e8fbe3c5bdc8660dae1488838d1", "patch": "@@ -459,6 +459,11 @@ Whether to show inlay type hints for return types of closures.\n --\n Whether to show inlay hints for type adjustments.\n --\n+[[rust-analyzer.inlayHints.expressionAdjustmentHints.hideOutsideUnsafe]]rust-analyzer.inlayHints.expressionAdjustmentHints.hideOutsideUnsafe (default: `false`)::\n++\n+--\n+Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.\n+--\n [[rust-analyzer.inlayHints.lifetimeElisionHints.enable]]rust-analyzer.inlayHints.lifetimeElisionHints.enable (default: `\"never\"`)::\n +\n --"}, {"sha": "21d65321d2fc078375c6b65e28ce491a52fa5228", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/3bfe7040e8321e8fbe3c5bdc8660dae1488838d1/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=3bfe7040e8321e8fbe3c5bdc8660dae1488838d1", "patch": "@@ -975,6 +975,11 @@\n                         \"Only show auto borrow and dereference adjustment hints.\"\n                     ]\n                 },\n+                \"rust-analyzer.inlayHints.expressionAdjustmentHints.hideOutsideUnsafe\": {\n+                    \"markdownDescription\": \"Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.inlayHints.lifetimeElisionHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for elided lifetimes in function signatures.\",\n                     \"default\": \"never\","}]}