{"sha": "8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc", "node_id": "C_kwDOAAsO6NoAKDhiZGNjNjJjYjAzNjI4NjlmMGU3YjQzYTZhZTRmOTZiOTUzZDNjYmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-20T21:11:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-20T21:11:54Z"}, "message": "Auto merge of #110616 - m-ou-se:fmt-lang-items, r=jyn514\n\nRemove public doc(hidden) core::fmt::rt::v1\n\nAll the types used by format_arg!() are now lang items, so they are no longer required as publicly exported items.\n\nPart of #99012\n\nAfter this change, the `rt` module is private, and contains only three lang items used by format_args (`Placeholder`, `Alignment`, and `Count`): https://github.com/rust-lang/rust/blob/441682cca9a32314835a88fa981a3bf13ffb0aa8/library/core/src/fmt/rt.rs", "tree": {"sha": "3a5864a46c8a3dd6814b76d64dd3f79d77bfaae1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a5864a46c8a3dd6814b76d64dd3f79d77bfaae1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc", "html_url": "https://github.com/rust-lang/rust/commit/8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d7a091c647ef8644bfa8487434d27c9c02aa59a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7a091c647ef8644bfa8487434d27c9c02aa59a", "html_url": "https://github.com/rust-lang/rust/commit/3d7a091c647ef8644bfa8487434d27c9c02aa59a"}, {"sha": "bd917bbcd272c3f9b02bb07a6231860448c8d530", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd917bbcd272c3f9b02bb07a6231860448c8d530", "html_url": "https://github.com/rust-lang/rust/commit/bd917bbcd272c3f9b02bb07a6231860448c8d530"}], "stats": {"total": 115, "additions": 49, "deletions": 66}, "files": [{"sha": "ccf481cb9b39d47032bcb0adf7f9c09e6b55eb58", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc", "patch": "@@ -220,19 +220,19 @@ fn make_argument<'hir>(\n /// Generates:\n ///\n /// ```text\n-///     <core::fmt::rt::v1::Count>::Is(\u2026)\n+///     <core::fmt::rt::Count>::Is(\u2026)\n /// ```\n ///\n /// or\n ///\n /// ```text\n-///     <core::fmt::rt::v1::Count>::Param(\u2026)\n+///     <core::fmt::rt::Count>::Param(\u2026)\n /// ```\n ///\n /// or\n ///\n /// ```text\n-///     <core::fmt::rt::v1::Count>::Implied\n+///     <core::fmt::rt::Count>::Implied\n /// ```\n fn make_count<'hir>(\n     ctx: &mut LoweringContext<'_, 'hir>,\n@@ -278,13 +278,13 @@ fn make_count<'hir>(\n /// Generates\n ///\n /// ```text\n-///     <core::fmt::rt::v1::Argument::new(\n+///     <core::fmt::rt::Placeholder::new(\n ///         \u2026usize, // position\n ///         '\u2026', // fill\n-///         <core::fmt::rt::v1::Alignment>::\u2026, // alignment\n+///         <core::fmt::rt::Alignment>::\u2026, // alignment\n ///         \u2026u32, // flags\n-///         <core::fmt::rt::v1::Count::\u2026>, // width\n-///         <core::fmt::rt::v1::Count::\u2026>, // precision\n+///         <core::fmt::rt::Count::\u2026>, // width\n+///         <core::fmt::rt::Count::\u2026>, // precision\n ///     )\n /// ```\n fn make_format_spec<'hir>("}, {"sha": "e03b501ae4d23e7ed98458f13bd9c0a7b20d237e", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc", "patch": "@@ -551,8 +551,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[unstable(feature = \"fmt_internals\", issue = \"none\")]\n-pub use core::fmt::rt;\n #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n pub use core::fmt::Alignment;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "a901ae726698af7f6a99dfcef4da9a12b1e45275", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 35, "deletions": 42, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc", "patch": "@@ -18,6 +18,7 @@ mod float;\n #[cfg(no_fp_fmt_parse)]\n mod nofloat;\n mod num;\n+mod rt;\n \n #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Alignment\")]\n@@ -38,12 +39,6 @@ pub enum Alignment {\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub use self::builders::{DebugList, DebugMap, DebugSet, DebugStruct, DebugTuple};\n \n-#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n-#[doc(hidden)]\n-pub mod rt {\n-    pub mod v1;\n-}\n-\n /// The type returned by formatter methods.\n ///\n /// # Examples\n@@ -227,7 +222,7 @@ impl<W: Write + ?Sized> Write for &mut W {\n pub struct Formatter<'a> {\n     flags: u32,\n     fill: char,\n-    align: rt::v1::Alignment,\n+    align: rt::Alignment,\n     width: Option<usize>,\n     precision: Option<usize>,\n \n@@ -248,7 +243,7 @@ impl<'a> Formatter<'a> {\n         Formatter {\n             flags: 0,\n             fill: ' ',\n-            align: rt::v1::Alignment::Unknown,\n+            align: rt::Alignment::Unknown,\n             width: None,\n             precision: None,\n             buf,\n@@ -433,17 +428,15 @@ impl<'a> Arguments<'a> {\n     /// An `UnsafeArg` is required because the following invariants must be held\n     /// in order for this function to be safe:\n     /// 1. The `pieces` slice must be at least as long as `fmt`.\n-    /// 2. Every [`rt::v1::Argument::position`] value within `fmt` must be a\n-    ///    valid index of `args`.\n-    /// 3. Every [`rt::v1::Count::Param`] within `fmt` must contain a valid index of\n-    ///    `args`.\n+    /// 2. Every `rt::Placeholder::position` value within `fmt` must be a valid index of `args`.\n+    /// 3. Every `rt::Count::Param` within `fmt` must contain a valid index of `args`.\n     #[doc(hidden)]\n     #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n     pub fn new_v1_formatted(\n         pieces: &'a [&'static str],\n         args: &'a [ArgumentV1<'a>],\n-        fmt: &'a [rt::v1::Argument],\n+        fmt: &'a [rt::Placeholder],\n         _unsafe_arg: UnsafeArg,\n     ) -> Arguments<'a> {\n         Arguments { pieces, fmt: Some(fmt), args }\n@@ -505,7 +498,7 @@ pub struct Arguments<'a> {\n     pieces: &'a [&'static str],\n \n     // Placeholder specs, or `None` if all specs are default (as in \"{}{}\").\n-    fmt: Option<&'a [rt::v1::Argument]>,\n+    fmt: Option<&'a [rt::Placeholder]>,\n \n     // Dynamic arguments for interpolation, to be interleaved with string\n     // pieces. (Every argument is preceded by a string piece.)\n@@ -1281,15 +1274,15 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n     Ok(())\n }\n \n-unsafe fn run(fmt: &mut Formatter<'_>, arg: &rt::v1::Argument, args: &[ArgumentV1<'_>]) -> Result {\n-    fmt.fill = arg.format.fill;\n-    fmt.align = arg.format.align;\n-    fmt.flags = arg.format.flags;\n+unsafe fn run(fmt: &mut Formatter<'_>, arg: &rt::Placeholder, args: &[ArgumentV1<'_>]) -> Result {\n+    fmt.fill = arg.fill;\n+    fmt.align = arg.align;\n+    fmt.flags = arg.flags;\n     // SAFETY: arg and args come from the same Arguments,\n     // which guarantees the indexes are always within bounds.\n     unsafe {\n-        fmt.width = getcount(args, &arg.format.width);\n-        fmt.precision = getcount(args, &arg.format.precision);\n+        fmt.width = getcount(args, &arg.width);\n+        fmt.precision = getcount(args, &arg.precision);\n     }\n \n     // Extract the correct argument\n@@ -1302,11 +1295,11 @@ unsafe fn run(fmt: &mut Formatter<'_>, arg: &rt::v1::Argument, args: &[ArgumentV\n     (value.formatter)(value.value, fmt)\n }\n \n-unsafe fn getcount(args: &[ArgumentV1<'_>], cnt: &rt::v1::Count) -> Option<usize> {\n+unsafe fn getcount(args: &[ArgumentV1<'_>], cnt: &rt::Count) -> Option<usize> {\n     match *cnt {\n-        rt::v1::Count::Is(n) => Some(n),\n-        rt::v1::Count::Implied => None,\n-        rt::v1::Count::Param(i) => {\n+        rt::Count::Is(n) => Some(n),\n+        rt::Count::Implied => None,\n+        rt::Count::Param(i) => {\n             debug_assert!(i < args.len());\n             // SAFETY: cnt and args come from the same Arguments,\n             // which guarantees this index is always within bounds.\n@@ -1449,9 +1442,9 @@ impl<'a> Formatter<'a> {\n             // is zero\n             Some(min) if self.sign_aware_zero_pad() => {\n                 let old_fill = crate::mem::replace(&mut self.fill, '0');\n-                let old_align = crate::mem::replace(&mut self.align, rt::v1::Alignment::Right);\n+                let old_align = crate::mem::replace(&mut self.align, rt::Alignment::Right);\n                 write_prefix(self, sign, prefix)?;\n-                let post_padding = self.padding(min - width, rt::v1::Alignment::Right)?;\n+                let post_padding = self.padding(min - width, Alignment::Right)?;\n                 self.buf.write_str(buf)?;\n                 post_padding.write(self)?;\n                 self.fill = old_fill;\n@@ -1460,7 +1453,7 @@ impl<'a> Formatter<'a> {\n             }\n             // Otherwise, the sign and prefix goes after the padding\n             Some(min) => {\n-                let post_padding = self.padding(min - width, rt::v1::Alignment::Right)?;\n+                let post_padding = self.padding(min - width, Alignment::Right)?;\n                 write_prefix(self, sign, prefix)?;\n                 self.buf.write_str(buf)?;\n                 post_padding.write(self)\n@@ -1535,7 +1528,7 @@ impl<'a> Formatter<'a> {\n                 // If we're under both the maximum and the minimum width, then fill\n                 // up the minimum width with the specified string + some alignment.\n                 else {\n-                    let align = rt::v1::Alignment::Left;\n+                    let align = Alignment::Left;\n                     let post_padding = self.padding(width - chars_count, align)?;\n                     self.buf.write_str(s)?;\n                     post_padding.write(self)\n@@ -1550,17 +1543,19 @@ impl<'a> Formatter<'a> {\n     pub(crate) fn padding(\n         &mut self,\n         padding: usize,\n-        default: rt::v1::Alignment,\n+        default: Alignment,\n     ) -> result::Result<PostPadding, Error> {\n         let align = match self.align {\n-            rt::v1::Alignment::Unknown => default,\n-            _ => self.align,\n+            rt::Alignment::Unknown => default,\n+            rt::Alignment::Left => Alignment::Left,\n+            rt::Alignment::Right => Alignment::Right,\n+            rt::Alignment::Center => Alignment::Center,\n         };\n \n         let (pre_pad, post_pad) = match align {\n-            rt::v1::Alignment::Left => (0, padding),\n-            rt::v1::Alignment::Right | rt::v1::Alignment::Unknown => (padding, 0),\n-            rt::v1::Alignment::Center => (padding / 2, (padding + 1) / 2),\n+            Alignment::Left => (0, padding),\n+            Alignment::Right => (padding, 0),\n+            Alignment::Center => (padding / 2, (padding + 1) / 2),\n         };\n \n         for _ in 0..pre_pad {\n@@ -1580,7 +1575,6 @@ impl<'a> Formatter<'a> {\n             let mut formatted = formatted.clone();\n             let old_fill = self.fill;\n             let old_align = self.align;\n-            let mut align = old_align;\n             if self.sign_aware_zero_pad() {\n                 // a sign always goes first\n                 let sign = formatted.sign;\n@@ -1589,9 +1583,8 @@ impl<'a> Formatter<'a> {\n                 // remove the sign from the formatted parts\n                 formatted.sign = \"\";\n                 width = width.saturating_sub(sign.len());\n-                align = rt::v1::Alignment::Right;\n                 self.fill = '0';\n-                self.align = rt::v1::Alignment::Right;\n+                self.align = rt::Alignment::Right;\n             }\n \n             // remaining parts go through the ordinary padding process.\n@@ -1600,7 +1593,7 @@ impl<'a> Formatter<'a> {\n                 // no padding\n                 self.write_formatted_parts(&formatted)\n             } else {\n-                let post_padding = self.padding(width - len, align)?;\n+                let post_padding = self.padding(width - len, Alignment::Right)?;\n                 self.write_formatted_parts(&formatted)?;\n                 post_padding.write(self)\n             };\n@@ -1788,10 +1781,10 @@ impl<'a> Formatter<'a> {\n     #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n     pub fn align(&self) -> Option<Alignment> {\n         match self.align {\n-            rt::v1::Alignment::Left => Some(Alignment::Left),\n-            rt::v1::Alignment::Right => Some(Alignment::Right),\n-            rt::v1::Alignment::Center => Some(Alignment::Center),\n-            rt::v1::Alignment::Unknown => None,\n+            rt::Alignment::Left => Some(Alignment::Left),\n+            rt::Alignment::Right => Some(Alignment::Right),\n+            rt::Alignment::Center => Some(Alignment::Center),\n+            rt::Alignment::Unknown => None,\n         }\n     }\n "}, {"sha": "2c1a767691b8b96af70f5200f03e43b7ed915347", "filename": "library/core/src/fmt/rt.rs", "status": "renamed", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc/library%2Fcore%2Fsrc%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc/library%2Fcore%2Fsrc%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Frt.rs?ref=8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc", "patch": "@@ -1,28 +1,20 @@\n-//! This is an internal module used by the ifmt! runtime. These structures are\n-//! emitted to static arrays to precompile format strings ahead of time.\n-//!\n-//! These definitions are similar to their `ct` equivalents, but differ in that\n-//! these can be statically allocated and are slightly optimized for the runtime\n #![allow(missing_debug_implementations)]\n+#![unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n+\n+//! These are the lang items used by format_args!().\n \n #[lang = \"format_placeholder\"]\n #[derive(Copy, Clone)]\n-// FIXME: Rename this to Placeholder\n-pub struct Argument {\n+pub struct Placeholder {\n     pub position: usize,\n-    pub format: FormatSpec,\n-}\n-\n-#[derive(Copy, Clone)]\n-pub struct FormatSpec {\n     pub fill: char,\n     pub align: Alignment,\n     pub flags: u32,\n     pub precision: Count,\n     pub width: Count,\n }\n \n-impl Argument {\n+impl Placeholder {\n     #[inline(always)]\n     pub const fn new(\n         position: usize,\n@@ -32,7 +24,7 @@ impl Argument {\n         precision: Count,\n         width: Count,\n     ) -> Self {\n-        Self { position, format: FormatSpec { fill, align, flags, precision, width } }\n+        Self { position, fill, align, flags, precision, width }\n     }\n }\n ", "previous_filename": "library/core/src/fmt/rt/v1.rs"}, {"sha": "b08d5782ab6f45f27557d9be00ae0abba197beec", "filename": "library/core/src/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc", "patch": "@@ -1172,7 +1172,7 @@ impl fmt::Debug for Duration {\n                         emit_without_padding(f)\n                     } else {\n                         // We need to add padding. Use the `Formatter::padding` helper function.\n-                        let default_align = crate::fmt::rt::v1::Alignment::Left;\n+                        let default_align = fmt::Alignment::Left;\n                         let post_padding = f.padding(requested_w - actual_w, default_align)?;\n                         emit_without_padding(f)?;\n                         post_padding.write(f)"}]}