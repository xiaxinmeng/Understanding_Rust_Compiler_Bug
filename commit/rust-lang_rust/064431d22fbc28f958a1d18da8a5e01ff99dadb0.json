{"sha": "064431d22fbc28f958a1d18da8a5e01ff99dadb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NDQzMWQyMmZiYzI4Zjk1OGExZDE4ZGE4YTVlMDFmZjk5ZGFkYjA=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-11T21:48:48Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-13T18:33:32Z"}, "message": "Re-add old tests for empty range loops", "tree": {"sha": "ff065b88e638e35890dc37f072cf880add39b4c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff065b88e638e35890dc37f072cf880add39b4c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/064431d22fbc28f958a1d18da8a5e01ff99dadb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/064431d22fbc28f958a1d18da8a5e01ff99dadb0", "html_url": "https://github.com/rust-lang/rust/commit/064431d22fbc28f958a1d18da8a5e01ff99dadb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/064431d22fbc28f958a1d18da8a5e01ff99dadb0/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "html_url": "https://github.com/rust-lang/rust/commit/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b"}], "stats": {"total": 210, "additions": 210, "deletions": 0}, "files": [{"sha": "f1503ed6d12f9437302a1fd16b08e865766506ff", "filename": "tests/ui/reversed_empty_ranges_loops_fixable.fixed", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/064431d22fbc28f958a1d18da8a5e01ff99dadb0/tests%2Fui%2Freversed_empty_ranges_loops_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/064431d22fbc28f958a1d18da8a5e01ff99dadb0/tests%2Fui%2Freversed_empty_ranges_loops_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_loops_fixable.fixed?ref=064431d22fbc28f958a1d18da8a5e01ff99dadb0", "patch": "@@ -0,0 +1,57 @@\n+// run-rustfix\n+#![warn(clippy::reversed_empty_ranges)]\n+\n+fn main() {\n+    const MAX_LEN: usize = 42;\n+\n+    for i in (0..10).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (0..=10).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (0..MAX_LEN).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 5..=5 {\n+        // not an error, this is the range with only one element \u201c5\u201d\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 0..10 {\n+        // not an error, the start index is less than the end index\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in -10..0 {\n+        // not an error\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (0..10).rev().map(|x| x * 2) {\n+        println!(\"{}\", i);\n+    }\n+\n+    // testing that the empty range lint folds constants\n+    for i in (5 + 4..10).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in ((3 - 1)..(5 + 2)).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (2 * 2)..(2 * 3) {\n+        // no error, 4..6 is fine\n+        println!(\"{}\", i);\n+    }\n+\n+    let x = 42;\n+    for i in x..10 {\n+        // no error, not constant-foldable\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "a733788dc22c1a2bf852644569375ec7ec1ea449", "filename": "tests/ui/reversed_empty_ranges_loops_fixable.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/064431d22fbc28f958a1d18da8a5e01ff99dadb0/tests%2Fui%2Freversed_empty_ranges_loops_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/064431d22fbc28f958a1d18da8a5e01ff99dadb0/tests%2Fui%2Freversed_empty_ranges_loops_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_loops_fixable.rs?ref=064431d22fbc28f958a1d18da8a5e01ff99dadb0", "patch": "@@ -0,0 +1,57 @@\n+// run-rustfix\n+#![warn(clippy::reversed_empty_ranges)]\n+\n+fn main() {\n+    const MAX_LEN: usize = 42;\n+\n+    for i in 10..0 {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 10..=0 {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in MAX_LEN..0 {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 5..=5 {\n+        // not an error, this is the range with only one element \u201c5\u201d\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 0..10 {\n+        // not an error, the start index is less than the end index\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in -10..0 {\n+        // not an error\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (10..0).map(|x| x * 2) {\n+        println!(\"{}\", i);\n+    }\n+\n+    // testing that the empty range lint folds constants\n+    for i in 10..5 + 4 {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (5 + 2)..(3 - 1) {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (2 * 2)..(2 * 3) {\n+        // no error, 4..6 is fine\n+        println!(\"{}\", i);\n+    }\n+\n+    let x = 42;\n+    for i in x..10 {\n+        // no error, not constant-foldable\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "e89e040a0ff9e0ae5f3b49e2eaf00f85bebf556b", "filename": "tests/ui/reversed_empty_ranges_loops_fixable.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/064431d22fbc28f958a1d18da8a5e01ff99dadb0/tests%2Fui%2Freversed_empty_ranges_loops_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/064431d22fbc28f958a1d18da8a5e01ff99dadb0/tests%2Fui%2Freversed_empty_ranges_loops_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_loops_fixable.stderr?ref=064431d22fbc28f958a1d18da8a5e01ff99dadb0", "patch": "@@ -0,0 +1,69 @@\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_fixable.rs:7:14\n+   |\n+LL |     for i in 10..0 {\n+   |              ^^^^^\n+   |\n+   = note: `-D clippy::reversed-empty-ranges` implied by `-D warnings`\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for i in (0..10).rev() {\n+   |              ^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_fixable.rs:11:14\n+   |\n+LL |     for i in 10..=0 {\n+   |              ^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for i in (0..=10).rev() {\n+   |              ^^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_fixable.rs:15:14\n+   |\n+LL |     for i in MAX_LEN..0 {\n+   |              ^^^^^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for i in (0..MAX_LEN).rev() {\n+   |              ^^^^^^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_fixable.rs:34:14\n+   |\n+LL |     for i in (10..0).map(|x| x * 2) {\n+   |              ^^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for i in (0..10).rev().map(|x| x * 2) {\n+   |              ^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_fixable.rs:39:14\n+   |\n+LL |     for i in 10..5 + 4 {\n+   |              ^^^^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for i in (5 + 4..10).rev() {\n+   |              ^^^^^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_fixable.rs:43:14\n+   |\n+LL |     for i in (5 + 2)..(3 - 1) {\n+   |              ^^^^^^^^^^^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for i in ((3 - 1)..(5 + 2)).rev() {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "c4c572244168b70fdae81f1c115674b0617e740c", "filename": "tests/ui/reversed_empty_ranges_loops_unfixable.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/064431d22fbc28f958a1d18da8a5e01ff99dadb0/tests%2Fui%2Freversed_empty_ranges_loops_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/064431d22fbc28f958a1d18da8a5e01ff99dadb0/tests%2Fui%2Freversed_empty_ranges_loops_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_loops_unfixable.rs?ref=064431d22fbc28f958a1d18da8a5e01ff99dadb0", "patch": "@@ -0,0 +1,11 @@\n+#![warn(clippy::reversed_empty_ranges)]\n+\n+fn main() {\n+    for i in 5..5 {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (5 + 2)..(8 - 1) {\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "30095d20cfd41154df5eca93c924ab3578ca83b5", "filename": "tests/ui/reversed_empty_ranges_loops_unfixable.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/064431d22fbc28f958a1d18da8a5e01ff99dadb0/tests%2Fui%2Freversed_empty_ranges_loops_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/064431d22fbc28f958a1d18da8a5e01ff99dadb0/tests%2Fui%2Freversed_empty_ranges_loops_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_loops_unfixable.stderr?ref=064431d22fbc28f958a1d18da8a5e01ff99dadb0", "patch": "@@ -0,0 +1,16 @@\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_unfixable.rs:4:14\n+   |\n+LL |     for i in 5..5 {\n+   |              ^^^^\n+   |\n+   = note: `-D clippy::reversed-empty-ranges` implied by `-D warnings`\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_unfixable.rs:8:14\n+   |\n+LL |     for i in (5 + 2)..(8 - 1) {\n+   |              ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}