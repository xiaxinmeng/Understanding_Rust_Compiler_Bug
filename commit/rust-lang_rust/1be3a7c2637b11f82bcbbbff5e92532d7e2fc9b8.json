{"sha": "1be3a7c2637b11f82bcbbbff5e92532d7e2fc9b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZTNhN2MyNjM3YjExZjgyYmNiYmJmZjVlOTI1MzJkN2UyZmM5Yjg=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-01-26T16:42:50Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-01-28T17:18:34Z"}, "message": "core: add (,r)position(,_from) functions\n\nThis is to help search through a vector better.", "tree": {"sha": "071e611462b0e9e975fa77f8476217bc935cffdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/071e611462b0e9e975fa77f8476217bc935cffdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1be3a7c2637b11f82bcbbbff5e92532d7e2fc9b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1be3a7c2637b11f82bcbbbff5e92532d7e2fc9b8", "html_url": "https://github.com/rust-lang/rust/commit/1be3a7c2637b11f82bcbbbff5e92532d7e2fc9b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1be3a7c2637b11f82bcbbbff5e92532d7e2fc9b8/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "259636a112804b94530c409a468b97d4366bb0d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/259636a112804b94530c409a468b97d4366bb0d3", "html_url": "https://github.com/rust-lang/rust/commit/259636a112804b94530c409a468b97d4366bb0d3"}], "stats": {"total": 140, "additions": 137, "deletions": 3}, "files": [{"sha": "78274e2ae3791dd5cc02b0c808eaf650f44a0577", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 137, "deletions": 3, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/1be3a7c2637b11f82bcbbbff5e92532d7e2fc9b8/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be3a7c2637b11f82bcbbbff5e92532d7e2fc9b8/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=1be3a7c2637b11f82bcbbbff5e92532d7e2fc9b8", "patch": "@@ -630,11 +630,79 @@ fn position_elt<T>(v: [T], x: T) -> option::t<uint> {\n /*\n Function: position\n \n-Find the first index for which the value matches some predicate\n+Find the first index matching some predicate\n+\n+Apply function `f` to each element of `v`.  When function `f` returns true\n+then an option containing the index is returned. If `f` matches no elements\n+then none is returned.\n */\n fn position<T>(v: [T], f: fn(T) -> bool) -> option::t<uint> {\n-    let i: uint = 0u;\n-    while i < len(v) { if f(v[i]) { ret some::<uint>(i); } i += 1u; }\n+    position_from(v, 0u, len(v), f)\n+}\n+\n+/*\n+Function: position_from\n+\n+Find the first index matching some predicate within a range\n+\n+Apply function `f` to each element of `v` between the range [`start`, `end`).\n+When function `f` returns true then an option containing the index is\n+returned. If `f` matches no elements then none is returned.\n+*/\n+fn position_from<T>(v: [T], start: uint, end: uint, f: fn(T) -> bool) ->\n+  option::t<uint> {\n+    assert start <= end;\n+    assert end <= len(v);\n+    let i = start;\n+    while i < end { if f(v[i]) { ret some::<uint>(i); } i += 1u; }\n+    ret none;\n+}\n+\n+/*\n+Function: rposition_elt\n+\n+Find the last index containing a matching value\n+\n+Returns:\n+\n+option::some(uint) - The last index containing a matching value\n+option::none - No elements matched\n+*/\n+fn rposition_elt<T>(v: [T], x: T) -> option::t<uint> {\n+    rposition(v) { |y| x == y }\n+}\n+\n+/*\n+Function: rposition\n+\n+Find the last index matching some predicate\n+\n+Apply function `f` to each element of `v` in reverse order.  When function\n+`f` returns true then an option containing the index is returned. If `f`\n+matches no elements then none is returned.\n+*/\n+fn rposition<T>(v: [T], f: fn(T) -> bool) -> option::t<uint> {\n+    rposition_from(v, 0u, len(v), f)\n+}\n+\n+/*\n+Function: rposition_from\n+\n+Find the last index matching some predicate within a range\n+\n+Apply function `f` to each element of `v` in reverse order between the range\n+[`start`, `end`). When function `f` returns true then an option containing\n+the index is returned. If `f` matches no elements then none is returned.\n+*/\n+fn rposition_from<T>(v: [T], start: uint, end: uint, f: fn(T) -> bool) ->\n+  option::t<uint> {\n+    assert start <= end;\n+    assert end <= len(v);\n+    let i = end;\n+    while i > start {\n+        if f(v[i - 1u]) { ret some::<uint>(i - 1u); }\n+        i -= 1u;\n+    }\n     ret none;\n }\n \n@@ -1474,6 +1542,72 @@ mod tests {\n     }\n \n     #[test]\n+    fn test_position_from() {\n+        assert position_from([], 0u, 0u, f) == none;\n+\n+        fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n+        let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+\n+        assert position_from(v, 0u, 0u, f) == none;\n+        assert position_from(v, 0u, 1u, f) == none;\n+        assert position_from(v, 0u, 2u, f) == some(1u);\n+        assert position_from(v, 0u, 3u, f) == some(1u);\n+        assert position_from(v, 0u, 4u, f) == some(1u);\n+\n+        assert position_from(v, 1u, 1u, f) == none;\n+        assert position_from(v, 1u, 2u, f) == some(1u);\n+        assert position_from(v, 1u, 3u, f) == some(1u);\n+        assert position_from(v, 1u, 4u, f) == some(1u);\n+\n+        assert position_from(v, 2u, 2u, f) == none;\n+        assert position_from(v, 2u, 3u, f) == none;\n+        assert position_from(v, 2u, 4u, f) == some(3u);\n+\n+        assert position_from(v, 3u, 3u, f) == none;\n+        assert position_from(v, 3u, 4u, f) == some(3u);\n+\n+        assert position_from(v, 4u, 4u, f) == none;\n+    }\n+\n+    #[test]\n+    fn test_rposition() {\n+        assert find([], f) == none;\n+\n+        fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n+        fn g(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'd' }\n+        let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+\n+        assert position(v, f) == some(1u);\n+        assert position(v, g) == none;\n+    }\n+\n+    #[test]\n+    fn test_rposition_from() {\n+        assert rposition_from([], 0u, 0u, f) == none;\n+\n+        fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n+        let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+\n+        assert rposition_from(v, 0u, 0u, f) == none;\n+        assert rposition_from(v, 0u, 1u, f) == none;\n+        assert rposition_from(v, 0u, 2u, f) == some(1u);\n+        assert rposition_from(v, 0u, 3u, f) == some(1u);\n+        assert rposition_from(v, 0u, 4u, f) == some(3u);\n+\n+        assert rposition_from(v, 1u, 1u, f) == none;\n+        assert rposition_from(v, 1u, 2u, f) == some(1u);\n+        assert rposition_from(v, 1u, 3u, f) == some(1u);\n+        assert rposition_from(v, 1u, 4u, f) == some(3u);\n+\n+        assert rposition_from(v, 2u, 2u, f) == none;\n+        assert rposition_from(v, 2u, 3u, f) == none;\n+        assert rposition_from(v, 2u, 4u, f) == some(3u);\n+\n+        assert rposition_from(v, 3u, 3u, f) == none;\n+        assert rposition_from(v, 3u, 4u, f) == some(3u);\n+\n+        assert rposition_from(v, 4u, 4u, f) == none;\n+    }\n     fn reverse_and_reversed() {\n         let v: [mutable int] = [mutable 10, 20];\n         assert (v[0] == 10);"}]}