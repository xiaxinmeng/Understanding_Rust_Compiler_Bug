{"sha": "534d71a852264cced80290afb2f994b179ddb40a", "node_id": "C_kwDOAAsO6NoAKDUzNGQ3MWE4NTIyNjRjY2VkODAyOTBhZmIyZjk5NGIxNzlkZGI0MGE", "commit": {"author": {"name": "Hongxu Xu", "email": "xuhongxu96@hotmail.com", "date": "2022-06-16T00:52:57Z"}, "committer": {"name": "Hongxu Xu", "email": "xuhongxu96@hotmail.com", "date": "2022-06-16T00:52:57Z"}, "message": "disable private editable in TEST_CONFIG by default\nadjust test_visibility_filter test case", "tree": {"sha": "7a7518e560bd9412728abe877371cf3b5f32592d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a7518e560bd9412728abe877371cf3b5f32592d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/534d71a852264cced80290afb2f994b179ddb40a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/534d71a852264cced80290afb2f994b179ddb40a", "html_url": "https://github.com/rust-lang/rust/commit/534d71a852264cced80290afb2f994b179ddb40a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/534d71a852264cced80290afb2f994b179ddb40a/comments", "author": {"login": "xuhongxu96", "id": 2201482, "node_id": "MDQ6VXNlcjIyMDE0ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/2201482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xuhongxu96", "html_url": "https://github.com/xuhongxu96", "followers_url": "https://api.github.com/users/xuhongxu96/followers", "following_url": "https://api.github.com/users/xuhongxu96/following{/other_user}", "gists_url": "https://api.github.com/users/xuhongxu96/gists{/gist_id}", "starred_url": "https://api.github.com/users/xuhongxu96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xuhongxu96/subscriptions", "organizations_url": "https://api.github.com/users/xuhongxu96/orgs", "repos_url": "https://api.github.com/users/xuhongxu96/repos", "events_url": "https://api.github.com/users/xuhongxu96/events{/privacy}", "received_events_url": "https://api.github.com/users/xuhongxu96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xuhongxu96", "id": 2201482, "node_id": "MDQ6VXNlcjIyMDE0ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/2201482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xuhongxu96", "html_url": "https://github.com/xuhongxu96", "followers_url": "https://api.github.com/users/xuhongxu96/followers", "following_url": "https://api.github.com/users/xuhongxu96/following{/other_user}", "gists_url": "https://api.github.com/users/xuhongxu96/gists{/gist_id}", "starred_url": "https://api.github.com/users/xuhongxu96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xuhongxu96/subscriptions", "organizations_url": "https://api.github.com/users/xuhongxu96/orgs", "repos_url": "https://api.github.com/users/xuhongxu96/repos", "events_url": "https://api.github.com/users/xuhongxu96/events{/privacy}", "received_events_url": "https://api.github.com/users/xuhongxu96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "549c810436669378c05fa1847be2471cc476d9e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/549c810436669378c05fa1847be2471cc476d9e8", "html_url": "https://github.com/rust-lang/rust/commit/549c810436669378c05fa1847be2471cc476d9e8"}], "stats": {"total": 148, "additions": 118, "deletions": 30}, "files": [{"sha": "4eb1fccd7d32787c01f83d8b3d91a8fc8fe50650", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 107, "deletions": 5, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/534d71a852264cced80290afb2f994b179ddb40a/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/534d71a852264cced80290afb2f994b179ddb40a/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=534d71a852264cced80290afb2f994b179ddb40a", "patch": "@@ -117,13 +117,20 @@ fn complete_methods(\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::tests::{check_edit, completion_list_no_kw};\n+    use crate::tests::{\n+        check_edit, completion_list_no_kw, completion_list_no_kw_with_private_editable,\n+    };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = completion_list_no_kw(ra_fixture);\n         expect.assert_eq(&actual);\n     }\n \n+    fn check_with_private_editable(ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list_no_kw_with_private_editable(ra_fixture);\n+        expect.assert_eq(&actual);\n+    }\n+\n     #[test]\n     fn test_struct_field_and_method_completion() {\n         check(\n@@ -200,6 +207,101 @@ pub mod m {\n }\n //- /main.rs crate:main deps:lib new_source_root:local\n fn foo(a: lib::m::A) { a.$0 }\n+\"#,\n+            expect![[r#\"\n+                fd pub_field u32\n+            \"#]],\n+        );\n+\n+        check(\n+            r#\"\n+//- /lib.rs crate:lib new_source_root:library\n+pub mod m {\n+    pub struct A {\n+        private_field: u32,\n+        pub pub_field: u32,\n+        pub(crate) crate_field: u32,\n+        pub(super) super_field: u32,\n+    }\n+}\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn foo(a: lib::m::A) { a.$0 }\n+\"#,\n+            expect![[r#\"\n+                fd pub_field u32\n+            \"#]],\n+        );\n+\n+        check(\n+            r#\"\n+//- /lib.rs crate:lib new_source_root:library\n+pub mod m {\n+    pub struct A(\n+        i32,\n+        pub f64,\n+    );\n+}\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn foo(a: lib::m::A) { a.$0 }\n+\"#,\n+            expect![[r#\"\n+                fd 1 f64\n+            \"#]],\n+        );\n+\n+        check(\n+            r#\"\n+//- /lib.rs crate:lib new_source_root:local\n+pub struct A {}\n+mod m {\n+    impl super::A {\n+        fn private_method(&self) {}\n+        pub(crate) fn crate_method(&self) {}\n+        pub fn pub_method(&self) {}\n+    }\n+}\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn foo(a: lib::A) { a.$0 }\n+\"#,\n+            expect![[r#\"\n+                me pub_method() fn(&self)\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+//- /lib.rs crate:lib new_source_root:library\n+pub struct A {}\n+mod m {\n+    impl super::A {\n+        fn private_method(&self) {}\n+        pub(crate) fn crate_method(&self) {}\n+        pub fn pub_method(&self) {}\n+    }\n+}\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn foo(a: lib::A) { a.$0 }\n+\"#,\n+            expect![[r#\"\n+                me pub_method() fn(&self)\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_visibility_filtering_with_private_editable_enabled() {\n+        check_with_private_editable(\n+            r#\"\n+//- /lib.rs crate:lib new_source_root:local\n+pub mod m {\n+    pub struct A {\n+        private_field: u32,\n+        pub pub_field: u32,\n+        pub(crate) crate_field: u32,\n+        pub(super) super_field: u32,\n+    }\n+}\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn foo(a: lib::m::A) { a.$0 }\n \"#,\n             expect![[r#\"\n                 fd crate_field   u32\n@@ -209,7 +311,7 @@ fn foo(a: lib::m::A) { a.$0 }\n             \"#]],\n         );\n \n-        check(\n+        check_with_private_editable(\n             r#\"\n //- /lib.rs crate:lib new_source_root:library\n pub mod m {\n@@ -228,7 +330,7 @@ fn foo(a: lib::m::A) { a.$0 }\n             \"#]],\n         );\n \n-        check(\n+        check_with_private_editable(\n             r#\"\n //- /lib.rs crate:lib new_source_root:library\n pub mod m {\n@@ -245,7 +347,7 @@ fn foo(a: lib::m::A) { a.$0 }\n             \"#]],\n         );\n \n-        check(\n+        check_with_private_editable(\n             r#\"\n //- /lib.rs crate:lib new_source_root:local\n pub struct A {}\n@@ -265,7 +367,7 @@ fn foo(a: lib::A) { a.$0 }\n                 me pub_method()     fn(&self)\n             \"#]],\n         );\n-        check(\n+        check_with_private_editable(\n             r#\"\n //- /lib.rs crate:lib new_source_root:library\n pub struct A {}"}, {"sha": "4be6acbe8461eef57bb1ca6686ac4459ec4346fe", "filename": "crates/ide-completion/src/tests.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/534d71a852264cced80290afb2f994b179ddb40a/crates%2Fide-completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/534d71a852264cced80290afb2f994b179ddb40a/crates%2Fide-completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests.rs?ref=534d71a852264cced80290afb2f994b179ddb40a", "patch": "@@ -65,7 +65,7 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n     enable_postfix_completions: true,\n     enable_imports_on_the_fly: true,\n     enable_self_on_the_fly: true,\n-    enable_private_editable: true,\n+    enable_private_editable: false,\n     callable: Some(CallableSnippets::FillArguments),\n     snippet_cap: SnippetCap::new(true),\n     insert_use: InsertUseConfig {\n@@ -86,6 +86,12 @@ pub(crate) fn completion_list_no_kw(ra_fixture: &str) -> String {\n     completion_list_with_config(TEST_CONFIG, ra_fixture, false, None)\n }\n \n+pub(crate) fn completion_list_no_kw_with_private_editable(ra_fixture: &str) -> String {\n+    let mut config = TEST_CONFIG.clone();\n+    config.enable_private_editable = true;\n+    completion_list_with_config(config, ra_fixture, false, None)\n+}\n+\n pub(crate) fn completion_list_with_trigger_character(\n     ra_fixture: &str,\n     trigger_character: Option<char>,"}, {"sha": "4535923b28b5a97713c2edc9e765f00734d69963", "filename": "crates/ide-completion/src/tests/special.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/534d71a852264cced80290afb2f994b179ddb40a/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/534d71a852264cced80290afb2f994b179ddb40a/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs?ref=534d71a852264cced80290afb2f994b179ddb40a", "patch": "@@ -2,21 +2,13 @@\n \n use expect_test::{expect, Expect};\n \n-use crate::{\n-    tests::{check_edit, completion_list_no_kw, completion_list_with_config, TEST_CONFIG},\n-    CompletionConfig,\n-};\n+use crate::tests::{check_edit, completion_list_no_kw};\n \n fn check(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list_no_kw(ra_fixture);\n     expect.assert_eq(&actual)\n }\n \n-fn check_with_config(config: CompletionConfig, ra_fixture: &str, expect: Expect) {\n-    let actual = completion_list_with_config(config, ra_fixture, false, None);\n-    expect.assert_eq(&actual)\n-}\n-\n #[test]\n fn completes_if_prefix_is_keyword() {\n     check_edit(\n@@ -647,11 +639,7 @@ fn bar() -> Bar {\n \n #[test]\n fn completes_fn_in_pub_trait_generated_by_macro() {\n-    let mut config = TEST_CONFIG.clone();\n-    config.enable_private_editable = false;\n-\n-    check_with_config(\n-        config,\n+    check(\n         r#\"\n mod other_mod {\n     macro_rules! make_method {\n@@ -685,11 +673,7 @@ fn main() {\n \n #[test]\n fn completes_fn_in_pub_trait_generated_by_recursive_macro() {\n-    let mut config = TEST_CONFIG.clone();\n-    config.enable_private_editable = false;\n-\n-    check_with_config(\n-        config,\n+    check(\n         r#\"\n mod other_mod {\n     macro_rules! make_method {\n@@ -729,11 +713,7 @@ fn main() {\n \n #[test]\n fn completes_const_in_pub_trait_generated_by_macro() {\n-    let mut config = TEST_CONFIG.clone();\n-    config.enable_private_editable = false;\n-\n-    check_with_config(\n-        config,\n+    check(\n         r#\"\n mod other_mod {\n     macro_rules! make_const {"}]}