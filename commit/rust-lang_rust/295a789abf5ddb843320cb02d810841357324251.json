{"sha": "295a789abf5ddb843320cb02d810841357324251", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NWE3ODlhYmY1ZGRiODQzMzIwY2IwMmQ4MTA4NDEzNTczMjQyNTE=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-24T15:16:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-24T15:16:32Z"}, "message": "Rollup merge of #43342 - ranweiler:no-std-exe-docs, r=alexcrichton\n\nDocument use of `compiler_builtins` with `no_std` binaries\n\nSee discussion in #43264.\n\nThe docs for the `compiler_builtins_lib` feature were removed in\nPR #42899. But, though the `compiler_builtins` library has been\nmigrated out-of-tree, the language feature remains, and is needed to\nuse the stand-alone crate. So, we reintroduce the docs for the\nfeature, and add a reference to them when describing how to create a\n`no_std` executable.", "tree": {"sha": "0e7e3c482661fc10139955451a9a9e158a0d9b69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e7e3c482661fc10139955451a9a9e158a0d9b69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/295a789abf5ddb843320cb02d810841357324251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/295a789abf5ddb843320cb02d810841357324251", "html_url": "https://github.com/rust-lang/rust/commit/295a789abf5ddb843320cb02d810841357324251", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/295a789abf5ddb843320cb02d810841357324251/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da241182ee752ab9a0383a780bc6f4cb286766d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/da241182ee752ab9a0383a780bc6f4cb286766d3", "html_url": "https://github.com/rust-lang/rust/commit/da241182ee752ab9a0383a780bc6f4cb286766d3"}, {"sha": "e74f6114052524bbc2498b43713a8bf1114d14f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e74f6114052524bbc2498b43713a8bf1114d14f8", "html_url": "https://github.com/rust-lang/rust/commit/e74f6114052524bbc2498b43713a8bf1114d14f8"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "ecbc860e25c03200be283cc7ab66a40f71a3e1d9", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/295a789abf5ddb843320cb02d810841357324251/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/295a789abf5ddb843320cb02d810841357324251/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=295a789abf5ddb843320cb02d810841357324251", "patch": "@@ -194,6 +194,14 @@ pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n }\n ```\n \n+In many cases, you may need to manually link to the `compiler_builtins` crate\n+when building a `no_std` binary. You may observe this via linker error messages\n+such as \"```undefined reference to `__rust_probestack'```\". Using this crate\n+also requires enabling the library feature `compiler_builtins_lib`. You can read\n+more about this [here][compiler-builtins-lib].\n+\n+[compiler-builtins-lib]: library-features/compiler-builtins-lib.html\n+\n ## More about the language items\n \n The compiler currently makes a few assumptions about symbols which are"}, {"sha": "6c71c3f2ce1917af1a8943b0d31735e99d3baa35", "filename": "src/doc/unstable-book/src/library-features/compiler-builtins-lib.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/295a789abf5ddb843320cb02d810841357324251/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcompiler-builtins-lib.md", "raw_url": "https://github.com/rust-lang/rust/raw/295a789abf5ddb843320cb02d810841357324251/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcompiler-builtins-lib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcompiler-builtins-lib.md?ref=295a789abf5ddb843320cb02d810841357324251", "patch": "@@ -0,0 +1,35 @@\n+# `compiler_builtins_lib`\n+\n+The tracking issue for this feature is: None.\n+\n+------------------------\n+\n+This feature is required to link to the `compiler_builtins` crate which contains\n+\"compiler intrinsics\". Compiler intrinsics are software implementations of basic\n+operations like multiplication of `u64`s. These intrinsics are only required on\n+platforms where these operations don't directly map to a hardware instruction.\n+\n+You should never need to explicitly link to the `compiler_builtins` crate when\n+building \"std\" programs as `compiler_builtins` is already in the dependency\n+graph of `std`. But you may need it when building `no_std` **binary** crates. If\n+you get a *linker* error like:\n+\n+``` text\n+$PWD/src/main.rs:11: undefined reference to `__aeabi_lmul'\n+$PWD/src/main.rs:11: undefined reference to `__aeabi_uldivmod'\n+```\n+\n+That means that you need to link to this crate.\n+\n+When you link to this crate, make sure it only appears once in your crate\n+dependency graph. Also, it doesn't matter where in the dependency graph you\n+place the `compiler_builtins` crate.\n+\n+<!-- NOTE(ignore) doctests don't support `no_std` binaries -->\n+\n+``` rust,ignore\n+#![feature(compiler_builtins_lib)]\n+#![no_std]\n+\n+extern crate compiler_builtins;\n+```"}, {"sha": "a2a264490a141848c2289953db12b9d3ef658f9e", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/295a789abf5ddb843320cb02d810841357324251/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295a789abf5ddb843320cb02d810841357324251/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=295a789abf5ddb843320cb02d810841357324251", "patch": "@@ -247,6 +247,18 @@ pub fn collect_lang_features(base_src_path: &Path) -> Features {\n \n pub fn collect_lib_features(base_src_path: &Path) -> Features {\n     let mut lib_features = Features::new();\n+\n+    // This library feature is defined in the `compiler_builtins` crate, which\n+    // has been moved out-of-tree. Now it can no longer be auto-discovered by\n+    // `tidy`, because we need to filter out its (submodule) directory. Manually\n+    // add it to the set of known library features so we can still generate docs.\n+    lib_features.insert(\"compiler_builtins_lib\".to_owned(), Feature {\n+        level: Status::Unstable,\n+        since: \"\".to_owned(),\n+        has_gate_test: false,\n+        tracking_issue: None,\n+    });\n+\n     map_lib_features(base_src_path,\n                      &mut |res, _, _| {\n         match res {"}]}