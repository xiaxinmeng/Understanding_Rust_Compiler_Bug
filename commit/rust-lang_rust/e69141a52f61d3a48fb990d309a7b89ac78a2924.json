{"sha": "e69141a52f61d3a48fb990d309a7b89ac78a2924", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2OTE0MWE1MmY2MWQzYTQ4ZmI5OTBkMzA5YTdiODlhYzc4YTI5MjQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-22T14:41:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-22T14:41:09Z"}, "message": "Rollup merge of #71280 - RalfJung:mplace-check-align, r=oli-obk\n\nMiri: mplace_access_checked: offer option to force different alignment on place\n\nRequired to solve https://github.com/rust-lang/miri/issues/1339 in https://github.com/rust-lang/miri/pull/1348.\n\nr? @oli-obk", "tree": {"sha": "b9fbdc9509f11a387d50948424303e37266a368a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9fbdc9509f11a387d50948424303e37266a368a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e69141a52f61d3a48fb990d309a7b89ac78a2924", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeoFeFCRBK7hj4Ov3rIwAAdHIIAHfJelphPDhBmGqTu1v9OSYD\nHuMW4q2d7iLyesQJ0XyjicazluFP3vVcYsNO5a4YIV3cK2/b8cpn2zE7EgifTSzM\nBPbaNuhMKqtHK9096tLB0henqEO4hqcjXg17UcIZcxVE4nZneIy/jCjoqW0fYodM\nzYfXNcqPZrBV+i+H0aZ87rQOvyUvD3y+J28IpvCzUGek+op7Nf0pjA6Lr5os05P9\nwguWm/cCk5sv48LQvJsRDQpaYU4aBj1bYQB5PG9Coet5JVQ3sYnDPyfefpqX6nsA\nX5ROUYejQU5gcC84aQtaqA3fAlC+9J7NQjfUFAJPKoqTlPfGBCu68Rn5pgvg7y0=\n=gSX9\n-----END PGP SIGNATURE-----\n", "payload": "tree b9fbdc9509f11a387d50948424303e37266a368a\nparent 00f677d8974b393ff32ca25bf916b6b9650c75b0\nparent 5449e0f10f84bdf964c5d38e03f11ae2190e94d1\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587566469 +0200\ncommitter GitHub <noreply@github.com> 1587566469 +0200\n\nRollup merge of #71280 - RalfJung:mplace-check-align, r=oli-obk\n\nMiri: mplace_access_checked: offer option to force different alignment on place\n\nRequired to solve https://github.com/rust-lang/miri/issues/1339 in https://github.com/rust-lang/miri/pull/1348.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e69141a52f61d3a48fb990d309a7b89ac78a2924", "html_url": "https://github.com/rust-lang/rust/commit/e69141a52f61d3a48fb990d309a7b89ac78a2924", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e69141a52f61d3a48fb990d309a7b89ac78a2924/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00f677d8974b393ff32ca25bf916b6b9650c75b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/00f677d8974b393ff32ca25bf916b6b9650c75b0", "html_url": "https://github.com/rust-lang/rust/commit/00f677d8974b393ff32ca25bf916b6b9650c75b0"}, {"sha": "5449e0f10f84bdf964c5d38e03f11ae2190e94d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5449e0f10f84bdf964c5d38e03f11ae2190e94d1", "html_url": "https://github.com/rust-lang/rust/commit/5449e0f10f84bdf964c5d38e03f11ae2190e94d1"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "348958ee6c59a77e287b59cf3c2091f09128cff7", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e69141a52f61d3a48fb990d309a7b89ac78a2924/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69141a52f61d3a48fb990d309a7b89ac78a2924/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=e69141a52f61d3a48fb990d309a7b89ac78a2924", "patch": "@@ -333,7 +333,7 @@ where\n         let val = self.read_immediate(src)?;\n         trace!(\"deref to {} on {:?}\", val.layout.ty, *val);\n         let place = self.ref_to_mplace(val)?;\n-        self.mplace_access_checked(place)\n+        self.mplace_access_checked(place, None)\n     }\n \n     /// Check if the given place is good for memory access with the given\n@@ -358,15 +358,20 @@ where\n \n     /// Return the \"access-checked\" version of this `MPlace`, where for non-ZST\n     /// this is definitely a `Pointer`.\n+    ///\n+    /// `force_align` must only be used when correct alignment does not matter,\n+    /// like in Stacked Borrows.\n     pub fn mplace_access_checked(\n         &self,\n         mut place: MPlaceTy<'tcx, M::PointerTag>,\n+        force_align: Option<Align>,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         let (size, align) = self\n             .size_and_align_of_mplace(place)?\n             .unwrap_or((place.layout.size, place.layout.align.abi));\n         assert!(place.mplace.align <= align, \"dynamic alignment less strict than static one?\");\n-        place.mplace.align = align; // maximally strict checking\n+        // Check (stricter) dynamic alignment, unless forced otherwise.\n+        place.mplace.align = force_align.unwrap_or(align);\n         // When dereferencing a pointer, it must be non-NULL, aligned, and live.\n         if let Some(ptr) = self.check_mplace_access(place, Some(size))? {\n             place.mplace.ptr = ptr.into();"}]}