{"sha": "a2393e665d484b088773dea58e9f4fa92e8871a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMzkzZTY2NWQ0ODRiMDg4NzczZGVhNThlOWY0ZmE5MmU4ODcxYTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T21:38:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T21:38:39Z"}, "message": "WIP -- improve documentation on the phantom traits", "tree": {"sha": "9aeea9d1d7e6101f116b69c8472c67b4baff373c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aeea9d1d7e6101f116b69c8472c67b4baff373c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2393e665d484b088773dea58e9f4fa92e8871a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2393e665d484b088773dea58e9f4fa92e8871a7", "html_url": "https://github.com/rust-lang/rust/commit/a2393e665d484b088773dea58e9f4fa92e8871a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2393e665d484b088773dea58e9f4fa92e8871a7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8cb11c7e39d896a6d361e86470cf3dcae8856a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8cb11c7e39d896a6d361e86470cf3dcae8856a9", "html_url": "https://github.com/rust-lang/rust/commit/e8cb11c7e39d896a6d361e86470cf3dcae8856a9"}], "stats": {"total": 76, "additions": 71, "deletions": 5}, "files": [{"sha": "0e217f6d574dde3a5283a9d4172b178bb466addc", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 71, "deletions": 5, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a2393e665d484b088773dea58e9f4fa92e8871a7/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2393e665d484b088773dea58e9f4fa92e8871a7/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=a2393e665d484b088773dea58e9f4fa92e8871a7", "patch": "@@ -282,11 +282,65 @@ macro_rules! impls{\n pub trait MarkerTrait : PhantomFn<Self> { }\n impl<T:?Sized> MarkerTrait for T { }\n \n-/// `PhantomFn` is a marker trait for use with traits that do not\n-/// include any methods.\n+/// `PhantomFn` is a marker trait for use with traits that contain\n+/// type or lifetime parameters that do not appear in any of their\n+/// methods. In that case, you can either remove those parameters, or\n+/// add a `PhantomFn` supertrait that reflects the signature of\n+/// methods that compiler should \"pretend\" exists. This most commonly\n+/// occurs for traits with no methods: in that particular case, you\n+/// can extend `MarkerTrait`, which is equivalent to\n+/// `PhantomFn<Self>`.\n+///\n+/// # Example\n+///\n+/// As an example, consider a trait with no methods like `Even`, meant\n+/// to represent types that are \"even\":\n+///\n+/// ```rust\n+/// trait Even { }\n+/// ```\n ///\n-/// FIXME. Better documentation needed here!\n+/// In this case, because the implicit parameter `Self` is unused, the\n+/// compiler will issue an error. The only purpose of this trait is to\n+/// categorize types (and hence instances of those types) as \"even\" or\n+/// not, so if we *were* going to have a method, it might look like:\n+///\n+/// ```rust\n+/// trait Even {\n+///     fn is_even(self) -> bool { true }\n+/// }\n+/// ```\n+///\n+/// Therefore, we can model a method like this as follows:\n+///\n+/// ```rust\n+/// use std::marker::PhantomFn\n+/// trait Even : PhantomFn<Self> { }\n+/// ```\n+///\n+/// Another equivalent, but clearer, option would be to use\n+/// `MarkerTrait`:\n+///\n+/// ```rust\n+/// use std::marker::MarkerTrait;\n+/// trait Even : MarkerTrait { }\n+/// ```\n+///\n+/// # Parameters\n+///\n+/// - `A` represents the type of the method's argument. You can use a\n+///   tuple to represent \"multiple\" arguments. Any types appearing here\n+///   will be considered \"contravariant\".\n+/// - `R`, if supplied, represents the method's return type. This defaults\n+///   to `()` as it is rarely needed.\n+///\n+/// # Additional reading\n+///\n+/// More details and background can be found in [RFC 738][738].\n+///\n+/// [738]: https://github.com/rust-lang/rfcs/blob/master/text/0738-variance.md\n #[lang=\"phantom_fn\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait PhantomFn<A:?Sized,R:?Sized=()> { }\n \n #[cfg(stage0)] // built into the trait matching system after stage0\n@@ -298,18 +352,30 @@ impl<A:?Sized, R:?Sized, U:?Sized> PhantomFn<A,R> for U { }\n pub struct PhantomData<T:?Sized>;\n \n /// `PhantomData` is a way to tell the compiler about fake fields.\n+/// Phantom data is required whenever type parameters are not used.\n /// The idea is that if the compiler encounters a `PhantomData<T>`\n /// instance, it will behave *as if* an instance of the type `T` were\n /// present for the purpose of various automatic analyses.\n ///\n-/// FIXME. Better documentation needed here!\n+/// For example, embedding a `PhantomData<T>` will inform the compiler\n+/// that one or more instances of the type `T` could be dropped when\n+/// instances of the type itself is dropped, though that may not be\n+/// apparent from the other structure of the type itself. This is\n+/// commonly necessary if the structure is using an unsafe pointer\n+/// like `*mut T` whose referent may be dropped when the type is\n+/// dropped, as a `*mut T` is otherwise not treated as owned.\n+///\n+/// FIXME. Better documentation and examples of common patterns needed\n+/// here! For now, please see [RFC 738][738] for more information.\n+///\n+/// [738]: https://github.com/rust-lang/rfcs/blob/master/text/0738-variance.md\n #[cfg(not(stage0))]\n #[lang=\"phantom_data\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PhantomData<T:?Sized>;\n \n impls! { PhantomData }\n \n-\n #[cfg(not(stage0))]\n mod impls {\n     use super::{Send, Sync, Sized};"}]}