{"sha": "d46a2078b4e450e163a44502c42fc4a326943d03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NmEyMDc4YjRlNDUwZTE2M2E0NDUwMmM0MmZjNGEzMjY5NDNkMDM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-08T16:06:27Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-12T13:24:45Z"}, "message": "Deduplicate field and variant visitor methods", "tree": {"sha": "bb177c6af351dfdf000f05fefed5c5b711e1cf67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb177c6af351dfdf000f05fefed5c5b711e1cf67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d46a2078b4e450e163a44502c42fc4a326943d03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d46a2078b4e450e163a44502c42fc4a326943d03", "html_url": "https://github.com/rust-lang/rust/commit/d46a2078b4e450e163a44502c42fc4a326943d03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d46a2078b4e450e163a44502c42fc4a326943d03/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b174b0b95536d487e02fa87fac20e6c1b0316b85", "url": "https://api.github.com/repos/rust-lang/rust/commits/b174b0b95536d487e02fa87fac20e6c1b0316b85", "html_url": "https://github.com/rust-lang/rust/commit/b174b0b95536d487e02fa87fac20e6c1b0316b85"}], "stats": {"total": 47, "additions": 22, "deletions": 25}, "files": [{"sha": "3d00dce8b0428f51d403e09b56d92b9e8b336598", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d46a2078b4e450e163a44502c42fc4a326943d03/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46a2078b4e450e163a44502c42fc4a326943d03/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=d46a2078b4e450e163a44502c42fc4a326943d03", "patch": "@@ -167,12 +167,12 @@ struct ValidityVisitor<'rt, 'a: 'rt, 'mir: 'rt, 'tcx: 'a+'rt+'mir, M: Machine<'a\n }\n \n impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> ValidityVisitor<'rt, 'a, 'mir, 'tcx, M> {\n-    fn push_aggregate_field_path_elem(\n+    fn aggregate_field_path_elem(\n         &mut self,\n         layout: TyLayout<'tcx>,\n         field: usize,\n-    ) {\n-        let elem = match layout.ty.sty {\n+    ) -> PathElem {\n+        match layout.ty.sty {\n             // generators and closures.\n             ty::Closure(def_id, _) | ty::Generator(def_id, _, _) => {\n                 if let Some(upvar) = self.ecx.tcx.optimized_mir(def_id).upvar_decls.get(field) {\n@@ -194,11 +194,7 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> ValidityVisitor<'rt, 'a, '\n                     layout::Variants::Single { index } =>\n                         // Inside a variant\n                         PathElem::Field(def.variants[index].fields[field].ident.name),\n-                    _ => {\n-                        // Enums have no fields other than their tag\n-                        assert_eq!(field, 0);\n-                        PathElem::Tag\n-                    }\n+                    _ => bug!(),\n                 }\n             }\n \n@@ -213,8 +209,22 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> ValidityVisitor<'rt, 'a, '\n \n             // nothing else has an aggregate layout\n             _ => bug!(\"aggregate_field_path_elem: got non-aggregate type {:?}\", layout.ty),\n-        };\n+        }\n+    }\n+\n+    fn visit_elem(\n+        &mut self,\n+        new_op: OpTy<'tcx, M::PointerTag>,\n+        elem: PathElem,\n+    ) -> EvalResult<'tcx> {\n+        // Remember the old state\n+        let path_len = self.path.len();\n+        // Perform operation\n         self.path.push(elem);\n+        self.visit_value(new_op)?;\n+        // Undo changes\n+        self.path.truncate(path_len);\n+        Ok(())\n     }\n }\n \n@@ -235,14 +245,8 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n         field: usize,\n         new_op: OpTy<'tcx, M::PointerTag>\n     ) -> EvalResult<'tcx> {\n-        // Remember the old state\n-        let path_len = self.path.len();\n-        // Perform operation\n-        self.push_aggregate_field_path_elem(old_op.layout, field);\n-        self.visit_value(new_op)?;\n-        // Undo changes\n-        self.path.truncate(path_len);\n-        Ok(())\n+        let elem = self.aggregate_field_path_elem(old_op.layout, field);\n+        self.visit_elem(new_op, elem)\n     }\n \n     #[inline]\n@@ -252,15 +256,8 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n         variant_id: VariantIdx,\n         new_op: OpTy<'tcx, M::PointerTag>\n     ) -> EvalResult<'tcx> {\n-        // Remember the old state\n-        let path_len = self.path.len();\n-        // Perform operation\n         let name = old_op.layout.ty.ty_adt_def().unwrap().variants[variant_id].name;\n-        self.path.push(PathElem::Variant(name));\n-        self.visit_value(new_op)?;\n-        // Undo changes\n-        self.path.truncate(path_len);\n-        Ok(())\n+        self.visit_elem(new_op, PathElem::Variant(name))\n     }\n \n     #[inline]"}]}