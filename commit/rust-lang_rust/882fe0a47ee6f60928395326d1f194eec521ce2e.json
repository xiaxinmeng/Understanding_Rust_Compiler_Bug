{"sha": "882fe0a47ee6f60928395326d1f194eec521ce2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MmZlMGE0N2VlNmY2MDkyODM5NTMyNmQxZjE5NGVlYzUyMWNlMmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-26T18:18:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-26T18:32:39Z"}, "message": "More precise NameKind::Self", "tree": {"sha": "ce9e253bb9555e5cb68ba6004b710018c7ef5571", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce9e253bb9555e5cb68ba6004b710018c7ef5571"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/882fe0a47ee6f60928395326d1f194eec521ce2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/882fe0a47ee6f60928395326d1f194eec521ce2e", "html_url": "https://github.com/rust-lang/rust/commit/882fe0a47ee6f60928395326d1f194eec521ce2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/882fe0a47ee6f60928395326d1f194eec521ce2e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "141fca60061d85494fcb719a4c8237eaf6c7c134", "url": "https://api.github.com/repos/rust-lang/rust/commits/141fca60061d85494fcb719a4c8237eaf6c7c134", "html_url": "https://github.com/rust-lang/rust/commit/141fca60061d85494fcb719a4c8237eaf6c7c134"}], "stats": {"total": 134, "additions": 63, "deletions": 71}, "files": [{"sha": "0edcdb1771e8eb5404f90f9c506597a48f76bc12", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/882fe0a47ee6f60928395326d1f194eec521ce2e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/882fe0a47ee6f60928395326d1f194eec521ce2e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=882fe0a47ee6f60928395326d1f194eec521ce2e", "patch": "@@ -982,7 +982,7 @@ impl ImplBlock {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n pub struct Type {\n     pub(crate) krate: CrateId,\n     pub(crate) ty: InEnvironment<Ty>,"}, {"sha": "c10a6c8448dd18555a87227ed9a5f158354960bc", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/882fe0a47ee6f60928395326d1f194eec521ce2e/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/882fe0a47ee6f60928395326d1f194eec521ce2e/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=882fe0a47ee6f60928395326d1f194eec521ce2e", "patch": "@@ -71,10 +71,11 @@ pub(crate) fn reference_definition(\n             Some(nav) => return Exact(nav),\n             None => return Approximate(vec![]),\n         },\n-        Some(SelfType(ty)) => {\n-            if let Some((adt, _)) = ty.as_adt() {\n-                return Exact(adt.to_nav(db));\n-            }\n+        Some(SelfType(imp)) => {\n+            // FIXME: ideally, this should point to the type in the impl, and\n+            // not at the whole impl. And goto **type** definition should bring\n+            // us to the actual type\n+            return Exact(imp.to_nav(db));\n         }\n         Some(Local(local)) => return Exact(local.to_nav(db)),\n         Some(GenericParam(_)) => {\n@@ -503,7 +504,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+            \"impl IMPL_BLOCK FileId(1) [12; 73)\",\n         );\n \n         check_goto(\n@@ -516,7 +517,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+            \"impl IMPL_BLOCK FileId(1) [12; 73)\",\n         );\n \n         check_goto(\n@@ -529,7 +530,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"Foo ENUM_DEF FileId(1) [0; 14) [5; 8)\",\n+            \"impl IMPL_BLOCK FileId(1) [15; 75)\",\n         );\n \n         check_goto(\n@@ -541,7 +542,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"Foo ENUM_DEF FileId(1) [0; 14) [5; 8)\",\n+            \"impl IMPL_BLOCK FileId(1) [15; 62)\",\n         );\n     }\n \n@@ -560,7 +561,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+            \"impl IMPL_BLOCK FileId(1) [49; 115)\",\n         );\n \n         check_goto(\n@@ -572,11 +573,11 @@ mod tests {\n             }\n             impl Make for Foo {\n                 fn new() -> Self<|> {\n-                    Self{}\n+                    Self {}\n                 }\n             }\n             \",\n-            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+            \"impl IMPL_BLOCK FileId(1) [49; 115)\",\n         );\n     }\n "}, {"sha": "260a7b86947888b9df1241413f93418218201b64", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 45, "deletions": 50, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/882fe0a47ee6f60928395326d1f194eec521ce2e/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/882fe0a47ee6f60928395326d1f194eec521ce2e/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=882fe0a47ee6f60928395326d1f194eec521ce2e", "patch": "@@ -133,20 +133,12 @@ fn hover_text_from_name_kind(\n             hir::ModuleDef::TypeAlias(it) => from_def_source(db, it),\n             hir::ModuleDef::BuiltinType(it) => Some(it.to_string()),\n         },\n-        SelfType(ty) => match ty.as_adt() {\n-            Some((adt_def, _)) => match adt_def {\n-                hir::Adt::Struct(it) => from_def_source(db, it),\n-                hir::Adt::Union(it) => from_def_source(db, it),\n-                hir::Adt::Enum(it) => from_def_source(db, it),\n-            },\n-            _ => None,\n-        },\n         Local(_) => {\n             // Hover for these shows type names\n             *no_fallback = true;\n             None\n         }\n-        GenericParam(_) => {\n+        GenericParam(_) | SelfType(_) => {\n             // FIXME: Hover for generic param\n             None\n         }\n@@ -622,49 +614,52 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"struct Thing\"));\n-        assert_eq!(hover.info.is_exact(), true);\n-\n-        let (analysis, position) = single_file_with_position(\n-            \"\n-            struct Thing { x: u32 }\n-            impl Thing {\n-                fn new() -> Self<|> {\n-                    Self { x: 0 }\n-                }\n-            }\n-            \",\n-        );\n-        let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"struct Thing\"));\n-        assert_eq!(hover.info.is_exact(), true);\n-\n-        let (analysis, position) = single_file_with_position(\n-            \"\n-            enum Thing { A }\n-            impl Thing {\n-                pub fn new() -> Self<|> {\n-                    Thing::A\n-                }\n-            }\n-            \",\n-        );\n-        let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n         assert_eq!(hover.info.is_exact(), true);\n \n-        let (analysis, position) = single_file_with_position(\n-            \"\n-            enum Thing { A }\n-            impl Thing {\n-                pub fn thing(a: Self<|>) {\n-                }\n-            }\n-            \",\n-        );\n-        let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n-        assert_eq!(hover.info.is_exact(), true);\n+        /* FIXME: revive these tests\n+                let (analysis, position) = single_file_with_position(\n+                    \"\n+                    struct Thing { x: u32 }\n+                    impl Thing {\n+                        fn new() -> Self<|> {\n+                            Self { x: 0 }\n+                        }\n+                    }\n+                    \",\n+                );\n+\n+                let hover = analysis.hover(position).unwrap().unwrap();\n+                assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n+                assert_eq!(hover.info.is_exact(), true);\n+\n+                let (analysis, position) = single_file_with_position(\n+                    \"\n+                    enum Thing { A }\n+                    impl Thing {\n+                        pub fn new() -> Self<|> {\n+                            Thing::A\n+                        }\n+                    }\n+                    \",\n+                );\n+                let hover = analysis.hover(position).unwrap().unwrap();\n+                assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n+                assert_eq!(hover.info.is_exact(), true);\n+\n+                let (analysis, position) = single_file_with_position(\n+                    \"\n+                    enum Thing { A }\n+                    impl Thing {\n+                        pub fn thing(a: Self<|>) {\n+                        }\n+                    }\n+                    \",\n+                );\n+                let hover = analysis.hover(position).unwrap().unwrap();\n+                assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n+                assert_eq!(hover.info.is_exact(), true);\n+        */\n     }\n \n     #[test]"}, {"sha": "21a1ea69ebbd48796c4e49f3b8bc55e7b68f09b0", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/882fe0a47ee6f60928395326d1f194eec521ce2e/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/882fe0a47ee6f60928395326d1f194eec521ce2e/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=882fe0a47ee6f60928395326d1f194eec521ce2e", "patch": "@@ -83,10 +83,7 @@ pub(crate) fn find_all_refs(\n         NameKind::Field(field) => field.to_nav(db),\n         NameKind::AssocItem(assoc) => assoc.to_nav(db),\n         NameKind::Def(def) => NavigationTarget::from_def(db, def)?,\n-        NameKind::SelfType(ref ty) => match ty.as_adt() {\n-            Some((adt, _)) => adt.to_nav(db),\n-            None => return None,\n-        },\n+        NameKind::SelfType(imp) => imp.to_nav(db),\n         NameKind::Local(local) => local.to_nav(db),\n         NameKind::GenericParam(_) => return None,\n     };"}, {"sha": "5cea805ec92af66180f8b300f72f60cbc8d0c0a5", "filename": "crates/ra_ide_api/src/references/classify.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/882fe0a47ee6f60928395326d1f194eec521ce2e/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/882fe0a47ee6f60928395326d1f194eec521ce2e/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs?ref=882fe0a47ee6f60928395326d1f194eec521ce2e", "patch": "@@ -178,8 +178,7 @@ pub(crate) fn classify_name_ref(\n             Some(NameDefinition { kind, container, visibility })\n         }\n         PathResolution::SelfType(impl_block) => {\n-            let ty = impl_block.target_ty(db);\n-            let kind = NameKind::SelfType(ty);\n+            let kind = NameKind::SelfType(impl_block);\n             let container = impl_block.module(db);\n             Some(NameDefinition { kind, container, visibility })\n         }"}, {"sha": "10d3a2364c1a2e6ffc52a31844bce36b28b561df", "filename": "crates/ra_ide_api/src/references/name_definition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/882fe0a47ee6f60928395326d1f194eec521ce2e/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/882fe0a47ee6f60928395326d1f194eec521ce2e/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs?ref=882fe0a47ee6f60928395326d1f194eec521ce2e", "patch": "@@ -4,8 +4,8 @@\n //! Note that the reference search is possible for not all of the classified items.\n \n use hir::{\n-    Adt, AssocItem, GenericParam, HasSource, Local, MacroDef, Module, ModuleDef, StructField, Ty,\n-    VariantDef,\n+    Adt, AssocItem, GenericParam, HasSource, ImplBlock, Local, MacroDef, Module, ModuleDef,\n+    StructField, VariantDef,\n };\n use ra_syntax::{ast, ast::VisibilityOwner};\n \n@@ -17,7 +17,7 @@ pub enum NameKind {\n     Field(StructField),\n     AssocItem(AssocItem),\n     Def(ModuleDef),\n-    SelfType(Ty),\n+    SelfType(ImplBlock),\n     Local(Local),\n     GenericParam(GenericParam),\n }"}]}