{"sha": "9d8d47d894122b7c6a3538d141db22a533723bb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkOGQ0N2Q4OTQxMjJiN2M2YTM1MzhkMTQxZGIyMmE1MzM3MjNiYjg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-08-06T17:39:59Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-08-06T19:45:27Z"}, "message": "Improve librustc_typeck compile_fail check", "tree": {"sha": "7ee6fd6da46ca108b37394dd9e4a5fc537e20507", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ee6fd6da46ca108b37394dd9e4a5fc537e20507"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d8d47d894122b7c6a3538d141db22a533723bb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d8d47d894122b7c6a3538d141db22a533723bb8", "html_url": "https://github.com/rust-lang/rust/commit/9d8d47d894122b7c6a3538d141db22a533723bb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d8d47d894122b7c6a3538d141db22a533723bb8/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1c2480d47876f094e9c11e7d5139186bbc6d990", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1c2480d47876f094e9c11e7d5139186bbc6d990", "html_url": "https://github.com/rust-lang/rust/commit/f1c2480d47876f094e9c11e7d5139186bbc6d990"}], "stats": {"total": 310, "additions": 156, "deletions": 154}, "files": [{"sha": "db11b9041f57773851d4a928b3c245c471e35322", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 156, "deletions": 154, "changes": 310, "blob_url": "https://github.com/rust-lang/rust/blob/9d8d47d894122b7c6a3538d141db22a533723bb8/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8d47d894122b7c6a3538d141db22a533723bb8/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=9d8d47d894122b7c6a3538d141db22a533723bb8", "patch": "@@ -43,7 +43,7 @@ match x {\n \n Matching with the wrong number of fields has no sensible interpretation:\n \n-```compile_fail\n+```compile_fail,E0023\n enum Fruit {\n     Apple(String, String),\n     Pear(u32),\n@@ -66,7 +66,7 @@ E0025: r##\"\n Each field of a struct can only be bound once in a pattern. Erroneous code\n example:\n \n-```compile_fail\n+```compile_fail,E0025\n struct Foo {\n     a: u8,\n     b: u8,\n@@ -123,7 +123,7 @@ by a different name, you should rename it explicitly.\n \n Change this:\n \n-```compile_fail\n+```compile_fail,E0026\n struct Thing {\n     x: u32,\n     y: u32\n@@ -159,7 +159,7 @@ definition is mentioned in the pattern, or use `..` to ignore unwanted fields.\n \n For example:\n \n-```compile_fail\n+```compile_fail,E0027\n struct Dog {\n     name: String,\n     age: u32,\n@@ -201,7 +201,9 @@ compile-time, and is unable to evaluate arbitrary comparison functions. If you\n want to capture values of an orderable type between two end-points, you can use\n a guard.\n \n-```compile_fail\n+```compile_fail,E0029\n+let string = \"salutations !\";\n+\n // The ordering relation for strings can't be evaluated at compile time,\n // so this doesn't work:\n match string {\n@@ -245,7 +247,7 @@ E0034: r##\"\n The compiler doesn't know what method to call because more than one method\n has the same prototype. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0034\n struct Test;\n \n trait Trait1 {\n@@ -332,7 +334,7 @@ E0035: r##\"\n You tried to give a type parameter where it wasn't needed. Erroneous code\n example:\n \n-```compile_fail\n+```compile_fail,E0035\n struct Test;\n \n impl Test {\n@@ -367,7 +369,7 @@ E0036: r##\"\n This error occurrs when you pass too many or not enough type parameters to\n a method. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0036\n struct Test;\n \n impl Test {\n@@ -417,7 +419,7 @@ out of scope.\n \n Here's an example of this error:\n \n-```compile_fail\n+```compile_fail,E0040\n struct Foo {\n     x: i32,\n }\n@@ -438,7 +440,7 @@ fn main() {\n E0044: r##\"\n You can't use type parameters on foreign items. Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0044\n extern { fn some_func<T>(x: T); }\n ```\n \n@@ -456,7 +458,9 @@ Rust only supports variadic parameters for interoperability with C code in its\n FFI. As such, variadic parameters can only be used with functions which are\n using the C ABI. Examples of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0045\n+#![feature(unboxed_closures)]\n+\n extern \"rust-call\" { fn foo(x: u8, ...); }\n \n // or\n@@ -466,12 +470,6 @@ fn foo(x: u8, ...) {}\n \n To fix such code, put them in an extern \"C\" block:\n \n-```ignore\n-extern \"C\" fn foo(x: u8, ...);\n-```\n-\n-Or:\n-\n ```\n extern \"C\" {\n     fn foo (x: u8, ...);\n@@ -482,7 +480,7 @@ extern \"C\" {\n E0046: r##\"\n Items are missing in a trait implementation. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0046\n trait Foo {\n     fn foo();\n }\n@@ -518,7 +516,7 @@ has the wrong number of type parameters.\n For example, the trait below has a method `foo` with a type parameter `T`,\n but the implementation of `foo` for the type `Bar` is missing this parameter:\n \n-```compile_fail\n+```compile_fail,E0049\n trait Foo {\n     fn foo<T: Default>(x: T) -> Self;\n }\n@@ -541,7 +539,7 @@ For example, the trait below has a method `foo` with two function parameters\n (`&self` and `u8`), but the implementation of `foo` for the type `Bar` omits\n the `u8` parameter:\n \n-```compile_fail\n+```compile_fail,E0050\n trait Foo {\n     fn foo(&self, x: u8) -> bool;\n }\n@@ -562,7 +560,7 @@ and the trait definition.\n \n Here are a couple examples of this error:\n \n-```compile_fail\n+```compile_fail,E0053\n trait Foo {\n     fn foo(x: u16);\n     fn bar(&self);\n@@ -584,7 +582,7 @@ E0054: r##\"\n It is not allowed to cast to a bool. If you are trying to cast a numeric type\n to a bool, you can compare it with zero instead:\n \n-```compile_fail\n+```compile_fail,E0054\n let x = 5;\n \n // Not allowed, won't compile\n@@ -607,7 +605,7 @@ recursion limit (which can be set via the `recursion_limit` attribute).\n \n For a somewhat artificial example:\n \n-```compile_fail,ignore\n+```compile_fail,E0055\n #![recursion_limit=\"2\"]\n \n struct Foo;\n@@ -637,7 +635,7 @@ function must match its definition.\n \n An example using a closure:\n \n-```compile_fail\n+```compile_fail,E0057\n let f = |x| x * 3;\n let a = f();        // invalid, too few parameters\n let b = f(4);       // this works!\n@@ -663,13 +661,17 @@ implemented by closures.\n The most likely source of this error is using angle-bracket notation without\n wrapping the function argument type into a tuple, for example:\n \n-```compile_fail\n+```compile_fail,E0059\n+#![feature(unboxed_closures)]\n+\n fn foo<F: Fn<i32>>(f: F) -> F::Output { f(3) }\n ```\n \n It can be fixed by adjusting the trait bound like this:\n \n-```ignore\n+```\n+#![feature(unboxed_closures)]\n+\n fn foo<F: Fn<(i32,)>>(f: F) -> F::Output { f(3) }\n ```\n \n@@ -726,9 +728,9 @@ This error indicates that during an attempt to build a struct or struct-like\n enum variant, one of the fields was specified more than once. Erroneous code\n example:\n \n-```compile_fail\n+```compile_fail,E0062\n struct Foo {\n-    x: i32\n+    x: i32,\n }\n \n fn main() {\n@@ -743,7 +745,7 @@ Each field should be specified exactly one time. Example:\n \n ```\n struct Foo {\n-    x: i32\n+    x: i32,\n }\n \n fn main() {\n@@ -756,10 +758,10 @@ E0063: r##\"\n This error indicates that during an attempt to build a struct or struct-like\n enum variant, one of the fields was not provided. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0063\n struct Foo {\n     x: i32,\n-    y: i32\n+    y: i32,\n }\n \n fn main() {\n@@ -772,7 +774,7 @@ Each field should be specified exactly once. Example:\n ```\n struct Foo {\n     x: i32,\n-    y: i32\n+    y: i32,\n }\n \n fn main() {\n@@ -799,7 +801,7 @@ and field references.\n \n Let's start with some erroneous code examples:\n \n-```compile_fail\n+```compile_fail,E0067\n use std::collections::LinkedList;\n \n // Bad: assignment to non-lvalue expression\n@@ -831,7 +833,7 @@ E0069: r##\"\n The compiler found a function whose body contains a `return;` statement but\n whose return type is not `()`. An example of this is:\n \n-```compile_fail\n+```compile_fail,E0069\n // error\n fn foo() -> u8 {\n     return;\n@@ -853,7 +855,7 @@ https://doc.rust-lang.org/reference.html#lvalues-rvalues-and-temporaries\n \n Now, we can go further. Here are some erroneous code examples:\n \n-```compile_fail\n+```compile_fail,E0070\n struct SomeStruct {\n     x: i32,\n     y: i32\n@@ -897,7 +899,7 @@ not a struct-style structure or enum variant.\n \n Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0071\n enum Foo { FirstValue(i32) };\n \n let u = Foo::FirstValue { value: 0 }; // error: Foo::FirstValue\n@@ -976,7 +978,7 @@ operate on.\n \n This will cause an error:\n \n-```compile_fail\n+```compile_fail,E0075\n #![feature(repr_simd)]\n \n #[repr(simd)]\n@@ -1000,7 +1002,7 @@ will trigger this error.\n \n This will cause an error:\n \n-```compile_fail\n+```compile_fail,E0076\n #![feature(repr_simd)]\n \n #[repr(simd)]\n@@ -1023,7 +1025,7 @@ must be machine types so SIMD operations can be applied to them.\n \n This will cause an error:\n \n-```compile_fail\n+```compile_fail,E0077\n #![feature(repr_simd)]\n \n #[repr(simd)]\n@@ -1047,9 +1049,9 @@ literal and is therefore invalid.\n \n For example, in the following code:\n \n-```compile_fail\n+```compile_fail,E0079\n enum Foo {\n-    Q = \"32\"\n+    Q = \"32\",\n }\n ```\n \n@@ -1060,7 +1062,7 @@ it to one:\n \n ```\n enum Foo {\n-    Q = 32\n+    Q = 32,\n }\n ```\n \n@@ -1084,12 +1086,12 @@ Enum discriminants are used to differentiate enum variants stored in memory.\n This error indicates that the same value was used for two or more variants,\n making them impossible to tell apart.\n \n-```compile_fail\n+```compile_fail,E0081\n // Bad.\n enum Enum {\n     P = 3,\n     X = 3,\n-    Y = 5\n+    Y = 5,\n }\n ```\n \n@@ -1098,15 +1100,15 @@ enum Enum {\n enum Enum {\n     P,\n     X = 3,\n-    Y = 5\n+    Y = 5,\n }\n ```\n \n Note that variants without a manually specified discriminant are numbered from\n top to bottom starting from 0, so clashes can occur with seemingly unrelated\n variants.\n \n-```compile_fail\n+```compile_fail,E0081\n enum Bad {\n     X,\n     Y = 0\n@@ -1128,7 +1130,7 @@ otherwise this error is raised. For example:\n #[repr(u8)]\n enum Thing {\n     A = 1024,\n-    B = 5\n+    B = 5,\n }\n ```\n \n@@ -1137,7 +1139,7 @@ invalid. Here is another, more subtle example which depends on target word size:\n \n ```ignore\n enum DependsOnPointerSize {\n-    A = 1 << 32\n+    A = 1 << 32,\n }\n ```\n \n@@ -1153,7 +1155,7 @@ An unsupported representation was attempted on a zero-variant enum.\n \n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0084\n #[repr(i32)]\n enum NightsWatch {} // error: unsupported representation for zero-variant enum\n ```\n@@ -1181,7 +1183,7 @@ enum NightsWatch {}\n E0087: r##\"\n Too many type parameters were supplied for a function. For example:\n \n-```compile_fail\n+```compile_fail,E0087\n fn foo<T>() {}\n \n fn main() {\n@@ -1196,7 +1198,7 @@ parameters.\n E0088: r##\"\n You gave too many lifetime parameters. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0088\n fn f() {}\n \n fn main() {\n@@ -1241,7 +1243,7 @@ fn main() {\n E0089: r##\"\n Not enough type parameters were supplied for a function. For example:\n \n-```compile_fail\n+```compile_fail,E0089\n fn foo<T, U>() {}\n \n fn main() {\n@@ -1252,7 +1254,7 @@ fn main() {\n Note that if a function takes multiple type parameters but you want the compiler\n to infer some of them, you can use type placeholders:\n \n-```compile_fail\n+```compile_fail,E0089\n fn foo<T, U>(x: T) {}\n \n fn main() {\n@@ -1267,7 +1269,7 @@ E0091: r##\"\n You gave an unnecessary type parameter in a type alias. Erroneous code\n example:\n \n-```compile_fail\n+```compile_fail,E0091\n type Foo<T> = u32; // error: type parameter `T` is unused\n // or:\n type Foo<A,B> = Box<A>; // error: type parameter `B` is unused\n@@ -1285,7 +1287,7 @@ E0092: r##\"\n You tried to declare an undefined atomic operation function.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0092\n #![feature(intrinsics)]\n \n extern \"rust-intrinsic\" {\n@@ -1310,7 +1312,7 @@ extern \"rust-intrinsic\" {\n E0093: r##\"\n You declared an unknown intrinsic function. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0093\n #![feature(intrinsics)]\n \n extern \"rust-intrinsic\" {\n@@ -1347,7 +1349,7 @@ E0094: r##\"\n You gave an invalid number of type parameters to an intrinsic function.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0094\n #![feature(intrinsics)]\n \n extern \"rust-intrinsic\" {\n@@ -1373,10 +1375,8 @@ E0101: r##\"\n You hit this error because the compiler lacks the information to\n determine a type for this expression. Erroneous code example:\n \n-```compile_fail\n-fn main() {\n-    let x = |_| {}; // error: cannot determine a type for this expression\n-}\n+```compile_fail,E0101\n+let x = |_| {}; // error: cannot determine a type for this expression\n ```\n \n You have two possibilities to solve this situation:\n@@ -1386,24 +1386,20 @@ You have two possibilities to solve this situation:\n Examples:\n \n ```\n-fn main() {\n-    let x = |_ : u32| {}; // ok!\n-    // or:\n-    let x = |_| {};\n-    x(0u32);\n-}\n+let x = |_ : u32| {}; // ok!\n+// or:\n+let x = |_| {};\n+x(0u32);\n ```\n \"##,\n \n E0102: r##\"\n You hit this error because the compiler lacks the information to\n determine the type of this variable. Erroneous code example:\n \n-```compile_fail\n-fn main() {\n-    // could be an array of anything\n-    let x = []; // error: cannot determine a type for this local variable\n-}\n+```compile_fail,E0102\n+// could be an array of anything\n+let x = []; // error: cannot determine a type for this local variable\n ```\n \n To solve this situation, constrain the type of the variable.\n@@ -1425,7 +1421,7 @@ lifetime elision rules (see below).\n \n Here are some simple examples of where you'll run into this error:\n \n-```compile_fail\n+```compile_fail,E0106\n struct Foo { x: &bool }        // error\n struct Foo<'a> { x: &'a bool } // correct\n \n@@ -1453,7 +1449,7 @@ same as the lifetime on `&self` or `&mut self`.\n \n Here are some examples of elision errors:\n \n-```compile_fail\n+```compile_fail,E0106\n // error, no input lifetimes\n fn foo() -> &str { }\n \n@@ -1473,7 +1469,7 @@ for a type (like a struct or enum) or trait.\n \n Some basic examples include:\n \n-```compile_fail\n+```compile_fail,E0107\n struct Foo<'a>(&'a str);\n enum Bar { A, B, C }\n \n@@ -1486,7 +1482,7 @@ struct Baz<'a> {\n Here's an example that is currently an error, but may work in a future version\n of Rust:\n \n-```compile_fail\n+```compile_fail,E0107\n struct Foo<'a>(&'a str);\n \n trait Quux { }\n@@ -1504,7 +1500,7 @@ You can only define an inherent implementation for a type in the same crate\n where the type was defined. For example, an `impl` block as below is not allowed\n since `Vec` is defined in the standard library:\n \n-```compile_fail\n+```compile_fail,E0116\n impl Vec<u8> { } // error\n ```\n \n@@ -1518,7 +1514,7 @@ To fix this problem, you can do either of these things:\n Note that using the `type` keyword does not work here because `type` only\n introduces a type alias:\n \n-```compile_fail\n+```compile_fail,E0116\n type Bytes = Vec<u8>;\n \n impl Bytes { } // error, same as above\n@@ -1536,7 +1532,7 @@ trait defined in another crate) where\n \n Here's one example of this error:\n \n-```compile_fail\n+```compile_fail,E0117\n impl Drop for u32 {}\n ```\n \n@@ -1579,7 +1575,7 @@ E0118: r##\"\n You're trying to write an inherent implementation for something which isn't a\n struct nor an enum. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0118\n impl (u8, u8) { // error: no base type found for inherent implementation\n     fn get_state(&self) -> String {\n         // ...\n@@ -1623,7 +1619,7 @@ E0119: r##\"\n There are conflicting trait implementations for the same type.\n Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0119\n trait MyTrait {\n     fn get(&self) -> usize;\n }\n@@ -1684,7 +1680,7 @@ E0120: r##\"\n An attempt was made to implement Drop on a trait, which is not allowed: only\n structs and enums can implement Drop. An example causing this error:\n \n-```compile_fail\n+```compile_fail,E0120\n trait MyTrait {}\n \n impl Drop for MyTrait {\n@@ -1725,7 +1721,7 @@ placeholders are disallowed by design in item signatures.\n \n Examples of this error include:\n \n-```compile_fail\n+```compile_fail,E0121\n fn foo() -> _ { 5 } // error, explicitly write out the return type instead\n \n static BAR: _ = \"test\"; // error, explicitly write out the type instead\n@@ -1756,7 +1752,7 @@ E0124: r##\"\n You declared two fields of a struct with the same name. Erroneous code\n example:\n \n-```compile_fail\n+```compile_fail,E0124\n struct Foo {\n     field1: i32,\n     field1: i32, // error: field is already declared\n@@ -1777,7 +1773,7 @@ E0128: r##\"\n Type parameter defaults can only use parameters that occur before them.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0128\n struct Foo<T=U, U=()> {\n     field1: T,\n     filed2: U,\n@@ -1805,7 +1801,7 @@ It is not possible to define `main` with type parameters, or even with function\n parameters. When `main` is present, it must take no arguments and return `()`.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0131\n fn main<T>() { // error: main function is not allowed to have type parameters\n }\n ```\n@@ -1816,7 +1812,7 @@ A function with the `start` attribute was declared with type parameters.\n \n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0132\n #![feature(start)]\n \n #[start]\n@@ -1847,7 +1843,7 @@ E0164: r##\"\n This error means that an attempt was made to match a struct type enum\n variant as a non-struct type:\n \n-```compile_fail\n+```compile_fail,E0164\n enum Foo { B { i: u32 } }\n \n fn bar(foo: Foo) -> u32 {\n@@ -1875,7 +1871,7 @@ This error means that the compiler found a return expression in a function\n marked as diverging. A function diverges if it has `!` in the place of the\n return type in its signature. For example:\n \n-```compile_fail\n+```compile_fail,E0166\n fn foo() -> ! { return; } // error\n ```\n \n@@ -1888,7 +1884,7 @@ E0172: r##\"\n This error means that an attempt was made to specify the type of a variable with\n a combination of a concrete type and a trait. Consider the following example:\n \n-```compile_fail\n+```compile_fail,E0172\n fn foo(bar: i32+std::fmt::Display) {}\n ```\n \n@@ -1917,7 +1913,7 @@ to use parentheses.\n \n For example:\n \n-```compile_fail\n+```compile_fail,E0178\n trait Foo {}\n \n struct Bar<'a> {\n@@ -1949,7 +1945,7 @@ take a `self` parameter).\n \n Here's an example of this error:\n \n-```compile_fail\n+```compile_fail,E0185\n trait Foo {\n     fn foo();\n }\n@@ -1971,7 +1967,7 @@ to be static.\n \n Here's an example of this error:\n \n-```compile_fail\n+```compile_fail,E0186\n trait Foo {\n     fn foo(&self);\n }\n@@ -1990,7 +1986,7 @@ E0191: r##\"\n Trait objects need to have all associated types specified. Erroneous code\n example:\n \n-```compile_fail\n+```compile_fail,E0191\n trait Trait {\n     type Bar;\n }\n@@ -2066,7 +2062,7 @@ E0194: r##\"\n A type parameter was declared which shadows an existing one. An example of this\n error:\n \n-```compile_fail\n+```compile_fail,E0194\n trait Foo<T> {\n     fn do_something(&self) -> T;\n     fn do_something_else<T: Clone>(&self, bar: T);\n@@ -2082,7 +2078,7 @@ E0195: r##\"\n Your method's lifetime parameters do not match the trait declaration.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0195\n trait Trait {\n     fn bar<'a,'b:'a>(x: &'a str, y: &'b str);\n }\n@@ -2121,7 +2117,7 @@ methods associated with a type) are always safe because they are not\n implementing an unsafe trait. Removing the `unsafe` keyword from the inherent\n implementation will resolve this error.\n \n-```compile_fail\n+```compile_fail,E0197\n struct Foo;\n \n // this will cause this error\n@@ -2168,7 +2164,7 @@ Safe traits should not have unsafe implementations, therefore marking an\n implementation for a safe trait unsafe will cause a compiler error. Removing\n the unsafe marker on the trait noted in the error will resolve this problem.\n \n-```compile_fail\n+```compile_fail,E0199\n struct Foo;\n \n trait Bar { }\n@@ -2185,7 +2181,7 @@ Unsafe traits must have unsafe implementations. This error occurs when an\n implementation for an unsafe trait isn't marked as unsafe. This may be resolved\n by marking the unsafe implementation as unsafe.\n \n-```compile_fail\n+```compile_fail,E0200\n struct Foo;\n \n unsafe trait Bar { }\n@@ -2203,7 +2199,7 @@ associated functions, etc.) with the same identifier.\n \n For example:\n \n-```compile_fail\n+```compile_fail,E0201\n struct Foo(u8);\n \n impl Foo {\n@@ -2258,7 +2254,7 @@ An attempt to implement the `Copy` trait for a struct failed because one of the\n fields does not implement `Copy`. To fix this, you must implement `Copy` for the\n mentioned field. Note that this may not be possible, as in the example of\n \n-```compile_fail\n+```compile_fail,E0204\n struct Foo {\n     foo : Vec<u32>,\n }\n@@ -2270,7 +2266,7 @@ This fails because `Vec<T>` does not implement `Copy` for any `T`.\n \n Here's another example that will fail:\n \n-```compile_fail\n+```compile_fail,E0204\n #[derive(Copy)]\n struct Foo<'a> {\n     ty: &'a mut bool,\n@@ -2286,7 +2282,7 @@ An attempt to implement the `Copy` trait for an enum failed because one of the\n variants does not implement `Copy`. To fix this, you must implement `Copy` for\n the mentioned variant. Note that this may not be possible, as in the example of\n \n-```compile_fail\n+```compile_fail,E0205\n enum Foo {\n     Bar(Vec<u32>),\n     Baz,\n@@ -2299,11 +2295,11 @@ This fails because `Vec<T>` does not implement `Copy` for any `T`.\n \n Here's another example that will fail:\n \n-```compile_fail\n+```compile_fail,E0205\n #[derive(Copy)]\n enum Foo<'a> {\n     Bar(&'a mut bool),\n-    Baz\n+    Baz,\n }\n ```\n \n@@ -2316,7 +2312,7 @@ You can only implement `Copy` for a struct or enum. Both of the following\n examples will fail, because neither `i32` (primitive type) nor `&'static Bar`\n (reference to `Bar`) is a struct or enum:\n \n-```compile_fail\n+```compile_fail,E0206\n type Foo = i32;\n impl Copy for Foo { } // error\n \n@@ -2339,7 +2335,7 @@ the following criteria:\n Suppose we have a struct `Foo` and we would like to define some methods for it.\n The following definition leads to a compiler error:\n \n-```compile_fail\n+```compile_fail,E0207\n struct Foo;\n \n impl<T: Default> Foo {\n@@ -2372,7 +2368,7 @@ impl Foo {\n As another example, suppose we have a `Maker` trait and want to establish a\n type `FooMaker` that makes `Foo`s:\n \n-```compile_fail\n+```compile_fail,E0207\n trait Maker {\n     type Item;\n     fn make(&mut self) -> Self::Item;\n@@ -2468,11 +2464,11 @@ what this means, it is perhaps easiest to consider a few examples.\n If `ForeignTrait` is a trait defined in some external crate `foo`, then the\n following trait `impl` is an error:\n \n-```compile_fail\n-extern crate foo;\n-use foo::ForeignTrait;\n+```compile_fail,E0210\n+extern crate collections;\n+use collections::range::RangeArgument;\n \n-impl<T> ForeignTrait for T { } // error\n+impl<T> RangeArgument<T> for T { } // error\n ```\n \n To work around this, it can be covered with a local type, `MyType`:\n@@ -2611,7 +2607,7 @@ E0214: r##\"\n A generic type was described using parentheses rather than angle brackets. For\n example:\n \n-```compile_fail\n+```compile_fail,E0214\n fn main() {\n     let v: Vec(&str) = vec![\"foo\"];\n }\n@@ -2626,7 +2622,7 @@ E0220: r##\"\n You used an associated type which isn't defined in the trait.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0220\n trait T1 {\n     type Bar;\n }\n@@ -2670,7 +2666,7 @@ E0221: r##\"\n An attempt was made to retrieve an associated type, but the type was ambiguous.\n For example:\n \n-```compile_fail\n+```compile_fail,E0221\n trait T1 {}\n trait T2 {}\n \n@@ -2716,7 +2712,7 @@ E0223: r##\"\n An attempt was made to retrieve an associated type, but the type was ambiguous.\n For example:\n \n-```compile_fail\n+```compile_fail,E0223\n trait MyTrait {type X; }\n \n fn main() {\n@@ -2751,7 +2747,7 @@ E0225: r##\"\n You attempted to use multiple types as bounds for a closure or trait object.\n Rust does not currently support this. A simple example that causes this error:\n \n-```compile_fail\n+```compile_fail,E0225\n fn main() {\n     let _: Box<std::io::Read + std::io::Write>;\n }\n@@ -2771,7 +2767,7 @@ fn main() {\n E0232: r##\"\n The attribute must have a value. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0232\n #![feature(on_unimplemented)]\n \n #[rustc_on_unimplemented] // error: this attribute must have a value\n@@ -2795,7 +2791,7 @@ trait.\n For example, the `Foo` struct below is defined to be generic in `T`, but the\n type parameter is missing in the definition of `Bar`:\n \n-```compile_fail\n+```compile_fail,E0243\n struct Foo<T> { x: T }\n \n struct Bar { x: Foo }\n@@ -2809,7 +2805,7 @@ trait.\n For example, the `Foo` struct below has no type parameters, but is supplied\n with two in the definition of `Bar`:\n \n-```compile_fail\n+```compile_fail,E0244\n struct Foo { x: bool }\n \n struct Bar<S, T> { x: Foo<S, T> }\n@@ -2820,7 +2816,7 @@ E0248: r##\"\n This error indicates an attempt to use a value where a type is expected. For\n example:\n \n-```compile_fail\n+```compile_fail,E0248\n enum Foo {\n     Bar(u32)\n }\n@@ -2845,14 +2841,14 @@ E0321: r##\"\n A cross-crate opt-out trait was implemented on something which wasn't a struct\n or enum type. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0321\n #![feature(optin_builtin_traits)]\n \n struct Foo;\n \n impl !Sync for Foo {}\n \n-unsafe impl Send for &'static Foo {\n+unsafe impl Send for &'static Foo {}\n // error: cross-crate traits with a default impl, like `core::marker::Send`,\n //        can only be implemented for a struct/enum type, not\n //        `&'static Foo`\n@@ -2874,7 +2870,7 @@ E0323: r##\"\n An associated const was implemented when another trait item was expected.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0323\n #![feature(associated_consts)]\n \n trait Foo {\n@@ -2926,7 +2922,9 @@ E0324: r##\"\n A method was implemented when another trait item was expected. Erroneous\n code example:\n \n-```compile_fail\n+```compile_fail,E0324\n+#![feature(associated_consts)]\n+\n struct Bar;\n \n trait Foo {\n@@ -2968,7 +2966,9 @@ E0325: r##\"\n An associated type was implemented when another trait item was expected.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0325\n+#![feature(associated_consts)]\n+\n struct Bar;\n \n trait Foo {\n@@ -3020,7 +3020,9 @@ types in the trait definition. This error indicates that there was a mismatch.\n \n Here's an example of this error:\n \n-```compile_fail\n+```compile_fail,E0326\n+#![feature(associated_consts)]\n+\n trait Foo {\n     const BAR: bool;\n }\n@@ -3078,7 +3080,7 @@ E0366: r##\"\n An attempt was made to implement `Drop` on a concrete specialization of a\n generic type. An example is shown below:\n \n-```compile_fail\n+```compile_fail,E0366\n struct Foo<T> {\n     t: T\n }\n@@ -3111,7 +3113,7 @@ E0367: r##\"\n An attempt was made to implement `Drop` on a specialization of a generic type.\n An example is shown below:\n \n-```compile_fail\n+```compile_fail,E0367\n trait Foo{}\n \n struct MyStruct<T> {\n@@ -3149,7 +3151,7 @@ E0368: r##\"\n This error indicates that a binary assignment operator like `+=` or `^=` was\n applied to a type that doesn't support it. For example:\n \n-```compile_fail\n+```compile_fail,E0368\n let mut x = 12f32; // error: binary operation `<<` cannot be applied to\n                    //        type `f32`\n \n@@ -3172,7 +3174,7 @@ Another problem you might be facing is this: suppose you've overloaded the `+`\n operator for some type `Foo` by implementing the `std::ops::Add` trait for\n `Foo`, but you find that using `+=` does not work, as in this example:\n \n-```compile_fail\n+```compile_fail,E0368\n use std::ops::Add;\n \n struct Foo(u32);\n@@ -3199,7 +3201,7 @@ E0369: r##\"\n A binary operation was attempted on a type which doesn't support it.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0369\n let x = 12f32; // error: binary operation `<<` cannot be applied to\n                //        type `f32`\n \n@@ -3224,7 +3226,7 @@ E0370: r##\"\n The maximum value of an enum was reached, so it cannot be automatically\n set in the next enum value. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0370\n #[deny(overflowing_literals)]\n enum Foo {\n     X = 0x7fffffffffffffff,\n@@ -3262,7 +3264,7 @@ definition, so it is not useful to do this.\n \n Example:\n \n-```compile_fail\n+```compile_fail,E0371\n trait Foo { fn foo(&self) { } }\n trait Bar: Foo { }\n trait Baz: Bar { }\n@@ -3283,7 +3285,7 @@ compile time. Any struct containing an unsized type is also unsized.\n \n Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0374\n #![feature(coerce_unsized)]\n use std::ops::CoerceUnsized;\n \n@@ -3342,7 +3344,7 @@ compile time. Any struct containing an unsized type is also unsized.\n \n Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0375\n #![feature(coerce_unsized)]\n use std::ops::CoerceUnsized;\n \n@@ -3397,7 +3399,7 @@ compile time. Any struct containing an unsized type is also unsized.\n \n Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0376\n #![feature(coerce_unsized)]\n use std::ops::CoerceUnsized;\n \n@@ -3448,7 +3450,7 @@ For more information see the [opt-in builtin traits RFC](https://github.com/rust\n E0390: r##\"\n You tried to implement methods for a primitive type. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0390\n struct Foo {\n     x: i32\n }\n@@ -3482,7 +3484,7 @@ and therefore cannot be constructed.\n \n The following example contains a circular dependency between two traits:\n \n-```compile_fail\n+```compile_fail,E0391\n trait FirstTrait : SecondTrait {\n \n }\n@@ -3497,9 +3499,9 @@ E0392: r##\"\n This error indicates that a type or lifetime parameter has been declared\n but not actually used. Here is an example that demonstrates the error:\n \n-```compile_fail\n+```compile_fail,E0392\n enum Foo<T> {\n-    Bar\n+    Bar,\n }\n ```\n \n@@ -3508,7 +3510,7 @@ by simply removing the type parameter, as shown below:\n \n ```\n enum Foo {\n-    Bar\n+    Bar,\n }\n ```\n \n@@ -3517,7 +3519,7 @@ used. A simple fix is shown below:\n \n ```\n enum Foo<T> {\n-    Bar(T)\n+    Bar(T),\n }\n ```\n \n@@ -3526,9 +3528,9 @@ example, when using raw pointers one may wish to specify the lifetime for\n which the pointed-at data is valid. An initial attempt (below) causes this\n error:\n \n-```compile_fail\n+```compile_fail,E0392\n struct Foo<'a, T> {\n-    x: *const T\n+    x: *const T,\n }\n ```\n \n@@ -3557,7 +3559,7 @@ E0393: r##\"\n A type parameter which references `Self` in its default value was not specified.\n Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0393\n trait A<T=Self> {}\n \n fn together_we_will_rule_the_galaxy(son: &A) {}\n@@ -3588,7 +3590,7 @@ E0439: r##\"\n The length of the platform-intrinsic function `simd_shuffle`\n wasn't specified. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0439\n #![feature(platform_intrinsics)]\n \n extern \"platform-intrinsic\" {\n@@ -3613,7 +3615,7 @@ E0440: r##\"\n A platform-specific intrinsic function has the wrong number of type\n parameters. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0440\n #![feature(repr_simd)]\n #![feature(platform_intrinsics)]\n \n@@ -3647,7 +3649,7 @@ E0441: r##\"\n An unknown platform-specific intrinsic function was used. Erroneous\n code example:\n \n-```compile_fail\n+```compile_fail,E0441\n #![feature(repr_simd)]\n #![feature(platform_intrinsics)]\n \n@@ -3681,7 +3683,7 @@ E0442: r##\"\n Intrinsic argument(s) and/or return value have the wrong type.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0442\n #![feature(repr_simd)]\n #![feature(platform_intrinsics)]\n \n@@ -3719,7 +3721,7 @@ E0443: r##\"\n Intrinsic argument(s) and/or return value have the wrong type.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0443\n #![feature(repr_simd)]\n #![feature(platform_intrinsics)]\n \n@@ -3754,7 +3756,7 @@ E0444: r##\"\n A platform-specific intrinsic function has wrong number of arguments.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0444\n #![feature(repr_simd)]\n #![feature(platform_intrinsics)]\n \n@@ -3787,7 +3789,7 @@ E0516: r##\"\n The `typeof` keyword is currently reserved but unimplemented.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0516\n fn main() {\n     let x: typeof(92) = 92;\n }\n@@ -3806,7 +3808,7 @@ E0520: r##\"\n A non-default implementation was already made on this type so it cannot be\n specialized further. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0520\n #![feature(specialization)]\n \n trait SpaceLlama {"}]}