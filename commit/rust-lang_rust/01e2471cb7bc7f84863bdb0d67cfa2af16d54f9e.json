{"sha": "01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZTI0NzFjYjdiYzdmODQ4NjNiZGIwZDY3Y2ZhMmFmMTZkNTRmOWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-27T21:51:19Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-27T21:52:46Z"}, "message": "core: Trait-ify various overloaded operators", "tree": {"sha": "dd3e607ce180e39a3f1a6ee9bf123fda13db3dbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd3e607ce180e39a3f1a6ee9bf123fda13db3dbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e", "html_url": "https://github.com/rust-lang/rust/commit/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6aadf56c8a6e603c79a8924e6a92398471de8cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6aadf56c8a6e603c79a8924e6a92398471de8cf", "html_url": "https://github.com/rust-lang/rust/commit/b6aadf56c8a6e603c79a8924e6a92398471de8cf"}], "stats": {"total": 60, "additions": 55, "deletions": 5}, "files": [{"sha": "1a1aeeadeb67146d81255c4d38280f115dc6bc0b", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e", "patch": "@@ -310,3 +310,10 @@ impl extensions<A:copy> for dvec<A> {\n         do self.swap |v| { vec::reachi(v, f); v }\n     }\n }\n+\n+impl extensions<A:copy> of ops::index<uint,A> for dvec<A> {\n+    pure fn index(&&idx: uint) -> A {\n+        self.get_elt(idx)\n+    }\n+}\n+"}, {"sha": "c56af8442f695c7335d088e4aa91ce683e84cad8", "filename": "src/libcore/str.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e", "patch": "@@ -1897,7 +1897,6 @@ trait unique_str {\n     fn trim() -> self;\n     fn trim_left() -> self;\n     fn trim_right() -> self;\n-    pure fn +(rhs: &str) -> self;\n }\n \n /// Extension methods for strings\n@@ -1919,6 +1918,13 @@ impl extensions of unique_str for ~str {\n     }\n }\n \n+impl extensions of ops::add<&str,~str> for ~str {\n+    #[inline(always)]\n+    pure fn add(rhs: &str) -> ~str {\n+        append(self, rhs)\n+    }\n+}\n+\n trait str_slice {\n     fn all(it: fn(char) -> bool) -> bool;\n     fn any(it: fn(char) -> bool) -> bool;"}, {"sha": "a97c8f8601a0a218cdd87a2a5efd74b7fd359891", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e", "patch": "@@ -1299,13 +1299,27 @@ impl extensions<T: copy> of vec_concat<T> for ~[T] {\n     }\n }\n \n+impl extensions<T: copy> of ops::add<&[const T],~[T]> for ~[T] {\n+    #[inline(always)]\n+    pure fn add(rhs: &[const T]) -> ~[T] {\n+        append(self, rhs)\n+    }\n+}\n+\n impl extensions<T: copy> of vec_concat<T> for ~[mut T] {\n     #[inline(always)]\n     pure fn +(rhs: &[const T]) -> ~[mut T] {\n         append_mut(self, rhs)\n     }\n }\n \n+impl extensions<T: copy> of ops::add<&[const T],~[mut T]> for ~[mut T] {\n+    #[inline(always)]\n+    pure fn add(rhs: &[const T]) -> ~[mut T] {\n+        append_mut(self, rhs)\n+    }\n+}\n+\n trait const_vector {\n     pure fn is_empty() -> bool;\n     pure fn is_not_empty() -> bool;"}, {"sha": "145ceba4ae53d58f3b08232c22a8bbaa39c3b57c", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e", "patch": "@@ -239,7 +239,7 @@ trait methods {\n     fn union(rhs: bitv) -> bool;\n     fn intersect(rhs: bitv) -> bool;\n     fn assign(rhs: bitv) -> bool;\n-    fn get(i: uint) -> bool;\n+    pure fn get(i: uint) -> bool;\n     fn [](i: uint) -> bool;\n     fn eq(rhs: bitv) -> bool;\n     fn clear();\n@@ -261,7 +261,7 @@ impl of methods for bitv {\n     fn union(rhs: bitv) -> bool { union(self, rhs) }\n     fn intersect(rhs: bitv) -> bool { intersect(self, rhs) }\n     fn assign(rhs: bitv) -> bool { assign(self, rhs) }\n-    fn get(i: uint) -> bool { get(self, i) }\n+    pure fn get(i: uint) -> bool { get(self, i) }\n     fn [](i: uint) -> bool { self.get(i) }\n     fn eq(rhs: bitv) -> bool { equal(self, rhs) }\n     fn clear() { clear(self) }\n@@ -285,6 +285,12 @@ impl of methods for bitv {\n     }\n }\n \n+impl extensions of ops::index<uint,bool> for bitv {\n+    pure fn index(&&i: uint) -> bool {\n+        self.get(i)\n+    }\n+}\n+\n impl of to_str::to_str for bitv {\n     fn to_str() -> ~str { to_str(self) }\n }"}, {"sha": "2522c9d58763e1cf074e89bec2b5a77238e4f113", "filename": "src/libstd/map.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e", "patch": "@@ -314,6 +314,14 @@ mod chained {\n         }\n     }\n \n+    impl hashmap<K, V: copy> of ops::index<K, V> for t<K, V> {\n+        pure fn index(k: K) -> V {\n+            unchecked {\n+                self.get(k)\n+            }\n+        }\n+    }\n+\n \n     fn chains<K,V>(nchains: uint) -> ~[mut chain<K,V>] {\n         ret vec::to_mut(vec::from_elem(nchains, absent));"}, {"sha": "0325ef3ac2e21e2cae0c52eef380d561a97635ca", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e", "patch": "@@ -35,7 +35,7 @@ fn insert<T: copy>(self: smallintmap<T>, key: uint, val: T) {\n  * Get the value for the specified key. If the key does not exist\n  * in the map then returns none\n  */\n-fn find<T: copy>(self: smallintmap<T>, key: uint) -> option<T> {\n+pure fn find<T: copy>(self: smallintmap<T>, key: uint) -> option<T> {\n     if key < self.v.len() { ret self.v.get_elt(key); }\n     ret none::<T>;\n }\n@@ -47,7 +47,7 @@ fn find<T: copy>(self: smallintmap<T>, key: uint) -> option<T> {\n  *\n  * If the key does not exist in the map\n  */\n-fn get<T: copy>(self: smallintmap<T>, key: uint) -> T {\n+pure fn get<T: copy>(self: smallintmap<T>, key: uint) -> T {\n     alt find(self, key) {\n       none { #error(\"smallintmap::get(): key not present\"); fail; }\n       some(v) { ret v; }\n@@ -114,6 +114,14 @@ impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n     }\n }\n \n+impl extensions<V: copy> of ops::index<uint, V> for smallintmap<V> {\n+    pure fn index(&&key: uint) -> V {\n+        unchecked {\n+            get(self, key)\n+        }\n+    }\n+}\n+\n /// Cast the given smallintmap to a map::map\n fn as_map<V: copy>(s: smallintmap<V>) -> map::map<uint, V> {\n     s as map::map::<uint, V>"}, {"sha": "279709a01b95cf06e53a2fa8bd66ed298260503e", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=01e2471cb7bc7f84863bdb0d67cfa2af16d54f9e", "patch": "@@ -16,6 +16,7 @@ import syntax::util::interner;\n import util::ppaux::ty_to_str;\n import syntax::codemap::span;\n import dvec::{dvec, extensions};\n+import vec::extensions;\n \n import std::map::hashmap;\n import option::is_some;"}]}