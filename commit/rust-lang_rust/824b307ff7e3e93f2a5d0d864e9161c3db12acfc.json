{"sha": "824b307ff7e3e93f2a5d0d864e9161c3db12acfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNGIzMDdmZjdlM2U5M2YyYTVkMGQ4NjRlOTE2MWMzZGIxMmFjZmM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-11-13T23:24:36Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-11-13T23:24:36Z"}, "message": "avoid the pprust infrastructure in macro expansion\n\nThis changes macro expansion to format the path of a macro directly\ninstead of usng the pprust infrastructure. The pprust infrastructure\ntries to perform line-breaking in a slow fashion, which is undesired\nwhen formatting the path of a macro.\n\nThis should to speed up expansion by a fair amount (I saw 20% on a\nprofiler on `rustc_mir`, and 50% of the time marked as \"expansion\" in\nthe profiler/time-passes is actually spent loading dependencies).", "tree": {"sha": "021efcc9ecc2b81b7844f89c08b04008001cdc61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/021efcc9ecc2b81b7844f89c08b04008001cdc61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/824b307ff7e3e93f2a5d0d864e9161c3db12acfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/824b307ff7e3e93f2a5d0d864e9161c3db12acfc", "html_url": "https://github.com/rust-lang/rust/commit/824b307ff7e3e93f2a5d0d864e9161c3db12acfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/824b307ff7e3e93f2a5d0d864e9161c3db12acfc/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aca22a8f81993b0e046dbc41307c99bd9e38a195", "url": "https://api.github.com/repos/rust-lang/rust/commits/aca22a8f81993b0e046dbc41307c99bd9e38a195", "html_url": "https://github.com/rust-lang/rust/commit/aca22a8f81993b0e046dbc41307c99bd9e38a195"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "491dbed01f1273555c5f78de8b18ed217b3995d0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/824b307ff7e3e93f2a5d0d864e9161c3db12acfc/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824b307ff7e3e93f2a5d0d864e9161c3db12acfc/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=824b307ff7e3e93f2a5d0d864e9161c3db12acfc", "patch": "@@ -29,6 +29,7 @@ use std_inject;\n use symbol::Symbol;\n use symbol::keywords;\n use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::hygiene::ExpnFormat;\n use tokenstream::{TokenStream, TokenTree};\n use util::small_vector::SmallVector;\n use visit::Visitor;\n@@ -151,6 +152,26 @@ impl ExpansionKind {\n     }\n }\n \n+fn macro_bang_format(path: &ast::Path) -> ExpnFormat {\n+    // We don't want to format a path using pretty-printing,\n+    // `format!(\"{}\", path)`, because that tries to insert\n+    // line-breaks and is slow.\n+    let mut path_str = String::with_capacity(64);\n+    for (i, segment) in path.segments.iter().enumerate() {\n+        if i != 0 {\n+            path_str.push_str(\"::\");\n+        }\n+\n+        if segment.identifier.name != keywords::CrateRoot.name() &&\n+            segment.identifier.name != keywords::DollarCrate.name()\n+        {\n+            path_str.push_str(&segment.identifier.name.as_str())\n+        }\n+    }\n+\n+    MacroBang(Symbol::intern(&path_str))\n+}\n+\n pub struct Invocation {\n     pub kind: InvocationKind,\n     expansion_kind: ExpansionKind,\n@@ -517,7 +538,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             mark.set_expn_info(ExpnInfo {\n                 call_site: span,\n                 callee: NameAndSpan {\n-                    format: MacroBang(Symbol::intern(&format!(\"{}\", path))),\n+                    format: macro_bang_format(path),\n                     span: def_site_span,\n                     allow_internal_unstable,\n                     allow_internal_unsafe,\n@@ -564,7 +585,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 invoc.expansion_data.mark.set_expn_info(ExpnInfo {\n                     call_site: span,\n                     callee: NameAndSpan {\n-                        format: MacroBang(Symbol::intern(&format!(\"{}\", path))),\n+                        format: macro_bang_format(path),\n                         span: tt_span,\n                         allow_internal_unstable,\n                         allow_internal_unsafe: false,\n@@ -600,7 +621,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 invoc.expansion_data.mark.set_expn_info(ExpnInfo {\n                     call_site: span,\n                     callee: NameAndSpan {\n-                        format: MacroBang(Symbol::intern(&format!(\"{}\", path))),\n+                        format: macro_bang_format(path),\n                         // FIXME procedural macros do not have proper span info\n                         // yet, when they do, we should use it here.\n                         span: None,"}]}