{"sha": "3975952601888d9f77e466c12e8e389748984b33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NzU5NTI2MDE4ODhkOWY3N2U0NjZjMTJlOGUzODk3NDg5ODRiMzM=", "commit": {"author": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-22T05:00:28Z"}, "committer": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-24T11:34:00Z"}, "message": "SSR: Pass current file position through to SSR code.\n\nIn a subsequent commit, it will be used for resolving paths.", "tree": {"sha": "e599abf34b90be63e091ea78bfa58fe46cf1b81a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e599abf34b90be63e091ea78bfa58fe46cf1b81a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3975952601888d9f77e466c12e8e389748984b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3975952601888d9f77e466c12e8e389748984b33", "html_url": "https://github.com/rust-lang/rust/commit/3975952601888d9f77e466c12e8e389748984b33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3975952601888d9f77e466c12e8e389748984b33/comments", "author": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02fc3d50ee4d179cc5a443a790544c2a5e439cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/02fc3d50ee4d179cc5a443a790544c2a5e439cb0", "html_url": "https://github.com/rust-lang/rust/commit/02fc3d50ee4d179cc5a443a790544c2a5e439cb0"}], "stats": {"total": 120, "additions": 88, "deletions": 32}, "files": [{"sha": "7356e947b98af48305442aa0a07e4f2d9258e05e", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3975952601888d9f77e466c12e8e389748984b33/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975952601888d9f77e466c12e8e389748984b33/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=3975952601888d9f77e466c12e8e389748984b33", "patch": "@@ -505,9 +505,10 @@ impl Analysis {\n         &self,\n         query: &str,\n         parse_only: bool,\n+        position: FilePosition,\n     ) -> Cancelable<Result<SourceChange, SsrError>> {\n         self.with_db(|db| {\n-            let edits = ssr::parse_search_replace(query, parse_only, db)?;\n+            let edits = ssr::parse_search_replace(query, parse_only, db, position)?;\n             Ok(SourceChange::from(edits))\n         })\n     }"}, {"sha": "3e2705d62b869fdce052b3a7fead843cc7ed8293", "filename": "crates/ra_ide/src/ssr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3975952601888d9f77e466c12e8e389748984b33/crates%2Fra_ide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975952601888d9f77e466c12e8e389748984b33/crates%2Fra_ide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fssr.rs?ref=3975952601888d9f77e466c12e8e389748984b33", "patch": "@@ -1,3 +1,4 @@\n+use ra_db::FilePosition;\n use ra_ide_db::RootDatabase;\n \n use crate::SourceFileEdit;\n@@ -42,12 +43,13 @@ pub fn parse_search_replace(\n     rule: &str,\n     parse_only: bool,\n     db: &RootDatabase,\n+    position: FilePosition,\n ) -> Result<Vec<SourceFileEdit>, SsrError> {\n     let rule: SsrRule = rule.parse()?;\n+    let mut match_finder = MatchFinder::in_context(db, position);\n+    match_finder.add_rule(rule);\n     if parse_only {\n         return Ok(Vec::new());\n     }\n-    let mut match_finder = MatchFinder::new(db);\n-    match_finder.add_rule(rule);\n     Ok(match_finder.edits())\n }"}, {"sha": "a0a5c976274e0a8c0c04c675afb4586f9adc2309", "filename": "crates/ra_ssr/src/lib.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3975952601888d9f77e466c12e8e389748984b33/crates%2Fra_ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975952601888d9f77e466c12e8e389748984b33/crates%2Fra_ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Flib.rs?ref=3975952601888d9f77e466c12e8e389748984b33", "patch": "@@ -13,11 +13,12 @@ mod errors;\n #[cfg(test)]\n mod tests;\n \n+use crate::errors::bail;\n pub use crate::errors::SsrError;\n pub use crate::matching::Match;\n use crate::matching::MatchFailureReason;\n use hir::Semantics;\n-use ra_db::{FileId, FileRange};\n+use ra_db::{FileId, FilePosition, FileRange};\n use ra_ide_db::source_change::SourceFileEdit;\n use ra_syntax::{ast, AstNode, SyntaxNode, TextRange};\n use rustc_hash::FxHashMap;\n@@ -51,10 +52,35 @@ pub struct MatchFinder<'db> {\n }\n \n impl<'db> MatchFinder<'db> {\n-    pub fn new(db: &'db ra_ide_db::RootDatabase) -> MatchFinder<'db> {\n+    /// Constructs a new instance where names will be looked up as if they appeared at\n+    /// `lookup_context`.\n+    pub fn in_context(\n+        db: &'db ra_ide_db::RootDatabase,\n+        _lookup_context: FilePosition,\n+    ) -> MatchFinder<'db> {\n+        // FIXME: Use lookup_context\n         MatchFinder { sema: Semantics::new(db), rules: Vec::new() }\n     }\n \n+    /// Constructs an instance using the start of the first file in `db` as the lookup context.\n+    pub fn at_first_file(db: &'db ra_ide_db::RootDatabase) -> Result<MatchFinder<'db>, SsrError> {\n+        use ra_db::SourceDatabaseExt;\n+        use ra_ide_db::symbol_index::SymbolsDatabase;\n+        if let Some(first_file_id) = db\n+            .local_roots()\n+            .iter()\n+            .next()\n+            .and_then(|root| db.source_root(root.clone()).iter().next())\n+        {\n+            Ok(MatchFinder::in_context(\n+                db,\n+                FilePosition { file_id: first_file_id, offset: 0.into() },\n+            ))\n+        } else {\n+            bail!(\"No files to search\");\n+        }\n+    }\n+\n     /// Adds a rule to be applied. The order in which rules are added matters. Earlier rules take\n     /// precedence. If a node is matched by an earlier rule, then later rules won't be permitted to\n     /// match to it."}, {"sha": "a43d57c34244b2088dac55092f7a72609795b02c", "filename": "crates/ra_ssr/src/matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3975952601888d9f77e466c12e8e389748984b33/crates%2Fra_ssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975952601888d9f77e466c12e8e389748984b33/crates%2Fra_ssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fmatching.rs?ref=3975952601888d9f77e466c12e8e389748984b33", "patch": "@@ -576,8 +576,8 @@ mod tests {\n         let rule: SsrRule = \"foo($x) ==>> bar($x)\".parse().unwrap();\n         let input = \"fn foo() {} fn bar() {} fn main() { foo(1+2); }\";\n \n-        let (db, _) = crate::tests::single_file(input);\n-        let mut match_finder = MatchFinder::new(&db);\n+        let (db, position) = crate::tests::single_file(input);\n+        let mut match_finder = MatchFinder::in_context(&db, position);\n         match_finder.add_rule(rule);\n         let matches = match_finder.matches();\n         assert_eq!(matches.matches.len(), 1);"}, {"sha": "63d52789473508ca376c83e31aad0c72ef620339", "filename": "crates/ra_ssr/src/tests.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3975952601888d9f77e466c12e8e389748984b33/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975952601888d9f77e466c12e8e389748984b33/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Ftests.rs?ref=3975952601888d9f77e466c12e8e389748984b33", "patch": "@@ -1,6 +1,6 @@\n use crate::{MatchFinder, SsrRule};\n use expect::{expect, Expect};\n-use ra_db::{salsa::Durability, FileId, SourceDatabaseExt};\n+use ra_db::{salsa::Durability, FileId, FilePosition, SourceDatabaseExt};\n use rustc_hash::FxHashSet;\n use std::sync::Arc;\n use test_utils::mark;\n@@ -59,24 +59,30 @@ fn parser_undefined_placeholder_in_replacement() {\n     );\n }\n \n-pub(crate) fn single_file(code: &str) -> (ra_ide_db::RootDatabase, FileId) {\n+/// `code` may optionally contain a cursor marker `<|>`. If it doesn't, then the position will be\n+/// the start of the file.\n+pub(crate) fn single_file(code: &str) -> (ra_ide_db::RootDatabase, FilePosition) {\n     use ra_db::fixture::WithFixture;\n     use ra_ide_db::symbol_index::SymbolsDatabase;\n-    let (db, file_id) = ra_ide_db::RootDatabase::with_single_file(code);\n-    let mut db = db;\n+    let (mut db, position) = if code.contains(test_utils::CURSOR_MARKER) {\n+        ra_ide_db::RootDatabase::with_position(code)\n+    } else {\n+        let (db, file_id) = ra_ide_db::RootDatabase::with_single_file(code);\n+        (db, FilePosition { file_id, offset: 0.into() })\n+    };\n     let mut local_roots = FxHashSet::default();\n     local_roots.insert(ra_db::fixture::WORKSPACE);\n     db.set_local_roots_with_durability(Arc::new(local_roots), Durability::HIGH);\n-    (db, file_id)\n+    (db, position)\n }\n \n fn assert_ssr_transform(rule: &str, input: &str, expected: Expect) {\n     assert_ssr_transforms(&[rule], input, expected);\n }\n \n fn assert_ssr_transforms(rules: &[&str], input: &str, expected: Expect) {\n-    let (db, file_id) = single_file(input);\n-    let mut match_finder = MatchFinder::new(&db);\n+    let (db, position) = single_file(input);\n+    let mut match_finder = MatchFinder::in_context(&db, position);\n     for rule in rules {\n         let rule: SsrRule = rule.parse().unwrap();\n         match_finder.add_rule(rule);\n@@ -85,10 +91,10 @@ fn assert_ssr_transforms(rules: &[&str], input: &str, expected: Expect) {\n     if edits.is_empty() {\n         panic!(\"No edits were made\");\n     }\n-    assert_eq!(edits[0].file_id, file_id);\n+    assert_eq!(edits[0].file_id, position.file_id);\n     // Note, db.file_text is not necessarily the same as `input`, since fixture parsing alters\n     // stuff.\n-    let mut actual = db.file_text(file_id).to_string();\n+    let mut actual = db.file_text(position.file_id).to_string();\n     edits[0].edit.apply(&mut actual);\n     expected.assert_eq(&actual);\n }\n@@ -106,34 +112,34 @@ fn print_match_debug_info(match_finder: &MatchFinder, file_id: FileId, snippet:\n }\n \n fn assert_matches(pattern: &str, code: &str, expected: &[&str]) {\n-    let (db, file_id) = single_file(code);\n-    let mut match_finder = MatchFinder::new(&db);\n+    let (db, position) = single_file(code);\n+    let mut match_finder = MatchFinder::in_context(&db, position);\n     match_finder.add_search_pattern(pattern.parse().unwrap());\n     let matched_strings: Vec<String> =\n         match_finder.matches().flattened().matches.iter().map(|m| m.matched_text()).collect();\n     if matched_strings != expected && !expected.is_empty() {\n-        print_match_debug_info(&match_finder, file_id, &expected[0]);\n+        print_match_debug_info(&match_finder, position.file_id, &expected[0]);\n     }\n     assert_eq!(matched_strings, expected);\n }\n \n fn assert_no_match(pattern: &str, code: &str) {\n-    let (db, file_id) = single_file(code);\n-    let mut match_finder = MatchFinder::new(&db);\n+    let (db, position) = single_file(code);\n+    let mut match_finder = MatchFinder::in_context(&db, position);\n     match_finder.add_search_pattern(pattern.parse().unwrap());\n     let matches = match_finder.matches().flattened().matches;\n     if !matches.is_empty() {\n-        print_match_debug_info(&match_finder, file_id, &matches[0].matched_text());\n+        print_match_debug_info(&match_finder, position.file_id, &matches[0].matched_text());\n         panic!(\"Got {} matches when we expected none: {:#?}\", matches.len(), matches);\n     }\n }\n \n fn assert_match_failure_reason(pattern: &str, code: &str, snippet: &str, expected_reason: &str) {\n-    let (db, file_id) = single_file(code);\n-    let mut match_finder = MatchFinder::new(&db);\n+    let (db, position) = single_file(code);\n+    let mut match_finder = MatchFinder::in_context(&db, position);\n     match_finder.add_search_pattern(pattern.parse().unwrap());\n     let mut reasons = Vec::new();\n-    for d in match_finder.debug_where_text_equal(file_id, snippet) {\n+    for d in match_finder.debug_where_text_equal(position.file_id, snippet) {\n         if let Some(reason) = d.match_failure_reason() {\n             reasons.push(reason.to_owned());\n         }"}, {"sha": "22f5b4be040e858020184126ea18a4d5e5e1506f", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3975952601888d9f77e466c12e8e389748984b33/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975952601888d9f77e466c12e8e389748984b33/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=3975952601888d9f77e466c12e8e389748984b33", "patch": "@@ -7,7 +7,7 @@ pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n     use ra_db::SourceDatabaseExt;\n     let (host, vfs) = load_cargo(&std::env::current_dir()?, true, true)?;\n     let db = host.raw_database();\n-    let mut match_finder = MatchFinder::new(db);\n+    let mut match_finder = MatchFinder::at_first_file(db)?;\n     for rule in rules {\n         match_finder.add_rule(rule);\n     }\n@@ -30,7 +30,7 @@ pub fn search_for_patterns(patterns: Vec<SsrPattern>, debug_snippet: Option<Stri\n     use ra_ide_db::symbol_index::SymbolsDatabase;\n     let (host, _vfs) = load_cargo(&std::env::current_dir()?, true, true)?;\n     let db = host.raw_database();\n-    let mut match_finder = MatchFinder::new(db);\n+    let mut match_finder = MatchFinder::at_first_file(db)?;\n     for pattern in patterns {\n         match_finder.add_search_pattern(pattern);\n     }"}, {"sha": "cad92c444e008d41ef0108a9e1ce27d09e07ea0d", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3975952601888d9f77e466c12e8e389748984b33/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975952601888d9f77e466c12e8e389748984b33/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=3975952601888d9f77e466c12e8e389748984b33", "patch": "@@ -1026,8 +1026,9 @@ pub(crate) fn handle_ssr(\n     params: lsp_ext::SsrParams,\n ) -> Result<lsp_types::WorkspaceEdit> {\n     let _p = profile(\"handle_ssr\");\n+    let position = from_proto::file_position(&snap, params.position)?;\n     let source_change =\n-        snap.analysis.structural_search_replace(&params.query, params.parse_only)??;\n+        snap.analysis.structural_search_replace(&params.query, params.parse_only, position)??;\n     to_proto::workspace_edit(&snap, source_change)\n }\n "}, {"sha": "113e0e070ab194dc072adebe8a6f8ff4fa7d1ac4", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3975952601888d9f77e466c12e8e389748984b33/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3975952601888d9f77e466c12e8e389748984b33/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=3975952601888d9f77e466c12e8e389748984b33", "patch": "@@ -216,6 +216,11 @@ impl Request for Ssr {\n pub struct SsrParams {\n     pub query: String,\n     pub parse_only: bool,\n+\n+    /// File position where SSR was invoked. Paths in `query` will be resolved relative to this\n+    /// position.\n+    #[serde(flatten)]\n+    pub position: lsp_types::TextDocumentPositionParams,\n }\n \n pub enum StatusNotification {}"}, {"sha": "1be01fd8842cc8eacb34d35a386f336075d52af3", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3975952601888d9f77e466c12e8e389748984b33/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/3975952601888d9f77e466c12e8e389748984b33/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=3975952601888d9f77e466c12e8e389748984b33", "patch": "@@ -274,6 +274,11 @@ interface SsrParams {\n     query: string,\n     /// If true, only check the syntax of the query and don't compute the actual edit.\n     parseOnly: bool,\n+    /// The current text document. This and `position` will be used to determine in what scope\n+    /// paths in `query` should be resolved.\n+    textDocument: lc.TextDocumentIdentifier;\n+    /// Position where SSR was invoked.\n+    position: lc.Position;\n }\n ```\n \n@@ -285,7 +290,7 @@ WorkspaceEdit\n \n ### Example\n \n-SSR with query `foo($a:expr, $b:expr) ==>> ($a).foo($b)` will transform, eg `foo(y + 5, z)` into `(y + 5).foo(z)`.\n+SSR with query `foo($a, $b) ==>> ($a).foo($b)` will transform, eg `foo(y + 5, z)` into `(y + 5).foo(z)`.\n \n ### Unresolved Question\n "}, {"sha": "3ae995705f2777c2d00960a4cf4dcddb30c204dc", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3975952601888d9f77e466c12e8e389748984b33/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3975952601888d9f77e466c12e8e389748984b33/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=3975952601888d9f77e466c12e8e389748984b33", "patch": "@@ -185,15 +185,21 @@ export function parentModule(ctx: Ctx): Cmd {\n \n export function ssr(ctx: Ctx): Cmd {\n     return async () => {\n+        const editor = vscode.window.activeTextEditor;\n         const client = ctx.client;\n-        if (!client) return;\n+        if (!editor || !client) return;\n+\n+        const position = editor.selection.active;\n+        let textDocument = { uri: editor.document.uri.toString() };\n \n         const options: vscode.InputBoxOptions = {\n             value: \"() ==>> ()\",\n             prompt: \"Enter request, for example 'Foo($a) ==> Foo::new($a)' \",\n             validateInput: async (x: string) => {\n                 try {\n-                    await client.sendRequest(ra.ssr, { query: x, parseOnly: true });\n+                    await client.sendRequest(ra.ssr, {\n+                        query: x, parseOnly: true, textDocument, position,\n+                    });\n                 } catch (e) {\n                     return e.toString();\n                 }\n@@ -208,7 +214,9 @@ export function ssr(ctx: Ctx): Cmd {\n             title: \"Structured search replace in progress...\",\n             cancellable: false,\n         }, async (_progress, _token) => {\n-            const edit = await client.sendRequest(ra.ssr, { query: request, parseOnly: false });\n+            const edit = await client.sendRequest(ra.ssr, {\n+                query: request, parseOnly: false, textDocument, position\n+            });\n \n             await vscode.workspace.applyEdit(client.protocol2CodeConverter.asWorkspaceEdit(edit));\n         });"}, {"sha": "149f9a0d644d16e0f73b39bad3788004a8657eed", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3975952601888d9f77e466c12e8e389748984b33/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3975952601888d9f77e466c12e8e389748984b33/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=3975952601888d9f77e466c12e8e389748984b33", "patch": "@@ -93,6 +93,8 @@ export const inlayHints = new lc.RequestType<InlayHintsParams, InlayHint[], void\n export interface SsrParams {\n     query: string;\n     parseOnly: boolean;\n+    textDocument: lc.TextDocumentIdentifier;\n+    position: lc.Position;\n }\n export const ssr = new lc.RequestType<SsrParams, lc.WorkspaceEdit, void>('experimental/ssr');\n "}]}