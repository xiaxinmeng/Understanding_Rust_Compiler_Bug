{"sha": "69a5c379dfbfdb17319eab061bef554845eca407", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YTVjMzc5ZGZiZmRiMTczMTllYWIwNjFiZWY1NTQ4NDVlY2E0MDc=", "commit": {"author": {"name": "Theo Belaire", "email": "theo.belaire@gmail.com", "date": "2015-04-25T19:11:56Z"}, "committer": {"name": "Theo Belaire", "email": "theo.belaire@gmail.com", "date": "2015-04-25T19:11:56Z"}, "message": "Maybe it works\n\nStill compiling, but I think I have it!", "tree": {"sha": "66a4a0864aa77668fbbbac066220dbc073285f1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66a4a0864aa77668fbbbac066220dbc073285f1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69a5c379dfbfdb17319eab061bef554845eca407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69a5c379dfbfdb17319eab061bef554845eca407", "html_url": "https://github.com/rust-lang/rust/commit/69a5c379dfbfdb17319eab061bef554845eca407", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69a5c379dfbfdb17319eab061bef554845eca407/comments", "author": {"login": "tbelaire", "id": 427239, "node_id": "MDQ6VXNlcjQyNzIzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/427239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbelaire", "html_url": "https://github.com/tbelaire", "followers_url": "https://api.github.com/users/tbelaire/followers", "following_url": "https://api.github.com/users/tbelaire/following{/other_user}", "gists_url": "https://api.github.com/users/tbelaire/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbelaire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbelaire/subscriptions", "organizations_url": "https://api.github.com/users/tbelaire/orgs", "repos_url": "https://api.github.com/users/tbelaire/repos", "events_url": "https://api.github.com/users/tbelaire/events{/privacy}", "received_events_url": "https://api.github.com/users/tbelaire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbelaire", "id": 427239, "node_id": "MDQ6VXNlcjQyNzIzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/427239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbelaire", "html_url": "https://github.com/tbelaire", "followers_url": "https://api.github.com/users/tbelaire/followers", "following_url": "https://api.github.com/users/tbelaire/following{/other_user}", "gists_url": "https://api.github.com/users/tbelaire/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbelaire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbelaire/subscriptions", "organizations_url": "https://api.github.com/users/tbelaire/orgs", "repos_url": "https://api.github.com/users/tbelaire/repos", "events_url": "https://api.github.com/users/tbelaire/events{/privacy}", "received_events_url": "https://api.github.com/users/tbelaire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "168615f869ea560aa95e12a3c043c19110368be6", "url": "https://api.github.com/repos/rust-lang/rust/commits/168615f869ea560aa95e12a3c043c19110368be6", "html_url": "https://github.com/rust-lang/rust/commit/168615f869ea560aa95e12a3c043c19110368be6"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "10068cf373ec572422cf5de5d3b2da4610e843bd", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69a5c379dfbfdb17319eab061bef554845eca407/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a5c379dfbfdb17319eab061bef554845eca407/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=69a5c379dfbfdb17319eab061bef554845eca407", "patch": "@@ -896,6 +896,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n         match target {\n             Some(ref target) if target.shadowable != Shadowable::Always => {\n+                use syntax::ast_map::NodeItem;\n                 let ns_word = match namespace {\n                     TypeNS => \"type\",\n                     ValueNS => \"value\",\n@@ -904,12 +905,21 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                           \"a {} named `{}` has already been imported \\\n                            in this module\", ns_word,\n                                   &token::get_name(name));\n+                let use_id = import_resolution.id(namespace);\n+                if let NodeItem(item) = self.resolver.ast_map.get(use_id) {\n+                    // Assert item.node is ItemUse\n+                    // I feel like this should maybe mention the type,\n+                    // as it's otherwise a bit of work to look up...\n+                    // use syntax::ast::Item;\n+                    span_note!(self.resolver.session, item.span,\n+                               \"Previously import of {} `{}` here\",\n+                               ns_word, token::get_name(name));\n+                }\n+                // Also showing the definition is reasonable?\n                 if let Some(sp) = target.bindings.span_for_namespace(namespace) {\n                     span_note!(self.resolver.session, sp,\n-                               \"first import of {} `{}` here\",\n+                               \"definition of {} `{}` here\",\n                                ns_word, token::get_name(name));\n-                } else {\n-                    span_note!(self.resolver.session, import_span, \"I can't find where it was previously imported\");\n                 }\n             }\n             Some(_) | None => {}"}]}