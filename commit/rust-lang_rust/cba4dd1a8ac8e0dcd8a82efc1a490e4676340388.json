{"sha": "cba4dd1a8ac8e0dcd8a82efc1a490e4676340388", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYTRkZDFhOGFjOGUwZGNkOGE4MmVmYzFhNDkwZTQ2NzYzNDAzODg=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-22T11:53:28Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-22T11:53:28Z"}, "message": "Improve find_all_ref work inside macro", "tree": {"sha": "e8da5d1376e31d2591aff4c8b2a8c3b4d3025a2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8da5d1376e31d2591aff4c8b2a8c3b4d3025a2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cba4dd1a8ac8e0dcd8a82efc1a490e4676340388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cba4dd1a8ac8e0dcd8a82efc1a490e4676340388", "html_url": "https://github.com/rust-lang/rust/commit/cba4dd1a8ac8e0dcd8a82efc1a490e4676340388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cba4dd1a8ac8e0dcd8a82efc1a490e4676340388/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f647faac60660d9022b9d677c894d65e98c8ae5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f647faac60660d9022b9d677c894d65e98c8ae5f", "html_url": "https://github.com/rust-lang/rust/commit/f647faac60660d9022b9d677c894d65e98c8ae5f"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "746cc86ba6b0e6558e79d9184680e6e388c9a3a0", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cba4dd1a8ac8e0dcd8a82efc1a490e4676340388/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba4dd1a8ac8e0dcd8a82efc1a490e4676340388/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=cba4dd1a8ac8e0dcd8a82efc1a490e4676340388", "patch": "@@ -94,12 +94,16 @@ pub(crate) fn find_all_refs(\n     let sema = Semantics::new(db);\n     let syntax = sema.parse(position.file_id).syntax().clone();\n \n-    let (opt_name, search_kind) =\n-        if let Some(name) = get_struct_def_name_for_struct_literal_search(&syntax, position) {\n-            (Some(name), ReferenceKind::StructLiteral)\n-        } else {\n-            (find_node_at_offset::<ast::Name>(&syntax, position.offset), ReferenceKind::Other)\n-        };\n+    let (opt_name, search_kind) = if let Some(name) =\n+        get_struct_def_name_for_struct_literal_search(&sema, &syntax, position)\n+    {\n+        (Some(name), ReferenceKind::StructLiteral)\n+    } else {\n+        (\n+            sema.find_node_at_offset_with_descend::<ast::Name>(&syntax, position.offset),\n+            ReferenceKind::Other,\n+        )\n+    };\n \n     let RangeInfo { range, info: def } = find_name(&sema, &syntax, position, opt_name)?;\n \n@@ -131,7 +135,8 @@ fn find_name(\n         let range = name.syntax().text_range();\n         return Some(RangeInfo::new(range, def));\n     }\n-    let name_ref = find_node_at_offset::<ast::NameRef>(&syntax, position.offset)?;\n+    let name_ref =\n+        sema.find_node_at_offset_with_descend::<ast::NameRef>(&syntax, position.offset)?;\n     let def = classify_name_ref(sema, &name_ref)?.definition();\n     let range = name_ref.syntax().text_range();\n     Some(RangeInfo::new(range, def))\n@@ -157,17 +162,26 @@ fn decl_access(def: &Definition, syntax: &SyntaxNode, range: TextRange) -> Optio\n }\n \n fn get_struct_def_name_for_struct_literal_search(\n+    sema: &Semantics<RootDatabase>,\n     syntax: &SyntaxNode,\n     position: FilePosition,\n ) -> Option<ast::Name> {\n     if let TokenAtOffset::Between(ref left, ref right) = syntax.token_at_offset(position.offset) {\n         if right.kind() != SyntaxKind::L_CURLY && right.kind() != SyntaxKind::L_PAREN {\n             return None;\n         }\n-        if let Some(name) = find_node_at_offset::<ast::Name>(&syntax, left.text_range().start()) {\n+        if let Some(name) =\n+            sema.find_node_at_offset_with_descend::<ast::Name>(&syntax, left.text_range().start())\n+        {\n             return name.syntax().ancestors().find_map(ast::StructDef::cast).and_then(|l| l.name());\n         }\n-        if find_node_at_offset::<ast::TypeParamList>(&syntax, left.text_range().start()).is_some() {\n+        if sema\n+            .find_node_at_offset_with_descend::<ast::TypeParamList>(\n+                &syntax,\n+                left.text_range().start(),\n+            )\n+            .is_some()\n+        {\n             return left.ancestors().find_map(ast::StructDef::cast).and_then(|l| l.name());\n         }\n     }"}]}