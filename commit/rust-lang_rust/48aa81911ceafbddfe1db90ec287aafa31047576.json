{"sha": "48aa81911ceafbddfe1db90ec287aafa31047576", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YWE4MTkxMWNlYWZiZGRmZTFkYjkwZWMyODdhYWZhMzEwNDc1NzY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-27T14:21:47Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-01T19:05:03Z"}, "message": "what is going on?", "tree": {"sha": "cc70007130609d22fe598153af9f0c353f39f6f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc70007130609d22fe598153af9f0c353f39f6f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48aa81911ceafbddfe1db90ec287aafa31047576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48aa81911ceafbddfe1db90ec287aafa31047576", "html_url": "https://github.com/rust-lang/rust/commit/48aa81911ceafbddfe1db90ec287aafa31047576", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48aa81911ceafbddfe1db90ec287aafa31047576/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d924a6252ee65c1cfe518c9cdc63870e3e62eed", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d924a6252ee65c1cfe518c9cdc63870e3e62eed", "html_url": "https://github.com/rust-lang/rust/commit/3d924a6252ee65c1cfe518c9cdc63870e3e62eed"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "dfeab9715cc01dfa5281c7426554297328295d61", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/48aa81911ceafbddfe1db90ec287aafa31047576/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48aa81911ceafbddfe1db90ec287aafa31047576/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=48aa81911ceafbddfe1db90ec287aafa31047576", "patch": "@@ -1730,7 +1730,12 @@ impl<'a, 'tcx> Lift<'tcx> for Region<'a> {\n         if tcx.interners.arena.in_arena(*self as *const _) {\n             return Some(unsafe { mem::transmute(*self) });\n         }\n-        Some(tcx.intern_const_alloc(mir::interpret::Allocation::clone(self)))\n+        // Also try in the global tcx if we're not that.\n+        if !tcx.is_global() {\n+            self.lift_to_tcx(tcx.global_tcx())\n+        } else {\n+            None\n+        }\n     }\n }\n \n@@ -1740,12 +1745,7 @@ impl<'a, 'tcx> Lift<'tcx> for Goal<'a> {\n         if tcx.interners.arena.in_arena(*self as *const _) {\n             return Some(unsafe { mem::transmute(*self) });\n         }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n-        }\n+        Some(tcx.intern_const_alloc(mir::interpret::Allocation::clone(self)))\n     }\n }\n "}]}