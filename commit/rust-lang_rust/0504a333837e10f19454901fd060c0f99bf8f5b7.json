{"sha": "0504a333837e10f19454901fd060c0f99bf8f5b7", "node_id": "C_kwDOAAsO6NoAKDA1MDRhMzMzODM3ZTEwZjE5NDU0OTAxZmQwNjBjMGY5OWJmOGY1Yjc", "commit": {"author": {"name": "Julia Tatz", "email": "tatz.j@northeastern.edu", "date": "2021-04-06T20:00:35Z"}, "committer": {"name": "Jynn Nelson", "email": "jyn.nelson@redjack.com", "date": "2023-03-31T11:28:39Z"}, "message": "Preserve, clarify, and extend debug information\n\n`-Cdebuginfo=1` was never line tables only and\ncan't be due to backwards compatibility issues.\nThis was clarified and an option for line tables only\nwas added. Additionally an option for line info\ndirectives only was added, which is well needed for\nsome targets. The debug info options should now\nbehave the same as clang's debug info options.", "tree": {"sha": "2e398745b33d84894ee367bf07d77bdc14e075fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e398745b33d84894ee367bf07d77bdc14e075fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0504a333837e10f19454901fd060c0f99bf8f5b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0504a333837e10f19454901fd060c0f99bf8f5b7", "html_url": "https://github.com/rust-lang/rust/commit/0504a333837e10f19454901fd060c0f99bf8f5b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0504a333837e10f19454901fd060c0f99bf8f5b7/comments", "author": {"login": "jdtatz", "id": 7038393, "node_id": "MDQ6VXNlcjcwMzgzOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7038393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdtatz", "html_url": "https://github.com/jdtatz", "followers_url": "https://api.github.com/users/jdtatz/followers", "following_url": "https://api.github.com/users/jdtatz/following{/other_user}", "gists_url": "https://api.github.com/users/jdtatz/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdtatz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdtatz/subscriptions", "organizations_url": "https://api.github.com/users/jdtatz/orgs", "repos_url": "https://api.github.com/users/jdtatz/repos", "events_url": "https://api.github.com/users/jdtatz/events{/privacy}", "received_events_url": "https://api.github.com/users/jdtatz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb3e9c1f45981b47160543cfd882ca00e69bbfab", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb3e9c1f45981b47160543cfd882ca00e69bbfab", "html_url": "https://github.com/rust-lang/rust/commit/eb3e9c1f45981b47160543cfd882ca00e69bbfab"}], "stats": {"total": 180, "additions": 126, "deletions": 54}, "files": [{"sha": "4bf6762d1f604ea8e8138ac2226cb8466f21ed6b", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=0504a333837e10f19454901fd060c0f99bf8f5b7", "patch": "@@ -830,24 +830,7 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n     }\n     .unwrap_or_default();\n     let split_name = split_name.to_str().unwrap();\n-\n-    // FIXME(#60020):\n-    //\n-    //    This should actually be\n-    //\n-    //        let kind = DebugEmissionKind::from_generic(tcx.sess.opts.debuginfo);\n-    //\n-    //    That is, we should set LLVM's emission kind to `LineTablesOnly` if\n-    //    we are compiling with \"limited\" debuginfo. However, some of the\n-    //    existing tools relied on slightly more debuginfo being generated than\n-    //    would be the case with `LineTablesOnly`, and we did not want to break\n-    //    these tools in a \"drive-by fix\", without a good idea or plan about\n-    //    what limited debuginfo should exactly look like. So for now we keep\n-    //    the emission kind as `FullDebug`.\n-    //\n-    //    See https://github.com/rust-lang/rust/issues/60020 for details.\n-    let kind = DebugEmissionKind::FullDebug;\n-    assert!(tcx.sess.opts.debuginfo != DebugInfo::None);\n+    let kind = DebugEmissionKind::from_generic(tcx.sess.opts.debuginfo);\n \n     unsafe {\n         let compile_unit_file = llvm::LLVMRustDIBuilderCreateFile("}, {"sha": "41a75c9d775f212060354281da3e12a6f9e4b19a", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=0504a333837e10f19454901fd060c0f99bf8f5b7", "patch": "@@ -402,7 +402,7 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             cx: &CodegenCx<'ll, 'tcx>,\n             fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n         ) -> &'ll DIArray {\n-            if cx.sess().opts.debuginfo == DebugInfo::Limited {\n+            if cx.sess().opts.debuginfo != DebugInfo::Full {\n                 return create_DIArray(DIB(cx), &[]);\n             }\n "}, {"sha": "aff352abab4697950a6fb24994a1488c7d02d688", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=0504a333837e10f19454901fd060c0f99bf8f5b7", "patch": "@@ -946,15 +946,17 @@ pub mod debuginfo {\n         NoDebug,\n         FullDebug,\n         LineTablesOnly,\n+        DebugDirectivesOnly,\n     }\n \n     impl DebugEmissionKind {\n         pub fn from_generic(kind: rustc_session::config::DebugInfo) -> Self {\n             use rustc_session::config::DebugInfo;\n             match kind {\n                 DebugInfo::None => DebugEmissionKind::NoDebug,\n-                DebugInfo::Limited => DebugEmissionKind::LineTablesOnly,\n-                DebugInfo::Full => DebugEmissionKind::FullDebug,\n+                DebugInfo::LineDirectivesOnly => DebugEmissionKind::DebugDirectivesOnly,\n+                DebugInfo::LineTablesOnly => DebugEmissionKind::LineTablesOnly,\n+                DebugInfo::Limited | DebugInfo::Full => DebugEmissionKind::FullDebug,\n             }\n         }\n     }"}, {"sha": "65dfc325a118f8b23837fd6f64c1ad99c4eef716", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=0504a333837e10f19454901fd060c0f99bf8f5b7", "patch": "@@ -1121,9 +1121,12 @@ impl<'a> Linker for EmLinker<'a> {\n \n     fn debuginfo(&mut self, _strip: Strip, _: &[PathBuf]) {\n         // Preserve names or generate source maps depending on debug info\n+        // For more information see https://emscripten.org/docs/tools_reference/emcc.html#emcc-g\n         self.cmd.arg(match self.sess.opts.debuginfo {\n             DebugInfo::None => \"-g0\",\n-            DebugInfo::Limited => \"--profiling-funcs\",\n+            DebugInfo::Limited | DebugInfo::LineTablesOnly | DebugInfo::LineDirectivesOnly => {\n+                \"--profiling-funcs\"\n+            }\n             DebugInfo::Full => \"-g\",\n         });\n     }"}, {"sha": "10dfd32d418a21c443258dccf50dcffc78d7ac5b", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=0504a333837e10f19454901fd060c0f99bf8f5b7", "patch": "@@ -5,6 +5,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::profiling::TimePassesFormat;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n use rustc_session::config::rustc_optgroups;\n+use rustc_session::config::DebugInfo;\n use rustc_session::config::Input;\n use rustc_session::config::InstrumentXRay;\n use rustc_session::config::TraitSolver;\n@@ -574,7 +575,7 @@ fn test_codegen_options_tracking_hash() {\n     tracked!(code_model, Some(CodeModel::Large));\n     tracked!(control_flow_guard, CFGuard::Checks);\n     tracked!(debug_assertions, Some(true));\n-    tracked!(debuginfo, 0xdeadbeef);\n+    tracked!(debuginfo, DebugInfo::Limited);\n     tracked!(embed_bitcode, false);\n     tracked!(force_frame_pointers, Some(false));\n     tracked!(force_unwind_tables, Some(true));"}, {"sha": "6a2fd5aa6e6a3d728150a1260bf7c3874aec13a8", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=0504a333837e10f19454901fd060c0f99bf8f5b7", "patch": "@@ -682,6 +682,7 @@ enum class LLVMRustDebugEmissionKind {\n   NoDebug,\n   FullDebug,\n   LineTablesOnly,\n+  DebugDirectivesOnly,\n };\n \n static DICompileUnit::DebugEmissionKind fromRust(LLVMRustDebugEmissionKind Kind) {\n@@ -692,6 +693,8 @@ static DICompileUnit::DebugEmissionKind fromRust(LLVMRustDebugEmissionKind Kind)\n     return DICompileUnit::DebugEmissionKind::FullDebug;\n   case LLVMRustDebugEmissionKind::LineTablesOnly:\n     return DICompileUnit::DebugEmissionKind::LineTablesOnly;\n+  case LLVMRustDebugEmissionKind::DebugDirectivesOnly:\n+    return DICompileUnit::DebugEmissionKind::DebugDirectivesOnly;\n   default:\n     report_fatal_error(\"bad DebugEmissionKind.\");\n   }"}, {"sha": "1d8fedb8bd7927b3b9a7ab292c7ab0e32a3a8ef6", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=0504a333837e10f19454901fd060c0f99bf8f5b7", "patch": "@@ -260,6 +260,8 @@ pub enum SymbolManglingVersion {\n #[derive(Clone, Copy, Debug, PartialEq, Hash)]\n pub enum DebugInfo {\n     None,\n+    LineDirectivesOnly,\n+    LineTablesOnly,\n     Limited,\n     Full,\n }\n@@ -1979,11 +1981,7 @@ fn parse_opt_level(\n     }\n }\n \n-fn select_debuginfo(\n-    matches: &getopts::Matches,\n-    cg: &CodegenOptions,\n-    error_format: ErrorOutputType,\n-) -> DebugInfo {\n+fn select_debuginfo(matches: &getopts::Matches, cg: &CodegenOptions) -> DebugInfo {\n     let max_g = matches.opt_positions(\"g\").into_iter().max();\n     let max_c = matches\n         .opt_strs_pos(\"C\")\n@@ -1993,24 +1991,7 @@ fn select_debuginfo(\n             if let Some(\"debuginfo\") = s.split('=').next() { Some(i) } else { None }\n         })\n         .max();\n-    if max_g > max_c {\n-        DebugInfo::Full\n-    } else {\n-        match cg.debuginfo {\n-            0 => DebugInfo::None,\n-            1 => DebugInfo::Limited,\n-            2 => DebugInfo::Full,\n-            arg => {\n-                early_error(\n-                    error_format,\n-                    &format!(\n-                        \"debug info level needs to be between \\\n-                         0-2 (instead was `{arg}`)\"\n-                    ),\n-                );\n-            }\n-        }\n-    }\n+    if max_g > max_c { DebugInfo::Full } else { cg.debuginfo }\n }\n \n pub(crate) fn parse_assert_incr_state(\n@@ -2498,7 +2479,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     // to use them interchangeably. See the note above (regarding `-O` and `-C opt-level`)\n     // for more details.\n     let debug_assertions = cg.debug_assertions.unwrap_or(opt_level == OptLevel::No);\n-    let debuginfo = select_debuginfo(matches, &cg, error_format);\n+    let debuginfo = select_debuginfo(matches, &cg);\n \n     let mut search_paths = vec![];\n     for s in &matches.opt_strs(\"L\") {"}, {"sha": "953d6561669feee3c8bfa55f66662d3768a572a6", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0504a333837e10f19454901fd060c0f99bf8f5b7/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=0504a333837e10f19454901fd060c0f99bf8f5b7", "patch": "@@ -377,6 +377,7 @@ mod desc {\n     pub const parse_cfguard: &str =\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n     pub const parse_cfprotection: &str = \"`none`|`no`|`n` (default), `branch`, `return`, or `full`|`yes`|`y` (equivalent to `branch` and `return`)\";\n+    pub const parse_debuginfo: &str = \"either an integer (0, 1, 2), `none`, `line-directives-only`, `line-tables-only`, `limited`, or `full`\";\n     pub const parse_strip: &str = \"either `none`, `debuginfo`, or `symbols`\";\n     pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavorCli::one_of();\n     pub const parse_optimization_fuel: &str = \"crate=integer\";\n@@ -767,6 +768,18 @@ mod parse {\n         true\n     }\n \n+    pub(crate) fn parse_debuginfo(slot: &mut DebugInfo, v: Option<&str>) -> bool {\n+        match v {\n+            Some(\"0\") | Some(\"none\") => *slot = DebugInfo::None,\n+            Some(\"line-directives-only\") => *slot = DebugInfo::LineDirectivesOnly,\n+            Some(\"line-tables-only\") => *slot = DebugInfo::LineTablesOnly,\n+            Some(\"1\") | Some(\"limited\") => *slot = DebugInfo::Limited,\n+            Some(\"2\") | Some(\"full\") => *slot = DebugInfo::Full,\n+            _ => return false,\n+        }\n+        true\n+    }\n+\n     pub(crate) fn parse_linker_flavor(slot: &mut Option<LinkerFlavorCli>, v: Option<&str>) -> bool {\n         match v.and_then(LinkerFlavorCli::from_str) {\n             Some(lf) => *slot = Some(lf),\n@@ -1217,9 +1230,9 @@ options! {\n         \"use Windows Control Flow Guard (default: no)\"),\n     debug_assertions: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"explicitly enable the `cfg(debug_assertions)` directive\"),\n-    debuginfo: usize = (0, parse_number, [TRACKED],\n-        \"debug info emission level (0 = no debug info, 1 = line tables only, \\\n-        2 = full debug info with variable and type information; default: 0)\"),\n+    debuginfo: DebugInfo = (DebugInfo::None, parse_debuginfo, [TRACKED],\n+        \"debug info emission level (0-2, none, line-directives-only, \\\n+        line-tables-only, limited, or full; default: 0)\"),\n     default_linker_libraries: bool = (false, parse_bool, [UNTRACKED],\n         \"allow the linker to link its default libraries (default: no)\"),\n     embed_bitcode: bool = (true, parse_bool, [TRACKED],"}, {"sha": "8b4f1cd2d41694ca9ff48bceabc4e681632bdb1c", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0504a333837e10f19454901fd060c0f99bf8f5b7/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/0504a333837e10f19454901fd060c0f99bf8f5b7/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=0504a333837e10f19454901fd060c0f99bf8f5b7", "patch": "@@ -71,9 +71,11 @@ If not specified, debug assertions are automatically enabled only if the\n This flag controls the generation of debug information. It takes one of the\n following values:\n \n-* `0`: no debug info at all (the default).\n-* `1`: line tables only.\n-* `2`: full debug info.\n+* `0` or `none`: no debug info at all (the default).\n+* `line-directives-only`: line info directives only.\n+* `line-tables-only`: line tables only.\n+* `1` or `limited`: debug info without type information.\n+* `2` or `full`: full debug info.\n \n Note: The [`-g` flag][option-g-debug] is an alias for `-C debuginfo=2`.\n "}, {"sha": "fafee0ef583a430b41a4834b094f611a1796e0a8", "filename": "tests/codegen/debug-limited.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0504a333837e10f19454901fd060c0f99bf8f5b7/tests%2Fcodegen%2Fdebug-limited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0504a333837e10f19454901fd060c0f99bf8f5b7/tests%2Fcodegen%2Fdebug-limited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fdebug-limited.rs?ref=0504a333837e10f19454901fd060c0f99bf8f5b7", "patch": "@@ -0,0 +1,28 @@\n+// Verify that the limited debuginfo option emits llvm's FullDebugInfo, but no type info.\n+//\n+// ignore-windows\n+// compile-flags: -C debuginfo=limited\n+\n+#[repr(C)]\n+struct StructType {\n+    a: i64,\n+    b: i32\n+}\n+\n+extern \"C\" {\n+    fn creator() -> *mut StructType;\n+    fn save(p: *const StructType);\n+}\n+\n+fn main() {\n+    unsafe {\n+        let value: &mut StructType = &mut* creator();\n+        value.a = 7;\n+        save(value as *const StructType)\n+    }\n+}\n+\n+// CHECK: !DICompileUnit\n+// CHECK: emissionKind: FullDebug\n+// CHECK: !DILocation\n+// CHECK-NOT: !DIBasicType"}, {"sha": "0dd22931b30a5af23b4669c40055bbc644d3bf70", "filename": "tests/codegen/debug-line-directives-only.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0504a333837e10f19454901fd060c0f99bf8f5b7/tests%2Fcodegen%2Fdebug-line-directives-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0504a333837e10f19454901fd060c0f99bf8f5b7/tests%2Fcodegen%2Fdebug-line-directives-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fdebug-line-directives-only.rs?ref=0504a333837e10f19454901fd060c0f99bf8f5b7", "patch": "@@ -0,0 +1,28 @@\n+// Verify that the only debuginfo generated are the line directives.\n+//\n+// ignore-windows\n+// compile-flags: -C debuginfo=line-directives-only\n+\n+#[repr(C)]\n+struct StructType {\n+    a: i64,\n+    b: i32\n+}\n+\n+extern \"C\" {\n+    fn creator() -> *mut StructType;\n+    fn save(p: *const StructType);\n+}\n+\n+fn main() {\n+    unsafe {\n+        let value: &mut StructType = &mut* creator();\n+        value.a = 7;\n+        save(value as *const StructType)\n+    }\n+}\n+\n+// CHECK: !DICompileUnit\n+// CHECK: emissionKind: DebugDirectivesOnly\n+// CHECK: !DILocation\n+// CHECK-NOT: !DIBasicType"}, {"sha": "3d109d4ae519fad43576b3a2c70effb49a4ad900", "filename": "tests/codegen/debug-line-tables-only.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0504a333837e10f19454901fd060c0f99bf8f5b7/tests%2Fcodegen%2Fdebug-line-tables-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0504a333837e10f19454901fd060c0f99bf8f5b7/tests%2Fcodegen%2Fdebug-line-tables-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fdebug-line-tables-only.rs?ref=0504a333837e10f19454901fd060c0f99bf8f5b7", "patch": "@@ -0,0 +1,28 @@\n+// Verify that the only debuginfo generated are the line tables.\n+//\n+// ignore-windows\n+// compile-flags: -C debuginfo=line-tables-only\n+\n+#[repr(C)]\n+struct StructType {\n+    a: i64,\n+    b: i32\n+}\n+\n+extern \"C\" {\n+    fn creator() -> *mut StructType;\n+    fn save(p: *const StructType);\n+}\n+\n+fn main() {\n+    unsafe {\n+        let value: &mut StructType = &mut* creator();\n+        value.a = 7;\n+        save(value as *const StructType)\n+    }\n+}\n+\n+// CHECK: !DICompileUnit\n+// CHECK: emissionKind: LineTablesOnly\n+// CHECK: !DILocation\n+// CHECK-NOT: !DIBasicType"}, {"sha": "0bd2d73efee531031ef9620d421642c755206a9c", "filename": "tests/rustdoc-ui/c-help.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0504a333837e10f19454901fd060c0f99bf8f5b7/tests%2Frustdoc-ui%2Fc-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0504a333837e10f19454901fd060c0f99bf8f5b7/tests%2Frustdoc-ui%2Fc-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fc-help.stdout?ref=0504a333837e10f19454901fd060c0f99bf8f5b7", "patch": "@@ -3,7 +3,7 @@\n     -C            codegen-units=val -- divide crate into N units to optimize in parallel\n     -C       control-flow-guard=val -- use Windows Control Flow Guard (default: no)\n     -C         debug-assertions=val -- explicitly enable the `cfg(debug_assertions)` directive\n-    -C                debuginfo=val -- debug info emission level (0 = no debug info, 1 = line tables only, 2 = full debug info with variable and type information; default: 0)\n+    -C                debuginfo=val -- debug info emission level (0-2, none, line-directives-only, line-tables-only, limited, or full; default: 0)\n     -C default-linker-libraries=val -- allow the linker to link its default libraries (default: no)\n     -C            embed-bitcode=val -- emit bitcode in rlibs (default: yes)\n     -C           extra-filename=val -- extra data to put in each output filename"}]}