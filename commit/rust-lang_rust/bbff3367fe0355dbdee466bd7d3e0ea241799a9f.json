{"sha": "bbff3367fe0355dbdee466bd7d3e0ea241799a9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZmYzMzY3ZmUwMzU1ZGJkZWU0NjZiZDdkM2UwZWEyNDE3OTlhOWY=", "commit": {"author": {"name": "Ximin Luo", "email": "infinity0@pwned.gg", "date": "2016-07-14T17:39:55Z"}, "committer": {"name": "Ximin Luo", "email": "infinity0@pwned.gg", "date": "2016-07-15T17:37:22Z"}, "message": "rustbuild: If local-rust is the same as the current version, then force a local-rebuild", "tree": {"sha": "6288ecb3546e8be7841ae67f4e54eae501d2328f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6288ecb3546e8be7841ae67f4e54eae501d2328f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbff3367fe0355dbdee466bd7d3e0ea241799a9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbff3367fe0355dbdee466bd7d3e0ea241799a9f", "html_url": "https://github.com/rust-lang/rust/commit/bbff3367fe0355dbdee466bd7d3e0ea241799a9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbff3367fe0355dbdee466bd7d3e0ea241799a9f/comments", "author": {"login": "infinity0", "id": 78398, "node_id": "MDQ6VXNlcjc4Mzk4", "avatar_url": "https://avatars.githubusercontent.com/u/78398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/infinity0", "html_url": "https://github.com/infinity0", "followers_url": "https://api.github.com/users/infinity0/followers", "following_url": "https://api.github.com/users/infinity0/following{/other_user}", "gists_url": "https://api.github.com/users/infinity0/gists{/gist_id}", "starred_url": "https://api.github.com/users/infinity0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/infinity0/subscriptions", "organizations_url": "https://api.github.com/users/infinity0/orgs", "repos_url": "https://api.github.com/users/infinity0/repos", "events_url": "https://api.github.com/users/infinity0/events{/privacy}", "received_events_url": "https://api.github.com/users/infinity0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "infinity0", "id": 78398, "node_id": "MDQ6VXNlcjc4Mzk4", "avatar_url": "https://avatars.githubusercontent.com/u/78398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/infinity0", "html_url": "https://github.com/infinity0", "followers_url": "https://api.github.com/users/infinity0/followers", "following_url": "https://api.github.com/users/infinity0/following{/other_user}", "gists_url": "https://api.github.com/users/infinity0/gists{/gist_id}", "starred_url": "https://api.github.com/users/infinity0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/infinity0/subscriptions", "organizations_url": "https://api.github.com/users/infinity0/orgs", "repos_url": "https://api.github.com/users/infinity0/repos", "events_url": "https://api.github.com/users/infinity0/events{/privacy}", "received_events_url": "https://api.github.com/users/infinity0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c850470f73b21d55842801f69e83546d7dd727a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c850470f73b21d55842801f69e83546d7dd727a7", "html_url": "https://github.com/rust-lang/rust/commit/c850470f73b21d55842801f69e83546d7dd727a7"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "caa6ea17ea0544d6f6a5c263239e4548ad469db4", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbff3367fe0355dbdee466bd7d3e0ea241799a9f/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbff3367fe0355dbdee466bd7d3e0ea241799a9f/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=bbff3367fe0355dbdee466bd7d3e0ea241799a9f", "patch": "@@ -118,6 +118,7 @@ pub struct Build {\n     ver_date: Option<String>,\n     version: String,\n     package_vers: String,\n+    local_rebuild: bool,\n     bootstrap_key: String,\n     bootstrap_key_stage0: String,\n \n@@ -174,6 +175,7 @@ impl Build {\n             Some(ref s) => PathBuf::from(s),\n             None => stage0_root.join(exe(\"cargo\", &config.build)),\n         };\n+        let local_rebuild = config.local_rebuild;\n \n         Build {\n             flags: flags,\n@@ -189,6 +191,7 @@ impl Build {\n             short_ver_hash: None,\n             ver_date: None,\n             version: String::new(),\n+            local_rebuild: local_rebuild,\n             bootstrap_key: String::new(),\n             bootstrap_key_stage0: String::new(),\n             package_vers: String::new(),\n@@ -219,6 +222,16 @@ impl Build {\n         sanity::check(self);\n         self.verbose(\"collecting channel variables\");\n         channel::collect(self);\n+        // If local-rust is the same as the current version, then force a local-rebuild\n+        let local_version_verbose = output(\n+            Command::new(&self.rustc).arg(\"--version\").arg(\"--verbose\"));\n+        let local_release = local_version_verbose\n+            .lines().filter(|x| x.starts_with(\"release:\"))\n+            .next().unwrap().trim_left_matches(\"release:\").trim();\n+        if local_release == self.release {\n+            self.verbose(&format!(\"auto-detected local-rebuild {}\", self.release));\n+            self.local_rebuild = true;\n+        }\n         self.verbose(\"updating submodules\");\n         self.update_submodules();\n \n@@ -525,7 +538,7 @@ impl Build {\n              .arg(\"--target\").arg(target);\n \n         let stage;\n-        if compiler.stage == 0 && self.config.local_rebuild {\n+        if compiler.stage == 0 && self.local_rebuild {\n             // Assume the local-rebuild rustc already has stage1 features.\n             stage = 1;\n         } else {\n@@ -766,7 +779,7 @@ impl Build {\n         // In stage0 we're using a previously released stable compiler, so we\n         // use the stage0 bootstrap key. Otherwise we use our own build's\n         // bootstrap key.\n-        let bootstrap_key = if compiler.is_snapshot(self) && !self.config.local_rebuild {\n+        let bootstrap_key = if compiler.is_snapshot(self) && !self.local_rebuild {\n             &self.bootstrap_key_stage0\n         } else {\n             &self.bootstrap_key"}]}