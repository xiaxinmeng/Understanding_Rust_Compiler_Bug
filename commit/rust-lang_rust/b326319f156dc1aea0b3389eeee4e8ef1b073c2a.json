{"sha": "b326319f156dc1aea0b3389eeee4e8ef1b073c2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMjYzMTlmMTU2ZGMxYWVhMGIzMzg5ZWVlZTRlOGVmMWIwNzNjMmE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-28T08:24:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-28T08:24:59Z"}, "message": "Rollup merge of #52759 - stjepang:impl-send-sync-for-joinhandle, r=TimNN\n\nImpl Send & Sync for JoinHandle\n\nThis is just a cosmetic change - it slightly relaxes and clarifies the public API without effectively promising any new guarantees.\n\nCurrently we have [these auto trait implementations](https://doc.rust-lang.org/nightly/std/thread/struct.JoinHandle.html#synthetic-implementations):\n\n```rust\nimpl<T: Send> Send for JoinHandle<T> {}\nimpl<T: Sync> Sync for JoinHandle<T> {}\n```\n\nBound `T: Send` doesn't make much sense because `JoinHandle<T>` can be created only when `T: Send`. Note that [`JoinHandle::<T>::join`](https://doc.rust-lang.org/nightly/std/thread/struct.JoinHandle.html#method.join) doesn't require `T: Send` so why should the `Send` impl?\n\nAnd the `Sync` impl doesn't need `T: Sync` because `JoinHandle<T>` cannot even share `T` - it can only send it to the thread that calls `join`.", "tree": {"sha": "b75c7d94f9f277068a4b7787cdb1b8cdeb9cc5f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b75c7d94f9f277068a4b7787cdb1b8cdeb9cc5f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b326319f156dc1aea0b3389eeee4e8ef1b073c2a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbXChcCRBK7hj4Ov3rIwAAdHIIAFehQE1BIXgOfOWfiyzuekAc\noE4HKH8fcXwtmwBm26D/ueXdXmcB7u1G8K/ku3YiAe5wcGNsir/M6RjozemzLS3t\nOFm2n5UTMmREQIaZ/Vte58NF/fD1pG7H3KmxyQUhcwH8FbCnweKuqCNHDOq9dQFS\nzh6bytfPTtBD4RAR7VRBk2c0UFSTpIRk9s/w2PPistr+YkBooPky+F1nVNdBDlj2\ngM1ewG8L46onKxRzqWtnn8Buubgm+t26Fr/pY5ubO7L/SPZEamFdHWua9vM4vD2q\nG5bLlkCeUdGvxX2paj3vrPo3QUF6d/ZdwFK3bra2RB4c2Q5xrshb6TT4r57FibU=\n=yz4j\n-----END PGP SIGNATURE-----\n", "payload": "tree b75c7d94f9f277068a4b7787cdb1b8cdeb9cc5f6\nparent b584c3227d311f591d05ad442c08811884e99f1b\nparent 688db1df80b9754c28b79abb141e381861402fca\nauthor kennytm <kennytm@gmail.com> 1532766299 +0800\ncommitter GitHub <noreply@github.com> 1532766299 +0800\n\nRollup merge of #52759 - stjepang:impl-send-sync-for-joinhandle, r=TimNN\n\nImpl Send & Sync for JoinHandle\n\nThis is just a cosmetic change - it slightly relaxes and clarifies the public API without effectively promising any new guarantees.\n\nCurrently we have [these auto trait implementations](https://doc.rust-lang.org/nightly/std/thread/struct.JoinHandle.html#synthetic-implementations):\n\n```rust\nimpl<T: Send> Send for JoinHandle<T> {}\nimpl<T: Sync> Sync for JoinHandle<T> {}\n```\n\nBound `T: Send` doesn't make much sense because `JoinHandle<T>` can be created only when `T: Send`. Note that [`JoinHandle::<T>::join`](https://doc.rust-lang.org/nightly/std/thread/struct.JoinHandle.html#method.join) doesn't require `T: Send` so why should the `Send` impl?\n\nAnd the `Sync` impl doesn't need `T: Sync` because `JoinHandle<T>` cannot even share `T` - it can only send it to the thread that calls `join`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b326319f156dc1aea0b3389eeee4e8ef1b073c2a", "html_url": "https://github.com/rust-lang/rust/commit/b326319f156dc1aea0b3389eeee4e8ef1b073c2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b326319f156dc1aea0b3389eeee4e8ef1b073c2a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b584c3227d311f591d05ad442c08811884e99f1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b584c3227d311f591d05ad442c08811884e99f1b", "html_url": "https://github.com/rust-lang/rust/commit/b584c3227d311f591d05ad442c08811884e99f1b"}, {"sha": "688db1df80b9754c28b79abb141e381861402fca", "url": "https://api.github.com/repos/rust-lang/rust/commits/688db1df80b9754c28b79abb141e381861402fca", "html_url": "https://github.com/rust-lang/rust/commit/688db1df80b9754c28b79abb141e381861402fca"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "ae804ad409ee311fdbb73b7b582cd9b2176b1974", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b326319f156dc1aea0b3389eeee4e8ef1b073c2a/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b326319f156dc1aea0b3389eeee4e8ef1b073c2a/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=b326319f156dc1aea0b3389eeee4e8ef1b073c2a", "patch": "@@ -1276,6 +1276,11 @@ impl<T> JoinInner<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct JoinHandle<T>(JoinInner<T>);\n \n+#[stable(feature = \"joinhandle_impl_send_sync\", since = \"1.29.0\")]\n+unsafe impl<T> Send for JoinHandle<T> {}\n+#[stable(feature = \"joinhandle_impl_send_sync\", since = \"1.29.0\")]\n+unsafe impl<T> Sync for JoinHandle<T> {}\n+\n impl<T> JoinHandle<T> {\n     /// Extracts a handle to the underlying thread.\n     ///"}]}