{"sha": "4575ee13cab3050afe41adf1743d4c07ebf385ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NzVlZTEzY2FiMzA1MGFmZTQxYWRmMTc0M2Q0YzA3ZWJmMzg1ZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-13T09:31:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-13T09:31:32Z"}, "message": "Auto merge of #1448 - RalfJung:rustup, r=RalfJung\n\nrustup; and a bit of UnsafeCell detection refactoring", "tree": {"sha": "51389419fdf77b2d7fc82ef3e861ebc8a8c79c97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51389419fdf77b2d7fc82ef3e861ebc8a8c79c97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4575ee13cab3050afe41adf1743d4c07ebf385ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4575ee13cab3050afe41adf1743d4c07ebf385ee", "html_url": "https://github.com/rust-lang/rust/commit/4575ee13cab3050afe41adf1743d4c07ebf385ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4575ee13cab3050afe41adf1743d4c07ebf385ee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e26029a596f3e5b17230fd23e8c9b6c9a7565fb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e26029a596f3e5b17230fd23e8c9b6c9a7565fb0", "html_url": "https://github.com/rust-lang/rust/commit/e26029a596f3e5b17230fd23e8c9b6c9a7565fb0"}, {"sha": "e063ce27370e217f37905620edaaec73e1bbc618", "url": "https://api.github.com/repos/rust-lang/rust/commits/e063ce27370e217f37905620edaaec73e1bbc618", "html_url": "https://github.com/rust-lang/rust/commit/e063ce27370e217f37905620edaaec73e1bbc618"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "017196c1669d3c8275743b3147ccebc627cb7a64", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4575ee13cab3050afe41adf1743d4c07ebf385ee/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/4575ee13cab3050afe41adf1743d4c07ebf385ee/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=4575ee13cab3050afe41adf1743d4c07ebf385ee", "patch": "@@ -1 +1 @@\n-50c0192c64241d723066add22c53d472e2b9cba9\n+1fb612bd15bb3ef098fd24c20d0727de573b4410"}, {"sha": "4e5e0dcfca256f3021d55e83b3372c6c69a9b55c", "filename": "src/helpers.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4575ee13cab3050afe41adf1743d4c07ebf385ee/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4575ee13cab3050afe41adf1743d4c07ebf385ee/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=4575ee13cab3050afe41adf1743d4c07ebf385ee", "patch": "@@ -291,6 +291,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 } else if self.ecx.type_is_freeze(v.layout.ty) {\n                     // This is `Freeze`, there cannot be an `UnsafeCell`\n                     Ok(())\n+                } else if matches!(v.layout.fields, FieldsShape::Union(..)) {\n+                    // A (non-frozen) union. We fall back to whatever the type says.\n+                    (self.unsafe_cell_action)(v)\n                 } else {\n                     // We want to not actually read from memory for this visit. So, before\n                     // walking this value, we have to make sure it is not a\n@@ -341,13 +344,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n \n-            // We have to do *something* for unions.\n-            fn visit_union(&mut self, v: MPlaceTy<'tcx, Tag>, _fields: NonZeroUsize) -> InterpResult<'tcx> {\n-                // With unions, we fall back to whatever the type says, to hopefully be consistent\n-                // with LLVM IR.\n-                // FIXME: are we consistent, and is this really the behavior we want?\n-                let frozen = self.ecx.type_is_freeze(v.layout.ty);\n-                if frozen { Ok(()) } else { (self.unsafe_cell_action)(v) }\n+            fn visit_union(&mut self, _v: MPlaceTy<'tcx, Tag>, _fields: NonZeroUsize) -> InterpResult<'tcx> {\n+                bug!(\"we should have already handled unions in `visit_value`\")\n             }\n         }\n     }"}]}