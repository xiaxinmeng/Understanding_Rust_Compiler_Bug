{"sha": "4e2c8f422aec1aef910fdfdac57f5f66a7465355", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMmM4ZjQyMmFlYzFhZWY5MTBmZGZkYWM1N2Y1ZjY2YTc0NjUzNTU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-25T00:37:59Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-25T00:51:31Z"}, "message": "rustpkg: Preliminary work on install command\n\nMostly just tests (that are ignored); install command is still\nstubbed out.", "tree": {"sha": "fb63b27dcf1fe7ce2bc366e7ed70d57ff0414535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb63b27dcf1fe7ce2bc366e7ed70d57ff0414535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e2c8f422aec1aef910fdfdac57f5f66a7465355", "comment_count": 8, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2c8f422aec1aef910fdfdac57f5f66a7465355", "html_url": "https://github.com/rust-lang/rust/commit/4e2c8f422aec1aef910fdfdac57f5f66a7465355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e2c8f422aec1aef910fdfdac57f5f66a7465355/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f945e57bd050227bbf92f151303785991173f2fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f945e57bd050227bbf92f151303785991173f2fe", "html_url": "https://github.com/rust-lang/rust/commit/f945e57bd050227bbf92f151303785991173f2fe"}], "stats": {"total": 205, "additions": 175, "deletions": 30}, "files": [{"sha": "35e70af7914c1b972230005c499251d0074f7a94", "filename": "src/librustpkg/conditions.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e2c8f422aec1aef910fdfdac57f5f66a7465355/src%2Flibrustpkg%2Fconditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2c8f422aec1aef910fdfdac57f5f66a7465355/src%2Flibrustpkg%2Fconditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fconditions.rs?ref=4e2c8f422aec1aef910fdfdac57f5f66a7465355", "patch": "@@ -11,7 +11,12 @@\n // Useful conditions\n \n pub use core::path::Path;\n+pub use util::PkgId;\n \n condition! {\n     bad_path: (super::Path, ~str) -> super::Path;\n }\n+\n+condition! {\n+    nonexistent_package: (super::PkgId, ~str) -> super::Path;\n+}"}, {"sha": "db036f44a185b557e1cc21d37fbd5ba6c445f796", "filename": "src/librustpkg/context.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4e2c8f422aec1aef910fdfdac57f5f66a7465355/src%2Flibrustpkg%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2c8f422aec1aef910fdfdac57f5f66a7465355/src%2Flibrustpkg%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fcontext.rs?ref=4e2c8f422aec1aef910fdfdac57f5f66a7465355", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Context data structure used by rustpkg\n+\n+use core::hashmap::HashMap;\n+\n+pub struct Ctx {\n+    // I'm not sure what this is for\n+    json: bool,\n+    // Cache of hashes of things already installed\n+    // though I'm not sure why the value is a bool\n+    dep_cache: @mut HashMap<~str, bool>,\n+}"}, {"sha": "e1edce6ce5b6a4297ed2ebe53f79d669f93f47d1", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4e2c8f422aec1aef910fdfdac57f5f66a7465355/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/4e2c8f422aec1aef910fdfdac57f5f66a7465355/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=4e2c8f422aec1aef910fdfdac57f5f66a7465355", "patch": "@@ -36,14 +36,19 @@ use rustc::metadata::filesearch;\n use std::{getopts};\n use syntax::{ast, diagnostic};\n use util::*;\n-use path_util::{normalize, workspace_contains_package_id};\n-use path_util::{build_pkg_id_in_workspace, pkgid_src_in_workspace, rust_path};\n+use path_util::normalize;\n+use path_util::{build_pkg_id_in_workspace, pkgid_src_in_workspace};\n+use workspace::pkg_parent_workspaces;\n use rustc::driver::session::{lib_crate, bin_crate, crate_type};\n+use context::Ctx;\n \n mod conditions;\n+mod context;\n mod usage;\n mod path_util;\n+mod tests;\n mod util;\n+mod workspace;\n \n /// A PkgScript represents user-supplied custom logic for\n /// special build hooks. This only exists for packages with\n@@ -154,14 +159,6 @@ impl PkgScript {\n \n }\n \n-struct Ctx {\n-    // I'm not sure what this is for\n-    json: bool,\n-    // Cache of hashes of things already installed\n-    // though I'm not sure why the value is a bool\n-    dep_cache: @mut HashMap<~str, bool>,\n-}\n-\n impl Ctx {\n \n     fn run(&self, cmd: ~str, args: ~[~str]) {\n@@ -194,17 +191,7 @@ impl Ctx {\n                 // The package id is presumed to be the first command-line\n                 // argument\n                 let pkgid = PkgId::new(args[0]);\n-                // Using the RUST_PATH, find workspaces that contain\n-                // this package ID\n-                let workspaces = rust_path().filtered(|ws|\n-                    workspace_contains_package_id(pkgid, ws));\n-                if workspaces.is_empty() {\n-                    fail!(fmt!(\"Package %s not found in any of \\\n-                        the following workspaces: %s\",\n-                               pkgid.path.to_str(),\n-                               rust_path().to_str()));\n-                }\n-                for workspaces.each |workspace| {\n+                for pkg_parent_workspaces(pkgid) |workspace| {\n                     let src_dir   = pkgid_src_in_workspace(pkgid, workspace);\n                     let build_dir = build_pkg_id_in_workspace(pkgid, workspace);\n                     debug!(\"Destination dir = %s\", build_dir.to_str());\n@@ -271,10 +258,16 @@ impl Ctx {\n                 self.info();\n             }\n             ~\"install\" => {\n-                self.install(if args.len() >= 1 { Some(args[0]) }\n-                             else { None },\n-                             if args.len() >= 2 { Some(args[1]) }\n-                             else { None }, false);\n+                if args.len() < 1 {\n+                    return usage::install();\n+                }\n+\n+                // The package id is presumed to be the first command-line\n+                // argument\n+                let pkgid = PkgId::new(args[0]);\n+                for pkg_parent_workspaces(pkgid) |workspace| {\n+                    self.install(workspace, pkgid);\n+                }\n             }\n             ~\"prefer\" => {\n                 if args.len() < 1 {\n@@ -310,9 +303,9 @@ impl Ctx {\n         }\n     }\n \n-    fn do_cmd(&self, cmd: ~str, pkgname: ~str)  {\n+    fn do_cmd(&self, _cmd: ~str, _pkgname: ~str)  {\n         // stub\n-        fail!(\"`do` not yet implemented\");\n+        fail!(~\"`do` not yet implemented\");\n     }\n \n     fn clean(&self, workspace: &Path, id: PkgId)  {\n@@ -336,8 +329,7 @@ impl Ctx {\n         fail!(~\"info not yet implemented\");\n     }\n \n-    fn install(&self, _url: Option<~str>,\n-               _target: Option<~str>, _cache: bool)  {\n+    fn install(&self, _workspace: &Path, _id: PkgId)  {\n         // stub\n         fail!(~\"install not yet implemented\");\n     }"}, {"sha": "70c03c845ce600b23c27069c7cb77fe863f8f94a", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/4e2c8f422aec1aef910fdfdac57f5f66a7465355/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2c8f422aec1aef910fdfdac57f5f66a7465355/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=4e2c8f422aec1aef910fdfdac57f5f66a7465355", "patch": "@@ -9,3 +9,96 @@\n // except according to those terms.\n \n // rustpkg unit tests\n+\n+use context::Ctx;\n+use core::hashmap::HashMap;\n+use core::path::Path;\n+use core::os;\n+use core::io;\n+use core::option::*;\n+use std::tempfile::mkdtemp;\n+use util::{PkgId, default_version};\n+use path_util::{target_executable_in_workspace, target_library_in_workspace,\n+               target_test_in_workspace, target_bench_in_workspace,\n+               make_dir_rwx};\n+\n+fn fake_ctxt() -> Ctx {\n+    Ctx {\n+        json: false,\n+        dep_cache: @mut HashMap::new()\n+    }\n+}\n+\n+fn fake_pkg() -> PkgId {\n+    PkgId {\n+        path: Path(~\"bogus\"),\n+        version: default_version()\n+    }\n+}\n+\n+fn mk_temp_workspace() -> Path {\n+    mkdtemp(&os::tmpdir(), \"test\").expect(\"couldn't create temp dir\")\n+}\n+\n+fn is_rwx(p: &Path) -> bool {\n+    use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+\n+    match p.get_mode() {\n+        None => return false,\n+        Some(m) => {\n+            ((m & S_IRUSR as uint) == S_IRUSR as uint\n+            && (m & S_IWUSR as uint) == S_IWUSR as uint\n+            && (m & S_IXUSR as uint) == S_IXUSR as uint)\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_make_dir_rwx() {\n+    let temp = &os::tmpdir();\n+    let dir = temp.push(~\"quux\");\n+    let _ = os::remove_dir(&dir);\n+    assert!(make_dir_rwx(&dir));\n+    assert!(os::path_is_dir(&dir));\n+    assert!(is_rwx(&dir));\n+    assert!(os::remove_dir(&dir));\n+}\n+\n+#[test]\n+#[ignore(reason = \"install not yet implemented\")]\n+fn test_install_valid() {\n+    let ctxt = fake_ctxt();\n+    let temp_pkg_id = fake_pkg();\n+    let temp_workspace() = mk_temp_workspace();\n+    // should have test, bench, lib, and main\n+    ctxt.install(&temp_workspace, temp_pkg_id);\n+    // Check that all files exist\n+    let exec = target_executable_in_workspace(temp_pkg_id, &temp_workspace);\n+    assert!(os::path_exists(&exec));\n+    assert!(is_rwx(&exec));\n+    let lib = target_library_in_workspace(temp_pkg_id, &temp_workspace);\n+    assert!(os::path_exists(&lib));\n+    assert!(is_rwx(&lib));\n+    // And that the test and bench executables aren't installed\n+    assert!(!os::path_exists(&target_test_in_workspace(temp_pkg_id, &temp_workspace)));\n+    assert!(!os::path_exists(&target_bench_in_workspace(temp_pkg_id, &temp_workspace)));\n+}\n+\n+#[test]\n+#[ignore(reason = \"install not yet implemented\")]\n+fn test_install_invalid() {\n+    use conditions::nonexistent_package::cond;\n+\n+    let ctxt = fake_ctxt();\n+    let pkgid = fake_pkg();\n+    let temp_workspace = mk_temp_workspace();\n+    let expected_path = Path(~\"quux\");\n+    let substituted: Path = do cond.trap(|_| {\n+        expected_path\n+    }).in {\n+        ctxt.install(&temp_workspace, pkgid);\n+        // ok\n+        fail!(~\"test_install_invalid failed, should have raised a condition\");\n+    };\n+    assert!(substituted == expected_path);\n+}\n\\ No newline at end of file"}, {"sha": "28198e59f86d4a4c0be2a449ba0bf61739ac576c", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e2c8f422aec1aef910fdfdac57f5f66a7465355/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2c8f422aec1aef910fdfdac57f5f66a7465355/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=4e2c8f422aec1aef910fdfdac57f5f66a7465355", "patch": "@@ -78,7 +78,7 @@ impl ToStr for Version {\n }\n \n /// Placeholder\n-fn default_version() -> Version { ExactRevision(0.1) }\n+pub fn default_version() -> Version { ExactRevision(0.1) }\n \n // Path-fragment identifier of a package such as\n // 'github.com/graydon/test'; path must be a relative"}, {"sha": "15e2166b24abe1000d38dd4f49742fde97f87c99", "filename": "src/librustpkg/workspace.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4e2c8f422aec1aef910fdfdac57f5f66a7465355/src%2Flibrustpkg%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2c8f422aec1aef910fdfdac57f5f66a7465355/src%2Flibrustpkg%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fworkspace.rs?ref=4e2c8f422aec1aef910fdfdac57f5f66a7465355", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// rustpkg utilities having to do with workspaces\n+\n+use path_util::{rust_path, workspace_contains_package_id};\n+use util::PkgId;\n+use core::path::Path;\n+\n+pub fn pkg_parent_workspaces(pkgid: PkgId, action: &fn(&Path) -> bool) {\n+    // Using the RUST_PATH, find workspaces that contain\n+    // this package ID\n+    let workspaces = rust_path().filtered(|ws|\n+        workspace_contains_package_id(pkgid, ws));\n+    if workspaces.is_empty() {\n+        // tjc: make this a condition\n+        fail!(fmt!(\"Package %s not found in any of \\\n+                    the following workspaces: %s\",\n+                   pkgid.path.to_str(),\n+                   rust_path().to_str()));\n+    }\n+    for workspaces.each |ws| {\n+        if action(ws) {\n+            break;\n+        }\n+    }\n+}\n\\ No newline at end of file"}]}